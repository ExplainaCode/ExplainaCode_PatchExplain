record_number,buggy_code,fixed_code
43001,"protected RiverObjectInputStream(final RiverUnmarshaller riverUnmarshaller,final Unmarshaller delegateUnmarshaller) throws IOException, SecurityException {
  super(delegateUnmarshaller);
  unmarshaller=riverUnmarshaller;
}","protected RiverObjectInputStream(final RiverUnmarshaller riverUnmarshaller,final BlockUnmarshaller delegateUnmarshaller) throws IOException, SecurityException {
  super(delegateUnmarshaller);
  unmarshaller=riverUnmarshaller;
  blockUnmarshaller=delegateUnmarshaller;
}"
43002,"private void doInitSerializable(final Object obj,final SerializableClassDescriptor descriptor) throws IOException, ClassNotFoundException {
  final Class<?> type=descriptor.getType();
  final SerializableClass info=registry.lookup(type);
  final ClassDescriptor superDescriptor=descriptor.getSuperClassDescriptor();
  if (superDescriptor instanceof SerializableClassDescriptor) {
    final SerializableClassDescriptor serializableSuperDescriptor=(SerializableClassDescriptor)superDescriptor;
    doInitSerializable(obj,serializableSuperDescriptor);
  }
  final int typeId=descriptor.getTypeID();
  final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
  if (descriptor.isGap()) {
    if (info.hasReadObjectNoData()) {
      info.callReadObjectNoData(obj);
    }
  }
 else   if (info.hasReadObject()) {
    final RiverObjectInputStream objectInputStream=getObjectInputStream();
    final SerializableClassDescriptor oldDescriptor=objectInputStream.swapClass(descriptor);
    final Object oldObj=objectInputStream.swapCurrent(obj);
    final RiverObjectInputStream.State restoreState=objectInputStream.start();
    boolean ok=false;
    try {
      if (typeId == ID_WRITE_OBJECT_CLASS) {
        info.callReadObject(obj,objectInputStream);
        blockUnmarshaller.readToEndBlockData();
        blockUnmarshaller.unblock();
      }
 else {
        blockUnmarshaller.endOfStream();
        info.callReadObject(obj,objectInputStream);
      }
      objectInputStream.finish(restoreState);
      objectInputStream.swapCurrent(oldObj);
      objectInputStream.swapClass(oldDescriptor);
      ok=true;
    }
  finally {
      if (!ok) {
        objectInputStream.fullReset();
      }
    }
  }
 else {
    readFields(obj,descriptor);
    if (typeId == ID_WRITE_OBJECT_CLASS) {
      blockUnmarshaller.readToEndBlockData();
      blockUnmarshaller.unblock();
    }
  }
}","private void doInitSerializable(final Object obj,final SerializableClassDescriptor descriptor) throws IOException, ClassNotFoundException {
  final Class<?> type=descriptor.getType();
  final SerializableClass info=registry.lookup(type);
  final ClassDescriptor superDescriptor=descriptor.getSuperClassDescriptor();
  if (superDescriptor instanceof SerializableClassDescriptor) {
    final SerializableClassDescriptor serializableSuperDescriptor=(SerializableClassDescriptor)superDescriptor;
    doInitSerializable(obj,serializableSuperDescriptor);
  }
  final int typeId=descriptor.getTypeID();
  final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
  if (descriptor.isGap()) {
    if (info.hasReadObjectNoData()) {
      info.callReadObjectNoData(obj);
    }
  }
 else   if (info.hasReadObject()) {
    final RiverObjectInputStream objectInputStream=getObjectInputStream();
    final SerializableClassDescriptor oldDescriptor=objectInputStream.swapClass(descriptor);
    final Object oldObj=objectInputStream.swapCurrent(obj);
    final RiverObjectInputStream.State restoreState=objectInputStream.start();
    boolean ok=false;
    try {
      if (typeId == ID_WRITE_OBJECT_CLASS) {
        info.callReadObject(obj,objectInputStream);
        blockUnmarshaller.readToEndBlockData();
        blockUnmarshaller.unblock();
      }
 else {
        objectInputStream.noCustomData();
        info.callReadObject(obj,objectInputStream);
        blockUnmarshaller.restore(objectInputStream.getRestoreIdx());
      }
      objectInputStream.finish(restoreState);
      objectInputStream.swapCurrent(oldObj);
      objectInputStream.swapClass(oldDescriptor);
      ok=true;
    }
  finally {
      if (!ok) {
        objectInputStream.fullReset();
      }
    }
  }
 else {
    readFields(obj,descriptor);
    if (typeId == ID_WRITE_OBJECT_CLASS) {
      blockUnmarshaller.readToEndBlockData();
      blockUnmarshaller.unblock();
    }
  }
}"
43003,"void toString(final StringBuilder builder){
  final Info cause=this.cause;
  if (cause != null) {
    cause.toString(builder);
  }
  builder.append(""String_Node_Str"").append(fieldName);
}","void toString(final StringBuilder builder){
  final Info cause=this.getCause();
  if (cause != null) {
    cause.toString(builder);
  }
  builder.append(""String_Node_Str"").append(fieldName);
}"
43004,"@SuppressWarnings({""String_Node_Str""}) Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case ID_NULL:
{
        return null;
      }
case ID_REPEAT_OBJECT_FAR:
{
      if (unshared) {
        throw new InvalidObjectException(""String_Node_Str"");
      }
      final int index=readInt();
      try {
        final Object obj=instanceCache.get(index);
        if (obj != null)         return obj;
      }
 catch (      IndexOutOfBoundsException e) {
      }
      throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
    }
case ID_REPEAT_OBJECT_NEAR:
{
    if (unshared) {
      throw new InvalidObjectException(""String_Node_Str"");
    }
    final int index=readByte() | 0xffffff00;
    try {
      final Object obj=instanceCache.get(index + instanceCache.size());
      if (obj != null)       return obj;
    }
 catch (    IndexOutOfBoundsException e) {
    }
    throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
case ID_REPEAT_OBJECT_NEARISH:
{
  if (unshared) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  final int index=readShort() | 0xffff0000;
  try {
    final Object obj=instanceCache.get(index + instanceCache.size());
    if (obj != null)     return obj;
  }
 catch (  IndexOutOfBoundsException e) {
  }
  throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
}
case ID_NEW_OBJECT:
case ID_NEW_OBJECT_UNSHARED:
{
if (unshared != (leadByte == ID_NEW_OBJECT_UNSHARED)) {
  throw sharedMismatch();
}
return doReadNewObject(readUnsignedByte(),unshared);
}
case ID_STRING_EMPTY:
{
return ""String_Node_Str"";
}
case ID_STRING_SMALL:
{
int length=readUnsignedByte();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x100 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_MEDIUM:
{
int length=readUnsignedShort();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x10000 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_LARGE:
{
int length=readInt();
if (length <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + length + ""String_Node_Str"");
}
final String s=UTFUtils.readUTFBytes(this,length);
instanceCache.add(s);
return s;
}
case ID_ARRAY_EMPTY:
case ID_ARRAY_EMPTY_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_EMPTY_UNSHARED)) {
throw sharedMismatch();
}
final ArrayList<Object> instanceCache=this.instanceCache;
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Array.newInstance(doReadClassDescriptor(readUnsignedByte()).getType(),0);
instanceCache.set(idx,obj);
final Object resolvedObject=objectResolver.readResolve(obj);
if (unshared) {
instanceCache.set(idx,null);
}
 else if (obj != resolvedObject) {
instanceCache.set(idx,resolvedObject);
}
return obj;
}
case ID_ARRAY_SMALL:
case ID_ARRAY_SMALL_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_SMALL_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedByte();
return doReadArray(len == 0 ? 0x100 : len,unshared);
}
case ID_ARRAY_MEDIUM:
case ID_ARRAY_MEDIUM_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_MEDIUM_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedShort();
return doReadArray(len == 0 ? 0x10000 : len,unshared);
}
case ID_ARRAY_LARGE:
case ID_ARRAY_LARGE_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_LARGE_UNSHARED)) {
throw sharedMismatch();
}
final int len=readInt();
if (len <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + len + ""String_Node_Str"");
}
return doReadArray(len,unshared);
}
case ID_PREDEFINED_OBJECT:
{
if (unshared) {
throw new InvalidObjectException(""String_Node_Str"");
}
if (version == 1) {
final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
final Object obj=objectTable.readObject(blockUnmarshaller);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
return obj;
}
 else {
return objectTable.readObject(this);
}
}
case ID_BOOLEAN_OBJECT_TRUE:
{
return objectResolver.readResolve(Boolean.TRUE);
}
case ID_BOOLEAN_OBJECT_FALSE:
{
return objectResolver.readResolve(Boolean.FALSE);
}
case ID_BYTE_OBJECT:
{
return objectResolver.readResolve(Byte.valueOf(readByte()));
}
case ID_SHORT_OBJECT:
{
return objectResolver.readResolve(Short.valueOf(readShort()));
}
case ID_INTEGER_OBJECT:
{
return objectResolver.readResolve(Integer.valueOf(readInt()));
}
case ID_LONG_OBJECT:
{
return objectResolver.readResolve(Long.valueOf(readLong()));
}
case ID_FLOAT_OBJECT:
{
return objectResolver.readResolve(Float.valueOf(readFloat()));
}
case ID_DOUBLE_OBJECT:
{
return objectResolver.readResolve(Double.valueOf(readDouble()));
}
case ID_CHARACTER_OBJECT:
{
return objectResolver.readResolve(Character.valueOf(readChar()));
}
case ID_PRIM_BYTE:
{
return byte.class;
}
case ID_PRIM_BOOLEAN:
{
return boolean.class;
}
case ID_PRIM_CHAR:
{
return char.class;
}
case ID_PRIM_DOUBLE:
{
return double.class;
}
case ID_PRIM_FLOAT:
{
return float.class;
}
case ID_PRIM_INT:
{
return int.class;
}
case ID_PRIM_LONG:
{
return long.class;
}
case ID_PRIM_SHORT:
{
return short.class;
}
case ID_VOID:
{
return void.class;
}
case ID_BYTE_CLASS:
{
return Byte.class;
}
case ID_BOOLEAN_CLASS:
{
return Boolean.class;
}
case ID_CHARACTER_CLASS:
{
return Character.class;
}
case ID_DOUBLE_CLASS:
{
return Double.class;
}
case ID_FLOAT_CLASS:
{
return Float.class;
}
case ID_INTEGER_CLASS:
{
return Integer.class;
}
case ID_LONG_CLASS:
{
return Long.class;
}
case ID_SHORT_CLASS:
{
return Short.class;
}
case ID_VOID_CLASS:
{
return Void.class;
}
case ID_OBJECT_CLASS:
{
return Object.class;
}
case ID_CLASS_CLASS:
{
return Class.class;
}
case ID_STRING_CLASS:
{
return String.class;
}
case ID_ENUM_CLASS:
{
return Enum.class;
}
case ID_BYTE_ARRAY_CLASS:
{
return byte[].class;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return boolean[].class;
}
case ID_CHAR_ARRAY_CLASS:
{
return char[].class;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return double[].class;
}
case ID_FLOAT_ARRAY_CLASS:
{
return float[].class;
}
case ID_INT_ARRAY_CLASS:
{
return int[].class;
}
case ID_LONG_ARRAY_CLASS:
{
return long[].class;
}
case ID_SHORT_ARRAY_CLASS:
{
return short[].class;
}
case ID_CC_ARRAY_LIST:
{
return ArrayList.class;
}
case ID_CC_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_HASH_SET:
{
return HashSet.class;
}
case ID_CC_HASHTABLE:
{
return Hashtable.class;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_LINKED_HASH_MAP:
{
return LinkedHashMap.class;
}
case ID_CC_LINKED_HASH_SET:
{
return LinkedHashSet.class;
}
case ID_CC_LINKED_LIST:
{
return LinkedList.class;
}
case ID_CC_TREE_MAP:
{
return TreeMap.class;
}
case ID_CC_TREE_SET:
{
return TreeSet.class;
}
case ID_ABSTRACT_COLLECTION:
{
return AbstractCollection.class;
}
case ID_ABSTRACT_LIST:
{
return AbstractList.class;
}
case ID_ABSTRACT_QUEUE:
{
return AbstractQueue.class;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return AbstractSequentialList.class;
}
case ID_ABSTRACT_SET:
{
return AbstractSet.class;
}
case ID_SINGLETON_LIST_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonList(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_SET_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singleton(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_MAP_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonMap(doReadNestedObject(false,""String_Node_Str""),doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_EMPTY_LIST_OBJECT:
{
return Collections.emptyList();
}
case ID_EMPTY_SET_OBJECT:
{
return Collections.emptySet();
}
case ID_EMPTY_MAP_OBJECT:
{
return Collections.emptyMap();
}
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
final int len;
switch (leadByte) {
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
{
len=0;
break;
}
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
{
int b=readUnsignedByte();
len=b == 0 ? 0x100 : b;
break;
}
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
{
int b=readUnsignedShort();
len=b == 0 ? 0x10000 : b;
break;
}
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
len=readInt();
break;
}
default :
{
throw new IllegalStateException();
}
}
final int id=readUnsignedByte();
switch (id) {
case ID_CC_ARRAY_LIST:
{
return readCollectionData(unshared,len,new ArrayList(len));
}
case ID_CC_HASH_SET:
{
return readCollectionData(unshared,len,new HashSet(len));
}
case ID_CC_LINKED_HASH_SET:
{
return readCollectionData(unshared,len,new LinkedHashSet(len));
}
case ID_CC_LINKED_LIST:
{
return readCollectionData(unshared,len,new LinkedList());
}
case ID_CC_TREE_SET:
{
return readCollectionData(unshared,len,new TreeSet((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_SET_PROXY:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readCollectionData(unshared,len,EnumSet.noneOf(elementType));
}
case ID_CC_VECTOR:
{
return readCollectionData(unshared,len,new Vector(len));
}
case ID_CC_STACK:
{
return readCollectionData(unshared,len,new Stack());
}
case ID_CC_HASH_MAP:
{
return readMapData(unshared,len,new HashMap(len));
}
case ID_CC_HASHTABLE:
{
return readMapData(unshared,len,new Hashtable(len));
}
case ID_CC_IDENTITY_HASH_MAP:
{
return readMapData(unshared,len,new IdentityHashMap(len));
}
case ID_CC_LINKED_HASH_MAP:
{
return readMapData(unshared,len,new LinkedHashMap(len));
}
case ID_CC_TREE_MAP:
{
return readMapData(unshared,len,new TreeMap((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_MAP:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readMapData(unshared,len,new EnumMap(elementType));
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
case ID_CLEAR_CLASS_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
classCache.clear();
instanceCache.clear();
leadByte=readUnsignedByte();
continue;
}
case ID_CLEAR_INSTANCE_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
instanceCache.clear();
continue;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
  finally {
depth--;
}
}","@SuppressWarnings({""String_Node_Str""}) Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case ID_NULL:
{
        return null;
      }
case ID_REPEAT_OBJECT_FAR:
{
      if (unshared) {
        throw new InvalidObjectException(""String_Node_Str"");
      }
      final int index=readInt();
      try {
        final Object obj=instanceCache.get(index);
        if (obj != null)         return obj;
      }
 catch (      IndexOutOfBoundsException e) {
      }
      throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
    }
case ID_REPEAT_OBJECT_NEAR:
{
    if (unshared) {
      throw new InvalidObjectException(""String_Node_Str"");
    }
    final int index=readByte() | 0xffffff00;
    try {
      final Object obj=instanceCache.get(index + instanceCache.size());
      if (obj != null)       return obj;
    }
 catch (    IndexOutOfBoundsException e) {
    }
    throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
case ID_REPEAT_OBJECT_NEARISH:
{
  if (unshared) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  final int index=readShort() | 0xffff0000;
  try {
    final Object obj=instanceCache.get(index + instanceCache.size());
    if (obj != null)     return obj;
  }
 catch (  IndexOutOfBoundsException e) {
  }
  throw new InvalidObjectException(""String_Node_Str"" + index + ""String_Node_Str"");
}
case ID_NEW_OBJECT:
case ID_NEW_OBJECT_UNSHARED:
{
if (unshared != (leadByte == ID_NEW_OBJECT_UNSHARED)) {
  throw sharedMismatch();
}
return doReadNewObject(readUnsignedByte(),unshared);
}
case ID_STRING_EMPTY:
{
return ""String_Node_Str"";
}
case ID_STRING_SMALL:
{
int length=readUnsignedByte();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x100 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_MEDIUM:
{
int length=readUnsignedShort();
final String s=UTFUtils.readUTFBytes(this,length == 0 ? 0x10000 : length);
instanceCache.add(s);
return s;
}
case ID_STRING_LARGE:
{
int length=readInt();
if (length <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + length + ""String_Node_Str"");
}
final String s=UTFUtils.readUTFBytes(this,length);
instanceCache.add(s);
return s;
}
case ID_ARRAY_EMPTY:
case ID_ARRAY_EMPTY_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_EMPTY_UNSHARED)) {
throw sharedMismatch();
}
final ArrayList<Object> instanceCache=this.instanceCache;
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Array.newInstance(doReadClassDescriptor(readUnsignedByte()).getType(),0);
instanceCache.set(idx,obj);
final Object resolvedObject=objectResolver.readResolve(obj);
if (unshared) {
instanceCache.set(idx,null);
}
 else if (obj != resolvedObject) {
instanceCache.set(idx,resolvedObject);
}
return obj;
}
case ID_ARRAY_SMALL:
case ID_ARRAY_SMALL_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_SMALL_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedByte();
return doReadArray(len == 0 ? 0x100 : len,unshared);
}
case ID_ARRAY_MEDIUM:
case ID_ARRAY_MEDIUM_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_MEDIUM_UNSHARED)) {
throw sharedMismatch();
}
final int len=readUnsignedShort();
return doReadArray(len == 0 ? 0x10000 : len,unshared);
}
case ID_ARRAY_LARGE:
case ID_ARRAY_LARGE_UNSHARED:
{
if (unshared != (leadByte == ID_ARRAY_LARGE_UNSHARED)) {
throw sharedMismatch();
}
final int len=readInt();
if (len <= 0) {
throw new StreamCorruptedException(""String_Node_Str"" + len + ""String_Node_Str"");
}
return doReadArray(len,unshared);
}
case ID_PREDEFINED_OBJECT:
{
if (unshared) {
throw new InvalidObjectException(""String_Node_Str"");
}
if (version == 1) {
final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
final Object obj=objectTable.readObject(blockUnmarshaller);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
return obj;
}
 else {
return objectTable.readObject(this);
}
}
case ID_BOOLEAN_OBJECT_TRUE:
{
return objectResolver.readResolve(Boolean.TRUE);
}
case ID_BOOLEAN_OBJECT_FALSE:
{
return objectResolver.readResolve(Boolean.FALSE);
}
case ID_BYTE_OBJECT:
{
return objectResolver.readResolve(Byte.valueOf(readByte()));
}
case ID_SHORT_OBJECT:
{
return objectResolver.readResolve(Short.valueOf(readShort()));
}
case ID_INTEGER_OBJECT:
{
return objectResolver.readResolve(Integer.valueOf(readInt()));
}
case ID_LONG_OBJECT:
{
return objectResolver.readResolve(Long.valueOf(readLong()));
}
case ID_FLOAT_OBJECT:
{
return objectResolver.readResolve(Float.valueOf(readFloat()));
}
case ID_DOUBLE_OBJECT:
{
return objectResolver.readResolve(Double.valueOf(readDouble()));
}
case ID_CHARACTER_OBJECT:
{
return objectResolver.readResolve(Character.valueOf(readChar()));
}
case ID_PRIM_BYTE:
{
return byte.class;
}
case ID_PRIM_BOOLEAN:
{
return boolean.class;
}
case ID_PRIM_CHAR:
{
return char.class;
}
case ID_PRIM_DOUBLE:
{
return double.class;
}
case ID_PRIM_FLOAT:
{
return float.class;
}
case ID_PRIM_INT:
{
return int.class;
}
case ID_PRIM_LONG:
{
return long.class;
}
case ID_PRIM_SHORT:
{
return short.class;
}
case ID_VOID:
{
return void.class;
}
case ID_BYTE_CLASS:
{
return Byte.class;
}
case ID_BOOLEAN_CLASS:
{
return Boolean.class;
}
case ID_CHARACTER_CLASS:
{
return Character.class;
}
case ID_DOUBLE_CLASS:
{
return Double.class;
}
case ID_FLOAT_CLASS:
{
return Float.class;
}
case ID_INTEGER_CLASS:
{
return Integer.class;
}
case ID_LONG_CLASS:
{
return Long.class;
}
case ID_SHORT_CLASS:
{
return Short.class;
}
case ID_VOID_CLASS:
{
return Void.class;
}
case ID_OBJECT_CLASS:
{
return Object.class;
}
case ID_CLASS_CLASS:
{
return Class.class;
}
case ID_STRING_CLASS:
{
return String.class;
}
case ID_ENUM_CLASS:
{
return Enum.class;
}
case ID_BYTE_ARRAY_CLASS:
{
return byte[].class;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return boolean[].class;
}
case ID_CHAR_ARRAY_CLASS:
{
return char[].class;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return double[].class;
}
case ID_FLOAT_ARRAY_CLASS:
{
return float[].class;
}
case ID_INT_ARRAY_CLASS:
{
return int[].class;
}
case ID_LONG_ARRAY_CLASS:
{
return long[].class;
}
case ID_SHORT_ARRAY_CLASS:
{
return short[].class;
}
case ID_CC_ARRAY_LIST:
{
return ArrayList.class;
}
case ID_CC_HASH_MAP:
{
return HashMap.class;
}
case ID_CC_HASH_SET:
{
return HashSet.class;
}
case ID_CC_HASHTABLE:
{
return Hashtable.class;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return IdentityHashMap.class;
}
case ID_CC_LINKED_HASH_MAP:
{
return LinkedHashMap.class;
}
case ID_CC_LINKED_HASH_SET:
{
return LinkedHashSet.class;
}
case ID_CC_LINKED_LIST:
{
return LinkedList.class;
}
case ID_CC_TREE_MAP:
{
return TreeMap.class;
}
case ID_CC_TREE_SET:
{
return TreeSet.class;
}
case ID_ABSTRACT_COLLECTION:
{
return AbstractCollection.class;
}
case ID_ABSTRACT_LIST:
{
return AbstractList.class;
}
case ID_ABSTRACT_QUEUE:
{
return AbstractQueue.class;
}
case ID_ABSTRACT_SEQUENTIAL_LIST:
{
return AbstractSequentialList.class;
}
case ID_ABSTRACT_SET:
{
return AbstractSet.class;
}
case ID_SINGLETON_LIST_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonList(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_SET_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singleton(doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_SINGLETON_MAP_OBJECT:
{
final int idx=instanceCache.size();
instanceCache.add(null);
final Object obj=Collections.singletonMap(doReadNestedObject(false,""String_Node_Str""),doReadNestedObject(false,""String_Node_Str""));
final Object resolvedObject=objectResolver.readResolve(obj);
if (!unshared) {
instanceCache.set(idx,resolvedObject);
}
return resolvedObject;
}
case ID_EMPTY_LIST_OBJECT:
{
return Collections.emptyList();
}
case ID_EMPTY_SET_OBJECT:
{
return Collections.emptySet();
}
case ID_EMPTY_MAP_OBJECT:
{
return Collections.emptyMap();
}
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
final int len;
switch (leadByte) {
case ID_COLLECTION_EMPTY:
case ID_COLLECTION_EMPTY_UNSHARED:
{
len=0;
break;
}
case ID_COLLECTION_SMALL:
case ID_COLLECTION_SMALL_UNSHARED:
{
int b=readUnsignedByte();
len=b == 0 ? 0x100 : b;
break;
}
case ID_COLLECTION_MEDIUM:
case ID_COLLECTION_MEDIUM_UNSHARED:
{
int b=readUnsignedShort();
len=b == 0 ? 0x10000 : b;
break;
}
case ID_COLLECTION_LARGE:
case ID_COLLECTION_LARGE_UNSHARED:
{
len=readInt();
break;
}
default :
{
throw new IllegalStateException();
}
}
final int id=readUnsignedByte();
switch (id) {
case ID_CC_ARRAY_LIST:
{
return readCollectionData(unshared,len,new ArrayList(len));
}
case ID_CC_HASH_SET:
{
return readCollectionData(unshared,len,new HashSet(len));
}
case ID_CC_LINKED_HASH_SET:
{
return readCollectionData(unshared,len,new LinkedHashSet(len));
}
case ID_CC_LINKED_LIST:
{
return readCollectionData(unshared,len,new LinkedList());
}
case ID_CC_TREE_SET:
{
return readCollectionData(unshared,len,new TreeSet((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_SET_PROXY:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readCollectionData(unshared,len,EnumSet.noneOf(elementType));
}
case ID_CC_VECTOR:
{
return readCollectionData(unshared,len,new Vector(len));
}
case ID_CC_STACK:
{
return readCollectionData(unshared,len,new Stack());
}
case ID_CC_HASH_MAP:
{
return readMapData(unshared,len,new HashMap(len));
}
case ID_CC_HASHTABLE:
{
return readMapData(unshared,len,new Hashtable(len));
}
case ID_CC_IDENTITY_HASH_MAP:
{
return readMapData(unshared,len,new IdentityHashMap(len));
}
case ID_CC_LINKED_HASH_MAP:
{
return readMapData(unshared,len,new LinkedHashMap(len));
}
case ID_CC_TREE_MAP:
{
return readMapData(unshared,len,new TreeMap((Comparator)doReadNestedObject(false,""String_Node_Str"")));
}
case ID_CC_ENUM_MAP:
{
final ClassDescriptor nestedDescriptor=doReadClassDescriptor(readUnsignedByte());
final Class<? extends Enum> elementType=nestedDescriptor.getType().asSubclass(Enum.class);
return readMapData(unshared,len,new EnumMap(elementType));
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
case ID_CLEAR_CLASS_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
classCache.clear();
instanceCache.clear();
leadByte=readUnsignedByte();
continue;
}
case ID_CLEAR_INSTANCE_CACHE:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
instanceCache.clear();
continue;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + leadByte);
}
}
}
  finally {
depth--;
}
}"
43005,"void readToEndBlockData() throws IOException, ClassNotFoundException {
  for (; ; ) {
    while (remaining > 0) {
      skipBytes(remaining);
    }
    final int b=serialUnmarshaller.read();
switch (b) {
case -1:
      remaining=-1;
    return;
case TC_ENDBLOCKDATA:
  remaining=-1;
return;
case TC_BLOCKDATA:
case TC_BLOCKDATALONG:
readBlockHeader(b);
break;
default :
serialUnmarshaller.doReadObject(b,false);
break;
}
}
}","void readToEndBlockData() throws IOException, ClassNotFoundException {
  for (; ; ) {
    while (remaining > 0) {
      skipBytes(remaining);
    }
    if (remaining == -1) {
      return;
    }
    final int b=serialUnmarshaller.read();
switch (b) {
case -1:
      remaining=-1;
    return;
case TC_ENDBLOCKDATA:
  remaining=-1;
return;
case TC_BLOCKDATA:
case TC_BLOCKDATALONG:
readBlockHeader(b);
break;
default :
serialUnmarshaller.doReadObject(b,false);
break;
}
}
}"
43006,"@Test public void testExternalizablePlusExternalizer() throws Throwable {
  final TestExternalizableWithSerializableFields ext1=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext2=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext3=new TestExternalizableWithSerializableFields();
  final Map<String,TestExternalizableWithSerializableFields> map=new HashMap<String,TestExternalizableWithSerializableFields>();
  map.put(""String_Node_Str"",ext1);
  map.put(""String_Node_Str"",ext2);
  map.put(""String_Node_Str"",ext3);
  final AtomicInteger version=new AtomicInteger();
  final AtomicBoolean javaSerializationMarshaller=new AtomicBoolean();
  runReadWriteTest(new ReadWriteTest(){
    public void configure(    final MarshallingConfiguration configuration) throws Throwable {
      configuration.setClassExternalizerFactory(new ClassExternalizerFactory(){
        public Externalizer getExternalizer(        final Class<?> type){
          if (type == HashMap.class) {
            return new HashMapExternalizer();
          }
 else {
            return null;
          }
        }
      }
);
      version.set(configuration.getVersion());
    }
    public void runWrite(    final Marshaller marshaller) throws Throwable {
      if (marshaller instanceof SerialMarshaller)       throw new SkipException(""String_Node_Str"");
      if (marshaller instanceof JavaSerializationMarshaller) {
        javaSerializationMarshaller.set(true);
      }
      marshaller.writeObject(map);
      marshaller.writeObject(map);
    }
    public void runRead(    final Unmarshaller unmarshaller) throws Throwable {
      if ((unmarshaller instanceof RiverUnmarshaller) && version.get() < 1) {
        throw new SkipException(""String_Node_Str"");
      }
      if ((unmarshaller instanceof ObjectInputStreamUnmarshaller) && javaSerializationMarshaller.get()) {
        throw new SkipException(""String_Node_Str"");
      }
      final Object m1=unmarshaller.readObject();
      assertEquals(HashMap.class,m1.getClass());
      assertSame(m1,unmarshaller.readObject());
      assertEOF(unmarshaller);
    }
  }
);
}","@Test public void testExternalizablePlusExternalizer() throws Throwable {
  final TestExternalizableWithSerializableFields ext1=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext2=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext3=new TestExternalizableWithSerializableFields();
  final Map<String,TestExternalizableWithSerializableFields> map=new HashMap<String,TestExternalizableWithSerializableFields>();
  map.put(""String_Node_Str"",ext1);
  map.put(""String_Node_Str"",ext2);
  map.put(""String_Node_Str"",ext3);
  final AtomicInteger version=new AtomicInteger();
  final AtomicBoolean javaSerializationMarshaller=new AtomicBoolean();
  runReadWriteTest(new ReadWriteTest(){
    public void configure(    final MarshallingConfiguration configuration) throws Throwable {
      configuration.setClassExternalizerFactory(new ClassExternalizerFactory(){
        public Externalizer getExternalizer(        final Class<?> type){
          if (type == HashMap.class) {
            return new HashMapExternalizer();
          }
 else {
            return null;
          }
        }
      }
);
      version.set(configuration.getVersion());
    }
    public void runWrite(    final Marshaller marshaller) throws Throwable {
      if (marshaller instanceof JavaSerializationMarshaller) {
        javaSerializationMarshaller.set(true);
      }
      marshaller.writeObject(map);
      marshaller.writeObject(map);
    }
    public void runRead(    final Unmarshaller unmarshaller) throws Throwable {
      if ((unmarshaller instanceof RiverUnmarshaller) && version.get() < 1) {
        throw new SkipException(""String_Node_Str"");
      }
      if ((unmarshaller instanceof ObjectInputStreamUnmarshaller) && javaSerializationMarshaller.get()) {
        throw new SkipException(""String_Node_Str"");
      }
      final Object m1=unmarshaller.readObject();
      assertEquals(HashMap.class,m1.getClass());
      assertSame(m1,unmarshaller.readObject());
      assertEOF(unmarshaller);
    }
  }
);
}"
43007,"@Test public void testExternalizableWithFollowingObjects() throws Throwable {
  final TestExternalizableWithSerializableFields ext1=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext2=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext3=new TestExternalizableWithSerializableFields();
  final AtomicInteger version=new AtomicInteger();
  runReadWriteTest(new ReadWriteTest(){
    public void configure(    final MarshallingConfiguration configuration) throws Throwable {
      version.set(configuration.getVersion());
    }
    public void runWrite(    final Marshaller marshaller) throws Throwable {
      if (marshaller instanceof SerialMarshaller || marshaller instanceof ObjectOutputStreamMarshaller)       throw new SkipException(""String_Node_Str"");
      marshaller.writeObject(ext1);
      marshaller.writeObject(ext2);
      marshaller.writeObject(ext3);
    }
    public void runRead(    final Unmarshaller unmarshaller) throws Throwable {
      if ((unmarshaller instanceof RiverUnmarshaller) && version.get() < 1) {
        throw new SkipException(""String_Node_Str"");
      }
      if (unmarshaller instanceof ObjectInputStreamUnmarshaller) {
        throw new SkipException(""String_Node_Str"");
      }
      final TestExternalizableWithSerializableFields rext1=(TestExternalizableWithSerializableFields)unmarshaller.readObject();
      final TestExternalizableWithSerializableFields rext2=(TestExternalizableWithSerializableFields)unmarshaller.readObject();
      final TestExternalizableWithSerializableFields rext3=(TestExternalizableWithSerializableFields)unmarshaller.readObject();
      assertTrue(""String_Node_Str"",unmarshaller.read() == -1);
      assertTrue(""String_Node_Str"",rext1.ran);
      assertTrue(""String_Node_Str"",rext2.ran);
      assertTrue(""String_Node_Str"",rext3.ran);
    }
  }
);
  assertFalse(""String_Node_Str"",ext1.ran);
  assertFalse(""String_Node_Str"",ext2.ran);
  assertFalse(""String_Node_Str"",ext3.ran);
}","@Test public void testExternalizableWithFollowingObjects() throws Throwable {
  final TestExternalizableWithSerializableFields ext1=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext2=new TestExternalizableWithSerializableFields();
  final TestExternalizableWithSerializableFields ext3=new TestExternalizableWithSerializableFields();
  final AtomicInteger version=new AtomicInteger();
  runReadWriteTest(new ReadWriteTest(){
    public void configure(    final MarshallingConfiguration configuration) throws Throwable {
      version.set(configuration.getVersion());
    }
    public void runWrite(    final Marshaller marshaller) throws Throwable {
      marshaller.writeObject(ext1);
      marshaller.writeObject(ext2);
      marshaller.writeObject(ext3);
    }
    public void runRead(    final Unmarshaller unmarshaller) throws Throwable {
      if ((unmarshaller instanceof RiverUnmarshaller) && version.get() < 1) {
        throw new SkipException(""String_Node_Str"");
      }
      final TestExternalizableWithSerializableFields rext1=(TestExternalizableWithSerializableFields)unmarshaller.readObject();
      final TestExternalizableWithSerializableFields rext2=(TestExternalizableWithSerializableFields)unmarshaller.readObject();
      final TestExternalizableWithSerializableFields rext3=(TestExternalizableWithSerializableFields)unmarshaller.readObject();
      assertTrue(""String_Node_Str"",unmarshaller.read() == -1);
      assertTrue(""String_Node_Str"",rext1.ran);
      assertTrue(""String_Node_Str"",rext2.ran);
      assertTrue(""String_Node_Str"",rext3.ran);
    }
  }
);
  assertFalse(""String_Node_Str"",ext1.ran);
  assertFalse(""String_Node_Str"",ext2.ran);
  assertFalse(""String_Node_Str"",ext3.ran);
}"
43008,"@Test public void testExternalizerWithRepeatedWrites() throws Throwable {
  if (testMarshallerProvider instanceof ObjectOutputStreamTestMarshallerProvider) {
    throw new SkipException(""String_Node_Str"");
  }
  if (testUnmarshallerProvider instanceof ObjectInputStreamTestUnmarshallerProvider) {
    throw new SkipException(""String_Node_Str"");
  }
  TestExternalizerFactory externalizerFactory=new TestExternalizerFactory();
  Object o=new TestExternalizableInt(7);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ByteOutput byteOutput=Marshalling.createByteOutput(baos);
  MarshallingConfiguration config=configuration.clone();
  config.setClassExternalizerFactory(externalizerFactory);
  Marshaller marshaller=testMarshallerProvider.create(config,byteOutput);
  if (marshaller instanceof SerialMarshaller) {
    throw new SkipException(""String_Node_Str"");
  }
  marshaller.writeObject(o);
  marshaller.writeObject(o);
  marshaller.flush();
  ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
  ByteInput byteInput=Marshalling.createByteInput(bais);
  config=configuration.clone();
  config.setClassExternalizerFactory(externalizerFactory);
  Unmarshaller unmarshaller=testUnmarshallerProvider.create(config,byteInput);
  Object o2=unmarshaller.readObject();
  assertEquals(o,o2);
  Object o3=unmarshaller.readObject();
  assertSame(o2,o3);
}","@Test public void testExternalizerWithRepeatedWrites() throws Throwable {
  if (testMarshallerProvider instanceof ObjectOutputStreamTestMarshallerProvider) {
    throw new SkipException(""String_Node_Str"");
  }
  if (testUnmarshallerProvider instanceof ObjectInputStreamTestUnmarshallerProvider) {
    throw new SkipException(""String_Node_Str"");
  }
  TestExternalizerFactory externalizerFactory=new TestExternalizerFactory();
  Object o=new TestExternalizableInt(7);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ByteOutput byteOutput=Marshalling.createByteOutput(baos);
  MarshallingConfiguration config=configuration.clone();
  config.setClassExternalizerFactory(externalizerFactory);
  Marshaller marshaller=testMarshallerProvider.create(config,byteOutput);
  marshaller.writeObject(o);
  marshaller.writeObject(o);
  marshaller.flush();
  ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
  ByteInput byteInput=Marshalling.createByteInput(bais);
  config=configuration.clone();
  config.setClassExternalizerFactory(externalizerFactory);
  Unmarshaller unmarshaller=testUnmarshallerProvider.create(config,byteInput);
  Object o2=unmarshaller.readObject();
  assertEquals(o,o2);
  Object o3=unmarshaller.readObject();
  assertSame(o2,o3);
}"
43009,"ClassDescriptor doReadClassDescriptor(final int classType) throws IOException, ClassNotFoundException {
  final ArrayList<ClassDescriptor> classCache=this.classCache;
switch (classType) {
case ID_REPEAT_CLASS_FAR:
{
      return classCache.get(readInt());
    }
case ID_REPEAT_CLASS_NEAR:
{
    return classCache.get((readByte() | 0xffffff00) + classCache.size());
  }
case ID_REPEAT_CLASS_NEARISH:
{
  return classCache.get((readShort() | 0xffff0000) + classCache.size());
}
case ID_PREDEFINED_ENUM_TYPE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_ENUM_TYPE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_EXTERNALIZABLE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZER_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final Externalizer externalizer=(Externalizer)readObject();
final ClassDescriptor descriptor=new ExternalizerClassDescriptor(type,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PLAIN_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_PLAIN_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PROXY_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_PROXY_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_SERIALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final SerializableClass serializableClass=registry.lookup(type);
int descType=version > 0 && serializableClass.hasWriteObject() ? ID_WRITE_OBJECT_CLASS : ID_SERIALIZABLE_CLASS;
final ClassDescriptor descriptor=new SerializableClassDescriptor(serializableClass,doReadClassDescriptor(readUnsignedByte()),serializableClass.getFields(),descType);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PLAIN_CLASS:
{
final String className=readString();
final Class<?> clazz=doResolveClass(className,0L);
final ClassDescriptor descriptor=new ClassDescriptor(clazz,ID_PLAIN_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_PROXY_CLASS:
{
String[] interfaces=new String[readInt()];
for (int i=0; i < interfaces.length; i++) {
interfaces[i]=readString();
}
final ClassDescriptor descriptor;
if (version == 1) {
final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
descriptor=new ClassDescriptor(classResolver.resolveProxyClass(blockUnmarshaller,interfaces),ID_PROXY_CLASS);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
}
 else {
descriptor=new ClassDescriptor(classResolver.resolveProxyClass(this,interfaces),ID_PROXY_CLASS);
}
classCache.add(descriptor);
return descriptor;
}
case ID_WRITE_OBJECT_CLASS:
case ID_SERIALIZABLE_CLASS:
{
int idx=classCache.size();
classCache.add(null);
final String className=readString();
final long uid=readLong();
final Class<?> clazz=doResolveClass(className,uid);
final Class<?> superClazz=clazz.getSuperclass();
classCache.set(idx,new IncompleteClassDescriptor(clazz,classType));
final int cnt=readInt();
final String[] names=new String[cnt];
final ClassDescriptor[] descriptors=new ClassDescriptor[cnt];
final boolean[] unshareds=new boolean[cnt];
for (int i=0; i < cnt; i++) {
names[i]=readUTF();
descriptors[i]=doReadClassDescriptor(readUnsignedByte());
unshareds[i]=readBoolean();
}
ClassDescriptor superDescriptor=doReadClassDescriptor(readUnsignedByte());
if (superDescriptor != null) {
final Class<?> superType=superDescriptor.getType();
if (!superType.isAssignableFrom(clazz)) {
throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
}
Class<?> cl=superClazz;
while (cl != superType) {
superDescriptor=new SerializableClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
 else if (superClazz != null) {
Class<?> cl=superClazz;
while (Serializable.class.isAssignableFrom(cl)) {
superDescriptor=new SerializableClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
final SerializableClass serializableClass=registry.lookup(clazz);
final SerializableField[] fields=new SerializableField[cnt];
for (int i=0; i < cnt; i++) {
fields[i]=serializableClass.getSerializableField(names[i],descriptors[i].getType(),unshareds[i]);
}
final ClassDescriptor descriptor=new SerializableClassDescriptor(serializableClass,superDescriptor,fields,classType);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_EXTERNALIZABLE_CLASS:
{
final String className=readString();
final long uid=readLong();
final Class<?> clazz=doResolveClass(className,uid);
final ClassDescriptor descriptor=new ClassDescriptor(clazz,ID_EXTERNALIZABLE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_EXTERNALIZER_CLASS:
{
final String className=readString();
int idx=classCache.size();
classCache.add(null);
final Class<?> clazz=doResolveClass(className,0L);
final Externalizer externalizer=(Externalizer)readObject();
final ClassDescriptor descriptor=new ExternalizerClassDescriptor(clazz,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_ENUM_TYPE_CLASS:
{
final ClassDescriptor descriptor=new ClassDescriptor(doResolveClass(readString(),0L),ID_ENUM_TYPE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_OBJECT_ARRAY_TYPE_CLASS:
{
final ClassDescriptor elementType=doReadClassDescriptor(readUnsignedByte());
final ClassDescriptor arrayDescriptor=new ClassDescriptor(Array.newInstance(elementType.getType(),0).getClass(),ID_OBJECT_ARRAY_TYPE_CLASS);
classCache.add(arrayDescriptor);
return arrayDescriptor;
}
case ID_STRING_CLASS:
{
return ClassDescriptor.STRING_DESCRIPTOR;
}
case ID_OBJECT_CLASS:
{
return ClassDescriptor.OBJECT_DESCRIPTOR;
}
case ID_CLASS_CLASS:
{
return ClassDescriptor.CLASS_DESCRIPTOR;
}
case ID_ENUM_CLASS:
{
return ClassDescriptor.ENUM_DESCRIPTOR;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return ClassDescriptor.BOOLEAN_ARRAY;
}
case ID_BYTE_ARRAY_CLASS:
{
return ClassDescriptor.BYTE_ARRAY;
}
case ID_SHORT_ARRAY_CLASS:
{
return ClassDescriptor.SHORT_ARRAY;
}
case ID_INT_ARRAY_CLASS:
{
return ClassDescriptor.INT_ARRAY;
}
case ID_LONG_ARRAY_CLASS:
{
return ClassDescriptor.LONG_ARRAY;
}
case ID_CHAR_ARRAY_CLASS:
{
return ClassDescriptor.CHAR_ARRAY;
}
case ID_FLOAT_ARRAY_CLASS:
{
return ClassDescriptor.FLOAT_ARRAY;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return ClassDescriptor.DOUBLE_ARRAY;
}
case ID_PRIM_BOOLEAN:
{
return ClassDescriptor.BOOLEAN;
}
case ID_PRIM_BYTE:
{
return ClassDescriptor.BYTE;
}
case ID_PRIM_CHAR:
{
return ClassDescriptor.CHAR;
}
case ID_PRIM_DOUBLE:
{
return ClassDescriptor.DOUBLE;
}
case ID_PRIM_FLOAT:
{
return ClassDescriptor.FLOAT;
}
case ID_PRIM_INT:
{
return ClassDescriptor.INT;
}
case ID_PRIM_LONG:
{
return ClassDescriptor.LONG;
}
case ID_PRIM_SHORT:
{
return ClassDescriptor.SHORT;
}
case ID_VOID:
{
return ClassDescriptor.VOID;
}
case ID_BOOLEAN_CLASS:
{
return ClassDescriptor.BOOLEAN_OBJ;
}
case ID_BYTE_CLASS:
{
return ClassDescriptor.BYTE_OBJ;
}
case ID_SHORT_CLASS:
{
return ClassDescriptor.SHORT_OBJ;
}
case ID_INTEGER_CLASS:
{
return ClassDescriptor.INTEGER_OBJ;
}
case ID_LONG_CLASS:
{
return ClassDescriptor.LONG_OBJ;
}
case ID_CHARACTER_CLASS:
{
return ClassDescriptor.CHARACTER_OBJ;
}
case ID_FLOAT_CLASS:
{
return ClassDescriptor.FLOAT_OBJ;
}
case ID_DOUBLE_CLASS:
{
return ClassDescriptor.DOUBLE_OBJ;
}
case ID_VOID_CLASS:
{
return ClassDescriptor.VOID_OBJ;
}
default :
{
throw new InvalidClassException(""String_Node_Str"" + classType);
}
}
}","ClassDescriptor doReadClassDescriptor(final int classType) throws IOException, ClassNotFoundException {
  final ArrayList<ClassDescriptor> classCache=this.classCache;
switch (classType) {
case ID_REPEAT_CLASS_FAR:
{
      return classCache.get(readInt());
    }
case ID_REPEAT_CLASS_NEAR:
{
    return classCache.get((readByte() | 0xffffff00) + classCache.size());
  }
case ID_REPEAT_CLASS_NEARISH:
{
  return classCache.get((readShort() | 0xffff0000) + classCache.size());
}
case ID_PREDEFINED_ENUM_TYPE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_ENUM_TYPE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_EXTERNALIZABLE_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_EXTERNALIZER_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final Externalizer externalizer=(Externalizer)readObject();
final ClassDescriptor descriptor=new ExternalizerClassDescriptor(type,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PLAIN_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_PLAIN_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_PROXY_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final ClassDescriptor descriptor=new ClassDescriptor(type,ID_PROXY_CLASS);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PREDEFINED_SERIALIZABLE_CLASS:
{
final int idx=classCache.size();
classCache.add(null);
final Class<?> type=readClassTableClass();
final SerializableClass serializableClass=registry.lookup(type);
int descType=version > 0 && serializableClass.hasWriteObject() ? ID_WRITE_OBJECT_CLASS : ID_SERIALIZABLE_CLASS;
final ClassDescriptor descriptor=new SerializableClassDescriptor(serializableClass,doReadClassDescriptor(readUnsignedByte()),serializableClass.getFields(),descType);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_PLAIN_CLASS:
{
final String className=readString();
final Class<?> clazz=doResolveClass(className,0L);
final ClassDescriptor descriptor=new ClassDescriptor(clazz,ID_PLAIN_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_PROXY_CLASS:
{
String[] interfaces=new String[readInt()];
for (int i=0; i < interfaces.length; i++) {
interfaces[i]=readString();
}
final ClassDescriptor descriptor;
if (version == 1) {
final BlockUnmarshaller blockUnmarshaller=getBlockUnmarshaller();
descriptor=new ClassDescriptor(classResolver.resolveProxyClass(blockUnmarshaller,interfaces),ID_PROXY_CLASS);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
}
 else {
descriptor=new ClassDescriptor(classResolver.resolveProxyClass(this,interfaces),ID_PROXY_CLASS);
}
classCache.add(descriptor);
return descriptor;
}
case ID_WRITE_OBJECT_CLASS:
case ID_SERIALIZABLE_CLASS:
{
int idx=classCache.size();
classCache.add(null);
final String className=readString();
final long uid=readLong();
final Class<?> clazz=doResolveClass(className,uid);
final Class<?> superClazz=clazz.getSuperclass();
classCache.set(idx,new IncompleteClassDescriptor(clazz,classType));
final int cnt=readInt();
final String[] names=new String[cnt];
final ClassDescriptor[] descriptors=new ClassDescriptor[cnt];
final boolean[] unshareds=new boolean[cnt];
for (int i=0; i < cnt; i++) {
names[i]=readUTF();
descriptors[i]=doReadClassDescriptor(readUnsignedByte());
unshareds[i]=readBoolean();
}
ClassDescriptor superDescriptor=doReadClassDescriptor(readUnsignedByte());
if (superDescriptor != null) {
final Class<?> superType=superDescriptor.getType();
if (!superType.isAssignableFrom(clazz)) {
throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
}
Class<?> cl=superClazz;
while (cl != superType) {
superDescriptor=new SerializableClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
 else if (superClazz != null) {
Class<?> cl=superClazz;
while (Serializable.class.isAssignableFrom(cl)) {
superDescriptor=new SerializableClassDescriptor(registry.lookup(cl),superDescriptor);
cl=cl.getSuperclass();
}
}
final SerializableClass serializableClass=registry.lookup(clazz);
final SerializableField[] fields=new SerializableField[cnt];
for (int i=0; i < cnt; i++) {
fields[i]=serializableClass.getSerializableField(names[i],descriptors[i].getType(),unshareds[i]);
}
final ClassDescriptor descriptor=new SerializableClassDescriptor(serializableClass,superDescriptor,fields,classType);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_EXTERNALIZABLE_CLASS:
{
final String className=readString();
final long uid=readLong();
final Class<?> clazz=doResolveClass(className,uid);
final ClassDescriptor descriptor=new ClassDescriptor(clazz,ID_EXTERNALIZABLE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_EXTERNALIZER_CLASS:
{
final String className=readString();
int idx=classCache.size();
classCache.add(null);
final Class<?> clazz=doResolveClass(className,0L);
final Externalizer externalizer=(Externalizer)readObject();
final ClassDescriptor descriptor=new ExternalizerClassDescriptor(clazz,externalizer);
classCache.set(idx,descriptor);
return descriptor;
}
case ID_ENUM_TYPE_CLASS:
{
final ClassDescriptor descriptor=new ClassDescriptor(doResolveClass(readString(),0L),ID_ENUM_TYPE_CLASS);
classCache.add(descriptor);
return descriptor;
}
case ID_OBJECT_ARRAY_TYPE_CLASS:
{
final ClassDescriptor elementType=doReadClassDescriptor(readUnsignedByte());
final ClassDescriptor arrayDescriptor=new ClassDescriptor(Array.newInstance(elementType.getType(),0).getClass(),ID_OBJECT_ARRAY_TYPE_CLASS);
classCache.add(arrayDescriptor);
return arrayDescriptor;
}
case ID_CC_ARRAY_LIST:
{
return ClassDescriptor.CC_ARRAY_LIST;
}
case ID_CC_LINKED_LIST:
{
return ClassDescriptor.CC_LINKED_LIST;
}
case ID_CC_HASH_SET:
{
return ClassDescriptor.CC_HASH_SET;
}
case ID_CC_LINKED_HASH_SET:
{
return ClassDescriptor.CC_LINKED_HASH_SET;
}
case ID_CC_TREE_SET:
{
return ClassDescriptor.CC_TREE_SET;
}
case ID_CC_IDENTITY_HASH_MAP:
{
return ClassDescriptor.CC_IDENTITY_HASH_MAP;
}
case ID_CC_HASH_MAP:
{
return ClassDescriptor.CC_HASH_MAP;
}
case ID_CC_HASHTABLE:
{
return ClassDescriptor.CC_HASHTABLE;
}
case ID_CC_LINKED_HASH_MAP:
{
return ClassDescriptor.CC_LINKED_HASH_MAP;
}
case ID_CC_TREE_MAP:
{
return ClassDescriptor.CC_TREE_MAP;
}
case ID_STRING_CLASS:
{
return ClassDescriptor.STRING_DESCRIPTOR;
}
case ID_OBJECT_CLASS:
{
return ClassDescriptor.OBJECT_DESCRIPTOR;
}
case ID_CLASS_CLASS:
{
return ClassDescriptor.CLASS_DESCRIPTOR;
}
case ID_ENUM_CLASS:
{
return ClassDescriptor.ENUM_DESCRIPTOR;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
return ClassDescriptor.BOOLEAN_ARRAY;
}
case ID_BYTE_ARRAY_CLASS:
{
return ClassDescriptor.BYTE_ARRAY;
}
case ID_SHORT_ARRAY_CLASS:
{
return ClassDescriptor.SHORT_ARRAY;
}
case ID_INT_ARRAY_CLASS:
{
return ClassDescriptor.INT_ARRAY;
}
case ID_LONG_ARRAY_CLASS:
{
return ClassDescriptor.LONG_ARRAY;
}
case ID_CHAR_ARRAY_CLASS:
{
return ClassDescriptor.CHAR_ARRAY;
}
case ID_FLOAT_ARRAY_CLASS:
{
return ClassDescriptor.FLOAT_ARRAY;
}
case ID_DOUBLE_ARRAY_CLASS:
{
return ClassDescriptor.DOUBLE_ARRAY;
}
case ID_PRIM_BOOLEAN:
{
return ClassDescriptor.BOOLEAN;
}
case ID_PRIM_BYTE:
{
return ClassDescriptor.BYTE;
}
case ID_PRIM_CHAR:
{
return ClassDescriptor.CHAR;
}
case ID_PRIM_DOUBLE:
{
return ClassDescriptor.DOUBLE;
}
case ID_PRIM_FLOAT:
{
return ClassDescriptor.FLOAT;
}
case ID_PRIM_INT:
{
return ClassDescriptor.INT;
}
case ID_PRIM_LONG:
{
return ClassDescriptor.LONG;
}
case ID_PRIM_SHORT:
{
return ClassDescriptor.SHORT;
}
case ID_VOID:
{
return ClassDescriptor.VOID;
}
case ID_BOOLEAN_CLASS:
{
return ClassDescriptor.BOOLEAN_OBJ;
}
case ID_BYTE_CLASS:
{
return ClassDescriptor.BYTE_OBJ;
}
case ID_SHORT_CLASS:
{
return ClassDescriptor.SHORT_OBJ;
}
case ID_INTEGER_CLASS:
{
return ClassDescriptor.INTEGER_OBJ;
}
case ID_LONG_CLASS:
{
return ClassDescriptor.LONG_OBJ;
}
case ID_CHARACTER_CLASS:
{
return ClassDescriptor.CHARACTER_OBJ;
}
case ID_FLOAT_CLASS:
{
return ClassDescriptor.FLOAT_OBJ;
}
case ID_DOUBLE_CLASS:
{
return ClassDescriptor.DOUBLE_OBJ;
}
case ID_VOID_CLASS:
{
return ClassDescriptor.VOID_OBJ;
}
default :
{
throw new InvalidClassException(""String_Node_Str"" + classType);
}
}
}"
43010,"private static void populate(List<Object> list){
  populateAllMaps(list);
  populateAllCollections(list);
  list.add(Collections.emptySet());
  list.add(Collections.emptyList());
  list.add(Collections.emptyMap());
  list.add(Collections.singleton(Integer.valueOf(1234)));
  list.add(Collections.singletonList(Integer.valueOf(1234)));
  list.add(Collections.singletonMap(Integer.valueOf(1234),Long.valueOf(54321L)));
  list.add(Boolean.TRUE);
  list.add(Boolean.FALSE);
  list.add(null);
  list.add(Short.valueOf((short)153));
  list.add(Byte.valueOf((byte)18));
  list.add(Character.valueOf('X'));
  list.add(Float.valueOf(0.12f));
  list.add(Double.valueOf(0.12));
  list.add(""String_Node_Str"");
  list.add(new TestComplexObject(true,(byte)5,'c',(short)8192,294902,319203219042L,21.125f,42.625,""String_Node_Str"",new HashSet<Object>(Arrays.asList(""String_Node_Str"",Boolean.TRUE,Integer.valueOf(12345)))));
  list.add(new TestComplexExternalizableObject(true,(byte)5,'c',(short)8192,294902,319203219042L,21.125f,42.625,""String_Node_Str"",new HashSet<Object>(Arrays.asList(""String_Node_Str"",Boolean.TRUE,Integer.valueOf(12345)))));
  list.add(Collections.unmodifiableMap(new HashMap<Object,Object>()));
  list.add(Collections.unmodifiableSet(new HashSet<Object>()));
  list.add(Collections.unmodifiableCollection(new HashSet<Object>()));
  list.add(Collections.unmodifiableList(new ArrayList<Object>()));
  list.add(Collections.unmodifiableSortedMap(new TreeMap<Object,Object>()));
  list.add(Collections.unmodifiableSortedSet(new TreeSet<Object>()));
  list.add(EnumSet.noneOf(Thread.State.class));
  list.add(EnumSet.allOf(Thread.State.class));
  list.add(new EnumMap<TimeUnit,String>(TimeUnit.class));
  list.add(new TimeoutException());
}","private static void populate(List<Object> list){
  populateAllMaps(list);
  populateAllCollections(list);
  list.add(Collections.emptySet());
  list.add(Collections.emptyList());
  list.add(Collections.emptyMap());
  list.add(Collections.singleton(Integer.valueOf(1234)));
  list.add(Collections.singletonList(Integer.valueOf(1234)));
  list.add(Collections.singletonMap(Integer.valueOf(1234),Long.valueOf(54321L)));
  list.add(Boolean.TRUE);
  list.add(Boolean.FALSE);
  list.add(null);
  list.add(Short.valueOf((short)153));
  list.add(Byte.valueOf((byte)18));
  list.add(Character.valueOf('X'));
  list.add(Float.valueOf(0.12f));
  list.add(Double.valueOf(0.12));
  list.add(""String_Node_Str"");
  list.add(new TestComplexObject(true,(byte)5,'c',(short)8192,294902,319203219042L,21.125f,42.625,""String_Node_Str"",new HashSet<Object>(Arrays.asList(""String_Node_Str"",Boolean.TRUE,Integer.valueOf(12345)))));
  list.add(new TestComplexExternalizableObject(true,(byte)5,'c',(short)8192,294902,319203219042L,21.125f,42.625,""String_Node_Str"",new HashSet<Object>(Arrays.asList(""String_Node_Str"",Boolean.TRUE,Integer.valueOf(12345)))));
  list.add(Collections.unmodifiableMap(new HashMap<Object,Object>()));
  list.add(Collections.unmodifiableSet(new HashSet<Object>()));
  list.add(Collections.unmodifiableCollection(new HashSet<Object>()));
  list.add(Collections.unmodifiableList(new ArrayList<Object>()));
  list.add(Collections.unmodifiableSortedMap(new TreeMap<Object,Object>()));
  list.add(Collections.unmodifiableSortedSet(new TreeSet<Object>()));
  list.add(EnumSet.noneOf(Thread.State.class));
  list.add(EnumSet.allOf(Thread.State.class));
  list.add(new EnumMap<TimeUnit,String>(TimeUnit.class));
  list.add(new TimeoutException());
  list.add(new TestArrayList());
  list.add(new TestCollectionHolder());
}"
43011,"protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        if (configuredVersion >= 2) {
          final int diff=rid - instanceSeq;
          if (diff >= -256) {
            write(ID_REPEAT_OBJECT_NEAR);
            write(diff);
          }
 else           if (diff >= -65536) {
            write(ID_REPEAT_OBJECT_NEARISH);
            writeShort(diff);
          }
          return;
        }
        write(ID_REPEAT_OBJECT_FAR);
        writeInt(rid);
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=(configuredVersion >= 2 ? BASIC_CLASSES_V2 : BASIC_CLASSES).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        if (configuredVersion >= 2) {
          final int cid=(configuredVersion >= 2 ? BASIC_CLASSES_V2 : BASIC_CLASSES).get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
              break;
            }
default :
{
            write(cid);
            return;
          }
      }
    }
    write(ID_NEW_OBJECT);
    write(ID_CLASS_CLASS);
    writeClassClass(classObj);
    instanceCache.put(classObj,instanceSeq++);
    return;
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    if (configuredVersion >= 2) {
      write(ID_BYTE_OBJECT);
      writeByte(((Byte)obj).byteValue());
    }
 else {
      write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
      write(ID_BYTE_CLASS);
      writeByte(((Byte)obj).byteValue());
    }
    return;
  }
case ID_BOOLEAN_CLASS:
{
  if (configuredVersion >= 2) {
    write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  }
 else {
    write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
    write(ID_BOOLEAN_CLASS);
    writeBoolean(((Boolean)obj).booleanValue());
  }
  return;
}
case ID_CHARACTER_CLASS:
{
if (configuredVersion >= 2) {
  write(ID_CHARACTER_OBJECT);
  writeChar(((Character)obj).charValue());
}
 else {
  write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
  write(ID_CHARACTER_CLASS);
  writeChar(((Character)obj).charValue());
}
return;
}
case ID_DOUBLE_CLASS:
{
if (configuredVersion >= 2) {
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_DOUBLE_CLASS);
writeDouble(((Double)obj).doubleValue());
}
return;
}
case ID_FLOAT_CLASS:
{
if (configuredVersion >= 2) {
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_FLOAT_CLASS);
writeFloat(((Float)obj).floatValue());
}
return;
}
case ID_INTEGER_CLASS:
{
if (configuredVersion >= 2) {
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_INTEGER_CLASS);
writeInt(((Integer)obj).intValue());
}
return;
}
case ID_LONG_CLASS:
{
if (configuredVersion >= 2) {
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_LONG_CLASS);
writeLong(((Long)obj).longValue());
}
return;
}
case ID_SHORT_CLASS:
{
if (configuredVersion >= 2) {
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_SHORT_CLASS);
writeShort(((Short)obj).shortValue());
}
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
if (configuredVersion >= 2) {
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 256) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 65336) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
flush();
UTFUtils.writeUTFBytes(byteOutput,string);
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_STRING_CLASS);
writeString(string);
}
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_BYTE_ARRAY_CLASS);
writeInt(len);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_BOOLEAN_ARRAY_CLASS);
writeInt(len);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_CHAR_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_SHORT_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_INT_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_LONG_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_FLOAT_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
instanceCache.put(obj,instanceSeq++);
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_DOUBLE_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
instanceCache.put(obj,instanceSeq++);
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeObjectArrayClass(objClass);
writeInt(len);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Serializable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}","protected void doWriteObject(final Object original,final boolean unshared) throws IOException {
  final ClassExternalizerFactory classExternalizerFactory=this.classExternalizerFactory;
  final ObjectResolver objectResolver=this.objectResolver;
  Object obj=original;
  Class<?> objClass;
  int id;
  boolean isArray, isEnum;
  SerializableClass info;
  boolean unreplaced=true;
  final int configuredVersion=this.configuredVersion;
  try {
    for (; ; ) {
      if (obj == null) {
        write(ID_NULL);
        return;
      }
      final int rid;
      if (!unshared && (rid=instanceCache.get(obj,-1)) != -1) {
        if (configuredVersion >= 2) {
          final int diff=rid - instanceSeq;
          if (diff >= -256) {
            write(ID_REPEAT_OBJECT_NEAR);
            write(diff);
          }
 else           if (diff >= -65536) {
            write(ID_REPEAT_OBJECT_NEARISH);
            writeShort(diff);
          }
          return;
        }
        write(ID_REPEAT_OBJECT_FAR);
        writeInt(rid);
        return;
      }
      final ObjectTable.Writer objectTableWriter;
      if (!unshared && (objectTableWriter=objectTable.getObjectWriter(obj)) != null) {
        write(ID_PREDEFINED_OBJECT);
        if (configuredVersion == 1) {
          objectTableWriter.writeObject(getBlockMarshaller(),obj);
          writeEndBlock();
        }
 else {
          objectTableWriter.writeObject(this,obj);
        }
        return;
      }
      objClass=obj.getClass();
      id=(configuredVersion >= 2 ? BASIC_CLASSES_V2 : BASIC_CLASSES).get(objClass,-1);
      if (id == ID_CLASS_CLASS) {
        final Class<?> classObj=(Class<?>)obj;
        if (configuredVersion >= 2) {
          final int cid=BASIC_CLASSES_V2.get(classObj,-1);
switch (cid) {
case -1:
case ID_SINGLETON_MAP_OBJECT:
case ID_SINGLETON_SET_OBJECT:
case ID_SINGLETON_LIST_OBJECT:
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
              break;
            }
default :
{
            write(cid);
            return;
          }
      }
    }
    write(ID_NEW_OBJECT);
    writeClassClass(classObj);
    instanceCache.put(classObj,instanceSeq++);
    return;
  }
  isEnum=obj instanceof Enum;
  isArray=objClass.isArray();
  info=isArray || isEnum || id != -1 ? null : registry.lookup(objClass);
  if (unreplaced) {
    if (info != null) {
      if (info.hasWriteReplace()) {
        obj=info.callWriteReplace(obj);
      }
    }
    obj=objectResolver.writeReplace(obj);
    if (obj != original) {
      unreplaced=false;
      continue;
    }
 else {
      break;
    }
  }
 else {
    break;
  }
}
if (isEnum) {
  final Enum<?> theEnum=(Enum<?>)obj;
  write(ID_NEW_OBJECT);
  writeEnumClass(theEnum.getDeclaringClass());
  writeString(theEnum.name());
  instanceCache.put(obj,instanceSeq++);
  return;
}
switch (id) {
case ID_BYTE_CLASS:
{
    if (configuredVersion >= 2) {
      write(ID_BYTE_OBJECT);
      writeByte(((Byte)obj).byteValue());
    }
 else {
      write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
      write(ID_BYTE_CLASS);
      writeByte(((Byte)obj).byteValue());
    }
    return;
  }
case ID_BOOLEAN_CLASS:
{
  if (configuredVersion >= 2) {
    write(((Boolean)obj).booleanValue() ? ID_BOOLEAN_OBJECT_TRUE : ID_BOOLEAN_OBJECT_FALSE);
  }
 else {
    write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
    write(ID_BOOLEAN_CLASS);
    writeBoolean(((Boolean)obj).booleanValue());
  }
  return;
}
case ID_CHARACTER_CLASS:
{
if (configuredVersion >= 2) {
  write(ID_CHARACTER_OBJECT);
  writeChar(((Character)obj).charValue());
}
 else {
  write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
  write(ID_CHARACTER_CLASS);
  writeChar(((Character)obj).charValue());
}
return;
}
case ID_DOUBLE_CLASS:
{
if (configuredVersion >= 2) {
write(ID_DOUBLE_OBJECT);
writeDouble(((Double)obj).doubleValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_DOUBLE_CLASS);
writeDouble(((Double)obj).doubleValue());
}
return;
}
case ID_FLOAT_CLASS:
{
if (configuredVersion >= 2) {
write(ID_FLOAT_OBJECT);
writeFloat(((Float)obj).floatValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_FLOAT_CLASS);
writeFloat(((Float)obj).floatValue());
}
return;
}
case ID_INTEGER_CLASS:
{
if (configuredVersion >= 2) {
write(ID_INTEGER_OBJECT);
writeInt(((Integer)obj).intValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_INTEGER_CLASS);
writeInt(((Integer)obj).intValue());
}
return;
}
case ID_LONG_CLASS:
{
if (configuredVersion >= 2) {
write(ID_LONG_OBJECT);
writeLong(((Long)obj).longValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_LONG_CLASS);
writeLong(((Long)obj).longValue());
}
return;
}
case ID_SHORT_CLASS:
{
if (configuredVersion >= 2) {
write(ID_SHORT_OBJECT);
writeShort(((Short)obj).shortValue());
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_SHORT_CLASS);
writeShort(((Short)obj).shortValue());
}
return;
}
case ID_STRING_CLASS:
{
final String string=(String)obj;
if (configuredVersion >= 2) {
final int len=string.length();
if (len == 0) {
write(ID_STRING_EMPTY);
return;
}
 else if (len <= 256) {
write(ID_STRING_SMALL);
write(len);
}
 else if (len <= 65336) {
write(ID_STRING_MEDIUM);
writeShort(len);
}
 else {
write(ID_STRING_LARGE);
writeInt(len);
}
flush();
UTFUtils.writeUTFBytes(byteOutput,string);
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_STRING_CLASS);
writeString(string);
}
if (unshared) {
instanceCache.put(obj,-1);
instanceSeq++;
}
 else {
instanceCache.put(obj,instanceSeq++);
}
return;
}
case ID_BYTE_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final byte[] bytes=(byte[])obj;
final int len=bytes.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BYTE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BYTE);
write(bytes,0,len);
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_BYTE_ARRAY_CLASS);
writeInt(len);
write(bytes,0,len);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_BOOLEAN_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final boolean[] booleans=(boolean[])obj;
final int len=booleans.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_BOOLEAN);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_BOOLEAN);
writeBooleanArray(booleans);
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_BOOLEAN_ARRAY_CLASS);
writeInt(len);
writeBooleanArray(booleans);
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CHAR_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final char[] chars=(char[])obj;
final int len=chars.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_CHAR);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_CHAR);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_CHAR_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeChar(chars[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SHORT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final short[] shorts=(short[])obj;
final int len=shorts.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_SHORT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_SHORT);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_SHORT_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeShort(shorts[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_INT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final int[] ints=(int[])obj;
final int len=ints.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_INT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_INT);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_INT_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeInt(ints[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_LONG_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final long[] longs=(long[])obj;
final int len=longs.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_LONG);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_LONG);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_LONG_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeLong(longs[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_FLOAT_ARRAY_CLASS:
{
if (!unshared) {
instanceCache.put(obj,instanceSeq++);
}
final float[] floats=(float[])obj;
final int len=floats.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_FLOAT);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_FLOAT);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_FLOAT_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeFloat(floats[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_DOUBLE_ARRAY_CLASS:
{
instanceCache.put(obj,instanceSeq++);
final double[] doubles=(double[])obj;
final int len=doubles.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
write(ID_PRIM_DOUBLE);
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
write(ID_PRIM_DOUBLE);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
write(ID_DOUBLE_ARRAY_CLASS);
writeInt(len);
for (int i=0; i < len; i++) {
writeDouble(doubles[i]);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_SET:
case ID_CC_LINKED_HASH_SET:
case ID_CC_TREE_SET:
case ID_CC_ARRAY_LIST:
case ID_CC_LINKED_LIST:
{
instanceCache.put(obj,instanceSeq++);
final Collection<?> collection=(Collection<?>)obj;
final int len=collection.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_SET) {
doWriteObject(((TreeSet)collection).comparator(),false);
}
for (Object o : collection) {
doWriteObject(o,false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_CC_HASH_MAP:
case ID_CC_HASHTABLE:
case ID_CC_IDENTITY_HASH_MAP:
case ID_CC_LINKED_HASH_MAP:
case ID_CC_TREE_MAP:
{
instanceCache.put(obj,instanceSeq++);
final Map<?,?> map=(Map<?,?>)obj;
final int len=map.size();
if (len == 0) {
write(unshared ? ID_COLLECTION_EMPTY_UNSHARED : ID_COLLECTION_EMPTY);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
}
 else if (len <= 256) {
write(unshared ? ID_COLLECTION_SMALL_UNSHARED : ID_COLLECTION_SMALL);
write(len);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else if (len <= 65536) {
write(unshared ? ID_COLLECTION_MEDIUM_UNSHARED : ID_COLLECTION_MEDIUM);
writeShort(len);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
 else {
write(unshared ? ID_COLLECTION_LARGE_UNSHARED : ID_COLLECTION_LARGE);
writeInt(len);
write(id);
if (id == ID_CC_TREE_MAP) {
doWriteObject(((TreeMap)map).comparator(),false);
}
for (Map.Entry<?,?> entry : map.entrySet()) {
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_EMPTY_MAP_OBJECT:
case ID_EMPTY_SET_OBJECT:
case ID_EMPTY_LIST_OBJECT:
{
write(id);
return;
}
case ID_SINGLETON_MAP_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
final Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();
doWriteObject(entry.getKey(),false);
doWriteObject(entry.getValue(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case ID_SINGLETON_LIST_OBJECT:
case ID_SINGLETON_SET_OBJECT:
{
instanceCache.put(obj,instanceSeq++);
write(id);
doWriteObject(((Collection)obj).iterator().next(),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
case -1:
break;
default :
throw new NotSerializableException(objClass.getName());
}
if (isArray) {
instanceCache.put(obj,instanceSeq++);
final Object[] objects=(Object[])obj;
final int len=objects.length;
if (configuredVersion >= 2) {
if (len == 0) {
write(unshared ? ID_ARRAY_EMPTY_UNSHARED : ID_ARRAY_EMPTY);
writeClass(objClass.getComponentType());
}
 else if (len <= 256) {
write(unshared ? ID_ARRAY_SMALL_UNSHARED : ID_ARRAY_SMALL);
write(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else if (len <= 65536) {
write(unshared ? ID_ARRAY_MEDIUM_UNSHARED : ID_ARRAY_MEDIUM);
writeShort(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
 else {
write(unshared ? ID_ARRAY_LARGE_UNSHARED : ID_ARRAY_LARGE);
writeInt(len);
writeClass(objClass.getComponentType());
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
}
 else {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeObjectArrayClass(objClass);
writeInt(len);
for (int i=0; i < len; i++) {
doWriteObject(objects[i],unshared);
}
}
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (Proxy.isProxyClass(objClass)) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
writeProxyClass(objClass);
doWriteObject(Proxy.getInvocationHandler(obj),false);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
Externalizer externalizer;
if (externalizers.containsKey(objClass)) {
externalizer=externalizers.get(objClass);
}
 else {
externalizer=classExternalizerFactory.getExternalizer(objClass);
externalizers.put(objClass,externalizer);
}
if (externalizer != null) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeExternalizerClass(objClass,externalizer);
instanceCache.put(obj,instanceSeq++);
final ObjectOutput objectOutput;
objectOutput=getObjectOutput();
externalizer.writeExternal(obj,objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Externalizable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
instanceCache.put(obj,instanceSeq++);
final Externalizable ext=(Externalizable)obj;
final ObjectOutput objectOutput=getObjectOutput();
writeExternalizableClass(objClass);
ext.writeExternal(objectOutput);
writeEndBlock();
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
if (obj instanceof Serializable) {
write(unshared ? ID_NEW_OBJECT_UNSHARED : ID_NEW_OBJECT);
writeSerializableClass(objClass);
instanceCache.put(obj,instanceSeq++);
doWriteSerializableObject(info,obj,objClass);
if (unshared) {
instanceCache.put(obj,-1);
}
return;
}
throw new NotSerializableException(objClass.getName());
}
  finally {
if (!unreplaced && obj != original) {
final int replId=instanceCache.get(obj,-1);
if (replId != -1) {
instanceCache.put(original,replId);
}
}
}
}"
43012,"public Method run(){
  Class<?> foundClass;
  Method method=null;
  for (foundClass=subject; method == null; foundClass=foundClass.getSuperclass()) {
    try {
      if (foundClass == null) {
        return null;
      }
      method=foundClass.getDeclaredMethod(name);
    }
 catch (    NoSuchMethodException e) {
      continue;
    }
  }
  final int modifiers=method.getModifiers();
  if ((modifiers & Modifier.STATIC) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.ABSTRACT) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
    return null;
  }
 else   if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
    method.setAccessible(true);
    return method;
  }
 else {
    return null;
  }
}","public Method run(){
  Class<?> foundClass=subject;
  Method method=null;
  while (method == null) {
    try {
      if (foundClass == null) {
        return null;
      }
      method=foundClass.getDeclaredMethod(name);
      if (method == null) {
        foundClass=foundClass.getSuperclass();
      }
    }
 catch (    NoSuchMethodException e) {
      foundClass=foundClass.getSuperclass();
      continue;
    }
  }
  final int modifiers=method.getModifiers();
  if ((modifiers & Modifier.STATIC) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.ABSTRACT) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
    return null;
  }
 else   if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
    method.setAccessible(true);
    return method;
  }
 else {
    return null;
  }
}"
43013,"private static Method lookupInheritableMethod(final Class<?> subject,final String name){
  return AccessController.doPrivileged(new PrivilegedAction<Method>(){
    public Method run(){
      Class<?> foundClass;
      Method method=null;
      for (foundClass=subject; method == null; foundClass=foundClass.getSuperclass()) {
        try {
          if (foundClass == null) {
            return null;
          }
          method=foundClass.getDeclaredMethod(name);
        }
 catch (        NoSuchMethodException e) {
          continue;
        }
      }
      final int modifiers=method.getModifiers();
      if ((modifiers & Modifier.STATIC) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.ABSTRACT) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
        return null;
      }
 else       if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
        method.setAccessible(true);
        return method;
      }
 else {
        return null;
      }
    }
  }
);
}","private static Method lookupInheritableMethod(final Class<?> subject,final String name){
  return AccessController.doPrivileged(new PrivilegedAction<Method>(){
    public Method run(){
      Class<?> foundClass=subject;
      Method method=null;
      while (method == null) {
        try {
          if (foundClass == null) {
            return null;
          }
          method=foundClass.getDeclaredMethod(name);
          if (method == null) {
            foundClass=foundClass.getSuperclass();
          }
        }
 catch (        NoSuchMethodException e) {
          foundClass=foundClass.getSuperclass();
          continue;
        }
      }
      final int modifiers=method.getModifiers();
      if ((modifiers & Modifier.STATIC) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.ABSTRACT) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
        return null;
      }
 else       if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
        method.setAccessible(true);
        return method;
      }
 else {
        return null;
      }
    }
  }
);
}"
43014,"public Method run(){
  Class<?> foundClass;
  Method method=null;
  for (foundClass=subject; foundClass != null; foundClass=foundClass.getSuperclass()) {
    try {
      method=foundClass.getDeclaredMethod(name);
    }
 catch (    NoSuchMethodException e) {
      continue;
    }
  }
  if (method == null) {
    return null;
  }
  final int modifiers=method.getModifiers();
  if ((modifiers & Modifier.STATIC) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.ABSTRACT) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
    return null;
  }
 else   if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
    method.setAccessible(true);
    return method;
  }
 else {
    return null;
  }
}","public Method run(){
  Class<?> foundClass;
  Method method=null;
  for (foundClass=subject; method == null; foundClass=foundClass.getSuperclass()) {
    try {
      if (foundClass == null) {
        return null;
      }
      method=foundClass.getDeclaredMethod(name);
    }
 catch (    NoSuchMethodException e) {
      continue;
    }
  }
  final int modifiers=method.getModifiers();
  if ((modifiers & Modifier.STATIC) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.ABSTRACT) != 0) {
    return null;
  }
 else   if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
    return null;
  }
 else   if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
    method.setAccessible(true);
    return method;
  }
 else {
    return null;
  }
}"
43015,"private static Method lookupInheritableMethod(final Class<?> subject,final String name){
  return AccessController.doPrivileged(new PrivilegedAction<Method>(){
    public Method run(){
      Class<?> foundClass;
      Method method=null;
      for (foundClass=subject; foundClass != null; foundClass=foundClass.getSuperclass()) {
        try {
          method=foundClass.getDeclaredMethod(name);
        }
 catch (        NoSuchMethodException e) {
          continue;
        }
      }
      if (method == null) {
        return null;
      }
      final int modifiers=method.getModifiers();
      if ((modifiers & Modifier.STATIC) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.ABSTRACT) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
        return null;
      }
 else       if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
        method.setAccessible(true);
        return method;
      }
 else {
        return null;
      }
    }
  }
);
}","private static Method lookupInheritableMethod(final Class<?> subject,final String name){
  return AccessController.doPrivileged(new PrivilegedAction<Method>(){
    public Method run(){
      Class<?> foundClass;
      Method method=null;
      for (foundClass=subject; method == null; foundClass=foundClass.getSuperclass()) {
        try {
          if (foundClass == null) {
            return null;
          }
          method=foundClass.getDeclaredMethod(name);
        }
 catch (        NoSuchMethodException e) {
          continue;
        }
      }
      final int modifiers=method.getModifiers();
      if ((modifiers & Modifier.STATIC) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.ABSTRACT) != 0) {
        return null;
      }
 else       if ((modifiers & Modifier.PRIVATE) != 0 && foundClass != subject) {
        return null;
      }
 else       if ((modifiers & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0 || isSamePackage(foundClass,subject)) {
        method.setAccessible(true);
        return method;
      }
 else {
        return null;
      }
    }
  }
);
}"
43016,"/** 
 * Read the given number of characters from the given byte input.  The length given is in characters, <b>NOT</b> in bytes.
 * @param input the byte source
 * @param len the number of characters to read
 * @return the string
 * @throws IOException if an I/O error occurs
 */
public static String readUTFBytes(final ByteInput input,final int len) throws IOException {
  final byte[] byteBuf=BYTES_HOLDER.get();
  final char[] chars=new char[len];
  int i=0, cnt=0, charIdx=0;
  cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
  if (cnt < 0) {
    throw new EOFException();
  }
  while (charIdx < len) {
    final int a=byteBuf[i++] & 0xff;
    if (a < 0x80) {
      chars[charIdx++]=(char)a;
    }
 else     if (a < 0xc0) {
      throw new UTFDataFormatException(INVALID_BYTE);
    }
 else     if (a < 0xe0) {
      if (i == cnt) {
        cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
        if (cnt < 0) {
          throw new EOFException();
        }
        i=0;
      }
      final int b=byteBuf[i++] & 0xff;
      if ((a & 0xc0) != 0x80) {
        throw new UTFDataFormatException(INVALID_BYTE);
      }
      chars[charIdx++]=(char)((a & 0x1f) << 6 | b & 0x3f);
    }
 else     if (a < 0xf0) {
      if (i == cnt) {
        cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
        if (cnt < 0) {
          throw new EOFException();
        }
        i=0;
      }
      final int b=byteBuf[i++] & 0xff;
      if ((b & 0xc0) != 0x80) {
        throw new UTFDataFormatException(INVALID_BYTE);
      }
      if (i == cnt) {
        cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
        if (cnt < 0) {
          throw new EOFException();
        }
        i=0;
      }
      final int c=byteBuf[i++] & 0xff;
      if ((c & 0xc0) != 0x80) {
        throw new UTFDataFormatException(INVALID_BYTE);
      }
      chars[charIdx++]=(char)((a & 0x0f) << 12 | (b & 0x3f) << 6 | c & 0x3f);
    }
 else {
      throw new UTFDataFormatException(INVALID_BYTE);
    }
  }
  return String.valueOf(chars);
}","/** 
 * Read the given number of characters from the given byte input.  The length given is in characters, <b>NOT</b> in bytes.
 * @param input the byte source
 * @param len the number of characters to read
 * @return the string
 * @throws IOException if an I/O error occurs
 */
public static String readUTFBytes(final ByteInput input,final int len) throws IOException {
  final byte[] byteBuf=BYTES_HOLDER.get();
  final char[] chars=new char[len];
  int i=0, cnt=0, charIdx=0;
  while (charIdx < len) {
    if (i == cnt) {
      cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
      if (cnt < 0) {
        throw new EOFException();
      }
      i=0;
    }
    final int a=byteBuf[i++] & 0xff;
    if (a < 0x80) {
      chars[charIdx++]=(char)a;
    }
 else     if (a < 0xc0) {
      throw new UTFDataFormatException(INVALID_BYTE);
    }
 else     if (a < 0xe0) {
      if (i == cnt) {
        cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
        if (cnt < 0) {
          throw new EOFException();
        }
        i=0;
      }
      final int b=byteBuf[i++] & 0xff;
      if ((b & 0xc0) != 0x80) {
        throw new UTFDataFormatException(INVALID_BYTE);
      }
      chars[charIdx++]=(char)((a & 0x1f) << 6 | b & 0x3f);
    }
 else     if (a < 0xf0) {
      if (i == cnt) {
        cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
        if (cnt < 0) {
          throw new EOFException();
        }
        i=0;
      }
      final int b=byteBuf[i++] & 0xff;
      if ((b & 0xc0) != 0x80) {
        throw new UTFDataFormatException(INVALID_BYTE);
      }
      if (i == cnt) {
        cnt=input.read(byteBuf,0,Math.min(UTF_BUFS_BYTE_CNT,len - charIdx));
        if (cnt < 0) {
          throw new EOFException();
        }
        i=0;
      }
      final int c=byteBuf[i++] & 0xff;
      if ((c & 0xc0) != 0x80) {
        throw new UTFDataFormatException(INVALID_BYTE);
      }
      chars[charIdx++]=(char)((a & 0x0f) << 12 | (b & 0x3f) << 6 | c & 0x3f);
    }
 else {
      throw new UTFDataFormatException(INVALID_BYTE);
    }
  }
  return String.valueOf(chars);
}"
43017,"public void runWrite(final Marshaller marshaller) throws Throwable {
  if (marshaller instanceof JavaSerializationMarshaller) {
    javaSerializationMarshaller.set(true);
  }
  marshaller.writeObject(map);
  marshaller.writeObject(map);
}","public void runWrite(final Marshaller marshaller) throws Throwable {
  marshaller.writeObject(s);
  marshaller.writeObject(s);
}"
43018,"public void runRead(final Unmarshaller unmarshaller) throws Throwable {
  if ((unmarshaller instanceof RiverUnmarshaller) && version.get() < 1) {
    throw new SkipException(""String_Node_Str"");
  }
  if ((unmarshaller instanceof ObjectInputStreamUnmarshaller) && javaSerializationMarshaller.get()) {
    throw new SkipException(""String_Node_Str"");
  }
  final Object m1=unmarshaller.readObject();
  assertEquals(HashMap.class,m1.getClass());
  assertSame(m1,unmarshaller.readObject());
  assertEOF(unmarshaller);
}","public void runRead(final Unmarshaller unmarshaller) throws Throwable {
  final String rs=(String)unmarshaller.readObject();
  assertEquals(""String_Node_Str"",s,rs);
  assertSame(rs,unmarshaller.readObject());
}"
43019,"public void clearInstanceCache() throws IOException {
  instanceCache.clear();
  replacementCache.clear();
  externalizers.clear();
  instanceSeq=baseWireHandle;
  write(TC_RESET);
}","public void clearInstanceCache() throws IOException {
  instanceCache.clear();
  descriptorCache.clear();
  replacementCache.clear();
  externalizers.clear();
  instanceSeq=0;
  if (byteOutput != null) {
    write(TC_RESET);
  }
}"
43020,"Object readBackReference(int handle) throws IOException {
  final int idx=handle - baseWireHandle;
  if (idx < 0 || idx > instanceCache.size()) {
    throw new StreamCorruptedException(String.format(""String_Node_Str"",Integer.valueOf(handle)));
  }
  final Object obj=instanceCache.get(idx);
  if (obj == UNSHARED) {
    throw new StreamCorruptedException(String.format(""String_Node_Str"",Integer.valueOf(handle)));
  }
  if (obj == UNRESOLVED) {
    throw new StreamCorruptedException(String.format(""String_Node_Str"",Integer.valueOf(handle)));
  }
  return obj;
}","Object readBackReference(int handle) throws IOException {
  final int idx=handle - baseWireHandle;
  if (idx < 0 || idx >= instanceCache.size()) {
    throw new StreamCorruptedException(String.format(""String_Node_Str"",Integer.valueOf(handle)));
  }
  final Object obj=instanceCache.get(idx);
  if (obj == UNSHARED) {
    throw new StreamCorruptedException(String.format(""String_Node_Str"",Integer.valueOf(handle)));
  }
  if (obj == UNRESOLVED) {
    throw new StreamCorruptedException(String.format(""String_Node_Str"",Integer.valueOf(handle)));
  }
  return obj;
}"
43021,"public void runRead(final Unmarshaller unmarshaller) throws Throwable {
  if (unmarshaller instanceof ObjectInputStreamUnmarshaller) {
    throw new SkipException(""String_Node_Str"" + unmarshaller);
  }
  final Object repl=unmarshaller.readObject();
  assertEquals(ReplacementClass.class,repl.getClass());
  assertSame(repl,unmarshaller.readObject());
  assertEquals(((ReplacementClass)repl).blah,""String_Node_Str"");
}","public void runRead(final Unmarshaller unmarshaller) throws Throwable {
  final String o1=(String)unmarshaller.readObject();
  final Integer o2=(Integer)unmarshaller.readObject();
  assertSame(o1,unmarshaller.readObject());
  assertSame(o2,unmarshaller.readObject());
  final String o1p=(String)unmarshaller.readObject();
  final Integer o2p=(Integer)unmarshaller.readObject();
  assertNotSame(o1,o1p);
  assertNotSame(o2,o2p);
  assertSame(o1p,unmarshaller.readObject());
  assertSame(o2p,unmarshaller.readObject());
}"
43022,"public void runWrite(final Marshaller marshaller) throws Throwable {
  if (marshaller instanceof ObjectOutputStreamMarshaller) {
    throw new SkipException(""String_Node_Str"" + marshaller);
  }
  if (marshaller instanceof JavaSerializationMarshaller) {
    throw new SkipException(""String_Node_Str"");
  }
  marshaller.writeObject(orig);
  marshaller.writeObject(orig);
}","public void runWrite(final Marshaller marshaller) throws Throwable {
  final String o1=""String_Node_Str"";
  final Integer o2=Integer.valueOf(48392);
  marshaller.writeObject(o1);
  marshaller.writeObject(o2);
  marshaller.writeObject(o1);
  marshaller.writeObject(o2);
  marshaller.clearClassCache();
  marshaller.writeObject(o1);
  marshaller.writeObject(o2);
  marshaller.writeObject(o1);
  marshaller.writeObject(o2);
}"
43023,"/** 
 * An object field. 
 */
SerializableField(Class<?> clazz,Class<?> type,String name,boolean unshared){
  classRef=new WeakReference<Class<?>>(clazz);
  typeRef=new WeakReference<Class<?>>(type);
  this.name=name;
  this.unshared=unshared;
  if (type == boolean.class) {
    kind=Kind.BOOLEAN;
  }
 else   if (type == byte.class) {
    kind=Kind.BYTE;
  }
 else   if (type == short.class) {
    kind=Kind.SHORT;
  }
 else   if (type == int.class) {
    kind=Kind.INT;
  }
 else   if (type == long.class) {
    kind=Kind.LONG;
  }
 else   if (type == char.class) {
    kind=Kind.CHAR;
  }
 else   if (type == float.class) {
    kind=Kind.FLOAT;
  }
 else   if (type == double.class) {
    kind=Kind.DOUBLE;
  }
 else {
    kind=Kind.OBJECT;
  }
}","SerializableField(Class<?> clazz,Class<?> type,String name,boolean unshared){
  classRef=new WeakReference<Class<?>>(clazz);
  typeRef=new WeakReference<Class<?>>(type);
  this.name=name;
  this.unshared=unshared;
  if (type == boolean.class) {
    kind=Kind.BOOLEAN;
  }
 else   if (type == byte.class) {
    kind=Kind.BYTE;
  }
 else   if (type == short.class) {
    kind=Kind.SHORT;
  }
 else   if (type == int.class) {
    kind=Kind.INT;
  }
 else   if (type == long.class) {
    kind=Kind.LONG;
  }
 else   if (type == char.class) {
    kind=Kind.CHAR;
  }
 else   if (type == float.class) {
    kind=Kind.FLOAT;
  }
 else   if (type == double.class) {
    kind=Kind.DOUBLE;
  }
 else {
    kind=Kind.OBJECT;
  }
}"
43024,"/** 
 * Get the reflection   {@code Field} for this serializable field.  The resultant field will be accessable.
 * @return the reflection field
 */
public Field getField(){
}","/** 
 * Get the reflection   {@code Field} for this serializable field.  The resultant field will be accessable.
 * @return the reflection field
 */
public Field getField(){
  final WeakReference<Field> fieldRef=fieldRefRef.get();
  if (fieldRef == null) {
    final Field field=lookupField();
    if (field != null) {
      fieldRefRef.compareAndSet(null,new WeakReference<Field>(field));
    }
    AccessController.doPrivileged(new PrivilegedAction<Void>(){
      public Void run(){
        field.setAccessible(true);
        return null;
      }
    }
);
    return field;
  }
 else {
    final Field field=fieldRef.get();
    if (field != null) {
      return field;
    }
    return AccessController.doPrivileged(new PrivilegedAction<Field>(){
      public Field run(){
        final Field newField=lookupField();
        final WeakReference<Field> newFieldRef;
        if (newField == null) {
          newFieldRef=null;
        }
 else {
          newField.setAccessible(true);
          newFieldRef=new WeakReference<Field>(newField);
        }
        fieldRefRef.compareAndSet(fieldRef,newFieldRef);
        return newField;
      }
    }
);
  }
}"
43025,"void defaultReadFields(final SerialUnmarshaller serialUnmarshaller,final Object subject) throws IOException, ClassNotFoundException {
  try {
    for (    SerializableField serializableField : fields) {
switch (serializableField.getKind()) {
case BOOLEAN:
{
          serializableField.getField().setBoolean(subject,serialUnmarshaller.readBoolean());
          break;
        }
case BYTE:
{
        serializableField.getField().setByte(subject,serialUnmarshaller.readByte());
        break;
      }
case CHAR:
{
      serializableField.getField().setChar(subject,serialUnmarshaller.readChar());
      break;
    }
case DOUBLE:
{
    serializableField.getField().setDouble(subject,serialUnmarshaller.readDouble());
    break;
  }
case FLOAT:
{
  serializableField.getField().setFloat(subject,serialUnmarshaller.readFloat());
  break;
}
case INT:
{
serializableField.getField().setInt(subject,serialUnmarshaller.readInt());
break;
}
case LONG:
{
serializableField.getField().setLong(subject,serialUnmarshaller.readLong());
break;
}
case SHORT:
{
serializableField.getField().setShort(subject,serialUnmarshaller.readShort());
break;
}
}
}
for (SerializableField serializableField : fields) {
if (serializableField.getKind() == SerializableField.Kind.OBJECT) {
serializableField.getField().set(subject,serialUnmarshaller.readObject());
}
}
}
 catch (IllegalAccessException e) {
final InvalidClassException ice=new InvalidClassException(""String_Node_Str"");
ice.initCause(e);
throw ice;
}
}","void defaultReadFields(final SerialUnmarshaller serialUnmarshaller,final Object subject) throws IOException, ClassNotFoundException {
  try {
    for (    SerializableField serializableField : fields) {
switch (serializableField.getKind()) {
case BOOLEAN:
{
          serializableField.getField().setBoolean(subject,serialUnmarshaller.readBoolean());
          break;
        }
case BYTE:
{
        serializableField.getField().setByte(subject,serialUnmarshaller.readByte());
        break;
      }
case CHAR:
{
      serializableField.getField().setChar(subject,serialUnmarshaller.readChar());
      break;
    }
case DOUBLE:
{
    serializableField.getField().setDouble(subject,serialUnmarshaller.readDouble());
    break;
  }
case FLOAT:
{
  serializableField.getField().setFloat(subject,serialUnmarshaller.readFloat());
  break;
}
case INT:
{
serializableField.getField().setInt(subject,serialUnmarshaller.readInt());
break;
}
case LONG:
{
serializableField.getField().setLong(subject,serialUnmarshaller.readLong());
break;
}
case SHORT:
{
serializableField.getField().setShort(subject,serialUnmarshaller.readShort());
break;
}
}
}
for (SerializableField serializableField : fields) {
if (serializableField.getKind() == Kind.OBJECT) {
serializableField.getField().set(subject,serialUnmarshaller.readObject());
}
}
}
 catch (IllegalAccessException e) {
final InvalidClassException ice=new InvalidClassException(""String_Node_Str"");
ice.initCause(e);
throw ice;
}
}"
43026,"private void writeSerialData(Class<?> objClass,Object obj) throws IOException {
  final Class<?> superClass=objClass.getSuperclass();
  if (superClass != null && Serializable.class.isAssignableFrom(objClass)) {
    writeSerialData(superClass,obj);
  }
  final SerializableClass sc=registry.lookup(objClass);
  if (sc.hasWriteObject()) {
    final SerialObjectOutputStream oos=getObjectOutputStream();
    final Object oldObj=oos.saveCurrentObject(obj);
    final SerializableClass oldSc=oos.saveCurrentSerializableClass(sc);
    final SerialObjectOutputStream.State oldState=oos.saveState();
    try {
      sc.callWriteObject(obj,oos);
    }
  finally {
      oos.setCurrentObject(oldObj);
      oos.setCurrentSerializableClass(oldSc);
      oos.restoreState(oldState);
    }
    doEndBlock();
  }
 else {
    doWriteFields(sc,obj);
  }
}","private void writeSerialData(Class<?> objClass,Object obj) throws IOException {
  final Class<?> superClass=objClass.getSuperclass();
  if (superClass != null && Serializable.class.isAssignableFrom(objClass)) {
    writeSerialData(superClass,obj);
  }
  final SerializableClass sc=registry.lookup(objClass);
  if (sc.hasWriteObject()) {
    final SerialObjectOutputStream oos=getObjectOutputStream();
    final Object oldObj=oos.saveCurrentObject(obj);
    final SerializableClass oldSc=oos.saveCurrentSerializableClass(sc);
    final Map<String,FieldPutter> map=oos.saveCurrentFieldMap();
    final SerialObjectOutputStream.State oldState=oos.saveState();
    try {
      sc.callWriteObject(obj,oos);
    }
  finally {
      oos.setCurrentObject(oldObj);
      oos.setCurrentSerializableClass(oldSc);
      oos.setCurrentFieldMap(map);
      oos.restoreState(oldState);
    }
    doEndBlock();
  }
 else {
    doWriteFields(sc,obj);
  }
}"
43027,"private void writeNewPlainClassDesc(final Class<?> forClass) throws IOException {
  write(TC_CLASSDESC);
  writeUTF(classResolver.getClassName(forClass));
  descriptorCache.put(forClass,instanceSeq++);
  if (forClass.isEnum()) {
    writeLong(0L);
    write(SC_SERIALIZABLE | SC_ENUM);
    writeShort(0);
  }
 else   if (Serializable.class.isAssignableFrom(forClass)) {
    final SerializableClass sc=registry.lookup(forClass);
    final long svu=sc.getEffectiveSerialVersionUID();
    writeLong(svu);
    if (Externalizable.class.isAssignableFrom(forClass)) {
      write(SC_EXTERNALIZABLE + SC_BLOCK_DATA);
      writeShort(0);
    }
 else {
      if (sc.hasWriteObject()) {
        write(SC_WRITE_METHOD + SC_SERIALIZABLE);
      }
 else {
        write(SC_SERIALIZABLE);
      }
      final SerializableField[] fields=sc.getFields();
      writeShort(fields.length);
      for (      SerializableField field : fields) {
        final SerializableField.Kind kind=field.getKind();
        final String name=field.getName();
        final Class<?> type;
        try {
          type=field.getType();
        }
 catch (        ClassNotFoundException e) {
          throw new InvalidClassException(forClass.getName(),""String_Node_Str"" + name + ""String_Node_Str"");
        }
        if (kind != SerializableField.Kind.OBJECT) {
          write(primitives.get(type,-1));
          writeUTF(name);
        }
      }
      for (      SerializableField field : fields) {
        final SerializableField.Kind kind=field.getKind();
        final String name=field.getName();
        final Class<?> type;
        try {
          type=field.getType();
        }
 catch (        ClassNotFoundException e) {
          throw new InvalidClassException(forClass.getName(),""String_Node_Str"" + name + ""String_Node_Str"");
        }
        if (kind == SerializableField.Kind.OBJECT) {
          final String signature=getSignature(type);
          write(signature.charAt(0));
          writeUTF(name);
          writeObject(signature);
        }
      }
    }
  }
 else {
    writeLong(0L);
    write(0);
    writeShort(0);
  }
  classResolver.annotateClass(blockMarshaller,forClass);
  doEndBlock();
  final Class<?> sc=forClass.getSuperclass();
  if (Serializable.class.isAssignableFrom(sc)) {
    writeClassDescFor(sc);
  }
 else {
    write(TC_NULL);
  }
}","private void writeNewPlainClassDesc(final Class<?> forClass) throws IOException {
  write(TC_CLASSDESC);
  writeUTF(classResolver.getClassName(forClass));
  descriptorCache.put(forClass,instanceSeq++);
  if (forClass.isEnum()) {
    writeLong(0L);
    write(SC_SERIALIZABLE | SC_ENUM);
    writeShort(0);
  }
 else   if (Serializable.class.isAssignableFrom(forClass)) {
    final SerializableClass sc=registry.lookup(forClass);
    final long svu=sc.getEffectiveSerialVersionUID();
    writeLong(svu);
    if (Externalizable.class.isAssignableFrom(forClass)) {
      write(SC_EXTERNALIZABLE + SC_BLOCK_DATA);
      writeShort(0);
    }
 else {
      if (sc.hasWriteObject()) {
        write(SC_WRITE_METHOD + SC_SERIALIZABLE);
      }
 else {
        write(SC_SERIALIZABLE);
      }
      final SerializableField[] fields=sc.getFields();
      writeShort(fields.length);
      for (      SerializableField field : fields) {
        final Kind kind=field.getKind();
        final String name=field.getName();
        final Class<?> type;
        try {
          type=field.getType();
        }
 catch (        ClassNotFoundException e) {
          throw new InvalidClassException(forClass.getName(),""String_Node_Str"" + name + ""String_Node_Str"");
        }
        if (kind != Kind.OBJECT) {
          write(primitives.get(type,-1));
          writeUTF(name);
        }
      }
      for (      SerializableField field : fields) {
        final Kind kind=field.getKind();
        final String name=field.getName();
        final Class<?> type;
        try {
          type=field.getType();
        }
 catch (        ClassNotFoundException e) {
          throw new InvalidClassException(forClass.getName(),""String_Node_Str"" + name + ""String_Node_Str"");
        }
        if (kind == Kind.OBJECT) {
          final String signature=getSignature(type);
          write(signature.charAt(0));
          writeUTF(name);
          writeObject(signature);
        }
      }
    }
  }
 else {
    writeLong(0L);
    write(0);
    writeShort(0);
  }
  classResolver.annotateClass(blockMarshaller,forClass);
  doEndBlock();
  final Class<?> sc=forClass.getSuperclass();
  if (Serializable.class.isAssignableFrom(sc)) {
    writeClassDescFor(sc);
  }
 else {
    write(TC_NULL);
  }
}"
43028,"protected void doWriteFields(final SerializableClass info,final Object obj) throws IOException {
  final SerializableField[] serializableFields=info.getFields();
  for (  SerializableField serializableField : serializableFields) {
    try {
      final Field field=serializableField.getField();
switch (serializableField.getKind()) {
case BOOLEAN:
{
          writeBoolean(field.getBoolean(obj));
          break;
        }
case BYTE:
{
        writeByte(field.getByte(obj));
        break;
      }
case SHORT:
{
      writeShort(field.getShort(obj));
      break;
    }
case INT:
{
    writeInt(field.getInt(obj));
    break;
  }
case CHAR:
{
  writeChar(field.getChar(obj));
  break;
}
case LONG:
{
writeLong(field.getLong(obj));
break;
}
case DOUBLE:
{
writeDouble(field.getDouble(obj));
break;
}
case FLOAT:
{
writeFloat(field.getFloat(obj));
break;
}
}
}
 catch (IllegalAccessException e) {
final InvalidObjectException ioe=new InvalidObjectException(""String_Node_Str"");
ioe.initCause(e);
throw ioe;
}
}
for (SerializableField serializableField : serializableFields) {
try {
final Field field=serializableField.getField();
SerializableField.Kind i=serializableField.getKind();
if (i == SerializableField.Kind.OBJECT) {
doWriteObject(field.get(obj),serializableField.isUnshared());
}
}
 catch (IllegalAccessException e) {
final InvalidObjectException ioe=new InvalidObjectException(""String_Node_Str"");
ioe.initCause(e);
throw ioe;
}
}
}","protected void doWriteFields(final SerializableClass info,final Object obj) throws IOException {
  final SerializableField[] serializableFields=info.getFields();
  for (  SerializableField serializableField : serializableFields) {
    try {
      final Field field=serializableField.getField();
switch (serializableField.getKind()) {
case BOOLEAN:
{
          writeBoolean(field.getBoolean(obj));
          break;
        }
case BYTE:
{
        writeByte(field.getByte(obj));
        break;
      }
case SHORT:
{
      writeShort(field.getShort(obj));
      break;
    }
case INT:
{
    writeInt(field.getInt(obj));
    break;
  }
case CHAR:
{
  writeChar(field.getChar(obj));
  break;
}
case LONG:
{
writeLong(field.getLong(obj));
break;
}
case DOUBLE:
{
writeDouble(field.getDouble(obj));
break;
}
case FLOAT:
{
writeFloat(field.getFloat(obj));
break;
}
}
}
 catch (IllegalAccessException e) {
final InvalidObjectException ioe=new InvalidObjectException(""String_Node_Str"");
ioe.initCause(e);
throw ioe;
}
}
for (SerializableField serializableField : serializableFields) {
try {
final Field field=serializableField.getField();
Kind i=serializableField.getKind();
if (i == Kind.OBJECT) {
doWriteObject(field.get(obj),serializableField.isUnshared());
}
}
 catch (IllegalAccessException e) {
final InvalidObjectException ioe=new InvalidObjectException(""String_Node_Str"");
ioe.initCause(e);
throw ioe;
}
}
}"
43029,"protected void readSerial(final SerialUnmarshaller serialUnmarshaller,final SerializableClass sc,final Object subject) throws IOException, ClassNotFoundException {
  if ((flags & SC_WRITE_METHOD) != 0) {
    if (sc.hasReadObject()) {
      doReadObject(serialUnmarshaller,sc,subject);
    }
 else {
      defaultReadFields(serialUnmarshaller,subject);
    }
    serialUnmarshaller.getBlockUnmarshaller().readToEndBlockData();
  }
 else {
    if (sc.hasReadObject()) {
      final BlockUnmarshaller blockUnmarshaller=serialUnmarshaller.getBlockUnmarshaller();
      blockUnmarshaller.endOfStream();
      doReadObject(serialUnmarshaller,sc,subject);
      blockUnmarshaller.unblock();
    }
 else {
      defaultReadFields(serialUnmarshaller,subject);
    }
  }
}","protected void readSerial(final SerialUnmarshaller serialUnmarshaller,final SerializableClass sc,final Object subject) throws IOException, ClassNotFoundException {
  if ((flags & SC_WRITE_METHOD) != 0) {
    if (sc.hasReadObject()) {
      doReadObject(serialUnmarshaller,sc,subject);
    }
 else {
      defaultReadFields(serialUnmarshaller,subject);
    }
    final BlockUnmarshaller blockUnmarshaller=serialUnmarshaller.getBlockUnmarshaller();
    blockUnmarshaller.readToEndBlockData();
    blockUnmarshaller.unblock();
  }
 else {
    if (sc.hasReadObject()) {
      final BlockUnmarshaller blockUnmarshaller=serialUnmarshaller.getBlockUnmarshaller();
      blockUnmarshaller.endOfStream();
      doReadObject(serialUnmarshaller,sc,subject);
      blockUnmarshaller.unblock();
    }
 else {
      defaultReadFields(serialUnmarshaller,subject);
    }
  }
}"
43030,"private void doReadObject(final SerialUnmarshaller serialUnmarshaller,final SerializableClass sc,final Object subject) throws ClassNotFoundException, IOException {
  final SerialObjectInputStream ois=serialUnmarshaller.getObjectInputStream();
  final SerialObjectInputStream.State oldState=ois.saveState();
  final PlainDescriptor oldDescriptor=ois.saveCurrentDescriptor(this);
  final SerializableClass oldSerializableClass=ois.saveCurrentSerializableClass(sc);
  final Object oldSubject=ois.saveCurrentSubject(subject);
  try {
    final BlockUnmarshaller blockUnmarshaller=serialUnmarshaller.getBlockUnmarshaller();
    blockUnmarshaller.unblock();
    sc.callReadObject(subject,ois);
    if (ois.restoreState(oldState) != SerialObjectInputStream.State.ON) {
      throw new StreamCorruptedException(""String_Node_Str"");
    }
  }
  finally {
    ois.restoreState(oldState);
    ois.setCurrentDescriptor(oldDescriptor);
    ois.setCurrentSerializableClass(oldSerializableClass);
    ois.setCurrentSubject(oldSubject);
  }
}","private void doReadObject(final SerialUnmarshaller serialUnmarshaller,final SerializableClass sc,final Object subject) throws ClassNotFoundException, IOException {
  final SerialObjectInputStream ois=serialUnmarshaller.getObjectInputStream();
  final SerialObjectInputStream.State oldState=ois.saveState();
  final PlainDescriptor oldDescriptor=ois.saveCurrentDescriptor(this);
  final SerializableClass oldSerializableClass=ois.saveCurrentSerializableClass(sc);
  final Object oldSubject=ois.saveCurrentSubject(subject);
  try {
    sc.callReadObject(subject,ois);
    if (ois.restoreState(oldState) != SerialObjectInputStream.State.ON) {
      throw new StreamCorruptedException(""String_Node_Str"");
    }
  }
  finally {
    ois.restoreState(oldState);
    ois.setCurrentDescriptor(oldDescriptor);
    ois.setCurrentSerializableClass(oldSerializableClass);
    ois.setCurrentSubject(oldSubject);
  }
}"
43031,"private Descriptor readClassDescriptor(int leadByte) throws IOException, ClassNotFoundException {
switch (leadByte) {
case TC_CLASSDESC:
{
      final String className=readUTF();
      final long svu=readLong();
      final int idx=instanceCache.size();
      instanceCache.add(null);
      final int descFlags=readUnsignedByte();
      final int fieldCount=readUnsignedShort();
      final int[] typecodes=new int[fieldCount];
      final String[] names=new String[fieldCount];
      final String[] fieldSignatures=new String[fieldCount];
      for (int i=0; i < fieldCount; i++) {
        typecodes[i]=readUnsignedByte();
        names[i]=readUTF();
        if (typecodes[i] == '[' || typecodes[i] == 'L') {
          fieldSignatures[i]=doReadString();
        }
      }
      final Class<?> clazz=classResolver.resolveClass(blockUnmarshaller,className,svu);
      blockUnmarshaller.readToEndBlockData();
      final SerializableClass sc=registry.lookup(clazz);
      final SerializableField[] fields=new SerializableField[fieldCount];
      for (int i=0; i < fieldCount; i++) {
        final Class<?> fieldType;
switch (typecodes[i]) {
case 'B':
{
            fieldType=byte.class;
            break;
          }
case 'C':
{
          fieldType=char.class;
          break;
        }
case 'D':
{
        fieldType=double.class;
        break;
      }
case 'F':
{
      fieldType=float.class;
      break;
    }
case 'I':
{
    fieldType=int.class;
    break;
  }
case 'J':
{
  fieldType=long.class;
  break;
}
case 'S':
{
fieldType=short.class;
break;
}
case 'Z':
{
fieldType=boolean.class;
break;
}
case 'L':
case '[':
{
fieldType=Object.class;
break;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + typecodes[i]);
}
}
fields[i]=sc.getSerializableField(names[i],fieldType,false);
}
final Descriptor superDescr=readClassDescriptor();
final Class<?> superClazz=clazz.getSuperclass();
final Descriptor descriptor;
if (superDescr == null || superDescr.getType().isAssignableFrom(superClazz)) {
descriptor=descFlags == 0 ? new NoDataDescriptor(clazz,bridge(superDescr,superClazz)) : new PlainDescriptor(clazz,bridge(superDescr,superClazz),fields,descFlags);
}
 else {
throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
}
instanceCache.set(idx,descriptor);
return descriptor;
}
case TC_PROXYCLASSDESC:
{
final int idx=instanceCache.size();
instanceCache.add(UNRESOLVED);
final int cnt=readInt();
final String[] interfaces=new String[cnt];
for (int i=0; i < interfaces.length; i++) {
interfaces[i]=readUTF();
}
final Class<?> clazz=classResolver.resolveProxyClass(blockUnmarshaller,interfaces);
blockUnmarshaller.readToEndBlockData();
final Descriptor superDescr=readClassDescriptor();
final ProxyDescriptor descr=new ProxyDescriptor(clazz,superDescr,interfaces);
instanceCache.set(idx,descr);
return descr;
}
case TC_NULL:
{
return null;
}
case TC_REFERENCE:
{
try {
return (Descriptor)readBackReference(readInt());
}
 catch (ClassCastException e) {
throw new StreamCorruptedException(""String_Node_Str"");
}
}
default :
throw badLeadByte(leadByte);
}
}","private Descriptor readClassDescriptor(int leadByte) throws IOException, ClassNotFoundException {
switch (leadByte) {
case TC_CLASSDESC:
{
      final String className=readUTF();
      final long svu=readLong();
      final int idx=instanceCache.size();
      instanceCache.add(null);
      final int descFlags=readUnsignedByte();
      final int fieldCount=readUnsignedShort();
      final int[] typecodes=new int[fieldCount];
      final String[] names=new String[fieldCount];
      final String[] fieldSignatures=new String[fieldCount];
      for (int i=0; i < fieldCount; i++) {
        typecodes[i]=readUnsignedByte();
        names[i]=readUTF();
        if (typecodes[i] == '[' || typecodes[i] == 'L') {
          fieldSignatures[i]=doReadString();
        }
      }
      final Class<?> clazz=classResolver.resolveClass(blockUnmarshaller,className,svu);
      blockUnmarshaller.readToEndBlockData();
      blockUnmarshaller.unblock();
      final SerializableClass sc=registry.lookup(clazz);
      final SerializableField[] fields=new SerializableField[fieldCount];
      for (int i=0; i < fieldCount; i++) {
        final Class<?> fieldType;
switch (typecodes[i]) {
case 'B':
{
            fieldType=byte.class;
            break;
          }
case 'C':
{
          fieldType=char.class;
          break;
        }
case 'D':
{
        fieldType=double.class;
        break;
      }
case 'F':
{
      fieldType=float.class;
      break;
    }
case 'I':
{
    fieldType=int.class;
    break;
  }
case 'J':
{
  fieldType=long.class;
  break;
}
case 'S':
{
fieldType=short.class;
break;
}
case 'Z':
{
fieldType=boolean.class;
break;
}
case 'L':
case '[':
{
fieldType=Object.class;
break;
}
default :
{
throw new StreamCorruptedException(""String_Node_Str"" + typecodes[i]);
}
}
fields[i]=sc.getSerializableField(names[i],fieldType,false);
}
final Descriptor superDescr=readClassDescriptor();
final Class<?> superClazz=clazz.getSuperclass();
final Descriptor descriptor;
if (superDescr == null || superDescr.getType().isAssignableFrom(superClazz)) {
descriptor=descFlags == 0 ? new NoDataDescriptor(clazz,bridge(superDescr,superClazz)) : new PlainDescriptor(clazz,bridge(superDescr,superClazz),fields,descFlags);
}
 else {
throw new InvalidClassException(clazz.getName(),""String_Node_Str"");
}
instanceCache.set(idx,descriptor);
return descriptor;
}
case TC_PROXYCLASSDESC:
{
final int idx=instanceCache.size();
instanceCache.add(UNRESOLVED);
final int cnt=readInt();
final String[] interfaces=new String[cnt];
for (int i=0; i < interfaces.length; i++) {
interfaces[i]=readUTF();
}
final Class<?> clazz=classResolver.resolveProxyClass(blockUnmarshaller,interfaces);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
final Descriptor superDescr=readClassDescriptor();
final ProxyDescriptor descr=new ProxyDescriptor(clazz,superDescr,interfaces);
instanceCache.set(idx,descr);
return descr;
}
case TC_NULL:
{
return null;
}
case TC_REFERENCE:
{
try {
return (Descriptor)readBackReference(readInt());
}
 catch (ClassCastException e) {
throw new StreamCorruptedException(""String_Node_Str"");
}
}
default :
throw badLeadByte(leadByte);
}
}"
43032,"private static void dumpFields(final ClassInfo info,final Map<Integer,ClassInfo> map,final AtomicInteger seq,final DataInputStream dis,final BufferedWriter w,final int depth) throws IOException {
  if ((info.flags & SC_EXTERNALIZABLE) != 0) {
    printf(w,depth,""String_Node_Str"");
    dumpBlockData(map,seq,dis,w,depth + 1);
  }
 else   if ((info.flags & SC_SERIALIZABLE) != 0) {
    if (info.parent != null) {
      dumpFields(info.parent,map,seq,dis,w,depth);
    }
    printf(w,depth,""String_Node_Str"",info.name);
    for (    FieldInfo fieldInfo : info.info) {
      printf(w,depth + 1,""String_Node_Str"",fieldInfo.name,fieldInfo.type.getValueString(dis));
      if (fieldInfo.type.isObject()) {
        dumpObject(map,seq,dis,w,depth + 2,dis.readUnsignedByte());
      }
    }
    if ((info.flags & SC_WRITE_METHOD) != 0) {
      printf(w,depth,""String_Node_Str"",info.name);
      dumpBlockData(map,seq,dis,w,depth + 1);
    }
  }
 else {
    printf(w,depth,""String_Node_Str"",info.name);
  }
}","private static void dumpFields(final ClassInfo info,final Map<Integer,ClassInfo> map,final AtomicInteger seq,final DataInputStream dis,final BufferedWriter w,final int depth) throws IOException {
  if ((info.flags & SC_EXTERNALIZABLE) != 0) {
    printf(w,depth,""String_Node_Str"");
    dumpBlockData(map,seq,dis,w,depth + 1);
  }
 else   if ((info.flags & SC_SERIALIZABLE) != 0) {
    if (info.parent != null) {
      dumpFields(info.parent,map,seq,dis,w,depth);
    }
    printf(w,depth,""String_Node_Str"",info.name);
    for (    FieldInfo fieldInfo : info.info) {
      printf(w,depth + 1,""String_Node_Str"",fieldInfo.name,fieldInfo.type.getValueString(dis));
      if (fieldInfo.type.isObject()) {
        dumpObject(map,seq,dis,w,depth + 2,dis.readUnsignedByte());
      }
    }
    if ((info.flags & SC_WRITE_METHOD) != 0) {
      printf(w,depth,""String_Node_Str"",info.name);
      dumpBlockData(map,seq,dis,w,depth + 1);
    }
  }
 else {
    if (info.parent != null) {
      dumpFields(info.parent,map,seq,dis,w,depth);
    }
    printf(w,depth,""String_Node_Str"",info.name);
  }
}"
43033,"public SerialObjectOutputStream run() throws IOException {
  return new SerialObjectOutputStream(SerialMarshaller.this);
}","public SerialObjectOutputStream run() throws IOException {
  return new SerialObjectOutputStream(SerialMarshaller.this,blockMarshaller);
}"
43034,"public void writeFields() throws IOException {
  if (state == State.NEW) {
    marshaller.doWriteFields(currentSerializableClass,currentObject);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public void writeFields() throws IOException {
  if (state == State.NEW) {
    serialMarshaller.doWriteFields(currentSerializableClass,currentObject);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}"
43035,"/** 
 * Construct a new instance that delegates to the given marshaller.
 * @param marshaller the delegate marshaller
 * @throws java.io.IOException if an I/O error occurs
 * @throws SecurityException if the caller does not have permission to construct an instance of this class
 */
protected SerialObjectOutputStream(final SerialMarshaller marshaller) throws IOException, SecurityException {
  super(marshaller);
  this.marshaller=marshaller;
}","protected SerialObjectOutputStream(final SerialMarshaller serialMarshaller,final BlockMarshaller blockMarshaller) throws IOException, SecurityException {
  super(blockMarshaller);
  this.serialMarshaller=serialMarshaller;
}"
43036,"private void doReadSerialObject(final Descriptor descriptor,final Class<?> currentClass,final Object obj) throws ClassNotFoundException, IOException {
  descriptor.readSerial(this,registry.lookup(currentClass),obj);
}","private void doReadSerialObject(final Descriptor descriptor,final Object obj) throws ClassNotFoundException, IOException {
  final Descriptor parent=descriptor.getParent();
  if (parent != null) {
    doReadSerialObject(parent,obj);
  }
  descriptor.readSerial(this,registry.lookup(descriptor.getType()),obj);
}"
43037,"Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case TC_NULL:
{
        return null;
      }
case TC_REFERENCE:
{
      final Object prevObj=readBackReference(readInt());
      if (prevObj instanceof Descriptor) {
        throw objectStreamClassException();
      }
      return prevObj;
    }
case TC_CLASS:
{
    final Descriptor descriptor=readNonNullClassDescriptor();
    final Class<?> obj=descriptor.getType();
    instanceCache.add(obj);
    return obj;
  }
case TC_CLASSDESC:
{
  throw objectStreamClassException();
}
case TC_PROXYCLASSDESC:
{
throw objectStreamClassException();
}
case TC_STRING:
{
final int len=readUnsignedShort();
final String str=UTFUtils.readUTFBytesByByteCount(this,len);
instanceCache.add(unshared ? UNSHARED : str);
return str;
}
case TC_LONGSTRING:
{
final long len=super.readLong();
final String str=UTFUtils.readUTFBytesByByteCount(this,len);
instanceCache.add(unshared ? UNSHARED : str);
return str;
}
case TC_ARRAY:
{
final Descriptor descriptor=readNonNullClassDescriptor();
final int idx=instanceCache.size();
instanceCache.add(UNRESOLVED);
final int size=readInt();
final Class<?> type=descriptor.getType();
if (!type.isArray()) {
throw new InvalidClassException(type.getName(),""String_Node_Str"");
}
final Class<?> ct=type.getComponentType();
if (ct.isPrimitive()) {
if (ct == byte.class) {
final byte[] bytes=new byte[size];
readFully(bytes);
instanceCache.set(idx,bytes);
return bytes;
}
 else if (ct == short.class) {
final short[] shorts=new short[size];
for (int i=0; i < shorts.length; i++) {
shorts[i]=readShort();
}
instanceCache.set(idx,shorts);
return shorts;
}
 else if (ct == int.class) {
final int[] ints=new int[size];
for (int i=0; i < ints.length; i++) {
ints[i]=readInt();
}
instanceCache.set(idx,ints);
return ints;
}
 else if (ct == long.class) {
final long[] longs=new long[size];
for (int i=0; i < longs.length; i++) {
longs[i]=readLong();
}
instanceCache.set(idx,longs);
return longs;
}
 else if (ct == float.class) {
final float[] floats=new float[size];
for (int i=0; i < floats.length; i++) {
floats[i]=readFloat();
}
instanceCache.set(idx,floats);
return floats;
}
 else if (ct == double.class) {
final double[] doubles=new double[size];
for (int i=0; i < doubles.length; i++) {
doubles[i]=readDouble();
}
instanceCache.set(idx,doubles);
return doubles;
}
 else if (ct == boolean.class) {
final boolean[] booleans=new boolean[size];
for (int i=0; i < booleans.length; i++) {
booleans[i]=readBoolean();
}
instanceCache.set(idx,booleans);
return booleans;
}
 else if (ct == char.class) {
final char[] chars=new char[size];
for (int i=0; i < chars.length; i++) {
chars[i]=readChar();
}
instanceCache.set(idx,chars);
return chars;
}
 else {
throw new InvalidClassException(type.getName(),""String_Node_Str"");
}
}
 else {
final Object[] objects=(Object[])Array.newInstance(ct,size);
instanceCache.set(idx,objects);
for (int i=0; i < objects.length; i++) {
objects[i]=doReadObject(false);
}
return objects;
}
}
case TC_ENUM:
{
final Descriptor descriptor=readNonNullClassDescriptor();
final Class<? extends Enum> enumType;
try {
enumType=descriptor.getType().asSubclass(Enum.class);
}
 catch (ClassCastException e) {
throw new InvalidClassException(""String_Node_Str"");
}
final int h=instanceCache.size();
instanceCache.add(UNRESOLVED);
final String constName=(String)doReadObject(false);
final Enum obj=Enum.valueOf(enumType,constName);
instanceCache.set(h,obj);
return obj;
}
case TC_OBJECT:
{
final Descriptor descriptor=readNonNullClassDescriptor();
if ((descriptor.getFlags() & (SC_SERIALIZABLE | SC_EXTERNALIZABLE)) == 0) {
throw new NotSerializableException(descriptor.getClass().getName());
}
final Object obj=creator.create(descriptor.getType());
instanceCache.add(unshared ? UNSHARED : obj);
if ((descriptor.getFlags() & SC_EXTERNALIZABLE) != 0) {
if (obj instanceof Externalizable) {
final Externalizable externalizable=(Externalizable)obj;
if ((descriptor.getFlags() & SC_BLOCK_DATA) != 0) {
externalizable.readExternal(blockUnmarshaller);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
}
 else {
externalizable.readExternal(this);
}
}
 else {
throw new InvalidObjectException(""String_Node_Str"");
}
}
 else if (obj instanceof Externalizable) {
throw new InvalidObjectException(""String_Node_Str"");
}
 else {
doReadSerialObject(descriptor,obj.getClass(),obj);
}
return obj;
}
case TC_EXCEPTION:
{
clearInstanceCache();
final IOException ex=(IOException)doReadObject(false);
throw new WriteAbortedException(""String_Node_Str"",ex);
}
case TC_BLOCKDATA:
case TC_BLOCKDATALONG:
{
blockUnmarshaller.readBlockHeader(leadByte);
throw createOptionalDataException(blockUnmarshaller.remaining());
}
case TC_ENDBLOCKDATA:
{
throw createOptionalDataException(0);
}
case TC_RESET:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
clearInstanceCache();
leadByte=readByte() & 0xff;
continue;
}
default :
{
throw badLeadByte(leadByte);
}
}
}
  finally {
depth--;
}
}","Object doReadObject(int leadByte,final boolean unshared) throws IOException, ClassNotFoundException {
  depth++;
  try {
    for (; ; ) switch (leadByte) {
case TC_NULL:
{
        return null;
      }
case TC_REFERENCE:
{
      final Object prevObj=readBackReference(readInt());
      if (prevObj instanceof Descriptor) {
        throw objectStreamClassException();
      }
      return prevObj;
    }
case TC_CLASS:
{
    final Descriptor descriptor=readNonNullClassDescriptor();
    final Class<?> obj=descriptor.getType();
    instanceCache.add(obj);
    return obj;
  }
case TC_CLASSDESC:
{
  throw objectStreamClassException();
}
case TC_PROXYCLASSDESC:
{
throw objectStreamClassException();
}
case TC_STRING:
{
final int len=readUnsignedShort();
final String str=UTFUtils.readUTFBytesByByteCount(this,len);
instanceCache.add(unshared ? UNSHARED : str);
return str;
}
case TC_LONGSTRING:
{
final long len=super.readLong();
final String str=UTFUtils.readUTFBytesByByteCount(this,len);
instanceCache.add(unshared ? UNSHARED : str);
return str;
}
case TC_ARRAY:
{
final Descriptor descriptor=readNonNullClassDescriptor();
final int idx=instanceCache.size();
instanceCache.add(UNRESOLVED);
final int size=readInt();
final Class<?> type=descriptor.getType();
if (!type.isArray()) {
throw new InvalidClassException(type.getName(),""String_Node_Str"");
}
final Class<?> ct=type.getComponentType();
if (ct.isPrimitive()) {
if (ct == byte.class) {
final byte[] bytes=new byte[size];
readFully(bytes);
instanceCache.set(idx,bytes);
return bytes;
}
 else if (ct == short.class) {
final short[] shorts=new short[size];
for (int i=0; i < shorts.length; i++) {
shorts[i]=readShort();
}
instanceCache.set(idx,shorts);
return shorts;
}
 else if (ct == int.class) {
final int[] ints=new int[size];
for (int i=0; i < ints.length; i++) {
ints[i]=readInt();
}
instanceCache.set(idx,ints);
return ints;
}
 else if (ct == long.class) {
final long[] longs=new long[size];
for (int i=0; i < longs.length; i++) {
longs[i]=readLong();
}
instanceCache.set(idx,longs);
return longs;
}
 else if (ct == float.class) {
final float[] floats=new float[size];
for (int i=0; i < floats.length; i++) {
floats[i]=readFloat();
}
instanceCache.set(idx,floats);
return floats;
}
 else if (ct == double.class) {
final double[] doubles=new double[size];
for (int i=0; i < doubles.length; i++) {
doubles[i]=readDouble();
}
instanceCache.set(idx,doubles);
return doubles;
}
 else if (ct == boolean.class) {
final boolean[] booleans=new boolean[size];
for (int i=0; i < booleans.length; i++) {
booleans[i]=readBoolean();
}
instanceCache.set(idx,booleans);
return booleans;
}
 else if (ct == char.class) {
final char[] chars=new char[size];
for (int i=0; i < chars.length; i++) {
chars[i]=readChar();
}
instanceCache.set(idx,chars);
return chars;
}
 else {
throw new InvalidClassException(type.getName(),""String_Node_Str"");
}
}
 else {
final Object[] objects=(Object[])Array.newInstance(ct,size);
instanceCache.set(idx,objects);
for (int i=0; i < objects.length; i++) {
objects[i]=doReadObject(false);
}
return objects;
}
}
case TC_ENUM:
{
final Descriptor descriptor=readNonNullClassDescriptor();
final Class<? extends Enum> enumType;
try {
enumType=descriptor.getType().asSubclass(Enum.class);
}
 catch (ClassCastException e) {
throw new InvalidClassException(""String_Node_Str"");
}
final int h=instanceCache.size();
instanceCache.add(UNRESOLVED);
final String constName=(String)doReadObject(false);
final Enum obj=Enum.valueOf(enumType,constName);
instanceCache.set(h,obj);
return obj;
}
case TC_OBJECT:
{
final Descriptor descriptor=readNonNullClassDescriptor();
if ((descriptor.getFlags() & (SC_SERIALIZABLE | SC_EXTERNALIZABLE)) == 0) {
throw new NotSerializableException(descriptor.getClass().getName());
}
final Object obj=creator.create(descriptor.getType());
instanceCache.add(unshared ? UNSHARED : obj);
if ((descriptor.getFlags() & SC_EXTERNALIZABLE) != 0) {
if (obj instanceof Externalizable) {
final Externalizable externalizable=(Externalizable)obj;
if ((descriptor.getFlags() & SC_BLOCK_DATA) != 0) {
externalizable.readExternal(blockUnmarshaller);
blockUnmarshaller.readToEndBlockData();
blockUnmarshaller.unblock();
}
 else {
externalizable.readExternal(this);
}
}
 else {
throw new InvalidObjectException(""String_Node_Str"");
}
}
 else if (obj instanceof Externalizable) {
throw new InvalidObjectException(""String_Node_Str"");
}
 else {
doReadSerialObject(descriptor,obj);
}
return obj;
}
case TC_EXCEPTION:
{
clearInstanceCache();
final IOException ex=(IOException)doReadObject(false);
throw new WriteAbortedException(""String_Node_Str"",ex);
}
case TC_BLOCKDATA:
case TC_BLOCKDATALONG:
{
blockUnmarshaller.readBlockHeader(leadByte);
throw createOptionalDataException(blockUnmarshaller.remaining());
}
case TC_ENDBLOCKDATA:
{
throw createOptionalDataException(0);
}
case TC_RESET:
{
if (depth > 1) {
throw new StreamCorruptedException(""String_Node_Str"");
}
clearInstanceCache();
leadByte=readByte() & 0xff;
continue;
}
default :
{
throw badLeadByte(leadByte);
}
}
}
  finally {
depth--;
}
}"
43038,"private OptionalDataExceptionCreateAction(){
  constructor=AccessController.doPrivileged(new PrivilegedAction<Constructor<OptionalDataException>>(){
    public Constructor<OptionalDataException> run(){
      try {
        final Constructor<OptionalDataException> constructor=OptionalDataException.class.getConstructor(boolean.class);
        constructor.setAccessible(true);
        return constructor;
      }
 catch (      NoSuchMethodException e) {
        throw new NoSuchMethodError(e.getMessage());
      }
    }
  }
);
}","private OptionalDataExceptionCreateAction(){
  constructor=AccessController.doPrivileged(new PrivilegedAction<Constructor<OptionalDataException>>(){
    public Constructor<OptionalDataException> run(){
      try {
        final Constructor<OptionalDataException> constructor=OptionalDataException.class.getDeclaredConstructor(boolean.class);
        constructor.setAccessible(true);
        return constructor;
      }
 catch (      NoSuchMethodException e) {
        throw new NoSuchMethodError(e.getMessage());
      }
    }
  }
);
}"
43039,"/** 
 * Remove an edge.  Does not remove any vertices or other related structures.
 * @param e The edge to remove
 */
public void removeEdge(int e){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + e);
  }
  int prev=Edge.getPrev(edges,e);
  if (prev != -1) {
    Edge.setNext(Edge.getNext(edges,e),edges,prev);
  }
 else {
    startEdge=Edge.getNext(edges,e);
  }
  if (e == lastEdge) {
    lastEdge=prev;
    if (lastEdge == -1) {
    }
 else {
      Edge.setNext(-1,edges,lastEdge);
    }
  }
 else {
    int next=Edge.getNext(edges,e);
    if (next != -1) {
      Edge.setPrev(prev,edges,next);
    }
  }
  edgeCount--;
}","/** 
 * Remove an edge.  Does not remove any vertices or other related structures.
 * @param e The edge to remove
 */
public void removeEdge(int e){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + e);
  }
  int prev=Edge.getPrev(edges,e);
  if (prev != -1) {
    Edge.setNext(Edge.getNext(edges,e),edges,prev);
  }
 else {
    startEdge=Edge.getNext(edges,e);
  }
  if (e == lastEdge) {
    lastEdge=prev;
    if (lastEdge == -1) {
    }
 else {
      Edge.setNext(-1,edges,lastEdge);
    }
  }
 else {
    int next=Edge.getNext(edges,e);
    if (next != -1) {
      Edge.setPrev(prev,edges,next);
      return;
    }
  }
  edgeCount--;
}"
43040,"public void processFile(String fpath,double maxDecimationError,double reduceFactor) throws Exception {
  long t0=currentTimeMillis();
  WingedEdgeTriangleMesh mesh=loadMesh(fpath);
  printf(""String_Node_Str"",(currentTimeMillis() - t0));
  t0=currentTimeMillis();
  int orig_fcount=mesh.getFaceCount();
  int fcount=orig_fcount;
  System.out.println(""String_Node_Str"" + fcount);
  MeshExporter.writeMeshSTL(mesh,fmt(""String_Node_Str"",fcount));
  printf(""String_Node_Str"",fcount,mesh.getVertexCount(),mesh.getEdgeCount());
  printf(""String_Node_Str"",mesh.getFaceCount(),mesh.getVertexCount(),mesh.getEdgeCount());
  assertTrue(""String_Node_Str"",TestWingedEdgeTriangleMesh.isManifold(mesh));
  MeshDecimator md=new MeshDecimator();
  md.setMaxCollapseError(maxDecimationError);
  int target;
  int current;
  while (true) {
    target=mesh.getTriangleCount() / 2;
    System.out.println(""String_Node_Str"" + target);
    t0=currentTimeMillis();
    printf(""String_Node_Str"");
    md.processMesh(mesh,target);
    printf(""String_Node_Str"",(currentTimeMillis() - t0));
    fcount=mesh.getFaceCount();
    current=mesh.getFaceCount();
    System.out.println(""String_Node_Str"" + current);
    if (current >= target * 1.25) {
      System.out.println(""String_Node_Str"");
      break;
    }
  }
  MeshExporter.writeMeshSTL(mesh,fmt(""String_Node_Str"",fcount));
  assertTrue(""String_Node_Str"",mesh.getFaceCount() < reduceFactor * orig_fcount);
}","public void processFile(String fpath,double maxDecimationError,double reduceFactor) throws Exception {
  long t0=currentTimeMillis();
  WingedEdgeTriangleMesh mesh=loadMesh(fpath);
  printf(""String_Node_Str"",(currentTimeMillis() - t0));
  t0=currentTimeMillis();
  int orig_fcount=mesh.getFaceCount();
  int fcount=orig_fcount;
  System.out.println(""String_Node_Str"" + fcount);
  MeshExporter.writeMeshSTL(mesh,fmt(""String_Node_Str"",fcount));
  printf(""String_Node_Str"",fcount,mesh.getVertexCount(),mesh.getEdgeCount());
  printf(""String_Node_Str"",mesh.getFaceCount(),mesh.getVertexCount(),mesh.getEdgeCount());
  assertTrue(""String_Node_Str"",TestWingedEdgeTriangleMesh.isManifold(mesh));
  MeshDecimator md=new MeshDecimator();
  md.setMaxCollapseError(maxDecimationError);
  int target;
  int current;
  while (true) {
    target=mesh.getTriangleCount() / 2;
    System.out.println(""String_Node_Str"" + target);
    t0=currentTimeMillis();
    printf(""String_Node_Str"");
    md.processMesh(mesh,target);
    printf(""String_Node_Str"",(currentTimeMillis() - t0));
    fcount=mesh.getFaceCount();
    assertTrue(""String_Node_Str"",verifyVertices(mesh));
    assertTrue(""String_Node_Str"",TestWingedEdgeTriangleMesh.verifyStructure(mesh,true));
    assertTrue(""String_Node_Str"",TestWingedEdgeTriangleMesh.isManifold(mesh));
    printf(""String_Node_Str"",(currentTimeMillis() - t0));
    current=mesh.getFaceCount();
    System.out.println(""String_Node_Str"" + current);
    if (current >= target * 1.25) {
      System.out.println(""String_Node_Str"");
      break;
    }
  }
  MeshExporter.writeMeshSTL(mesh,fmt(""String_Node_Str"",fcount));
  assertTrue(""String_Node_Str"",mesh.getFaceCount() < reduceFactor * orig_fcount);
}"
43041,"/** 
 * Verify that the mesh structure is correct.  Chase as many pointers and references as we can to confirm that nothing is messed up.
 * @param mesh
 * @return
 */
public static boolean verifyStructure(WingedEdgeTriangleMesh mesh,boolean manifold){
  StructMixedData edges=mesh.getEdges();
  int startEdge=mesh.getStartEdge();
  StructMixedData faces=mesh.getFaces();
  int startFace=mesh.getStartFace();
  StructMixedData vertices=mesh.getVertices();
  int startVertex=mesh.getStartVertex();
  StructMixedData hedges=mesh.getHalfEdges();
  int e=startEdge;
  while (e != -1) {
    int he=Edge.getHe(edges,e);
    if (he == -1) {
      System.out.println(""String_Node_Str"" + e);
      return false;
    }
    int twin=HalfEdge.getTwin(hedges,he);
    if (manifold && twin == -1) {
      System.out.println(""String_Node_Str"" + e);
      return false;
    }
    if (twin != -1) {
      int estart=HalfEdge.getStart(hedges,he);
      int eend=HalfEdge.getEnd(hedges,he);
      int tstart=HalfEdge.getStart(hedges,twin);
      int tend=HalfEdge.getEnd(hedges,twin);
      if (estart != tend || eend != tstart) {
        System.out.println(""String_Node_Str"" + he + ""String_Node_Str""+ twin);
        return false;
      }
    }
    e=Edge.getNext(edges,e);
  }
  int f=startFace;
  while (f != -1) {
    int he=Face.getHe(faces,f);
    int start=he;
    if (he == -1) {
      System.out.println(""String_Node_Str"" + f);
      return false;
    }
    int cnt=0;
    while (he != -1) {
      int edge=HalfEdge.getEdge(hedges,he);
      if (!findEdge(mesh,edge)) {
        System.out.println(""String_Node_Str"" + edge);
        return false;
      }
      int left=HalfEdge.getLeft(hedges,he);
      if (!findFace(mesh,left)) {
        System.out.println(""String_Node_Str"" + left);
        return false;
      }
      cnt++;
      he=HalfEdge.getNext(hedges,he);
      if (he == start) {
        break;
      }
    }
    if (cnt != 3) {
      System.out.println(""String_Node_Str"" + f);
      return false;
    }
    he=Face.getHe(faces,f);
    start=he;
    cnt=0;
    while (he != -1) {
      cnt++;
      he=HalfEdge.getPrev(hedges,he);
      if (he == start) {
        break;
      }
    }
    if (cnt != 3) {
      System.out.println(""String_Node_Str"" + f);
      return false;
    }
    f=Face.getNext(faces,f);
  }
  int v=startVertex;
  while (v != -1) {
    int he=Vertex.getLink(vertices,v);
    if (he == -1) {
      System.out.println(""String_Node_Str"" + v);
      return false;
    }
    int start=HalfEdge.getStart(hedges,he);
    int end=HalfEdge.getEnd(hedges,he);
    if (start != v && end != v) {
      System.out.println(""String_Node_Str"" + v + ""String_Node_Str""+ he);
      return false;
    }
    v=Vertex.getNext(vertices,v);
  }
  int e1=startEdge;
  int e2=startEdge;
  while (e1 != -1) {
    while (e2 != -1) {
      if (e1 == e2) {
        e2=Edge.getNext(edges,e2);
      }
      int he1=Edge.getHe(edges,e1);
      int he2=Edge.getHe(edges,e2);
      if (he1 != -1) {
        int start=HalfEdge.getStart(hedges,he1);
        int end=HalfEdge.getEnd(hedges,he1);
        if (start == end) {
          System.out.println(""String_Node_Str"" + he1);
          return false;
        }
      }
      if (he2 != -1) {
        int start=HalfEdge.getStart(hedges,he2);
        int end=HalfEdge.getEnd(hedges,he2);
        if (start == end) {
          System.out.println(""String_Node_Str"" + he2);
          return false;
        }
      }
      if (he1 != -1 && he2 != -1) {
        int start1=HalfEdge.getStart(hedges,he1);
        int end1=HalfEdge.getEnd(hedges,he1);
        int start2=HalfEdge.getStart(hedges,he2);
        int end2=HalfEdge.getEnd(hedges,he2);
        if ((start1 == start2 && end1 == end2) || (start1 == end2 && end1 == start2)) {
          System.out.println(""String_Node_Str"" + e1 + ""String_Node_Str""+ e2);
          return false;
        }
      }
      e2=Edge.getNext(edges,e2);
    }
    e1=Edge.getNext(edges,e1);
  }
  v=startVertex;
  while (v != -1) {
    int start=Vertex.getLink(vertices,v);
    int he=start;
    int tricount=0;
    do {
      int twin=HalfEdge.getTwin(hedges,he);
      he=HalfEdge.getNext(hedges,twin);
    }
 while (he != start && tricount++ < 20);
    if (tricount >= 20) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    v=Vertex.getNext(vertices,v);
  }
  return true;
}","/** 
 * Verify that the mesh structure is correct.  Chase as many pointers and references as we can to confirm that nothing is messed up.
 * @param mesh
 * @return
 */
public static boolean verifyStructure(WingedEdgeTriangleMesh mesh,boolean manifold){
  StructMixedData edges=mesh.getEdges();
  int startEdge=mesh.getStartEdge();
  StructMixedData faces=mesh.getFaces();
  int startFace=mesh.getStartFace();
  StructMixedData vertices=mesh.getVertices();
  int startVertex=mesh.getStartVertex();
  StructMixedData hedges=mesh.getHalfEdges();
  int e=startEdge;
  int edgeCount=0;
  while (e != -1) {
    edgeCount++;
    int he=Edge.getHe(edges,e);
    if (he == -1) {
      System.out.println(""String_Node_Str"" + e);
      return false;
    }
    int twin=HalfEdge.getTwin(hedges,he);
    if (manifold && twin == -1) {
      System.out.println(""String_Node_Str"" + e);
      return false;
    }
    if (twin != -1) {
      int estart=HalfEdge.getStart(hedges,he);
      int eend=HalfEdge.getEnd(hedges,he);
      int tstart=HalfEdge.getStart(hedges,twin);
      int tend=HalfEdge.getEnd(hedges,twin);
      if (estart != tend || eend != tstart) {
        System.out.println(""String_Node_Str"" + he + ""String_Node_Str""+ twin);
        return false;
      }
    }
    e=Edge.getNext(edges,e);
  }
  assertEquals(""String_Node_Str"",mesh.getEdgeCount(),edgeCount);
  int f=startFace;
  int faceCount=0;
  while (f != -1) {
    faceCount++;
    int he=Face.getHe(faces,f);
    int start=he;
    if (he == -1) {
      System.out.println(""String_Node_Str"" + f);
      return false;
    }
    int cnt=0;
    while (he != -1) {
      int edge=HalfEdge.getEdge(hedges,he);
      if (!findEdge(mesh,edge)) {
        System.out.println(""String_Node_Str"" + edge);
        return false;
      }
      int left=HalfEdge.getLeft(hedges,he);
      if (!findFace(mesh,left)) {
        System.out.println(""String_Node_Str"" + left);
        return false;
      }
      cnt++;
      he=HalfEdge.getNext(hedges,he);
      if (he == start) {
        break;
      }
    }
    if (cnt != 3) {
      System.out.println(""String_Node_Str"" + f);
      return false;
    }
    he=Face.getHe(faces,f);
    start=he;
    cnt=0;
    while (he != -1) {
      cnt++;
      he=HalfEdge.getPrev(hedges,he);
      if (he == start) {
        break;
      }
    }
    if (cnt != 3) {
      System.out.println(""String_Node_Str"" + f);
      return false;
    }
    f=Face.getNext(faces,f);
  }
  assertEquals(""String_Node_Str"",mesh.getFaceCount(),faceCount);
  int v=startVertex;
  int vertexCount=0;
  while (v != -1) {
    vertexCount++;
    int he=Vertex.getLink(vertices,v);
    if (he == -1) {
      System.out.println(""String_Node_Str"" + v);
      return false;
    }
    int start=HalfEdge.getStart(hedges,he);
    int end=HalfEdge.getEnd(hedges,he);
    if (start != v && end != v) {
      System.out.println(""String_Node_Str"" + v + ""String_Node_Str""+ he);
      return false;
    }
    v=Vertex.getNext(vertices,v);
  }
  assertEquals(""String_Node_Str"",mesh.getVertexCount(),vertexCount);
  int e1=startEdge;
  int e2=startEdge;
  while (e1 != -1) {
    while (e2 != -1) {
      if (e1 == e2) {
        e2=Edge.getNext(edges,e2);
      }
      int he1=Edge.getHe(edges,e1);
      int he2=Edge.getHe(edges,e2);
      if (he1 != -1) {
        int start=HalfEdge.getStart(hedges,he1);
        int end=HalfEdge.getEnd(hedges,he1);
        if (start == end) {
          System.out.println(""String_Node_Str"" + he1);
          return false;
        }
      }
      if (he2 != -1) {
        int start=HalfEdge.getStart(hedges,he2);
        int end=HalfEdge.getEnd(hedges,he2);
        if (start == end) {
          System.out.println(""String_Node_Str"" + he2);
          return false;
        }
      }
      if (he1 != -1 && he2 != -1) {
        int start1=HalfEdge.getStart(hedges,he1);
        int end1=HalfEdge.getEnd(hedges,he1);
        int start2=HalfEdge.getStart(hedges,he2);
        int end2=HalfEdge.getEnd(hedges,he2);
        if ((start1 == start2 && end1 == end2) || (start1 == end2 && end1 == start2)) {
          System.out.println(""String_Node_Str"" + e1 + ""String_Node_Str""+ e2);
          return false;
        }
      }
      e2=Edge.getNext(edges,e2);
    }
    e1=Edge.getNext(edges,e1);
  }
  v=startVertex;
  while (v != -1) {
    int start=Vertex.getLink(vertices,v);
    int he=start;
    int tricount=0;
    do {
      int twin=HalfEdge.getTwin(hedges,he);
      he=HalfEdge.getNext(hedges,twin);
    }
 while (he != start && tricount++ < 20);
    if (tricount >= 20) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    v=Vertex.getNext(vertices,v);
  }
  return true;
}"
43042,"/** 
 * Verify that the mesh structure is correct.  Chase as many pointers and references as we can to confirm that nothing is messed up.
 * @param mesh
 * @return
 */
public static boolean verifyCounts(TriangleMesh mesh){
  StructMixedData edges=mesh.getEdges();
  int startEdge=mesh.getStartEdge();
  StructMixedData faces=mesh.getFaces();
  int startFace=mesh.getStartFace();
  StructMixedData vertices=mesh.getVertices();
  int startVertex=mesh.getStartVertex();
  StructMixedData hedges=mesh.getHalfEdges();
  int e=startEdge;
  int edgeCount=0;
  while (e != -1) {
    edgeCount++;
    int he=Edge.getHe(edges,e);
    e=Edge.getNext(edges,e);
  }
  System.out.println(""String_Node_Str"" + mesh.getEdgeCount() + ""String_Node_Str""+ edgeCount);
  int f=startFace;
  int faceCount=0;
  while (f != -1) {
    faceCount++;
    f=Face.getNext(faces,f);
  }
  System.out.println(""String_Node_Str"" + mesh.getFaceCount() + ""String_Node_Str""+ faceCount);
  int v=startVertex;
  int vertexCount=0;
  while (v != -1) {
    vertexCount++;
    v=Vertex.getNext(vertices,v);
  }
  System.out.println(""String_Node_Str"" + mesh.getVertexCount() + ""String_Node_Str""+ vertexCount);
  return true;
}","/** 
 * Verify that the mesh structure is correct.  Chase as many pointers and references as we can to confirm that nothing is messed up.
 * @param mesh
 * @return
 */
public boolean verifyCounts(TriangleMesh mesh){
  StructMixedData edges=mesh.getEdges();
  int startEdge=mesh.getStartEdge();
  StructMixedData faces=mesh.getFaces();
  int startFace=mesh.getStartFace();
  StructMixedData vertices=mesh.getVertices();
  int startVertex=mesh.getStartVertex();
  StructMixedData hedges=mesh.getHalfEdges();
  int e=startEdge;
  int edgeCount=0;
  while (e != -1) {
    edgeCount++;
    e=Edge.getNext(edges,e);
  }
  System.out.println(""String_Node_Str"" + mesh.getEdgeCount() + ""String_Node_Str""+ edgeCount);
  int f=startFace;
  int faceCount=0;
  while (f != -1) {
    faceCount++;
    f=Face.getNext(faces,f);
  }
  System.out.println(""String_Node_Str"" + mesh.getFaceCount() + ""String_Node_Str""+ faceCount);
  int v=startVertex;
  int vertexCount=0;
  while (v != -1) {
    vertexCount++;
    v=Vertex.getNext(vertices,v);
  }
  System.out.println(""String_Node_Str"" + mesh.getVertexCount() + ""String_Node_Str""+ vertexCount);
  return true;
}"
43043,"/** 
 * Remove an edge.  Does not remove any vertices or other related structures.
 * @param e The edge to remove
 */
public void removeEdge(int e){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + e);
  }
  int prev=Edge.getPrev(edges,e);
  if (prev != -1) {
    Edge.setNext(Edge.getNext(edges,e),edges,prev);
  }
 else {
    startEdge=Edge.getNext(edges,e);
  }
  if (e == lastEdge) {
    lastEdge=prev;
    if (lastEdge == -1) {
    }
 else {
      Edge.setNext(-1,edges,lastEdge);
    }
  }
 else {
    int next=Edge.getNext(edges,e);
    if (next != -1) {
      Edge.setPrev(prev,edges,next);
    }
 else {
      return;
    }
  }
  edgeCount--;
}","/** 
 * Remove an edge.  Does not remove any vertices or other related structures.
 * @param e The edge to remove
 */
public void removeEdge(int e){
  if (Edge.getHe(edges,e) == -1) {
    return;
  }
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + e);
  }
  int prev=Edge.getPrev(edges,e);
  if (prev != -1) {
    Edge.setNext(Edge.getNext(edges,e),edges,prev);
  }
 else {
    startEdge=Edge.getNext(edges,e);
  }
  if (e == lastEdge) {
    lastEdge=prev;
    if (lastEdge == -1) {
    }
 else {
      Edge.setNext(-1,edges,lastEdge);
    }
  }
 else {
    int next=Edge.getNext(edges,e);
    if (next != -1) {
      Edge.setPrev(prev,edges,next);
    }
 else {
      return;
    }
  }
  Edge.setHe(-1,edges,e);
  edgeCount--;
}"
43044,"public void removeVertex(int v){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + v);
  }
  int prev=Vertex.getPrev(vertices,v);
  if (prev != -1) {
    Vertex.setNext(Vertex.getNext(vertices,v),vertices,prev);
  }
 else {
    startVertex=Vertex.getNext(vertices,v);
  }
  if (v == lastVertex) {
    lastVertex=prev;
    if (lastVertex == -1) {
    }
 else {
      Vertex.setNext(-1,vertices,lastVertex);
    }
  }
 else {
    int next=Vertex.getNext(vertices,v);
    Vertex.setPrev(prev,vertices,next);
  }
  Vertex.setLink(-1,vertices,v);
  Vertex.setNext(-1,vertices,v);
  vertexCount--;
}","public void removeVertex(int v){
  if (Vertex.getLink(vertices,v) == -1) {
    return;
  }
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + v);
  }
  int prev=Vertex.getPrev(vertices,v);
  if (prev != -1) {
    Vertex.setNext(Vertex.getNext(vertices,v),vertices,prev);
  }
 else {
    startVertex=Vertex.getNext(vertices,v);
  }
  if (v == lastVertex) {
    lastVertex=prev;
    if (lastVertex == -1) {
    }
 else {
      Vertex.setNext(-1,vertices,lastVertex);
    }
  }
 else {
    int next=Vertex.getNext(vertices,v);
    Vertex.setPrev(prev,vertices,next);
  }
  Vertex.setLink(-1,vertices,v);
  Vertex.setNext(-1,vertices,v);
  vertexCount--;
}"
43045,"/** 
 * Remove a face from the mesh.  This method does not remove any edges or vertices.
 * @param f The face to remove
 */
public void removeFace(int f){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + f);
  }
  int prev=Face.getPrev(faces,f);
  if (prev != -1) {
    Face.setNext(Face.getNext(faces,f),faces,prev);
  }
 else {
    startFace=Face.getNext(faces,f);
  }
  if (f == lastFace) {
    lastFace=prev;
    if (lastFace == -1) {
    }
 else {
      Face.setNext(-1,faces,lastFace);
    }
  }
 else {
    int next=Face.getNext(faces,f);
    Face.setPrev(prev,faces,next);
  }
  faceCount--;
}","/** 
 * Remove a face from the mesh.  This method does not remove any edges or vertices.
 * @param f The face to remove
 */
public void removeFace(int f){
  if (Face.getHe(faces,f) == -1) {
    return;
  }
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + f);
  }
  int prev=Face.getPrev(faces,f);
  if (prev != -1) {
    Face.setNext(Face.getNext(faces,f),faces,prev);
  }
 else {
    startFace=Face.getNext(faces,f);
  }
  if (f == lastFace) {
    lastFace=prev;
    if (lastFace == -1) {
    }
 else {
      Face.setNext(-1,faces,lastFace);
    }
  }
 else {
    int next=Face.getNext(faces,f);
    Face.setPrev(prev,faces,next);
  }
  Face.setHe(-1,faces,f);
  faceCount--;
}"
43046,"/** 
 * Collapse an edge.
 * @param e   The edge to collapse
 * @param pos The position of the new common vertex
 */
public boolean collapseEdge(int e,Point3d pos,EdgeCollapseParams ecp,EdgeCollapseResult ecr){
  int hR=Edge.getHe(edges,e);
  int v0=HalfEdge.getEnd(hedges,hR);
  int v1=HalfEdge.getStart(hedges,hR);
  int he;
  int hL=HalfEdge.getTwin(hedges,hR);
  int fL=HalfEdge.getLeft(hedges,hL);
  int fR=HalfEdge.getLeft(hedges,hR);
  if (DEBUG)   printf(""String_Node_Str"",fR,fL);
  int hLp=HalfEdge.getPrev(hedges,hL), hLpt=HalfEdge.getTwin(hedges,hLp), hLn=HalfEdge.getNext(hedges,hL), hLnt=HalfEdge.getTwin(hedges,hLn), hRn=HalfEdge.getNext(hedges,hR), hRnt=HalfEdge.getTwin(hedges,hRn), hRp=HalfEdge.getPrev(hedges,hR), hRpt=HalfEdge.getTwin(hedges,hRp);
  int vR=HalfEdge.getStart(hedges,hRp), vL=HalfEdge.getEnd(hedges,hLn);
  int e1R=HalfEdge.getEdge(hedges,hRp), e1L=HalfEdge.getEdge(hedges,hLn), e0R=HalfEdge.getEdge(hedges,hRn), e0L=HalfEdge.getEdge(hedges,hLp);
  StructSet v1set=m_vset;
  v1set.clear();
  he=HalfEdge.getNext(hedges,hLnt);
  while (he != hRpt) {
    v1set.add(HalfEdge.getEnd(hedges,he));
    he=HalfEdge.getNext(hedges,HalfEdge.getTwin(hedges,he));
  }
  he=HalfEdge.getNext(hedges,hRnt);
  while (he != hLpt) {
    if (v1set.contains(HalfEdge.getEnd(hedges,he))) {
      if (DEBUG)       printf(""String_Node_Str"");
      ecr.returnCode=EdgeCollapseResult.FAILURE_SURFACE_PINCH;
      return false;
    }
    he=HalfEdge.getNext(hedges,HalfEdge.getTwin(hedges,he));
  }
  he=hLnt;
  Vertex.getPoint(vertices,v1,pv1);
  if (ecp.maxEdgeLength2 > 0.) {
    while (he != hRp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (pos.distanceSquared(p0) > ecp.maxEdgeLength2) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_LONG_EDGE;
        return false;
      }
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv1,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
 else {
    while (he != hRp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv1,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
  he=hRnt;
  Vertex.getPoint(vertices,v0,pv0);
  if (ecp.maxEdgeLength2 > 0.) {
    while (he != hLp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (pos.distanceSquared(p0) > ecp.maxEdgeLength2) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_LONG_EDGE;
        return false;
      }
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv0,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
 else {
    while (he != hLp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv0,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
  Vertex.setPoint(pos.x,pos.y,pos.z,vertices,v1);
  removeEdge(e);
  removeEdge(e0R);
  removeEdge(e0L);
  if (DEBUG) {
    printf(""String_Node_Str"",v0,v1);
    printf(""String_Node_Str"",vL,vR);
    printf(""String_Node_Str"",hL,hR);
    printf(""String_Node_Str"",hLp,hLpt);
    printf(""String_Node_Str"",hLn,hLnt);
    printf(""String_Node_Str"",hRp,hRpt);
    printf(""String_Node_Str"",hRn,hRnt);
  }
  int end=hLp;
  he=hRnt;
  int maxcount=30;
  if (DEBUG)   printf(""String_Node_Str"");
  do {
    int next=HalfEdge.getNext(hedges,he);
    if (DEBUG)     printf(""String_Node_Str"",he,next);
    HalfEdge.setEnd(v1,hedges,he);
    HalfEdge.setStart(v1,hedges,next);
    if (DEBUG)     printf(""String_Node_Str"",he,next);
    if (--maxcount < 0) {
      printf(""String_Node_Str"",Vertex.getID(vertices,v0));
      break;
    }
    he=HalfEdge.getTwin(hedges,next);
  }
 while (he != end);
  removeFace(fL);
  removeFace(fR);
  betwin(hRnt,hRpt);
  betwin(hLpt,hLnt);
  HalfEdge.setEdge(e1R,hedges,hRnt);
  Edge.setHe(hRnt,edges,e1R);
  HalfEdge.setEdge(e1L,hedges,hLpt);
  Edge.setHe(hLpt,edges,e1L);
  Vertex.setLink(hLnt,vertices,vL);
  Vertex.setLink(hRnt,vertices,vR);
  Vertex.setLink(hRpt,vertices,v1);
  Edge.setHe(-1,edges,e);
  Edge.setHe(-1,edges,e0L);
  Edge.setHe(-1,edges,e0R);
  if (DEBUG)   printf(""String_Node_Str"",Vertex.getID(vertices,v0));
  removeVertex(v0);
  ecr.removedEdges[0]=e;
  ecr.removedEdges[1]=e0L;
  ecr.removedEdges[2]=e0R;
  ecr.insertedVertex=v1;
  ecr.faceCount=2;
  ecr.edgeCount=3;
  ecr.vertexCount=1;
  ecr.returnCode=EdgeCollapseResult.SUCCESS;
  return true;
}","/** 
 * Collapse an edge.
 * @param e   The edge to collapse
 * @param pos The position of the new common vertex
 */
public boolean collapseEdge(int e,Point3d pos,EdgeCollapseParams ecp,EdgeCollapseResult ecr){
  collapseCnt++;
  int hR=Edge.getHe(edges,e);
  int v0=HalfEdge.getEnd(hedges,hR);
  int v1=HalfEdge.getStart(hedges,hR);
  int he;
  int hL=HalfEdge.getTwin(hedges,hR);
  int fL=HalfEdge.getLeft(hedges,hL);
  int fR=HalfEdge.getLeft(hedges,hR);
  if (DEBUG)   printf(""String_Node_Str"",fR,fL);
  int hLp=HalfEdge.getPrev(hedges,hL), hLpt=HalfEdge.getTwin(hedges,hLp), hLn=HalfEdge.getNext(hedges,hL), hLnt=HalfEdge.getTwin(hedges,hLn), hRn=HalfEdge.getNext(hedges,hR), hRnt=HalfEdge.getTwin(hedges,hRn), hRp=HalfEdge.getPrev(hedges,hR), hRpt=HalfEdge.getTwin(hedges,hRp);
  int vR=HalfEdge.getStart(hedges,hRp), vL=HalfEdge.getEnd(hedges,hLn);
  int e1R=HalfEdge.getEdge(hedges,hRp), e1L=HalfEdge.getEdge(hedges,hLn), e0R=HalfEdge.getEdge(hedges,hRn), e0L=HalfEdge.getEdge(hedges,hLp);
  StructSet v1set=m_vset;
  v1set.clear();
  he=HalfEdge.getNext(hedges,hLnt);
  while (he != hRpt) {
    v1set.add(HalfEdge.getEnd(hedges,he));
    he=HalfEdge.getNext(hedges,HalfEdge.getTwin(hedges,he));
  }
  he=HalfEdge.getNext(hedges,hRnt);
  while (he != hLpt) {
    if (v1set.contains(HalfEdge.getEnd(hedges,he))) {
      if (DEBUG)       printf(""String_Node_Str"");
      ecr.returnCode=EdgeCollapseResult.FAILURE_SURFACE_PINCH;
      return false;
    }
    he=HalfEdge.getNext(hedges,HalfEdge.getTwin(hedges,he));
  }
  he=hLnt;
  Vertex.getPoint(vertices,v1,pv1);
  if (ecp.maxEdgeLength2 > 0.) {
    while (he != hRp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (pos.distanceSquared(p0) > ecp.maxEdgeLength2) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_LONG_EDGE;
        return false;
      }
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv1,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
 else {
    while (he != hRp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv1,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
  he=hRnt;
  Vertex.getPoint(vertices,v0,pv0);
  if (ecp.maxEdgeLength2 > 0.) {
    while (he != hLp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (pos.distanceSquared(p0) > ecp.maxEdgeLength2) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_LONG_EDGE;
        return false;
      }
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv0,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
 else {
    while (he != hLp) {
      int start=HalfEdge.getStart(hedges,he);
      int next=HalfEdge.getNext(hedges,he);
      Vertex.getPoint(vertices,start,p0);
      Vertex.getPoint(vertices,HalfEdge.getEnd(hedges,next),p1);
      if (m_faceFlipChecker.checkFaceFlip(p0,p1,pv0,pos)) {
        ecr.returnCode=EdgeCollapseResult.FAILURE_FACE_FLIP;
        return false;
      }
      he=HalfEdge.getTwin(hedges,next);
    }
  }
  Vertex.setPoint(pos.x,pos.y,pos.z,vertices,v1);
  removeEdge(e);
  removeEdge(e0R);
  removeEdge(e0L);
  if (DEBUG) {
    printf(""String_Node_Str"",v0,v1);
    printf(""String_Node_Str"",vL,vR);
    printf(""String_Node_Str"",hL,hR);
    printf(""String_Node_Str"",hLp,hLpt);
    printf(""String_Node_Str"",hLn,hLnt);
    printf(""String_Node_Str"",hRp,hRpt);
    printf(""String_Node_Str"",hRn,hRnt);
  }
  int end=hLp;
  he=hRnt;
  int maxcount=30;
  if (DEBUG)   printf(""String_Node_Str"");
  do {
    int next=HalfEdge.getNext(hedges,he);
    if (DEBUG)     printf(""String_Node_Str"",he,next);
    HalfEdge.setEnd(v1,hedges,he);
    HalfEdge.setStart(v1,hedges,next);
    if (DEBUG)     printf(""String_Node_Str"",he,next);
    if (--maxcount < 0) {
      printf(""String_Node_Str"",Vertex.getID(vertices,v0));
      break;
    }
    he=HalfEdge.getTwin(hedges,next);
  }
 while (he != end);
  removeFace(fL);
  removeFace(fR);
  betwin(hRnt,hRpt);
  betwin(hLpt,hLnt);
  HalfEdge.setEdge(e1R,hedges,hRnt);
  Edge.setHe(hRnt,edges,e1R);
  HalfEdge.setEdge(e1L,hedges,hLpt);
  Edge.setHe(hLpt,edges,e1L);
  Vertex.setLink(hLnt,vertices,vL);
  Vertex.setLink(hRnt,vertices,vR);
  Vertex.setLink(hRpt,vertices,v1);
  Edge.setHe(-1,edges,e);
  Edge.setHe(-1,edges,e0L);
  Edge.setHe(-1,edges,e0R);
  if (DEBUG)   printf(""String_Node_Str"",Vertex.getID(vertices,v0));
  removeVertex(v0);
  ecr.removedEdges[0]=e;
  ecr.removedEdges[1]=e0L;
  ecr.removedEdges[2]=e0R;
  ecr.insertedVertex=v1;
  ecr.faceCount=2;
  ecr.edgeCount=3;
  ecr.vertexCount=1;
  ecr.returnCode=EdgeCollapseResult.SUCCESS;
  return true;
}"
43047,"void getCandidateEdges(StructMixedData edges,int start,EdgeData ed[]){
  for (int i=0; i < ed.length; i++) {
    m_edgeArray.getRandomEdge(ed[i]);
  }
}","/** 
 */
void getCandidateEdges(EdgeData ed[]){
  for (int i=0; i < ed.length; i++) {
    m_edgeArray.getRandomEdge(ed[i]);
  }
}"
43048,"/** 
 * init vertices with initial quadrics
 */
protected void doInitialization(){
  if (DEBUG)   printf(""String_Node_Str"");
  m_maxError=0;
  m_ecr=new EdgeCollapseResult();
  m_ecp=new EdgeCollapseParams();
  m_candidates=new EdgeData[RANDOM_CANDIDATES_COUNT];
  m_errorFunction=new ErrorQuadric(quadrics);
  m_collapseCount=0;
  for (int i=0; i < m_candidates.length; i++) {
    m_candidates[i]=new EdgeData(quadrics);
  }
  int ecount=m_mesh.getEdgeCount();
  printf(""String_Node_Str"",ecount);
  m_edgeArray=new EdgeArray(ecount);
  StructMixedData edges=m_mesh.getEdges();
  int e=m_mesh.getStartEdge();
  int count=0;
  System.out.println(""String_Node_Str"" + e);
  while (e != -1) {
    Edge.setUserData(count,edges,e);
    if (count + 1 > ecount) {
      System.out.println(""String_Node_Str"");
      WingedEdgeTriangleMesh.verifyCounts(m_mesh);
    }
    m_edgeArray.set(count++,e);
    e=Edge.getNext(edges,e);
  }
  m_errorFunction.init(m_mesh);
  printf(""String_Node_Str"");
}","/** 
 * init vertices with initial quadrics
 */
protected void doInitialization(){
  if (DEBUG)   printf(""String_Node_Str"");
  m_maxError=0;
  m_ecr=new EdgeCollapseResult();
  m_ecp=new EdgeCollapseParams();
  m_candidates=new EdgeData[RANDOM_CANDIDATES_COUNT];
  m_errorFunction=new ErrorQuadric(quadrics);
  m_collapseCount=0;
  for (int i=0; i < m_candidates.length; i++) {
    m_candidates[i]=new EdgeData(quadrics);
  }
  int ecount=m_mesh.getEdgeCount();
  printf(""String_Node_Str"",ecount);
  m_edgeArray=new EdgeArray(ecount);
  StructMixedData edges=m_mesh.getEdges();
  int e=m_mesh.getStartEdge();
  int count=0;
  System.out.println(""String_Node_Str"" + e);
  while (e != -1) {
    Edge.setUserData(count,edges,e);
    m_edgeArray.set(count++,e);
    e=Edge.getNext(edges,e);
  }
  m_errorFunction.init(m_mesh);
  printf(""String_Node_Str"");
}"
43049,"/** 
 * do one iteration  return true if collapse was successfull  return false otherwise 
 */
protected boolean doIteration(){
  if (DEBUG) {
    printf(""String_Node_Str"");
  }
  getCandidateEdges(m_candidates);
  EdgeData bestCandidate=null;
  double minError=Double.MAX_VALUE;
  final int len=m_candidates.length;
  StructMixedData edges=m_mesh.getEdges();
  for (int i=0; i < len; i++) {
    EdgeData ed=m_candidates[i];
    if (m_edgeTester != null) {
      if (!m_edgeTester.canCollapse(ed.edge)) {
        continue;
      }
    }
    m_errorFunction.calculateError(ed);
    if (DEBUG)     printf(""String_Node_Str"",Edge.getUserData(edges,ed.edge),ed.errorValue);
    if (ed.errorValue < minError) {
      bestCandidate=ed;
      minError=ed.errorValue;
    }
  }
  if (bestCandidate == null || Edge.getHe(edges,bestCandidate.edge) == -1) {
    printf(""String_Node_Str"");
    return false;
  }
  EdgeData ed=bestCandidate;
  if (ed.errorValue > m_maxCollapseError) {
    m_ignoreCount++;
    return false;
  }
  m_errorFunction.calculateVertex(ed);
  if (DEBUG) {
    printf(""String_Node_Str"",Edge.getUserData(edges,bestCandidate.edge),ed.errorValue);
  }
  m_ecr.reset();
  m_ecp.maxEdgeLength2=m_maxEdgeLength2;
  if (DEBUG)   printf(""String_Node_Str"",m_collapseCount,m_mesh.getEdgeCount());
  if (!m_mesh.collapseEdge(ed.edge,ed.point,m_ecp,m_ecr)) {
    if (DEBUG)     printf(""String_Node_Str"");
switch (m_ecr.returnCode) {
case EdgeCollapseResult.FAILURE_SURFACE_PINCH:
      m_surfacePinchCount++;
    break;
case EdgeCollapseResult.FAILURE_FACE_FLIP:
  m_faceFlipCount++;
break;
case EdgeCollapseResult.FAILURE_LONG_EDGE:
m_longEdgeCount++;
break;
default :
System.out.println(""String_Node_Str"");
}
return false;
}
if (DEBUG) printf(""String_Node_Str"",m_mesh.getEdgeCount());
m_faceCount-=m_ecr.faceCount;
if (DEBUG) printf(""String_Node_Str"",m_ecr.insertedVertex);
int srcIdx=ed.vertexUserData;
int destIdx=Vertex.getUserData(m_mesh.getVertices(),m_ecr.insertedVertex);
Quadric.set(quadrics,srcIdx,quadrics,destIdx);
int[] edges_removed=m_ecr.removedEdges;
m_collapseCount+=edges_removed.length;
if (DEBUG) printf(""String_Node_Str"");
for (int i=0; i < edges_removed.length; i++) {
int index=Edge.getUserData(edges,edges_removed[i]);
if (DEBUG) printf(""String_Node_Str"",index);
m_edgeArray.set(index,-1);
}
if (ed.errorValue > m_maxError) {
m_maxError=ed.errorValue;
}
if (DEBUG) printf(""String_Node_Str"");
return true;
}","/** 
 * do one iteration  return true if collapse was successfull  return false otherwise 
 */
protected boolean doIteration(){
  if (DEBUG) {
    printf(""String_Node_Str"");
  }
  getCandidateEdges(m_candidates);
  EdgeData bestCandidate=null;
  double minError=Double.MAX_VALUE;
  final int len=m_candidates.length;
  StructMixedData edges=m_mesh.getEdges();
  for (int i=0; i < len; i++) {
    EdgeData ed=m_candidates[i];
    if (ed.edge == -1) {
      break;
    }
    if (m_edgeTester != null) {
      if (!m_edgeTester.canCollapse(ed.edge)) {
        continue;
      }
    }
    m_errorFunction.calculateError(ed);
    if (DEBUG)     printf(""String_Node_Str"",Edge.getUserData(edges,ed.edge),ed.errorValue);
    if (ed.errorValue < minError) {
      bestCandidate=ed;
      minError=ed.errorValue;
    }
  }
  if (bestCandidate == null || Edge.getHe(edges,bestCandidate.edge) == -1) {
    printf(""String_Node_Str"");
    return false;
  }
  EdgeData ed=bestCandidate;
  if (ed.errorValue > m_maxCollapseError) {
    m_ignoreCount++;
    return false;
  }
  m_errorFunction.calculateVertex(ed);
  if (DEBUG) {
    printf(""String_Node_Str"",Edge.getUserData(edges,bestCandidate.edge),ed.errorValue);
  }
  m_ecr.reset();
  m_ecp.maxEdgeLength2=m_maxEdgeLength2;
  if (DEBUG)   printf(""String_Node_Str"",m_collapseCount,m_mesh.getEdgeCount());
  if (!m_mesh.collapseEdge(ed.edge,ed.point,m_ecp,m_ecr)) {
    if (DEBUG)     printf(""String_Node_Str"");
switch (m_ecr.returnCode) {
case EdgeCollapseResult.FAILURE_SURFACE_PINCH:
      m_surfacePinchCount++;
    break;
case EdgeCollapseResult.FAILURE_FACE_FLIP:
  m_faceFlipCount++;
break;
case EdgeCollapseResult.FAILURE_LONG_EDGE:
m_longEdgeCount++;
break;
default :
System.out.println(""String_Node_Str"");
}
return false;
}
if (DEBUG) printf(""String_Node_Str"",m_mesh.getEdgeCount());
m_faceCount-=m_ecr.faceCount;
if (DEBUG) printf(""String_Node_Str"",m_ecr.insertedVertex);
int srcIdx=ed.vertexUserData;
int destIdx=Vertex.getUserData(m_mesh.getVertices(),m_ecr.insertedVertex);
Quadric.set(quadrics,srcIdx,quadrics,destIdx);
int[] edges_removed=m_ecr.removedEdges;
m_collapseCount+=edges_removed.length;
if (DEBUG) printf(""String_Node_Str"");
for (int i=0; i < edges_removed.length; i++) {
int index=Edge.getUserData(edges,edges_removed[i]);
if (DEBUG) printf(""String_Node_Str"",index);
m_edgeArray.set(index,-1);
}
if (ed.errorValue > m_maxError) {
m_maxError=ed.errorValue;
}
if (DEBUG) printf(""String_Node_Str"");
return true;
}"
43050,"/** 
 * Remove an edge.  Does not remove any vertices or other related structures.
 * @param e The edge to remove
 */
public void removeEdge(int e){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + e);
  }
  int prev=Edge.getPrev(edges,e);
  if (prev != -1) {
    Edge.setNext(Edge.getNext(edges,e),edges,prev);
  }
 else {
    startEdge=Edge.getNext(edges,e);
  }
  if (e == lastEdge) {
    lastEdge=prev;
    if (lastEdge == -1) {
    }
 else {
      Edge.setNext(-1,edges,lastEdge);
    }
  }
 else {
    int next=Edge.getNext(edges,e);
    if (next != -1) {
      Edge.setPrev(prev,edges,next);
      return;
    }
  }
  edgeCount--;
}","/** 
 * Remove an edge.  Does not remove any vertices or other related structures.
 * @param e The edge to remove
 */
public void removeEdge(int e){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + e);
  }
  int prev=Edge.getPrev(edges,e);
  if (prev != -1) {
    Edge.setNext(Edge.getNext(edges,e),edges,prev);
  }
 else {
    startEdge=Edge.getNext(edges,e);
  }
  if (e == lastEdge) {
    lastEdge=prev;
    if (lastEdge == -1) {
    }
 else {
      Edge.setNext(-1,edges,lastEdge);
    }
  }
 else {
    int next=Edge.getNext(edges,e);
    if (next != -1) {
      Edge.setPrev(prev,edges,next);
    }
 else {
      return;
    }
  }
  edgeCount--;
}"
43051,"public void testSphereHard() throws Exception {
  String fpath=""String_Node_Str"";
  processFile(fpath,1e-2,0.3);
}","/** 
 * Burn the sphere to almost nothing to test edge cases.
 * @throws Exception
 */
public void testSphereHard() throws Exception {
  String fpath=""String_Node_Str"";
  processFile(fpath,1e-2,0.3);
}"
43052,"/** 
 * Write a grid using the IsoSurfaceMaker to the specified file
 * @param grid
 * @param smoothSteps
 * @throws IOException
 */
public static WingedEdgeTriangleMesh createIsosurface(Grid grid,int smoothSteps) throws IOException {
  int nx=grid.getWidth();
  int ny=grid.getHeight();
  int nz=grid.getDepth();
  double vs=grid.getVoxelSize();
  double gbounds[]=new double[]{-nx * vs / 2,nx * vs / 2,-ny * vs / 2,ny * vs / 2,-nz * vs / 2,nz * vs / 2};
  double ibounds[]=extendBounds(gbounds,-vs / 2);
  IsosurfaceMaker im=new IsosurfaceMaker();
  im.setIsovalue(0.);
  im.setBounds(ibounds);
  im.setGridSize(nx,ny,nz);
  IndexedTriangleSetBuilder its=new IndexedTriangleSetBuilder();
  im.makeIsosurface(new IsosurfaceMaker.SliceGrid(grid,gbounds,0),its);
  int[][] faces=its.getFaces();
  WingedEdgeTriangleMesh mesh=new WingedEdgeTriangleMesh(its.getVertices(),faces);
  double centerWeight=1.0;
  LaplasianSmooth ls=new LaplasianSmooth();
  ls.setCenterWeight(centerWeight);
  System.out.println(""String_Node_Str"");
  long t0=currentTimeMillis();
  printf(""String_Node_Str"");
  t0=currentTimeMillis();
  ls.processMesh(mesh,smoothSteps);
  printf(""String_Node_Str"",(currentTimeMillis() - t0));
  return mesh;
}","/** 
 * Write a grid using the IsoSurfaceMaker to the specified file
 * @param grid
 * @param smoothSteps
 * @throws IOException
 */
public static WingedEdgeTriangleMesh createIsosurface(Grid grid,int smoothSteps) throws IOException {
  int nx=grid.getWidth();
  int ny=grid.getHeight();
  int nz=grid.getDepth();
  double vs=grid.getVoxelSize();
  double gbounds[]=new double[]{-nx * vs / 2,nx * vs / 2,-ny * vs / 2,ny * vs / 2,-nz * vs / 2,nz * vs / 2};
  double ibounds[]=extendBounds(gbounds,-vs / 2);
  IsosurfaceMaker im=new IsosurfaceMaker();
  im.setIsovalue(0.);
  im.setBounds(ibounds);
  im.setGridSize(nx,ny,nz);
  IndexedTriangleSetBuilder its=new IndexedTriangleSetBuilder();
  im.makeIsosurface(new IsosurfaceMaker.SliceGrid(grid,gbounds,0),its);
  int[][] faces=its.getFaces();
  WingedEdgeTriangleMesh mesh=new WingedEdgeTriangleMesh(its.getVertices(),faces);
  double centerWeight=1.0;
  LaplasianSmooth ls=new LaplasianSmooth();
  ls.setCenterWeight(centerWeight);
  long t0=currentTimeMillis();
  printf(""String_Node_Str"",smoothSteps);
  t0=currentTimeMillis();
  ls.processMesh(mesh,smoothSteps);
  printf(""String_Node_Str"",(currentTimeMillis() - t0));
  return mesh;
}"
43053,"public HalfEdgeKey(Object o1,Object o2){
  this.o1=o1;
  this.o2=o2;
}","public HalfEdgeKey(Vertex head,Vertex tail){
  this.head=head;
  this.tail=tail;
}"
43054,"public int hashCode(){
  return o1.hashCode() + 119 * o2.hashCode();
}","public int hashCode(){
  return head.hashCode() + 119 * tail.hashCode();
}"
43055,"public boolean equals(Object obj){
  HalfEdgeKey hk=(HalfEdgeKey)obj;
  return (hk.o1 == o1) && (hk.o2 == o2);
}","public boolean equals(Object obj){
  HalfEdgeKey hk=(HalfEdgeKey)obj;
  return (hk.head == head) && (hk.tail == tail);
}"
43056,"public void removeEdge(Edge e){
  if (DEBUG)   System.out.println(""String_Node_Str"" + e);
  Edge prev=e.getPrev();
  if (prev != null) {
    prev.setNext(e.getNext());
  }
 else {
    edges=e.getNext();
  }
  e.getNext().setPrev(e.getPrev());
  if (e == lastEdge) {
    lastEdge=prev;
    lastEdge.setNext(null);
  }
  edgeMap.remove(e);
}","public void removeEdge(Edge e){
  if (DEBUG)   System.out.println(""String_Node_Str"" + e);
  Edge prev=e.getPrev();
  if (prev != null) {
    prev.setNext(e.getNext());
  }
 else {
    edges=e.getNext();
  }
  e.getNext().setPrev(e.getPrev());
  if (e == lastEdge) {
    lastEdge=prev;
    lastEdge.setNext(null);
  }
}"
43057,"public WingedEdgeTriangleMesh(Point3d vertCoord[],int[][] findex){
  Vertex V[]=new Vertex[vertCoord.length];
  for (int nv=0; nv < V.length; nv++) {
    V[nv]=new Vertex();
    V[nv].setPoint(new Point3d(vertCoord[nv]));
    V[nv].setID(nv);
  }
  ArrayList eface=new ArrayList(findex.length * 3);
  for (int i=0; i < findex.length; i++) {
    int[] face=findex[i];
    if (face == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    eface.clear();
    if (face.length != 3) {
      throw new IllegalArgumentException(""String_Node_Str"" + i);
    }
    for (int j=0; j < face.length; j++) {
      Vertex v1=V[face[j]];
      Vertex v2=V[face[(j + 1) % face.length]];
      HalfEdge he=buildHalfEdge(v1,v2);
      edgeMap.put(new HalfEdgeKey(he.getTail(),he.getHead()),he);
      eface.add(he);
    }
    buildFace(eface);
  }
  boolean notifyNonManifold=true;
  HalfEdgeKey key=new HalfEdgeKey();
  for (  HalfEdge he1 : edgeMap.values()) {
    if (he1.getTwin() == null) {
      key.o1=he1.getHead();
      key.o2=he1.getTail();
      HalfEdge he2=edgeMap.get(key);
      if (he2 != null) {
        betwin(he1,he2);
        buildEdge(he1);
      }
 else {
        if (DEBUG && notifyNonManifold) {
          System.out.println(""String_Node_Str"" + he1 + ""String_Node_Str""+ he1.getHead().getID()+ ""String_Node_Str""+ he1.getTail().getID());
        }
        buildEdge(he1);
      }
    }
  }
  for (int i=0; i < V.length; i++) {
    addVertex(V[i]);
  }
}","public WingedEdgeTriangleMesh(Point3d vertCoord[],int[][] findex){
  Vertex V[]=new Vertex[vertCoord.length];
  for (int nv=0; nv < V.length; nv++) {
    V[nv]=new Vertex();
    V[nv].setPoint(new Point3d(vertCoord[nv]));
    V[nv].setID(nv);
  }
  ArrayList eface=new ArrayList(findex.length * 3);
  for (int i=0; i < findex.length; i++) {
    int[] face=findex[i];
    if (face == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    eface.clear();
    if (face.length != 3) {
      throw new IllegalArgumentException(""String_Node_Str"" + i);
    }
    for (int j=0; j < face.length; j++) {
      Vertex v1=V[face[j]];
      Vertex v2=V[face[(j + 1) % face.length]];
      HalfEdge he=buildHalfEdge(v1,v2);
      edgeMap.put(new HalfEdgeKey(he.getHead(),he.getTail()),he);
      eface.add(he);
    }
    buildFace(eface);
  }
  boolean notifyNonManifold=true;
  HalfEdgeKey key=new HalfEdgeKey();
  for (  HalfEdge he1 : edgeMap.values()) {
    if (he1.getTwin() == null) {
      key.setHead(he1.getTail());
      key.setTail(he1.getHead());
      HalfEdge he2=edgeMap.get(key);
      if (he2 != null) {
        betwin(he1,he2);
        buildEdge(he1);
      }
 else {
        if (DEBUG && notifyNonManifold) {
          System.out.println(""String_Node_Str"" + he1 + ""String_Node_Str""+ he1.getHead().getID()+ ""String_Node_Str""+ he1.getTail().getID());
        }
        buildEdge(he1);
      }
    }
  }
  for (int i=0; i < V.length; i++) {
    addVertex(V[i]);
  }
}"
43058,"/** 
 * Collapse an edge.
 * @param e
 * @param pos The position of the new common vertex
 */
public void collapseEdge(Edge e,Point3d pos){
  if (DEBUG)   System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ pos);
  Vertex commonv=e.getHe().getHead();
  tvertices.remove(commonv.getPoint());
  commonv.getPoint().x=pos.x;
  commonv.getPoint().y=pos.y;
  commonv.getPoint().z=pos.z;
  tvertices.put(commonv.getPoint(),commonv);
  if (DEBUG)   System.out.println(""String_Node_Str"" + commonv.getID() + ""String_Node_Str""+ pos);
  Face face1=e.getHe().getLeft();
  Face face2=e.getHe().getTwin().getLeft();
  Vertex removev=e.getHe().getTail();
  if (DEBUG)   System.out.println(""String_Node_Str"" + removev.getID() + ""String_Node_Str""+ commonv.getID());
  ArrayList<Edge> redges=new ArrayList<Edge>();
  changeVertex(face1,removev,commonv,redges);
  changeVertex(face2,removev,commonv,redges);
  if (DEBUG)   System.out.println(""String_Node_Str"" + removev.getID());
  removeVertex(removev);
  removeHalfEdges(face1);
  removeHalfEdges(face2);
  removeFace(face1);
  removeFace(face2);
  removeEdge(e);
  HalfEdge he1;
  HalfEdgeKey key=new HalfEdgeKey();
  System.out.println(""String_Node_Str"");
  redges.clear();
  for (Edge e1=edges; e1 != null; e1=e1.getNext()) {
    redges.add(e1);
  }
  for (  Edge e1 : redges) {
    he1=e1.getHe();
    if (he1 == null) {
      continue;
    }
    HalfEdge twin=he1.getTwin();
    if (twin == null) {
      key.o1=he1.getHead();
      key.o2=he1.getTail();
      HalfEdge e2=edgeMap.get(key);
      if (e2 != null) {
        betwin(he1,e2);
      }
 else {
        writeOBJ(System.out);
        throw new IllegalArgumentException(""String_Node_Str"" + he1);
      }
    }
  }
}","/** 
 * Collapse an edge.
 * @param e
 * @param pos The position of the new common vertex
 */
public void collapseEdge(Edge e,Point3d pos){
  if (DEBUG)   System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ pos);
  Vertex commonv=e.getHe().getHead();
  tvertices.remove(commonv.getPoint());
  commonv.getPoint().x=pos.x;
  commonv.getPoint().y=pos.y;
  commonv.getPoint().z=pos.z;
  tvertices.put(commonv.getPoint(),commonv);
  if (DEBUG)   System.out.println(""String_Node_Str"" + commonv.getID() + ""String_Node_Str""+ pos);
  Face face1=e.getHe().getLeft();
  Face face2=e.getHe().getTwin().getLeft();
  Vertex removev=e.getHe().getTail();
  if (DEBUG)   System.out.println(""String_Node_Str"" + removev.getID() + ""String_Node_Str""+ commonv.getID());
  ArrayList<Edge> redges=new ArrayList<Edge>();
  changeVertex(face1,removev,commonv,redges);
  changeVertex(face2,removev,commonv,redges);
  if (DEBUG)   System.out.println(""String_Node_Str"" + removev.getID());
  removeVertex(removev);
  removeHalfEdges(face1);
  removeHalfEdges(face2);
  removeFace(face1);
  removeFace(face2);
  removeEdge(e);
  HalfEdge he1;
  HalfEdgeKey key=new HalfEdgeKey();
  System.out.println(""String_Node_Str"");
  redges.clear();
  for (Edge e1=edges; e1 != null; e1=e1.getNext()) {
    redges.add(e1);
  }
  for (  Edge e1 : redges) {
    he1=e1.getHe();
    if (he1 == null) {
      continue;
    }
    HalfEdge twin=he1.getTwin();
    if (twin == null) {
      key.setHead(he1.getHead());
      key.setTail(he1.getTail());
      HalfEdge e2=edgeMap.get(key);
      if (e2 != null) {
        betwin(he1,e2);
      }
 else {
        writeOBJ(System.out);
        System.out.println(""String_Node_Str"");
        for (        Map.Entry<HalfEdgeKey,HalfEdge> entry : edgeMap.entrySet()) {
          System.out.println(entry.getKey() + ""String_Node_Str"" + entry.getValue());
        }
        throw new IllegalArgumentException(""String_Node_Str"" + he1 + ""String_Node_Str""+ he1.getHead().getID()+ ""String_Node_Str""+ he1.getTail().getID());
      }
    }
  }
}"
43059,"/** 
 * Change a vertex reference from one vertex to another for a face.
 * @param f The face
 * @param vorig The original vertex
 * @param vnew The new vertex
 * @param hedges List of hald
 */
private void changeVertex(Face f,Vertex vorig,Vertex vnew,List<Edge> hedges){
  if (DEBUG)   System.out.println(""String_Node_Str"" + f + ""String_Node_Str""+ vorig.getID()+ ""String_Node_Str""+ vnew.getID());
  HalfEdge he=f.getHe();
  HalfEdge start=he;
  while (he != null) {
    if (he.getHead() == vorig) {
      if (DEBUG)       System.out.print(""String_Node_Str"" + he);
      hedges.add(he.getEdge());
      he.setHead(vnew);
      if (DEBUG)       System.out.println(""String_Node_Str"" + he);
      changeVertex(he.getTwin().getLeft(),vorig,vnew,hedges);
    }
 else     if (he.getTail() == vorig) {
      if (DEBUG)       System.out.print(""String_Node_Str"" + he);
      hedges.add(he.getEdge());
      he.setTail(vnew);
      if (DEBUG)       System.out.println(""String_Node_Str"" + he);
      changeVertex(he.getTwin().getLeft(),vorig,vnew,hedges);
    }
    he=he.getNext();
    if (he == start) {
      break;
    }
  }
}","/** 
 * Change a vertex reference from one vertex to another for a face.
 * @param f The face
 * @param vorig The original vertex
 * @param vnew The new vertex
 * @param hedges List of hald
 */
private void changeVertex(Face f,Vertex vorig,Vertex vnew,List<Edge> hedges){
  if (DEBUG)   System.out.println(""String_Node_Str"" + f + ""String_Node_Str""+ vorig.getID()+ ""String_Node_Str""+ vnew.getID());
  HalfEdge he=f.getHe();
  HalfEdge start=he;
  while (he != null) {
    if (he.getHead() == vorig) {
      if (DEBUG)       System.out.print(""String_Node_Str"" + he);
      hedges.add(he.getEdge());
      HalfEdgeKey key=new HalfEdgeKey(he.getHead(),he.getTail());
      edgeMap.remove(key);
      he.setHead(vnew);
      key.setHead(he.getHead());
      key.setTail(he.getTail());
      edgeMap.put(key,he);
      if (DEBUG)       System.out.println(""String_Node_Str"" + he);
      changeVertex(he.getTwin().getLeft(),vorig,vnew,hedges);
    }
 else     if (he.getTail() == vorig) {
      if (DEBUG)       System.out.print(""String_Node_Str"" + he);
      hedges.add(he.getEdge());
      HalfEdgeKey key=new HalfEdgeKey(he.getHead(),he.getTail());
      edgeMap.remove(key);
      he.setTail(vnew);
      key.setHead(he.getHead());
      key.setTail(he.getTail());
      edgeMap.put(key,he);
      if (DEBUG)       System.out.println(""String_Node_Str"" + he);
      changeVertex(he.getTwin().getLeft(),vorig,vnew,hedges);
    }
    he=he.getNext();
    if (he == start) {
      break;
    }
  }
}"
43060,"public void allocate(TestCase testCase){
  int w=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int h=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int d=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  grid=new BlockArrayGrid(w,h,d,voxel_size,slice_height,new int[]{3,3,3},BlockType.Array);
  ((BlockArrayGrid)grid).clean();
}","public void allocate(TestCase testCase){
  int w=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int h=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int d=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  grid=new BlockArrayGrid(w,h,d,voxel_size,slice_height,new int[]{4,4,4},BlockType.Array);
}"
43061,"public void allocate(TestCase testCase){
  int w=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int h=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int d=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  grid=new BlockArrayGrid(w,h,d,voxel_size,slice_height,new int[]{3,3,3},BlockArrayGrid.BlockType.RLE);
  ((BlockArrayGrid)grid).clean();
}","public void allocate(TestCase testCase){
  int w=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int h=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  int d=Integer.parseInt(testCase.getParam(""String_Node_Str""));
  grid=new BlockArrayGrid(w,h,d,voxel_size,slice_height,new int[]{4,4,4},BlockArrayGrid.BlockType.RLE);
}"
43062,"/** 
 * Fill cells with the specified value along an axis.
 * @param val The value
 * @param result The cube to fill
 * @param axis
 */
private void fillCells(boolean val,boolean[] result,int[] origin,TunnelRegion.Axis axis,int[] min,int[] max){
  int start=0;
  int len=0;
switch (axis) {
case X:
    len=max[0] - min[0] + 1;
  start=min[0];
break;
case Y:
len=max[1] - min[1] + 1;
start=min[1];
break;
case Z:
len=max[2] - min[2] + 1;
start=min[2];
break;
}
for (int i=0; i < len; i++) {
result[start + i]=val;
}
}","/** 
 * Fill cells with the specified value along an axis.
 * @param val The value
 * @param result The cube to fill
 * @param axis
 */
private void fillCells(boolean val,boolean[] result,TunnelRegion.Axis axis,int[] min,int[] max){
  int start=0;
  int len=0;
switch (axis) {
case X:
    len=max[0] - min[0] + 1;
  start=min[0];
break;
case Y:
len=max[1] - min[1] + 1;
start=min[1];
break;
case Z:
len=max[2] - min[2] + 1;
start=min[2];
break;
}
for (int i=0; i < len; i++) {
result[start + i]=val;
}
}"
43063,"/** 
 * @param x The x translation applied before voxelization
 * @param y The y translation applied before voxelization
 * @param z The z translation applied before voxelization
 * @param rx The x rotation applied before voxelization
 * @param ry The y rotation applied before voxelization
 * @param rz The z rotation applied before voxelization
 * @param rangle The angle rotation applied before voxelization
 */
public InteriorFinderTriangleBased(GeometryData geom,float[] bounds,double x,double y,double z,double rx,double ry,double rz,double rangle,int material,int newMaterial){
  this.geom=geom;
  this.material=material;
  this.innerMaterial=newMaterial;
  this.bounds=bounds.clone();
  this.x=x;
  this.y=y;
  this.z=z;
  this.rx=rx;
  this.ry=ry;
  this.rz=rz;
  this.rangle=rangle;
  needTransform=true;
  origin=new int[3];
}","/** 
 * @param x The x translation applied before voxelization
 * @param y The y translation applied before voxelization
 * @param z The z translation applied before voxelization
 * @param rx The x rotation applied before voxelization
 * @param ry The y rotation applied before voxelization
 * @param rz The z rotation applied before voxelization
 * @param rangle The angle rotation applied before voxelization
 */
public InteriorFinderTriangleBased(GeometryData geom,float[] bounds,double x,double y,double z,double rx,double ry,double rz,double rangle,int material,int newMaterial){
  this.geom=geom;
  this.material=material;
  this.innerMaterial=newMaterial;
  this.bounds=bounds.clone();
  this.x=x;
  this.y=y;
  this.z=z;
  this.rx=rx;
  this.ry=ry;
  this.rz=rz;
  this.rangle=rangle;
  needTransform=true;
}"
43064,"/** 
 * Execute an operation on a grid.  If the operation changes the grid dimensions then a new one will be returned from the call.
 * @param grid The grid to use for grid A.
 * @return The new grid
 */
public Grid execute(Grid grid){
  gridOp=grid;
  result=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
  result=new RangeCheckWrapper(result);
  if (needTransform) {
    float[] coords=new float[geom.coordinates.length];
    Matrix4d mat=MatrixUtil.createMatrix(new double[]{0,0,0},new double[]{1,1,1},new double[]{rx,ry,rz,rangle},new double[]{x,y,z},new double[]{0,0,1,0});
    Point3d v=new Point3d();
    if (geom.geometryType == GeometryData.TRIANGLES) {
      int len=geom.vertexCount;
      int idx=0;
      for (int i=0; i < len; i++) {
        v.x=geom.coordinates[idx];
        v.y=geom.coordinates[idx + 1];
        v.z=geom.coordinates[idx + 2];
        mat.transform(v);
        coords[idx++]=(float)v.x;
        coords[idx++]=(float)v.y;
        coords[idx++]=(float)v.z;
      }
      GeometryData new_geom=new GeometryData();
      new_geom.geometryType=GeometryData.TRIANGLES;
      new_geom.coordinates=coords;
      new_geom.vertexCount=geom.vertexCount;
      geom=new_geom;
    }
 else     if (geom.geometryType == GeometryData.INDEXED_TRIANGLES) {
      int len=geom.indexesCount;
      int idx=0;
      int loc=0;
      for (int i=0; i < len; i++) {
        loc=geom.indexes[idx++] * 3;
        v.x=geom.coordinates[loc];
        v.y=geom.coordinates[loc + 1];
        v.z=geom.coordinates[loc + 2];
        mat.transform(v);
        coords[loc]=(float)v.x;
        coords[loc + 1]=(float)v.y;
        coords[loc + 2]=(float)v.z;
      }
      GeometryData new_geom=new GeometryData();
      new_geom.geometryType=GeometryData.INDEXED_TRIANGLES;
      new_geom.coordinates=coords;
      new_geom.vertexCount=geom.vertexCount;
      new_geom.indexes=geom.indexes.clone();
      new_geom.indexesCount=geom.indexesCount;
      geom=new_geom;
    }
    Point3d min=new Point3d(bounds[0],bounds[2],bounds[4]);
    Point3d max=new Point3d(bounds[1],bounds[3],bounds[5]);
    mat.transform(min);
    mat.transform(max);
    bounds[0]=(float)min.x;
    bounds[2]=(float)min.y;
    bounds[4]=(float)min.z;
    bounds[1]=(float)max.x;
    bounds[3]=(float)max.y;
    bounds[5]=(float)max.z;
  }
  int[] min=new int[3];
  int[] max=new int[3];
  grid.getGridCoords(bounds[0],bounds[2],bounds[4],min);
  grid.getGridCoords(bounds[1],bounds[3],bounds[5],max);
  spatial=initSpatial(grid,geom,grid.getVoxelSize());
  int[] spat_min=new int[3];
  int[] spat_max=new int[3];
  spatial.findGridCoordsFromWorldCoords(new float[]{bounds[0],bounds[2],bounds[4]},spat_min);
  spatial.findGridCoordsFromWorldCoords(new float[]{bounds[1],bounds[3],bounds[5]},spat_max);
  double[] pos=new double[3];
  int[] tris=null;
  min[0]=0;
  min[1]=0;
  min[2]=0;
  max[0]=grid.getWidth();
  max[1]=grid.getHeight();
  max[2]=grid.getDepth();
  int sloca=spatial.findGridCoordsFromWorldCoords(0);
  int slocb=spatial.findGridCoordsFromWorldCoords(0);
  for (int y=min[1]; y < max[1]; y++) {
    for (int x=min[0]; x < max[0]; x++) {
      grid.getWorldCoords(x,y,0,pos);
      pos[0]-=grid.getVoxelSize() / 2.0;
      pos[1]-=grid.getSliceHeight() / 2.0;
      pos[2]=grid.getDepth() + grid.getVoxelSize();
      if (SPATIAL_ACCEL) {
        int sloc1=spatial.findGridCoordsFromWorldCoords((float)pos[0]);
        int sloc2=spatial.findGridCoordsFromWorldCoords((float)pos[1]);
        TunnelRegion region=new TunnelRegion(TunnelRegion.Axis.Z,sloc1,sloc2,0);
        tris=spatial.getObjects(region);
      }
 else {
        tris=spatial.getObjects(new AllRegion());
      }
      if (tris == null) {
        continue;
      }
      findInterior(TunnelRegion.Axis.Z,pos[0],pos[1],pos[2],tris,grid);
    }
  }
  for (int x=min[0]; x < max[0]; x++) {
    for (int z=min[2]; z < max[2]; z++) {
      grid.getWorldCoords(x,0,z,pos);
      pos[0]-=grid.getVoxelSize() / 2.0;
      pos[2]-=grid.getVoxelSize() / 2.0;
      pos[1]=grid.getHeight() + grid.getSliceHeight();
      if (SPATIAL_ACCEL) {
        int sloc1=spatial.findGridCoordsFromWorldCoords((float)pos[0]);
        int sloc2=spatial.findGridCoordsFromWorldCoords((float)pos[2]);
        TunnelRegion region=new TunnelRegion(TunnelRegion.Axis.Y,sloc1,sloc2,0);
        tris=spatial.getObjects(region);
      }
 else {
        tris=spatial.getObjects(new AllRegion());
      }
      if (tris == null) {
        continue;
      }
      findInterior(TunnelRegion.Axis.Y,pos[0],pos[1],pos[2],tris,grid);
    }
  }
  for (int y=min[1]; y < max[1]; y++) {
    for (int z=min[2]; z < max[2]; z++) {
      grid.getWorldCoords(0,y,z,pos);
      pos[1]-=grid.getSliceHeight() / 2.0;
      pos[2]-=grid.getVoxelSize() / 2.0;
      pos[0]=grid.getWidth() + grid.getVoxelSize();
      if (SPATIAL_ACCEL) {
        int sloc1=spatial.findGridCoordsFromWorldCoords((float)pos[1]);
        int sloc2=spatial.findGridCoordsFromWorldCoords((float)pos[2]);
        TunnelRegion region=new TunnelRegion(TunnelRegion.Axis.X,sloc1,sloc2,0);
        tris=spatial.getObjects(region);
      }
 else {
        tris=spatial.getObjects(new AllRegion());
      }
      if (tris == null) {
        continue;
      }
      findInterior(TunnelRegion.Axis.X,pos[0],pos[1],pos[2],tris,grid);
    }
  }
  result.find(3,this);
  gridOp=null;
  result=null;
  return grid;
}","/** 
 * Execute an operation on a grid.  If the operation changes the grid dimensions then a new one will be returned from the call.
 * @param grid The grid to use for grid A.
 * @return The new grid
 */
public Grid execute(Grid grid){
  gridOp=grid;
  result=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
  if (needTransform) {
    float[] coords=new float[geom.coordinates.length];
    Matrix4d mat=MatrixUtil.createMatrix(new double[]{0,0,0},new double[]{1,1,1},new double[]{rx,ry,rz,rangle},new double[]{x,y,z},new double[]{0,0,1,0});
    Point3d v=new Point3d();
    if (geom.geometryType == GeometryData.TRIANGLES) {
      int len=geom.vertexCount;
      int idx=0;
      for (int i=0; i < len; i++) {
        v.x=geom.coordinates[idx];
        v.y=geom.coordinates[idx + 1];
        v.z=geom.coordinates[idx + 2];
        mat.transform(v);
        coords[idx++]=(float)v.x;
        coords[idx++]=(float)v.y;
        coords[idx++]=(float)v.z;
      }
      GeometryData new_geom=new GeometryData();
      new_geom.geometryType=GeometryData.TRIANGLES;
      new_geom.coordinates=coords;
      new_geom.vertexCount=geom.vertexCount;
      geom=new_geom;
    }
 else     if (geom.geometryType == GeometryData.INDEXED_TRIANGLES) {
      int len=geom.indexesCount;
      int idx=0;
      int loc=0;
      for (int i=0; i < len; i++) {
        loc=geom.indexes[idx++] * 3;
        v.x=geom.coordinates[loc];
        v.y=geom.coordinates[loc + 1];
        v.z=geom.coordinates[loc + 2];
        mat.transform(v);
        coords[loc]=(float)v.x;
        coords[loc + 1]=(float)v.y;
        coords[loc + 2]=(float)v.z;
      }
      GeometryData new_geom=new GeometryData();
      new_geom.geometryType=GeometryData.INDEXED_TRIANGLES;
      new_geom.coordinates=coords;
      new_geom.vertexCount=geom.vertexCount;
      new_geom.indexes=geom.indexes.clone();
      new_geom.indexesCount=geom.indexesCount;
      geom=new_geom;
    }
    Point3d min=new Point3d(bounds[0],bounds[2],bounds[4]);
    Point3d max=new Point3d(bounds[1],bounds[3],bounds[5]);
    mat.transform(min);
    mat.transform(max);
    bounds[0]=(float)min.x;
    bounds[2]=(float)min.y;
    bounds[4]=(float)min.z;
    bounds[1]=(float)max.x;
    bounds[3]=(float)max.y;
    bounds[5]=(float)max.z;
  }
  int[] min=new int[3];
  int[] max=new int[3];
  grid.getGridCoords(bounds[0],bounds[2],bounds[4],min);
  grid.getGridCoords(bounds[1],bounds[3],bounds[5],max);
  spatial=initSpatial(grid,geom,grid.getVoxelSize());
  double[] pos=new double[3];
  int[] tris=null;
  for (int y=min[1]; y < max[1]; y++) {
    for (int x=min[0]; x < max[0]; x++) {
      grid.getWorldCoords(x,y,0,pos);
      pos[2]=grid.getDepth() + grid.getVoxelSize();
      if (SPATIAL_ACCEL) {
        int sloc1=spatial.findGridCoordsFromWorldCoords((float)pos[0]);
        int sloc2=spatial.findGridCoordsFromWorldCoords((float)pos[1]);
        TunnelRegion region=new TunnelRegion(TunnelRegion.Axis.Z,sloc1,sloc2,0);
        tris=spatial.getObjects(region);
      }
 else {
        tris=spatial.getObjects(new AllRegion());
      }
      if (tris == null) {
        continue;
      }
      findInterior(TunnelRegion.Axis.Z,pos[0],pos[1],pos[2],tris,grid);
    }
  }
  for (int x=min[0]; x < max[0]; x++) {
    for (int z=min[2]; z < max[2]; z++) {
      grid.getWorldCoords(x,0,z,pos);
      pos[1]=grid.getHeight() + grid.getSliceHeight();
      if (SPATIAL_ACCEL) {
        int sloc1=spatial.findGridCoordsFromWorldCoords((float)pos[0]);
        int sloc2=spatial.findGridCoordsFromWorldCoords((float)pos[2]);
        TunnelRegion region=new TunnelRegion(TunnelRegion.Axis.Y,sloc1,sloc2,0);
        tris=spatial.getObjects(region);
      }
 else {
        tris=spatial.getObjects(new AllRegion());
      }
      if (tris == null) {
        continue;
      }
      findInterior(TunnelRegion.Axis.Y,pos[0],pos[1],pos[2],tris,grid);
    }
  }
  for (int y=min[1]; y < max[1]; y++) {
    for (int z=min[2]; z < max[2]; z++) {
      grid.getWorldCoords(0,y,z,pos);
      pos[0]=grid.getWidth() + grid.getVoxelSize();
      if (SPATIAL_ACCEL) {
        int sloc1=spatial.findGridCoordsFromWorldCoords((float)pos[1]);
        int sloc2=spatial.findGridCoordsFromWorldCoords((float)pos[2]);
        TunnelRegion region=new TunnelRegion(TunnelRegion.Axis.X,sloc1,sloc2,0);
        tris=spatial.getObjects(region);
      }
 else {
        tris=spatial.getObjects(new AllRegion());
      }
      if (tris == null) {
        continue;
      }
      findInterior(TunnelRegion.Axis.X,pos[0],pos[1],pos[2],tris,grid);
    }
  }
  result.find(3,this);
  gridOp=null;
  result=null;
  return grid;
}"
43065,"/** 
 * Cast a ray along the specified axis and find interior voxels.
 * @param axis The axis to cast along
 * @param rayX The ray x origin
 * @param rayY The ray y origin
 * @param rayZ The ray z origin
 */
private void findInterior(TunnelRegion.Axis axis,double rayX,double rayY,double rayZ,int[] tris,Grid grid){
  boolean[] t_result=new boolean[numVoxels];
  float[] pos=new float[3];
  float[] workingTri;
  TriangleIntersectionDoubleUtil intersectTester=new TriangleIntersectionDoubleUtil();
  ArrayList hits=new ArrayList(tris.length);
  double rx=rayX;
  double ry=rayY;
  double rz=rayZ;
  for (int j=0; j < tris.length; j++) {
    int id=tris[j];
    workingTri=spatial.getTriangle(id);
switch (axis) {
case X:
      if (intersectTester.xAxisRayTriangle(rx,ry,rz,workingTri)) {
        hits.add(new HitRecord(axis,intersectTester.getLastIntersectionPoint(),rx,ry,rz,workingTri));
      }
    break;
case Y:
  if (intersectTester.yAxisRayTriangle(rx,ry,rz,workingTri)) {
    hits.add(new HitRecord(axis,intersectTester.getLastIntersectionPoint(),rx,ry,rz,workingTri));
  }
break;
case Z:
if (intersectTester.zAxisRayTriangle(rx,ry,rz,workingTri)) {
hits.add(new HitRecord(axis,intersectTester.getLastIntersectionPoint(),rx,ry,rz,workingTri));
}
break;
}
}
Collections.sort(hits);
int hlen=hits.size() - 1;
HitRecord a;
HitRecord b;
int idx=0;
double av;
double bv;
double dist;
double EPSILON=0.00000001;
int[] minCoords=new int[3];
int[] maxCoords=new int[3];
boolean show_details=false;
while (idx < hlen) {
a=(HitRecord)hits.get(idx++);
b=(HitRecord)hits.get(idx++);
av=a.getPosition();
bv=b.getPosition();
dist=bv - av;
if (show_details) {
System.out.println(""String_Node_Str"" + a);
System.out.println(""String_Node_Str"" + java.util.Arrays.toString(a.tricoords) + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + b);
System.out.println(""String_Node_Str"" + java.util.Arrays.toString(b.tricoords) + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + dist);
}
pos[0]=(float)a.getX();
pos[1]=(float)a.getY();
pos[2]=(float)a.getZ();
spatial.findGridCoordsFromWorldCoords(pos,minCoords);
pos[0]=(float)b.getX();
pos[1]=(float)b.getY();
pos[2]=(float)b.getZ();
spatial.findGridCoordsFromWorldCoords(pos,maxCoords);
switch (axis) {
case X:
minCoords[0]+=1;
maxCoords[0]-=1;
break;
case Y:
minCoords[1]+=1;
maxCoords[1]-=1;
break;
case Z:
minCoords[2]+=1;
maxCoords[2]-=1;
break;
}
fillCells(true,t_result,origin,axis,minCoords,maxCoords);
}
hits.clear();
int[] coords=new int[3];
pos[0]=(float)rayX;
pos[1]=(float)rayY;
pos[2]=(float)rayZ;
spatial.findGridCoordsFromWorldCoords(pos,coords);
if (axis == TunnelRegion.Axis.X) {
int len=t_result.length;
int start=0;
for (int i=start; i < len; i++) {
if (t_result[i] == true) {
result.setData(i - origin[0],coords[1] - origin[1],coords[2] - origin[2],Grid.INTERIOR,result.getMaterial(i - origin[0],coords[1] - origin[1],coords[2] - origin[2]) + 1);
}
}
}
 else if (axis == TunnelRegion.Axis.Y) {
int len=t_result.length;
int start=0;
for (int i=start; i < len; i++) {
if (t_result[i] == true) {
result.setData(coords[0] - origin[0],i - origin[1],coords[2] - origin[2],Grid.INTERIOR,result.getMaterial(coords[0] - origin[0],i - origin[1],coords[2] - origin[2]) + 1);
}
}
}
 else if (axis == TunnelRegion.Axis.Z) {
int len=t_result.length;
int start=0;
for (int i=start; i < len; i++) {
if (t_result[i] == true) {
result.setData(coords[0] - origin[0],coords[1] - origin[1],i - origin[2],Grid.INTERIOR,result.getMaterial(coords[0] - origin[0],coords[1] - origin[1],i - origin[2]) + 1);
}
}
}
}","/** 
 * Cast a ray along the specified axis and find interior voxels.
 * @param axis The axis to cast along
 * @param rayX The ray x origin
 * @param rayY The ray y origin
 * @param rayZ The ray z origin
 */
private void findInterior(TunnelRegion.Axis axis,double rayX,double rayY,double rayZ,int[] tris,Grid grid){
  boolean[] t_result=new boolean[numVoxels];
  float[] pos=new float[3];
  float[] workingTri;
  TriangleIntersectionDoubleUtil intersectTester=new TriangleIntersectionDoubleUtil();
  ArrayList hits=new ArrayList(tris.length);
  double rx=rayX;
  double ry=rayY;
  double rz=rayZ;
  for (int j=0; j < tris.length; j++) {
    int id=tris[j];
    workingTri=spatial.getTriangle(id);
switch (axis) {
case X:
      if (intersectTester.xAxisRayTriangle(rx,ry,rz,workingTri)) {
        hits.add(new HitRecord(axis,intersectTester.getLastIntersectionPoint(),rx,ry,rz,workingTri));
      }
    break;
case Y:
  if (intersectTester.yAxisRayTriangle(rx,ry,rz,workingTri)) {
    hits.add(new HitRecord(axis,intersectTester.getLastIntersectionPoint(),rx,ry,rz,workingTri));
  }
break;
case Z:
if (intersectTester.zAxisRayTriangle(rx,ry,rz,workingTri)) {
hits.add(new HitRecord(axis,intersectTester.getLastIntersectionPoint(),rx,ry,rz,workingTri));
}
break;
}
}
Collections.sort(hits);
int hlen=hits.size() - 1;
HitRecord a;
HitRecord b;
int idx=0;
double av;
double bv;
double dist;
double EPSILON=0.00000001;
int[] minCoords=new int[3];
int[] maxCoords=new int[3];
boolean show_details=false;
while (idx < hlen) {
a=(HitRecord)hits.get(idx++);
b=(HitRecord)hits.get(idx++);
av=a.getPosition();
bv=b.getPosition();
dist=bv - av;
if (show_details) {
System.out.println(""String_Node_Str"" + a);
System.out.println(""String_Node_Str"" + java.util.Arrays.toString(a.tricoords) + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + b);
System.out.println(""String_Node_Str"" + java.util.Arrays.toString(b.tricoords) + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + dist);
}
pos[0]=(float)a.getX();
pos[1]=(float)a.getY();
pos[2]=(float)a.getZ();
grid.getGridCoords(pos[0],pos[1],pos[2],minCoords);
pos[0]=(float)b.getX();
pos[1]=(float)b.getY();
pos[2]=(float)b.getZ();
grid.getGridCoords(pos[0],pos[1],pos[2],maxCoords);
switch (axis) {
case X:
minCoords[0]+=1;
maxCoords[0]-=1;
break;
case Y:
minCoords[1]+=1;
maxCoords[1]-=1;
break;
case Z:
minCoords[2]+=1;
maxCoords[2]-=1;
break;
}
fillCells(true,t_result,axis,minCoords,maxCoords);
}
hits.clear();
int[] coords=new int[3];
pos[0]=(float)rayX;
pos[1]=(float)rayY;
pos[2]=(float)rayZ;
if (axis == TunnelRegion.Axis.X) {
int len=t_result.length;
int start=0;
grid.getGridCoords(0,pos[1],pos[2],coords);
for (int i=start; i < len; i++) {
if (t_result[i] == true) {
result.setData(i,coords[1],coords[2],Grid.INTERIOR,result.getMaterial(i,coords[1],coords[2]) + 1);
}
}
}
 else if (axis == TunnelRegion.Axis.Y) {
int len=t_result.length;
int start=0;
grid.getGridCoords(pos[0],0,pos[2],coords);
for (int i=start; i < len; i++) {
if (t_result[i] == true) {
result.setData(coords[0],i,coords[2],Grid.INTERIOR,result.getMaterial(coords[0],i,coords[2]) + 1);
}
}
}
 else if (axis == TunnelRegion.Axis.Z) {
int len=t_result.length;
int start=0;
grid.getGridCoords(pos[0],pos[1],0,coords);
for (int i=start; i < len; i++) {
if (t_result[i] == true) {
result.setData(coords[0],coords[1],i,Grid.INTERIOR,result.getMaterial(coords[0],coords[1],i) + 1);
}
}
}
}"
43066,"/** 
 * Initialize the spatial grid for accelerating ray / voxel intersections
 * @param grid
 * @param geom
 * @param voxelSize
 * @return
 */
private GridTrianglePartition initSpatial(Grid grid,GeometryData geom,double voxelSize){
  int w=2 * grid.getWidth();
  int h=2 * grid.getHeight();
  int d=2 * grid.getDepth();
  numVoxels=(int)Math.max(Math.max(w,h),d);
  int num_tris=0;
  origin[0]=numVoxels / 2;
  origin[1]=numVoxels / 2;
  origin[2]=numVoxels / 2;
  System.out.println(""String_Node_Str"" + grid.getWidth() + ""String_Node_Str""+ grid.getHeight()+ ""String_Node_Str""+ grid.getDepth());
  if (geom.geometryType == GeometryData.TRIANGLES) {
    num_tris=geom.coordinates.length / 3;
  }
 else {
    num_tris=geom.indexes.length / 3;
  }
  System.out.println(""String_Node_Str"" + numVoxels + ""String_Node_Str""+ num_tris);
  GridTrianglePartition ret_val=new GridTrianglePartition(voxelSize,numVoxels,num_tris);
  float[] tri=new float[9];
  int t=0;
  if (geom.geometryType == GeometryData.TRIANGLES) {
    for (int i=0; i < num_tris / 3; i++) {
      tri[0]=geom.coordinates[t * 3];
      tri[1]=geom.coordinates[t * 3 + 1];
      tri[2]=geom.coordinates[t * 3 + 2];
      t++;
      tri[3]=geom.coordinates[t * 3];
      tri[4]=geom.coordinates[t * 3 + 1];
      tri[5]=geom.coordinates[t * 3 + 2];
      t++;
      tri[6]=geom.coordinates[t * 3];
      tri[7]=geom.coordinates[t * 3 + 1];
      tri[8]=geom.coordinates[t * 3 + 2];
      t++;
      Triangle poly=new Triangle(tri,i);
      ret_val.insert(poly,false);
    }
  }
 else {
    for (int i=0; i < num_tris; i++) {
      tri[0]=geom.coordinates[geom.indexes[t] * 3];
      tri[1]=geom.coordinates[geom.indexes[t] * 3 + 1];
      tri[2]=geom.coordinates[geom.indexes[t++] * 3 + 2];
      tri[3]=geom.coordinates[geom.indexes[t] * 3];
      tri[4]=geom.coordinates[geom.indexes[t] * 3 + 1];
      tri[5]=geom.coordinates[geom.indexes[t++] * 3 + 2];
      tri[6]=geom.coordinates[geom.indexes[t] * 3];
      tri[7]=geom.coordinates[geom.indexes[t] * 3 + 1];
      tri[8]=geom.coordinates[geom.indexes[t++] * 3 + 2];
      Triangle poly=new Triangle(tri,i);
      ret_val.insert(poly,false);
    }
  }
  System.gc();
  return ret_val;
}","/** 
 * Initialize the spatial grid for accelerating ray / voxel intersections
 * @param grid
 * @param geom
 * @param voxelSize
 * @return
 */
private GridTrianglePartition initSpatial(Grid grid,GeometryData geom,double voxelSize){
  int w=2 * grid.getWidth();
  int h=2 * grid.getHeight();
  int d=2 * grid.getDepth();
  numVoxels=(int)Math.max(Math.max(w,h),d);
  int num_tris=0;
  System.out.println(""String_Node_Str"" + grid.getWidth() + ""String_Node_Str""+ grid.getHeight()+ ""String_Node_Str""+ grid.getDepth());
  if (geom.geometryType == GeometryData.TRIANGLES) {
    num_tris=geom.coordinates.length / 3;
  }
 else {
    num_tris=geom.indexes.length / 3;
  }
  System.out.println(""String_Node_Str"" + numVoxels + ""String_Node_Str""+ num_tris);
  GridTrianglePartition ret_val=new GridTrianglePartition(voxelSize,numVoxels,num_tris);
  float[] tri=new float[9];
  int t=0;
  if (geom.geometryType == GeometryData.TRIANGLES) {
    for (int i=0; i < num_tris / 3; i++) {
      tri[0]=geom.coordinates[t * 3];
      tri[1]=geom.coordinates[t * 3 + 1];
      tri[2]=geom.coordinates[t * 3 + 2];
      t++;
      tri[3]=geom.coordinates[t * 3];
      tri[4]=geom.coordinates[t * 3 + 1];
      tri[5]=geom.coordinates[t * 3 + 2];
      t++;
      tri[6]=geom.coordinates[t * 3];
      tri[7]=geom.coordinates[t * 3 + 1];
      tri[8]=geom.coordinates[t * 3 + 2];
      t++;
      Triangle poly=new Triangle(tri,i);
      ret_val.insert(poly,false);
    }
  }
 else {
    for (int i=0; i < num_tris; i++) {
      tri[0]=geom.coordinates[geom.indexes[t] * 3];
      tri[1]=geom.coordinates[geom.indexes[t] * 3 + 1];
      tri[2]=geom.coordinates[geom.indexes[t++] * 3 + 2];
      tri[3]=geom.coordinates[geom.indexes[t] * 3];
      tri[4]=geom.coordinates[geom.indexes[t] * 3 + 1];
      tri[5]=geom.coordinates[geom.indexes[t++] * 3 + 2];
      tri[6]=geom.coordinates[geom.indexes[t] * 3];
      tri[7]=geom.coordinates[geom.indexes[t] * 3 + 1];
      tri[8]=geom.coordinates[geom.indexes[t++] * 3 + 2];
      Triangle poly=new Triangle(tri,i);
      ret_val.insert(poly,false);
    }
  }
  System.gc();
  return ret_val;
}"
43067,"/** 
 * Generate X3D binary geometry from the specificed parameters.
 * @param params The parameters
 * @param os The stream to write out the file.
 */
public void generate(Map<String,Object> params,OutputStream os) throws IOException {
  pullParams(params);
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    if (bodyWidth > bodyHeight) {
      bodyWidth=bodyHeight;
    }
 else {
      bodyHeight=bodyWidth;
    }
  }
  double max_width=bodyWidth * 1.2;
  double max_height=(bodyHeight + bailOuterRadius) * 1.2;
  double max_depth=0;
  if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
    max_depth=2 * bodyImageDepth + bodyDepth;
  }
 else {
    if (Math.abs(bodyImageDepth) > bodyDepth) {
      max_depth=Math.abs(bodyImageDepth) * 1.2;
    }
 else {
      max_depth=bodyDepth * 1.2;
    }
  }
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    double max=max_width;
    if (max_height > max)     max=max_height;
    if (max_depth > max)     max=max_depth;
    max_width=max;
    max_height=max;
    max_depth=max;
  }
  boolean bigIndex=false;
  int voxelsX=(int)Math.ceil(max_width / resolution);
  int voxelsY=(int)Math.ceil(max_height / resolution);
  int voxelsZ=(int)Math.ceil(max_depth / resolution);
  if ((long)voxelsX * voxelsY * voxelsZ > Math.pow(2,31)) {
    bigIndex=true;
  }
  System.out.println(""String_Node_Str"" + voxelsX + ""String_Node_Str""+ voxelsY+ ""String_Node_Str""+ voxelsZ);
  Grid grid=null;
  if (bigIndex) {
    grid=new ArrayGridByteIndexLong(voxelsX,voxelsY,voxelsZ,resolution,resolution);
  }
 else {
    grid=new ArrayGridByte(voxelsX,voxelsY,voxelsZ,resolution,resolution);
  }
  if (DEBUG_LEVEL > 0)   grid=new RangeCheckWrapper(grid);
  double body_cx=max_width / 2.0;
  double body_cy=max_height / 2.0;
  double body_cz=max_depth / 2.0;
  int mat=1;
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    createCube(grid,body_cx,body_cy,body_cz,bodyWidth,bodyHeight,bodyDepth,mat);
  }
 else   if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + body_cx + ""String_Node_Str""+ body_cy+ ""String_Node_Str""+ body_cz);
    grid=new RangeCheckWrapper(grid);
    createCylinder(grid,body_cx,body_cy,body_cz,1,0,0,1.57075,bodyDepth,bodyWidth / 2.0f,64,mat);
  }
  int bodyWidthPixels=(int)Math.ceil(bodyWidth / resolution);
  int bodyHeightPixels=(int)Math.ceil(bodyHeight / resolution);
  int bodyDepthPixels=(int)Math.ceil(bodyDepth / resolution);
  System.out.println(""String_Node_Str"" + bodyWidthPixels + ""String_Node_Str""+ bodyHeightPixels+ ""String_Node_Str""+ bodyDepthPixels);
  int bodyImageMarginWidthPixels=(int)Math.ceil(minWallThickness / resolution);
  int bodyImageMarginHeightPixels=(int)Math.ceil(minWallThickness / resolution);
  System.out.println(""String_Node_Str"" + bodyImageMarginWidthPixels);
  int bodyImageWidthPixels=0;
  int bodyImageHeightPixels=0;
  int picTxPixels=0;
  int picTyPixels=0;
  int picTzPixels=0;
  int bodyImageDepthPixels=0;
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    bodyImageWidthPixels=bodyWidthPixels - 2 * bodyImageMarginWidthPixels;
    bodyImageHeightPixels=bodyHeightPixels - 2 * bodyImageMarginHeightPixels;
    picTxPixels=((int)Math.ceil((body_cx - bodyWidth / 2.0) / resolution)) + bodyImageMarginWidthPixels;
    picTyPixels=((int)Math.ceil((body_cy - bodyHeight / 2.0) / resolution)) + bodyImageMarginHeightPixels;
    if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
      picTzPixels=(int)((body_cz + bodyDepth / 2.0) / resolution);
      bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
    }
 else {
      picTzPixels=0;
      bodyImageDepthPixels=(int)Math.ceil(max_depth / resolution);
    }
    System.out.println(""String_Node_Str"" + picTxPixels + ""String_Node_Str""+ picTyPixels+ ""String_Node_Str""+ picTzPixels);
  }
 else   if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    double radius=bodyWidth / 2.0;
    if (bodyImageType.equalsIgnoreCase(""String_Node_Str"")) {
      bodyImageWidthPixels=(int)(2 * Math.floor((((radius - minWallThickness) * Math.sin(0.785398163)) / resolution)));
      bodyImageHeightPixels=bodyImageWidthPixels;
      picTxPixels=(int)((body_cx - ((radius - minWallThickness) * Math.sin(0.785398163))) / resolution);
      picTyPixels=(int)((body_cy - ((radius - minWallThickness) * Math.sin(0.785398163))) / resolution);
      if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
        picTzPixels=(int)((body_cz + bodyDepth / 2.0) / resolution);
        bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
      }
 else {
        picTzPixels=0;
        bodyImageDepthPixels=(int)Math.ceil(max_depth / resolution);
      }
    }
 else     if (bodyImageType.equalsIgnoreCase(""String_Node_Str"")) {
      bodyImageWidthPixels=(int)(2 * Math.floor((((radius - minWallThickness)) / resolution)));
      bodyImageHeightPixels=bodyImageWidthPixels;
      picTxPixels=(int)((body_cx - ((radius - minWallThickness))) / resolution);
      picTyPixels=(int)((body_cy - ((radius - minWallThickness))) / resolution);
      if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
        picTzPixels=(int)((body_cz + bodyDepth / 2.0) / resolution);
        bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
      }
 else {
        picTzPixels=0;
        bodyImageDepthPixels=(int)Math.ceil(max_depth / resolution);
      }
    }
  }
 else   if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    bodyImageWidthPixels=bodyWidthPixels;
    bodyImageHeightPixels=bodyHeightPixels;
    picTxPixels=((int)Math.ceil((body_cx - bodyWidth / 2.0) / resolution));
    picTyPixels=((int)Math.ceil((body_cy - bodyHeight / 2.0) / resolution));
    picTzPixels=0;
    bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
  }
  int threshold=75;
  boolean removeStray=true;
  Grid grid2=null;
  Grid grid3=null;
  Operation op=null;
  if (!filename.equalsIgnoreCase(""String_Node_Str"")) {
    BufferedImage image=ImageIO.read(new File(filename));
    grid2=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    if (DEBUG_LEVEL > 0)     grid2=new RangeCheckWrapper(grid2);
    System.out.println(""String_Node_Str"" + picTxPixels + ""String_Node_Str""+ picTyPixels+ ""String_Node_Str""+ picTzPixels);
    System.out.println(""String_Node_Str"" + bodyImageWidthPixels + ""String_Node_Str""+ bodyImageHeightPixels+ ""String_Node_Str""+ ((int)Math.abs(bodyImageDepthPixels)));
    op=new ApplyImage(image,picTxPixels,picTyPixels,picTzPixels,bodyImageWidthPixels,bodyImageHeightPixels,threshold,invert,bodyImageDepthPixels,removeStray,mat);
    op.execute(grid2);
    if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
      op=new Subtract(grid2,0,0,0,1);
    }
 else     op=new Union(grid2,0,0,0,1);
    op.execute(grid);
  }
  if (bailStyle.equalsIgnoreCase(""String_Node_Str"")) {
    double bail_tx=bodyWidth / 2.0f;
    double bail_ty=bodyHeight;
    double bail_tz=bodyDepth / 2.0f;
    System.out.println(""String_Node_Str"" + bail_tx + ""String_Node_Str""+ bail_ty+ ""String_Node_Str""+ bail_tz);
    bail_tx=body_cx;
    bail_ty=body_cy + bodyHeight / 2.0;
    bail_tz=body_cz;
    System.out.println(""String_Node_Str"" + bail_tx + ""String_Node_Str""+ bail_ty+ ""String_Node_Str""+ bail_tz);
    grid2=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    if (DEBUG_LEVEL > 0)     grid2=new RangeCheckWrapper(grid2);
    createTorus(grid2,bail_tx,bail_ty,bail_tz,1,0,0,1.5707f,bailInnerRadius,bailOuterRadius,64,mat,true);
    grid3=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
      createCube(grid3,bail_tx,bail_ty - (bailOuterRadius + bailInnerRadius) / 2.0 - bailInnerRadius,bail_tz,(bailOuterRadius + bailInnerRadius) * 2,(bailOuterRadius + bailInnerRadius),bodyDepth,mat);
    }
 else {
      createCube(grid3,bail_tx,bail_ty - (bailOuterRadius + bailInnerRadius) / 2.0,bail_tz,(bailOuterRadius + bailInnerRadius) * 2,(bailOuterRadius + bailInnerRadius),bodyDepth,mat);
    }
    op=new Subtract(grid3,0,0,0,1);
    op.execute(grid2);
    op=new Union(grid2,0,0,0,1);
    op.execute(grid);
  }
  if (1 == 0) {
    System.out.println(""String_Node_Str"");
    grid2=new OctreeGridByte(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    Operation op2=new Copy(grid2,0,0,0);
    op2.execute(grid);
    grid=grid2;
  }
  System.out.println(""String_Node_Str"");
  try {
    ErrorReporter console=new PlainTextErrorReporter();
    write(grid,""String_Node_Str"",os,console);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Generate X3D binary geometry from the specificed parameters.
 * @param params The parameters
 * @param os The stream to write out the file.
 */
public void generate(Map<String,Object> params,OutputStream os) throws IOException {
  pullParams(params);
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    if (bodyWidth > bodyHeight) {
      bodyHeight=bodyWidth;
    }
 else {
      bodyWidth=bodyHeight;
    }
  }
  double max_width=bodyWidth * 1.2;
  double max_height=(bodyHeight + bailOuterRadius) * 1.2;
  double max_depth=0;
  if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
    max_depth=2 * bodyImageDepth + bodyDepth;
  }
 else {
    if (Math.abs(bodyImageDepth) > bodyDepth) {
      max_depth=Math.abs(bodyImageDepth) * 1.2;
    }
 else {
      max_depth=bodyDepth * 1.2;
    }
  }
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    double max=max_width;
    if (max_height > max)     max=max_height;
    if (max_depth > max)     max=max_depth;
    max_width=max;
    max_height=max;
    max_depth=max;
  }
  boolean bigIndex=false;
  int voxelsX=(int)Math.ceil(max_width / resolution);
  int voxelsY=(int)Math.ceil(max_height / resolution);
  int voxelsZ=(int)Math.ceil(max_depth / resolution);
  if ((long)voxelsX * voxelsY * voxelsZ > Math.pow(2,31)) {
    bigIndex=true;
  }
  System.out.println(""String_Node_Str"" + voxelsX + ""String_Node_Str""+ voxelsY+ ""String_Node_Str""+ voxelsZ);
  Grid grid=null;
  if (bigIndex) {
    grid=new ArrayGridByteIndexLong(voxelsX,voxelsY,voxelsZ,resolution,resolution);
  }
 else {
    grid=new ArrayGridByte(voxelsX,voxelsY,voxelsZ,resolution,resolution);
  }
  if (DEBUG_LEVEL > 0)   grid=new RangeCheckWrapper(grid);
  double body_cx=max_width / 2.0;
  double body_cy=max_height / 2.0;
  double body_cz=max_depth / 2.0;
  int mat=1;
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    createCube(grid,body_cx,body_cy,body_cz,bodyWidth,bodyHeight,bodyDepth,mat);
  }
 else   if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + body_cx + ""String_Node_Str""+ body_cy+ ""String_Node_Str""+ body_cz);
    grid=new RangeCheckWrapper(grid);
    createCylinder(grid,body_cx,body_cy,body_cz,1,0,0,1.57075,bodyDepth,bodyWidth / 2.0f,64,mat);
  }
  int bodyWidthPixels=(int)Math.ceil(bodyWidth / resolution);
  int bodyHeightPixels=(int)Math.ceil(bodyHeight / resolution);
  int bodyDepthPixels=(int)Math.ceil(bodyDepth / resolution);
  System.out.println(""String_Node_Str"" + bodyWidthPixels + ""String_Node_Str""+ bodyHeightPixels+ ""String_Node_Str""+ bodyDepthPixels);
  int bodyImageMarginWidthPixels=(int)Math.ceil(minWallThickness / resolution);
  int bodyImageMarginHeightPixels=(int)Math.ceil(minWallThickness / resolution);
  System.out.println(""String_Node_Str"" + bodyImageMarginWidthPixels);
  int bodyImageWidthPixels=0;
  int bodyImageHeightPixels=0;
  int picTxPixels=0;
  int picTyPixels=0;
  int picTzPixels=0;
  int bodyImageDepthPixels=0;
  if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    bodyImageWidthPixels=bodyWidthPixels - 2 * bodyImageMarginWidthPixels;
    bodyImageHeightPixels=bodyHeightPixels - 2 * bodyImageMarginHeightPixels;
    picTxPixels=((int)Math.ceil((body_cx - bodyWidth / 2.0) / resolution)) + bodyImageMarginWidthPixels;
    picTyPixels=((int)Math.ceil((body_cy - bodyHeight / 2.0) / resolution)) + bodyImageMarginHeightPixels;
    if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
      picTzPixels=(int)((body_cz + bodyDepth / 2.0) / resolution);
      bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
    }
 else {
      picTzPixels=0;
      bodyImageDepthPixels=(int)Math.ceil(max_depth / resolution);
    }
    System.out.println(""String_Node_Str"" + picTxPixels + ""String_Node_Str""+ picTyPixels+ ""String_Node_Str""+ picTzPixels);
  }
 else   if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    double radius=bodyWidth / 2.0;
    if (bodyImageType.equalsIgnoreCase(""String_Node_Str"")) {
      bodyImageWidthPixels=(int)(2 * Math.floor((((radius - minWallThickness) * Math.sin(0.785398163)) / resolution)));
      bodyImageHeightPixels=bodyImageWidthPixels;
      picTxPixels=(int)((body_cx - ((radius - minWallThickness) * Math.sin(0.785398163))) / resolution);
      picTyPixels=(int)((body_cy - ((radius - minWallThickness) * Math.sin(0.785398163))) / resolution);
      if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
        picTzPixels=(int)((body_cz + bodyDepth / 2.0) / resolution);
        bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
      }
 else {
        picTzPixels=0;
        bodyImageDepthPixels=(int)Math.ceil(max_depth / resolution);
      }
    }
 else     if (bodyImageType.equalsIgnoreCase(""String_Node_Str"")) {
      bodyImageWidthPixels=(int)(2 * Math.floor((((radius - minWallThickness)) / resolution)));
      bodyImageHeightPixels=bodyImageWidthPixels;
      picTxPixels=(int)((body_cx - ((radius - minWallThickness))) / resolution);
      picTyPixels=(int)((body_cy - ((radius - minWallThickness))) / resolution);
      if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
        picTzPixels=(int)((body_cz + bodyDepth / 2.0) / resolution);
        bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
      }
 else {
        picTzPixels=0;
        bodyImageDepthPixels=(int)Math.ceil(max_depth / resolution);
      }
    }
  }
 else   if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
    bodyImageWidthPixels=bodyWidthPixels;
    bodyImageHeightPixels=bodyHeightPixels;
    picTxPixels=((int)Math.ceil((body_cx - bodyWidth / 2.0) / resolution));
    picTyPixels=((int)Math.ceil((body_cy - bodyHeight / 2.0) / resolution));
    picTzPixels=0;
    bodyImageDepthPixels=(int)Math.ceil(bodyImageDepth / resolution);
    bodyImageStyle=""String_Node_Str"";
  }
  int threshold=75;
  boolean removeStray=true;
  Grid grid2=null;
  Grid grid3=null;
  Operation op=null;
  if (!filename.equalsIgnoreCase(""String_Node_Str"")) {
    BufferedImage image=ImageIO.read(new File(filename));
    grid2=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    if (DEBUG_LEVEL > 0)     grid2=new RangeCheckWrapper(grid2);
    System.out.println(""String_Node_Str"" + picTxPixels + ""String_Node_Str""+ picTyPixels+ ""String_Node_Str""+ picTzPixels);
    System.out.println(""String_Node_Str"" + bodyImageWidthPixels + ""String_Node_Str""+ bodyImageHeightPixels+ ""String_Node_Str""+ ((int)Math.abs(bodyImageDepthPixels)));
    op=new ApplyImage(image,picTxPixels,picTyPixels,picTzPixels,bodyImageWidthPixels,bodyImageHeightPixels,threshold,invert,bodyImageDepthPixels,removeStray,mat);
    op.execute(grid2);
    if (bodyImageStyle.equalsIgnoreCase(""String_Node_Str"")) {
      op=new Subtract(grid2,0,0,0,1);
    }
 else     op=new Union(grid2,0,0,0,1);
    op.execute(grid);
  }
  if (bailStyle.equalsIgnoreCase(""String_Node_Str"")) {
    double bail_tx=bodyWidth / 2.0f;
    double bail_ty=bodyHeight;
    double bail_tz=bodyDepth / 2.0f;
    System.out.println(""String_Node_Str"" + bail_tx + ""String_Node_Str""+ bail_ty+ ""String_Node_Str""+ bail_tz);
    bail_tx=body_cx;
    bail_ty=body_cy + bodyHeight / 2.0;
    bail_tz=body_cz;
    System.out.println(""String_Node_Str"" + bail_tx + ""String_Node_Str""+ bail_ty+ ""String_Node_Str""+ bail_tz);
    grid2=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    if (DEBUG_LEVEL > 0)     grid2=new RangeCheckWrapper(grid2);
    createTorus(grid2,bail_tx,bail_ty,bail_tz,1,0,0,1.5707f,bailInnerRadius,bailOuterRadius,64,mat,true);
    grid3=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    if (geometry.equalsIgnoreCase(""String_Node_Str"")) {
      createCube(grid3,bail_tx,bail_ty - (bailOuterRadius + bailInnerRadius) / 2.0 - bailInnerRadius,bail_tz,(bailOuterRadius + bailInnerRadius) * 2,(bailOuterRadius + bailInnerRadius),bodyDepth,mat);
    }
 else {
      createCube(grid3,bail_tx,bail_ty - (bailOuterRadius + bailInnerRadius) / 2.0,bail_tz,(bailOuterRadius + bailInnerRadius) * 2,(bailOuterRadius + bailInnerRadius),bodyDepth,mat);
    }
    op=new Subtract(grid3,0,0,0,1);
    op.execute(grid2);
    op=new Union(grid2,0,0,0,1);
    op.execute(grid);
  }
  if (1 == 0) {
    System.out.println(""String_Node_Str"");
    grid2=new OctreeGridByte(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
    Operation op2=new Copy(grid2,0,0,0);
    op2.execute(grid);
    grid=grid2;
  }
  System.out.println(""String_Node_Str"");
  try {
    ErrorReporter console=new PlainTextErrorReporter();
    write(grid,""String_Node_Str"",os,console);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
43068,"/** 
 * Get the material of the voxel.
 * @param x The x world coordinate
 * @param y The y world coordinate
 * @param z The z world coordinate
 * @param The voxel material
 */
public int getMaterial(int x,int y,int z){
  int idx=y * sliceSize + x * depth + z;
  byte mat=(byte)(0x3FFF & data[idx]);
  return mat;
}","/** 
 * Get the material of the voxel.
 * @param x The x world coordinate
 * @param y The y world coordinate
 * @param z The z world coordinate
 * @param The voxel material
 */
public int getMaterial(int x,int y,int z){
  int idx=y * sliceSize + x * depth + z;
  short mat=(short)(0x3FFF & data[idx]);
  return mat;
}"
43069,"/** 
 * Set the value of a voxel.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param state The voxel state
 * @param material The material
 */
public void setData(int x,int y,int z,byte state,int material){
  int idx=y * sliceSize + x * depth + z;
  data[idx]=(short)(0xFFFF & (((short)state) << 14 | material));
}","/** 
 * Set the value of a voxel.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param state The voxel state
 * @param material The material
 */
public void setData(int x,int y,int z,byte state,int material){
  int idx=y * sliceSize + x * depth + z;
  data[idx]=(short)(0xFFFF & (((short)state) << 14 | (short)material));
  System.out.println(""String_Node_Str"" + data[idx]);
}"
43070,"/** 
 * Execute an operation on a grid.  If the operation changes the grid dimensions then a new one will be returned from the call.
 * @param grid The grid to use for grid A.
 * @return The new grid
 */
public Grid execute(Grid grid){
  gridOp=grid;
  System.out.println(""String_Node_Str"");
  Grid result=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
  byte state;
  byte last=Grid.OUTSIDE;
  int status=0;
  int width=grid.getWidth();
  int height=grid.getHeight();
  int depth=grid.getDepth();
  System.out.println(""String_Node_Str"" + material);
  for (int y=0; y < height; y++) {
    for (int z=0; z < depth; z++) {
      status=0;
      for (int x=0; x < width; x++) {
        VoxelData vd=grid.getData(x,y,z);
        state=vd.getState();
        if (vd.getMaterial() != material && state != Grid.OUTSIDE) {
          continue;
        }
        if (status == 0) {
          if (state == Grid.EXTERIOR) {
            status=1;
          }
 else           if (state == Grid.INTERIOR) {
            status=3;
          }
        }
 else         if (status == 1) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=3;
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=3;
          }
        }
 else         if (status == 2) {
          if (state == Grid.OUTSIDE) {
            status=0;
          }
 else           if (state == Grid.INTERIOR) {
            status=3;
          }
        }
 else         if (status == 3) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            continue;
          }
 else           if (state == Grid.EXTERIOR) {
            status=2;
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + result.findCount(Grid.VoxelClasses.INTERIOR));
  for (int x=0; x < width; x++) {
    for (int z=0; z < depth; z++) {
      status=0;
      for (int y=0; y < height; y++) {
        VoxelData vd=grid.getData(x,y,z);
        state=vd.getState();
        if (vd.getMaterial() != material && state != Grid.OUTSIDE) {
          continue;
        }
        if (status == 0) {
          if (state == Grid.EXTERIOR) {
            status=1;
          }
 else           if (state == Grid.INTERIOR) {
            status=3;
            continue;
          }
        }
 else         if (status == 1) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=3;
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=3;
          }
        }
 else         if (status == 2) {
          if (state == Grid.OUTSIDE) {
            status=0;
          }
 else           if (state == Grid.INTERIOR) {
            status=3;
            continue;
          }
        }
 else         if (status == 3) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            continue;
          }
 else           if (state == Grid.EXTERIOR) {
            status=2;
          }
        }
        result.setData(x,y,z,Grid.OUTSIDE,(byte)0);
      }
    }
  }
  System.out.println(""String_Node_Str"" + result.findCount(Grid.VoxelClasses.INTERIOR));
  status=0;
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      status=0;
      for (int z=0; z < depth; z++) {
        VoxelData vd=grid.getData(x,y,z);
        state=vd.getState();
        if (vd.getMaterial() != material && state != Grid.OUTSIDE) {
          continue;
        }
        if (status == 0) {
          if (state == Grid.EXTERIOR) {
            status=1;
          }
 else           if (state == Grid.INTERIOR) {
            status=3;
          }
        }
 else         if (status == 1) {
          if (state == Grid.OUTSIDE) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              status=3;
              continue;
            }
          }
 else           if (state == Grid.INTERIOR) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              status=3;
            }
          }
        }
 else         if (status == 2) {
          if (state == Grid.OUTSIDE) {
            status=0;
          }
 else           if (state == Grid.INTERIOR) {
            status=3;
            continue;
          }
        }
 else         if (status == 3) {
          if (state == Grid.OUTSIDE) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
              continue;
            }
          }
 else           if (state == Grid.INTERIOR) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
              continue;
            }
          }
 else           if (state == Grid.EXTERIOR) {
            status=2;
          }
        }
        result.setData(x,y,z,Grid.OUTSIDE,(byte)0);
      }
    }
  }
  System.out.println(""String_Node_Str"" + result.findCount(Grid.VoxelClasses.INTERIOR));
  result.find(Grid.VoxelClasses.INTERIOR,this);
  gridOp=null;
  return grid;
}","/** 
 * Execute an operation on a grid.  If the operation changes the grid dimensions then a new one will be returned from the call.
 * @param grid The grid to use for grid A.
 * @return The new grid
 */
public Grid execute(Grid grid){
  gridOp=grid;
  System.out.println(""String_Node_Str"");
  Grid result=grid.createEmpty(grid.getWidth(),grid.getHeight(),grid.getDepth(),grid.getVoxelSize(),grid.getSliceHeight());
  byte state;
  byte last=Grid.OUTSIDE;
  int status=0;
  int width=grid.getWidth();
  int height=grid.getHeight();
  int depth=grid.getDepth();
  System.out.println(""String_Node_Str"" + material);
  for (int y=0; y < height; y++) {
    for (int z=0; z < depth; z++) {
      status=0;
      for (int x=0; x < width; x++) {
        VoxelData vd=grid.getData(x,y,z);
        state=vd.getState();
        if (vd.getMaterial() != material && state != Grid.OUTSIDE) {
          continue;
        }
        if (status == OUTSIDE) {
          if (state == Grid.EXTERIOR) {
            status=ENTERING;
          }
 else           if (state == Grid.INTERIOR) {
            status=INSIDE;
          }
        }
 else         if (status == ENTERING) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=OUTSIDE;
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=INSIDE;
          }
        }
 else         if (status == EXITING) {
          if (state == Grid.OUTSIDE) {
            status=OUTSIDE;
          }
 else           if (state == Grid.INTERIOR) {
            status=INSIDE;
          }
        }
 else         if (status == INSIDE) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=OUTSIDE;
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            continue;
          }
 else           if (state == Grid.EXTERIOR) {
            status=EXITING;
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + result.findCount(Grid.VoxelClasses.INTERIOR));
  for (int x=0; x < width; x++) {
    for (int z=0; z < depth; z++) {
      status=0;
      for (int y=0; y < height; y++) {
        VoxelData vd=grid.getData(x,y,z);
        state=vd.getState();
        if (vd.getMaterial() != material && state != Grid.OUTSIDE) {
          continue;
        }
        if (status == OUTSIDE) {
          if (state == Grid.EXTERIOR) {
            status=ENTERING;
          }
 else           if (state == Grid.INTERIOR) {
            status=INSIDE;
            continue;
          }
        }
 else         if (status == ENTERING) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=OUTSIDE;
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=INSIDE;
          }
        }
 else         if (status == ENTERING) {
          if (state == Grid.OUTSIDE) {
            status=OUTSIDE;
          }
 else           if (state == Grid.INTERIOR) {
            status=INSIDE;
            continue;
          }
        }
 else         if (status == INSIDE) {
          if (state == Grid.OUTSIDE) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            status=OUTSIDE;
            continue;
          }
 else           if (state == Grid.INTERIOR) {
            result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
            continue;
          }
 else           if (state == Grid.EXTERIOR) {
            status=EXITING;
          }
        }
        result.setData(x,y,z,Grid.OUTSIDE,(byte)0);
      }
    }
  }
  System.out.println(""String_Node_Str"" + result.findCount(Grid.VoxelClasses.INTERIOR));
  status=0;
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      status=0;
      for (int z=0; z < depth; z++) {
        VoxelData vd=grid.getData(x,y,z);
        state=vd.getState();
        if (vd.getMaterial() != material && state != Grid.OUTSIDE) {
          continue;
        }
        if (status == OUTSIDE) {
          if (state == Grid.EXTERIOR) {
            status=ENTERING;
          }
 else           if (state == Grid.INTERIOR) {
            status=INSIDE;
          }
        }
 else         if (status == ENTERING) {
          if (state == Grid.OUTSIDE) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              status=OUTSIDE;
              continue;
            }
          }
 else           if (state == Grid.INTERIOR) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              status=INSIDE;
            }
          }
        }
 else         if (status == EXITING) {
          if (state == Grid.OUTSIDE) {
            status=OUTSIDE;
          }
 else           if (state == Grid.INTERIOR) {
            status=INSIDE;
            continue;
          }
        }
 else         if (status == INSIDE) {
          if (state == Grid.OUTSIDE) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
              continue;
            }
          }
 else           if (state == Grid.INTERIOR) {
            if (result.getState(x,y,z) == Grid.INTERIOR) {
              result.setData(x,y,z,Grid.INTERIOR,innerMaterial);
              continue;
            }
          }
 else           if (state == Grid.EXTERIOR) {
            status=ENTERING;
          }
        }
        result.setData(x,y,z,Grid.OUTSIDE,(byte)0);
      }
    }
  }
  System.out.println(""String_Node_Str"" + result.findCount(Grid.VoxelClasses.INTERIOR));
  result.find(Grid.VoxelClasses.INTERIOR,this);
  gridOp=null;
  return grid;
}"
43071,"/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param vd The voxel data
 */
public boolean foundInterruptible(int x,int y,int z,VoxelData start){
  if (canIgnore(x,y,z)) {
    return true;
  }
  int[] pos=new int[]{x,y,z};
  path.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  boolean escaped=true;
  while (path.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
      escaped=false;
      break;
    }
  }
  if (!escaped) {
    allEscaped=false;
    return false;
  }
  addIgnoredVoxels(x,y,z);
  return true;
}","/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param start The voxel data
 */
public boolean foundInterruptible(int x,int y,int z,VoxelData start){
  if (canIgnore(x,y,z)) {
    return true;
  }
  int[] pos=new int[]{x,y,z};
  path.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  boolean escaped=true;
  while (path.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
      escaped=false;
      break;
    }
  }
  if (!escaped) {
    allEscaped=false;
    return false;
  }
  addIgnoredVoxels(x,y,z);
  return true;
}"
43072,"/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param vd The voxel data
 */
public void found(int x,int y,int z,VoxelData start){
  if (!allEscaped || canIgnore(x,y,z)) {
    return;
  }
  int[] pos=new int[]{x,y,z};
  path.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  boolean escaped=true;
  while (path.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
      escaped=false;
      break;
    }
  }
  if (!escaped)   allEscaped=false;
  addIgnoredVoxels(x,y,z);
}","/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param start The voxel data
 */
public void found(int x,int y,int z,VoxelData start){
  if (!allEscaped || canIgnore(x,y,z)) {
    return;
  }
  int[] pos=new int[]{x,y,z};
  path.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  boolean escaped=true;
  while (path.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
      escaped=false;
      break;
    }
  }
  if (!escaped)   allEscaped=false;
  addIgnoredVoxels(x,y,z);
}"
43073,"boolean canIgnore(int x,int y,int z){
  if (ignoreSet.contains(new VoxelCoordinate(x,y,z))) {
    return true;
  }
  return false;
}","/** 
 * Checks if a voxel can be ignored.
 * @param x The X coordinate of the voxel to check
 * @param y The Y coordinate of the voxel to check
 * @param z The Z coordinate of the voxel to check
 * @return True if the voxel can be ignored.
 */
private boolean canIgnore(int x,int y,int z){
  if (ignoreSet.contains(new VoxelCoordinate(x,y,z))) {
    return true;
  }
  return false;
}"
43074,"private void addIgnoredVoxels(int x,int y,int z){
  int[] pos=new int[]{x,y,z};
  Path invertedPath=path.invertPath();
  invertedPath.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  while (invertedPath.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() == Grid.OUTSIDE)     break;
    ignoreSet.add(new VoxelCoordinate(pos[0],pos[1],pos[2]));
  }
}","/** 
 * Add voxels to be ignored for a given path as specified by ignoreSetIndex.
 * @param ignoreSetIndex The index of the path array to add voxels to ignore
 * @param x The X coordinate for the starting position
 * @param y The Y coordinate for the starting position
 * @param z The Z coordinate for the starting position
 */
private void addIgnoredVoxels(int x,int y,int z){
  int[] pos=new int[]{x,y,z};
  Path invertedPath=path.invertPath();
  invertedPath.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  while (invertedPath.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() == Grid.OUTSIDE)     break;
    if (vd.getState() == Grid.EXTERIOR) {
      ignoreSet.add(new VoxelCoordinate(pos[0],pos[1],pos[2]));
    }
  }
}"
43075,"/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param vd The voxel data
 */
public boolean foundInterruptible(int x,int y,int z,VoxelData start){
  int[] pos=new int[]{x,y,z};
  boolean escaped;
  for (int i=0; i < paths.length; i++) {
    if (canIgnore(i,x,y,z)) {
      return true;
    }
    escaped=true;
    paths[i].init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
    while (paths[i].next(pos)) {
      VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
      if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
        escaped=false;
        break;
      }
    }
    if (!escaped) {
      allEscaped=false;
      return false;
    }
    addIgnoredVoxels(i,x,y,z);
    return true;
  }
  return true;
}","/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param start The voxel data
 */
public boolean foundInterruptible(int x,int y,int z,VoxelData start){
  if (!canEscape())   return false;
  boolean[] badPaths=new boolean[paths.length];
  badPathCount=0;
  for (int i=0; i < paths.length; i++) {
    if (canIgnore(i,x,y,z)) {
      continue;
    }
    int[] pos=new int[]{x,y,z};
    paths[i].init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
    while (paths[i].next(pos)) {
      VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
      if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
        badPathCount++;
        badPaths[i]=true;
        break;
      }
    }
    addIgnoredVoxels(i,x,y,z);
  }
  processBadPaths(badPaths);
  return canEscape();
}"
43076,"/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param vd The voxel data
 */
public void found(int x,int y,int z,VoxelData start){
  if (!allEscaped) {
    return;
  }
  int[] pos=new int[]{x,y,z};
  boolean escaped;
  for (int i=0; i < paths.length; i++) {
    if (canIgnore(i,x,y,z)) {
      return;
    }
    escaped=true;
    paths[i].init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
    while (paths[i].next(pos)) {
      VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
      if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
        escaped=false;
        break;
      }
    }
    if (!escaped)     allEscaped=false;
    addIgnoredVoxels(i,x,y,z);
  }
}","/** 
 * A voxel of the class requested has been found. VoxelData classes may be reused so clone the object if you keep a copy.
 * @param x The x grid coordinate
 * @param y The y grid coordinate
 * @param z The z grid coordinate
 * @param start The voxel data
 */
public void found(int x,int y,int z,VoxelData start){
  boolean[] badPaths=new boolean[paths.length];
  badPathCount=0;
  for (int i=0; i < paths.length; i++) {
    if (canIgnore(i,x,y,z)) {
      continue;
    }
    int[] pos=new int[]{x,y,z};
    paths[i].init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
    while (paths[i].next(pos)) {
      VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
      if (vd.getState() != Grid.OUTSIDE && vd.getMaterial() != material) {
        badPathCount++;
        badPaths[i]=true;
        break;
      }
    }
    addIgnoredVoxels(i,x,y,z);
  }
  processBadPaths(badPaths);
}"
43077,"boolean canIgnore(int ignoreSetIndex,int x,int y,int z){
  if (ignoreSet[ignoreSetIndex].contains(new VoxelCoordinate(x,y,z))) {
    return true;
  }
  return false;
}","private boolean canIgnore(int ignoreSetIndex,int x,int y,int z){
  if (ignoreSet[ignoreSetIndex].contains(new VoxelCoordinate(x,y,z))) {
    return true;
  }
  return false;
}"
43078,"private void addIgnoredVoxels(int ignoreSetIndex,int x,int y,int z){
  int[] pos=new int[]{x,y,z};
  Path invertedPath=paths[ignoreSetIndex].invertPath();
  invertedPath.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  while (invertedPath.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() == Grid.OUTSIDE)     break;
    ignoreSet[ignoreSetIndex].add(new VoxelCoordinate(pos[0],pos[1],pos[2]));
  }
}","/** 
 * Add voxels to be ignored for a given path as specified by ignoreSetIndex.
 * @param ignoreSetIndex The index of the path array to add voxels to ignore
 * @param x The X coordinate for the starting position
 * @param y The Y coordinate for the starting position
 * @param z The Z coordinate for the starting position
 */
private void addIgnoredVoxels(int ignoreSetIndex,int x,int y,int z){
  int[] pos=new int[]{x,y,z};
  Path invertedPath=paths[ignoreSetIndex].invertPath();
  invertedPath.init(pos,grid.getWidth(),grid.getHeight(),grid.getDepth());
  while (invertedPath.next(pos)) {
    VoxelData vd=grid.getData(pos[0],pos[1],pos[2]);
    if (vd.getState() == Grid.OUTSIDE)     break;
    if (vd.getState() == Grid.EXTERIOR) {
      ignoreSet[ignoreSetIndex].add(new VoxelCoordinate(pos[0],pos[1],pos[2]));
    }
  }
}"
43079,"/** 
 * Can the specified material move along the path to exit the voxel space.  Any intersection with another materialID will cause failure.
 * @param grid The grid to use for grid src
 * @return true if it can move to an exit.
 */
public boolean execute(Grid grid){
  allEscaped=true;
  this.grid=grid;
  for (int i=0; i < ignoreSet.length; i++) {
    ignoreSet[i]=new HashSet<VoxelCoordinate>();
  }
  grid.findInterruptible(VoxelClasses.EXTERIOR,material,this);
  System.out.println(""String_Node_Str"" + allEscaped);
  return allEscaped;
}","/** 
 * Can the specified material move along the path to exit the voxel space.  Any intersection with another materialID will cause failure.
 * @param grid The grid to use for grid src
 * @return true if it can move to an exit.
 */
public boolean execute(Grid grid){
  this.grid=grid;
  for (int i=0; i < ignoreSet.length; i++) {
    ignoreSet[i]=new HashSet<VoxelCoordinate>();
  }
  grid.findInterruptible(VoxelClasses.EXTERIOR,material,this);
  System.out.println(""String_Node_Str"" + canEscape());
  return canEscape();
}"
43080,"/** 
 * Test getMaterial by world coordinates.
 */
public void testGetMaterialByCoord(){
  Grid grid=new ArrayGrid(1.0,0.4,0.5,0.05,0.01);
  grid.setData(0.0,0.0,0.0,Grid.OUTSIDE,(byte)3);
  grid.setData(0.95,0.39,0.45,Grid.EXTERIOR,(byte)2);
  grid.setData(0.6,0.1,0.4,Grid.INTERIOR,(byte)1);
  assertEquals(""String_Node_Str"",3,grid.getMaterial(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.95,0.39,0.45));
  assertEquals(""String_Node_Str"",1,grid.getMaterial(0.6,0.1,0.4));
  grid=new ArrayGrid(0.12,0.11,0.16,0.05,0.02);
  grid.setData(0.06,0.07,0.08,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.05,0.06,0.05));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.0999,0.06,0.05));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.05,0.0799,0.05));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.05,0.06,0.0999));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.0999,0.0799,0.0999));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0499,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.0599,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.06,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.1,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.08,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.06,0.1));
  grid.setData(0.0,0.0,0.0,Grid.INTERIOR,(byte)5);
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0499,0.0,0.0));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0,0.0199,0.0));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0,0.0,0.0499));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0499,0.0199,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.0,0.0));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0,0.02,0.0));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0,0.0,0.05));
  grid.setData(0.149,0.119,0.199,Grid.INTERIOR,(byte)12);
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1,0.1,0.15));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.149,0.1,0.15));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1,0.119,0.15));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1,0.1,0.199));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.149,0.119,0.199));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.15,0.1,0.15));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.1,0.12,0.15));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.1,0.1,0.2));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.15,0.12,0.2));
}","/** 
 * Test getMaterial by world coordinates.
 */
public void testGetMaterialByCoord(){
  Grid grid=new ArrayGrid(1.0,0.4,0.5,0.05,0.01);
  grid.setData(0.0,0.0,0.0,Grid.OUTSIDE,(byte)3);
  grid.setData(0.95,0.39,0.45,Grid.EXTERIOR,(byte)2);
  grid.setData(0.6,0.1,0.4,Grid.INTERIOR,(byte)1);
  assertEquals(""String_Node_Str"",3,grid.getMaterial(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.95,0.39,0.45));
  assertEquals(""String_Node_Str"",1,grid.getMaterial(0.6,0.1,0.4));
  grid=new ArrayGrid(0.12,0.11,0.16,0.05,0.02);
  grid.setData(0.06,0.07,0.08,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.05,0.06,0.05));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.0999,0.06,0.05));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.05,0.0799,0.05));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.05,0.06,0.0999));
  assertEquals(""String_Node_Str"",2,grid.getMaterial(0.0999,0.0799,0.0999));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0499,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.0599,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.06,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.1,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.08,0.05));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.06,0.1));
  grid.setData(0.0,0.0,0.0,Grid.INTERIOR,(byte)5);
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0499,0.0,0.0));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0,0.0199,0.0));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0,0.0,0.0499));
  assertEquals(""String_Node_Str"",5,grid.getMaterial(0.0499,0.0199,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.05,0.0,0.0));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0,0.02,0.0));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0,0.0,0.05));
  grid.setData(0.149,0.119,0.199,Grid.INTERIOR,(byte)12);
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1499,0.1,0.1501));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1,0.119,0.1501));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1,0.1,0.199));
  assertEquals(""String_Node_Str"",12,grid.getMaterial(0.1499,0.1199,0.1999));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0999,0.1,0.1501));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.1,0.0999,0.1501));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.1,0.1,0.1499));
  assertEquals(""String_Node_Str"",0,grid.getMaterial(0.0999,0.0999,0.1499));
}"
43081,"/** 
 * Test getState by world coordinates.
 */
public void testGetStateByCoord(){
  Grid grid=new ArrayGrid(1.0,0.4,0.5,0.05,0.01);
  grid.setData(0.0,0.0,0.0,Grid.OUTSIDE,(byte)2);
  grid.setData(0.95,0.39,0.45,Grid.EXTERIOR,(byte)1);
  grid.setData(0.6,0.1,0.4,Grid.INTERIOR,(byte)0);
  assertEquals(""String_Node_Str"",Grid.OUTSIDE,grid.getState(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",Grid.EXTERIOR,grid.getState(0.95,0.39,0.45));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.6,0.1,0.4));
  grid=new ArrayGrid(0.12,0.11,0.16,0.05,0.02);
  grid.setData(0.06,0.07,0.08,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.05,0.06,0.05));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0999,0.06,0.05));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.05,0.0799,0.05));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.05,0.06,0.0999));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0999,0.0799,0.0999));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0499,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.0599,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.06,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getState(0.1,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.08,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.06,0.1));
  grid.setData(0.0,0.0,0.0,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0499,0.0,0.0));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0,0.0199,0.0));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0,0.0,0.0499));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0499,0.0199,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.0,0.0));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0,0.02,0.0));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0,0.0,0.05));
  grid.setData(0.149,0.119,0.199,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.1,0.1,0.15));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.149,0.1,0.15));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.1,0.119,0.15));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.1,0.1,0.199));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.149,0.119,0.199));
  assertEquals(""String_Node_Str"",0,grid.getState(0.15,0.1,0.15));
  assertEquals(""String_Node_Str"",0,grid.getState(0.1,0.12,0.15));
  assertEquals(""String_Node_Str"",0,grid.getState(0.1,0.1,0.2));
  assertEquals(""String_Node_Str"",0,grid.getState(0.15,0.12,0.2));
}","/** 
 * Test getState by world coordinates.
 */
public void testGetStateByCoord(){
  Grid grid=new ArrayGrid(1.0,0.4,0.5,0.05,0.01);
  grid.setData(0.0,0.0,0.0,Grid.OUTSIDE,(byte)2);
  grid.setData(0.95,0.39,0.45,Grid.EXTERIOR,(byte)1);
  grid.setData(0.6,0.1,0.4,Grid.INTERIOR,(byte)0);
  assertEquals(""String_Node_Str"",Grid.OUTSIDE,grid.getState(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",Grid.EXTERIOR,grid.getState(0.95,0.39,0.45));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.6,0.1,0.4));
  grid=new ArrayGrid(0.12,0.11,0.16,0.05,0.02);
  grid.setData(0.06,0.07,0.08,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.05,0.06,0.05));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0999,0.06,0.05));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.05,0.0799,0.05));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.05,0.06,0.0999));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0999,0.0799,0.0999));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0499,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.0599,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.06,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getState(0.1,0.06,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.08,0.05));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.06,0.1));
  grid.setData(0.0,0.0,0.0,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0,0.0,0.0));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0499,0.0,0.0));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0,0.0199,0.0));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0,0.0,0.0499));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.0499,0.0199,0.0499));
  assertEquals(""String_Node_Str"",0,grid.getState(0.05,0.0,0.0));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0,0.02,0.0));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0,0.0,0.05));
  grid.setData(0.149,0.119,0.199,Grid.INTERIOR,(byte)2);
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.149,0.1,0.151));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.1,0.119,0.151));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.1,0.1,0.199));
  assertEquals(""String_Node_Str"",Grid.INTERIOR,grid.getState(0.149,0.119,0.199));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0999,0.1,0.1501));
  assertEquals(""String_Node_Str"",0,grid.getState(0.1,0.0999,0.1501));
  assertEquals(""String_Node_Str"",0,grid.getState(0.1,0.1,0.1499));
  assertEquals(""String_Node_Str"",0,grid.getState(0.0999,0.0999,0.1499));
}"
43082,"/** 
 * Loads the config from file and validates the data
 * @param plugin
 */
public Config(HawkEye plugin){
  config=plugin.getConfig().getRoot();
  config.options().copyDefaults(true);
  config.set(""String_Node_Str"",plugin.version);
  plugin.saveConfig();
  CommandFilter=config.getStringList(""String_Node_Str"");
  BlockFilter=config.getIntegerList(""String_Node_Str"");
  IgnoreWorlds=config.getStringList(""String_Node_Str"");
  MaxLines=config.getInt(""String_Node_Str"");
  MaxRadius=config.getInt(""String_Node_Str"");
  DefaultHereRadius=config.getInt(""String_Node_Str"");
  ToolBlock=config.getString(""String_Node_Str"");
  DefaultToolCommand=config.getString(""String_Node_Str"").split(""String_Node_Str"");
  CleanseAge=config.getString(""String_Node_Str"");
  CleansePeriod=config.getString(""String_Node_Str"");
  GiveTool=config.getBoolean(""String_Node_Str"");
  CheckUpdates=config.getBoolean(""String_Node_Str"");
  Debug=config.getBoolean(""String_Node_Str"");
  LogIpAddresses=config.getBoolean(""String_Node_Str"");
  DeleteDataOnRollback=config.getBoolean(""String_Node_Str"");
  LogDeathDrops=config.getBoolean(""String_Node_Str"");
  OpPermissions=config.getBoolean(""String_Node_Str"");
  DbUser=config.getString(""String_Node_Str"");
  DbPassword=config.getString(""String_Node_Str"");
  DbUrl=""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ config.getInt(""String_Node_Str"")+ ""String_Node_Str""+ config.getString(""String_Node_Str"");
  DbDatabase=config.getString(""String_Node_Str"");
  DbHawkEyeTable=config.getString(""String_Node_Str"");
  DbPlayerTable=config.getString(""String_Node_Str"");
  DbWorldTable=config.getString(""String_Node_Str"");
  PoolSize=config.getInt(""String_Node_Str"");
  try {
    DebugLevel=Util.DebugLevel.valueOf(config.getString(""String_Node_Str""));
  }
 catch (  Exception ex) {
    DebugLevel=Util.DebugLevel.NONE;
  }
}","/** 
 * Loads the config from file and validates the data
 * @param plugin
 */
public Config(HawkEye plugin){
  config=plugin.getConfig().getRoot();
  config.options().copyDefaults(true);
  config.set(""String_Node_Str"",plugin.version);
  plugin.saveConfig();
  CommandFilter=config.getStringList(""String_Node_Str"");
  BlockFilter=config.getIntegerList(""String_Node_Str"");
  IgnoreWorlds=config.getStringList(""String_Node_Str"");
  MaxLines=config.getInt(""String_Node_Str"");
  MaxRadius=config.getInt(""String_Node_Str"");
  DefaultHereRadius=config.getInt(""String_Node_Str"");
  ToolBlock=config.getString(""String_Node_Str"");
  DefaultToolCommand=config.getString(""String_Node_Str"").split(""String_Node_Str"");
  CleanseAge=config.getString(""String_Node_Str"");
  CleansePeriod=config.getString(""String_Node_Str"");
  GiveTool=config.getBoolean(""String_Node_Str"");
  CheckUpdates=config.getBoolean(""String_Node_Str"");
  Debug=config.getBoolean(""String_Node_Str"");
  LogIpAddresses=config.getBoolean(""String_Node_Str"");
  DeleteDataOnRollback=config.getBoolean(""String_Node_Str"");
  LogDeathDrops=config.getBoolean(""String_Node_Str"");
  OpPermissions=config.getBoolean(""String_Node_Str"");
  DbUser=config.getString(""String_Node_Str"");
  DbPassword=config.getString(""String_Node_Str"");
  DbUrl=""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ config.getInt(""String_Node_Str"")+ ""String_Node_Str""+ config.getString(""String_Node_Str"");
  DbDatabase=config.getString(""String_Node_Str"");
  DbHawkEyeTable=config.getString(""String_Node_Str"");
  DbPlayerTable=config.getString(""String_Node_Str"");
  DbWorldTable=config.getString(""String_Node_Str"");
  PoolSize=config.getInt(""String_Node_Str"");
  try {
    DebugLevel=Util.DebugLevel.valueOf(config.getString(""String_Node_Str"").toUpperCase());
  }
 catch (  Exception ex) {
    DebugLevel=Util.DebugLevel.NONE;
  }
}"
43083,"public static void debug(DebugLevel level,String msg){
  if (Config.Debug)   if (Config.DebugLevel.compareTo(level) > 0)   Util.info(""String_Node_Str"" + msg);
}","public static void debug(DebugLevel level,String msg){
  if (Config.Debug)   if (Config.DebugLevel.compareTo(level) >= 0)   Util.info(""String_Node_Str"" + msg);
}"
43084,"/** 
 * Run the search query
 */
@Override public void run(){
  Util.debug(""String_Node_Str"");
  String sql=""String_Node_Str"" + Config.DbHawkEyeTable + ""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  Util.debug(""String_Node_Str"");
  if (parser.players != null) {
    List<Integer> pids=new ArrayList<Integer>();
    List<Integer> npids=new ArrayList<Integer>();
    for (    String player : parser.players) {
      for (      Map.Entry<String,Integer> entry : DataManager.dbPlayers.entrySet()) {
        if (entry.getKey().toLowerCase().contains(player.toLowerCase()))         pids.add(entry.getValue());
 else         if (entry.getKey().toLowerCase().contains(player.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase()))         npids.add(entry.getValue());
      }
    }
    if (pids.size() > 0)     args.add(""String_Node_Str"" + Util.join(pids,""String_Node_Str"") + ""String_Node_Str"");
    if (npids.size() > 0)     args.add(""String_Node_Str"" + Util.join(npids,""String_Node_Str"") + ""String_Node_Str"");
    if (npids.size() + pids.size() < 1) {
      callBack.error(SearchError.NO_PLAYERS,""String_Node_Str"");
      return;
    }
  }
  Util.debug(""String_Node_Str"");
  if (parser.worlds != null) {
    List<Integer> wids=new ArrayList<Integer>();
    List<Integer> nwids=new ArrayList<Integer>();
    for (    String world : parser.worlds) {
      for (      Map.Entry<String,Integer> entry : DataManager.dbWorlds.entrySet()) {
        if (entry.getKey().toLowerCase().contains(world.toLowerCase()))         wids.add(entry.getValue());
 else         if (entry.getKey().toLowerCase().contains(world.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase()))         nwids.add(entry.getValue());
      }
    }
    if (wids.size() > 0)     args.add(""String_Node_Str"" + Util.join(wids,""String_Node_Str"") + ""String_Node_Str"");
    if (nwids.size() > 0)     args.add(""String_Node_Str"" + Util.join(nwids,""String_Node_Str"") + ""String_Node_Str"");
    if (nwids.size() + wids.size() < 1) {
      callBack.error(SearchError.NO_WORLDS,""String_Node_Str"");
      return;
    }
  }
  Util.debug(""String_Node_Str"");
  if (parser.actions != null && parser.actions.size() > 0) {
    List<Integer> acs=new ArrayList<Integer>();
    for (    DataType act : parser.actions)     acs.add(act.getId());
    args.add(""String_Node_Str"" + Util.join(acs,""String_Node_Str"") + ""String_Node_Str"");
  }
  Util.debug(""String_Node_Str"");
  if (parser.dateFrom != null)   args.add(""String_Node_Str"" + parser.dateFrom + ""String_Node_Str"");
  if (parser.dateTo != null)   args.add(""String_Node_Str"" + parser.dateTo + ""String_Node_Str"");
  Util.debug(""String_Node_Str"");
  if (parser.minLoc != null) {
    args.add(""String_Node_Str"" + parser.minLoc.getX() + ""String_Node_Str""+ parser.maxLoc.getX()+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + parser.minLoc.getY() + ""String_Node_Str""+ parser.maxLoc.getY()+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + parser.minLoc.getZ() + ""String_Node_Str""+ parser.maxLoc.getZ()+ ""String_Node_Str"");
  }
 else   if (parser.loc != null) {
    args.add(""String_Node_Str"" + parser.loc.getX());
    args.add(""String_Node_Str"" + parser.loc.getY());
    args.add(""String_Node_Str"" + parser.loc.getZ());
  }
  Util.debug(""String_Node_Str"");
  if (parser.filters != null) {
    for (int i=0; i < parser.filters.length; i++)     parser.filters[i]=""String_Node_Str"" + parser.filters[i] + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(parser.filters),""String_Node_Str""));
  }
  sql+=Util.join(args,""String_Node_Str"");
  Util.debug(""String_Node_Str"");
  sql+=""String_Node_Str"";
  Util.debug(""String_Node_Str"");
  if (Config.MaxLines > 0)   sql+=""String_Node_Str"" + Config.MaxLines;
  Util.debug(""String_Node_Str"" + sql);
  ResultSet res;
  List<DataEntry> results=new ArrayList<DataEntry>();
  JDCConnection conn=DataManager.getConnection();
  Statement stmnt=null;
  try {
    stmnt=conn.createStatement();
    res=stmnt.executeQuery(sql);
    Util.debug(""String_Node_Str"");
    while (res.next())     results.add(DataManager.createEntryFromRes(res));
    if (dir == SearchDir.ASC)     Collections.reverse(results);
  }
 catch (  Exception ex) {
    Util.severe(""String_Node_Str"" + ex);
    ex.printStackTrace();
    callBack.error(SearchError.MYSQL_ERROR,""String_Node_Str"" + ex);
    return;
  }
 finally {
    try {
      if (stmnt != null)       stmnt.close();
      conn.close();
    }
 catch (    SQLException ex) {
      Util.severe(""String_Node_Str"" + ex);
      callBack.error(SearchError.MYSQL_ERROR,""String_Node_Str"" + ex);
    }
  }
  Util.debug(results.size() + ""String_Node_Str"");
  callBack.results=results;
  callBack.execute();
  Util.debug(""String_Node_Str"");
}","/** 
 * Run the search query
 */
@Override public void run(){
  Util.debug(""String_Node_Str"");
  String sql=""String_Node_Str"" + Config.DbHawkEyeTable + ""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  Util.debug(""String_Node_Str"");
  if (parser.players.size() >= 1) {
    List<Integer> pids=new ArrayList<Integer>();
    List<Integer> npids=new ArrayList<Integer>();
    for (    String player : parser.players) {
      for (      Map.Entry<String,Integer> entry : DataManager.dbPlayers.entrySet()) {
        if (entry.getKey().toLowerCase().contains(player.toLowerCase()))         pids.add(entry.getValue());
 else         if (entry.getKey().toLowerCase().contains(player.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase()))         npids.add(entry.getValue());
      }
    }
    if (pids.size() > 0)     args.add(""String_Node_Str"" + Util.join(pids,""String_Node_Str"") + ""String_Node_Str"");
    if (npids.size() > 0)     args.add(""String_Node_Str"" + Util.join(npids,""String_Node_Str"") + ""String_Node_Str"");
    if (npids.size() + pids.size() < 1) {
      callBack.error(SearchError.NO_PLAYERS,""String_Node_Str"");
      return;
    }
  }
  Util.debug(""String_Node_Str"");
  if (parser.worlds != null) {
    List<Integer> wids=new ArrayList<Integer>();
    List<Integer> nwids=new ArrayList<Integer>();
    for (    String world : parser.worlds) {
      for (      Map.Entry<String,Integer> entry : DataManager.dbWorlds.entrySet()) {
        if (entry.getKey().toLowerCase().contains(world.toLowerCase()))         wids.add(entry.getValue());
 else         if (entry.getKey().toLowerCase().contains(world.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase()))         nwids.add(entry.getValue());
      }
    }
    if (wids.size() > 0)     args.add(""String_Node_Str"" + Util.join(wids,""String_Node_Str"") + ""String_Node_Str"");
    if (nwids.size() > 0)     args.add(""String_Node_Str"" + Util.join(nwids,""String_Node_Str"") + ""String_Node_Str"");
    if (nwids.size() + wids.size() < 1) {
      callBack.error(SearchError.NO_WORLDS,""String_Node_Str"");
      return;
    }
  }
  Util.debug(""String_Node_Str"");
  if (parser.actions != null && parser.actions.size() > 0) {
    List<Integer> acs=new ArrayList<Integer>();
    for (    DataType act : parser.actions)     acs.add(act.getId());
    args.add(""String_Node_Str"" + Util.join(acs,""String_Node_Str"") + ""String_Node_Str"");
  }
  Util.debug(""String_Node_Str"");
  if (parser.dateFrom != null)   args.add(""String_Node_Str"" + parser.dateFrom + ""String_Node_Str"");
  if (parser.dateTo != null)   args.add(""String_Node_Str"" + parser.dateTo + ""String_Node_Str"");
  Util.debug(""String_Node_Str"");
  if (parser.minLoc != null) {
    args.add(""String_Node_Str"" + parser.minLoc.getX() + ""String_Node_Str""+ parser.maxLoc.getX()+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + parser.minLoc.getY() + ""String_Node_Str""+ parser.maxLoc.getY()+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + parser.minLoc.getZ() + ""String_Node_Str""+ parser.maxLoc.getZ()+ ""String_Node_Str"");
  }
 else   if (parser.loc != null) {
    args.add(""String_Node_Str"" + parser.loc.getX());
    args.add(""String_Node_Str"" + parser.loc.getY());
    args.add(""String_Node_Str"" + parser.loc.getZ());
  }
  Util.debug(""String_Node_Str"");
  if (parser.filters != null) {
    for (int i=0; i < parser.filters.length; i++)     parser.filters[i]=""String_Node_Str"" + parser.filters[i] + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(parser.filters),""String_Node_Str""));
  }
  sql+=Util.join(args,""String_Node_Str"");
  Util.debug(""String_Node_Str"");
  sql+=""String_Node_Str"";
  Util.debug(""String_Node_Str"");
  if (Config.MaxLines > 0)   sql+=""String_Node_Str"" + Config.MaxLines;
  Util.debug(""String_Node_Str"" + sql);
  ResultSet res;
  List<DataEntry> results=new ArrayList<DataEntry>();
  JDCConnection conn=DataManager.getConnection();
  Statement stmnt=null;
  try {
    stmnt=conn.createStatement();
    res=stmnt.executeQuery(sql);
    Util.debug(""String_Node_Str"");
    while (res.next())     results.add(DataManager.createEntryFromRes(res));
    if (dir == SearchDir.ASC)     Collections.reverse(results);
  }
 catch (  Exception ex) {
    Util.severe(""String_Node_Str"" + ex);
    ex.printStackTrace();
    callBack.error(SearchError.MYSQL_ERROR,""String_Node_Str"" + ex);
    return;
  }
 finally {
    try {
      if (stmnt != null)       stmnt.close();
      conn.close();
    }
 catch (    SQLException ex) {
      Util.severe(""String_Node_Str"" + ex);
      callBack.error(SearchError.MYSQL_ERROR,""String_Node_Str"" + ex);
    }
  }
  Util.debug(results.size() + ""String_Node_Str"");
  callBack.results=results;
  callBack.execute();
  Util.debug(""String_Node_Str"");
}"
43085,"@Override public boolean execute(){
  SearchParser parser=null;
  try {
    if (args.size() != 0 && !Util.isInteger(args.get(0)))     throw new IllegalArgumentException(""String_Node_Str"");
    int integer;
    if (args.size() > 0)     integer=Integer.parseInt(args.get(0));
 else     integer=Config.DefaultHereRadius;
    if ((integer > Config.MaxRadius && Config.MaxRadius > 0) || integer < 0)     throw new IllegalArgumentException(""String_Node_Str"");
    parser=new SearchParser(player,integer);
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
    if (args.size() > 1)     parser.players=args.get(1).split(""String_Node_Str"");
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new SearchCallback(session),parser,SearchDir.DESC);
  return true;
}","@Override public boolean execute(){
  SearchParser parser=null;
  try {
    if (args.size() != 0 && !Util.isInteger(args.get(0)))     throw new IllegalArgumentException(""String_Node_Str"");
    int integer;
    if (args.size() > 0)     integer=Integer.parseInt(args.get(0));
 else     integer=Config.DefaultHereRadius;
    if ((integer > Config.MaxRadius && Config.MaxRadius > 0) || integer < 0)     throw new IllegalArgumentException(""String_Node_Str"");
    parser=new SearchParser(player,integer);
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
    if (args.size() > 1)     for (    String p : args.get(1).split(""String_Node_Str""))     parser.players.add(p);
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new SearchCallback(session),parser,SearchDir.DESC);
  return true;
}"
43086,"public void onBlockFromTo(BlockFromToEvent event){
  if (event.isCancelled())   return;
  List<Integer> fluidBlocks=Arrays.asList(0,27,28,31,32,37,38,39,40,50,51,55,59,66,69,70,75,76,78,93,94);
  Location loc=event.getToBlock().getLocation();
  BlockState from=event.getBlock().getState();
  BlockState to=event.getToBlock().getState();
  MaterialData data=from.getData();
  if (from.getTypeId() == 10 || from.getTypeId() == 11) {
  }
 else   if (from.getTypeId() == 8 || from.getTypeId() == 9) {
    if (fluidBlocks.contains(to.getTypeId())) {
      data.setData((byte)(from.getRawData() + 1));
      from.setData(data);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,to,from));
    }
    BlockState lower=event.getToBlock().getRelative(BlockFace.DOWN).getState();
    if (lower.getTypeId() == 10 || lower.getTypeId() == 11) {
      from.setTypeId(lower.getData().getData() == 0 ? 49 : 4);
      loc.setY(loc.getY() - 1);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,lower,from));
    }
  }
}","public void onBlockFromTo(BlockFromToEvent event){
  if (event.isCancelled())   return;
  List<Integer> fluidBlocks=Arrays.asList(0,27,28,31,32,37,38,39,40,50,51,55,59,66,69,70,75,76,78,93,94);
  Location loc=event.getToBlock().getLocation();
  BlockState from=event.getBlock().getState();
  BlockState to=event.getToBlock().getState();
  MaterialData data=from.getData();
  if (from.getTypeId() == 10 || from.getTypeId() == 11) {
    if (fluidBlocks.contains(to.getTypeId())) {
      data.setData((byte)(from.getRawData() + 1));
      from.setData(data);
    }
 else     if (to.getTypeId() == 8 || to.getTypeId() == 9) {
      from.setTypeId(event.getFace() == BlockFace.DOWN ? 10 : 4);
      data.setData((byte)0);
      from.setData(data);
    }
    DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.LAVA_FLOW,loc,to,from));
  }
 else   if (from.getTypeId() == 8 || from.getTypeId() == 9) {
    if (fluidBlocks.contains(to.getTypeId())) {
      data.setData((byte)(from.getRawData() + 1));
      from.setData(data);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,to,from));
    }
    BlockState lower=event.getToBlock().getRelative(BlockFace.DOWN).getState();
    if (lower.getTypeId() == 10 || lower.getTypeId() == 11) {
      from.setTypeId(lower.getData().getData() == 0 ? 49 : 4);
      loc.setY(loc.getY() - 1);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,lower,from));
    }
  }
}"
43087,"public boolean execute(){
  if (session.doingRollback()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    parser.loc=null;
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new RebuildCallback(session),parser,SearchDir.DESC);
  return true;
}","public boolean execute(){
  if (session.doingRollback()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    parser.loc=null;
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new RebuildCallback(session),parser,SearchDir.ASC);
  return true;
}"
43088,"@Override public boolean rebuild(Block block){
  if (data == null)   return false;
 else   BlockUtil.setBlockString(block,data);
  return true;
}","@Override public boolean rebuild(Block block){
  if (data == null)   return false;
 else   block.setTypeId(0);
  return true;
}"
43089,"public void onStructureGrow(StructureGrowEvent event){
  if (event.isCancelled())   return;
  DataType type=DataType.TREE_GROW;
  if (event.getSpecies().name().toLowerCase().contains(""String_Node_Str""))   type=DataType.MUSHROOM_GROW;
  for (  BlockState block : event.getBlocks()) {
    Location loc=new Location(event.getWorld(),block.getX(),block.getY(),block.getZ());
    if (event.getPlayer() != null) {
      DataManager.addEntry(new BlockChangeEntry(event.getPlayer(),type,loc,""String_Node_Str"",BlockUtil.getBlockString(block)));
    }
 else {
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",type,loc,""String_Node_Str"",BlockUtil.getBlockString(block)));
    }
  }
}","public void onStructureGrow(StructureGrowEvent event){
  if (event.isCancelled())   return;
  DataType type=DataType.TREE_GROW;
  if (event.getSpecies().name().toLowerCase().contains(""String_Node_Str""))   type=DataType.MUSHROOM_GROW;
  for (  BlockState block : event.getBlocks()) {
    if (block.getType() == Material.MYCEL || block.getType() == Material.DIRT || block.getType() == Material.GRASS)     continue;
    Location loc=new Location(event.getWorld(),block.getX(),block.getY(),block.getZ());
    if (event.getPlayer() != null) {
      DataManager.addEntry(new BlockChangeEntry(event.getPlayer(),type,loc,""String_Node_Str"",BlockUtil.getBlockString(block)));
    }
 else {
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",type,loc,""String_Node_Str"",BlockUtil.getBlockString(block)));
    }
  }
}"
43090,"public void onBlockFromTo(BlockFromToEvent event){
  if (event.isCancelled())   return;
  List<Integer> fluidBlocks=Arrays.asList(0,27,28,31,32,37,38,39,40,50,51,55,59,66,69,70,75,76,78,93,94);
  Location loc=event.getToBlock().getLocation();
  BlockState from=event.getBlock().getState();
  BlockState to=event.getToBlock().getState();
  MaterialData data=from.getData();
  if (from.getTypeId() == 10 || from.getTypeId() == 11) {
    if (fluidBlocks.contains(to.getTypeId())) {
      data.setData((byte)(from.getRawData() + 1));
      from.setData(data);
    }
 else     if (to.getTypeId() == 8 || to.getTypeId() == 9) {
      from.setTypeId(event.getFace() == BlockFace.DOWN ? 10 : 4);
      data.setData((byte)0);
      from.setData(data);
    }
    DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.LAVA_FLOW,loc,to,from));
  }
 else   if (from.getTypeId() == 8 || from.getTypeId() == 9) {
    if (fluidBlocks.contains(to.getTypeId())) {
      data.setData((byte)(from.getRawData() + 1));
      from.setData(data);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,to,from));
    }
    BlockState lower=event.getToBlock().getRelative(BlockFace.DOWN).getState();
    if (lower.getTypeId() == 10 || lower.getTypeId() == 11) {
      from.setTypeId(lower.getData().getData() == 0 ? 49 : 4);
      loc.setY(loc.getY() - 1);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,lower,from));
    }
  }
}","public void onBlockFromTo(BlockFromToEvent event){
  if (event.isCancelled())   return;
  List<Integer> fluidBlocks=Arrays.asList(0,27,28,31,32,37,38,39,40,50,51,55,59,66,69,70,75,76,78,93,94);
  Location loc=event.getToBlock().getLocation();
  BlockState from=event.getBlock().getState();
  BlockState to=event.getToBlock().getState();
  MaterialData data=from.getData();
  if (from.getTypeId() == 10 || from.getTypeId() == 11) {
  }
 else   if (from.getTypeId() == 8 || from.getTypeId() == 9) {
    if (fluidBlocks.contains(to.getTypeId())) {
      data.setData((byte)(from.getRawData() + 1));
      from.setData(data);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,to,from));
    }
    BlockState lower=event.getToBlock().getRelative(BlockFace.DOWN).getState();
    if (lower.getTypeId() == 10 || lower.getTypeId() == 11) {
      from.setTypeId(lower.getData().getData() == 0 ? 49 : 4);
      loc.setY(loc.getY() - 1);
      DataManager.addEntry(new BlockChangeEntry(""String_Node_Str"",DataType.WATER_FLOW,loc,lower,from));
    }
  }
}"
43091,"/** 
 * Empty the   {@link DataEntry} queue into the database
 */
public void run(){
  if (queue.isEmpty())   return;
  JDCConnection conn=getConnection();
  PreparedStatement stmnt=null;
  try {
    while (!queue.isEmpty()) {
      DataEntry entry=queue.poll();
      if (!dbPlayers.containsKey(entry.getPlayer()))       if (!addPlayer(entry.getPlayer()))       continue;
      if (!dbWorlds.containsKey(entry.getWorld()))       if (!addWorld(entry.getWorld()))       continue;
      if (entry.getDataId() > 0) {
        stmnt=conn.prepareStatement(""String_Node_Str"" + Config.DbHawkEyeTable + ""String_Node_Str"");
        stmnt.setInt(10,entry.getDataId());
      }
 else       stmnt=conn.prepareStatement(""String_Node_Str"" + Config.DbHawkEyeTable + ""String_Node_Str"");
      stmnt.setString(1,entry.getDate());
      stmnt.setInt(2,dbPlayers.get(entry.getPlayer()));
      stmnt.setInt(3,entry.getType().getId());
      stmnt.setInt(4,dbWorlds.get(entry.getWorld()));
      stmnt.setDouble(5,entry.getX());
      stmnt.setDouble(6,entry.getY());
      stmnt.setDouble(7,entry.getZ());
      stmnt.setString(8,entry.getSqlData());
      stmnt.setString(9,entry.getPlugin());
      stmnt.executeUpdate();
    }
  }
 catch (  SQLException ex) {
    Util.severe(""String_Node_Str"" + ex);
  }
 finally {
    try {
      if (stmnt != null)       stmnt.close();
      conn.close();
    }
 catch (    SQLException ex) {
      Util.severe(""String_Node_Str"" + ex);
    }
  }
}","/** 
 * Empty the   {@link DataEntry} queue into the database
 */
public void run(){
  if (queue.isEmpty())   return;
  JDCConnection conn=getConnection();
  PreparedStatement stmnt=null;
  try {
    while (!queue.isEmpty()) {
      DataEntry entry=queue.poll();
      if (!dbPlayers.containsKey(entry.getPlayer()) && !addPlayer(entry.getPlayer()))       continue;
      if (!dbWorlds.containsKey(entry.getWorld()) && !addWorld(entry.getWorld()))       continue;
      if (entry.getPlayer() == null || dbPlayers.get(entry.getPlayer()) == null)       continue;
      if (entry.getDataId() > 0) {
        stmnt=conn.prepareStatement(""String_Node_Str"" + Config.DbHawkEyeTable + ""String_Node_Str"");
        stmnt.setInt(10,entry.getDataId());
      }
 else       stmnt=conn.prepareStatement(""String_Node_Str"" + Config.DbHawkEyeTable + ""String_Node_Str"");
      stmnt.setString(1,entry.getDate());
      stmnt.setInt(2,dbPlayers.get(entry.getPlayer()));
      stmnt.setInt(3,entry.getType().getId());
      stmnt.setInt(4,dbWorlds.get(entry.getWorld()));
      stmnt.setDouble(5,entry.getX());
      stmnt.setDouble(6,entry.getY());
      stmnt.setDouble(7,entry.getZ());
      stmnt.setString(8,entry.getSqlData());
      stmnt.setString(9,entry.getPlugin());
      stmnt.executeUpdate();
    }
  }
 catch (  SQLException ex) {
    Util.severe(""String_Node_Str"" + ex);
  }
 finally {
    try {
      if (stmnt != null)       stmnt.close();
      conn.close();
    }
 catch (    SQLException ex) {
      Util.severe(""String_Node_Str"" + ex);
    }
  }
}"
43092,"/** 
 * Extracts the sign data from a block
 * @param block
 */
private void interpretSignBlock(Block block){
  Sign sign=(Sign)block;
  org.bukkit.material.Sign signData=((org.bukkit.material.Sign)sign.getData());
  if (signData.isWallSign())   this.facing=signData.getAttachedFace();
 else   this.facing=signData.getFacing();
  this.wallSign=signData.isWallSign();
  this.lines=sign.getLines();
}","/** 
 * Extracts the sign data from a block
 * @param block
 */
private void interpretSignBlock(Block block){
  if (!(block instanceof Sign))   return;
  Sign sign=(Sign)block;
  org.bukkit.material.Sign signData=((org.bukkit.material.Sign)sign.getData());
  if (signData.isWallSign())   this.facing=signData.getAttachedFace();
 else   this.facing=signData.getFacing();
  this.wallSign=signData.isWallSign();
  this.lines=sign.getLines();
}"
43093,"/** 
 * Checks if any updates are available for HawkEye Outputs console warning if updates are needed
 */
private void versionCheck(){
  if (!Config.CheckUpdates) {
    Util.info(""String_Node_Str"");
    return;
  }
  Util.info(""String_Node_Str"");
  try {
    int updateVer;
    int curVer;
    int updateHot=0;
    int curHot=0;
    int updateBuild;
    int curBuild;
    String info;
    URLConnection yc=new URL(""String_Node_Str"").openConnection();
    BufferedReader in=new BufferedReader(new InputStreamReader(yc.getInputStream()));
    String updateVersion=in.readLine().replace(""String_Node_Str"",""String_Node_Str"");
    if (Character.isLetter(updateVersion.charAt(updateVersion.length() - 1))) {
      updateHot=Character.getNumericValue(updateVersion.charAt(updateVersion.length() - 1));
      updateVer=Integer.parseInt(updateVersion.substring(0,updateVersion.length() - 1));
    }
 else     updateVer=Integer.parseInt(updateVersion);
    if (Character.isLetter(version.charAt(version.length() - 1))) {
      String tversion=version.replace(""String_Node_Str"",""String_Node_Str"");
      curHot=Character.getNumericValue(tversion.charAt(tversion.length() - 1));
      curVer=Integer.parseInt(tversion.substring(0,tversion.length() - 1));
    }
 else     curVer=Integer.parseInt(version.replace(""String_Node_Str"",""String_Node_Str""));
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(server.getVersion());
    if (!matcher.find() || matcher.group(1) == null)     throw new Exception();
    curBuild=Integer.parseInt(matcher.group(1));
    updateBuild=Integer.parseInt(in.readLine());
    info=in.readLine();
    if (updateVer > curVer || updateVer == curVer && updateHot > curHot) {
      Util.warning(""String_Node_Str"" + updateVersion);
      if (updateBuild > curBuild)       Util.warning(""String_Node_Str"" + curBuild + ""String_Node_Str""+ updateBuild+ ""String_Node_Str"");
 else       Util.warning(""String_Node_Str"");
      Util.warning(""String_Node_Str"" + info);
    }
 else     Util.info(""String_Node_Str"");
    in.close();
  }
 catch (  Exception e) {
    Util.warning(""String_Node_Str"");
    if (Config.Debug)     e.printStackTrace();
  }
}","/** 
 * Checks if any updates are available for HawkEye Outputs console warning if updates are needed
 */
private void versionCheck(){
  if (!Config.CheckUpdates) {
    Util.warning(""String_Node_Str"");
    return;
  }
  Util.info(""String_Node_Str"");
  try {
    int updateVer;
    int curVer;
    int updateHot=0;
    int curHot=0;
    int updateBuild;
    int curBuild;
    String info;
    URLConnection yc=new URL(""String_Node_Str"").openConnection();
    BufferedReader in=new BufferedReader(new InputStreamReader(yc.getInputStream()));
    String updateVersion=in.readLine().replace(""String_Node_Str"",""String_Node_Str"");
    if (Character.isLetter(updateVersion.charAt(updateVersion.length() - 1))) {
      updateHot=Character.getNumericValue(updateVersion.charAt(updateVersion.length() - 1));
      updateVer=Integer.parseInt(updateVersion.substring(0,updateVersion.length() - 1));
    }
 else     updateVer=Integer.parseInt(updateVersion);
    if (Character.isLetter(version.charAt(version.length() - 1))) {
      String tversion=version.replace(""String_Node_Str"",""String_Node_Str"");
      curHot=Character.getNumericValue(tversion.charAt(tversion.length() - 1));
      curVer=Integer.parseInt(tversion.substring(0,tversion.length() - 1));
    }
 else     curVer=Integer.parseInt(version.replace(""String_Node_Str"",""String_Node_Str""));
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(server.getVersion());
    if (!matcher.find() || matcher.group(1) == null)     throw new Exception();
    curBuild=Integer.parseInt(matcher.group(1));
    updateBuild=Integer.parseInt(in.readLine());
    info=in.readLine();
    if (updateVer > curVer || updateVer == curVer && updateHot > curHot) {
      Util.warning(""String_Node_Str"" + updateVersion);
      if (updateBuild > curBuild)       Util.warning(""String_Node_Str"" + curBuild + ""String_Node_Str""+ updateBuild+ ""String_Node_Str"");
 else       Util.warning(""String_Node_Str"");
      Util.warning(""String_Node_Str"" + info);
    }
 else     Util.info(""String_Node_Str"");
    in.close();
  }
 catch (  Exception e) {
    Util.warning(""String_Node_Str"");
    if (Config.Debug)     e.printStackTrace();
  }
}"
43094,"/** 
 * Loads the config from file and validates the data
 * @param plugin
 */
public Config(HawkEye plugin){
  config=plugin.getConfiguration();
  List<String> keys=config.getKeys(null);
  if (keys.size() == 0) {
    Util.info(""String_Node_Str"");
    keys=new ArrayList<String>();
  }
 else {
  }
  for (  DataType type : DataType.values()) {
    if (config.getProperty(getNode(type)) == null)     config.setProperty(getNode(type),true);
  }
  if (config.getProperty(""String_Node_Str"") == null)   config.setProperty(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  if (config.getProperty(""String_Node_Str"") == null)   config.setProperty(""String_Node_Str"",Arrays.asList(new Integer[]{97,98}));
  config.setProperty(""String_Node_Str"",plugin.version);
  CommandFilter=config.getStringList(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  BlockFilter=config.getIntList(""String_Node_Str"",Arrays.asList(new Integer[]{97,98}));
  MaxLines=config.getInt(""String_Node_Str"",0);
  MaxRadius=config.getInt(""String_Node_Str"",0);
  DefaultHereRadius=config.getInt(""String_Node_Str"",5);
  ToolBlock=config.getString(""String_Node_Str"",""String_Node_Str"");
  DefaultToolCommand=config.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  CleanseAge=config.getString(""String_Node_Str"",""String_Node_Str"");
  CleanseAge=config.getString(""String_Node_Str"",""String_Node_Str"");
  CheckUpdates=config.getBoolean(""String_Node_Str"",true);
  Debug=config.getBoolean(""String_Node_Str"",false);
  LogIpAddresses=config.getBoolean(""String_Node_Str"",true);
  DeleteDataOnRollback=config.getBoolean(""String_Node_Str"",false);
  LogDeathDrops=config.getBoolean(""String_Node_Str"",false);
  DbUser=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbPassword=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbUrl=""String_Node_Str"" + config.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ config.getInt(""String_Node_Str"",3306)+ ""String_Node_Str""+ config.getString(""String_Node_Str"",""String_Node_Str"");
  DbDatabase=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbHawkEyeTable=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbPlayerTable=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbWorldTable=config.getString(""String_Node_Str"",""String_Node_Str"");
  PoolSize=config.getInt(""String_Node_Str"",10);
  if (!config.save())   Util.severe(""String_Node_Str"");
}","/** 
 * Loads the config from file and validates the data
 * @param plugin
 */
public Config(HawkEye plugin){
  config=plugin.getConfiguration();
  List<String> keys=config.getKeys(null);
  if (keys.size() == 0) {
    Util.info(""String_Node_Str"");
    keys=new ArrayList<String>();
  }
 else {
  }
  for (  DataType type : DataType.values()) {
    if (config.getProperty(getNode(type)) == null)     config.setProperty(getNode(type),true);
  }
  if (config.getProperty(""String_Node_Str"") == null)   config.setProperty(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  if (config.getProperty(""String_Node_Str"") == null)   config.setProperty(""String_Node_Str"",Arrays.asList(new Integer[]{97,98}));
  config.setProperty(""String_Node_Str"",plugin.version);
  CommandFilter=config.getStringList(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  BlockFilter=config.getIntList(""String_Node_Str"",Arrays.asList(new Integer[]{97,98}));
  MaxLines=config.getInt(""String_Node_Str"",0);
  MaxRadius=config.getInt(""String_Node_Str"",0);
  DefaultHereRadius=config.getInt(""String_Node_Str"",5);
  ToolBlock=config.getString(""String_Node_Str"",""String_Node_Str"");
  DefaultToolCommand=config.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  CleanseAge=config.getString(""String_Node_Str"",""String_Node_Str"");
  CleansePeriod=config.getString(""String_Node_Str"",""String_Node_Str"");
  CheckUpdates=config.getBoolean(""String_Node_Str"",true);
  Debug=config.getBoolean(""String_Node_Str"",false);
  LogIpAddresses=config.getBoolean(""String_Node_Str"",true);
  DeleteDataOnRollback=config.getBoolean(""String_Node_Str"",false);
  LogDeathDrops=config.getBoolean(""String_Node_Str"",false);
  DbUser=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbPassword=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbUrl=""String_Node_Str"" + config.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ config.getInt(""String_Node_Str"",3306)+ ""String_Node_Str""+ config.getString(""String_Node_Str"",""String_Node_Str"");
  DbDatabase=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbHawkEyeTable=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbPlayerTable=config.getString(""String_Node_Str"",""String_Node_Str"");
  DbWorldTable=config.getString(""String_Node_Str"",""String_Node_Str"");
  PoolSize=config.getInt(""String_Node_Str"",10);
  if (!config.save())   Util.severe(""String_Node_Str"");
}"
43095,"/** 
 * Enables the HawkEye tool
 * @param session
 * @param player
 */
public static void enableTool(PlayerSession session,Player player){
  Inventory inv=player.getInventory();
  session.setUsingTool(true);
  ItemStack stack=BlockUtil.itemStringToStack(Config.ToolBlock,1);
  if (!inv.contains(stack) && Config.GiveTool) {
    int first=inv.firstEmpty();
    if (first == -1)     player.getWorld().dropItem(player.getLocation(),stack);
 else     inv.setItem(first,stack);
  }
  if (player.getItemInHand().getType() != Material.LOG && inv.first(Material.LOG) != -1) {
    ItemStack back=player.getItemInHand().clone();
    int slot=inv.first(Material.LOG);
    player.setItemInHand(inv.getItem(inv.first(Material.LOG)));
    if (back.getAmount() == 0)     inv.clear(slot);
 else     inv.setItem(slot,back);
  }
  Util.sendMessage(player,""String_Node_Str"");
}","/** 
 * Enables the HawkEye tool
 * @param session
 * @param player
 */
public static void enableTool(PlayerSession session,Player player){
  Inventory inv=player.getInventory();
  session.setUsingTool(true);
  ItemStack stack=BlockUtil.itemStringToStack(Config.ToolBlock,1);
  if (!inv.contains(stack) && Config.GiveTool) {
    int first=inv.firstEmpty();
    if (first == -1)     player.getWorld().dropItem(player.getLocation(),stack);
 else     inv.setItem(first,stack);
  }
  int first=inv.first(BlockUtil.getIdFromString(Config.ToolBlock));
  if (!BlockUtil.getItemString(player.getItemInHand()).equals(Config.ToolBlock) && first != -1) {
    ItemStack back=player.getItemInHand().clone();
    player.setItemInHand(inv.getItem(first));
    if (back.getAmount() == 0)     inv.clear(first);
 else     inv.setItem(first,back);
  }
  Util.sendMessage(player,""String_Node_Str"");
}"
43096,"/** 
 * Checks if any updates are available for HawkEye Outputs console warning if updates are needed
 */
private void versionCheck(){
  if (!Config.CheckUpdates) {
    Util.info(""String_Node_Str"");
    return;
  }
  Util.info(""String_Node_Str"");
  try {
    int updateVer;
    int curVer;
    int updateHot=0;
    int curHot=0;
    int updateBuild;
    int curBuild;
    String info;
    URLConnection yc=new URL(""String_Node_Str"").openConnection();
    BufferedReader in=new BufferedReader(new InputStreamReader(yc.getInputStream()));
    String updateVersion=in.readLine().replace(""String_Node_Str"",""String_Node_Str"");
    if (Character.isLetter(updateVersion.charAt(updateVersion.length() - 1))) {
      updateHot=Character.getNumericValue(updateVersion.charAt(updateVersion.length() - 1));
      updateVer=Integer.parseInt(updateVersion.substring(0,updateVersion.length() - 2));
    }
 else     updateVer=Integer.parseInt(updateVersion);
    if (Character.isLetter(version.charAt(version.length() - 1))) {
      curHot=Character.getNumericValue(version.charAt(version.length() - 1));
      curVer=Integer.parseInt(version.substring(0,version.length() - 2));
    }
 else     curVer=Integer.parseInt(version);
    curVer=Integer.parseInt(version.replace(""String_Node_Str"",""String_Node_Str""));
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(server.getVersion());
    if (!matcher.find() || matcher.group(1) == null)     throw new Exception();
    curBuild=Integer.parseInt(matcher.group(1));
    updateBuild=Integer.parseInt(in.readLine());
    info=in.readLine();
    if (updateVer > curVer || updateVer == curVer && updateHot > curHot) {
      Util.warning(""String_Node_Str"" + updateVersion);
      if (updateBuild > curBuild)       Util.warning(""String_Node_Str"" + curBuild + ""String_Node_Str""+ updateBuild+ ""String_Node_Str"");
 else       Util.warning(""String_Node_Str"");
      Util.warning(""String_Node_Str"" + info);
    }
 else     Util.info(""String_Node_Str"");
    in.close();
  }
 catch (  Exception e) {
    Util.warning(""String_Node_Str"");
  }
}","/** 
 * Checks if any updates are available for HawkEye Outputs console warning if updates are needed
 */
private void versionCheck(){
  if (!Config.CheckUpdates) {
    Util.info(""String_Node_Str"");
    return;
  }
  Util.info(""String_Node_Str"");
  try {
    int updateVer;
    int curVer;
    int updateHot=0;
    int curHot=0;
    int updateBuild;
    int curBuild;
    String info;
    URLConnection yc=new URL(""String_Node_Str"").openConnection();
    BufferedReader in=new BufferedReader(new InputStreamReader(yc.getInputStream()));
    String updateVersion=in.readLine().replace(""String_Node_Str"",""String_Node_Str"");
    if (Character.isLetter(updateVersion.charAt(updateVersion.length() - 1))) {
      updateHot=Character.getNumericValue(updateVersion.charAt(updateVersion.length() - 1));
      updateVer=Integer.parseInt(updateVersion.substring(0,updateVersion.length() - 1));
    }
 else     updateVer=Integer.parseInt(updateVersion);
    if (Character.isLetter(version.charAt(version.length() - 1))) {
      String tversion=version.replace(""String_Node_Str"",""String_Node_Str"");
      curHot=Character.getNumericValue(tversion.charAt(tversion.length() - 1));
      curVer=Integer.parseInt(tversion.substring(0,tversion.length() - 1));
    }
 else     curVer=Integer.parseInt(version.replace(""String_Node_Str"",""String_Node_Str""));
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(server.getVersion());
    if (!matcher.find() || matcher.group(1) == null)     throw new Exception();
    curBuild=Integer.parseInt(matcher.group(1));
    updateBuild=Integer.parseInt(in.readLine());
    info=in.readLine();
    if (updateVer > curVer || updateVer == curVer && updateHot > curHot) {
      Util.warning(""String_Node_Str"" + updateVersion);
      if (updateBuild > curBuild)       Util.warning(""String_Node_Str"" + curBuild + ""String_Node_Str""+ updateBuild+ ""String_Node_Str"");
 else       Util.warning(""String_Node_Str"");
      Util.warning(""String_Node_Str"" + info);
    }
 else     Util.info(""String_Node_Str"");
    in.close();
  }
 catch (  Exception e) {
    Util.warning(""String_Node_Str"");
    if (Config.Debug)     e.printStackTrace();
  }
}"
43097,"public void checkInventoryOpen(Player player,Block block){
  if (!(block instanceof ContainerBlock))   return;
  ContainerBlock container=(ContainerBlock)block;
  accessList.add(new ContainerAccess(container,player,InventoryUtil.compressInventory(InventoryUtil.getContainerContents(container)),block.getLocation()));
}","public void checkInventoryOpen(Player player,Block block){
  if (!(block.getState() instanceof ContainerBlock))   return;
  ContainerBlock container=(ContainerBlock)(block.getState());
  accessList.add(new ContainerAccess(container,player,InventoryUtil.compressInventory(InventoryUtil.getContainerContents(container)),block.getLocation()));
}"
43098,"public void checkInventoryClose(Player player){
  ContainerAccess access=null;
  for (  ContainerAccess acc : accessList) {
    if (acc.player == player)     access=acc;
  }
  if (access == null)   return;
  HashMap<String,Integer> after=InventoryUtil.compressInventory(InventoryUtil.getContainerContents(access.container));
  String diff=InventoryUtil.createDifferenceString(access.beforeInv,after);
  DataManager.addEntry(new ContainerEntry(player,access.loc,diff));
  accessList.remove(access);
}","public void checkInventoryClose(Player player){
  ContainerAccess access=null;
  for (  ContainerAccess acc : accessList) {
    if (acc.player == player)     access=acc;
  }
  if (access == null)   return;
  HashMap<String,Integer> after=InventoryUtil.compressInventory(InventoryUtil.getContainerContents(access.container));
  String diff=InventoryUtil.createDifferenceString(access.beforeInv,after);
  Util.info(diff);
  if (diff.length() > 1)   DataManager.addEntry(new ContainerEntry(player,access.loc,diff));
  accessList.remove(access);
}"
43099,"/** 
 * Registers event listeners
 * @param pm PluginManager
 */
private void registerListeners(PluginManager pm){
  if (Config.isLogged(DataType.BLOCK_BREAK))   pm.registerEvent(Type.BLOCK_BREAK,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_PLACE))   pm.registerEvent(Type.BLOCK_PLACE,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_BURN))   pm.registerEvent(Type.BLOCK_BURN,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.LEAF_DECAY))   pm.registerEvent(Type.LEAVES_DECAY,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_FORM))   pm.registerEvent(Type.BLOCK_FORM,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.LAVA_FLOW) || Config.isLogged(DataType.WATER_FLOW))   pm.registerEvent(Type.BLOCK_FROMTO,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.SIGN_PLACE))   pm.registerEvent(Type.SIGN_CHANGE,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_FADE))   pm.registerEvent(Type.BLOCK_FADE,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.COMMAND))   pm.registerEvent(Type.PLAYER_COMMAND_PREPROCESS,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.CHAT))   pm.registerEvent(Type.PLAYER_CHAT,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.JOIN))   pm.registerEvent(Type.PLAYER_JOIN,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.QUIT))   pm.registerEvent(Type.PLAYER_QUIT,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.TELEPORT))   pm.registerEvent(Type.PLAYER_TELEPORT,monitorPlayerListener,Event.Priority.Monitor,this);
  pm.registerEvent(Type.PLAYER_INTERACT,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.ITEM_DROP))   pm.registerEvent(Type.PLAYER_DROP_ITEM,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.ITEM_PICKUP))   pm.registerEvent(Type.PLAYER_PICKUP_ITEM,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.PVP_DEATH) || Config.isLogged(DataType.MOB_DEATH) || Config.isLogged(DataType.OTHER_DEATH))   pm.registerEvent(Type.ENTITY_DEATH,monitorEntityListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.EXPLOSION))   pm.registerEvent(Type.ENTITY_EXPLODE,monitorEntityListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.PAINTING_BREAK))   pm.registerEvent(Type.PAINTING_BREAK,monitorEntityListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.PAINTING_BREAK))   pm.registerEvent(Type.PAINTING_PLACE,monitorEntityListener,Event.Priority.Monitor,this);
  pm.registerEvent(Type.BLOCK_PLACE,toolBlockListener,Event.Priority.Highest,this);
  pm.registerEvent(Type.PLAYER_INTERACT,toolPlayerListener,Event.Priority.Highest,this);
}","/** 
 * Registers event listeners
 * @param pm PluginManager
 */
private void registerListeners(PluginManager pm){
  if (Config.isLogged(DataType.BLOCK_BREAK))   pm.registerEvent(Type.BLOCK_BREAK,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_PLACE))   pm.registerEvent(Type.BLOCK_PLACE,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_BURN))   pm.registerEvent(Type.BLOCK_BURN,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.LEAF_DECAY))   pm.registerEvent(Type.LEAVES_DECAY,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_FORM))   pm.registerEvent(Type.BLOCK_FORM,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.LAVA_FLOW) || Config.isLogged(DataType.WATER_FLOW))   pm.registerEvent(Type.BLOCK_FROMTO,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.SIGN_PLACE))   pm.registerEvent(Type.SIGN_CHANGE,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.BLOCK_FADE))   pm.registerEvent(Type.BLOCK_FADE,monitorBlockListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.COMMAND))   pm.registerEvent(Type.PLAYER_COMMAND_PREPROCESS,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.CHAT))   pm.registerEvent(Type.PLAYER_CHAT,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.JOIN))   pm.registerEvent(Type.PLAYER_JOIN,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.QUIT))   pm.registerEvent(Type.PLAYER_QUIT,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.TELEPORT))   pm.registerEvent(Type.PLAYER_TELEPORT,monitorPlayerListener,Event.Priority.Monitor,this);
  pm.registerEvent(Type.PLAYER_INTERACT,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.ITEM_DROP))   pm.registerEvent(Type.PLAYER_DROP_ITEM,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.ITEM_PICKUP))   pm.registerEvent(Type.PLAYER_PICKUP_ITEM,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.CONTAINER_TRANSACTION))   pm.registerEvent(Type.PLAYER_MOVE,monitorPlayerListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.PVP_DEATH) || Config.isLogged(DataType.MOB_DEATH) || Config.isLogged(DataType.OTHER_DEATH))   pm.registerEvent(Type.ENTITY_DEATH,monitorEntityListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.EXPLOSION))   pm.registerEvent(Type.ENTITY_EXPLODE,monitorEntityListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.PAINTING_BREAK))   pm.registerEvent(Type.PAINTING_BREAK,monitorEntityListener,Event.Priority.Monitor,this);
  if (Config.isLogged(DataType.PAINTING_BREAK))   pm.registerEvent(Type.PAINTING_PLACE,monitorEntityListener,Event.Priority.Monitor,this);
  pm.registerEvent(Type.BLOCK_PLACE,toolBlockListener,Event.Priority.Highest,this);
  pm.registerEvent(Type.PLAYER_INTERACT,toolPlayerListener,Event.Priority.Highest,this);
}"
43100,"public SearchParser(Player player,List<String> args) throws IllegalArgumentException {
  this.player=player;
  for (  String arg : args) {
    String param=arg.substring(0,1).toLowerCase();
    if (!arg.substring(1,2).equals(""String_Node_Str""))     throw new IllegalArgumentException(""String_Node_Str"");
    String[] values=arg.substring(2).split(""String_Node_Str"");
    if (param.equals(""String_Node_Str""))     players=values;
 else     if (param.equals(""String_Node_Str""))     worlds=values;
 else     if (param.equals(""String_Node_Str""))     filters=values;
 else     if (param.equals(""String_Node_Str"")) {
      for (      String value : values) {
        DataType type=DataType.fromName(value);
        if (type == null)         throw new IllegalArgumentException(""String_Node_Str"" + value);
        if (!Permission.searchType(player,type.getConfigName()))         throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
        actions.add(type);
      }
    }
 else     if (param.equals(""String_Node_Str"")) {
      if (values[0].equalsIgnoreCase(""String_Node_Str""))       loc=player.getLocation().toVector();
 else {
        loc=new Vector();
        loc.setX(Integer.parseInt(values[0]));
        loc.setY(Integer.parseInt(values[1]));
        loc.setZ(Integer.parseInt(values[2]));
      }
    }
 else     if (param.equals(""String_Node_Str""))     radius=Integer.parseInt(values[0]);
 else     if (param.equals(""String_Node_Str"")) {
      int type=2;
      for (int i=0; i < arg.length(); i++) {
        String c=arg.substring(i,i + 1);
        if (!Util.isInteger(c)) {
          if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))           type=0;
          if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))           type=1;
        }
      }
      if (type == 0) {
        int weeks=0;
        int days=0;
        int hours=0;
        int mins=0;
        int secs=0;
        String nums=""String_Node_Str"";
        for (int i=0; i < values[0].length(); i++) {
          String c=values[0].substring(i,i + 1);
          if (Util.isInteger(c)) {
            nums+=c;
            continue;
          }
          int num=Integer.parseInt(nums);
          if (c.equals(""String_Node_Str""))           weeks=num;
 else           if (c.equals(""String_Node_Str""))           days=num;
 else           if (c.equals(""String_Node_Str""))           hours=num;
 else           if (c.equals(""String_Node_Str""))           mins=num;
 else           if (c.equals(""String_Node_Str""))           secs=num;
 else           throw new IllegalArgumentException(""String_Node_Str"" + c);
          nums=""String_Node_Str"";
        }
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.WEEK_OF_YEAR,-1 * weeks);
        cal.add(Calendar.DAY_OF_MONTH,-1 * days);
        cal.add(Calendar.HOUR,-1 * hours);
        cal.add(Calendar.MINUTE,-1 * mins);
        cal.add(Calendar.SECOND,-1 * secs);
        SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
        dateFrom=form.format(cal.getTime());
      }
 else       if (type == 1) {
        if (values.length == 1) {
          SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
          dateFrom=form.format(Calendar.getInstance().getTime()) + ""String_Node_Str"" + values[0];
        }
        if (values.length >= 2)         dateFrom=values[0] + ""String_Node_Str"" + values[1];
        if (values.length == 4)         dateTo=values[2] + ""String_Node_Str"" + values[3];
      }
 else       if (type == 2)       throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     throw new IllegalArgumentException(""String_Node_Str"" + param);
  }
  parseLocations();
}","public SearchParser(Player player,List<String> args) throws IllegalArgumentException {
  this.player=player;
  for (  String arg : args) {
    String param=arg.substring(0,1).toLowerCase();
    if (!arg.substring(1,2).equals(""String_Node_Str""))     throw new IllegalArgumentException(""String_Node_Str"");
    String[] values=arg.substring(2).split(""String_Node_Str"");
    if (param.equals(""String_Node_Str""))     players=values;
 else     if (param.equals(""String_Node_Str""))     worlds=values;
 else     if (param.equals(""String_Node_Str""))     filters=values;
 else     if (param.equals(""String_Node_Str"")) {
      for (      String value : values) {
        DataType type=DataType.fromName(value);
        if (type == null)         throw new IllegalArgumentException(""String_Node_Str"" + value);
        if (!Permission.searchType(player,type.getConfigName()))         throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
        actions.add(type);
      }
    }
 else     if (param.equals(""String_Node_Str"")) {
      if (values[0].equalsIgnoreCase(""String_Node_Str""))       loc=player.getLocation().toVector();
 else {
        loc=new Vector();
        loc.setX(Integer.parseInt(values[0]));
        loc.setY(Integer.parseInt(values[1]));
        loc.setZ(Integer.parseInt(values[2]));
      }
    }
 else     if (param.equals(""String_Node_Str"")) {
      if (!Util.isInteger(values[0]))       throw new IllegalArgumentException(""String_Node_Str"" + values[0]);
      radius=Integer.parseInt(values[0]);
    }
 else     if (param.equals(""String_Node_Str"")) {
      int type=2;
      for (int i=0; i < arg.length(); i++) {
        String c=arg.substring(i,i + 1);
        if (!Util.isInteger(c)) {
          if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))           type=0;
          if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))           type=1;
        }
      }
      if (type == 0) {
        int weeks=0;
        int days=0;
        int hours=0;
        int mins=0;
        int secs=0;
        String nums=""String_Node_Str"";
        for (int i=0; i < values[0].length(); i++) {
          String c=values[0].substring(i,i + 1);
          if (Util.isInteger(c)) {
            nums+=c;
            continue;
          }
          int num=Integer.parseInt(nums);
          if (c.equals(""String_Node_Str""))           weeks=num;
 else           if (c.equals(""String_Node_Str""))           days=num;
 else           if (c.equals(""String_Node_Str""))           hours=num;
 else           if (c.equals(""String_Node_Str""))           mins=num;
 else           if (c.equals(""String_Node_Str""))           secs=num;
 else           throw new IllegalArgumentException(""String_Node_Str"" + c);
          nums=""String_Node_Str"";
        }
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.WEEK_OF_YEAR,-1 * weeks);
        cal.add(Calendar.DAY_OF_MONTH,-1 * days);
        cal.add(Calendar.HOUR,-1 * hours);
        cal.add(Calendar.MINUTE,-1 * mins);
        cal.add(Calendar.SECOND,-1 * secs);
        SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
        dateFrom=form.format(cal.getTime());
      }
 else       if (type == 1) {
        if (values.length == 1) {
          SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
          dateFrom=form.format(Calendar.getInstance().getTime()) + ""String_Node_Str"" + values[0];
        }
        if (values.length >= 2)         dateFrom=values[0] + ""String_Node_Str"" + values[1];
        if (values.length == 4)         dateTo=values[2] + ""String_Node_Str"" + values[3];
      }
 else       if (type == 2)       throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     throw new IllegalArgumentException(""String_Node_Str"" + param);
  }
  parseLocations();
}"
43101,"/** 
 * Returns the name of the block, with its data if applicable
 * @param blockData
 * @return
 */
public static String getBlockStringName(String blockData){
  String[] blockArr=blockData.split(""String_Node_Str"");
  Material.getMaterial(Integer.parseInt(blockArr[0]));
  if (blockArr.length > 1)   return Material.getMaterial(Integer.parseInt(blockArr[0])).name() + ""String_Node_Str"" + blockArr[1];
 else   return Material.getMaterial(Integer.parseInt(blockArr[0])).name();
}","/** 
 * Returns the name of the block, with its data if applicable
 * @param blockData
 * @return
 */
public static String getBlockStringName(String blockData){
  String[] blockArr=blockData.split(""String_Node_Str"");
  if (!Util.isInteger(blockArr[0]))   return blockData;
  if (blockArr.length > 1)   return Material.getMaterial(Integer.parseInt(blockArr[0])).name() + ""String_Node_Str"" + blockArr[1];
 else   return Material.getMaterial(Integer.parseInt(blockArr[0])).name();
}"
43102,"/** 
 * Run the undo. Contains appropriate methods of catching errors and notifying the player
 */
public void run(){
  int i=0;
  while (i < 200 && undoQueue.hasNext()) {
    DataEntry entry=undoQueue.next();
    if (entry.getUndoState() == null)     continue;
    if (undoType == RollbackType.GLOBAL) {
      entry.getUndoState().update();
      if (Config.DeleteDataOnRollback)       DataManager.addEntry(entry);
    }
 else {
      Player player=(Player)session.getSender();
      Block block=entry.getUndoState().getBlock();
      player.sendBlockChange(block.getLocation(),block.getType(),block.getData());
    }
    counter++;
  }
  if (!undoQueue.hasNext()) {
    Bukkit.getServer().getScheduler().cancelTask(timerID);
    session.setDoingRollback(false);
    session.setRollbackResults(null);
    Util.debug(""String_Node_Str"" + counter + ""String_Node_Str"");
  }
}","/** 
 * Run the undo. Contains appropriate methods of catching errors and notifying the player
 */
public void run(){
  int i=0;
  while (i < 200 && undoQueue.hasNext()) {
    DataEntry entry=undoQueue.next();
    if (entry.getUndoState() == null)     continue;
    if (undoType == RollbackType.GLOBAL) {
      entry.getUndoState().update(true);
      if (Config.DeleteDataOnRollback)       DataManager.addEntry(entry);
    }
 else {
      Player player=(Player)session.getSender();
      Block block=entry.getUndoState().getBlock();
      player.sendBlockChange(block.getLocation(),block.getType(),block.getData());
    }
    counter++;
  }
  if (!undoQueue.hasNext()) {
    Bukkit.getServer().getScheduler().cancelTask(timerID);
    session.setDoingRollback(false);
    session.setRollbackResults(null);
    Util.sendMessage(session.getSender(),""String_Node_Str"" + counter + ""String_Node_Str"");
    Util.debug(""String_Node_Str"" + counter + ""String_Node_Str"");
  }
}"
43103,"public boolean execute(){
  if (!session.isInPreview()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Util.sendMessage(sender,""String_Node_Str"");
  new Rollback(RollbackType.GLOBAL,session);
  return true;
}","public boolean execute(){
  if (!session.isInPreview()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Util.sendMessage(sender,""String_Node_Str"");
  new Rollback(RollbackType.GLOBAL,session);
  session.setInPreview(false);
  return true;
}"
43104,"public boolean execute(){
  if (!session.isInPreview()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  new Undo(RollbackType.LOCAL,session);
  Util.sendMessage(sender,""String_Node_Str"");
  return true;
}","public boolean execute(){
  if (!session.isInPreview()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  new Undo(RollbackType.LOCAL,session);
  Util.sendMessage(sender,""String_Node_Str"");
  session.setInPreview(false);
  return true;
}"
43105,"public boolean execute(){
  if (session.doingRollback()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    parser.loc=null;
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new RollbackCallback(session,RollbackType.LOCAL),parser,SearchDir.DESC);
  return true;
}","public boolean execute(){
  if (session.doingRollback()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    parser.loc=null;
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new RollbackCallback(session,RollbackType.LOCAL),parser,SearchDir.DESC);
  session.setInPreview(true);
  return true;
}"
43106,"public boolean execute(){
  if (!session.isUsingTool()) {
    session.setUsingTool(true);
    if (!player.getInventory().contains(BlockUtil.itemStringToStack(Config.ToolBlock,1))) {
      ItemStack stack=BlockUtil.itemStringToStack(Config.ToolBlock,1);
      int first=player.getInventory().firstEmpty();
      if (first == -1)       player.getWorld().dropItem(player.getLocation(),stack);
 else {
        player.getInventory().setItem(first,player.getInventory().getItemInHand());
        player.getInventory().setItemInHand(stack);
      }
    }
    Util.sendMessage(sender,""String_Node_Str"");
  }
 else {
    session.setUsingTool(false);
    Util.sendMessage(sender,""String_Node_Str"");
  }
  return true;
}","public boolean execute(){
  if (!session.isUsingTool()) {
    Inventory inv=player.getInventory();
    session.setUsingTool(true);
    ItemStack stack=BlockUtil.itemStringToStack(Config.ToolBlock,1);
    if (!inv.contains(stack)) {
      int first=inv.firstEmpty();
      if (first == -1)       player.getWorld().dropItem(player.getLocation(),stack);
 else       inv.setItem(first,stack);
    }
    ItemStack back=player.getItemInHand().clone();
    int slot=inv.first(stack);
    player.setItemInHand(inv.getItem(inv.first(stack)));
    if (back.getAmount() == 0)     inv.clear(slot);
 else     inv.setItem(slot,back);
    Util.sendMessage(sender,""String_Node_Str"");
  }
 else {
    session.setUsingTool(false);
    Util.sendMessage(sender,""String_Node_Str"");
  }
  return true;
}"
43107,"/** 
 * Method called by the command manager in   {@link HawkEye} to run the command.Arguments are processed into a list for easier manipulating. Argument lengths, permissions and sender types are all handled.
 * @param csender {@link CommandSender} to send data to
 * @param preArgs arguments to be processed
 * @param cmd command being executed
 * @return true on success, false if there is an error in the checks or if the extending command returns false
 */
public boolean run(HawkEye instace,CommandSender csender,String[] preArgs,String cmd){
  plugin=instace;
  sender=csender;
  session=HawkEye.getSession(sender);
  usedCommand=cmd;
  args.clear();
  for (  String arg : preArgs)   args.add(arg);
  Util.info(name.split(""String_Node_Str"").length + ""String_Node_Str"");
  for (int i=0; i <= name.split(""String_Node_Str"").length && i <= args.size(); i++)   args.remove(0);
  if (argLength > args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  if (sender instanceof Player)   player=(Player)sender;
  if (!permission()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return false;
  }
  return execute();
}","/** 
 * Method called by the command manager in   {@link HawkEye} to run the command.Arguments are processed into a list for easier manipulating. Argument lengths, permissions and sender types are all handled.
 * @param csender {@link CommandSender} to send data to
 * @param preArgs arguments to be processed
 * @param cmd command being executed
 * @return true on success, false if there is an error in the checks or if the extending command returns false
 */
public boolean run(HawkEye instace,CommandSender csender,String[] preArgs,String cmd){
  plugin=instace;
  sender=csender;
  session=HawkEye.getSession(sender);
  usedCommand=cmd;
  args.clear();
  for (  String arg : preArgs)   args.add(arg);
  for (int i=0; i < name.split(""String_Node_Str"").length && i < args.size(); i++)   args.remove(0);
  if (argLength > args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  if (sender instanceof Player)   player=(Player)sender;
  if (!permission()) {
    Util.sendMessage(sender,""String_Node_Str"");
    return false;
  }
  return execute();
}"
43108,"/** 
 * Run the rollback. Contains appropriate methods of catching errors and notifying the player
 */
public void run(){
  int i=0;
  while (i < 200 && rollbackQueue.hasNext()) {
    DataEntry entry=rollbackQueue.next();
    if (entry.getType() == null || !entry.getType().canRollback())     continue;
    World world=HawkEye.server.getWorld(entry.getWorld());
    if (world == null)     continue;
    Location loc=new Location(world,entry.getX(),entry.getY(),entry.getZ());
    Block block=world.getBlockAt(loc);
    if (rollbackType == RollbackType.GLOBAL && entry.rollback(world.getBlockAt(loc))) {
      undo.add(block.getState());
      if (Config.DeleteDataOnRollback)       DataManager.deleteEntry(entry.getDataId());
      counter++;
    }
 else     if (rollbackType == RollbackType.LOCAL && entry.rollbackPlayer(block,(Player)session.getSender())) {
      localUndo.add(block);
      counter++;
    }
  }
  if (!rollbackQueue.hasNext()) {
    Bukkit.getServer().getScheduler().cancelTask(timerID);
    if (rollbackType == RollbackType.GLOBAL) {
      session.setRollbackUndo(undo);
      session.setDoingRollback(false);
      Util.sendMessage(session.getSender(),""String_Node_Str"" + counter + ""String_Node_Str"");
      Util.sendMessage(session.getSender(),""String_Node_Str"");
    }
 else {
      session.setLocalRollbackUndo(localUndo);
      Util.sendMessage(session.getSender(),""String_Node_Str"" + counter + ""String_Node_Str"");
      Util.sendMessage(session.getSender(),""String_Node_Str"");
    }
    Util.debug(""String_Node_Str"" + counter + ""String_Node_Str"");
  }
}","/** 
 * Run the rollback. Contains appropriate methods of catching errors and notifying the player
 */
public void run(){
  int i=0;
  while (i < 200 && rollbackQueue.hasNext()) {
    DataEntry entry=rollbackQueue.next();
    if (entry.getType() == null || !entry.getType().canRollback())     continue;
    World world=HawkEye.server.getWorld(entry.getWorld());
    if (world == null)     continue;
    Location loc=new Location(world,entry.getX(),entry.getY(),entry.getZ());
    Block block=world.getBlockAt(loc);
    BlockState state=block.getState();
    if (rollbackType == RollbackType.GLOBAL && entry.rollback(world.getBlockAt(loc))) {
      undo.add(state);
      if (Config.DeleteDataOnRollback)       DataManager.deleteEntry(entry.getDataId());
      counter++;
    }
 else     if (rollbackType == RollbackType.LOCAL && entry.rollbackPlayer(block,(Player)session.getSender())) {
      localUndo.add(block);
      counter++;
    }
  }
  if (!rollbackQueue.hasNext()) {
    Bukkit.getServer().getScheduler().cancelTask(timerID);
    if (rollbackType == RollbackType.GLOBAL) {
      session.setRollbackUndo(undo);
      session.setDoingRollback(false);
      Util.sendMessage(session.getSender(),""String_Node_Str"" + counter + ""String_Node_Str"");
      Util.sendMessage(session.getSender(),""String_Node_Str"");
    }
 else {
      session.setLocalRollbackUndo(localUndo);
      Util.sendMessage(session.getSender(),""String_Node_Str"" + counter + ""String_Node_Str"");
      Util.sendMessage(session.getSender(),""String_Node_Str"");
    }
    Util.debug(""String_Node_Str"" + counter + ""String_Node_Str"");
  }
}"
43109,"/** 
 * Run the undo. Contains appropriate methods of catching errors and notifying the player
 */
public void run(){
  if (session.getRollbackResults() != null) {
    Util.sendMessage(session.getSender(),""String_Node_Str"");
    return;
  }
  List<BlockState> results=session.getRollbackUndo();
  if (results == null || results.size() == 0) {
    Util.sendMessage(session.getSender(),""String_Node_Str"");
    return;
  }
  Util.sendMessage(session.getSender(),""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  BlockState block : results.toArray(new BlockState[0]))   block.update(true);
  Util.sendMessage(session.getSender(),""String_Node_Str"");
  session.setRollbackUndo(null);
  session.setRollbackResults(null);
}","/** 
 * Run the undo. Contains appropriate methods of catching errors and notifying the player
 */
public void run(){
  if (session.doingRollback()) {
    Util.sendMessage(session.getSender(),""String_Node_Str"");
    return;
  }
  List<BlockState> results=session.getRollbackUndo();
  if (results == null || results.size() == 0) {
    Util.sendMessage(session.getSender(),""String_Node_Str"");
    return;
  }
  Util.sendMessage(session.getSender(),""String_Node_Str"" + results.size() + ""String_Node_Str"");
  for (  BlockState block : results.toArray(new BlockState[0]))   block.update(true);
  Util.sendMessage(session.getSender(),""String_Node_Str"");
  session.setRollbackUndo(null);
  session.setRollbackResults(null);
}"
43110,"public boolean execute(){
  Util.sendMessage(sender,""String_Node_Str"");
  new Rollback(RollbackType.GLOBAL,session);
  return true;
}","public boolean execute(){
  if (!session.doingRollback() || session.getLocalRollbackUndo().size() == 0) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Util.sendMessage(sender,""String_Node_Str"");
  new Rollback(RollbackType.GLOBAL,session);
  session.setLocalRollbackUndo(new ArrayList<Block>());
  return true;
}"
43111,"public boolean execute(){
  session.setDoingRollback(false);
  for (  Block block : session.getLocalRollbackUndo())   player.sendBlockChange(block.getLocation(),block.getType(),block.getData());
  Util.sendMessage(sender,""String_Node_Str"");
  return true;
}","public boolean execute(){
  if (!session.doingRollback() || session.getLocalRollbackUndo().size() == 0) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  session.setDoingRollback(false);
  for (  Block block : session.getLocalRollbackUndo())   player.sendBlockChange(block.getLocation(),block.getType(),block.getData());
  session.setLocalRollbackUndo(new ArrayList<Block>());
  Util.sendMessage(sender,""String_Node_Str"");
  return true;
}"
43112,"public static String createChangeString(List<HashMap<String,Integer>> ops){
  String changeString=""String_Node_Str"";
  List<String> add=new ArrayList<String>();
  for (  Entry<String,Integer> item : ops.get(0).entrySet())   add.add(item.getValue() + ""String_Node_Str"" + BlockUtil.getBlockStringName(item.getKey()));
  List<String> sub=new ArrayList<String>();
  for (  Entry<String,Integer> item : ops.get(1).entrySet())   sub.add(item.getValue() + ""String_Node_Str"" + BlockUtil.getBlockStringName(item.getKey()));
  if (add.size() > 0)   changeString+=""String_Node_Str"" + Util.join(add,""String_Node_Str"") + ""String_Node_Str"";
  if (sub.size() > 0)   changeString+=""String_Node_Str"" + Util.join(sub,""String_Node_Str"") + ""String_Node_Str"";
  return changeString;
}","/** 
 * Creates a readable string representing the changes of a difference string
 * @param ops additions and subtractions as supplied by interpretDifferenceString
 * @return
 */
public static String createChangeString(List<HashMap<String,Integer>> ops){
  String changeString=""String_Node_Str"";
  List<String> add=new ArrayList<String>();
  for (  Entry<String,Integer> item : ops.get(0).entrySet())   add.add(item.getValue() + ""String_Node_Str"" + BlockUtil.getBlockStringName(item.getKey()));
  List<String> sub=new ArrayList<String>();
  for (  Entry<String,Integer> item : ops.get(1).entrySet())   sub.add(item.getValue() + ""String_Node_Str"" + BlockUtil.getBlockStringName(item.getKey()));
  if (add.size() > 0)   changeString+=""String_Node_Str"" + Util.join(add,""String_Node_Str"") + ""String_Node_Str"";
  if (sub.size() > 0)   changeString+=""String_Node_Str"" + Util.join(sub,""String_Node_Str"") + ""String_Node_Str"";
  return changeString;
}"
43113,"/** 
 * Takes an inventory difference string and forms two HashMaps containing the compressed inventory forms of the additions and subtractions
 * @param diff The difference string to be processed
 * @return a List of two HashMaps containing the additions and subtractions. First list element is adds, second is subs.
 */
public static List<HashMap<String,Integer>> interpretDifferenceString(String diff){
  List<HashMap<String,Integer>> ops=new ArrayList<HashMap<String,Integer>>();
  for (  String changes : diff.split(""String_Node_Str"")) {
    HashMap<String,Integer> op=new HashMap<String,Integer>();
    for (    String change : changes.split(""String_Node_Str"")) {
      if (change.length() == 0)       continue;
      String[] item=change.split(""String_Node_Str"");
      op.put(item[0],Integer.parseInt(item[1]));
    }
    ops.add(op);
  }
  if (ops.size() == 1)   ops.add(new HashMap<String,Integer>());
  return ops;
}","/** 
 * Takes an inventory difference string and forms two HashMaps containing the compressed inventory forms of the additions and subtractions
 * @param diff The difference string to be processed
 * @return a List of two HashMaps containing the additions and subtractions. First list element is adds, second is subs.
 */
public static List<HashMap<String,Integer>> interpretDifferenceString(String diff){
  List<HashMap<String,Integer>> ops=new ArrayList<HashMap<String,Integer>>();
  for (  String changes : diff.split(""String_Node_Str"")) {
    HashMap<String,Integer> op=new HashMap<String,Integer>();
    for (    String change : changes.split(""String_Node_Str"")) {
      if (change.length() == 0)       continue;
      String[] item=change.split(""String_Node_Str"");
      op.put(item[0],Integer.parseInt(item[1]));
    }
    ops.add(op);
  }
  return ops;
}"
43114,"/** 
 * Checks if HawkEye needs to update config files from existing DataLog installation
 * @param pm PluginManager
 */
private void datalogCheck(PluginManager pm){
  Plugin dl=pm.getPlugin(""String_Node_Str"");
  if (dl != null) {
    Util.warning(""String_Node_Str"");
    Config.importOldConfig(dl.getConfiguration());
    pm.disablePlugin(dl);
    File dataLog=new File(""String_Node_Str"" + File.separator + ""String_Node_Str"");
    dataLog.deleteOnExit();
    File dataLogFolder=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator);
    dataLogFolder.deleteOnExit();
    config=new Config(this);
    Util.info(""String_Node_Str"");
  }
}","/** 
 * Checks if HawkEye needs to update config files from existing DataLog installation
 * @param pm PluginManager
 */
private void datalogCheck(PluginManager pm){
  Plugin dl=pm.getPlugin(""String_Node_Str"");
  if (dl != null) {
    Util.warning(""String_Node_Str"");
    Util.info(""String_Node_Str"");
    Config.importOldConfig(dl.getConfiguration());
    config=new Config(this);
    pm.disablePlugin(dl);
  }
}"
43115,"public RollbackCallback(PlayerSession session){
  this.session=session;
}","public RollbackCallback(PlayerSession session){
  this.session=session;
  sender=session.getSender();
  Util.sendMessage(sender,""String_Node_Str"");
}"
43116,"public SearchCallback(PlayerSession session){
  this.session=session;
}","public SearchCallback(PlayerSession session){
  this.session=session;
  sender=session.getSender();
  Util.sendMessage(sender,""String_Node_Str"");
}"
43117,"public void error(SearchError error,String message){
  Util.sendMessage(session.getSender(),message);
}","public void error(SearchError error,String message){
  Util.sendMessage(sender,message);
}"
43118,"public boolean execute(){
  SearchParser parser=null;
  try {
    if (args.size() == 0 || !Util.isInteger(args.get(0)))     throw new IllegalArgumentException(""String_Node_Str"");
    int integer=Integer.parseInt(args.get(0));
    if ((integer > Config.MaxRadius && Config.MaxRadius > 0) || integer < 0)     throw new IllegalArgumentException(""String_Node_Str"");
    parser=new SearchParser(player,integer);
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
    if (args.size() > 1)     parser.players=args.get(1).split(""String_Node_Str"");
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new SearchCallback(),parser,SearchDir.DESC);
  return true;
}","public boolean execute(){
  SearchParser parser=null;
  try {
    if (args.size() == 0 || !Util.isInteger(args.get(0)))     throw new IllegalArgumentException(""String_Node_Str"");
    int integer=Integer.parseInt(args.get(0));
    if ((integer > Config.MaxRadius && Config.MaxRadius > 0) || integer < 0)     throw new IllegalArgumentException(""String_Node_Str"");
    parser=new SearchParser(player,integer);
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
    if (args.size() > 1)     parser.players=args.get(1).split(""String_Node_Str"");
    for (    DataType type : DataType.values())     if (type.canHere())     parser.actions.add(type);
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new SearchCallback(session),parser,SearchDir.DESC);
  return true;
}"
43119,"public boolean execute(){
  if (session.getRollbackResults() != null && session.getRollbackResults().size() > 0) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    parser.loc=null;
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new RollbackCallback(),parser,SearchDir.DESC);
  return true;
}","public boolean execute(){
  if (session.getRollbackResults() != null && session.getRollbackResults().size() > 0) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    parser.loc=null;
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new RollbackCallback(session),parser,SearchDir.DESC);
  return true;
}"
43120,"public boolean execute(){
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new SearchCallback(),parser,SearchDir.DESC);
  return true;
}","public boolean execute(){
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  new SearchQuery(new SearchCallback(session),parser,SearchDir.DESC);
  return true;
}"
43121,"public boolean execute(){
  if (session.getRollbackResults() != null && session.getRollbackResults().size() == 0) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  if (plugin.worldEdit == null) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Region region=null;
  try {
    LocalPlayer lp=new BukkitPlayer(plugin.worldEdit,plugin.worldEdit.getWorldEdit().getServer(),player);
    region=plugin.worldEdit.getWorldEdit().getSession(lp).getRegionSelector().getRegion();
  }
 catch (  IncompleteRegionException e) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  parser.minLoc=new Vector(region.getMinimumPoint().getX(),region.getMinimumPoint().getY(),region.getMinimumPoint().getZ());
  parser.maxLoc=new Vector(region.getMaximumPoint().getX(),region.getMaximumPoint().getY(),region.getMaximumPoint().getZ());
  new SearchQuery(new RollbackCallback(),parser,SearchDir.DESC);
  return true;
}","public boolean execute(){
  if (session.getRollbackResults() != null && session.getRollbackResults().size() == 0) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  if (plugin.worldEdit == null) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Region region=null;
  try {
    LocalPlayer lp=new BukkitPlayer(plugin.worldEdit,plugin.worldEdit.getWorldEdit().getServer(),player);
    region=plugin.worldEdit.getWorldEdit().getSession(lp).getRegionSelector().getRegion();
  }
 catch (  IncompleteRegionException e) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  SearchParser parser=null;
  try {
    parser=new SearchParser(player,args);
    if (parser.actions.size() > 0) {
      for (      DataType type : parser.actions)       if (!type.canRollback())       throw new IllegalArgumentException(""String_Node_Str"" + type.getConfigName());
    }
 else {
      for (      DataType type : DataType.values())       if (type.canRollback())       parser.actions.add(type);
    }
  }
 catch (  IllegalArgumentException e) {
    Util.sendMessage(sender,""String_Node_Str"" + e.getMessage());
    return true;
  }
  parser.minLoc=new Vector(region.getMinimumPoint().getX(),region.getMinimumPoint().getY(),region.getMinimumPoint().getZ());
  parser.maxLoc=new Vector(region.getMaximumPoint().getX(),region.getMaximumPoint().getY(),region.getMaximumPoint().getZ());
  new SearchQuery(new RollbackCallback(session),parser,SearchDir.DESC);
  return true;
}"
43122,"/** 
 * Performs a HawkEye tool search at the specified location
 * @param player
 * @param loc
 */
public static void toolSearch(Player player,Location loc){
  SearchParser parser=new SearchParser(player);
  for (  DataType type : DataType.values())   if (type.canHere())   parser.actions.add(type);
  loc=Util.getSimpleLocation(loc);
  parser.loc=loc.toVector();
  parser.worlds=new String[]{loc.getWorld().getName()};
  Thread thread=new SearchQuery(new SearchCallback(),parser,SearchDir.DESC);
  thread.start();
}","/** 
 * Performs a HawkEye tool search at the specified location
 * @param player
 * @param loc
 */
public static void toolSearch(Player player,Location loc){
  SearchParser parser=new SearchParser(player);
  for (  DataType type : DataType.values())   if (type.canHere())   parser.actions.add(type);
  loc=Util.getSimpleLocation(loc);
  parser.loc=loc.toVector();
  parser.worlds=new String[]{loc.getWorld().getName()};
  new SearchQuery(new SearchCallback(HawkEye.getSession(player)),parser,SearchDir.DESC);
}"
43123,"private void setupDatabase(){
  try {
    File props=new File(""String_Node_Str"");
    if (!props.exists())     props.createNewFile();
  }
 catch (  IOException e) {
    Util.info(""String_Node_Str"");
  }
  if (getDatabase().createSqlQuery(""String_Node_Str"").findUnique() == null) {
    Util.info(""String_Node_Str"");
    installDDL();
  }
  if (getDatabase().createSqlQuery(""String_Node_Str"").findUnique() == null) {
    Util.info(""String_Node_Str"");
    getDatabase().createSqlUpdate(""String_Node_Str"").execute();
    getDatabase().createSqlUpdate(""String_Node_Str"" + getDescription().getName() + ""String_Node_Str"").execute();
    getDatabase().createSqlUpdate(""String_Node_Str"").execute();
    Util.info(""String_Node_Str"");
  }
}","private void setupDatabase(){
  try {
    File props=new File(""String_Node_Str"");
    if (!props.exists())     props.createNewFile();
  }
 catch (  IOException e) {
    Util.info(""String_Node_Str"");
  }
  if (getDatabase().createSqlQuery(""String_Node_Str"").findList() == null) {
    Util.info(""String_Node_Str"");
    installDDL();
  }
  if (getDatabase().createSqlQuery(""String_Node_Str"").findUnique() == null) {
    Util.info(""String_Node_Str"");
    getDatabase().createSqlUpdate(""String_Node_Str"").execute();
    getDatabase().createSqlUpdate(""String_Node_Str"" + getDescription().getName() + ""String_Node_Str"").execute();
    getDatabase().createSqlUpdate(""String_Node_Str"").execute();
    Util.info(""String_Node_Str"");
  }
}"
43124,"public SearchQuery(CommandSender sender,String dateFrom,String dateTo,String[] players,Integer[] actions,Vector loc,Integer radius,String[] worlds,String[] filters){
  this.sender=sender;
  this.players=players;
  this.dateFrom=dateFrom;
  this.dateTo=dateTo;
  this.actions=actions;
  this.loc=loc;
  this.radius=radius;
  this.worlds=worlds;
  this.filters=filters;
}","public SearchQuery(CommandSender sender,String dateFrom,String dateTo,String[] players,List<Integer> actions,Vector loc,Integer radius,String[] worlds,String[] filters){
  this.sender=sender;
  this.players=players;
  this.dateFrom=dateFrom;
  this.dateTo=dateTo;
  this.actions=actions;
  this.loc=loc;
  this.radius=radius;
  this.worlds=worlds;
  this.filters=filters;
}"
43125,"public void run(){
  String sql=""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  if (dateFrom != null)   args.add(""String_Node_Str"" + dateFrom + ""String_Node_Str"");
  if (dateTo != null)   args.add(""String_Node_Str"" + dateTo + ""String_Node_Str"");
  if (players != null) {
    for (int i=0; i < players.length; i++)     players[i]=""String_Node_Str"" + players[i].toLowerCase() + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(players),""String_Node_Str"") + ""String_Node_Str"");
  }
  if (actions != null)   args.add(""String_Node_Str"" + Util.join(Arrays.asList(actions),""String_Node_Str"") + ""String_Node_Str"");
  if (loc != null) {
    int range=5;
    if (radius != null)     range=radius;
    args.add(""String_Node_Str"" + (loc.getX() - range) + ""String_Node_Str""+ (loc.getX() + range)+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + (loc.getY() - range) + ""String_Node_Str""+ (loc.getY() + range)+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + (loc.getZ() - range) + ""String_Node_Str""+ (loc.getZ() + range)+ ""String_Node_Str"");
  }
  if (worlds != null) {
    for (int i=0; i < worlds.length; i++)     worlds[i]=""String_Node_Str"" + worlds[i].toLowerCase() + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(worlds),""String_Node_Str"") + ""String_Node_Str"");
  }
  if (filters != null) {
    for (int i=0; i < filters.length; i++)     filters[i]=""String_Node_Str"" + filters[i] + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(filters),""String_Node_Str"") + ""String_Node_Str"");
  }
  if (args.size() == 0)   Util.sendMessage(sender,""String_Node_Str"");
  sql+=Util.join(args,""String_Node_Str"");
  List<SqlRow> results=DataManager.db.createSqlQuery(sql).findList();
  if (results == null || results.size() == 0)   Util.sendMessage(sender,""String_Node_Str"");
  DataManager.searchResults.put(sender,results);
  DataManager.displayPage(sender,1);
}","public void run(){
  String sql=""String_Node_Str"";
  List<String> args=new ArrayList<String>();
  if (dateFrom != null)   args.add(""String_Node_Str"" + dateFrom + ""String_Node_Str"");
  if (dateTo != null)   args.add(""String_Node_Str"" + dateTo + ""String_Node_Str"");
  if (players != null) {
    for (int i=0; i < players.length; i++)     players[i]=""String_Node_Str"" + players[i].toLowerCase() + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(players),""String_Node_Str"") + ""String_Node_Str"");
  }
  if (actions.size() == 0) {
    actions=new ArrayList<Integer>();
    for (    DataType type : DataType.values())     actions.add(type.getId());
  }
  List<Integer> acs=new ArrayList<Integer>();
  for (  int act : actions.toArray(new Integer[actions.size()]))   if (Permission.searchType(sender,DataType.fromId(act).getConfigName()))   acs.add(act);
  args.add(""String_Node_Str"" + Util.join(acs,""String_Node_Str"") + ""String_Node_Str"");
  if (loc != null) {
    int range=5;
    if (radius != null)     range=radius;
    args.add(""String_Node_Str"" + (loc.getX() - range) + ""String_Node_Str""+ (loc.getX() + range)+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + (loc.getY() - range) + ""String_Node_Str""+ (loc.getY() + range)+ ""String_Node_Str"");
    args.add(""String_Node_Str"" + (loc.getZ() - range) + ""String_Node_Str""+ (loc.getZ() + range)+ ""String_Node_Str"");
  }
  if (worlds != null) {
    for (int i=0; i < worlds.length; i++)     worlds[i]=""String_Node_Str"" + worlds[i].toLowerCase() + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(worlds),""String_Node_Str"") + ""String_Node_Str"");
  }
  if (filters != null) {
    for (int i=0; i < filters.length; i++)     filters[i]=""String_Node_Str"" + filters[i] + ""String_Node_Str"";
    args.add(""String_Node_Str"" + Util.join(Arrays.asList(filters),""String_Node_Str"") + ""String_Node_Str"");
  }
  if (args.size() == 0)   Util.sendMessage(sender,""String_Node_Str"");
  sql+=Util.join(args,""String_Node_Str"");
  List<SqlRow> results=DataManager.db.createSqlQuery(sql).findList();
  if (results == null || results.size() == 0)   Util.sendMessage(sender,""String_Node_Str"");
  DataManager.searchResults.put(sender,results);
  DataManager.displayPage(sender,1);
}"
43126,"public boolean execute(){
  String[] players=null;
  Vector loc=null;
  Integer radius=null;
  Integer[] actions=null;
  String[] worlds=null;
  String dateFrom=null;
  String dateTo=null;
  String[] filters=null;
  try {
    for (    String arg : args) {
      String param=arg.substring(0,1).toLowerCase();
      if (!arg.substring(1,2).equals(""String_Node_Str""))       throw new Exception();
      String[] values=arg.substring(2).split(""String_Node_Str"");
      if (param.equals(""String_Node_Str""))       players=values;
      if (param.equals(""String_Node_Str""))       worlds=values;
      if (param.equals(""String_Node_Str""))       filters=values;
      if (param.equals(""String_Node_Str"")) {
        Integer[] ints=new Integer[values.length];
        for (int i=0; i < values.length; i++)         ints[i]=DataType.fromName(values[i]).getId();
        actions=ints;
      }
      if (param.equals(""String_Node_Str"")) {
        loc=new Vector();
        loc.setX(Integer.parseInt(values[0]));
        loc.setY(Integer.parseInt(values[1]));
        loc.setZ(Integer.parseInt(values[2]));
      }
      if (param.equals(""String_Node_Str""))       radius=Integer.parseInt(values[0]);
      if (param.equals(""String_Node_Str"")) {
        int type=2;
        for (int i=0; i < arg.length(); i++) {
          String c=arg.substring(i,i + 1);
          if (!Util.isInteger(c)) {
            if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))             type=0;
            if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))             type=1;
          }
        }
        if (type == 0) {
          int weeks=0;
          int days=0;
          int hours=0;
          int mins=0;
          int secs=0;
          String nums=""String_Node_Str"";
          for (int i=0; i < values[0].length(); i++) {
            String c=values[0].substring(i,i + 1);
            if (Util.isInteger(c)) {
              nums+=c;
              continue;
            }
            int num=Integer.parseInt(nums);
            if (c.equals(""String_Node_Str""))             weeks=num;
 else             if (c.equals(""String_Node_Str""))             days=num;
 else             if (c.equals(""String_Node_Str""))             hours=num;
 else             if (c.equals(""String_Node_Str""))             mins=num;
 else             if (c.equals(""String_Node_Str""))             secs=num;
 else             throw new Exception();
            nums=""String_Node_Str"";
          }
          Calendar cal=Calendar.getInstance();
          cal.add(Calendar.WEEK_OF_YEAR,-1 * weeks);
          cal.add(Calendar.DAY_OF_MONTH,-1 * days);
          cal.add(Calendar.HOUR,-1 * hours);
          cal.add(Calendar.MINUTE,-1 * mins);
          cal.add(Calendar.SECOND,-1 * secs);
          SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
          dateFrom=form.format(cal.getTime());
        }
 else         if (type == 1) {
          if (values.length == 1) {
            SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
            dateFrom=form.format(Calendar.getInstance().getTime()) + ""String_Node_Str"" + values[0];
          }
          if (values.length >= 2)           dateFrom=values[0] + ""String_Node_Str"" + values[1];
          if (values.length == 4)           dateTo=values[2] + ""String_Node_Str"" + values[3];
        }
 else         if (type == 2)         throw new Exception();
      }
    }
  }
 catch (  Throwable t) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Util.sendMessage(sender,""String_Node_Str"");
  SearchQuery search=new SearchQuery(sender,dateFrom,dateTo,players,actions,loc,radius,worlds,filters);
  DataLog.server.getScheduler().scheduleAsyncDelayedTask(DataLog.server.getPluginManager().getPlugin(""String_Node_Str""),search);
  return true;
}","public boolean execute(){
  String[] players=null;
  Vector loc=null;
  Integer radius=null;
  List<Integer> actions=new ArrayList<Integer>();
  String[] worlds=null;
  String dateFrom=null;
  String dateTo=null;
  String[] filters=null;
  try {
    for (    String arg : args) {
      String param=arg.substring(0,1).toLowerCase();
      if (!arg.substring(1,2).equals(""String_Node_Str""))       throw new Exception();
      String[] values=arg.substring(2).split(""String_Node_Str"");
      if (param.equals(""String_Node_Str""))       players=values;
      if (param.equals(""String_Node_Str""))       worlds=values;
      if (param.equals(""String_Node_Str""))       filters=values;
      if (param.equals(""String_Node_Str"")) {
        for (        String value : values)         actions.add(DataType.fromName(value).getId());
      }
      if (param.equals(""String_Node_Str"")) {
        loc=new Vector();
        loc.setX(Integer.parseInt(values[0]));
        loc.setY(Integer.parseInt(values[1]));
        loc.setZ(Integer.parseInt(values[2]));
      }
      if (param.equals(""String_Node_Str""))       radius=Integer.parseInt(values[0]);
      if (param.equals(""String_Node_Str"")) {
        int type=2;
        for (int i=0; i < arg.length(); i++) {
          String c=arg.substring(i,i + 1);
          if (!Util.isInteger(c)) {
            if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))             type=0;
            if (c.equals(""String_Node_Str"") || c.equals(""String_Node_Str""))             type=1;
          }
        }
        if (type == 0) {
          int weeks=0;
          int days=0;
          int hours=0;
          int mins=0;
          int secs=0;
          String nums=""String_Node_Str"";
          for (int i=0; i < values[0].length(); i++) {
            String c=values[0].substring(i,i + 1);
            if (Util.isInteger(c)) {
              nums+=c;
              continue;
            }
            int num=Integer.parseInt(nums);
            if (c.equals(""String_Node_Str""))             weeks=num;
 else             if (c.equals(""String_Node_Str""))             days=num;
 else             if (c.equals(""String_Node_Str""))             hours=num;
 else             if (c.equals(""String_Node_Str""))             mins=num;
 else             if (c.equals(""String_Node_Str""))             secs=num;
 else             throw new Exception();
            nums=""String_Node_Str"";
          }
          Calendar cal=Calendar.getInstance();
          cal.add(Calendar.WEEK_OF_YEAR,-1 * weeks);
          cal.add(Calendar.DAY_OF_MONTH,-1 * days);
          cal.add(Calendar.HOUR,-1 * hours);
          cal.add(Calendar.MINUTE,-1 * mins);
          cal.add(Calendar.SECOND,-1 * secs);
          SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
          dateFrom=form.format(cal.getTime());
        }
 else         if (type == 1) {
          if (values.length == 1) {
            SimpleDateFormat form=new SimpleDateFormat(""String_Node_Str"");
            dateFrom=form.format(Calendar.getInstance().getTime()) + ""String_Node_Str"" + values[0];
          }
          if (values.length >= 2)           dateFrom=values[0] + ""String_Node_Str"" + values[1];
          if (values.length == 4)           dateTo=values[2] + ""String_Node_Str"" + values[3];
        }
 else         if (type == 2)         throw new Exception();
      }
    }
  }
 catch (  Throwable t) {
    Util.sendMessage(sender,""String_Node_Str"");
    return true;
  }
  Util.sendMessage(sender,""String_Node_Str"");
  SearchQuery search=new SearchQuery(sender,dateFrom,dateTo,players,actions,loc,radius,worlds,filters);
  DataLog.server.getScheduler().scheduleAsyncDelayedTask(DataLog.server.getPluginManager().getPlugin(""String_Node_Str""),search);
  return true;
}"
43127,"/** 
 * Generates the corrected index array for the supplied String.
 * @param string
 */
public StringIndexFixer(String string){
  this.indices=new int[string.codePointCount(0,string.length()) + 1];
  for (int i=0, count=0, nextCount; i < string.length(); i++) {
    nextCount=string.codePointCount(0,i + 1);
    if (nextCount != count) {
      indices[count]=i;
      count=nextCount;
    }
  }
}","/** 
 * Generates the corrected index array for the supplied String.
 * @param string
 */
public StringIndexFixer(String string){
  this.indices=new int[string.codePointCount(0,string.length()) + 1];
  for (int i=0, count=0, nextCount; i < string.length(); i++) {
    nextCount=string.codePointCount(0,i + 1);
    if (nextCount != count) {
      indices[count]=i;
      count=nextCount;
    }
  }
  indices[indices.length - 1]=string.length();
}"
43128,"/** 
 * Generates the corrected index array for the supplied String.
 * @param string
 */
public StringIndexFixer(String string){
  this.indices=new int[string.codePointCount(0,string.length()) + 1];
  for (int i=0, count=0, nextCount; i < string.length(); i++) {
    nextCount=string.codePointCount(0,i + 1);
    if (nextCount != count) {
      indices[count]=i;
      count=nextCount;
    }
  }
}","/** 
 * Generates the corrected index array for the supplied String.
 * @param string
 */
public StringIndexFixer(String string){
  this.indices=new int[string.codePointCount(0,string.length())];
  for (int i=0, count=0, nextCount; i < string.length(); i++) {
    nextCount=string.codePointCount(0,i + 1);
    if (nextCount != count) {
      indices[count]=i;
      count=nextCount;
    }
  }
}"
43129,"/** 
 * Compute the effective size of a message, given that Twitter treats things that smell like a URL as 22 characters. This also checks for DM microformat, e.g. ""d winterstein Hello"", where the d user part isn't counted.
 * @param statusText The status to check 
 * @return The effective message length in characters
 */
public static int countCharacters(String statusText){
  int shortLength=statusText.length();
  Matcher m=Regex.VALID_URL.matcher(statusText);
  while (m.find()) {
    shortLength+=LINK_LENGTH - m.group().length();
    if (m.group().startsWith(""String_Node_Str"")) {
      shortLength++;
    }
  }
  Matcher dmm=InternalUtils.DM.matcher(statusText);
  if (dmm.find()) {
    shortLength-=dmm.end();
  }
  return shortLength;
}","/** 
 * Compute the effective size of a message, given that Twitter treats things that smell like a URL as 22 characters. This also checks for DM microformat, e.g. ""d winterstein Hello"", where the d user part isn't counted.
 * @param statusText The status to check 
 * @return The effective message length in characters
 */
public static int countCharacters(String statusText){
  int shortLength=statusText.length();
  Matcher m=Regex.VALID_URL.matcher(statusText);
  while (m.find()) {
    String grp=m.group();
    shortLength+=LINK_LENGTH - m.group().length();
    if (m.group().startsWith(""String_Node_Str"")) {
      shortLength++;
    }
  }
  Matcher dmm=InternalUtils.DM.matcher(statusText);
  if (dmm.find()) {
    shortLength-=dmm.end();
  }
  return shortLength;
}"
43130,"/** 
 * Replace the default Twitter urls with the LinkedIn urls.
 */
public void setLinkedInProvider(){
  setProvider(LINKEDIN_PROVIDER);
}","/** 
 * Replace the default Twitter urls with the LinkedIn urls.
 */
public void setLinkedInProvider(){
  setProvider(LINKEDIN_PROVIDER());
}"
43131,"public void setFoursquareProvider(){
  setProvider(FOURSQUARE_PROVIDER);
}","public void setFoursquareProvider(){
  setProvider(FOURSQUARE_PROVIDER());
}"
43132,"/** 
 * @return the access token and access token secret - if this client wasconstructed with an access token, or has successfully authenticated and got one. null otherwise.
 */
public String[] getAccessToken(){
  if (accessToken == null)   return null;
  return new String[]{accessToken,accessTokenSecret};
}","/** 
 * @return the access token and access token secret - if this client wasconstructed with an access token, or has successfully authenticated and got one. null otherwise. Also returns the expiry time, if we've got one (null if not). See setExpiryKey for how to locate these.
 */
public String[] getAccessToken(){
  if (accessToken == null)   return null;
  return new String[]{accessToken,accessTokenSecret};
}"
43133,"/** 
 * Search results use a slightly different protocol! In particular w.r.t. user ids and info.
 * @param searchResults
 * @return search results as Status objects - but with dummy users! Thedummy users have a screenname and a profile image url, but no other information. This reflects the current behaviour of the Twitter API.
 */
static List<Status> getStatusesFromSearch(Twitter tw,String json){
  try {
    JSONObject searchResults=new JSONObject(json);
    List<Status> users=new ArrayList<Status>();
    JSONArray arr=searchResults.getJSONArray(""String_Node_Str"");
    for (int i=0; i < arr.length(); i++) {
      JSONObject obj=arr.getJSONObject(i);
      String userScreenName=obj.getString(""String_Node_Str"");
      String profileImgUrl=obj.getString(""String_Node_Str"");
      User user=new User(userScreenName);
      user.profileImageUrl=InternalUtils.URI(profileImgUrl);
      Status s=new Status(obj,user);
      users.add(s);
    }
    return users;
  }
 catch (  JSONException e) {
    throw new TwitterException.Parsing(json,e);
  }
}","/** 
 * Search results use a slightly different protocol! In particular w.r.t. user ids and info.
 * @param searchResults
 * @return search results as Status objects - but with dummy users! Thedummy users have a screenname and a profile image url, but no other information. This reflects the current behaviour of the Twitter API.
 */
static List<Status> getStatusesFromSearch(Twitter tw,String json){
  try {
    JSONObject searchResults=new JSONObject(json);
    List<Status> users=new ArrayList<Status>();
    JSONArray arr=searchResults.getJSONArray(""String_Node_Str"");
    for (int i=0; i < arr.length(); i++) {
      JSONObject obj=arr.getJSONObject(i);
      Status s=new Status(obj,null);
      users.add(s);
    }
    return users;
  }
 catch (  JSONException e) {
    throw new TwitterException.Parsing(json,e);
  }
}"
43134,"/** 
 * @param searchTerm
 * @param rpp
 * @return
 */
private Map<String,String> getSearchParams(String searchTerm,int rpp){
  Map<String,String> vars=InternalUtils.asMap(""String_Node_Str"",Integer.toString(rpp),""String_Node_Str"",searchTerm);
  if (sinceId != null) {
    vars.put(""String_Node_Str"",sinceId.toString());
  }
  if (untilId != null) {
    vars.put(""String_Node_Str"",untilId.toString());
  }
  if (untilDate != null) {
    vars.put(""String_Node_Str"",InternalUtils.df.format(untilDate));
  }
  if (lang != null) {
    vars.put(""String_Node_Str"",lang);
  }
  if (geocode != null) {
    vars.put(""String_Node_Str"",geocode);
  }
  if (resultType != null) {
    vars.put(""String_Node_Str"",resultType);
  }
  addStandardishParameters(vars);
  return vars;
}","/** 
 * @param searchTerm
 * @param rpp
 * @return
 */
private Map<String,String> getSearchParams(String searchTerm,Integer rpp){
  Map vars=InternalUtils.asMap(""String_Node_Str"",rpp,""String_Node_Str"",searchTerm);
  if (sinceId != null) {
    vars.put(""String_Node_Str"",sinceId.toString());
  }
  if (untilId != null) {
    vars.put(""String_Node_Str"",untilId.toString());
  }
  if (untilDate != null) {
    vars.put(""String_Node_Str"",InternalUtils.df.format(untilDate));
  }
  if (lang != null) {
    vars.put(""String_Node_Str"",lang);
  }
  if (geocode != null) {
    vars.put(""String_Node_Str"",geocode);
  }
  if (resultType != null) {
    vars.put(""String_Node_Str"",resultType);
  }
  addStandardishParameters(vars);
  return vars;
}"
43135,"/** 
 * Perform a search of Twitter. <p> Warning: the User objects returned by a search (as part of the Status objects) are dummy-users. The only information that is set is the user's screen-name and a profile image url. This reflects the current behaviour of the Twitter API. If you need more info, call users().show() with the screen names. <p> This supports   {@link #maxResults} and pagination. A language filter canbe set via  {@link #setLanguage(String)} Location can be set via{@link #setSearchLocation(double,double,String)}Other advanced search features can be done via the query string. E.g.<br> ""from:winterstein"" - tweets from user winterstein<br> ""to:winterstein"" - tweets start with @winterstein<br> ""source:jtwitter"" - originating from the application JTwitter - your query must also must contain at least one keyword parameter. <br> ""filter:links"" - tweets contain a link<br> ""apples OR pears"" - or (""apples pears"" would give you apples <i>and</i> pears).
 * @param searchTerm This can include several space-separated keywords, #tags and @username (for mentions), and use quotes for \""exact phrase\"" searches.
 * @param callback an object whose process() method will be called on each new page of results.
 * @param rpp results per page. 100 is the default
 * @return search results - up to maxResults if maxResults is positive, orrpp if maxResults is negative/zero. See {@link #setMaxResults(int)} to use > 100.
 */
public List<Status> search(String searchTerm,ICallback callback,int rpp){
  if (rpp > 100 && maxResults < rpp)   throw new IllegalArgumentException(""String_Node_Str"" + rpp);
  Map vars;
  if (maxResults < 100 && maxResults > 0) {
    vars=getSearchParams(searchTerm,maxResults);
  }
 else {
    vars=getSearchParams(searchTerm,rpp);
  }
  List<Status> allResults=new ArrayList<Status>(Math.max(maxResults,rpp));
  String url=TWITTER_URL + ""String_Node_Str"";
  BigInteger maxId=untilId;
  do {
    vars.put(""String_Node_Str"",maxId);
    List<Status> stati;
    try {
      String json=http.getPage(url,vars,true);
      stati=Status.getStatusesFromSearch(this,json);
    }
 catch (    TwitterException.Parsing pex) {
      if (http.isRetryOnError()) {
        InternalUtils.sleep(250);
        String json=http.getPage(url,vars,true);
        stati=Status.getStatusesFromSearch(this,json);
      }
 else {
        throw pex;
      }
    }
    int numResults=stati.size();
    maxId=InternalUtils.getMinId(maxId,stati);
    stati=dateFilter(stati);
    allResults.addAll(stati);
    if (callback != null) {
      if (callback.process(stati)) {
        break;
      }
    }
    if (numResults < rpp) {
      break;
    }
  }
 while (allResults.size() < maxResults);
  return allResults;
}","/** 
 * Perform a search of Twitter. <p> Warning: the User objects returned by a search (as part of the Status objects) are dummy-users. The only information that is set is the user's screen-name and a profile image url. This reflects the current behaviour of the Twitter API. If you need more info, call users().show() with the screen names. <p> This supports   {@link #maxResults} and pagination. A language filter canbe set via  {@link #setLanguage(String)} Location can be set via{@link #setSearchLocation(double,double,String)}Other advanced search features can be done via the query string. E.g.<br> ""from:winterstein"" - tweets from user winterstein<br> ""to:winterstein"" - tweets start with @winterstein<br> ""source:jtwitter"" - originating from the application JTwitter - your query must also must contain at least one keyword parameter. <br> ""filter:links"" - tweets contain a link<br> ""apples OR pears"" - or (""apples pears"" would give you apples <i>and</i> pears).
 * @param searchTerm This can include several space-separated keywords, #tags and @username (for mentions), and use quotes for \""exact phrase\"" searches.
 * @param callback an object whose process() method will be called on each new page of results.
 * @param rpp results per page. 100 is the default
 * @return search results - up to maxResults if maxResults is positive, orrpp if maxResults is negative/zero. See {@link #setMaxResults(int)} to use > 100.
 */
public List<Status> search(String searchTerm,ICallback callback,int rpp){
  if (rpp > 100 && maxResults < rpp)   throw new IllegalArgumentException(""String_Node_Str"" + rpp);
  Map vars;
  if (maxResults < 100 && maxResults > 0) {
    vars=getSearchParams(searchTerm,maxResults);
  }
 else {
    vars=getSearchParams(searchTerm,rpp);
  }
  List<Status> allResults=new ArrayList<Status>(Math.max(maxResults,rpp));
  String url=TWITTER_URL + ""String_Node_Str"";
  BigInteger maxId=untilId;
  do {
    vars.put(""String_Node_Str"",maxId);
    List<Status> stati;
    try {
      String json=http.getPage(url,vars,true);
      stati=Status.getStatusesFromSearch(this,json);
    }
 catch (    TwitterException.Parsing pex) {
      if (http.isRetryOnError()) {
        InternalUtils.sleep(250);
        String json=http.getPage(url,vars,true);
        stati=Status.getStatusesFromSearch(this,json);
      }
 else {
        throw pex;
      }
    }
    int numResults=stati.size();
    maxId=InternalUtils.getMinId(maxId,stati);
    stati=dateFilter(stati);
    allResults.addAll(stati);
    if (callback != null) {
      if (callback.process(stati)) {
        break;
      }
    }
    if ((rpp == 100 && numResults < 70) || numResults < rpp) {
      break;
    }
  }
 while (allResults.size() < maxResults);
  return allResults;
}"
43136,"/** 
 * Show users who (new-style) retweeted the given tweet. Can use count (up to 100) and page. This does not include old-style retweeters!
 * @param tweet You can use a ""fake"" Status created via {@link Status#Status(User,String,long,Date)} if you knowthe id number.
 */
public List<User> getRetweeters(Status tweet){
  String url=TWITTER_URL + ""String_Node_Str"" + tweet.id+ ""String_Node_Str"";
  Map<String,String> vars=addStandardishParameters(new HashMap<String,String>());
  String json=http.getPage(url,vars,http.canAuthenticate());
  List<User> users=User.getUsers(json);
  return users;
}","/** 
 * Show users who (new-style) retweeted the given tweet. Can use count (up to 100) and page. This does not include old-style retweeters!
 * @param tweet You can use a ""fake"" Status created via {@link Status#Status(User,String,long,Date)} if you knowthe id number.
 */
public List<User> getRetweeters(Status tweet){
  String url=TWITTER_URL + ""String_Node_Str"" + tweet.id+ ""String_Node_Str"";
  Map<String,String> vars=addStandardishParameters(new HashMap<String,String>());
  String json=http.getPage(url,vars,http.canAuthenticate());
  List<Status> ss=Status.getStatuses(json);
  List<User> users=new ArrayList(ss.size());
  for (  Status status : ss) {
    users.add(status.getUser());
  }
  return users;
}"
43137,"/** 
 * Add in since_id, page and count, if set. This is called by methods that return lists of statuses or messages.
 * @param vars
 * @return vars
 */
Map<String,String> addStandardishParameters(Map<String,String> vars){
  if (sinceId != null) {
    vars.put(""String_Node_Str"",sinceId.toString());
  }
  if (untilId != null) {
    vars.put(""String_Node_Str"",untilId.toString());
  }
  if (count != null) {
    vars.put(""String_Node_Str"",count.toString());
  }
  if (tweetEntities) {
    vars.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    vars.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (includeRTs) {
  }
 else {
    vars.put(""String_Node_Str"",""String_Node_Str"");
  }
  return vars;
}","/** 
 * Add in since_id, page and count, if set. This is called by methods that return lists of statuses or messages.
 * @param vars
 * @return vars
 */
Map<String,String> addStandardishParameters(Map<String,String> vars){
  if (sinceId != null) {
    vars.put(""String_Node_Str"",sinceId.toString());
  }
  if (untilId != null) {
    vars.put(""String_Node_Str"",untilId.toString());
  }
  if (count != null) {
    vars.put(""String_Node_Str"",count.toString());
  }
  if (tweetEntities) {
    vars.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    vars.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (!includeRTs) {
    vars.put(""String_Node_Str"",""String_Node_Str"");
  }
  return vars;
}"
43138,"/** 
 * Returns the 20 most recent replies/mentions (status updates with to the authenticating user. Replies are only available to theauthenticating user; you can not request a list of replies to another user whether public or protected. <p> This is exactly the same as   {@link #getMentions()}! Twitter changed their API & terminology - we are (currently) keeping both methods. <p> When paging, this method can only go back up to 800 statuses. <p> Does not include new-style retweets.
 * @deprecated Use #getMentions() for preference
 */
public List<Status> getReplies() throws TwitterException {
  return getMentions();
}","/** 
 * Returns the 20 most recent replies/mentions (status updates with to the authenticating user. Replies are only available to theauthenticating user; you can not request a list of replies to another user whether public or protected. <p> This is exactly the same as   {@link #getMentions()}! Twitter changed their API & terminology - we are (currently) keeping both methods. <p> When paging, this method can only go back up to 800 statuses. <p> Does not include new-style retweets.
 * @deprecated Use #getMentions() for preference. This method will be removed June 2013.
 */
public List<Status> getReplies() throws TwitterException {
  return getMentions();
}"
43139,"/** 
 * Returns the 20 most recent replies/mentions (status updates with to the authenticating user. Replies are only available to theauthenticating user; you can not request a list of replies to another user whether public or protected. <p> This is exactly the same as   {@link #getReplies()}<p> When paging, this method can only go back up to 800 statuses. <p> Does not include new-style retweets.
 */
public List<Status> getMentions(){
  return getStatuses(TWITTER_URL + ""String_Node_Str"",standardishParameters(),true);
}","/** 
 * Returns the 20 most recent replies/mentions (status updates with \@username) to the authenticating user. Replies are only available to the authenticating user; you cannot request a list of replies to another user whether public or protected. <p> This is exactly the same as   {@link #getReplies()}<p> When paging, this method can only go back up to 800 statuses. <p> Does not include new-style retweets.
 */
public List<Status> getMentions(){
  return getStatuses(TWITTER_URL + ""String_Node_Str"",standardishParameters(),true);
}"
43140,"/** 
 * Perform a search of Twitter. <p> Warning: the User objects returned by a search (as part of the Status objects) are dummy-users. The only information that is set is the user's screen-name and a profile image url. This reflects the current behaviour of the Twitter API. If you need more info, call users().show() with the screen names. <p> This supports   {@link #maxResults} and pagination. A language filter canbe set via  {@link #setLanguage(String)} Location can be set via{@link #setSearchLocation(double,double,String)}Other advanced search features can be done via the query string. E.g.<br> ""from:winterstein"" - tweets from user winterstein<br> ""to:winterstein"" - tweets start with @winterstein<br> ""source:jtwitter"" - originating from the application JTwitter - your query must also must contain at least one keyword parameter. <br> ""filter:links"" - tweets contain a link<br> ""apples OR pears"" - or (""apples pears"" would give you apples <i>and</i> pears).
 * @param searchTerm This can include several space-separated keywords, #tags and @username (for mentions), and use quotes for \""exact phrase\"" searches.
 * @param callback an object whose process() method will be called on each new page of results.
 * @param rpp results per page. 100 is the default
 * @return search results - up to maxResults if maxResults is positive, orrpp if maxResults is negative/zero. See {@link #setMaxResults(int)} to use > 100.
 */
public List<Status> search(String searchTerm,ICallback callback,int rpp){
  if (rpp > 100 && maxResults < rpp)   throw new IllegalArgumentException(""String_Node_Str"" + rpp);
  searchTerm=search2_bugHack(searchTerm);
  Map<String,String> vars;
  if (maxResults < 100 && maxResults > 0) {
    vars=getSearchParams(searchTerm,maxResults);
  }
 else {
    vars=getSearchParams(searchTerm,rpp);
  }
  List<Status> allResults=new ArrayList<Status>(Math.max(maxResults,rpp));
  String url=TWITTER_SEARCH_URL + ""String_Node_Str"";
  int localPageNumber=1;
  do {
    pageNumber=localPageNumber;
    vars.put(""String_Node_Str"",Integer.toString(pageNumber));
    List<Status> stati;
    try {
      String json=http.getPage(url,vars,false);
      stati=Status.getStatusesFromSearch(this,json);
    }
 catch (    TwitterException.Parsing pex) {
      if (http.isRetryOnError()) {
        InternalUtils.sleep(250);
        String json=http.getPage(url,vars,false);
        stati=Status.getStatusesFromSearch(this,json);
      }
 else {
        throw pex;
      }
    }
    int numResults=stati.size();
    stati=dateFilter(stati);
    allResults.addAll(stati);
    if (callback != null) {
      if (callback.process(stati)) {
        break;
      }
    }
    if (numResults < rpp) {
      break;
    }
    localPageNumber++;
  }
 while (allResults.size() < maxResults);
  pageNumber=null;
  return allResults;
}","/** 
 * Perform a search of Twitter. <p> Warning: the User objects returned by a search (as part of the Status objects) are dummy-users. The only information that is set is the user's screen-name and a profile image url. This reflects the current behaviour of the Twitter API. If you need more info, call users().show() with the screen names. <p> This supports   {@link #maxResults} and pagination. A language filter canbe set via  {@link #setLanguage(String)} Location can be set via{@link #setSearchLocation(double,double,String)}Other advanced search features can be done via the query string. E.g.<br> ""from:winterstein"" - tweets from user winterstein<br> ""to:winterstein"" - tweets start with @winterstein<br> ""source:jtwitter"" - originating from the application JTwitter - your query must also must contain at least one keyword parameter. <br> ""filter:links"" - tweets contain a link<br> ""apples OR pears"" - or (""apples pears"" would give you apples <i>and</i> pears).
 * @param searchTerm This can include several space-separated keywords, #tags and @username (for mentions), and use quotes for \""exact phrase\"" searches.
 * @param callback an object whose process() method will be called on each new page of results.
 * @param rpp results per page. 100 is the default
 * @return search results - up to maxResults if maxResults is positive, orrpp if maxResults is negative/zero. See {@link #setMaxResults(int)} to use > 100.
 */
public List<Status> search(String searchTerm,ICallback callback,int rpp){
  if (rpp > 100 && maxResults < rpp)   throw new IllegalArgumentException(""String_Node_Str"" + rpp);
  Map<String,String> vars;
  if (maxResults < 100 && maxResults > 0) {
    vars=getSearchParams(searchTerm,maxResults);
  }
 else {
    vars=getSearchParams(searchTerm,rpp);
  }
  List<Status> allResults=new ArrayList<Status>(Math.max(maxResults,rpp));
  String url=TWITTER_SEARCH_URL + ""String_Node_Str"";
  int localPageNumber=1;
  do {
    pageNumber=localPageNumber;
    vars.put(""String_Node_Str"",Integer.toString(pageNumber));
    List<Status> stati;
    try {
      String json=http.getPage(url,vars,false);
      stati=Status.getStatusesFromSearch(this,json);
    }
 catch (    TwitterException.Parsing pex) {
      if (http.isRetryOnError()) {
        InternalUtils.sleep(250);
        String json=http.getPage(url,vars,false);
        stati=Status.getStatusesFromSearch(this,json);
      }
 else {
        throw pex;
      }
    }
    int numResults=stati.size();
    stati=dateFilter(stati);
    allResults.addAll(stati);
    if (callback != null) {
      if (callback.process(stati)) {
        break;
      }
    }
    if (numResults < rpp) {
      break;
    }
    localPageNumber++;
  }
 while (allResults.size() < maxResults);
  pageNumber=null;
  return allResults;
}"
43141,"public void testGetDupeLinks(){
  BigInteger bi=new BigInteger(""String_Node_Str"");
  Twitter twitter=newTestTwitter();
  Status badStatus=twitter.getStatus(bi);
  List<TweetEntity> urlInfo=badStatus.getTweetEntities(KEntityType.urls);
  int lastEntityEnd=0;
  for (  TweetEntity entity : urlInfo) {
    if (lastEntityEnd > entity.start) {
      System.out.println(""String_Node_Str"" + lastEntityEnd + ""String_Node_Str""+ entity.start);
      fail();
    }
 else {
    }
    lastEntityEnd=entity.end;
  }
}","public void testGetDupeLinks(){
{
    String json=""String_Node_Str"";
    JSONObject jobj=new JSONObject(json);
    Status s=new Status(jobj,null);
    System.out.println(s.getText());
    System.out.println(s.getDisplayText());
    List<TweetEntity> urlInfo=s.getTweetEntities(KEntityType.urls);
    int lastEntityEnd=0;
    for (    TweetEntity entity : urlInfo) {
      if (lastEntityEnd > entity.start) {
        System.out.println(""String_Node_Str"" + lastEntityEnd + ""String_Node_Str""+ entity.start);
        fail();
      }
 else {
      }
      lastEntityEnd=entity.end;
    }
  }
{
    BigInteger bi=new BigInteger(""String_Node_Str"");
    Twitter twitter=newTestTwitter();
    Status badStatus=twitter.getStatus(bi);
    List<TweetEntity> urlInfo=badStatus.getTweetEntities(KEntityType.urls);
    int lastEntityEnd=0;
    for (    TweetEntity entity : urlInfo) {
      if (lastEntityEnd > entity.start) {
        System.out.println(""String_Node_Str"" + lastEntityEnd + ""String_Node_Str""+ entity.start);
        fail();
      }
 else {
      }
      lastEntityEnd=entity.end;
    }
  }
}"
43142,"/** 
 * False by default. Setting this to true switches on a robustness workaround: when presented with a 50X server error, the system will wait 1/2 a second and make a second attempt.
 */
public void setRetryOnError(boolean retryOnError){
  this.retryOnError=retryOnError;
}","/** 
 * False by default. Setting this to true switches on a robustness workaround: when presented with a 50X server error, the system will wait 1/2 a second and make a second attempt.
 */
@Override public void setRetryOnError(boolean retryOnError){
  this.retryOnError=retryOnError;
}"
43143,"@Override HttpURLConnection connect2() throws Exception {
  connect3_rateLimit();
  String url=""String_Node_Str"" + method + ""String_Node_Str"";
  Map<String,String> vars=new HashMap();
  if (follow != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(follow,0,Integer.MAX_VALUE));
  }
  if (track != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(track,0,Integer.MAX_VALUE));
  }
  HttpURLConnection con=client.post2_connect(url,vars);
  return con;
}","@Override HttpURLConnection connect2() throws Exception {
  connect3_rateLimit();
  String url=""String_Node_Str"" + method + ""String_Node_Str"";
  Map<String,String> vars=new HashMap();
  if (follow != null && (!follow.isEmpty())) {
    vars.put(""String_Node_Str"",InternalUtils.join(follow,0,Integer.MAX_VALUE));
  }
  if (track != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(track,0,Integer.MAX_VALUE));
  }
  HttpURLConnection con=client.post2_connect(url,vars);
  return con;
}"
43144,"HttpURLConnection connect2() throws Exception {
  if (jtwit.getScreenName() != null) {
    AStream s=user2stream.get(jtwit.getScreenName());
    if (s.isConnected()) {
      throw new TwitterException.TooManyLogins(""String_Node_Str"" + s + ""String_Node_Str"");
    }
    if (user2stream.size() > 1000) {
      user2stream.clear();
    }
    user2stream.put(jtwit.getScreenName(),this);
  }
  String url=""String_Node_Str"" + method + ""String_Node_Str"";
  Map<String,String> vars=new HashMap();
  if (follow != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(follow,0,Integer.MAX_VALUE));
  }
  if (track != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(track,0,Integer.MAX_VALUE));
  }
  HttpURLConnection con=client.post2_connect(url,vars);
  return con;
}","@Override HttpURLConnection connect2() throws Exception {
  if (jtwit.getScreenName() != null) {
    AStream s=user2stream.get(jtwit.getScreenName());
    if (s != null && s.isConnected()) {
      throw new TwitterException.TooManyLogins(""String_Node_Str"" + s + ""String_Node_Str"");
    }
    if (user2stream.size() > 1000) {
      user2stream.clear();
    }
    user2stream.put(jtwit.getScreenName(),this);
  }
  String url=""String_Node_Str"" + method + ""String_Node_Str"";
  Map<String,String> vars=new HashMap();
  if (follow != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(follow,0,Integer.MAX_VALUE));
  }
  if (track != null) {
    vars.put(""String_Node_Str"",InternalUtils.join(track,0,Integer.MAX_VALUE));
  }
  HttpURLConnection con=client.post2_connect(url,vars);
  return con;
}"
43145,"/** 
 * @param client This will have it's timeout set to 90 seconds.So you probably don't want to reuse the object with the REST api. 
 */
public TwitterStream(Twitter jtwit){
  super(jtwit);
}","/** 
 * @param client This will have it's timeout set to 90 seconds.So you probably don't want to reuse the object with the REST api.
 */
public TwitterStream(Twitter jtwit){
  super(jtwit);
}"
43146,"/** 
 * 25 0.1-360 degree location boxes. Only tweets that are both created using the Geotagging API and are placed from within a tracked bounding box will be included in the stream – the user’s location field is not used to filter tweets
 * @param boundingBoxes Each element consists of longitude/latitude south-west, north-east.	 
 */
public void setLocation(List<double[]> boundingBoxes){
  method=KMethod.filter;
  this.locns=boundingBoxes;
  throw new TodoException();
}","/** 
 * 25 0.1-360 degree location boxes. Only tweets that are both created using the Geotagging API and are placed from within a tracked bounding box will be included in the stream – the user’s location field is not used to filter tweets
 * @param boundingBoxes Each element consists of longitude/latitude south-west, north-east.
 */
public void setLocation(List<double[]> boundingBoxes){
  method=KMethod.filter;
  this.locns=boundingBoxes;
  throw new TodoException();
}"
43147,"/** 
 * , 5,000 follow userids and 
 * @param userIds
 */
public void setFollowUsers(List<Long> userIds){
  method=KMethod.filter;
  follow=userIds;
}","/** 
 * , 5,000 follow userids and
 * @param userIds
 */
public void setFollowUsers(List<Long> userIds){
  method=KMethod.filter;
  follow=userIds;
}"
43148,"/** 
 * @return
 * @see org.jenkinsci.plugins.GithubRequireOrganizationMembershipACL#getAdminUserNameList()
 */
public String getAdminUserNames(){
  return StringUtils.join(rootACL.getAdminUserNameList(),""String_Node_Str"");
}","/** 
 * @return
 * @see org.jenkinsci.plugins.GithubRequireOrganizationMembershipACL#getAdminUserNameList()
 */
public String getAdminUserNames(){
  return StringUtils.join(rootACL.getAdminUserNameList().iterator(),""String_Node_Str"");
}"
43149,"/** 
 * @return
 * @see org.jenkinsci.plugins.GithubRequireOrganizationMembershipACL#getOrganizationNameList()
 */
public String getOrganizationNames(){
  return StringUtils.join(rootACL.getOrganizationNameList(),""String_Node_Str"");
}","/** 
 * @return
 * @see org.jenkinsci.plugins.GithubRequireOrganizationMembershipACL#getOrganizationNameList()
 */
public String getOrganizationNames(){
  return StringUtils.join(rootACL.getOrganizationNameList().iterator(),""String_Node_Str"");
}"
43150,"/** 
 * @return the uri to Github (varies for Github Enterprise Edition)
 */
public String getGithubUri(){
  return githubUri;
}","/** 
 * @return the uri to Github (varies for Github Enterprise Edition)
 */
public String getGithubUri(){
  if (githubUri == null)   return DEFAULT_URI;
 else   return githubUri;
}"
43151,"@Override public boolean hasPermission(Authentication a,Permission permission){
  if (a != null && a instanceof GithubAuthenticationToken) {
    GithubAuthenticationToken authenticationToken=(GithubAuthenticationToken)a;
    String candidateName=a.getName();
    if (adminUserNameList.contains(candidateName))     return true;
    for (    String organizationName : this.organizationNameList) {
      if (authenticationToken.hasOrganizationPermission(candidateName,organizationName)) {
        String[] parts=permission.getId().split(""String_Node_Str"");
        String test=parts[parts.length - 1].toLowerCase();
        if (test.equals(""String_Node_Str"") || test.equals(""String_Node_Str""))         return true;
      }
    }
    return false;
  }
 else {
    String p=a.getName();
    if (p.equals(SYSTEM.getPrincipal())) {
      return true;
    }
    if (adminUserNameList.contains(p)) {
      return true;
    }
 else {
      if (a.getName().equals(""String_Node_Str"") || authenticatedUserReadPermission) {
        String[] parts=permission.getId().split(""String_Node_Str"");
        if (parts[parts.length - 1].toLowerCase().equals(""String_Node_Str""))         return true;
      }
    }
    return false;
  }
}","@Override public boolean hasPermission(Authentication a,Permission permission){
  if (a != null && a instanceof GithubAuthenticationToken) {
    GithubAuthenticationToken authenticationToken=(GithubAuthenticationToken)a;
    String candidateName=a.getName();
    if (adminUserNameList.contains(candidateName))     return true;
    if (authenticatedUserReadPermission) {
      String[] parts=permission.getId().split(""String_Node_Str"");
      if (parts[parts.length - 1].toLowerCase().equals(""String_Node_Str""))       return true;
    }
    for (    String organizationName : this.organizationNameList) {
      if (authenticationToken.hasOrganizationPermission(candidateName,organizationName)) {
        String[] parts=permission.getId().split(""String_Node_Str"");
        String test=parts[parts.length - 1].toLowerCase();
        if (test.equals(""String_Node_Str"") || test.equals(""String_Node_Str""))         return true;
      }
    }
    return false;
  }
 else {
    String p=a.getName();
    if (p.equals(SYSTEM.getPrincipal())) {
      return true;
    }
    if (a.getName().equals(""String_Node_Str"")) {
      return false;
    }
    if (adminUserNameList.contains(p)) {
      return true;
    }
    return false;
  }
}"
43152,"public Set<String> getKindsPerNamespace(String namespace){
  return getSet(Entities.KIND_METADATA_KIND);
}","public Set<String> getKindsPerNamespace(String namespace){
  String oldNS=NamespaceManager.get();
  NamespaceManager.set(namespace);
  try {
    return getSet(Entities.KIND_METADATA_KIND);
  }
  finally {
    NamespaceManager.set(oldNS);
  }
}"
43153,"public String apply(Entity input){
  return input.getKey().getName();
}","public String apply(Entity entity){
  if (entity.getKey().getId() == Entities.NAMESPACE_METADATA_EMPTY_ID) {
    return ""String_Node_Str"";
  }
 else {
    return entity.getKey().getName();
  }
}"
43154,"public Set<String> getNamespaces(){
  return getSet(Entities.NAMESPACE_METADATA_KIND);
}","public Set<String> getNamespaces(){
  String oldNS=NamespaceManager.get();
  NamespaceManager.set(""String_Node_Str"");
  try {
    return getSet(Entities.NAMESPACE_METADATA_KIND);
  }
  finally {
    NamespaceManager.set(oldNS);
  }
}"
43155,"@Test public void testInternalAPI() throws Exception {
  DatastoreService ds=DatastoreServiceFactory.getDatastoreService();
  if (isJBossImpl(ds))   return;
  Set<Key> keys=new HashSet<Key>();
  try {
    ds.put(new Entity(""String_Node_Str""));
    NamespaceManager.set(""String_Node_Str"");
    Entity entity=new Entity(""String_Node_Str"");
    Key k1=ds.put(entity);
    NamespaceManager.set(""String_Node_Str"");
    ds.put(new Entity(""String_Node_Str""));
    sync(1000);
    org.jboss.capedwarf.datastore.NamespaceServiceInternal ns=org.jboss.capedwarf.datastore.NamespaceServiceFactory.getNamespaceService();
    Set<String> namespaces=ns.getNamespaces();
    Assert.assertEquals(new HashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),namespaces);
    Set<String> kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    Assert.assertEquals(new HashSet<String>(Arrays.asList(""String_Node_Str"")),kinds);
    kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    Assert.assertEquals(new HashSet<String>(Arrays.asList(""String_Node_Str"")),kinds);
    kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    Assert.assertEquals(new HashSet<String>(Arrays.asList(""String_Node_Str"")),kinds);
    keys.remove(k1);
    ds.delete(k1);
    sync(1000);
    namespaces=ns.getNamespaces();
    Assert.assertEquals(new HashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")),namespaces);
    kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    Assert.assertEquals(new HashSet<String>(),kinds);
  }
  finally {
    ds.delete(keys);
  }
}","@Test public void testInternalAPI() throws Exception {
  DatastoreService ds=DatastoreServiceFactory.getDatastoreService();
  if (!isJBossImpl(ds))   return;
  Set<Key> keys=new HashSet<Key>();
  try {
    ds.put(new Entity(""String_Node_Str""));
    NamespaceManager.set(""String_Node_Str"");
    Entity entity=new Entity(""String_Node_Str"");
    Key k1=ds.put(entity);
    NamespaceManager.set(""String_Node_Str"");
    ds.put(new Entity(""String_Node_Str""));
    sync(1000);
    NamespaceServiceInternal ns=NamespaceServiceFactory.getNamespaceService();
    Set<String> namespaces=ns.getNamespaces();
    assertEquals(asSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),namespaces);
    Set<String> kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    assertEquals(asSet(""String_Node_Str""),kinds);
    kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    assertEquals(asSet(""String_Node_Str""),kinds);
    kinds=ns.getKindsPerNamespace(""String_Node_Str"");
    assertEquals(asSet(""String_Node_Str""),kinds);
  }
  finally {
    ds.delete(keys);
  }
}"
43156,"private FetchOptions createAppLogFetchOptions(LogQuery logQuery){
  FetchOptions fetchOptions=FetchOptions.Builder.withDefaults();
  if (logQuery.getBatchSize() != null) {
    fetchOptions=fetchOptions.limit(logQuery.getBatchSize());
  }
  return fetchOptions;
}","private FetchOptions createAppLogFetchOptions(LogQuery logQuery){
  FetchOptions fetchOptions=FetchOptions.Builder.withDefaults();
  if (logQuery.getBatchSize() != null) {
    fetchOptions=fetchOptions.chunkSize(logQuery.getBatchSize());
  }
  return fetchOptions;
}"
43157,"public List<String> getEntityKinds(){
  Set<String> set=new TreeSet<String>();
  for (  Entity entity : getDatastore().prepare(new Query()).asIterable()) {
    if (entity != null) {
      set.add(entity.getKind());
    }
  }
  return new ArrayList<String>(set);
}","public List<String> getEntityKinds(){
  NamespaceServiceInternal namespaceService=NamespaceServiceFactory.getNamespaceService();
  Set<String> set=namespaceService.getKindsPerNamespace(getSelectedNamespace());
  List<String> list=new ArrayList<String>(set);
  Collections.sort(list);
  return list;
}"
43158,"@Deployment public static WebArchive getDeployment(){
  return getCapedwarfDeployment();
}","@Deployment public static WebArchive getDeployment(){
  return getCapedwarfDeployment().addClass(AbstractTest.class);
}"
43159,"@Deployment public static Archive getDeployment(){
  final WebArchive war=getCapedwarfDeployment();
  war.addClass(AbstractLoggingTest.class);
  war.addAsWebInfResource(""String_Node_Str"",""String_Node_Str"");
  war.addAsWebInfResource(""String_Node_Str"");
  return war;
}","@Deployment public static Archive getDeployment(){
  final TestContext context=new TestContext().setAppEngineWebXmlFile(""String_Node_Str"");
  final WebArchive war=getCapedwarfDeployment(context);
  war.addClass(AbstractLoggingTest.class);
  war.addAsWebInfResource(""String_Node_Str"");
  return war;
}"
43160,"@Test public void testGetIndexes(){
  Index fooIndex=createIndex(""String_Node_Str"");
  Index barIndex=createIndex(""String_Node_Str"");
  GetResponse<Index> response=service.getIndexes(GetIndexesRequest.newBuilder());
  assertEquals(Arrays.asList(barIndex,fooIndex),response.getResults());
}","@Test public void testGetIndexes(){
  Index fooIndex=createIndex(""String_Node_Str"");
  Index barIndex=createIndex(""String_Node_Str"");
  GetResponse<Index> response=service.getIndexes(GetIndexesRequest.newBuilder());
  assertEquals(Arrays.asList(barIndex,fooIndex),response.getResults());
  ListIndexesResponse lir=service.listIndexes(ListIndexesRequest.newBuilder().build());
  assertEquals(Arrays.asList(barIndex,fooIndex),lir.getIndexes());
}"
43161,"protected static WebArchive getBaseDeployment(){
  return getCapedwarfDeployment().addClass(PersistingTest.class);
}","protected static WebArchive getBaseDeployment(){
  return getCapedwarfDeployment().addClasses(PersistingTest.class,AbstractTest.class);
}"
43162,"@Deployment public static WebArchive getDeployment(){
  return getCapedwarfDeployment();
}","@Deployment public static WebArchive getDeployment(){
  return getCapedwarfDeployment().addClass(X.class);
}"
43163,"protected static WebArchive getBaseDeployment(){
  final TestContext context=new TestContext().setIgnoreLogging(true);
  final WebArchive war=getCapedwarfDeployment(context);
  war.addPackage(Client.class.getPackage());
  war.addClass(AbstractJPATest.class);
  war.addClass(SimpleJPATest.class);
  return war;
}","protected static WebArchive getBaseDeployment(){
  final TestContext context=new TestContext().setIgnoreLogging(true);
  final WebArchive war=getCapedwarfDeployment(context);
  war.addPackage(Client.class.getPackage());
  war.addClass(AbstractTest.class);
  war.addClass(AbstractJPATest.class);
  war.addClass(SimpleJPATest.class);
  return war;
}"
43164,"public ListIndexesResponse listIndexes(ListIndexesRequest request){
  final GetIndexesRequest.Builder builder=GetIndexesRequest.newBuilder();
  boolean includeStartIndex=false;
  try {
    includeStartIndex=request.isIncludeStartIndex();
  }
 catch (  NullPointerException ignore) {
  }
  builder.setIncludeStartIndex(includeStartIndex);
  builder.setIndexNamePrefix(request.getIndexNamePrefix());
  builder.setLimit(request.getLimit());
  builder.setNamespace(request.getNamespace());
  builder.setOffset(request.getOffset());
  final Boolean schemaFetched=request.isSchemaFetched();
  builder.setSchemaFetched(schemaFetched != null && schemaFetched);
  builder.setStartIndexName(request.getStartIndexName());
  return new ListIndexesResponse(getIndexes(builder.build()).getResults()){
  }
;
}","public ListIndexesResponse listIndexes(ListIndexesRequest request){
  final GetIndexesRequest.Builder builder=GetIndexesRequest.newBuilder();
  boolean includeStartIndex=false;
  try {
    includeStartIndex=request.isIncludeStartIndex();
  }
 catch (  NullPointerException ignore) {
  }
  builder.setIncludeStartIndex(includeStartIndex);
  builder.setIndexNamePrefix(request.getIndexNamePrefix());
  builder.setLimit(Util.defaultIfNull(request.getLimit(),20));
  builder.setNamespace(request.getNamespace());
  builder.setOffset(Util.defaultIfNull(request.getOffset(),0));
  final Boolean schemaFetched=request.isSchemaFetched();
  builder.setSchemaFetched(schemaFetched != null && schemaFetched);
  builder.setStartIndexName(request.getStartIndexName());
  return new ListIndexesResponse(getIndexes(builder.build()).getResults()){
  }
;
}"
43165,"public ListIndexesResponse listIndexes(ListIndexesRequest request){
  final GetIndexesRequest.Builder builder=GetIndexesRequest.newBuilder();
  builder.setIncludeStartIndex(request.isIncludeStartIndex());
  builder.setIndexNamePrefix(request.getIndexNamePrefix());
  builder.setLimit(request.getLimit());
  builder.setNamespace(request.getNamespace());
  builder.setOffset(request.getOffset());
  builder.setSchemaFetched(request.isSchemaFetched());
  builder.setStartIndexName(request.getStartIndexName());
  return new ListIndexesResponse(getIndexes(builder.build()).getResults()){
  }
;
}","public ListIndexesResponse listIndexes(ListIndexesRequest request){
  final GetIndexesRequest.Builder builder=GetIndexesRequest.newBuilder();
  boolean includeStartIndex=false;
  try {
    includeStartIndex=request.isIncludeStartIndex();
  }
 catch (  NullPointerException ignore) {
  }
  builder.setIncludeStartIndex(includeStartIndex);
  builder.setIndexNamePrefix(request.getIndexNamePrefix());
  builder.setLimit(request.getLimit());
  builder.setNamespace(request.getNamespace());
  builder.setOffset(request.getOffset());
  final Boolean schemaFetched=request.isSchemaFetched();
  builder.setSchemaFetched(schemaFetched != null && schemaFetched);
  builder.setStartIndexName(request.getStartIndexName());
  return new ListIndexesResponse(getIndexes(builder.build()).getResults()){
  }
;
}"
43166,"private static int readIndex(Cursor cursor){
  try {
    return getIndex.invoke(cursor);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public static int readIndex(Cursor cursor){
  try {
    return getIndex.invoke(cursor);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
43167,"protected void apply(){
  final CacheQuery cacheQuery=holder.getCacheQuery();
  final Integer offset=fetchOptions.getOffset();
  if (offset != null) {
    cacheQuery.firstResult(offset);
  }
  final Integer limit=fetchOptions.getLimit();
  if (limit != null) {
    cacheQuery.maxResults(limit);
  }
  final Cursor start=fetchOptions.getStartCursor();
  if (start != null) {
    JBossCursorHelper.applyStartCursor(start,cacheQuery);
  }
  final Cursor end=fetchOptions.getEndCursor();
  if (end != null) {
    JBossCursorHelper.applyEndCursor(end,cacheQuery,start);
  }
}","protected void apply(){
  final CacheQuery cacheQuery=holder.getCacheQuery();
  Integer offset=fetchOptions.getOffset();
  Integer cursorOffset=null;
  Cursor startCursor=fetchOptions.getStartCursor();
  if (startCursor != null) {
    cursorOffset=JBossCursorHelper.readIndex(startCursor);
  }
  if (offset != null || cursorOffset != null) {
    offset=(offset == null ? 0 : offset) + (cursorOffset == null ? 0 : cursorOffset);
    cacheQuery.firstResult(offset);
  }
  Integer limit=fetchOptions.getLimit();
  Integer cursorLimit=null;
  Cursor endCursor=fetchOptions.getEndCursor();
  if (endCursor != null) {
    int last=JBossCursorHelper.readIndex(endCursor) - 1;
    int first=(offset == null) ? 0 : offset;
    cursorLimit=last - first + 1;
  }
  if (limit != null || cursorLimit != null) {
    cacheQuery.maxResults(Math.min(limit == null ? Integer.MAX_VALUE : limit,cursorLimit == null ? Integer.MAX_VALUE : cursorLimit));
  }
}"
43168,"@Ignore(""String_Node_Str"") @Test public void testLimit(){
  FetchOptions.Builder.withLimit(1);
}","@Test public void testLimit(){
  List<Entity> results=executeQuery(withLimit(2));
  assertEquals(asList(foo1,foo2),results);
}"
43169,"@Ignore(""String_Node_Str"") @Test public void testOffset(){
  FetchOptions.Builder.withOffset(1);
}","@Test public void testOffset(){
  List<Entity> results=executeQuery(withOffset(3));
  assertEquals(asList(foo4,foo5),results);
}"
43170,"private boolean namespaceMatches(CacheKey key){
  return key.getNamespace().equals(namespace);
}","private boolean namespaceMatches(CacheKey key){
  return key.getNamespace().equals(resolveNamespace());
}"
43171,"public Map<Key,Entity> get(Transaction tx,Iterable<Key> keyIterable){
  final javax.transaction.Transaction transaction=beforeTx(tx);
  try {
    Map<Key,Entity> result=new HashMap<Key,Entity>();
    for (    Key key : keyIterable)     result.put(key,store.get(key));
    return result;
  }
  finally {
    afterTx(transaction);
  }
}","public Map<Key,Entity> get(Transaction tx,Iterable<Key> keyIterable){
  final javax.transaction.Transaction transaction=beforeTx(tx);
  try {
    Map<Key,Entity> result=new HashMap<Key,Entity>();
    for (    Key key : keyIterable) {
      Entity entity=store.get(key);
      result.put(key,entity == null ? null : entity.clone());
    }
    return result;
  }
  finally {
    afterTx(transaction);
  }
}"
43172,"@Test public void testMultipleEntityGroupsInSingleTransactionAreNotAllowed(){
  Transaction tx=service.beginTransaction();
  try {
    Entity person=new Entity(""String_Node_Str"",""String_Node_Str"");
    service.put(person);
    try {
      Entity photoNotAChild=new Entity(""String_Node_Str"");
      photoNotAChild.setProperty(""String_Node_Str"",""String_Node_Str"");
      service.put(photoNotAChild);
      Assert.fail(""String_Node_Str"");
    }
 catch (    IllegalArgumentException ex) {
    }
  }
  finally {
    tx.rollback();
  }
}","@Test public void testMultipleEntityGroupsInSingleTransactionAreNotAllowed(){
  Transaction tx=service.beginTransaction();
  try {
    Entity person=new Entity(""String_Node_Str"",""String_Node_Str"");
    service.put(person);
    try {
      Entity photoNotAChild=new Entity(""String_Node_Str"");
      photoNotAChild.setProperty(""String_Node_Str"",""String_Node_Str"");
      service.put(photoNotAChild);
      fail(""String_Node_Str"");
    }
 catch (    IllegalArgumentException ex) {
    }
  }
  finally {
    tx.rollback();
  }
}"
43173,"@Test public void testNoIdKey() throws Exception {
  Entity entity=new Entity(""String_Node_Str"");
  Key key=service.put(entity);
  Assert.assertTrue(key.isComplete());
}","@Test public void testNoIdKey() throws Exception {
  Entity entity=new Entity(""String_Node_Str"");
  Key key=service.put(entity);
  assertTrue(key.isComplete());
}"
43174,"@Test public void testNested() throws Exception {
  assertTxs();
  Entity e1=createTestEntity(""String_Node_Str"",1);
  Transaction t1=service.beginTransaction();
  service.put(t1,e1);
  assertStoreContains(e1);
  assertTxs(t1);
  Assert.assertTrue(t1.isActive());
  Transaction t2=service.beginTransaction();
  Entity e2=createTestEntity(""String_Node_Str"",2);
  service.put(e2);
  assertTxs(t1,t2);
  Assert.assertTrue(t1.isActive());
  Assert.assertTrue(t2.isActive());
  assertStoreContains(e2);
  t2.rollback();
  assertTxs(t1);
  Assert.assertTrue(t1.isActive());
  assertStoreDoesNotContain(e2);
  t1.commit();
  assertStoreContains(e1);
  assertTxs();
}","@Test public void testNested() throws Exception {
  assertTxs();
  Entity e1=createTestEntity(""String_Node_Str"",1);
  Transaction t1=service.beginTransaction();
  service.put(t1,e1);
  assertStoreContains(e1);
  assertTxs(t1);
  assertTrue(t1.isActive());
  Transaction t2=service.beginTransaction();
  Entity e2=createTestEntity(""String_Node_Str"",2);
  service.put(e2);
  assertTxs(t1,t2);
  assertTrue(t1.isActive());
  assertTrue(t2.isActive());
  assertStoreContains(e2);
  t2.rollback();
  assertTxs(t1);
  assertTrue(t1.isActive());
  assertStoreDoesNotContain(e2);
  t1.commit();
  assertStoreContains(e1);
  assertTxs();
}"
43175,"protected void assertTxs(Transaction... txs){
  Collection<Transaction> transactions=service.getActiveTransactions();
  Assert.assertNotNull(txs);
  Set<Transaction> expected=new HashSet<Transaction>(transactions);
  Set<Transaction> existing=new HashSet<Transaction>(Arrays.asList(txs));
  Assert.assertEquals(expected,existing);
}","protected void assertTxs(Transaction... txs){
  Collection<Transaction> transactions=service.getActiveTransactions();
  assertNotNull(txs);
  Set<Transaction> expected=new HashSet<Transaction>(transactions);
  Set<Transaction> existing=new HashSet<Transaction>(Arrays.asList(txs));
  assertEquals(expected,existing);
}"
43176,"public void delete(Transaction tx,Iterable<Key> keyIterable){
  boolean newTx=(tx == null);
  if (newTx)   tx=beginTransaction();
  try {
    for (    Key key : keyIterable)     store.remove(key);
    if (newTx) {
      newTx=false;
      tx.commit();
    }
  }
 catch (  Throwable t) {
    if (newTx)     tx.rollback();
    throw new RuntimeException(t);
  }
}","public void delete(Transaction tx,Iterable<Key> keyIterable){
  boolean newTx=(tx == null);
  if (newTx)   tx=beginTransaction();
  try {
    for (    Key key : keyIterable) {
      EntityGroupTracker.trackKey(tx,key);
      store.remove(key);
    }
    if (newTx) {
      newTx=false;
      tx.commit();
    }
  }
 catch (  Throwable t) {
    if (newTx)     tx.rollback();
    throw new RuntimeException(t);
  }
}"
43177,"public List<Key> put(Transaction tx,Iterable<Entity> entityIterable){
  boolean newTx=(tx == null);
  if (newTx)   tx=beginTransaction();
  try {
    List<Key> list=new ArrayList<Key>();
    for (    Entity entity : entityIterable) {
      Key key=entity.getKey();
      if (key.isComplete() == false) {
        long id=KeyGenerator.generateKeyId(key);
        ReflectionUtils.invokeInstanceMethod(key,""String_Node_Str"",Long.TYPE,id);
      }
      EntityGroupTracker.trackEntity(tx,entity);
      store.put(key,modify(entity));
      list.add(key);
    }
    if (newTx) {
      newTx=false;
      tx.commit();
    }
    return list;
  }
 catch (  Throwable t) {
    if (newTx)     tx.rollback();
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t);
    }
  }
}","public List<Key> put(Transaction tx,Iterable<Entity> entityIterable){
  boolean newTx=(tx == null);
  if (newTx)   tx=beginTransaction();
  try {
    List<Key> list=new ArrayList<Key>();
    for (    Entity entity : entityIterable) {
      final Key key=entity.getKey();
      if (key.isComplete() == false) {
        long id=KeyGenerator.generateKeyId(key);
        ReflectionUtils.invokeInstanceMethod(key,""String_Node_Str"",Long.TYPE,id);
      }
      EntityGroupTracker.trackKey(tx,key);
      store.put(key,modify(entity));
      list.add(key);
    }
    if (newTx) {
      newTx=false;
      tx.commit();
    }
    return list;
  }
 catch (  Throwable t) {
    if (newTx)     tx.rollback();
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t);
    }
  }
}"
43178,"@Test public void testAllocateId() throws Exception {
  KeyRange keys=service.allocateIds(""String_Node_Str"",10L);
  Assert.assertNotNull(keys);
  Key start=keys.getStart();
  Assert.assertNotNull(start);
  Assert.assertEquals(1,start.getId());
  Key end=keys.getStart();
  Assert.assertNotNull(end);
  Assert.assertEquals(10,end.getId());
}","@Test public void testAllocateId() throws Exception {
  KeyRange keys=service.allocateIds(""String_Node_Str"",10L);
  Assert.assertNotNull(keys);
  Key start=keys.getStart();
  Assert.assertNotNull(start);
  Assert.assertEquals(1,start.getId());
  Key end=keys.getEnd();
  Assert.assertNotNull(end);
  Assert.assertEquals(10,end.getId());
}"
43179,"@Test public void testCheckKeyRange() throws Exception {
  KeyRange kr1=new KeyRange(null,""String_Node_Str"",1,5);
  DatastoreService.KeyRangeState state1=service.allocateIdRange(kr1);
  Assert.assertNotNull(state1);
  Assert.assertSame(DatastoreService.KeyRangeState.CONTENTION,state1);
  KeyRange kr2=service.allocateIds(""String_Node_Str"",6);
  Assert.assertNotNull(kr2);
  KeyRange kr3=new KeyRange(null,""String_Node_Str"",2,5);
  DatastoreService.KeyRangeState state2=service.allocateIdRange(kr3);
  Assert.assertNotNull(state2);
  Assert.assertSame(DatastoreService.KeyRangeState.COLLISION,state1);
}","@Test public void testCheckKeyRange() throws Exception {
  KeyRange kr1=new KeyRange(null,""String_Node_Str"",1,5);
  DatastoreService.KeyRangeState state1=service.allocateIdRange(kr1);
  Assert.assertNotNull(state1);
  Assert.assertSame(DatastoreService.KeyRangeState.CONTENTION,state1);
  KeyRange kr2=service.allocateIds(""String_Node_Str"",6);
  Assert.assertNotNull(kr2);
  KeyRange kr3=new KeyRange(null,""String_Node_Str"",2,5);
  DatastoreService.KeyRangeState state2=service.allocateIdRange(kr3);
  Assert.assertNotNull(state2);
  Assert.assertSame(DatastoreService.KeyRangeState.COLLISION,state2);
}"
43180,"@Test public void putStoresAllGivenEntities() throws Exception {
  Collection<Entity> entities=createTestEntities();
  service.put(entities);
  assertStoreContainsAll(entities);
}","@Test public void putStoresAllGivenEntities() throws Exception {
  Collection<Entity> entities=createTestEntities();
  for (  Entity e : entities) {
    service.put(e);
  }
  assertStoreContainsAll(entities);
}"
43181,"@Test public void deleteRemovesAllGivenEntities() throws Exception {
  Collection<Entity> entities=createTestEntities();
  Collection<Key> keys=extractKeys(entities);
  service.put(entities);
  service.delete(keys);
  assertStoreDoesNotContain(keys);
}","@Test public void deleteRemovesAllGivenEntities() throws Exception {
  Collection<Entity> entities=createTestEntities();
  Collection<Key> keys=extractKeys(entities);
  for (  Entity e : entities) {
    service.put(e);
  }
  for (  Key k : keys) {
    service.delete(k);
  }
  assertStoreDoesNotContain(keys);
}"
43182,"public void clearLog(){
  Query query=new Query(LOG_LINE_ENTITY_KIND);
  Iterable<Entity> entities=DatastoreServiceFactory.getDatastoreService().prepare(query).asIterable();
  List<Key> keys=new LinkedList<Key>();
  for (  Entity entity : entities) {
    keys.add(entity.getKey());
  }
  DatastoreServiceFactory.getDatastoreService().delete(keys);
}","public void clearLog(){
  final DatastoreService ds=DatastoreServiceFactory.getDatastoreService();
  Query query=new Query(LOG_LINE_ENTITY_KIND);
  Iterable<Entity> entities=ds.prepare(query).asIterable();
  for (  Entity entity : entities) {
    ds.delete(entity.getKey());
  }
}"
43183,"private void fetchAppLogLines(LogQuery logQuery,Map<Key,RequestLogs> map){
  Query query=createAppLogLinesQuery(logQuery);
  FetchOptions fetchOptions=createAppLogFetchOptions(logQuery);
  List<Entity> entities=DatastoreServiceFactory.getDatastoreService().prepare(query).asList(fetchOptions);
  for (  Entity entity : entities) {
    AppLogLine logLine=new AppLogLine();
    logLine.setLogLevel(LogLevel.values()[(Integer)entity.getProperty(LOG_LINE_LEVEL)]);
    logLine.setLogMessage((String)entity.getProperty(LOG_LINE_MESSAGE));
    logLine.setTimeUsec((Long)entity.getProperty(LOG_LINE_MILLIS));
    RequestLogs requestLogs=map.get((Key)entity.getProperty(LOG_LINE_REQUEST_KEY));
    requestLogs.getAppLogLines().add(logLine);
  }
}","private void fetchAppLogLines(LogQuery logQuery,Map<Key,RequestLogs> map){
  Query query=createAppLogLinesQuery(logQuery);
  FetchOptions fetchOptions=createAppLogFetchOptions(logQuery);
  List<Entity> entities=DatastoreServiceFactory.getDatastoreService().prepare(query).asList(fetchOptions);
  for (  Entity entity : entities) {
    AppLogLine logLine=new AppLogLine();
    logLine.setLogLevel(LogLevel.values()[((Number)entity.getProperty(LOG_LINE_LEVEL)).intValue()]);
    logLine.setLogMessage((String)entity.getProperty(LOG_LINE_MESSAGE));
    logLine.setTimeUsec((Long)entity.getProperty(LOG_LINE_MILLIS));
    RequestLogs requestLogs=map.get((Key)entity.getProperty(LOG_LINE_REQUEST_KEY));
    requestLogs.getAppLogLines().add(logLine);
  }
}"
43184,"/** 
 * Find method.
 * @param clazz      the class
 * @param methodName the method name
 * @param types      the types
 * @return method's return value
 */
private static Method findMethod(Class<?> clazz,String methodName,Class[] types){
  if (clazz == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (methodName == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    Class<?> current=clazz;
    while (current != null) {
      try {
        final Method m=clazz.getDeclaredMethod(methodName,types);
        m.setAccessible(true);
        return m;
      }
 catch (      NoSuchMethodException ignored) {
      }
      current=current.getSuperclass();
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
  throw new IllegalStateException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ methodName);
}","/** 
 * Find method.
 * @param clazz      the class
 * @param methodName the method name
 * @param types      the types
 * @return method's return value
 */
private static Method findMethod(Class<?> clazz,String methodName,Class[] types){
  if (clazz == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (methodName == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    Class<?> current=clazz;
    while (current != null) {
      try {
        final Method m=current.getDeclaredMethod(methodName,types);
        m.setAccessible(true);
        return m;
      }
 catch (      NoSuchMethodException ignored) {
      }
      current=current.getSuperclass();
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
  throw new IllegalStateException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ methodName);
}"
43185,"@SuppressWarnings(""String_Node_Str"") public void enhanceMessage(Message message) throws Exception {
  final Map<String,List<String>> headers=(Map<String,List<String>>)ReflectionUtils.invokeInstanceMethod(taskOptions,""String_Node_Str"");
  if (headers != null) {
    final Map<String,String> map=new HashMap<String,String>();
    for (    Map.Entry<String,List<String>> entry : headers.entrySet()) {
      final StringBuilder builder=new StringBuilder();
      final List<String> list=entry.getValue();
      if (list.isEmpty() == false) {
        builder.append(list.get(0));
        for (int i=1; i < list.size(); i++) {
          builder.append(TasksServletRequestCreator.DELIMITER).append(list.get(i));
        }
      }
      final String key=entry.getKey();
      map.put(key,builder.toString());
    }
    TasksServletRequestCreator.put(message,TasksServletRequestCreator.HEADERS,map);
  }
  final List<Object> params=(List<Object>)ReflectionUtils.invokeInstanceMethod(taskOptions,""String_Node_Str"");
  if (params != null) {
    final Map<String,String> map=new HashMap<String,String>();
    for (    Object param : params) {
      final String key=(String)ReflectionUtils.invokeInstanceMethod(param,""String_Node_Str"");
      final String value=(String)ReflectionUtils.invokeInstanceMethod(param,""String_Node_Str"");
      map.put(key,value);
    }
    TasksServletRequestCreator.put(message,TasksServletRequestCreator.PARAMS,map);
  }
}","@SuppressWarnings(""String_Node_Str"") public void enhanceMessage(Message message) throws Exception {
  final Map<String,List<String>> headers=(Map<String,List<String>>)ReflectionUtils.invokeInstanceMethod(taskOptions,""String_Node_Str"");
  if (headers != null && headers.size() > 0) {
    final Map<String,String> map=new HashMap<String,String>();
    for (    Map.Entry<String,List<String>> entry : headers.entrySet()) {
      final StringBuilder builder=new StringBuilder();
      final List<String> list=entry.getValue();
      if (list.isEmpty() == false) {
        builder.append(list.get(0));
        for (int i=1; i < list.size(); i++) {
          builder.append(TasksServletRequestCreator.DELIMITER).append(list.get(i));
        }
      }
      final String key=entry.getKey();
      map.put(key,builder.toString());
    }
    TasksServletRequestCreator.put(message,TasksServletRequestCreator.HEADERS,map);
  }
  final List<Object> params=(List<Object>)ReflectionUtils.invokeInstanceMethod(taskOptions,""String_Node_Str"");
  if (params != null && params.size() > 0) {
    final Map<String,String> map=new HashMap<String,String>();
    for (    Object param : params) {
      final String key=(String)ReflectionUtils.invokeInstanceMethod(param,""String_Node_Str"");
      final String value=(String)ReflectionUtils.invokeInstanceMethod(param,""String_Node_Str"");
      map.put(key,value);
    }
    TasksServletRequestCreator.put(message,TasksServletRequestCreator.PARAMS,map);
  }
}"
43186,"@Test @Ignore public void testParams() throws Exception {
  final Queue queue=QueueFactory.getQueue(""String_Node_Str"");
  queue.add(TaskOptions.Builder.withParam(""String_Node_Str"",""String_Node_Str"").url(URL));
}","@Test public void testParams() throws Exception {
  final Queue queue=QueueFactory.getQueue(""String_Node_Str"");
  queue.add(TaskOptions.Builder.withParam(""String_Node_Str"",""String_Node_Str"").url(URL));
}"
43187,"@Test @Ignore public void testPayload() throws Exception {
  final Queue queue=QueueFactory.getQueue(""String_Node_Str"");
  queue.add(TaskOptions.Builder.withPayload(""String_Node_Str"").url(URL));
}","@Test public void testPayload() throws Exception {
  final Queue queue=QueueFactory.getQueue(""String_Node_Str"");
  queue.add(TaskOptions.Builder.withPayload(""String_Node_Str"").url(URL));
}"
43188,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(""String_Node_Str"").append(mf.getColumnName());
    }
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  dao.execute(createIndexs(en).toArray(new Sql[0]));
  addComment(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    sb.append(makePksName(en));
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  dao.execute(createIndexs(en).toArray(new Sql[0]));
  addComment(dao,en);
  return true;
}"
43189,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isPk() && en.getPks().size() == 1)       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isUnsigned())       sb.append(""String_Node_Str"").append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  List<Sql> sqls=new ArrayList<Sql>();
  sqls.add(Sqls.create(sb.toString()));
  List<MappingField> pks=en.getPks();
  if (pks.size() > 1) {
    StringBuilder pkNames=new StringBuilder();
    StringBuilder pkNames2=new StringBuilder();
    for (    MappingField pk : pks) {
      pkNames.append(pk.getColumnName()).append(',');
      pkNames2.append(pk.getColumnName()).append('_');
    }
    pkNames.setLength(pkNames.length() - 1);
    pkNames2.setLength(pkNames2.length() - 1);
    String sql=String.format(""String_Node_Str"",en.getTableName(),pkNames2,pkNames);
    sqls.add(Sqls.create(sql));
  }
  for (  MappingField mf : en.getMappingFields()) {
    if (!mf.isAutoIncreasement())     continue;
    sqls.add(Sqls.create(gSQL(CSEQ,en.getTableName(),mf.getColumnName())));
    sqls.add(Sqls.create(gSQL(CTRI,en.getTableName(),mf.getColumnName())));
  }
  sqls.addAll(createIndexs(en));
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
  createRelation(dao,en);
  addComment(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isPk() && en.getPks().size() == 1)       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isUnsigned())       sb.append(""String_Node_Str"").append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  List<Sql> sqls=new ArrayList<Sql>();
  sqls.add(Sqls.create(sb.toString()));
  List<MappingField> pks=en.getPks();
  if (pks.size() > 1) {
    StringBuilder pkNames=new StringBuilder();
    for (    MappingField pk : pks) {
      pkNames.append(pk.getColumnName()).append(',');
    }
    pkNames.setLength(pkNames.length() - 1);
    String pkNames2=makePksName(en);
    String sql=String.format(""String_Node_Str"",en.getTableName(),pkNames2,pkNames);
    sqls.add(Sqls.create(sql));
  }
  for (  MappingField mf : en.getMappingFields()) {
    if (!mf.isAutoIncreasement())     continue;
    sqls.add(Sqls.create(gSQL(CSEQ,en.getTableName(),mf.getColumnName())));
    sqls.add(Sqls.create(gSQL(CTRI,en.getTableName(),mf.getColumnName())));
  }
  sqls.addAll(createIndexs(en));
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
  createRelation(dao,en);
  addComment(dao,en);
  return true;
}"
43190,"public String getServerInfo(){
  throw Lang.noImplement();
}","public String getServerInfo(){
  return ""String_Node_Str"";
}"
43191,"private void _evalFieldMacro(Entity<?> en,List<MappingInfo> infos){
  for (  MappingInfo info : infos) {
    if (null != info.annPrev) {
      en.addBeforeInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annPrev.els(),info.annPrev.value())));
    }
    if (null != info.annNext && en.addAfterInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annNext.els(),info.annNext.value())))) {
      continue;
    }
 else     if (null != info.annId && info.annId.auto()) {
      if (expert != null && !expert.isSupportAutoIncrement()) {
        throw new DaoException(""String_Node_Str"");
      }
      en.addAfterInsertMacro(expert.fetchPojoId(en,en.getField(info.name)));
    }
  }
}","private void _evalFieldMacro(Entity<?> en,List<MappingInfo> infos){
  for (  MappingInfo info : infos) {
    if (null != info.annPrev) {
      en.addBeforeInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annPrev.els(),info.annPrev.value())));
    }
    if (null != info.annNext && en.addAfterInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annNext.els(),info.annNext.value())))) {
      continue;
    }
 else     if (null != info.annId && info.annId.auto()) {
      if (expert != null && !expert.isSupportAutoIncrement()) {
        log.debug(""String_Node_Str"");
      }
      en.addAfterInsertMacro(expert.fetchPojoId(en,en.getField(info.name)));
    }
  }
}"
43192,"protected IocValue parseX(Element element) throws Throwable {
  IocValue iocValue=new IocValue();
  String type=element.getNodeName();
  if (EVN_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(EVN_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (SYS_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(SYS_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JNDI_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JNDI_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JAVA_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JAVA_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (REFER_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(REFER_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (FILE_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(FILE_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (OBJ_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(REFER_TAG);
    iocValue.setValue(paserBean(element,true));
  }
 else   if (MAP_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserMap(element));
  }
 else   if (LIST_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element));
  }
 else   if (ARRAY_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element).toArray());
  }
 else   if (SET_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    Set<Object> set=new HashSet<Object>();
    set.addAll(paserCollection(element));
    iocValue.setValue(set);
  }
 else {
    iocValue.setType(null);
    if (element.getFirstChild() != null)     iocValue.setValue(element.getFirstChild().getTextContent());
  }
  return iocValue;
}","protected IocValue parseX(Element element) throws Throwable {
  IocValue iocValue=new IocValue();
  String type=element.getNodeName();
  if (EVN_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(EVN_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (SYS_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(SYS_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JNDI_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JNDI_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JAVA_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JAVA_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (REFER_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(REFER_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (FILE_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(FILE_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (APP_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(APP_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (OBJ_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(REFER_TAG);
    iocValue.setValue(paserBean(element,true));
  }
 else   if (MAP_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserMap(element));
  }
 else   if (LIST_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element));
  }
 else   if (ARRAY_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element).toArray());
  }
 else   if (SET_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    Set<Object> set=new HashSet<Object>();
    set.addAll(paserCollection(element));
    iocValue.setValue(set);
  }
 else {
    iocValue.setType(null);
    if (element.getFirstChild() != null)     iocValue.setValue(element.getFirstChild().getTextContent());
  }
  return iocValue;
}"
43193,"public void visit(Object obj,LinkField lnk){
  Object value=lnk.getValue(obj);
  if (value == null) {
    log.infof(""String_Node_Str"",lnk.getLinkType(),lnk.getEntity().getType().getSimpleName(),lnk.getHostField().getName());
    return;
  }
  final Pojo pojo=opt.maker().makeDelete(lnk.getLinkedEntity());
  pojo.setOperatingObject(value);
  pojo.append(Pojos.Items.cndAuto(lnk.getLinkedEntity(),null));
  Lang.each(value,new Each<Object>(){
    public void invoke(    int i,    Object ele,    int length) throws ExitLoop, LoopException {
      pojo.addParamsBy(ele);
    }
  }
);
  opt.add(pojo);
}","public void visit(Object obj,LinkField lnk){
  Object value=lnk.getValue(obj);
  if (value == null || Lang.length(value) == 0) {
    log.infof(""String_Node_Str"",lnk.getLinkType(),lnk.getEntity().getType().getSimpleName(),lnk.getHostField().getName());
    return;
  }
  final Pojo pojo=opt.maker().makeDelete(lnk.getLinkedEntity());
  pojo.setOperatingObject(value);
  pojo.append(Pojos.Items.cndAuto(lnk.getLinkedEntity(),null));
  Lang.each(value,new Each<Object>(){
    public void invoke(    int i,    Object ele,    int length) throws ExitLoop, LoopException {
      pojo.addParamsBy(ele);
    }
  }
);
  opt.add(pojo);
}"
43194,"/** 
 * 根据函数参数类型数组的最后一个类型（一定是数组，表示变参），为最后一个变参生成一个空数组
 * @param pts 函数参数类型列表
 * @return 变参空数组
 */
public static Object[] blankArrayArg(Class<?>[] pts){
  return (Object[])Array.newInstance(pts[pts.length - 1].getComponentType(),0);
}","/** 
 * 根据函数参数类型数组的最后一个类型（一定是数组，表示变参），为最后一个变参生成一个空数组
 * @param pts 函数参数类型列表
 * @return 变参空数组
 */
public static Object blankArrayArg(Class<?>[] pts){
  return Array.newInstance(pts[pts.length - 1].getComponentType(),0);
}"
43195,"@Test public void testEncode(){
  Response response1=Http.get(""String_Node_Str"");
  assertTrue(""String_Node_Str"".equals(response1.getEncodeType()));
  assertTrue(response1.getContent().indexOf(""String_Node_Str"") > 0);
  Response response2=Http.get(""String_Node_Str"");
  assertTrue(response2.getContent(""String_Node_Str"").indexOf(""String_Node_Str"") > 0);
}","@Test public void testEncode(){
  Response response1=Http.get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",response1.getEncodeType());
  assertTrue(response1.getContent().indexOf(""String_Node_Str"") > 0);
  Response response2=Http.get(""String_Node_Str"");
  assertTrue(response2.getContent(""String_Node_Str"").indexOf(""String_Node_Str"") > 0);
}"
43196,"public static Throwable unwrapThrow(Throwable e){
  if (e == null)   return null;
  if (e instanceof InvocationTargetException) {
    InvocationTargetException itE=(InvocationTargetException)e;
    if (itE.getTargetException() != null)     return unwrapThrow(itE.getTargetException());
  }
  if (e.getCause() != null)   return unwrapThrow(e.getCause());
  return e;
}","public static Throwable unwrapThrow(Throwable e){
  if (e == null)   return null;
  if (e instanceof InvocationTargetException) {
    InvocationTargetException itE=(InvocationTargetException)e;
    if (itE.getTargetException() != null)     return unwrapThrow(itE.getTargetException());
  }
  if (e instanceof RuntimeException && e.getCause() != null && e.getMessage() == null)   return unwrapThrow(e.getCause());
  return e;
}"
43197,"public UrlMapping load(NutConfig config){
  if (log.isInfoEnabled()) {
    log.infof(""String_Node_Str"",Nutz.version());
    log.infof(""String_Node_Str"",config.getAppName());
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    log.debugf(""String_Node_Str"",Encoding.defaultEncoding());
    log.debugf(""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath());
    log.debugf(""String_Node_Str"",System.getProperties().get(""String_Node_Str""));
    log.debugf(""String_Node_Str"",System.getProperties().get(""String_Node_Str""));
    log.debugf(""String_Node_Str"",System.getProperties().get(""String_Node_Str""));
  }
  UrlMapping mapping;
  Stopwatch sw=Stopwatch.begin();
  try {
    Class<?> mainModule=config.getMainModule();
    createContext(config);
    createIoc(config,mainModule);
    mapping=evalUrlMapping(config,mainModule);
    evalLocalization(config,mainModule);
    createSessionProvider(config,mainModule);
    evalSetup(config,mainModule);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(""String_Node_Str"",e);
    throw Lang.wrapThrow(e,LoadingException.class);
  }
  sw.stop();
  if (log.isInfoEnabled())   log.infof(""String_Node_Str"",config.getAppName(),sw.getDuration());
  return mapping;
}","public UrlMapping load(NutConfig config){
  if (log.isInfoEnabled()) {
    log.infof(""String_Node_Str"",Nutz.version());
    log.infof(""String_Node_Str"",config.getAppName());
  }
  if (log.isDebugEnabled()) {
    Properties sys=System.getProperties();
    log.debug(""String_Node_Str"");
    log.debugf(""String_Node_Str"",Encoding.defaultEncoding());
    log.debugf(""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath());
    log.debugf(""String_Node_Str"",sys.get(""String_Node_Str""));
    log.debugf(""String_Node_Str"",sys.get(""String_Node_Str""));
    log.debugf(""String_Node_Str"",sys.get(""String_Node_Str""));
    log.debugf(""String_Node_Str"",sys.get(""String_Node_Str""),sys.get(""String_Node_Str""));
    log.debugf(""String_Node_Str"",config.getServletContext().getServerInfo());
  }
  UrlMapping mapping;
  Stopwatch sw=Stopwatch.begin();
  try {
    Class<?> mainModule=config.getMainModule();
    createContext(config);
    createIoc(config,mainModule);
    mapping=evalUrlMapping(config,mainModule);
    evalLocalization(config,mainModule);
    createSessionProvider(config,mainModule);
    evalSetup(config,mainModule);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(""String_Node_Str"",e);
    throw Lang.wrapThrow(e,LoadingException.class);
  }
  sw.stop();
  if (log.isInfoEnabled())   log.infof(""String_Node_Str"",config.getAppName(),sw.getDuration());
  return mapping;
}"
43198,"@SuppressWarnings(""String_Node_Str"") public JsonActionChainMakerConfiguretion(String... jsonPaths){
  List<NutResource> list=Scans.me().loadResource(""String_Node_Str"",jsonPaths);
  try {
    File defaultChainsFile=Files.findFile(""String_Node_Str"");
    if (defaultChainsFile == null) {
      log.warn(""String_Node_Str"");
      throw new NutRuntimeException(""String_Node_Str"");
    }
    map.putAll(Json.fromJsonFile(Map.class,defaultChainsFile));
    for (    NutResource nr : list)     map.putAll(Json.fromJson(Map.class,nr.getReader()));
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public JsonActionChainMakerConfiguretion(String... jsonPaths){
  List<NutResource> list=Scans.me().loadResource(""String_Node_Str"",jsonPaths);
  try {
    File defaultChainsFile=Files.findFile(""String_Node_Str"");
    if (defaultChainsFile != null && defaultChainsFile.exists())     map.putAll(Json.fromJsonFile(Map.class,defaultChainsFile));
 else {
      if (!Lang.isAndroid) {
        log.warn(""String_Node_Str"");
        throw new NutRuntimeException(""String_Node_Str"");
      }
      map.putAll(Json.fromJson(Map.class,new InputStreamReader(getClass().getClassLoader().getResourceAsStream(""String_Node_Str""))));
    }
    for (    NutResource nr : list)     map.putAll(Json.fromJson(Map.class,nr.getReader()));
  }
 catch (  IOException e) {
    if (Lang.isAndroid) {
    }
    throw Lang.wrapThrow(e);
  }
}"
43199,"public void visit(Object obj,LinkField lnk){
  Object value=lnk.getValue(obj);
  final Pojo pojo=opt.maker().makeDelete(lnk.getLinkedEntity());
  pojo.setOperatingObject(value);
  pojo.append(Pojos.Items.cndAuto(lnk.getLinkedEntity(),null));
  Lang.each(value,new Each<Object>(){
    public void invoke(    int i,    Object ele,    int length) throws ExitLoop, LoopException {
      pojo.addParamsBy(ele);
    }
  }
);
  opt.add(pojo);
}","public void visit(Object obj,LinkField lnk){
  Object value=lnk.getValue(obj);
  if (value == null) {
    log.infof(""String_Node_Str"",lnk.getLinkType(),lnk.getEntity().getType().getSimpleName(),lnk.getHostField().getName());
    return;
  }
  final Pojo pojo=opt.maker().makeDelete(lnk.getLinkedEntity());
  pojo.setOperatingObject(value);
  pojo.append(Pojos.Items.cndAuto(lnk.getLinkedEntity(),null));
  Lang.each(value,new Each<Object>(){
    public void invoke(    int i,    Object ele,    int length) throws ExitLoop, LoopException {
      pojo.addParamsBy(ele);
    }
  }
);
  opt.add(pojo);
}"
43200,"public int joinParams(Entity<?> en,Object obj,Object[] params,int off){
  if (def == obj && null != obj) {
    params[off++]=def;
  }
 else {
    en=_en(en);
    if (null != obj && null != mf && mf.getEntity() == en && en.getType().isInstance(obj))     params[off++]=mf.getValue(obj);
 else     if (null != def)     params[off++]=def;
 else     if (null != obj)     params[off++]=Castors.me().castTo(obj,colType);
 else     throw Lang.impossible();
  }
  return off;
}","public int joinParams(Entity<?> en,Object obj,Object[] params,int off){
  if (def == obj && null != obj) {
    params[off++]=def;
  }
 else {
    en=_en(en);
    if (null != obj && null != mf && mf.getEntity() == en && en.getType().isInstance(obj))     params[off++]=mf.getValue(obj);
 else     if (null != def)     params[off++]=def;
 else     if (null != obj) {
      params[off++]=Castors.me().castTo(obj,colType);
    }
 else     throw Lang.impossible();
  }
  return off;
}"
43201,"/** 
 * 子类可以覆盖这个方法，给出自己特殊的后缀
 * @return 后缀
 */
protected String getExt(){
  return ""String_Node_Str"";
}","/** 
 * 子类可以覆盖这个方法，给出自己特殊的后缀,必须小写哦
 * @return 后缀
 */
protected String getExt(){
  return ""String_Node_Str"";
}"
43202,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  String args=""String_Node_Str"";
  if (path != null && path.contains(""String_Node_Str"")) {
    path=path.substring(0,path.indexOf('?'));
    args=path.substring(path.indexOf('?'));
  }
  String ext=getExt();
  if (Strings.isBlank(path)) {
    path=Mvcs.getRequestPath(req);
    path=""String_Node_Str"" + (path.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + Files.renameSuffix(path,ext);
  }
 else   if (path.charAt(0) == '/') {
    if (!path.toLowerCase().endsWith(ext))     path+=ext;
  }
 else {
    path=""String_Node_Str"" + path.replace('.','/') + ext;
  }
  path=path + args;
  RequestDispatcher rd=req.getRequestDispatcher(path);
  if (rd == null)   throw Lang.makeThrow(""String_Node_Str"",path);
  rd.forward(req,resp);
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  String args=""String_Node_Str"";
  if (path != null && path.contains(""String_Node_Str"")) {
    args=path.substring(path.indexOf('?'));
    path=path.substring(0,path.indexOf('?'));
  }
  String ext=getExt();
  if (Strings.isBlank(path)) {
    path=Mvcs.getRequestPath(req);
    path=""String_Node_Str"" + (path.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + Files.renameSuffix(path,ext);
  }
 else   if (path.charAt(0) == '/') {
    if (!path.toLowerCase().endsWith(ext))     path+=ext;
  }
 else {
    path=""String_Node_Str"" + path.replace('.','/') + ext;
  }
  path=path + args;
  RequestDispatcher rd=req.getRequestDispatcher(path);
  if (rd == null)   throw Lang.makeThrow(""String_Node_Str"",path);
  rd.forward(req,resp);
}"
43203,"/** 
 * @return 当前类型是不是接口
 */
public boolean isInterface(){
  return null == klass ? null : klass.isInterface();
}","/** 
 * @return 当前类型是不是接口
 */
public boolean isInterface(){
  return klass.isInterface();
}"
43204,"public Object getReferObject(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    String str=Streams.readAndClose(Streams.utf8r(req.getInputStream()));
    return Json.fromJson(str);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}","public Object getReferObject(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    return Json.fromJson(Streams.utf8r(req.getInputStream()));
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}"
43205,"@SuppressWarnings(""String_Node_Str"") public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null == name)   return Castors.me().castTo(refer,Lang.getTypeClass(type));
  Map<String,Object> map=(Map<String,Object>)refer;
  Object theObj=map.get(name);
  if (null == theObj)   return null;
  Class<?> clazz=Lang.getTypeClass(type);
  return Castors.me().castTo(theObj,clazz);
}","@SuppressWarnings(""String_Node_Str"") public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null == name)   return Mapl.maplistToObj(refer,type);
  Map<String,Object> map=(Map<String,Object>)refer;
  Object theObj=map.get(name);
  if (null == theObj)   return null;
  return Mapl.maplistToObj(map,type);
}"
43206,"@Test public void test_deleteWith_many(){
  dao.create(Ask.class,true);
  dao.create(AskReply.class,true);
  Ask ask=new Ask();
  ask.setTemptitle(""String_Node_Str"");
  ask.setTitle(""String_Node_Str"");
  List<AskReply> askReplies=new ArrayList<AskReply>();
  askReplies.add(new AskReply(ask.getAskId()));
  askReplies.add(new AskReply(ask.getAskId()));
  ask.setReplys(askReplies);
  dao.insertWith(ask,""String_Node_Str"");
  dao.deleteWith(ask,""String_Node_Str"");
  assertEquals(0,dao.count(AskReply.class));
}","@Test public void test_deleteWith_many(){
  dao.create(Ask.class,true);
  dao.create(AskReply.class,true);
  Ask ask=new Ask();
  ask.setTemptitle(""String_Node_Str"");
  ask.setTitle(""String_Node_Str"");
  List<AskReply> askReplies=new ArrayList<AskReply>();
  askReplies.add(new AskReply(ask.getAskId()));
  askReplies.add(new AskReply(ask.getAskId()));
  ask.setReplys(askReplies);
  dao.insertWith(ask,""String_Node_Str"");
  ask.setReplys(null);
  dao.deleteWith(ask,""String_Node_Str"");
  assertEquals(2,dao.count(AskReply.class));
  ask=dao.fetchLinks(ask,null);
  dao.deleteWith(ask,""String_Node_Str"");
  assertEquals(0,dao.count(AskReply.class));
}"
43207,"@At({""String_Node_Str"",""String_Node_Str""}) @Fail(""String_Node_Str"") public void errParam(@Param(""String_Node_Str"") long id,AdaptorErrorContext errCtx){
  TestCase.assertNotNull(errCtx);
  TestCase.assertNotNull(errCtx.getErrors()[0]);
}","@At({""String_Node_Str"",""String_Node_Str""}) public void errParam(@Param(""String_Node_Str"") long id,AdaptorErrorContext errCtx){
  TestCase.assertNotNull(errCtx);
  TestCase.assertNotNull(errCtx.getErrors()[0]);
}"
43208,"public ActionInvoker get(ActionContext ac){
  String path=Mvcs.getRequestPath(ac.getRequest());
  ActionInvoker invoker=root.get(ac,path);
  if (invoker != null) {
    ActionChain chain=invoker.getActionChain(ac);
    if (chain != null) {
      if (log.isDebugEnabled()) {
        log.debugf(""String_Node_Str"",path,chain);
      }
      return invoker;
    }
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",path);
  return null;
}","public ActionInvoker get(ActionContext ac){
  String path=Mvcs.getRequestPath(ac.getRequest());
  ActionInvoker invoker=root.get(ac,path);
  if (invoker != null) {
    ActionChain chain=invoker.getActionChain(ac);
    if (chain != null) {
      if (log.isDebugEnabled()) {
        log.debugf(""String_Node_Str"",ac.getRequest().getMethod(),path,chain);
      }
      return invoker;
    }
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",path);
  return null;
}"
43209,"public void process(ActionContext ac) throws Throwable {
  RequestIocContext reqContext=null;
  try {
    if (null != moduleObj) {
      ac.setModule(moduleObj);
    }
 else {
      Ioc ioc=ac.getIoc();
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",injectName,injectName);
      Object obj;
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(ac.getRequest());
        SessionIocContext sessionContext=new SessionIocContext(Mvcs.getHttpSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        Mvcs.setIocContext(myContext);
        obj=((Ioc2)ioc).get(moduleType,injectName,myContext);
      }
 else       obj=ioc.get(moduleType,injectName);
      ac.setModule(obj);
    }
    ac.setMethod(method);
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",ac.getPath(),method);
    doNext(ac);
  }
  finally {
    if (reqContext != null)     try {
      reqContext.depose();
    }
 catch (    Throwable e) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"",e);
    }
  }
}","public void process(ActionContext ac) throws Throwable {
  RequestIocContext reqContext=null;
  try {
    if (null != moduleObj) {
      ac.setModule(moduleObj);
    }
 else {
      Ioc ioc=ac.getIoc();
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",injectName,injectName);
      Object obj;
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(ac.getRequest());
        SessionIocContext sessionContext=new SessionIocContext(Mvcs.getHttpSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        Mvcs.setIocContext(myContext);
        obj=((Ioc2)ioc).get(moduleType,injectName,myContext);
      }
 else       obj=ioc.get(moduleType,injectName);
      ac.setModule(obj);
    }
    ac.setMethod(method);
    doNext(ac);
  }
  finally {
    if (reqContext != null)     try {
      reqContext.depose();
    }
 catch (    Throwable e) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"",e);
    }
  }
}"
43210,"private void _runSelect(Connection conn,DaoStatement st) throws SQLException {
  Object[][] paramMatrix=st.getParamMatrix();
  int startRow=-1;
  int lastRow=-1;
  if (st.getContext().getResultSetType() == ResultSet.TYPE_SCROLL_INSENSITIVE) {
    Pager pager=st.getContext().getPager();
    if (pager != null) {
      startRow=pager.getOffset();
      lastRow=pager.getOffset() + pager.getPageSize();
    }
  }
  String sql=st.toPreparedStatement();
  if (log.isDebugEnabled())   log.debug(sql);
  ResultSet rs=null;
  Statement stat=null;
  try {
    if (null == paramMatrix || paramMatrix.length == 0 || paramMatrix[0].length == 0) {
      stat=conn.createStatement(st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
      if (lastRow > 0)       stat.setMaxRows(lastRow);
      if (st.getContext().getFetchSize() > 0)       stat.setFetchSize(st.getContext().getFetchSize());
      rs=stat.executeQuery(sql);
    }
 else {
      if (paramMatrix.length > 1) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",paramMatrix.length - 1,st);
      }
 else       if (log.isDebugEnabled()) {
        log.debug(st);
      }
      ValueAdaptor[] adaptors=st.getAdaptors();
      stat=conn.prepareStatement(sql,st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
      if (lastRow > 0)       stat.setMaxRows(lastRow);
      for (int i=0; i < paramMatrix[0].length; i++) {
        adaptors[i].set((PreparedStatement)stat,paramMatrix[0][i],i + 1);
      }
      rs=((PreparedStatement)stat).executeQuery();
    }
    if (startRow > 0)     rs.absolute(startRow);
    st.onAfter(conn,rs);
  }
  finally {
    Daos.safeClose(stat,rs);
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
}","private void _runSelect(Connection conn,DaoStatement st) throws SQLException {
  Object[][] paramMatrix=st.getParamMatrix();
  int startRow=-1;
  int lastRow=-1;
  if (st.getContext().getResultSetType() == ResultSet.TYPE_SCROLL_INSENSITIVE) {
    Pager pager=st.getContext().getPager();
    if (pager != null) {
      startRow=pager.getOffset();
      lastRow=pager.getOffset() + pager.getPageSize();
    }
  }
  String sql=st.toPreparedStatement();
  ResultSet rs=null;
  Statement stat=null;
  try {
    if (null == paramMatrix || paramMatrix.length == 0 || paramMatrix[0].length == 0) {
      if (log.isDebugEnabled())       log.debug(st);
      stat=conn.createStatement(st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
      if (lastRow > 0)       stat.setMaxRows(lastRow);
      if (st.getContext().getFetchSize() > 0)       stat.setFetchSize(st.getContext().getFetchSize());
      rs=stat.executeQuery(sql);
    }
 else {
      if (paramMatrix.length > 1) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",paramMatrix.length - 1,st);
      }
      if (log.isDebugEnabled()) {
        log.debug(st);
      }
      ValueAdaptor[] adaptors=st.getAdaptors();
      stat=conn.prepareStatement(sql,st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
      if (lastRow > 0)       stat.setMaxRows(lastRow);
      for (int i=0; i < paramMatrix[0].length; i++) {
        adaptors[i].set((PreparedStatement)stat,paramMatrix[0][i],i + 1);
      }
      rs=((PreparedStatement)stat).executeQuery();
    }
    if (startRow > 0)     rs.absolute(startRow);
    st.onAfter(conn,rs);
  }
  finally {
    Daos.safeClose(stat,rs);
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
}"
43211,"public Method getCallingMethod(){
  return callingMethod;
}","/** 
 * 正在被调用的Method
 */
public Method getCallingMethod(){
  return callingMethod;
}"
43212,"public Object[] getArgs(){
  return args;
}","/** 
 * 方法调用的参数数组,如果你要改变参数,那么必须保证参数类型与方法参数兼容.
 */
public Object[] getArgs(){
  return args;
}"
43213,"public FilterConvertImpl(List<String> paths){
  this.paths=paths;
}","public FilterConvertImpl(List<String> paths){
  this.items=paths;
}"
43214,"protected void DLR(String path,Object item){
  if (clude) {
    if (paths.contains(path)) {
      build.put(path,item,arrayIndex);
    }
  }
}","protected void DLR(String path,Object item){
  if (clude) {
    if (items.contains(path)) {
      build.put(path,item,arrayIndex);
    }
  }
}"
43215,"protected void LRD(String path,Object item){
  if (clude) {
    return;
  }
  for (  String p : paths) {
    if (!p.startsWith(path) && !path.startsWith(p)) {
      build.put(path,item,arrayIndex);
    }
  }
}","protected void LRD(String path,Object item){
  if (clude) {
    return;
  }
  int isFilter=0;
  for (  String p : items) {
    System.out.println(p + ""String_Node_Str"" + path);
    if (!(p.equals(path) || path.startsWith((p + ""String_Node_Str"")) || p.startsWith(path + ""String_Node_Str"")|| path.startsWith((p + ""String_Node_Str""))|| p.startsWith(path + ""String_Node_Str""))) {
      isFilter++;
    }
  }
  if (isFilter == items.size()) {
    build.put(path,item,arrayIndex);
  }
}"
43216,"private void _runPreparedStatement(Connection conn,DaoStatement st,Object[][] paramMatrix) throws SQLException {
  ValueAdaptor[] adaptors=st.getAdaptors();
  if (adaptors.length != paramMatrix[0].length)   throw Lang.makeThrow(""String_Node_Str"");
  boolean statIsClosed=false;
  String sql=st.toPreparedStatement();
  PreparedStatement pstat=null;
  if (log.isDebugEnabled())   log.debug(st);
  try {
    pstat=conn.prepareStatement(sql);
    if (paramMatrix.length == 1) {
      for (int i=0; i < paramMatrix[0].length; i++) {
        adaptors[i].set(pstat,paramMatrix[0][i],i + 1);
      }
      pstat.execute();
      st.getContext().setUpdateCount(pstat.getUpdateCount());
      pstat.close();
      statIsClosed=true;
    }
 else {
      for (      Object[] params : paramMatrix) {
        for (int i=0; i < params.length; i++) {
          adaptors[i].set(pstat,params[i],i + 1);
        }
        pstat.addBatch();
      }
      int[] counts=pstat.executeBatch();
      pstat.close();
      statIsClosed=true;
      int sum=0;
      for (      int i : counts)       sum+=i;
      st.getContext().setUpdateCount(sum);
    }
  }
  finally {
    if (!statIsClosed)     Daos.safeClose(pstat);
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
}","private void _runPreparedStatement(Connection conn,DaoStatement st,Object[][] paramMatrix) throws SQLException {
  ValueAdaptor[] adaptors=st.getAdaptors();
  if (adaptors.length != paramMatrix[0].length)   throw Lang.makeThrow(""String_Node_Str"");
  boolean statIsClosed=false;
  String sql=st.toPreparedStatement();
  PreparedStatement pstat=null;
  if (log.isDebugEnabled())   log.debug(st);
  try {
    pstat=conn.prepareStatement(sql);
    if (paramMatrix.length == 1) {
      for (int i=0; i < paramMatrix[0].length; i++) {
        adaptors[i].set(pstat,paramMatrix[0][i],i + 1);
      }
      pstat.execute();
      st.getContext().setUpdateCount(pstat.getUpdateCount());
      pstat.close();
      statIsClosed=true;
    }
 else {
      for (      Object[] params : paramMatrix) {
        for (int i=0; i < params.length; i++) {
          adaptors[i].set(pstat,params[i],i + 1);
        }
        pstat.addBatch();
      }
      int[] counts=pstat.executeBatch();
      int sum=0;
      for (      int i : counts)       if (i > 0)       sum+=i;
      if (sum == 0)       sum=pstat.getUpdateCount();
      pstat.close();
      statIsClosed=true;
      st.getContext().setUpdateCount(sum);
    }
  }
  finally {
    if (!statIsClosed)     Daos.safeClose(pstat);
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
}"
43217,"private void _checkupEntityFieldsWithDatabase(NutEntity<?> en){
  Connection conn=null;
  try {
    conn=Trans.getConnectionAuto(datasource);
    expert.setupEntityField(conn,en);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",en.getType().getName(),en.getTableName(),e.getClass().getName(),e.getMessage());
  }
 finally {
    if (null != conn) {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"",e);
      }
    }
  }
}","private void _checkupEntityFieldsWithDatabase(NutEntity<?> en){
  Connection conn=null;
  try {
    conn=Trans.getConnectionAuto(datasource);
    expert.setupEntityField(conn,en);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",en.getType().getName(),en.getTableName(),e.getClass().getName(),e.getMessage());
  }
 finally {
    Trans.closeConnectionAuto(conn);
  }
}"
43218,"/** 
 * 如果在事务中,则返回事务的连接,否则直接从数据源取一个新的连接
 * @param ds
 * @return
 * @throws SQLException
 */
public static Connection getConnectionAuto(DataSource ds) throws SQLException {
  if (get() == null)   return ds.getConnection();
 else   return get().getConnection(ds);
}","/** 
 * 如果在事务中,则返回事务的连接,否则直接从数据源取一个新的连接
 */
public static Connection getConnectionAuto(DataSource ds) throws SQLException {
  if (get() == null)   return ds.getConnection();
 else   return get().getConnection(ds);
}"
43219,"/** 
 * 取得变得的值
 */
public Object fetchVar(){
  if (left instanceof AccessOpt) {
    return ((AccessOpt)left).fetchVar();
  }
  if (left instanceof Operator) {
    return ((Operator)left).calculate();
  }
  if (left instanceof Elobj) {
    Object obj=((Elobj)left).fetchVal();
    if (right instanceof FieldObj) {
      try {
        return Mirror.me(obj).getField(((Elobj)right).getVal());
      }
 catch (      NoSuchFieldException e) {
        throw Lang.wrapThrow(e);
      }
    }
    return obj;
  }
  return left;
}","/** 
 * 取得变得的值
 */
public Object fetchVar(){
  if (left instanceof AccessOpt) {
    return ((AccessOpt)left).fetchVar();
  }
  if (left instanceof Operator) {
    return ((Operator)left).calculate();
  }
  if (left instanceof Elobj) {
    Object obj=((Elobj)left).fetchVal();
    if (right instanceof FieldObj) {
      return Mirror.me(obj).getValue(obj,((Elobj)right).getVal());
    }
    return obj;
  }
  return left;
}"
43220,"@Test public void testIssue303(){
  Context context=Lang.context();
  Issue303 item=new Issue303(""String_Node_Str"");
  item.child=new Issue303(""String_Node_Str"");
  context.set(""String_Node_Str"",item);
  assertEquals(""String_Node_Str"",El.eval(context,""String_Node_Str""));
}","@Test public void testIssue303(){
  Context context=Lang.context();
  Issue303 item=new Issue303(""String_Node_Str"");
  item.child=new Issue303(""String_Node_Str"");
  context.set(""String_Node_Str"",item);
  assertEquals(""String_Node_Str"",El.eval(context,""String_Node_Str""));
  assertEquals(0,El.eval(context,""String_Node_Str""));
}"
43221,"public Object run(List<Object> param){
  Object obj=fetchVar();
  Mirror<?> me=null;
  me=Mirror.me(obj);
  if (param.isEmpty()) {
    return me.invoke(obj,right.toString());
  }
  return me.invoke(obj,right.toString(),param.toArray());
}","public Object run(List<Object> param){
  Object obj=fetchVar();
  Mirror<?> me=null;
  if (obj == null)   throw new NullPointerException();
  if (obj instanceof Class) {
    me=Mirror.me(obj);
    try {
      return me.invoke(obj,right.toString(),param.toArray());
    }
 catch (    InvokingException e) {
      throw e;
    }
catch (    Throwable e) {
      if (Lang.unwrapThrow(e) instanceof NoSuchMethodException) {
        me=Mirror.me(obj.getClass().getClass());
        return me.invoke(obj,right.toString(),param.toArray());
      }
      throw Lang.wrapThrow(e);
    }
  }
 else {
    me=Mirror.me(obj);
    return me.invoke(obj,right.toString(),param.toArray());
  }
}"
43222,"@Test public void testIssue308(){
  Context context=Lang.context();
  List<String> list=new ArrayList<String>();
  list.add(""String_Node_Str"");
  context.set(""String_Node_Str"",list);
  context.set(""String_Node_Str"",System.class);
}","@Test public void testIssue308(){
  Context context=Lang.context();
  List<String> list=new ArrayList<String>();
  list.add(""String_Node_Str"");
  context.set(""String_Node_Str"",list);
  context.set(""String_Node_Str"",System.class);
  El.eval(context,""String_Node_Str"");
}"
43223,"public Invoking(Class<?> type,String methodName,Object... args){
  try {
    if (null == args || args.length == 0) {
      invoker=new NullArgInvoker(type.getMethod(methodName));
    }
 else {
      Method[] all=type.getMethods();
      List<Method> candidates=new ArrayList<Method>(all.length);
      for (      Method m : all)       if (m.getName().equals(methodName)) {
        candidates.add(m);
      }
      Class<?>[] argTypes=Mirror.evalToTypes(args);
      Object dynaArg=Mirror.evalArgToRealArray(args);
      for (Iterator<Method> it=candidates.iterator(); it.hasNext(); ) {
        Method m=it.next();
        Class<?>[] pts=m.getParameterTypes();
        MatchType mr=Mirror.matchParamTypes(pts,argTypes);
        if (MatchType.YES == mr) {
          invoker=new DefaultInvoker(m,args);
          break;
        }
 else         if (MatchType.LACK == mr) {
          invoker=new DefaultInvoker(m,Lang.arrayLast(args,Mirror.blankArrayArg(pts)));
          break;
        }
 else         if (null != dynaArg && pts.length == 1) {
          if (pts[0] == dynaArg.getClass()) {
            invoker=new DynamicArgsInvoker(m,Lang.array2array(args,pts[0].getComponentType()));
            break;
          }
          if (pts[0].isArray()) {
            if (Mirror.me(pts[0].getComponentType()).getWrapper().equals(Mirror.me(dynaArg.getClass().getComponentType()).getWrapper()))             invoker=new DynamicArgsInvoker(m,Lang.array2array(args,pts[0].getComponentType()));
            break;
          }
        }
      }
      if (null == invoker)       try {
        for (Iterator<Method> it=candidates.iterator(); it.hasNext(); ) {
          Method m=it.next();
          Class<?>[] pts=m.getParameterTypes();
          if (pts.length == args.length) {
            invoker=new DefaultInvoker(m,Lang.array2ObjectArray(args,pts));
          }
 else           if (pts.length == args.length + 1 && pts[args.length].isArray()) {
            invoker=new DefaultInvoker(m,Lang.array2ObjectArray(args,pts));
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  NoSuchMethodException e) {
    throw Lang.wrapThrow(e);
  }
  if (null == invoker)   throw new InvokingException(""String_Node_Str"",type.getName(),methodName,Lang.concat('\n',args));
  msg=format(""String_Node_Str"",type.getName(),methodName,Lang.concat('\n',args)) + ""String_Node_Str"";
}","public Invoking(Class<?> type,String methodName,Object... args){
  try {
    if (null == args || args.length == 0) {
      invoker=new NullArgInvoker(type.getMethod(methodName));
    }
 else {
      Method[] all=type.getMethods();
      List<Method> candidates=new ArrayList<Method>(all.length);
      for (      Method m : all)       if (m.getName().equals(methodName)) {
        candidates.add(m);
      }
      Class<?>[] argTypes=Mirror.evalToTypes(args);
      Object dynaArg=Mirror.evalArgToRealArray(args);
      for (Iterator<Method> it=candidates.iterator(); it.hasNext(); ) {
        Method m=it.next();
        Class<?>[] pts=m.getParameterTypes();
        MatchType mr=Mirror.matchParamTypes(pts,argTypes);
        if (MatchType.YES == mr) {
          invoker=new DefaultInvoker(m,args);
          break;
        }
 else         if (MatchType.LACK == mr) {
          invoker=new DefaultInvoker(m,Lang.arrayLast(args,Mirror.blankArrayArg(pts)));
          break;
        }
 else         if (null != dynaArg && pts.length == 1) {
          if (pts[0] == dynaArg.getClass()) {
            invoker=new DynamicArgsInvoker(m,Lang.array2array(args,pts[0].getComponentType()));
            break;
          }
          if (pts[0].isArray()) {
            if (Mirror.me(pts[0].getComponentType()).getWrapper().equals(Mirror.me(dynaArg.getClass().getComponentType()).getWrapper())) {
              invoker=new DynamicArgsInvoker(m,Lang.array2array(args,pts[0].getComponentType()));
              break;
            }
          }
        }
      }
      if (null == invoker)       try {
        for (Iterator<Method> it=candidates.iterator(); it.hasNext(); ) {
          Method m=it.next();
          Class<?>[] pts=m.getParameterTypes();
          if (pts.length == args.length) {
            invoker=new DefaultInvoker(m,Lang.array2ObjectArray(args,pts));
          }
 else           if (pts.length == args.length + 1 && pts[args.length].isArray()) {
            invoker=new DefaultInvoker(m,Lang.array2ObjectArray(args,pts));
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  NoSuchMethodException e) {
    throw Lang.wrapThrow(e);
  }
  if (null == invoker)   throw new InvokingException(""String_Node_Str"",type.getName(),methodName,Lang.concat('\n',args));
  msg=format(""String_Node_Str"",type.getName(),methodName,Lang.concat('\n',args)) + ""String_Node_Str"";
}"
43224,"public FileResource(String base,File file){
  base=Disks.normalize(Disks.getCanonicalPath(base));
  if (!base.endsWith(""String_Node_Str""))   base+=""String_Node_Str"";
  this.name=Disks.normalize(Disks.getCanonicalPath(file.getAbsolutePath()));
  this.name=this.name.substring(this.name.indexOf(base) + base.length()).replace('\\','/');
  this.file=file;
}","public FileResource(String base,File file){
  base=Disks.normalize(Disks.getCanonicalPath(base));
  if (base == null)   base=""String_Node_Str"";
 else   if (!base.endsWith(""String_Node_Str""))   base+=""String_Node_Str"";
  this.name=Disks.normalize(Disks.getCanonicalPath(file.getAbsolutePath()));
  this.name=this.name.substring(this.name.indexOf(base) + base.length()).replace('\\','/');
  this.file=file;
}"
43225,"public IdentifierObj(String val){
  this.val=val;
}","public IdentifierObj(String val){
  super(val);
}"
43226,"/** 
 * 取得变得的值
 */
public Object fetchVar(){
  if (left instanceof AccessOpt) {
    return ((AccessOpt)left).fetchVar();
  }
  if (left instanceof Operator) {
    return ((Operator)left).calculate();
  }
  if (left instanceof Elobj) {
    return ((Elobj)left).fetchVal();
  }
  return left;
}","/** 
 * 取得变得的值
 */
public Object fetchVar(){
  if (left instanceof AccessOpt) {
    return ((AccessOpt)left).fetchVar();
  }
  if (left instanceof Operator) {
    return ((Operator)left).calculate();
  }
  if (left instanceof Elobj) {
    Object obj=((Elobj)left).fetchVal();
    if (right instanceof FieldObj) {
      try {
        return Mirror.me(obj).getField(((Elobj)right).getVal());
      }
 catch (      NoSuchFieldException e) {
        throw Lang.wrapThrow(e);
      }
    }
    return obj;
  }
  return left;
}"
43227,"private void _evalFieldMacro(Entity<?> en,List<MappingInfo> infos){
  for (  MappingInfo info : infos) {
    if (null != info.annPrev) {
      en.addBeforeInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annPrev.els(),info.annPrev.value())));
    }
    if (null != info.annNext && en.addAfterInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annNext.els(),info.annNext.value())))) {
      continue;
    }
 else     if (null != info.annId && info.annId.auto()) {
      MappingField idField=en.getField(info.name);
      String autoSql=""String_Node_Str"";
      Pojo autoInfo=new SqlFieldMacro(idField,autoSql);
      autoInfo.setEntity(en);
      en.addAfterInsertMacro(autoInfo);
    }
  }
}","private void _evalFieldMacro(Entity<?> en,List<MappingInfo> infos){
  for (  MappingInfo info : infos) {
    if (null != info.annPrev) {
      en.addBeforeInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annPrev.els(),info.annPrev.value())));
    }
    if (null != info.annNext && en.addAfterInsertMacro(__macro(en.getField(info.name),_annToFieldMacroInfo(info.annNext.els(),info.annNext.value())))) {
      continue;
    }
 else     if (null != info.annId && info.annId.auto()) {
      en.addAfterInsertMacro(expert.fetchPojoId(en,en.getField(info.name)));
    }
  }
}"
43228,"@Override public String getDatabaseType(){
  return DB.H2.name();
}","public String getDatabaseType(){
  return DB.H2.name();
}"
43229,"public Object run(List<Object> param){
  Object obj=fetchVar();
  Mirror<?> me=null;
  if (obj instanceof Class) {
    me=Mirror.me((Class<?>)obj);
  }
 else {
    me=Mirror.me(obj);
  }
  if (param.isEmpty()) {
    return me.invoke(obj,right.toString());
  }
  return me.invoke(obj,right.toString(),param.toArray());
}","public Object run(List<Object> param){
  Object obj=fetchVar();
  Mirror<?> me=null;
  me=Mirror.me(obj);
  if (param.isEmpty()) {
    return me.invoke(obj,right.toString());
  }
  return me.invoke(obj,right.toString(),param.toArray());
}"
43230,"/** 
 * 转换数据,主要是转换负号,方法执行
 */
private Object parseItem(Object item){
  if (paramSize == 0) {
    if (!(item instanceof Operator)) {
      paramSize=1;
    }
  }
 else {
    if (item instanceof CommaOpt) {
      paramSize++;
    }
  }
  if (item instanceof LBracketOpt) {
    if (prev instanceof Elobj) {
      prem=new MethodOpt();
      item=new Object[]{prem,new LBracketOpt()};
      paramSize=0;
      bracket.addFirst(BracketType.Method);
    }
 else {
      bracket.addFirst(BracketType.Default);
    }
  }
  if (item instanceof RBracketOpt) {
switch (bracket.poll()) {
case Method:
      prem.setSize(paramSize);
    paramSize=-1;
  item=new Object[]{new RBracketOpt(),new InvokeMethodOpt()};
prem=null;
break;
default :
break;
}
}
if (item instanceof SubOpt && NegativeOpt.isNegetive(prev)) {
item=new NegativeOpt();
}
prev=item;
return item;
}","/** 
 * 转换数据,主要是转换负号,方法执行
 */
private Object parseItem(Object item){
  if (methods.peek() != null) {
    MethodOpt opt=methods.peek();
    if (opt.getSize() <= 0) {
      if (!(item instanceof CommaOpt) && !(item instanceof RBracketOpt)) {
        opt.setSize(1);
      }
    }
 else {
      if (item instanceof CommaOpt) {
        opt.setSize(opt.getSize() + 1);
      }
    }
  }
  if (item instanceof LBracketOpt) {
    if (prev instanceof Elobj) {
      MethodOpt prem=new MethodOpt();
      item=new Object[]{prem,new LBracketOpt()};
      methods.addFirst(prem);
    }
 else {
      methods.addFirst(null);
    }
  }
  if (item instanceof RBracketOpt) {
    if (methods.poll() != null) {
      item=new Object[]{new RBracketOpt(),new InvokeMethodOpt()};
    }
  }
  if (item instanceof SubOpt && NegativeOpt.isNegetive(prev)) {
    item=new NegativeOpt();
  }
  prev=item;
  return item;
}"
43231,"private void _checkupEntityFieldsWithDatabase(NutEntity<?> en){
  Connection conn=null;
  try {
    conn=datasource.getConnection();
    expert.setupEntityField(conn,en);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",en.getType().getName(),en.getTableName(),e.getClass().getName(),e.getMessage());
  }
 finally {
    if (null != conn) {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"",e);
      }
    }
  }
}","private void _checkupEntityFieldsWithDatabase(NutEntity<?> en){
  Connection conn=null;
  try {
    conn=Trans.getConnectionAuto(datasource);
    expert.setupEntityField(conn,en);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",en.getType().getName(),en.getTableName(),e.getClass().getName(),e.getMessage());
  }
 finally {
    if (null != conn) {
      try {
        conn.close();
      }
 catch (      SQLException e) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"",e);
      }
    }
  }
}"
43232,"public void wrap(Queue<Object> rpn){
  if (rpn.peek() instanceof AccessOpt) {
    left=rpn.poll();
    return;
  }
  if (getSize() <= 0) {
    left=rpn.poll();
  }
 else {
    right=rpn.poll();
    left=rpn.poll();
  }
}","public void wrap(Queue<Object> rpn){
  if (getSize() <= 0) {
    left=rpn.poll();
  }
 else {
    right=rpn.poll();
    left=rpn.poll();
  }
}"
43233,"/** 
 * 转换数据,主要是转换负号,方法执行
 */
private Object parseItem(Object item){
  paramSize++;
  if (item instanceof LBracketOpt) {
    if (prev instanceof Elobj) {
      prem=new MethodOpt();
      item=new Object[]{prem,new LBracketOpt()};
      paramSize=0;
      bracket.addFirst(BracketType.Method);
    }
 else {
      bracket.addFirst(BracketType.Default);
    }
  }
  if (item instanceof RBracketOpt) {
switch (bracket.poll()) {
case Method:
      prem.setSize(paramSize - 1);
    item=new Object[]{new RBracketOpt(),new InvokeMethodOpt()};
  prem=null;
break;
default :
break;
}
}
if (item instanceof SubOpt && NegativeOpt.isNegetive(prev)) {
item=new NegativeOpt();
}
prev=item;
return item;
}","/** 
 * 转换数据,主要是转换负号,方法执行
 */
private Object parseItem(Object item){
  if (paramSize == 0) {
    if (!(item instanceof Operator)) {
      paramSize=1;
    }
  }
 else {
    if (item instanceof CommaOpt) {
      paramSize++;
    }
  }
  if (item instanceof LBracketOpt) {
    if (prev instanceof Elobj) {
      prem=new MethodOpt();
      item=new Object[]{prem,new LBracketOpt()};
      paramSize=0;
      bracket.addFirst(BracketType.Method);
    }
 else {
      bracket.addFirst(BracketType.Default);
    }
  }
  if (item instanceof RBracketOpt) {
switch (bracket.poll()) {
case Method:
      prem.setSize(paramSize);
    paramSize=-1;
  item=new Object[]{new RBracketOpt(),new InvokeMethodOpt()};
prem=null;
break;
default :
break;
}
}
if (item instanceof SubOpt && NegativeOpt.isNegetive(prev)) {
item=new NegativeOpt();
}
prev=item;
return item;
}"
43234,"/** 
 * 根据 Java 字段创建一个实体字段信息对象
 * @param pk 复合主键
 * @param field Java 字段
 * @return 字段信息对象
 */
public static MappingInfo createMappingInfo(PK pk,Field field){
  MappingInfo info=create(MappingInfo.class,field);
  info.annPK=pk;
  info.annColumn=field.getAnnotation(Column.class);
  info.annDefine=field.getAnnotation(ColDefine.class);
  info.annDefault=field.getAnnotation(Default.class);
  info.annId=field.getAnnotation(Id.class);
  info.annName=field.getAnnotation(Name.class);
  info.annNext=field.getAnnotation(Next.class);
  info.annPrev=field.getAnnotation(Prev.class);
  info.annReadonly=field.getAnnotation(Readonly.class);
  info.columnComment=field.getAnnotation(Comment.class);
  return info;
}","/** 
 * 根据 Java 字段创建一个实体字段信息对象
 * @param pk 复合主键
 * @param field Java 字段
 * @return 字段信息对象
 */
public static MappingInfo createMappingInfo(PK pk,Field field){
  MappingInfo info=create(MappingInfo.class,field);
  info.annPK=pk;
  info.annColumn=field.getAnnotation(Column.class);
  info.annDefine=field.getAnnotation(ColDefine.class);
  info.annDefault=field.getAnnotation(Default.class);
  info.annId=field.getAnnotation(Id.class);
  info.annName=field.getAnnotation(Name.class);
  info.annNext=field.getAnnotation(Next.class);
  info.annPrev=field.getAnnotation(Prev.class);
  info.annReadonly=field.getAnnotation(Readonly.class);
  info.columnComment=field.getAnnotation(Comment.class);
  if (info.annId != null) {
    if (!Mirror.me(field.getType()).isIntLike())     throw Lang.makeThrow(DaoException.class,""String_Node_Str"",field);
  }
  if (info.annName != null)   if (!Mirror.me(field.getType()).isStringLike())   throw Lang.makeThrow(DaoException.class,""String_Node_Str"",field);
  return info;
}"
43235,"public Object get(ResultSet rs,String colName) throws SQLException {
  File f=this.createTempFile();
  Clob clob=rs.getClob(colName);
  if (clob == null)   return null;
  Files.write(f,clob.getAsciiStream());
  return new SimpleClob(f);
}","public Object get(ResultSet rs,String colName) throws SQLException {
  File f=this.createTempFile();
  Clob clob=rs.getClob(colName);
  if (clob == null)   return null;
  Files.write(f,clob.getCharacterStream());
  return new SimpleClob(f);
}"
43236,"public void truncate(long len) throws SQLException {
  Files.write(file,new Byte[]{});
}","public void truncate(long len) throws SQLException {
  try {
    new RandomAccessFile(file,""String_Node_Str"").setLength(len);
  }
 catch (  FileNotFoundException e) {
    throw Lang.wrapThrow(e);
  }
catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
}"
43237,"public Object get(ResultSet rs,String colName) throws SQLException {
  File f=this.createTempFile();
  Clob clob=rs.getClob(colName);
  if (clob == null)   return null;
  Files.write(f,clob.getAsciiStream());
  return new SimpleClob(f);
}","public Object get(ResultSet rs,String colName) throws SQLException {
  File f=this.createTempFile();
  Clob clob=rs.getClob(colName);
  if (clob == null)   return null;
  Files.write(f,clob.getCharacterStream());
  return new SimpleClob(f);
}"
43238,"@Override public boolean dropEntity(Dao dao,Entity<?> en){
  if (super.dropEntity(dao,en)) {
    if (en.getPks().isEmpty())     return true;
    List<Sql> sqls=new ArrayList<Sql>();
    for (    MappingField pk : en.getPks()) {
      String sql=gSQL(DSEQ,en.getTableName(),pk.getColumnName());
      sqls.add(Sqls.create(sql));
    }
    try {
      dao.execute(sqls.toArray(new Sql[sqls.size()]));
      return true;
    }
 catch (    Exception e) {
    }
  }
  return false;
}","@Override public boolean dropEntity(Dao dao,Entity<?> en){
  if (super.dropEntity(dao,en)) {
    if (en.getPks().isEmpty())     return true;
    List<Sql> sqls=new ArrayList<Sql>();
    for (    MappingField pk : en.getPks()) {
      if (pk.isAutoIncreasement()) {
        String sql=gSQL(DSEQ,en.getTableName(),pk.getColumnName());
        sqls.add(Sqls.create(sql));
      }
    }
    try {
      dao.execute(sqls.toArray(new Sql[sqls.size()]));
      return true;
    }
 catch (    Exception e) {
    }
  }
  return false;
}"
43239,"private void evalLocalization(NutConfig config,Class<?> mainModule){
  Localization lc=mainModule.getAnnotation(Localization.class);
  if (null != lc) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",lc.value());
    Map<String,Map<String,Object>> msgss=Mirror.me(lc.type()).born().load(lc.value());
    Mvcs.setMessageSet(msgss);
  }
 else   if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}","private void evalLocalization(NutConfig config,Class<?> mainModule){
  Localization lc=mainModule.getAnnotation(Localization.class);
  if (null != lc) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",lc.value());
    MessageLoader msgLoader=null;
    if (!Strings.isBlank(lc.beanName())) {
      msgLoader=config.getIoc().get(lc.type(),lc.beanName());
    }
 else {
      msgLoader=Mirror.me(lc.type()).born();
    }
    Map<String,Map<String,Object>> msgss=msgLoader.load(lc.value());
    Mvcs.setMessageSet(msgss);
  }
 else   if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}"
43240,"private ViewMaker[] createViewMakers(Class<?> mainModule) throws Exception {
  Views vms=mainModule.getAnnotation(Views.class);
  ViewMaker[] makers;
  int i=0;
  if (null != vms) {
    makers=new ViewMaker[vms.value().length + 1];
    for (; i < vms.value().length; i++)     makers[i]=Mirror.me(vms.value()[i]).born();
  }
 else {
    makers=new ViewMaker[1];
  }
  makers[i]=new DefaultViewMaker();
  if (log.isDebugEnabled()) {
    StringBuilder sb=new StringBuilder();
    sb.append(makers[0].getClass().getSimpleName());
    for (i=1; i < makers.length; i++)     sb.append(',').append(makers[i].getClass().getSimpleName());
    log.debugf(""String_Node_Str"",sb);
  }
  return makers;
}","private ViewMaker[] createViewMakers(Class<?> mainModule) throws Exception {
  Views vms=mainModule.getAnnotation(Views.class);
  ViewMaker[] makers;
  int i=0;
  if (null != vms) {
    makers=new ViewMaker[vms.value().length + 1];
    for (; i < vms.value().length; i++)     makers[i]=Mirror.me(vms.value()[i]).born();
  }
 else {
    makers=new ViewMaker[1];
  }
  makers[i]=new DefaultViewMaker();
  if (log.isDebugEnabled()) {
    StringBuilder sb=new StringBuilder();
    sb.append(makers[0].getClass().getSimpleName());
    for (i=0; i < makers.length - 1; i++)     sb.append(',').append(makers[i].getClass().getSimpleName());
    log.debugf(""String_Node_Str"",sb);
  }
  return makers;
}"
43241,"/** 
 * 获取当前会话的 Locale 名称
 */
public static String getLocaleName(HttpSession session){
  return (String)session.getAttribute(LOCALE_NAME);
}","/** 
 * 获取当前会话的 Locale 名称
 */
@Deprecated public static String getLocaleName(HttpSession session){
  return (String)session.getAttribute(LOCALE_KEY);
}"
43242,"/** 
 * 判断当前会话是否已经设置了本地字符串表
 */
public static boolean hasLocale(HttpSession session){
  return null != session.getAttribute(MSG);
}","/** 
 * 判断当前会话是否已经设置了本地字符串表
 */
@Deprecated public static boolean hasLocale(HttpSession session){
  return null != session.getAttribute(MSG);
}"
43243,"/** 
 * 为当前会话设置 Locale 的名称
 */
public static void setLocaleName(HttpSession session,String name){
  session.setAttribute(LOCALE_NAME,name);
  session.removeAttribute(MSG);
}","/** 
 * 为当前会话设置 Locale 的名称
 */
@Deprecated public static void setLocaleName(HttpSession session,String name){
  session.setAttribute(LOCALE_KEY,name);
  session.removeAttribute(MSG);
}"
43244,"/** 
 * 判断当前会话是够设置了特殊的 Locale 的名称。
 */
public static boolean hasLocaleName(HttpSession session){
  return !Strings.isBlank(getLocaleName(session));
}","/** 
 * 判断当前会话是够设置了特殊的 Locale 的名称。
 */
@Deprecated public static boolean hasLocaleName(HttpSession session){
  return !Strings.isBlank(getLocaleName(session));
}"
43245,"/** 
 * 为当前的 HTTP 请求对象设置一些必要的属性。包括： <ul> <li>本地化子字符串 => ${msg} <li>应用的路径名 => ${base} </ul>
 * @param req HTTP 请求对象
 */
@SuppressWarnings(""String_Node_Str"") public static void updateRequestAttributes(HttpServletRequest req){
  HttpSession sess=getHttpSession();
  if (null != getMessageSet()) {
    Map<String,Object> msgs=null;
    if (!hasLocale(sess))     msgs=setLocale(sess,getLocaleName(sess));
 else     msgs=(Map<String,Object>)sess.getAttribute(MSG);
    if (null == msgs) {
      Map<String,Map<String,Object>> msgss=getMessageSet();
      if (msgss.size() > 0)       msgs=msgss.values().iterator().next();
    }
    req.setAttribute(MSG,msgs);
  }
  req.setAttribute(""String_Node_Str"",req.getContextPath());
  req.setAttribute(""String_Node_Str"",req);
}","/** 
 * 为当前的 HTTP 请求对象设置一些必要的属性。包括： <ul> <li>本地化子字符串 => ${msg} <li>应用的路径名 => ${base} </ul>
 * @param req HTTP 请求对象
 */
public static void updateRequestAttributes(HttpServletRequest req){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss) {
    Map<String,Object> msgs=null;
    String lKey=Mvcs.getLocalizationKey();
    if (!Strings.isBlank(lKey))     msgs=msgss.get(lKey);
    if (null == msgs) {
      if (msgss.size() > 0)       msgs=msgss.values().iterator().next();
    }
    req.setAttribute(MSG,msgs);
  }
  req.setAttribute(""String_Node_Str"",req.getContextPath());
  req.setAttribute(""String_Node_Str"",req);
}"
43246,"/** 
 * 获取整个应用的默认字符串表
 * @param context 上下文
 * @return 字符串表
 */
public static Map<String,Object> getDefaultLocaleMessage(ServletContext context){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.get(DEFAULT_MSGS);
  return null;
}","/** 
 * 获取整个应用的默认字符串表
 * @param context 上下文
 * @return 字符串表
 */
@Deprecated public static Map<String,Object> getDefaultLocaleMessage(ServletContext context){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.get(DEFAULT_MSGS);
  return null;
}"
43247,"/** 
 * 获取整个应用可用的 Locale 名称集合
 */
public static Set<String> getLocaleNames(ServletContext context){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.keySet();
  return null;
}","/** 
 * 获取整个应用可用的 Locale 名称集合
 */
@Deprecated public static Set<String> getLocaleNames(ServletContext context){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.keySet();
  return null;
}"
43248,"/** 
 * 为当前会话设置本地字符串表。如果传入的 localeName 为空，或者不存在该表，则用默认字符串表替代。 执行完毕后，在 session 中会有一个属性（名称请参见 Mvcs.MSGS 定义） <p> 在 jsp 中，你可以用 EL 表达式 ${msgs.xxx} 来直接获取字符串的值。
 * @return 设置的 本地化字符串表
 */
public static Map<String,Object> setLocale(HttpSession session,String localeName){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss) {
    Map<String,Object> msgs=null;
    if (null != localeName)     msgs=msgss.get(localeName);
    if (null == msgs)     msgs=msgss.get(DEFAULT_MSGS);
    if (null != msgs)     session.setAttribute(MSG,msgs);
    return msgs;
  }
  return null;
}","/** 
 * 为当前会话设置本地字符串表。如果传入的 localeName 为空，或者不存在该表，则用默认字符串表替代。 执行完毕后，在 session 中会有一个属性（名称请参见 Mvcs.MSGS 定义） <p> 在 jsp 中，你可以用 EL 表达式 ${msgs.xxx} 来直接获取字符串的值。
 * @return 设置的 本地化字符串表
 */
@Deprecated public static Map<String,Object> setLocale(HttpSession session,String localeName){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss) {
    Map<String,Object> msgs=null;
    if (null != localeName)     msgs=msgss.get(localeName);
    if (null == msgs)     msgs=msgss.get(DEFAULT_MSGS);
    if (null != msgs)     session.setAttribute(MSG,msgs);
    return msgs;
  }
  return null;
}"
43249,"@Override protected String evalFieldType(MappingField mf){
switch (mf.getColumnType()) {
case BOOLEAN:
    return ""String_Node_Str"";
case TIMESTAMP:
  return ""String_Node_Str"";
case DATETIME:
case DATE:
case TIME:
return ""String_Node_Str"";
case INT:
if (mf.getWidth() > 0) return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str"";
return ""String_Node_Str"";
case FLOAT:
if (mf.getWidth() > 0 && mf.getPrecision() > 0) {
return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str""+ mf.getPrecision()+ ""String_Node_Str"";
}
if (mf.getTypeMirror().isDouble()) return ""String_Node_Str"";
return ""String_Node_Str"";
}
return super.evalFieldType(mf);
}","@Override protected String evalFieldType(MappingField mf){
switch (mf.getColumnType()) {
case BOOLEAN:
    return ""String_Node_Str"";
case TIMESTAMP:
  return ""String_Node_Str"";
case DATETIME:
case DATE:
case TIME:
return ""String_Node_Str"";
case INT:
if (mf.getWidth() > 0) return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str"";
return ""String_Node_Str"";
case FLOAT:
if (mf.getWidth() > 0 && mf.getPrecision() > 0) {
return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str""+ mf.getPrecision()+ ""String_Node_Str"";
}
if (mf.getTypeMirror().isDouble()) return ""String_Node_Str"";
return ""String_Node_Str"";
case BINARY:
return ""String_Node_Str"";
}
return super.evalFieldType(mf);
}"
43250,"/** 
 * 为一个输出流包裹一个缓冲流。如果这个输出流本身就是缓冲流，则直接返回
 * @param ops 输出流。
 * @return 缓冲输出流
 */
public static BufferedOutputStream buff(OutputStream ops){
  if (ops instanceof BufferedOutputStream)   return (BufferedOutputStream)ops;
  return new BufferedOutputStream(ops);
}","/** 
 * 为一个输出流包裹一个缓冲流。如果这个输出流本身就是缓冲流，则直接返回
 * @param ops 输出流。
 * @return 缓冲输出流
 */
public static BufferedOutputStream buff(OutputStream ops){
  if (ops == null)   throw new NullPointerException(""String_Node_Str"");
  if (ops instanceof BufferedOutputStream)   return (BufferedOutputStream)ops;
  return new BufferedOutputStream(ops);
}"
43251,"/** 
 * 获取某一个本地字符串表
 * @param context 上下文
 * @param localeName 本地名
 * @return 字符串表
 * @see org.nutz.mvc.annotation.Localization
 * @see org.nutz.mvc.MessageLoader
 */
@Deprecated public static Map<String,String> getLocaleMessage(ServletContext context,String localeName){
  Map<String,Map<String,String>> msgss=getMessageSet();
  if (null != msgss)   return msgss.get(localeName);
  return null;
}","/** 
 * 获取某一个本地字符串表
 * @param context 上下文
 * @param localeName 本地名
 * @return 字符串表
 * @see org.nutz.mvc.annotation.Localization
 * @see org.nutz.mvc.MessageLoader
 */
@Deprecated public static Map<String,Object> getLocaleMessage(ServletContext context,String localeName){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.get(localeName);
  return null;
}"
43252,"/** 
 * 获取整个应用的字符串表集合
 * @param context 上下文
 * @return 字符串表集合
 */
@Deprecated public static Map<String,Map<String,String>> getMessageSet(ServletContext context){
  return getMessageSet();
}","/** 
 * 获取整个应用的字符串表集合
 * @param context 上下文
 * @return 字符串表集合
 */
@Deprecated public static Map<String,Map<String,Object>> getMessageSet(ServletContext context){
  return getMessageSet();
}"
43253,"/** 
 * 为当前的 HTTP 请求对象设置一些必要的属性。包括： <ul> <li>本地化子字符串 => ${msg} <li>应用的路径名 => ${base} </ul>
 * @param req HTTP 请求对象
 */
@SuppressWarnings(""String_Node_Str"") public static void updateRequestAttributes(HttpServletRequest req){
  HttpSession sess=getHttpSession();
  if (null != getMessageSet()) {
    Map<String,String> msgs=null;
    if (!hasLocale(sess))     msgs=setLocale(sess,getLocaleName(sess));
 else     msgs=(Map<String,String>)sess.getAttribute(MSG);
    if (null == msgs) {
      Map<String,Map<String,String>> msgss=getMessageSet();
      if (msgss.size() > 0)       msgs=msgss.values().iterator().next();
    }
    req.setAttribute(MSG,msgs);
  }
  req.setAttribute(""String_Node_Str"",req.getContextPath());
  req.setAttribute(""String_Node_Str"",req);
}","/** 
 * 为当前的 HTTP 请求对象设置一些必要的属性。包括： <ul> <li>本地化子字符串 => ${msg} <li>应用的路径名 => ${base} </ul>
 * @param req HTTP 请求对象
 */
@SuppressWarnings(""String_Node_Str"") public static void updateRequestAttributes(HttpServletRequest req){
  HttpSession sess=getHttpSession();
  if (null != getMessageSet()) {
    Map<String,Object> msgs=null;
    if (!hasLocale(sess))     msgs=setLocale(sess,getLocaleName(sess));
 else     msgs=(Map<String,Object>)sess.getAttribute(MSG);
    if (null == msgs) {
      Map<String,Map<String,Object>> msgss=getMessageSet();
      if (msgss.size() > 0)       msgs=msgss.values().iterator().next();
    }
    req.setAttribute(MSG,msgs);
  }
  req.setAttribute(""String_Node_Str"",req.getContextPath());
  req.setAttribute(""String_Node_Str"",req);
}"
43254,"/** 
 * 获取整个应用的默认字符串表
 * @param context 上下文
 * @return 字符串表
 */
public static Map<String,String> getDefaultLocaleMessage(ServletContext context){
  Map<String,Map<String,String>> msgss=getMessageSet();
  if (null != msgss)   return msgss.get(DEFAULT_MSGS);
  return null;
}","/** 
 * 获取整个应用的默认字符串表
 * @param context 上下文
 * @return 字符串表
 */
public static Map<String,Object> getDefaultLocaleMessage(ServletContext context){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.get(DEFAULT_MSGS);
  return null;
}"
43255,"/** 
 * 获取整个应用可用的 Locale 名称集合
 */
public static Set<String> getLocaleNames(ServletContext context){
  Map<String,Map<String,String>> msgss=getMessageSet();
  if (null != msgss)   return msgss.keySet();
  return null;
}","/** 
 * 获取整个应用可用的 Locale 名称集合
 */
public static Set<String> getLocaleNames(ServletContext context){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss)   return msgss.keySet();
  return null;
}"
43256,"/** 
 * 为当前会话设置本地字符串表。如果传入的 localeName 为空，或者不存在该表，则用默认字符串表替代。 执行完毕后，在 session 中会有一个属性（名称请参见 Mvcs.MSGS 定义） <p> 在 jsp 中，你可以用 EL 表达式 ${msgs.xxx} 来直接获取字符串的值。
 * @return 设置的 本地化字符串表
 */
public static Map<String,String> setLocale(HttpSession session,String localeName){
  Map<String,Map<String,String>> msgss=getMessageSet();
  if (null != msgss) {
    Map<String,String> msgs=null;
    if (null != localeName)     msgs=msgss.get(localeName);
    if (null == msgs)     msgs=msgss.get(DEFAULT_MSGS);
    if (null != msgs)     session.setAttribute(MSG,msgs);
    return msgs;
  }
  return null;
}","/** 
 * 为当前会话设置本地字符串表。如果传入的 localeName 为空，或者不存在该表，则用默认字符串表替代。 执行完毕后，在 session 中会有一个属性（名称请参见 Mvcs.MSGS 定义） <p> 在 jsp 中，你可以用 EL 表达式 ${msgs.xxx} 来直接获取字符串的值。
 * @return 设置的 本地化字符串表
 */
public static Map<String,Object> setLocale(HttpSession session,String localeName){
  Map<String,Map<String,Object>> msgss=getMessageSet();
  if (null != msgss) {
    Map<String,Object> msgs=null;
    if (null != localeName)     msgs=msgss.get(localeName);
    if (null == msgs)     msgs=msgss.get(DEFAULT_MSGS);
    if (null != msgs)     session.setAttribute(MSG,msgs);
    return msgs;
  }
  return null;
}"
43257,"public void exec(Connection conn,DaoStatement st){
  Object[][] paramMatrix;
  try {
    st.onBefore(conn);
switch (st.getSqlType()) {
case SELECT:
      paramMatrix=st.getParamMatrix();
    if (null == paramMatrix || paramMatrix.length == 0 || paramMatrix[0].length == 0) {
      String sql=st.toPreparedStatement();
      if (log.isDebugEnabled())       log.debug(sql);
      Statement stat=null;
      ResultSet rs=null;
      try {
        stat=conn.createStatement(st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        if (st.getContext().getFetchSize() > 0)         stat.setFetchSize(st.getContext().getFetchSize());
        rs=stat.executeQuery(sql);
        if (st.getContext().getResultSetType() == ResultSet.TYPE_SCROLL_INSENSITIVE) {
          Pager pager=st.getContext().getPager();
          if (pager != null) {
            rs.absolute(pager.getOffset());
          }
        }
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(stat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
 else {
      String sql=st.toPreparedStatement();
      if (paramMatrix.length > 1) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",paramMatrix.length - 1,st);
      }
 else       if (log.isDebugEnabled()) {
        log.debug(st);
      }
      ValueAdaptor[] adaptors=st.getAdaptors();
      PreparedStatement pstat=null;
      ResultSet rs=null;
      try {
        pstat=conn.prepareStatement(sql,st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        for (int i=0; i < paramMatrix[0].length; i++) {
          adaptors[i].set(pstat,paramMatrix[0][i],i + 1);
        }
        rs=pstat.executeQuery();
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(pstat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
  break;
case ALTER:
case TRUNCATE:
case CREATE:
case DROP:
_runStatement(conn,st);
st.onAfter(conn,null);
break;
case RUN:
st.onAfter(conn,null);
break;
default :
paramMatrix=st.getParamMatrix();
if (null == paramMatrix || paramMatrix.length == 0) {
_runStatement(conn,st);
}
 else {
_runPreparedStatement(conn,st,paramMatrix);
}
st.onAfter(conn,null);
}
}
 catch (SQLException e) {
if (log.isInfoEnabled()) log.debug(""String_Node_Str"",e);
throw new DaoException(format(""String_Node_Str"",st.toString(),st.toPreparedStatement()),e);
}
}","public void exec(Connection conn,DaoStatement st){
  Object[][] paramMatrix;
  try {
    st.onBefore(conn);
switch (st.getSqlType()) {
case SELECT:
      paramMatrix=st.getParamMatrix();
    if (null == paramMatrix || paramMatrix.length == 0 || paramMatrix[0].length == 0) {
      String sql=st.toPreparedStatement();
      if (log.isDebugEnabled())       log.debug(sql);
      Statement stat=null;
      ResultSet rs=null;
      try {
        stat=conn.createStatement(st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        int startRow=-1;
        int lastRow=-1;
        if (st.getContext().getResultSetType() == ResultSet.TYPE_SCROLL_INSENSITIVE) {
          Pager pager=st.getContext().getPager();
          if (pager != null) {
            startRow=pager.getOffset();
            lastRow=pager.getOffset() + pager.getPageSize();
          }
        }
        if (lastRow > 0)         stat.setMaxRows(lastRow);
        if (st.getContext().getFetchSize() > 0)         stat.setFetchSize(st.getContext().getFetchSize());
        rs=stat.executeQuery(sql);
        if (startRow > 0)         rs.absolute(startRow);
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(stat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
 else {
      String sql=st.toPreparedStatement();
      if (paramMatrix.length > 1) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",paramMatrix.length - 1,st);
      }
 else       if (log.isDebugEnabled()) {
        log.debug(st);
      }
      ValueAdaptor[] adaptors=st.getAdaptors();
      PreparedStatement pstat=null;
      ResultSet rs=null;
      try {
        pstat=conn.prepareStatement(sql,st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        for (int i=0; i < paramMatrix[0].length; i++) {
          adaptors[i].set(pstat,paramMatrix[0][i],i + 1);
        }
        rs=pstat.executeQuery();
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(pstat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
  break;
case ALTER:
case TRUNCATE:
case CREATE:
case DROP:
_runStatement(conn,st);
st.onAfter(conn,null);
break;
case RUN:
st.onAfter(conn,null);
break;
default :
paramMatrix=st.getParamMatrix();
if (null == paramMatrix || paramMatrix.length == 0) {
_runStatement(conn,st);
}
 else {
_runPreparedStatement(conn,st,paramMatrix);
}
st.onAfter(conn,null);
}
}
 catch (SQLException e) {
if (log.isInfoEnabled()) log.debug(""String_Node_Str"",e);
throw new DaoException(format(""String_Node_Str"",st.toString(),st.toPreparedStatement()),e);
}
}"
43258,"@Override public void formatQuery(Sql sql){
  sql.getContext().setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE);
}","public void formatQuery(Sql sql){
  sql.getContext().setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE);
}"
43259,"/** 
 * 判断当前类型是否为POJO。 除了下面的类型，其他均为 POJO <ul> <li>原生以及所有包裹类 <li>类字符串 <li>类日期 <li>非容器 </ul>
 * @return true or false
 */
public boolean isPojo(){
  if (this.klass.isPrimitive())   return false;
  if (this.isStringLike() || this.isDateTimeLike())   return false;
  if (this.isPrimitiveNumber() || this.isBoolean() || this.isChar())   return false;
  return !isContainer();
}","/** 
 * 判断当前类型是否为POJO。 除了下面的类型，其他均为 POJO <ul> <li>原生以及所有包裹类 <li>类字符串 <li>类日期 <li>非容器 </ul>
 * @return true or false
 */
public boolean isPojo(){
  if (this.klass.isPrimitive() || this.isEnum())   return false;
  if (this.isStringLike() || this.isDateTimeLike())   return false;
  if (this.isPrimitiveNumber() || this.isBoolean() || this.isChar())   return false;
  return !isContainer();
}"
43260,"public void setProductName(String productName){
  this.productName=productName;
  String proName=productName.toLowerCase();
  if (""String_Node_Str"".equals(proName)) {
    type=DB.H2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.PSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.MYSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.ORACLE;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.DB2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLSERVER;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLITE;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.HSQL;
  }
 else {
    type=DB.OTHER;
  }
}","public void setProductName(String productName){
  this.productName=productName;
  String proName=productName.toLowerCase();
  if (""String_Node_Str"".equals(proName)) {
    type=DB.H2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.PSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.MYSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.ORACLE;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.DB2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLSERVER;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLITE;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.HSQL;
  }
 else   if (proName.contains(""String_Node_Str"")) {
    type=DB.DERBY;
  }
 else {
    type=DB.OTHER;
  }
}"
43261,"protected String createResultSetMetaSql(Entity<?> en){
  return ""String_Node_Str"" + en.getViewName();
}","protected String createResultSetMetaSql(Entity<?> en){
  return ""String_Node_Str"" + en.getViewName() + ""String_Node_Str"";
}"
43262,"void visitX(int i){
  if (i < 6) {
    mv.visitInsn(i + ICONST_0);
  }
 else {
    mv.visitIntInsn(BIPUSH,i);
  }
}","void visitX(int i){
  if (i < 6) {
    mv.visitInsn(i + ICONST_0);
  }
 else {
    if (i < Byte.MAX_VALUE)     mv.visitIntInsn(BIPUSH,i);
 else     mv.visitIntInsn(SIPUSH,i);
  }
}"
43263,"public JarResourceLocation(String jarPath){
  this.jarPath=jarPath;
  try {
    ZipInputStream zis=Scans.makeZipInputStream(jarPath);
    ZipEntry ens=null;
    while (null != (ens=zis.getNextEntry())) {
      if (ens.isDirectory())       continue;
      names.add(ens.getName());
    }
    zis.close();
  }
 catch (  Throwable e) {
    if (log.isWarnEnabled())     log.warn(""String_Node_Str"" + jarPath + ""String_Node_Str"",e);
  }
}","public JarResourceLocation(String jarPath){
  this.jarPath=jarPath;
  try {
    ZipInputStream zis=Scans.makeZipInputStream(jarPath);
    ZipEntry ens=null;
    while (null != (ens=zis.getNextEntry())) {
      if (ens.isDirectory())       continue;
      names.add(ens.getName());
    }
    zis.close();
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}"
43264,"public static ResourceLocation file(File root){
  return new FileSystemResourceLocation(root.getAbsoluteFile());
}","public static ResourceLocation file(File root){
  if (!root.exists())   return new ErrorResourceLocation(root);
  try {
    return new FileSystemResourceLocation(root.getAbsoluteFile());
  }
 catch (  Exception e) {
    return new ErrorResourceLocation(root);
  }
}"
43265,"public void scan(String base,Pattern regex,List<NutResource> list){
  try {
    for (    String ensName : names) {
      String name=ensName;
      if (name.contains(""String_Node_Str""))       name=name.substring(name.lastIndexOf('/') + 1);
      if (ensName.startsWith(base) && (null == regex || regex.matcher(name).find())) {
        list.add(Scans.makeJarNutResource(jarPath,ensName,base));
      }
    }
  }
 catch (  Throwable e) {
    if (log.isWarnEnabled())     log.warn(""String_Node_Str"" + jarPath + ""String_Node_Str"",e);
  }
}","public void scan(String base,Pattern regex,List<NutResource> list){
  for (  String ensName : names) {
    String name=ensName;
    if (name.contains(""String_Node_Str""))     name=name.substring(name.lastIndexOf('/') + 1);
    if (ensName.startsWith(base) && (null == regex || regex.matcher(name).find())) {
      try {
        list.add(Scans.makeJarNutResource(jarPath,ensName,base));
      }
 catch (      IOException e) {
        if (log.isInfoEnabled())         log.info(""String_Node_Str"" + jarPath,e);
      }
    }
  }
}"
43266,"public static ResourceLocation jar(String jarPath){
  return new JarResourceLocation(jarPath);
}","public static ResourceLocation jar(String jarPath){
  try {
    return new JarResourceLocation(jarPath);
  }
 catch (  Exception e) {
    return new ErrorResourceLocation(jarPath);
  }
}"
43267,"public static Set<Class<?>> scanModules(Class<?> mainModule){
  Modules ann=mainModule.getAnnotation(Modules.class);
  boolean scan=null == ann ? false : ann.scanPackage();
  List<Class<?>> list=new LinkedList<Class<?>>();
  list.add(mainModule);
  if (null != ann) {
    for (    Class<?> module : ann.value()) {
      list.add(module);
    }
  }
  Set<Class<?>> modules=new HashSet<Class<?>>();
  if (null != ann && ann.packages() != null && ann.packages().length > 0) {
    for (    String packageName : ann.packages())     scanModuleInPackage(modules,packageName);
  }
  for (  Class<?> type : list) {
    if (scan) {
      URL location=type.getProtectionDomain().getCodeSource().getLocation();
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",location);
      Scans.me().registerLocation(location,""String_Node_Str"");
      scanModuleInPackage(modules,type.getPackage().getName());
    }
 else {
      if (isModule(type)) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",type.getName());
        modules.add(type);
      }
 else       if (log.isTraceEnabled()) {
        log.tracef(""String_Node_Str"",type.getName());
      }
    }
  }
  return modules;
}","public static Set<Class<?>> scanModules(Class<?> mainModule){
  Modules ann=mainModule.getAnnotation(Modules.class);
  boolean scan=null == ann ? false : ann.scanPackage();
  List<Class<?>> list=new LinkedList<Class<?>>();
  list.add(mainModule);
  if (null != ann) {
    for (    Class<?> module : ann.value()) {
      list.add(module);
    }
  }
  Set<Class<?>> modules=new HashSet<Class<?>>();
  if (null != ann && ann.packages() != null && ann.packages().length > 0) {
    for (    String packageName : ann.packages())     scanModuleInPackage(modules,packageName);
  }
  for (  Class<?> type : list) {
    if (scan) {
      URL location=type.getProtectionDomain().getCodeSource().getLocation();
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",location);
      Scans.me().registerLocation(location);
      scanModuleInPackage(modules,type.getPackage().getName());
    }
 else {
      if (isModule(type)) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",type.getName());
        modules.add(type);
      }
 else       if (log.isTraceEnabled()) {
        log.tracef(""String_Node_Str"",type.getName());
      }
    }
  }
  return modules;
}"
43268,"public void registerLocation(URL url,String referPath){
  if (url == null)   return;
  try {
    if (url.toString().contains(""String_Node_Str"")) {
      locations.add(ResourceLocation.jar(new JarEntryInfo(url.toString()).getJarPath()));
    }
 else {
      String root=new File(url.toURI()).getAbsolutePath();
      root=root.substring(0,root.length() - referPath.length());
      locations.add(ResourceLocation.file(new File(root)));
    }
  }
 catch (  Throwable e) {
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + url,e);
  }
}","public void registerLocation(URL url){
  if (url == null)   return;
  try {
    if (url.toString().endsWith(""String_Node_Str"")) {
      locations.add(ResourceLocation.jar(new JarEntryInfo(url.toString()).getJarPath()));
    }
 else {
      locations.add(ResourceLocation.file(new File(url.toURI())));
    }
  }
 catch (  Throwable e) {
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + url,e);
  }
}"
43269,"private Scans(){
  locations.add(ResourceLocation.file(new File(""String_Node_Str"")));
  registerLocation(Nutz.class);
  try {
    String referPath=""String_Node_Str"";
    Enumeration<URL> urls=getClass().getClassLoader().getResources(referPath);
    while (urls.hasMoreElements()) {
      registerLocation(urls.nextElement(),referPath);
    }
  }
 catch (  IOException e) {
  }
  try {
    String classpath=System.getProperties().getProperty(""String_Node_Str"");
    String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
    for (    String pathZ : paths) {
      if (pathZ.endsWith(""String_Node_Str""))       locations.add(ResourceLocation.jar(pathZ));
 else       locations.add(ResourceLocation.file(new File(pathZ)));
    }
  }
 catch (  Throwable e) {
  }
}","private Scans(){
  locations.add(ResourceLocation.file(new File(""String_Node_Str"")));
  registerLocation(Nutz.class);
  try {
    String referPath=""String_Node_Str"";
    Enumeration<URL> urls=getClass().getClassLoader().getResources(referPath);
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      url=new URL(url.toString().substring(0,url.toString().length() - referPath.length() - 2));
      registerLocation(url);
    }
  }
 catch (  IOException e) {
  }
  try {
    String classpath=System.getProperties().getProperty(""String_Node_Str"");
    String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
    for (    String pathZ : paths) {
      if (pathZ.endsWith(""String_Node_Str""))       locations.add(ResourceLocation.jar(pathZ));
 else       locations.add(ResourceLocation.file(new File(pathZ)));
    }
  }
 catch (  Throwable e) {
  }
}"
43270,"@Override protected String evalFieldType(MappingField mf){
switch (mf.getColumnType()) {
case INT:
    if (mf.getWidth() > 0)     return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str"";
  return ""String_Node_Str"";
case FLOAT:
if (mf.getWidth() > 0 && mf.getPrecision() > 0) {
  return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str""+ mf.getPrecision()+ ""String_Node_Str"";
}
if (mf.getTypeMirror().isDouble()) return ""String_Node_Str"";
return ""String_Node_Str"";
case BINARY:
return ""String_Node_Str"";
}
return super.evalFieldType(mf);
}","@Override protected String evalFieldType(MappingField mf){
switch (mf.getColumnType()) {
case INT:
    if (mf.getWidth() > 0)     return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str"";
  return ""String_Node_Str"";
case FLOAT:
if (mf.getWidth() > 0 && mf.getPrecision() > 0) {
  return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str""+ mf.getPrecision()+ ""String_Node_Str"";
}
if (mf.getTypeMirror().isDouble()) return ""String_Node_Str"";
return ""String_Node_Str"";
case BINARY:
return ""String_Node_Str"";
case DATETIME:
return ""String_Node_Str"";
}
return super.evalFieldType(mf);
}"
43271,"public void registerLocation(URL url){
  if (url == null)   return;
  try {
    if (url.toString().endsWith(""String_Node_Str"")) {
      locations.add(ResourceLocation.jar(new JarEntryInfo(url.toString()).getJarPath()));
    }
 else {
      locations.add(ResourceLocation.file(new File(url.toURI())));
    }
  }
 catch (  Throwable e) {
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + url,e);
  }
}","public void registerLocation(URL url){
  if (url == null)   return;
  try {
    if (url.toString().endsWith(""String_Node_Str"")) {
      locations.add(ResourceLocation.jar(url.toString()));
    }
 else {
      locations.add(ResourceLocation.file(new File(url.toURI())));
    }
  }
 catch (  Throwable e) {
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + url,e);
  }
}"
43272,"private Scans(){
  locations.add(ResourceLocation.file(new File(""String_Node_Str"")));
  registerLocation(Nutz.class);
  try {
    String referPath=""String_Node_Str"";
    Enumeration<URL> urls=getClass().getClassLoader().getResources(referPath);
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      url=new URL(url.toString().substring(0,url.toString().length() - referPath.length() - 2));
      registerLocation(url);
    }
  }
 catch (  IOException e) {
  }
  try {
    String classpath=System.getProperties().getProperty(""String_Node_Str"");
    String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
    for (    String pathZ : paths) {
      if (pathZ.endsWith(""String_Node_Str""))       locations.add(ResourceLocation.jar(pathZ));
 else       locations.add(ResourceLocation.file(new File(pathZ)));
    }
  }
 catch (  Throwable e) {
  }
}","private Scans(){
  locations.add(ResourceLocation.file(new File(""String_Node_Str"")));
  registerLocation(Nutz.class);
  try {
    String referPath=""String_Node_Str"";
    Enumeration<URL> urls=getClass().getClassLoader().getResources(referPath);
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url.toString().contains(""String_Node_Str""))       url=new URL(url.toString().substring(0,url.toString().length() - referPath.length() - 2));
 else       url=new URL(url.toString().substring(0,url.toString().length() - referPath.length()));
      registerLocation(url);
    }
  }
 catch (  IOException e) {
  }
  try {
    String classpath=System.getProperties().getProperty(""String_Node_Str"");
    String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
    for (    String pathZ : paths) {
      if (pathZ.endsWith(""String_Node_Str""))       locations.add(ResourceLocation.jar(pathZ));
 else       locations.add(ResourceLocation.file(new File(pathZ)));
    }
  }
 catch (  Throwable e) {
  }
}"
43273,"protected void scanClasspath(String src,Pattern regex,List<NutResource> list){
  String classpath=System.getProperties().getProperty(""String_Node_Str"");
  if (log.isInfoEnabled())   log.info(""String_Node_Str"" + classpath);
  String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
  for (  String pathZ : paths) {
    if (pathZ.endsWith(""String_Node_Str""))     list.addAll(scanInJar(checkSrc(src),regex,pathZ));
 else     list.addAll(scanInDir(regex,new File(pathZ + ""String_Node_Str"" + src),true));
  }
}","protected void scanClasspath(String src,Pattern regex,List<NutResource> list){
  try {
    String classpath=System.getProperties().getProperty(""String_Node_Str"");
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + classpath);
    String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
    for (    String pathZ : paths) {
      if (pathZ.endsWith(""String_Node_Str""))       list.addAll(scanInJar(checkSrc(src),regex,pathZ));
 else       list.addAll(scanInDir(regex,new File(pathZ + ""String_Node_Str"" + src),true));
    }
  }
 catch (  Throwable e) {
  }
  try {
    Enumeration<URL> urls=getClass().getClassLoader().getResources(""String_Node_Str"");
    while (urls.hasMoreElements()) {
      list.addAll(scanInJar(src,regex,new JarEntryInfo(urls.nextElement().toString()).getJarPath()));
    }
  }
 catch (  Throwable e) {
  }
}"
43274,"public List<NutResource> list(String src,String filter){
  final List<NutResource> list=new LinkedList<NutResource>();
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  File f=Files.findFile(src);
  if (f != null && f.exists()) {
    if (f.isFile())     list.addAll(scanInDir(regex,f.getParentFile(),ignoreHidden));
 else     list.addAll(scanInDir(regex,f,ignoreHidden));
  }
 else {
    String path=Disks.absolute(src,getClass().getClassLoader(),Encoding.defaultEncoding());
    if (null != path) {
      f=new File(path);
      if (!path.contains(""String_Node_Str"")) {
        int pos=path.lastIndexOf(src);
        if (pos > 0)         list.addAll(scanInDir(regex,f,ignoreHidden));
      }
 else {
        JarEntryInfo jeInfo=new JarEntryInfo(path);
        list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
      }
    }
 else {
      try {
        Enumeration<URL> en=getClass().getClassLoader().getResources(src);
        if (en != null) {
          while (en.hasMoreElements()) {
            JarEntryInfo jeInfo=new JarEntryInfo(en.nextElement().getPath());
            list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
          }
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
  if (list.isEmpty())   scanClasspath(src,regex,list);
  return list;
}","public List<NutResource> list(String src,String filter){
  final List<NutResource> list=new LinkedList<NutResource>();
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  File f=Files.findFile(src);
  if (f != null && f.exists()) {
    if (f.isFile())     list.addAll(scanInDir(regex,f.getParentFile(),ignoreHidden));
 else     list.addAll(scanInDir(regex,f,ignoreHidden));
  }
 else {
    String path=Disks.absolute(src,getClass().getClassLoader(),Encoding.defaultEncoding());
    if (null != path) {
      f=new File(path);
      if (!path.contains(""String_Node_Str"")) {
        int pos=path.lastIndexOf(src);
        if (pos > 0)         list.addAll(scanInDir(regex,f,ignoreHidden));
      }
 else {
        JarEntryInfo jeInfo=new JarEntryInfo(path);
        list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
      }
    }
 else {
      try {
        Enumeration<URL> en=getClass().getClassLoader().getResources(src);
        if (en != null) {
          while (en.hasMoreElements()) {
            JarEntryInfo jeInfo=new JarEntryInfo(en.nextElement().getPath());
            list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
          }
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
  scanClasspath(src,regex,list);
  return list;
}"
43275,"/** 
 * 为一次 HTTP 请求，创建一个可以被表达式引擎接受的上下文对象
 * @param req HTTP 请求对象
 * @param obj 入口函数的返回值
 * @return 上下文对象
 */
@SuppressWarnings(""String_Node_Str"") public static Context createContext(HttpServletRequest req,Object obj){
  Context context=Lang.context();
  Object globalContext=Mvcs.getServletContext().getAttribute(Loading.CONTEXT_NAME);
  if (globalContext != null) {
    context.putAll((Context)globalContext);
  }
  Map<String,Object> a=new HashMap<String,Object>();
  for (Enumeration<String> en=req.getAttributeNames(); en.hasMoreElements(); ) {
    String tem=en.nextElement();
    a.put(tem,req.getAttribute(tem));
  }
  context.set(""String_Node_Str"",a);
  Map<String,String> p=new HashMap<String,String>();
  for (  Object o : req.getParameterMap().keySet()) {
    String key=(String)o;
    String value=req.getParameter(key);
    p.put(key,value);
    context.set(key,value);
  }
  context.set(""String_Node_Str"",p);
  Map<String,String> u=new HashMap<String,String>();
  AtMap at=Mvcs.getAtMap();
  if (at != null) {
    for (    Object o : at.keys()) {
      String key=(String)o;
      u.put(key,at.get(key));
    }
    context.set(""String_Node_Str"",u);
  }
  if (null != obj)   context.set(ViewProcessor.DEFAULT_ATTRIBUTE,obj);
  return context;
}","/** 
 * 为一次 HTTP 请求，创建一个可以被表达式引擎接受的上下文对象
 * @param req HTTP 请求对象
 * @param obj 入口函数的返回值
 * @return 上下文对象
 */
@SuppressWarnings(""String_Node_Str"") public static Context createContext(HttpServletRequest req,Object obj){
  Context context=Lang.context();
  Object globalContext=Mvcs.getServletContext().getAttribute(Loading.CONTEXT_NAME);
  if (globalContext != null) {
    context.putAll((Context)globalContext);
  }
  Map<String,Object> req_attr=new HashMap<String,Object>();
  for (Enumeration<String> en=req.getAttributeNames(); en.hasMoreElements(); ) {
    String tem=en.nextElement();
    req_attr.put(tem,req.getAttribute(tem));
  }
  context.set(""String_Node_Str"",req_attr);
  context.set(""String_Node_Str"",req_attr);
  Map<String,Object> session_attr=new HashMap<String,Object>();
  for (Enumeration<String> en=req.getSession().getAttributeNames(); en.hasMoreElements(); ) {
    String tem=en.nextElement();
    session_attr.put(tem,req.getAttribute(tem));
  }
  context.set(""String_Node_Str"",session_attr);
  Map<String,String> p=new HashMap<String,String>();
  for (  Object o : req.getParameterMap().keySet()) {
    String key=(String)o;
    String value=req.getParameter(key);
    p.put(key,value);
    context.set(key,value);
  }
  context.set(""String_Node_Str"",p);
  Map<String,String> u=new HashMap<String,String>();
  AtMap at=Mvcs.getAtMap();
  if (at != null) {
    for (    Object o : at.keys()) {
      String key=(String)o;
      u.put(key,at.get(key));
    }
    context.set(""String_Node_Str"",u);
  }
  if (null != obj)   context.set(ViewProcessor.DEFAULT_ATTRIBUTE,obj);
  return context;
}"
43276,"@SuppressWarnings({""String_Node_Str""}) protected static Collection<?> createCollection(Object src,Class<?> toType) throws FailToCastObjectException {
  Collection<?> coll=null;
  try {
    coll=(Collection<Object>)toType.newInstance();
  }
 catch (  Exception e) {
    if (Modifier.isAbstract(toType.getModifiers()) && toType.isAssignableFrom(ArrayList.class)) {
      coll=new ArrayList<Object>(Array.getLength(src));
    }
    if (null == coll)     throw new FailToCastObjectException(String.format(""String_Node_Str"",toType.getName()),e);
  }
  return coll;
}","@SuppressWarnings({""String_Node_Str""}) protected static Collection<?> createCollection(Object src,Class<?> toType) throws FailToCastObjectException {
  Collection<?> coll=null;
  try {
    coll=(Collection<Object>)toType.newInstance();
  }
 catch (  Exception e) {
    if (Modifier.isAbstract(toType.getModifiers())) {
      if (toType.isAssignableFrom(ArrayList.class)) {
        coll=new ArrayList<Object>(Array.getLength(src));
      }
 else       if (toType.isAssignableFrom(HashSet.class)) {
        coll=new HashSet<Object>();
      }
    }
    if (null == coll)     throw new FailToCastObjectException(String.format(""String_Node_Str"",toType.getName()),e);
  }
  return coll;
}"
43277,"public AbstractNutConfig(ServletContext context){
  Scans.me().init(context);
}","public AbstractNutConfig(ServletContext context){
  Scans.me().init(context);
  Json.clearEntityCache();
}"
43278,"private void enhandMethod(){
  for (  Method method : methodArray) {
    String methodName=method.getName();
    String methodDesc=Type.getMethodDescriptor(method);
    int methodAccess=getAccess(method.getModifiers());
    MethodVisitor mv=cw.visitMethod(methodAccess,methodName,methodDesc,null,convertExp(method.getExceptionTypes()));
    int methodIndex=findMethodIndex(methodName,methodDesc,methodArray);
    new AopMethodAdapter(mv,methodAccess,methodName,methodDesc,methodIndex,myName,enhancedSuperName).visitCode();
  }
}","private void enhandMethod(){
  for (  Method method : methodArray) {
    String methodName=method.getName();
    String methodDesc=Type.getMethodDescriptor(method);
    int methodAccess=getAccess(method.getModifiers());
    MethodVisitor mv=cw.visitMethod(methodAccess,methodName,methodDesc,null,convertExp(method.getExceptionTypes()));
    int methodIndex=findMethodIndex(methodName,methodDesc,methodArray);
    AopMethodAdapter adapter=new AopMethodAdapter(mv,methodAccess,methodName,methodDesc,methodIndex,myName,enhancedSuperName);
    adapter.visitCode();
    adapter.visitAttribute();
  }
}"
43279,"ClassY(Class<?> klass,String myName,Method[] methodArray,Constructor<?>[] constructors){
  this.myName=myName.replace('.','/');
  this.enhancedSuperName=klass.getName().replace('.','/');
  this.cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
  cw.visit(AsmClassAgent.CLASS_LEVEL,ACC_PUBLIC,this.myName,null,enhancedSuperName,getParentInterfaces(klass));
  this.methodArray=methodArray;
  this.constructors=constructors;
}","ClassY(Class<?> klass,String myName,Method[] methodArray,Constructor<?>[] constructors){
  this.myName=myName.replace('.','/');
  this.enhancedSuperName=klass.getName().replace('.','/');
  this.cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
  cw.visit(AsmClassAgent.CLASS_LEVEL,ACC_PUBLIC,this.myName,null,enhancedSuperName,getParentInterfaces(klass));
  this.methodArray=methodArray;
  this.constructors=constructors;
  this.superClass=klass;
}"
43280,"byte[] toByteArray(){
  addField();
  addConstructors();
  addAopMethods();
  enhandMethod();
  return cw.toByteArray();
}","byte[] toByteArray(){
  addField();
  addConstructors();
  addAopMethods();
  enhandMethod();
  cw.visitSource(superClass.getSimpleName() + ""String_Node_Str"",null);
  return cw.toByteArray();
}"
43281,"/** 
 * Constructs a new empty attribute.
 * @param type the type of the attribute.
 */
protected Attribute(final String type){
  this.type=type;
}","/** 
 * Constructs a new empty attribute.
 * @param type the type of the attribute.
 */
public Attribute(final String type){
  this.type=type;
}"
43282,"/** 
 * 检查一个字符串是否为合法的电子邮件地址
 * @param input 需要检查的字符串
 * @return true 如果是有效的邮箱地址
 */
public static synchronized final boolean isEmail(CharSequence input){
  return email_Pattern.matcher(input).matches();
}","/** 
 * 检查一个字符串是否为合法的电子邮件地址
 * @param input 需要检查的字符串
 * @return true 如果是有效的邮箱地址
 */
public static final boolean isEmail(CharSequence input){
  if (Strings.isBlank(input))   return false;
  try {
    new Email(input.toString());
    return true;
  }
 catch (  Exception e) {
  }
  return false;
}"
43283,"public static PItem cndAuto(Entity<?> en,Object obj){
  obj=Lang.first(obj);
switch (en.getPkType()) {
case ID:
    Number id=null != obj ? ((Number)en.getIdField().getValue(obj)) : null;
  return cndId(en,id);
case NAME:
String name=null != obj ? en.getNameField().getValue(obj).toString() : null;
return cndName(en,name);
case COMPOSITE:
Object[] pks=null;
if (null != obj) {
pks=new Object[en.getCompositePKFields().size()];
int i=0;
for (EntityField ef : en.getCompositePKFields()) pks[i++]=ef.getValue(obj);
}
return cndPk(en,pks);
default :
throw Lang.makeThrow(""String_Node_Str"",en.getType().getName(),obj);
}
}","public static PItem cndAuto(Entity<?> en,Object obj){
  obj=Lang.first(obj);
switch (en.getPkType()) {
case ID:
    Number id=null != obj ? ((Number)en.getIdField().getValue(obj)) : null;
  return cndId(en,id);
case NAME:
String name=null != obj ? en.getNameField().getValue(obj).toString() : null;
return cndName(en,name);
case COMPOSITE:
Object[] pks=null;
if (null != obj) {
pks=new Object[en.getCompositePKFields().size()];
int i=0;
for (EntityField ef : en.getCompositePKFields()) pks[i++]=ef.getValue(obj);
}
return cndPk(en,pks);
default :
log.infof(""String_Node_Str"",en.getType().getName(),obj);
return null;
}
}"
43284,"private <T>Pair2[] findMatchedMethod(Class<T> klass){
  Method[] all=Mirror.me(klass).getAllDeclaredMethodsWithoutTop();
  List<Pair2> p2=new ArrayList<Pair2>();
  for (  Method m : all) {
    int mod=m.getModifiers();
    if (mod == 0 || Modifier.isStatic(mod) || Modifier.isPrivate(mod))     continue;
    ArrayList<MethodInterceptor> mls=new ArrayList<MethodInterceptor>();
    for (    Pair p : pairs)     if (p.matcher.match(m))     mls.add(p.listener);
    if (mls.size() > 0)     p2.add(new Pair2(m,mls));
  }
  return p2.toArray(new Pair2[p2.size()]);
}","private <T>Pair2[] findMatchedMethod(Class<T> klass){
  Method[] all=Mirror.me(klass).getAllDeclaredMethodsWithoutTop();
  List<Pair2> p2=new ArrayList<Pair2>();
  for (  Method m : all) {
    int mod=m.getModifiers();
    if (mod == 0 || Modifier.isStatic(mod) || Modifier.isPrivate(mod) || Modifier.isFinal(mod) || Modifier.isAbstract(mod))     continue;
    ArrayList<MethodInterceptor> mls=new ArrayList<MethodInterceptor>();
    for (    Pair p : pairs)     if (p.matcher.match(m))     mls.add(p.listener);
    if (mls.size() > 0)     p2.add(new Pair2(m,mls));
  }
  return p2.toArray(new Pair2[p2.size()]);
}"
43285,"@SuppressWarnings(""String_Node_Str"") public Object invoke(Connection conn,ResultSet rs,Pojo pojo) throws SQLException {
  final Each<Object> each=pojo.getContext().attr(Each.class);
  if (null == each)   return null;
  final Entity<?> en=pojo.getEntity();
  ResultSetLooping ing=new ResultSetLooping(){
    protected boolean createObject(    int index,    ResultSet rs,    SqlContext context,    int rowCount){
      Object obj=en.getObject(rs,context.getFieldMatcher());
      try {
        each.invoke(index,obj,rowCount);
      }
 catch (      LoopException e) {
        throw Lang.wrapThrow(e);
      }
      return false;
    }
  }
;
  try {
    if (each instanceof Loop)     if (!((Loop<?>)each).begin())     return 0;
    ing.doLoop(rs,pojo.getContext());
    if (each instanceof Loop)     ((Loop<?>)each).end();
  }
 catch (  ExitLoop e) {
  }
catch (  LoopException e) {
    throw new SQLException(e.getCause());
  }
  return ing.getIndex() + 1;
}","@SuppressWarnings(""String_Node_Str"") public Object invoke(Connection conn,ResultSet rs,Pojo pojo) throws SQLException {
  final Each<Object> each=pojo.getContext().attr(Each.class);
  if (null == each)   return null;
  final Entity<?> en=pojo.getEntity();
  ResultSetLooping ing=new ResultSetLooping(){
    protected boolean createObject(    int index,    ResultSet rs,    SqlContext context,    int rowCount){
      Object obj=en.getObject(rs,context.getFieldMatcher());
      try {
        each.invoke(index,obj,rowCount);
      }
 catch (      LoopException e) {
        throw Lang.wrapThrow(e);
      }
      return false;
    }
  }
;
  try {
    if (each instanceof Loop)     if (!((Loop<?>)each).begin())     return 0;
    ing.doLoop(rs,pojo.getContext());
    if (each instanceof Loop)     ((Loop<?>)each).end();
  }
 catch (  ExitLoop e) {
  }
catch (  LoopException e) {
    SQLException e2=new SQLException();
    e2.initCause(e.getCause());
    throw e2;
  }
  return ing.getIndex() + 1;
}"
43286,"@Override protected String evalFieldType(MappingField mf){
switch (mf.getColumnType()) {
case INT:
    if (mf.getWidth() > 0)     return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str"";
  return ""String_Node_Str"";
case FLOAT:
if (mf.getWidth() > 0 && mf.getPrecision() > 0) {
  return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str""+ mf.getPrecision()+ ""String_Node_Str"";
}
if (mf.getTypeMirror().isDouble()) return ""String_Node_Str"";
return ""String_Node_Str"";
}
return super.evalFieldType(mf);
}","@Override protected String evalFieldType(MappingField mf){
switch (mf.getColumnType()) {
case INT:
    if (mf.getWidth() > 0)     return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str"";
  return ""String_Node_Str"";
case FLOAT:
if (mf.getWidth() > 0 && mf.getPrecision() > 0) {
  return ""String_Node_Str"" + mf.getWidth() + ""String_Node_Str""+ mf.getPrecision()+ ""String_Node_Str"";
}
if (mf.getTypeMirror().isDouble()) return ""String_Node_Str"";
return ""String_Node_Str"";
case BINARY:
return ""String_Node_Str"";
}
return super.evalFieldType(mf);
}"
43287,"public void set(PreparedStatement stat,Object obj,int i) throws SQLException {
  if (null == obj) {
    stat.setString(i,null);
  }
 else {
    String v=Castors.me().castToString(obj);
    stat.setString(i,v);
  }
}","public void set(PreparedStatement stat,Object obj,int index) throws SQLException {
  if (null == obj) {
    stat.setNull(index,Types.BINARY);
  }
 else {
    stat.setBytes(index,(byte[])obj);
  }
}"
43288,"public static ValueAdaptor getAdaptor(Mirror<?> mirror){
  if (mirror.isStringLike())   return Jdbcs.Adaptor.asString;
  if (mirror.isInt())   return Jdbcs.Adaptor.asInteger;
  if (mirror.isBoolean())   return Jdbcs.Adaptor.asBoolean;
  if (mirror.isLong())   return Jdbcs.Adaptor.asLong;
  if (mirror.isEnum())   return Jdbcs.Adaptor.asEnumChar;
  if (mirror.isChar())   return Jdbcs.Adaptor.asChar;
  if (mirror.isOf(Timestamp.class))   return Jdbcs.Adaptor.asTimestamp;
  if (mirror.isByte())   return Jdbcs.Adaptor.asByte;
  if (mirror.isShort())   return Jdbcs.Adaptor.asShort;
  if (mirror.isFloat())   return Jdbcs.Adaptor.asFloat;
  if (mirror.isDouble())   return Jdbcs.Adaptor.asDouble;
  if (mirror.isOf(BigDecimal.class))   return Jdbcs.Adaptor.asBigDecimal;
  if (mirror.isOf(Calendar.class))   return Jdbcs.Adaptor.asCalendar;
  if (mirror.isOf(java.util.Date.class))   return Jdbcs.Adaptor.asDate;
  if (mirror.isOf(java.sql.Date.class))   return Jdbcs.Adaptor.asSqlDate;
  if (mirror.isOf(java.sql.Time.class))   return Jdbcs.Adaptor.asSqlTime;
  if (mirror.isOf(Blob.class))   return new BlobValueAdaptor(conf.getPool());
  if (mirror.isOf(Clob.class))   return new ClobValueAdaptor(conf.getPool());
  return Jdbcs.Adaptor.asString;
}","public static ValueAdaptor getAdaptor(Mirror<?> mirror){
  if (mirror.isStringLike())   return Jdbcs.Adaptor.asString;
  if (mirror.isInt())   return Jdbcs.Adaptor.asInteger;
  if (mirror.isBoolean())   return Jdbcs.Adaptor.asBoolean;
  if (mirror.isLong())   return Jdbcs.Adaptor.asLong;
  if (mirror.isEnum())   return Jdbcs.Adaptor.asEnumChar;
  if (mirror.isChar())   return Jdbcs.Adaptor.asChar;
  if (mirror.isOf(Timestamp.class))   return Jdbcs.Adaptor.asTimestamp;
  if (mirror.isByte())   return Jdbcs.Adaptor.asByte;
  if (mirror.isShort())   return Jdbcs.Adaptor.asShort;
  if (mirror.isFloat())   return Jdbcs.Adaptor.asFloat;
  if (mirror.isDouble())   return Jdbcs.Adaptor.asDouble;
  if (mirror.isOf(BigDecimal.class))   return Jdbcs.Adaptor.asBigDecimal;
  if (mirror.isOf(Calendar.class))   return Jdbcs.Adaptor.asCalendar;
  if (mirror.isOf(java.util.Date.class))   return Jdbcs.Adaptor.asDate;
  if (mirror.isOf(java.sql.Date.class))   return Jdbcs.Adaptor.asSqlDate;
  if (mirror.isOf(java.sql.Time.class))   return Jdbcs.Adaptor.asSqlTime;
  if (mirror.isOf(Blob.class))   return new BlobValueAdaptor(conf.getPool());
  if (mirror.isOf(Clob.class))   return new ClobValueAdaptor(conf.getPool());
  if (mirror.getType().isArray() && mirror.getType().getComponentType() == byte.class) {
    return Jdbcs.Adaptor.asBytes;
  }
  return Jdbcs.Adaptor.asString;
}"
43289,"public Object get(ResultSet rs,String colName) throws SQLException {
  return rs.getObject(colName);
}","public Object get(ResultSet rs,String colName) throws SQLException {
  return rs.getBytes(colName);
}"
43290,"/** 
 * 判断两个输入流是否严格相等
 */
public static boolean equals(InputStream sA,InputStream sB) throws IOException {
  int dA;
  while ((dA=sA.read()) != -1) {
    if (dA != sB.read())     return false;
  }
  return sB.read() == -1;
}","/** 
 * 判断两个输入流是否严格相等
 */
public static boolean equals(InputStream sA,InputStream sB) throws IOException {
  int dA;
  while ((dA=sA.read()) != -1) {
    int dB=sB.read();
    if (dA != dB)     return false;
  }
  return sB.read() == -1;
}"
43291,"public SqlExpressionGroup andNotEquals(String name,Object val){
  return and(eq(name,val).not());
}","public SqlExpressionGroup andNotEquals(String name,Object val){
  if (null == val)   return andNotIsNull(name);
  return and(eq(name,val).not());
}"
43292,"public SqlExpressionGroup andEquals(String name,Object val){
  return and(eq(name,val));
}","public SqlExpressionGroup andEquals(String name,Object val){
  if (null == val)   return andIsNull(name);
  return and(eq(name,val));
}"
43293,"public void addComment(Dao dao,Entity<?> en,String commentTable,String commentColumn){
  if (!en.hasTableComment() && !en.hasColumnComment()) {
    return;
  }
  List<Sql> sqls=new ArrayList<Sql>();
  if (en.hasTableComment()) {
    Sql tableCommentSQL=Sqls.create(commentTable);
    tableCommentSQL.vars().set(""String_Node_Str"",en.getTableName()).set(""String_Node_Str"",en.getTableComment());
    sqls.add(tableCommentSQL);
  }
  if (en.hasColumnComment()) {
    for (    MappingField mf : en.getMappingFields()) {
      if (mf.hasColumnComment()) {
        Sql columnCommentSQL=Sqls.create(commentColumn);
        columnCommentSQL.vars().set(""String_Node_Str"",en.getTableName()).set(""String_Node_Str"",mf.getColumnName()).set(""String_Node_Str"",mf.getColumnComment());
        sqls.add(columnCommentSQL);
      }
    }
  }
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
}","public void addComment(Dao dao,Entity<?> en,String commentTable,String commentColumn){
  if (!en.hasTableComment() && !en.hasColumnComment()) {
    return;
  }
  List<Sql> sqls=new ArrayList<Sql>();
  if (en.hasTableComment()) {
    Sql tableCommentSQL=Sqls.create(Strings.isBlank(commentTable) ? DEFAULT_COMMENT_TABLE : commentTable);
    tableCommentSQL.vars().set(""String_Node_Str"",en.getTableName()).set(""String_Node_Str"",en.getTableComment());
    sqls.add(tableCommentSQL);
  }
  if (en.hasColumnComment()) {
    for (    MappingField mf : en.getMappingFields()) {
      if (mf.hasColumnComment()) {
        Sql columnCommentSQL=Sqls.create(Strings.isBlank(commentColumn) ? DEFAULT_COMMENT_COLUMN : commentColumn);
        columnCommentSQL.vars().set(""String_Node_Str"",en.getTableName()).set(""String_Node_Str"",mf.getColumnName()).set(""String_Node_Str"",mf.getColumnComment());
        sqls.add(columnCommentSQL);
      }
    }
  }
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
}"
43294,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(""String_Node_Str"").append(mf.getColumnName());
    }
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  addComment(dao,en,COMMENT_TABLE,COMMENT_COLUMN);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(""String_Node_Str"").append(mf.getColumnName());
    }
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  addComment(dao,en);
  return true;
}"
43295,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
 else       if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  dao.execute(createIndexs(en).toArray(new Sql[0]));
  createRelation(dao,en);
  addComment(dao,en,COMMENT_TABLE,COMMENT_COLUMN);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
 else       if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  dao.execute(createIndexs(en).toArray(new Sql[0]));
  createRelation(dao,en);
  addComment(dao,en);
  return true;
}"
43296,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isPk() && en.getPks().size() == 1)       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isUnsigned())       sb.append(""String_Node_Str"").append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  List<Sql> sqls=new ArrayList<Sql>();
  sqls.add(Sqls.create(sb.toString()));
  List<MappingField> pks=en.getPks();
  if (pks.size() > 1) {
    StringBuilder pkNames=new StringBuilder();
    StringBuilder pkNames2=new StringBuilder();
    for (    MappingField pk : pks) {
      pkNames.append(pk.getColumnName()).append(',');
      pkNames2.append(pk.getColumnName()).append('_');
    }
    pkNames.setLength(pkNames.length() - 1);
    pkNames2.setLength(pkNames2.length() - 1);
    String sql=String.format(""String_Node_Str"",en.getTableName(),pkNames2,pkNames);
    sqls.add(Sqls.create(sql));
  }
  for (  MappingField mf : en.getMappingFields()) {
    if (!mf.isAutoIncreasement())     continue;
    sqls.add(Sqls.create(gSQL(CSEQ,en.getTableName(),mf.getColumnName())));
    sqls.add(Sqls.create(gSQL(CTRI,en.getTableName(),mf.getColumnName())));
  }
  sqls.addAll(createIndexs(en));
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
  createRelation(dao,en);
  addComment(dao,en,COMMENT_TABLE,COMMENT_COLUMN);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isPk() && en.getPks().size() == 1)       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isUnsigned())       sb.append(""String_Node_Str"").append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  List<Sql> sqls=new ArrayList<Sql>();
  sqls.add(Sqls.create(sb.toString()));
  List<MappingField> pks=en.getPks();
  if (pks.size() > 1) {
    StringBuilder pkNames=new StringBuilder();
    StringBuilder pkNames2=new StringBuilder();
    for (    MappingField pk : pks) {
      pkNames.append(pk.getColumnName()).append(',');
      pkNames2.append(pk.getColumnName()).append('_');
    }
    pkNames.setLength(pkNames.length() - 1);
    pkNames2.setLength(pkNames2.length() - 1);
    String sql=String.format(""String_Node_Str"",en.getTableName(),pkNames2,pkNames);
    sqls.add(Sqls.create(sql));
  }
  for (  MappingField mf : en.getMappingFields()) {
    if (!mf.isAutoIncreasement())     continue;
    sqls.add(Sqls.create(gSQL(CSEQ,en.getTableName(),mf.getColumnName())));
    sqls.add(Sqls.create(gSQL(CTRI,en.getTableName(),mf.getColumnName())));
  }
  sqls.addAll(createIndexs(en));
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
  createRelation(dao,en);
  addComment(dao,en);
  return true;
}"
43297,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  addComment(dao,en,COMMENT_COLUMN);
  return true;
}"
43298,"public Object[][] getParamMatrix(){
  Object[][] re=new Object[rows.size()][adaptors.length];
  int i=0;
  for (  VarSet row : rows) {
    Object[] cols=re[i++];
    for (    String name : literal.getParamIndexes().names()) {
      Object value=row.get(name);
      int[] is=literal.getParamIndexes().getOrderIndex(name);
      for (      int x : is)       cols[x]=value;
    }
  }
  return re;
}","public Object[][] getParamMatrix(){
  if (rows.size() > 0) {
    VarSet vs=rows.get(rows.size() - 1);
    while (null != vs) {
      if (vs.keys().size() == 0) {
        rows.remove(vs);
        vs=null;
        if (rows.size() > 0)         vs=rows.get(rows.size() - 1);
      }
 else {
        break;
      }
    }
  }
  Object[][] re=new Object[rows.size()][adaptors.length];
  int i=0;
  for (  VarSet row : rows) {
    Object[] cols=re[i++];
    for (    String name : literal.getParamIndexes().names()) {
      Object value=row.get(name);
      int[] is=literal.getParamIndexes().getOrderIndex(name);
      for (      int x : is)       cols[x]=value;
    }
  }
  return re;
}"
43299,"protected String toStatement(Object[][] mtrx,String sql){
  StringBuilder sb=new StringBuilder();
  String[] ss=sql.split(""String_Node_Str"");
  int i;
  for (i=0; i < mtrx[0].length; i++) {
    sb.append(ss[i]);
    sb.append(Sqls.formatFieldValue(mtrx[0][i]));
  }
  if (i < ss.length)   sb.append(ss[i]);
  return sb.toString();
}","protected String toStatement(Object[][] mtrx,String sql){
  StringBuilder sb=new StringBuilder();
  String[] ss=sql.split(""String_Node_Str"");
  int i=0;
  if (mtrx.length > 0) {
    for (; i < mtrx[0].length; i++) {
      sb.append(ss[i]);
      sb.append(Sqls.formatFieldValue(mtrx[0][i]));
    }
  }
  if (i < ss.length)   sb.append(ss[i]);
  return sb.toString();
}"
43300,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.length() > 0 && path.charAt(0) == '/') {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.length() > 0 && path.charAt(0) == '/') {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=Mvcs.getRequestPath(req);
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}"
43301,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.length() > 0 && path.charAt(0) == '/') {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=Mvcs.getRequestPath(req);
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.length() > 0 && path.charAt(0) == '/') {
    path=req.getContextPath() + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}"
43302,"@SuppressWarnings(""String_Node_Str"") public Object invoke(Connection conn,ResultSet rs,Pojo pojo) throws SQLException {
  final Each<Object> each=pojo.getContext().attr(Each.class);
  if (null == each)   return null;
  final Entity<?> en=pojo.getEntity();
  ResultSetLooping ing=new ResultSetLooping(){
    protected boolean createObject(    int index,    ResultSet rs,    SqlContext context,    int rowCount){
      Object obj=en.getObject(rs,context.getFieldMatcher());
      try {
        each.invoke(index,obj,rowCount);
      }
 catch (      LoopException e) {
        throw Lang.wrapThrow(e);
      }
      return false;
    }
  }
;
  try {
    ing.doLoop(rs,pojo.getContext());
  }
 catch (  ExitLoop e) {
  }
  return ing.getIndex() + 1;
}","@SuppressWarnings(""String_Node_Str"") public Object invoke(Connection conn,ResultSet rs,Pojo pojo) throws SQLException {
  final Each<Object> each=pojo.getContext().attr(Each.class);
  if (null == each)   return null;
  final Entity<?> en=pojo.getEntity();
  ResultSetLooping ing=new ResultSetLooping(){
    protected boolean createObject(    int index,    ResultSet rs,    SqlContext context,    int rowCount){
      Object obj=en.getObject(rs,context.getFieldMatcher());
      try {
        each.invoke(index,obj,rowCount);
      }
 catch (      LoopException e) {
        throw Lang.wrapThrow(e);
      }
      return false;
    }
  }
;
  try {
    if (each instanceof Loop)     if (!((Loop<?>)each).begin())     return 0;
    ing.doLoop(rs,pojo.getContext());
    if (each instanceof Loop)     ((Loop<?>)each).end();
  }
 catch (  ExitLoop e) {
  }
catch (  LoopException e) {
    throw new SQLException(e.getCause());
  }
  return ing.getIndex() + 1;
}"
43303,"@SuppressWarnings(""String_Node_Str"") public Object invoke(Connection conn,ResultSet rs,Pojo pojo) throws SQLException {
  final Each<Object> each=pojo.getContext().attr(Each.class);
  if (null == each)   return null;
  ResultSetLooping ing=new ResultSetLooping(){
    protected boolean createObject(    int index,    ResultSet rs,    SqlContext context,    int rowCount){
      Object obj=Record.create(rs);
      try {
        each.invoke(index,obj,rowCount);
      }
 catch (      LoopException e) {
        throw Lang.wrapThrow(e);
      }
      return false;
    }
  }
;
  try {
    ing.doLoop(rs,pojo.getContext());
  }
 catch (  ExitLoop e) {
  }
  return ing.getIndex() + 1;
}","@SuppressWarnings(""String_Node_Str"") public Object invoke(Connection conn,ResultSet rs,Pojo pojo) throws SQLException {
  final Each<Object> each=pojo.getContext().attr(Each.class);
  if (null == each)   return null;
  ResultSetLooping ing=new ResultSetLooping(){
    protected boolean createObject(    int index,    ResultSet rs,    SqlContext context,    int rowCount){
      Object obj=Record.create(rs);
      try {
        each.invoke(index,obj,rowCount);
      }
 catch (      LoopException e) {
        throw Lang.wrapThrow(e);
      }
      return false;
    }
  }
;
  try {
    if (each instanceof Loop)     if (!((Loop<?>)each).begin())     return 0;
    ing.doLoop(rs,pojo.getContext());
    if (each instanceof Loop)     ((Loop<?>)each).end();
  }
 catch (  ExitLoop e) {
  }
catch (  LoopException e) {
    throw new SQLException(e.getCause());
  }
  return ing.getIndex() + 1;
}"
43304,"/** 
 * 用回调的方式，遍历一个对象，可以支持遍历 <ul> <li>数组 <li>集合 <li>Map <li>单一元素 </ul>
 * @param obj 对象
 * @param callback 回调
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>void each(Object obj,Each<T> callback){
  if (null == obj || null == callback)   return;
  try {
    Class<T> eType=Mirror.getTypeParam(callback.getClass(),0);
    if (obj.getClass().isArray()) {
      int len=Array.getLength(obj);
      for (int i=0; i < len; i++)       try {
        callback.invoke(i,(T)Array.get(obj,i),len);
      }
 catch (      ContinueLoop e) {
      }
catch (      ExitLoop e) {
        break;
      }
    }
 else     if (obj instanceof Collection) {
      int len=((Collection)obj).size();
      int i=0;
      for (Iterator<T> it=((Collection)obj).iterator(); it.hasNext(); )       try {
        callback.invoke(i++,it.next(),len);
      }
 catch (      ContinueLoop e) {
      }
catch (      ExitLoop e) {
        break;
      }
    }
 else     if (obj instanceof Map) {
      Map map=(Map)obj;
      int len=map.size();
      int i=0;
      if (null != eType && eType != Object.class && eType.isAssignableFrom(Entry.class)) {
        for (        Object v : map.entrySet())         try {
          callback.invoke(i++,(T)v,len);
        }
 catch (        ContinueLoop e) {
        }
catch (        ExitLoop e) {
          break;
        }
      }
 else {
        for (        Object v : map.entrySet())         try {
          callback.invoke(i++,(T)((Entry)v).getValue(),len);
        }
 catch (        ContinueLoop e) {
        }
catch (        ExitLoop e) {
          break;
        }
      }
    }
 else     if (obj instanceof Iterator<?>) {
      Iterator<?> it=(Iterator<?>)obj;
      int i=0;
      while (it.hasNext()) {
        try {
          callback.invoke(i++,(T)it.next(),-1);
        }
 catch (        ContinueLoop e) {
        }
catch (        ExitLoop e) {
          break;
        }
      }
    }
 else     try {
      callback.invoke(0,(T)obj,1);
    }
 catch (    ContinueLoop e) {
    }
catch (    ExitLoop e) {
    }
  }
 catch (  LoopException e) {
    throw Lang.wrapThrow(e.getCause());
  }
}","/** 
 * 用回调的方式，遍历一个对象，可以支持遍历 <ul> <li>数组 <li>集合 <li>Map <li>单一元素 </ul>
 * @param obj 对象
 * @param callback 回调
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>void each(Object obj,Each<T> callback){
  if (null == obj || null == callback)   return;
  try {
    if (callback instanceof Loop)     if (!((Loop)callback).begin())     return;
    Class<T> eType=Mirror.getTypeParam(callback.getClass(),0);
    if (obj.getClass().isArray()) {
      int len=Array.getLength(obj);
      for (int i=0; i < len; i++)       try {
        callback.invoke(i,(T)Array.get(obj,i),len);
      }
 catch (      ContinueLoop e) {
      }
catch (      ExitLoop e) {
        break;
      }
    }
 else     if (obj instanceof Collection) {
      int len=((Collection)obj).size();
      int i=0;
      for (Iterator<T> it=((Collection)obj).iterator(); it.hasNext(); )       try {
        callback.invoke(i++,it.next(),len);
      }
 catch (      ContinueLoop e) {
      }
catch (      ExitLoop e) {
        break;
      }
    }
 else     if (obj instanceof Map) {
      Map map=(Map)obj;
      int len=map.size();
      int i=0;
      if (null != eType && eType != Object.class && eType.isAssignableFrom(Entry.class)) {
        for (        Object v : map.entrySet())         try {
          callback.invoke(i++,(T)v,len);
        }
 catch (        ContinueLoop e) {
        }
catch (        ExitLoop e) {
          break;
        }
      }
 else {
        for (        Object v : map.entrySet())         try {
          callback.invoke(i++,(T)((Entry)v).getValue(),len);
        }
 catch (        ContinueLoop e) {
        }
catch (        ExitLoop e) {
          break;
        }
      }
    }
 else     if (obj instanceof Iterator<?>) {
      Iterator<?> it=(Iterator<?>)obj;
      int i=0;
      while (it.hasNext()) {
        try {
          callback.invoke(i++,(T)it.next(),-1);
        }
 catch (        ContinueLoop e) {
        }
catch (        ExitLoop e) {
          break;
        }
      }
    }
 else     try {
      callback.invoke(0,(T)obj,1);
    }
 catch (    ContinueLoop e) {
    }
catch (    ExitLoop e) {
    }
    if (callback instanceof Loop)     ((Loop)callback).end();
  }
 catch (  LoopException e) {
    throw Lang.wrapThrow(e.getCause());
  }
}"
43305,"public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
switch (meta.getColumnType(i)) {
case Types.TIMESTAMP:
{
          re.set(name,re.getTimestamp(name));
          break;
        }
case Types.CLOB:
{
        re.set(name,rs.getString(i));
        break;
      }
default :
    re.set(name,rs.getObject(i));
  break;
}
re.setSqlType(name,meta.getColumnType(i));
}
return re;
}
 catch (SQLException e) {
throw Lang.wrapThrow(e);
}
}","public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
switch (meta.getColumnType(i)) {
case Types.TIMESTAMP:
{
          re.set(name,rs.getTimestamp(name));
          break;
        }
case Types.CLOB:
{
        re.set(name,rs.getString(i));
        break;
      }
default :
    re.set(name,rs.getObject(i));
  break;
}
re.setSqlType(name,meta.getColumnType(i));
}
return re;
}
 catch (SQLException e) {
throw Lang.wrapThrow(e);
}
}"
43306,"public AtMap(){
  ats=new HashMap<String,String>();
}","public AtMap(){
  ats=new HashMap<String,String>();
  methods=new HashMap<String,Method>();
}"
43307,"public AtMap add(String key,String actionPath){
  if (actionPath.endsWith(""String_Node_Str""))   actionPath=actionPath.substring(0,actionPath.length() - 2);
  ats.put(Strings.trim(key),Strings.trim(actionPath));
  return this;
}","public void add(String key,String actionPath){
  if (actionPath.endsWith(""String_Node_Str""))   actionPath=actionPath.substring(0,actionPath.length() - 2);
  ats.put(Strings.trim(key),Strings.trim(actionPath));
}"
43308,"public void add(ActionChainMaker maker,ActionInfo ai,NutConfig config){
  ActionChain chain=maker.eval(config,ai);
  for (  String path : ai.getPaths()) {
    if (Strings.isBlank(path))     throw new BlankAtException(ai.getModuleType(),ai.getMethod());
    ActionInvoker invoker=map.get(path);
    if (null == invoker) {
      invoker=new ActionInvoker();
      map.put(path,invoker);
      root.add(path,invoker);
    }
    if (ai.isForSpecialHttpMethod()) {
      for (      String httpMethod : ai.getHttpMethods())       invoker.addChain(httpMethod,chain);
    }
 else {
      invoker.setDefaultChain(chain);
    }
    if (log.isDebugEnabled()) {
      String[] paths=ai.getPaths();
      StringBuilder sb=new StringBuilder();
      if (null != paths && paths.length > 0) {
        sb.append(""String_Node_Str"").append(paths[0]).append(""String_Node_Str"");
        for (int i=1; i < paths.length; i++)         sb.append(""String_Node_Str"").append(paths[i]).append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      Method method=ai.getMethod();
      String str;
      if (null != method)       str=method.getName() + ""String_Node_Str"" + method.getReturnType().getSimpleName();
 else       str=""String_Node_Str"";
      log.debugf(""String_Node_Str"",Strings.alignLeft(sb,30,' '),str,ai.getOkView(),ai.getFailView(),(null == ai.getFilterInfos() ? 0 : ai.getFilterInfos().length),ai.getInputEncoding(),ai.getOutputEncoding());
    }
  }
  if (!Strings.isBlank(ai.getPathKey()))   config.getAtMap().add(ai.getPathKey(),ai.getPaths()[0]);
}","public void add(ActionChainMaker maker,ActionInfo ai,NutConfig config){
  ActionChain chain=maker.eval(config,ai);
  for (  String path : ai.getPaths()) {
    if (Strings.isBlank(path))     throw new BlankAtException(ai.getModuleType(),ai.getMethod());
    ActionInvoker invoker=map.get(path);
    if (null == invoker) {
      invoker=new ActionInvoker();
      map.put(path,invoker);
      root.add(path,invoker);
      config.getAtMap().addMethod(path,ai.getMethod());
    }
    if (ai.isForSpecialHttpMethod()) {
      for (      String httpMethod : ai.getHttpMethods())       invoker.addChain(httpMethod,chain);
    }
 else {
      invoker.setDefaultChain(chain);
    }
    if (log.isDebugEnabled()) {
      String[] paths=ai.getPaths();
      StringBuilder sb=new StringBuilder();
      if (null != paths && paths.length > 0) {
        sb.append(""String_Node_Str"").append(paths[0]).append(""String_Node_Str"");
        for (int i=1; i < paths.length; i++)         sb.append(""String_Node_Str"").append(paths[i]).append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
      }
      Method method=ai.getMethod();
      String str;
      if (null != method)       str=method.getName() + ""String_Node_Str"" + method.getReturnType().getSimpleName();
 else       str=""String_Node_Str"";
      log.debugf(""String_Node_Str"",Strings.alignLeft(sb,30,' '),str,ai.getOkView(),ai.getFailView(),(null == ai.getFilterInfos() ? 0 : ai.getFilterInfos().length),ai.getInputEncoding(),ai.getOutputEncoding());
    }
  }
  if (!Strings.isBlank(ai.getPathKey()))   config.getAtMap().add(ai.getPathKey(),ai.getPaths()[0]);
}"
43309,"public int deleteLinks(Object obj,String regex){
  EntityOperator opt=this._optBy(obj);
  if (null == opt)   return 0;
  opt.entity.visitMany(obj,regex,doDelete(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByLinkedField(opt));
  opt.entity.visitManyMany(obj,regex,doDelete(opt));
  opt.entity.visitOne(obj,regex,doDelete(opt));
  return opt.exec().getUpdateCount();
}","public int deleteLinks(Object obj,final String regex){
  if (null == obj)   return 0;
  final int[] re=new int[1];
  Lang.each(obj,new Each<Object>(){
    public void invoke(    int index,    Object ele,    int length) throws ExitLoop, ContinueLoop, LoopException {
      EntityOperator opt=_optBy(ele);
      if (null == opt)       return;
      opt.entity.visitMany(ele,regex,doDelete(opt));
      opt.entity.visitManyMany(ele,regex,doClearRelationByLinkedField(opt));
      opt.entity.visitManyMany(ele,regex,doDelete(opt));
      opt.entity.visitOne(ele,regex,doDelete(opt));
      re[0]+=opt.exec().getUpdateCount();
    }
  }
);
  return re[0];
}"
43310,"public <T>T clearLinks(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  if (null == opt)   return null;
  opt.entity.visitMany(obj,regex,doClear(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByHostField(opt));
  opt.entity.visitOne(obj,regex,doClear(opt));
  opt.exec();
  return obj;
}","public <T>T clearLinks(T obj,final String regex){
  if (null == obj)   return null;
  Lang.each(obj,new Each<Object>(){
    public void invoke(    int index,    Object ele,    int length) throws ExitLoop, ContinueLoop, LoopException {
      EntityOperator opt=_optBy(ele);
      if (null == opt)       return;
      opt.entity.visitMany(ele,regex,doClear(opt));
      opt.entity.visitManyMany(ele,regex,doClearRelationByHostField(opt));
      opt.entity.visitOne(ele,regex,doClear(opt));
      opt.exec();
    }
  }
);
  return obj;
}"
43311,"public <T>T updateLinks(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  if (null == opt)   return null;
  opt.entity.visitOne(obj,regex,doUpdate(opt));
  opt.entity.visitMany(obj,regex,doUpdate(opt));
  opt.entity.visitManyMany(obj,regex,doUpdate(opt));
  opt.exec();
  return obj;
}","public <T>T updateLinks(T obj,final String regex){
  if (null == obj)   return null;
  Lang.each(obj,new Each<Object>(){
    public void invoke(    int index,    Object ele,    int length) throws ExitLoop, ContinueLoop, LoopException {
      EntityOperator opt=_optBy(ele);
      if (null == opt)       return;
      opt.entity.visitOne(ele,regex,doUpdate(opt));
      opt.entity.visitMany(ele,regex,doUpdate(opt));
      opt.entity.visitManyMany(ele,regex,doUpdate(opt));
      opt.exec();
    }
  }
);
  return obj;
}"
43312,"public <T>T updateWith(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  if (null == opt)   return null;
  opt.entity.visitOne(obj,regex,doUpdate(opt));
  opt.addUpdate();
  opt.entity.visitMany(obj,regex,doUpdate(opt));
  opt.entity.visitManyMany(obj,regex,doUpdate(opt));
  opt.exec();
  return obj;
}","public <T>T updateWith(T obj,final String regex){
  if (null == obj)   return null;
  Lang.each(obj,new Each<Object>(){
    public void invoke(    int index,    Object ele,    int length) throws ExitLoop, ContinueLoop, LoopException {
      EntityOperator opt=_optBy(ele);
      if (null == opt)       return;
      opt.entity.visitOne(ele,regex,doUpdate(opt));
      opt.addUpdate();
      opt.entity.visitMany(ele,regex,doUpdate(opt));
      opt.entity.visitManyMany(ele,regex,doUpdate(opt));
      opt.exec();
    }
  }
);
  return obj;
}"
43313,"public <T>T fetchLinks(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  if (null == opt)   return null;
  opt.entity.visitMany(obj,regex,doFetch(opt));
  opt.entity.visitManyMany(obj,regex,doFetch(opt));
  opt.entity.visitOne(obj,regex,doFetch(opt));
  opt.exec();
  return obj;
}","public <T>T fetchLinks(T obj,final String regex){
  if (null == obj)   return null;
  Lang.each(obj,new Each<Object>(){
    public void invoke(    int index,    Object ele,    int length) throws ExitLoop, ContinueLoop, LoopException {
      EntityOperator opt=_optBy(ele);
      if (null == opt)       return;
      opt.entity.visitMany(ele,regex,doFetch(opt));
      opt.entity.visitManyMany(ele,regex,doFetch(opt));
      opt.entity.visitOne(ele,regex,doFetch(opt));
      opt.exec();
    }
  }
);
  return obj;
}"
43314,"public int deleteWith(Object obj,String regex){
  EntityOperator opt=this._optBy(obj);
  if (null == opt)   return 0;
  opt.entity.visitMany(obj,regex,doDelete(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByLinkedField(opt));
  opt.entity.visitManyMany(obj,regex,doDelete(opt));
  opt.addDeleteSelfOnly();
  opt.entity.visitOne(obj,regex,doDelete(opt));
  return opt.exec().getUpdateCount();
}","public int deleteWith(Object obj,final String regex){
  if (null == obj)   return 0;
  final int[] re=new int[1];
  Lang.each(obj,new Each<Object>(){
    public void invoke(    int index,    Object ele,    int length) throws ExitLoop, ContinueLoop, LoopException {
      EntityOperator opt=_optBy(ele);
      if (null == opt)       return;
      opt.entity.visitMany(ele,regex,doDelete(opt));
      opt.entity.visitManyMany(ele,regex,doClearRelationByLinkedField(opt));
      opt.entity.visitManyMany(ele,regex,doDelete(opt));
      opt.addDeleteSelfOnly();
      opt.entity.visitOne(ele,regex,doDelete(opt));
      re[0]+=opt.exec().getUpdateCount();
    }
  }
);
  return re[0];
}"
43315,"public static Condition format(String format,Object... args){
  return new SimpleCondition(format,args);
}","public static Condition format(String format,Object... args){
  return Strings.isBlank(format) ? null : new SimpleCondition(format,args);
}"
43316,"public static Condition wrap(String sql,Object value){
  return new SimpleCondition(new CharSegment(sql).setBy(value));
}","public static Condition wrap(String sql,Object value){
  return Strings.isBlank(sql) ? null : new SimpleCondition(new CharSegment(sql).setBy(value));
}"
43317,"@Override public Object getValue(Object obj){
  Object value=super.getValue(obj);
  System.out.println(""String_Node_Str"" + value);
  if (value == null)   return getDefaultValue(obj);
  return value;
}","@Override public Object getValue(Object obj){
  Object value=super.getValue(obj);
  if (value == null)   return getDefaultValue(obj);
  return value;
}"
43318,"@Test public void fetch_record(){
  Record re=dao.fetch(""String_Node_Str"",Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Pet pet=re.toPojo(Pet.class);
  assertEquals(5,re.getColumnCount());
  assertEquals(4,pet.getId());
  assertEquals(""String_Node_Str"",pet.getName());
}","@Test public void fetch_record(){
  Record re=dao.fetch(""String_Node_Str"",Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Pet pet=re.toPojo(Pet.class);
  assertEquals(6,re.getColumnCount());
  assertEquals(4,pet.getId());
  assertEquals(""String_Node_Str"",pet.getName());
}"
43319,"public int joinParams(Entity<?> en,Object obj,Object[] params,int off){
  List<MappingField> mfs=_mfs(en);
  for (  MappingField mf : mfs)   params[off++]=mf.getValue(obj);
  return off;
}","public int joinParams(Entity<?> en,Object obj,Object[] params,int off){
  List<MappingField> mfs=_mfs(en);
  for (  MappingField mf : mfs) {
    Object v=mf.getValue(obj);
    params[off++]=null == v ? mf.getDefaultValue(obj) : v;
  }
  return off;
}"
43320,"/** 
 * 获取一个目录下所有的文件。隐藏文件会被忽略。
 * @param dir 目录
 * @param suffix 文件后缀名。如果为 null，则获取全部文件
 * @return 文件数组
 */
public static File[] files(File dir,final String suffix){
  return dir.listFiles(new FileFilter(){
    public boolean accept(    File f){
      return !f.isHidden() && f.isFile() && (null == suffix || f.getName().endsWith(suffix));
    }
  }
);
}","/** 
 * 获取一个目录下所有的文件(不递归，仅仅一层)。隐藏文件会被忽略。
 * @param dir 目录
 * @param suffix 文件后缀名。如果为 null，则获取全部文件
 * @return 文件数组
 */
public static File[] files(File dir,final String suffix){
  return dir.listFiles(new FileFilter(){
    public boolean accept(    File f){
      return !f.isHidden() && f.isFile() && (null == suffix || f.getName().endsWith(suffix));
    }
  }
);
}"
43321,"@Test public void update_with_null_links(){
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  p.setLeaderName(""String_Node_Str"");
  dao.updateWith(p,null);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.getLeaderName());
}","@Test public void update_with_null_links(){
  pojos.initData();
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  p.setLeaderName(""String_Node_Str"");
  dao.updateWith(p,null);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.getLeaderName());
}"
43322,"@Test public void test_updateIgnoreNull_by_list(){
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  p.setLeaderName(""String_Node_Str"");
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  String name=p.getLeaderName();
  assertNotNull(name);
  p.setLeaderName(null);
  int re=dao.updateIgnoreNull(Lang.list(p));
  assertEquals(1,re);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(name,p.getLeaderName());
  p.setLeaderName(null);
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertNull(p.getLeaderName());
}","@Test public void test_updateIgnoreNull_by_list(){
  pojos.initData();
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  p.setLeaderName(""String_Node_Str"");
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  String name=p.getLeaderName();
  assertNotNull(name);
  p.setLeaderName(null);
  int re=dao.updateIgnoreNull(Lang.list(p));
  assertEquals(1,re);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(name,p.getLeaderName());
  p.setLeaderName(null);
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertNull(p.getLeaderName());
}"
43323,"@Test public void test_updateIgnoreNull(){
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  p.setLeaderName(""String_Node_Str"");
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  String name=p.getLeaderName();
  assertNotNull(name);
  p.setLeaderName(null);
  int re=dao.updateIgnoreNull(p);
  assertEquals(1,re);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(name,p.getLeaderName());
  p.setLeaderName(null);
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertNull(p.getLeaderName());
}","@Test public void test_updateIgnoreNull(){
  pojos.initData();
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  p.setLeaderName(""String_Node_Str"");
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  String name=p.getLeaderName();
  assertNotNull(name);
  p.setLeaderName(null);
  int re=dao.updateIgnoreNull(p);
  assertEquals(1,re);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(name,p.getLeaderName());
  p.setLeaderName(null);
  dao.update(p);
  p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertNull(p.getLeaderName());
}"
43324,"@Test public void batch_update_relation(){
  dao.updateRelation(Fighter.class,""String_Node_Str"",Chain.make(""String_Node_Str"",""String_Node_Str""),Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(13,dao.count(""String_Node_Str"",Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}","@Test public void batch_update_relation(){
  pojos.initData();
  dao.updateRelation(Fighter.class,""String_Node_Str"",Chain.make(""String_Node_Str"",""String_Node_Str""),Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(13,dao.count(""String_Node_Str"",Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}"
43325,"@Test public void batch_update_partly(){
  int re=dao.update(Fighter.class,Chain.make(""String_Node_Str"",""String_Node_Str""),Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(1,re);
  int maxId=dao.getMaxId(Fighter.class);
  re=dao.update(Fighter.class,Chain.make(""String_Node_Str"",""String_Node_Str""),Cnd.where(""String_Node_Str"",""String_Node_Str"",maxId - 5));
  assertEquals(5,re);
  assertEquals(re,dao.count(Fighter.class,Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}","@Test public void batch_update_partly(){
  pojos.initData();
  int re=dao.update(Fighter.class,Chain.make(""String_Node_Str"",""String_Node_Str""),Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(1,re);
  int maxId=dao.getMaxId(Fighter.class);
  re=dao.update(Fighter.class,Chain.make(""String_Node_Str"",""String_Node_Str""),Cnd.where(""String_Node_Str"",""String_Node_Str"",maxId - 5));
  assertEquals(5,re);
  assertEquals(re,dao.count(Fighter.class,Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}"
43326,"@Test public void fetch_by_name_ignorecase(){
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.getName());
}","@Test public void fetch_by_name_ignorecase(){
  pojos.initData();
  Platoon p=dao.fetch(Platoon.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.getName());
}"
43327,"@Test public void batch_update_all(){
  dao.update(Fighter.class,Chain.make(""String_Node_Str"",Fighter.TYPE.SU_35.name()),null);
  assertEquals(13,dao.count(Fighter.class,Cnd.where(""String_Node_Str"",""String_Node_Str"",Fighter.TYPE.SU_35.name())));
}","@Test public void batch_update_all(){
  pojos.initData();
  dao.update(Fighter.class,Chain.make(""String_Node_Str"",Fighter.TYPE.SU_35.name()),null);
  assertEquals(13,dao.count(Fighter.class,Cnd.where(""String_Node_Str"",""String_Node_Str"",Fighter.TYPE.SU_35.name())));
}"
43328,"public String getDefaultValue(Object obj){
  if (null == defaultValue)   return null;
  String re;
  if (null == obj)   re=defaultValue.toString();
 else   re=defaultValue.render(new EntityObjectContext(getEntity(),obj)).toString();
  return re.replace(""String_Node_Str"",""String_Node_Str"");
}","public String getDefaultValue(Object obj){
  if (null == defaultValue)   return null;
  String re;
  if (null == obj || defaultValue.keyCount() == 0)   re=defaultValue.toString();
 else   re=defaultValue.render(new EntityObjectContext(getEntity(),obj)).toString();
  return re;
}"
43329,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(""String_Node_Str"").append(mf.getColumnName());
    }
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(""String_Node_Str"").append(mf.getColumnName());
    }
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  return true;
}"
43330,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
 else       if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
 else       if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}"
43331,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  if (en.hasMeta(META_ENGINE)) {
    sb.append(""String_Node_Str"" + en.getMeta(META_ENGINE));
  }
  if (en.hasMeta(META_CHARSET)) {
    sb.append(""String_Node_Str"" + en.getMeta(META_CHARSET));
  }
 else {
    sb.append(""String_Node_Str"");
  }
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  if (en.hasMeta(META_ENGINE)) {
    sb.append(""String_Node_Str"" + en.getMeta(META_ENGINE));
  }
  if (en.hasMeta(META_CHARSET)) {
    sb.append(""String_Node_Str"" + en.getMeta(META_CHARSET));
  }
 else {
    sb.append(""String_Node_Str"");
  }
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}"
43332,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isPk() && en.getPks().size() == 1)       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
      if (mf.isUnsigned())       sb.append(""String_Node_Str"").append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  List<Sql> sqls=new ArrayList<Sql>();
  sqls.add(Sqls.create(sb.toString()));
  List<MappingField> pks=en.getPks();
  if (pks.size() > 1) {
    StringBuilder pkNames=new StringBuilder();
    StringBuilder pkNames2=new StringBuilder();
    for (    MappingField pk : pks) {
      pkNames.append(pk.getColumnName()).append(',');
      pkNames2.append(pk.getColumnName()).append('_');
    }
    pkNames.setLength(pkNames.length() - 1);
    pkNames2.setLength(pkNames2.length() - 1);
    String sql=String.format(""String_Node_Str"",en.getTableName(),pkNames2,pkNames);
    sqls.add(Sqls.create(sql));
  }
  for (  MappingField mf : en.getMappingFields()) {
    if (!mf.isAutoIncreasement())     continue;
    sqls.add(Sqls.create(gSQL(CSEQ,en.getTableName(),mf.getColumnName())));
    sqls.add(Sqls.create(gSQL(CTRI,en.getTableName(),mf.getColumnName())));
  }
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isPk() && en.getPks().size() == 1)       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      if (mf.isUnsigned())       sb.append(""String_Node_Str"").append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  List<Sql> sqls=new ArrayList<Sql>();
  sqls.add(Sqls.create(sb.toString()));
  List<MappingField> pks=en.getPks();
  if (pks.size() > 1) {
    StringBuilder pkNames=new StringBuilder();
    StringBuilder pkNames2=new StringBuilder();
    for (    MappingField pk : pks) {
      pkNames.append(pk.getColumnName()).append(',');
      pkNames2.append(pk.getColumnName()).append('_');
    }
    pkNames.setLength(pkNames.length() - 1);
    pkNames2.setLength(pkNames2.length() - 1);
    String sql=String.format(""String_Node_Str"",en.getTableName(),pkNames2,pkNames);
    sqls.add(Sqls.create(sql));
  }
  for (  MappingField mf : en.getMappingFields()) {
    if (!mf.isAutoIncreasement())     continue;
    sqls.add(Sqls.create(gSQL(CSEQ,en.getTableName(),mf.getColumnName())));
    sqls.add(Sqls.create(gSQL(CTRI,en.getTableName(),mf.getColumnName())));
  }
  dao.execute(sqls.toArray(new Sql[sqls.size()]));
  createRelation(dao,en);
  return true;
}"
43333,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    if (mf.isId() && mf.isAutoIncreasement()) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(' ').append(evalFieldType(mf));
      if (mf.isName() && en.getPkType() != PkType.NAME) {
        sb.append(""String_Node_Str"");
      }
 else {
        if (mf.isUnsigned())         sb.append(""String_Node_Str"");
        if (mf.isNotNull())         sb.append(""String_Node_Str"");
        if (mf.isAutoIncreasement())         throw Lang.noImplement();
        if (mf.hasDefaultValue())         sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
      }
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(String.format(""String_Node_Str"",en.getTableName()));
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    if (mf.isId() && mf.isAutoIncreasement()) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(' ').append(evalFieldType(mf));
      if (mf.isName() && en.getPkType() != PkType.NAME) {
        sb.append(""String_Node_Str"");
      }
 else {
        if (mf.isUnsigned())         sb.append(""String_Node_Str"");
        if (mf.isNotNull())         sb.append(""String_Node_Str"");
        if (mf.isAutoIncreasement())         throw Lang.noImplement();
        if (mf.hasDefaultValue())         sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
      }
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(String.format(""String_Node_Str"",en.getTableName()));
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}"
43334,"@Override public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  if (en.getPks().size() > 1 && en.getPkType() == PkType.ID) {
    return false;
  }
  boolean mPks=en.getPks().size() > 1;
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    if (mf.isId() && en.getPkType() == PkType.ID) {
      sb.append(""String_Node_Str"");
      continue;
    }
 else     sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isPk() && !mPks) {
        sb.append(""String_Node_Str"");
      }
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (mPks) {
    sb.append('\n');
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}","@Override public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  if (en.getPks().size() > 1 && en.getPkType() == PkType.ID) {
    return false;
  }
  boolean mPks=en.getPks().size() > 1;
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    if (mf.isId() && en.getPkType() == PkType.ID) {
      sb.append(""String_Node_Str"");
      continue;
    }
 else     sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isPk() && !mPks) {
        sb.append(""String_Node_Str"");
      }
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (mPks) {
    sb.append('\n');
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}"
43335,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isUnsigned())       sb.append(""String_Node_Str"");
      if (mf.isNotNull())       sb.append(""String_Node_Str"");
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(getDefaultValue(mf)).append('\'');
    }
    sb.append(',');
  }
  List<MappingField> pks=en.getPks();
  if (!pks.isEmpty()) {
    sb.append('\n');
    sb.append(""String_Node_Str"");
    for (    MappingField pk : pks) {
      sb.append(pk.getColumnName()).append(',');
    }
    sb.setCharAt(sb.length() - 1,')');
    sb.append(""String_Node_Str"");
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  createRelation(dao,en);
  return true;
}"
43336,"@SuppressWarnings(""String_Node_Str"") public <T>Mirror<T> getMirror(Class<T> type,String name){
  if (MethodInterceptor.class.isAssignableFrom(type) || type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX) || AopConfigration.IOCNAME.equals(name)|| AopConfigration.class.isAssignableFrom(type))   return Mirror.me(type);
  try {
    return (Mirror<T>)Mirror.me(cd.load(type.getName() + ClassAgent.CLASSNAME_SUFFIX));
  }
 catch (  ClassNotFoundException e) {
  }
  if (aopConfigration == null)   if (ioc.has(AopConfigration.IOCNAME))   aopConfigration=ioc.get(AopConfigration.class,AopConfigration.IOCNAME);
 else   aopConfigration=new AnnotationAopConfigration();
  List<InterceptorPair> interceptorPairs=aopConfigration.getInterceptorPairList(ioc,type);
  if (interceptorPairs == null || interceptorPairs.size() < 1)   return Mirror.me(type);
  ClassAgent agent=new AsmClassAgent();
  for (  InterceptorPair interceptorPair : interceptorPairs)   agent.addInterceptor(interceptorPair.getMethodMatcher(),interceptorPair.getMethodInterceptor());
  return Mirror.me(agent.define(cd,type));
}","@SuppressWarnings(""String_Node_Str"") public <T>Mirror<T> getMirror(Class<T> type,String name){
  if (MethodInterceptor.class.isAssignableFrom(type) || type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX) || AopConfigration.IOCNAME.equals(name)|| AopConfigration.class.isAssignableFrom(type)) {
    return Mirror.me(type);
  }
  try {
    return (Mirror<T>)Mirror.me(cd.load(type.getName() + ClassAgent.CLASSNAME_SUFFIX));
  }
 catch (  ClassNotFoundException e) {
  }
  if (aopConfigration == null)   if (ioc.has(AopConfigration.IOCNAME))   aopConfigration=ioc.get(AopConfigration.class,AopConfigration.IOCNAME);
 else   aopConfigration=new AnnotationAopConfigration();
  List<InterceptorPair> interceptorPairs=aopConfigration.getInterceptorPairList(ioc,type);
  if (interceptorPairs == null || interceptorPairs.size() < 1) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",type);
    return Mirror.me(type);
  }
  ClassAgent agent=new AsmClassAgent();
  for (  InterceptorPair interceptorPair : interceptorPairs)   agent.addInterceptor(interceptorPair.getMethodMatcher(),interceptorPair.getMethodInterceptor());
  return Mirror.me(agent.define(cd,type));
}"
43337,"@Override protected String evalFieldType(MappingField mf){
  if (mf.getColumnType() == ColType.INT) {
    int width=mf.getWidth();
    if (width <= 0)     return ""String_Node_Str"";
 else     if (width <= 4) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
 else     if (width <= 8) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
    return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
  }
 else   if (mf.getColumnType() == ColType.BOOLEAN)   return ""String_Node_Str"";
  return super.evalFieldType(mf);
}","@Override protected String evalFieldType(MappingField mf){
  if (mf.getColumnType() == ColType.INT) {
    int width=mf.getWidth();
    if (width <= 0)     return ""String_Node_Str"";
 else     if (width <= 4) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
 else     if (width <= 8) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
    return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
  }
  return super.evalFieldType(mf);
}"
43338,"@Override protected String evalFieldType(MappingField mf){
  if (mf.getColumnType() == ColType.INT) {
    int width=mf.getWidth();
    if (width <= 0)     return ""String_Node_Str"";
 else     if (width <= 4) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
 else     if (width <= 8) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
    return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
  }
  return super.evalFieldType(mf);
}","@Override protected String evalFieldType(MappingField mf){
  if (mf.getColumnType() == ColType.INT) {
    int width=mf.getWidth();
    if (width <= 0)     return ""String_Node_Str"";
 else     if (width <= 4) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
 else     if (width <= 8) {
      return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
    }
    return ""String_Node_Str"" + (width * 4) + ""String_Node_Str"";
  }
 else   if (mf.getColumnType() == ColType.BOOLEAN)   return ""String_Node_Str"";
  return super.evalFieldType(mf);
}"
43339,"public <T>Entity<T> make(Class<T> type){
  NutEntity<T> en=new NutEntity<T>(type);
  TableInfo ti=_createTableInfo(type);
  if (null != expert.getConf()) {
    for (    String key : expert.getConf().keySet())     en.getMetas().put(key,expert.getConf().get(key));
  }
  if (null != ti.annMeta) {
    Map<String,Object> map=Lang.map(ti.annMeta.value());
    for (    Entry<String,Object> entry : map.entrySet()) {
      en.getMetas().put(entry.getKey(),entry.getValue().toString());
    }
  }
  String tableName=null == ti.annTable ? Strings.lowerWord(type.getSimpleName(),'_') : ti.annTable.value();
  String viewName=null == ti.annView ? tableName : ti.annView.value();
  en.setTableName(tableName);
  en.setViewName(viewName);
  boolean shouldUseColumn=false;
  for (  Field field : en.getMirror().getFields()) {
    if (null != field.getAnnotation(Column.class)) {
      shouldUseColumn=true;
      break;
    }
  }
  List<MappingInfo> infos=new ArrayList<MappingInfo>();
  List<LinkInfo> ones=new ArrayList<LinkInfo>();
  List<LinkInfo> manys=new ArrayList<LinkInfo>();
  List<LinkInfo> manymanys=new ArrayList<LinkInfo>();
  for (  Field field : en.getMirror().getFields()) {
    if (null != field.getAnnotation(One.class)) {
      ones.add(_Infos.createLinkInfo(field));
    }
 else     if (null != field.getAnnotation(Many.class)) {
      manys.add(_Infos.createLinkInfo(field));
    }
 else     if (null != field.getAnnotation(ManyMany.class)) {
      manymanys.add(_Infos.createLinkInfo(field));
    }
 else     if (shouldUseColumn && (null == field.getAnnotation(Column.class) && null == field.getAnnotation(Id.class) && null == field.getAnnotation(Name.class))) {
      continue;
    }
 else {
      infos.add(_Infos.createMappingInfo(ti.annPK,field));
    }
  }
  for (  Method method : en.getType().getMethods()) {
    if (null != method.getAnnotation(One.class)) {
      ones.add(_Infos.createLinkInfo(method));
    }
 else     if (null != method.getAnnotation(Many.class)) {
      manys.add(_Infos.createLinkInfo(method));
    }
 else     if (null != method.getAnnotation(ManyMany.class)) {
      manymanys.add(_Infos.createLinkInfo(method));
    }
 else     if (null == method.getAnnotation(Column.class) && null == method.getAnnotation(Id.class) && null == method.getAnnotation(Name.class)) {
      continue;
    }
 else {
      infos.add(_Infos.createMapingInfo(ti.annPK,method));
    }
  }
  for (  MappingInfo info : infos) {
    NutMappingField ef=new NutMappingField(en);
    _evalMappingField(ef,info);
    en.addMappingField(ef);
  }
  holder.set(en);
  for (  LinkInfo li : ones) {
    en.addLinkField(new OneLinkField(en,holder,li));
  }
  for (  LinkInfo li : manys) {
    en.addLinkField(new ManyLinkField(en,holder,li));
  }
  for (  LinkInfo li : manymanys) {
    en.addLinkField(new ManyManyLinkField(en,holder,li));
  }
  en.checkCompositeFields(null == ti.annPK ? null : ti.annPK.value());
  if (null != datasource && null != expert) {
    _checkupEntityFieldsWithDatabase(en);
  }
  _evalFieldMacro(en,infos);
  if (null != ti.annIndexes)   _evalEntityIndexes(en,ti.annIndexes);
  return en;
}","public <T>Entity<T> make(Class<T> type){
  NutEntity<T> en=new NutEntity<T>(type);
  TableInfo ti=_createTableInfo(type);
  if (null != expert.getConf()) {
    for (    String key : expert.getConf().keySet())     en.getMetas().put(key,expert.getConf().get(key));
  }
  if (null != ti.annMeta) {
    Map<String,Object> map=Lang.map(ti.annMeta.value());
    for (    Entry<String,Object> entry : map.entrySet()) {
      en.getMetas().put(entry.getKey(),entry.getValue().toString());
    }
  }
  String tableName=null == ti.annTable ? Strings.lowerWord(type.getSimpleName(),'_') : ti.annTable.value();
  String viewName=null == ti.annView ? tableName : ti.annView.value();
  en.setTableName(tableName);
  en.setViewName(viewName);
  boolean shouldUseColumn=false;
  for (  Field field : en.getMirror().getFields()) {
    if (null != field.getAnnotation(Column.class)) {
      shouldUseColumn=true;
      break;
    }
  }
  List<MappingInfo> infos=new ArrayList<MappingInfo>();
  List<LinkInfo> ones=new ArrayList<LinkInfo>();
  List<LinkInfo> manys=new ArrayList<LinkInfo>();
  List<LinkInfo> manymanys=new ArrayList<LinkInfo>();
  for (  Field field : en.getMirror().getFields()) {
    if (null != field.getAnnotation(One.class)) {
      ones.add(_Infos.createLinkInfo(field));
    }
 else     if (null != field.getAnnotation(Many.class)) {
      manys.add(_Infos.createLinkInfo(field));
    }
 else     if (null != field.getAnnotation(ManyMany.class)) {
      manymanys.add(_Infos.createLinkInfo(field));
    }
 else     if (shouldUseColumn && (null == field.getAnnotation(Column.class) && null == field.getAnnotation(Id.class) && null == field.getAnnotation(Name.class))) {
      continue;
    }
 else {
      infos.add(_Infos.createMappingInfo(ti.annPK,field));
    }
  }
  for (  Method method : en.getType().getMethods()) {
    if (null != method.getAnnotation(One.class)) {
      ones.add(_Infos.createLinkInfo(method));
    }
 else     if (null != method.getAnnotation(Many.class)) {
      manys.add(_Infos.createLinkInfo(method));
    }
 else     if (null != method.getAnnotation(ManyMany.class)) {
      manymanys.add(_Infos.createLinkInfo(method));
    }
 else     if (null == method.getAnnotation(Column.class) && null == method.getAnnotation(Id.class) && null == method.getAnnotation(Name.class)) {
      continue;
    }
 else {
      infos.add(_Infos.createMapingInfo(ti.annPK,method));
    }
  }
  List<MappingInfo> tmp=new ArrayList<MappingInfo>(infos.size());
  MappingInfo miId=null;
  MappingInfo miName=null;
  for (  MappingInfo mi : infos) {
    if (mi.annId != null)     miId=mi;
 else     if (mi.annName != null)     miName=mi;
 else     tmp.add(mi);
  }
  if (miName != null)   tmp.add(0,miName);
  if (miId != null)   tmp.add(0,miId);
  infos=tmp;
  for (  MappingInfo info : infos) {
    NutMappingField ef=new NutMappingField(en);
    _evalMappingField(ef,info);
    en.addMappingField(ef);
  }
  holder.set(en);
  for (  LinkInfo li : ones) {
    en.addLinkField(new OneLinkField(en,holder,li));
  }
  for (  LinkInfo li : manys) {
    en.addLinkField(new ManyLinkField(en,holder,li));
  }
  for (  LinkInfo li : manymanys) {
    en.addLinkField(new ManyManyLinkField(en,holder,li));
  }
  en.checkCompositeFields(null == ti.annPK ? null : ti.annPK.value());
  if (null != datasource && null != expert) {
    _checkupEntityFieldsWithDatabase(en);
  }
  _evalFieldMacro(en,infos);
  if (null != ti.annIndexes)   _evalEntityIndexes(en,ti.annIndexes);
  return en;
}"
43340,"public Object parse(Reader reader){
  this.reader=reader;
  try {
    if (!tryNextChar())     return null;
    skipCommentsAndBlank();
    if (cursor == 'v') {
      OUTER:       while (true) {
        nextChar();
switch (cursor) {
case '{':
          break OUTER;
      }
    }
  }
  return parseFromHere();
}
 catch (IOException e) {
  throw Lang.wrapThrow(e);
}
}","public Object parse(Reader reader){
  if (reader == null)   return null;
  this.reader=reader;
  try {
    if (!tryNextChar())     return null;
    skipCommentsAndBlank();
    if (cursor == 'v') {
      OUTER:       while (true) {
        nextChar();
switch (cursor) {
case '{':
          break OUTER;
      }
    }
  }
  return parseFromHere();
}
 catch (IOException e) {
  throw Lang.wrapThrow(e);
}
}"
43341,"@SuppressWarnings(""String_Node_Str"") public void doRun() throws IOException {
  StringBuilder sb=new StringBuilder();
  line=br.readLine();
  while (null != line) {
    sb.append(line).append('\n');
    if (Strings.isBlank(line))     break;
    line=br.readLine();
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + sb);
  try {
    LinkedHashMap<String,Object> map=Json.fromJson(LinkedHashMap.class,sb);
    SocketAction action=saTable.get(map.get(""String_Node_Str"").toString());
    if (null != action) {
      SocketContext context=new SocketContext(this);
      if (action instanceof JsonAction)       ((JsonAction)action).run(map,context);
 else       action.run(context);
    }
 else {
      Writer writer=Streams.utf8w(ops);
      Map<String,Object> x=new HashMap<String,Object>();
      x.put(""String_Node_Str"",false);
      x.put(""String_Node_Str"",""String_Node_Str"");
      Json.toJson(writer,x);
      try {
        writer.close();
      }
 catch (      IOException e) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"",e);
      }
    }
  }
 catch (  JsonException e) {
    if (log.isWarnEnabled())     log.warnf(""String_Node_Str"",e.getMessage(),sb);
  }
}","@SuppressWarnings(""String_Node_Str"") public void doRun() throws IOException {
  StringBuilder sb=new StringBuilder();
  line=br.readLine();
  while (null != line) {
    sb.append(line).append('\n');
    if (Strings.isBlank(line))     break;
    line=br.readLine();
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + sb);
  try {
    LinkedHashMap<String,Object> map=Json.fromJson(LinkedHashMap.class,br);
    SocketAction action=saTable.get(map.get(""String_Node_Str"").toString());
    if (null != action) {
      SocketContext context=new SocketContext(this);
      if (action instanceof JsonAction)       ((JsonAction)action).run(map,context);
 else       action.run(context);
    }
 else {
      Writer writer=Streams.utf8w(ops);
      Map<String,Object> x=new HashMap<String,Object>();
      x.put(""String_Node_Str"",false);
      x.put(""String_Node_Str"",""String_Node_Str"");
      Json.toJson(writer,x);
      try {
        writer.close();
      }
 catch (      IOException e) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"",e);
      }
    }
  }
 catch (  JsonException e) {
  }
}"
43342,"public static JsonEntityField eval(Mirror<?> mirror,Field fld){
  JsonField jf=fld.getAnnotation(JsonField.class);
  if (null != jf && jf.ignore())   return null;
  JsonEntityField jef=new JsonEntityField();
  jef.injecting=mirror.getInjecting(fld.getName());
  jef.ejecting=mirror.getEjecting(fld.getName());
  jef.genericType=fld.getGenericType();
  if (null != jf && !Strings.isBlank(jf.value()))   jef.name=jf.value();
 else   jef.name=fld.getName();
  return jef;
}","public static JsonEntityField eval(Mirror<?> mirror,Field fld){
  JsonField jf=fld.getAnnotation(JsonField.class);
  if (null != jf && jf.ignore())   return null;
  JsonEntityField jef=new JsonEntityField();
  jef.injecting=mirror.getInjecting(fld.getName());
  jef.genericType=fld.getGenericType();
  if (null != jf && !Strings.isBlank(jf.by()))   jef.ejecting=new EjectBySimpleEL(jf.by());
 else   jef.ejecting=mirror.getEjecting(fld.getName());
  if (null != jf && !Strings.isBlank(jf.value()))   jef.name=jf.value();
 else   jef.name=fld.getName();
  return jef;
}"
43343,"@Test public void test_enum(){
  Random<Color> r=new EnumRandom<Color>(){
  }
;
  Set<Color> re=new HashSet<Color>(Arrays.asList(Color.values()));
  Set<Color> rs=new HashSet<Color>();
  for (int j=0; j < 4; j++) {
    for (int i=0; i < 4; i++)     rs.add(r.next());
    assertTrue(Lang.equals(re,rs));
  }
}","@Ignore(""String_Node_Str"") @Test public void test_enum(){
  Random<Color> r=new EnumRandom<Color>(){
  }
;
  Set<Color> re=new HashSet<Color>(Arrays.asList(Color.values()));
  Set<Color> rs=new HashSet<Color>();
  for (int j=0; j < 4; j++) {
    for (int i=0; i < 4; i++)     rs.add(r.next());
    assertTrue(Lang.equals(re,rs));
  }
}"
43344,"public void setData(String data){
  this.data=data.getBytes(Encoding.CHARSET_UTF8);
}","public void setData(String data){
  try {
    this.data=data.getBytes(Encoding.UTF8);
  }
 catch (  UnsupportedEncodingException e) {
  }
}"
43345,"public InputStream getInputStream(){
  if (null == data) {
    StringBuilder sb=new StringBuilder();
    for (    String key : params.keySet()) {
      sb.append(key).append('=').append(params.get(key)).append('&');
    }
    sb.setCharAt(sb.length() - 1,'\n');
    byte[] bytes=sb.toString().getBytes(Encoding.CHARSET_UTF8);
    return new ByteInputStream(bytes);
  }
  return null == data ? null : new ByteInputStream(data);
}","public InputStream getInputStream(){
  if (null == data) {
    StringBuilder sb=new StringBuilder();
    for (    String key : params.keySet()) {
      sb.append(key).append('=').append(params.get(key)).append('&');
    }
    sb.setCharAt(sb.length() - 1,'\n');
    byte[] bytes=null;
    try {
      bytes=sb.toString().getBytes(Encoding.UTF8);
    }
 catch (    UnsupportedEncodingException e) {
    }
    return new ByteInputStream(bytes);
  }
  return null == data ? null : new ByteInputStream(data);
}"
43346,"/** 
 * 整合两个整数数组为一个数组
 * @param ary 整数数组
 * @param is 变参
 * @return 新的整合过的数组
 */
public static int[] join(int[] ary,int... is){
  if (null == ary)   return is;
  int[] re=Arrays.copyOf(ary,ary.length + is.length);
  int i=ary.length;
  for (  int num : is)   re[i++]=num;
  return re;
}","/** 
 * 整合两个整数数组为一个数组 <b>这个方法在JDK5不可用!!<b/>
 * @param ary 整数数组
 * @param is 变参
 * @return 新的整合过的数组
 */
public static int[] join(int[] ary,int... is){
  if (null == ary)   return is;
  int[] re=Arrays.copyOf(ary,ary.length + is.length);
  int i=ary.length;
  for (  int num : is)   re[i++]=num;
  return re;
}"
43347,"public void write(String str){
  if (!atom.socket.isClosed())   try {
    atom.ops.write(str.getBytes(Encoding.CHARSET_UTF8));
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
}","public void write(String str){
  if (!atom.socket.isClosed())   try {
    atom.ops.write(str.getBytes(Encoding.UTF8));
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
}"
43348,"@Test public void test_pathargs(){
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
}","@Test public void test_pathargs(){
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
  get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resp.getContent());
}"
43349,"public synchronized void load(Reader reader) throws IOException {
  BufferedReader tr=null;
  if (reader instanceof BufferedReader)   tr=(BufferedReader)reader;
 else   tr=new BufferedReader(reader);
  this.clear();
  String s;
  while (null != (s=tr.readLine())) {
    if (Strings.isBlank(s))     continue;
    if (s.length() > 0 && s.charAt(0) == '#')     continue;
    int pos;
    char c='0';
    for (pos=0; pos < s.length(); pos++) {
      c=s.charAt(pos);
      if (c == '=' || c == ':')       break;
    }
    if (c == '=') {
      String name=s.substring(0,pos);
      maps.put(name,s.substring(pos + 1));
      keys.add(name);
    }
 else     if (c == ':') {
      String name=s.substring(0,pos);
      StringBuffer sb=new StringBuffer();
      sb.append(s.substring(pos + 1));
      String ss;
      while (null != (ss=tr.readLine())) {
        if (ss.length() > 0 && ss.charAt(0) == '#')         break;
        sb.append(""String_Node_Str"" + ss);
      }
      maps.put(name,sb.toString());
      keys.add(name);
      if (null == ss)       return;
    }
 else {
      maps.put(s,null);
      keys.add(s);
    }
  }
}","public synchronized void load(Reader reader) throws IOException {
  BufferedReader tr=null;
  if (reader instanceof BufferedReader)   tr=(BufferedReader)reader;
 else   tr=new BufferedReader(reader);
  this.clear();
  String s;
  while (null != (s=tr.readLine())) {
    if (Strings.isBlank(s))     continue;
    if (s.length() > 0 && s.trim().charAt(0) == '#')     continue;
    int pos;
    char c='0';
    for (pos=0; pos < s.length(); pos++) {
      c=s.charAt(pos);
      if (c == '=' || c == ':')       break;
    }
    if (c == '=') {
      String name=s.substring(0,pos);
      maps.put(name,s.substring(pos + 1));
      keys.add(name);
    }
 else     if (c == ':') {
      String name=s.substring(0,pos);
      StringBuffer sb=new StringBuffer();
      sb.append(s.substring(pos + 1));
      String ss;
      while (null != (ss=tr.readLine())) {
        if (ss.length() > 0 && ss.charAt(0) == '#')         break;
        sb.append(""String_Node_Str"" + ss);
      }
      maps.put(name,sb.toString());
      keys.add(name);
      if (null == ss)       return;
    }
 else {
      maps.put(s,null);
      keys.add(s);
    }
  }
}"
43350,"/** 
 * 转换成操作树
 */
private Deque<Object> OperatorTree(Queue<Object> rpn){
  Deque<Object> operand=new LinkedList<Object>();
  while (!rpn.isEmpty()) {
    if (rpn.peek() instanceof Operator) {
      Operator opt=(Operator)rpn.poll();
      opt.wrap(operand);
      operand.addFirst(opt);
      continue;
    }
    if (rpn.peek() instanceof IdentifierObj) {
      ((IdentifierObj)rpn.peek()).setEc(ec);
    }
    operand.addFirst(rpn.poll());
  }
  return operand;
}","/** 
 * 转换成操作树
 */
private LinkedList<Object> OperatorTree(Queue<Object> rpn){
  LinkedList<Object> operand=new LinkedList<Object>();
  while (!rpn.isEmpty()) {
    if (rpn.peek() instanceof Operator) {
      Operator opt=(Operator)rpn.poll();
      opt.wrap(operand);
      operand.addFirst(opt);
      continue;
    }
    if (rpn.peek() instanceof IdentifierObj) {
      ((IdentifierObj)rpn.peek()).setEc(ec);
    }
    operand.addFirst(rpn.poll());
  }
  return operand;
}"
43351,"/** 
 * 计算
 */
private Object calculate(Deque<Object> el2){
  if (el2.peek() instanceof Operator) {
    Operator obj=(Operator)el2.peek();
    return obj.calculate();
  }
  if (el2.peek() instanceof IdentifierObj) {
    return ((IdentifierObj)el2.peek()).fetchVal();
  }
  return el2.peek();
}","/** 
 * 计算
 */
private Object calculate(LinkedList<Object> el2){
  if (el2.peek() instanceof Operator) {
    Operator obj=(Operator)el2.peek();
    return obj.calculate();
  }
  if (el2.peek() instanceof IdentifierObj) {
    return ((IdentifierObj)el2.peek()).fetchVal();
  }
  return el2.peek();
}"
43352,"@Override public Response send() throws HttpException {
  try {
    openConnection();
    Map<String,?> params=request.getParams();
    String data=null;
    if (null != params && params.size() > 0) {
      data=request.getURLEncodedParams();
    }
    setupRequestHeader();
    setupDoInputOutputFlag();
    if (data != null) {
      Writer w=new BufferedWriter(Streams.utf8w(conn.getOutputStream()));
      w.write(data);
      Streams.safeFlush(w);
      Streams.safeClose(w);
    }
    return createResponse(getResponseHeader());
  }
 catch (  Exception e) {
    throw new HttpException(request.getUrl().toString(),e);
  }
}","@Override public Response send() throws HttpException {
  try {
    openConnection();
    setupRequestHeader();
    setupDoInputOutputFlag();
    InputStream ins=request.getInputStream();
    if (null != ins) {
      OutputStream ops=Streams.buff(conn.getOutputStream());
      Streams.write(ops,ins,8192);
      Streams.safeClose(ins);
      Streams.safeFlush(ops);
      Streams.safeClose(ops);
    }
    return createResponse(getResponseHeader());
  }
 catch (  Exception e) {
    throw new HttpException(request.getUrl().toString(),e);
  }
}"
43353,"/** 
 * 子类应该覆盖这个方法或者evalInjector(Type,Param)方法.
 */
protected ParamInjector evalInjector(Class<?> type,Param param){
  return null;
}","protected ParamInjector evalInjector(Type type,Param param){
  Class<?> clazz=Lang.getTypeClass(type);
  Type[] paramTypes=null;
  if (type instanceof ParameterizedType)   paramTypes=((ParameterizedType)type).getActualTypeArguments();
  if (clazz == null) {
    if (log.isWarnEnabled())     log.warnf(""String_Node_Str"",type,param);
    return null;
  }
  return evalInjectorBy(clazz,param,paramTypes);
}"
43354,"public Object getReferObject(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  try {
    return Json.fromJson(Streams.utf8r(request.getInputStream()));
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}","public Object getReferObject(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    String str=Streams.readAndClose(Streams.utf8r(req.getInputStream()));
    return Json.fromJson(str);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}"
43355,"public ArrayInjector(String name,Class<?> type){
  super(name,type);
}","public ArrayInjector(String name,Class<?> type,Type[] paramTypes){
  super(name,type,paramTypes);
}"
43356,"public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  return true;
}","public boolean createEntity(Dao dao,Entity<?> en){
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + en.getTableName() + ""String_Node_Str"");
  for (  MappingField mf : en.getMappingFields()) {
    sb.append('\n').append(mf.getColumnName());
    sb.append(' ').append(evalFieldType(mf));
    if (mf.isName() && en.getPkType() != PkType.NAME) {
      sb.append(""String_Node_Str"");
    }
 else {
      if (mf.isNotNull() || mf.isPk())       sb.append(""String_Node_Str"");
      if (mf.hasDefaultValue())       sb.append(""String_Node_Str"").append(mf.getDefaultValue(null)).append('\'');
      if (mf.isAutoIncreasement())       sb.append(""String_Node_Str"");
      if (mf.isPk() && en.getPks().size() == 1) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(',');
  }
  sb.setCharAt(sb.length() - 1,')');
  dao.execute(Sqls.create(sb.toString()));
  if (en.getPks().size() > 1) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(en.getTableName()).append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(""String_Node_Str"").append(mf.getColumnName());
    }
    sb.append(""String_Node_Str"");
    for (    MappingField mf : en.getPks()) {
      sb.append(mf.getColumnName()).append(""String_Node_Str"");
    }
    sb.setCharAt(sb.length() - 1,')');
    dao.execute(Sqls.create(sb.toString()));
  }
  createRelation(dao,en);
  return true;
}"
43357,"@Test public void test_var_in_prev(){
  dao.create(Pet2.class,true);
  if (pojos.dao().meta().isOracle() || pojos.dao().meta().isHsql())   return;
  pojos.initPet();
  Pet2 pet=new Pet2();
  pet.setName(""String_Node_Str"").setAge(10);
  dao.insert(pet);
  assertEquals(""String_Node_Str"",pet.getNickName());
}","@Test public void test_var_in_prev(){
  dao.create(Pet2.class,true);
  if (dao.meta().isOracle() || dao.meta().isHsql() || dao.meta().isDB2())   return;
  pojos.initPet();
  Pet2 pet=new Pet2();
  pet.setName(""String_Node_Str"").setAge(10);
  dao.insert(pet);
  assertEquals(""String_Node_Str"",pet.getNickName());
}"
43358,"@Test public void check_if_support_all_normal_types() throws FailToCastObjectException {
  String d=""String_Node_Str"";
  String t=""String_Node_Str"";
  String dt=d + ""String_Node_Str"" + t;
  Date date=Castors.me().castTo(d,Date.class);
  Time time=Castors.me().castTo(t,Time.class);
  Timestamp ts=Castors.me().castTo(dt,Timestamp.class);
  EntityTypes exp=new EntityTypes();
  exp.name=""String_Node_Str"";
  exp.enum_s=TT.B;
  exp.enum_i=TT.A;
  exp.char_p='G';
  exp.char_obj='O';
  exp.int_p=23;
  exp.int_obj=23;
  exp.float_p=34.67f;
  exp.float_obj=34.68f;
  exp.short_p=6;
  exp.short_obj=6;
  exp.byte_p=2;
  exp.byte_obj=4;
  exp.long_p=56787;
  exp.long_obj=5678L;
  exp.double_p=2.4325243;
  exp.double_obj=3.4325243;
  exp.sqlDate=date;
  exp.sqlTime=time;
  exp.sqlDT=ts;
  dao.insert(exp);
  EntityTypes et=dao.fetch(EntityTypes.class);
  assertEquals(exp.id,et.id);
  Mirror<EntityTypes> me=Mirror.me(EntityTypes.class);
  for (  Field f : me.getFields()) {
    Object expValue;
    Object ttValue;
    if (f.getName().equals(""String_Node_Str"") && dao.meta().isMySql()) {
      expValue=me.getValue(exp,f).toString();
      ttValue=me.getValue(et,f).toString();
    }
 else {
      expValue=me.getValue(exp,f);
      ttValue=me.getValue(et,f);
      if (null == expValue)       continue;
    }
    if (!expValue.equals(ttValue))     throw Lang.makeThrow(""String_Node_Str"",f.getName(),expValue,ttValue);
  }
  assertTrue(true);
}","@Test public void check_if_support_all_normal_types() throws FailToCastObjectException {
  String d=""String_Node_Str"";
  String t=""String_Node_Str"";
  String dt=d + ""String_Node_Str"" + t;
  Date date=Castors.me().castTo(d,Date.class);
  Time time=Castors.me().castTo(t,Time.class);
  Timestamp ts=Castors.me().castTo(dt,Timestamp.class);
  EntityTypes exp=new EntityTypes();
  exp.name=""String_Node_Str"";
  exp.enum_s=TT.B;
  exp.enum_i=TT.A;
  exp.char_p='G';
  exp.char_obj='O';
  exp.int_p=23;
  exp.int_obj=23;
  exp.float_p=34.67f;
  exp.float_obj=34.68f;
  exp.short_p=6;
  exp.short_obj=6;
  exp.byte_p=2;
  exp.byte_obj=4;
  exp.long_p=56787;
  exp.long_obj=5678L;
  exp.double_p=2.4325243;
  exp.double_obj=3.4325243;
  exp.sqlDate=date;
  exp.sqlTime=time;
  exp.sqlDT=ts;
  dao.insert(exp);
  EntityTypes et=dao.fetch(EntityTypes.class);
  assertEquals(exp.id,et.id);
  Mirror<EntityTypes> me=Mirror.me(EntityTypes.class);
  for (  Field f : me.getFields()) {
    Object expValue;
    Object ttValue;
    if (f.getName().equals(""String_Node_Str"") && dao.meta().isMySql()) {
      expValue=me.getValue(exp,f).toString();
      ttValue=me.getValue(et,f).toString();
    }
 else {
      expValue=me.getValue(exp,f);
      ttValue=me.getValue(et,f);
      if (null == expValue)       continue;
    }
    if (!expValue.equals(ttValue) && !dao.meta().isDB2())     throw Lang.makeThrow(""String_Node_Str"",f.getName(),expValue,ttValue);
  }
  assertTrue(true);
}"
43359,"public static PItem cndAuto(Entity<?> en,Object obj){
switch (en.getPkType()) {
case ID:
    Number id=null != obj ? ((Number)en.getIdField().getValue(obj)) : null;
  return cndId(en,id);
case NAME:
String name=null != obj ? en.getNameField().getValue(obj).toString() : null;
return cndName(en,name);
case COMPOSITE:
Object[] pks=null;
if (null != obj) {
pks=new Object[en.getCompositePKFields().size()];
int i=0;
for (EntityField ef : en.getCompositePKFields()) pks[i++]=ef.getValue(obj);
}
return cndPk(en,pks);
default :
throw Lang.makeThrow(""String_Node_Str"",en.getType().getName(),obj);
}
}","public static PItem cndAuto(Entity<?> en,Object obj){
  obj=Lang.first(obj);
switch (en.getPkType()) {
case ID:
    Number id=null != obj ? ((Number)en.getIdField().getValue(obj)) : null;
  return cndId(en,id);
case NAME:
String name=null != obj ? en.getNameField().getValue(obj).toString() : null;
return cndName(en,name);
case COMPOSITE:
Object[] pks=null;
if (null != obj) {
pks=new Object[en.getCompositePKFields().size()];
int i=0;
for (EntityField ef : en.getCompositePKFields()) pks[i++]=ef.getValue(obj);
}
return cndPk(en,pks);
default :
throw Lang.makeThrow(""String_Node_Str"",en.getType().getName(),obj);
}
}"
43360,"/** 
 * 获得所有的属性，包括私有属性。不包括 Object 的属性
 */
public Field[] getFields(){
  Class<?> cc=klass;
  Map<String,Field> map=new LinkedHashMap<String,Field>();
  while (null != cc && cc != Object.class) {
    Field[] fs=cc.getDeclaredFields();
    for (int i=0; i < fs.length; i++) {
      if (!isIgnoredField(fs[i]) && !map.containsKey(fs[i].getName()))       map.put(fs[i].getName(),fs[i]);
    }
    cc=cc.getSuperclass();
  }
  return map.values().toArray(new Field[map.size()]);
}","/** 
 * 获得所有的属性，包括私有属性。不包括 Object 的属性
 * @return 字段列表
 */
public Field[] getFields(){
  return _getFields(true,false,true,true);
}"
43361,"protected ParamInjector evalInjector(Type type,Param param){
  return new JsonInjector(type,null == param ? null : param.value());
}","@Override protected ParamInjector evalInjector(Type type,Param param){
  if (param == null)   return new JsonInjector(type,null);
  return super.evalInjector(type,param);
}"
43362,"public Object getReferObject(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  try {
    return Streams.readAndClose(Streams.utf8r(request.getInputStream()));
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}","public Object getReferObject(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  try {
    return Json.fromJson(Streams.utf8r(request.getInputStream()));
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}"
43363,"@Override public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null != refer)   return Castors.me().castTo(refer,type);
  String[] values=req.getParameterValues(name);
  if (null == values || values.length == 0)   return null;
  if (values.length == 1) {
    try {
      return Castors.me().castTo(values[0],type);
    }
 catch (    Exception e) {
      Object re=Array.newInstance(type.getComponentType(),1);
      Object v=Castors.me().castTo(values[0],type.getComponentType());
      Array.set(re,0,v);
      return re;
    }
  }
  return Lang.array2array(values,type.getComponentType());
}","@SuppressWarnings(""String_Node_Str"") @Override public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object value=null;
  if (null != refer) {
    if (refer instanceof Map) {
      value=((Map<String,Object>)refer).get(name);
      if (value != null && value.getClass().isArray())       return Lang.array2array(value,type.getComponentType());
    }
    if (value != null)     return convertMe(value);
  }
  String[] values=req.getParameterValues(name);
  if (null == values || values.length == 0)   return null;
  if (values.length == 1) {
    return convertMe(values[0]);
  }
  return Lang.array2array(values,type.getComponentType());
}"
43364,"public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null == name)   return Json.fromJson(type,refer.toString());
  NutMap map=Json.fromJson(NutMap.class,refer.toString());
  Object theObj=map.get(name);
  if (null == theObj)   return null;
  Class<?> clazz=Lang.getTypeClass(type);
  return Castors.me().castTo(theObj,clazz);
}","@SuppressWarnings(""String_Node_Str"") public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null == name)   return Castors.me().castTo(refer,Lang.getTypeClass(type));
  Map<String,Object> map=(Map<String,Object>)refer;
  Object theObj=map.get(name);
  if (null == theObj)   return null;
  Class<?> clazz=Lang.getTypeClass(type);
  return Castors.me().castTo(theObj,clazz);
}"
43365,"public void process(ActionContext ac) throws Throwable {
  Object module=ac.getModule();
  Method method=ac.getMethod();
  Object[] args=ac.getMethodArgs();
  try {
    Object re=method.invoke(module,args);
    ac.setMethodReturn(re);
    doNext(ac);
  }
 catch (  IllegalAccessException e) {
    throw e.getCause();
  }
catch (  IllegalArgumentException e) {
    throw e.getCause();
  }
catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}","public void process(ActionContext ac) throws Throwable {
  Object module=ac.getModule();
  Method method=ac.getMethod();
  Object[] args=ac.getMethodArgs();
  try {
    Object re=method.invoke(module,args);
    ac.setMethodReturn(re);
    doNext(ac);
  }
 catch (  IllegalAccessException e) {
    throw Lang.unwrapThrow(e);
  }
catch (  IllegalArgumentException e) {
    throw Lang.unwrapThrow(e);
  }
catch (  InvocationTargetException e) {
    throw Lang.unwrapThrow(e);
  }
}"
43366,"public Object getReferObject(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  try {
    Uploading ing=new FastUploading();
    return ing.parse(request,context);
  }
 catch (  UploadException e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    Uploads.removeInfo(request);
  }
}","public Map<String,Object> getReferObject(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  try {
    Uploading ing=new FastUploading();
    return ing.parse(request,context);
  }
 catch (  UploadException e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    Uploads.removeInfo(request);
  }
}"
43367,"@Test public void testPersonObject() throws Exception {
  Person p=Json.fromJson(Person.class,getFileAsInputStreamReader(""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  Writer w=new OutputStreamWriter(new StringOutputStream(sb));
  w.write(p.dump());
  w.write(""String_Node_Str"");
  w.write(p.getFather().dump());
  w.write(""String_Node_Str"");
  w.write(p.getCompany().getName());
  w.write(""String_Node_Str"");
  w.write(p.getCompany().getCreator().dump());
  w.flush();
  w.close();
  assertTrue(Streams.equals(new StringInputStream(sb),getClass().getResourceAsStream(""String_Node_Str"")));
}","@Ignore @Test public void testPersonObject() throws Exception {
  Person p=Json.fromJson(Person.class,getFileAsInputStreamReader(""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  Writer w=new OutputStreamWriter(new StringOutputStream(sb));
  w.write(p.dump());
  w.write(""String_Node_Str"");
  w.write(p.getFather().dump());
  w.write(""String_Node_Str"");
  w.write(p.getCompany().getName());
  w.write(""String_Node_Str"");
  w.write(p.getCompany().getCreator().dump());
  w.flush();
  w.close();
  assertTrue(Streams.equals(new StringInputStream(sb),getClass().getResourceAsStream(""String_Node_Str"")));
}"
43368,"@Test public void test_array() throws ServletException, IOException {
  String path=""String_Node_Str"";
  String json=""String_Node_Str"";
  initreq(path,json);
  servlet.service(request,response);
  assertEquals(3,response.getAsInt());
}","@Test public void test_array() throws ServletException, IOException {
  String path=""String_Node_Str"";
  String json=""String_Node_Str"";
  initreq(path,json);
  servlet.service(request,response);
  System.out.println(response.getAsString());
  assertEquals(3,response.getAsInt());
}"
43369,"public void visit(final Object obj,final LinkField lnk){
  Object value=lnk.getValue(obj);
  if (Lang.length(value) == 0)   return;
  lnk.updateLinkedField(obj,value);
  final Entity<?> en=lnk.getLinkedEntity();
  Lang.each(value,new Each<Object>(){
    public void invoke(    int i,    Object ele,    int length) throws ExitLoop, LoopException {
      opt.addInsert(en,ele);
      opt.add(Pojos.createRun(new PojoCallback(){
        public Object invoke(        Connection conn,        ResultSet rs,        Pojo pojo) throws SQLException {
          lnk.saveLinkedField(obj,pojo.getOperatingObject());
          return pojo.getOperatingObject();
        }
      }
).setOperatingObject(ele));
    }
  }
);
}","public void visit(final Object obj,final LinkField lnk){
  final Object value=lnk.getValue(obj);
  if (Lang.length(value) == 0)   return;
  opt.add(Pojos.createRun(new PojoCallback(){
    public Object invoke(    Connection conn,    ResultSet rs,    Pojo pojo) throws SQLException {
      lnk.updateLinkedField(obj,value);
      return pojo.getOperatingObject();
    }
  }
).setOperatingObject(obj));
  final Entity<?> en=lnk.getLinkedEntity();
  Lang.each(value,new Each<Object>(){
    public void invoke(    int i,    Object ele,    int length) throws ExitLoop, LoopException {
      opt.addInsert(en,ele);
      opt.add(Pojos.createRun(new PojoCallback(){
        public Object invoke(        Connection conn,        ResultSet rs,        Pojo pojo) throws SQLException {
          lnk.saveLinkedField(obj,pojo.getOperatingObject());
          return pojo.getOperatingObject();
        }
      }
).setOperatingObject(ele));
    }
  }
);
}"
43370,"@Test public void fetch_record(){
  Record re=dao.fetch(""String_Node_Str"",Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Pet pet=re.toPojo(Pet.class);
  assertEquals(4,re.getColumnCount());
  assertEquals(4,pet.getId());
  assertEquals(""String_Node_Str"",pet.getName());
}","@Test public void fetch_record(){
  Record re=dao.fetch(""String_Node_Str"",Cnd.where(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Pet pet=re.toPojo(Pet.class);
  assertEquals(5,re.getColumnCount());
  assertEquals(4,pet.getId());
  assertEquals(""String_Node_Str"",pet.getName());
}"
43371,"private void parseSp(StringBuilder sb) throws IOException {
  nextChar();
switch (cursor) {
case 'n':
    sb.append('\n');
  break;
case 'r':
sb.append('\r');
break;
case 't':
sb.append('\t');
break;
case '\\':
sb.append('\\');
break;
case '\'':
sb.append('\'');
break;
case '\""':
sb.append('\""');
break;
case 'u':
char[] hex=new char[4];
for (int i=0; i < 4; i++) hex[i]=(char)nextChar();
sb.append((char)Integer.valueOf(new String(hex),16).intValue());
break;
case 'b':
sb.append(' ');
break;
case 'f':
sb.append('\f');
break;
default :
throw unexpectedChar();
}
}","private void parseSp(StringBuilder sb) throws IOException {
  nextChar();
switch (cursor) {
case 'n':
    sb.append('\n');
  break;
case 'r':
sb.append('\r');
break;
case 't':
sb.append('\t');
break;
case '\\':
sb.append('\\');
break;
case '\'':
sb.append('\'');
break;
case '\""':
sb.append('\""');
break;
case '/':
sb.append('/');
break;
case 'u':
char[] hex=new char[4];
for (int i=0; i < 4; i++) hex[i]=(char)nextChar();
sb.append((char)Integer.valueOf(new String(hex),16).intValue());
break;
case 'b':
sb.append(' ');
break;
case 'f':
sb.append('\f');
break;
default :
throw unexpectedChar();
}
}"
43372,"public static Set<Class<?>> scanModules(Class<?> mainModule){
  Modules ann=mainModule.getAnnotation(Modules.class);
  boolean scan=null == ann ? false : ann.scanPackage();
  List<Class<?>> list=new LinkedList<Class<?>>();
  list.add(mainModule);
  if (null != ann) {
    for (    Class<?> module : ann.value()) {
      list.add(module);
    }
  }
  Set<Class<?>> modules=new HashSet<Class<?>>();
  for (  Class<?> type : list) {
    if (scan) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",type.getPackage().getName());
      List<Class<?>> subs=Scans.me().scanPackage(type);
      for (      Class<?> sub : subs) {
        if (isModule(sub)) {
          if (log.isDebugEnabled())           log.debugf(""String_Node_Str"",sub.getName());
          modules.add(sub);
        }
 else         if (log.isTraceEnabled()) {
          log.tracef(""String_Node_Str"",sub.getName());
        }
      }
    }
 else {
      if (isModule(type)) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",type.getName());
        modules.add(type);
      }
 else       if (log.isTraceEnabled()) {
        log.tracef(""String_Node_Str"",type.getName());
      }
    }
  }
  return modules;
}","public static Set<Class<?>> scanModules(Class<?> mainModule){
  Modules ann=mainModule.getAnnotation(Modules.class);
  boolean scan=null == ann ? false : ann.scanPackage();
  List<Class<?>> list=new LinkedList<Class<?>>();
  list.add(mainModule);
  if (null != ann) {
    for (    Class<?> module : ann.value()) {
      list.add(module);
    }
  }
  Set<Class<?>> modules=new HashSet<Class<?>>();
  if (null != ann && ann.packages() != null && ann.packages().length > 0) {
    for (    String packageName : ann.packages())     scanModuleInPackage(modules,packageName);
  }
  for (  Class<?> type : list) {
    if (scan)     scanModuleInPackage(modules,type.getPackage().getName());
 else {
      if (isModule(type)) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",type.getName());
        modules.add(type);
      }
 else       if (log.isTraceEnabled()) {
        log.tracef(""String_Node_Str"",type.getName());
      }
    }
  }
  return modules;
}"
43373,"public void exec(Connection conn,DaoStatement st){
  Object[][] paramMatrix;
  try {
    st.onBefore(conn);
switch (st.getSqlType()) {
case SELECT:
      paramMatrix=st.getParamMatrix();
    if (null == paramMatrix || paramMatrix.length == 0 || paramMatrix[0].length == 0) {
      String sql=st.toPreparedStatement();
      if (log.isDebugEnabled())       log.debug(sql);
      Statement stat=null;
      ResultSet rs=null;
      try {
        stat=conn.createStatement(st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        if (st.getContext().getFetchSize() > 0)         stat.setFetchSize(st.getContext().getFetchSize());
        rs=stat.executeQuery(sql);
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(stat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
 else {
      String sql=st.toPreparedStatement();
      if (paramMatrix.length > 1) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",paramMatrix.length - 1,st);
      }
 else       if (log.isDebugEnabled()) {
        log.debug(st);
      }
      ValueAdaptor[] adaptors=st.getAdaptors();
      PreparedStatement pstat=null;
      ResultSet rs=null;
      try {
        pstat=conn.prepareStatement(sql,st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        for (int i=0; i < paramMatrix[0].length; i++) {
          adaptors[i].set(pstat,paramMatrix[0][i],i + 1);
        }
        rs=pstat.executeQuery();
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(pstat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
  break;
case DELETE:
case UPDATE:
case INSERT:
paramMatrix=st.getParamMatrix();
if (null == paramMatrix || paramMatrix.length == 0) {
_runStatement(conn,st);
}
 else {
_runPreparedStatement(conn,st,paramMatrix);
}
st.onAfter(conn,null);
break;
case TRUNCATE:
case CREATE:
case DROP:
_runStatement(conn,st);
st.onAfter(conn,null);
break;
case ALTER:
case RUN:
st.onAfter(conn,null);
break;
default :
throw Lang.impossible();
}
}
 catch (SQLException e) {
throw new DaoException(format(""String_Node_Str"",st.toString(),st.toPreparedStatement()),e);
}
}","public void exec(Connection conn,DaoStatement st){
  Object[][] paramMatrix;
  try {
    st.onBefore(conn);
switch (st.getSqlType()) {
case SELECT:
      paramMatrix=st.getParamMatrix();
    if (null == paramMatrix || paramMatrix.length == 0 || paramMatrix[0].length == 0) {
      String sql=st.toPreparedStatement();
      if (log.isDebugEnabled())       log.debug(sql);
      Statement stat=null;
      ResultSet rs=null;
      try {
        stat=conn.createStatement(st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        if (st.getContext().getFetchSize() > 0)         stat.setFetchSize(st.getContext().getFetchSize());
        rs=stat.executeQuery(sql);
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(stat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
 else {
      String sql=st.toPreparedStatement();
      if (paramMatrix.length > 1) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",paramMatrix.length - 1,st);
      }
 else       if (log.isDebugEnabled()) {
        log.debug(st);
      }
      ValueAdaptor[] adaptors=st.getAdaptors();
      PreparedStatement pstat=null;
      ResultSet rs=null;
      try {
        pstat=conn.prepareStatement(sql,st.getContext().getResultSetType(),ResultSet.CONCUR_READ_ONLY);
        for (int i=0; i < paramMatrix[0].length; i++) {
          adaptors[i].set(pstat,paramMatrix[0][i],i + 1);
        }
        rs=pstat.executeQuery();
        st.onAfter(conn,rs);
      }
  finally {
        Daos.safeClose(pstat,rs);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"");
    }
  break;
case ALTER:
case TRUNCATE:
case CREATE:
case DROP:
_runStatement(conn,st);
st.onAfter(conn,null);
break;
case RUN:
st.onAfter(conn,null);
break;
default :
paramMatrix=st.getParamMatrix();
if (null == paramMatrix || paramMatrix.length == 0) {
_runStatement(conn,st);
}
 else {
_runPreparedStatement(conn,st,paramMatrix);
}
st.onAfter(conn,null);
}
}
 catch (SQLException e) {
throw new DaoException(format(""String_Node_Str"",st.toString(),st.toPreparedStatement()),e);
}
}"
43374,"public static List<MappingField> getFieldsForUpdate(Entity<?> en,FieldMatcher fm,Object refer){
  List<MappingField> re=new ArrayList<MappingField>(en.getMappingFields().size());
  for (  MappingField mf : en.getMappingFields()) {
    if (mf.isPk()) {
      if (en.getPkType() == PkType.ID && mf.isId())       continue;
      if (en.getPkType() == PkType.NAME && mf.isName())       continue;
      if (en.getPkType() == PkType.COMPOSITE && mf.isCompositePk())       continue;
    }
    if (!mf.isAutoIncreasement() && !mf.isReadonly())     if (null != fm && null != refer && fm.isIgnoreNull() && null == mf.getValue(refer))     continue;
    if (null == fm || fm.match(mf.getName()))     re.add(mf);
  }
  return re;
}","public static List<MappingField> getFieldsForUpdate(Entity<?> en,FieldMatcher fm,Object refer){
  List<MappingField> re=new ArrayList<MappingField>(en.getMappingFields().size());
  for (  MappingField mf : en.getMappingFields()) {
    if (mf.isPk()) {
      if (en.getPkType() == PkType.ID && mf.isId())       continue;
      if (en.getPkType() == PkType.NAME && mf.isName())       continue;
      if (en.getPkType() == PkType.COMPOSITE && mf.isCompositePk())       continue;
    }
    if (mf.isReadonly() || mf.isAutoIncreasement())     continue;
 else     if (null != fm && null != refer && fm.isIgnoreNull() && null == mf.getValue(refer))     continue;
    if (null == fm || fm.match(mf.getName()))     re.add(mf);
  }
  return re;
}"
43375,"public JsonEntity(Mirror<?> mirror){
  Field[] flds=mirror.getFields();
  fields=new ArrayList<JsonEntityField>(flds.length);
  for (  Field fld : flds) {
    JsonEntityField ef=new JsonEntityField(mirror,fld);
    fields.add(ef);
  }
  try {
    borning=mirror.getBorning();
  }
 catch (  BorningException e) {
    err=e;
  }
}","public JsonEntity(Mirror<?> mirror){
  Field[] flds=mirror.getFields();
  fields=new ArrayList<JsonEntityField>(flds.length);
  for (  Field fld : flds) {
    JsonEntityField ef=JsonEntityField.eval(mirror,fld);
    if (null != ef)     fields.add(ef);
  }
  try {
    borning=mirror.getBorning();
  }
 catch (  BorningException e) {
    err=e;
  }
}"
43376,"public JsonEntityField(Mirror<?> mirror,Field fld){
  this.injecting=mirror.getInjecting(fld.getName());
  this.ejecting=mirror.getEjecting(fld.getName());
  this.genericType=fld.getGenericType();
  JsonField jf=fld.getAnnotation(JsonField.class);
  if (null != jf)   name=jf.value();
 else   name=fld.getName();
}","private JsonEntityField(){
}"
43377,"/** 
 * 从一个 ResultSet 中获取一个对象。 <p> 因为 Dao 接口可以知道一个 POJO 的映射细节，这个函数可以帮你节省一点体力。
 * @param classOfT
 * @param rs
 * @param fm
 * @return 对象
 */
<T>T getObject(Class<T> classOfT,ResultSet rs,FieldMatcher fm);","/** 
 * 从一个 ResultSet 中获取一个对象。 <p> 因为 Dao 接口可以知道一个 POJO 的映射细节，这个函数可以帮你节省一点体力。
 * @param classOfT 对象类型
 * @param rs 结果集
 * @param fm 字段过滤器
 * @return 对象
 */
<T>T getObject(Class<T> classOfT,ResultSet rs,FieldMatcher fm);"
43378,"public static ElObj oLong(Long v){
  return new StaticElObj(new LongElValue(v));
}","public static ElObj oLong(Long v){
  return new StaticElObj(new NumberElValue(v));
}"
43379,"public static ElObj oInt(Integer v){
  return new StaticElObj(new IntegerElValue(v));
}","public static ElObj oInt(Integer v){
  return new StaticElObj(new NumberElValue(v));
}"
43380,"public static ElObj oFloat(Float v){
  return new StaticElObj(new FloatElValue(v));
}","public static ElObj oFloat(Float v){
  return new StaticElObj(new NumberElValue(v));
}"
43381,"public ElValue make(Object obj){
  if (obj instanceof ElValue)   return (ElValue)obj;
  if (null == obj)   return new NullElValue();
  if (obj instanceof Map<?,?>)   return new MapElValue((Map<?,?>)obj);
  if (obj instanceof List<?>)   return new ListElValue((List<?>)obj);
  if (obj instanceof Collection<?>)   return new CollectionElValue((List<?>)obj);
  if (obj.getClass().isArray()) {
    return new ArrayElValue(obj);
  }
  Mirror<?> mirror=Mirror.me(obj);
  if (mirror.isStringLike())   return new StringElValue(obj.toString());
  if (mirror.isLong())   return new LongElValue((Long)obj);
  if (mirror.isIntLike())   return new IntegerElValue((Integer)obj);
  if (mirror.isBoolean())   return (Boolean)obj ? El.TRUE : El.FALSE;
  if (mirror.isFloat())   return new FloatElValue((Float)obj);
  return new PojoElValue<Object>(obj);
}","public ElValue make(Object obj){
  if (obj instanceof ElValue)   return (ElValue)obj;
  if (null == obj)   return new NullElValue();
  if (obj instanceof Map<?,?>)   return new MapElValue((Map<?,?>)obj);
  if (obj instanceof List<?>)   return new ListElValue((List<?>)obj);
  if (obj instanceof Collection<?>)   return new CollectionElValue((List<?>)obj);
  if (obj.getClass().isArray()) {
    return new ArrayElValue(obj);
  }
  Mirror<?> mirror=Mirror.me(obj);
  if (mirror.isStringLike())   return new StringElValue(obj.toString());
  if (mirror.isLong())   return new NumberElValue((Long)obj);
  if (mirror.isIntLike())   return new NumberElValue((Integer)obj);
  if (mirror.isBoolean())   return (Boolean)obj ? El.TRUE : El.FALSE;
  if (mirror.isFloat())   return new NumberElValue((Float)obj);
  return new PojoElValue<Object>(obj);
}"
43382,"public ElValue getProperty(ElValue val){
  Object v=val.get();
  if (v instanceof Integer) {
    return El.wrap(Array.get(obj,((Integer)v).intValue()));
  }
 else   if (""String_Node_Str"".equals(val.getString())) {
    return El.wrap(Array.getLength(obj));
  }
  throw new ElException(""String_Node_Str"",val.getString());
}","public ElValue getProperty(ElValue val){
  Object v=val.get();
  if (v instanceof BigDecimal) {
    return El.wrap(Array.get(obj,((BigDecimal)v).intValue()));
  }
 else   if (""String_Node_Str"".equals(val.getString())) {
    return El.wrap(Array.getLength(obj));
  }
  throw new ElException(""String_Node_Str"",val.getString());
}"
43383,"/** 
 * 将字符串，变成数字对象，现支持的格式为： <ul> <li>null - 整数 0</li> <li>23.78 - 浮点 Float</li> <li>0x45 - 16进制整数 Integer</li> <li>78L - 长整数 Long</li> <li>69 - 普通整数 Integer</li> </ul>
 * @param s 参数
 * @return 数字对象
 */
public static Number str2number(String s){
  if (null == s) {
    return 0;
  }
  s=s.toUpperCase();
  if (s.indexOf('.') != -1) {
    return Float.valueOf(s);
  }
  if (s.startsWith(""String_Node_Str"")) {
    return Integer.valueOf(s.substring(2),16);
  }
  if (s.charAt(s.length() - 1) == 'L') {
    return Long.valueOf(s.substring(0,s.length() - 1));
  }
  return Integer.valueOf(s);
}","/** 
 * 将字符串，变成数字对象，现支持的格式为： <ul> <li>null - 整数 0</li> <li>23.78 - 浮点 Float</li> <li>0x45 - 16进制整数 Integer</li> <li>78L - 长整数 Long</li> <li>69 - 普通整数 Integer</li> </ul>
 * @param s 参数
 * @return 数字对象
 */
public static Number str2number(String s){
  if (null == s) {
    return 0;
  }
  s=s.toUpperCase();
  if (s.indexOf('.') != -1) {
    return Float.valueOf(s);
  }
  if (s.startsWith(""String_Node_Str"")) {
    return Integer.valueOf(s.substring(2),16);
  }
  if (s.charAt(s.length() - 1) == 'L') {
    return Long.valueOf(s.substring(0,s.length() - 1));
  }
  Long re=Long.parseLong(s);
  if (Integer.MAX_VALUE >= re && re >= Integer.MIN_VALUE)   return re.intValue();
  return re;
}"
43384,"@SuppressWarnings(""String_Node_Str"") private void addClass(Class<?> classZ){
  if (classZ.isInterface() || classZ.isMemberClass() || classZ.isEnum()|| classZ.isAnnotation()|| classZ.isAnonymousClass())   return;
  int modify=classZ.getModifiers();
  if (Modifier.isAbstract(modify) || (!Modifier.isPublic(modify)))   return;
  IocBean iocBean=classZ.getAnnotation(IocBean.class);
  if (iocBean != null) {
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ);
    String beanName=iocBean.name();
    if (Strings.isBlank(beanName)) {
      InjectName innm=classZ.getAnnotation(InjectName.class);
      if (null != innm && !Strings.isBlank(innm.value())) {
        beanName=innm.value();
      }
 else {
        beanName=Strings.lowerFirst(classZ.getSimpleName());
      }
    }
    IocObject iocObject=new IocObject();
    iocObject.setType(classZ);
    map.put(beanName,iocObject);
    iocObject.setSingleton(iocBean.singleton());
    if (!Strings.isBlank(iocBean.scope()))     iocObject.setScope(iocBean.scope());
    String[] args=iocBean.args();
    if (null == args || args.length == 0)     args=iocBean.param();
    if (null != args && args.length > 0)     for (    String value : args)     iocObject.addArg(convert(value));
    IocEventSet eventSet=new IocEventSet();
    iocObject.setEvents(eventSet);
    if (!Strings.isBlank(iocBean.create()))     eventSet.setCreate(iocBean.create().trim().intern());
    if (!Strings.isBlank(iocBean.depose()))     eventSet.setDepose(iocBean.depose().trim().intern());
    if (!Strings.isBlank(iocBean.fetch()))     eventSet.setFetch(iocBean.fetch().trim().intern());
    List<String> fieldList=new ArrayList<String>();
    Mirror<?> mirror=Mirror.me(classZ);
    Field[] fields=mirror.getFields();
    for (    Field field : fields) {
      Inject inject=field.getAnnotation(Inject.class);
      if (inject == null)       continue;
      IocField iocField=new IocField();
      iocField.setName(field.getName());
      IocValue iocValue;
      if (Strings.isBlank(inject.value())) {
        iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(field.getName());
      }
 else       iocValue=convert(inject.value());
      iocField.setValue(iocValue);
      iocObject.addField(iocField);
      fieldList.add(iocField.getName());
    }
    Method[] methods=mirror.getMethods();
    for (    Method method : methods) {
      Inject inject=method.getAnnotation(Inject.class);
      if (inject == null)       continue;
      if (method.getName().startsWith(""String_Node_Str"") && method.getName().length() > 3 && method.getParameterTypes().length == 1) {
        IocField iocField=new IocField();
        iocField.setName(Strings.lowerFirst(method.getName().substring(3)));
        IocValue iocValue;
        if (Strings.isBlank(inject.value())) {
          iocValue=new IocValue();
          iocValue.setType(IocValue.TYPE_REFER);
          iocValue.setValue(Strings.lowerFirst(method.getName().substring(3)));
        }
 else         iocValue=convert(inject.value());
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    String[] flds=iocBean.fields();
    if (null == flds || flds.length == 0) {
      flds=iocBean.field();
    }
    if (flds != null && flds.length > 0) {
      for (      String fieldInfo : flds) {
        if (fieldList.contains(fieldInfo))         throw Lang.makeThrow(""String_Node_Str"",classZ,fieldInfo);
        IocField iocField=new IocField();
        iocField.setName(fieldInfo);
        IocValue iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(fieldInfo);
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ,beanName);
  }
}","private void addClass(Class<?> classZ){
  if (classZ.isInterface() || classZ.isMemberClass() || classZ.isEnum()|| classZ.isAnnotation()|| classZ.isAnonymousClass())   return;
  int modify=classZ.getModifiers();
  if (Modifier.isAbstract(modify) || (!Modifier.isPublic(modify)))   return;
  IocBean iocBean=classZ.getAnnotation(IocBean.class);
  if (iocBean != null) {
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ);
    String beanName=iocBean.name();
    if (Strings.isBlank(beanName)) {
      InjectName innm=classZ.getAnnotation(InjectName.class);
      if (null != innm && !Strings.isBlank(innm.value())) {
        beanName=innm.value();
      }
 else {
        beanName=Strings.lowerFirst(classZ.getSimpleName());
      }
    }
    IocObject iocObject=new IocObject();
    iocObject.setType(classZ);
    map.put(beanName,iocObject);
    iocObject.setSingleton(iocBean.singleton());
    if (!Strings.isBlank(iocBean.scope()))     iocObject.setScope(iocBean.scope());
    String[] args=iocBean.args();
    if (null != args && args.length > 0)     for (    String value : args)     iocObject.addArg(convert(value));
    IocEventSet eventSet=new IocEventSet();
    iocObject.setEvents(eventSet);
    if (!Strings.isBlank(iocBean.create()))     eventSet.setCreate(iocBean.create().trim().intern());
    if (!Strings.isBlank(iocBean.depose()))     eventSet.setDepose(iocBean.depose().trim().intern());
    if (!Strings.isBlank(iocBean.fetch()))     eventSet.setFetch(iocBean.fetch().trim().intern());
    List<String> fieldList=new ArrayList<String>();
    Mirror<?> mirror=Mirror.me(classZ);
    Field[] fields=mirror.getFields(Inject.class);
    for (    Field field : fields) {
      Inject inject=field.getAnnotation(Inject.class);
      IocField iocField=new IocField();
      iocField.setName(field.getName());
      IocValue iocValue;
      if (Strings.isBlank(inject.value())) {
        iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(field.getName());
      }
 else       iocValue=convert(inject.value());
      iocField.setValue(iocValue);
      iocObject.addField(iocField);
      fieldList.add(iocField.getName());
    }
    Method[] methods=mirror.getMethods();
    for (    Method method : methods) {
      Inject inject=method.getAnnotation(Inject.class);
      if (inject == null)       continue;
      int m=method.getModifiers();
      if (Modifier.isAbstract(m) || (!Modifier.isPublic(m)) || Modifier.isStatic(m))       continue;
      if (method.getName().startsWith(""String_Node_Str"") && method.getName().length() > 3 && method.getParameterTypes().length == 1) {
        IocField iocField=new IocField();
        iocField.setName(Strings.lowerFirst(method.getName().substring(3)));
        if (fieldList.contains(iocField.getName()))         throw duplicateField(classZ,iocField.getName());
        IocValue iocValue;
        if (Strings.isBlank(inject.value())) {
          iocValue=new IocValue();
          iocValue.setType(IocValue.TYPE_REFER);
          iocValue.setValue(Strings.lowerFirst(method.getName().substring(3)));
        }
 else         iocValue=convert(inject.value());
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    String[] flds=iocBean.fields();
    if (flds != null && flds.length > 0) {
      for (      String fieldInfo : flds) {
        if (fieldList.contains(fieldInfo))         throw duplicateField(classZ,fieldInfo);
        IocField iocField=new IocField();
        iocField.setName(fieldInfo);
        IocValue iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(fieldInfo);
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ,beanName);
  }
}"
43385,"public List<NutResource> loadResource(String regex,String... paths){
  List<NutResource> list=new LinkedList<NutResource>();
  try {
    for (    String path : paths) {
      File f=Files.findFile(path);
      if (null == f || f.isDirectory()) {
        list.addAll(scan(path,regex));
      }
 else       if (f.isFile()) {
        list.add(new FileResource(f));
      }
 else       if (f.getAbsolutePath().contains(""String_Node_Str"")) {
        list.add(new JarEntryResource(new JarEntryInfo(f.getAbsolutePath())));
      }
    }
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (list.size() < 1 && paths.length > 0)   throw Lang.makeThrow(RuntimeException.class,""String_Node_Str"",regex,Castors.me().castToString(paths));
  return list;
}","public List<NutResource> loadResource(String regex,String... paths){
  List<NutResource> list=new LinkedList<NutResource>();
  for (  String path : paths) {
    File f=Files.findFile(path);
    if (null == f || f.isDirectory()) {
      list.addAll(scan(path,regex));
    }
 else     if (f.isFile()) {
      list.add(new FileResource(f));
    }
 else     if (isInJar(f)) {
      NutResource nutResource=makeJarNutResource(f);
      if (nutResource != null) {
        list.add(nutResource);
      }
 else {
        if (!path.replace('\\','/').endsWith(""String_Node_Str""))         path+='/';
        list.addAll(scan(path,regex));
      }
    }
  }
  if (list.size() < 1 && paths.length > 0)   throw Lang.makeThrow(RuntimeException.class,""String_Node_Str"",regex,Castors.me().castToString(paths));
  return list;
}"
43386,"protected List<NutResource> scanInJar(String src,Pattern regex,String jarPath){
  List<NutResource> list=new ArrayList<NutResource>();
  try {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",jarPath,regex,src);
    JarFile jar=new JarFile(jarPath);
    Enumeration<JarEntry> ens=jar.entries();
    while (ens.hasMoreElements()) {
      JarEntry jen=ens.nextElement();
      if (jen.isDirectory())       continue;
      String name=jen.getName();
      if (name.startsWith(src) && (null != regex && regex.matcher(name).find())) {
        list.add(new JarEntryResource(jar,jen,jen.getName().substring(src.length())));
      }
    }
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",list.size(),jarPath,regex,src);
  }
 catch (  Throwable e) {
    if (log.isWarnEnabled())     log.warn(""String_Node_Str"" + jarPath + ""String_Node_Str"",e);
  }
  return list;
}","protected List<NutResource> scanInJar(String src,Pattern regex,String jarPath){
  List<NutResource> list=new ArrayList<NutResource>();
  try {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",jarPath,regex,src);
    JarFile jar=new JarFile(jarPath);
    Enumeration<JarEntry> ens=jar.entries();
    while (ens.hasMoreElements()) {
      JarEntry jen=ens.nextElement();
      if (jen.isDirectory())       continue;
      String name=jen.getName();
      if (name.startsWith(src) && (null == regex || regex.matcher(name).find())) {
        list.add(new JarEntryResource(jar,jen,jen.getName().substring(src.length())));
      }
    }
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",list.size(),jarPath,regex,src);
  }
 catch (  Throwable e) {
    if (log.isWarnEnabled())     log.warn(""String_Node_Str"" + jarPath + ""String_Node_Str"",e);
  }
  return list;
}"
43387,"public List<NutResource> list(String src,String filter){
  final List<NutResource> list=new LinkedList<NutResource>();
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  File f=Files.findFile(src);
  if (f != null && f.exists()) {
    if (f.isFile())     list.addAll(scanInDir(regex,f.getParentFile(),ignoreHidden));
 else     list.addAll(scanInDir(regex,f,ignoreHidden));
  }
 else {
    String path=Disks.absolute(src,getClass().getClassLoader(),Encoding.defaultEncoding());
    if (null != path) {
      f=new File(path);
      if (!path.contains(""String_Node_Str"")) {
        int pos=path.lastIndexOf(src);
        if (pos > 0)         list.addAll(scanInDir(regex,f,ignoreHidden));
      }
 else {
        JarEntryInfo jeInfo=new JarEntryInfo(path);
        list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
      }
    }
 else {
      String classpath=System.getProperties().getProperty(""String_Node_Str"");
      if (LOG.isInfoEnabled())       LOG.info(""String_Node_Str"" + classpath);
      String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
      for (      String pathZ : paths) {
        if (pathZ.endsWith(""String_Node_Str""))         list.addAll(scanInJar(checkSrc(src),regex,pathZ));
 else         list.addAll(scanInDir(regex,new File(pathZ + ""String_Node_Str"" + src),ignoreHidden));
      }
    }
  }
  return list;
}","public List<NutResource> list(String src,String filter){
  final List<NutResource> list=new LinkedList<NutResource>();
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  File f=Files.findFile(src);
  if (f != null && f.exists()) {
    if (f.isFile())     list.addAll(scanInDir(regex,f.getParentFile(),ignoreHidden));
 else     list.addAll(scanInDir(regex,f,ignoreHidden));
  }
 else {
    String path=Disks.absolute(src,getClass().getClassLoader(),Encoding.defaultEncoding());
    if (null != path) {
      f=new File(path);
      if (!path.contains(""String_Node_Str"")) {
        int pos=path.lastIndexOf(src);
        if (pos > 0)         list.addAll(scanInDir(regex,f,ignoreHidden));
      }
 else {
        JarEntryInfo jeInfo=new JarEntryInfo(path);
        list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
      }
    }
 else {
      try {
        Enumeration<URL> en=getClass().getClassLoader().getResources(src);
        if (en != null) {
          while (en.hasMoreElements()) {
            JarEntryInfo jeInfo=new JarEntryInfo(en.nextElement().getPath());
            list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
          }
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
  return list;
}"
43388,"public <T>T insertRelation(T obj,String regex){
  EntityOperator opt=__opt(obj);
  opt.entity.visitManyMany(obj,regex,doInsertRelation(opt));
  opt.exec();
  return obj;
}","public <T>T insertRelation(T obj,String regex){
  EntityOperator opt=_optBy(obj);
  opt.entity.visitManyMany(obj,regex,doInsertRelation(opt));
  opt.exec();
  return obj;
}"
43389,"public <T>T insertWith(T obj,String regex){
  EntityOperator opt=__opt(obj);
  opt.entity.visitOne(obj,regex,doInsert(opt));
  opt.addInsert();
  opt.entity.visitMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsertRelation(opt));
  opt.exec();
  return obj;
}","public <T>T insertWith(T obj,String regex){
  EntityOperator opt=_optBy(obj);
  opt.entity.visitOne(obj,regex,doInsert(opt));
  opt.addInsert();
  opt.entity.visitMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsertRelation(opt));
  opt.exec();
  return obj;
}"
43390,"public <T>T insertLinks(T obj,String regex){
  EntityOperator opt=__opt(obj);
  opt.entity.visitOne(obj,regex,doInsert(opt));
  opt.entity.visitMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsertRelation(opt));
  opt.exec();
  return obj;
}","public <T>T insertLinks(T obj,String regex){
  EntityOperator opt=_optBy(obj);
  opt.entity.visitOne(obj,regex,doInsert(opt));
  opt.entity.visitMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsert(opt));
  opt.entity.visitManyMany(obj,regex,doInsertRelation(opt));
  opt.exec();
  return obj;
}"
43391,"public int update(Class<?> classOfT,Chain chain,Condition cnd){
  Entity<?> en=holder.getEntity(classOfT);
  return update(en.getTableName(),chain.updateBy(en),cnd);
}","public int update(Class<?> classOfT,Chain chain,Condition cnd){
  EntityOperator opt=_opt(classOfT);
  opt.addUpdate(chain,cnd);
  opt.exec();
  return opt.getUpdateCount();
}"
43392,"public int delete(Object obj){
  EntityOperator opt=__opt(obj);
  opt.addDeleteSelfOnly();
  opt.exec();
  return opt.getUpdateCount();
}","public int delete(Object obj){
  EntityOperator opt=_optBy(obj);
  opt.addDeleteSelfOnly();
  opt.exec();
  return opt.getUpdateCount();
}"
43393,"public int updateIgnoreNull(final Object obj){
  EntityOperator opt=__opt(obj);
  opt.addUpdateForIgnoreNull(opt.entity,obj,FieldFilter.get(opt.entity.getType()));
  opt.exec();
  return opt.getUpdateCount();
}","public int updateIgnoreNull(final Object obj){
  EntityOperator opt=_optBy(obj);
  opt.addUpdateForIgnoreNull(opt.entity,obj,FieldFilter.get(opt.entity.getType()));
  opt.exec();
  return opt.getUpdateCount();
}"
43394,"public int deleteLinks(Object obj,String regex){
  EntityOperator opt=this.__opt(obj);
  opt.entity.visitMany(obj,regex,doDelete(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByLinkedField(opt));
  opt.entity.visitManyMany(obj,regex,doDelete(opt));
  opt.entity.visitOne(obj,regex,doDelete(opt));
  return opt.exec().getUpdateCount();
}","public int deleteLinks(Object obj,String regex){
  EntityOperator opt=this._optBy(obj);
  opt.entity.visitMany(obj,regex,doDelete(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByLinkedField(opt));
  opt.entity.visitManyMany(obj,regex,doDelete(opt));
  opt.entity.visitOne(obj,regex,doDelete(opt));
  return opt.exec().getUpdateCount();
}"
43395,"public <T>T clearLinks(T obj,String regex){
  EntityOperator opt=this.__opt(obj);
  opt.entity.visitMany(obj,regex,doClear(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByHostField(opt));
  opt.entity.visitOne(obj,regex,doClear(opt));
  opt.exec();
  return obj;
}","public <T>T clearLinks(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  opt.entity.visitMany(obj,regex,doClear(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByHostField(opt));
  opt.entity.visitOne(obj,regex,doClear(opt));
  opt.exec();
  return obj;
}"
43396,"public <T>T updateLinks(T obj,String regex){
  EntityOperator opt=this.__opt(obj);
  opt.entity.visitOne(obj,regex,doUpdate(opt));
  opt.entity.visitMany(obj,regex,doUpdate(opt));
  opt.entity.visitManyMany(obj,regex,doUpdate(opt));
  opt.exec();
  return obj;
}","public <T>T updateLinks(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  opt.entity.visitOne(obj,regex,doUpdate(opt));
  opt.entity.visitMany(obj,regex,doUpdate(opt));
  opt.entity.visitManyMany(obj,regex,doUpdate(opt));
  opt.exec();
  return obj;
}"
43397,"public <T>T updateWith(T obj,String regex){
  EntityOperator opt=this.__opt(obj);
  opt.entity.visitOne(obj,regex,doUpdate(opt));
  opt.addUpdate();
  opt.entity.visitMany(obj,regex,doUpdate(opt));
  opt.entity.visitManyMany(obj,regex,doUpdate(opt));
  opt.exec();
  return obj;
}","public <T>T updateWith(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  opt.entity.visitOne(obj,regex,doUpdate(opt));
  opt.addUpdate();
  opt.entity.visitMany(obj,regex,doUpdate(opt));
  opt.entity.visitManyMany(obj,regex,doUpdate(opt));
  opt.exec();
  return obj;
}"
43398,"public <T>T fetchLinks(T obj,String regex){
  EntityOperator opt=this.__opt(obj);
  opt.entity.visitMany(obj,regex,doFetch(opt));
  opt.entity.visitManyMany(obj,regex,doFetch(opt));
  opt.entity.visitOne(obj,regex,doFetch(opt));
  opt.exec();
  return obj;
}","public <T>T fetchLinks(T obj,String regex){
  EntityOperator opt=this._optBy(obj);
  opt.entity.visitMany(obj,regex,doFetch(opt));
  opt.entity.visitManyMany(obj,regex,doFetch(opt));
  opt.entity.visitOne(obj,regex,doFetch(opt));
  opt.exec();
  return obj;
}"
43399,"public <T>T fastInsert(T obj){
  EntityOperator opt=__opt(obj);
  opt.addInsertSelfOnly();
  opt.exec();
  return obj;
}","public <T>T fastInsert(T obj){
  EntityOperator opt=_optBy(obj);
  opt.addInsertSelfOnly();
  opt.exec();
  return obj;
}"
43400,"public int deleteWith(Object obj,String regex){
  EntityOperator opt=this.__opt(obj);
  opt.entity.visitMany(obj,regex,doDelete(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByLinkedField(opt));
  opt.entity.visitManyMany(obj,regex,doDelete(opt));
  opt.addDeleteSelfOnly();
  opt.entity.visitOne(obj,regex,doDelete(opt));
  return opt.exec().getUpdateCount();
}","public int deleteWith(Object obj,String regex){
  EntityOperator opt=this._optBy(obj);
  opt.entity.visitMany(obj,regex,doDelete(opt));
  opt.entity.visitManyMany(obj,regex,doClearRelationByLinkedField(opt));
  opt.entity.visitManyMany(obj,regex,doDelete(opt));
  opt.addDeleteSelfOnly();
  opt.entity.visitOne(obj,regex,doDelete(opt));
  return opt.exec().getUpdateCount();
}"
43401,"public Pojo append(PItem... itemAry){
  if (null != itemAry)   for (  PItem item : itemAry) {
    items.add(item);
    item.setPojo(this);
  }
  return this;
}","public Pojo append(PItem... itemAry){
  if (null != itemAry)   for (  PItem item : itemAry) {
    if (null != item) {
      items.add(item);
      item.setPojo(this);
    }
  }
  return this;
}"
43402,"public static PItem[] cnd(Condition cnd){
  List<PItem> list=new LinkedList<PItem>();
  if (null == cnd) {
  }
  if (cnd instanceof Criteria) {
    list.add((Criteria)cnd);
  }
 else {
    list.add(new ConditionPItem(cnd));
  }
  return list.toArray(new PItem[list.size()]);
}","public static PItem[] cnd(Condition cnd){
  List<PItem> list=new LinkedList<PItem>();
  if (null == cnd) {
  }
 else   if (cnd instanceof Criteria) {
    list.add((Criteria)cnd);
  }
 else {
    list.add(new ConditionPItem(cnd));
  }
  return list.toArray(new PItem[list.size()]);
}"
43403,"public void injectValue(Object obj,ResultSet rs){
  try {
    this.setValue(obj,adaptor.get(rs,columnName));
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}","public void injectValue(Object obj,ResultSet rs){
  try {
    this.setValue(obj,adaptor.get(rs,columnName));
  }
 catch (  SQLException e) {
  }
}"
43404,"@SuppressWarnings({""String_Node_Str""}) public void render(Object obj) throws IOException {
  if (null == obj) {
    writer.write(""String_Node_Str"");
  }
 else   if (obj instanceof Class) {
    string2Json(((Class<?>)obj).getName());
  }
 else   if (obj instanceof Mirror) {
    string2Json(((Mirror<?>)obj).getType().getName());
  }
 else {
    Mirror mr=Mirror.me(obj.getClass());
    if (mr.isEnum()) {
      string2Json(((Enum)obj).name());
    }
 else     if (mr.isNumber() || mr.isBoolean() || mr.isChar()) {
      writer.append(obj.toString());
    }
 else     if (mr.isStringLike()) {
      string2Json(obj.toString());
    }
 else     if (mr.isDateTimeLike()) {
      string2Json(format.getCastors().castToString(obj));
    }
 else     if (memo.containsKey(obj)) {
      writer.append(""String_Node_Str"");
    }
 else {
      memo.put(obj,null);
      if (obj instanceof Map)       map2Json((Map)obj);
 else       if (obj instanceof Collection)       coll2Json((Collection)obj);
 else       if (obj.getClass().isArray())       array2Json(obj);
 else {
        pojo2Json(obj);
      }
      memo.remove(obj);
    }
  }
}","@SuppressWarnings({""String_Node_Str""}) public void render(Object obj) throws IOException {
  if (null == obj) {
    writer.write(""String_Node_Str"");
  }
 else   if (obj instanceof Class) {
    string2Json(((Class<?>)obj).getName());
  }
 else   if (obj instanceof Mirror) {
    string2Json(((Mirror<?>)obj).getType().getName());
  }
 else {
    Mirror mr=Mirror.me(obj.getClass());
    if (mr.isEnum()) {
      string2Json(((Enum)obj).name());
    }
 else     if (mr.isNumber() || mr.isBoolean()) {
      writer.append(obj.toString());
    }
 else     if (mr.isStringLike() || mr.isChar()) {
      string2Json(obj.toString());
    }
 else     if (mr.isDateTimeLike()) {
      string2Json(format.getCastors().castToString(obj));
    }
 else     if (memo.containsKey(obj)) {
      writer.append(""String_Node_Str"");
    }
 else {
      memo.put(obj,null);
      if (obj instanceof Map)       map2Json((Map)obj);
 else       if (obj instanceof Collection)       coll2Json((Collection)obj);
 else       if (obj.getClass().isArray())       array2Json(obj);
 else {
        pojo2Json(obj);
      }
      memo.remove(obj);
    }
  }
}"
43405,"public ElValue isNEQ(ElValue ta){
  throw new ElException(""String_Node_Str"",getClass().getSimpleName(),""String_Node_Str"");
}","public ElValue isNEQ(ElValue ta){
  if (obj != ta.get())   return El.TRUE;
  return El.FALSE;
}"
43406,"public ElValue isEquals(ElValue ta){
  throw new ElException(""String_Node_Str"",getClass().getSimpleName(),""String_Node_Str"");
}","public ElValue isEquals(ElValue ta){
  if (obj == ta.get())   return El.TRUE;
  return El.FALSE;
}"
43407,"@SuppressWarnings(""String_Node_Str"") public OptSymbolLoader(){
  root=new OptNode();
  List<Class<?>> optTypes=Scans.me().scanPackage(AbstractOperator.class);
  for (  Class<?> optType : optTypes) {
    if (!Modifier.isAbstract(optType.getModifiers()) && ElOperator.class.isAssignableFrom(optType) && null == optType.getAnnotation(OptHidden.class)) {
      Class<? extends ElOperator> theType=(Class<? extends ElOperator>)optType;
      ElOperator optObj=El.opt(theType);
      char[] cs=optObj.getString().toCharArray();
      OptNode on=root;
      for (      char c : cs) {
        on=on.addNode(c);
      }
      if (on.getOperator() != null) {
        throw Lang.makeThrow(""String_Node_Str"",on.getOperator().getClass().getName(),optType.getName());
      }
      on.setOperator(optObj);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public OptSymbolLoader(){
  root=new OptNode();
  if (optTypes.size() == 0) {
synchronized (optTypes) {
      if (optTypes.size() == 0) {
        List<Class<?>> optTypes=Scans.me().scanPackage(AbstractOperator.class);
        for (        Class<?> optType : optTypes) {
          if (!Modifier.isAbstract(optType.getModifiers()) && ElOperator.class.isAssignableFrom(optType) && null == optType.getAnnotation(OptHidden.class)) {
            OptSymbolLoader.optTypes.add(optType);
          }
        }
      }
    }
  }
  for (  Class<?> optType : optTypes) {
    Class<? extends ElOperator> theType=(Class<? extends ElOperator>)optType;
    ElOperator optObj=El.opt(theType);
    char[] cs=optObj.getString().toCharArray();
    OptNode on=root;
    for (    char c : cs) {
      on=on.addNode(c);
    }
    if (on.getOperator() != null) {
      throw Lang.makeThrow(""String_Node_Str"",on.getOperator().getClass().getName(),optType.getName());
    }
    on.setOperator(optObj);
  }
}"
43408,"@SuppressWarnings(""String_Node_Str"") private <T>T parseArray(Mirror<T> me,ParameterizedType type) throws Exception {
  Type tt=null;
  boolean reurnAsList=true;
  List list=null;
  if (null == me) {
    list=new LinkedList();
  }
 else   if (me.getType().isArray()) {
    list=new LinkedList();
    reurnAsList=false;
    tt=me.getType().getComponentType();
  }
 else   if (List.class.isAssignableFrom(me.getType())) {
    reurnAsList=true;
    if (me.is(List.class))     list=new LinkedList();
 else     list=(List)me.born();
    tt=type.getActualTypeArguments()[0];
  }
 else {
    throw makeError(String.format(""String_Node_Str"",me.getType().getName()));
  }
  nextChar();
  skipCommentsAndBlank();
  while (cursor != -1 && cursor != ']') {
    Object o=parseFromCurrentLocation(tt);
    list.add(o);
    skipCommentsAndBlank();
    if (cursor == ']')     break;
    if (cursor != ',')     throw makeError(""String_Node_Str"");
    nextChar();
    skipCommentsAndBlank();
  }
  nextChar();
  if (reurnAsList)   return (T)list;
  Object ary=Array.newInstance((Class<?>)tt,list.size());
  int i=0;
  for (Iterator it=list.iterator(); it.hasNext(); )   Array.set(ary,i++,Castors.me().castTo(it.next(),(Class<?>)tt));
  return (T)ary;
}","@SuppressWarnings(""String_Node_Str"") private <T>T parseArray(Mirror<T> me,ParameterizedType type) throws Exception {
  Type tt=null;
  boolean reurnAsList=true;
  List list=null;
  if (null == me) {
    list=new LinkedList();
  }
 else   if (me.getType().isArray()) {
    list=new LinkedList();
    reurnAsList=false;
    tt=me.getType().getComponentType();
  }
 else   if (List.class.isAssignableFrom(me.getType())) {
    reurnAsList=true;
    if (me.is(List.class))     list=new LinkedList();
 else     list=(List)me.born();
    if (type != null && type.getActualTypeArguments() != null)     tt=type.getActualTypeArguments()[0];
  }
 else {
    throw makeError(String.format(""String_Node_Str"",me.getType().getName()));
  }
  nextChar();
  skipCommentsAndBlank();
  while (cursor != -1 && cursor != ']') {
    Object o=parseFromCurrentLocation(tt);
    list.add(o);
    skipCommentsAndBlank();
    if (cursor == ']')     break;
    if (cursor != ',')     throw makeError(""String_Node_Str"");
    nextChar();
    skipCommentsAndBlank();
  }
  nextChar();
  if (reurnAsList)   return (T)list;
  Object ary=Array.newInstance((Class<?>)tt,list.size());
  int i=0;
  for (Iterator it=list.iterator(); it.hasNext(); )   Array.set(ary,i++,Castors.me().castTo(it.next(),(Class<?>)tt));
  return (T)ary;
}"
43409,"public void rollback() throws SQLException {
  if (null == sp)   conn.rollback();
 else   conn.rollback(sp);
}","public void rollback() throws SQLException {
  if (null != sp)   conn.rollback(sp);
}"
43410,"@Override public Response send() throws HttpException {
  try {
    String boundary=""String_Node_Str"";
    openConnection();
    setupRequestHeader();
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + boundary);
    setupDoInputOutputFlag();
    Map<String,?> params=request.getParams();
    if (null != params && params.size() > 0) {
      DataOutputStream outs=new DataOutputStream(conn.getOutputStream());
      for (      Entry<String,?> entry : params.entrySet()) {
        outs.writeBytes(""String_Node_Str"" + boundary + SEPARATOR);
        String key=entry.getKey();
        File f=new File(entry.getKey());
        if (f.exists()) {
          outs.writeBytes(""String_Node_Str"" + key + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
          outs.writeBytes(""String_Node_Str"");
          InputStream is=new FileInputStream(f);
          byte[] buffer=new byte[is.available()];
          while (true) {
synchronized (buffer) {
              int amountRead=is.read(buffer);
              if (amountRead == -1) {
                break;
              }
              outs.write(buffer,0,amountRead);
              outs.writeBytes(""String_Node_Str"");
            }
          }
          Streams.safeClose(is);
        }
 else {
          outs.writeBytes(""String_Node_Str"" + key + ""String_Node_Str"");
          outs.writeBytes(entry.getValue() + ""String_Node_Str"");
        }
      }
      outs.writeBytes(""String_Node_Str"" + boundary + ""String_Node_Str""+ SEPARATOR);
      Streams.safeFlush(outs);
      Streams.safeClose(outs);
    }
    return createResponse(getResponseHeader());
  }
 catch (  IOException e) {
    throw new HttpException(request.getUrl().toString(),e);
  }
}","@Override public Response send() throws HttpException {
  try {
    String boundary=""String_Node_Str"";
    openConnection();
    setupRequestHeader();
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + boundary);
    setupDoInputOutputFlag();
    Map<String,Object> params=request.getParams();
    if (null != params && params.size() > 0) {
      DataOutputStream outs=new DataOutputStream(conn.getOutputStream());
      for (      Entry<String,?> entry : params.entrySet()) {
        outs.writeBytes(""String_Node_Str"" + boundary + SEPARATOR);
        String key=entry.getKey();
        File f=null;
        if (entry.getValue() instanceof File)         f=(File)entry.getValue();
 else         if (entry.getValue() instanceof String)         f=Files.findFile(entry.getValue().toString());
        if (f != null && f.exists()) {
          outs.writeBytes(""String_Node_Str"" + key + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
          outs.writeBytes(""String_Node_Str"");
          if (f.length() == 0)           continue;
          InputStream is=new FileInputStream(f);
          byte[] buffer=new byte[is.available()];
          while (true) {
            int amountRead=is.read(buffer);
            if (amountRead == -1) {
              break;
            }
            outs.write(buffer,0,amountRead);
            outs.writeBytes(""String_Node_Str"");
          }
          Streams.safeClose(is);
        }
 else {
          outs.writeBytes(""String_Node_Str"" + key + ""String_Node_Str"");
          outs.writeBytes(entry.getValue() + ""String_Node_Str"");
        }
      }
      outs.writeBytes(""String_Node_Str"" + boundary + ""String_Node_Str""+ SEPARATOR);
      Streams.safeFlush(outs);
      Streams.safeClose(outs);
    }
    return createResponse(getResponseHeader());
  }
 catch (  IOException e) {
    throw new HttpException(request.getUrl().toString(),e);
  }
}"
43411,"public Object[] adapt(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  Object[] args=new Object[injs.length];
  int len=Math.min(args.length,null == pathArgs ? 0 : pathArgs.length);
  int i=0;
  for (; i < len; i++) {
    args[i]=injs[i].get(sc,req,resp,null == pathArgs ? null : pathArgs[i]);
  }
  Class<?>[] argTypes=method.getParameterTypes();
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(sc,req,resp,null);
    if (args[i] == null && argTypes[i].isPrimitive()) {
      args[i]=Lang.getPrimitiveDefaultValue(argTypes[i]);
    }
  }
  return args;
}","public Object[] adapt(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  Object[] args=new Object[injs.length];
  int len=Math.min(args.length,null == pathArgs ? 0 : pathArgs.length);
  int i=0;
  for (; i < len; i++) {
    args[i]=injs[i].get(sc,req,resp,null == pathArgs ? null : pathArgs[i]);
  }
  Class<?>[] argTypes=method.getParameterTypes();
  Object obj=getReferObject(sc,req,resp,pathArgs);
  for (; i < injs.length; i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ injs[i].getClass());
    args[i]=injs[i].get(sc,req,resp,obj);
    if (args[i] == null && argTypes[i].isPrimitive()) {
      args[i]=Lang.getPrimitiveDefaultValue(argTypes[i]);
    }
  }
  return args;
}"
43412,"protected ParamInjector evalInjector(Class<?> type,Param param){
  if (Map.class.isAssignableFrom(type))   return new MapSelfInjector();
  if (null == param)   return null;
  String paramName=param.value();
  if (File.class.isAssignableFrom(type))   return new FileInjector(paramName);
  if (FieldMeta.class.isAssignableFrom(type))   return new FileMetaInjector(paramName);
  if (TempFile.class.isAssignableFrom(type))   return new TempFileInjector(paramName);
  if (InputStream.class.isAssignableFrom(type))   return new InputStreamInjector(paramName);
  if (Reader.class.isAssignableFrom(type))   return new ReaderInjector(paramName);
  if (List.class.isAssignableFrom(type))   return new MapListInjector(paramName);
  if (type.isArray())   return new MapArrayInjector(type.getComponentType(),paramName);
  if (""String_Node_Str"".equals(paramName)) {
    if (type.isAssignableFrom(Map.class))     return new MapPairInjector();
    return new ObjectPairInjector(null,type);
  }
 else   if (paramName.startsWith(""String_Node_Str"") && paramName.length() > 2) {
    return new ObjectPairInjector(null,type);
  }
  return new MapItemInjector(paramName,type);
}","protected ParamInjector evalInjector(Class<?> type,Param param){
  if (Map.class.isAssignableFrom(type))   return new MapSelfInjector();
  if (null == param)   return super.evalInjector(type,param);
  String paramName=param.value();
  if (File.class.isAssignableFrom(type))   return new FileInjector(paramName);
  if (FieldMeta.class.isAssignableFrom(type))   return new FileMetaInjector(paramName);
  if (TempFile.class.isAssignableFrom(type))   return new TempFileInjector(paramName);
  if (InputStream.class.isAssignableFrom(type))   return new InputStreamInjector(paramName);
  if (Reader.class.isAssignableFrom(type))   return new ReaderInjector(paramName);
  if (List.class.isAssignableFrom(type))   return new MapListInjector(paramName);
  return super.evalInjector(type,param);
}"
43413,"@Test public void test_base(){
  resp=get(""String_Node_Str"");
  assertNotNull(resp);
  assertEquals(200,resp.getStatus());
  assertEquals(getContextPath(),resp.getContent());
}","@Test public void test_base(){
  get(""String_Node_Str"");
  assertNotNull(resp);
  assertEquals(200,resp.getStatus());
  assertEquals(getContextPath(),resp.getContent());
}"
43414,"public Response post(String path,Map<String,Object> params){
  resp=Sender.create(Request.create(""String_Node_Str"" + getContextPath() + path,METHOD.POST,params,null)).send();
  assertNotNull(resp);
  return resp;
}","public Response post(String path,Map<String,Object> params){
  resp=Sender.create(Request.create(getBaseURL() + path,METHOD.POST,params,null)).send();
  assertNotNull(resp);
  return resp;
}"
43415,"public Response get(String path){
  resp=Http.get(""String_Node_Str"" + getContextPath() + path);
  assertNotNull(resp);
  return resp;
}","public Response get(String path){
  resp=Http.get(getBaseURL() + path);
  assertNotNull(resp);
  return resp;
}"
43416,"protected void parseArgs(Element beanElement,IocObject iocObject) throws Throwable {
  NodeList argsNodeList=beanElement.getElementsByTagName(TAG_ARGS);
  if (argsNodeList.getLength() > 0) {
    Element argsElement=(Element)argsNodeList.item(0);
    NodeList argNodeList=argsElement.getChildNodes();
    for (int i=0; i < argNodeList.getLength(); i++) {
      if (argNodeList.item(i) instanceof Element)       iocObject.addArg(parseX((Element)argNodeList.item(i)));
    }
  }
}","protected void parseArgs(Element beanElement,IocObject iocObject) throws Throwable {
  List<Element> list=getChildNodesByTagName(beanElement,TAG_ARGS);
  if (list.size() > 0) {
    Element argsElement=list.get(0);
    NodeList argNodeList=argsElement.getChildNodes();
    for (int i=0; i < argNodeList.getLength(); i++) {
      if (argNodeList.item(i) instanceof Element)       iocObject.addArg(parseX((Element)argNodeList.item(i)));
    }
  }
}"
43417,"protected void parseEvents(Element beanElement,IocObject iocObject){
  NodeList eventsNodeList=beanElement.getElementsByTagName(""String_Node_Str"");
  if (eventsNodeList.getLength() > 0) {
    Element eventsElement=(Element)eventsNodeList.item(0);
    IocEventSet iocEventSet=new IocEventSet();
    NodeList fetchNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (fetchNodeList.getLength() > 0)     iocEventSet.setFetch(((Element)fetchNodeList.item(0)).getTextContent());
    NodeList createNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (createNodeList.getLength() > 0)     iocEventSet.setCreate(((Element)createNodeList.item(0)).getTextContent());
    NodeList deposeNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (deposeNodeList.getLength() > 0)     iocEventSet.setDepose(((Element)deposeNodeList.item(0)).getTextContent());
    if (iocEventSet.getCreate() == null)     if (iocEventSet.getDepose() == null)     if (iocEventSet.getFetch() == null)     return;
    iocObject.setEvents(iocEventSet);
  }
}","protected void parseEvents(Element beanElement,IocObject iocObject){
  List<Element> elist=getChildNodesByTagName(beanElement,""String_Node_Str"");
  if (elist.size() > 0) {
    Element eventsElement=elist.get(0);
    IocEventSet iocEventSet=new IocEventSet();
    elist=getChildNodesByTagName(eventsElement,""String_Node_Str"");
    if (elist.size() > 0)     iocEventSet.setFetch(elist.get(0).getTextContent());
    elist=getChildNodesByTagName(eventsElement,""String_Node_Str"");
    if (elist.size() > 0)     iocEventSet.setCreate(elist.get(0).getTextContent());
    elist=getChildNodesByTagName(eventsElement,""String_Node_Str"");
    if (elist.size() > 0)     iocEventSet.setDepose(elist.get(0).getTextContent());
    if (iocEventSet.getCreate() == null)     if (iocEventSet.getDepose() == null)     if (iocEventSet.getFetch() == null)     return;
    iocObject.setEvents(iocEventSet);
  }
}"
43418,"protected Map<String,?> paserMap(Element element){
  Map<String,Object> map=new HashMap<String,Object>();
  if (element.hasChildNodes()) {
    NodeList nodeList=element.getElementsByTagName(ITEM_TAG);
    for (int i=0; i < nodeList.getLength(); i++) {
      if (nodeList.item(i) instanceof Element) {
        Element elementItem=(Element)nodeList.item(i);
        String key=elementItem.getAttribute(""String_Node_Str"");
        if (map.containsKey(key))         throw new IllegalArgumentException(""String_Node_Str"");
        NodeList list=elementItem.getChildNodes();
        for (int j=0; j < list.getLength(); j++) {
          if (list.item(j) instanceof Element) {
            map.put(key,list.item(j).getTextContent());
            break;
          }
        }
        if (!map.containsKey(key))         map.put(key,null);
      }
    }
  }
  return map;
}","protected Map<String,?> paserMap(Element element) throws Throwable {
  Map<String,Object> map=new HashMap<String,Object>();
  if (element.hasChildNodes()) {
    List<Element> elist=getChildNodesByTagName(element,ITEM_TAG);
    for (    Element elementItem : elist) {
      String key=elementItem.getAttribute(""String_Node_Str"");
      if (map.containsKey(key))       throw new IllegalArgumentException(""String_Node_Str"");
      NodeList list=elementItem.getChildNodes();
      for (int j=0; j < list.getLength(); j++) {
        if (list.item(j) instanceof Element) {
          map.put(key,parseX((Element)list.item(j)));
          break;
        }
      }
      if (!map.containsKey(key))       map.put(key,null);
    }
  }
  return map;
}"
43419,"protected void parseFields(Element beanElement,IocObject iocObject) throws Throwable {
  NodeList fieldNodeList=beanElement.getElementsByTagName(TAG_FIELD);
  if (fieldNodeList.getLength() > 0) {
    int len=fieldNodeList.getLength();
    for (int i=0; i < len; i++) {
      Element fieldElement=(Element)fieldNodeList.item(i);
      IocField iocField=new IocField();
      iocField.setName(fieldElement.getAttribute(""String_Node_Str""));
      if (fieldElement.hasChildNodes()) {
        NodeList nodeList=fieldElement.getChildNodes();
        for (int j=0; j < nodeList.getLength(); j++) {
          if (nodeList.item(j) instanceof Element) {
            iocField.setValue(parseX((Element)nodeList.item(j)));
            break;
          }
        }
      }
      iocObject.addField(iocField);
    }
  }
}","protected void parseFields(Element beanElement,IocObject iocObject) throws Throwable {
  List<Element> list=getChildNodesByTagName(beanElement,TAG_FIELD);
  for (  Element fieldElement : list) {
    IocField iocField=new IocField();
    iocField.setName(fieldElement.getAttribute(""String_Node_Str""));
    if (fieldElement.hasChildNodes()) {
      NodeList nodeList=fieldElement.getChildNodes();
      for (int j=0; j < nodeList.getLength(); j++) {
        if (nodeList.item(j) instanceof Element) {
          iocField.setValue(parseX((Element)nodeList.item(j)));
          break;
        }
      }
    }
    iocObject.addField(iocField);
  }
}"
43420,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof Pair<?>)   if (Strings.equals(((Pair<?>)obj).name,name))   Lang.equals(((Pair<?>)obj).value,value);
  return false;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof Pair<?>)   if (Strings.equals(((Pair<?>)obj).name,name))   return Lang.equals(((Pair<?>)obj).value,value);
  return false;
}"
43421,"public static Pair<String> create(String s){
  String[] ss=Strings.splitIgnoreBlank(s,""String_Node_Str"");
  String name=null;
  String value=null;
  String pattern=PTN_3;
  if (null != ss)   if (ss.length == 1) {
    name=ss[0];
  }
 else   if (ss.length == 2) {
    name=ss[0];
    if (ss[1].length() > 0) {
      if (ss[1].charAt(0) == '""') {
        value=ss[1].substring(1,ss[1].length() - 2);
        pattern=PTN_3;
      }
 else       if (ss[1].charAt(0) == '\'') {
        value=ss[1].substring(1,ss[1].length() - 2);
        pattern=PTN_2;
      }
 else {
        value=ss[1];
        pattern=PTN_1;
      }
    }
  }
  Pair<String> re=new Pair<String>(name,value);
  re.pattern=pattern;
  return re;
}","public static Pair<String> create(String s){
  String[] ss=Strings.splitIgnoreBlank(s,""String_Node_Str"");
  String name=null;
  String value=null;
  String pattern=PTN_3;
  if (null != ss)   if (ss.length == 1) {
    name=ss[0];
  }
 else   if (ss.length == 2) {
    name=ss[0];
    if (ss[1].length() > 0) {
      if (ss[1].charAt(0) == '""') {
        value=ss[1].substring(1,ss[1].length() - 1);
        pattern=PTN_3;
      }
 else       if (ss[1].charAt(0) == '\'') {
        value=ss[1].substring(1,ss[1].length() - 1);
        pattern=PTN_2;
      }
 else {
        value=ss[1];
        pattern=PTN_1;
      }
    }
  }
  Pair<String> re=new Pair<String>(name,value);
  re.pattern=pattern;
  return re;
}"
43422,"public Sql insert(Entity<?> en,Object obj){
  StringBuilder fields=new StringBuilder();
  StringBuilder values=new StringBuilder();
  FieldMatcher fm=FieldFilter.get(en.getType());
  Map<String,Object> map=new HashMap<String,Object>();
  for (Iterator<EntityField> it=en.fields().iterator(); it.hasNext(); ) {
    EntityField ef=it.next();
    String fn=ef.getName();
    if (ef.isSerial() || ef.isReadonly())     continue;
    Object value=ef.getValue(obj);
    if (null != fm) {
      if (fm.isIgnoreNull() && null == value)       continue;
 else       if (!fm.match(fn))       continue;
    }
 else     if (null == value) {
      if (ef.hasDefaultValue())       value=ef.getDefaultValue(obj);
 else       continue;
    }
    fields.append(',').append(ef.getColumnName());
    values.append(""String_Node_Str"").append(fn);
    map.put(fn,value);
  }
  fields.deleteCharAt(0);
  values.deleteCharAt(0);
  Sql sql=Sqls.create(format(""String_Node_Str"",en.getTableName(),fields,values)).setEntity(en);
  sql.params().putAll(map);
  return sql;
}","public Sql insert(Entity<?> en,Object obj){
  StringBuilder fields=new StringBuilder();
  StringBuilder values=new StringBuilder();
  FieldMatcher fm=FieldFilter.get(en.getType());
  Map<String,Object> map=new HashMap<String,Object>();
  for (Iterator<EntityField> it=en.fields().iterator(); it.hasNext(); ) {
    EntityField ef=it.next();
    String fn=ef.getName();
    if (ef.isSerial() || ef.isReadonly())     continue;
    Object value=ef.getValue(obj);
    if (null != fm) {
      if (fm.isIgnoreNull() && null == value)       continue;
 else       if (!fm.match(fn))       continue;
    }
 else     if (null == value) {
      if (ef.hasDefaultValue())       value=ef.getDefaultValue(obj);
 else       continue;
    }
    fields.append(',').append(ef.getColumnName());
    values.append(""String_Node_Str"").append(fn);
    map.put(fn,value);
  }
  if (fields.length() == 0)   throw Lang.makeThrow(DaoException.class,""String_Node_Str"",en.getTableName());
  fields.deleteCharAt(0);
  values.deleteCharAt(0);
  Sql sql=Sqls.create(format(""String_Node_Str"",en.getTableName(),fields,values)).setEntity(en);
  sql.params().putAll(map);
  return sql;
}"
43423,"/** 
 * 为一次 HTTP 请求，创建一个可以被表达式引擎接受的上下文对象
 * @param req HTTP 请求对象
 * @param obj 入口函数的返回值
 * @return 上下文对象
 */
@SuppressWarnings(""String_Node_Str"") public static Context createContext(HttpServletRequest req,Object obj){
  Context context=Lang.context();
  Object servletContext=req.getSession().getServletContext().getAttribute(Loading.CONTEXT_NAME);
  if (servletContext != null) {
    context.putAll((Context)servletContext);
  }
  for (  Object o : req.getParameterMap().keySet()) {
    String key=(String)o;
    context.set(key,req.getParameter(key));
  }
  for (Enumeration<String> en=req.getAttributeNames(); en.hasMoreElements(); ) {
    String tem=en.nextElement();
    context.set(tem,req.getAttribute(tem));
  }
  if (null != obj)   context.set(ViewProcessor.DEFAULT_ATTRIBUTE,obj);
  return context;
}","/** 
 * 为一次 HTTP 请求，创建一个可以被表达式引擎接受的上下文对象
 * @param req HTTP 请求对象
 * @param obj 入口函数的返回值
 * @return 上下文对象
 */
@SuppressWarnings(""String_Node_Str"") public static Context createContext(HttpServletRequest req,Object obj){
  Context context=Lang.context();
  Object servletContext=req.getSession().getServletContext().getAttribute(Loading.CONTEXT_NAME);
  if (servletContext != null) {
    context.putAll((Context)servletContext);
  }
  Map<String,String> p=new HashMap<String,String>();
  for (  Object o : req.getParameterMap().keySet()) {
    String key=(String)o;
    context.set(key,req.getParameter(key));
    p.put(key,req.getParameter(key));
  }
  context.set(""String_Node_Str"",p);
  for (Enumeration<String> en=req.getAttributeNames(); en.hasMoreElements(); ) {
    String tem=en.nextElement();
    context.set(tem,req.getAttribute(tem));
  }
  if (null != obj)   context.set(ViewProcessor.DEFAULT_ATTRIBUTE,obj);
  return context;
}"
43424,"public RequestDispatcher getRequestDispatcher(String arg0){
  throw Lang.noImplement();
}","public RequestDispatcher getRequestDispatcher(String dest){
  return new MockRequestDispatcher(dispatcherTarget,dest);
}"
43425,"public MockHttpServletRequest(){
  this.headers=new HashMap<String,String>();
}","public MockHttpServletRequest(){
  this.headers=new HashMap<String,String>();
  this.dispatcherTarget=new String[1];
}"
43426,"protected String evalPath(HttpServletRequest req,Object obj){
  Context context=Lang.context();
  Context expContext=createContext(req,obj);
  for (  Entry<String,ElObj> en : exps.entrySet())   context.set(en.getKey(),en.getValue().eval(expContext).getString());
  return this.dest.render(context).toString();
}","protected String evalPath(HttpServletRequest req,Object obj){
  if (null == dest)   return null;
  Context context=Lang.context();
  Context expContext=createContext(req,obj);
  for (  Entry<String,ElObj> en : exps.entrySet())   context.set(en.getKey(),en.getValue().eval(expContext).getString());
  return Strings.trim(this.dest.render(context).toString());
}"
43427,"public AbstractPathView(String dest){
  this.dest=new CharSegment(Strings.trim(dest));
  this.exps=new HashMap<String,ElObj>();
  for (  String key : this.dest.keys()) {
    this.exps.put(key,El.compile(key));
  }
}","public AbstractPathView(String dest){
  if (null != dest) {
    this.dest=new CharSegment(Strings.trim(dest));
    this.exps=new HashMap<String,ElObj>();
    for (    String key : this.dest.keys()) {
      this.exps.put(key,El.compile(key));
    }
  }
}"
43428,"protected String getExt(){
  return ""String_Node_Str"";
}","/** 
 * 子类可以覆盖这个方法，给出自己特殊的后缀
 * @return 后缀
 */
protected String getExt(){
  return ""String_Node_Str"";
}"
43429,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  if (Strings.isBlank(path)) {
    path=Mvcs.getRequestPath(req);
    path=""String_Node_Str"" + Files.renameSuffix(path,getExt());
  }
  RequestDispatcher rd=req.getRequestDispatcher(path);
  if (rd == null)   throw Lang.makeThrow(""String_Node_Str"",path);
  rd.forward(req,resp);
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  String path=evalPath(req,obj);
  if (Strings.isBlank(path)) {
    path=Mvcs.getRequestPath(req);
    path=""String_Node_Str"" + (path.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + Files.renameSuffix(path,getExt());
  }
 else   if (path.charAt(0) == '/') {
    String ext=getExt();
    if (!path.toLowerCase().endsWith(ext))     path+=ext;
  }
 else {
    path=""String_Node_Str"" + path.replace('.','/') + getExt();
  }
  RequestDispatcher rd=req.getRequestDispatcher(path);
  if (rd == null)   throw Lang.makeThrow(""String_Node_Str"",path);
  rd.forward(req,resp);
}"
43430,"public ForwardView(String dest){
  super(dest);
}","public ForwardView(String dest){
  super(dest == null ? null : dest.replace('\\','/'));
}"
43431,"/** 
 * 获取一个Type类型实际对应的Class
 */
@SuppressWarnings(""String_Node_Str"") public static Class<?> getTypeClass(Type type){
  Class<?> clazz=null;
  if (type instanceof ParameterizedType) {
    ParameterizedType pt=(ParameterizedType)type;
    clazz=(Class<?>)pt.getRawType();
  }
 else   if (type instanceof Class<?>) {
    clazz=(Class<?>)type;
  }
 else   if (type instanceof GenericArrayType) {
    GenericArrayType gat=(GenericArrayType)type;
    return getTypeClass(gat.getGenericComponentType());
  }
 else   if (type instanceof TypeVariable) {
    TypeVariable tv=(TypeVariable)type;
    Type[] ts=tv.getBounds();
    if (ts != null && ts.length > 0)     return getTypeClass(ts[0]);
  }
 else   if (type instanceof WildcardType) {
    WildcardType wt=(WildcardType)type;
    Type[] t_low=wt.getLowerBounds();
    if (t_low.length > 0)     return getTypeClass(t_low[0]);
    Type[] t_up=wt.getUpperBounds();
    return getTypeClass(t_up[0]);
  }
  return clazz;
}","/** 
 * 获取一个Type类型实际对应的Class
 */
@SuppressWarnings(""String_Node_Str"") public static Class<?> getTypeClass(Type type){
  Class<?> clazz=null;
  if (type instanceof ParameterizedType) {
    ParameterizedType pt=(ParameterizedType)type;
    clazz=(Class<?>)pt.getRawType();
  }
 else   if (type instanceof Class<?>) {
    clazz=(Class<?>)type;
  }
 else   if (type instanceof GenericArrayType) {
    GenericArrayType gat=(GenericArrayType)type;
    Class<?> typeClass=getTypeClass(gat.getGenericComponentType());
    return Array.newInstance(typeClass,0).getClass();
  }
 else   if (type instanceof TypeVariable) {
    TypeVariable tv=(TypeVariable)type;
    Type[] ts=tv.getBounds();
    if (ts != null && ts.length > 0)     return getTypeClass(ts[0]);
  }
 else   if (type instanceof WildcardType) {
    WildcardType wt=(WildcardType)type;
    Type[] t_low=wt.getLowerBounds();
    if (t_low.length > 0)     return getTypeClass(t_low[0]);
    Type[] t_up=wt.getUpperBounds();
    return getTypeClass(t_up[0]);
  }
  return clazz;
}"
43432,"@Override public void init(NutConfig config,ActionInfo ai) throws Throwable {
  method=ai.getMethod();
  moduleType=ai.getModuleType();
  if (!Strings.isBlank(ai.getInjectName()))   injectName=ai.getInjectName();
}","@Override public void init(NutConfig config,ActionInfo ai) throws Throwable {
  method=ai.getMethod();
  moduleType=ai.getModuleType();
  if (Strings.isBlank(ai.getInjectName())) {
    moduleObj=Mirror.me(moduleType).born();
  }
 else {
    injectName=ai.getInjectName();
  }
}"
43433,"public void process(ActionContext ac) throws Throwable {
  RequestIocContext reqContext=null;
  try {
    if (null == injectName) {
      ac.setModule(Mirror.me(moduleType).born());
    }
 else {
      Ioc ioc=ac.getIoc();
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",injectName);
      Object obj;
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(ac.getRequest());
        SessionIocContext sessionContext=new SessionIocContext(ac.getRequest().getSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        obj=((Ioc2)ioc).get(moduleType,injectName,myContext);
      }
 else       obj=ioc.get(moduleType,injectName);
      ac.setModule(obj);
    }
    ac.setMethod(method);
    doNext(ac);
  }
  finally {
    if (reqContext != null)     try {
      reqContext.depose();
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","public void process(ActionContext ac) throws Throwable {
  RequestIocContext reqContext=null;
  try {
    if (null != moduleObj) {
      ac.setModule(moduleObj);
    }
 else {
      Ioc ioc=ac.getIoc();
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",injectName);
      Object obj;
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(ac.getRequest());
        SessionIocContext sessionContext=new SessionIocContext(ac.getRequest().getSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        obj=((Ioc2)ioc).get(moduleType,injectName,myContext);
      }
 else       obj=ioc.get(moduleType,injectName);
      ac.setModule(obj);
    }
    ac.setMethod(method);
    doNext(ac);
  }
  finally {
    if (reqContext != null)     try {
      reqContext.depose();
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}"
43434,"public void process(ActionContext ac) throws Throwable {
  Object re=ac.getMethodReturn();
  Object err=ac.getError();
  if (re != null && re instanceof View) {
    if (re instanceof ViewWrapper)     putRequestAttribute(ac.getRequest(),((ViewWrapper)re).getData());
    ((View)re).render(ac.getRequest(),ac.getResponse(),err);
  }
 else {
    putRequestAttribute(ac.getRequest(),re);
    view.render(ac.getRequest(),ac.getResponse(),null == re ? err : re);
  }
  doNext(ac);
}","public void process(ActionContext ac) throws Throwable {
  Object re=ac.getMethodReturn();
  Object err=ac.getError();
  if (re != null && re instanceof View) {
    if (re instanceof ViewWrapper)     putRequestAttribute(ac.getRequest(),((ViewWrapper)re).getData());
    ((View)re).render(ac.getRequest(),ac.getResponse(),err);
  }
 else {
    putRequestAttribute(ac.getRequest(),null == re ? err : re);
    view.render(ac.getRequest(),ac.getResponse(),null == re ? err : re);
  }
  doNext(ac);
}"
43435,"/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
private Object parseFromCurrentLocation(Type type) throws Exception {
  Class<?> clazz=null;
  ParameterizedType pt=null;
  if (type instanceof Class) {
    clazz=(Class<?>)type;
  }
  if (type instanceof ParameterizedType) {
    pt=(ParameterizedType)type;
    clazz=(Class<?>)pt.getRawType();
  }
  Mirror<?> me=Mirror.me(clazz);
switch (cursor) {
case -1:
    return null;
case '[':
  return parseArray(me,pt);
case '{':
return parseObj(me,pt);
case 'u':
return parseUndefined();
case 'n':
return parseNull();
case '\'':
case '""':
return parseString(me);
case 't':
return parseTrue(me);
case 'f':
return parseFalse(me);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
return parseNumber(me);
case 'v':
while (-1 != nextChar()) if ('{' == cursor) return parseFromCurrentLocation(type);
default :
throw makeError(""String_Node_Str"");
}
}","/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
private Object parseFromCurrentLocation(Type type) throws Exception {
  Class<?> clazz=Lang.getTypeClass(type);
  ParameterizedType pt=null;
  if (type instanceof ParameterizedType) {
    pt=(ParameterizedType)type;
    clazz=(Class<?>)pt.getRawType();
  }
  Mirror<?> me=Mirror.me(clazz);
switch (cursor) {
case -1:
    return null;
case '[':
  return parseArray(me,pt);
case '{':
return parseObj(me,pt);
case 'u':
return parseUndefined();
case 'n':
return parseNull();
case '\'':
case '""':
return parseString(me);
case 't':
return parseTrue(me);
case 'f':
return parseFalse(me);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
return parseNumber(me);
case 'v':
while (-1 != nextChar()) if ('{' == cursor) return parseFromCurrentLocation(type);
default :
throw makeError(""String_Node_Str"");
}
}"
43436,"/** 
 * 获取一个类的某个一个泛型参数
 * @param klass 类
 * @param index 参数下标 （从 0 开始）
 * @return 泛型参数类型
 */
@SuppressWarnings(""String_Node_Str"") public static <T>Class<T> getTypeParam(Class<?> klass,int index){
  Type[] types=getTypeParams(klass);
  if (index >= 0 && index < types.length) {
    Type t=types[index];
    if (t instanceof Class<?>) {
      return (Class<T>)t;
    }
 else     if (t instanceof ParameterizedType) {
      t=((ParameterizedType)t).getRawType();
      return (Class<T>)t;
    }
    throw Lang.makeThrow(""String_Node_Str"",t.toString());
  }
  throw Lang.makeThrow(""String_Node_Str"",index,types.length);
}","/** 
 * 获取一个类的某个一个泛型参数
 * @param klass 类
 * @param index 参数下标 （从 0 开始）
 * @return 泛型参数类型
 */
@SuppressWarnings(""String_Node_Str"") public static <T>Class<T> getTypeParam(Class<?> klass,int index){
  Type[] types=getTypeParams(klass);
  if (index >= 0 && index < types.length) {
    Type t=types[index];
    Class<T> clazz=(Class<T>)Lang.getTypeClass(t);
    if (clazz == null)     throw Lang.makeThrow(""String_Node_Str"",t.toString());
    return clazz;
  }
  throw Lang.makeThrow(""String_Node_Str"",index,types.length);
}"
43437,"public Object[] adapt(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  Object[] args=new Object[injs.length];
  int len=Math.min(args.length,null == pathArgs ? 0 : pathArgs.length);
  int i=0;
  for (; i < len; i++) {
    args[i]=injs[i].get(sc,req,resp,null == pathArgs ? null : pathArgs[i]);
  }
  Class<?>[] argTypes=method.getParameterTypes();
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(sc,req,resp,null);
    if (args[i] == null && argTypes[i].isPrimitive()) {
      args[i]=getPrimitiveDefaultValue(argTypes[i]);
    }
  }
  return args;
}","public Object[] adapt(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  Object[] args=new Object[injs.length];
  int len=Math.min(args.length,null == pathArgs ? 0 : pathArgs.length);
  int i=0;
  for (; i < len; i++) {
    args[i]=injs[i].get(sc,req,resp,null == pathArgs ? null : pathArgs[i]);
  }
  Class<?>[] argTypes=method.getParameterTypes();
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(sc,req,resp,null);
    if (args[i] == null && argTypes[i].isPrimitive()) {
      args[i]=Lang.getPrimitiveDefaultValue(argTypes[i]);
    }
  }
  return args;
}"
43438,"public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null == name)   return Json.fromJson(type,refer.toString());
  NutMap map=Json.fromJson(NutMap.class,refer.toString());
  Object theObj=map.get(name);
  if (null == theObj)   return null;
  Class<?> clazz=null;
  if (type instanceof ParameterizedType) {
    clazz=(Class<?>)((ParameterizedType)type).getRawType();
  }
  clazz=(Class<?>)type;
  return Castors.me().castTo(theObj,clazz);
}","public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null == name)   return Json.fromJson(type,refer.toString());
  NutMap map=Json.fromJson(NutMap.class,refer.toString());
  Object theObj=map.get(name);
  if (null == theObj)   return null;
  Class<?> clazz=Lang.getTypeClass(type);
  return Castors.me().castTo(theObj,clazz);
}"
43439,"public ActionChain eval(NutConfig config,ActionInfo ai){
  try {
    List<Processor> list=new ArrayList<Processor>();
    for (    String name : co.getProcessors(ai.getChainName())) {
      Processor processor=getProcessorByName(config,name);
      processor.init(config,ai);
      list.add(processor);
    }
    Processor errorProcessor=getProcessorByName(config,co.getErrorProcessor(ai.getChainName()));
    errorProcessor.init(config,ai);
    return new NutActionChain(list,errorProcessor);
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
}","public ActionChain eval(NutConfig config,ActionInfo ai){
  try {
    List<Processor> list=new ArrayList<Processor>();
    for (    String name : co.getProcessors(ai.getChainName())) {
      Processor processor=getProcessorByName(config,name);
      processor.init(config,ai);
      list.add(processor);
    }
    Processor errorProcessor=getProcessorByName(config,co.getErrorProcessor(ai.getChainName()));
    errorProcessor.init(config,ai);
    ActionChain chain=new NutActionChain(list,errorProcessor);
    return chain;
  }
 catch (  Throwable e) {
    if (logger.isDebugEnabled())     logger.debugf(""String_Node_Str"",ai.getMethod());
    throw Lang.wrapThrow(e);
  }
}"
43440,"public void init(FilterConfig conf) throws ServletException {
  FilterNutConfig config=new FilterNutConfig(conf);
  String skipMode=Strings.sNull(conf.getInitParameter(""String_Node_Str""),""String_Node_Str"").toLowerCase();
  if (!""String_Node_Str"".equals(skipMode)) {
    handler=new ActionHandler(config);
    String regx=Strings.sNull(config.getInitParameter(""String_Node_Str""),IGNORE);
    if (!""String_Node_Str"".equalsIgnoreCase(regx)) {
      ignorePtn=Pattern.compile(regx,Pattern.CASE_INSENSITIVE);
    }
  }
 else   this.skipMode=true;
}","public void init(FilterConfig conf) throws ServletException {
  FilterNutConfig config=new FilterNutConfig(conf);
  String skipMode=Strings.sNull(conf.getInitParameter(""String_Node_Str""),""String_Node_Str"").toLowerCase();
  if (!""String_Node_Str"".equals(skipMode)) {
    handler=new ActionHandler(config);
    String regx=Strings.sNull(config.getInitParameter(""String_Node_Str""),IGNORE);
    if (!""String_Node_Str"".equalsIgnoreCase(regx)) {
      ignorePtn=Pattern.compile(regx,Pattern.CASE_INSENSITIVE);
    }
  }
 else   this.skipMode=true;
  String doNextFilter=Strings.sNull(conf.getInitParameter(""String_Node_Str""),""String_Node_Str"").toLowerCase();
  this.doNextFilter=""String_Node_Str"".equals(doNextFilter);
}"
43441,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  if (!skipMode) {
    RequestPath path=Mvcs.getRequestPathObject((HttpServletRequest)req);
    if (null == ignorePtn || !ignorePtn.matcher(path.getUrl()).find()) {
      if (handler.handle((HttpServletRequest)req,(HttpServletResponse)resp))       return;
    }
  }
 else {
    Mvcs.updateRequestAttributes((HttpServletRequest)req);
  }
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  if (!skipMode) {
    RequestPath path=Mvcs.getRequestPathObject((HttpServletRequest)req);
    if (null == ignorePtn || !ignorePtn.matcher(path.getUrl()).find()) {
      if (handler.handle((HttpServletRequest)req,(HttpServletResponse)resp))       if (!doNextFilter)       return;
    }
  }
  Mvcs.updateRequestAttributes((HttpServletRequest)req);
  chain.doFilter(req,resp);
}"
43442,"@Override public void process(ActionContext ac) throws Throwable {
  super.process(ac);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",ac.getError());
}","@Override public void process(ActionContext ac) throws Throwable {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",ac.getError());
  super.process(ac);
}"
43443,"public List<NutResource> list(final String src,String filter){
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  final List<NutResource> list=new ArrayList<NutResource>();
  Set<String> jars=sc.getResourcePaths(""String_Node_Str"");
  if (jars != null)   for (  String path : jars) {
    if (!path.toLowerCase().endsWith(""String_Node_Str""))     continue;
    list.addAll(scanInJar(checkSrc(src),regex,sc.getRealPath(path)));
  }
  File dir=Files.findFile(src);
  boolean flag=true;
  if (null != dir && dir.exists()) {
    String src2=Disks.getCanonicalPath(src);
    String dirPath=Disks.getCanonicalPath(dir.getAbsolutePath());
    int pos=dirPath.indexOf(src2,dirPath.indexOf(""String_Node_Str"") + 7);
    final String base=pos < 0 ? dirPath : dirPath.substring(0,pos);
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",dir,base);
    List<NutResource> list2=scanInDir(regex,base,dir,true);
    for (    NutResource nutResource : list2) {
      String name=nutResource.getName();
      if (name.indexOf(base) > -1)       nutResource.setName(name.substring(base.length()));
      list.add(nutResource);
    }
    flag=list2.isEmpty();
  }
  if (flag && (!src.startsWith(""String_Node_Str""))) {
    try {
      String base=sc.getRealPath(""String_Node_Str"");
      String path=sc.getRealPath(""String_Node_Str"" + src);
      if (path != null) {
        List<NutResource> list2=scanInDir(regex,base,new File(path),true);
        for (        NutResource nutResource : list2) {
          String name=nutResource.getName();
          if (name.indexOf(base) > -1)           nutResource.setName(name.substring(base.length()));
          list.add(nutResource);
        }
        flag=list2.isEmpty();
      }
    }
 catch (    Throwable e) {
    }
  }
  if (flag && log.isInfoEnabled())   log.infof(""String_Node_Str"",src,sc.getServletContextName());
  return list;
}","public List<NutResource> list(final String src,String filter){
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  final List<NutResource> list=new ArrayList<NutResource>();
  Set<String> jars=sc.getResourcePaths(""String_Node_Str"");
  if (jars != null)   for (  String path : jars) {
    if (!path.toLowerCase().endsWith(""String_Node_Str""))     continue;
    list.addAll(scanInJar(checkSrc(src),regex,sc.getRealPath(path)));
  }
  File dir=Files.findFile(src);
  boolean flag=true;
  if (null != dir && dir.exists()) {
    String src2=Disks.getCanonicalPath(src);
    String dirPath=Disks.getCanonicalPath(dir.getAbsolutePath());
    int pos=dirPath.indexOf(src2,dirPath.indexOf(""String_Node_Str"") + 7);
    final String base=pos < 0 ? dirPath : dirPath.substring(0,pos);
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",dir,base);
    List<NutResource> list2=scanInDir(regex,base,dir,true);
    for (    NutResource nutResource : list2) {
      String name=nutResource.getName();
      if (name.indexOf(base) > -1)       nutResource.setName(name.substring(base.length()));
      list.add(nutResource);
    }
    flag=list2.isEmpty();
  }
  if (flag && (!src.startsWith(""String_Node_Str""))) {
    try {
      String base=sc.getRealPath(""String_Node_Str"");
      String path=sc.getRealPath(""String_Node_Str"" + src);
      if (path != null) {
        List<NutResource> list2=scanInDir(regex,base,new File(path),true);
        for (        NutResource nutResource : list2) {
          String name=nutResource.getName();
          if (name.indexOf(base) > -1)           nutResource.setName(name.substring(base.length()));
          list.add(nutResource);
        }
        flag=list2.isEmpty();
      }
    }
 catch (    Throwable e) {
    }
  }
  if (flag) {
    String classpath=System.getProperties().getProperty(""String_Node_Str"");
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + classpath);
    String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
    for (    String pathZ : paths) {
      if (pathZ.endsWith(""String_Node_Str""))       list.addAll(scanInJar(checkSrc(src),regex,pathZ));
 else       list.addAll(scanInDir(regex,pathZ,new File(pathZ + ""String_Node_Str"" + src),true));
    }
    flag=list.isEmpty();
  }
  if (flag && log.isInfoEnabled())   log.infof(""String_Node_Str"",src,sc.getServletContextName());
  return list;
}"
43444,"Map<String,Map<String,String>> load(String refer);","Map<String,Map<String,Object>> load(String refer);"
43445,"private void evalLocalization(NutConfig config,Class<?> mainModule){
  Localization lc=mainModule.getAnnotation(Localization.class);
  if (null != lc) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",lc.value());
    Map<String,Map<String,String>> msgss=Mirror.me(lc.type()).born().load(lc.value());
    config.setAttributeIgnoreNull(Localization.class.getName(),msgss);
  }
 else   if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}","private void evalLocalization(NutConfig config,Class<?> mainModule){
  Localization lc=mainModule.getAnnotation(Localization.class);
  if (null != lc) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",lc.value());
    Map<String,Map<String,Object>> msgss=Mirror.me(lc.type()).born().load(lc.value());
    config.setAttributeIgnoreNull(Localization.class.getName(),msgss);
  }
 else   if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}"
43446,"public Map<String,Map<String,String>> load(String refer){
  Map<String,Map<String,String>> re=new HashMap<String,Map<String,String>>();
  List<NutResource> allnrs=Scans.me().scan(refer,""String_Node_Str"");
  for (  NutResource nutResource : allnrs) {
    if (nutResource.getName().indexOf(refer) > -1)     nutResource.setName(nutResource.getName().substring(refer.length() + 1));
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",allnrs.size(),allnrs);
  int max=0;
  for (  NutResource nr : allnrs) {
    String[] nms=nr.getName().split(""String_Node_Str"");
    max=Math.max(max,nms.length);
  }
  Map<String,List<NutResource>> map=new HashMap<String,List<NutResource>>();
  for (  NutResource nr : allnrs) {
    String langType;
    String resName=nr.getName();
    if (resName.contains(""String_Node_Str""))     langType=resName.substring(0,resName.indexOf('/'));
 else     if (resName.contains(""String_Node_Str""))     langType=resName.substring(0,resName.indexOf('\\'));
 else     langType=Mvcs.DEFAULT_MSGS;
    List<NutResource> list=map.get(langType);
    if (null == list) {
      list=new ArrayList<NutResource>(10);
      map.put(langType,list);
    }
    list.add(nr);
  }
  try {
    for (    Entry<String,List<NutResource>> entry : map.entrySet()) {
      List<NutResource> nrs=entry.getValue();
      for (      NutResource nr : nrs) {
        MultiLineProperties p=new MultiLineProperties(){
          public String get(          Object key){
            return Strings.sNull(super.get(key),(String)key);
          }
        }
;
        Reader r=nr.getReader();
        p.load(r);
        r.close();
        Map<String,String> langs=re.get(entry.getKey());
        if (null == langs)         re.put(entry.getKey(),p);
 else         langs.putAll(p);
      }
    }
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",re.size());
  if (log.isTraceEnabled())   log.tracef(""String_Node_Str"",Json.toJson(re));
  return re;
}","public Map<String,Map<String,Object>> load(String refer){
  Map<String,Map<String,Object>> re=new HashMap<String,Map<String,Object>>();
  List<NutResource> allnrs=Scans.me().scan(refer,""String_Node_Str"");
  for (  NutResource nutResource : allnrs) {
    if (nutResource.getName().indexOf(refer) > -1)     nutResource.setName(nutResource.getName().substring(refer.length() + 1));
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",allnrs.size(),allnrs);
  int max=0;
  for (  NutResource nr : allnrs) {
    String[] nms=nr.getName().split(""String_Node_Str"");
    max=Math.max(max,nms.length);
  }
  Map<String,List<NutResource>> map=new HashMap<String,List<NutResource>>();
  for (  NutResource nr : allnrs) {
    String langType;
    String resName=nr.getName();
    if (resName.contains(""String_Node_Str""))     langType=resName.substring(0,resName.indexOf('/'));
 else     if (resName.contains(""String_Node_Str""))     langType=resName.substring(0,resName.indexOf('\\'));
 else     langType=Mvcs.DEFAULT_MSGS;
    List<NutResource> list=map.get(langType);
    if (null == list) {
      list=new ArrayList<NutResource>(10);
      map.put(langType,list);
    }
    list.add(nr);
  }
  try {
    for (    Entry<String,List<NutResource>> entry : map.entrySet()) {
      List<NutResource> nrs=entry.getValue();
      String langType=entry.getKey();
      for (      NutResource nr : nrs) {
        MultiLineProperties p=new MultiLineProperties();
        Reader r=nr.getReader();
        p.load(r);
        r.close();
        Map<String,Object> msgs=re.get(langType);
        if (null == msgs) {
          msgs=new NutMessageMap();
          re.put(langType,msgs);
        }
        for (        String key : p.keySet()) {
          String str=p.get(key);
          Segment seg=(new CharSegment()).valueOf(str);
          if (seg.keys().isEmpty())           msgs.put(key,str);
 else           msgs.put(key,seg);
        }
      }
    }
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",re.size());
  if (log.isTraceEnabled())   log.tracef(""String_Node_Str"",Json.toJson(re));
  return re;
}"
43447,"public BinElObj append(ElOperator opt,ElObj obj){
  if (null == operator) {
    return setOperator(opt).setRight(obj);
  }
  BinElObj nn=new BinElObj();
  if (opt.isHigherThan(operator)) {
    if (right instanceof BinElObj) {
      setRight(((BinElObj)right).append(opt,obj));
    }
 else {
      nn.setLeft(right).setOperator(opt).setRight(obj);
      setRight(nn);
    }
  }
 else {
    BinElObj on=this;
    while (on.parent != null) {
      on=on.parent;
      if (!on.getOperator().isHigherThan(opt))       break;
    }
    nn.setLeft(on).setOperator(opt).setRight(obj);
  }
  return nn;
}","public BinElObj append(ElOperator opt,ElObj obj){
  if (null == operator) {
    return setOperator(opt).setRight(obj);
  }
  BinElObj nn;
  if (opt.isHigherThan(operator)) {
    if (right instanceof BinElObj) {
      nn=((BinElObj)right).append(opt,obj);
    }
 else {
      nn=new BinElObj();
      nn.setLeft(right).setOperator(opt).setRight(obj);
      setRight(nn);
    }
  }
 else {
    nn=new BinElObj();
    BinElObj on=this;
    while (on.parent != null) {
      if (!on.getOperator().isHigherThan(opt))       break;
      on=on.parent;
    }
    nn.parent=on.parent;
    nn.setLeft(on).setOperator(opt).setRight(obj);
    if (null != nn.parent)     nn.parent.setRight(nn);
  }
  return nn;
}"
43448,"public List<NutResource> list(String src,String filter){
  final List<NutResource> list=new LinkedList<NutResource>();
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  File f=Files.findFile(src);
  if (f != null && f.exists()) {
    if (f.isFile())     list.addAll(scanInDir(regex,src,f.getParentFile(),ignoreHidden));
 else     list.addAll(scanInDir(regex,src,f,ignoreHidden));
  }
 else {
    String path=Disks.absolute(src,getClass().getClassLoader(),Encoding.defaultEncoding());
    if (null != path) {
      f=new File(path);
      if (!path.contains(""String_Node_Str"")) {
        int pos=path.lastIndexOf(src);
        list.addAll(scanInDir(regex,path.substring(0,pos),f,ignoreHidden));
      }
 else {
        JarEntryInfo jeInfo=new JarEntryInfo(path);
        list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
      }
    }
 else {
      String classpath=System.getProperties().getProperty(""String_Node_Str"");
      if (LOG.isInfoEnabled())       LOG.info(""String_Node_Str"" + classpath);
      String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
      for (      String pathZ : paths) {
        if (pathZ.endsWith(""String_Node_Str""))         list.addAll(scanInJar(checkSrc(src),regex,pathZ));
 else         list.addAll(scanInDir(regex,pathZ,new File(pathZ + ""String_Node_Str"" + src),ignoreHidden));
      }
    }
  }
  return list;
}","public List<NutResource> list(String src,String filter){
  final List<NutResource> list=new LinkedList<NutResource>();
  final Pattern regex=null == filter ? null : Pattern.compile(filter);
  File f=Files.findFile(src);
  if (f != null && f.exists()) {
    if (f.isFile())     list.addAll(scanInDir(regex,src,f.getParentFile(),ignoreHidden));
 else     list.addAll(scanInDir(regex,src,f,ignoreHidden));
  }
 else {
    String path=Disks.absolute(src,getClass().getClassLoader(),Encoding.defaultEncoding());
    if (null != path) {
      f=new File(path);
      if (!path.contains(""String_Node_Str"")) {
        int pos=path.lastIndexOf(src);
        if (pos > 0)         list.addAll(scanInDir(regex,path.substring(0,pos),f,ignoreHidden));
      }
 else {
        JarEntryInfo jeInfo=new JarEntryInfo(path);
        list.addAll(scanInJar(checkSrc(jeInfo.getEntryName()),regex,jeInfo.getJarPath()));
      }
    }
 else {
      String classpath=System.getProperties().getProperty(""String_Node_Str"");
      if (LOG.isInfoEnabled())       LOG.info(""String_Node_Str"" + classpath);
      String[] paths=classpath.split(System.getProperties().getProperty(""String_Node_Str""));
      for (      String pathZ : paths) {
        if (pathZ.endsWith(""String_Node_Str""))         list.addAll(scanInJar(checkSrc(src),regex,pathZ));
 else         list.addAll(scanInDir(regex,pathZ,new File(pathZ + ""String_Node_Str"" + src),ignoreHidden));
      }
    }
  }
  return list;
}"
43449,"@Override public String cast(Calendar src,Class<?> toType,String... args){
  return dateTimeFormat.format(src.getTime());
}","@Override public String cast(Calendar src,Class<?> toType,String... args){
  return ((DateFormat)dateTimeFormat.clone()).format(src.getTime());
}"
43450,"@Override public String cast(java.util.Date src,Class<?> toType,String... args){
  return dateTimeFormat.format(src);
}","@Override public String cast(java.util.Date src,Class<?> toType,String... args){
  return ((DateFormat)dateTimeFormat.clone()).format(src);
}"
43451,"@Override public String cast(java.sql.Date src,Class<?> toType,String... args){
  return dateFormat.format(new java.util.Date(src.getTime()));
}","@Override public String cast(java.sql.Date src,Class<?> toType,String... args){
  return ((DateFormat)dateFormat.clone()).format(new java.util.Date(src.getTime()));
}"
43452,"@Override public String cast(java.sql.Time src,Class<?> toType,String... args){
  return timeFormat.format(new java.util.Date(src.getTime()));
}","@Override public String cast(java.sql.Time src,Class<?> toType,String... args){
  return ((DateFormat)timeFormat.clone()).format(new java.util.Date(src.getTime()));
}"
43453,"@Override public Calendar cast(String src,Class<?> toType,String... args){
  Calendar c=Calendar.getInstance();
  try {
    c.setTime(dateTimeFormat.parse(src));
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
  return c;
}","@Override public Calendar cast(String src,Class<?> toType,String... args){
  Calendar c=Calendar.getInstance();
  try {
    c.setTime(((DateFormat)dateTimeFormat.clone()).parse(src));
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
  return c;
}"
43454,"@Override public java.util.Date cast(String src,Class<?> toType,String... args){
  try {
    return this.dateTimeFormat.parse(src);
  }
 catch (  ParseException e1) {
    try {
      return dateFormat.parse(src);
    }
 catch (    ParseException e) {
      throw Lang.wrapThrow(e);
    }
  }
}","@Override public java.util.Date cast(String src,Class<?> toType,String... args){
  try {
    return ((DateFormat)dateTimeFormat.clone()).parse(src);
  }
 catch (  ParseException e1) {
    try {
      return ((DateFormat)dateFormat.clone()).parse(src);
    }
 catch (    ParseException e) {
      throw Lang.wrapThrow(e);
    }
  }
}"
43455,"@Override public java.sql.Date cast(String src,Class<?> toType,String... args){
  try {
    return new java.sql.Date(dateFormat.parse(src).getTime());
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}","@Override public java.sql.Date cast(String src,Class<?> toType,String... args){
  try {
    return new java.sql.Date(((DateFormat)dateFormat.clone()).parse(src).getTime());
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}"
43456,"@Override public java.sql.Time cast(String src,Class<?> toType,String... args){
  try {
    return new java.sql.Time(timeFormat.parse(src).getTime());
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}","@Override public java.sql.Time cast(String src,Class<?> toType,String... args){
  try {
    return new java.sql.Time(((DateFormat)timeFormat.clone()).parse(src).getTime());
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}"
43457,"@Override public Timestamp cast(String src,Class<?> toType,String... args){
  try {
    return new java.sql.Timestamp(dateTimeFormat.parse(src).getTime());
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}","@Override public Timestamp cast(String src,Class<?> toType,String... args){
  try {
    return new java.sql.Timestamp(((DateFormat)dateTimeFormat.clone()).parse(src).getTime());
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}"
43458,"@Override public String cast(Timestamp src,Class<?> toType,String... args){
  return dateTimeFormat.format(new java.util.Date(src.getTime()));
}","@Override public String cast(Timestamp src,Class<?> toType,String... args){
  return ((DateFormat)dateTimeFormat.clone()).format(new java.util.Date(src.getTime()));
}"
43459,"public void init(Method method){
  Class<?>[] argTypes=method.getParameterTypes();
  injs=new ParamInjector[argTypes.length];
  Annotation[][] annss=method.getParameterAnnotations();
  for (int i=0; i < annss.length; i++) {
    Annotation[] anns=annss[i];
    Param param=null;
    Attr attr=null;
    IocObj iocObj=null;
    for (int x=0; x < anns.length; x++)     if (anns[x] instanceof Param) {
      param=(Param)anns[x];
      break;
    }
 else     if (anns[x] instanceof Attr) {
      attr=(Attr)anns[x];
      break;
    }
 else     if (anns[x] instanceof IocObj) {
      iocObj=(IocObj)anns[x];
      break;
    }
    if (null != attr) {
      injs[i]=evalInjectorByAttrScope(attr);
      continue;
    }
    if (null != iocObj) {
      injs[i]=new IocObjInjector(method.getParameterTypes()[i],iocObj.value());
      continue;
    }
    injs[i]=evalInjectorByParamType(argTypes[i]);
    if (null != injs[i])     continue;
    injs[i]=evalInjector(argTypes[i],param);
    if (null == injs[i])     injs[i]=new ErrorInjector(method,i);
  }
}","public void init(Method method){
  this.method=method;
  Class<?>[] argTypes=method.getParameterTypes();
  injs=new ParamInjector[argTypes.length];
  Annotation[][] annss=method.getParameterAnnotations();
  for (int i=0; i < annss.length; i++) {
    Annotation[] anns=annss[i];
    Param param=null;
    Attr attr=null;
    IocObj iocObj=null;
    for (int x=0; x < anns.length; x++)     if (anns[x] instanceof Param) {
      param=(Param)anns[x];
      break;
    }
 else     if (anns[x] instanceof Attr) {
      attr=(Attr)anns[x];
      break;
    }
 else     if (anns[x] instanceof IocObj) {
      iocObj=(IocObj)anns[x];
      break;
    }
    if (null != attr) {
      injs[i]=evalInjectorByAttrScope(attr);
      continue;
    }
    if (null != iocObj) {
      injs[i]=new IocObjInjector(method.getParameterTypes()[i],iocObj.value());
      continue;
    }
    injs[i]=evalInjectorByParamType(argTypes[i]);
    if (null != injs[i])     continue;
    injs[i]=evalInjector(argTypes[i],param);
    if (null == injs[i])     injs[i]=new ErrorInjector(method,i);
  }
}"
43460,"public Object[] adapt(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  Object[] args=new Object[injs.length];
  int i=0;
  int len=Math.min(args.length,null == pathArgs ? 0 : pathArgs.length);
  for (; i < len; i++) {
    args[i]=injs[i].get(sc,req,resp,null == pathArgs ? null : pathArgs[i]);
  }
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(sc,req,resp,null);
  }
  return args;
}","public Object[] adapt(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  Object[] args=new Object[injs.length];
  int len=Math.min(args.length,null == pathArgs ? 0 : pathArgs.length);
  for (int i=0; i < len; i++) {
    args[i]=injs[i].get(sc,req,resp,null == pathArgs ? null : pathArgs[i]);
  }
  Class<?>[] argTypes=method.getParameterTypes();
  for (int i=0; i < injs.length; i++) {
    args[i]=injs[i].get(sc,req,resp,null);
    if (args[i] == null && argTypes[i].isPrimitive()) {
      args[i]=getPrimitiveDefaultValue(argTypes[i]);
    }
  }
  return args;
}"
43461,"public void render(final StringBuilder sb,Entity<?> en){
  if (null != en) {
    EntityField ef=en.getField(name);
    sb.append(null != ef ? ef.getColumnName() : name);
  }
 else   sb.append(name);
  if (""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
    if (null == value)     throw Lang.makeThrow(""String_Node_Str"",sb);
    if (value instanceof Collection<?> || value.getClass().isArray()) {
      sb.append('(');
      Lang.each(value,new Each<Object>(){
        public void invoke(        int i,        Object ele,        int length) throws ExitLoop, LoopException {
          sb.append(Sqls.formatSqlFieldValue(ele)).append(',');
        }
      }
);
      sb.setCharAt(sb.length() - 1,')');
    }
 else     sb.append(Sqls.formatSqlFieldValue(value));
  }
 else   if (null == value && op.startsWith(""String_Node_Str"")) {
    sb.append(' ').append(op).append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(op) || ""String_Node_Str"".equals(op)) {
    sb.append(' ').append(op).append(' ').append(Sqls.formatSqlFieldValue(value));
  }
 else {
    sb.append(op).append(Sqls.formatSqlFieldValue(value));
  }
}","public void render(final StringBuilder sb,Entity<?> en){
  if (null != en) {
    EntityField ef=en.getField(name);
    sb.append(null != ef ? ef.getColumnName() : name);
  }
 else   sb.append(name);
  if (""String_Node_Str"".equals(op) || ""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"").append(op).append(""String_Node_Str"");
    if (null == value)     throw Lang.makeThrow(""String_Node_Str"",op,sb);
    if (value instanceof Collection<?> || value.getClass().isArray()) {
      sb.append('(');
      Lang.each(value,new Each<Object>(){
        public void invoke(        int i,        Object ele,        int length) throws ExitLoop, LoopException {
          sb.append(Sqls.formatSqlFieldValue(ele)).append(',');
        }
      }
);
      sb.setCharAt(sb.length() - 1,')');
    }
 else     sb.append(Sqls.formatSqlFieldValue(value));
  }
 else   if (null == value && op.startsWith(""String_Node_Str"")) {
    sb.append(' ').append(op).append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(op) || ""String_Node_Str"".equals(op)) {
    sb.append(' ').append(op).append(' ').append(Sqls.formatSqlFieldValue(value));
  }
 else {
    sb.append(op).append(Sqls.formatSqlFieldValue(value));
  }
}"
43462,"private void string2Json(String s) throws IOException {
  if (null == s)   writer.append(""String_Node_Str"");
 else {
    char[] cs=s.toCharArray();
    writer.append(format.getSeparator());
    for (    char c : cs) {
switch (c) {
case '""':
        writer.append(""String_Node_Str"");
      break;
case '\n':
    writer.append(""String_Node_Str"");
  break;
case '\t':
writer.append(""String_Node_Str"");
break;
case '\r':
writer.append(""String_Node_Str"");
break;
case '\\':
writer.append(""String_Node_Str"");
break;
default :
writer.append(c);
}
}
writer.append(format.getSeparator());
}
}","private void string2Json(String s) throws IOException {
  if (null == s)   writer.append(""String_Node_Str"");
 else {
    char[] cs=s.toCharArray();
    writer.append(format.getSeparator());
    for (    char c : cs) {
switch (c) {
case '""':
        writer.append(""String_Node_Str"");
      break;
case '\n':
    writer.append(""String_Node_Str"");
  break;
case '\t':
writer.append(""String_Node_Str"");
break;
case '\r':
writer.append(""String_Node_Str"");
break;
case '\\':
writer.append(""String_Node_Str"");
break;
default :
if (c >= 256 && format.isAutoUnicode()) writer.append(""String_Node_Str"").append(Integer.toHexString(c).toUpperCase());
 else writer.append(c);
}
}
writer.append(format.getSeparator());
}
}"
43463,"private void _insertSelf(Entity<?> entity,Object obj){
  runFieldQuery(entity.getBefores(),obj);
  execute(sqlMaker.insert(entity,obj));
  runFieldQuery(entity.getAfters(),obj);
}","private void _insertSelf(final Entity<?> entity,final Object obj){
  Trans.exec(new Atom(){
    public void run(){
      runFieldQuery(entity.getBefores(),obj);
      execute(sqlMaker.insert(entity,obj));
      runFieldQuery(entity.getAfters(),obj);
    }
  }
);
}"
43464,"public boolean add(List<ViewMaker> makers,Class<?> moduleType){
  Ok myOk=moduleType.getAnnotation(Ok.class);
  if (null == myOk)   myOk=ok;
  Fail myFail=moduleType.getAnnotation(Fail.class);
  if (null == myFail)   myFail=fail;
  AdaptBy myAb=moduleType.getAnnotation(AdaptBy.class);
  if (null == myAb)   myAb=adaptBy;
  Filters myFlts=moduleType.getAnnotation(Filters.class);
  if (null == myFlts)   myFlts=filters;
  Encoding myEncoding=moduleType.getAnnotation(Encoding.class);
  if (null == myEncoding)   myEncoding=encoding;
  At baseAt=moduleType.getAnnotation(At.class);
  String[] bases;
  if (null == baseAt)   bases=Lang.array(""String_Node_Str"");
 else   if (null == baseAt.value() || baseAt.value().length == 0)   bases=Lang.array(""String_Node_Str"" + moduleType.getSimpleName().toLowerCase());
 else {
    bases=baseAt.value();
    for (int i=0; i < bases.length; i++)     if (bases[i] == null || ""String_Node_Str"".equals(bases[i]))     bases[i]=""String_Node_Str"";
  }
  boolean isModule=false;
  for (  Method method : moduleType.getMethods()) {
    if (!Modifier.isPublic(method.getModifiers()) || !method.isAnnotationPresent(At.class))     continue;
    At atAnn=method.getAnnotation(At.class);
    isModule=true;
    ActionInvoker invoker=new ActionInvokerImpl(context,ioc,makers,moduleType,method,myOk,myFail,myAb,myFlts,myEncoding);
    String actionPath=null;
    for (    String base : bases) {
      String[] paths=atAnn.value();
      if ((paths.length == 1 && Strings.isBlank(paths[0])) || paths.length == 0) {
        actionPath=base + ""String_Node_Str"" + method.getName().toLowerCase();
        root.add(actionPath,invoker);
        if (log.isDebugEnabled())         log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
      }
 else {
        for (        String at : paths) {
          actionPath=base + at;
          root.add(actionPath,invoker);
          if (log.isDebugEnabled())           log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
        }
      }
    }
    if (!Strings.isBlank(atAnn.key()) && !Strings.isBlank(actionPath))     config.atMap().add(atAnn.key(),actionPath);
  }
  return isModule;
}","public boolean add(List<ViewMaker> makers,Class<?> moduleType){
  Ok myOk=moduleType.getAnnotation(Ok.class);
  if (null == myOk)   myOk=ok;
  Fail myFail=moduleType.getAnnotation(Fail.class);
  if (null == myFail)   myFail=fail;
  AdaptBy myAb=moduleType.getAnnotation(AdaptBy.class);
  if (null == myAb)   myAb=adaptBy;
  Filters myFlts=moduleType.getAnnotation(Filters.class);
  if (null == myFlts)   myFlts=filters;
  Encoding myEncoding=moduleType.getAnnotation(Encoding.class);
  if (null == myEncoding)   myEncoding=encoding;
  At baseAt=moduleType.getAnnotation(At.class);
  String[] bases;
  if (null == baseAt)   bases=Lang.array(""String_Node_Str"");
 else   if (null == baseAt.value() || baseAt.value().length == 0)   bases=Lang.array(""String_Node_Str"" + moduleType.getSimpleName().toLowerCase());
 else {
    bases=baseAt.value();
    for (int i=0; i < bases.length; i++)     if (bases[i] == null || ""String_Node_Str"".equals(bases[i]))     bases[i]=""String_Node_Str"";
  }
  boolean isModule=false;
  for (  Method method : moduleType.getMethods()) {
    if (!Modifier.isPublic(method.getModifiers()) || !method.isAnnotationPresent(At.class))     continue;
    At atAnn=method.getAnnotation(At.class);
    isModule=true;
    ActionInvoker invoker=new ActionInvokerImpl(context,ioc,makers,moduleType,method,myOk,myFail,myAb,myFlts,myEncoding);
    String actionPath=null;
    for (    String base : bases) {
      String[] paths=atAnn.value();
      if ((paths.length == 1 && Strings.isBlank(paths[0])) || paths.length == 0) {
        actionPath=base + ""String_Node_Str"" + method.getName().toLowerCase();
        root.add(actionPath,invoker);
        if (log.isDebugEnabled())         log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
      }
 else {
        for (        String at : paths) {
          if (Strings.isBlank(at)) {
            throw new BlankAtException(moduleType,method);
          }
          actionPath=base + at;
          root.add(actionPath,invoker);
          if (log.isDebugEnabled())           log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
        }
      }
    }
    if (!Strings.isBlank(atAnn.key()) && !Strings.isBlank(actionPath))     config.atMap().add(atAnn.key(),actionPath);
  }
  return isModule;
}"
43465,"private EntityField evalField(DatabaseMeta db,ResultSetMetaData rsmd,Entity<?> entity,Field field) throws SQLException {
  field.setAccessible(true);
  EntityField ef=new EntityField(entity,field);
  Column column=field.getAnnotation(Column.class);
  if (null == column || Strings.isBlank(column.value()))   ef.setColumnName(field.getName());
 else   ef.setColumnName(column.value());
  int ci=Daos.getColumnIndex(rsmd,ef.getColumnName());
  ef.setReadonly((field.getAnnotation(Readonly.class) != null));
  if (null != rsmd)   ef.setNotNull(ResultSetMetaData.columnNoNulls == rsmd.isNullable(ci));
  if (null != rsmd)   if (ef.getMirror().isEnum()) {
    if (Daos.isIntLikeColumn(rsmd,ci))     ef.setType(FieldType.ENUM_INT);
  }
  Default dft=field.getAnnotation(Default.class);
  if (null != dft) {
    ef.setDefaultValue(new CharSegment(dft.value()));
  }
  Prev prev=field.getAnnotation(Prev.class);
  if (null != prev) {
    ef.setBeforeInsert(FieldQuerys.eval(db,prev.value(),ef));
  }
  Next next=field.getAnnotation(Next.class);
  if (null != next) {
    ef.setAfterInsert(FieldQuerys.eval(db,next.value(),ef));
  }
  Id id=field.getAnnotation(Id.class);
  if (null != id) {
    if (!ef.getMirror().isIntLike())     throw error(entity,""String_Node_Str"",field.getName());
    if (id.auto()) {
      ef.setType(FieldType.SERIAL);
      if (null == field.getAnnotation(Next.class)) {
        ef.setAfterInsert(FieldQuerys.create(""String_Node_Str"",ef));
      }
    }
 else {
      ef.setType(FieldType.ID);
    }
  }
  Name name=field.getAnnotation(Name.class);
  if (null != name) {
    if (!ef.getMirror().isStringLike())     throw error(entity,""String_Node_Str"",field.getName());
    ef.setNotNull(true);
    if (name.casesensitive())     ef.setType(FieldType.CASESENSITIVE_NAME);
 else     ef.setType(FieldType.NAME);
  }
  ef.setFieldAdapter(FieldAdapter.create(ef.getMirror(),ef.isEnumInt()));
  ef.setValueAdapter(ValueAdapter.create(ef.getMirror(),ef.isEnumInt()));
  return ef;
}","protected EntityField evalField(DatabaseMeta db,ResultSetMetaData rsmd,Entity<?> entity,Field field) throws SQLException {
  field.setAccessible(true);
  EntityField ef=new EntityField(entity,field);
  Column column=field.getAnnotation(Column.class);
  if (null == column || Strings.isBlank(column.value()))   ef.setColumnName(field.getName());
 else   ef.setColumnName(column.value());
  int ci=Daos.getColumnIndex(rsmd,ef.getColumnName());
  ef.setReadonly((field.getAnnotation(Readonly.class) != null));
  if (null != rsmd)   ef.setNotNull(ResultSetMetaData.columnNoNulls == rsmd.isNullable(ci));
  if (null != rsmd)   if (ef.getMirror().isEnum()) {
    if (Daos.isIntLikeColumn(rsmd,ci))     ef.setType(FieldType.ENUM_INT);
  }
  Default dft=field.getAnnotation(Default.class);
  if (null != dft) {
    ef.setDefaultValue(new CharSegment(dft.value()));
  }
  Prev prev=field.getAnnotation(Prev.class);
  if (null != prev) {
    ef.setBeforeInsert(FieldQuerys.eval(db,prev.value(),ef));
  }
  Next next=field.getAnnotation(Next.class);
  if (null != next) {
    ef.setAfterInsert(FieldQuerys.eval(db,next.value(),ef));
  }
  Id id=field.getAnnotation(Id.class);
  if (null != id) {
    if (!ef.getMirror().isIntLike())     throw error(entity,""String_Node_Str"",field.getName());
    if (id.auto()) {
      ef.setType(FieldType.SERIAL);
      if (null == field.getAnnotation(Next.class)) {
        ef.setAfterInsert(FieldQuerys.create(""String_Node_Str"",ef));
      }
    }
 else {
      ef.setType(FieldType.ID);
    }
  }
  Name name=field.getAnnotation(Name.class);
  if (null != name) {
    if (!ef.getMirror().isStringLike())     throw error(entity,""String_Node_Str"",field.getName());
    ef.setNotNull(true);
    if (name.casesensitive())     ef.setType(FieldType.CASESENSITIVE_NAME);
 else     ef.setType(FieldType.NAME);
  }
  ef.setFieldAdapter(FieldAdapter.create(ef.getMirror(),ef.isEnumInt()));
  ef.setValueAdapter(ValueAdapter.create(ef.getMirror(),ef.isEnumInt()));
  return ef;
}"
43466,"private EntityName evalEntityName(Class<?> type,Class<? extends Annotation> annType,Class<? extends Annotation> dftAnnType){
  Annotation ann=null;
  Class<?> me=type;
  while (null != me && !(me == Object.class)) {
    ann=me.getAnnotation(annType);
    if (ann != null) {
      String v=Mirror.me(annType).invoke(ann,""String_Node_Str"").toString();
      if (!Strings.isBlank(v))       return EntityName.create(v);
    }
    me=me.getSuperclass();
  }
  if (null != dftAnnType)   return evalEntityName(type,dftAnnType,null);
  return EntityName.create(type.getSimpleName().toLowerCase());
}","protected EntityName evalEntityName(Class<?> type,Class<? extends Annotation> annType,Class<? extends Annotation> dftAnnType){
  Annotation ann=null;
  Class<?> me=type;
  while (null != me && !(me == Object.class)) {
    ann=me.getAnnotation(annType);
    if (ann != null) {
      String v=Mirror.me(annType).invoke(ann,""String_Node_Str"").toString();
      if (!Strings.isBlank(v))       return EntityName.create(v);
    }
    me=me.getSuperclass();
  }
  if (null != dftAnnType)   return evalEntityName(type,dftAnnType,null);
  return EntityName.create(type.getSimpleName().toLowerCase());
}"
43467,"private boolean isPojoExistsColumnAnnField(Mirror<?> mirror){
  for (  Field f : mirror.getFields())   if (null != f.getAnnotation(Column.class))   return true;
  return false;
}","protected boolean isPojoExistsColumnAnnField(Mirror<?> mirror){
  for (  Field f : mirror.getFields())   if (null != f.getAnnotation(Column.class))   return true;
  return false;
}"
43468,"private Link evalLink(DatabaseMeta db,Connection conn,Mirror<?> mirror,Field field){
  try {
    One one=field.getAnnotation(One.class);
    if (null != one) {
      Mirror<?> ta=Mirror.me(one.target());
      Field referFld=mirror.getField(one.field());
      Field targetPkFld=lookupPkByReferField(ta,referFld);
      return Link.getLinkForOne(mirror,field,ta.getType(),referFld,targetPkFld);
    }
    Many many=field.getAnnotation(Many.class);
    if (null != many) {
      Mirror<?> ta=Mirror.me(many.target());
      Field pkFld;
      Field targetReferFld;
      if (Strings.isBlank(many.field())) {
        pkFld=null;
        targetReferFld=null;
      }
 else {
        targetReferFld=ta.getField(many.field());
        pkFld=lookupPkByReferField(mirror,targetReferFld);
      }
      return Link.getLinkForMany(mirror,field,ta.getType(),targetReferFld,pkFld,many.key());
    }
    ManyMany mm=field.getAnnotation(ManyMany.class);
    if (null != mm) {
      Statement stat=null;
      ResultSet rs=null;
      ResultSetMetaData rsmd=null;
      boolean fromName=false;
      boolean toName=false;
      try {
        stat=conn.createStatement();
        Segment tableName=new CharSegment(mm.relation());
        rs=stat.executeQuery(db.getResultSetMetaSql(TableName.render(tableName)));
        rsmd=rs.getMetaData();
        fromName=!Daos.isIntLikeColumn(rsmd,mm.from());
        toName=!Daos.isIntLikeColumn(rsmd,mm.to());
      }
 catch (      Exception e) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"" + ""String_Node_Str"",mm.relation(),mm.from(),mm.to());
      }
 finally {
        Daos.safeClose(stat,rs);
      }
      Mirror<?> ta=Mirror.me(mm.target());
      Field selfPk=mirror.getField(fromName ? Name.class : Id.class);
      Field targetPk=ta.getField(toName ? Name.class : Id.class);
      return Link.getLinkForManyMany(mirror,field,ta.getType(),selfPk,targetPk,mm.key(),mm.relation(),mm.from(),mm.to());
    }
  }
 catch (  NoSuchFieldException e) {
    throw Lang.makeThrow(""String_Node_Str"",field.getName(),mirror.getType().getName(),e.getMessage());
  }
  return null;
}","protected Link evalLink(DatabaseMeta db,Connection conn,Mirror<?> mirror,Field field){
  try {
    One one=field.getAnnotation(One.class);
    if (null != one) {
      Mirror<?> ta=Mirror.me(one.target());
      Field referFld=mirror.getField(one.field());
      Field targetPkFld=lookupPkByReferField(ta,referFld);
      return Link.getLinkForOne(mirror,field,ta.getType(),referFld,targetPkFld);
    }
    Many many=field.getAnnotation(Many.class);
    if (null != many) {
      Mirror<?> ta=Mirror.me(many.target());
      Field pkFld;
      Field targetReferFld;
      if (Strings.isBlank(many.field())) {
        pkFld=null;
        targetReferFld=null;
      }
 else {
        targetReferFld=ta.getField(many.field());
        pkFld=lookupPkByReferField(mirror,targetReferFld);
      }
      return Link.getLinkForMany(mirror,field,ta.getType(),targetReferFld,pkFld,many.key());
    }
    ManyMany mm=field.getAnnotation(ManyMany.class);
    if (null != mm) {
      Statement stat=null;
      ResultSet rs=null;
      ResultSetMetaData rsmd=null;
      boolean fromName=false;
      boolean toName=false;
      try {
        stat=conn.createStatement();
        Segment tableName=new CharSegment(mm.relation());
        rs=stat.executeQuery(db.getResultSetMetaSql(TableName.render(tableName)));
        rsmd=rs.getMetaData();
        fromName=!Daos.isIntLikeColumn(rsmd,mm.from());
        toName=!Daos.isIntLikeColumn(rsmd,mm.to());
      }
 catch (      Exception e) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"" + ""String_Node_Str"",mm.relation(),mm.from(),mm.to());
      }
 finally {
        Daos.safeClose(stat,rs);
      }
      Mirror<?> ta=Mirror.me(mm.target());
      Field selfPk=mirror.getField(fromName ? Name.class : Id.class);
      Field targetPk=ta.getField(toName ? Name.class : Id.class);
      return Link.getLinkForManyMany(mirror,field,ta.getType(),selfPk,targetPk,mm.key(),mm.relation(),mm.from(),mm.to());
    }
  }
 catch (  NoSuchFieldException e) {
    throw Lang.makeThrow(""String_Node_Str"",field.getName(),mirror.getType().getName(),e.getMessage());
  }
  return null;
}"
43469,"private static Field lookupPkByReferField(Mirror<?> mirror,Field fld) throws NoSuchFieldException {
  Mirror<?> fldType=Mirror.me(fld.getType());
  if (fldType.isStringLike()) {
    return mirror.getField(Name.class);
  }
 else   if (fldType.isIntLike()) {
    return mirror.getField(Id.class);
  }
  throw Lang.makeThrow(""String_Node_Str"",fld.getDeclaringClass().getName(),fld.getName());
}","protected static Field lookupPkByReferField(Mirror<?> mirror,Field fld) throws NoSuchFieldException {
  Mirror<?> fldType=Mirror.me(fld.getType());
  if (fldType.isStringLike()) {
    return mirror.getField(Name.class);
  }
 else   if (fldType.isIntLike()) {
    return mirror.getField(Id.class);
  }
  throw Lang.makeThrow(""String_Node_Str"",fld.getDeclaringClass().getName(),fld.getName());
}"
43470,"private ErrorEntitySyntaxException error(Entity<?> entity,String fmt,Object... args){
  return new ErrorEntitySyntaxException(String.format(""String_Node_Str"",null == entity ? ""String_Node_Str"" : entity.getType().getName(),String.format(fmt,args)));
}","protected ErrorEntitySyntaxException error(Entity<?> entity,String fmt,Object... args){
  return new ErrorEntitySyntaxException(String.format(""String_Node_Str"",null == entity ? ""String_Node_Str"" : entity.getType().getName(),String.format(fmt,args)));
}"
43471,"public boolean isNameAccepted(String name){
  if (null == nameFilter)   return true;
  if (null == name)   return false;
  return Pattern.matches(nameFilter,name.toLowerCase());
}","public boolean isNameAccepted(String name){
  if (null == nameFilter)   return true;
  if (Strings.isBlank(name))   return true;
  return Pattern.matches(nameFilter,name.toLowerCase());
}"
43472,"public boolean isContentTypeAccepted(String contentType){
  if (null == contentTypeFilter)   return true;
  if (null == contentType)   return false;
  return Pattern.matches(contentTypeFilter,contentType.toLowerCase());
}","public boolean isContentTypeAccepted(String contentType){
  if (null == contentTypeFilter)   return true;
  if (Strings.isBlank(contentType))   return true;
  return Pattern.matches(contentTypeFilter,contentType.toLowerCase());
}"
43473,"public Map<String,Object> parse(HttpServletRequest req,UploadingContext context) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  int bufferSize=context.getBufferSize();
  String charset=context.getCharset();
  FilePool tmps=context.getFilePool();
  int maxFileSize=context.getMaxFileSize();
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes firstBoundaryBytes=RemountBytes.create(firstBoundary);
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes itemEndlBytes=RemountBytes.create(itemEndl);
  RemountBytes nameEndlBytes=RemountBytes.create(""String_Node_Str"");
  if (Http.multipart.getBoundary(req.getContentType()) == null) {
    if (log.isInfoEnabled())     log.info(""String_Node_Str"");
    return params;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  try {
    FieldMeta meta;
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString(charset);
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (!context.isNameAccepted(meta.getFileLocalName())) {
          throw new UploadUnsupportedFileNameException(meta);
        }
        if (!context.isContentTypeAccepted(meta.getContentType())) {
          throw new UploadUnsupportedFileTypeException(meta);
        }
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            if (maxFileSize > 0) {
              long maxPos=info.current + maxFileSize;
              do {
                info.current=br.load();
                mm=br.mark(itemEndlBytes);
                assertStreamNotEnd(mm);
                if (info.current > maxPos) {
                  throw new UploadOutOfSizeException(meta);
                }
                br.dump(ops);
              }
 while (mm == MarkMode.NOT_FOUND);
            }
 else {
              do {
                info.current=br.load();
                mm=br.mark(itemEndlBytes);
                assertStreamNotEnd(mm);
                br.dump(ops);
              }
 while (mm == MarkMode.NOT_FOUND);
            }
          }
  finally {
            Streams.safeFlush(ops);
            Streams.safeClose(ops);
          }
          if (context.isIgnoreNull() && tmp.length() == 0) {
          }
 else {
            params.add(meta.getName(),new TempFile(meta,tmp));
          }
        }
      }
 else {
        StringBuilder sb=new StringBuilder();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          sb.append(br.dumpAsString(charset));
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString());
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",meta.getName(),sb.toString());
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}","public Map<String,Object> parse(HttpServletRequest req,UploadingContext context) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  int bufferSize=context.getBufferSize();
  String charset=context.getCharset();
  FilePool tmps=context.getFilePool();
  int maxFileSize=context.getMaxFileSize();
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes firstBoundaryBytes=RemountBytes.create(firstBoundary);
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes itemEndlBytes=RemountBytes.create(itemEndl);
  RemountBytes nameEndlBytes=RemountBytes.create(""String_Node_Str"");
  if (Http.multipart.getBoundary(req.getContentType()) == null) {
    if (log.isInfoEnabled())     log.info(""String_Node_Str"");
    return params;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  try {
    FieldMeta meta;
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString(charset);
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (!context.isNameAccepted(meta.getFileLocalName())) {
          throw new UploadUnsupportedFileNameException(meta);
        }
        if (!context.isContentTypeAccepted(meta.getContentType())) {
          throw new UploadUnsupportedFileTypeException(meta);
        }
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            if (maxFileSize > 0) {
              long maxPos=info.current + maxFileSize;
              do {
                info.current=br.load();
                mm=br.mark(itemEndlBytes);
                assertStreamNotEnd(mm);
                if (info.current > maxPos) {
                  throw new UploadOutOfSizeException(meta);
                }
                br.dump(ops);
                if (info.stop)                 throw new UploadStopException(info);
              }
 while (mm == MarkMode.NOT_FOUND);
            }
 else {
              do {
                info.current=br.load();
                mm=br.mark(itemEndlBytes);
                assertStreamNotEnd(mm);
                br.dump(ops);
                if (info.stop)                 throw new UploadStopException(info);
              }
 while (mm == MarkMode.NOT_FOUND);
            }
          }
  finally {
            Streams.safeFlush(ops);
            Streams.safeClose(ops);
          }
          if (context.isIgnoreNull() && tmp.length() == 0) {
          }
 else {
            params.add(meta.getName(),new TempFile(meta,tmp));
          }
        }
      }
 else {
        StringBuilder sb=new StringBuilder();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          sb.append(br.dumpAsString(charset));
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString());
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",meta.getName(),sb.toString());
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}"
43474,"public void doChain() throws Throwable {
  if (filters.isEmpty())   return;
  filters.remove(0).filter(this);
}","public void doChain() throws Throwable {
  if (filters.isEmpty())   return;
  ActionFilter filter=filters.remove(0);
  filter.filter(this);
}"
43475,"public ObjectPairInjector(String prefix,Class<?> type){
  prefix=Strings.isBlank(prefix) ? ""String_Node_Str"" : Strings.trim(prefix);
  this.mirror=Mirror.me(type);
  Field[] fields=mirror.getFields();
  this.injs=new Injecting[fields.length];
  this.names=new String[fields.length];
  for (int i=0; i < fields.length; i++) {
    Field f=fields[i];
    this.injs[i]=mirror.getInjecting(f.getName());
    Param param=f.getAnnotation(Param.class);
    String nm=null == param ? f.getName() : param.value();
    this.names[i]=prefix + nm;
  }
}","public ObjectPairInjector(String prefix,Class<?> type){
  prefix=Strings.isBlank(prefix) ? ""String_Node_Str"" : Strings.trim(prefix);
  this.mirror=Mirror.me(type);
  fields=mirror.getFields();
  this.injs=new Injecting[fields.length];
  this.names=new String[fields.length];
  for (int i=0; i < fields.length; i++) {
    Field f=fields[i];
    this.injs[i]=mirror.getInjecting(f.getName());
    Param param=f.getAnnotation(Param.class);
    String nm=null == param ? f.getName() : param.value();
    this.names[i]=prefix + nm;
  }
}"
43476,"public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=mirror.born();
  for (int i=0; i < injs.length; i++) {
    String[] ss=req.getParameterValues(names[i]);
    if (null == ss)     continue;
    injs[i].inject(obj,ss);
  }
  return obj;
}","public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=mirror.born();
  for (int i=0; i < injs.length; i++) {
    String[] ss=filterParam(req.getParameterValues(names[i]),i);
    if (null == ss)     continue;
    injs[i].inject(obj,ss);
  }
  return obj;
}"
43477,"public boolean add(List<ViewMaker> makers,Class<?> moduleType){
  Ok myOk=moduleType.getAnnotation(Ok.class);
  if (null == myOk)   myOk=ok;
  Fail myFail=moduleType.getAnnotation(Fail.class);
  if (null == myFail)   myFail=fail;
  AdaptBy myAb=moduleType.getAnnotation(AdaptBy.class);
  if (null == myAb)   myAb=adaptBy;
  Filters myFlts=moduleType.getAnnotation(Filters.class);
  if (null == myFlts)   myFlts=filters;
  Encoding myEncoding=moduleType.getAnnotation(Encoding.class);
  if (null == myEncoding)   myEncoding=encoding;
  At baseAt=moduleType.getAnnotation(At.class);
  String[] bases;
  if (null == baseAt)   bases=Lang.array(""String_Node_Str"");
 else   if (null == baseAt.value() || baseAt.value().length == 0)   bases=Lang.array(""String_Node_Str"" + moduleType.getSimpleName().toLowerCase());
 else   bases=baseAt.value();
  boolean isModule=false;
  for (  Method method : moduleType.getMethods()) {
    if (!Modifier.isPublic(method.getModifiers()) || !method.isAnnotationPresent(At.class))     continue;
    At atAnn=method.getAnnotation(At.class);
    isModule=true;
    ActionInvoker invoker=new ActionInvokerImpl(context,ioc,makers,moduleType,method,myOk,myFail,myAb,myFlts,myEncoding);
    String actionPath=null;
    for (    String base : bases) {
      String[] paths=atAnn.value();
      if ((paths.length == 1 && Strings.isBlank(paths[0])) || paths.length == 0) {
        actionPath=base + ""String_Node_Str"" + method.getName().toLowerCase();
        root.add(actionPath,invoker);
        if (log.isDebugEnabled())         log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
      }
 else {
        for (        String at : paths) {
          actionPath=base + at;
          root.add(actionPath,invoker);
          if (log.isDebugEnabled())           log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
        }
      }
    }
    if (!Strings.isBlank(atAnn.key()) && !Strings.isBlank(actionPath))     config.atMap().add(atAnn.key(),actionPath);
  }
  return isModule;
}","public boolean add(List<ViewMaker> makers,Class<?> moduleType){
  Ok myOk=moduleType.getAnnotation(Ok.class);
  if (null == myOk)   myOk=ok;
  Fail myFail=moduleType.getAnnotation(Fail.class);
  if (null == myFail)   myFail=fail;
  AdaptBy myAb=moduleType.getAnnotation(AdaptBy.class);
  if (null == myAb)   myAb=adaptBy;
  Filters myFlts=moduleType.getAnnotation(Filters.class);
  if (null == myFlts)   myFlts=filters;
  Encoding myEncoding=moduleType.getAnnotation(Encoding.class);
  if (null == myEncoding)   myEncoding=encoding;
  At baseAt=moduleType.getAnnotation(At.class);
  String[] bases;
  if (null == baseAt)   bases=Lang.array(""String_Node_Str"");
 else   if (null == baseAt.value() || baseAt.value().length == 0)   bases=Lang.array(""String_Node_Str"" + moduleType.getSimpleName().toLowerCase());
 else {
    bases=baseAt.value();
    for (int i=0; i < bases.length; i++)     if (bases[i] == null || ""String_Node_Str"".equals(bases[i]))     bases[i]=""String_Node_Str"";
  }
  boolean isModule=false;
  for (  Method method : moduleType.getMethods()) {
    if (!Modifier.isPublic(method.getModifiers()) || !method.isAnnotationPresent(At.class))     continue;
    At atAnn=method.getAnnotation(At.class);
    isModule=true;
    ActionInvoker invoker=new ActionInvokerImpl(context,ioc,makers,moduleType,method,myOk,myFail,myAb,myFlts,myEncoding);
    String actionPath=null;
    for (    String base : bases) {
      String[] paths=atAnn.value();
      if ((paths.length == 1 && Strings.isBlank(paths[0])) || paths.length == 0) {
        actionPath=base + ""String_Node_Str"" + method.getName().toLowerCase();
        root.add(actionPath,invoker);
        if (log.isDebugEnabled())         log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
      }
 else {
        for (        String at : paths) {
          actionPath=base + at;
          root.add(actionPath,invoker);
          if (log.isDebugEnabled())           log.debug(String.format(""String_Node_Str"",method.getName(),actionPath));
        }
      }
    }
    if (!Strings.isBlank(atAnn.key()) && !Strings.isBlank(actionPath))     config.atMap().add(atAnn.key(),actionPath);
  }
  return isModule;
}"
43478,"public static RequestPath getRequestPathObject(HttpServletRequest req){
  RequestPath rr=new RequestPath();
  String url=req.getPathInfo();
  if (null == url)   url=req.getServletPath();
  rr.setUrl(url);
  if (null != url) {
    int lio=url.lastIndexOf('.');
    if (lio > 0) {
      rr.setPath(url.substring(0,lio));
      rr.setSuffix(url.substring(lio + 1));
    }
 else {
      rr.setPath(url);
      rr.setSuffix(""String_Node_Str"");
    }
  }
 else {
    rr.setPath(""String_Node_Str"");
    rr.setSuffix(""String_Node_Str"");
  }
  return rr;
}","public static RequestPath getRequestPathObject(HttpServletRequest req){
  RequestPath rr=new RequestPath();
  String url=req.getPathInfo();
  if (null == url)   url=req.getServletPath();
  rr.setUrl(url);
  if (null != url) {
    int lio=0;
    if (!url.endsWith(""String_Node_Str"")) {
      int ll=url.lastIndexOf('/');
      lio=url.lastIndexOf('.');
      if (lio < ll)       lio=-1;
    }
    if (lio > 0) {
      rr.setPath(url.substring(0,lio));
      rr.setSuffix(url.substring(lio + 1));
    }
 else {
      rr.setPath(url);
      rr.setSuffix(""String_Node_Str"");
    }
  }
 else {
    rr.setPath(""String_Node_Str"");
    rr.setSuffix(""String_Node_Str"");
  }
  return rr;
}"
43479,"public static RequestPath getRequestPathObject(HttpServletRequest req){
  RequestPath rr=new RequestPath();
  String url=req.getPathInfo();
  if (null == url)   url=req.getServletPath();
  rr.setUrl(url);
  if (null != url) {
    int lio=0;
    if (!url.endsWith(""String_Node_Str"")) {
      int ll=url.lastIndexOf('/');
      lio=url.lastIndexOf('.');
      if (lio < ll)       lio=-1;
    }
    if (lio > 0) {
      rr.setPath(url.substring(0,lio));
      rr.setSuffix(url.substring(lio + 1));
    }
 else {
      rr.setPath(url);
      rr.setSuffix(""String_Node_Str"");
    }
  }
 else {
    rr.setPath(""String_Node_Str"");
    rr.setSuffix(""String_Node_Str"");
  }
  return rr;
}","/** 
 * 获取当前请求的路径，并去掉后缀
 */
public static RequestPath getRequestPathObject(String url){
  RequestPath rr=new RequestPath();
  rr.setUrl(url);
  if (null != url) {
    int lio=url.lastIndexOf('.');
    if (lio > 0) {
      rr.setPath(url.substring(0,lio));
      rr.setSuffix(url.substring(lio + 1));
    }
 else {
      rr.setPath(url);
      rr.setSuffix(""String_Node_Str"");
    }
  }
 else {
    rr.setPath(""String_Node_Str"");
    rr.setSuffix(""String_Node_Str"");
  }
  return rr;
}"
43480,"public void init(FilterConfig conf) throws ServletException {
  config=new FilterNutConfig(conf);
  String skipMode=Strings.sNull(conf.getInitParameter(""String_Node_Str""),""String_Node_Str"").toLowerCase();
  if (!""String_Node_Str"".equals(skipMode)) {
    Loading ing=Inits.init(config,true);
    if (null != ing)     urls=ing.getUrls();
    String regx=Strings.sNull(config.getInitParameter(""String_Node_Str""),IGNORE);
    if (!""String_Node_Str"".equalsIgnoreCase(regx)) {
      ignorePtn=Pattern.compile(regx,Pattern.CASE_INSENSITIVE);
    }
  }
}","public void init(FilterConfig conf) throws ServletException {
  FilterNutConfig config=new FilterNutConfig(conf);
  String skipMode=Strings.sNull(conf.getInitParameter(""String_Node_Str""),""String_Node_Str"").toLowerCase();
  if (!""String_Node_Str"".equals(skipMode)) {
    nutMvc.init(config);
    String regx=Strings.sNull(config.getInitParameter(""String_Node_Str""),IGNORE);
    if (!""String_Node_Str"".equalsIgnoreCase(regx)) {
      ignorePtn=Pattern.compile(regx,Pattern.CASE_INSENSITIVE);
    }
  }
}"
43481,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  Mvcs.updateRequestAttributes((HttpServletRequest)req);
  if (null != urls) {
    RequestPath path=Mvcs.getRequestPathObject((HttpServletRequest)req);
    if (null == ignorePtn || !ignorePtn.matcher(path.getUrl()).find()) {
      ActionInvoking ing=urls.get(path.getPath());
      if (null != ing && null != ing.getInvoker()) {
        if (log.isInfoEnabled())         log.info(path);
        ing.invoke(config.getServletContext(),(HttpServletRequest)req,(HttpServletResponse)resp);
        return;
      }
    }
  }
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  Mvcs.updateRequestAttributes((HttpServletRequest)req);
  RequestPath path=Mvcs.getRequestPathObject((HttpServletRequest)req);
  if (null == ignorePtn || !ignorePtn.matcher(path.getUrl()).find()) {
    try {
      if (nutMvc.handle((HttpServletRequest)req,(HttpServletResponse)resp)) {
        return;
      }
    }
 catch (    InitException e) {
    }
  }
  chain.doFilter(req,resp);
}"
43482,"public void destroy(){
  if (null != urls)   Inits.destroy(config);
}","public void destroy(){
  nutMvc.destroy();
}"
43483,"@Override public void init() throws ServletException {
  if (log.isInfoEnabled()) {
    URL me=Thread.currentThread().getContextClassLoader().getResource(NutServlet.class.getName().replace('.','/') + ""String_Node_Str"");
    log.infof(""String_Node_Str"",Nutz.version(),me);
  }
  config=new ServletNutConfig(getServletConfig());
  Loading ing=Inits.init(config,false);
  urls=ing.getUrls();
  ok=true;
}","@Override public void init() throws ServletException {
  nutMvc.init(new ServletNutConfig(getServletConfig()));
  ok=true;
}"
43484,"@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (null == urls) {
    if (log.isErrorEnabled())     log.error(""String_Node_Str"");
    return;
  }
  Mvcs.updateRequestAttributes(req);
  String path=Mvcs.getRequestPath(req);
  if (log.isInfoEnabled())   log.info(""String_Node_Str"" + path);
  ActionInvoking ing=urls.get(path);
  if (null == ing || null == ing.getInvoker())   resp.setStatus(404);
 else   ing.invoke(config.getServletContext(),req,resp);
}","@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    if (!nutMvc.handle(req,resp)) {
      resp.setStatus(404);
    }
  }
 catch (  InitException e) {
    return;
  }
}"
43485,"public void destroy(){
  if (config.getMainModule() != null)   Inits.destroy(config);
}","public void destroy(){
  nutMvc.destroy();
}"
43486,"private void pojo2Json(Object obj) throws IOException {
  if (null == obj)   return;
  Class<? extends Object> type=obj.getClass();
  ToJson tj=type.getAnnotation(ToJson.class);
  String myMethodName=Strings.sNull(null == tj ? null : tj.value(),""String_Node_Str"");
  Method myMethod;
  try {
    myMethod=type.getMethod(myMethodName);
    Object re=myMethod.invoke(obj);
    writer.append(String.valueOf(re));
    return;
  }
 catch (  Exception e1) {
    try {
      myMethod=type.getMethod(myMethodName,JsonFormat.class);
      Object re=myMethod.invoke(obj,format);
      writer.append(String.valueOf(re));
      return;
    }
 catch (    Exception e) {
    }
  }
  Mirror<?> me=Mirror.me(type);
  Field[] fields=me.getFields();
  appendBraceBegin();
  increaseFormatIndent();
  ArrayList<Pair> list=new ArrayList<Pair>(fields.length);
  for (  Field f : fields) {
    String name=f.getName();
    try {
      Object value=me.getValue(obj,name);
      if (!this.isIgnore(name,value))       list.add(new Pair(name,value));
    }
 catch (    FailToGetValueException e) {
    }
  }
  for (Iterator<Pair> it=list.iterator(); it.hasNext(); ) {
    Pair p=it.next();
    this.appendPair(p.name,p.value);
    if (it.hasNext())     this.appendPairEnd();
  }
  decreaseFormatIndent();
  appendBraceEnd();
}","private void pojo2Json(Object obj) throws IOException {
  if (null == obj)   return;
  Class<? extends Object> type=obj.getClass();
  ToJson tj=type.getAnnotation(ToJson.class);
  String myMethodName=Strings.sNull(null == tj ? null : tj.value(),""String_Node_Str"");
  try {
    Method myMethod=type.getMethod(myMethodName);
    if (!myMethod.isAccessible())     myMethod.setAccessible(true);
    Object re=myMethod.invoke(obj);
    writer.append(String.valueOf(re));
    return;
  }
 catch (  Exception e1) {
    try {
      Method myMethod=type.getMethod(myMethodName,JsonFormat.class);
      if (!myMethod.isAccessible())       myMethod.setAccessible(true);
      Object re=myMethod.invoke(obj,format);
      writer.append(String.valueOf(re));
      return;
    }
 catch (    Exception e) {
    }
  }
  Mirror<?> me=Mirror.me(type);
  Field[] fields=me.getFields();
  appendBraceBegin();
  increaseFormatIndent();
  ArrayList<Pair> list=new ArrayList<Pair>(fields.length);
  for (  Field f : fields) {
    String name=f.getName();
    try {
      Object value=me.getValue(obj,name);
      if (!this.isIgnore(name,value))       list.add(new Pair(name,value));
    }
 catch (    FailToGetValueException e) {
    }
  }
  for (Iterator<Pair> it=list.iterator(); it.hasNext(); ) {
    Pair p=it.next();
    this.appendPair(p.name,p.value);
    if (it.hasNext())     this.appendPairEnd();
  }
  decreaseFormatIndent();
  appendBraceEnd();
}"
43487,"protected Object getValue(IocMaking ing,Object obj) throws Exception {
  if (null == args || args.length == 0) {
    return method.invoke(obj);
  }
  Object[] fas=new Object[args.length];
  for (int i=0; i < args.length; i++)   fas[i]=args[i].getValue(ing,null);
  return method.invoke(obj,fas);
}","protected Object getValue(IocMaking ing,Object obj) throws Exception {
  if (method != null) {
    if (null == args || args.length == 0)     return method.invoke(obj);
    Object[] fas=new Object[args.length];
    for (int i=0; i < args.length; i++)     fas[i]=args[i].getValue(ing,null);
    return method.invoke(obj,fas);
  }
  return field.get(null);
}"
43488,"public StaticFunctionNode(String className,String name,ChainNode[] args){
  try {
    Mirror<?> mirror=Mirror.me((Class<?>)Lang.loadClass(className));
    if (null == args || args.length == 0) {
      try {
        method=mirror.getGetter(name);
      }
 catch (      NoSuchMethodException e) {
        throw Lang.makeThrow(""String_Node_Str"",name,mirror);
      }
    }
 else {
      Method[] ms=mirror.findMethods(name,args.length);
      if (0 == ms.length)       throw Lang.makeThrow(""String_Node_Str"",name,mirror);
      this.args=args;
      this.method=ms[0];
    }
    if (!Modifier.isStatic(method.getModifiers()))     throw Lang.makeThrow(""String_Node_Str"",name,mirror);
  }
 catch (  ClassNotFoundException e) {
    throw Lang.wrapThrow(e);
  }
}","public StaticFunctionNode(String className,String name,ChainNode[] args){
  try {
    Mirror<?> mirror=Mirror.me(Lang.loadClass(className));
    if (null == args || args.length == 0) {
      try {
        method=mirror.getGetter(name);
      }
 catch (      NoSuchMethodException e) {
        try {
          field=mirror.getField(name);
          if (!Modifier.isStatic(field.getModifiers()))           throw Lang.makeThrow(""String_Node_Str"",name,mirror);
          return;
        }
 catch (        NoSuchFieldException e1) {
          throw Lang.makeThrow(""String_Node_Str"",name,mirror);
        }
      }
    }
 else {
      Method[] ms=mirror.findMethods(name,args.length);
      if (0 == ms.length)       throw Lang.makeThrow(""String_Node_Str"",name,mirror);
      this.args=args;
      this.method=ms[0];
    }
    if (!Modifier.isStatic(method.getModifiers()))     throw Lang.makeThrow(""String_Node_Str"",name,mirror);
  }
 catch (  ClassNotFoundException e) {
    throw Lang.wrapThrow(e);
  }
}"
43489,"protected String asString(){
  StringBuilder sb=new StringBuilder();
  if (null != args && args.length > 0) {
    sb.append(args[0].toString());
    for (int i=1; i < args.length; i++)     sb.append(""String_Node_Str"").append(args[i].toString());
  }
  return String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),sb);
}","protected String asString(){
  StringBuilder sb=new StringBuilder();
  if (null != args && args.length > 0) {
    sb.append(args[0].toString());
    for (int i=1; i < args.length; i++)     sb.append(""String_Node_Str"").append(args[i].toString());
  }
  if (method != null)   return String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),sb);
 else   return String.format(""String_Node_Str"",field.getDeclaringClass().getName(),field.getName(),sb);
}"
43490,"/** 
 * @param path 全路径
 * @return 文件或者目录名
 */
public static String getName(String path){
  if (!Strings.isBlank(path)) {
    int pos=path.replace('\\','/').lastIndexOf('/');
    if (pos > 0)     return path.substring(pos);
  }
  return path;
}","/** 
 * @param path 全路径
 * @return 文件或者目录名
 */
public static String getName(String path){
  if (!Strings.isBlank(path)) {
    int pos=path.replace('\\','/').lastIndexOf('/');
    if (pos > 0)     return path.substring(pos + 1);
  }
  return path;
}"
43491,"public static StringGenerator sg(int min,int max){
  return new StringGenerator(min,max);
}","public static StringGenerator sg(int len){
  return new StringGenerator(len,len);
}"
43492,"public E next(){
  return stack.innerGet(i++);
}","public E next(){
  if (i >= stack.offset && i < stack.cursor)   return stack.innerGet(i++);
  return null;
}"
43493,"LinkedArrayIterator(LinkedArray<E> stack){
  this.stack=stack;
  i=0;
}","LinkedArrayIterator(LinkedArray<E> stack){
  this.stack=stack;
  i=stack.offset;
}"
43494,"public boolean hasNext(){
  return (stack.cursor - i + stack.offset) > 0;
}","public boolean hasNext(){
  return i < stack.cursor;
}"
43495,"public LinkedArray(Class<T> eleType,int size){
  this.eleType=eleType;
  if (size < 0)   Lang.makeThrow(""String_Node_Str"");
  this.width=size;
  cache=new ArrayList<T[]>();
}","public LinkedArray(Class<T> eleType,int size){
  this.eleType=eleType;
  if (size <= 0)   Lang.makeThrow(""String_Node_Str"");
  this.width=size;
  cache=new ArrayList<T[]>();
}"
43496,"public LinkedIntArray(int size){
  if (size < 0)   Lang.makeThrow(""String_Node_Str"");
  this.width=size;
  cache=new ArrayList<int[]>();
}","public LinkedIntArray(int size){
  if (size <= 0)   Lang.makeThrow(""String_Node_Str"");
  this.width=size;
  cache=new ArrayList<int[]>();
}"
43497,"private void parseArgs(Element beanElement,IocObject iocObject) throws Throwable {
  NodeList argsNodeList=beanElement.getElementsByTagName(TAG_ARGS);
  if (argsNodeList.getLength() > 0) {
    Element argsElement=(Element)argsNodeList.item(0);
    NodeList argNodeList=argsElement.getChildNodes();
    for (int i=0; i < argNodeList.getLength(); i++) {
      if (argNodeList.item(i) instanceof Element)       iocObject.addArg(parseX((Element)argNodeList.item(i)));
    }
  }
}","protected void parseArgs(Element beanElement,IocObject iocObject) throws Throwable {
  NodeList argsNodeList=beanElement.getElementsByTagName(TAG_ARGS);
  if (argsNodeList.getLength() > 0) {
    Element argsElement=(Element)argsNodeList.item(0);
    NodeList argNodeList=argsElement.getChildNodes();
    for (int i=0; i < argNodeList.getLength(); i++) {
      if (argNodeList.item(i) instanceof Element)       iocObject.addArg(parseX((Element)argNodeList.item(i)));
    }
  }
}"
43498,"private void parseEvents(Element beanElement,IocObject iocObject){
  NodeList eventsNodeList=beanElement.getElementsByTagName(""String_Node_Str"");
  if (eventsNodeList.getLength() > 0) {
    Element eventsElement=(Element)eventsNodeList.item(0);
    IocEventSet iocEventSet=new IocEventSet();
    NodeList fetchNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (fetchNodeList.getLength() > 0)     iocEventSet.setFetch(((Element)fetchNodeList.item(0)).getTextContent());
    NodeList createNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (createNodeList.getLength() > 0)     iocEventSet.setCreate(((Element)createNodeList.item(0)).getTextContent());
    NodeList deposeNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (deposeNodeList.getLength() > 0)     iocEventSet.setDepose(((Element)deposeNodeList.item(0)).getTextContent());
    if (iocEventSet.getCreate() == null)     if (iocEventSet.getDepose() == null)     if (iocEventSet.getFetch() == null)     return;
    iocObject.setEvents(iocEventSet);
  }
}","protected void parseEvents(Element beanElement,IocObject iocObject){
  NodeList eventsNodeList=beanElement.getElementsByTagName(""String_Node_Str"");
  if (eventsNodeList.getLength() > 0) {
    Element eventsElement=(Element)eventsNodeList.item(0);
    IocEventSet iocEventSet=new IocEventSet();
    NodeList fetchNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (fetchNodeList.getLength() > 0)     iocEventSet.setFetch(((Element)fetchNodeList.item(0)).getTextContent());
    NodeList createNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (createNodeList.getLength() > 0)     iocEventSet.setCreate(((Element)createNodeList.item(0)).getTextContent());
    NodeList deposeNodeList=eventsElement.getElementsByTagName(""String_Node_Str"");
    if (deposeNodeList.getLength() > 0)     iocEventSet.setDepose(((Element)deposeNodeList.item(0)).getTextContent());
    if (iocEventSet.getCreate() == null)     if (iocEventSet.getDepose() == null)     if (iocEventSet.getFetch() == null)     return;
    iocObject.setEvents(iocEventSet);
  }
}"
43499,"private boolean check(List<String> parentList,String currentBeanId){
  if (parentList.contains(currentBeanId))   return false;
  String parentBeanId=parentMap.get(currentBeanId);
  if (parentBeanId == null)   return true;
  parentList.add(currentBeanId);
  return check(parentList,parentBeanId);
}","protected boolean check(List<String> parentList,String currentBeanId){
  if (parentList.contains(currentBeanId))   return false;
  String parentBeanId=parentMap.get(currentBeanId);
  if (parentBeanId == null)   return true;
  parentList.add(currentBeanId);
  return check(parentList,parentBeanId);
}"
43500,"public XmlIocLoader(String... fileNames){
  try {
    DocumentBuilder builder=Lang.xmls();
    Document document;
    List<NutResource> list=Scans.me().loadResource(""String_Node_Str"",fileNames);
    for (    NutResource nr : list) {
      InputStream ins=nr.getInputStream();
      document=builder.parse(ins);
      document.normalizeDocument();
      NodeList nodeListZ=((Element)document.getDocumentElement()).getChildNodes();
      for (int i=0; i < nodeListZ.getLength(); i++) {
        if (nodeListZ.item(i) instanceof Element)         paserBean((Element)nodeListZ.item(i),false);
      }
      Streams.safeClose(ins);
    }
    handleParent();
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",Json.toJson(iocMap));
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
}","public XmlIocLoader(String... fileNames){
  try {
    DocumentBuilder builder=Lang.xmls();
    Document document;
    List<NutResource> list=Scans.me().loadResource(getScanPatten(),fileNames);
    for (    NutResource nr : list) {
      InputStream ins=nr.getInputStream();
      document=builder.parse(ins);
      document.normalizeDocument();
      NodeList nodeListZ=((Element)document.getDocumentElement()).getChildNodes();
      for (int i=0; i < nodeListZ.getLength(); i++) {
        if (nodeListZ.item(i) instanceof Element)         paserBean((Element)nodeListZ.item(i),false);
      }
      Streams.safeClose(ins);
    }
    handleParent();
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",Json.toJson(iocMap));
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
}"
43501,"private Map<String,?> paserMap(Element element){
  Map<String,Object> map=new HashMap<String,Object>();
  if (element.hasChildNodes()) {
    NodeList nodeList=element.getElementsByTagName(ITEM_TAG);
    for (int i=0; i < nodeList.getLength(); i++) {
      if (nodeList.item(i) instanceof Element) {
        Element elementItem=(Element)nodeList.item(i);
        String key=elementItem.getAttribute(""String_Node_Str"");
        if (map.containsKey(key))         throw new IllegalArgumentException(""String_Node_Str"");
        NodeList list=elementItem.getChildNodes();
        for (int j=0; j < list.getLength(); j++) {
          if (list.item(j) instanceof Element) {
            map.put(key,list.item(j).getTextContent());
            break;
          }
        }
        if (!map.containsKey(key))         map.put(key,null);
      }
    }
  }
  return map;
}","protected Map<String,?> paserMap(Element element){
  Map<String,Object> map=new HashMap<String,Object>();
  if (element.hasChildNodes()) {
    NodeList nodeList=element.getElementsByTagName(ITEM_TAG);
    for (int i=0; i < nodeList.getLength(); i++) {
      if (nodeList.item(i) instanceof Element) {
        Element elementItem=(Element)nodeList.item(i);
        String key=elementItem.getAttribute(""String_Node_Str"");
        if (map.containsKey(key))         throw new IllegalArgumentException(""String_Node_Str"");
        NodeList list=elementItem.getChildNodes();
        for (int j=0; j < list.getLength(); j++) {
          if (list.item(j) instanceof Element) {
            map.put(key,list.item(j).getTextContent());
            break;
          }
        }
        if (!map.containsKey(key))         map.put(key,null);
      }
    }
  }
  return map;
}"
43502,"private void parseFields(Element beanElement,IocObject iocObject) throws Throwable {
  NodeList fieldNodeList=beanElement.getElementsByTagName(TAG_FIELD);
  if (fieldNodeList.getLength() > 0) {
    int len=fieldNodeList.getLength();
    for (int i=0; i < len; i++) {
      Element fieldElement=(Element)fieldNodeList.item(i);
      IocField iocField=new IocField();
      iocField.setName(fieldElement.getAttribute(""String_Node_Str""));
      if (fieldElement.hasChildNodes()) {
        NodeList nodeList=fieldElement.getChildNodes();
        for (int j=0; j < nodeList.getLength(); j++) {
          if (nodeList.item(j) instanceof Element) {
            iocField.setValue(parseX((Element)nodeList.item(j)));
            break;
          }
        }
      }
      iocObject.addField(iocField);
    }
  }
}","protected void parseFields(Element beanElement,IocObject iocObject) throws Throwable {
  NodeList fieldNodeList=beanElement.getElementsByTagName(TAG_FIELD);
  if (fieldNodeList.getLength() > 0) {
    int len=fieldNodeList.getLength();
    for (int i=0; i < len; i++) {
      Element fieldElement=(Element)fieldNodeList.item(i);
      IocField iocField=new IocField();
      iocField.setName(fieldElement.getAttribute(""String_Node_Str""));
      if (fieldElement.hasChildNodes()) {
        NodeList nodeList=fieldElement.getChildNodes();
        for (int j=0; j < nodeList.getLength(); j++) {
          if (nodeList.item(j) instanceof Element) {
            iocField.setValue(parseX((Element)nodeList.item(j)));
            break;
          }
        }
      }
      iocObject.addField(iocField);
    }
  }
}"
43503,"private IocValue parseX(Element element) throws Throwable {
  IocValue iocValue=new IocValue();
  String type=element.getNodeName();
  if (EVN_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(EVN_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (SYS_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(SYS_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JNDI_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JNDI_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JAVA_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JAVA_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (REFER_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(REFER_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (FILE_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(FILE_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (OBJ_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserBean(element,true));
  }
 else   if (MAP_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserMap(element));
  }
 else   if (LIST_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element));
  }
 else   if (ARRAY_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element).toArray());
  }
 else   if (SET_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    Set<Object> set=new HashSet<Object>();
    set.addAll(paserCollection(element));
    iocValue.setValue(set);
  }
 else {
    iocValue.setType(null);
    iocValue.setValue(element.getFirstChild().getTextContent());
  }
  return iocValue;
}","protected IocValue parseX(Element element) throws Throwable {
  IocValue iocValue=new IocValue();
  String type=element.getNodeName();
  if (EVN_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(EVN_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (SYS_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(SYS_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JNDI_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JNDI_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (JAVA_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(JAVA_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (REFER_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(REFER_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (FILE_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(FILE_TAG);
    iocValue.setValue(element.getTextContent());
  }
 else   if (OBJ_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserBean(element,true));
  }
 else   if (MAP_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserMap(element));
  }
 else   if (LIST_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element));
  }
 else   if (ARRAY_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    iocValue.setValue(paserCollection(element).toArray());
  }
 else   if (SET_TAG.equalsIgnoreCase(type)) {
    iocValue.setType(null);
    Set<Object> set=new HashSet<Object>();
    set.addAll(paserCollection(element));
    iocValue.setValue(set);
  }
 else {
    iocValue.setType(null);
    iocValue.setValue(element.getFirstChild().getTextContent());
  }
  return iocValue;
}"
43504,"private IocObject paserBean(Element beanElement,boolean innerBean) throws Throwable {
  String beanId;
  if (innerBean) {
    beanId=""String_Node_Str"" + innerId;
    innerId++;
  }
 else   beanId=beanElement.getAttribute(""String_Node_Str"");
  if (beanId == null)   throw Lang.makeThrow(""String_Node_Str"");
  if (iocMap.containsKey(beanId))   throw Lang.makeThrow(""String_Node_Str"" + beanId);
  if (LOG.isDebugEnabled())   LOG.debugf(""String_Node_Str"",beanId);
  IocObject iocObject=new IocObject();
  String beanType=beanElement.getAttribute(""String_Node_Str"");
  if (!Strings.isBlank(beanType))   iocObject.setType(Lang.loadClass(beanType));
  String beanScope=beanElement.getAttribute(""String_Node_Str"");
  if (!Strings.isBlank(beanScope))   iocObject.setScope(beanScope);
  String beanParent=beanElement.getAttribute(""String_Node_Str"");
  if (!Strings.isBlank(beanParent))   parentMap.put(beanId,beanParent);
  parseArgs(beanElement,iocObject);
  parseFields(beanElement,iocObject);
  parseEvents(beanElement,iocObject);
  iocMap.put(beanId,iocObject);
  if (LOG.isDebugEnabled())   LOG.debugf(""String_Node_Str"",beanId);
  return iocObject;
}","protected IocObject paserBean(Element beanElement,boolean innerBean) throws Throwable {
  String beanId;
  if (innerBean) {
    beanId=""String_Node_Str"" + innerId;
    innerId++;
  }
 else   beanId=beanElement.getAttribute(""String_Node_Str"");
  if (beanId == null)   throw Lang.makeThrow(""String_Node_Str"");
  if (iocMap.containsKey(beanId))   throw Lang.makeThrow(""String_Node_Str"" + beanId);
  if (LOG.isDebugEnabled())   LOG.debugf(""String_Node_Str"",beanId);
  IocObject iocObject=new IocObject();
  String beanType=beanElement.getAttribute(""String_Node_Str"");
  if (!Strings.isBlank(beanType))   iocObject.setType(Lang.loadClass(beanType));
  String beanScope=beanElement.getAttribute(""String_Node_Str"");
  if (!Strings.isBlank(beanScope))   iocObject.setScope(beanScope);
  String beanParent=beanElement.getAttribute(""String_Node_Str"");
  if (!Strings.isBlank(beanParent))   parentMap.put(beanId,beanParent);
  parseArgs(beanElement,iocObject);
  parseFields(beanElement,iocObject);
  parseEvents(beanElement,iocObject);
  iocMap.put(beanId,iocObject);
  if (LOG.isDebugEnabled())   LOG.debugf(""String_Node_Str"",beanId);
  return iocObject;
}"
43505,"private void handleParent(){
  for (  String parentId : parentMap.values())   if (!iocMap.containsKey(parentId))   throw Lang.makeThrow(""String_Node_Str"",parentId);
  List<String> parentList=new ArrayList<String>();
  for (  Entry<String,String> entry : parentMap.entrySet()) {
    if (!check(parentList,entry.getKey()))     throw Lang.makeThrow(""String_Node_Str"",entry.getKey());
    parentList.clear();
  }
  while (parentMap.size() != 0) {
    Iterator<Entry<String,String>> it=parentMap.entrySet().iterator();
    while (it.hasNext()) {
      Entry<String,String> entry=it.next();
      String beanId=entry.getKey();
      String parentId=entry.getValue();
      if (parentMap.get(parentId) == null) {
        IocObject newIocObject=Iocs.mergeWith(iocMap.get(beanId),iocMap.get(parentId));
        iocMap.put(beanId,newIocObject);
        it.remove();
      }
    }
  }
}","protected void handleParent(){
  for (  String parentId : parentMap.values())   if (!iocMap.containsKey(parentId))   throw Lang.makeThrow(""String_Node_Str"",parentId);
  List<String> parentList=new ArrayList<String>();
  for (  Entry<String,String> entry : parentMap.entrySet()) {
    if (!check(parentList,entry.getKey()))     throw Lang.makeThrow(""String_Node_Str"",entry.getKey());
    parentList.clear();
  }
  while (parentMap.size() != 0) {
    Iterator<Entry<String,String>> it=parentMap.entrySet().iterator();
    while (it.hasNext()) {
      Entry<String,String> entry=it.next();
      String beanId=entry.getKey();
      String parentId=entry.getValue();
      if (parentMap.get(parentId) == null) {
        IocObject newIocObject=Iocs.mergeWith(iocMap.get(beanId),iocMap.get(parentId));
        iocMap.put(beanId,newIocObject);
        it.remove();
      }
    }
  }
}"
43506,"private List<IocValue> paserCollection(Element element) throws Throwable {
  List<IocValue> list=new ArrayList<IocValue>();
  if (element.hasChildNodes()) {
    NodeList nodeList=element.getChildNodes();
    for (int i=0; i < nodeList.getLength(); i++) {
      Node node=nodeList.item(i);
      if (node instanceof Element) {
        list.add((IocValue)parseX((Element)node));
      }
    }
  }
  return list;
}","protected List<IocValue> paserCollection(Element element) throws Throwable {
  List<IocValue> list=new ArrayList<IocValue>();
  if (element.hasChildNodes()) {
    NodeList nodeList=element.getChildNodes();
    for (int i=0; i < nodeList.getLength(); i++) {
      Node node=nodeList.item(i);
      if (node instanceof Element) {
        list.add((IocValue)parseX((Element)node));
      }
    }
  }
  return list;
}"
43507,"/** 
 * 执行过滤
 * @param request 当前的请求对象
 * @param method 即将调用的入口函数
 * @return <ul><li>null - 过滤去通过，可以继续执行后续操作 <li>View 对象实例 - 过滤器认为应该终止操作，用这个视图对象来直接渲染 HTTP响应 </ul>
 */
View match(HttpServletRequest request,Method method);","/** 
 * 执行过滤
 * @param sc Servlet 上下文对象
 * @param request 当前的请求对象
 * @param method 即将调用的入口函数
 * @return <ul><li>null - 过滤去通过，可以继续执行后续操作 <li>View 对象实例 - 过滤器认为应该终止操作，用这个视图对象来直接渲染 HTTP响应 </ul>
 */
View match(ServletContext sc,HttpServletRequest request,Method method);"
43508,"public View match(HttpServletRequest request,Method method){
  Object obj=request.getSession().getAttribute(name);
  if (null == obj)   return new ServerRedirectView(path);
  return null;
}","public View match(ServletContext sc,HttpServletRequest request,Method method){
  Object obj=request.getSession().getAttribute(name);
  if (null == obj)   return new ServerRedirectView(path);
  return null;
}"
43509,"public void invoke(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    req.setCharacterEncoding(inputCharset);
  }
 catch (  UnsupportedEncodingException e) {
    if (log.isWarnEnabled())     log.warn(getExceptionMessage(e),e);
    throw Lang.wrapThrow(e);
  }
  resp.setCharacterEncoding(outputCharset);
  if (null != filters)   for (  ActionFilter filter : filters) {
    View view=filter.match(req,method);
    if (null != view) {
      try {
        view.render(req,resp,null);
      }
 catch (      Throwable e) {
        if (log.isWarnEnabled())         log.warn(getExceptionMessage(e),e);
        throw Lang.wrapThrow(e);
      }
      return;
    }
  }
  RequestIocContext reqContext=null;
  try {
    Object[] args=adaptor.adapt(sc,req,resp,pathArgs);
    Object obj;
    if (null != module) {
      obj=module;
    }
 else {
      Ioc ioc=Mvcs.getIoc(sc);
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",moduleName);
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(req);
        SessionIocContext sessionContext=new SessionIocContext(req.getSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        obj=((Ioc2)ioc).get(moduleType,moduleName,myContext);
      }
 else       obj=ioc.get(moduleType,moduleName);
    }
    Object re=method.invoke(obj,args);
    if (re instanceof View)     ((View)re).render(req,resp,null);
 else     ok.render(req,resp,re);
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException && e.getCause() != null)     e=e.getCause();
    if (log.isDebugEnabled())     log.debug(getExceptionMessage(e),e);
    try {
      fail.render(req,resp,e);
    }
 catch (    Throwable e1) {
      if (log.isWarnEnabled())       log.warn(getExceptionMessage(e1),e1);
      resp.reset();
      try {
        resp.getWriter().write(e1.getMessage());
        resp.flushBuffer();
      }
 catch (      IOException e2) {
        if (log.isWarnEnabled())         log.warn(getExceptionMessage(e2),e2);
        throw Lang.wrapThrow(e2);
      }
    }
  }
 finally {
    if (null != reqContext)     reqContext.depose();
  }
}","public void invoke(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    req.setCharacterEncoding(inputCharset);
  }
 catch (  UnsupportedEncodingException e) {
    if (log.isWarnEnabled())     log.warn(getExceptionMessage(e),e);
    throw Lang.wrapThrow(e);
  }
  resp.setCharacterEncoding(outputCharset);
  if (null != filters)   for (  ActionFilter filter : filters) {
    View view=filter.match(sc,req,method);
    if (null != view) {
      try {
        view.render(req,resp,null);
      }
 catch (      Throwable e) {
        if (log.isWarnEnabled())         log.warn(getExceptionMessage(e),e);
        throw Lang.wrapThrow(e);
      }
      return;
    }
  }
  RequestIocContext reqContext=null;
  try {
    Object[] args=adaptor.adapt(sc,req,resp,pathArgs);
    Object obj;
    if (null != module) {
      obj=module;
    }
 else {
      Ioc ioc=Mvcs.getIoc(sc);
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",moduleName);
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(req);
        SessionIocContext sessionContext=new SessionIocContext(req.getSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        obj=((Ioc2)ioc).get(moduleType,moduleName,myContext);
      }
 else       obj=ioc.get(moduleType,moduleName);
    }
    Object re=method.invoke(obj,args);
    if (re instanceof View)     ((View)re).render(req,resp,null);
 else     ok.render(req,resp,re);
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException && e.getCause() != null)     e=e.getCause();
    if (log.isDebugEnabled())     log.debug(getExceptionMessage(e),e);
    try {
      fail.render(req,resp,e);
    }
 catch (    Throwable e1) {
      if (log.isWarnEnabled())       log.warn(getExceptionMessage(e1),e1);
      resp.reset();
      try {
        resp.getWriter().write(e1.getMessage());
        resp.flushBuffer();
      }
 catch (      IOException e2) {
        if (log.isWarnEnabled())         log.warn(getExceptionMessage(e2),e2);
        throw Lang.wrapThrow(e2);
      }
    }
  }
 finally {
    if (null != reqContext)     reqContext.depose();
  }
}"
43510,"@SuppressWarnings(""String_Node_Str"") public Node<T> add(Node<?>... nodes){
  if (nodes.length == 0) {
    return this;
  }
  if (nodes.length == 1) {
    Node<T> node=(Node<T>)nodes[0];
    node.parent(this);
    if (!this.hasChild()) {
      firstChild=node;
      lastChild=node;
      node.next(null);
      node.prev(null);
    }
 else {
      lastChild.next(node);
      node.prev(lastChild);
      node.next(null);
      lastChild=node;
    }
  }
 else {
    firstChild=(Node<T>)nodes[0];
    firstChild.parent(this);
    firstChild.next((Node<T>)nodes[1]);
    int i=1;
    for (; i < nodes.length - 1; i++) {
      Node<T> node=(Node<T>)nodes[i];
      node.parent(this);
      node.prev((Node<T>)nodes[i - 1]);
      node.next((Node<T>)nodes[i + 1]);
    }
    lastChild=(Node<T>)nodes[i];
    lastChild.parent(this);
    lastChild.prev((Node<T>)nodes[i - 1]);
  }
  return this;
}","@SuppressWarnings(""String_Node_Str"") public Node<T> add(Node<?>... nodes){
  if (nodes.length == 0) {
    return this;
  }
  if (nodes.length == 1) {
    Node<T> node=(Node<T>)nodes[0];
    node.parent(this);
    if (!this.hasChild()) {
      firstChild=node;
      lastChild=node;
      node.next(null);
      node.prev(null);
    }
 else {
      lastChild.next(node);
      node.prev(lastChild);
      node.next(null);
      lastChild=node;
    }
  }
 else {
    Node<T> theNode=(Node<T>)nodes[0];
    theNode.parent(this);
    theNode.next((Node<T>)nodes[1]);
    if (null == lastChild) {
      firstChild=theNode;
    }
 else {
      lastChild.next(theNode);
    }
    int i=1;
    for (; i < nodes.length - 1; i++) {
      Node<T> node=(Node<T>)nodes[i];
      node.parent(this);
      node.prev((Node<T>)nodes[i - 1]);
      node.next((Node<T>)nodes[i + 1]);
    }
    lastChild=(Node<T>)nodes[i];
    lastChild.parent(this);
    lastChild.prev((Node<T>)nodes[i - 1]);
  }
  return this;
}"
43511,"private int readTokenName(char[] cs,int i,StringBuilder sb){
  for (++i; i < cs.length; i++) {
    int b=(int)cs[i];
    if (b == '_' || b == '-' || (b >= 48 && b <= 57) || (b >= 65 && b <= 90) || (b >= 97 && b <= 122))     sb.append((char)b);
 else     break;
  }
  return i - 1;
}","private int readTokenName(char[] cs,int i,StringBuilder sb){
  for (++i; i < cs.length; i++) {
    int b=(int)cs[i];
    if (b == 95) {
      sb.append((char)b);
    }
 else     if ((b >= 0 && b <= 47) || (b >= 58 && b <= 64) || (b >= 91 && b <= 96)|| (b >= 123 && b <= 160)) {
      break;
    }
 else {
      sb.append((char)b);
    }
  }
  return i - 1;
}"
43512,"/** 
 * 初始化NutLog,检查全部Log的可用性,选择可用的Log适配器 <p/><b>加载本类时,该方法已经在静态构造函数中调用,用户无需主动调用.</b> <p/><b>除非迫不得已,请不要调用本方法<b/>
 */
public static void init(){
  try {
    adapter=new SimplePluginManager<LogAdapter>(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").get();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","/** 
 * 初始化NutLog,检查全部Log的可用性,选择可用的Log适配器 <p/> <b>加载本类时,该方法已经在静态构造函数中调用,用户无需主动调用.</b> <p/> <b>除非迫不得已,请不要调用本方法<b/>
 */
public static void init(){
  try {
    adapter=new SimplePluginManager<LogAdapter>(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").get();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}"
43513,"/** 
 * Get a Log by name
 * @param className the name of Log
 * @return Log 
 * @throws NullPointerException when className is null, maybe it will case NPE
 */
public static Log getLog(String className){
  return adapter.getLogger(className);
}","/** 
 * Get a Log by name
 * @param className the name of Log
 * @return Log
 * @throws NullPointerException when className is null, maybe it will case NPE
 */
public static Log getLog(String className){
  return adapter.getLogger(className);
}"
43514,"public boolean canWork(){
  try {
    Class.forName(LOG4J_CLASS_NAME,true,Thread.currentThread().getContextClassLoader());
  }
 catch (  ClassNotFoundException e) {
    return false;
  }
  return isPropertyFileConfigured();
}","public boolean canWork(){
  try {
    Class.forName(""String_Node_Str"",false,Thread.currentThread().getContextClassLoader());
    return isPropertyFileConfigured();
  }
 catch (  Throwable e) {
  }
  return false;
}"
43515,"public SimplePluginManager(Class<? extends T>... classNames) throws PluginException {
  for (  Class<? extends T> pluginClass : classNames)   loadPlugin(pluginClass);
}","public SimplePluginManager(Class<? extends T>... classNames) throws PluginException {
  if (classNames != null)   for (  Class<? extends T> pluginClass : classNames)   loadPlugin(pluginClass);
}"
43516,"@SuppressWarnings(""String_Node_Str"") private void loadPlugin(String pluginClassName) throws PluginException {
  try {
    if (pluginClassName != null)     loadPlugin((Class<? extends T>)Lang.loadClass(pluginClassName));
  }
 catch (  ClassNotFoundException e) {
  }
}","@SuppressWarnings(""String_Node_Str"") private void loadPlugin(String pluginClassName) throws PluginException {
  try {
    if (pluginClassName != null)     loadPlugin((Class<? extends T>)Lang.loadClass(pluginClassName));
  }
 catch (  Throwable e) {
  }
}"
43517,"protected IocValue convert(String value){
  IocValue iocValue=new IocValue();
  iocValue.setType(value.substring(0,value.indexOf(""String_Node_Str"")));
  iocValue.setValue(value.substring(value.indexOf(""String_Node_Str"") + 1));
  return iocValue;
}","protected IocValue convert(String value){
  IocValue iocValue=new IocValue();
  if (value.indexOf(':') > -1) {
    iocValue.setType(value.substring(0,value.indexOf(""String_Node_Str"")));
    iocValue.setValue(value.substring(value.indexOf(""String_Node_Str"") + 1));
  }
 else   iocValue.setValue(value);
  return iocValue;
}"
43518,"private void addClass(Class<?> classZ){
  if (classZ.isInterface() || classZ.isMemberClass() || classZ.isEnum()|| classZ.isAnnotation()|| classZ.isAnonymousClass())   return;
  int modify=classZ.getModifiers();
  if (Modifier.isAbstract(modify) || (!Modifier.isPublic(modify)))   return;
  IocBean iocBean=classZ.getAnnotation(IocBean.class);
  if (iocBean != null) {
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ);
    String beanName=iocBean.name();
    if (Strings.isBlank(beanName))     beanName=Strings.lowerFirst(classZ.getSimpleName());
    IocObject iocObject=new IocObject();
    iocObject.setType(classZ);
    map.put(beanName,iocObject);
    iocObject.setSingleton(iocBean.singleton());
    if (!Strings.isBlank(iocBean.scope()))     iocObject.setScope(iocBean.scope());
    if (iocBean.param().length > 0)     for (    String value : iocBean.param())     iocObject.addArg(convert(value));
    IocEventSet eventSet=new IocEventSet();
    iocObject.setEvents(eventSet);
    if (!Strings.isBlank(iocBean.create()))     eventSet.setCreate(iocBean.create().trim().intern());
    if (!Strings.isBlank(iocBean.depose()))     eventSet.setCreate(iocBean.depose().trim().intern());
    if (!Strings.isBlank(iocBean.fetch()))     eventSet.setCreate(iocBean.fetch().trim().intern());
    List<String> fieldList=new ArrayList<String>();
    Field[] fields=classZ.getDeclaredFields();
    for (    Field field : fields) {
      Inject inject=field.getAnnotation(Inject.class);
      if (inject == null)       continue;
      IocField iocField=new IocField();
      iocField.setName(field.getName());
      IocValue iocValue;
      if (Strings.isBlank(inject.value())) {
        iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(field.getName());
      }
 else       iocValue=convert(inject.value());
      iocField.setValue(iocValue);
      iocObject.addField(iocField);
      fieldList.add(iocField.getName());
    }
    Method[] methods=classZ.getMethods();
    for (    Method method : methods) {
      Inject inject=method.getAnnotation(Inject.class);
      if (inject == null)       continue;
      if (method.getName().startsWith(""String_Node_Str"") && method.getName().length() > 3 && method.getParameterTypes().length == 1) {
        IocField iocField=new IocField();
        iocField.setName(Strings.lowerFirst(method.getName().substring(3)));
        IocValue iocValue;
        if (Strings.isBlank(inject.value())) {
          iocValue=new IocValue();
          iocValue.setType(IocValue.TYPE_REFER);
          iocValue.setValue(Strings.lowerFirst(method.getName().substring(3)));
        }
 else         iocValue=convert(inject.value());
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    if (iocBean.field() != null && iocBean.field().length > 0) {
      for (      String fieldInfo : iocBean.field()) {
        if (fieldList.contains(fieldInfo))         throw Lang.makeThrow(""String_Node_Str"",classZ,fieldInfo);
        IocField iocField=new IocField();
        iocField.setName(fieldInfo);
        IocValue iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(fieldInfo);
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ,beanName);
  }
}","private void addClass(Class<?> classZ){
  if (classZ.isInterface() || classZ.isMemberClass() || classZ.isEnum()|| classZ.isAnnotation()|| classZ.isAnonymousClass())   return;
  int modify=classZ.getModifiers();
  if (Modifier.isAbstract(modify) || (!Modifier.isPublic(modify)))   return;
  IocBean iocBean=classZ.getAnnotation(IocBean.class);
  if (iocBean != null) {
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ);
    String beanName=iocBean.name();
    if (Strings.isBlank(beanName))     beanName=Strings.lowerFirst(classZ.getSimpleName());
    IocObject iocObject=new IocObject();
    iocObject.setType(classZ);
    map.put(beanName,iocObject);
    iocObject.setSingleton(iocBean.singleton());
    if (!Strings.isBlank(iocBean.scope()))     iocObject.setScope(iocBean.scope());
    if (iocBean.param().length > 0)     for (    String value : iocBean.param())     iocObject.addArg(convert(value));
    IocEventSet eventSet=new IocEventSet();
    iocObject.setEvents(eventSet);
    if (!Strings.isBlank(iocBean.create()))     eventSet.setCreate(iocBean.create().trim().intern());
    if (!Strings.isBlank(iocBean.depose()))     eventSet.setDepose(iocBean.depose().trim().intern());
    if (!Strings.isBlank(iocBean.fetch()))     eventSet.setFetch(iocBean.fetch().trim().intern());
    List<String> fieldList=new ArrayList<String>();
    Field[] fields=classZ.getDeclaredFields();
    for (    Field field : fields) {
      Inject inject=field.getAnnotation(Inject.class);
      if (inject == null)       continue;
      IocField iocField=new IocField();
      iocField.setName(field.getName());
      IocValue iocValue;
      if (Strings.isBlank(inject.value())) {
        iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(field.getName());
      }
 else       iocValue=convert(inject.value());
      iocField.setValue(iocValue);
      iocObject.addField(iocField);
      fieldList.add(iocField.getName());
    }
    Method[] methods=classZ.getMethods();
    for (    Method method : methods) {
      Inject inject=method.getAnnotation(Inject.class);
      if (inject == null)       continue;
      if (method.getName().startsWith(""String_Node_Str"") && method.getName().length() > 3 && method.getParameterTypes().length == 1) {
        IocField iocField=new IocField();
        iocField.setName(Strings.lowerFirst(method.getName().substring(3)));
        IocValue iocValue;
        if (Strings.isBlank(inject.value())) {
          iocValue=new IocValue();
          iocValue.setType(IocValue.TYPE_REFER);
          iocValue.setValue(Strings.lowerFirst(method.getName().substring(3)));
        }
 else         iocValue=convert(inject.value());
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    if (iocBean.field() != null && iocBean.field().length > 0) {
      for (      String fieldInfo : iocBean.field()) {
        if (fieldList.contains(fieldInfo))         throw Lang.makeThrow(""String_Node_Str"",classZ,fieldInfo);
        IocField iocField=new IocField();
        iocField.setName(fieldInfo);
        IocValue iocValue=new IocValue();
        iocValue.setType(IocValue.TYPE_REFER);
        iocValue.setValue(fieldInfo);
        iocField.setValue(iocValue);
        iocObject.addField(iocField);
        fieldList.add(iocField.getName());
      }
    }
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",classZ,beanName);
  }
}"
43519,"public boolean isFile(){
  return null != getContentType() && null != getFileLocalPath();
}","public boolean isFile(){
  return null != getFileLocalPath();
}"
43520,"/** 
 * 初始化NutLog,检查全部Log的可用性,选择可用的Log适配器 <p/> <b>加载本类时,该方法已经在静态构造函数中调用,用户无需主动调用.</b> <p/> <b>除非迫不得已,请不要调用本方法<b/>
 */
public static void init(){
  try {
    adapter=new SimplePluginManager<LogAdapter>(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").get();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","/** 
 * 初始化NutLog,检查全部Log的可用性,选择可用的Log适配器 <p/> <b>加载本类时,该方法已经在静态构造函数中调用,用户无需主动调用.</b> <p/> <b>除非迫不得已,请不要调用本方法<b/>
 */
public static void init(){
  try {
    adapter=new SimplePluginManager<LogAdapter>(""String_Node_Str"",""String_Node_Str"").get();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}"
43521,"@Override protected void log(int level,Object message,Throwable tx){
switch (level) {
case LEVEL_FATAL:
    logger.log(SUPER_FQCN,Level.FATAL,message,tx);
  break;
case LEVEL_ERROR:
logger.log(SUPER_FQCN,Level.ERROR,message,tx);
break;
case LEVEL_WARN:
logger.log(SUPER_FQCN,Level.WARN,message,tx);
break;
case LEVEL_INFO:
logger.log(SUPER_FQCN,Level.INFO,message,tx);
break;
case LEVEL_DEBUG:
logger.log(SUPER_FQCN,Level.DEBUG,message,tx);
break;
case LEVEL_TRACE:
if (hasTrace) logger.log(SUPER_FQCN,Level.TRACE,message,tx);
break;
default :
break;
}
}","@Override protected void log(int level,Object message,Throwable tx){
switch (level) {
case LEVEL_FATAL:
    logger.log(SUPER_FQCN,Level.FATAL,message,tx);
  break;
case LEVEL_ERROR:
logger.log(SUPER_FQCN,Level.ERROR,message,tx);
break;
case LEVEL_WARN:
logger.log(SUPER_FQCN,Level.WARN,message,tx);
break;
case LEVEL_INFO:
logger.log(SUPER_FQCN,Level.INFO,message,tx);
break;
case LEVEL_DEBUG:
logger.log(SUPER_FQCN,Level.DEBUG,message,tx);
break;
case LEVEL_TRACE:
if (hasTrace) logger.log(SUPER_FQCN,Level.TRACE,message,tx);
 else logger.log(SUPER_FQCN,Level.DEBUG,message,tx);
break;
default :
break;
}
}"
43522,"Log4JLogger(String className){
  logger=LogManager.getLogger(className);
  isFatalEnabled=logger.isEnabledFor(Level.FATAL);
  isErrorEnabled=logger.isEnabledFor(Level.ERROR);
  isWarnEnabled=logger.isEnabledFor(Level.WARN);
  isInfoEnabled=logger.isEnabledFor(Level.INFO);
  isDebugEnabled=logger.isEnabledFor(Level.DEBUG);
  if (hasTrace)   isTraceEnabled=logger.isEnabledFor(Level.TRACE);
}","Log4JLogger(String className){
  logger=Logger.getLogger(className);
  isFatalEnabled=logger.isEnabledFor(Level.FATAL);
  isErrorEnabled=logger.isEnabledFor(Level.ERROR);
  isWarnEnabled=logger.isEnabledFor(Level.WARN);
  isInfoEnabled=logger.isEnabledFor(Level.INFO);
  isDebugEnabled=logger.isEnabledFor(Level.DEBUG);
  if (hasTrace)   isTraceEnabled=logger.isEnabledFor(Level.TRACE);
}"
43523,"public boolean canWork(){
  try {
    Class.forName(""String_Node_Str"",false,Thread.currentThread().getContextClassLoader());
    return isPropertyFileConfigured();
  }
 catch (  Throwable e) {
  }
  return false;
}","public boolean canWork(){
  try {
    Class.forName(""String_Node_Str"",false,Thread.currentThread().getContextClassLoader());
    return true;
  }
 catch (  Throwable e) {
  }
  return false;
}"
43524,"protected void enhandMethod_Void(){
  mv.visitCode();
  Label l0=new Label();
  Label l1=new Label();
  Label l2=new Label();
  mv.visitTryCatchBlock(l0,l1,l2,""String_Node_Str"");
  mv.visitLabel(l0);
  mv.visitTypeInsn(NEW,""String_Node_Str"");
  mv.visitInsn(DUP);
  visitX(methodIndex);
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETSTATIC,myName,""String_Node_Str"",""String_Node_Str"");
  visitX(methodIndex);
  mv.visitInsn(AALOAD);
  mv.visitFieldInsn(GETSTATIC,myName,""String_Node_Str"",""String_Node_Str"");
  visitX(methodIndex);
  mv.visitInsn(AALOAD);
  loadArgsAsArray();
  mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
{
    if (Type.getReturnType(desc).equals(Type.VOID_TYPE)) {
      mv.visitInsn(POP);
    }
 else {
      mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      AsmHelper.checkCast(returnType,mv);
      returnIt();
    }
  }
  mv.visitLabel(l1);
  Label l3=new Label();
  mv.visitJumpInsn(GOTO,l3);
  mv.visitLabel(l2);
  mv.visitVarInsn(ASTORE,3);
  mv.visitVarInsn(ALOAD,3);
  mv.visitInsn(ATHROW);
  mv.visitLabel(l3);
  mv.visitInsn(RETURN);
  mv.visitMaxs(8,4);
  mv.visitEnd();
}","protected void enhandMethod_Void(){
  mv.visitCode();
  Label l0=new Label();
  Label l1=new Label();
  Label l2=new Label();
  mv.visitTryCatchBlock(l0,l1,l2,""String_Node_Str"");
  mv.visitLabel(l0);
  mv.visitTypeInsn(NEW,""String_Node_Str"");
  mv.visitInsn(DUP);
  visitX(methodIndex);
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETSTATIC,myName,AsmClassAgent.MethodArray_FieldName,""String_Node_Str"");
  visitX(methodIndex);
  mv.visitInsn(AALOAD);
  mv.visitFieldInsn(GETSTATIC,myName,AsmClassAgent.MethodInterceptorList_FieldName,""String_Node_Str"");
  visitX(methodIndex);
  mv.visitInsn(AALOAD);
  loadArgsAsArray();
  mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
{
    if (Type.getReturnType(desc).equals(Type.VOID_TYPE)) {
      mv.visitInsn(POP);
    }
 else {
      mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      AsmHelper.checkCast(returnType,mv);
      returnIt();
    }
  }
  mv.visitLabel(l1);
  Label l3=new Label();
  mv.visitJumpInsn(GOTO,l3);
  mv.visitLabel(l2);
  mv.visitVarInsn(ASTORE,3);
  mv.visitVarInsn(ALOAD,3);
  mv.visitInsn(ATHROW);
  mv.visitLabel(l3);
  mv.visitInsn(RETURN);
  mv.visitMaxs(8,4);
  mv.visitEnd();
}"
43525,"@SuppressWarnings(""String_Node_Str"") protected <T>Class<T> generate(ClassDefiner cd,Pair2[] pair2s,String newName,Class<T> klass,Constructor<T>[] constructors){
  try {
    return (Class<T>)cd.load(newName);
  }
 catch (  ClassNotFoundException e) {
  }
  Method[] methodArray=new Method[pair2s.length];
  List<MethodInterceptor>[] methodInterceptorList=new List[pair2s.length];
  for (int i=0; i < pair2s.length; i++) {
    Pair2 pair2=pair2s[i];
    methodArray[i]=pair2.method;
    methodInterceptorList[i]=pair2.listeners;
  }
  byte[] bytes=ClassY.enhandClass(klass,newName,methodArray,constructors);
  if (debug)   Files.write(new File(newName),bytes);
  Class<T> newClass=(Class<T>)cd.define(newName,bytes);
  AopToolKit.injectFieldValue(newClass,methodArray,methodInterceptorList);
  return newClass;
}","@SuppressWarnings(""String_Node_Str"") protected <T>Class<T> generate(ClassDefiner cd,Pair2[] pair2s,String newName,Class<T> klass,Constructor<T>[] constructors){
  try {
    return (Class<T>)cd.load(newName);
  }
 catch (  ClassNotFoundException e) {
  }
  Method[] methodArray=new Method[pair2s.length];
  List<MethodInterceptor>[] methodInterceptorList=new List[pair2s.length];
  for (int i=0; i < pair2s.length; i++) {
    Pair2 pair2=pair2s[i];
    methodArray[i]=pair2.method;
    methodInterceptorList[i]=pair2.listeners;
  }
  byte[] bytes=ClassY.enhandClass(klass,newName,methodArray,constructors);
  if (debug)   Files.write(new File(newName),bytes);
  Class<T> newClass=(Class<T>)cd.define(newName,bytes);
  try {
    Mirror<T> mirror=Mirror.me(newClass);
    mirror.setValue(null,MethodArray_FieldName,methodArray);
    mirror.setValue(null,MethodInterceptorList_FieldName,methodInterceptorList);
  }
 catch (  Throwable e) {
  }
  return newClass;
}"
43526,"private void addField(){
  AopToolKit.addFields(cw);
}","private void addField(){
  cw.visitField(ACC_PRIVATE + ACC_STATIC,AsmClassAgent.MethodArray_FieldName,""String_Node_Str"",null,null).visitEnd();
  cw.visitField(ACC_PRIVATE + ACC_STATIC,AsmClassAgent.MethodInterceptorList_FieldName,""String_Node_Str"",""String_Node_Str"",null).visitEnd();
}"
43527,"public static boolean isJDK6(){
  InputStream is=null;
  try {
    String classFileName=Lang.class.getName().replace('.','/') + ""String_Node_Str"";
    is=Lang.class.getResourceAsStream(classFileName);
    if (is == null)     is=Lang.class.getResourceAsStream(""String_Node_Str"" + classFileName);
    if (is != null && is.available() > 8) {
      is.skip(7);
switch (is.read()) {
case 50:
        return true;
    }
  }
}
 catch (Throwable e) {
}
 finally {
  Streams.safeClose(is);
}
return false;
}","public static boolean isJDK6(){
  InputStream is=null;
  try {
    String classFileName=Lang.class.getName().replace('.','/') + ""String_Node_Str"";
    is=Lang.class.getResourceAsStream(classFileName);
    if (is == null)     is=Lang.class.getResourceAsStream(""String_Node_Str"" + classFileName);
    if (is != null && is.available() > 8) {
      is.skip(7);
      return is.read() > 49;
    }
  }
 catch (  Throwable e) {
  }
 finally {
    Streams.safeClose(is);
  }
  return false;
}"
43528,"public String getRealPath(String path){
  if (path.startsWith(""String_Node_Str""))   return new File(""String_Node_Str"" + path).getAbsolutePath();
  if (path.startsWith(""String_Node_Str""))   path=path.substring(""String_Node_Str"".length());
  if (path.startsWith(""String_Node_Str""))   path=path.substring(""String_Node_Str"".length());
  return new File(path).getAbsolutePath();
}","public String getRealPath(String path){
  if (path.startsWith(""String_Node_Str""))   return new File(path.substring(""String_Node_Str"".length())).getAbsolutePath();
  if (path.startsWith(""String_Node_Str""))   return new File(path.substring(""String_Node_Str"".length())).getAbsolutePath();
  if (path.startsWith(""String_Node_Str""))   return new File(""String_Node_Str"" + path).getAbsolutePath();
  return new File(path).getAbsolutePath();
}"
43529,"/** 
 * 将集合编程变成指定类型的列表
 * @param coll 集合对象
 * @param classOfList 列表类型
 * @return 列表对象
 */
public static <E>List<E> collection2list(Collection<E> coll,Class<List<E>> classOfList){
  if (coll instanceof List<?>)   return (List<E>)coll;
  List<E> list;
  try {
    list=(null == classOfList ? new ArrayList<E>(coll.size()) : classOfList.newInstance());
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
  for (Iterator<E> it=coll.iterator(); it.hasNext(); ) {
    list.add(it.next());
  }
  return list;
}","/** 
 * 将集合编程变成指定类型的列表
 * @param col 集合对象
 * @param classOfList 列表类型
 * @return 列表对象
 */
public static <E>List<E> collection2list(Collection<?> col,Class<E> eleType){
  if (null == col)   return null;
  List<E> list=new ArrayList<E>(col.size());
  for (  Object obj : col)   list.add(Castors.me().castTo(obj,eleType));
  return list;
}"
43530,"/** 
 * 根据一个 Map，和给定的对象类型，创建一个新的 JAVA 对象
 * @param src Map 对象
 * @param toType JAVA 对象类型
 * @return JAVA 对象
 * @throws FailToCastObjectException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>T map2Object(Map<?,?> src,Class<T> toType) throws FailToCastObjectException {
  if (null == toType)   throw new FailToCastObjectException(""String_Node_Str"");
  if (toType == Map.class)   return (T)src;
  if (Map.class.isAssignableFrom(toType)) {
    Map map;
    try {
      map=(Map)toType.newInstance();
      map.putAll(src);
      return (T)map;
    }
 catch (    Exception e) {
      throw new FailToCastObjectException(""String_Node_Str"",e);
    }
  }
  Mirror<T> mirror=Mirror.me(toType);
  T obj=mirror.born();
  for (  Field field : mirror.getFields()) {
    if (src.containsKey(field.getName())) {
      Object v=src.get(field.getName());
      if (null == v)       continue;
      Class<?> ft=field.getType();
      Object vv=null;
      if (v instanceof Collection) {
        Collection c=(Collection)v;
        if (ft.isArray()) {
          vv=Lang.collection2array(c,ft.getComponentType());
        }
 else {
          Collection newCol;
          Class eleType=Mirror.getGenericTypes(field,0);
          if (ft == List.class) {
            newCol=new ArrayList(c.size());
          }
 else           if (ft == Set.class) {
            newCol=new LinkedHashSet();
          }
 else {
            try {
              newCol=(Collection)ft.newInstance();
            }
 catch (            Exception e) {
              throw Lang.wrapThrow(e);
            }
          }
          for (          Object ele : c) {
            newCol.add(Castors.me().castTo(ele,eleType));
          }
          vv=newCol;
        }
      }
 else       if (v instanceof Map) {
        final Map map;
        if (ft == Map.class) {
          map=new HashMap();
        }
 else {
          try {
            map=(Map)ft.newInstance();
          }
 catch (          Exception e) {
            throw new FailToCastObjectException(""String_Node_Str"",e);
          }
        }
        final Class<?> valType=Mirror.getGenericTypes(field,1);
        each(v,new Each<Entry>(){
          public void invoke(          int i,          Entry en,          int length){
            map.put(en.getKey(),Castors.me().castTo(en.getValue(),valType));
          }
        }
);
        vv=map;
      }
 else {
        vv=Castors.me().castTo(v,ft);
      }
      mirror.setValue(obj,field,vv);
    }
  }
  return obj;
}","/** 
 * 根据一个 Map，和给定的对象类型，创建一个新的 JAVA 对象
 * @param src Map 对象
 * @param toType JAVA 对象类型
 * @return JAVA 对象
 * @throws FailToCastObjectException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>T map2Object(Map<?,?> src,Class<T> toType) throws FailToCastObjectException {
  if (null == toType)   throw new FailToCastObjectException(""String_Node_Str"");
  if (toType == Map.class)   return (T)src;
  if (Map.class.isAssignableFrom(toType)) {
    Map map;
    try {
      map=(Map)toType.newInstance();
      map.putAll(src);
      return (T)map;
    }
 catch (    Exception e) {
      throw new FailToCastObjectException(""String_Node_Str"",e);
    }
  }
  if (toType.isArray())   return (T)Lang.collection2array(src.values(),toType.getComponentType());
  if (List.class == toType) {
    return (T)Lang.collection2list(src.values());
  }
  Mirror<T> mirror=Mirror.me(toType);
  T obj=mirror.born();
  for (  Field field : mirror.getFields()) {
    if (src.containsKey(field.getName())) {
      Object v=src.get(field.getName());
      if (null == v)       continue;
      Class<?> ft=field.getType();
      Object vv=null;
      if (v instanceof Collection) {
        Collection c=(Collection)v;
        if (ft.isArray()) {
          vv=Lang.collection2array(c,ft.getComponentType());
        }
 else {
          Collection newCol;
          Class eleType=Mirror.getGenericTypes(field,0);
          if (ft == List.class) {
            newCol=new ArrayList(c.size());
          }
 else           if (ft == Set.class) {
            newCol=new LinkedHashSet();
          }
 else {
            try {
              newCol=(Collection)ft.newInstance();
            }
 catch (            Exception e) {
              throw Lang.wrapThrow(e);
            }
          }
          for (          Object ele : c) {
            newCol.add(Castors.me().castTo(ele,eleType));
          }
          vv=newCol;
        }
      }
 else       if (v instanceof Map) {
        final Map map;
        if (ft == Map.class) {
          map=new HashMap();
        }
 else {
          try {
            map=(Map)ft.newInstance();
          }
 catch (          Exception e) {
            throw new FailToCastObjectException(""String_Node_Str"",e);
          }
        }
        final Class<?> valType=Mirror.getGenericTypes(field,1);
        each(v,new Each<Entry>(){
          public void invoke(          int i,          Entry en,          int length){
            map.put(en.getKey(),Castors.me().castTo(en.getValue(),valType));
          }
        }
);
        vv=map;
      }
 else {
        vv=Castors.me().castTo(v,ft);
      }
      mirror.setValue(obj,field,vv);
    }
  }
  return obj;
}"
43531,"/** 
 * 将集合变成指定类型的数组
 * @param coll 集合对象
 * @param eleType 数组元素类型
 * @return 数组
 */
public static Object collection2array(Collection<?> coll,Class<?> eleType){
  if (null == coll)   return null;
  Object re=Array.newInstance(eleType,coll.size());
  int i=0;
  for (Iterator<?> it=coll.iterator(); it.hasNext(); ) {
    Object obj=it.next();
    if (null == obj)     Array.set(re,i++,null);
 else     Array.set(re,i++,Castors.me().castTo(obj,eleType));
  }
  return re;
}","/** 
 * 将集合变成指定类型的数组
 * @param col 集合对象
 * @param eleType 数组元素类型
 * @return 数组
 */
@SuppressWarnings(""String_Node_Str"") public static <E>E[] collection2array(Collection<?> col,Class<E> eleType){
  if (null == col)   return null;
  Object re=Array.newInstance(eleType,col.size());
  int i=0;
  for (Iterator<?> it=col.iterator(); it.hasNext(); ) {
    Object obj=it.next();
    if (null == obj)     Array.set(re,i++,null);
 else     Array.set(re,i++,Castors.me().castTo(obj,eleType));
  }
  return (E[])re;
}"
43532,"private <T>T getAs(Class<T> toType,String key,T dft){
  Object obj=get(key);
  if (null == obj)   return dft;
  return Castors.me().castTo(obj,toType);
}","public <T>T getAs(Class<T> toType,String key,T dft){
  Object obj=get(key);
  if (null == obj)   return dft;
  return Castors.me().castTo(obj,toType);
}"
43533,"public Object[] adapt(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  String str;
  try {
    str=Lang.readAll(new InputStreamReader(request.getInputStream(),Encoding.CHARSET_UTF8));
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
  Map<String,Object> map=Lang.map(str);
  Object[] args=new Object[injs.length];
  int i=fillPathArgs(request,response,pathArgs,args);
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(sc,request,response,map);
  }
  return args;
}","public Object[] adapt(ServletContext sc,HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  String str;
  try {
    str=Lang.readAll(new InputStreamReader(request.getInputStream(),Encoding.CHARSET_UTF8));
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
  Object[] args=new Object[injs.length];
  int i=fillPathArgs(request,response,pathArgs,args);
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(sc,request,response,str);
  }
  return args;
}"
43534,"/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <T>T parseFromCurrentLocation(Class<T> type,Class<?> componentType) throws Exception {
  Mirror<T> me=Mirror.me(type);
switch (cursor) {
case -1:
    return null;
case '[':
  Class<?> compType=componentType;
boolean reurnAsList=true;
List list=null;
if (null == type) {
list=new LinkedList();
}
 else if (type.isArray()) {
list=new LinkedList();
reurnAsList=false;
compType=type.getComponentType();
}
 else if (List.class.isAssignableFrom(type)) {
reurnAsList=true;
if (me.is(List.class)) list=new LinkedList();
 else list=(List)me.born();
}
 else {
throw makeError(String.format(""String_Node_Str"",type.getName()));
}
nextChar();
skipCommentsAndBlank();
while (cursor != -1 && cursor != ']') {
Object o=parseFromCurrentLocation(compType,null);
list.add(o);
skipCommentsAndBlank();
if (cursor == ']') break;
if (cursor != ',') throw makeError(""String_Node_Str"");
nextChar();
skipCommentsAndBlank();
}
nextChar();
if (reurnAsList) return (T)list;
Object ary=Array.newInstance(compType,list.size());
int i=0;
for (Iterator it=list.iterator(); it.hasNext(); ) Array.set(ary,i++,Castors.me().castTo(it.next(),compType));
return (T)ary;
case '{':
nextChar();
skipCommentsAndBlank();
if (Map.class == type) me=(Mirror<T>)Mirror.me(TreeMap.class);
if (null == me || Map.class.isAssignableFrom(type)) {
Map<String,Object> map=null == me ? new TreeMap<String,Object>() : (Map<String,Object>)me.born();
while (cursor != -1 && cursor != '}') {
String name=readFieldName();
Object value=parseFromJson(componentType,null);
map.put(name,value);
if (!findNextNamePair()) break;
}
nextChar();
return (T)map;
}
T obj=me.born();
while (cursor != -1 && cursor != '}') {
Field f=me.getField(readFieldName());
Class<?> ft=f.getType();
Class<?> eleType=null;
if (List.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 0) eleType=ts[0];
}
 else if (Map.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 1) eleType=ts[1];
}
Object value=parseFromJson(f.getType(),eleType);
me.setValue(obj,f,value);
if (!findNextNamePair()) break;
}
nextChar();
return obj;
case 'u':
if ('n' != (char)nextChar() & 'd' != (char)nextChar() & 'e' != (char)nextChar() & 'f' != (char)nextChar() & 'i' != (char)nextChar() & 'n' != (char)nextChar() & 'e' != (char)nextChar() & 'd' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case 'n':
if ('u' != (char)nextChar() & 'l' != (char)nextChar() & 'l' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case '\'':
case '""':
StringBuilder vs=readString();
String value=vs.toString();
if (null == me || me.is(String.class)) return (T)value;
return Castors.me().castTo(value,me.getType());
case 't':
if ('u' != (char)nextChar() & 'r' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(true);
case 'f':
if ('a' != (char)nextChar() & 'l' != (char)nextChar() & 's' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(false);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
StringBuilder sb=new StringBuilder();
do {
sb.append((char)cursor);
nextChar();
}
 while (cursor != ' ' && cursor != -1 && cursor != ',' && cursor != ']' && cursor != '}' && cursor != '/');
String numValue=Strings.trim(sb);
if (null != me) {
if (me.isInt()) {
return (T)Integer.valueOf(numValue);
}
 else if (me.isLong()) {
return (T)Long.valueOf(numValue);
}
 else if (me.isFloat()) {
return (T)Float.valueOf(numValue);
}
 else if (me.isDouble()) {
return (T)Double.valueOf(numValue);
}
 else if (me.isByte()) {
return (T)Byte.valueOf(numValue);
}
}
if (null == me || me.isNumber() || me.is(Object.class)) {
char lastChar=Character.toUpperCase(numValue.charAt(numValue.length() - 1));
if (numValue.indexOf('.') >= 0) {
if (lastChar == 'F') return (T)Float.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Double.valueOf(numValue);
}
 else {
if (lastChar == 'L') return (T)Long.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Integer.valueOf(numValue);
}
}
throw makeError(""String_Node_Str"");
case 'v':
while (-1 != nextChar()) if ('{' == cursor) return parseFromCurrentLocation(type,componentType);
default :
throw makeError(""String_Node_Str"");
}
}","/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <T>T parseFromCurrentLocation(Class<T> type,Class<?> componentType) throws Exception {
  Mirror<T> me=Mirror.me(type);
switch (cursor) {
case -1:
    return null;
case '[':
  Class<?> compType=componentType;
boolean reurnAsList=true;
List list=null;
if (null == type) {
list=new LinkedList();
}
 else if (type.isArray()) {
list=new LinkedList();
reurnAsList=false;
compType=type.getComponentType();
}
 else if (List.class.isAssignableFrom(type)) {
reurnAsList=true;
if (me.is(List.class)) list=new LinkedList();
 else list=(List)me.born();
}
 else {
throw makeError(String.format(""String_Node_Str"",type.getName()));
}
nextChar();
skipCommentsAndBlank();
while (cursor != -1 && cursor != ']') {
Object o=parseFromCurrentLocation(compType,null);
list.add(o);
skipCommentsAndBlank();
if (cursor == ']') break;
if (cursor != ',') throw makeError(""String_Node_Str"");
nextChar();
skipCommentsAndBlank();
}
nextChar();
if (reurnAsList) return (T)list;
Object ary=Array.newInstance(compType,list.size());
int i=0;
for (Iterator it=list.iterator(); it.hasNext(); ) Array.set(ary,i++,Castors.me().castTo(it.next(),compType));
return (T)ary;
case '{':
nextChar();
skipCommentsAndBlank();
if (Map.class == type) me=(Mirror<T>)Mirror.me(TreeMap.class);
if (null == me || Map.class.isAssignableFrom(type)) {
Map<String,Object> map=null == me ? new TreeMap<String,Object>() : (Map<String,Object>)me.born();
while (cursor != -1 && cursor != '}') {
String name=readFieldName();
Object value=parseFromJson(componentType,null);
map.put(name,value);
if (!findNextNamePair()) break;
}
nextChar();
return (T)map;
}
T obj=me.born();
while (cursor != -1 && cursor != '}') {
Field f=null;
Class<?> ft=null;
Class<?> eleType=null;
try {
f=me.getField(readFieldName());
ft=f.getType();
}
 catch (NoSuchFieldException e) {
}
if (null != ft) {
if (List.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 0) eleType=ts[0];
}
 else if (Map.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 1) eleType=ts[1];
}
}
Object value=parseFromJson(ft,eleType);
if (null != f) me.setValue(obj,f,value);
if (!findNextNamePair()) break;
}
nextChar();
return obj;
case 'u':
if ('n' != (char)nextChar() & 'd' != (char)nextChar() & 'e' != (char)nextChar() & 'f' != (char)nextChar() & 'i' != (char)nextChar() & 'n' != (char)nextChar() & 'e' != (char)nextChar() & 'd' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case 'n':
if ('u' != (char)nextChar() & 'l' != (char)nextChar() & 'l' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case '\'':
case '""':
StringBuilder vs=readString();
String value=vs.toString();
if (null == me || me.is(String.class)) return (T)value;
return Castors.me().castTo(value,me.getType());
case 't':
if ('u' != (char)nextChar() & 'r' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(true);
case 'f':
if ('a' != (char)nextChar() & 'l' != (char)nextChar() & 's' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(false);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
StringBuilder sb=new StringBuilder();
do {
sb.append((char)cursor);
nextChar();
}
 while (cursor != ' ' && cursor != -1 && cursor != ',' && cursor != ']' && cursor != '}' && cursor != '/');
String numValue=Strings.trim(sb);
if (null != me) {
if (me.isInt()) {
return (T)Integer.valueOf(numValue);
}
 else if (me.isLong()) {
return (T)Long.valueOf(numValue);
}
 else if (me.isFloat()) {
return (T)Float.valueOf(numValue);
}
 else if (me.isDouble()) {
return (T)Double.valueOf(numValue);
}
 else if (me.isByte()) {
return (T)Byte.valueOf(numValue);
}
}
if (null == me || me.isNumber() || me.is(Object.class)) {
char lastChar=Character.toUpperCase(numValue.charAt(numValue.length() - 1));
if (numValue.indexOf('.') >= 0) {
if (lastChar == 'F') return (T)Float.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Double.valueOf(numValue);
}
 else {
if (lastChar == 'L') return (T)Long.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Integer.valueOf(numValue);
}
}
throw makeError(""String_Node_Str"");
case 'v':
while (-1 != nextChar()) if ('{' == cursor) return parseFromCurrentLocation(type,componentType);
default :
throw makeError(""String_Node_Str"");
}
}"
43535,"public View make(Ioc ioc,String type,String value){
  type=type.toLowerCase();
  if (VIEW_JSP.equals(type))   return new JspView(value);
  if (VIEW_JSON.equals(type))   if (Strings.isBlank(value))   return new UTF8JsonView(JsonFormat.compact());
 else   return new UTF8JsonView(Json.fromJson(JsonFormat.class,value));
  if (VIEW_REDIRECT.equals(type) || VIEW_REDIRECT2.equals(type))   return new ServerRedirectView(value);
  if (VIEW_FORWARD.equals(type) || VIEW_FORWARD2.equals(type))   return new ForwardView(value);
  if (VIEW_VOID.equals(type))   return new VoidView();
  if (VIEW_IOC.equals(type))   return ioc.get(View.class,value);
  if (VIEW_HTTP.equals(type))   return new HttpStatusView(Integer.parseInt(value));
  if (VIEW_STRING.equals(type))   return new RawView(value);
  return null;
}","public View make(Ioc ioc,String type,String value){
  type=type.toLowerCase();
  if (VIEW_JSP.equals(type))   return new JspView(value);
  if (VIEW_JSON.equals(type))   if (Strings.isBlank(value))   return new UTF8JsonView(JsonFormat.compact());
 else   return new UTF8JsonView(Json.fromJson(JsonFormat.class,value));
  if (VIEW_REDIRECT.equals(type) || VIEW_REDIRECT2.equals(type))   return new ServerRedirectView(value);
  if (VIEW_FORWARD.equals(type) || VIEW_FORWARD2.equals(type))   return new ForwardView(value);
  if (VIEW_VOID.equals(type))   return new VoidView();
  if (VIEW_IOC.equals(type))   return ioc.get(View.class,value);
  if (VIEW_HTTP.equals(type))   return new HttpStatusView(Integer.parseInt(value));
  if (VIEW_RAW.equals(type))   return new RawView(value);
  return null;
}"
43536,"public int updateIgnoreNull(final Object obj){
  final int[] re={0};
  FieldFilter.create(obj.getClass(),true).run(new Atom(){
    public void run(){
      re[0]=update(obj);
    }
  }
);
  return re[0];
}","public int updateIgnoreNull(final Object obj){
  if (null == obj)   return 0;
  Object first=Lang.first(obj);
  if (null == first)   return 0;
  final int[] re={0};
  FieldFilter.create(first.getClass(),true).run(new Atom(){
    public void run(){
      re[0]=update(obj);
    }
  }
);
  return re[0];
}"
43537,"/** 
 * 根据一段字符串，生成一个List 对象。
 * @param str 参照 JSON 标准的字符串，但是可以没有前后的中括号
 * @return List 对象
 */
@SuppressWarnings(""String_Node_Str"") public static List<Object> list(String str){
  if (null == str)   return null;
  if ((str.length() > 0 && str.charAt(0) == '[') && str.endsWith(""String_Node_Str""))   return (List<Object>)Json.fromJson(str);
  return (List<Object>)Json.fromJson(""String_Node_Str"" + str + ""String_Node_Str"");
}","/** 
 * 较方便的创建一个列表，比如： <pre> List《Pet》 pets = Lang.list(pet1, pet2, pet3); </pre>
 * @param eles 可变参数
 * @return 列表对象
 */
public static <T>List<T> list(T... eles){
  List<T> list=new ArrayList<T>(eles.length);
  for (  T ele : eles)   list.add(ele);
  return list;
}"
43538,"@Test public void test_first4_map_collection(){
  assertNull(Lang.first(new HashMap<String,String>()));
  Map<?,?> map1=Lang.map(""String_Node_Str"");
  assertTrue(map1.entrySet().contains(Lang.first(map1)));
  assertNull(Lang.first(new ArrayList<String>()));
  List<Object> l=Lang.list(""String_Node_Str"");
  assertEquals(1,Lang.first(l));
}","@Test public void test_first4_map_collection(){
  assertNull(Lang.first(new HashMap<String,String>()));
  Map<?,?> map1=Lang.map(""String_Node_Str"");
  assertTrue(map1.entrySet().contains(Lang.first(map1)));
  assertNull(Lang.first(new ArrayList<String>()));
  List<Object> l=Lang.list4(""String_Node_Str"");
  assertEquals(1,Lang.first(l));
}"
43539,"public Object remove(Object arg0){
  return map.remove(arg0);
}","public Object remove(Object key){
  return map.remove(key.toString().toLowerCase());
}"
43540,"public boolean containsValue(Object arg0){
  return map.containsValue(arg0);
}","public boolean containsValue(Object value){
  return map.containsValue(value);
}"
43541,"public Object put(String arg0,Object arg1){
  return map.put(arg0,arg1);
}","public Object put(String name,Object value){
  return map.put(name.toLowerCase(),value);
}"
43542,"public void putAll(Map<? extends String,? extends Object> arg0){
  map.putAll(arg0);
}","public void putAll(Map<? extends String,? extends Object> out){
  for (  Entry<? extends String,? extends Object> entry : out.entrySet())   map.put(entry.getKey().toLowerCase(),entry.getValue());
}"
43543,"public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
      if (meta.getColumnType(i) == Types.CLOB) {
        re.set(name.toLowerCase(),rs.getString(i));
      }
 else {
        re.set(name.toLowerCase(),rs.getObject(i));
      }
    }
    return re;
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}","public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
      if (meta.getColumnType(i) == Types.CLOB) {
        re.set(name,rs.getString(i));
      }
 else {
        re.set(name,rs.getObject(i));
      }
    }
    return re;
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}"
43544,"/** 
 * 设置值
 * @param name 字段名
 * @param value 字段值
 * @return 记录本身
 */
public Record set(String name,Object value){
  map.put(name,value);
  return this;
}","/** 
 * 设置值
 * @param name 字段名
 * @param value 字段值
 * @return 记录本身
 */
public Record set(String name,Object value){
  map.put(name.toLowerCase(),value);
  return this;
}"
43545,"public Set<java.util.Map.Entry<String,Object>> entrySet(){
  return map.entrySet();
}","public Set<Entry<String,Object>> entrySet(){
  return map.entrySet();
}"
43546,"public boolean containsKey(Object arg0){
  return map.containsKey(arg0);
}","public boolean containsKey(Object key){
  return map.containsKey(key);
}"
43547,"public boolean equals(Object arg0){
  return map.equals(arg0);
}","public boolean equals(Object out){
  return map.equals(out);
}"
43548,"protected ParamInjector evalInjector(Class<?> type,Param param){
  if (Map.class.isAssignableFrom(type))   return new MapSelfInjector();
  if (null == param)   return null;
  String paramName=param.value();
  if (File.class.isAssignableFrom(type))   return new FileInjector(paramName);
  if (FieldMeta.class.isAssignableFrom(type))   return new FileMetaInjector(paramName);
  if (TempFile.class.isAssignableFrom(type))   return new TempFileInjector(paramName);
  if (List.class.isAssignableFrom(type))   return new MapListInjector(paramName);
  if (type.isArray())   return new MapArrayInjector(type.getComponentType(),paramName);
  if (""String_Node_Str"".equals(paramName)) {
    if (type.isAssignableFrom(Map.class))     return new MapPairInjector();
    return new MapReferInjector(null,type);
  }
 else   if (paramName.startsWith(""String_Node_Str"") && paramName.length() > 2) {
    return new MapReferInjector(paramName.substring(2),type);
  }
  return new MapItemInjector(paramName,type);
}","protected ParamInjector evalInjector(Class<?> type,Param param){
  if (Map.class.isAssignableFrom(type))   return new MapSelfInjector();
  if (null == param)   return null;
  String paramName=param.value();
  if (File.class.isAssignableFrom(type))   return new FileInjector(paramName);
  if (FieldMeta.class.isAssignableFrom(type))   return new FileMetaInjector(paramName);
  if (TempFile.class.isAssignableFrom(type))   return new TempFileInjector(paramName);
  if (InputStream.class.isAssignableFrom(type))   return new InputStreamInjector(paramName);
  if (Reader.class.isAssignableFrom(type))   return new ReaderInjector(paramName);
  if (List.class.isAssignableFrom(type))   return new MapListInjector(paramName);
  if (type.isArray())   return new MapArrayInjector(type.getComponentType(),paramName);
  if (""String_Node_Str"".equals(paramName)) {
    if (type.isAssignableFrom(Map.class))     return new MapPairInjector();
    return new MapReferInjector(null,type);
  }
 else   if (paramName.startsWith(""String_Node_Str"") && paramName.length() > 2) {
    return new MapReferInjector(paramName.substring(2),type);
  }
  return new MapItemInjector(paramName,type);
}"
43549,"@SuppressWarnings(""String_Node_Str"") public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=((Map<String,Object>)refer).get(name);
  if (obj == null)   return null;
  if (obj instanceof TempFile) {
    return ((TempFile)obj).getFile();
  }
 else {
    List<?> list=(List<?>)obj;
    if (list.isEmpty())     return null;
 else     return ((TempFile)list.get(0)).getFile();
  }
}","public Object get(ServletContext sc,HttpServletRequest req,HttpServletResponse resp,Object refer){
  return getFile(refer);
}"
43550,"/** 
 * 执行根据流来加载sql内容的操作
 * @param stream
 * @throws IOException
 * @author mawenming at 2010-4-10 上午10:04:17
 */
private void loadSQL(Reader stream) throws IOException {
  BufferedReader bufferedReader=null;
  try {
    bufferedReader=new BufferedReader(stream);
    SqlFileBuilder p=new SqlFileBuilder(bufferedReader);
    Iterator<String> it=p.keys().iterator();
    _sql_keys=new ArrayList<String>(p.map.size());
    while (it.hasNext()) {
      String key=it.next();
      String value=Strings.trim(p.get(key));
      addSql(key,value);
    }
  }
  finally {
    Streams.safeClose(bufferedReader);
    Streams.safeClose(stream);
  }
}","/** 
 * 执行根据字符流来加载sql内容的操作
 * @param reader
 * @throws IOException
 * @author mawenming at 2010-4-10 上午10:04:17
 */
protected void loadSQL(Reader reader) throws IOException {
  BufferedReader bufferedReader=null;
  try {
    bufferedReader=new BufferedReader(reader);
    SqlFileBuilder p=new SqlFileBuilder(bufferedReader);
    Iterator<String> it=p.keys().iterator();
    _sql_keys=new ArrayList<String>(p.map.size());
    while (it.hasNext()) {
      String key=it.next();
      String value=Strings.trim(p.get(key));
      addSql(key,value);
    }
  }
  finally {
    Streams.safeClose(bufferedReader);
    Streams.safeClose(reader);
  }
}"
43551,"public void refresh(){
  List<NutResource> nrs=new LinkedList<NutResource>();
  for (  String path : paths) {
    File f=Files.findFile(path);
    if (null == f)     continue;
    if (!f.getAbsolutePath().contains(""String_Node_Str"") && f.isFile()) {
      nrs.add(new FileResource(f.getParentFile(),f));
      if (autoscan == false)       continue;
    }
    List<NutResource> list=Scans.me().scan(path,regex);
    String parent=path;
    int pos=path.lastIndexOf('/');
    if (pos == -1)     pos=path.lastIndexOf('\\');
    if (pos > 0)     parent=path.substring(0,pos);
    if (Strings.isBlank(parent)) {
      nrs.addAll(list);
    }
 else {
      for (      NutResource nr : list)       if (autoscan) {
        if (nr.getName().startsWith(parent)) {
          nrs.add(nr);
        }
      }
 else {
        if (nr.getName().equals(path)) {
          nrs.add(nr);
        }
      }
    }
  }
  buildSQLMaps(nrs);
}","public void refresh(){
  List<InputStream> list=Scans.me().loadResource(null,paths);
  _sql_map=new HashMap<String,String>();
  for (  InputStream ins : list) {
    Reader r=new InputStreamReader(ins);
    try {
      loadSQL(r);
    }
 catch (    IOException e) {
      throw Lang.wrapThrow(e);
    }
  }
}"
43552,"public FileSqlManager(String... paths){
  this.paths=paths;
  this.autoscan=true;
}","public FileSqlManager(String... paths){
  this.paths=paths;
}"
43553,"public JsonLoader(String... paths){
  this.setMap(new HashMap<String,Map<String,Object>>());
  try {
    for (    String path : paths) {
      File f=Files.findFile(path);
      if (null != f && f.isFile()) {
        loadFromInputStream(new FileInputStream(f));
        continue;
      }
      List<NutResource> rsList=Scans.me().scan(path,""String_Node_Str"");
      for (      NutResource nr : rsList) {
        loadFromInputStream(nr.getInputStream());
      }
      if (rsList.size() < 1)       throw Lang.makeThrow(RuntimeException.class,""String_Node_Str"",path);
    }
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
}","public JsonLoader(String... paths){
  this.setMap(new HashMap<String,Map<String,Object>>());
  List<InputStream> list=Scans.me().loadResource(""String_Node_Str"",paths);
  for (  InputStream ins : list)   loadFromInputStream(ins);
}"
43554,"public XmlIocLoader(String... fileNames){
  try {
    DocumentBuilder builder=Lang.xmls();
    Document document;
    for (    String fileName : fileNames) {
      document=builder.parse(Files.findFileAsStream(fileName));
      document.normalizeDocument();
      NodeList nodeListZ=((Element)document.getDocumentElement()).getChildNodes();
      for (int i=0; i < nodeListZ.getLength(); i++) {
        if (nodeListZ.item(i) instanceof Element)         paserBean((Element)nodeListZ.item(i),false);
      }
    }
    handleParent();
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",Json.toJson(iocMap));
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
}","public XmlIocLoader(String... fileNames){
  try {
    DocumentBuilder builder=Lang.xmls();
    Document document;
    List<InputStream> list=Scans.me().loadResource(""String_Node_Str"",fileNames);
    for (    InputStream ins : list) {
      document=builder.parse(ins);
      document.normalizeDocument();
      NodeList nodeListZ=((Element)document.getDocumentElement()).getChildNodes();
      for (int i=0; i < nodeListZ.getLength(); i++) {
        if (nodeListZ.item(i) instanceof Element)         paserBean((Element)nodeListZ.item(i),false);
      }
      Streams.safeClose(ins);
    }
    handleParent();
    if (LOG.isDebugEnabled())     LOG.debugf(""String_Node_Str"",Json.toJson(iocMap));
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
}"
43555,"@Test public void test_dynamic_insert(){
  pojos.init();
  ((NutDao)dao).setSqlManager(new FileSqlManager(""String_Node_Str"").setAutoscan(false));
  int platoonId=23;
  try {
    pojos.initPlatoon(platoonId);
    Sql sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",12);
    dao.execute(sql);
    sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",13);
    dao.execute(sql);
    sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",14);
    dao.execute(sql);
    sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",15);
    dao.execute(sql);
    TableName.run(platoonId,new Atom(){
      public void run(){
        assertEquals(4,dao.count(Tank.class));
      }
    }
);
  }
 catch (  SqlNotFoundException e) {
  }
 finally {
    pojos.dropPlatoon(platoonId);
  }
}","@Test public void test_dynamic_insert(){
  pojos.init();
  ((NutDao)dao).setSqlManager(new FileSqlManager(""String_Node_Str""));
  int platoonId=23;
  try {
    pojos.initPlatoon(platoonId);
    Sql sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",12);
    dao.execute(sql);
    sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",13);
    dao.execute(sql);
    sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",14);
    dao.execute(sql);
    sql=dao.sqls().create(""String_Node_Str"");
    sql.vars().set(""String_Node_Str"",platoonId);
    sql.params().set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",15);
    dao.execute(sql);
    TableName.run(platoonId,new Atom(){
      public void run(){
        assertEquals(4,dao.count(Tank.class));
      }
    }
);
  }
 catch (  SqlNotFoundException e) {
  }
 finally {
    pojos.dropPlatoon(platoonId);
  }
}"
43556,"private void reload(){
  HashMap<Class<?>,Method> settingMap=new HashMap<Class<?>,Method>();
  for (  Method m1 : setting.getClass().getMethods()) {
    Class<?>[] pts=m1.getParameterTypes();
    if (pts.length == 1 && Castor.class.isAssignableFrom(pts[0]))     settingMap.put(pts[0],m1);
  }
  this.map=new HashMap<String,Map<String,Castor<?,?>>>();
  for (Iterator<Class<?>> it=paths.iterator(); it.hasNext(); ) {
    Class<?> baseClass=it.next();
    if (baseClass == null)     continue;
    List<Class<?>> list=Scans.me().scanPackage(baseClass);
    if (null == list || list.size() == 0)     continue;
    for (    Class<?> klass : list) {
      try {
        if (Modifier.isAbstract(klass.getModifiers()))         continue;
        if (!Castor.class.isAssignableFrom(klass))         continue;
        Castor<?,?> castor=(Castor<?,?>)klass.newInstance();
        Map<String,Castor<?,?>> map2=this.map.get(castor.getFromClass().getName());
        if (null == map2) {
          map2=new HashMap<String,Castor<?,?>>();
          this.map.put(castor.getFromClass().getName(),map2);
        }
        if (!map2.containsKey(castor.getToClass().getName())) {
          Method m=settingMap.get(castor.getClass());
          if (null == m) {
            for (            Entry<Class<?>,Method> entry : settingMap.entrySet()) {
              Class<?> cc=entry.getKey();
              if (cc.isAssignableFrom(klass)) {
                m=settingMap.get(cc);
                break;
              }
            }
          }
          if (null != m)           m.invoke(setting,castor);
          map2.put(castor.getToClass().getName(),castor);
        }
      }
 catch (      Throwable e) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",klass,e.getMessage());
      }
    }
  }
}","private void reload(){
  HashMap<Class<?>,Method> settingMap=new HashMap<Class<?>,Method>();
  for (  Method m1 : setting.getClass().getMethods()) {
    Class<?>[] pts=m1.getParameterTypes();
    if (pts.length == 1 && Castor.class.isAssignableFrom(pts[0]))     settingMap.put(pts[0],m1);
  }
  this.map=new HashMap<String,Map<String,Castor<?,?>>>();
  for (Iterator<Class<?>> it=paths.iterator(); it.hasNext(); ) {
    Class<?> baseClass=it.next();
    if (baseClass == null)     continue;
    List<Class<?>> list=Scans.me().scanPackage(baseClass);
    if (null == list || list.size() == 0)     continue;
    for (    Class<?> klass : list) {
      try {
        if (Modifier.isAbstract(klass.getModifiers()))         continue;
        if (!Castor.class.isAssignableFrom(klass))         continue;
        Castor<?,?> castor=(Castor<?,?>)klass.newInstance();
        Map<String,Castor<?,?>> map2=this.map.get(castor.getFromClass().getName());
        if (null == map2) {
          map2=new HashMap<String,Castor<?,?>>();
          this.map.put(castor.getFromClass().getName(),map2);
        }
        if (!map2.containsKey(castor.getToClass().getName())) {
          Method m=settingMap.get(castor.getClass());
          if (null == m) {
            for (            Entry<Class<?>,Method> entry : settingMap.entrySet()) {
              Class<?> cc=entry.getKey();
              if (cc.isAssignableFrom(klass)) {
                m=settingMap.get(cc);
                break;
              }
            }
          }
          if (null != m)           m.invoke(setting,castor);
          map2.put(castor.getToClass().getName(),castor);
        }
      }
 catch (      Throwable e) {
        if (log.isWarnEnabled())         log.warnf(""String_Node_Str"",klass,e.getMessage());
      }
    }
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",map.size());
  if (map.size() == 0 && log.isErrorEnabled())   log.error(""String_Node_Str"");
}"
43557,"@Override public java.util.Date cast(String src,Class<?> toType,String... args){
  try {
    return dateTimeFormat.parse(src);
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}","@Override public java.util.Date cast(String src,Class<?> toType,String... args){
  try {
    return dateFormat.parse(src);
  }
 catch (  ParseException e) {
    throw Lang.wrapThrow(e);
  }
}"
43558,"public void refresh(){
  List<NutResource> nrs=new LinkedList<NutResource>();
  for (  String path : paths) {
    File f=Files.findFile(path);
    if (null == f)     continue;
    if (f.isFile()) {
      nrs.add(new FileResource(f.getParentFile(),f));
      if (autoscan == false)       continue;
    }
    List<NutResource> list=Scans.me().scan(path,regex);
    String parent=path;
    int pos=path.lastIndexOf('/');
    if (pos == -1)     pos=path.lastIndexOf('\\');
    if (pos > 0)     parent=path.substring(0,pos);
    if (Strings.isBlank(parent)) {
      nrs.addAll(list);
    }
 else {
      for (      NutResource nr : list)       if (autoscan) {
        if (nr.getName().startsWith(parent)) {
          nrs.add(nr);
        }
      }
 else {
        if (nr.getName().equals(path)) {
          nrs.add(nr);
        }
      }
    }
  }
  buildSQLMaps(nrs);
}","public void refresh(){
  List<NutResource> nrs=new LinkedList<NutResource>();
  for (  String path : paths) {
    File f=Files.findFile(path);
    if (null == f)     continue;
    if (!f.getAbsolutePath().contains(""String_Node_Str"") && f.isFile()) {
      nrs.add(new FileResource(f.getParentFile(),f));
      if (autoscan == false)       continue;
    }
    List<NutResource> list=Scans.me().scan(path,regex);
    String parent=path;
    int pos=path.lastIndexOf('/');
    if (pos == -1)     pos=path.lastIndexOf('\\');
    if (pos > 0)     parent=path.substring(0,pos);
    if (Strings.isBlank(parent)) {
      nrs.addAll(list);
    }
 else {
      for (      NutResource nr : list)       if (autoscan) {
        if (nr.getName().startsWith(parent)) {
          nrs.add(nr);
        }
      }
 else {
        if (nr.getName().equals(path)) {
          nrs.add(nr);
        }
      }
    }
  }
  buildSQLMaps(nrs);
}"
43559,"protected List<NutResource> scanInDir(final Pattern regex,final String base,File f,final boolean ignoreHidden){
  final List<NutResource> list=new ArrayList<NutResource>();
  if (null == f || (ignoreHidden && f.isHidden()) || (!f.exists()))   return list;
  if (!f.isDirectory())   f=f.getParentFile();
  Disks.visitFile(f,new FileVisitor(){
    public void visit(    File file){
      list.add(new FileResource(base,file));
    }
  }
,new FileFilter(){
    public boolean accept(    File theFile){
      if (ignoreHidden && theFile.isHidden())       return false;
      if (theFile.isDirectory())       return true;
      return regex == null || regex.matcher(theFile.getName()).find();
    }
  }
);
  return list;
}","protected List<NutResource> scanInDir(final Pattern regex,final String base,File f,final boolean ignoreHidden){
  final List<NutResource> list=new ArrayList<NutResource>();
  if (null == f || (ignoreHidden && f.isHidden()) || (!f.exists()))   return list;
  if (!f.isDirectory())   f=f.getParentFile();
  Disks.visitFile(f,new FileVisitor(){
    public void visit(    File file){
      list.add(new FileResource(base,file));
    }
  }
,new FileFilter(){
    public boolean accept(    File theFile){
      if (ignoreHidden && theFile.isHidden())       return false;
      if (theFile.isDirectory()) {
        String fnm=theFile.getName().toLowerCase();
        if (""String_Node_Str"".equals(fnm) || ""String_Node_Str"".equals(fnm))         return false;
        return true;
      }
      return regex == null || regex.matcher(theFile.getName()).find();
    }
  }
);
  return list;
}"
43560,"public boolean accept(File theFile){
  if (ignoreHidden && theFile.isHidden())   return false;
  if (theFile.isDirectory())   return true;
  return regex == null || regex.matcher(theFile.getName()).find();
}","public boolean accept(File theFile){
  if (ignoreHidden && theFile.isHidden())   return false;
  if (theFile.isDirectory()) {
    String fnm=theFile.getName().toLowerCase();
    if (""String_Node_Str"".equals(fnm) || ""String_Node_Str"".equals(fnm))     return false;
    return true;
  }
  return regex == null || regex.matcher(theFile.getName()).find();
}"
43561,"@Test public void testString2JavaDate() throws FailToCastObjectException {
  java.util.Date date=Castors.me().cast(""String_Node_Str"",String.class,java.util.Date.class);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  assertEquals(2008,cal.get(Calendar.YEAR));
  assertEquals(5,cal.get(Calendar.MONTH));
  assertEquals(12,cal.get(Calendar.DAY_OF_MONTH));
  assertEquals(15,cal.get(Calendar.HOUR_OF_DAY));
  assertEquals(28,cal.get(Calendar.MINUTE));
  assertEquals(35,cal.get(Calendar.SECOND));
}","@Test public void testString2JavaDate() throws FailToCastObjectException {
  java.util.Date date=Castors.me().castTo(""String_Node_Str"",java.util.Date.class);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  assertEquals(2008,cal.get(Calendar.YEAR));
  assertEquals(5,cal.get(Calendar.MONTH));
  assertEquals(12,cal.get(Calendar.DAY_OF_MONTH));
  assertEquals(0,cal.get(Calendar.HOUR_OF_DAY));
  assertEquals(0,cal.get(Calendar.MINUTE));
  assertEquals(0,cal.get(Calendar.SECOND));
}"
43562,"public View make(Ioc ioc,String type,String value){
  type=type.toLowerCase();
  if (VIEW_JSP.equals(type))   return new JspView(value);
  if (VIEW_JSON.equals(type))   if (Strings.isBlank(value))   return new UTF8JsonView(JsonFormat.compact());
 else   return new UTF8JsonView(Json.fromJson(JsonFormat.class,value));
  if (VIEW_REDIRECT.equals(type) || VIEW_REDIRECT2.equals(type))   return new ServerRedirectView(value);
  if (VIEW_VOID.equals(type))   return new VoidView();
  if (VIEW_IOC.equals(type))   return ioc.get(View.class,value);
  if (VIEW_HTTP.equals(type))   return new HttpStatusView(Integer.parseInt(value));
  return null;
}","public View make(Ioc ioc,String type,String value){
  type=type.toLowerCase();
  if (VIEW_JSP.equals(type))   return new JspView(value);
  if (VIEW_JSON.equals(type))   if (Strings.isBlank(value))   return new UTF8JsonView(JsonFormat.compact());
 else   return new UTF8JsonView(Json.fromJson(JsonFormat.class,value));
  if (VIEW_REDIRECT.equals(type) || VIEW_REDIRECT2.equals(type))   return new ServerRedirectView(value);
  if (VIEW_FORWARD.equals(type) || VIEW_FORWARD2.equals(type))   return new ForwardView(value);
  if (VIEW_VOID.equals(type))   return new VoidView();
  if (VIEW_IOC.equals(type))   return ioc.get(View.class,value);
  if (VIEW_HTTP.equals(type))   return new HttpStatusView(Integer.parseInt(value));
  return null;
}"
43563,"public JspView(String name){
  if (!Strings.isBlank(name)) {
    path=normalizePath(name,""String_Node_Str"");
  }
}","public JspView(String name){
  super(name);
}"
43564,"private static RuntimeException makeSetValueException(Class<?> type,String name,Object value,Exception e){
  return new FailToSetValueException(String.format(""String_Node_Str"",value,type.getName(),name,e.getMessage()));
}","private static RuntimeException makeSetValueException(Class<?> type,String name,Object value,Exception e){
  if (e instanceof FailToSetValueException) {
    return (FailToSetValueException)e;
  }
  return new FailToSetValueException(String.format(""String_Node_Str"",value,type.getName(),name,e.getMessage()));
}"
43565,"/** 
 * 为对象的一个字段设值。优先调用 setter 方法。
 * @param obj 对象
 * @param fieldName 字段名
 * @param value 值
 * @throws FailToSetValueException
 */
public void setValue(Object obj,String fieldName,Object value) throws FailToSetValueException {
  try {
    this.getSetter(fieldName,value.getClass()).invoke(obj,value);
  }
 catch (  Exception e) {
    try {
      Field field=this.getField(fieldName);
      setValue(obj,field,value);
    }
 catch (    Exception e1) {
      throw makeSetValueException(obj.getClass(),fieldName,value,e1);
    }
  }
}","/** 
 * 为对象的一个字段设值。优先调用 setter 方法。
 * @param obj 对象
 * @param fieldName 字段名
 * @param value 值
 * @throws FailToSetValueException
 */
public void setValue(Object obj,String fieldName,Object value) throws FailToSetValueException {
  if (null == value) {
    try {
      setValue(obj,this.getField(fieldName),value);
    }
 catch (    Exception e1) {
      throw makeSetValueException(obj.getClass(),fieldName,value,e1);
    }
  }
 else {
    try {
      this.getSetter(fieldName,value.getClass()).invoke(obj,value);
    }
 catch (    Exception e) {
      try {
        setValue(obj,this.getField(fieldName),value);
      }
 catch (      Exception e1) {
        throw makeSetValueException(obj.getClass(),fieldName,value,e1);
      }
    }
  }
}"
43566,"@Test public void test_setValue_Boolean_and_Character(){
  SV sv=new SV();
  sv.ok=true;
  sv.cobj=Character.valueOf('F');
  Mirror.me(SV.class).setValue(sv,""String_Node_Str"",null);
  Mirror.me(SV.class).setValue(sv,""String_Node_Str"",null);
  assertNull(sv.ok);
  assertNull(sv.cobj);
}","@Test public void test_setValue_Boolean_and_Character(){
  SV sv=new SV();
  sv.ok=true;
  sv.cobj=Character.valueOf('F');
  sv.intobj=30;
  Mirror.me(SV.class).setValue(sv,""String_Node_Str"",null);
  Mirror.me(SV.class).setValue(sv,""String_Node_Str"",null);
  Mirror.me(SV.class).setValue(sv,""String_Node_Str"",null);
  assertNull(sv.ok);
  assertNull(sv.cobj);
  assertNull(sv.intobj);
}"
43567,"public Class<?> load(String className) throws ClassNotFoundException {
  try {
    return Thread.currentThread().getContextClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    try {
      return ClassLoader.getSystemClassLoader().loadClass(className);
    }
 catch (    ClassNotFoundException e2) {
      try {
        return getParent().loadClass(className);
      }
 catch (      ClassNotFoundException e3) {
      }
    }
  }
  return super.loadClass(className);
}","public Class<?> load(String className) throws ClassNotFoundException {
  try {
    return Thread.currentThread().getContextClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    try {
      return ClassLoader.getSystemClassLoader().loadClass(className);
    }
 catch (    ClassNotFoundException e2) {
      try {
        return getParent().loadClass(className);
      }
 catch (      ClassNotFoundException e3) {
      }
    }
catch (    SecurityException e2) {
      try {
        return getParent().loadClass(className);
      }
 catch (      ClassNotFoundException e3) {
      }
    }
  }
  return super.loadClass(className);
}"
43568,"public void execute(Connection conn) throws DaoException {
  mergeCondition();
  updateCount=-1;
  boolean statIsClosed=false;
  try {
    if (sql.isSELECT()) {
      if (null != callback) {
        Pager pager=context.getPager();
        int rsType=null == pager ? ResultSet.TYPE_FORWARD_ONLY : pager.getResultSetType();
        PreparedStatement stat=null;
        ResultSet rs=null;
        try {
          String sqlStr=sql.toPreparedStatementString();
          stat=conn.prepareStatement(sqlStr,rsType,ResultSet.CONCUR_READ_ONLY);
          adapter.process(stat,sql,entity);
          rs=stat.executeQuery();
          context.setResult(callback.invoke(conn,rs,this));
        }
  finally {
          Daos.safeClose(stat,rs);
        }
      }
    }
 else     if (sql.isUPDATE() || sql.isINSERT() || sql.isDELETE()|| sql.isTRUNCATE()) {
      PreparedStatement stat=null;
      try {
        String sqlStr=sql.toPreparedStatementString();
        stat=conn.prepareStatement(sqlStr);
        adapter.process(stat,sql,entity);
        stat.execute();
        updateCount=stat.getUpdateCount();
        stat.close();
        statIsClosed=true;
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        if (!statIsClosed)         Daos.safeClose(stat);
      }
    }
 else {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        stat.execute(sql.toString());
        stat.close();
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        if (!statIsClosed)         Daos.safeClose(stat);
      }
    }
  }
 catch (  SQLException e) {
    throw new DaoException(format(""String_Node_Str"",sql.toString(),sql.toPreparedStatementString()),e);
  }
}","public void execute(Connection conn) throws DaoException {
  mergeCondition();
  updateCount=-1;
  boolean statIsClosed=false;
  try {
    if (sql.isSELECT()) {
      if (null != callback) {
        Pager pager=context.getPager();
        int rsType=null == pager ? ResultSet.TYPE_FORWARD_ONLY : pager.getResultSetType();
        PreparedStatement stat=null;
        ResultSet rs=null;
        try {
          String sqlStr=sql.toPreparedStatementString();
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"" + sqlStr);
          stat=conn.prepareStatement(sqlStr,rsType,ResultSet.CONCUR_READ_ONLY);
          adapter.process(stat,sql,entity);
          rs=stat.executeQuery();
          context.setResult(callback.invoke(conn,rs,this));
        }
  finally {
          Daos.safeClose(stat,rs);
        }
      }
    }
 else     if (sql.isUPDATE() || sql.isINSERT() || sql.isDELETE()|| sql.isTRUNCATE()) {
      PreparedStatement stat=null;
      try {
        String sqlStr=sql.toPreparedStatementString();
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + sqlStr);
        stat=conn.prepareStatement(sqlStr);
        adapter.process(stat,sql,entity);
        stat.execute();
        updateCount=stat.getUpdateCount();
        stat.close();
        statIsClosed=true;
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        if (!statIsClosed)         Daos.safeClose(stat);
      }
    }
 else {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        stat.execute(sql.toString());
        stat.close();
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        if (!statIsClosed)         Daos.safeClose(stat);
      }
    }
  }
 catch (  SQLException e) {
    throw new DaoException(format(""String_Node_Str"",sql.toString(),sql.toPreparedStatementString()),e);
  }
}"
43569,"public SqlNotFoundException(String key,String[] paths){
  super(String.format(""String_Node_Str"",key,Castors.me().castToString(paths)));
}","public SqlNotFoundException(String key){
  super(String.format(""String_Node_Str"",key));
}"
43570,"int _deleteSelf(Entity<?> entity,Object obj){
  if (null != obj) {
    EntityField idnf=entity.getIdentifiedField();
    if (null == idnf) {
      Object[] args=evalArgsByPks(entity,obj);
      if (null != args) {
        Sql sql=sqlMaker.deletex(entity,args);
        execute(sql);
        return sql.getUpdateCount();
      }
      throw DaoException.create(obj,""String_Node_Str"",""String_Node_Str"",null);
    }
    if (idnf.isId()) {
      int id=Castors.me().castTo(idnf.getValue(obj),Integer.class);
      return delete(obj.getClass(),id);
    }
 else     if (idnf.isName()) {
      String name=idnf.getValue(obj).toString();
      return delete(obj.getClass(),name);
    }
 else {
      throw DaoException.create(obj,""String_Node_Str"",""String_Node_Str"",new Exception(""String_Node_Str""));
    }
  }
  return 0;
}","int _deleteSelf(Entity<?> entity,Object obj){
  if (null != obj) {
    EntityField idnf=entity.getIdentifiedField();
    if (null == idnf) {
      Object[] args=evalArgsByPks(entity,obj);
      if (null != args) {
        Sql sql=sqlMaker.deletex(entity,args);
        execute(sql);
        return sql.getUpdateCount();
      }
      throw DaoException.create(obj,""String_Node_Str"",""String_Node_Str"",null);
    }
    if (idnf.isId()) {
      long id=Castors.me().castTo(idnf.getValue(obj),Long.class);
      return delete(obj.getClass(),id);
    }
 else     if (idnf.isName()) {
      String name=idnf.getValue(obj).toString();
      return delete(obj.getClass(),name);
    }
 else {
      throw DaoException.create(obj,""String_Node_Str"",""String_Node_Str"",new Exception(""String_Node_Str""));
    }
  }
  return 0;
}"
43571,"public static String encode(Object s){
  if (null == s)   return ""String_Node_Str"";
  try {
    return new String(s.toString().getBytes(),Encoding.CHARSET_UTF8.name());
  }
 catch (  UnsupportedEncodingException e) {
    throw Lang.wrapThrow(e);
  }
}","public static String encode(Object s){
  if (null == s)   return ""String_Node_Str"";
  try {
    return URLEncoder.encode(s.toString(),Encoding.CHARSET_UTF8.name());
  }
 catch (  UnsupportedEncodingException e) {
    throw Lang.wrapThrow(e);
  }
}"
43572,"@SuppressWarnings(""String_Node_Str"") public <T>T get(Class<T> classOfT,IocMaking ing){
  Object obj=weaver.weave(ing);
  if (null != fetch)   fetch.trigger(obj);
  return (T)obj;
}","@SuppressWarnings(""String_Node_Str"") public <T>T get(Class<T> classOfT,IocMaking ing){
  Object re;
  if (null != obj)   re=obj;
 else   if (null != weaver)   re=weaver.fill(ing,weaver.born(ing));
 else   throw Lang.makeThrow(""String_Node_Str"",ing.getObjectName());
  if (null != fetch)   fetch.trigger(re);
  return (T)re;
}"
43573,"public void depose(){
  weaver.depose();
}","public void depose(){
  if (null != obj && null != depose)   depose.trigger(obj);
}"
43574,"public ObjectProxy make(IocMaking ing,IocObject iobj){
  Mirror<?> mirror=ing.getMirrors().getMirror(iobj.getType(),ing.getObjectName());
  ObjectProxy op=new ObjectProxy();
  if (iobj.isSingleton() && null != ing.getObjectName())   ing.getContext().save(iobj.getScope(),ing.getObjectName(),op);
  try {
    DynamicWeaver dw;
    if (iobj.isSingleton())     dw=new StaticWeaver();
 else     dw=new DynamicWeaver();
    if (null != iobj.getEvents()) {
      IocEventSet iocEventSet=iobj.getEvents();
      op.setFetch(createTrigger(mirror,iocEventSet.getFetch()));
      dw.setCreate(createTrigger(mirror,iocEventSet.getCreate()));
      dw.setDepose(createTrigger(mirror,iocEventSet.getDepose()));
    }
    ValueProxy[] vps=new ValueProxy[Lang.length(iobj.getArgs())];
    for (int i=0; i < vps.length; i++)     vps[i]=ing.makeValue(iobj.getArgs()[i]);
    dw.setArgs(vps);
    Object[] args=new Object[vps.length];
    for (int i=0; i < args.length; i++)     args[i]=vps[i].get(ing);
    dw.setBorning((Borning<?>)mirror.getBorning(args));
    FieldInjector[] fields=new FieldInjector[iobj.getFields().length];
    for (int i=0; i < fields.length; i++) {
      IocField ifld=iobj.getFields()[i];
      try {
        ValueProxy vp=ing.makeValue(ifld.getValue());
        fields[i]=FieldInjector.create(mirror,ifld.getName(),vp);
      }
 catch (      Exception e) {
        throw Lang.wrapThrow(e,""String_Node_Str"",ifld.getName());
      }
    }
    dw.setFields(fields);
    op.setWeaver(dw);
  }
 catch (  Throwable e) {
    ing.getContext().remove(iobj.getScope(),ing.getObjectName());
    throw Lang.wrapThrow(e);
  }
  return op;
}","public ObjectProxy make(IocMaking ing,IocObject iobj){
  Mirror<?> mirror=ing.getMirrors().getMirror(iobj.getType(),ing.getObjectName());
  IocEventSet iocEventSet=iobj.getEvents();
  ObjectProxy op=new ObjectProxy();
  if (iobj.isSingleton() && null != ing.getObjectName())   ing.getContext().save(iobj.getScope(),ing.getObjectName(),op);
  if (null != iobj.getEvents()) {
    op.setFetch(createTrigger(mirror,iocEventSet.getFetch()));
    op.setDepose(createTrigger(mirror,iocEventSet.getDepose()));
  }
  try {
    DefaultWeaver dw=new DefaultWeaver();
    op.setWeaver(dw);
    if (null != iobj.getEvents()) {
      dw.setCreate(createTrigger(mirror,iocEventSet.getCreate()));
    }
    ValueProxy[] vps=new ValueProxy[Lang.length(iobj.getArgs())];
    for (int i=0; i < vps.length; i++)     vps[i]=ing.makeValue(iobj.getArgs()[i]);
    dw.setArgs(vps);
    Object[] args=new Object[vps.length];
    for (int i=0; i < args.length; i++)     args[i]=vps[i].get(ing);
    dw.setBorning((Borning<?>)mirror.getBorning(args));
    Object obj=null;
    if (iobj.isSingleton()) {
      obj=dw.born(ing);
      op.setObj(obj);
    }
    FieldInjector[] fields=new FieldInjector[iobj.getFields().length];
    for (int i=0; i < fields.length; i++) {
      IocField ifld=iobj.getFields()[i];
      try {
        ValueProxy vp=ing.makeValue(ifld.getValue());
        fields[i]=FieldInjector.create(mirror,ifld.getName(),vp);
      }
 catch (      Exception e) {
        throw Lang.wrapThrow(e,""String_Node_Str"",ifld.getName());
      }
    }
    dw.setFields(fields);
    if (null != obj)     dw.fill(ing,obj);
  }
 catch (  Throwable e) {
    ing.getContext().remove(iobj.getScope(),ing.getObjectName());
    throw Lang.wrapThrow(e);
  }
  return op;
}"
43575,"public ObjectProxy fetch(String name){
  Object re=req.getAttribute(name);
  if (re == null)   return null;
  if (re instanceof ObjectProxy)   return (ObjectProxy)re;
  ObjectProxy op=new ObjectProxy();
  StaticWeaver staticWeaver=new StaticWeaver();
  staticWeaver.setObj(re);
  op.setWeaver(staticWeaver);
  return op;
}","public ObjectProxy fetch(String name){
  Object re=req.getAttribute(name);
  if (re == null)   return null;
  if (re instanceof ObjectProxy)   return (ObjectProxy)re;
  return new ObjectProxy().setObj(re);
}"
43576,"public ObjectProxy fetch(String name){
  Object re=session.getAttribute(name);
  if (re == null)   return null;
  if (re instanceof ObjectProxy)   return (ObjectProxy)re;
  ObjectProxy op=new ObjectProxy();
  StaticWeaver staticWeaver=new StaticWeaver();
  staticWeaver.setObj(re);
  op.setWeaver(staticWeaver);
  return op;
}","public ObjectProxy fetch(String name){
  Object re=session.getAttribute(name);
  if (re == null)   return null;
  if (re instanceof ObjectProxy)   return (ObjectProxy)re;
  return new ObjectProxy().setObj(re);
}"
43577,"/** 
 * 将数据写入文件,成功就返回true,失败就返回false
 * @param file 需要写入的文件
 * @param data 需要写入的数据
 * @return true 如果写入成功
 */
public static boolean write(File file,byte data[]){
  try {
    FileOutputStream fos=new FileOutputStream(file);
    fos.write(data);
    fos.flush();
    fos.close();
  }
 catch (  Throwable e) {
    return false;
  }
  return true;
}","/** 
 * 将内容写到一个文件内，内容对象可以是： <ul> <li>InputStream - 按二进制方式写入 <li>byte[] - 按二进制方式写入 <li>Reader - 按 UTF-8 方式写入 <li>其他对象被 toString() 后按照 UTF-8 方式写入 </ul>
 * @param f 文件
 * @param obj 内容
 */
public static void write(File f,Object obj){
  if (null == f || null == obj)   return;
  if (f.isDirectory())   throw Lang.makeThrow(""String_Node_Str"",f);
  try {
    if (!f.exists())     Files.createNewFile(f);
    if (obj instanceof InputStream) {
      Streams.writeAndClose(Streams.fileOut(f),(InputStream)obj);
    }
 else     if (obj instanceof byte[]) {
      Streams.writeAndClose(Streams.fileOut(f),(byte[])obj);
    }
 else     if (obj instanceof Reader) {
      Streams.writeAndClose(Streams.fileOutw(f),(Reader)obj);
    }
 else {
      Streams.writeAndClose(Streams.fileOutw(f),obj.toString());
    }
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
}"
43578,"/** 
 * 将一段文本全部写入一个输出流
 * @param ops 输出流
 * @param cs 文本
 * @throws IOException
 */
public static void write(OutputStream ops,CharSequence cs) throws IOException {
  if (null != cs && null != ops)   ops.write(cs.toString().getBytes());
}","/** 
 * 将一个字节数组写入一个输出流。 <p> <b style=color:red>注意</b>，它并不会关闭输出流
 * @param ops 输出流
 * @param bytes 字节数组
 * @throws IOException
 */
public static void write(OutputStream ops,byte[] bytes) throws IOException {
  if (null == ops || null == bytes)   return;
  ops.write(bytes);
}"
43579,"public static String encode(Object s){
  if (null == s)   return ""String_Node_Str"";
  try {
    return new String(Encoding.CHARSET_UTF8.encode(s.toString()).array(),Encoding.CHARSET_UTF8.name());
  }
 catch (  UnsupportedEncodingException e) {
    throw Lang.wrapThrow(e);
  }
}","public static String encode(Object s){
  if (null == s)   return ""String_Node_Str"";
  try {
    return new String(s.toString().getBytes(),Encoding.CHARSET_UTF8.name());
  }
 catch (  UnsupportedEncodingException e) {
    throw Lang.wrapThrow(e);
  }
}"
43580,"public Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes firstBoundaryBytes=RemountBytes.create(firstBoundary);
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes itemEndlBytes=RemountBytes.create(itemEndl);
  RemountBytes nameEndlBytes=RemountBytes.create(""String_Node_Str"");
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  try {
    FieldMeta meta;
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString(charset);
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            do {
              info.current=br.load();
              mm=br.mark(itemEndlBytes);
              assertStreamNotEnd(mm);
              br.dump(ops);
            }
 while (mm == MarkMode.NOT_FOUND);
          }
  finally {
            Streams.safeFlush(ops);
            Streams.safeClose(ops);
          }
          params.add(meta.getName(),new TempFile(meta,tmp));
        }
      }
 else {
        StringBuilder sb=new StringBuilder();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          sb.append(br.dumpAsString(charset));
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString());
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",meta.getName(),sb.toString());
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}","public Map<String,Object> parse(HttpServletRequest req,UploadingContext context) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  int bufferSize=context.getBufferSize();
  String charset=context.getCharset();
  FilePool tmps=context.getFilePool();
  int maxFileSize=context.getMaxFileSize();
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes firstBoundaryBytes=RemountBytes.create(firstBoundary);
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes itemEndlBytes=RemountBytes.create(itemEndl);
  RemountBytes nameEndlBytes=RemountBytes.create(""String_Node_Str"");
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  try {
    FieldMeta meta;
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString(charset);
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (!context.isNameAccepted(meta.getFileLocalName())) {
          throw new UploadUnsupportedFileNameException(meta);
        }
        if (!context.isContentTypeAccepted(meta.getContentType())) {
          throw new UploadUnsupportedFileTypeException(meta);
        }
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            if (maxFileSize > 0) {
              long maxPos=info.current + maxFileSize;
              do {
                info.current=br.load();
                mm=br.mark(itemEndlBytes);
                assertStreamNotEnd(mm);
                if (mm != MarkMode.FOUND && info.current > maxPos) {
                  throw new UploadOutOfSizeException(meta);
                }
                br.dump(ops);
              }
 while (mm == MarkMode.NOT_FOUND);
            }
 else {
              do {
                info.current=br.load();
                mm=br.mark(itemEndlBytes);
                assertStreamNotEnd(mm);
                br.dump(ops);
              }
 while (mm == MarkMode.NOT_FOUND);
            }
          }
  finally {
            Streams.safeFlush(ops);
            Streams.safeClose(ops);
          }
          if (context.isIgnoreNull() && tmp.length() == 0) {
          }
 else {
            params.add(meta.getName(),new TempFile(meta,tmp));
          }
        }
      }
 else {
        StringBuilder sb=new StringBuilder();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          sb.append(br.dumpAsString(charset));
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString());
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",meta.getName(),sb.toString());
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}"
43581,"public Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException {
  UploadInfo info=Uploads.createInfo(req);
  StreamBuffer sb=null;
  InputStream ins=null;
  try {
    Map<String,Object> params=Uploads.createParamsMap(req);
    ins=req.getInputStream();
    if (!(ins instanceof BufferedInputStream)) {
      if (bufferSize > 0)       ins=new BufferedInputStream(ins,bufferSize);
 else       ins=new BufferedInputStream(ins);
    }
    String contentType=req.getContentType();
    String s=""String_Node_Str"" + Http.multipart.getBoundary(contentType);
    char[] endValue=s.toCharArray();
    int[] right=new int[endValue.length];
    int cursor;
    int c=0;
    for (int i=0; i < s.length(); i++) {
      c=ins.read();
      info.current++;
    }
    while (c != -1) {
      cursor=0;
      right[cursor++]=ins.read();
      info.current++;
      if (right[0] == -1) {
        right[cursor++]=-1;
      }
 else {
        right[cursor++]=ins.read();
        info.current++;
      }
      if (right[1] == -1 || (right[0] == '-' && right[1] == '-'))       break;
      sb=new StreamBuffer();
      while (cursor < endName.length) {
        c=ins.read();
        if (c == -1)         break;
        info.current++;
        if (c == endName[cursor]) {
          right[cursor++]=c;
        }
 else {
          if (cursor > 0) {
            for (int i=0; i < cursor; i++)             sb.write(right[i]);
          }
          sb.write(c);
          cursor=0;
        }
      }
      FieldMeta meta=new FieldMeta(sb.toString(charset));
      cursor=0;
      if (meta.isFile()) {
        File tmp=null;
        OutputStream ots;
        if (Strings.isBlank(meta.getFileLocalPath())) {
          ots=new StringOutputStream(new StringBuilder());
        }
 else {
          tmp=tmps.createFile(meta.getFileExtension());
          ots=new BufferedOutputStream(new FileOutputStream(tmp));
        }
        while (c != -1 && cursor < endValue.length) {
          c=ins.read();
          info.current++;
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               ots.write(right[i]);
            }
            ots.write(c);
            cursor=0;
          }
        }
        Streams.safeClose(ots);
        if (null != tmp && !Strings.isBlank(meta.getFileLocalPath()) && tmp.length() > 0)         params.put(meta.getName(),new TempFile(meta,tmp));
      }
 else {
        sb=new StreamBuffer();
        while (c != -1 && cursor < endValue.length) {
          c=ins.read();
          info.current++;
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               sb.write(right[i]);
            }
            sb.write(c);
            cursor=0;
          }
        }
        params.put(meta.getName(),sb.toString(charset));
      }
    }
    return params;
  }
 catch (  IOException e) {
    throw new UploadException(e);
  }
 finally {
    Streams.safeClose(ins);
    Streams.safeClose(sb);
    if (null != req.getSession())     req.getSession().removeAttribute(UploadInfo.class.getName());
  }
}","public Map<String,Object> parse(HttpServletRequest req,UploadingContext context) throws UploadException {
  String charset=context.getCharset();
  FilePool tmps=context.getFilePool();
  UploadInfo info=Uploads.createInfo(req);
  StreamBuffer sb=null;
  InputStream ins=null;
  try {
    Map<String,Object> params=Uploads.createParamsMap(req);
    ins=req.getInputStream();
    if (!(ins instanceof BufferedInputStream)) {
      if (bufferSize > 0)       ins=new BufferedInputStream(ins,bufferSize);
 else       ins=new BufferedInputStream(ins);
    }
    String contentType=req.getContentType();
    String s=""String_Node_Str"" + Http.multipart.getBoundary(contentType);
    char[] endValue=s.toCharArray();
    int[] right=new int[endValue.length];
    int cursor;
    int c=0;
    for (int i=0; i < s.length(); i++) {
      c=ins.read();
      info.current++;
    }
    while (c != -1) {
      cursor=0;
      right[cursor++]=ins.read();
      info.current++;
      if (right[0] == -1) {
        right[cursor++]=-1;
      }
 else {
        right[cursor++]=ins.read();
        info.current++;
      }
      if (right[1] == -1 || (right[0] == '-' && right[1] == '-'))       break;
      sb=new StreamBuffer();
      while (cursor < endName.length) {
        c=ins.read();
        if (c == -1)         break;
        info.current++;
        if (c == endName[cursor]) {
          right[cursor++]=c;
        }
 else {
          if (cursor > 0) {
            for (int i=0; i < cursor; i++)             sb.write(right[i]);
          }
          sb.write(c);
          cursor=0;
        }
      }
      FieldMeta meta=new FieldMeta(sb.toString(charset));
      cursor=0;
      if (meta.isFile()) {
        File tmp=null;
        OutputStream ots;
        if (Strings.isBlank(meta.getFileLocalPath())) {
          ots=new StringOutputStream(new StringBuilder());
        }
 else {
          tmp=tmps.createFile(meta.getFileExtension());
          ots=new BufferedOutputStream(new FileOutputStream(tmp));
        }
        while (c != -1 && cursor < endValue.length) {
          c=ins.read();
          info.current++;
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               ots.write(right[i]);
            }
            ots.write(c);
            cursor=0;
          }
        }
        Streams.safeClose(ots);
        if (null != tmp && !Strings.isBlank(meta.getFileLocalPath()) && tmp.length() > 0)         params.put(meta.getName(),new TempFile(meta,tmp));
      }
 else {
        sb=new StreamBuffer();
        while (c != -1 && cursor < endValue.length) {
          c=ins.read();
          info.current++;
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               sb.write(right[i]);
            }
            sb.write(c);
            cursor=0;
          }
        }
        params.put(meta.getName(),sb.toString(charset));
      }
    }
    return params;
  }
 catch (  IOException e) {
    throw new UploadException(e);
  }
 finally {
    Streams.safeClose(ins);
    Streams.safeClose(sb);
    if (null != req.getSession())     req.getSession().removeAttribute(UploadInfo.class.getName());
  }
}"
43582,"public UploadAdaptor(String path,int buffer,String charset,int poolSize){
  this.charset=charset;
  this.pool=new NutFilePool(path,poolSize);
  this.buffer=buffer;
}","public UploadAdaptor(String path,int buffer,String charset,int poolSize){
  context=new UploadingContext();
  context.setBufferSize(buffer);
  context.setCharset(charset);
  context.setFilePool(new NutFilePool(path,poolSize));
}"
43583,"public Object[] adapt(HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  Map<String,Object> map;
  try {
    Uploading ing=new FastUploading(buffer);
    map=ing.parse(request,charset,pool);
  }
 catch (  UploadException e) {
    throw Lang.wrapThrow(e);
  }
  Object[] args=new Object[injs.length];
  int i=fillPathArgs(request,response,pathArgs,args);
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(request,response,map);
  }
  return args;
}","public Object[] adapt(HttpServletRequest request,HttpServletResponse response,String[] pathArgs){
  Map<String,Object> map;
  try {
    Uploading ing=new FastUploading();
    map=ing.parse(request,context);
  }
 catch (  UploadException e) {
    throw Lang.wrapThrow(e);
  }
  Object[] args=new Object[injs.length];
  int i=fillPathArgs(request,response,pathArgs,args);
  for (; i < injs.length; i++) {
    args[i]=injs[i].get(request,response,map);
  }
  return args;
}"
43584,"/** 
 * 对流的解析
 * @param req
 * @param charset
 * @param tmps
 * @throws UploadException
 */
Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException ;","/** 
 * 对流的解析
 * @param req
 * @param charset
 * @param tmps
 * @throws UploadException
 * @throws UploadOutOfSizeException
 * @throws UploadUnsupportedFileNameException
 * @throws UploadUnsupportedFileTypeException
 */
Map<String,Object> parse(HttpServletRequest req,UploadingContext context) throws UploadException, UploadOutOfSizeException, UploadUnsupportedFileNameException, UploadUnsupportedFileTypeException ;"
43585,"public void invoke(HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    req.setCharacterEncoding(inputCharset);
  }
 catch (  UnsupportedEncodingException e) {
    logException(e);
    throw Lang.wrapThrow(e);
  }
  resp.setCharacterEncoding(outputCharset);
  if (null != filters)   for (  ActionFilter filter : filters) {
    View view=filter.match(req,method);
    if (null != view) {
      try {
        view.render(req,resp,null);
      }
 catch (      Throwable e) {
        logException(e);
        throw Lang.wrapThrow(e);
      }
      return;
    }
  }
  RequestIocContext reqContext=null;
  try {
    Object[] args=adaptor.adapt(req,resp,pathArgs);
    Object obj;
    if (null != module) {
      obj=module;
    }
 else {
      Ioc ioc=Mvcs.getIoc(req);
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",moduleName);
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(req);
        SessionIocContext sessionContext=new SessionIocContext(req.getSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        obj=((Ioc2)ioc).get(moduleType,moduleName,myContext);
      }
 else       obj=ioc.get(moduleType,moduleName);
    }
    Object re=method.invoke(obj,args);
    if (re instanceof View)     ((View)re).render(req,resp,re);
 else     ok.render(req,resp,re);
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException && e.getCause() != null)     e=e.getCause();
    if (log.isDebugEnabled())     logException(e);
    try {
      fail.render(req,resp,e);
    }
 catch (    Throwable e1) {
      logException(e1);
      resp.reset();
      try {
        resp.getWriter().write(e1.getMessage());
        resp.flushBuffer();
      }
 catch (      IOException e2) {
        logException(e2);
        throw Lang.wrapThrow(e2);
      }
    }
  }
 finally {
    if (null != reqContext)     reqContext.depose();
  }
}","public void invoke(HttpServletRequest req,HttpServletResponse resp,String[] pathArgs){
  try {
    req.setCharacterEncoding(inputCharset);
  }
 catch (  UnsupportedEncodingException e) {
    logException(e);
    throw Lang.wrapThrow(e);
  }
  resp.setCharacterEncoding(outputCharset);
  if (null != filters)   for (  ActionFilter filter : filters) {
    View view=filter.match(req,method);
    if (null != view) {
      try {
        view.render(req,resp,null);
      }
 catch (      Throwable e) {
        logException(e);
        throw Lang.wrapThrow(e);
      }
      return;
    }
  }
  RequestIocContext reqContext=null;
  try {
    Object[] args=adaptor.adapt(req,resp,pathArgs);
    Object obj;
    if (null != module) {
      obj=module;
    }
 else {
      Ioc ioc=Mvcs.getIoc(req);
      if (null == ioc)       throw Lang.makeThrow(""String_Node_Str"",moduleName);
      if (ioc instanceof Ioc2) {
        reqContext=new RequestIocContext(req);
        SessionIocContext sessionContext=new SessionIocContext(req.getSession());
        IocContext myContext=new ComboContext(reqContext,sessionContext);
        obj=((Ioc2)ioc).get(moduleType,moduleName,myContext);
      }
 else       obj=ioc.get(moduleType,moduleName);
    }
    Object re=method.invoke(obj,args);
    if (re instanceof View)     ((View)re).render(req,resp,null);
 else     ok.render(req,resp,re);
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException && e.getCause() != null)     e=e.getCause();
    if (log.isDebugEnabled())     logException(e);
    try {
      fail.render(req,resp,e);
    }
 catch (    Throwable e1) {
      logException(e1);
      resp.reset();
      try {
        resp.getWriter().write(e1.getMessage());
        resp.flushBuffer();
      }
 catch (      IOException e2) {
        logException(e2);
        throw Lang.wrapThrow(e2);
      }
    }
  }
 finally {
    if (null != reqContext)     reqContext.depose();
  }
}"
43586,"@Override public Number cast(String src,Class<?> toType,String... args){
  try {
    return (Number)Mirror.me(toType).getWrapperClass().getConstructor(String.class).newInstance(Strings.isBlank(src) ? ""String_Node_Str"" : src);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
}","@Override public Number cast(String src,Class<?> toType,String... args){
  if (Strings.isBlank(src)) {
    if (toType.isPrimitive())     return 0;
 else     return null;
  }
  try {
    return (Number)Mirror.me(toType).getWrapperClass().getConstructor(String.class).newInstance(src);
  }
 catch (  Exception e) {
    throw new FailToCastObjectException(String.format(""String_Node_Str"",src,toType.getName()),e);
  }
}"
43587,"/** 
 * @param req 请求对象
 * @param resp 响应对象
 * @param refer 这个参考字段，如果有值，表示是路径参数的值，那么它比 request 里的参数优先
 * @return 注入值
 */
public Object get(HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null != refer)   return Castors.me().castTo(refer,type);
  return Castors.me().castTo(req.getParameter(name),type);
}","/** 
 * @param req 请求对象
 * @param resp 响应对象
 * @param refer 这个参考字段，如果有值，表示是路径参数的值，那么它比 request 里的参数优先
 * @return 注入值
 */
public Object get(HttpServletRequest req,HttpServletResponse resp,Object refer){
  if (null != refer)   return Castors.me().castTo(refer,type);
  String[] params=req.getParameterValues(name);
  return Castors.me().castTo(params,type);
}"
43588,"@SuppressWarnings(""String_Node_Str"") public <T>Mirror<T> getMirror(Class<T> type,String name){
  if (MethodInterceptor.class.isAssignableFrom(type))   return Mirror.me(type);
  if (type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX))   return Mirror.me(type);
  if (AopConfigration.IOCNAME.equals(name))   return Mirror.me(type);
  try {
    return (Mirror<T>)Mirror.me(cd.load(type.getName() + ClassAgent.CLASSNAME_SUFFIX));
  }
 catch (  ClassNotFoundException e) {
  }
  if (aopConfigration == null)   if (ioc.has(AopConfigration.IOCNAME))   aopConfigration=ioc.get(AopConfigration.class,AopConfigration.IOCNAME);
 else   aopConfigration=new AnnotationAopConfigration();
  List<InterceptorPair> interceptorPairs=aopConfigration.getInterceptorPairList(ioc,type);
  if (interceptorPairs == null || interceptorPairs.size() < 1)   return Mirror.me(type);
  ClassAgent agent=new AsmClassAgent();
  for (  InterceptorPair interceptorPair : interceptorPairs)   agent.addInterceptor(interceptorPair.getMethodMatcher(),interceptorPair.getMethodInterceptor());
  return Mirror.me(agent.define(cd,type));
}","@SuppressWarnings(""String_Node_Str"") public <T>Mirror<T> getMirror(Class<T> type,String name){
  if (MethodInterceptor.class.isAssignableFrom(type))   return Mirror.me(type);
  if (type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX))   return Mirror.me(type);
  if (AopConfigration.IOCNAME.equals(name))   return Mirror.me(type);
  if (AopConfigration.class.isAssignableFrom(type))   return Mirror.me(type);
  try {
    return (Mirror<T>)Mirror.me(cd.load(type.getName() + ClassAgent.CLASSNAME_SUFFIX));
  }
 catch (  ClassNotFoundException e) {
  }
  if (aopConfigration == null)   if (ioc.has(AopConfigration.IOCNAME))   aopConfigration=ioc.get(AopConfigration.class,AopConfigration.IOCNAME);
 else   aopConfigration=new AnnotationAopConfigration();
  List<InterceptorPair> interceptorPairs=aopConfigration.getInterceptorPairList(ioc,type);
  if (interceptorPairs == null || interceptorPairs.size() < 1)   return Mirror.me(type);
  ClassAgent agent=new AsmClassAgent();
  for (  InterceptorPair interceptorPair : interceptorPairs)   agent.addInterceptor(interceptorPair.getMethodMatcher(),interceptorPair.getMethodInterceptor());
  return Mirror.me(agent.define(cd,type));
}"
43589,"public ActionInvoker getInvoker(){
  return invoker;
}","public ActionInvoker getInvoker(){
  return pathInfo.getObj();
}"
43590,"public void invoke(HttpServletRequest req,HttpServletResponse resp){
  invoker.invoke(req,resp,pathArgs);
}","public void invoke(HttpServletRequest req,HttpServletResponse resp){
  getInvoker().invoke(req,resp,pathArgs);
}"
43591,"public ActionInvoking(ActionInvoker invoker,String[] pathArgs){
  this.invoker=invoker;
  this.pathArgs=pathArgs;
}","public ActionInvoking(PathInfo<ActionInvoker> pathInfo,String[] pathArgs){
  this.pathInfo=pathInfo;
  this.pathArgs=pathArgs;
}"
43592,public ActionInvoking get(String path);,"/** 
 * @param path 请求路径
 * @return 调用时
 */
public ActionInvoking get(String path);"
43593,"public int getCursor(){
  return cursor;
}","/** 
 * @return 匹配的步长<ul> <li>-1 - 表示这个路径全部被匹配了 <li>0 - 表示这个路径没有被匹配 <li>>0 - 表示这个路径被一个 * 匹配 </ul>
 */
public int getCursor(){
  return cursor;
}"
43594,"public String getRemain(){
  return remain;
}","/** 
 * @return 路径中未匹配的部分
 */
public String getRemain(){
  return remain;
}"
43595,"PathInfo(int i,String remain,T obj){
  this.cursor=i;
  this.remain=remain;
  this.obj=obj;
}","PathInfo(int i,String path,T obj){
  this.path=path;
  this.cursor=i;
  if (i == -1) {
    this.known=path;
    this.remain=null;
  }
 else   if (i == 0) {
    this.known=null;
    this.remain=path;
  }
 else {
    this.known=path.substring(0,i);
    this.remain=path.substring(i);
  }
  this.obj=obj;
}"
43596,"PathInfo<T> get(String path){
  char[] cs=path.toLowerCase().toCharArray();
  PathNode<T> wild=null;
  PathNode<T> node=this;
  int i=0;
  for (; i < cs.length; i++) {
    if (node.isStar) {
      wild=node;
    }
    char c=cs[i];
    if (null == node.chars)     break;
    int index=Arrays.binarySearch(node.chars,c);
    if (index < 0)     break;
    node=node.children[index];
  }
  if (i == cs.length) {
    return new PathInfo<T>(i,null,node.obj);
  }
 else   if (null != wild && wild.isStar)   return new PathInfo<T>(i,path.substring(i),wild.obj);
  return new PathInfo<T>(0,path,null);
}","PathInfo<T> get(String path){
  char[] cs=path.toLowerCase().toCharArray();
  PathNode<T> wild=null;
  PathNode<T> node=this;
  int i=0;
  for (; i < cs.length; i++) {
    if (node.isStar) {
      wild=node;
    }
    char c=cs[i];
    if (null == node.chars)     break;
    int index=Arrays.binarySearch(node.chars,c);
    if (index < 0)     break;
    node=node.children[index];
  }
  if (i == cs.length) {
    return new PathInfo<T>(-1,path,node.obj);
  }
 else   if (null != wild && wild.isStar)   return new PathInfo<T>(i,path.substring(i),wild.obj);
  return new PathInfo<T>(0,path,null);
}"
43597,"public ActionInvoking get(String path){
  PathInfo<ActionInvoker> info=root.get(path);
  String[] args=Strings.splitIgnoreBlank(info.getRemain(),""String_Node_Str"");
  return new ActionInvoking(info.getObj(),args);
}","public ActionInvoking get(String path){
  PathInfo<ActionInvoker> info=root.get(path);
  String[] args=Strings.splitIgnoreBlank(info.getRemain(),""String_Node_Str"");
  return new ActionInvoking(info,args);
}"
43598,"public JsonFormat(boolean compact){
  this.compact=compact;
  this.indentBy=""String_Node_Str"";
  this.quoteName=true;
  this.castors=Castors.me();
}","public JsonFormat(boolean compact){
  this.compact=compact;
  this.indentBy=""String_Node_Str"";
  this.quoteName=true;
  this.castors=Castors.me();
  this.separator='\""';
}"
43599,"private void string2Json(String s) throws IOException {
  if (null == s)   writer.append(""String_Node_Str"");
 else {
    char[] cs=s.toCharArray();
    writer.append('""');
    for (    char c : cs) {
switch (c) {
case '""':
        writer.append(""String_Node_Str"");
      break;
case '\n':
    writer.append(""String_Node_Str"");
  break;
case '\t':
writer.append(""String_Node_Str"");
break;
case '\r':
writer.append(""String_Node_Str"");
break;
case '\\':
writer.append(""String_Node_Str"");
break;
default :
writer.append(c);
}
}
writer.append('""');
}
}","private void string2Json(String s) throws IOException {
  if (null == s)   writer.append(""String_Node_Str"");
 else {
    char[] cs=s.toCharArray();
    writer.append(format.getSeparator());
    for (    char c : cs) {
switch (c) {
case '""':
        writer.append(""String_Node_Str"");
      break;
case '\n':
    writer.append(""String_Node_Str"");
  break;
case '\t':
writer.append(""String_Node_Str"");
break;
case '\r':
writer.append(""String_Node_Str"");
break;
case '\\':
writer.append(""String_Node_Str"");
break;
default :
writer.append(c);
}
}
writer.append(format.getSeparator());
}
}"
43600,"public void setProductName(String productName){
  this.productName=productName;
  String proName=productName.toLowerCase();
  if (""String_Node_Str"".equals(proName)) {
    type=DB.H2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.PSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.MYSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.ORACLE;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.DB2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLSERVER;
  }
 else {
    type=DB.OTHER;
  }
}","public void setProductName(String productName){
  this.productName=productName;
  String proName=productName.toLowerCase();
  if (""String_Node_Str"".equals(proName)) {
    type=DB.H2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.PSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.MYSQL;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.ORACLE;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.DB2;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLSERVER;
  }
 else   if (proName.startsWith(""String_Node_Str"")) {
    type=DB.SQLITE;
  }
 else {
    type=DB.OTHER;
  }
}"
43601,"public Pager make(DatabaseMeta meta,int pageNumber,int pageSize){
  if (pageNumber < 1 || pageSize <= 0)   return null;
  Pager pager;
  if (meta.isMySql() || meta.isH2()) {
    pager=new MysqlPager();
  }
 else   if (meta.isPostgresql()) {
    pager=new PostgresqlPager();
  }
 else   if (meta.isOracle()) {
    pager=new OraclePager();
  }
 else   if (meta.isSqlServer()) {
    if (meta.getVersion().contains(""String_Node_Str""))     pager=new SqlServer2000Pager();
 else     pager=new SqlServer2005Pager();
  }
 else   if (meta.isDB2()) {
    pager=new DB2Pager();
  }
 else {
    pager=new OtherPager();
  }
  pager.setPageNumber(pageNumber);
  pager.setPageSize(pageSize);
  return pager;
}","public Pager make(DatabaseMeta meta,int pageNumber,int pageSize){
  if (pageNumber < 1 || pageSize <= 0)   return null;
  Pager pager;
  if (meta.isMySql() || meta.isH2() || meta.isSQLite()) {
    pager=new MysqlPager();
  }
 else   if (meta.isPostgresql()) {
    pager=new PostgresqlPager();
  }
 else   if (meta.isOracle()) {
    pager=new OraclePager();
  }
 else   if (meta.isSqlServer()) {
    if (meta.getVersion().contains(""String_Node_Str""))     pager=new SqlServer2000Pager();
 else     pager=new SqlServer2005Pager();
  }
 else   if (meta.isDB2()) {
    pager=new DB2Pager();
  }
 else {
    pager=new OtherPager();
  }
  pager.setPageNumber(pageNumber);
  pager.setPageSize(pageSize);
  return pager;
}"
43602,"public Object get(HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=mirror.born();
  for (int i=0; i < injs.length; i++) {
    Injecting inj=injs[i];
    String s=req.getParameter(names[i]);
    if (null == s)     continue;
    if (Strings.isBlank(s))     s=null;
    inj.inject(obj,s);
  }
  return obj;
}","public Object get(HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=mirror.born();
  for (int i=0; i < injs.length; i++) {
    Injecting inj=injs[i];
    String[] ss=req.getParameterValues(names[i]);
    if (null == ss)     continue;
    inj.inject(obj,ss);
  }
  return obj;
}"
43603,"public boolean add(List<ViewMaker> makers,Class<?> moduleType){
  Ok myOk=moduleType.getAnnotation(Ok.class);
  if (null == myOk)   myOk=ok;
  Fail myFail=moduleType.getAnnotation(Fail.class);
  if (null == myFail)   myFail=fail;
  AdaptBy myAb=moduleType.getAnnotation(AdaptBy.class);
  if (null == myAb)   myAb=adaptBy;
  Filters myFlts=moduleType.getAnnotation(Filters.class);
  if (null == myFlts)   myFlts=filters;
  Encoding myEncoding=moduleType.getAnnotation(Encoding.class);
  if (null == myEncoding)   myEncoding=encoding;
  At baseAt=moduleType.getAnnotation(At.class);
  String[] bases;
  if (null == baseAt)   bases=Lang.array(""String_Node_Str"");
 else   if (null == baseAt.value() || baseAt.value().length == 0)   bases=Lang.array(""String_Node_Str"" + moduleType.getSimpleName().toLowerCase());
 else   bases=baseAt.value();
  boolean isModule=false;
  for (  Method method : moduleType.getMethods()) {
    if (!Modifier.isPublic(method.getModifiers()) || !method.isAnnotationPresent(At.class))     continue;
    At ats=method.getAnnotation(At.class);
    isModule=true;
    ActionInvoker invoker=new ActionInvokerImpl(context,ioc,makers,moduleType,method,myOk,myFail,myAb,myFlts,myEncoding);
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",method.getName(),Lang.concat(ats.value()));
    for (    String base : bases) {
      String[] paths=ats.value();
      if ((paths.length == 1 && Strings.isBlank(paths[0])) || paths.length == 0) {
        root.add(base + ""String_Node_Str"" + method.getName().toLowerCase(),invoker);
      }
 else {
        for (        String at : paths)         root.add(base + at,invoker);
      }
    }
  }
  return isModule;
}","public boolean add(List<ViewMaker> makers,Class<?> moduleType){
  Ok myOk=moduleType.getAnnotation(Ok.class);
  if (null == myOk)   myOk=ok;
  Fail myFail=moduleType.getAnnotation(Fail.class);
  if (null == myFail)   myFail=fail;
  AdaptBy myAb=moduleType.getAnnotation(AdaptBy.class);
  if (null == myAb)   myAb=adaptBy;
  Filters myFlts=moduleType.getAnnotation(Filters.class);
  if (null == myFlts)   myFlts=filters;
  Encoding myEncoding=moduleType.getAnnotation(Encoding.class);
  if (null == myEncoding)   myEncoding=encoding;
  At baseAt=moduleType.getAnnotation(At.class);
  String[] bases;
  if (null == baseAt)   bases=Lang.array(""String_Node_Str"");
 else   if (null == baseAt.value() || baseAt.value().length == 0)   bases=Lang.array(""String_Node_Str"" + moduleType.getSimpleName().toLowerCase());
 else   bases=baseAt.value();
  boolean isModule=false;
  for (  Method method : moduleType.getMethods()) {
    if (!Modifier.isPublic(method.getModifiers()) || !method.isAnnotationPresent(At.class))     continue;
    At ats=method.getAnnotation(At.class);
    isModule=true;
    ActionInvoker invoker=new ActionInvokerImpl(context,ioc,makers,moduleType,method,myOk,myFail,myAb,myFlts,myEncoding);
    for (    String base : bases) {
      String[] paths=ats.value();
      if ((paths.length == 1 && Strings.isBlank(paths[0])) || paths.length == 0) {
        String actionPath=base + ""String_Node_Str"" + method.getName().toLowerCase();
        root.add(actionPath,invoker);
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",method.getName(),actionPath);
      }
 else {
        for (        String at : paths) {
          String actionPath=base + at;
          root.add(actionPath,invoker);
          if (log.isDebugEnabled())           log.debugf(""String_Node_Str"",method.getName(),actionPath);
        }
      }
    }
  }
  return isModule;
}"
43604,"public Map<String,String[]> getParameterMap(){
  return parameterMap;
}","public Map<String,String[]> getParameterMap(){
  return params;
}"
43605,"public String getParameter(String key){
  if (parameterMap.containsKey(key)) {
    return parameterMap.get(key)[0];
  }
  return null;
}","public String getParameter(String key){
  if (params.containsKey(key)) {
    return params.get(key)[0];
  }
  return null;
}"
43606,"public Enumeration<String> getParameterNames(){
  return new Vector<String>(parameterMap.keySet()).elements();
}","public Enumeration<String> getParameterNames(){
  return new Vector<String>(params.keySet()).elements();
}"
43607,"public void setParameter(String key,String value){
  parameterMap.put(key,new String[]{value});
}","public void setParameter(String key,Number num){
  setParameter(key,num.toString());
}"
43608,"public String[] getParameterValues(String arg0){
  List<String> pp=new ArrayList<String>(parameterMap.size());
  for (  Entry<String,String[]> strs : parameterMap.entrySet()) {
    for (    String str : strs.getValue()) {
      pp.add(str);
    }
  }
  return pp.toArray(new String[pp.size()]);
}","public String[] getParameterValues(String name){
  Object param=params.get(name);
  return Castors.me().castTo(param,String[].class);
}"
43609,"public String getQueryString(){
  if (parameterMap.size() == 0)   return null;
  StringBuilder sb=new StringBuilder();
  for (  Entry<String,String[]> entry : parameterMap.entrySet()) {
    if (entry.getValue() == null)     sb.append(entry.getKey()).append(""String_Node_Str"");
 else     for (    String str : entry.getValue()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
  }
  return sb.toString();
}","public String getQueryString(){
  if (params.size() == 0)   return null;
  StringBuilder sb=new StringBuilder();
  for (  Entry<String,String[]> entry : params.entrySet()) {
    if (entry.getValue() == null)     sb.append(entry.getKey()).append(""String_Node_Str"");
 else     for (    String str : entry.getValue()) {
      sb.append(entry.getKey()).append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
  }
  return sb.toString();
}"
43610,"public void invoke(int i,Object ele,int length) throws ExitLoop, LoopException {
  sb.append(Sqls.formatFieldValue(ele)).append(',');
}","public void invoke(int i,Object ele,int length) throws ExitLoop, LoopException {
  sb.append(Sqls.formatSqlFieldValue(ele)).append(',');
}"
43611,"public void render(final StringBuilder sb,Entity<?> en){
  if (null != en) {
    EntityField ef=en.getField(name);
    sb.append(null != ef ? ef.getColumnName() : name);
  }
 else   sb.append(name);
  if (""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
    if (null == value)     throw Lang.makeThrow(""String_Node_Str"",sb);
    if (value instanceof Collection<?> || value.getClass().isArray()) {
      sb.append('(');
      Lang.each(value,new Each<Object>(){
        public void invoke(        int i,        Object ele,        int length) throws ExitLoop, LoopException {
          sb.append(Sqls.formatFieldValue(ele)).append(',');
        }
      }
);
      sb.setCharAt(sb.length() - 1,')');
    }
 else     sb.append(Sqls.formatFieldValue(value));
  }
 else   if (null == value && ""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(op) || ""String_Node_Str"".equals(op)) {
    sb.append(' ').append(op).append(' ').append(Sqls.formatFieldValue(value));
  }
 else {
    sb.append(op).append(Sqls.formatFieldValue(value));
  }
}","public void render(final StringBuilder sb,Entity<?> en){
  if (null != en) {
    EntityField ef=en.getField(name);
    sb.append(null != ef ? ef.getColumnName() : name);
  }
 else   sb.append(name);
  if (""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
    if (null == value)     throw Lang.makeThrow(""String_Node_Str"",sb);
    if (value instanceof Collection<?> || value.getClass().isArray()) {
      sb.append('(');
      Lang.each(value,new Each<Object>(){
        public void invoke(        int i,        Object ele,        int length) throws ExitLoop, LoopException {
          sb.append(Sqls.formatSqlFieldValue(ele)).append(',');
        }
      }
);
      sb.setCharAt(sb.length() - 1,')');
    }
 else     sb.append(Sqls.formatSqlFieldValue(value));
  }
 else   if (null == value && ""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(op) || ""String_Node_Str"".equals(op)) {
    sb.append(' ').append(op).append(' ').append(Sqls.formatSqlFieldValue(value));
  }
 else {
    sb.append(op).append(Sqls.formatSqlFieldValue(value));
  }
}"
43612,"/** 
 * @param v 字段值
 * @return 格式化后的 Sql 字段值，可以直接拼装在 SQL 里面
 */
public static CharSequence formatFieldValue(Object v){
  if (null == v)   return ""String_Node_Str"";
 else   if (Sqls.isNotNeedQuote(v.getClass()))   return Sqls.escapeFieldValue(v.toString());
 else   return new StringBuilder(""String_Node_Str"").append(Sqls.escapeFieldValue(v.toString())).append('\'');
}","/** 
 * 格式化值，根据值的类型，生成 SQL 字段值的部分，它会考虑 SQL 注入
 * @param v 字段值
 * @return 格式化后的 Sql 字段值，可以直接拼装在 SQL 里面
 */
public static CharSequence formatFieldValue(Object v){
  if (null == v)   return ""String_Node_Str"";
 else   if (Sqls.isNotNeedQuote(v.getClass()))   return Sqls.escapeFieldValue(v.toString());
 else   return new StringBuilder(""String_Node_Str"").append(Sqls.escapeFieldValue(v.toString())).append('\'');
}"
43613,"/** 
 * 将 SQL 的 WHERE 条件值进行转意，可以用来防止 SQL 注入攻击
 * @param s 字段值
 * @return 格式化后的 Sql 字段值，可以直接拼装在 SQL 里面
 */
public static CharSequence escapteConditionValue(CharSequence s){
  if (null == s)   return null;
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (c == '\'')     sb.append('\'').append('\'');
 else     if (c == '\\')     sb.append('\\').append('\\');
 else     if (c == '_')     sb.append('\\').append(c);
 else     if (c == '%')     sb.append('\\').append(c);
 else     sb.append(c);
  }
  return sb;
}","/** 
 * 将 SQL 的 WHERE 条件值进行转意，可以用来防止 SQL 注入攻击
 * @param s 字段值
 * @return 格式化后的 Sql 字段值，可以直接拼装在 SQL 里面
 */
public static CharSequence escapteConditionValue(CharSequence s){
  if (null == s)   return null;
  return ES_CND_VAL.escape(s);
}"
43614,"/** 
 * 将 SQL 的字段值进行转意，可以用来防止 SQL 注入攻击
 * @param s 字段值
 * @return 格式化后的 Sql 字段值，可以直接拼装在 SQL 里面
 */
public static CharSequence escapeFieldValue(CharSequence s){
  if (null == s)   return null;
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (c == '\'')     sb.append('\'').append('\'');
 else     if (c == '\\')     sb.append('\\').append('\\');
 else     sb.append(c);
  }
  return sb;
}","/** 
 * 将 SQL 的字段值进行转意，可以用来防止 SQL 注入攻击
 * @param s 字段值
 * @return 格式化后的 Sql 字段值，可以直接拼装在 SQL 里面
 */
public static CharSequence escapeFieldValue(CharSequence s){
  if (null == s)   return null;
  return ES_FLD_VAL.escape(s);
}"
43615,"protected void loadIoc() throws Throwable {
  IocBy ib=mainModule.getAnnotation(IocBy.class);
  if (null != ib) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",ib.type().getName());
    ioc=ib.type().newInstance().create(config,ib.args());
    saveToContext(Ioc.class.getName(),ioc);
  }
 else   if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
}","protected void loadIoc() throws Throwable {
  IocBy ib=mainModule.getAnnotation(IocBy.class);
  if (null != ib) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",ib.type().getName());
    ioc=ib.type().newInstance().create(config,ib.args());
    if (ioc instanceof Ioc2)     ((Ioc2)ioc).addValueProxyMaker(new MvcValueProxyMaker());
    saveToContext(Ioc.class.getName(),ioc);
  }
 else   if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
}"
43616,"Ioc create(ServletConfig config,String[] args);","Ioc create(NutConfig config,String[] args);"
43617,void load(Class<?> klass);,"void load(NutConfig config,Class<?> klass);"
43618,"/** 
 * 获取当前请求的路径，并去掉后缀
 */
public static String getRequestPath(HttpServletRequest req){
  String path=req.getPathInfo();
  if (null == path)   path=req.getServletPath();
  if (null == path)   return ""String_Node_Str"";
  int lio=path.lastIndexOf('.');
  if (lio > 0)   path=path.substring(0,lio);
  return path;
}","/** 
 * 获取当前请求的路径，并去掉后缀
 */
public static String getRequestPath(HttpServletRequest req){
  return getRequestPathObject(req).getPath();
}"
43619,"public void init(FilterConfig config) throws ServletException {
}","public void init(FilterConfig conf) throws ServletException {
  config=new FilterNutConfig(conf);
  Loading ing=Inits.init(config,true);
  if (null != ing)   urls=ing.getUrls();
  String regx=Strings.sNull(config.getAttribute(""String_Node_Str""),IGNORE);
  if (!""String_Node_Str"".equalsIgnoreCase(regx)) {
    ignorePtn=Pattern.compile(regx,Pattern.CASE_INSENSITIVE);
  }
}"
43620,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  Mvcs.updateRequestAttributes((HttpServletRequest)req);
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws IOException, ServletException {
  Mvcs.updateRequestAttributes((HttpServletRequest)req);
  if (null != urls) {
    RequestPath path=Mvcs.getRequestPathObject((HttpServletRequest)req);
    if (null == ignorePtn || !ignorePtn.matcher(path.getUrl()).find()) {
      ActionInvoking ing=urls.get(path.getPath());
      if (null != ing && null != ing.getInvoker()) {
        if (log.isInfoEnabled())         log.info(path);
        ing.invoke((HttpServletRequest)req,(HttpServletResponse)resp);
        return;
      }
    }
  }
  chain.doFilter(req,resp);
}"
43621,"public void destroy(){
}","public void destroy(){
  if (null != urls)   Inits.destroy(config);
}"
43622,"@Override public void init() throws ServletException {
  try {
    if (log.isInfoEnabled()) {
      log.infof(""String_Node_Str"",Nutz.version());
      log.infof(""String_Node_Str"",this.getServletName());
    }
    Stopwatch sw=Stopwatch.begin();
    String name=Strings.trim(this.getServletConfig().getInitParameter(""String_Node_Str""));
    if (Strings.isEmpty(name)) {
      throw Lang.makeThrow(ServletException.class,""String_Node_Str"",this.getClass().getName());
    }
    Class<?> mainModule=Class.forName(name);
    Class<? extends Loading> loadingType;
    LoadingBy lb=mainModule.getAnnotation(LoadingBy.class);
    if (null != lb)     loadingType=lb.value();
 else     loadingType=DefaultLoading.class;
    Loading ing=Mirror.me(loadingType).born(this.getServletConfig());
    ing.load(mainModule);
    urls=ing.getUrls();
    sw.stop();
    if (log.isInfoEnabled())     log.infof(""String_Node_Str"",this.getServletName(),sw.getDuration());
    ok=true;
  }
 catch (  Throwable e) {
    if (log.isErrorEnabled())     log.error(""String_Node_Str"",e);
    if (e instanceof ServletException)     throw (ServletException)e;
    throw new ServletException(e);
  }
}","@Override public void init() throws ServletException {
  Loading ing=Inits.init(new ServletNutConfig(getServletConfig()),false);
  urls=ing.getUrls();
  ok=true;
}"
43623,"public void destroy(){
  if (log.isInfoEnabled())   log.infof(""String_Node_Str"",this.getServletName());
  Stopwatch sw=Stopwatch.begin();
  try {
    urls=null;
    Setup setup=(Setup)this.getServletContext().getAttribute(Setup.class.getName());
    if (null != setup)     setup.destroy(getServletConfig());
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    super.destroy();
  }
  Ioc ioc=Mvcs.getIoc(this.getServletContext());
  if (null != ioc)   ioc.depose();
  sw.stop();
  if (log.isInfoEnabled())   log.infof(""String_Node_Str"",this.getServletName(),sw.getDuration());
}","public void destroy(){
  NutConfig config=new ServletNutConfig(getServletConfig());
  if (config.getMainModule() != null)   Inits.destroy(config);
}"
43624,"/** 
 * 启动时，额外逻辑
 * @param config
 */
void init(ServletConfig config);","/** 
 * 启动时，额外逻辑
 * @param config
 */
void init(NutConfig config);"
43625,"/** 
 * 关闭时，额外逻辑
 * @param config
 */
void destroy(ServletConfig config);","/** 
 * 关闭时，额外逻辑
 * @param config
 */
void destroy(NutConfig config);"
43626,"protected ParamInjector evalInjector(Class<?> type,Param param){
  if (File.class.isAssignableFrom(type))   return new FileInjector(param.value());
  if (FieldMeta.class.isAssignableFrom(type))   return new FileMetaInjector(param.value());
  if (TempFile.class.isAssignableFrom(type))   return new TempFileInjector(param.value());
  if (Map.class.isAssignableFrom(type))   return new MapSelfInjector();
  if (null == param)   return null;
  return new MapItemInjector(param.value(),type);
}","protected ParamInjector evalInjector(Class<?> type,Param param){
  if (File.class.isAssignableFrom(type))   return new FileInjector(param.value());
  if (FieldMeta.class.isAssignableFrom(type))   return new FileMetaInjector(param.value());
  if (TempFile.class.isAssignableFrom(type))   return new TempFileInjector(param.value());
  if (Map.class.isAssignableFrom(type))   return new MapSelfInjector();
  if (null == param)   return null;
  String pm=param.value();
  if (""String_Node_Str"".equals(pm)) {
    if (type.isAssignableFrom(Map.class))     return new MapPairInjector();
    return new MapReferInjector(null,type);
  }
 else   if (pm.startsWith(""String_Node_Str"") && pm.length() > 2) {
    return new MapReferInjector(pm.substring(2),type);
  }
 else   if (type.isArray())   return new ArrayInjector(pm,type);
  return new MapItemInjector(param.value(),type);
}"
43627,"public T born(){
  try {
    return borning.born(realArgs);
  }
 catch (  Throwable e) {
    throw new BorningException(e,type,realArgs);
  }
}","public T born(){
  try {
    return borning.born(realArgs);
  }
 catch (  Throwable e) {
    throw new BorningException(Lang.unwrapThrow(e),type,realArgs);
  }
}"
43628,"private void evalEncoding(Method method,Encoding dftEncoding){
  Encoding encoding=method.getAnnotation(Encoding.class);
  if (null == encoding)   encoding=dftEncoding;
  if (null == encoding) {
    inputCharset=org.nutz.lang.Encoding.defaultEncoding();
    outputCharset=org.nutz.lang.Encoding.defaultEncoding();
  }
 else {
    inputCharset=encoding.input();
    outputCharset=encoding.output();
  }
}","private void evalEncoding(Method method,Encoding dftEncoding){
  Encoding encoding=method.getAnnotation(Encoding.class);
  if (null == encoding)   encoding=dftEncoding;
  if (null == encoding) {
    inputCharset=org.nutz.lang.Encoding.UTF8;
    outputCharset=org.nutz.lang.Encoding.UTF8;
  }
 else {
    inputCharset=encoding.input();
    outputCharset=encoding.output();
  }
}"
43629,"/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String path=url.getFile();
        path=decodePath(path);
        file=new File(path);
      }
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}","/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",base);
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String path=url.getFile();
        path=decodePath(path);
        file=new File(path);
      }
    }
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",file);
    if (null == file) {
      file=Files.findFile(base);
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",file);
    }
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",file.getParentFile());
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}"
43630,"private static String getJarPath(File dir){
  String fpath=dir.getAbsolutePath();
  int posBegin=fpath.indexOf(""String_Node_Str"") + 5;
  int posEnd=fpath.lastIndexOf('!');
  if (posBegin > 0 && (posEnd - posBegin) > 0)   return fpath.substring(posBegin,posEnd);
  return null;
}","static String getJarPath(String jarPath){
  int posBegin=jarPath.indexOf(""String_Node_Str"");
  if (posBegin == -1)   posBegin=0;
 else {
    posBegin+=6;
    if (jarPath.length() <= posBegin)     return null;
    if (jarPath.charAt(posBegin - 1) != '\\')     posBegin--;
  }
  int posEnd=jarPath.lastIndexOf('!');
  if (posBegin >= 0 && (posEnd - posBegin) > 0)   return jarPath.substring(posBegin,posEnd);
  return null;
}"
43631,"protected void loadSubModules() throws Throwable {
  Views vms=mainModule.getAnnotation(Views.class);
  ArrayList<ViewMaker> makers=new ArrayList<ViewMaker>();
  if (null != vms)   for (  Class<? extends ViewMaker> type : vms.value())   makers.add(type.newInstance());
  makers.add(new DefaultViewMaker());
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",mainModule.getName());
  urls=makeUrlMap(ioc,context,mainModule);
  urls.add(makers,mainModule);
  Modules modules=mainModule.getAnnotation(Modules.class);
  if (null != modules) {
    if (!modules.scanPackage()) {
      for (      Class<?> module : modules.value()) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",module.getName());
        urls.add(makers,module);
      }
    }
 else {
      for (      Class<?> module : modules.value()) {
        Package packageZ=module.getPackage();
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",packageZ.getName());
        List<Class<?>> list=ResourceScanHelper.scanClasses(packageZ.getName());
        if (list != null)         for (        Class<?> md : list) {
          if (urls.add(makers,md))           if (log.isDebugEnabled())           log.debugf(""String_Node_Str"",md.getName());
        }
      }
    }
  }
  config.getServletContext().setAttribute(UrlMap.class.getName(),urls);
}","protected void loadSubModules() throws Throwable {
  Views vms=mainModule.getAnnotation(Views.class);
  ArrayList<ViewMaker> makers=new ArrayList<ViewMaker>();
  if (null != vms)   for (  Class<? extends ViewMaker> type : vms.value())   makers.add(type.newInstance());
  makers.add(new DefaultViewMaker());
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",mainModule.getName());
  urls=makeUrlMap(ioc,context,mainModule);
  urls.add(makers,mainModule);
  Modules modules=mainModule.getAnnotation(Modules.class);
  Set<Class<?>> subModules=new HashSet<Class<?>>();
  if (null != modules) {
    for (    Class<?> module : modules.value()) {
      subModules.add(module);
    }
    if (modules.scanPackage()) {
      for (      Class<?> module : modules.value()) {
        Package packageZ=module.getPackage();
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",packageZ.getName());
        List<Class<?>> list=ResourceScanHelper.scanClasses(packageZ.getName());
        if (list != null)         for (        Class<?> classZ : list)         if (classZ.getPackage().equals(mainModule.getPackage()))         subModules.add(classZ);
      }
    }
  }
  if (config.getInitParameter(""String_Node_Str"") != null) {
    String scanPackages=config.getInitParameter(""String_Node_Str"").trim();
    String[] packages=scanPackages.split(""String_Node_Str"");
    for (int i=0; i < packages.length; i++)     if (packages[i].trim().length() > 0) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",packages[i].trim());
      List<Class<?>> list=ResourceScanHelper.scanClasses(packages[i].trim());
      for (      Class<?> classZ : list)       if (isSubModule(classZ))       subModules.add(classZ);
    }
  }
  subModules.remove(mainModule);
  for (  Class<?> module : subModules) {
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",module.getName());
    urls.add(makers,module);
  }
  config.getServletContext().setAttribute(UrlMap.class.getName(),urls);
}"
43632,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  boolean isMap=null != obj && obj instanceof Map<?,?>;
  Map<?,?> map=isMap ? null : (Map<?,?>)obj;
  Set<String> keySet=dest.keys();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    String key=it.next();
    Object value=null;
    int length=key.length();
    if (key.startsWith(""String_Node_Str"") && length > 2) {
      value=req.getParameter(key.substring(2));
    }
 else     if (isMap && key.startsWith(""String_Node_Str"") && length > 4) {
      value=map.get(key);
    }
 else     if (null != mirror && key.startsWith(""String_Node_Str"") && length > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else {
      value=obj;
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  boolean isMap=null != obj && obj instanceof Map<?,?>;
  Map<?,?> map=isMap ? (Map<?,?>)obj : null;
  Set<String> keySet=dest.keys();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    String key=it.next();
    Object value=null;
    int length=key.length();
    if (key.startsWith(""String_Node_Str"") && length > 2) {
      value=req.getParameter(key.substring(2));
    }
 else     if (isMap && key.startsWith(""String_Node_Str"") && length > 4) {
      value=map.get(key);
    }
 else     if (null != mirror && key.startsWith(""String_Node_Str"") && length > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else {
      value=obj;
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}"
43633,"@SuppressWarnings(""String_Node_Str"") public ValueProxy make(IocMaking ing,IocValue iv){
  Object value=iv.getValue();
  String type=iv.getType();
  if (""String_Node_Str"".equals(type) || null == value) {
    return new StaticValue(null);
  }
 else   if (""String_Node_Str"".equals(type) || null == type) {
    if (value.getClass().isArray()) {
      Object[] vs=(Object[])value;
      IocValue[] tmp=new IocValue[vs.length];
      for (int i=0; i < tmp.length; i++)       tmp[i]=(IocValue)vs[i];
      return new ArrayValue(ing,tmp);
    }
 else     if (value instanceof Map<?,?>) {
      return new MapValue(ing,(Map<String,IocValue>)value,(Class<? extends Map<String,Object>>)value.getClass());
    }
 else     if (value instanceof Collection<?>) {
      return new CollectionValue(ing,(Collection<IocValue>)value,(Class<? extends Collection<Object>>)value.getClass());
    }
 else     if (value instanceof IocObject) {
      return new InnerValue((IocObject)value);
    }
    return new StaticValue(value);
  }
 else   if (""String_Node_Str"".equals(type)) {
    String s=value.toString();
    if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return new IocSelfValue();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return new ObjectNameValue();
    }
    return new ReferValue(s);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new JavaValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new FileValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new EnvValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new SysPropValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new InnerValue((IocObject)value);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new JNDI_Value(value.toString());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public ValueProxy make(IocMaking ing,IocValue iv){
  Object value=iv.getValue();
  String type=iv.getType();
  if (""String_Node_Str"".equals(type) || null == value) {
    return new StaticValue(null);
  }
 else   if (""String_Node_Str"".equals(type) || null == type) {
    if (value.getClass().isArray()) {
      Object[] vs=(Object[])value;
      IocValue[] tmp=new IocValue[vs.length];
      for (int i=0; i < tmp.length; i++)       tmp[i]=(IocValue)vs[i];
      return new ArrayValue(ing,tmp);
    }
 else     if (value instanceof Map<?,?>) {
      return new MapValue(ing,(Map<String,IocValue>)value,(Class<? extends Map<String,Object>>)value.getClass());
    }
 else     if (value instanceof Collection<?>) {
      return new CollectionValue(ing,(Collection<IocValue>)value,(Class<? extends Collection<Object>>)value.getClass());
    }
 else     if (value instanceof IocObject) {
      return new InnerValue((IocObject)value);
    }
    return new StaticValue(value);
  }
 else   if (""String_Node_Str"".equals(type)) {
    String s=value.toString();
    if (null != s) {
      String renm=s.toLowerCase();
      if (""String_Node_Str"".equals(renm)) {
        return new IocSelfValue();
      }
 else       if (""String_Node_Str"".equals(renm)) {
        return new ObjectNameValue();
      }
 else       if (""String_Node_Str"".equals(renm)) {
        return new IocContextObjectValue();
      }
    }
    return new ReferValue(s);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new JavaValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new FileValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new EnvValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new SysPropValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new InnerValue((IocObject)value);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new JNDI_Value(value.toString());
  }
  return null;
}"
43634,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  boolean isMap=null != obj && obj instanceof Map<?,?>;
  Map<?,?> map=(Map<?,?>)obj;
  Set<String> keySet=dest.keys();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    String key=it.next();
    Object value=null;
    int length=key.length();
    if (key.startsWith(""String_Node_Str"") && length > 2) {
      value=req.getParameter(key.substring(2));
    }
 else     if (isMap && key.startsWith(""String_Node_Str"") && length > 4) {
      value=map.get(key);
    }
 else     if (null != mirror && key.startsWith(""String_Node_Str"") && length > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else {
      value=obj;
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  boolean isMap=null != obj && obj instanceof Map<?,?>;
  Map<?,?> map=isMap ? null : (Map<?,?>)obj;
  Set<String> keySet=dest.keys();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    String key=it.next();
    Object value=null;
    int length=key.length();
    if (key.startsWith(""String_Node_Str"") && length > 2) {
      value=req.getParameter(key.substring(2));
    }
 else     if (isMap && key.startsWith(""String_Node_Str"") && length > 4) {
      value=map.get(key);
    }
 else     if (null != mirror && key.startsWith(""String_Node_Str"") && length > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else {
      value=obj;
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"") || path.startsWith(""String_Node_Str"")) {
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}"
43635,"public void addValueProxyMaker(ValueProxyMaker vpm){
  vpms.add(vpm);
}","public void addValueProxyMaker(ValueProxyMaker vpm){
  vpms.add(0,vpm);
}"
43636,"public Class<?> load(String className) throws ClassNotFoundException {
  try {
    return getParent().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
  }
  return loadClass(className);
}","public Class<?> load(String className) throws ClassNotFoundException {
  try {
    return Thread.currentThread().getContextClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    try {
      return ClassLoader.getSystemClassLoader().loadClass(className);
    }
 catch (    ClassNotFoundException e2) {
      try {
        return getParent().loadClass(className);
      }
 catch (      ClassNotFoundException e3) {
      }
    }
  }
  return loadClass(className);
}"
43637,"@SuppressWarnings(""String_Node_Str"") protected <T>Class<T> generate(ClassDefiner cd,Pair2[] pair2s,String newName,Class<T> klass,Constructor<T>[] constructors){
  try {
    return (Class<T>)cd.load(newName);
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    cd.load(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  Method[] methodArray=new Method[pair2s.length];
  List<MethodInterceptor>[] methodInterceptorList=new List[pair2s.length];
  for (int i=0; i < pair2s.length; i++) {
    Pair2 pair2=pair2s[i];
    methodArray[i]=pair2.method;
    methodInterceptorList[i]=pair2.listeners;
  }
  byte[] bytes=ClassY.enhandClass(klass,newName,methodArray,constructors);
  if (debug)   Files.write(new File(newName),bytes);
  Class<T> newClass=(Class<T>)cd.define(newName,bytes);
  AopToolKit.injectFieldValue(newClass,methodArray,methodInterceptorList);
  return newClass;
}","@SuppressWarnings(""String_Node_Str"") protected <T>Class<T> generate(ClassDefiner cd,Pair2[] pair2s,String newName,Class<T> klass,Constructor<T>[] constructors){
  try {
    return (Class<T>)cd.load(newName);
  }
 catch (  ClassNotFoundException e) {
  }
  Method[] methodArray=new Method[pair2s.length];
  List<MethodInterceptor>[] methodInterceptorList=new List[pair2s.length];
  for (int i=0; i < pair2s.length; i++) {
    Pair2 pair2=pair2s[i];
    methodArray[i]=pair2.method;
    methodInterceptorList[i]=pair2.listeners;
  }
  byte[] bytes=ClassY.enhandClass(klass,newName,methodArray,constructors);
  if (debug)   Files.write(new File(newName),bytes);
  Class<T> newClass=(Class<T>)cd.define(newName,bytes);
  AopToolKit.injectFieldValue(newClass,methodArray,methodInterceptorList);
  return newClass;
}"
43638,"public DefaultMirrorFactory(Ioc ioc){
  this.ioc=ioc;
  this.cd=new DefaultClassDefiner();
}","public DefaultMirrorFactory(Ioc ioc){
  this.ioc=ioc;
  this.cd=new DefaultClassDefiner(getClass().getClassLoader());
}"
43639,"public XmlFileMirrorFactory(Ioc ioc,String... fileNames) throws ParserConfigurationException, SAXException, IOException {
  this.ioc=ioc;
  this.cd=new DefaultClassDefiner();
  DocumentBuilder builder=Lang.xmls();
  Document document;
  for (  String fileName : fileNames) {
    document=builder.parse(Files.findFile(fileName));
    document.normalizeDocument();
    NodeList nodeListZ=((Element)document.getDocumentElement()).getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodeListZ.getLength(); i++)     parse((Element)nodeListZ.item(i));
  }
}","public XmlFileMirrorFactory(Ioc ioc,String... fileNames) throws ParserConfigurationException, SAXException, IOException {
  this.ioc=ioc;
  this.cd=new DefaultClassDefiner(getClass().getClassLoader());
  DocumentBuilder builder=Lang.xmls();
  Document document;
  for (  String fileName : fileNames) {
    document=builder.parse(Files.findFile(fileName));
    document.normalizeDocument();
    NodeList nodeListZ=((Element)document.getDocumentElement()).getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodeListZ.getLength(); i++)     parse((Element)nodeListZ.item(i));
  }
}"
43640,"public static ClassDefiner cd(){
  return new DefaultClassDefiner();
}","public static ClassDefiner cd(){
  return new DefaultClassDefiner(Nutzs.class.getClassLoader());
}"
43641,"Exp(String name,String op,Object value){
  this.name=name;
  this.op=Strings.trim(op);
  if (ptn.matcher(this.op).find())   this.op=""String_Node_Str"" + this.op + ""String_Node_Str"";
  this.value=value;
}","Exp(String name,String op,Object value){
  this.name=name;
  this.op=Strings.trim(op);
  if (ptn.matcher(this.op).find())   this.op=this.op.toUpperCase();
  this.value=value;
}"
43642,"public void render(StringBuilder sb,Entity<?> en){
  if (null != en) {
    EntityField ef=en.getField(name);
    sb.append(null != ef ? ef.getColumnName() : name);
  }
 else   sb.append(name);
  sb.append(op);
  sb.append(Sqls.formatFieldValue(value));
}","public void render(final StringBuilder sb,Entity<?> en){
  if (null != en) {
    EntityField ef=en.getField(name);
    sb.append(null != ef ? ef.getColumnName() : name);
  }
 else   sb.append(name);
  if (""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
    if (null == value)     throw Lang.makeThrow(""String_Node_Str"",sb);
    if (value instanceof Collection<?> || value.getClass().isArray()) {
      sb.append('(');
      Lang.each(value,new Each<Object>(){
        public void invoke(        int i,        Object ele,        int length) throws ExitLoop, LoopException {
          sb.append(Sqls.formatFieldValue(ele)).append(',');
        }
      }
);
      sb.setCharAt(sb.length() - 1,')');
    }
 else     sb.append(Sqls.formatFieldValue(value));
  }
 else   if (null == value && ""String_Node_Str"".equals(op)) {
    sb.append(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(op) || ""String_Node_Str"".equals(op)) {
    sb.append(' ').append(op).append(' ').append(Sqls.formatFieldValue(value));
  }
 else {
    sb.append(op).append(Sqls.formatFieldValue(value));
  }
}"
43643,"public Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  byte[] firstBoundaryBytes=Lang.toBytes(firstBoundary.toCharArray());
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  byte[] itemEndlBytes=Lang.toBytes(itemEndl.toCharArray());
  byte[] nameEndlBytes=Lang.toBytes(""String_Node_Str"".toCharArray());
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  FieldMeta meta;
  try {
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString();
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            do {
              info.current=br.load();
              mm=br.mark(itemEndlBytes);
              assertStreamNotEnd(mm);
              br.dump(ops);
            }
 while (mm == MarkMode.NOT_FOUND);
          }
  finally {
            Streams.safeClose(ops);
          }
          params.add(meta.getName(),new TempFile(meta,tmp));
        }
      }
 else {
        StreamBuffer sb=new StreamBuffer();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          br.dump(sb.getBuffer());
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString(charset));
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}","public Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes firstBoundaryBytes=RemountBytes.create(firstBoundary);
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  RemountBytes itemEndlBytes=RemountBytes.create(itemEndl);
  RemountBytes nameEndlBytes=RemountBytes.create(""String_Node_Str"");
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  FieldMeta meta;
  try {
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString();
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            do {
              info.current=br.load();
              mm=br.mark(itemEndlBytes);
              assertStreamNotEnd(mm);
              br.dump(ops);
            }
 while (mm == MarkMode.NOT_FOUND);
          }
  finally {
            Streams.safeClose(ops);
          }
          params.add(meta.getName(),new TempFile(meta,tmp));
        }
      }
 else {
        StreamBuffer sb=new StreamBuffer();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          br.dump(sb.getBuffer());
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString(charset));
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}"
43644,"/** 
 * 根据给定的字节数组，在环中作标记，以便 dump
 * @param bs 数组
 * @return 标记模式
 * @throws IOException
 */
public MarkMode mark(byte[] bs) throws IOException {
  RingItem ri=item;
  int re;
  while ((re=ri.mark(bs)) >= 0 && ri.isDone4Mark()) {
    if (re > 0) {
      if (!ri.next.isLoaded) {
        ri.next.load(ins);
        readed+=ri.next.max;
      }
 else       if (ri.next == this.item) {
        ri.nextmark=ri.r;
        return MarkMode.NOT_FOUND;
      }
      if (ri.next.matchHeadingWithRemain(bs,re)) {
        return MarkMode.FOUND;
      }
 else {
        ri.r=ri.max;
        ri.nextmark=ri.max;
      }
    }
    if (ri.isStreamEnd)     break;
    ri=ri.next;
    if (!ri.isLoaded) {
      ri.load(ins);
      readed+=ri.max;
    }
    if (ri == item)     break;
  }
  if (re == -1)   return MarkMode.FOUND;
  return ri.isStreamEnd ? MarkMode.STREAM_END : MarkMode.NOT_FOUND;
}","/** 
 * 根据给定的字节数组，在环中作标记，以便 dump
 * @param bs 数组
 * @return 标记模式
 * @throws IOException
 */
private MarkMode mark(byte[] bs,int[] fails) throws IOException {
  RingItem ri=item;
  int re;
  while ((re=ri.mark(bs,fails)) >= 0 && ri.isDone4Mark()) {
    if (re > 0) {
      if (!ri.next.isLoaded) {
        ri.next.load(ins);
        readed+=ri.next.max;
      }
 else       if (ri.next == this.item) {
        ri.nextmark=ri.r;
        return MarkMode.NOT_FOUND;
      }
      if (ri.next.matchHeadingWithRemain(bs,re)) {
        return MarkMode.FOUND;
      }
 else {
        ri.r=ri.max;
        ri.nextmark=ri.max;
      }
    }
    if (ri.isStreamEnd)     break;
    ri=ri.next;
    if (!ri.isLoaded) {
      ri.load(ins);
      readed+=ri.max;
    }
    if (ri == item)     break;
  }
  if (re == -1)   return MarkMode.FOUND;
  return ri.isStreamEnd ? MarkMode.STREAM_END : MarkMode.NOT_FOUND;
}"
43645,"public static RemountBytes create(byte[] bs){
  int[] ps=new int[bs.length];
  for (int i=2; i < bs.length; i++) {
  }
  RemountBytes re=new RemountBytes();
  re.bytes=bs;
  re.pos=ps;
  return re;
}","public static RemountBytes create(byte[] bs){
  int[] fails=new int[bs.length];
  if (bs.length > 1) {
    for (int i=2; i < bs.length; i++) {
      int blueL=1;
      int blueR=i - 1;
      int x=0;
      for (int j=blueL; j <= blueR; j++) {
        byte red=bs[x];
        byte blue=bs[j];
        if (red == blue)         x++;
 else         x=0;
      }
      fails[i]=x;
    }
  }
  RemountBytes re=new RemountBytes();
  re.bytes=bs;
  re.fails=fails;
  return re;
}"
43646,"/** 
 * 从给定 offs 尽力匹配给出的数组。 <p> 需要注意的是，如果返回的是 >0 的数，内部的标志位将被设置到第一个匹配字符，以便 DUMP 内容。 <br> 所以，如果下一个节点给出的结论是 -1，但是 'l' 并不是0，那么说明这个匹配是失败的，需要将 本节点的 r 置到 max 处。 <p> 返回值 <ul> <li><b>-1</b> - 全部被匹配 <li><b>0</b> - 未发现匹配 <li><b>大于 0</b> - 在缓冲的末尾发现匹配，但是没有匹配全，希望下一个节点继续从这个位置匹配 </ul>
 * @param bs 数组
 * @return -1, 0 或者 +n
 */
int mark(byte[] bs){
  if (!isLoaded)   throw new MarkUnloadedRingItemException();
  byte start=bs[0];
  for (; r < max; r++) {
    if (buffer[r] == start) {
      int re=0;
      int j=r;
      while (true) {
        re++;
        j++;
        if (re >= bs.length || j >= max)         break;
        if (bs[re] != buffer[j])         break;
      }
      if (re == bs.length) {
        nextmark=j;
        return -1;
      }
 else       if (j == max) {
        nextmark=max;
        if (isStreamEnd) {
          r=max;
          return 0;
        }
        return re;
      }
      r=j;
    }
  }
  nextmark=max;
  return 0;
}","/** 
 * 从给定 offs 尽力匹配给出的数组。 <p> 需要注意的是，如果返回的是 >0 的数，内部的标志位将被设置到第一个匹配字符，以便 DUMP 内容。 <br> 所以，如果下一个节点给出的结论是 -1，但是 'l' 并不是0，那么说明这个匹配是失败的，需要将 本节点的 r 置到 max 处。 <p> 返回值 <ul> <li><b>-1</b> - 全部被匹配 <li><b>0</b> - 未发现匹配 <li><b>大于 0</b> - 在缓冲的末尾发现匹配，但是没有匹配全，希望下一个节点继续从这个位置匹配 </ul>
 * @param bs 数组
 * @return -1, 0 或者 +n
 */
int mark(byte[] bs,int[] fails){
  if (!isLoaded)   throw new MarkUnloadedRingItemException();
  byte start=bs[0];
  for (; r < max; r++) {
    if (buffer[r] == start) {
      int re=0;
      int j=r;
      while (true) {
        re++;
        j++;
        if (re == bs.length) {
          nextmark=j;
          return -1;
        }
        if (j == max) {
          nextmark=max;
          if (isStreamEnd) {
            r=max;
            return 0;
          }
          return re;
        }
        if (bs[re] != buffer[j]) {
          re=fails[re];
          if (bs[re] != buffer[j]) {
            break;
          }
 else {
            r+=re == 0 ? 1 : re;
          }
        }
      }
      r=j;
    }
  }
  nextmark=max;
  return 0;
}"
43647,"@Test public void test_normal_read() throws IOException {
  byte[] boundary=Lang.toBytes(""String_Node_Str"".toCharArray());
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  RingItem ri;
  br.load();
  assertEquals(15,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.NOT_FOUND,mode);
  s=br.dumpAsString();
  assertEquals('1',(char)br.item.buffer[0]);
  assertTrue(br.item.isDone4Mark());
  assertFalse(br.item.isLoaded);
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(3,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(1,ri.l);
  assertEquals(1,ri.r);
  assertEquals(1,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next.next;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(0,ri.r);
  assertEquals(0,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(1,ri.l);
  assertEquals(2,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(0,ri.r);
  assertEquals(0,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next.next;
  assertFalse(ri.isLoaded);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(1,ri.r);
  assertEquals(4,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next;
  assertFalse(ri.isLoaded);
  ri=br.item.next.next;
  assertFalse(ri.isLoaded);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(4,ri.l);
  assertEquals(4,ri.r);
  assertEquals(4,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(35,br.readed);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(4,ri.l);
  assertEquals(4,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(2,ri.l);
  assertEquals(2,ri.r);
  assertEquals(2,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next.next;
  assertFalse(ri.isLoaded);
  s=br.dumpAsString();
  assertEquals('-',(char)br.item.buffer[0]);
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(35,br.readed);
  mode=br.mark(boundary);
  assertEquals(38,br.readed);
  assertTrue(br.item.next.isStreamEnd);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(2,ri.l);
  assertEquals(5,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(3,ri.r);
  assertEquals(3,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}","@Test public void test_normal_read() throws IOException {
  RemountBytes boundary=RemountBytes.create(""String_Node_Str"");
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  RingItem ri;
  br.load();
  assertEquals(15,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.NOT_FOUND,mode);
  s=br.dumpAsString();
  assertEquals('1',(char)br.item.buffer[0]);
  assertTrue(br.item.isDone4Mark());
  assertFalse(br.item.isLoaded);
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(3,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(1,ri.l);
  assertEquals(1,ri.r);
  assertEquals(1,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next.next;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(0,ri.r);
  assertEquals(0,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(1,ri.l);
  assertEquals(2,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(0,ri.r);
  assertEquals(0,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next.next;
  assertFalse(ri.isLoaded);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(1,ri.r);
  assertEquals(4,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next;
  assertFalse(ri.isLoaded);
  ri=br.item.next.next;
  assertFalse(ri.isLoaded);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(4,ri.l);
  assertEquals(4,ri.r);
  assertEquals(4,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  br.load();
  assertEquals(30,br.readed);
  mode=br.mark(boundary);
  assertEquals(35,br.readed);
  assertEquals(MarkMode.FOUND,mode);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(4,ri.l);
  assertEquals(4,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(2,ri.l);
  assertEquals(2,ri.r);
  assertEquals(2,ri.nextmark);
  assertFalse(ri.isDone4Mark());
  ri=br.item.next.next;
  assertFalse(ri.isLoaded);
  s=br.dumpAsString();
  assertEquals('-',(char)br.item.buffer[0]);
  assertEquals(""String_Node_Str"",s);
  br.load();
  assertEquals(35,br.readed);
  mode=br.mark(boundary);
  assertEquals(38,br.readed);
  assertTrue(br.item.next.isStreamEnd);
  ri=br.item;
  assertTrue(ri.isLoaded);
  assertEquals(2,ri.l);
  assertEquals(5,ri.r);
  assertEquals(5,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  ri=br.item.next;
  assertTrue(ri.isLoaded);
  assertEquals(0,ri.l);
  assertEquals(3,ri.r);
  assertEquals(3,ri.nextmark);
  assertTrue(ri.isDone4Mark());
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}"
43648,"@Test public void test_by_buffer2() throws IOException {
  byte[] boundary=Lang.toBytes(""String_Node_Str"".toCharArray());
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  br.skipMark();
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  assertEquals(25,br.readed);
}","@Test public void test_by_buffer2() throws IOException {
  RemountBytes boundary=RemountBytes.create(""String_Node_Str"");
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  br.skipMark();
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  assertEquals(25,br.readed);
}"
43649,"@Test public void test_by_buffer() throws IOException {
  byte[] boundary=Lang.toBytes(""String_Node_Str"".toCharArray());
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  br.skipMark();
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  assertEquals(27,br.readed);
}","@Test public void test_by_buffer() throws IOException {
  RemountBytes boundary=RemountBytes.create(""String_Node_Str"");
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  br.skipMark();
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  assertEquals(27,br.readed);
}"
43650,"@Test public void test_mark_dangerous_char() throws IOException {
  byte[] boundary=Lang.toBytes(""String_Node_Str"".toCharArray());
  String str=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}","@Test public void test_mark_dangerous_char() throws IOException {
  RemountBytes boundary=RemountBytes.create(""String_Node_Str"");
  String str=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}"
43651,"@Test public void test_mark_dangerous_char2() throws IOException {
  byte[] boundary=Lang.toBytes(""String_Node_Str"".toCharArray());
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}","@Test public void test_mark_dangerous_char2() throws IOException {
  RemountBytes boundary=RemountBytes.create(""String_Node_Str"");
  String str=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,10);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}"
43652,"@Test public void test_cross_ring_item() throws IOException {
  byte[] boundary=Lang.toBytes(""String_Node_Str"".toCharArray());
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.NOT_FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}","@Test public void test_cross_ring_item() throws IOException {
  RemountBytes boundary=RemountBytes.create(""String_Node_Str"");
  String str=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  str+=""String_Node_Str"";
  InputStream ins=Lang.ins(str);
  BufferRing br=new BufferRing(ins,3,5);
  String s;
  MarkMode mode;
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.NOT_FOUND,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
  br.load();
  mode=br.mark(boundary);
  assertEquals(MarkMode.STREAM_END,mode);
  s=br.dumpAsString();
  assertEquals(""String_Node_Str"",s);
}"
43653,"@Test public void test_case_A(){
  RemountBytes rb=RB(""String_Node_Str"");
  assertEquals(0,rb.pos[0]);
  assertEquals(0,rb.pos[1]);
  assertEquals(1,rb.pos[2]);
  assertEquals(0,rb.pos[3]);
}","@Test public void test_case_A(){
  RemountBytes rb=RB(""String_Node_Str"");
  assertEquals(0,rb.fails[0]);
  assertEquals(0,rb.fails[1]);
  assertEquals(1,rb.fails[2]);
  assertEquals(0,rb.fails[3]);
}"
43654,"@Test public void test_case_C(){
  RemountBytes rb=RB(""String_Node_Str"");
  assertEquals(0,rb.pos[0]);
  assertEquals(0,rb.pos[1]);
  assertEquals(0,rb.pos[2]);
  assertEquals(0,rb.pos[3]);
  assertEquals(0,rb.pos[4]);
  assertEquals(0,rb.pos[5]);
  assertEquals(3,rb.pos[6]);
}","@Test public void test_case_C(){
  RemountBytes rb=RB(""String_Node_Str"");
  assertEquals(0,rb.fails[0]);
  assertEquals(0,rb.fails[1]);
  assertEquals(0,rb.fails[2]);
  assertEquals(0,rb.fails[3]);
  assertEquals(1,rb.fails[4]);
  assertEquals(2,rb.fails[5]);
  assertEquals(3,rb.fails[6]);
}"
43655,"@Test public void test_case_B(){
  RemountBytes rb=RB(""String_Node_Str"");
  assertEquals(0,rb.pos[0]);
  assertEquals(0,rb.pos[1]);
  assertEquals(0,rb.pos[2]);
  assertEquals(0,rb.pos[3]);
  assertEquals(2,rb.pos[4]);
}","@Test public void test_case_B(){
  RemountBytes rb=RB(""String_Node_Str"");
  assertEquals(0,rb.fails[0]);
  assertEquals(0,rb.fails[1]);
  assertEquals(0,rb.fails[2]);
  assertEquals(1,rb.fails[3]);
  assertEquals(2,rb.fails[4]);
}"
43656,"public Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  Map<String,Object> params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  byte[] firstBoundaryBytes=Lang.toBytes(firstBoundary.toCharArray());
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  byte[] itemEndlBytes=Lang.toBytes(itemEndl.toCharArray());
  byte[] nameEndlBytes=Lang.toBytes(""String_Node_Str"".toCharArray());
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  FieldMeta meta;
  try {
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString();
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            do {
              info.current=br.load();
              mm=br.mark(itemEndlBytes);
              assertStreamNotEnd(mm);
              br.dump(ops);
            }
 while (mm == MarkMode.NOT_FOUND);
          }
  finally {
            Streams.safeClose(ops);
          }
          params.put(meta.getName(),new TempFile(meta,tmp));
        }
      }
 else {
        StreamBuffer sb=new StreamBuffer();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          br.dump(sb.getBuffer());
        }
 while (mm == MarkMode.NOT_FOUND);
        params.put(meta.getName(),sb.toString(charset));
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}","public Map<String,Object> parse(HttpServletRequest req,String charset,FilePool tmps) throws UploadException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + Mvcs.getRequestPath(req));
  UploadInfo info=Uploads.createInfo(req);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  NutMap params=Uploads.createParamsMap(req);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",params.size());
  String firstBoundary=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  byte[] firstBoundaryBytes=Lang.toBytes(firstBoundary.toCharArray());
  String itemEndl=""String_Node_Str"" + Http.multipart.getBoundary(req.getContentType());
  byte[] itemEndlBytes=Lang.toBytes(itemEndl.toCharArray());
  byte[] nameEndlBytes=Lang.toBytes(""String_Node_Str"".toCharArray());
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + itemEndl);
  MarkMode mm;
  BufferRing br;
  try {
    ServletInputStream ins=req.getInputStream();
    br=new BufferRing(ins,3,bufferSize);
    info.current=br.load();
    mm=br.mark(firstBoundaryBytes);
    if (mm != MarkMode.FOUND) {
      if (log.isWarnEnabled())       log.warnf(""String_Node_Str"",firstBoundary);
      return params;
    }
    br.skipMark();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
  FieldMeta meta;
  try {
    do {
      info.current=br.load();
      mm=br.mark(nameEndlBytes);
      String s=br.dumpAsString();
      if (""String_Node_Str"".equals(s) || MarkMode.STREAM_END == mm) {
        break;
      }
 else       if (MarkMode.FOUND == mm) {
        meta=new FieldMeta(s);
      }
 else {
        throw new UploadInvalidFormatException(""String_Node_Str"");
      }
      if (meta.isFile()) {
        if (Strings.isBlank(meta.getFileLocalPath())) {
          do {
            info.current=br.load();
            mm=br.mark(itemEndlBytes);
            assertStreamNotEnd(mm);
            br.skipMark();
          }
 while (mm == MarkMode.NOT_FOUND);
        }
 else {
          File tmp=tmps.createFile(meta.getFileExtension());
          OutputStream ops=null;
          try {
            ops=new BufferedOutputStream(new FileOutputStream(tmp),bufferSize * 2);
            do {
              info.current=br.load();
              mm=br.mark(itemEndlBytes);
              assertStreamNotEnd(mm);
              br.dump(ops);
            }
 while (mm == MarkMode.NOT_FOUND);
          }
  finally {
            Streams.safeClose(ops);
          }
          params.add(meta.getName(),new TempFile(meta,tmp));
        }
      }
 else {
        StreamBuffer sb=new StreamBuffer();
        do {
          info.current=br.load();
          mm=br.mark(itemEndlBytes);
          assertStreamNotEnd(mm);
          br.dump(sb.getBuffer());
        }
 while (mm == MarkMode.NOT_FOUND);
        params.add(meta.getName(),sb.toString(charset));
      }
    }
 while (mm != MarkMode.STREAM_END);
  }
 catch (  Exception e) {
    throw Lang.wrapThrow(e,UploadException.class);
  }
 finally {
    br.close();
  }
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",br.readed());
  return params;
}"
43657,"/** 
 * 根据请求对象创建参数 MAP， 同时根据 QueryString，为 MAP 设置初始值
 * @param req 请求对象
 * @return 参数 MAP
 */
public static Map<String,Object> createParamsMap(HttpServletRequest req){
  Map<String,Object> params=new HashMap<String,Object>();
  String qs=req.getQueryString();
  if (null != qs) {
    String[] pairs=Strings.splitIgnoreBlank(qs,""String_Node_Str"");
    for (    String pair : pairs) {
      String[] pp=pair.split(""String_Node_Str"");
      if (pp.length > 1)       params.put(pp[0],pp[1]);
 else       params.put(pp[0],null);
    }
  }
  return params;
}","/** 
 * 根据请求对象创建参数 MAP， 同时根据 QueryString，为 MAP 设置初始值
 * @param req 请求对象
 * @return 参数 MAP
 */
public static NutMap createParamsMap(HttpServletRequest req){
  NutMap params=new NutMap();
  String qs=req.getQueryString();
  if (null != qs) {
    String[] pairs=Strings.splitIgnoreBlank(qs,""String_Node_Str"");
    for (    String pair : pairs) {
      String[] pp=pair.split(""String_Node_Str"");
      if (pp.length > 1)       params.put(pp[0],pp[1]);
 else       params.put(pp[0],null);
    }
  }
  return params;
}"
43658,"/** 
 * 如果txt中第一个支付和 firstChar一致,则删除,否则返回 txt <p> 比如: <ul> <li>removeFirst(""12345"",1) => ""2345"" <li>removeFirst(""ABC"",'B') => ""ABC"" <li>removeFirst(""A"",'B') => ""A"" <li>removeFirst(""A"",'A') => """" </ul>
 * @param str 字符串
 * @param c 第一个个要被截取的字符
 * @return 新字符串
 */
public static String removeFirst(String str,char c){
  if (str == null)   return null;
  if (str.length() == 0)   return ""String_Node_Str"";
  if (c == str.charAt(0))   return str.substring(1);
  return str;
}","/** 
 * 如果txt中第一个字符和 firstChar一致,则删除,否则返回 txt <p> 比如: <ul> <li>removeFirst(""12345"",1) => ""2345"" <li>removeFirst(""ABC"",'B') => ""ABC"" <li>removeFirst(""A"",'B') => ""A"" <li>removeFirst(""A"",'A') => """" </ul>
 * @param str 字符串
 * @param c 第一个个要被截取的字符
 * @return 新字符串
 */
public static String removeFirst(String str,char c){
  if (str == null)   return null;
  if (str.length() == 0)   return ""String_Node_Str"";
  if (c == str.charAt(0))   return str.substring(1);
  return str;
}"
43659,"@SuppressWarnings(""String_Node_Str"") void render(Object obj) throws IOException {
  if (null == obj) {
    writer.write(""String_Node_Str"");
  }
 else   if (obj instanceof Class) {
    string2Json(((Class<?>)obj).getName());
  }
 else   if (obj instanceof Mirror) {
    string2Json(((Mirror<?>)obj).getType().getName());
  }
 else {
    Mirror mr=Mirror.me(obj.getClass());
    if (mr.isEnum()) {
      string2Json(((Enum)obj).name());
    }
 else     if (mr.isNumber() || mr.isBoolean() || mr.isChar()) {
      writer.append(obj.toString());
    }
 else     if (mr.isStringLike()) {
      string2Json(obj.toString());
    }
 else     if (mr.isDateTimeLike()) {
      string2Json(format.getCastors().castToString(obj));
    }
 else     if (memo.containsKey(obj)) {
      writer.append(""String_Node_Str"");
    }
 else {
      if (obj instanceof Map)       map2Json((Map)obj);
 else       if (obj instanceof Collection)       coll2Json((Collection)obj);
 else       if (obj.getClass().isArray())       array2Json(obj);
 else {
        memo.put(obj,null);
        pojo2Json(obj);
        memo.remove(obj);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void render(Object obj) throws IOException {
  if (null == obj) {
    writer.write(""String_Node_Str"");
  }
 else   if (obj instanceof Class) {
    string2Json(((Class<?>)obj).getName());
  }
 else   if (obj instanceof Mirror) {
    string2Json(((Mirror<?>)obj).getType().getName());
  }
 else {
    Mirror mr=Mirror.me(obj.getClass());
    if (mr.isEnum()) {
      string2Json(((Enum)obj).name());
    }
 else     if (mr.isNumber() || mr.isBoolean() || mr.isChar()) {
      writer.append(obj.toString());
    }
 else     if (mr.isStringLike()) {
      string2Json(obj.toString());
    }
 else     if (mr.isDateTimeLike()) {
      string2Json(format.getCastors().castToString(obj));
    }
 else     if (memo.containsKey(obj)) {
      writer.append(""String_Node_Str"");
    }
 else {
      memo.put(obj,null);
      if (obj instanceof Map)       map2Json((Map)obj);
 else       if (obj instanceof Collection)       coll2Json((Collection)obj);
 else       if (obj.getClass().isArray())       array2Json(obj);
 else {
        pojo2Json(obj);
      }
      memo.remove(obj);
    }
  }
}"
43660,"@SuppressWarnings(""String_Node_Str"") private void map2Json(Map map) throws IOException {
  if (null == map)   return;
  appendBraceBegin();
  increaseFormatIndent();
  ArrayList<Pair> list=new ArrayList<Pair>(map.size());
  for (  Object key : map.keySet()) {
    String name=null == key ? ""String_Node_Str"" : key.toString();
    Object value=map.get(name);
    if (!this.isIgnore(name,value))     list.add(new Pair(name,value));
  }
  for (Iterator<Pair> it=list.iterator(); it.hasNext(); ) {
    Pair p=it.next();
    this.appendPair(p.name,p.value);
    if (it.hasNext())     this.appendPairEnd();
  }
  decreaseFormatIndent();
  appendBraceEnd();
}","@SuppressWarnings(""String_Node_Str"") private void map2Json(Map map) throws IOException {
  if (null == map)   return;
  appendBraceBegin();
  increaseFormatIndent();
  ArrayList<Pair> list=new ArrayList<Pair>(map.size());
  for (  Object key : map.keySet()) {
    String name=null == key ? ""String_Node_Str"" : key.toString();
    Object value=map.get(key);
    if (!this.isIgnore(name,value))     list.add(new Pair(name,value));
  }
  for (Iterator<Pair> it=list.iterator(); it.hasNext(); ) {
    Pair p=it.next();
    this.appendPair(p.name,p.value);
    if (it.hasNext())     this.appendPairEnd();
  }
  decreaseFormatIndent();
  appendBraceEnd();
}"
43661,"public Object get(HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=mirror.born();
  for (int i=0; i < injs.length; i++) {
    Injecting inj=injs[i];
    String s=req.getParameter(names[i]);
    if (Strings.isBlank(s))     s=null;
    inj.inject(obj,s);
  }
  return obj;
}","public Object get(HttpServletRequest req,HttpServletResponse resp,Object refer){
  Object obj=mirror.born();
  for (int i=0; i < injs.length; i++) {
    Injecting inj=injs[i];
    String s=req.getParameter(names[i]);
    if (null == s)     continue;
    if (Strings.isBlank(s))     s=null;
    inj.inject(obj,s);
  }
  return obj;
}"
43662,"public void update(Dao dao,Object obj){
  if (null == obj)   return;
  Sql sql=this.sql.duplicate();
  if (vars.length > 0) {
    sql.vars().set(""String_Node_Str"",ef.getEntity().getViewName());
    sql.vars().set(""String_Node_Str"",ef.getColumnName());
    Object refer=TableName.get();
    if (null != refer) {
      if (TableName.isPrimitive(refer))       for (      String var : vars)       if (var.equals(""String_Node_Str"") || var.equals(""String_Node_Str""))       continue;
 else       sql.vars().set(var,refer);
 else {
        Mirror<?> me=Mirror.me(refer.getClass());
        for (        String var : vars) {
          if (var.equals(""String_Node_Str"") || var.equals(""String_Node_Str""))           continue;
 else {
            Object v=me.getValue(refer,var);
            sql.vars().set(var,v);
          }
        }
      }
    }
  }
  if (params.length > 0) {
    Mirror<?> me=Mirror.me(obj.getClass());
    for (    Field f : params) {
      Object v=me.getValue(obj,f);
      sql.params().set(f.getName(),v);
    }
  }
  dao.execute(sql);
  ef.setValue(obj,sql.getResult());
}","public void update(Dao dao,Object obj){
  if (null == obj)   return;
  Sql sql=this.sql.duplicate();
  if (vars.length > 0) {
    sql.vars().set(""String_Node_Str"",ef.getEntity().getViewName());
    sql.vars().set(""String_Node_Str"",ef.getColumnName());
    Object refer=TableName.get();
    if (null == refer)     refer=obj;
    if (null != refer) {
      if (TableName.isPrimitive(refer))       for (      String var : vars)       if (var.equals(""String_Node_Str"") || var.equals(""String_Node_Str""))       continue;
 else       sql.vars().set(var,refer);
 else {
        Mirror<?> me=Mirror.me(refer.getClass());
        for (        String var : vars) {
          if (var.equals(""String_Node_Str"") || var.equals(""String_Node_Str""))           continue;
 else {
            Object v=me.getValue(refer,var);
            sql.vars().set(var,v);
          }
        }
      }
    }
  }
  if (params.length > 0) {
    Mirror<?> me=Mirror.me(obj.getClass());
    for (    Field f : params) {
      Object v=me.getValue(obj,f);
      sql.params().set(f.getName(),v);
    }
  }
  dao.execute(sql);
  ef.setValue(obj,sql.getResult());
}"
43663,"/** 
 * 清除数据表所有记录
 * @param tableName 表名
 */
void clear(String tableName);","/** 
 * 清除数据表所有记录
 * @param tableName 表名
 * @return 影响的行数
 */
int clear(String tableName);"
43664,"public void clear(String tableName,Condition condition){
  Sql sql;
  if (null == condition) {
    sql=sqlMaker.truncate(tableName);
  }
 else {
    sql=sqlMaker.clear(tableName).setCondition(condition);
  }
  execute(sql);
}","public int clear(String tableName,Condition condition){
  Sql sql;
  if (null == condition) {
    sql=sqlMaker.truncate(tableName);
  }
 else {
    sql=sqlMaker.clear(tableName).setCondition(condition);
  }
  execute(sql);
  return sql.getUpdateCount();
}"
43665,"public void clear(){
  dao().clear(getEntityClass(),null);
}","public int clear(){
  return dao().clear(getEntityClass(),null);
}"
43666,"public void delete(long id){
  dao().delete(getEntityClass(),id);
}","public int delete(long id){
  return dao().delete(getEntityClass(),id);
}"
43667,"public void delete(String name){
  dao().delete(getEntityClass(),name);
}","public int delete(String name){
  return dao().delete(getEntityClass(),name);
}"
43668,"public void delete(String name){
  dao().delete(getEntityClass(),name);
}","public int delete(String name){
  return dao().delete(getEntityClass(),name);
}"
43669,"@SuppressWarnings(""String_Node_Str"") public <T>T fetch(T obj){
  if (null != obj) {
    Entity<?> entity=(Entity)getEntity(obj.getClass());
    EntityField idnf=entity.getIdentifiedField();
    Sql sql;
    if (idnf == null) {
      Object[] args=evalArgsByPks(entity,obj);
      if (null != args) {
        sql=sqlMaker.fetchx(entity,args);
      }
 else {
        throw new DaoException(format(""String_Node_Str"",entity.getType().getName()));
      }
    }
 else {
      sql=sqlMaker.fetch(entity,idnf);
      sql.params().set(idnf.getFieldName(),idnf.getValue(obj));
    }
    execute(sql);
    return sql.getObject((Class<T>)entity.getType());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public <T>T fetch(T obj){
  if (null != obj) {
    Entity<?> entity=(Entity)getEntity(obj.getClass());
    EntityField idnf=entity.getIdentifiedField();
    Sql sql;
    if (idnf == null) {
      Object[] args=evalArgsByPks(entity,obj);
      if (null != args) {
        sql=sqlMaker.fetchx(entity,args);
      }
 else {
        throw new DaoException(format(""String_Node_Str"",entity.getType().getName()));
      }
    }
 else {
      sql=sqlMaker.fetch(entity,idnf);
      sql.params().set(idnf.getName(),idnf.getValue(obj));
    }
    execute(sql);
    return sql.getObject((Class<T>)entity.getType());
  }
  return null;
}"
43670,"public Sql insert(Entity<?> en,Object obj){
  StringBuilder fields=new StringBuilder();
  StringBuilder values=new StringBuilder();
  FieldMatcher fm=FieldFilter.get(en.getType());
  Map<String,Object> map=new HashMap<String,Object>();
  for (Iterator<EntityField> it=en.fields().iterator(); it.hasNext(); ) {
    EntityField ef=it.next();
    String fn=ef.getFieldName();
    if (ef.isSerial() || ef.isReadonly())     continue;
    Object value=ef.getValue(obj);
    if (null != fm) {
      if (fm.isIgnoreNull() && null == value)       continue;
 else       if (!fm.match(fn))       continue;
    }
 else     if (null == value) {
      if (ef.hasDefaultValue())       value=ef.getDefaultValue(obj);
 else       continue;
    }
    fields.append(',').append(ef.getColumnName());
    values.append(""String_Node_Str"").append(fn);
    map.put(fn,value);
  }
  fields.deleteCharAt(0);
  values.deleteCharAt(0);
  Sql sql=Sqls.create(format(""String_Node_Str"",en.getTableName(),fields,values)).setEntity(en);
  sql.params().putAll(map);
  return sql;
}","public Sql insert(Entity<?> en,Object obj){
  StringBuilder fields=new StringBuilder();
  StringBuilder values=new StringBuilder();
  FieldMatcher fm=FieldFilter.get(en.getType());
  Map<String,Object> map=new HashMap<String,Object>();
  for (Iterator<EntityField> it=en.fields().iterator(); it.hasNext(); ) {
    EntityField ef=it.next();
    String fn=ef.getName();
    if (ef.isSerial() || ef.isReadonly())     continue;
    Object value=ef.getValue(obj);
    if (null != fm) {
      if (fm.isIgnoreNull() && null == value)       continue;
 else       if (!fm.match(fn))       continue;
    }
 else     if (null == value) {
      if (ef.hasDefaultValue())       value=ef.getDefaultValue(obj);
 else       continue;
    }
    fields.append(',').append(ef.getColumnName());
    values.append(""String_Node_Str"").append(fn);
    map.put(fn,value);
  }
  fields.deleteCharAt(0);
  values.deleteCharAt(0);
  Sql sql=Sqls.create(format(""String_Node_Str"",en.getTableName(),fields,values)).setEntity(en);
  sql.params().putAll(map);
  return sql;
}"
43671,"public Sql update(Entity<?> en,Object obj){
  StringBuilder sb=new StringBuilder();
  FieldMatcher fm=FieldFilter.get(en.getType());
  Map<String,Object> map=new HashMap<String,Object>();
  for (Iterator<EntityField> it=en.fields().iterator(); it.hasNext(); ) {
    EntityField ef=it.next();
    String fn=ef.getFieldName();
    if (ef == en.getIdentifiedField() || ef.isPk() || ef.isReadonly())     continue;
    Object value=ef.getValue(obj);
    if (null != fm) {
      if (fm.isIgnoreNull() && null == value)       continue;
 else       if (!fm.match(fn))       continue;
    }
    sb.append(',').append(ef.getColumnName()).append('=').append(""String_Node_Str"").append(fn);
    map.put(fn,value);
  }
  sb.deleteCharAt(0);
  EntityField idf=en.getIdentifiedField();
  if (null != idf) {
    String fmt=format(""String_Node_Str"",en.getTableName(),sb,idf.getColumnName(),idf.getFieldName());
    Sql sql=Sqls.create(fmt).setEntity(en);
    sql.params().putAll(map).set(idf.getFieldName(),idf.getValue(obj));
    return sql;
  }
  EntityField[] pks=en.getPkFields();
  if (null == pks || pks.length <= 1) {
    throw Lang.makeThrow(""String_Node_Str"",en.getType());
  }
  Object[] args=new Object[pks.length];
  for (int i=0; i < args.length; i++) {
    args[i]=pks[i].getValue(obj);
  }
  String fmt=format(""String_Node_Str"",en.getTableName(),sb);
  Sql sql=Sqls.create(fmt).setEntity(en);
  sql.params().putAll(map);
  sql.setCondition(new PkCondition(args));
  return sql;
}","public Sql update(Entity<?> en,Object obj){
  StringBuilder sb=new StringBuilder();
  FieldMatcher fm=FieldFilter.get(en.getType());
  Map<String,Object> map=new HashMap<String,Object>();
  for (Iterator<EntityField> it=en.fields().iterator(); it.hasNext(); ) {
    EntityField ef=it.next();
    String fn=ef.getName();
    if (ef == en.getIdentifiedField() || ef.isPk() || ef.isReadonly())     continue;
    Object value=ef.getValue(obj);
    if (null != fm) {
      if (fm.isIgnoreNull() && null == value)       continue;
 else       if (!fm.match(fn))       continue;
    }
    sb.append(',').append(ef.getColumnName()).append('=').append(""String_Node_Str"").append(fn);
    map.put(fn,value);
  }
  sb.deleteCharAt(0);
  EntityField idf=en.getIdentifiedField();
  if (null != idf) {
    String fmt=format(""String_Node_Str"",en.getTableName(),sb,idf.getColumnName(),idf.getName());
    Sql sql=Sqls.create(fmt).setEntity(en);
    sql.params().putAll(map).set(idf.getName(),idf.getValue(obj));
    return sql;
  }
  EntityField[] pks=en.getPkFields();
  if (null == pks || pks.length <= 1) {
    throw Lang.makeThrow(""String_Node_Str"",en.getType());
  }
  Object[] args=new Object[pks.length];
  for (int i=0; i < args.length; i++) {
    args[i]=pks[i].getValue(obj);
  }
  String fmt=format(""String_Node_Str"",en.getTableName(),sb);
  Sql sql=Sqls.create(fmt).setEntity(en);
  sql.params().putAll(map);
  sql.setCondition(new PkCondition(args));
  return sql;
}"
43672,"public Sql delete(Entity<?> entity,EntityField ef){
  return Sqls.create(format(""String_Node_Str"",entity.getTableName(),ef.getColumnName(),ef.getFieldName())).setEntity(entity);
}","public Sql delete(Entity<?> entity,EntityField ef){
  return Sqls.create(format(""String_Node_Str"",entity.getTableName(),ef.getColumnName(),ef.getName())).setEntity(entity);
}"
43673,"public Sql fetch(Entity<?> entity,EntityField ef){
  String fields=evalActivedFields(entity);
  String fmt;
  if (ef == null) {
    fmt=format(""String_Node_Str"",fields,entity.getViewName());
  }
 else   if (ef.isName() && !ef.isCasesensitive()) {
    fmt=format(""String_Node_Str"",fields,entity.getViewName(),ef.getColumnName(),ef.getFieldName());
  }
 else {
    fmt=format(""String_Node_Str"",fields,entity.getViewName(),ef.getColumnName(),ef.getFieldName());
  }
  return Sqls.fetchEntity(fmt).setEntity(entity);
}","public Sql fetch(Entity<?> entity,EntityField ef){
  String fields=evalActivedFields(entity);
  String fmt;
  if (ef == null) {
    fmt=format(""String_Node_Str"",fields,entity.getViewName());
  }
 else   if (ef.isName() && !ef.isCasesensitive()) {
    fmt=format(""String_Node_Str"",fields,entity.getViewName(),ef.getColumnName(),ef.getName());
  }
 else {
    fmt=format(""String_Node_Str"",fields,entity.getViewName(),ef.getColumnName(),ef.getName());
  }
  return Sqls.fetchEntity(fmt).setEntity(entity);
}"
43674,"public boolean exists(long id){
  EntityField ef=getEntity().getIdField();
  if (null == ef)   return false;
  return dao().count(getEntityClass(),Cnd.where(ef.getFieldName(),""String_Node_Str"",id)) > 0;
}","public boolean exists(long id){
  EntityField ef=getEntity().getIdField();
  if (null == ef)   return false;
  return dao().count(getEntityClass(),Cnd.where(ef.getName(),""String_Node_Str"",id)) > 0;
}"
43675,"public boolean exists(String name){
  EntityField ef=getEntity().getNameField();
  if (null == ef)   return false;
  return dao().count(getEntityClass(),Cnd.where(ef.getFieldName(),""String_Node_Str"",name)) > 0;
}","public boolean exists(String name){
  EntityField ef=getEntity().getNameField();
  if (null == ef)   return false;
  return dao().count(getEntityClass(),Cnd.where(ef.getName(),""String_Node_Str"",name)) > 0;
}"
43676,"public boolean exists(String name){
  EntityField ef=getEntity().getNameField();
  if (null == ef)   return false;
  return dao().count(getEntityClass(),Cnd.where(ef.getFieldName(),""String_Node_Str"",name)) > 0;
}","public boolean exists(String name){
  EntityField ef=getEntity().getNameField();
  if (null == ef)   return false;
  return dao().count(getEntityClass(),Cnd.where(ef.getName(),""String_Node_Str"",name)) > 0;
}"
43677,"private void pojo2Json(Object obj) throws IOException {
  if (null == obj)   return;
  Class<? extends Object> type=obj.getClass();
  ToJson tj=type.getAnnotation(ToJson.class);
  String myMethodName=Strings.sNull(null == tj ? null : tj.value(),""String_Node_Str"");
  Method myMethod;
  try {
    myMethod=type.getMethod(myMethodName);
    Object re=myMethod.invoke(obj);
    writer.append(re.toString());
    return;
  }
 catch (  Exception e1) {
    try {
      myMethod=type.getMethod(myMethodName,JsonFormat.class);
      Object re=myMethod.invoke(obj,format);
      writer.append(re.toString());
      return;
    }
 catch (    Exception e) {
    }
  }
  Mirror<?> me=Mirror.me(type);
  Field[] fields=me.getFields();
  appendBraceBegin();
  increaseFormatIndent();
  ArrayList<Pair> list=new ArrayList<Pair>(fields.length);
  for (  Field f : fields) {
    String name=f.getName();
    try {
      Object value=me.getValue(obj,f);
      if (!this.isIgnore(name,value))       list.add(new Pair(name,value));
    }
 catch (    FailToGetValueException e) {
    }
  }
  for (Iterator<Pair> it=list.iterator(); it.hasNext(); ) {
    Pair p=it.next();
    this.appendPair(p.name,p.value);
    if (it.hasNext())     this.appendPairEnd();
  }
  decreaseFormatIndent();
  appendBraceEnd();
}","private void pojo2Json(Object obj) throws IOException {
  if (null == obj)   return;
  Class<? extends Object> type=obj.getClass();
  ToJson tj=type.getAnnotation(ToJson.class);
  String myMethodName=Strings.sNull(null == tj ? null : tj.value(),""String_Node_Str"");
  Method myMethod;
  try {
    myMethod=type.getMethod(myMethodName);
    Object re=myMethod.invoke(obj);
    writer.append(re.toString());
    return;
  }
 catch (  Exception e1) {
    try {
      myMethod=type.getMethod(myMethodName,JsonFormat.class);
      Object re=myMethod.invoke(obj,format);
      writer.append(re.toString());
      return;
    }
 catch (    Exception e) {
    }
  }
  Mirror<?> me=Mirror.me(type);
  Field[] fields=me.getFields();
  appendBraceBegin();
  increaseFormatIndent();
  ArrayList<Pair> list=new ArrayList<Pair>(fields.length);
  for (  Field f : fields) {
    String name=f.getName();
    try {
      Object value=me.getValue(obj,name);
      if (!this.isIgnore(name,value))       list.add(new Pair(name,value));
    }
 catch (    FailToGetValueException e) {
    }
  }
  for (Iterator<Pair> it=list.iterator(); it.hasNext(); ) {
    Pair p=it.next();
    this.appendPair(p.name,p.value);
    if (it.hasNext())     this.appendPairEnd();
  }
  decreaseFormatIndent();
  appendBraceEnd();
}"
43678,"private void buildSQLMaps(){
  sqlMaps=new HashMap<String,String>();
  if (null != paths)   for (  String path : paths) {
    if (null == path)     continue;
    InputStream stream=Files.findFileAsStream(path);
    if (stream != null) {
      Reader reader=null;
      try {
        reader=new InputStreamReader(stream);
        loadSQL(reader);
      }
 catch (      IOException e) {
        Logs.getLog(getClass()).warnf(""String_Node_Str"",e);
      }
 finally {
        Streams.safeClose(reader);
        Streams.safeClose(stream);
      }
    }
  }
}","private void buildSQLMaps() throws MalformedURLException, IOException {
  sqlMaps=new HashMap<String,String>();
  if (null != paths)   for (  String path : paths) {
    if (null == path)     continue;
    File f=Files.findFile(Strings.trim(path));
    if (f == null || (!f.exists())) {
      InputStream stream=ClassLoaderUtil.getStream(path);
      if (stream != null) {
        InputStreamReader reader=null;
        try {
          reader=new InputStreamReader(stream,""String_Node_Str"");
          loadSQL(reader);
        }
  finally {
          Streams.safeClose(reader);
          Streams.safeClose(stream);
        }
      }
    }
 else {
      File[] files;
      if (f.isDirectory()) {
        files=f.listFiles(sqkFileFilter == null ? defaultSqkFileFilter : sqkFileFilter);
      }
 else       files=Lang.array(f);
      try {
        for (        File file : files) {
          Reader stream=Streams.fileInr(file);
          loadSQL(stream);
        }
      }
 catch (      Exception e) {
        throw Lang.wrapThrow(e);
      }
    }
  }
}"
43679,"@Test public void check_parse_comboSqls(){
  sqls=new FileSqlManager(""String_Node_Str"");
  ComboSql sql=sqls.createCombo();
  assertEquals(10,sql.count());
}","@Test public void check_parse_comboSqls(){
  SqlManager sqls=new FileSqlManager(""String_Node_Str"");
  ComboSql sql=sqls.createCombo();
  assertEquals(10,sql.count());
}"
43680,"@Test public void check_Query_SQL(){
  sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}","@Test public void check_Query_SQL(){
  SqlManager sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}"
43681,"@Test public void check_Update_SQL(){
  sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}","@Test public void check_Update_SQL(){
  SqlManager sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}"
43682,"@Test public void check_Fetch_SQL(){
  sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}","@Test public void check_Fetch_SQL(){
  SqlManager sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}"
43683,"@Test public void check_Create_SQL(){
  sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}","@Test public void check_Create_SQL(){
  SqlManager sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}"
43684,"@Test public void check_PersonTestSQLs(){
  sqls=new FileSqlManager(""String_Node_Str"");
  String[] keys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < keys.length; i++) {
    assertEquals(keys[i],sqls.keys()[i]);
  }
}","@Test public void check_PersonTestSQLs(){
  SqlManager sqls=new FileSqlManager(""String_Node_Str"");
  String[] keys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < keys.length; i++) {
    assertEquals(keys[i],sqls.keys()[i]);
  }
}"
43685,"@Test public void test_sqls_save() throws IOException {
  sqls=new FileSqlManager(""String_Node_Str"");
  int count=sqls.count();
  File f=Files.findFile(""String_Node_Str"");
  ((FileSqlManager)sqls).saveAs(f.getAbsolutePath());
  sqls=new FileSqlManager(""String_Node_Str"");
  assertEquals(count,sqls.count());
}","@Test public void test_sqls_save() throws IOException {
  SqlManager sqls=new FileSqlManager(""String_Node_Str"");
  int count=sqls.count();
  File f=Files.findFile(""String_Node_Str"");
  ((FileSqlManager)sqls).saveAs(f.getAbsolutePath());
  sqls=new FileSqlManager(""String_Node_Str"");
  assertEquals(count,sqls.count());
}"
43686,"@Test public void check_Insert_SQL(){
  sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}","@Test public void check_Insert_SQL(){
  SqlManager sqls=new FileSqlManager(PATH);
  Sql sql=sqls.create(""String_Node_Str"");
  assertTrue(sql.toString().toUpperCase().startsWith(""String_Node_Str""));
}"
43687,"@Test public void check_Count_SQL(){
  sqls=new FileSqlManager(PATH);
  assertEquals(10,sqls.count());
  String[] keys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < keys.length; i++) {
    assertEquals(keys[i],sqls.keys()[i]);
  }
}","@Test public void check_Count_SQL(){
  SqlManager sqls=new FileSqlManager(PATH);
  assertEquals(10,sqls.count());
  String[] keys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < keys.length; i++) {
    assertEquals(keys[i],sqls.keys()[i]);
  }
}"
43688,"public Object get(IocMaking ing){
  return ing.getIoc().get(type,name);
}","public Object get(IocMaking ing){
  Ioc ioc=ing.getIoc();
  if (ioc instanceof Ioc2)   return ((Ioc2)ioc).get(type,name,ing.getContext());
  return ioc.get(type,name);
}"
43689,"public boolean equals(Object obj){
  Project p=(Project)obj;
  return id == p.id & name.equals(p.name) & alias.equals(p.alias);
}","public boolean equals(Object obj){
  Project p=(Project)obj;
  return id == p.id && name.equals(p.name) && alias.equals(p.alias);
}"
43690,"@SuppressWarnings(""String_Node_Str"") public ValueProxy make(IocMaking ing,IocValue iv){
  Object value=iv.getValue();
  String type=iv.getType();
  if (""String_Node_Str"".equals(type) || null == value) {
    return new StaticValue(null);
  }
 else   if (""String_Node_Str"".equals(type) || null == type) {
    if (value.getClass().isArray()) {
      return new ArrayValue(ing,(IocValue[])value);
    }
 else     if (value instanceof Map<?,?>) {
      return new MapValue(ing,(Map<String,IocValue>)value,(Class<? extends Map<String,Object>>)value.getClass());
    }
 else     if (value instanceof Collection<?>) {
      return new CollectionValue(ing,(Collection<IocValue>)value,(Class<? extends Collection<Object>>)value.getClass());
    }
 else     if (value instanceof IocObject) {
      return new InnerValue((IocObject)value);
    }
    return new StaticValue(value);
  }
 else   if (""String_Node_Str"".equals(type)) {
    String s=value.toString();
    if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return new IocSelfValue();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return new ObjectNameValue();
    }
    return new ReferValue(s);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new JavaValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new FileValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new EnvValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new InnerValue((IocObject)value);
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public ValueProxy make(IocMaking ing,IocValue iv){
  Object value=iv.getValue();
  String type=iv.getType();
  if (""String_Node_Str"".equals(type) || null == value) {
    return new StaticValue(null);
  }
 else   if (""String_Node_Str"".equals(type) || null == type) {
    if (value.getClass().isArray()) {
      return new ArrayValue(ing,(IocValue[])value);
    }
 else     if (value instanceof Map<?,?>) {
      return new MapValue(ing,(Map<String,IocValue>)value,(Class<? extends Map<String,Object>>)value.getClass());
    }
 else     if (value instanceof Collection<?>) {
      return new CollectionValue(ing,(Collection<IocValue>)value,(Class<? extends Collection<Object>>)value.getClass());
    }
 else     if (value instanceof IocObject) {
      return new InnerValue((IocObject)value);
    }
    return new StaticValue(value);
  }
 else   if (""String_Node_Str"".equals(type)) {
    String s=value.toString();
    if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return new IocSelfValue();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return new ObjectNameValue();
    }
    return new ReferValue(s);
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new JavaValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new FileValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new EnvValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new SysPropValue(value.toString());
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new InnerValue((IocObject)value);
  }
  return null;
}"
43691,"private static String[] findInJar(String jarPath,Class<?> baseClass){
  try {
    jarPath=decodePath(jarPath);
    ZipEntry[] entrys=Files.findEntryInZip(new ZipFile(jarPath),baseClass.getPackage().getName().replace('.','/') + ""String_Node_Str"");
    if (null != entrys && entrys.length > 0) {
      String[] classNames=new String[entrys.length];
      for (int i=0; i < entrys.length; i++) {
        String ph=entrys[i].getName();
        classNames[i]=ph.substring(0,ph.lastIndexOf('.')).replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      return classNames;
    }
  }
 catch (  IOException e) {
  }
  return null;
}","private static String[] findInJar(String jarPath,Package packageA){
  try {
    jarPath=decodePath(jarPath);
    ZipEntry[] entrys=Files.findEntryInZip(new ZipFile(jarPath),packageA.getName().replace('.','/') + ""String_Node_Str"");
    if (null != entrys && entrys.length > 0) {
      String[] classNames=new String[entrys.length];
      for (int i=0; i < entrys.length; i++) {
        String ph=entrys[i].getName();
        classNames[i]=ph.substring(0,ph.lastIndexOf('.')).replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      return classNames;
    }
  }
 catch (  IOException e) {
  }
  return null;
}"
43692,"private static String[] findInClassPath(File dir,Class<?> classZ){
  try {
    File[] files=dir.listFiles(new FileFilter(){
      public boolean accept(      File pathname){
        return pathname.getName().endsWith(""String_Node_Str"");
      }
    }
);
    if (null != files && files.length > 0) {
      String[] classNames=new String[files.length];
      Package packageA=classZ.getPackage();
      for (int i=0; i < files.length; i++) {
        String fileName=files[i].getName();
        String classShortName=fileName.substring(0,fileName.length() - ""String_Node_Str"".length());
        classNames[i]=packageA.getName() + ""String_Node_Str"" + classShortName;
      }
      return classNames;
    }
  }
 catch (  SecurityException e) {
  }
  return null;
}","private static String[] findInClassPath(File dir,Package packageA){
  try {
    File[] files=dir.listFiles(new FileFilter(){
      public boolean accept(      File pathname){
        return pathname.getName().endsWith(""String_Node_Str"");
      }
    }
);
    if (null != files && files.length > 0) {
      String[] classNames=new String[files.length];
      for (int i=0; i < files.length; i++) {
        String fileName=files[i].getName();
        String classShortName=fileName.substring(0,fileName.length() - ""String_Node_Str"".length());
        classNames[i]=packageA.getName() + ""String_Node_Str"" + classShortName;
      }
      return classNames;
    }
  }
 catch (  SecurityException e) {
  }
  return null;
}"
43693,"/** 
 * It will list all Class object same package with the Class you give. Whatever the class file you give existed in normal directory or jar file.
 * @param baseClass
 * @return a class List
 */
public static List<Class<?>> scanClass(Class<?> baseClass){
  File dir=getBasePath(baseClass);
  if (dir == null)   return null;
  String[] classNames=null;
  String jarPath=getJarPath(dir);
  if (jarPath != null) {
    classNames=findInJar(jarPath,baseClass);
  }
 else   classNames=findInClassPath(dir,baseClass);
  if (classNames == null)   return null;
  List<Class<?>> list=new ArrayList<Class<?>>(classNames.length);
  for (  String className : classNames)   try {
    list.add(Class.forName(className));
  }
 catch (  Throwable e) {
  }
  return list;
}","/** 
 * It will list all Class object in the package you give. <p/>Whatever the class file you give existed in normal directory or jar file. <p/><b>Not working in GAE</b>
 * @return a class List
 * @throws NullPointerException when packageZ is null
 */
public static List<Class<?>> scanClass(File dir,Package packageZ){
  if (dir == null)   dir=Files.findFile(packageZ.getName().replaceAll(""String_Node_Str"",""String_Node_Str""));
  String[] classNames=null;
  String jarPath=getJarPath(dir);
  if (jarPath != null) {
    classNames=findInJar(jarPath,packageZ);
  }
 else   classNames=findInClassPath(dir,packageZ);
  if (classNames == null)   return null;
  List<Class<?>> list=new ArrayList<Class<?>>(classNames.length);
  for (  String className : classNames)   try {
    list.add(Class.forName(className));
  }
 catch (  Throwable e) {
  }
  return list;
}"
43694,"public void load(Class<?> mainModule){
  try {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    IocBy ib=mainModule.getAnnotation(IocBy.class);
    SetupBy sb=mainModule.getAnnotation(SetupBy.class);
    Views vms=mainModule.getAnnotation(Views.class);
    Localization lc=mainModule.getAnnotation(Localization.class);
    if (null != ib) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",ib.type().getName());
      ioc=ib.type().newInstance().create(config,ib.args());
      config.getServletContext().setAttribute(Ioc.class.getName(),ioc);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    ArrayList<ViewMaker> makers=new ArrayList<ViewMaker>();
    makers.add(new DefaultViewMaker());
    if (null != vms)     for (    Class<? extends ViewMaker> type : vms.value())     makers.add(type.newInstance());
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",mainModule.getName());
    urls=new UrlMapImpl(ioc,context);
    urls.setOk(mainModule.getAnnotation(Ok.class));
    urls.setFail(mainModule.getAnnotation(Fail.class));
    urls.setAdaptBy(mainModule.getAnnotation(AdaptBy.class));
    urls.setFilters(mainModule.getAnnotation(Filters.class));
    urls.setEncoding(mainModule.getAnnotation(Encoding.class));
    urls.add(makers,mainModule);
    Modules modules=mainModule.getAnnotation(Modules.class);
    if (null != modules)     for (    Class<?> module : modules.value()) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",module.getName());
      urls.add(makers,module);
    }
    config.getServletContext().setAttribute(UrlMap.class.getName(),urls);
    if (null != lc) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",lc.value());
      msgss=Mirror.me(lc.type()).born(lc.value()).load();
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    if (null != sb) {
      if (log.isInfoEnabled())       log.info(""String_Node_Str"");
      Setup setup=sb.value().newInstance();
      config.getServletContext().setAttribute(Setup.class.getName(),setup);
      setup.init(config);
    }
  }
 catch (  InstantiationException e) {
    throw Lang.wrapThrow(e);
  }
catch (  IllegalAccessException e) {
    throw Lang.wrapThrow(e);
  }
}","public void load(Class<?> mainModule){
  try {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    IocBy ib=mainModule.getAnnotation(IocBy.class);
    SetupBy sb=mainModule.getAnnotation(SetupBy.class);
    Views vms=mainModule.getAnnotation(Views.class);
    Localization lc=mainModule.getAnnotation(Localization.class);
    if (null != ib) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",ib.type().getName());
      ioc=ib.type().newInstance().create(config,ib.args());
      config.getServletContext().setAttribute(Ioc.class.getName(),ioc);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    ArrayList<ViewMaker> makers=new ArrayList<ViewMaker>();
    makers.add(new DefaultViewMaker());
    if (null != vms)     for (    Class<? extends ViewMaker> type : vms.value())     makers.add(type.newInstance());
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",mainModule.getName());
    urls=new UrlMapImpl(ioc,context);
    urls.setOk(mainModule.getAnnotation(Ok.class));
    urls.setFail(mainModule.getAnnotation(Fail.class));
    urls.setAdaptBy(mainModule.getAnnotation(AdaptBy.class));
    urls.setFilters(mainModule.getAnnotation(Filters.class));
    urls.setEncoding(mainModule.getAnnotation(Encoding.class));
    urls.add(makers,mainModule);
    Modules modules=mainModule.getAnnotation(Modules.class);
    if (null != modules) {
      for (      Class<?> module : modules.value()) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",module.getName());
        urls.add(makers,module);
      }
      for (      String packageZ : modules.packages()) {
        if (log.isDebugEnabled())         log.debugf(""String_Node_Str"",packageZ);
        List<Class<?>> list=Resources.scanClass(null,Package.getPackage(packageZ));
        if (list != null)         for (        Class<?> module : list) {
          if (log.isDebugEnabled())           log.debugf(""String_Node_Str"",module.getName());
          urls.add(makers,module);
        }
      }
    }
    config.getServletContext().setAttribute(UrlMap.class.getName(),urls);
    if (null != lc) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",lc.value());
      msgss=Mirror.me(lc.type()).born(lc.value()).load();
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    if (null != sb) {
      if (log.isInfoEnabled())       log.info(""String_Node_Str"");
      Setup setup=sb.value().newInstance();
      config.getServletContext().setAttribute(Setup.class.getName(),setup);
      setup.init(config);
    }
  }
 catch (  InstantiationException e) {
    throw Lang.wrapThrow(e);
  }
catch (  IllegalAccessException e) {
    throw Lang.wrapThrow(e);
  }
}"
43695,"private void load(Map<String,Map<String,Object>> map,File[] files){
  for (  File f : files) {
    if (f.isDirectory()) {
      loadFromDir(map,f);
    }
 else     if (f.isFile()) {
      map.putAll(buildMap(f));
    }
  }
}","private void load(Map<String,Map<String,Object>> map,File[] files){
  for (  File f : files) {
    if (f.isDirectory()) {
      loadFromDir(map,f);
    }
 else     if (f.isFile()) {
      Map<String,Map<String,Object>> fileMap=buildMap(f);
      if (null != fileMap && fileMap.size() > 0)       map.putAll(fileMap);
    }
  }
}"
43696,"private void unpackagePrivateData(Type type){
  if (type.equals(Type.BOOLEAN_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.BYTE_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.CHAR_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.SHORT_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.INT_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.LONG_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.FLOAT_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.DOUBLE_TYPE)) {
    mv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","private void unpackagePrivateData(Type type){
  if (type.equals(Type.BOOLEAN_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.BYTE_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.CHAR_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.SHORT_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.INT_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.LONG_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.FLOAT_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type.equals(Type.DOUBLE_TYPE)) {
    mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}"
43697,"public Link(Mirror<?> mirror,Field field,ManyMany mm,boolean fromName,boolean toName){
  this.ownField=field;
  this.type=LinkType.ManyMany;
  this.mapKeyField=""String_Node_Str"".equals(mm.key()) ? null : mm.key();
  this.targetClass=mm.target();
  this.from=mm.from();
  this.to=mm.to();
  this.relation=Relation.make(mm.relation());
  this.referField=lookupKeyField(mirror,fromName);
  this.targetField=lookupKeyField(Mirror.me(targetClass),toName);
  if (null == this.referField || null == this.targetField) {
    throw Lang.makeThrow(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mirror.getType().getName(),field.getName(),targetClass.getName(),referField,targetField);
  }
}","@Deprecated public Link(Mirror<?> mirror,Field field,ManyMany mm,boolean fromName,boolean toName){
  this.ownField=field;
  this.type=LinkType.ManyMany;
  this.mapKeyField=""String_Node_Str"".equals(mm.key()) ? null : mm.key();
  this.targetClass=mm.target();
  this.from=mm.from();
  this.to=mm.to();
  this.relation=Relation.make(mm.relation());
  this.referField=lookupKeyField(mirror,fromName);
  this.targetField=lookupKeyField(Mirror.me(targetClass),toName);
  if (null == this.referField || null == this.targetField) {
    throw Lang.makeThrow(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mirror.getType().getName(),field.getName(),targetClass.getName(),referField,targetField);
  }
}"
43698,"private Link evalLink(DatabaseMeta db,Connection conn,Mirror<?> mirror,Field field){
  try {
    One one=field.getAnnotation(One.class);
    if (null != one) {
      return new Link(mirror,field,one);
    }
 else {
      Many many=field.getAnnotation(Many.class);
      if (null != many) {
        return new Link(mirror,field,many);
      }
 else {
        ManyMany mm=field.getAnnotation(ManyMany.class);
        if (null != mm) {
          Statement stat=null;
          ResultSet rs=null;
          ResultSetMetaData rsmd=null;
          boolean fromName=false;
          boolean toName=false;
          try {
            stat=conn.createStatement();
            Segment tableName=new CharSegment(mm.relation());
            rs=stat.executeQuery(db.getResultSetMetaSql(TableName.render(tableName)));
            rsmd=rs.getMetaData();
            fromName=!Daos.isIntLikeColumn(rsmd,mm.from());
            toName=!Daos.isIntLikeColumn(rsmd,mm.to());
          }
 catch (          Exception e) {
            if (log.isWarnEnabled())             log.warnf(""String_Node_Str"" + ""String_Node_Str"",mm.relation(),mm.from(),mm.to());
          }
 finally {
            Daos.safeClose(stat,rs);
          }
          return new Link(mirror,field,mm,fromName,toName);
        }
      }
    }
  }
 catch (  Exception e) {
    throw Lang.makeThrow(""String_Node_Str"",field.getName(),mirror.getType().getName(),e.getMessage());
  }
  return null;
}","private Link evalLink(DatabaseMeta db,Connection conn,Mirror<?> mirror,Field field){
  try {
    One one=field.getAnnotation(One.class);
    if (null != one) {
      return Link.getLinkForOne(mirror,field,one.target(),one.field());
    }
 else {
      Many many=field.getAnnotation(Many.class);
      if (null != many) {
        return Link.getLinkForMany(mirror,field,many.target(),many.field(),many.key());
      }
 else {
        ManyMany mm=field.getAnnotation(ManyMany.class);
        if (null != mm) {
          Statement stat=null;
          ResultSet rs=null;
          ResultSetMetaData rsmd=null;
          boolean fromName=false;
          boolean toName=false;
          try {
            stat=conn.createStatement();
            Segment tableName=new CharSegment(mm.relation());
            rs=stat.executeQuery(db.getResultSetMetaSql(TableName.render(tableName)));
            rsmd=rs.getMetaData();
            fromName=!Daos.isIntLikeColumn(rsmd,mm.from());
            toName=!Daos.isIntLikeColumn(rsmd,mm.to());
          }
 catch (          Exception e) {
            if (log.isWarnEnabled())             log.warnf(""String_Node_Str"" + ""String_Node_Str"",mm.relation(),mm.from(),mm.to());
          }
 finally {
            Daos.safeClose(stat,rs);
          }
          return Link.getLinkForManyMany(mirror,field,mm.target(),mm.key(),mm.from(),mm.to(),mm.relation(),fromName,toName);
        }
      }
    }
  }
 catch (  Exception e) {
    throw Lang.makeThrow(""String_Node_Str"",field.getName(),mirror.getType().getName(),e.getMessage());
  }
  return null;
}"
43699,"public NutFilePool(String homePath,int size){
  this.size=size;
  home=Files.findFile(homePath);
  if (null == home) {
    home=new File(homePath);
    try {
      Files.makeDir(home);
    }
 catch (    IOException e) {
      throw Lang.wrapThrow(e);
    }
  }
  if (!home.isDirectory())   throw Lang.makeThrow(""String_Node_Str"",homePath,this.getClass().getName());
  File last=home;
  String[] subs=null;
  while (last.isDirectory()) {
    subs=last.list(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.matches(""String_Node_Str"");
      }
    }
);
    if (null != subs && subs.length > 0) {
      last=new File(last.getAbsolutePath() + ""String_Node_Str"" + subs[subs.length - 1]);
      if (last.isFile()) {
        cursor=Pools.getFileId(home,last);
        break;
      }
    }
 else {
      break;
    }
  }
}","public NutFilePool(String homePath,int size){
  this.size=size;
  try {
    home=Files.createIfNoExists(homePath);
  }
 catch (  IOException e) {
    throw Lang.wrapThrow(e);
  }
  if (null == home) {
    home=new File(homePath);
    Files.makeDir(home);
  }
  if (!home.isDirectory())   throw Lang.makeThrow(""String_Node_Str"",homePath,this.getClass().getName());
  File last=home;
  String[] subs=null;
  while (last.isDirectory()) {
    subs=last.list(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.matches(""String_Node_Str"");
      }
    }
);
    if (null != subs && subs.length > 0) {
      last=new File(last.getAbsolutePath() + ""String_Node_Str"" + subs[subs.length - 1]);
      if (last.isFile()) {
        cursor=Pools.getFileId(home,last);
        break;
      }
    }
 else {
      break;
    }
  }
}"
43700,"/** 
 * 创建新目录，如果父目录不存在，也一并创建。可接受 null 参数
 * @param dir 目录对象
 * @return false，如果目录已存在。 true 创建成功
 * @throws IOException
 */
public static boolean makeDir(File dir) throws IOException {
  if (null == dir)   return false;
  if (dir.exists())   return false;
  return dir.mkdirs();
}","/** 
 * 创建新目录，如果父目录不存在，也一并创建。可接受 null 参数
 * @param dir 目录对象
 * @return false，如果目录已存在。 true 创建成功
 * @throws IOException
 */
public static boolean makeDir(File dir){
  if (null == dir)   return false;
  if (dir.exists())   return false;
  return dir.mkdirs();
}"
43701,"/** 
 * 从 CLASSPATH 下寻找一个文件
 * @param path 文件路径
 * @return 文件对象，如果不存在，则为 null
 */
public static File findFile(String path){
  return findFile(path,Files.class,Charset.defaultCharset().name());
}","/** 
 * 从 CLASSPATH 下寻找一个文件
 * @param path 文件路径
 * @return 文件对象，如果不存在，则为 null
 */
public static File findFile(String path){
  return findFile(path,Files.class.getClassLoader(),Charset.defaultCharset().name());
}"
43702,"/** 
 * 将文件改名
 * @param src 文件
 * @param newName 新名称
 * @return 改名是否成功
 */
public static boolean rename(File src,String newName){
  if (src == null || newName == null)   return false;
  if (src.exists()) {
    File newFile=new File(src.getParent() + ""String_Node_Str"" + newName);
    if (newFile.exists())     return false;
    try {
      Files.makeDir(newFile.getParentFile());
    }
 catch (    IOException e) {
      return false;
    }
    return src.renameTo(newFile);
  }
  return false;
}","/** 
 * 将文件改名
 * @param src 文件
 * @param newName 新名称
 * @return 改名是否成功
 */
public static boolean rename(File src,String newName){
  if (src == null || newName == null)   return false;
  if (src.exists()) {
    File newFile=new File(src.getParent() + ""String_Node_Str"" + newName);
    if (newFile.exists())     return false;
    Files.makeDir(newFile.getParentFile());
    return src.renameTo(newFile);
  }
  return false;
}"
43703,"public Context(){
  this.map=new HashMap<String,Object>();
}","public Context(Map<String,Object> map){
  this.map=map;
}"
43704,"public void load(Class<?> mainModule){
  try {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    IocBy ib=mainModule.getAnnotation(IocBy.class);
    SetupBy sb=mainModule.getAnnotation(SetupBy.class);
    Views vms=mainModule.getAnnotation(Views.class);
    Localization lc=mainModule.getAnnotation(Localization.class);
    if (null != ib) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",ib.type().getName());
      ioc=ib.type().newInstance().create(config,ib.args());
      config.getServletContext().setAttribute(Ioc.class.getName(),ioc);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    ArrayList<ViewMaker> makers=new ArrayList<ViewMaker>();
    makers.add(new DefaultViewMaker());
    if (null != vms)     for (    Class<? extends ViewMaker> type : vms.value())     makers.add(type.newInstance());
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",mainModule.getName());
    urls=new UrlMapImpl(ioc);
    urls.setOk(mainModule.getAnnotation(Ok.class));
    urls.setFail(mainModule.getAnnotation(Fail.class));
    urls.setAdaptBy(mainModule.getAnnotation(AdaptBy.class));
    urls.setFilters(mainModule.getAnnotation(Filters.class));
    urls.setEncoding(mainModule.getAnnotation(Encoding.class));
    urls.add(makers,mainModule);
    Modules modules=mainModule.getAnnotation(Modules.class);
    if (null != modules)     for (    Class<?> module : modules.value()) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",module.getName());
      urls.add(makers,module);
    }
    config.getServletContext().setAttribute(UrlMap.class.getName(),urls);
    if (null != lc) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",lc.value());
      msgss=Mirror.me(lc.type()).born(lc.value()).load();
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    if (null != sb) {
      if (log.isInfoEnabled())       log.info(""String_Node_Str"");
      Setup setup=sb.value().newInstance();
      config.getServletContext().setAttribute(Setup.class.getName(),setup);
      setup.init(config);
    }
  }
 catch (  InstantiationException e) {
    throw Lang.wrapThrow(e);
  }
catch (  IllegalAccessException e) {
    throw Lang.wrapThrow(e);
  }
}","public void load(Class<?> mainModule){
  try {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    IocBy ib=mainModule.getAnnotation(IocBy.class);
    SetupBy sb=mainModule.getAnnotation(SetupBy.class);
    Views vms=mainModule.getAnnotation(Views.class);
    Localization lc=mainModule.getAnnotation(Localization.class);
    if (null != ib) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",ib.type().getName());
      ioc=ib.type().newInstance().create(config,ib.args());
      config.getServletContext().setAttribute(Ioc.class.getName(),ioc);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    ArrayList<ViewMaker> makers=new ArrayList<ViewMaker>();
    makers.add(new DefaultViewMaker());
    if (null != vms)     for (    Class<? extends ViewMaker> type : vms.value())     makers.add(type.newInstance());
    if (log.isDebugEnabled())     log.debugf(""String_Node_Str"",mainModule.getName());
    urls=new UrlMapImpl(ioc,context);
    urls.setOk(mainModule.getAnnotation(Ok.class));
    urls.setFail(mainModule.getAnnotation(Fail.class));
    urls.setAdaptBy(mainModule.getAnnotation(AdaptBy.class));
    urls.setFilters(mainModule.getAnnotation(Filters.class));
    urls.setEncoding(mainModule.getAnnotation(Encoding.class));
    urls.add(makers,mainModule);
    Modules modules=mainModule.getAnnotation(Modules.class);
    if (null != modules)     for (    Class<?> module : modules.value()) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",module.getName());
      urls.add(makers,module);
    }
    config.getServletContext().setAttribute(UrlMap.class.getName(),urls);
    if (null != lc) {
      if (log.isDebugEnabled())       log.debugf(""String_Node_Str"",lc.value());
      msgss=Mirror.me(lc.type()).born(lc.value()).load();
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    if (null != sb) {
      if (log.isInfoEnabled())       log.info(""String_Node_Str"");
      Setup setup=sb.value().newInstance();
      config.getServletContext().setAttribute(Setup.class.getName(),setup);
      setup.init(config);
    }
  }
 catch (  InstantiationException e) {
    throw Lang.wrapThrow(e);
  }
catch (  IllegalAccessException e) {
    throw Lang.wrapThrow(e);
  }
}"
43705,"public DefaultLoading(ServletConfig config){
  this.config=config;
}","public DefaultLoading(ServletConfig config){
  this.config=config;
  context=new Context();
  saveRootPathToContext(config);
  if (log.isDebugEnabled()) {
    log.debugf(""String_Node_Str"",Json.toJson(context,JsonFormat.nice()));
  }
}"
43706,"private void _insertSelf(Entity<?> entity,Object obj){
  if (null != entity.getBefores())   for (  FieldQuery nq : entity.getBefores())   nq.update(this,obj);
  Sql sql=sqlMaker.insert(entity,obj);
  execute(sql);
  if (null != entity.getAfters())   for (  FieldQuery nq : entity.getAfters())   nq.update(this,obj);
}","private void _insertSelf(Entity<?> entity,Object obj){
  runFieldQuery(entity.getBefores(),obj);
  execute(sqlMaker.insert(entity,obj));
  runFieldQuery(entity.getAfters(),obj);
}"
43707,"public <T>T fastInsert(T obj){
  if (Lang.length(obj) > 0) {
    Object first=Lang.first(obj);
    final Entity<?> entity=this.getEntity(first.getClass());
    Lang.each(obj,new Each<Object>(){
      public void invoke(      int i,      Object ele,      int length){
        execute(sqlMaker.insert(entity,ele));
      }
    }
);
  }
  return obj;
}","public <T>T fastInsert(T obj){
  if (Lang.length(obj) > 0) {
    Object first=Lang.first(obj);
    final Entity<?> entity=this.getEntity(first.getClass());
    Lang.each(obj,new Each<Object>(){
      public void invoke(      int i,      Object ele,      int length){
        runFieldQuery(entity.getBefores(),ele);
        execute(sqlMaker.insert(entity,ele));
      }
    }
);
  }
  return obj;
}"
43708,"/** 
 * 获取一个路径的绝对路径
 * @param path 路径
 * @param klassLoader 参考 ClassLoader
 * @param enc 路径编码方式
 * @return 绝对路径
 */
public static String absolute(String path,ClassLoader klassLoader,String enc){
  path=normalize(path,enc);
  if (null == path || path.length() == 0)   return null;
  File f=new File(path);
  if (!f.exists()) {
    URL url=klassLoader.getResource(path);
    if (null == url)     url=ClassLoader.getSystemResource(path);
    if (null != url) {
      return url.getPath();
    }
    return null;
  }
  return path;
}","/** 
 * 获取一个路径的绝对路径
 * @param path 路径
 * @param klassLoader 参考 ClassLoader
 * @param enc 路径编码方式
 * @return 绝对路径
 */
public static String absolute(String path,ClassLoader klassLoader,String enc){
  path=normalize(path,enc);
  if (null == path || path.length() == 0)   return null;
  File f=new File(path);
  if (!f.exists()) {
    URL url=klassLoader.getResource(path);
    if (null == url)     url=ClassLoader.getSystemResource(path);
    if (null != url)     return normalize(url.getPath(),enc);
    return null;
  }
  return path;
}"
43709,"public Entity(){
  fields=new HashMap<String,EntityField>();
  links=new LinkedList<Link>();
  _ln_cache=new HashMap<String,List<Link>>();
}","public Entity(){
  super();
  fields=new HashMap<String,EntityField>();
  links=new LinkedList<Link>();
  _ln_cache=new HashMap<String,List<Link>>();
}"
43710,"public EntityField(Entity<?> entity,Field field){
  if (null != entity && null != field) {
    this.mirror=Mirror.me(field.getType());
    this.entity=entity;
    this.field=field;
    try {
      getter=entity.getMirror().getGetter(field);
      getter.setAccessible(true);
    }
 catch (    NoSuchMethodException e) {
    }
    try {
      setter=entity.getMirror().getSetter(field);
      setter.setAccessible(true);
    }
 catch (    NoSuchMethodException e) {
    }
  }
}","public EntityField(Entity<?> entity,Field field){
  super();
  if (null != entity && null != field) {
    this.mirror=Mirror.me(field.getType());
    this.entity=entity;
    this.field=field;
    try {
      getter=entity.getMirror().getGetter(field);
      getter.setAccessible(true);
    }
 catch (    NoSuchMethodException e) {
    }
    try {
      setter=entity.getMirror().getSetter(field);
      setter.setAccessible(true);
    }
 catch (    NoSuchMethodException e) {
    }
  }
}"
43711,"protected NutIoc(ObjectMaker maker,IocLoader loader,IocContext context,String defaultScope){
  this.maker=maker;
  this.defaultScope=defaultScope;
  this.context=context;
  if (loader instanceof CachedIocLoader)   this.loader=loader;
 else   this.loader=CachedIocLoaderImpl.create(loader);
  vpms=new ArrayList<ValueProxyMaker>(5);
  addValueProxyMaker(new DefaultValueProxyMaker());
  mirrors=new DefaultMirrorFactory(this);
}","protected NutIoc(ObjectMaker maker,IocLoader loader,IocContext context,String defaultScope,MirrorFactory mirrors){
  this.maker=maker;
  this.defaultScope=defaultScope;
  this.context=context;
  if (loader instanceof CachedIocLoader)   this.loader=loader;
 else   this.loader=CachedIocLoaderImpl.create(loader);
  vpms=new ArrayList<ValueProxyMaker>(5);
  addValueProxyMaker(new DefaultValueProxyMaker());
  if (mirrors == null)   this.mirrors=new DefaultMirrorFactory(this);
 else   this.mirrors=mirrors;
}"
43712,"public static Link getLinkForOne(Field field,Class<?> targetClass,Field referField,Field targetField) throws NoSuchFieldException {
  Link link=new Link(field,targetClass,LinkType.One,referField,targetField);
  return link;
}","/** 
 * 创建一条一对一的映射，将<b>本 POJO</b> 的一个字段通过本身的一个参考字段指向<b>目标POJO</b>的主键。 <p> <b style=color:red>这里需要注意的是：</b><br> 你的 <b>本 POJO</b>的参考字段类型要同<b>目标POJO</b>的主键要对应。即， <ul> <li><b>目标POJO</b>不可以是复合主键 <li>如果你的 <b>本 POJO</b>参考字段类型是整数，<b>目标POJO</b>的主键就必须是整数型主键。 <li>如果你的 <b>本 POJO</b>参考字段类型是字符串，<b>目标POJO</b>的主键就必须是字符型主键 </ul>
 * @param mirror <b>本 POJO</b>的类型
 * @param field 被映射的字段，它的类型应该是<b>目标POJO</b>的类型的接口或者超类
 * @param targetClass <b>目标POJO</b>的类型
 * @param referFld <b>本 POJO</b>的参考字段
 * @param targetPkFld <b>目标POJO</b>的主键
 * @return 映射对象
 */
public static Link getLinkForOne(Mirror<?> mirror,Field field,Class<?> targetClass,Field referFld,Field targetPkFld){
  Link link=new Link(field,targetClass);
  link.type=LinkType.One;
  link.referField=referFld;
  link.targetField=targetPkFld;
  return link;
}"
43713,"public static Link getLinkForMany(Field field,Class<?> targetClass,Field referField,Field targetField,String key) throws NoSuchFieldException {
  Link link=new Link(field,targetClass,LinkType.Many,referField,targetField);
  link.mapKeyField=""String_Node_Str"".equals(key) ? null : key;
  return link;
}","/** 
 * 创建一条一对多的映射，将<b>本 POJO</b> 的一个字段通过<b>目标POJO</b>一个参考字段指向本身的主键。 因此<b>本 POJO</b>的这个映射字段可以是一个集合或数组，因为可能有多个<b>目标POJO</b>指向自己 <p> <b style=color:red>这里需要注意的是：</b><br> 你的 <b>目标POJO</b>的参考字段类型要同<b>本POJO</b>的主键要对应。即， <ul> <li><b>本POJO</b>不可以是复合主键 <li>如果你的 <b>目标 POJO</b>参考字段类型是整数，<b>本POJO</b>的主键就必须是整数型主键。 <li>如果你的 <b>目标 POJO</b>参考字段类型是字符串，<b>本POJO</b>的主键就必须是字符型主键 <li>如果 referField 为 null，则将映射 <b>目标 POJO</b>的全部集合 -- 比较适用于枚举类型。 </ul>
 * @param mirror <b>本 POJO</b>的类型
 * @param field 被映射的字段，它的类型应该是<b>目标POJO</b>的类型的接口或者超类
 * @param targetClass <b>目标POJO</b>的类型
 * @param targetReferFld <b>本 POJO</b>主键
 * @param pkFld <b>目标POJO</b>的参考字段
 * @param key 如果被映射字段是个 Map， 你需要声明一下，<b>目标POJO</b>哪个字段是用来作为键值的。 默认的，赋值 null 即可
 * @return 映射对象
 */
public static Link getLinkForMany(Mirror<?> mirror,Field field,Class<?> targetClass,Field targetReferFld,Field pkFld,String key){
  Link link=new Link(field,targetClass);
  link.type=LinkType.Many;
  link.mapKeyField=Strings.isBlank(key) ? null : key;
  link.targetField=targetReferFld;
  link.referField=pkFld;
  return link;
}"
43714,"public static Link getLinkForManyMany(Mirror<?> mirror,Field field,Class<?> targetClass,String key,String from,String to,String relation,Field referField,Field targetField) throws NoSuchFieldException {
  Link link=new Link(field,targetClass,LinkType.ManyMany,referField,targetField);
  link.mapKeyField=""String_Node_Str"".equals(key) ? null : key;
  link.from=from;
  link.to=to;
  link.relation=Relation.make(relation);
  if (null == link.referField || null == link.targetField) {
    throw Lang.makeThrow(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mirror.getType().getName(),field.getName(),targetClass.getName(),link.referField,link.targetField);
  }
  return link;
}","/** 
 * 创建一条多对多的映射，通过一个关联表的两个字段 <ul> <li>from - selfClass.PK <li>to - targetClass.PK </ul> 为当前字段关联一组<b>目标POJO</b> <p> <b style=color:red>这里需要注意的是：</b><br> 无论是 from 和 to，都要和相对应的对象的主键类型一直 <ul> <li><b>本POJO</b>和<b>目标POJO</b>都不可以是复合主键 <li>如果 from 字段类型是整数，<b>本POJO</b>的主键就必须是整数型主键。 <li>如果 to 字段类型是字符串，<b>本POJO</b>的主键就必须是字符型主键 </ul>
 * @param mirror <b>本 POJO</b>的类型
 * @param field 被映射的字段，它的类型应该是<b>目标POJO</b>的类型的接口或者超类
 * @param targetClass <b>目标POJO</b>的类型
 * @param selfPk <b>本 POJO</b>的主键
 * @param targetPk <b>目标 POJO</b>的主键
 * @param key 如果被映射字段是个 Map， 你需要声明一下，<b>目标POJO</b>哪个字段是用来作为键值的。 <br> 默认的，赋值 null 即可
 * @param relation 关联表名
 * @param from 在关联表中指向 <b>本 POJO</b>主键的字段名
 * @param to 在关联表中指向 <b>目标POJO</b>主键的字段名
 * @return 映射对象
 */
public static Link getLinkForManyMany(Mirror<?> mirror,Field field,Class<?> targetClass,Field selfPk,Field targetPk,String key,String relation,String from,String to){
  Link link=new Link(field,targetClass);
  link.type=LinkType.ManyMany;
  link.mapKeyField=""String_Node_Str"".equals(key) ? null : key;
  link.from=from;
  link.to=to;
  link.relation=Relation.make(relation);
  link.referField=selfPk;
  link.targetField=targetPk;
  if (null == link.referField || null == link.targetField) {
    throw Lang.makeThrow(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mirror.getType().getName(),field.getName(),targetClass.getName(),link.referField,link.targetField);
  }
  return link;
}"
43715,"private Link(Field field,Class<?> targetClass,LinkType type,Field referField,Field targetField) throws NoSuchFieldException {
  this.ownField=field;
  this.targetClass=targetClass;
  this.type=type;
  this.referField=referField;
  this.targetField=targetField;
}","private Link(Field field,Class<?> targetClass){
  this.ownField=field;
  this.targetClass=targetClass;
}"
43716,"public static void safeClose(ResultSet rs){
  if (null != rs)   try {
    if (!rs.isClosed())     rs.close();
  }
 catch (  Throwable e) {
  }
}","public static void safeClose(ResultSet rs){
  if (null != rs)   try {
    rs.close();
  }
 catch (  Throwable e) {
  }
}"
43717,"public void execute(Connection conn) throws DaoException {
  mergeCondition();
  updateCount=-1;
  try {
    if (sql.isSELECT()) {
      if (null != callback) {
        Pager pager=context.getPager();
        int rsType=null == pager ? ResultSet.TYPE_FORWARD_ONLY : pager.getResultSetType();
        PreparedStatement stat=null;
        ResultSet rs=null;
        try {
          String sqlStr=sql.toPreparedStatementString();
          stat=conn.prepareStatement(sqlStr,rsType,ResultSet.CONCUR_READ_ONLY);
          adapter.process(stat,sql,entity);
          rs=stat.executeQuery();
          context.setResult(callback.invoke(conn,rs,this));
        }
  finally {
          Daos.safeClose(stat,rs);
        }
      }
    }
 else     if (sql.isUPDATE() || sql.isINSERT() || sql.isDELETE()|| sql.isTRUNCATE()) {
      PreparedStatement stat=null;
      try {
        String sqlStr=sql.toPreparedStatementString();
        stat=conn.prepareStatement(sqlStr);
        adapter.process(stat,sql,entity);
        stat.execute();
        updateCount=stat.getUpdateCount();
        stat.close();
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        Daos.safeClose(stat,null);
      }
    }
 else {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        stat.execute(sql.toString());
        stat.close();
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        Daos.safeClose(stat,null);
      }
    }
  }
 catch (  SQLException e) {
    throw new DaoException(format(""String_Node_Str"",sql.toString()),e);
  }
}","public void execute(Connection conn) throws DaoException {
  mergeCondition();
  updateCount=-1;
  boolean statIsClosed=false;
  try {
    if (sql.isSELECT()) {
      if (null != callback) {
        Pager pager=context.getPager();
        int rsType=null == pager ? ResultSet.TYPE_FORWARD_ONLY : pager.getResultSetType();
        PreparedStatement stat=null;
        ResultSet rs=null;
        try {
          String sqlStr=sql.toPreparedStatementString();
          stat=conn.prepareStatement(sqlStr,rsType,ResultSet.CONCUR_READ_ONLY);
          adapter.process(stat,sql,entity);
          rs=stat.executeQuery();
          context.setResult(callback.invoke(conn,rs,this));
        }
  finally {
          Daos.safeClose(stat,rs);
        }
      }
    }
 else     if (sql.isUPDATE() || sql.isINSERT() || sql.isDELETE()|| sql.isTRUNCATE()) {
      PreparedStatement stat=null;
      try {
        String sqlStr=sql.toPreparedStatementString();
        stat=conn.prepareStatement(sqlStr);
        adapter.process(stat,sql,entity);
        stat.execute();
        updateCount=stat.getUpdateCount();
        stat.close();
        statIsClosed=true;
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        if (!statIsClosed)         Daos.safeClose(stat);
      }
    }
 else {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        stat.execute(sql.toString());
        stat.close();
        if (null != callback)         context.setResult(callback.invoke(conn,null,this));
      }
  finally {
        if (!statIsClosed)         Daos.safeClose(stat);
      }
    }
  }
 catch (  SQLException e) {
    throw new DaoException(format(""String_Node_Str"",sql.toString()),e);
  }
}"
43718,"@Override protected void rollback(){
  StringBuilder es=new StringBuilder();
  for (  Pair p : list) {
    try {
      p.conn.rollback();
    }
 catch (    Throwable e) {
      es.append(e.getMessage()).append(""String_Node_Str"");
    }
 finally {
      try {
        p.conn.close();
      }
 catch (      SQLException e) {
        es.append(e.getMessage()).append(""String_Node_Str"");
      }
    }
  }
  if (es.length() > 0)   throw new RuntimeException(es.toString());
}","@Override protected void rollback(){
  for (  Pair p : list) {
    try {
      p.conn.rollback();
    }
 catch (    Throwable e) {
    }
  }
}"
43719,"@Override protected void commit() throws Exception {
  ComboException ce=new ComboException();
  for (  Pair p : list) {
    try {
      p.conn.commit();
      if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    SQLException e) {
      ce.add(e);
    }
 finally {
      p.conn.close();
    }
  }
  list.clear();
  if (null != ce.getCause()) {
    throw ce;
  }
}","@Override protected void commit(){
  ComboException ce=new ComboException();
  for (  Pair p : list) {
    try {
      p.conn.commit();
      if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    SQLException e) {
      ce.add(e);
    }
  }
  if (null != ce.getCause()) {
    throw ce;
  }
}"
43720,"@Override public void close() throws SQLException {
  for (  Pair p : list)   if (!p.conn.isClosed()) {
    try {
      if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    Exception e) {
    }
    p.conn.close();
  }
}","@Override public void close(){
  ComboException ce=new ComboException();
  for (  Pair p : list) {
    try {
      if (!p.conn.isClosed())       if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    Throwable e) {
    }
 finally {
      try {
        p.conn.close();
      }
 catch (      Exception e) {
        ce.add(e);
      }
    }
  }
  list.clear();
}"
43721,"private static void depose(){
  if (count.get() == 0)   try {
    trans.get().close();
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    trans.set(null);
  }
}","private static void depose(){
  if (count.get() == 0)   try {
    trans.get().close();
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    trans.set(null);
  }
}"
43722,protected abstract void commit() throws Exception ;,protected abstract void commit();
43723,public abstract void close() throws SQLException ;,public abstract void close();
43724,"public void setEntityMaker(EntityMaker entityMaker){
  this.entityMaker=entityMaker;
}","public void setEntityMaker(EntityMaker entityMaker){
  if (null == entityMaker) {
    log.error(""String_Node_Str"");
    return;
  }
  this.entityMaker=entityMaker;
  entities=new EntityHolder(this.entityMaker);
}"
43725,"/** 
 * 'databaseProductName' | 'driverName' <pre> psql:	'PostgreSQL'	|'PostgreSQL Native Driver' MySQL:	'MySQL'			|'MySQL-AB JDBC Driver' Oracle:	'Oracle'		|'Oracle JDBC driver' db2:		'DB2/NT'		|'IBM DB2 JDBC Universal Driver Architecture' SQLServer:	'Microsoft SQL Serve'	|'SQL Serve' </pre>
 */
public void setDataSource(DataSource dataSource){
  entities=new EntityHolder(null == entityMaker ? new DefaultEntityMaker() : entityMaker);
  this.dataSource=dataSource;
}","/** 
 * 'databaseProductName' | 'driverName' <pre> psql:	'PostgreSQL'	|'PostgreSQL Native Driver' MySQL:	'MySQL'			|'MySQL-AB JDBC Driver' Oracle:	'Oracle'		|'Oracle JDBC driver' db2:		'DB2/NT'		|'IBM DB2 JDBC Universal Driver Architecture' SQLServer:	'Microsoft SQL Serve'	|'SQL Serve' </pre>
 */
public void setDataSource(DataSource dataSource){
  if (null == entityMaker)   entities=new EntityHolder(new DefaultEntityMaker());
  this.dataSource=dataSource;
}"
43726,"public static void safeClose(ResultSet rs){
  if (null != rs)   try {
    rs.close();
  }
 catch (  Throwable e) {
  }
}","public static void safeClose(ResultSet rs){
  if (null != rs)   try {
    if (!rs.isClosed())     rs.close();
  }
 catch (  Throwable e) {
  }
}"
43727,"public void debug(Object message){
  debug(message,null);
}","public void debug(Object message){
  if (isDebugEnabled())   log(LEVEL_DEBUG,message,null);
}"
43728,"public void infof(String fmt,Object... args){
  info(String.format(fmt,args));
}","public void infof(String fmt,Object... args){
  if (isInfoEnabled())   log(LEVEL_INFO,String.format(fmt,args),null);
}"
43729,"public void tracef(String fmt,Object... args){
  trace(String.format(fmt,args));
}","public void tracef(String fmt,Object... args){
  if (isTraceEnabled())   log(LEVEL_TRACE,String.format(fmt,args),null);
}"
43730,"public void errorf(String fmt,Object... args){
  error(String.format(fmt,args));
}","public void errorf(String fmt,Object... args){
  if (isErrorEnabled())   log(LEVEL_ERROR,String.format(fmt,args),null);
}"
43731,"public void error(Object message){
  error(message,null);
}","public void error(Object message){
  if (isErrorEnabled())   log(LEVEL_ERROR,message,null);
}"
43732,"public void fatal(Object message){
  fatal(message,null);
}","public void fatal(Object message){
  if (isFatalEnabled())   log(LEVEL_FATAL,message,null);
}"
43733,"public void debugf(String fmt,Object... args){
  debug(String.format(fmt,args));
}","public void debugf(String fmt,Object... args){
  if (isDebugEnabled())   log(LEVEL_DEBUG,String.format(fmt,args),null);
}"
43734,"public void warn(Object message){
  warn(message,null);
}","public void warn(Object message){
  if (isWarnEnabled())   log(LEVEL_WARN,message,null);
}"
43735,"public void trace(Object message){
  trace(message,null);
}","public void trace(Object message){
  if (isTraceEnabled())   log(LEVEL_TRACE,message,null);
}"
43736,"public void fatalf(String fmt,Object... args){
  fatal(String.format(fmt,args));
}","public void fatalf(String fmt,Object... args){
  if (isFatalEnabled())   log(LEVEL_FATAL,String.format(fmt,args),null);
}"
43737,"public void warnf(String fmt,Object... args){
  warn(String.format(fmt,args));
}","public void warnf(String fmt,Object... args){
  if (isWarnEnabled())   log(LEVEL_WARN,String.format(fmt,args),null);
}"
43738,"public void info(Object message){
  info(message,null);
}","public void info(Object message){
  if (isInfoEnabled())   log(LEVEL_INFO,message,null);
}"
43739,"public void warn(Object message,Throwable t){
  if (isWarnEnabled())   log(WARN_LEVEL,message,t);
}","public void warn(Object message,Throwable t){
  if (isWarnEnabled())   log(LEVEL_WARN,message,t);
}"
43740,"public void trace(Object message,Throwable t){
  if (isTraceEnabled())   log(TRACE_LEVEL,message,t);
}","public void trace(Object message,Throwable t){
  if (isTraceEnabled())   log(LEVEL_TRACE,message,t);
}"
43741,"public void debug(Object message,Throwable t){
  if (isDebugEnabled())   log(DEBUG_LEVEL,message,t);
}","public void debug(Object message,Throwable t){
  if (isDebugEnabled())   log(LEVEL_DEBUG,message,t);
}"
43742,"public JdkLogger(String className){
  jdkLogger=Logger.getLogger(className);
  isFatalEnabled=jdkLogger.isLoggable(FATAL_LEVEL);
  isErrorEnabled=jdkLogger.isLoggable(ERROR_LEVEL);
  isWarnEnabled=jdkLogger.isLoggable(WARN_LEVEL);
  isInfoEnabled=jdkLogger.isLoggable(INFO_LEVEL);
  isDebugEnabled=jdkLogger.isLoggable(DEBUG_LEVEL);
  isTraceEnabled=jdkLogger.isLoggable(TRACE_LEVEL);
}","public JdkLogger(String className){
  jdkLogger=Logger.getLogger(className);
  isFatalEnabled=jdkLogger.isLoggable(Level.SEVERE);
  isErrorEnabled=jdkLogger.isLoggable(Level.SEVERE);
  isWarnEnabled=jdkLogger.isLoggable(Level.WARNING);
  isInfoEnabled=jdkLogger.isLoggable(Level.INFO);
  isDebugEnabled=jdkLogger.isLoggable(Level.FINE);
  isTraceEnabled=jdkLogger.isLoggable(Level.FINEST);
}"
43743,"public void log(Level level,Object message,Throwable t){
  Throwable dummyException=new Throwable();
  StackTraceElement locations[]=dummyException.getStackTrace();
  String cname=""String_Node_Str"";
  String method=""String_Node_Str"";
  if (locations != null && locations.length > 2) {
    StackTraceElement caller=locations[2];
    cname=caller.getClassName();
    method=caller.getMethodName();
  }
  if (t == null)   jdkLogger.logp(level,cname,method,String.valueOf(message));
 else   jdkLogger.logp(level,cname,method,String.valueOf(message),t);
}","protected void log(int level_int,Object message,Throwable t){
  Level level=null;
switch (level_int) {
case LEVEL_FATAL:
    level=Level.SEVERE;
  break;
case LEVEL_ERROR:
level=Level.SEVERE;
break;
case LEVEL_WARN:
level=Level.WARNING;
break;
case LEVEL_INFO:
level=Level.INFO;
break;
case LEVEL_DEBUG:
level=Level.FINE;
break;
case LEVEL_TRACE:
level=Level.FINEST;
break;
default :
return;
}
Throwable dummyException=new Throwable();
StackTraceElement locations[]=dummyException.getStackTrace();
String cname=""String_Node_Str"";
String method=""String_Node_Str"";
if (locations != null && locations.length > 1) {
StackTraceElement caller=locations[2];
cname=caller.getClassName();
method=caller.getMethodName();
}
if (t == null) jdkLogger.logp(level,cname,method,String.valueOf(message));
 else jdkLogger.logp(level,cname,method,String.valueOf(message),t);
}"
43744,"public void error(Object message,Throwable t){
  if (isErrorEnabled())   log(ERROR_LEVEL,message,t);
}","public void error(Object message,Throwable t){
  if (isErrorEnabled())   log(LEVEL_ERROR,message,t);
}"
43745,"public void fatal(Object message,Throwable t){
  if (isFatalEnabled())   log(FATAL_LEVEL,message,t);
}","public void fatal(Object message,Throwable t){
  if (isFatalEnabled())   log(LEVEL_FATAL,message,t);
}"
43746,"public void info(Object message,Throwable t){
  if (isInfoEnabled())   log(INFO_LEVEL,message,t);
}","public void info(Object message,Throwable t){
  if (isInfoEnabled())   log(LEVEL_INFO,message,t);
}"
43747,"public void debug(Object message,Throwable t){
  if (isDebugEnabled())   logMessage(Level.DEBUG,message,t);
}","public void debug(Object message,Throwable t){
  if (isDebugEnabled())   logger.log(SELF_FQCN,Level.DEBUG,message,t);
}"
43748,"Log4JLogger(String className){
  logger=LogManager.getLogger(className);
  loadLevel();
}","Log4JLogger(String className){
  logger=LogManager.getLogger(className);
  isFatalEnabled=logger.isEnabledFor(Level.FATAL);
  isErrorEnabled=logger.isEnabledFor(Level.ERROR);
  isWarnEnabled=logger.isEnabledFor(Level.WARN);
  isInfoEnabled=logger.isEnabledFor(Level.INFO);
  isDebugEnabled=logger.isEnabledFor(Level.DEBUG);
  if (hasTrace)   isTraceEnabled=logger.isEnabledFor(Level.TRACE);
}"
43749,"public void error(Object message,Throwable t){
  if (isErrorEnabled())   logMessage(Level.ERROR,message,t);
}","public void error(Object message,Throwable t){
  if (isErrorEnabled())   logger.log(SELF_FQCN,Level.ERROR,message,t);
}"
43750,"public void fatal(Object message,Throwable t){
  if (isFatalEnabled())   logMessage(Level.FATAL,message,t);
}","public void fatal(Object message,Throwable t){
  if (isFatalEnabled())   logger.log(SELF_FQCN,Level.FATAL,message,t);
}"
43751,"public void warn(Object message,Throwable t){
  if (isWarnEnabled())   logMessage(Level.WARN,message,t);
}","public void warn(Object message,Throwable t){
  if (isWarnEnabled())   logger.log(SELF_FQCN,Level.WARN,message,t);
}"
43752,"public void trace(Object message,Throwable t){
  if (isTraceEnabled())   logMessage(Level.TRACE,message,t);
 else   if (!hasTrace)   debug(message,t);
}","public void trace(Object message,Throwable t){
  if (isTraceEnabled())   logger.log(SELF_FQCN,Level.TRACE,message,t);
 else   if ((!hasTrace) && isDebugEnabled())   logger.log(SELF_FQCN,Level.DEBUG,message,t);
}"
43753,"public void info(Object message,Throwable t){
  if (isInfoEnabled())   logMessage(Level.INFO,message,t);
}","public void info(Object message,Throwable t){
  if (isInfoEnabled())   logger.log(SELF_FQCN,Level.INFO,message,t);
}"
43754,"/** 
 * 将两个文件对象比较，得出相对路径
 * @param base 基础文件对象
 * @param file 相对文件对象
 * @return 相对于基础文件对象的相对路径
 */
public static String getRelativePath(File base,File file){
  if (base.isFile())   base=base.getParentFile();
  String[] bb=Strings.splitIgnoreBlank(base.getAbsolutePath(),""String_Node_Str"");
  String[] ff=Strings.splitIgnoreBlank(file.getAbsolutePath(),""String_Node_Str"");
  int pos=0;
  for (; pos < Math.min(bb.length,ff.length); pos++)   if (!bb[pos].equals(ff[pos]))   break;
  String path=Strings.dup(""String_Node_Str"",bb.length - pos);
  path+=Lang.concat(pos,ff.length - pos,'/',ff);
  return path;
}","/** 
 * 将两个路径比较，得出相对路径
 * @param base 基础路径
 * @param path 相对文件路径
 * @return 相对于基础路径对象的相对路径
 */
public static String getRelativePath(String base,String path){
  String[] bb=Strings.splitIgnoreBlank(getCanonicalPath(base),""String_Node_Str"");
  String[] ff=Strings.splitIgnoreBlank(getCanonicalPath(path),""String_Node_Str"");
  int len=Math.min(bb.length,ff.length);
  int pos=0;
  for (; pos < len; pos++)   if (!bb[pos].equals(ff[pos]))   break;
  String re=Strings.dup(""String_Node_Str"",bb.length - pos);
  re+=Lang.concat(pos,ff.length - pos,'/',ff);
  return re;
}"
43755,"public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
      re.set(name.toLowerCase(),rs.getObject(i));
    }
    return re;
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}","public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
      if (meta.getColumnType(i) == Types.CLOB) {
        re.set(name.toLowerCase(),rs.getString(i));
      }
 else {
        re.set(name.toLowerCase(),rs.getObject(i));
      }
    }
    return re;
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}"
43756,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  for (Iterator<String> it=dest.keys().iterator(); it.hasNext(); ) {
    String key=it.next();
    Object value=null;
    if (null != mirror && key.startsWith(""String_Node_Str"") && key.length() > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else {
      value=req.getParameter(key);
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  for (Iterator<String> it=dest.keys().iterator(); it.hasNext(); ) {
    String key=it.next();
    Object value=null;
    if (null != mirror && key.startsWith(""String_Node_Str"") && key.length() > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else     if (null != mirror && key.startsWith(""String_Node_Str"") && key.length() > 2) {
      value=req.getParameter(key.substring(2));
    }
 else {
      value=obj;
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}"
43757,"private int readTokenName(char[] cs,int i,StringBuilder sb){
  for (++i; i < cs.length; i++) {
    int b=(int)cs[i];
    if (b == 95 || b == 45 || b == 46 || (b >= 48 && b <= 57) || (b >= 65 && b <= 90) || (b >= 97 && b <= 122))     sb.append((char)b);
 else     break;
  }
  return i - 1;
}","private int readTokenName(char[] cs,int i,StringBuilder sb){
  for (++i; i < cs.length; i++) {
    int b=(int)cs[i];
    if (b == '_' || b == '-' || (b >= 48 && b <= 57) || (b >= 65 && b <= 90) || (b >= 97 && b <= 122))     sb.append((char)b);
 else     break;
  }
  return i - 1;
}"
43758,"public IocObject load(String name) throws ObjectLoadException {
  Map<String,Object> m=getMap(name);
  if (null == m)   throw new ObjectLoadException(""String_Node_Str"" + name + ""String_Node_Str"");
  Object p=m.get(""String_Node_Str"");
  if (null != p) {
    IocObject parent=load(p.toString());
    Map<String,Object> newMap=new HashMap<String,Object>();
    for (    Entry<String,Object> en : m.entrySet()) {
      if (""String_Node_Str"".equals(en.getKey()))       continue;
      newMap.put(en.getKey(),en.getValue());
    }
    IocObject self=Iocs.map2iobj(newMap);
    return Iocs.mergeWith(self,parent);
  }
  return Iocs.map2iobj(m);
}","public IocObject load(String name) throws ObjectLoadException {
  Map<String,Object> m=getMap(name);
  if (null == m)   throw new ObjectLoadException(""String_Node_Str"" + name + ""String_Node_Str"");
  Object p=m.get(""String_Node_Str"");
  if (null != p) {
    checkParents(name);
    IocObject parent=load(p.toString());
    Map<String,Object> newMap=new HashMap<String,Object>();
    for (    Entry<String,Object> en : m.entrySet()) {
      if (""String_Node_Str"".equals(en.getKey()))       continue;
      newMap.put(en.getKey(),en.getValue());
    }
    IocObject self=Iocs.map2iobj(newMap);
    return Iocs.mergeWith(self,parent);
  }
  return Iocs.map2iobj(m);
}"
43759,"<T>T parseFromJson(Class<T> type){
  try {
    nextChar();
    skipCommentsAndBlank();
    return parseFromCurrentLocation(type);
  }
 catch (  JsonException e) {
    throw e;
  }
catch (  Exception e) {
    throw makeError(e.getMessage());
  }
}","<T>T parseFromJson(Class<T> type,Class<?> componentType){
  try {
    nextChar();
    skipCommentsAndBlank();
    return parseFromCurrentLocation(type,componentType);
  }
 catch (  JsonException e) {
    throw e;
  }
catch (  Exception e) {
    throw makeError(e.getMessage());
  }
}"
43760,"/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private <T>T parseFromCurrentLocation(Class<T> type) throws Exception {
  Mirror<T> me=Mirror.me(type);
switch (cursor) {
case -1:
    return null;
case '[':
  Class<?> compType=null;
boolean reurnAsList=true;
List list=null;
if (null == type) {
list=new LinkedList();
}
 else if (type.isArray()) {
list=new LinkedList();
reurnAsList=false;
compType=type.getComponentType();
}
 else if (List.class.isAssignableFrom(type)) {
reurnAsList=true;
if (me.is(List.class)) list=new LinkedList();
 else list=(List)me.born();
}
 else {
throw makeError(String.format(""String_Node_Str"",type.getName()));
}
nextChar();
skipCommentsAndBlank();
while (cursor != -1 && cursor != ']') {
Object o=parseFromCurrentLocation(compType);
list.add(o);
skipCommentsAndBlank();
if (cursor == ']') break;
if (cursor != ',') throw makeError(""String_Node_Str"");
nextChar();
skipCommentsAndBlank();
}
nextChar();
if (reurnAsList) return (T)list;
Object ary=Array.newInstance(compType,list.size());
int i=0;
for (Iterator it=list.iterator(); it.hasNext(); ) Array.set(ary,i++,Castors.me().castTo(it.next(),compType));
return (T)ary;
case '{':
nextChar();
skipCommentsAndBlank();
if (Map.class == type) me=(Mirror<T>)Mirror.me(HashMap.class);
if (null == me || Map.class.isAssignableFrom(type)) {
Map<String,Object> map=null == me ? new TreeMap<String,Object>() : (Map<String,Object>)me.born();
while (cursor != -1 && cursor != '}') {
String name=readFieldName();
Object value=parseFromJson(null);
map.put(name,value);
if (!findNextNamePair()) break;
}
nextChar();
return (T)map;
}
T obj=me.born();
while (cursor != -1 && cursor != '}') {
Field f=me.getField(readFieldName());
Object value=parseFromJson(f.getType());
me.setValue(obj,f,value);
if (!findNextNamePair()) break;
}
nextChar();
return obj;
case 'u':
if ('n' != (char)nextChar() & 'd' != (char)nextChar() & 'e' != (char)nextChar() & 'f' != (char)nextChar() & 'i' != (char)nextChar() & 'n' != (char)nextChar() & 'e' != (char)nextChar() & 'd' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case 'n':
if ('u' != (char)nextChar() & 'l' != (char)nextChar() & 'l' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case '\'':
case '""':
StringBuilder vs=readString();
String value=vs.toString();
if (null == me || me.is(String.class)) return (T)value;
return Castors.me().castTo(value,me.getType());
case 't':
if ('u' != (char)nextChar() & 'r' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(true);
case 'f':
if ('a' != (char)nextChar() & 'l' != (char)nextChar() & 's' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(false);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
StringBuilder sb=new StringBuilder();
do {
sb.append((char)cursor);
nextChar();
}
 while (cursor != ' ' && cursor != -1 && cursor != ',' && cursor != ']' && cursor != '}' && cursor != '/');
String numValue=Strings.trim(sb);
if (null == me) {
char lastChar=Character.toUpperCase(numValue.charAt(numValue.length() - 1));
if (numValue.indexOf('.') >= 0) {
if (lastChar == 'F') return (T)Float.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Double.valueOf(numValue);
}
 else {
if (lastChar == 'L') return (T)Long.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Integer.valueOf(numValue);
}
}
if (me.isInt()) {
return (T)Integer.valueOf(numValue);
}
 else if (me.isLong()) {
return (T)Long.valueOf(numValue);
}
 else if (me.isFloat()) {
return (T)Float.valueOf(numValue);
}
 else if (me.isDouble()) {
return (T)Double.valueOf(numValue);
}
 else if (me.isByte()) {
return (T)Byte.valueOf(numValue);
}
 else {
throw makeError(""String_Node_Str"");
}
case 'v':
if ('a' == nextChar() && 'r' == nextChar() && ' ' == nextChar() && 'i' == nextChar() && 'o' == nextChar() && 'c' == nextChar() && ' ' == nextChar() && '=' == nextChar() && ' ' == nextChar() && '{' == nextChar()) return parseFromCurrentLocation(type);
default :
throw makeError(""String_Node_Str"");
}
}","/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private <T>T parseFromCurrentLocation(Class<T> type,Class<?> componentType) throws Exception {
  Mirror<T> me=Mirror.me(type);
switch (cursor) {
case -1:
    return null;
case '[':
  Class<?> compType=componentType;
boolean reurnAsList=true;
List list=null;
if (null == type) {
list=new LinkedList();
}
 else if (type.isArray()) {
list=new LinkedList();
reurnAsList=false;
compType=type.getComponentType();
}
 else if (List.class.isAssignableFrom(type)) {
reurnAsList=true;
if (me.is(List.class)) list=new LinkedList();
 else list=(List)me.born();
}
 else {
throw makeError(String.format(""String_Node_Str"",type.getName()));
}
nextChar();
skipCommentsAndBlank();
while (cursor != -1 && cursor != ']') {
Object o=parseFromCurrentLocation(compType,null);
list.add(o);
skipCommentsAndBlank();
if (cursor == ']') break;
if (cursor != ',') throw makeError(""String_Node_Str"");
nextChar();
skipCommentsAndBlank();
}
nextChar();
if (reurnAsList) return (T)list;
Object ary=Array.newInstance(compType,list.size());
int i=0;
for (Iterator it=list.iterator(); it.hasNext(); ) Array.set(ary,i++,Castors.me().castTo(it.next(),compType));
return (T)ary;
case '{':
nextChar();
skipCommentsAndBlank();
if (Map.class == type) me=(Mirror<T>)Mirror.me(HashMap.class);
if (null == me || Map.class.isAssignableFrom(type)) {
Map<String,Object> map=null == me ? new TreeMap<String,Object>() : (Map<String,Object>)me.born();
while (cursor != -1 && cursor != '}') {
String name=readFieldName();
Object value=parseFromJson(null,componentType);
map.put(name,value);
if (!findNextNamePair()) break;
}
nextChar();
return (T)map;
}
T obj=me.born();
while (cursor != -1 && cursor != '}') {
Field f=me.getField(readFieldName());
Class<?> ft=f.getType();
Class<?> eleType=null;
if (List.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 0) eleType=ts[0];
}
 else if (Map.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 1) eleType=ts[1];
}
Object value=parseFromJson(f.getType(),eleType);
me.setValue(obj,f,value);
if (!findNextNamePair()) break;
}
nextChar();
return obj;
case 'u':
if ('n' != (char)nextChar() & 'd' != (char)nextChar() & 'e' != (char)nextChar() & 'f' != (char)nextChar() & 'i' != (char)nextChar() & 'n' != (char)nextChar() & 'e' != (char)nextChar() & 'd' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case 'n':
if ('u' != (char)nextChar() & 'l' != (char)nextChar() & 'l' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case '\'':
case '""':
StringBuilder vs=readString();
String value=vs.toString();
if (null == me || me.is(String.class)) return (T)value;
return Castors.me().castTo(value,me.getType());
case 't':
if ('u' != (char)nextChar() & 'r' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(true);
case 'f':
if ('a' != (char)nextChar() & 'l' != (char)nextChar() & 's' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(false);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
StringBuilder sb=new StringBuilder();
do {
sb.append((char)cursor);
nextChar();
}
 while (cursor != ' ' && cursor != -1 && cursor != ',' && cursor != ']' && cursor != '}' && cursor != '/');
String numValue=Strings.trim(sb);
if (null == me) {
char lastChar=Character.toUpperCase(numValue.charAt(numValue.length() - 1));
if (numValue.indexOf('.') >= 0) {
if (lastChar == 'F') return (T)Float.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Double.valueOf(numValue);
}
 else {
if (lastChar == 'L') return (T)Long.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Integer.valueOf(numValue);
}
}
if (me.isInt()) {
return (T)Integer.valueOf(numValue);
}
 else if (me.isLong()) {
return (T)Long.valueOf(numValue);
}
 else if (me.isFloat()) {
return (T)Float.valueOf(numValue);
}
 else if (me.isDouble()) {
return (T)Double.valueOf(numValue);
}
 else if (me.isByte()) {
return (T)Byte.valueOf(numValue);
}
 else {
throw makeError(""String_Node_Str"");
}
case 'v':
if ('a' == nextChar() && 'r' == nextChar() && ' ' == nextChar() && 'i' == nextChar() && 'o' == nextChar() && 'c' == nextChar() && ' ' == nextChar() && '=' == nextChar() && ' ' == nextChar() && '{' == nextChar()) return parseFromCurrentLocation(type,componentType);
default :
throw makeError(""String_Node_Str"");
}
}"
43761,"/** 
 * 获取一个字段的泛型参数数组，如果这个字段没有泛型，返回空数组
 * @param f 字段
 * @return 泛型参数数组
 */
public static Class<?>[] getGenericTypes(Field f){
  String gts=f.toGenericString();
  Matcher m=PTN.matcher(gts);
  if (m.find()) {
    String s=m.group(2);
    String[] ss=Strings.splitIgnoreBlank(s);
    if (ss.length > 0) {
      Class<?>[] re=new Class<?>[ss.length];
      try {
        for (int i=0; i < ss.length; i++)         re[i]=Class.forName(ss[i]);
        return re;
      }
 catch (      ClassNotFoundException e) {
        throw Lang.wrapThrow(e);
      }
    }
  }
  return new Class<?>[0];
}","/** 
 * 获取一个字段的泛型参数数组，如果这个字段没有泛型，返回空数组
 * @param f 字段
 * @return 泛型参数数组
 */
public static Class<?>[] getGenericTypes(Field f){
  String gts=f.toGenericString();
  Matcher m=PTN.matcher(gts);
  if (m.find()) {
    String s=m.group(2);
    String[] ss=Strings.splitIgnoreBlank(s);
    if (ss.length > 0) {
      Class<?>[] re=new Class<?>[ss.length];
      try {
        for (int i=0; i < ss.length; i++) {
          String className=ss[i];
          if (className.startsWith(""String_Node_Str""))           re[i]=Object.class;
 else {
            int pos=className.indexOf('<');
            if (pos < 0)             re[i]=Class.forName(className);
 else             re[i]=Class.forName(className.substring(0,pos));
          }
        }
        return re;
      }
 catch (      ClassNotFoundException e) {
        throw Lang.wrapThrow(e);
      }
    }
  }
  return new Class<?>[0];
}"
43762,"@Test public void test_getGenericTypes() throws Exception {
  Field f=Abcc.class.getDeclaredField(""String_Node_Str"");
  Class<?>[] types=Mirror.getGenericTypes(f);
  assertEquals(2,types.length);
  assertEquals(String.class,types[0]);
  assertEquals(Object.class,types[1]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(1,types.length);
  assertEquals(Abcc.class,types[0]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(0,types.length);
}","@Test public void test_getGenericTypes() throws Exception {
  Field f=Abcc.class.getDeclaredField(""String_Node_Str"");
  Class<?>[] types=Mirror.getGenericTypes(f);
  assertEquals(2,types.length);
  assertEquals(String.class,types[0]);
  assertEquals(Mirror.class,types[1]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(2,types.length);
  assertEquals(Object.class,types[0]);
  assertEquals(String.class,types[1]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(1,types.length);
  assertEquals(Abcc.class,types[0]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(1,types.length);
  assertEquals(Object.class,types[0]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(0,types.length);
}"
43763,"@Override protected ParamInjector evalInjector(Class<?> type,Param param){
  if (null == param)   return new PathArgInjector(type);
  String pm=param.value();
  if (""String_Node_Str"".equals(pm)) {
    return new ObjectPairInjector(null,type);
  }
 else   if (pm.startsWith(""String_Node_Str"") && pm.length() > 2) {
    return new ObjectPairInjector(pm.substring(2),type);
  }
 else   if (type.isArray())   return new ArrayInjector(pm,type);
  return new NameInjector(pm,type);
}","@Override protected ParamInjector evalInjector(Class<?> type,Param param){
  if (null == param)   return new PathArgInjector(type);
  String pm=param.value();
  if (""String_Node_Str"".equals(pm)) {
    if (type.isAssignableFrom(Map.class))     return new MapPairInjector();
    return new ObjectPairInjector(null,type);
  }
 else   if (pm.startsWith(""String_Node_Str"") && pm.length() > 2) {
    return new ObjectPairInjector(pm.substring(2),type);
  }
 else   if (type.isArray())   return new ArrayInjector(pm,type);
  return new NameInjector(pm,type);
}"
43764,"private boolean isPojoExistsColumnAnnField(Mirror<?> mirror){
  for (  Field f : mirror.getFields())   if (null != f.getAnnotation(Column.class))   return true;
  return false;
}","private boolean isPojoExistsColumnAnnField(Mirror<?> mirror){
  for (  Field f : mirror.getFields())   if (null != f.getAnnotation(Column.class))   return true;
 else   if (null != f.getAnnotation(Id.class))   return true;
 else   if (null != f.getAnnotation(Name.class))   return true;
  return false;
}"
43765,"public Entity<?> make(DatabaseMeta db,Connection conn,Class<?> type){
  Entity<?> entity=new Entity<Object>();
  Mirror<?> mirror=Mirror.me(type);
  entity.setMirror(mirror);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",type.getName(),db.getTypeName());
  entity.setTableName(evalEntityName(type,Table.class,null));
  entity.setViewName(evalEntityName(type,View.class,Table.class));
  entity.setBorning(Borns.evalBorning(entity));
  boolean existsColumnAnnField=isPojoExistsColumnAnnField(mirror);
  HashMap<String,EntityField> pkmap=new HashMap<String,EntityField>();
  PK pk=type.getAnnotation(PK.class);
  if (null != pk) {
    for (    String pknm : pk.value())     pkmap.put(pknm,null);
  }
  Statement stat=null;
  ResultSet rs=null;
  ResultSetMetaData rsmd=null;
  List<FieldQuery> befores;
  List<FieldQuery> afters;
  try {
    try {
      stat=conn.createStatement();
      rs=stat.executeQuery(db.getResultSetMetaSql(entity.getViewName()));
      rsmd=rs.getMetaData();
    }
 catch (    Exception e) {
      if (log.isWarnEnabled())       log.warn(""String_Node_Str"" + entity.getViewName() + ""String_Node_Str"");
    }
    befores=new ArrayList<FieldQuery>(5);
    afters=new ArrayList<FieldQuery>(5);
    for (    Field f : mirror.getFields()) {
      Link link=evalLink(db,conn,mirror,f);
      if (null != link) {
        entity.addLinks(link);
      }
 else {
        if (existsColumnAnnField && null == f.getAnnotation(Column.class))         continue;
        EntityField ef=evalField(db,rsmd,entity,f);
        if (pkmap.containsKey(ef.getName())) {
          pkmap.put(ef.getName(),ef);
          if (!(ef.isId() || ef.isName()))           ef.setType(FieldType.PK);
        }
        if (null != ef.getBeforeInsert())         befores.add(ef.getBeforeInsert());
 else         if (null != ef.getAfterInsert())         afters.add(ef.getAfterInsert());
        if (null != ef) {
          entity.addField(ef);
        }
      }
    }
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e,""String_Node_Str"",type);
  }
 finally {
    Daos.safeClose(stat,rs);
  }
  if (pkmap.size() > 0) {
    EntityField[] pks=new EntityField[pkmap.size()];
    for (int i=0; i < pk.value().length; i++)     pks[i]=pkmap.get(pk.value()[i]);
    entity.setPkFields(pks);
  }
  entity.setBefores(befores.toArray(new FieldQuery[befores.size()]));
  entity.setAfters(afters.toArray(new FieldQuery[afters.size()]));
  return entity;
}","public Entity<?> make(DatabaseMeta db,Connection conn,Class<?> type){
  Entity<?> entity=new Entity<Object>();
  Mirror<?> mirror=Mirror.me(type);
  entity.setMirror(mirror);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",type.getName(),db.getTypeName());
  entity.setTableName(evalEntityName(type,Table.class,null));
  entity.setViewName(evalEntityName(type,View.class,Table.class));
  entity.setBorning(Borns.evalBorning(entity));
  boolean existsColumnAnnField=isPojoExistsColumnAnnField(mirror);
  HashMap<String,EntityField> pkmap=new HashMap<String,EntityField>();
  PK pk=type.getAnnotation(PK.class);
  if (null != pk) {
    for (    String pknm : pk.value())     pkmap.put(pknm,null);
  }
  Statement stat=null;
  ResultSet rs=null;
  ResultSetMetaData rsmd=null;
  List<FieldQuery> befores;
  List<FieldQuery> afters;
  try {
    try {
      stat=conn.createStatement();
      rs=stat.executeQuery(db.getResultSetMetaSql(entity.getViewName()));
      rsmd=rs.getMetaData();
    }
 catch (    Exception e) {
      if (log.isWarnEnabled())       log.warn(""String_Node_Str"" + entity.getViewName() + ""String_Node_Str"");
    }
    befores=new ArrayList<FieldQuery>(5);
    afters=new ArrayList<FieldQuery>(5);
    for (    Field f : mirror.getFields()) {
      Link link=evalLink(db,conn,mirror,f);
      if (null != link) {
        entity.addLinks(link);
      }
 else {
        if (existsColumnAnnField)         if (!pkmap.containsKey(f.getName()))         if (null == f.getAnnotation(Column.class))         if (null == f.getAnnotation(Id.class))         if (null == f.getAnnotation(Name.class))         continue;
        EntityField ef=evalField(db,rsmd,entity,f);
        if (pkmap.containsKey(ef.getName())) {
          pkmap.put(ef.getName(),ef);
          if (!(ef.isId() || ef.isName()))           ef.setType(FieldType.PK);
        }
        if (null != ef.getBeforeInsert())         befores.add(ef.getBeforeInsert());
 else         if (null != ef.getAfterInsert())         afters.add(ef.getAfterInsert());
        if (null != ef) {
          entity.addField(ef);
        }
      }
    }
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e,""String_Node_Str"",type);
  }
 finally {
    Daos.safeClose(stat,rs);
  }
  if (pkmap.size() > 0) {
    EntityField[] pks=new EntityField[pkmap.size()];
    for (int i=0; i < pk.value().length; i++)     pks[i]=pkmap.get(pk.value()[i]);
    entity.setPkFields(pks);
  }
  entity.setBefores(befores.toArray(new FieldQuery[befores.size()]));
  entity.setAfters(afters.toArray(new FieldQuery[afters.size()]));
  return entity;
}"
43766,"/** 
 * 拷贝一个文件
 * @param src 原始文件
 * @param target 新文件
 * @return 是否拷贝成功
 * @throws IOException
 */
public static boolean copyFile(File src,File target) throws IOException {
  if (src == null || target == null)   return false;
  if (!src.exists())   return false;
  if (!target.exists())   if (!createNewFile(target))   return false;
  InputStream ins=new BufferedInputStream(new FileInputStream(src));
  OutputStream ops=new BufferedOutputStream(new FileOutputStream(target));
  int b;
  while (-1 != (b=ins.read()))   ops.write(b);
  ins.close();
  ops.close();
  target.setLastModified(src.lastModified());
  return true;
}","/** 
 * 拷贝一个文件
 * @param src 原始文件
 * @param target 新文件
 * @return 是否拷贝成功
 * @throws IOException
 */
public static boolean copyFile(File src,File target) throws IOException {
  if (src == null || target == null)   return false;
  if (!src.exists())   return false;
  if (!target.exists())   if (!createNewFile(target))   return false;
  InputStream ins=new BufferedInputStream(new FileInputStream(src));
  OutputStream ops=new BufferedOutputStream(new FileOutputStream(target));
  int b;
  while (-1 != (b=ins.read()))   ops.write(b);
  ins.close();
  ops.close();
  return target.setLastModified(src.lastModified());
}"
43767,"/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String path=url.getFile();
        try {
          path=URLDecoder.decode(path,Charset.defaultCharset().name());
        }
 catch (        Exception e) {
        }
        file=new File(path);
      }
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}","/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String path=url.getFile();
        path=decodePath(path);
        file=new File(path);
      }
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}"
43768,"private static String[] findInJar(String jarPath,Class<?> baseClass){
  try {
    try {
      jarPath=URLDecoder.decode(jarPath,Charset.defaultCharset().name());
    }
 catch (    UnsupportedEncodingException e) {
    }
    ZipEntry[] entrys=Files.findEntryInZip(new ZipFile(jarPath),baseClass.getPackage().getName().replace('.','/') + ""String_Node_Str"");
    if (null != entrys && entrys.length > 0) {
      String[] classNames=new String[entrys.length];
      for (int i=0; i < entrys.length; i++) {
        String ph=entrys[i].getName();
        classNames[i]=ph.substring(0,ph.lastIndexOf('.')).replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      return classNames;
    }
  }
 catch (  IOException e) {
  }
  return null;
}","private static String[] findInJar(String jarPath,Class<?> baseClass){
  try {
    jarPath=decodePath(jarPath);
    ZipEntry[] entrys=Files.findEntryInZip(new ZipFile(jarPath),baseClass.getPackage().getName().replace('.','/') + ""String_Node_Str"");
    if (null != entrys && entrys.length > 0) {
      String[] classNames=new String[entrys.length];
      for (int i=0; i < entrys.length; i++) {
        String ph=entrys[i].getName();
        classNames[i]=ph.substring(0,ph.lastIndexOf('.')).replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      return classNames;
    }
  }
 catch (  IOException e) {
  }
  return null;
}"
43769,"public void parse(HttpServletRequest request,String charset,FilePool tmpFiles) throws UploadFailException {
  info=new UploadInfo();
  request.getSession().setAttribute(UploadInfo.class.getName(),info);
  info.setSum(request.getContentLength());
  try {
    params=new HashMap<String,Object>();
    InputStream ins=request.getInputStream();
    if (!(ins instanceof BufferedInputStream))     ins=new BufferedInputStream(ins);
    String contentType=request.getContentType();
    String s=""String_Node_Str"" + Http.multipart.getBoundary(contentType);
    char[] endValue=s.toCharArray();
    int[] right=new int[endValue.length];
    int cursor;
    int c=0;
    for (int i=0; i < s.length(); i++)     c=info.read(ins);
    while (c != -1) {
      cursor=0;
      right[cursor++]=info.read(ins);
      right[cursor++]=right[0] == -1 ? -1 : info.read(ins);
      if (right[1] == -1 || (right[0] == '-' && right[1] == '-'))       break;
      StreamBuffer sb=new StreamBuffer();
      while (cursor < endName.length && (c=info.read(ins)) != -1) {
        if (c == endName[cursor]) {
          right[cursor++]=c;
        }
 else {
          if (cursor > 0) {
            for (int i=0; i < cursor; i++)             sb.write(right[i]);
          }
          sb.write(c);
          cursor=0;
        }
      }
      FieldMeta meta=new FieldMeta(sb.toString(charset));
      cursor=0;
      if (meta.isFile()) {
        File tmp=tmpFiles.createFile(meta.getFileExtension());
        OutputStream ots=new BufferedOutputStream(new FileOutputStream(tmp));
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               ots.write(right[i]);
            }
            ots.write(c);
            cursor=0;
          }
        }
        ots.close();
        params.put(meta.getName(),new TempFile(meta,tmp));
      }
 else {
        sb=new StreamBuffer();
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               sb.write(right[i]);
            }
            sb.write(c);
            cursor=0;
          }
        }
        params.put(meta.getName(),sb.toString(charset));
      }
      s=request.getQueryString();
      if (null != s) {
        String[] pairs=Strings.splitIgnoreBlank(s,""String_Node_Str"");
        for (        String pair : pairs) {
          String[] pp=pair.split(""String_Node_Str"");
          if (pp.length > 1)           params.put(pp[0],pp[1]);
 else           params.put(pp[0],null);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UploadFailException(e);
  }
 finally {
    request.getSession().removeAttribute(UploadInfo.class.getName());
  }
}","public void parse(HttpServletRequest request,String charset,FilePool tmpFiles) throws UploadFailException {
  info=new UploadInfo();
  request.getSession().setAttribute(UploadInfo.class.getName(),info);
  info.setSum(request.getContentLength());
  try {
    params=new HashMap<String,Object>();
    InputStream ins=request.getInputStream();
    ins=new BufferedInputStream(ins);
    String contentType=request.getContentType();
    String s=""String_Node_Str"" + Http.multipart.getBoundary(contentType);
    char[] endValue=s.toCharArray();
    int[] right=new int[endValue.length];
    int cursor;
    int c=0;
    for (int i=0; i < s.length(); i++)     c=info.read(ins);
    while (c != -1) {
      cursor=0;
      right[cursor++]=info.read(ins);
      right[cursor++]=right[0] == -1 ? -1 : info.read(ins);
      if (right[1] == -1 || (right[0] == '-' && right[1] == '-'))       break;
      StreamBuffer sb=new StreamBuffer();
      while (cursor < endName.length && (c=info.read(ins)) != -1) {
        if (c == endName[cursor]) {
          right[cursor++]=c;
        }
 else {
          if (cursor > 0) {
            for (int i=0; i < cursor; i++)             sb.write(right[i]);
          }
          sb.write(c);
          cursor=0;
        }
      }
      FieldMeta meta=new FieldMeta(sb.toString(charset));
      cursor=0;
      if (meta.isFile()) {
        File tmp=tmpFiles.createFile(meta.getFileExtension());
        OutputStream ots=new BufferedOutputStream(new FileOutputStream(tmp));
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               ots.write(right[i]);
            }
            ots.write(c);
            cursor=0;
          }
        }
        ots.close();
        params.put(meta.getName(),new TempFile(meta,tmp));
      }
 else {
        sb=new StreamBuffer();
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               sb.write(right[i]);
            }
            sb.write(c);
            cursor=0;
          }
        }
        params.put(meta.getName(),sb.toString(charset));
      }
      s=request.getQueryString();
      if (null != s) {
        String[] pairs=Strings.splitIgnoreBlank(s,""String_Node_Str"");
        for (        String pair : pairs) {
          String[] pp=pair.split(""String_Node_Str"");
          if (pp.length > 1)           params.put(pp[0],pp[1]);
 else           params.put(pp[0],null);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UploadFailException(e);
  }
 finally {
    request.getSession().removeAttribute(UploadInfo.class.getName());
  }
}"
43770,"public boolean canWork(NutPluginConfig config){
  try {
    LoggerFactory.getILoggerFactory();
    return true;
  }
 catch (  Throwable e) {
  }
  return false;
}","public boolean canWork(NutPluginConfig config){
  try {
    Class.forName(""String_Node_Str"");
    return true;
  }
 catch (  Throwable e) {
  }
  return false;
}"
43771,"private static void loadPlugin(String pluginClassName){
  try {
    Class<?> pluginClass=Class.forName(pluginClassName);
    NutPlugin nutPlugin=(NutPlugin)pluginClass.newInstance();
    if (nutPlugin.canWork(nutPluginConfig)) {
      nutPlugin.init(nutPluginConfig);
      Class<?> workForClass=nutPlugin.workFor();
      List<NutPlugin> list=plugins.get(workForClass);
      if (list == null) {
        list=new ArrayList<NutPlugin>();
        plugins.put(workForClass,list);
      }
      list.add(nutPlugin);
    }
  }
 catch (  Throwable e) {
    LogFactory.getLog(NutPluginManagement.class).warnf(""String_Node_Str"",pluginClassName);
  }
}","private static void loadPlugin(String pluginClassName){
  try {
    Class<?> pluginClass=Class.forName(pluginClassName);
    NutPlugin nutPlugin=(NutPlugin)pluginClass.newInstance();
    if (nutPlugin.canWork(nutPluginConfig)) {
      nutPlugin.init(nutPluginConfig);
      Class<?> workForClass=nutPlugin.workFor();
      List<NutPlugin> list=plugins.get(workForClass);
      if (list == null) {
        list=new ArrayList<NutPlugin>();
        plugins.put(workForClass,list);
      }
      list.add(nutPlugin);
    }
  }
 catch (  Throwable e) {
  }
}"
43772,"private void initLevelStuff() throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  logClass=Class.forName(LOG4J_CLASS_NAME,true,Thread.currentThread().getContextClassLoader());
  log4jMirror=Mirror.me(logClass);
  getLogger=log4jMirror.findMethod(""String_Node_Str"",String.class);
  Mirror<?> levelMirror=Mirror.me(Thread.currentThread().getContextClassLoader().loadClass(""String_Node_Str""));
  levelFatal=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelError=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelWarn=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelInfo=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelDebug=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelTrace=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  isEnabledFor=log4jMirror.findMethod(""String_Node_Str"",levelMirror.getType());
  fatalObjectMethod=findMethod(""String_Node_Str"");
  fatalObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  errorObjectMethod=findMethod(""String_Node_Str"");
  errorObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  warnObjectMethod=findMethod(""String_Node_Str"");
  warnObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  infoObjectMethod=findMethod(""String_Node_Str"");
  infoObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  debugObjectMethod=findMethod(""String_Node_Str"");
  debugObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  traceObjectMethod=findMethod(""String_Node_Str"");
  traceObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
}","private void initLevelStuff() throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  logClass=Class.forName(LOG4J_CLASS_NAME,true,Thread.currentThread().getContextClassLoader());
  log4jMirror=Mirror.me(logClass);
  getLogger=log4jMirror.findMethod(""String_Node_Str"",String.class);
  Mirror<?> levelMirror=Mirror.me(Thread.currentThread().getContextClassLoader().loadClass(""String_Node_Str""));
  levelFatal=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelError=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelWarn=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelInfo=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelDebug=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  isEnabledFor=log4jMirror.findMethod(""String_Node_Str"",levelMirror.getType());
  fatalObjectMethod=findMethod(""String_Node_Str"");
  fatalObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  errorObjectMethod=findMethod(""String_Node_Str"");
  errorObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  warnObjectMethod=findMethod(""String_Node_Str"");
  warnObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  infoObjectMethod=findMethod(""String_Node_Str"");
  infoObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  debugObjectMethod=findMethod(""String_Node_Str"");
  debugObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  try {
    levelTrace=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
    traceObjectMethod=findMethod(""String_Node_Str"");
    traceObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  }
 catch (  Throwable e) {
  }
}"
43773,"private Log4jAdapter(String className) throws ClassNotFoundException, NoSuchMethodException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (false == isInited) {
    initLevelStuff();
    isInited=true;
  }
  log4jImpl=getLogger.invoke(null,className);
  isFatalEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelFatal);
  isErrorEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelError);
  isWarnEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelWarn);
  isInfoEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelInfo);
  isDebugEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelDebug);
  isTraceEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelTrace);
}","private Log4jAdapter(String className) throws ClassNotFoundException, NoSuchMethodException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (false == isInited) {
    initLevelStuff();
    isInited=true;
  }
  log4jImpl=getLogger.invoke(null,className);
  isFatalEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelFatal);
  isErrorEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelError);
  isWarnEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelWarn);
  isInfoEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelInfo);
  isDebugEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelDebug);
  isTraceEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelTrace);
  System.out.println(""String_Node_Str"");
}"
43774,"/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null)       file=new File(url.getFile());
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    if (file.isDirectory())     return file;
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}","/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null)       file=new File(url.getFile());
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}"
43775,"private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws IllegalAccessException, InvocationTargetException {
  @SuppressWarnings(""String_Node_Str"") Set<Method> methodsThatReturnStrings=getAllMethods(object.getClass(),withModifier(Modifier.PUBLIC),withReturnType(String.class),withParametersCount(0));
  for (  Method method : methodsThatReturnStrings) {
    final Object returnValue=method.invoke(object);
    logger.info(String.format(""String_Node_Str"",object.getClass().getSimpleName().toLowerCase(),method.getName(),returnValue));
    if (isExcepted(object,method)) {
      continue;
    }
    assertThat(method + ""String_Node_Str"" + object,returnValue,is(notNullValue()));
    assertThat(method + ""String_Node_Str"" + object,(String)returnValue,not(isEmptyString()));
  }
}","private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws IllegalAccessException, InvocationTargetException {
  @SuppressWarnings(""String_Node_Str"") Set<Method> methodsThatReturnStrings=getAllMethods(object.getClass(),withModifier(Modifier.PUBLIC),withReturnType(String.class),withParametersCount(0));
  for (  Method method : methodsThatReturnStrings) {
    if (isExcepted(object,method)) {
      continue;
    }
    final Object returnValue=method.invoke(object);
    logger.info(String.format(""String_Node_Str"",object.getClass().getSimpleName().toLowerCase(),method.getName(),returnValue));
    assertThat(method + ""String_Node_Str"" + object,returnValue,is(notNullValue()));
    assertThat(method + ""String_Node_Str"" + object,(String)returnValue,not(isEmptyString()));
  }
}"
43776,"public String url(){
  return join(new Object[]{""String_Node_Str"",""String_Node_Str"",IDN.toASCII(domainName()),""String_Node_Str"",domainSuffix()});
}","public String url(){
  return join(new Object[]{""String_Node_Str"",""String_Node_Str"",FakerIDN.toASCII(domainName()),""String_Node_Str"",domainSuffix()});
}"
43777,"public String url(){
  return join(new Object[]{""String_Node_Str"",""String_Node_Str"",IDN.toASCII(faker.name().firstName().toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + domainWord()),""String_Node_Str"",domainSuffix()});
}","public String url(){
  return join(new Object[]{""String_Node_Str"",""String_Node_Str"",FakerIDN.toASCII(faker.name().firstName().toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + domainWord()),""String_Node_Str"",domainSuffix()});
}"
43778,"public String cityName(){
  return city();
}","public String cityName(){
  return resolve(""String_Node_Str"");
}"
43779,"@Test public void testPastDate(){
  Date now=new Date();
  for (int i=0; i < 1000; i++) {
    Date future=faker.date().past(1,TimeUnit.SECONDS,now);
    assertThat(""String_Node_Str"",future.getTime(),lessThan(now.getTime()));
    assertThat(""String_Node_Str"",future.getTime(),greaterThan(now.getTime() - 1000));
  }
}","@Test public void testPastDate(){
  Date now=new Date();
  Date past=faker.date().past(100,TimeUnit.SECONDS);
  assertThat(""String_Node_Str"",past.getTime(),lessThan(now.getTime()));
}"
43780,"public String streetAddressNumber(){
  return fakeValuesService.fetchString(""String_Node_Str"");
}","public String streetAddressNumber(){
  return fakeValuesService.numerify(fakeValuesService.fetchString(""String_Node_Str""));
}"
43781,"@Test public void testStreetAddressNumber(){
  String streetAddressNumber=faker.streetAddressNumber();
  logger.info(""String_Node_Str"" + streetAddressNumber);
  assertNotNull(streetAddressNumber);
  streetAddressNumber=faker.streetAddressNumber();
  logger.info(""String_Node_Str"" + streetAddressNumber);
  assertNotNull(streetAddressNumber);
}","@Test public void testStreetAddressNumber(){
  String streetAddressNumber=faker.streetAddressNumber();
  logger.info(""String_Node_Str"" + streetAddressNumber);
  assertNotNull(streetAddressNumber);
  assertTrue(""String_Node_Str"" + streetAddressNumber,streetAddressNumber.matches(""String_Node_Str""));
  streetAddressNumber=faker.address().streetAddressNumber();
  logger.info(""String_Node_Str"" + streetAddressNumber);
  assertNotNull(streetAddressNumber);
  assertTrue(""String_Node_Str"" + streetAddressNumber,streetAddressNumber.matches(""String_Node_Str""));
}"
43782,"public Faker(Locale locale){
  logger.info(""String_Node_Str"" + locale);
  String languageCode=locale.getLanguage();
  Map valuesMap=(Map)Yaml.load(ClassLoader.getSystemResourceAsStream(languageCode + ""String_Node_Str""));
  valuesMap=(Map)valuesMap.get(languageCode);
  fakeValuesMap=(Map<String,Object>)valuesMap.get(""String_Node_Str"");
}","public Faker(Locale locale){
  logger.info(""String_Node_Str"" + locale);
  String languageCode=locale.getLanguage();
  Map valuesMap=(Map)Yaml.load(getClass().getClassLoader().getResourceAsStream(languageCode + ""String_Node_Str""));
  valuesMap=(Map)valuesMap.get(languageCode);
  fakeValuesMap=(Map<String,Object>)valuesMap.get(""String_Node_Str"");
}"
43783,"/** 
 * <p> Returns the subscription billing support status, and checks it asynchronously if it is currently unknown. Observers will receive a  {@link IBillingObserver#onSubscriptionChecked(boolean)} notification ineither case. </p> <p> No support for subscriptions does not imply that in-app products are also unsupported. To check if in-app products are supported, use {@link BillingController#checkBillingSupported(Context)}. </p>
 * @param context
 * @return the current subscription billing status (unknown, supported orunsupported). If it is supported, in-app products are also supported.
 * @see IBillingObserver#onSubscriptionChecked(boolean)
 * @see BillingController#checkBillingSupported(Context)
 */
public static BillingStatus checkSubscriptionSupported(Context context){
  if (subscriptionStatus == BillingStatus.UNKNOWN) {
    BillingService.checkSubscriptionSupported(context);
  }
 else {
    boolean supported=billingStatus == BillingStatus.SUPPORTED;
    onSubscriptionChecked(supported);
  }
  return billingStatus;
}","/** 
 * <p> Returns the subscription billing support status, and checks it asynchronously if it is currently unknown. Observers will receive a  {@link IBillingObserver#onSubscriptionChecked(boolean)} notification ineither case. </p> <p> No support for subscriptions does not imply that in-app products are also unsupported. To check if in-app products are supported, use {@link BillingController#checkBillingSupported(Context)}. </p>
 * @param context
 * @return the current subscription billing status (unknown, supported orunsupported). If it is supported, in-app products are also supported.
 * @see IBillingObserver#onSubscriptionChecked(boolean)
 * @see BillingController#checkBillingSupported(Context)
 */
public static BillingStatus checkSubscriptionSupported(Context context){
  if (subscriptionStatus == BillingStatus.UNKNOWN) {
    BillingService.checkSubscriptionSupported(context);
  }
 else {
    boolean supported=subscriptionStatus == BillingStatus.SUPPORTED;
    onSubscriptionChecked(supported);
  }
  return subscriptionStatus;
}"
43784,"@SmallTest public void testOnTransactionRestored() throws Exception {
  final Set<Boolean> flags=new HashSet<Boolean>();
  final IBillingObserver observer=new IBillingObserver(){
    public void onTransactionsRestored(){
      flags.add(true);
    }
    public void onPurchaseIntent(    String itemId,    PendingIntent purchaseIntent){
    }
    public void onBillingChecked(    boolean supported){
    }
    public void onRequestPurchaseResponse(    String itemId,    ResponseCode response){
    }
    public void onPurchaseStateChanged(    String itemId,    PurchaseState state){
    }
    public void onSubscriptionChecked(    boolean supported){
    }
  }
;
  BillingController.registerObserver(observer);
  BillingController.onTransactionsRestored();
  assertEquals(flags.size(),1);
  BillingController.unregisterObserver(observer);
}","@SmallTest public void testOnTransactionRestored() throws Exception {
  final Set<Boolean> flags=new HashSet<Boolean>();
  final IBillingObserver observer=new MockBillingObserver(){
    @Override public void onTransactionsRestored(){
      flags.add(true);
    }
  }
;
  BillingController.registerObserver(observer);
  BillingController.onTransactionsRestored();
  assertEquals(flags.size(),1);
  BillingController.unregisterObserver(observer);
}"
43785,"public void onSubscriptionChecked(boolean supported){
}","@Override public void onSubscriptionChecked(boolean supported){
  flags.add(true);
  assertFalse(supported);
}"
43786,"@SmallTest public void testOnRequestPurchaseResponse() throws Exception {
  final String testItemId=TransactionTest.TRANSACTION_1.productId;
  final ResponseCode testResponse=ResponseCode.RESULT_OK;
  final Set<Boolean> flags=new HashSet<Boolean>();
  final IBillingObserver observer=new IBillingObserver(){
    public void onTransactionsRestored(){
    }
    public void onPurchaseIntent(    String itemId,    PendingIntent purchaseIntent){
    }
    public void onBillingChecked(    boolean supported){
    }
    public void onRequestPurchaseResponse(    String itemId,    ResponseCode response){
      flags.add(true);
      assertEquals(testItemId,itemId);
      assertEquals(testResponse,response);
    }
    public void onPurchaseStateChanged(    String itemId,    PurchaseState state){
    }
    public void onSubscriptionChecked(    boolean supported){
    }
  }
;
  BillingController.registerObserver(observer);
  BillingController.onRequestPurchaseResponse(testItemId,testResponse);
  assertEquals(flags.size(),1);
  BillingController.unregisterObserver(observer);
}","@SmallTest public void testOnRequestPurchaseResponse() throws Exception {
  final String testItemId=TransactionTest.TRANSACTION_1.productId;
  final ResponseCode testResponse=ResponseCode.RESULT_OK;
  final Set<Boolean> flags=new HashSet<Boolean>();
  final IBillingObserver observer=new MockBillingObserver(){
    @Override public void onRequestPurchaseResponse(    String itemId,    ResponseCode response){
      flags.add(true);
      assertEquals(testItemId,itemId);
      assertEquals(testResponse,response);
    }
  }
;
  BillingController.registerObserver(observer);
  BillingController.onRequestPurchaseResponse(testItemId,testResponse);
  assertEquals(flags.size(),1);
  BillingController.unregisterObserver(observer);
}"
43787,"public void onTransactionsRestored(){
}","@Override public void onTransactionsRestored(){
  flags.add(true);
}"
43788,"public void onRequestPurchaseResponse(String itemId,ResponseCode response){
  flags.add(true);
  assertEquals(testItemId,itemId);
  assertEquals(testResponse,response);
}","@Override public void onRequestPurchaseResponse(String itemId,ResponseCode response){
  flags.add(true);
  assertEquals(testItemId,itemId);
  assertEquals(testResponse,response);
}"
43789,"public void onBillingChecked(boolean supported){
}","@Override public void onBillingChecked(boolean supported){
  flags.add(true);
  assertFalse(supported);
}"
43790,"@Override protected void onHandleIntent(Intent intent){
  JSONArray jsonArray=new JSONArray();
  List<String> listExclude=new ArrayList<String>();
  PreyLogger.i(""String_Node_Str"");
  List<HttpDataService> listData=new ArrayList<HttpDataService>();
  Context ctx=this;
  jsonArray=new JSONArray();
  if (!listExclude.contains(""String_Node_Str""))   jsonArray.put(new String(""String_Node_Str""));
  if (!listExclude.contains(""String_Node_Str""))   jsonArray.put(new String(""String_Node_Str""));
  if (!listExclude.contains(""String_Node_Str""))   jsonArray.put(new String(""String_Node_Str""));
  try {
    List<ActionResult> lista=new ArrayList<ActionResult>();
    for (int i=0; i < jsonArray.length(); i++) {
      String nameAction=jsonArray.getString(i);
      PreyLogger.d(""String_Node_Str"" + nameAction);
      String methodAction=""String_Node_Str"";
      JSONObject parametersAction=null;
      listData=ClassUtil.execute(ctx,lista,nameAction,methodAction,parametersAction,listData);
    }
  }
 catch (  Exception e) {
  }
  int parms=0;
  for (int i=0; listData != null && i < listData.size(); i++) {
    HttpDataService httpDataService=listData.get(i);
    parms=parms + httpDataService.getDataAsParameters().size();
    if (httpDataService.getEntityFiles() != null) {
      for (int j=0; j < httpDataService.getEntityFiles().size(); j++) {
        EntityFile entity=httpDataService.getEntityFiles().get(j);
        if (entity != null && entity.getLength() > 0) {
          parms=parms + 1;
        }
      }
    }
  }
  boolean connected=false;
  if (!PreyConfig.getPreyConfig(ctx).isConnectionExists()) {
    PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
    try {
      Thread.sleep(2000);
    }
 catch (    Exception e) {
    }
    connected=true;
  }
  if (PreyConfig.getPreyConfig(ctx).isConnectionExists()) {
    if (parms > 0) {
      PreyHttpResponse response=PreyWebServices.getInstance().sendPreyHttpReport(ctx,listData);
      if (response != null) {
        PreyConfig.getPreyConfig(ctx).setLastEvent(""String_Node_Str"");
        PreyLogger.d(""String_Node_Str"" + response.getStatusLine());
        if (200 != response.getStatusLine().getStatusCode()) {
          PreyConfig.getPreyConfig(ctx).setMissing(false);
          PreyConfig.getPreyConfig(ctx).setIntervalReport(""String_Node_Str"");
          ReportScheduled.getInstance(ctx).reset();
        }
      }
    }
  }
  if (connected) {
    PreyWifiManager.getInstance(ctx).setWifiEnabled(false);
  }
  stopSelf();
}","@Override protected void onHandleIntent(Intent intent){
  JSONArray jsonArray=new JSONArray();
  List<String> listExclude=new ArrayList<String>();
  PreyLogger.i(""String_Node_Str"");
  List<HttpDataService> listData=new ArrayList<HttpDataService>();
  Context ctx=this;
  jsonArray=new JSONArray();
  if (!listExclude.contains(""String_Node_Str""))   jsonArray.put(new String(""String_Node_Str""));
  if (!listExclude.contains(""String_Node_Str""))   jsonArray.put(new String(""String_Node_Str""));
  if (!listExclude.contains(""String_Node_Str""))   jsonArray.put(new String(""String_Node_Str""));
  try {
    List<ActionResult> lista=new ArrayList<ActionResult>();
    for (int i=0; i < jsonArray.length(); i++) {
      String nameAction=jsonArray.getString(i);
      PreyLogger.d(""String_Node_Str"" + nameAction);
      String methodAction=""String_Node_Str"";
      JSONObject parametersAction=null;
      listData=ClassUtil.execute(ctx,lista,nameAction,methodAction,parametersAction,listData);
    }
  }
 catch (  Exception e) {
  }
  int parms=0;
  for (int i=0; listData != null && i < listData.size(); i++) {
    HttpDataService httpDataService=listData.get(i);
    parms=parms + httpDataService.getDataAsParameters().size();
    if (httpDataService.getEntityFiles() != null) {
      for (int j=0; j < httpDataService.getEntityFiles().size(); j++) {
        EntityFile entity=httpDataService.getEntityFiles().get(j);
        if (entity != null && entity.getLength() > 0) {
          parms=parms + 1;
        }
      }
    }
  }
  if (PreyConfig.getPreyConfig(ctx).isConnectionExists()) {
    if (parms > 0) {
      PreyHttpResponse response=PreyWebServices.getInstance().sendPreyHttpReport(ctx,listData);
      if (response != null) {
        PreyConfig.getPreyConfig(ctx).setLastEvent(""String_Node_Str"");
        PreyLogger.d(""String_Node_Str"" + response.getStatusLine());
        if (200 != response.getStatusLine().getStatusCode()) {
          PreyConfig.getPreyConfig(ctx).setMissing(false);
          PreyConfig.getPreyConfig(ctx).setIntervalReport(""String_Node_Str"");
          ReportScheduled.getInstance(ctx).reset();
        }
      }
    }
  }
  stopSelf();
}"
43791,"public static void execute(Context ctx,String command,String phoneNumber){
  String secretKey=SMSUtil.getSecretKey(command);
  String email=PreyConfig.getPreyConfig(ctx).getEmail();
  boolean isPasswordOk=false;
  if (!PreyWifiManager.getInstance(ctx).isWifiEnabled())   PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
  if (!NetworkUtils.getNetworkUtils(ctx).isMobileDataEnabled())   NetworkUtils.getNetworkUtils(ctx).enableMobileData(true);
  PreyTelephonyManager preyTelephony=PreyTelephonyManager.getInstance(ctx);
  PreyConnectivityManager preyConnectivity=PreyConnectivityManager.getInstance(ctx);
  boolean connection=false;
  try {
    while (!connection) {
      connection=preyTelephony.isDataConnectivityEnabled() || preyConnectivity.isConnected();
      if (!connection) {
        PreyLogger.d(""String_Node_Str"");
        if (!PreyWifiManager.getInstance(ctx).isWifiEnabled())         PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
        if (!NetworkUtils.getNetworkUtils(ctx).isMobileDataEnabled())         NetworkUtils.getNetworkUtils(ctx).enableMobileData(true);
        Thread.sleep(10000);
      }
    }
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    isPasswordOk=PreyWebServices.getInstance().checkPassword(ctx,email,secretKey);
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    if (isPasswordOk) {
      List<JSONObject> jsonList=SMSParser.getJSONListFromText(command,phoneNumber);
      ActionsController.getInstance(ctx).runActionJson(ctx,jsonList);
    }
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
}","public static void execute(Context ctx,String command,String phoneNumber){
  String secretKey=SMSUtil.getSecretKey(command);
  String email=PreyConfig.getPreyConfig(ctx).getEmail();
  boolean isPasswordOk=false;
  PreyTelephonyManager preyTelephony=PreyTelephonyManager.getInstance(ctx);
  PreyConnectivityManager preyConnectivity=PreyConnectivityManager.getInstance(ctx);
  boolean connection=false;
  boolean openWifi=false;
  boolean openNet=false;
  int i=0;
  try {
    while (!connection && i < 5) {
      connection=preyTelephony.isDataConnectivityEnabled() || preyConnectivity.isConnected();
      if (!connection) {
        PreyLogger.d(""String_Node_Str"");
        if (!PreyWifiManager.getInstance(ctx).isWifiEnabled()) {
          PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
          openWifi=true;
        }
        if (!NetworkUtils.getNetworkUtils(ctx).isMobileDataEnabled()) {
          NetworkUtils.getNetworkUtils(ctx).enableMobileData(true);
          openNet=true;
        }
        Thread.sleep(10000);
      }
    }
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    isPasswordOk=PreyWebServices.getInstance().checkPassword(ctx,email,secretKey);
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    if (isPasswordOk) {
      List<JSONObject> jsonList=SMSParser.getJSONListFromText(command,phoneNumber);
      ActionsController.getInstance(ctx).runActionJson(ctx,jsonList);
    }
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  if (openWifi) {
    PreyWifiManager.getInstance(ctx).setWifiEnabled(false);
    openWifi=true;
  }
  if (openNet) {
    NetworkUtils.getNetworkUtils(ctx).enableMobileData(false);
  }
}"
43792,"public void execute(){
  boolean wifiOpened=false;
  boolean mobilOpened=false;
  if (PreyConfig.getPreyConfig(ctx).isThisDeviceAlreadyRegisteredWithPrey(true)) {
    PreyTelephonyManager preyTelephony=PreyTelephonyManager.getInstance(ctx);
    PreyConnectivityManager preyConnectivity=PreyConnectivityManager.getInstance(ctx);
    boolean connection=false;
    try {
      List<JSONObject> jsonObject=null;
      int attempt=0;
      while (!connection && attempt < MAXIMUM_ATTEMPTS) {
        connection=preyTelephony.isDataConnectivityEnabled() || preyConnectivity.isConnected();
        if (!connection) {
          PreyLogger.d(""String_Node_Str"");
          if (!PreyWifiManager.getInstance(ctx).isWifiEnabled()) {
            PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
            wifiOpened=true;
          }
          if (!NetworkUtils.getNetworkUtils(ctx).isMobileDataEnabled()) {
            NetworkUtils.getNetworkUtils(ctx).enableMobileData(true);
            mobilOpened=true;
          }
          Thread.sleep(5000);
        }
        attempt=attempt + 1;
      }
      if (connection) {
        try {
          if (cmd == null || ""String_Node_Str"".equals(cmd)) {
            jsonObject=PreyBetaActionsRunner.getInstructions(ctx);
          }
 else {
            jsonObject=getInstructionsNewThread(ctx,cmd);
          }
        }
 catch (        Exception e) {
        }
        PreyLogger.d(""String_Node_Str"" + version + ""String_Node_Str""+ body);
        if (jsonObject == null || jsonObject.size() == 0) {
          PreyLogger.d(""String_Node_Str"");
        }
 else {
          PreyLogger.d(""String_Node_Str"");
          runInstructions(jsonObject);
        }
      }
    }
 catch (    Exception e) {
      PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
    }
    PreyLogger.d(""String_Node_Str"");
    if (wifiOpened) {
      PreyWifiManager.getInstance(ctx).setWifiEnabled(false);
    }
    if (mobilOpened) {
      NetworkUtils.getNetworkUtils(ctx).enableMobileData(false);
    }
  }
  ctx.stopService(new Intent(ctx,PreyBetaRunnerService.class));
}","public void execute(){
  if (PreyConfig.getPreyConfig(ctx).isThisDeviceAlreadyRegisteredWithPrey(true)) {
    PreyTelephonyManager preyTelephony=PreyTelephonyManager.getInstance(ctx);
    PreyConnectivityManager preyConnectivity=PreyConnectivityManager.getInstance(ctx);
    boolean connection=false;
    try {
      List<JSONObject> jsonObject=null;
      connection=preyTelephony.isDataConnectivityEnabled() || preyConnectivity.isConnected();
      if (connection) {
        try {
          if (cmd == null || ""String_Node_Str"".equals(cmd)) {
            jsonObject=PreyBetaActionsRunner.getInstructions(ctx);
          }
 else {
            jsonObject=getInstructionsNewThread(ctx,cmd);
          }
        }
 catch (        Exception e) {
        }
        PreyLogger.d(""String_Node_Str"" + version + ""String_Node_Str""+ body);
        if (jsonObject == null || jsonObject.size() == 0) {
          PreyLogger.d(""String_Node_Str"");
        }
 else {
          PreyLogger.d(""String_Node_Str"");
          runInstructions(jsonObject);
        }
      }
    }
 catch (    Exception e) {
      PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
    }
    PreyLogger.d(""String_Node_Str"");
  }
  ctx.stopService(new Intent(ctx,PreyBetaRunnerService.class));
}"
43793,"public List<JSONObject> getJSONFromUrl(Context ctx,String url){
  String sb=null;
  String json=null;
  PreyRestHttpClient preyRestHttpClient=PreyRestHttpClient.getInstance(ctx);
  boolean connected=false;
  if (!PreyConfig.getPreyConfig(ctx).isConnectionExists()) {
    PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
    try {
      Thread.sleep(2000);
    }
 catch (    Exception e) {
    }
    connected=true;
  }
  try {
    sb=preyRestHttpClient.getStringUrl(url,PreyConfig.getPreyConfig(ctx));
    if (sb != null)     json=sb.trim();
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
    return null;
  }
  if (connected) {
    PreyWifiManager.getInstance(ctx).setWifiEnabled(false);
  }
  if (""String_Node_Str"".equals(json)) {
    return null;
  }
  return getJSONFromTxt(ctx,json);
}","public List<JSONObject> getJSONFromUrl(Context ctx,String url){
  String sb=null;
  String json=null;
  PreyRestHttpClient preyRestHttpClient=PreyRestHttpClient.getInstance(ctx);
  try {
    sb=preyRestHttpClient.getStringUrl(url,PreyConfig.getPreyConfig(ctx));
    if (sb != null)     json=sb.trim();
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
    return null;
  }
  if (""String_Node_Str"".equals(json)) {
    return null;
  }
  return getJSONFromTxt(ctx,json);
}"
43794,"@Override public void execute(ActionJob actionJob,Context ctx){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  if (preyConfig.isFroyoOrAbove()) {
    preyConfig.setLock(true);
    preyConfig.setUnlockPass(getConfig().get(""String_Node_Str""));
    FroyoSupport.getInstance(ctx).changePasswordAndLock(getConfig().get(""String_Node_Str""),true);
  }
}","@Override public void execute(ActionJob actionJob,Context ctx){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  if (preyConfig.isFroyoOrAbove()) {
    preyConfig.setLock(true);
    FroyoSupport.getInstance(ctx).changePasswordAndLock(getConfig().get(""String_Node_Str""),true);
  }
}"
43795,"public void lock(Context ctx,String unlock){
  if (PreyConfig.getPreyConfig(ctx).isFroyoOrAbove()) {
    PreyConfig.getPreyConfig(ctx).setLock(true);
    PreyConfig.getPreyConfig(ctx).setUnlockPass(unlock);
    FroyoSupport.getInstance(ctx).changePasswordAndLock(unlock,true);
    PreyWebServices.getInstance().sendNotifyActionResultPreyHttp(ctx,UtilJson.makeMapParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    PreyConfig.getPreyConfig(ctx).setLastEvent(""String_Node_Str"");
  }
}","public void lock(Context ctx,String unlock){
  if (PreyConfig.getPreyConfig(ctx).isFroyoOrAbove()) {
    PreyConfig.getPreyConfig(ctx).setLock(true);
    FroyoSupport.getInstance(ctx).changePasswordAndLock(unlock,true);
    PreyWebServices.getInstance().sendNotifyActionResultPreyHttp(ctx,UtilJson.makeMapParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    PreyConfig.getPreyConfig(ctx).setLastEvent(""String_Node_Str"");
  }
}"
43796,"public List<HttpDataService> runActionJson(Context ctx,List<JSONObject> jsonObjectList){
  List<HttpDataService> listData=new ArrayList<HttpDataService>();
  int size=jsonObjectList == null ? -1 : jsonObjectList.size();
  PreyLogger.i(""String_Node_Str"" + size);
  if (size >= 0 && PreyConfig.getPreyConfig(ctx).isNextAlert()) {
    PreyConfig.getPreyConfig(ctx).setNextAlert(false);
    Settings.System.putString(ctx.getContentResolver(),Settings.System.NEXT_ALARM_FORMATTED,""String_Node_Str"");
  }
  try {
    for (int i=0; jsonObjectList != null && i < jsonObjectList.size(); i++) {
      JSONObject jsonObject=jsonObjectList.get(i);
      PreyLogger.d(""String_Node_Str"" + jsonObject);
      String nameAction=jsonObject.getString(""String_Node_Str"");
      String methodAction=jsonObject.getString(""String_Node_Str"");
      JSONObject parametersAction=null;
      try {
        parametersAction=jsonObject.getJSONObject(""String_Node_Str"");
      }
 catch (      JSONException e) {
      }
      PreyLogger.d(""String_Node_Str"" + nameAction + ""String_Node_Str""+ methodAction);
      List<ActionResult> lista=new ArrayList<ActionResult>();
      listData=ClassUtil.execute(ctx,lista,nameAction,methodAction,parametersAction,listData);
    }
    return listData;
  }
 catch (  JSONException e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  return null;
}","public List<HttpDataService> runActionJson(Context ctx,List<JSONObject> jsonObjectList){
  List<HttpDataService> listData=new ArrayList<HttpDataService>();
  int size=jsonObjectList == null ? -1 : jsonObjectList.size();
  PreyLogger.i(""String_Node_Str"" + size);
  try {
    if (size >= 0 && PreyConfig.getPreyConfig(ctx).isNextAlert()) {
      PreyConfig.getPreyConfig(ctx).setNextAlert(false);
      Settings.System.putString(ctx.getContentResolver(),Settings.System.NEXT_ALARM_FORMATTED,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
  try {
    for (int i=0; jsonObjectList != null && i < jsonObjectList.size(); i++) {
      JSONObject jsonObject=jsonObjectList.get(i);
      PreyLogger.d(""String_Node_Str"" + jsonObject);
      String nameAction=jsonObject.getString(""String_Node_Str"");
      String methodAction=jsonObject.getString(""String_Node_Str"");
      JSONObject parametersAction=null;
      try {
        parametersAction=jsonObject.getJSONObject(""String_Node_Str"");
      }
 catch (      JSONException e) {
      }
      PreyLogger.d(""String_Node_Str"" + nameAction + ""String_Node_Str""+ methodAction);
      List<ActionResult> lista=new ArrayList<ActionResult>();
      listData=ClassUtil.execute(ctx,lista,nameAction,methodAction,parametersAction,listData);
    }
    return listData;
  }
 catch (  JSONException e) {
    PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
  }
  return null;
}"
43797,"private static byte[] getPicture(Context ctx,String focus){
  AudioManager mgr=null;
  SimpleCameraActivity.dataImagen=null;
  int streamType=AudioManager.STREAM_SYSTEM;
  SimpleCameraActivity.activity=null;
  Intent intent=new Intent(ctx,SimpleCameraActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.putExtra(""String_Node_Str"",focus);
  ctx.startActivity(intent);
  int i=0;
  mgr=(AudioManager)ctx.getSystemService(Context.AUDIO_SERVICE);
  mgr.setStreamSolo(streamType,true);
  mgr.setRingerMode(AudioManager.RINGER_MODE_SILENT);
  mgr.setStreamMute(streamType,true);
  while (SimpleCameraActivity.activity == null && i < 10) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    PreyLogger.d(""String_Node_Str"" + i + ""String_Node_Str"");
    i++;
  }
  if (SimpleCameraActivity.activity != null) {
    PreyLogger.d(""String_Node_Str"");
    SimpleCameraActivity.activity.takePicture(focus);
  }
 else {
    PreyLogger.d(""String_Node_Str"");
  }
  try {
    Thread.sleep(4000);
  }
 catch (  InterruptedException e) {
  }
  mgr.setStreamSolo(streamType,false);
  mgr.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
  mgr.setStreamMute(streamType,false);
  try {
    i=0;
    while (SimpleCameraActivity.activity != null && SimpleCameraActivity.dataImagen == null && i < 20) {
      Thread.sleep(2000);
      i++;
      PreyLogger.d(""String_Node_Str"" + i + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    PreyLogger.i(""String_Node_Str"" + e.getMessage());
  }
  byte[] out=null;
  if (SimpleCameraActivity.activity != null) {
    out=SimpleCameraActivity.dataImagen;
    SimpleCameraActivity.activity.finish();
    SimpleCameraActivity.activity=null;
    SimpleCameraActivity.dataImagen=null;
  }
  return out;
}","private static byte[] getPicture(Context ctx,String focus){
  AudioManager mgr=null;
  SimpleCameraActivity.dataImagen=null;
  int streamType=AudioManager.STREAM_SYSTEM;
  SimpleCameraActivity.activity=null;
  Intent intent=new Intent(ctx,SimpleCameraActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.putExtra(""String_Node_Str"",focus);
  ctx.startActivity(intent);
  int i=0;
  mgr=(AudioManager)ctx.getSystemService(Context.AUDIO_SERVICE);
  mgr.setStreamSolo(streamType,true);
  mgr.setRingerMode(AudioManager.RINGER_MODE_SILENT);
  mgr.setStreamMute(streamType,true);
  while (SimpleCameraActivity.activity == null && i < 10) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    PreyLogger.d(""String_Node_Str"" + i + ""String_Node_Str"");
    i++;
  }
  if (SimpleCameraActivity.activity != null) {
    PreyLogger.d(""String_Node_Str"");
    SimpleCameraActivity.activity.takePicture(focus);
  }
 else {
    PreyLogger.d(""String_Node_Str"");
  }
  try {
    Thread.sleep(4000);
  }
 catch (  InterruptedException e) {
  }
  mgr.setStreamSolo(streamType,false);
  mgr.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
  mgr.setStreamMute(streamType,false);
  try {
    i=0;
    while (SimpleCameraActivity.activity != null && SimpleCameraActivity.dataImagen == null && i < 10) {
      Thread.sleep(2000);
      i++;
      PreyLogger.d(""String_Node_Str"" + i + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    PreyLogger.i(""String_Node_Str"" + e.getMessage());
  }
  byte[] out=null;
  if (SimpleCameraActivity.activity != null) {
    out=SimpleCameraActivity.dataImagen;
    SimpleCameraActivity.activity.finish();
    SimpleCameraActivity.activity=null;
    SimpleCameraActivity.dataImagen=null;
  }
  return out;
}"
43798,"public void surfaceChanged(SurfaceHolder holder,int format,int width,int height){
  if (camera != null) {
    Camera.Parameters parameters=camera.getParameters();
    camera.setParameters(parameters);
    camera.startPreview();
  }
}","public void surfaceChanged(SurfaceHolder holder,int format,int width,int height){
  if (camera != null) {
    try {
      Camera.Parameters parameters=camera.getParameters();
      camera.setParameters(parameters);
    }
 catch (    Exception e) {
    }
    camera.startPreview();
  }
}"
43799,"public boolean isValid(){
  Calendar cal=Calendar.getInstance();
  cal.setTime(new Date());
  cal.add(Calendar.MINUTE,-10);
  long leastTenMinutes=cal.getTimeInMillis();
  long signalFlareDate=PreyConfig.getPreyConfig(ctx).getSignalFlareDate();
  PreyLogger.d(""String_Node_Str"" + signalFlareDate + ""String_Node_Str""+ sdf.format(new Date(signalFlareDate)));
  PreyLogger.d(""String_Node_Str"" + leastTenMinutes + ""String_Node_Str""+ sdf.format(new Date(leastTenMinutes)));
  if (signalFlareDate == 0 || leastTenMinutes > signalFlareDate) {
    long now=new Date().getTime();
    PreyConfig.getPreyConfig(ctx).setSignalFlareDate(now);
    return true;
  }
  return false;
}","public boolean isValid(){
  try {
    Calendar cal=Calendar.getInstance();
    cal.setTime(new Date());
    cal.add(Calendar.MINUTE,-10);
    long leastTenMinutes=cal.getTimeInMillis();
    long signalFlareDate=PreyConfig.getPreyConfig(ctx).getSignalFlareDate();
    PreyLogger.d(""String_Node_Str"" + signalFlareDate + ""String_Node_Str""+ sdf.format(new Date(signalFlareDate)));
    PreyLogger.d(""String_Node_Str"" + leastTenMinutes + ""String_Node_Str""+ sdf.format(new Date(leastTenMinutes)));
    if (signalFlareDate == 0 || leastTenMinutes > signalFlareDate) {
      long now=new Date().getTime();
      PreyConfig.getPreyConfig(ctx).setSignalFlareDate(now);
      return true;
    }
    return false;
  }
 catch (  Exception e) {
    return false;
  }
}"
43800,"public void run(){
  if (event != null) {
    if (Event.BATTERY_LOW.equals(event.getName())) {
      PreyLogger.d(""String_Node_Str"" + event.getName());
      if (isValid()) {
        String jsonString=""String_Node_Str"";
        List<JSONObject> jsonObjectList=new JSONParser().getJSONFromTxt(ctx,jsonString.toString());
        if (jsonObjectList != null && jsonObjectList.size() > 0) {
          ActionsController.getInstance(ctx).runActionJson(ctx,jsonObjectList);
        }
      }
    }
  }
}","public void run(){
  try {
    if (event != null) {
      if (Event.BATTERY_LOW.equals(event.getName())) {
        PreyLogger.d(""String_Node_Str"" + event.getName());
        if (isValid()) {
          String jsonString=""String_Node_Str"";
          List<JSONObject> jsonObjectList=new JSONParser().getJSONFromTxt(ctx,jsonString.toString());
          if (jsonObjectList != null && jsonObjectList.size() > 0) {
            ActionsController.getInstance(ctx).runActionJson(ctx,jsonObjectList);
          }
        }
      }
    }
  }
 catch (  Exception e) {
  }
}"
43801,"public boolean isMobileAvailable(){
  android.net.NetworkInfo mobile=connectivity.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
  return mobile.isAvailable();
}","public boolean isMobileAvailable(){
  try {
    android.net.NetworkInfo mobile=connectivity.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
    return mobile.isAvailable();
  }
 catch (  Exception e) {
    return false;
  }
}"
43802,"public boolean isMobileConnected(){
  android.net.NetworkInfo mobile=connectivity.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
  return mobile.isConnected();
}","public boolean isMobileConnected(){
  try {
    android.net.NetworkInfo mobile=connectivity.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
    return mobile.isConnected();
  }
 catch (  Exception e) {
    return false;
  }
}"
43803,"public List<HttpDataService> execute(){
  List<HttpDataService> listData=null;
  preyConfig=PreyConfig.getPreyConfig(ctx);
  if (preyConfig.isThisDeviceAlreadyRegisteredWithPrey(true)) {
    PreyTelephonyManager preyTelephony=PreyTelephonyManager.getInstance(ctx);
    PreyConnectivityManager preyConnectivity=PreyConnectivityManager.getInstance(ctx);
    boolean connection=false;
    try {
      while (!connection) {
        connection=preyTelephony.isDataConnectivityEnabled() || preyConnectivity.isConnected();
        if (!connection) {
          PreyLogger.d(""String_Node_Str"");
          if (!PreyWifiManager.getInstance(ctx).isWifiEnabled())           PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
          if (!NetworkUtils.getNetworkUtils(ctx).isMobileDataEnabled())           NetworkUtils.getNetworkUtils(ctx).enableMobileData(true);
          Thread.sleep(10000);
        }
      }
      List<JSONObject> jsonObject=getInstructions();
      PreyLogger.d(""String_Node_Str"" + version + ""String_Node_Str""+ body);
      if (jsonObject == null || jsonObject.size() == 0) {
        PreyLogger.d(""String_Node_Str"");
      }
 else {
        PreyLogger.d(""String_Node_Str"");
        runInstructions(jsonObject);
      }
    }
 catch (    Exception e) {
      PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
    }
    PreyLogger.d(""String_Node_Str"");
  }
  return listData;
}","public void execute(){
  if (PreyConfig.getPreyConfig(ctx).isThisDeviceAlreadyRegisteredWithPrey(true)) {
    PreyTelephonyManager preyTelephony=PreyTelephonyManager.getInstance(ctx);
    PreyConnectivityManager preyConnectivity=PreyConnectivityManager.getInstance(ctx);
    boolean connection=false;
    try {
      while (!connection) {
        connection=preyTelephony.isDataConnectivityEnabled() || preyConnectivity.isConnected();
        if (!connection) {
          PreyLogger.d(""String_Node_Str"");
          if (!PreyWifiManager.getInstance(ctx).isWifiEnabled())           PreyWifiManager.getInstance(ctx).setWifiEnabled(true);
          if (!NetworkUtils.getNetworkUtils(ctx).isMobileDataEnabled())           NetworkUtils.getNetworkUtils(ctx).enableMobileData(true);
          Thread.sleep(10000);
        }
      }
      List<JSONObject> jsonObject=getInstructions();
      PreyLogger.d(""String_Node_Str"" + version + ""String_Node_Str""+ body);
      if (jsonObject == null || jsonObject.size() == 0) {
        PreyLogger.d(""String_Node_Str"");
      }
 else {
        PreyLogger.d(""String_Node_Str"");
        runInstructions(jsonObject);
      }
    }
 catch (    Exception e) {
      PreyLogger.e(""String_Node_Str"" + e.getMessage(),e);
    }
    PreyLogger.d(""String_Node_Str"");
  }
  ctx.stopService(new Intent(ctx,PreyBetaRunnerService.class));
}"
43804,"@Override public void onCreate(){
  PreyBetaActionsRunnner exec=new PreyBetaActionsRunnner();
  running=true;
  startedAt=System.currentTimeMillis();
  exec.run(PreyBetaRunnerService.this);
}","@Override public void onCreate(){
  PreyBetaActionsRunnner exec=new PreyBetaActionsRunnner();
  running=true;
  exec.run(PreyBetaRunnerService.this);
}"
43805,"@Override public void onDestroy(){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(PreyBetaRunnerService.this);
  preyConfig.setMissing(false);
  NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  nm.cancelAll();
  ActionsController.getInstance(PreyBetaRunnerService.this).finishRunningJosb();
  running=false;
}","@Override public void onDestroy(){
  PreyLogger.d(""String_Node_Str"");
  PreyLogger.d(""String_Node_Str"");
  PreyConfig preyConfig=PreyConfig.getPreyConfig(PreyBetaRunnerService.this);
  preyConfig.setMissing(false);
  NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  nm.cancelAll();
  ActionsController.getInstance(PreyBetaRunnerService.this).finishRunningJosb();
  running=false;
}"
43806,"@Override protected Void doInBackground(Object... data){
  try {
    Context ctx=(Context)data[1];
    String registration=FileConfigReader.getInstance(ctx).getGcmIdPrefix() + (String)data[0];
    PreyHttpResponse response=PreyWebServices.getInstance().setPushRegistrationId(ctx,registration);
    PreyConfig.getPreyConfig(ctx).setNotificationId(registration);
    PreyLogger.d(""String_Node_Str"" + response.toString());
    PreyConfig.getPreyConfig(ctx).setRegisterC2dm(true);
    new Thread(new PreyBetaActionsRunner(ctx)).start();
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getLocalizedMessage(),e);
  }
  return null;
}","@Override protected Void doInBackground(Object... data){
  try {
    Context ctx=(Context)data[1];
    String registration=FileConfigReader.getInstance(ctx).getGcmIdPrefix() + (String)data[0];
    PreyHttpResponse response=PreyWebServices.getInstance().setPushRegistrationId(ctx,registration);
    PreyConfig.getPreyConfig(ctx).setNotificationId(registration);
    PreyLogger.d(""String_Node_Str"" + response.toString());
    PreyConfig.getPreyConfig(ctx).setRegisterC2dm(true);
    startPrey(ctx);
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"" + e.getLocalizedMessage(),e);
  }
  return null;
}"
43807,"private void handleMessageBeta(Context context,String body,String version){
  PreyLogger.i(""String_Node_Str"");
  PreyLogger.i(""String_Node_Str"" + body + ""String_Node_Str""+ version);
  new Thread(new PreyBetaActionsRunner(context,body,version)).start();
}","private void handleMessageBeta(Context context,String body,String version){
  PreyLogger.i(""String_Node_Str"");
  PreyLogger.i(""String_Node_Str"" + body + ""String_Node_Str""+ version);
  startPrey(context);
}"
43808,"public boolean onPreferenceClick(Preference preference){
  String url=PreyConfig.getPreyConfig(getApplicationContext()).getPreyUrl();
  PreyLogger.d(""String_Node_Str"" + url);
  Intent internetIntent=new Intent(Intent.ACTION_VIEW);
  internetIntent.setData(Uri.parse(url));
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  startActivity(intent);
  return false;
}","public boolean onPreferenceClick(Preference preference){
  String url=PreyConfig.getPreyConfig(getApplicationContext()).getPreyUrl();
  PreyLogger.d(""String_Node_Str"" + url);
  Intent internetIntent=new Intent(Intent.ACTION_VIEW);
  internetIntent.setData(Uri.parse(url));
  try {
    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
    startActivity(intent);
  }
 catch (  Exception e) {
  }
  return false;
}"
43809,"@Override protected void onResume(){
  super.onResume();
  if (!PreyStatus.getInstance().isPreyConfigurationActivityResume()) {
    Intent intent=new Intent(getApplicationContext(),LoginActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.putExtra(""String_Node_Str"",true);
    startActivity(intent);
    finish();
  }
  PreyConfig preyConfig=PreyConfig.getPreyConfig(getApplicationContext());
  Preference p=findPreference(""String_Node_Str"");
  if (preyConfig.isFroyoOrAbove()) {
    if (FroyoSupport.getInstance(getApplicationContext()).isAdminActive()) {
      p.setTitle(R.string.preferences_admin_enabled_title);
      p.setSummary(R.string.preferences_admin_enabled_summary);
    }
 else {
      p.setTitle(R.string.preferences_admin_disabled_title);
      p.setSummary(R.string.preferences_admin_disabled_summary);
    }
  }
 else   p.setEnabled(false);
  p=findPreference(""String_Node_Str"");
  p.setSummary(""String_Node_Str"" + preyConfig.getPreyVersion() + ""String_Node_Str"");
  Preference pGo=findPreference(""String_Node_Str"");
  pGo.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      String url=PreyConfig.getPreyConfig(getApplicationContext()).getPreyUrl();
      PreyLogger.d(""String_Node_Str"" + url);
      Intent internetIntent=new Intent(Intent.ACTION_VIEW);
      internetIntent.setData(Uri.parse(url));
      Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
      startActivity(intent);
      return false;
    }
  }
);
}","@Override protected void onResume(){
  super.onResume();
  if (!PreyStatus.getInstance().isPreyConfigurationActivityResume()) {
    Intent intent=new Intent(getApplicationContext(),LoginActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.putExtra(""String_Node_Str"",true);
    try {
      startActivity(intent);
    }
 catch (    Exception e) {
    }
    finish();
  }
  PreyConfig preyConfig=PreyConfig.getPreyConfig(getApplicationContext());
  Preference p=findPreference(""String_Node_Str"");
  if (preyConfig.isFroyoOrAbove()) {
    if (FroyoSupport.getInstance(getApplicationContext()).isAdminActive()) {
      p.setTitle(R.string.preferences_admin_enabled_title);
      p.setSummary(R.string.preferences_admin_enabled_summary);
    }
 else {
      p.setTitle(R.string.preferences_admin_disabled_title);
      p.setSummary(R.string.preferences_admin_disabled_summary);
    }
  }
 else   p.setEnabled(false);
  p=findPreference(""String_Node_Str"");
  p.setSummary(""String_Node_Str"" + preyConfig.getPreyVersion() + ""String_Node_Str"");
  Preference pGo=findPreference(""String_Node_Str"");
  pGo.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      String url=PreyConfig.getPreyConfig(getApplicationContext()).getPreyUrl();
      PreyLogger.d(""String_Node_Str"" + url);
      Intent internetIntent=new Intent(Intent.ACTION_VIEW);
      internetIntent.setData(Uri.parse(url));
      try {
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
        startActivity(intent);
      }
 catch (      Exception e) {
      }
      return false;
    }
  }
);
}"
43810,"/** 
 * Register a new account and get the API_KEY as return In case email is already registered, this service will return an error.
 * @throws PreyException
 */
public PreyAccountData registerNewAccount(Context ctx,String name,String email,String password,String deviceType) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",name);
  parameters.put(""String_Node_Str"",email);
  parameters.put(""String_Node_Str"",password);
  parameters.put(""String_Node_Str"",password);
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",Locale.getDefault().getDisplayCountry());
  parameters.put(""String_Node_Str"",PreyConfig.getPreyConfig(ctx).getAgreementId());
  PreyHttpResponse response=null;
  String xml;
  try {
    response=PreyRestHttpClient.getInstance(ctx).post(PreyConfig.getPreyConfig(ctx).getPreyUiUrl().concat(""String_Node_Str""),parameters,preyConfig);
    xml=response.getResponseAsString();
  }
 catch (  IOException e) {
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
  checkForError(xml);
  int from;
  int to;
  String apiKey;
  try {
    from=xml.indexOf(""String_Node_Str"") + 5;
    to=xml.indexOf(""String_Node_Str"");
    apiKey=xml.substring(from,to);
  }
 catch (  Exception e) {
    throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
  }
  String xmlDeviceId=this.registerNewDevice(ctx,apiKey,deviceType);
  checkForError(xmlDeviceId);
  from=xmlDeviceId.indexOf(""String_Node_Str"") + 5;
  to=xmlDeviceId.indexOf(""String_Node_Str"");
  String deviceId=null;
  try {
    deviceId=xmlDeviceId.substring(from,to);
  }
 catch (  Exception e) {
    throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
  }
  PreyAccountData newAccount=new PreyAccountData();
  newAccount.setApiKey(apiKey);
  newAccount.setDeviceId(deviceId);
  newAccount.setEmail(email);
  newAccount.setPassword(password);
  newAccount.setName(name);
  return newAccount;
}","/** 
 * Register a new account and get the API_KEY as return In case email is already registered, this service will return an error.
 * @throws PreyException
 */
public PreyAccountData registerNewAccount(Context ctx,String name,String email,String password,String deviceType) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",name);
  parameters.put(""String_Node_Str"",email);
  parameters.put(""String_Node_Str"",password);
  parameters.put(""String_Node_Str"",password);
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",Locale.getDefault().getDisplayCountry());
  parameters.put(""String_Node_Str"",PreyConfig.getPreyConfig(ctx).getAgreementId());
  PreyHttpResponse response=null;
  String xml;
  try {
    response=PreyRestHttpClient.getInstance(ctx).post(PreyConfig.getPreyConfig(ctx).getPreyUiUrl().concat(""String_Node_Str""),parameters,preyConfig);
    xml=response.getResponseAsString();
  }
 catch (  IOException e) {
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
  checkForError(xml);
  int from;
  int to;
  String apiKey;
  try {
    from=xml.indexOf(""String_Node_Str"") + 5;
    to=xml.indexOf(""String_Node_Str"");
    apiKey=xml.substring(from,to);
  }
 catch (  Exception e) {
    if (response != null && response.getStatusLine() != null) {
      throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
    }
 else {
      throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str""));
    }
  }
  String xmlDeviceId=this.registerNewDevice(ctx,apiKey,deviceType);
  checkForError(xmlDeviceId);
  from=xmlDeviceId.indexOf(""String_Node_Str"") + 5;
  to=xmlDeviceId.indexOf(""String_Node_Str"");
  String deviceId=null;
  try {
    deviceId=xmlDeviceId.substring(from,to);
  }
 catch (  Exception e) {
    throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
  }
  PreyAccountData newAccount=new PreyAccountData();
  newAccount.setApiKey(apiKey);
  newAccount.setDeviceId(deviceId);
  newAccount.setEmail(email);
  newAccount.setPassword(password);
  newAccount.setName(name);
  return newAccount;
}"
43811,"public PreyAccountData registerNewDeviceToAccount(Context ctx,String email,String password,String deviceType) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  PreyHttpResponse response=null;
  String xml;
  try {
    String apiv2=FileConfigReader.getInstance(ctx).getApiV2();
    String url=PreyConfig.getPreyConfig(ctx).getPreyUiUrl().concat(apiv2).concat(""String_Node_Str"");
    PreyLogger.i(""String_Node_Str"" + url);
    response=PreyRestHttpClient.getInstance(ctx).get(url,parameters,preyConfig,email,password);
    xml=response.getResponseAsString();
  }
 catch (  IOException e) {
    PreyLogger.e(""String_Node_Str"",e);
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
  if (!xml.contains(""String_Node_Str""))   throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
  int from;
  int to;
  String apiKey;
  try {
    from=xml.indexOf(""String_Node_Str"") + 5;
    to=xml.indexOf(""String_Node_Str"");
    apiKey=xml.substring(from,to);
  }
 catch (  Exception e) {
    throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
  }
  String xmlDeviceId=this.registerNewDevice(ctx,apiKey,deviceType);
  if (!xmlDeviceId.contains(""String_Node_Str""))   throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str""));
  from=xmlDeviceId.indexOf(""String_Node_Str"") + 5;
  to=xmlDeviceId.indexOf(""String_Node_Str"");
  String deviceId=xmlDeviceId.substring(from,to);
  PreyAccountData newAccount=new PreyAccountData();
  newAccount.setApiKey(apiKey);
  newAccount.setDeviceId(deviceId);
  newAccount.setEmail(email);
  newAccount.setPassword(password);
  return newAccount;
}","public PreyAccountData registerNewDeviceToAccount(Context ctx,String email,String password,String deviceType) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  PreyHttpResponse response=null;
  String xml;
  try {
    String apiv2=FileConfigReader.getInstance(ctx).getApiV2();
    String url=PreyConfig.getPreyConfig(ctx).getPreyUiUrl().concat(apiv2).concat(""String_Node_Str"");
    PreyLogger.i(""String_Node_Str"" + url);
    response=PreyRestHttpClient.getInstance(ctx).get(url,parameters,preyConfig,email,password);
    xml=response.getResponseAsString();
  }
 catch (  IOException e) {
    PreyLogger.e(""String_Node_Str"",e);
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
  String status=""String_Node_Str"";
  if (response != null && response.getStatusLine() != null) {
    status=""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str"";
  }
  if (!xml.contains(""String_Node_Str""))   throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,status));
  int from;
  int to;
  String apiKey;
  try {
    from=xml.indexOf(""String_Node_Str"") + 5;
    to=xml.indexOf(""String_Node_Str"");
    apiKey=xml.substring(from,to);
  }
 catch (  Exception e) {
    throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,status));
  }
  String xmlDeviceId=this.registerNewDevice(ctx,apiKey,deviceType);
  if (!xmlDeviceId.contains(""String_Node_Str""))   throw new PreyException(ctx.getString(R.string.error_cant_add_this_device,status));
  from=xmlDeviceId.indexOf(""String_Node_Str"") + 5;
  to=xmlDeviceId.indexOf(""String_Node_Str"");
  String deviceId=xmlDeviceId.substring(from,to);
  PreyAccountData newAccount=new PreyAccountData();
  newAccount.setApiKey(apiKey);
  newAccount.setDeviceId(deviceId);
  newAccount.setEmail(email);
  newAccount.setPassword(password);
  return newAccount;
}"
43812,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction() != null && intent.getAction().equals(ACTION)) {
    Bundle bundle=intent.getExtras();
    if (bundle != null) {
      Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
      String messageSMS=""String_Node_Str"";
      for (int i=0; i < pdus.length; i++) {
        SmsMessage currentMessage=SmsMessage.createFromPdu((byte[])pdus[i]);
        String phoneNumber=currentMessage.getDisplayOriginatingAddress();
        String senderNum=phoneNumber;
        messageSMS=currentMessage.getDisplayMessageBody();
        PreyLogger.i(""String_Node_Str"" + senderNum + ""String_Node_Str""+ messageSMS);
        executeActions(context,messageSMS,phoneNumber);
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction() != null && intent.getAction().equals(ACTION)) {
    Bundle bundle=intent.getExtras();
    if (bundle != null) {
      Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
      String messageSMS=""String_Node_Str"";
      for (int i=0; i < pdus.length; i++) {
        SmsMessage currentMessage=SmsMessage.createFromPdu((byte[])pdus[i]);
        String phoneNumber=null;
        try {
          phoneNumber=currentMessage.getDisplayOriginatingAddress();
        }
 catch (        Exception e) {
        }
        try {
          messageSMS=currentMessage.getDisplayMessageBody();
        }
 catch (        Exception e) {
        }
        if (messageSMS != null) {
          PreyLogger.i(""String_Node_Str"" + phoneNumber + ""String_Node_Str""+ messageSMS);
          executeActions(context,messageSMS,phoneNumber);
        }
      }
    }
  }
}"
43813,"public void run(){
  preyConfig=PreyConfig.getPreyConfig(ctx);
  if (preyConfig.isThisDeviceAlreadyRegisteredWithPrey(true)) {
    PreyExecutionWaitNotify waitNotify=new PreyExecutionWaitNotify();
    if (preyConfig.isRunOnce()) {
      try {
        preyConfig.setRunOnce(false);
        preyConfig.setMissing(true);
        PreyWebServices.getInstance().setMissing(ctx,true);
        boolean isMissing=getInstructionsAndRun(waitNotify,true);
        PreyLogger.d(""String_Node_Str"");
        if (isMissing)         waitNotify.doWait();
      }
 catch (      PreyException e) {
        PreyLogger.e(""String_Node_Str"",e);
      }
    }
 else {
      preyConfig.setMissing(true);
      PreyWebServices.getInstance().setMissing(ctx,true);
      while (preyConfig.isMissing()) {
        try {
          boolean isMissing=getInstructionsAndRun(waitNotify,false);
          PreyLogger.d(""String_Node_Str"" + preyControlStatus.getDelay() + ""String_Node_Str"");
          if (isMissing) {
            PreyRunnerService.interval=preyControlStatus.getDelay();
            PreyRunnerService.pausedAt=System.currentTimeMillis();
            Thread.sleep(preyControlStatus.getDelay() * PreyConfig.DELAY_MULTIPLIER);
          }
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
catch (        PreyException e) {
          PreyLogger.e(""String_Node_Str"",e);
        }
      }
    }
    ctx.stopService(new Intent(ctx,LocationService.class));
    ctx.stopService(new Intent(ctx,PreyRunnerService.class));
    PreyLogger.d(""String_Node_Str"");
  }
}","public void run(){
  preyConfig=PreyConfig.getPreyConfig(ctx);
  if (preyConfig.isThisDeviceAlreadyRegisteredWithPrey(true)) {
    PreyExecutionWaitNotify waitNotify=new PreyExecutionWaitNotify();
    if (preyConfig.isRunOnce()) {
      try {
        preyConfig.setRunOnce(false);
        preyConfig.setMissing(true);
        PreyWebServices.getInstance().setMissing(ctx,true);
        boolean isMissing=getInstructionsAndRun(waitNotify,true);
        PreyLogger.d(""String_Node_Str"");
        if (isMissing)         waitNotify.doWait();
      }
 catch (      PreyException e) {
        PreyLogger.e(""String_Node_Str"",e);
      }
    }
 else {
      boolean isMissing=true;
      preyConfig.setMissing(isMissing);
      PreyWebServices.getInstance().setMissing(ctx,isMissing);
      while (isMissing) {
        try {
          isMissing=getInstructionsAndRun(waitNotify,false);
          preyConfig.setMissing(isMissing);
          if (isMissing) {
            PreyRunnerService.interval=preyControlStatus.getDelay();
            PreyRunnerService.pausedAt=System.currentTimeMillis();
            PreyLogger.d(""String_Node_Str"" + preyControlStatus.getDelay() + ""String_Node_Str"");
            Thread.sleep(preyControlStatus.getDelay() * PreyConfig.DELAY_MULTIPLIER);
          }
 else           PreyLogger.d(""String_Node_Str"");
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
catch (        PreyException e) {
          PreyLogger.e(""String_Node_Str"",e);
        }
      }
    }
    ctx.stopService(new Intent(ctx,LocationService.class));
    ctx.stopService(new Intent(ctx,PreyRunnerService.class));
    PreyLogger.d(""String_Node_Str"");
  }
}"
43814,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getPreyConfig().isFroyoOrAbove() && !FroyoSupport.getInstance(this).isAdminActive()) {
    PreyLogger.i(""String_Node_Str"");
    Intent intent=FroyoSupport.getInstance(getApplicationContext()).getAskForAdminPrivilegesIntent();
    startActivity(intent);
  }
 else {
    PreyLogger.i(""String_Node_Str"");
    showScreen();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
}"
43815,"public void onClick(View v){
  Intent intent=new Intent(CongratulationsActivity.this,PreyConfigurationActivity.class);
  startActivity(intent);
}","public void onClick(View v){
  Intent intent=new Intent(CongratulationsActivity.this,PreyConfigurationActivity.class);
  startActivity(intent);
  finish();
}"
43816,"private void showScreen(){
  setContentView(R.layout.congratulations);
  PreyLogger.i(""String_Node_Str"");
  Bundle bundle=getIntent().getExtras();
  ((TextView)findViewById(R.id.congrats_h2_text)).setText(bundle.getString(""String_Node_Str""));
  getPreyConfig().registerC2dm();
  Button ok=(Button)findViewById(R.id.congrats_btn_ok);
  ok.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent intent=new Intent(CongratulationsActivity.this,PreyConfigurationActivity.class);
      startActivity(intent);
    }
  }
);
}","private void showScreen(){
  setContentView(R.layout.congratulations);
  Bundle bundle=getIntent().getExtras();
  ((TextView)findViewById(R.id.congrats_h2_text)).setText(bundle.getString(""String_Node_Str""));
  getPreyConfig().registerC2dm();
  Button ok=(Button)findViewById(R.id.congrats_btn_ok);
  ok.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent intent=new Intent(CongratulationsActivity.this,PreyConfigurationActivity.class);
      startActivity(intent);
      finish();
    }
  }
);
}"
43817,"public static ReportActionResponse parseResponse(String responseAsXML){
  ResponsesXMLHandler responsesHandler=new ResponsesXMLHandler();
  try {
    SAXParserFactory spf=SAXParserFactory.newInstance();
    SAXParser sp=spf.newSAXParser();
    XMLReader xr=sp.getXMLReader();
    xr.setContentHandler(responsesHandler);
    ByteArrayInputStream tobeparsed=new ByteArrayInputStream(responseAsXML.getBytes());
    xr.parse(new InputSource(tobeparsed));
  }
 catch (  FactoryConfigurationError e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return responsesHandler.getActionResponses();
}","public static ReportActionResponse parseResponse(String responseAsXML){
  ResponsesXMLHandler responsesHandler=new ResponsesXMLHandler();
  try {
    SAXParserFactory spf=SAXParserFactory.newInstance();
    SAXParser sp=spf.newSAXParser();
    XMLReader xr=sp.getXMLReader();
    xr.setContentHandler(responsesHandler);
    ByteArrayInputStream tobeparsed=new ByteArrayInputStream(responseAsXML.getBytes(""String_Node_Str""));
    InputSource is=new InputSource(tobeparsed);
    is.setEncoding(""String_Node_Str"");
    xr.parse(is);
  }
 catch (  FactoryConfigurationError e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return responsesHandler.getActionResponses();
}"
43818,"/** 
 * Gets be called on the following structure: <tag>characters</tag>
 */
@Override public void characters(char ch[],int start,int length){
  if (this.inMissing) {
    String isMissing=new String(ch,start,length);
    actionResponse.setMissing(new Boolean(isMissing));
  }
 else   if (this.inDelay) {
    String delay=new String(ch,start,length);
    actionResponse.setDelay(new Long(delay));
  }
 else   if (this.inPostUrl) {
    String postUrl=new String(ch,start,length);
    PreyConfig.postUrl=postUrl;
  }
 else   if (this.inAlertMessage) {
    String alertMessage=new String(ch,start,length);
    actionResponse.addActionConfigParameter(""String_Node_Str"",""String_Node_Str"",alertMessage);
  }
 else   if (this.inUnlockPass) {
    String unlockPass=new String(ch,start,length);
    actionResponse.addActionConfigParameter(""String_Node_Str"",""String_Node_Str"",unlockPass);
  }
}","/** 
 * Gets be called on the following structure: <tag>characters</tag>
 */
@Override public void characters(char ch[],int start,int length){
  if (this.inMissing) {
    String isMissing=new String(ch,start,length);
    actionResponse.setMissing(new Boolean(isMissing));
  }
 else   if (this.inDelay) {
    String delay=new String(ch,start,length);
    actionResponse.setDelay(new Long(delay));
  }
 else   if (this.inPostUrl) {
    String postUrl=new String(ch,start,length);
    PreyConfig.postUrl=postUrl;
  }
 else   if (this.inAlertMessage) {
    alertMessage=alertMessage.concat(new String(ch,start,length));
    actionResponse.addActionConfigParameter(""String_Node_Str"",""String_Node_Str"",alertMessage);
  }
 else   if (this.inUnlockPass) {
    String unlockPass=new String(ch,start,length);
    actionResponse.addActionConfigParameter(""String_Node_Str"",""String_Node_Str"",unlockPass);
  }
}"
43819,"/** 
 * Gets be called on closing tags like: </tag>
 */
@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (localName.equals(""String_Node_Str"")) {
    this.inMissing=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inDelay=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inPostUrl=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inModules=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inModule=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inAlertMessage=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inUnlockPass=false;
  }
}","/** 
 * Gets be called on closing tags like: </tag>
 */
@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (localName.equals(""String_Node_Str"")) {
    this.inMissing=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inDelay=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inPostUrl=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inModules=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inModule=false;
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inAlertMessage=false;
    this.alertMessage=""String_Node_Str"";
  }
 else   if (localName.equals(""String_Node_Str"")) {
    this.inUnlockPass=false;
  }
}"
43820,"private void showWelcomeScreen(){
  setContentView(R.layout.welcome);
  Button newUser=(Button)findViewById(R.id.btn_welcome_newuser);
  Button oldUser=(Button)findViewById(R.id.btn_welcome_olduser);
  newUser.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent intent=new Intent(WelcomeActivity.this,CreateAccountActivity.class);
      startActivityForResult(intent,ADD_THIS_DEVICE);
    }
  }
);
  oldUser.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent intent=new Intent(WelcomeActivity.this,AddDeviceToAccountActivity.class);
      startActivityForResult(intent,CREATE_ACCOUNT);
    }
  }
);
}","private void showWelcomeScreen(){
  setContentView(R.layout.welcome);
  Button newUser=(Button)findViewById(R.id.btn_welcome_newuser);
  Button oldUser=(Button)findViewById(R.id.btn_welcome_olduser);
  newUser.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent intent=new Intent(WelcomeActivity.this,CreateAccountActivity.class);
      startActivityForResult(intent,CREATE_ACCOUNT);
    }
  }
);
  oldUser.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent intent=new Intent(WelcomeActivity.this,AddDeviceToAccountActivity.class);
      startActivityForResult(intent,ADD_THIS_DEVICE);
    }
  }
);
}"
43821,"public static void startPrey(Context ctx){
  PreyConfig config=PreyConfig.getPreyConfig(ctx);
  if (config.isThisDeviceAlreadyRegisteredWithPrey(true)) {
    NotificationManager nm=(NotificationManager)ctx.getSystemService(Context.NOTIFICATION_SERVICE);
    nm.cancelAll();
    boolean isPhoneConnected=false;
    final TelephonyManager tm=(TelephonyManager)ctx.getSystemService(Context.TELEPHONY_SERVICE);
    final ConnectivityManager connectivityManager=(ConnectivityManager)ctx.getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();
    try {
      isPhoneConnected=(tm.getDataState() == TelephonyManager.DATA_CONNECTED) || activeNetInfo.isConnected();
      while (!isPhoneConnected) {
        isPhoneConnected=(tm.getDataState() == TelephonyManager.DATA_CONNECTED) || activeNetInfo.isConnected();
        PreyLogger.d(""String_Node_Str"");
        Thread.sleep(5000);
      }
    }
 catch (    InterruptedException e1) {
      PreyLogger.e(""String_Node_Str"",e1);
    }
catch (    NullPointerException npe) {
      PreyLogger.e(""String_Node_Str"",npe);
    }
    ctx.stopService(new Intent(ctx,PreyRunnerService.class));
    ctx.startService(new Intent(ctx,PreyRunnerService.class));
  }
}","public static void startPrey(Context ctx){
  PreyConfig config=PreyConfig.getPreyConfig(ctx);
  if (config.isThisDeviceAlreadyRegisteredWithPrey(true)) {
    NotificationManager nm=(NotificationManager)ctx.getSystemService(Context.NOTIFICATION_SERVICE);
    nm.cancelAll();
    boolean isPhoneConnected=false;
    final TelephonyManager tm=(TelephonyManager)ctx.getSystemService(Context.TELEPHONY_SERVICE);
    final ConnectivityManager connectivityManager=(ConnectivityManager)ctx.getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();
    try {
      isPhoneConnected=(tm.getDataState() == TelephonyManager.DATA_CONNECTED) || activeNetInfo.isConnected();
      while (!isPhoneConnected) {
        isPhoneConnected=(tm.getDataState() == TelephonyManager.DATA_CONNECTED) || activeNetInfo.isConnected();
        PreyLogger.d(""String_Node_Str"");
        Thread.sleep(10000);
      }
    }
 catch (    InterruptedException e1) {
      PreyLogger.e(""String_Node_Str"",e1);
    }
catch (    NullPointerException npe) {
      PreyLogger.e(""String_Node_Str"",npe);
    }
    ctx.stopService(new Intent(ctx,PreyRunnerService.class));
    ctx.startService(new Intent(ctx,PreyRunnerService.class));
  }
}"
43822,"public void changePasswordAndLock(String newPass,boolean lock){
  if (isAdminActive()) {
    policyManager.resetPassword(newPass,DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);
    if (lock)     policyManager.lockNow();
  }
}","public void changePasswordAndLock(String newPass,boolean lock){
  try {
    if (isAdminActive()) {
      policyManager.resetPassword(newPass,DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);
      if (lock)       policyManager.lockNow();
    }
  }
 catch (  Exception e) {
    PreyLogger.e(""String_Node_Str"",e);
  }
}"
43823,"private void updateDeviceAttribute(Context ctx,String key,String value){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  parameters.put(""String_Node_Str"" + key + ""String_Node_Str"",value);
  try {
    PreyRestHttpClient.getInstance(ctx).methodAsParameter(PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID()).concat(""String_Node_Str""),""String_Node_Str"",parameters,preyConfig);
    PreyLogger.d(""String_Node_Str"" + key + ""String_Node_Str""+ value);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void updateDeviceAttribute(Context ctx,String key,String value){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  parameters.put(""String_Node_Str"" + key + ""String_Node_Str"",value);
  try {
    PreyRestHttpClient.getInstance(ctx).methodAsParameter(this.getDeviceUrl(ctx),""String_Node_Str"",parameters,preyConfig);
    PreyLogger.d(""String_Node_Str"" + key + ""String_Node_Str""+ value);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  PreyException e) {
    PreyLogger.e(""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"",e);
  }
}"
43824,"public String getActionsToPerform(Context ctx) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  Map<String,String> parameters=new HashMap<String,String>();
  try {
    return PreyRestHttpClient.getInstance(ctx).get(PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID()).concat(""String_Node_Str""),parameters,preyConfig).getResponseAsString();
  }
 catch (  IOException e) {
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
}","public String getActionsToPerform(Context ctx) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  Map<String,String> parameters=new HashMap<String,String>();
  try {
    return PreyRestHttpClient.getInstance(ctx).get(this.getDeviceUrl(ctx),parameters,preyConfig).getResponseAsString();
  }
 catch (  IOException e) {
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
}"
43825,"public String deleteDevice(Context ctx) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  String xml;
  try {
    xml=PreyRestHttpClient.getInstance(ctx).delete(PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID()).concat(""String_Node_Str""),parameters,preyConfig).getResponseAsString();
  }
 catch (  IOException e) {
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
  return xml;
}","public String deleteDevice(Context ctx) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  String xml;
  try {
    xml=PreyRestHttpClient.getInstance(ctx).delete(this.getDeviceUrl(ctx),parameters,preyConfig).getResponseAsString();
  }
 catch (  IOException e) {
    throw new PreyException(ctx.getText(R.string.error_communication_exception).toString(),e);
  }
  return xml;
}"
43826,"public void deactivateModules(Context ctx,ArrayList<String> modules){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  for (  String module : modules) {
    parameters.put(""String_Node_Str"",module);
  }
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  try {
    PreyRestHttpClient.getInstance(ctx).methodAsParameter(PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID()).concat(""String_Node_Str""),""String_Node_Str"",parameters,preyConfig);
    PreyLogger.d(""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void deactivateModules(Context ctx,ArrayList<String> modules){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  for (  String module : modules) {
    parameters.put(""String_Node_Str"",module);
  }
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  try {
    PreyRestHttpClient.getInstance(ctx).methodAsParameter(this.getDeviceUrl(ctx),""String_Node_Str"",parameters,preyConfig);
    PreyLogger.d(""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  PreyException e) {
    PreyLogger.e(""String_Node_Str"",e);
  }
}"
43827,"public void setMissing(Context ctx,boolean isMissing){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  if (isMissing)   parameters.put(""String_Node_Str"",""String_Node_Str"");
 else   parameters.put(""String_Node_Str"",""String_Node_Str"");
  try {
    PreyRestHttpClient.getInstance(ctx).methodAsParameter(PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID()).concat(""String_Node_Str""),""String_Node_Str"",parameters,preyConfig);
    PreyLogger.d(""String_Node_Str"" + isMissing + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void setMissing(Context ctx,boolean isMissing){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  if (isMissing)   parameters.put(""String_Node_Str"",""String_Node_Str"");
 else   parameters.put(""String_Node_Str"",""String_Node_Str"");
  try {
    PreyRestHttpClient.getInstance(ctx).methodAsParameter(this.getDeviceUrl(ctx),""String_Node_Str"",parameters,preyConfig);
    PreyLogger.d(""String_Node_Str"" + isMissing + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  PreyException e) {
    PreyLogger.e(""String_Node_Str"",e);
  }
}"
43828,"public String getDeviceWebControlPanelUrl(Context ctx){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  return PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID());
}","public String getDeviceWebControlPanelUrl(Context ctx) throws PreyException {
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  String deviceKey=preyConfig.getDeviceID();
  if (deviceKey == null || deviceKey == ""String_Node_Str"")   throw new PreyException(""String_Node_Str"");
  return PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(deviceKey);
}"
43829,"public String sendPreyHttpReport(Context ctx,ArrayList<HttpDataService> dataToSend){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  String URL=PreyConfig.postUrl != null ? PreyConfig.postUrl : PreyConfig.getPreyConfig(ctx).getPreyUrl().concat(""String_Node_Str"").concat(preyConfig.getDeviceID()).concat(""String_Node_Str"");
  PreyConfig.postUrl=null;
  HashMap<String,String> parameters=new HashMap<String,String>();
  for (  HttpDataService httpDataService : dataToSend) {
    parameters.putAll(httpDataService.getDataAsParameters());
  }
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  String response=null;
  try {
    response=PreyRestHttpClient.getInstance(ctx).post(URL,parameters,preyConfig).getResponseAsString();
    PreyLogger.d(""String_Node_Str"" + response);
    if (preyConfig.isShouldNotify()) {
      this.notifyUser(ctx);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return response;
}","public String sendPreyHttpReport(Context ctx,ArrayList<HttpDataService> dataToSend){
  PreyConfig preyConfig=PreyConfig.getPreyConfig(ctx);
  HashMap<String,String> parameters=new HashMap<String,String>();
  for (  HttpDataService httpDataService : dataToSend) {
    parameters.putAll(httpDataService.getDataAsParameters());
  }
  parameters.put(""String_Node_Str"",preyConfig.getApiKey());
  String response=null;
  try {
    String URL=PreyConfig.postUrl != null ? PreyConfig.postUrl : this.getDeviceWebControlPanelUrl(ctx).concat(""String_Node_Str"");
    PreyConfig.postUrl=null;
    response=PreyRestHttpClient.getInstance(ctx).post(URL,parameters,preyConfig).getResponseAsString();
    PreyLogger.d(""String_Node_Str"" + response);
    if (preyConfig.isShouldNotify()) {
      this.notifyUser(ctx);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  PreyException e) {
    PreyLogger.e(""String_Node_Str"",e);
  }
  return response;
}"
43830,"@Override public void onResume(){
  super.onResume();
  if (mArrivalsListHeader != null && mSlidingPanel != null) {
    mArrivalsListHeader.setSlidingPanelCollapsed(isSlidingPanelCollapsed());
  }
  checkLeftHandMode();
  updateLayersFabVisibility();
  mFabMyLocation.requestLayout();
}","@Override public void onResume(){
  super.onResume();
  if (mArrivalsListHeader != null && mSlidingPanel != null) {
    mArrivalsListHeader.setSlidingPanelCollapsed(isSlidingPanelCollapsed());
  }
  checkLeftHandMode();
  updateLayersFab();
  mFabMyLocation.requestLayout();
}"
43831,"@Override public void onRegionTaskFinished(boolean currentRegionChanged){
  boolean update=autoShowWhatsNew();
  if (currentRegionChanged || update) {
    redrawNavigationDrawerFragment();
  }
  if (currentRegionChanged && Application.getPrefs().getBoolean(getString(R.string.preference_key_auto_select_region),true) && Application.get().getCurrentRegion() != null && UIUtils.canManageDialog(this)) {
    Toast.makeText(getApplicationContext(),getString(R.string.region_region_found,Application.get().getCurrentRegion().getName()),Toast.LENGTH_LONG).show();
  }
  updateLayersFabVisibility();
}","@Override public void onRegionTaskFinished(boolean currentRegionChanged){
  boolean update=autoShowWhatsNew();
  if (currentRegionChanged || update) {
    redrawNavigationDrawerFragment();
  }
  if (currentRegionChanged && Application.getPrefs().getBoolean(getString(R.string.preference_key_auto_select_region),true) && Application.get().getCurrentRegion() != null && UIUtils.canManageDialog(this)) {
    Toast.makeText(getApplicationContext(),getString(R.string.region_region_found,Application.get().getCurrentRegion().getName()),Toast.LENGTH_LONG).show();
  }
  updateLayersFab();
}"
43832,"private void setupLayersSpeedDial(){
  mLayersFab=(uk.co.markormesher.android_fab.FloatingActionButton)findViewById(R.id.layersSpeedDial);
  ViewGroup.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)mLayersFab.getLayoutParams();
  LAYERS_FAB_DEFAULT_BOTTOM_MARGIN=p.bottomMargin;
  mLayersFab.setIcon(R.drawable.ic_layers_white_24dp);
  mLayersFab.setBackgroundColour(ContextCompat.getColor(this,R.color.theme_accent));
  LayersSpeedDialAdapter adapter=new LayersSpeedDialAdapter(this);
  adapter.addLayerActivationListener(mMapFragment);
  adapter.addLayerActivationListener(new LayersSpeedDialAdapter.LayerActivationListener(){
    @Override public void onActivateLayer(    LayerInfo layer){
      Handler h=new Handler(getMainLooper());
      h.postDelayed(new Runnable(){
        @Override public void run(){
          mLayersFab.rebuildSpeedDialMenu();
        }
      }
,100);
    }
    @Override public void onDeactivateLayer(    LayerInfo layer){
      Handler h=new Handler(getMainLooper());
      h.postDelayed(new Runnable(){
        @Override public void run(){
          mLayersFab.rebuildSpeedDialMenu();
        }
      }
,100);
    }
  }
);
  mLayersFab.setMenuAdapter(adapter);
  mLayersFab.setOnSpeedDialOpenListener(new uk.co.markormesher.android_fab.FloatingActionButton.OnSpeedDialOpenListener(){
    @Override public void onOpen(    uk.co.markormesher.android_fab.FloatingActionButton v){
      mLayersFab.setIcon(R.drawable.ic_add_white_24dp);
    }
  }
);
  mLayersFab.setOnSpeedDialCloseListener(new uk.co.markormesher.android_fab.FloatingActionButton.OnSpeedDialCloseListener(){
    @Override public void onClose(    uk.co.markormesher.android_fab.FloatingActionButton v){
      mLayersFab.setIcon(R.drawable.ic_layers_white_24dp);
    }
  }
);
  mLayersFab.setContentCoverEnabled(false);
}","private void setupLayersSpeedDial(){
  mLayersFab=(uk.co.markormesher.android_fab.FloatingActionButton)findViewById(R.id.layersSpeedDial);
  ViewGroup.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)mLayersFab.getLayoutParams();
  LAYERS_FAB_DEFAULT_BOTTOM_MARGIN=p.bottomMargin;
}"
43833,"@Override protected void initView(final View view,CombinedArrivalInfoStyleB combinedArrivalInfoStyleB){
  final ArrivalInfo stopInfo=combinedArrivalInfoStyleB.getArrivalInfoList().get(0);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  final Context context=getContext();
  LayoutInflater inflater=LayoutInflater.from(context);
  TextView routeName=(TextView)view.findViewById(R.id.routeName);
  TextView destination=(TextView)view.findViewById(R.id.routeDestination);
  TableLayout arrivalTimesLayout=(TableLayout)view.findViewById(R.id.arrivalTimeLayout);
  arrivalTimesLayout.removeAllViews();
  Resources r=view.getResources();
  ImageButton starBtn=(ImageButton)view.findViewById(R.id.route_star);
  starBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton mapImageBtn=(ImageButton)view.findViewById(R.id.mapImageBtn);
  mapImageBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton routeMoreInfo=(ImageButton)view.findViewById(R.id.route_more_info);
  routeMoreInfo.setColorFilter(r.getColor(R.color.theme_primary));
  starBtn.setImageResource(stopInfo.isRouteAndHeadsignFavorite() ? R.drawable.focus_star_on : R.drawable.focus_star_off);
  starBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RouteFavoriteDialogFragment dialog=new RouteFavoriteDialogFragment.Builder(stopInfo.getInfo().getRouteId(),stopInfo.getInfo().getHeadsign()).setRouteShortName(stopInfo.getInfo().getShortName()).setRouteLongName(stopInfo.getInfo().getRouteLongName()).setStopId(stopInfo.getInfo().getStopId()).setFavorite(!stopInfo.isRouteAndHeadsignFavorite()).build();
      dialog.setCallback(new RouteFavoriteDialogFragment.Callback(){
        @Override public void onSelectionComplete(        boolean savedFavorite){
          if (savedFavorite) {
            mFragment.refreshLocal();
          }
        }
      }
);
      dialog.show(mFragment.getFragmentManager(),RouteFavoriteDialogFragment.TAG);
    }
  }
);
  mapImageBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeActivity.start(getContext(),stopInfo.getInfo().getRouteId());
    }
  }
);
  routeMoreInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mFragment.showListItemMenu(view,stopInfo);
    }
  }
);
  startRealtimeAnimation(view);
  routeName.setText(arrivalInfo.getShortName());
  destination.setText(MyTextUtils.toTitleCase(arrivalInfo.getHeadsign()));
  for (int i=0; i < combinedArrivalInfoStyleB.getArrivalInfoList().size(); i++) {
    ArrivalInfo arrivalRow=combinedArrivalInfoStyleB.getArrivalInfoList().get(i);
    final ObaArrivalInfo tempArrivalInfo=arrivalRow.getInfo();
    long scheduledTime=tempArrivalInfo.getScheduledArrivalTime();
    TableRow tr=new TableRow(getContext());
    tr.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,TableRow.LayoutParams.MATCH_PARENT));
    tr.setFocusable(false);
    tr.setClickable(false);
    RelativeLayout layout;
    TextView scheduleView, estimatedView;
    View divider;
    if (i == 0) {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_large,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_large,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_large,null);
    }
 else {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_small,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_small,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_small,null);
    }
    scheduleView.setText(DateUtils.formatDateTime(context,scheduledTime,DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
    if (arrivalRow.getPredicted()) {
      long eta=arrivalRow.getEta();
      if (eta == 0) {
        estimatedView.setText(R.string.stop_info_eta_now);
      }
 else {
        estimatedView.setText(String.valueOf(Math.abs(eta)) + ""String_Node_Str"");
      }
    }
 else {
      estimatedView.setText(R.string.stop_info_eta_unknown);
    }
    layout.addView(scheduleView);
    layout.addView(estimatedView);
    RelativeLayout.LayoutParams params1=(RelativeLayout.LayoutParams)scheduleView.getLayoutParams();
    params1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    scheduleView.setLayoutParams(params1);
    RelativeLayout.LayoutParams params2=(RelativeLayout.LayoutParams)estimatedView.getLayoutParams();
    params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    estimatedView.setLayoutParams(params2);
    tr.addView(layout);
    if (i != 0) {
      int dividerHeight=UIHelp.dpToPixels(context,1);
      divider=inflater.inflate(R.layout.arrivals_list_divider_template_style_b,null);
      divider.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,dividerHeight));
      arrivalTimesLayout.addView(divider);
    }
    arrivalTimesLayout.addView(tr,new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,TableLayout.LayoutParams.MATCH_PARENT));
  }
  ContentValues values=null;
  if (mTripsForStop != null) {
    values=mTripsForStop.getValues(arrivalInfo.getTripId());
  }
  if (values != null) {
    String reminderName=values.getAsString(ObaContract.Trips.NAME);
    TextView reminder=(TextView)view.findViewById(R.id.reminder);
    if (reminderName.length() == 0) {
      reminderName=context.getString(R.string.trip_info_noname);
    }
    reminder.setText(reminderName);
    Drawable d=reminder.getCompoundDrawables()[0];
    d=DrawableCompat.wrap(d);
    DrawableCompat.setTint(d.mutate(),view.getResources().getColor(R.color.theme_primary));
    reminder.setCompoundDrawables(d,null,null,null);
    reminder.setVisibility(View.VISIBLE);
  }
 else {
    View reminder=view.findViewById(R.id.reminder);
    reminder.setVisibility(View.GONE);
  }
}","@Override protected void initView(final View view,CombinedArrivalInfoStyleB combinedArrivalInfoStyleB){
  final ArrivalInfo stopInfo=combinedArrivalInfoStyleB.getArrivalInfoList().get(0);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  final Context context=getContext();
  LayoutInflater inflater=LayoutInflater.from(context);
  TextView routeName=(TextView)view.findViewById(R.id.routeName);
  TextView destination=(TextView)view.findViewById(R.id.routeDestination);
  TableLayout arrivalTimesLayout=(TableLayout)view.findViewById(R.id.arrivalTimeLayout);
  arrivalTimesLayout.removeAllViews();
  Resources r=view.getResources();
  ImageButton starBtn=(ImageButton)view.findViewById(R.id.route_star);
  starBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton mapImageBtn=(ImageButton)view.findViewById(R.id.mapImageBtn);
  mapImageBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton routeMoreInfo=(ImageButton)view.findViewById(R.id.route_more_info);
  routeMoreInfo.setColorFilter(r.getColor(R.color.theme_primary));
  starBtn.setImageResource(stopInfo.isRouteAndHeadsignFavorite() ? R.drawable.focus_star_on : R.drawable.focus_star_off);
  starBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RouteFavoriteDialogFragment dialog=new RouteFavoriteDialogFragment.Builder(stopInfo.getInfo().getRouteId(),stopInfo.getInfo().getHeadsign()).setRouteShortName(stopInfo.getInfo().getShortName()).setRouteLongName(stopInfo.getInfo().getRouteLongName()).setStopId(stopInfo.getInfo().getStopId()).setFavorite(!stopInfo.isRouteAndHeadsignFavorite()).build();
      dialog.setCallback(new RouteFavoriteDialogFragment.Callback(){
        @Override public void onSelectionComplete(        boolean savedFavorite){
          if (savedFavorite) {
            mFragment.refreshLocal();
          }
        }
      }
);
      dialog.show(mFragment.getFragmentManager(),RouteFavoriteDialogFragment.TAG);
    }
  }
);
  mapImageBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeActivity.start(getContext(),stopInfo.getInfo().getRouteId());
    }
  }
);
  routeMoreInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mFragment.showListItemMenu(view,stopInfo);
    }
  }
);
  routeName.setText(arrivalInfo.getShortName());
  destination.setText(MyTextUtils.toTitleCase(arrivalInfo.getHeadsign()));
  for (int i=0; i < combinedArrivalInfoStyleB.getArrivalInfoList().size(); i++) {
    ArrivalInfo arrivalRow=combinedArrivalInfoStyleB.getArrivalInfoList().get(i);
    final ObaArrivalInfo tempArrivalInfo=arrivalRow.getInfo();
    long scheduledTime=tempArrivalInfo.getScheduledArrivalTime();
    TableRow tr=new TableRow(getContext());
    tr.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,TableRow.LayoutParams.MATCH_PARENT));
    tr.setFocusable(false);
    tr.setClickable(false);
    RelativeLayout layout;
    TextView scheduleView, estimatedView;
    View divider;
    if (i == 0) {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_large,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_large,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_large,null);
    }
 else {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_small,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_small,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_small,null);
    }
    scheduleView.setText(DateUtils.formatDateTime(context,scheduledTime,DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
    if (arrivalRow.getPredicted()) {
      long eta=arrivalRow.getEta();
      if (eta == 0) {
        estimatedView.setText(R.string.stop_info_eta_now);
      }
 else {
        estimatedView.setText(String.valueOf(Math.abs(eta)) + ""String_Node_Str"");
      }
    }
 else {
      estimatedView.setText(R.string.stop_info_eta_unknown);
    }
    layout.addView(scheduleView);
    layout.addView(estimatedView);
    RelativeLayout.LayoutParams params1=(RelativeLayout.LayoutParams)scheduleView.getLayoutParams();
    params1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    scheduleView.setLayoutParams(params1);
    RelativeLayout.LayoutParams params2=(RelativeLayout.LayoutParams)estimatedView.getLayoutParams();
    params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    estimatedView.setLayoutParams(params2);
    tr.addView(layout);
    if (i != 0) {
      int dividerHeight=UIHelp.dpToPixels(context,1);
      divider=inflater.inflate(R.layout.arrivals_list_divider_template_style_b,null);
      divider.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,dividerHeight));
      arrivalTimesLayout.addView(divider);
    }
    arrivalTimesLayout.addView(tr,new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,TableLayout.LayoutParams.MATCH_PARENT));
  }
  ContentValues values=null;
  if (mTripsForStop != null) {
    values=mTripsForStop.getValues(arrivalInfo.getTripId());
  }
  if (values != null) {
    String reminderName=values.getAsString(ObaContract.Trips.NAME);
    TextView reminder=(TextView)view.findViewById(R.id.reminder);
    if (reminderName.length() == 0) {
      reminderName=context.getString(R.string.trip_info_noname);
    }
    reminder.setText(reminderName);
    Drawable d=reminder.getCompoundDrawables()[0];
    d=DrawableCompat.wrap(d);
    DrawableCompat.setTint(d.mutate(),view.getResources().getColor(R.color.theme_primary));
    reminder.setCompoundDrawables(d,null,null,null);
    reminder.setVisibility(View.VISIBLE);
  }
 else {
    View reminder=view.findViewById(R.id.reminder);
    reminder.setVisibility(View.GONE);
  }
}"
43834,"public RealtimeIndicatorView(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RealtimeIndicatorView,0,0);
  mFillColor=a.getColor(R.styleable.RealtimeIndicatorView_fillColor,mFillColor);
  mLineColor=a.getColor(R.styleable.RealtimeIndicatorView_lineColor,mLineColor);
  mDuration=a.getInteger(R.styleable.RealtimeIndicatorView_duration,mDuration);
  a.recycle();
  mFillPaint=new Paint();
  mFillPaint.setColor(mFillColor);
  mFillPaint.setStyle(Paint.Style.FILL);
  mFillPaint.setAntiAlias(true);
  mLinePaint=new Paint();
  mLinePaint.setStrokeWidth(3);
  mLinePaint.setColor(mLineColor);
  mLinePaint.setStyle(Paint.Style.STROKE);
  mLinePaint.setAntiAlias(true);
  setOnMeasureCallback();
}","public RealtimeIndicatorView(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RealtimeIndicatorView,0,0);
  mFillColor=a.getColor(R.styleable.RealtimeIndicatorView_fillColor,mFillColor);
  mLineColor=a.getColor(R.styleable.RealtimeIndicatorView_lineColor,mLineColor);
  mDuration=a.getInteger(R.styleable.RealtimeIndicatorView_duration,mDuration);
  a.recycle();
  mFillPaint=new Paint();
  mFillPaint.setColor(mFillColor);
  mFillPaint.setStyle(Paint.Style.FILL);
  mFillPaint.setAntiAlias(true);
  mLinePaint=new Paint();
  mLinePaint.setStrokeWidth(3);
  mLinePaint.setColor(mLineColor);
  mLinePaint.setStyle(Paint.Style.STROKE);
  mLinePaint.setAntiAlias(true);
  setOnMeasureCallback();
  ensureInit();
}"
43835,"private void setOnMeasureCallback(){
  ViewTreeObserver vto=getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      removeOnGlobalLayoutListener(this);
      mAnimation1=new Animation(){
        @Override protected void applyTransformation(        float interpolatedTime,        Transformation t){
          int height=getHeight();
          mNewRadius=height * interpolatedTime;
          invalidate();
        }
      }
;
      mAnimation1.setDuration(mDuration);
      mAnimation1.setRepeatMode(Animation.REVERSE);
      mAnimation1.setInterpolator(new FastOutLinearInInterpolator());
      mAnimation1.setRepeatCount(Animation.INFINITE);
      startAnimation(mAnimation1);
    }
  }
);
}","private void setOnMeasureCallback(){
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      removeOnGlobalLayoutListener(this);
      initAnimation();
    }
  }
);
}"
43836,"@Override public void onGlobalLayout(){
  removeOnGlobalLayoutListener(this);
  mAnimation1=new Animation(){
    @Override protected void applyTransformation(    float interpolatedTime,    Transformation t){
      int height=getHeight();
      mNewRadius=height * interpolatedTime;
      invalidate();
    }
  }
;
  mAnimation1.setDuration(mDuration);
  mAnimation1.setRepeatMode(Animation.REVERSE);
  mAnimation1.setInterpolator(new FastOutLinearInInterpolator());
  mAnimation1.setRepeatCount(Animation.INFINITE);
  startAnimation(mAnimation1);
}","@Override public void onGlobalLayout(){
  removeOnGlobalLayoutListener(this);
  initAnimation();
}"
43837,"/** 
 * Sets the header for this list to be instantiated in another layout, but still controlled by this fragment
 * @param header     header that will be controlled by this fragment
 * @param headerView View that contains this header
 */
public void setHeader(ArrivalsListHeader header,View headerView){
  mHeader=header;
  mHeaderView=headerView;
}","/** 
 * Sets the header for this list to be instantiated in another layout, but still controlled by this fragment
 * @param header     header that will be controlled by this fragment
 * @param headerView View that contains this header
 */
public void setHeader(ArrivalsListHeader header,View headerView){
  mHeader=header;
  mHeaderView=headerView;
  mHeader.initView(mHeaderView);
  mExternalHeader=true;
}"
43838,"@Override public boolean onOptionsItemSelected(MenuItem item){
  final int id=item.getItemId();
  if (id == R.id.show_on_map) {
    if (mStop != null) {
      HomeActivity.start(getActivity(),mStop.getId(),mStop.getLatitude(),mStop.getLongitude());
    }
    return true;
  }
 else   if (id == R.id.refresh) {
    refresh();
    return true;
  }
 else   if (id == R.id.filter) {
    if (mStop != null) {
      showRoutesFilterDialog();
    }
  }
 else   if (id == R.id.edit_name) {
    mHeader.beginNameEdit(null);
  }
 else   if (id == R.id.toggle_favorite) {
    setFavorite(!mFavorite);
    mHeader.refresh();
  }
 else   if (id == R.id.report_problem) {
    if (mStop != null) {
      ReportStopProblemFragment.show(getSherlockActivity(),mStop);
    }
  }
  return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  final int id=item.getItemId();
  if (id == R.id.show_on_map) {
    if (mStop != null) {
      HomeActivity.start(getActivity(),mStop.getId(),mStop.getLatitude(),mStop.getLongitude());
    }
    return true;
  }
 else   if (id == R.id.refresh) {
    refresh();
    return true;
  }
 else   if (id == R.id.filter) {
    if (mStop != null) {
      showRoutesFilterDialog();
    }
  }
 else   if (id == R.id.edit_name) {
    if (mHeader != null) {
      mHeader.beginNameEdit(null);
    }
  }
 else   if (id == R.id.toggle_favorite) {
    setFavorite(!mFavorite);
    if (mHeader != null) {
      mHeader.refresh();
    }
  }
 else   if (id == R.id.report_problem) {
    if (mStop != null) {
      ReportStopProblemFragment.show(getSherlockActivity(),mStop);
    }
  }
  return false;
}"
43839,"private void setRoutesFilter(boolean[] checks){
  final int len=checks.length;
  final ArrayList<String> newFilter=new ArrayList<String>(len);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final List<ObaRoute> routes=response.getRoutes(mStop.getRouteIds());
  assert(routes.size() == len);
  for (int i=0; i < len; ++i) {
    final ObaRoute route=routes.get(i);
    if (checks[i]) {
      newFilter.add(route.getId());
    }
  }
  if (newFilter.size() == len) {
    newFilter.clear();
  }
  setRoutesFilter(newFilter);
  mHeader.refresh();
}","private void setRoutesFilter(boolean[] checks){
  final int len=checks.length;
  final ArrayList<String> newFilter=new ArrayList<String>(len);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final List<ObaRoute> routes=response.getRoutes(mStop.getRouteIds());
  assert(routes.size() == len);
  for (int i=0; i < len; ++i) {
    final ObaRoute route=routes.get(i);
    if (checks[i]) {
      newFilter.add(route.getId());
    }
  }
  if (newFilter.size() == len) {
    newFilter.clear();
  }
  setRoutesFilter(newFilter);
  if (mHeader != null) {
    mHeader.refresh();
  }
}"
43840,"@Override public void onResume(){
  ArrivalsListLoader loader=getArrivalsLoader();
  if (loader != null) {
    ObaArrivalInfoResponse lastGood=loader.getLastGoodResponse();
    if (lastGood != null) {
      setResponseData(lastGood.getArrivalInfo(),lastGood.getSituations());
    }
  }
  getLoaderManager().restartLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  long lastResponseTime=getArrivalsLoader().getLastResponseTime();
  long newPeriod=Math.min(RefreshPeriod,(lastResponseTime + RefreshPeriod) - System.currentTimeMillis());
  if (newPeriod <= 0) {
    refresh();
  }
 else {
    mRefreshHandler.postDelayed(mRefresh,newPeriod);
  }
  super.onResume();
}","@Override public void onResume(){
  if (mListener != null) {
    final Handler handler=new Handler();
    handler.post(new Runnable(){
      @Override public void run(){
        mListener.onListViewCreated(getListView());
      }
    }
);
  }
  if (mHeader != null) {
    Log.d(TAG,""String_Node_Str"");
    mHeader.refresh();
  }
  ArrivalsListLoader loader=getArrivalsLoader();
  if (loader != null) {
    ObaArrivalInfoResponse lastGood=loader.getLastGoodResponse();
    if (lastGood != null) {
      setResponseData(lastGood.getArrivalInfo(),lastGood.getSituations());
    }
  }
  getLoaderManager().restartLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  long lastResponseTime=getArrivalsLoader().getLastResponseTime();
  long newPeriod=Math.min(RefreshPeriod,(lastResponseTime + RefreshPeriod) - System.currentTimeMillis());
  if (newPeriod <= 0) {
    refresh();
  }
 else {
    mRefreshHandler.postDelayed(mRefresh,newPeriod);
  }
  super.onResume();
}"
43841,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  final ArrivalInfo stop=(ArrivalInfo)getListView().getItemAtPosition(position);
  if (stop == null) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.stop_info_item_options_title);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final ObaRoute route=response.getRoute(stop.getInfo().getRouteId());
  final String url=route != null ? route.getUrl() : null;
  final boolean hasUrl=!TextUtils.isEmpty(url);
  int options;
  View tripView=v.findViewById(R.id.trip_info);
  if (tripView.getVisibility() != View.GONE) {
    if (hasUrl) {
      options=R.array.stop_item_options_edit;
    }
 else {
      options=R.array.stop_item_options_edit_noschedule;
    }
  }
 else   if (hasUrl) {
    options=R.array.stop_item_options;
  }
 else {
    options=R.array.stop_item_options_noschedule;
  }
  builder.setItems(options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (which == 0) {
        goToTrip(stop);
      }
 else       if (which == 1) {
        goToRoute(stop);
      }
 else       if (which == 2) {
        ArrayList<String> routes=new ArrayList<String>(1);
        routes.add(stop.getInfo().getRouteId());
        setRoutesFilter(routes);
        mHeader.refresh();
      }
 else       if (hasUrl && which == 3) {
        UIHelp.goToUrl(getActivity(),url);
      }
 else       if ((!hasUrl && which == 3) || (hasUrl && which == 4)) {
        ReportTripProblemFragment.show(getSherlockActivity(),stop.getInfo());
      }
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.setOwnerActivity(getActivity());
  dialog.show();
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  final ArrivalInfo stop=(ArrivalInfo)getListView().getItemAtPosition(position);
  if (stop == null) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.stop_info_item_options_title);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final ObaRoute route=response.getRoute(stop.getInfo().getRouteId());
  final String url=route != null ? route.getUrl() : null;
  final boolean hasUrl=!TextUtils.isEmpty(url);
  int options;
  View tripView=v.findViewById(R.id.trip_info);
  if (tripView.getVisibility() != View.GONE) {
    if (hasUrl) {
      options=R.array.stop_item_options_edit;
    }
 else {
      options=R.array.stop_item_options_edit_noschedule;
    }
  }
 else   if (hasUrl) {
    options=R.array.stop_item_options;
  }
 else {
    options=R.array.stop_item_options_noschedule;
  }
  builder.setItems(options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (which == 0) {
        goToTrip(stop);
      }
 else       if (which == 1) {
        goToRoute(stop);
      }
 else       if (which == 2) {
        ArrayList<String> routes=new ArrayList<String>(1);
        routes.add(stop.getInfo().getRouteId());
        setRoutesFilter(routes);
        if (mHeader != null) {
          mHeader.refresh();
        }
      }
 else       if (hasUrl && which == 3) {
        UIHelp.goToUrl(getActivity(),url);
      }
 else       if ((!hasUrl && which == 3) || (hasUrl && which == 4)) {
        ReportTripProblemFragment.show(getSherlockActivity(),stop.getInfo());
      }
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.setOwnerActivity(getActivity());
  dialog.show();
}"
43842,"private void setResponseData(ObaArrivalInfo[] info,List<ObaSituation> situations){
  mHeader.refresh();
  if (situations != null) {
    refreshSituations(situations);
  }
 else {
    refreshSituations(new ArrayList<ObaSituation>());
  }
  if (info != null) {
    setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
    mAdapter.setData(info,mRoutesFilter);
  }
}","private void setResponseData(ObaArrivalInfo[] info,List<ObaSituation> situations){
  if (mHeader != null) {
    mHeader.refresh();
  }
  if (situations != null) {
    refreshSituations(situations);
  }
 else {
    refreshSituations(new ArrayList<ObaSituation>());
  }
  if (info != null) {
    setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
    mAdapter.setData(info,mRoutesFilter);
  }
}"
43843,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getListView().setEmptyView(mEmptyList);
  ((ViewGroup)getListView().getParent()).addView(mEmptyList);
  setHasOptionsMenu(true);
  mAlertList=new AlertList(getActivity());
  mAlertList.initView(getView().findViewById(R.id.arrivals_alert_list));
  if (mHeader == null) {
    mHeader=new ArrivalsListHeader(getActivity(),this);
    mHeaderView=getView().findViewById(R.id.arrivals_list_header);
  }
 else {
    getView().findViewById(R.id.arrivals_list_header).setVisibility(View.GONE);
  }
  mHeader.initView(mHeaderView);
  mHeader.refresh();
  Button loadMoreArrivals=(Button)mFooter.findViewById(R.id.load_more_arrivals);
  loadMoreArrivals.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  getListView().addFooterView(mFooter);
  Button loadMoreArrivalsEmptyList=(Button)mEmptyList.findViewById(R.id.load_more_arrivals);
  loadMoreArrivalsEmptyList.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  setStopId();
  setUserInfo();
  mAdapter=new ArrivalsListAdapter(getActivity());
  setListAdapter(mAdapter);
  setListShown(false);
  mRoutesFilter=ObaContract.StopRouteFilters.get(getActivity(),mStopId);
  mTripsForStopCallback=new TripsForStopCallback();
  LoaderManager mgr=getLoaderManager();
  mgr.initLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  mgr.initLoader(ARRIVALS_LIST_LOADER,getArguments(),this);
  setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getListView().setEmptyView(mEmptyList);
  ((ViewGroup)getListView().getParent()).addView(mEmptyList);
  setHasOptionsMenu(true);
  mAlertList=new AlertList(getActivity());
  mAlertList.initView(getView().findViewById(R.id.arrivals_alert_list));
  setupHeader(savedInstanceState);
  Button loadMoreArrivals=(Button)mFooter.findViewById(R.id.load_more_arrivals);
  loadMoreArrivals.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  getListView().addFooterView(mFooter);
  Button loadMoreArrivalsEmptyList=(Button)mEmptyList.findViewById(R.id.load_more_arrivals);
  loadMoreArrivalsEmptyList.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  setStopId();
  setUserInfo();
  mAdapter=new ArrivalsListAdapter(getActivity());
  setListAdapter(mAdapter);
  setListShown(false);
  mRoutesFilter=ObaContract.StopRouteFilters.get(getActivity(),mStopId);
  mTripsForStopCallback=new TripsForStopCallback();
  LoaderManager mgr=getLoaderManager();
  mgr.initLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  mgr.initLoader(ARRIVALS_LIST_LOADER,getArguments(),this);
  setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
}"
43844,"private void setupSlidingPanel(){
  mSlidingPanel=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mSlidingPanel.hidePanel();
  mSlidingPanel.setOverlayed(true);
  mSlidingPanel.setPanelSlideListener(new SlidingUpPanelLayout.PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.d(TAG,""String_Node_Str"" + slideOffset);
    }
    @Override public void onPanelExpanded(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mFocusedStop != null && mMapFragment != null) {
        mMapFragment.setMapCenter(mFocusedStop.getLocation(),true,true);
      }
    }
    @Override public void onPanelHidden(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mArrivalsListFragment != null) {
        FragmentManager fm=getSupportFragmentManager();
        fm.beginTransaction().remove(mArrivalsListFragment).commit();
      }
    }
  }
);
}","private void setupSlidingPanel(){
  mSlidingPanel=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mArrivalsListHeaderView=findViewById(R.id.arrivals_list_header);
  mSlidingPanel.hidePanel();
  mSlidingPanel.setOverlayed(true);
  mSlidingPanel.setAnchorPoint(MapModeController.OVERLAY_PERCENTAGE);
  mSlidingPanel.setPanelSlideListener(new SlidingUpPanelLayout.PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.d(TAG,""String_Node_Str"" + slideOffset);
    }
    @Override public void onPanelExpanded(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mFocusedStop != null && mMapFragment != null) {
        mMapFragment.setMapCenter(mFocusedStop.getLocation(),true,true);
      }
    }
    @Override public void onPanelHidden(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mArrivalsListFragment != null) {
        FragmentManager fm=getSupportFragmentManager();
        fm.beginTransaction().remove(mArrivalsListFragment).commit();
      }
    }
  }
);
}"
43845,"/** 
 * Called by the BaseMapFragment when a stop obtains focus, or no stops have focus
 * @param stop the ObaStop that obtained focus, or null if no stop is in focus
 * @param routes a HashMap of all route display names that serve this stop - key is routeId
 */
@Override public void onFocusChanged(ObaStop stop,HashMap<String,ObaRoute> routes){
  mFocusedStop=stop;
  if (stop != null) {
    FragmentManager fm=getSupportFragmentManager();
    mArrivalsListFragment=new ArrivalsListFragment();
    ArrivalsListHeader header=new ArrivalsListHeader(this,mArrivalsListFragment);
    mArrivalsListFragment.setHeader(header,findViewById(R.id.arrivals_list_header));
    Intent i=new ArrivalsListFragment.IntentBuilder(this,stop,routes).build();
    mArrivalsListFragment.setArguments(FragmentUtils.getIntentArgs(i));
    fm.beginTransaction().replace(R.id.slidingFragment,mArrivalsListFragment).commit();
    mSlidingPanel.setAnchorPoint(MapModeController.OVERLAY_PERCENTAGE);
    mSlidingPanel.showPanel();
  }
 else {
    mSlidingPanel.hidePanel();
  }
}","/** 
 * Called by the BaseMapFragment when a stop obtains focus, or no stops have focus
 * @param stop   the ObaStop that obtained focus, or null if no stop is in focus
 * @param routes a HashMap of all route display names that serve this stop - key is routeId
 */
@Override public void onFocusChanged(ObaStop stop,HashMap<String,ObaRoute> routes){
  mFocusedStop=stop;
  if (stop != null) {
    FragmentManager fm=getSupportFragmentManager();
    mArrivalsListFragment=new ArrivalsListFragment();
    mArrivalsListFragment.setListener(this);
    mArrivalsListHeader=new ArrivalsListHeader(this,mArrivalsListFragment);
    mArrivalsListFragment.setHeader(mArrivalsListHeader,mArrivalsListHeaderView);
    Intent i=new ArrivalsListFragment.IntentBuilder(this,stop,routes).build();
    mArrivalsListFragment.setArguments(FragmentUtils.getIntentArgs(i));
    fm.beginTransaction().replace(R.id.slidingFragment,mArrivalsListFragment).commit();
    mSlidingPanel.showPanel();
  }
 else {
    mSlidingPanel.hidePanel();
  }
}"
43846,"private Notification createNotification(Uri alertUri){
  Intent deleteIntent=new Intent(mContext,TripService.class);
  deleteIntent.setAction(TripService.ACTION_CANCEL);
  deleteIntent.setData(alertUri);
  return new NotificationCompat.Builder(mContext).setSmallIcon(R.drawable.ic_stat_notification).setDefaults(Notification.DEFAULT_ALL).setOnlyAlertOnce(true).setDeleteIntent(PendingIntent.getService(mContext,0,deleteIntent,PendingIntent.FLAG_UPDATE_CURRENT)).getNotification();
}","private Notification createNotification(PendingIntent deleteIntent){
  return new NotificationCompat.Builder(mContext).setSmallIcon(R.drawable.ic_stat_notification).setDefaults(Notification.DEFAULT_ALL).setOnlyAlertOnce(true).setDeleteIntent(deleteIntent).build();
}"
43847,"@SuppressWarnings(""String_Node_Str"") private void setLatestInfo(Notification notification,String stopId,String routeId,long timeDiff){
  final String title=mContext.getString(R.string.app_name);
  final PendingIntent intent=PendingIntent.getActivity(mContext,0,new ArrivalsListActivity.Builder(mContext,stopId).getIntent(),PendingIntent.FLAG_UPDATE_CURRENT);
  notification.setLatestEventInfo(mContext,title,getNotifyText(routeId,timeDiff),intent);
}","@SuppressWarnings(""String_Node_Str"") private void setLatestInfo(Notification notification,String stopId,String routeId,long timeDiff,PendingIntent deleteIntent){
  final String title=mContext.getString(R.string.app_name);
  final PendingIntent intent=PendingIntent.getActivity(mContext,0,new ArrivalsListActivity.Builder(mContext,stopId).getIntent(),PendingIntent.FLAG_UPDATE_CURRENT);
  notification.setLatestEventInfo(mContext,title,getNotifyText(routeId,timeDiff),intent);
  notification.deleteIntent=deleteIntent;
}"
43848,"private void notify(Cursor c){
  final int id=c.getInt(COL_ID);
  final String tripId=c.getString(COL_TRIP_ID);
  final String stopId=c.getString(COL_STOP_ID);
  final int state=c.getInt(COL_STATE);
  if (state == TripAlerts.STATE_CANCELLED) {
    return;
  }
  final Uri tripUri=ObaContract.Trips.buildUri(tripId,stopId);
  final String routeId=UIHelp.stringForQuery(mContext,tripUri,Trips.ROUTE_ID);
  Notification notification=mTaskContext.getNotification(id);
  if (notification == null) {
    notification=createNotification(mUri);
  }
  setLatestInfo(notification,stopId,routeId,mTimeDiff);
  mTaskContext.setNotification(id,notification);
}","private void notify(Cursor c){
  final int id=c.getInt(COL_ID);
  final String tripId=c.getString(COL_TRIP_ID);
  final String stopId=c.getString(COL_STOP_ID);
  final int state=c.getInt(COL_STATE);
  if (state == TripAlerts.STATE_CANCELLED) {
    return;
  }
  final Uri tripUri=ObaContract.Trips.buildUri(tripId,stopId);
  final String routeId=UIHelp.stringForQuery(mContext,tripUri,Trips.ROUTE_ID);
  Notification notification=mTaskContext.getNotification(id);
  Intent deleteIntent=new Intent(mContext,TripService.class);
  deleteIntent.setAction(TripService.ACTION_CANCEL);
  deleteIntent.setData(mUri);
  PendingIntent pendingIntent=PendingIntent.getService(mContext,0,deleteIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  if (notification == null) {
    notification=createNotification(pendingIntent);
  }
  setLatestInfo(notification,stopId,routeId,mTimeDiff,pendingIntent);
  mTaskContext.setNotification(id,notification);
}"
43849,"@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new CursorLoader(getActivity(),ObaContract.Stops.CONTENT_URI,QueryUtils.StopList.Columns.PROJECTION,ObaContract.Stops.FAVORITE + ""String_Node_Str"" + Application.get().getCurrentRegion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + QueryUtils.getRegionWhere(ObaContract.Stops.REGION_ID,Application.get().getCurrentRegion().getId()),null,ObaContract.Stops.USE_COUNT + ""String_Node_Str"");
}","@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new CursorLoader(getActivity(),ObaContract.Stops.CONTENT_URI,QueryUtils.StopList.Columns.PROJECTION,ObaContract.Stops.FAVORITE + ""String_Node_Str"" + (Application.get().getCurrentRegion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + QueryUtils.getRegionWhere(ObaContract.Stops.REGION_ID,Application.get().getCurrentRegion().getId())),null,ObaContract.Stops.USE_COUNT + ""String_Node_Str"");
}"
43850,"public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.get().getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}","public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.get().getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
    Uri base=Uri.parse(""String_Node_Str"" + serverName + builder.build().getPath());
    builder.authority(base.getAuthority());
    builder.scheme(base.getScheme());
    builder.encodedPath(base.getEncodedPath());
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}"
43851,"public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getEncodedPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}","public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}"
43852,"public ObaRegionElement(long id,String name,boolean active,String obaBaseUrl,String siriBaseUrl,Bounds[] bounds,String lang,String contactEmail,boolean supportsObaDiscovery,boolean supportsObaRealtime,boolean supportsSiriRealtime){
  this.id=id;
  this.regionName=name;
  this.active=active;
  this.obaBaseUrl=obaBaseUrl;
  this.siriBaseUrl=siriBaseUrl;
  this.bounds=bounds;
  this.language=lang;
  this.contactEmail=contactEmail;
  this.supportsObaDiscovery=supportsObaDiscovery;
  this.supportsObaRealtime=supportsObaRealtime;
  this.supportsSiriRealtime=supportsSiriRealtime;
}","public ObaRegionElement(long id,String name,boolean active,String obaBaseUrl,String siriBaseUrl,Bounds[] bounds,String lang,String contactEmail,boolean supportsObaDiscoveryApis,boolean supportsObaRealtimeApis,boolean supportsSiriRealtimeApis){
  this.id=id;
  this.regionName=name;
  this.active=active;
  this.obaBaseUrl=obaBaseUrl;
  this.siriBaseUrl=siriBaseUrl;
  this.bounds=bounds;
  this.language=lang;
  this.contactEmail=contactEmail;
  this.supportsObaDiscoveryApis=supportsObaDiscoveryApis;
  this.supportsObaRealtimeApis=supportsObaRealtimeApis;
  this.supportsSiriRealtimeApis=supportsSiriRealtimeApis;
}"
43853,"/** 
 * Checks if the given region is usable by the app, based on what this app supports - Is the region active? - Does the region support the OBA Discovery APIs? - Does the region support the OBA Realtime APIs?
 * @param region region to be checked
 * @return true if the region is usable by this application, false if it is not
 */
public static boolean isRegionUsable(ObaRegion region){
  if (!region.getActive()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  return true;
}","/** 
 * Checks if the given region is usable by the app, based on what this app supports - Is the region active? - Does the region support the OBA Discovery APIs? - Does the region support the OBA Realtime APIs?
 * @param region region to be checked
 * @return true if the region is usable by this application, false if it is not
 */
public static boolean isRegionUsable(ObaRegion region){
  if (!region.getActive()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  if (!region.getSupportsObaDiscoveryApis()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  if (!region.getSupportsObaRealtimeApis()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  return true;
}"
43854,"/** 
 * Get the closest region from a list of regions and a given location This method also enforces the constraints in isRegionUsable() to ensure the returned region is actually usable by the app
 * @param regions list of regions
 * @param loc location 
 * @return the closest region to the given location from the list of regions
 */
public static ObaRegion getClosestRegion(ArrayList<ObaRegion> regions,Location loc){
  float minDist=Float.MAX_VALUE;
  ObaRegion closestRegion=null;
  float distToRegion;
  NumberFormat fmt=NumberFormat.getInstance();
  if (fmt instanceof DecimalFormat) {
    ((DecimalFormat)fmt).setMaximumFractionDigits(1);
  }
  double miles;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + loc.getLatitude() + ""String_Node_Str""+ loc.getLongitude());
  }
  for (  ObaRegion region : regions) {
    if (!isRegionUsable(region)) {
      if (BuildConfig.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
      }
      continue;
    }
    distToRegion=getDistanceAway(region,loc.getLatitude(),loc.getLongitude());
    miles=distToRegion * 0.000621371;
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str""+ fmt.format(miles)+ ""String_Node_Str"");
    }
    if (distToRegion < minDist) {
      closestRegion=region;
    }
  }
  return closestRegion;
}","/** 
 * Get the closest region from a list of regions and a given location This method also enforces the constraints in isRegionUsable() to ensure the returned region is actually usable by the app
 * @param regions list of regions
 * @param loc location 
 * @return the closest region to the given location from the list of regions
 */
public static ObaRegion getClosestRegion(ArrayList<ObaRegion> regions,Location loc){
  float minDist=Float.MAX_VALUE;
  ObaRegion closestRegion=null;
  float distToRegion;
  NumberFormat fmt=NumberFormat.getInstance();
  if (fmt instanceof DecimalFormat) {
    ((DecimalFormat)fmt).setMaximumFractionDigits(1);
  }
  double miles;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + loc.getLatitude() + ""String_Node_Str""+ loc.getLongitude());
  }
  for (  ObaRegion region : regions) {
    if (!isRegionUsable(region)) {
      if (BuildConfig.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
      }
      continue;
    }
    distToRegion=getDistanceAway(region,loc.getLatitude(),loc.getLongitude());
    miles=distToRegion * 0.000621371;
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str""+ fmt.format(miles)+ ""String_Node_Str"");
    }
    if (distToRegion < minDist) {
      closestRegion=region;
      minDist=distToRegion;
    }
  }
  return closestRegion;
}"
43855,"public void setBaseUrl(Context context,Uri.Builder builder){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  String serverName=preferences.getString(""String_Node_Str"",null);
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    Uri base=Uri.parse(mRegion.getObaBaseUrl());
    builder.scheme(base.getScheme());
    builder.encodedAuthority(base.getAuthority());
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}","public void setBaseUrl(Context context,Uri.Builder builder){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  String serverName=preferences.getString(""String_Node_Str"",null);
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    String tempPath=builder.build().getPath();
    builder.encodedPath(base.getPath() + tempPath);
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + builder.build().toString() + ""String_Node_Str"");
    }
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}"
43856,"@Override public ObaReportProblemWithTripResponse call(){
  return call(ObaReportProblemWithTripResponse.class);
}","@Override public ObaReportProblemWithTripResponse call(){
  return callPostHack(ObaReportProblemWithTripResponse.class);
}"
43857,"public ObaReportProblemWithTripRequest build(){
  return new ObaReportProblemWithTripRequest(buildUri());
}","public ObaReportProblemWithTripRequest build(){
  return new ObaReportProblemWithTripRequest(buildUri(),buildPostData());
}"
43858,"protected ObaReportProblemWithTripRequest(Uri uri){
  super(uri);
}","protected ObaReportProblemWithTripRequest(Uri uri,String postData){
  super(uri,postData);
}"
43859,"@Override public boolean onContextItemSelected(MenuItem item){
  AdapterContextMenuInfo info=(AdapterContextMenuInfo)item.getMenuInfo();
switch (item.getItemId()) {
case CONTEXT_MENU_DEFAULT:
    onListItemClick(getListView(),info.targetView,info.position,info.id);
  return true;
case CONTEXT_MENU_SHOW_ON_MAP:
showOnMap(getListView(),info.position);
return true;
case CONTEXT_MENU_CREATE_SHORTCUT:
StopData stopData=getStopData(getListView(),info.position);
final Intent shortcutIntent=UIHelp.makeShortcut(getActivity(),stopData.uiName,ArrivalsListActivity.makeIntent(getActivity(),stopData.id,stopData.name,stopData.dir));
shortcutIntent.setAction(MyListConstants.INSTALL_SHORTCUT);
getActivity().sendBroadcast(shortcutIntent);
return true;
default :
return super.onContextItemSelected(item);
}
}","@Override public boolean onContextItemSelected(MenuItem item){
  AdapterContextMenuInfo info=(AdapterContextMenuInfo)item.getMenuInfo();
switch (item.getItemId()) {
case CONTEXT_MENU_DEFAULT:
    onListItemClick(getListView(),info.targetView,info.position,info.id);
  return true;
case CONTEXT_MENU_SHOW_ON_MAP:
showOnMap(getListView(),info.position);
return true;
case CONTEXT_MENU_CREATE_SHORTCUT:
StopData stopData=getStopData(getListView(),info.position);
final Intent shortcutIntent=UIHelp.makeShortcut(getActivity(),stopData.uiName,ArrivalsListActivity.makeIntent(getActivity(),stopData.id,stopData.name,stopData.dir));
shortcutIntent.setAction(MyListConstants.INSTALL_SHORTCUT);
shortcutIntent.setFlags(0);
getActivity().sendBroadcast(shortcutIntent);
return true;
default :
return super.onContextItemSelected(item);
}
}"
43860,"@Override public ObaReportProblemWithStopResponse call(){
  return call(ObaReportProblemWithStopResponse.class);
}","@Override public ObaReportProblemWithStopResponse call(){
  return callPostHack(ObaReportProblemWithStopResponse.class);
}"
43861,"/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mBuilder.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}","/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mPostData.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}"
43862,"public ObaReportProblemWithStopRequest build(){
  return new ObaReportProblemWithStopRequest(buildUri());
}","public ObaReportProblemWithStopRequest build(){
  return new ObaReportProblemWithStopRequest(buildUri(),buildPostData());
}"
43863,"public Builder(Context context,String stopId){
  super(context,getPathWithId(""String_Node_Str"",stopId));
}","public Builder(Context context,String stopId){
  super(context,getPathWithId(""String_Node_Str"",stopId));
  mPostData.appendQueryParameter(""String_Node_Str"",stopId);
}"
43864,"/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mBuilder.appendQueryParameter(""String_Node_Str"",code);
  return this;
}","/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mPostData.appendQueryParameter(""String_Node_Str"",code);
  String data=String.format(""String_Node_Str"",code);
  mPostData.appendQueryParameter(""String_Node_Str"",data);
  return this;
}"
43865,"/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}","/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}"
43866,"/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}","/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}"
43867,"protected ObaReportProblemWithStopRequest(Uri uri){
  super(uri);
}","protected ObaReportProblemWithStopRequest(Uri uri,String postData){
  super(uri,postData);
}"
43868,"/** 
 * Sets the optional service date of the trip.
 * @param serviceDate The service date.
 */
public Builder setServiceDate(long serviceDate){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(serviceDate));
  return this;
}","/** 
 * Sets the optional service date of the trip.
 * @param serviceDate The service date.
 */
public Builder setServiceDate(long serviceDate){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(serviceDate));
  return this;
}"
43869,"public Builder(Context context,String tripId){
  super(context,getPathWithId(""String_Node_Str"",tripId));
}","public Builder(Context context,String tripId){
  super(context,getPathWithId(""String_Node_Str"",tripId));
  mPostData.appendQueryParameter(""String_Node_Str"",tripId);
}"
43870,"/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mBuilder.appendQueryParameter(""String_Node_Str"",code);
  return this;
}","/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mPostData.appendQueryParameter(""String_Node_Str"",code);
  String data=String.format(""String_Node_Str"",code);
  mPostData.appendQueryParameter(""String_Node_Str"",data);
  return this;
}"
43871,"/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}","/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}"
43872,"/** 
 * Sets true/false to indicate if the user is on the transit vehicle experiencing the problem.
 * @param onVehicle If the user is on the vehicle.
 */
public Builder setUserOnVehicle(boolean onVehicle){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(onVehicle));
  return this;
}","/** 
 * Sets true/false to indicate if the user is on the transit vehicle experiencing the problem.
 * @param onVehicle If the user is on the vehicle.
 */
public Builder setUserOnVehicle(boolean onVehicle){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(onVehicle));
  return this;
}"
43873,"/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mBuilder.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}","/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mPostData.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}"
43874,"/** 
 * Sets the optional vehicle actively serving the trip.
 * @param vehicleId The vehicle actively serving the trip.
 */
public Builder setVehicleId(String vehicleId){
  mBuilder.appendQueryParameter(""String_Node_Str"",vehicleId);
  return this;
}","/** 
 * Sets the optional vehicle actively serving the trip.
 * @param vehicleId The vehicle actively serving the trip.
 */
public Builder setVehicleId(String vehicleId){
  mPostData.appendQueryParameter(""String_Node_Str"",vehicleId);
  return this;
}"
43875,"/** 
 * Set the vehicle number, as reported by the user.
 * @param vehicleNumber The vehicle as reported by the user.
 */
public Builder setUserVehicleNumber(String vehicleNumber){
  mBuilder.appendQueryParameter(""String_Node_Str"",vehicleNumber);
  return this;
}","/** 
 * Set the vehicle number, as reported by the user.
 * @param vehicleNumber The vehicle as reported by the user.
 */
public Builder setUserVehicleNumber(String vehicleNumber){
  mPostData.appendQueryParameter(""String_Node_Str"",vehicleNumber);
  return this;
}"
43876,"/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}","/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}"
43877,"/** 
 * Sets the optional stop ID indicating the stop where the user is experiencing the problem.
 * @param stopId The stop ID.
 */
public Builder setStopId(String stopId){
  mBuilder.appendQueryParameter(""String_Node_Str"",stopId);
  return this;
}","/** 
 * Sets the optional stop ID indicating the stop where the user is experiencing the problem.
 * @param stopId The stop ID.
 */
public Builder setStopId(String stopId){
  mPostData.appendQueryParameter(""String_Node_Str"",stopId);
  return this;
}"
43878,"@Override public void onLoadFinished(Loader<ObaStopsForLocationResponse> loader,ObaStopsForLocationResponse response){
  Log.d(TAG,""String_Node_Str"");
  mFragment.showProgress(false);
  if (response.getCode() != ObaApi.OBA_OK) {
    Activity act=mFragment.getActivity();
    Toast.makeText(act,act.getString(R.string.main_stop_errors),Toast.LENGTH_LONG);
    return;
  }
  if (response.getOutOfRange()) {
    mFragment.notifyOutOfRange();
    return;
  }
  List<ObaStop> stops=Arrays.asList(response.getStops());
  mFragment.showStops(stops,response);
}","@Override public void onLoadFinished(Loader<ObaStopsForLocationResponse> loader,ObaStopsForLocationResponse response){
  Log.d(TAG,""String_Node_Str"");
  mFragment.showProgress(false);
  if (response.getCode() != ObaApi.OBA_OK) {
    Activity act=mFragment.getActivity();
    Toast.makeText(act,act.getString(R.string.main_stop_errors),Toast.LENGTH_LONG).show();
    return;
  }
  if (response.getOutOfRange()) {
    mFragment.notifyOutOfRange();
    return;
  }
  List<ObaStop> stops=Arrays.asList(response.getStops());
  mFragment.showStops(stops,response);
}"
43879,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.main);
  mMapView=(MapView)findViewById(R.id.mapview);
  mPopup=findViewById(R.id.map_popup);
  mPopup.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  mMapView.setBuiltInZoomControls(false);
  mZoomControls=(ZoomControls)findViewById(R.id.zoom_controls);
  mZoomControls.setOnZoomInClickListener(mOnZoomIn);
  mZoomControls.setOnZoomOutClickListener(mOnZoomOut);
  mStopsController=new StopsController(this,this);
  mRouteOverlay=new RouteOverlay(this,mMapView);
  UIHelp.setChildClickable(this,R.id.show_arrival_info,mOnShowArrivals);
  UIHelp.setChildClickable(this,R.id.show_routes,mOnShowRoutes);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    mFocusStopId=bundle.getString(FOCUS_STOP_ID);
    mapValuesFromBundle(bundle);
    mRouteOverlay.setRouteId(bundle.getString(ROUTE_ID),true);
  }
  if (savedInstanceState != null) {
    mFocusStopId=savedInstanceState.getString(FOCUS_STOP_ID);
    mShowRoutes=savedInstanceState.getBoolean(SHOW_ROUTES);
    mapValuesFromBundle(savedInstanceState);
    mRouteOverlay.setRouteId(savedInstanceState.getString(ROUTE_ID),false);
  }
  mStopsController.setNonConfigurationInstance(getLastNonConfigurationInstance());
  autoShowWhatsNew();
  UIHelp.checkAirplaneMode(this);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  boolean firstRun=firstRunCheck();
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.main);
  mMapView=(MapView)findViewById(R.id.mapview);
  mPopup=findViewById(R.id.map_popup);
  mPopup.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  mMapView.setBuiltInZoomControls(false);
  mZoomControls=(ZoomControls)findViewById(R.id.zoom_controls);
  mZoomControls.setOnZoomInClickListener(mOnZoomIn);
  mZoomControls.setOnZoomOutClickListener(mOnZoomOut);
  mStopsController=new StopsController(this,this);
  mRouteOverlay=new RouteOverlay(this,mMapView);
  UIHelp.setChildClickable(this,R.id.show_arrival_info,mOnShowArrivals);
  UIHelp.setChildClickable(this,R.id.show_routes,mOnShowRoutes);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    mFocusStopId=bundle.getString(FOCUS_STOP_ID);
    mapValuesFromBundle(bundle);
    mRouteOverlay.setRouteId(bundle.getString(ROUTE_ID),true);
  }
  if (savedInstanceState != null) {
    mFocusStopId=savedInstanceState.getString(FOCUS_STOP_ID);
    mShowRoutes=savedInstanceState.getBoolean(SHOW_ROUTES);
    mapValuesFromBundle(savedInstanceState);
    mRouteOverlay.setRouteId(savedInstanceState.getString(ROUTE_ID),false);
  }
  mStopsController.setNonConfigurationInstance(getLastNonConfigurationInstance());
  autoShowWhatsNew();
  UIHelp.checkAirplaneMode(this);
  if (firstRun) {
    firstRunSetLocation(mMapView.getController());
  }
}"
43880,"@Override protected void initList(Cursor c){
  startManagingCursor(c);
  final String[] from={ObaContract.Routes.SHORTNAME,ObaContract.Routes.LONGNAME};
  final int[] to={R.id.short_name,R.id.long_name};
  SimpleCursorAdapter simpleAdapter=new SimpleCursorAdapter(this,R.layout.route_list_item,c,from,to);
  simpleAdapter.setViewBinder(mViewBinder);
  setListAdapter(simpleAdapter);
}","@Override protected void initList(Cursor c){
  startManagingCursor(c);
  final String[] from={ObaContract.Routes.SHORTNAME,ObaContract.Routes.LONGNAME};
  final int[] to={R.id.short_name,R.id.long_name};
  SimpleCursorAdapter simpleAdapter=new SimpleCursorAdapter(this,R.layout.route_list_item,c,from,to);
  setListAdapter(simpleAdapter);
}"
43881,"@Override protected void setData(View view,int position){
  TextView text1=(TextView)view.findViewById(R.id.short_name);
  TextView text2=(TextView)view.findViewById(R.id.long_name);
  ObaRoute route=mArray.get(position);
  final String shortName=route.getShortName();
  final String longName=route.getLongName();
  if (!TextUtils.isEmpty(shortName)) {
    text1.setText(shortName);
    text2.setText(longName);
  }
 else {
    text1.setText(longName);
    text2.setText(""String_Node_Str"");
  }
}","@Override protected void setData(View view,int position){
  TextView shortNameText=(TextView)view.findViewById(R.id.short_name);
  TextView longNameText=(TextView)view.findViewById(R.id.long_name);
  ObaRoute route=mArray.get(position);
  String shortName=route.getShortName();
  String longName=route.getLongName();
  if (TextUtils.isEmpty(shortName)) {
    shortName=longName;
  }
  if (TextUtils.isEmpty(longName) || shortName.equals(longName)) {
    longName=route.getDescription();
  }
  shortNameText.setText(shortName);
  longNameText.setText(longName);
}"
43882,"private void setHeader(ObaRouteResponse routeInfo,boolean addToDb){
  mRouteInfo=routeInfo;
  if (routeInfo.getCode() == ObaApi.OBA_OK) {
    TextView text1=(TextView)findViewById(R.id.short_name);
    TextView text2=(TextView)findViewById(R.id.long_name);
    TextView agencyText=(TextView)findViewById(R.id.agency);
    String url=mRouteInfo.getUrl();
    final String shortName=routeInfo.getShortName();
    final String longName=routeInfo.getLongName();
    if (!TextUtils.isEmpty(shortName)) {
      text1.setText(shortName);
      text2.setText(longName);
    }
 else {
      text1.setText(longName);
      text2.setText(""String_Node_Str"");
    }
    agencyText.setText(mRouteInfo.getAgency().getName());
    if (addToDb) {
      ContentValues values=new ContentValues();
      values.put(ObaContract.Routes.SHORTNAME,shortName);
      values.put(ObaContract.Routes.LONGNAME,longName);
      values.put(ObaContract.Routes.URL,url);
      ObaContract.Routes.insertOrUpdate(this,mRouteInfo.getId(),values,true);
    }
  }
 else {
    mEmptyText.setText(UIHelp.getRouteErrorString(routeInfo.getCode()));
  }
  mRouteInfoTask=null;
}","private void setHeader(ObaRouteResponse routeInfo,boolean addToDb){
  mRouteInfo=routeInfo;
  if (routeInfo.getCode() == ObaApi.OBA_OK) {
    TextView shortNameText=(TextView)findViewById(R.id.short_name);
    TextView longNameText=(TextView)findViewById(R.id.long_name);
    TextView agencyText=(TextView)findViewById(R.id.agency);
    String url=mRouteInfo.getUrl();
    String shortName=routeInfo.getShortName();
    String longName=routeInfo.getLongName();
    if (TextUtils.isEmpty(shortName)) {
      shortName=longName;
    }
    if (TextUtils.isEmpty(longName) || shortName.equals(longName)) {
      longName=routeInfo.getDescription();
    }
    shortNameText.setText(shortName);
    longNameText.setText(longName);
    agencyText.setText(mRouteInfo.getAgency().getName());
    if (addToDb) {
      ContentValues values=new ContentValues();
      values.put(ObaContract.Routes.SHORTNAME,shortName);
      values.put(ObaContract.Routes.LONGNAME,longName);
      values.put(ObaContract.Routes.URL,url);
      ObaContract.Routes.insertOrUpdate(this,mRouteInfo.getId(),values,true);
    }
  }
 else {
    mEmptyText.setText(UIHelp.getRouteErrorString(routeInfo.getCode()));
  }
  mRouteInfoTask=null;
}"
43883,"private void initMaps(Context cxt,ObaStopsForRouteResponse response){
  if (response.getCode() == ObaApi.OBA_OK) {
    final List<ObaStop> stops=response.getStops();
    final Map<String,ObaStop> stopMap=getStopMap(stops);
    final ObaStopGrouping[] groupings=response.getStopGroupings();
    final int groupingsLen=groupings.length;
    for (int groupingIndex=0; groupingIndex < groupingsLen; ++groupingIndex) {
      final ObaStopGrouping grouping=groupings[groupingIndex];
      final ObaStopGroup[] groups=grouping.getStopGroups();
      final int groupsLen=groups.length;
      for (int i=0; i < groupsLen; ++i) {
        final HashMap<String,String> groupMap=new HashMap<String,String>(1);
        final ObaStopGroup group=groups[i];
        groupMap.put(""String_Node_Str"",group.getName());
        final String[] stopIds=group.getStopIds();
        final int stopIdLen=stopIds.length;
        final ArrayList<HashMap<String,String>> childList=new ArrayList<HashMap<String,String>>(stopIdLen);
        for (int j=0; j < stopIdLen; ++j) {
          final String stopId=stopIds[j];
          final ObaStop stop=stopMap.get(stopId);
          HashMap<String,String> groupStopMap=new HashMap<String,String>(2);
          if (stop != null) {
            groupStopMap.put(""String_Node_Str"",stop.getName());
            String dir=cxt.getString(UIHelp.getStopDirectionText(stop.getDirection()));
            groupStopMap.put(""String_Node_Str"",dir);
            groupStopMap.put(""String_Node_Str"",stopId);
            mStopMap.put(stopId,stop);
          }
 else {
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",stopId);
          }
          childList.add(groupStopMap);
        }
        mStopGroups.add(groupMap);
        mStops.add(childList);
      }
    }
  }
}","private void initMaps(Context cxt,ObaStopsForRouteResponse response){
  if (response.getCode() == ObaApi.OBA_OK) {
    final List<ObaStop> stops=response.getStops();
    final Map<String,ObaStop> stopMap=getStopMap(stops);
    final ObaStopGrouping[] groupings=response.getStopGroupings();
    final int groupingsLen=groupings.length;
    for (int groupingIndex=0; groupingIndex < groupingsLen; ++groupingIndex) {
      final ObaStopGrouping grouping=groupings[groupingIndex];
      final ObaStopGroup[] groups=grouping.getStopGroups();
      final int groupsLen=groups.length;
      for (int i=0; i < groupsLen; ++i) {
        final HashMap<String,String> groupMap=new HashMap<String,String>(1);
        final ObaStopGroup group=groups[i];
        groupMap.put(""String_Node_Str"",MyTextUtils.toTitleCase(group.getName()));
        final String[] stopIds=group.getStopIds();
        final int stopIdLen=stopIds.length;
        final ArrayList<HashMap<String,String>> childList=new ArrayList<HashMap<String,String>>(stopIdLen);
        for (int j=0; j < stopIdLen; ++j) {
          final String stopId=stopIds[j];
          final ObaStop stop=stopMap.get(stopId);
          HashMap<String,String> groupStopMap=new HashMap<String,String>(2);
          if (stop != null) {
            groupStopMap.put(""String_Node_Str"",MyTextUtils.toTitleCase(stop.getName()));
            String dir=cxt.getString(UIHelp.getStopDirectionText(stop.getDirection()));
            groupStopMap.put(""String_Node_Str"",dir);
            groupStopMap.put(""String_Node_Str"",stopId);
            mStopMap.put(stopId,stop);
          }
 else {
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",stopId);
          }
          childList.add(groupStopMap);
        }
        mStopGroups.add(groupMap);
        mStops.add(childList);
      }
    }
  }
}"
43884,"private void setData(ViewGroup view,int position){
  TextView route=(TextView)view.findViewById(R.id.route);
  TextView destination=(TextView)view.findViewById(R.id.destination);
  TextView time=(TextView)view.findViewById(R.id.time);
  TextView status=(TextView)view.findViewById(R.id.status);
  TextView etaView=(TextView)view.findViewById(R.id.eta);
  final StopInfo stopInfo=mInfo.get(position);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  route.setText(arrivalInfo.getShortName());
  destination.setText(arrivalInfo.getHeadsign());
  status.setText(stopInfo.getStatusText());
  long eta=stopInfo.getEta();
  if (eta == 0) {
    etaView.setText(R.string.stop_info_eta_now);
  }
 else {
    etaView.setText(String.valueOf(eta));
  }
  int color=getResources().getColor(stopInfo.getColor());
  etaView.setTextColor(color);
  time.setText(DateUtils.formatDateTime(StopInfoActivity.this,stopInfo.getDisplayTime(),DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
  ContentValues values=mTripsForStop.getValues(arrivalInfo.getTripId());
  if (values != null) {
    String tripName=values.getAsString(ObaContract.Trips.NAME);
    TextView tripInfo=(TextView)view.findViewById(R.id.trip_info);
    if (tripName.length() == 0) {
      tripName=getString(R.string.trip_info_noname);
    }
    tripInfo.setText(tripName);
    tripInfo.setVisibility(View.VISIBLE);
  }
 else {
    View tripInfo=view.findViewById(R.id.trip_info);
    tripInfo.setVisibility(View.GONE);
  }
}","private void setData(ViewGroup view,int position){
  TextView route=(TextView)view.findViewById(R.id.route);
  TextView destination=(TextView)view.findViewById(R.id.destination);
  TextView time=(TextView)view.findViewById(R.id.time);
  TextView status=(TextView)view.findViewById(R.id.status);
  TextView etaView=(TextView)view.findViewById(R.id.eta);
  final StopInfo stopInfo=mInfo.get(position);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  route.setText(arrivalInfo.getShortName());
  destination.setText(MyTextUtils.toTitleCase(arrivalInfo.getHeadsign()));
  status.setText(stopInfo.getStatusText());
  long eta=stopInfo.getEta();
  if (eta == 0) {
    etaView.setText(R.string.stop_info_eta_now);
  }
 else {
    etaView.setText(String.valueOf(eta));
  }
  int color=getResources().getColor(stopInfo.getColor());
  etaView.setTextColor(color);
  time.setText(DateUtils.formatDateTime(StopInfoActivity.this,stopInfo.getDisplayTime(),DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
  ContentValues values=mTripsForStop.getValues(arrivalInfo.getTripId());
  if (values != null) {
    String tripName=values.getAsString(ObaContract.Trips.NAME);
    TextView tripInfo=(TextView)view.findViewById(R.id.trip_info);
    if (tripName.length() == 0) {
      tripName=getString(R.string.trip_info_noname);
    }
    tripInfo.setText(tripName);
    tripInfo.setVisibility(View.VISIBLE);
  }
 else {
    View tripInfo=view.findViewById(R.id.trip_info);
    tripInfo.setVisibility(View.GONE);
  }
}"
43885,"/** 
 * This should be used with compound drawables
 */
public void setView2(TextView nameView,String stopId,String stopName){
  ContentValues values=mMap.getValues(stopId);
  int icon=0;
  if (values != null) {
    Integer i=values.getAsInteger(ObaContract.Stops.FAVORITE);
    final boolean favorite=(i != null) && (i == 1);
    final String userName=values.getAsString(ObaContract.Stops.USER_NAME);
    nameView.setText(TextUtils.isEmpty(userName) ? stopName : userName);
    icon=favorite ? R.drawable.star_on : 0;
  }
 else {
    nameView.setText(stopName);
  }
  nameView.setCompoundDrawablesWithIntrinsicBounds(icon,0,0,0);
}","/** 
 * This should be used with compound drawables
 */
public void setView2(TextView nameView,String stopId,String stopName){
  ContentValues values=mMap.getValues(stopId);
  int icon=0;
  if (values != null) {
    Integer i=values.getAsInteger(ObaContract.Stops.FAVORITE);
    final boolean favorite=(i != null) && (i == 1);
    final String userName=values.getAsString(ObaContract.Stops.USER_NAME);
    nameView.setText(TextUtils.isEmpty(userName) ? MyTextUtils.toTitleCase(stopName) : userName);
    icon=favorite ? R.drawable.star_on : 0;
  }
 else {
    nameView.setText(MyTextUtils.toTitleCase(stopName));
  }
  nameView.setCompoundDrawablesWithIntrinsicBounds(icon,0,0,0);
}"
43886,"private String getAppUid(){
  final TelephonyManager telephony=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
  final String id=telephony.getDeviceId();
  try {
    MessageDigest digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.update(id.getBytes());
    return getHex(digest.digest());
  }
 catch (  NoSuchAlgorithmException e) {
    return UUID.randomUUID().toString();
  }
}","private String getAppUid(){
  try {
    final TelephonyManager telephony=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
    final String id=telephony.getDeviceId();
    MessageDigest digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.update(id.getBytes());
    return getHex(digest.digest());
  }
 catch (  Exception e) {
    return UUID.randomUUID().toString();
  }
}"
43887,"private void startTask(){
  Log.d(TAG,""String_Node_Str"" + mCurrentRequest);
  mTask=new AsyncTask(mCurrentRequest);
  mTask.execute();
}","private void startTask(){
  Log.d(TAG,""String_Node_Str"" + mCurrentRequest);
  if (mCurrentRequest != null) {
    mTask=new MyTask();
    mTask.execute(mCurrentRequest);
  }
}"
43888,"@Override protected ObaResponse doInBackground(String... params){
  if (mInfo.getRouteId() != null) {
    return ObaApi.getStopsForRoute(mActivity,mInfo.getRouteId(),false);
  }
 else {
    return ObaApi.getStopsByLocation(mActivity,mInfo.getCenter(),0,mInfo.getLatSpan(),mInfo.getLonSpan(),null,0);
  }
}","@Override protected ResponseInfo doInBackground(RequestInfo... params){
  final RequestInfo info=params[0];
  ObaResponse response=null;
  if (info.getRouteId() != null) {
    response=ObaApi.getStopsForRoute(mActivity,info.getRouteId(),false);
  }
 else {
    response=ObaApi.getStopsByLocation(mActivity,info.getCenter(),0,info.getLatSpan(),info.getLonSpan(),null,0);
  }
  return new ResponseInfo(info,response);
}"
43889,"void setRefreshError(){
  TextView errorText=(TextView)mResponseError.findViewById(R.id.response_error_text);
  CharSequence relativeTime=DateUtils.getRelativeTimeSpanString(mResponseTime,System.currentTimeMillis(),DateUtils.MINUTE_IN_MILLIS,0);
  errorText.setText(getString(R.string.stop_info_old_data,relativeTime));
  mResponseError.setVisibility(View.VISIBLE);
  mEmptyText.setText(R.string.stop_info_nodata);
  ((BaseAdapter)getListAdapter()).notifyDataSetChanged();
  mLoadingProgress.hideLoading();
  setProgressBarIndeterminateVisibility(false);
}","void setRefreshError(){
  final long now=System.currentTimeMillis();
  if ((now - mResponseTime) >= 2 * DateUtils.MINUTE_IN_MILLIS) {
    TextView errorText=(TextView)mResponseError.findViewById(R.id.response_error_text);
    CharSequence relativeTime=DateUtils.getRelativeTimeSpanString(mResponseTime,now,DateUtils.MINUTE_IN_MILLIS,0);
    errorText.setText(getString(R.string.stop_info_old_data,relativeTime));
    mResponseError.setVisibility(View.VISIBLE);
    mEmptyText.setText(R.string.stop_info_nodata);
  }
 else {
    mResponseError.setVisibility(View.GONE);
  }
  StopInfoListAdapter adapter=(StopInfoListAdapter)getListView().getAdapter();
  adapter.setData(mResponse.getData().getArrivalsAndDepartures());
  mLoadingProgress.hideLoading();
  setProgressBarIndeterminateVisibility(false);
}"
43890,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route_info);
  registerForContextMenu(getExpandableListView());
  Bundle bundle=getIntent().getExtras();
  mRouteId=bundle.getString(ROUTE_ID);
  setListAdapter(new SimpleExpandableListAdapter(this,new ArrayList<HashMap<String,String>>(),android.R.layout.simple_expandable_list_item_1,new String[]{""String_Node_Str""},new int[]{android.R.id.text1},new ArrayList<ArrayList<HashMap<String,String>>>(),0,null,new int[]{}));
  Object config=getLastNonConfigurationInstance();
  if (config != null) {
    Object[] results=(Object[])config;
    setHeader((ObaResponse)results[0],false);
    setStopsForRoute((StopsForRouteInfo)results[1]);
  }
 else {
    mRouteInfoTask=new GetRouteInfo().execute(mRouteId);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route_info);
  registerForContextMenu(getExpandableListView());
  final Intent intent=getIntent();
  final Bundle bundle=intent.getExtras();
  final Uri data=intent.getData();
  if (data != null) {
    mRouteId=data.getLastPathSegment();
  }
 else   if (bundle != null) {
    mRouteId=bundle.getString(ROUTE_ID);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setListAdapter(new SimpleExpandableListAdapter(this,new ArrayList<HashMap<String,String>>(),android.R.layout.simple_expandable_list_item_1,new String[]{""String_Node_Str""},new int[]{android.R.id.text1},new ArrayList<ArrayList<HashMap<String,String>>>(),0,null,new int[]{}));
  Object config=getLastNonConfigurationInstance();
  if (config != null) {
    Object[] results=(Object[])config;
    setHeader((ObaResponse)results[0],false);
    setStopsForRoute((StopsForRouteInfo)results[1]);
  }
 else {
    mRouteInfoTask=new GetRouteInfo().execute(mRouteId);
  }
}"
43891,"public static Intent makeIntent(Context context,String routeId){
  Intent myIntent=new Intent(context,RouteInfoActivity.class);
  myIntent.putExtra(ROUTE_ID,routeId);
  return myIntent;
}","public static Intent makeIntent(Context context,String routeId){
  Intent myIntent=new Intent(context,RouteInfoActivity.class);
  myIntent.setData(Uri.withAppendedPath(ObaContract.Routes.CONTENT_URI,routeId));
  return myIntent;
}"
43892,"public static Intent makeIntent(Context context,ObaStop stop){
  Intent myIntent=new Intent(context,StopInfoActivity.class);
  myIntent.putExtra(STOP_ID,stop.getId());
  myIntent.putExtra(STOP_NAME,stop.getName());
  myIntent.putExtra(STOP_DIRECTION,stop.getDirection());
  return myIntent;
}","public static Intent makeIntent(Context context,ObaStop stop){
  Intent myIntent=new Intent(context,StopInfoActivity.class);
  myIntent.setData(Uri.withAppendedPath(ObaContract.Stops.CONTENT_URI,stop.getId()));
  myIntent.putExtra(STOP_NAME,stop.getName());
  myIntent.putExtra(STOP_DIRECTION,stop.getDirection());
  return myIntent;
}"
43893,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.stop_info);
  setListAdapter(new StopInfoListAdapter());
  Bundle bundle=getIntent().getExtras();
  mStopId=bundle.getString(STOP_ID);
  setHeader(bundle);
  UIHelp.setChildClickable(this,R.id.show_all,mShowAllClick);
  mRoutesFilter=ObaContract.StopRouteFilters.get(this,mStopId);
  mTripsForStop=getTripsForStop();
  Object response=getLastNonConfigurationInstance();
  if (response != null) {
    setResponse((ObaResponse)response,false);
  }
 else {
    getStopInfo(false);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.stop_info);
  setListAdapter(new StopInfoListAdapter());
  final Intent intent=getIntent();
  final Bundle bundle=intent.getExtras();
  final Uri data=intent.getData();
  if (data != null) {
    mStopId=data.getLastPathSegment();
  }
 else   if (bundle != null) {
    mStopId=bundle.getString(STOP_ID);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setHeader(bundle);
  UIHelp.setChildClickable(this,R.id.show_all,mShowAllClick);
  mRoutesFilter=ObaContract.StopRouteFilters.get(this,mStopId);
  mTripsForStop=getTripsForStop();
  Object response=getLastNonConfigurationInstance();
  if (response != null) {
    setResponse((ObaResponse)response,false);
  }
 else {
    getStopInfo(false);
  }
}"
43894,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.trip_info);
  final Bundle bundle=getIntent().getExtras();
  if (bundle == null) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  if (!initFromBundle(bundle)) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  boolean newTrip=!initFromDB();
  initForm(newTrip);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.trip_info);
  if (!initFromIntent(getIntent())) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  boolean newTrip=!initFromDB();
  initForm(newTrip);
}"
43895,"public static void start(Context context,String tripId,String stopId,String routeId,String routeName,String stopName,long departureTime,String headsign){
  Intent myIntent=new Intent(context,TripInfoActivity.class);
  myIntent.putExtra(TRIP_ID,tripId);
  myIntent.putExtra(STOP_ID,stopId);
  myIntent.putExtra(ROUTE_ID,routeId);
  myIntent.putExtra(ROUTE_NAME,routeName);
  myIntent.putExtra(STOP_NAME,stopName);
  myIntent.putExtra(DEPARTURE_TIME,departureTime);
  myIntent.putExtra(HEADSIGN,headsign);
  context.startActivity(myIntent);
}","public static void start(Context context,String tripId,String stopId,String routeId,String routeName,String stopName,long departureTime,String headsign){
  Intent myIntent=new Intent(context,TripInfoActivity.class);
  myIntent.setData(ObaContract.Trips.buildUri(tripId,stopId));
  myIntent.putExtra(ROUTE_ID,routeId);
  myIntent.putExtra(ROUTE_NAME,routeName);
  myIntent.putExtra(STOP_NAME,stopName);
  myIntent.putExtra(DEPARTURE_TIME,departureTime);
  myIntent.putExtra(HEADSIGN,headsign);
  context.startActivity(myIntent);
}"
43896,"final void scheduleNext(TripsDbAdapter adapter,Cursor c){
  final int days=c.getInt(TripsDbAdapter.TRIP_COL_DAYS);
  if (days == 0) {
    adapter.deleteTrip(mTripId,mStopId);
  }
 else {
    final Intent tripService=new Intent(TripService.this,TripService.class);
    tripService.setAction(TripService.ACTION_SCHEDULE_TRIP);
    tripService.setData(buildTripUri(mTripId,mStopId));
    TripService.this.startService(tripService);
  }
}","final void scheduleNext(TripsDbAdapter adapter,Cursor c){
  final int days=c.getInt(TripsDbAdapter.TRIP_COL_DAYS);
  if (days == 0) {
    adapter.deleteTrip(mTripId,mStopId);
  }
 else {
    TripService ctx=TripService.this;
    Intent myIntent=new Intent(ACTION_POLL_TRIP,buildTripUri(mTripId,mStopId),ctx,AlarmReceiver.class);
    PendingIntent alarmIntent=PendingIntent.getBroadcast(ctx,0,myIntent,PendingIntent.FLAG_ONE_SHOT);
    AlarmManager alarm=(AlarmManager)ctx.getSystemService(Context.ALARM_SERVICE);
    long triggerTime=System.currentTimeMillis() + 60 * ONE_MINUTE;
    alarm.set(AlarmManager.RTC_WAKEUP,triggerTime,alarmIntent);
  }
}"
43897,"synchronized void clearNotification(){
  Log.d(TAG,""String_Node_Str"" + getTaskId());
  mState=CLEARED;
}","synchronized void clearNotification(){
  Log.d(TAG,""String_Node_Str"" + getTaskId());
  mNotification=null;
  mState=DONE;
}"
43898,"final boolean doPoll(Cursor c){
  final String tripId=mTripId;
  final String stopId=mStopId;
  final long reminderMS=(1 + c.getInt(TripsDbAdapter.TRIP_COL_REMINDER)) * ONE_MINUTE;
  final long departMS=c.getInt(TripsDbAdapter.TRIP_COL_DEPARTURE) * ONE_MINUTE;
  mState=NOT_FOUND;
  while (mState != CLEARED) {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    ObaResponse response=ObaApi.getArrivalsDeparturesForStop(stopId);
    final long now=System.currentTimeMillis();
    if (response.getCode() == ObaApi.OBA_OK) {
      final ObaArray arrivals=response.getData().getArrivalsAndDepartures();
      final int length=arrivals.length();
      for (int i=0; i < length; ++i) {
        ObaArrivalInfo info=arrivals.getArrivalInfo(i);
        if (tripId.equals(info.getTripId())) {
synchronized (this) {
            if (mState == NOT_FOUND) {
              Log.d(TAG,""String_Node_Str"" + getTaskId());
              mState=FOUND;
            }
            long time=info.getPredictedArrivalTime();
            if (time == 0) {
              time=info.getScheduledArrivalTime();
            }
            if (mState == FOUND) {
              if ((time - reminderMS) < now) {
                doNotification(time - now,c);
                mState=NOTIFIED;
              }
 else               if (time < now) {
                mState=CLEARED;
                break;
              }
            }
 else             if (mState == NOTIFIED) {
              final long timeDiff=time - now;
              if (timeDiff <= 0) {
                cancelNotification();
                mState=CLEARED;
                break;
              }
 else {
                doNotification(timeDiff,c);
              }
            }
          }
        }
      }
    }
    if (mState == NOT_FOUND && ((departMS + LOOKAHEAD_DURATION_MS) > now)) {
      Log.d(TAG,""String_Node_Str"" + getTaskId());
      break;
    }
    try {
      Thread.sleep(30 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
  return mState == CLEARED;
}","final void doPoll(Cursor c){
  final String stopId=mStopId;
  final long reminderMS=(1 + c.getInt(TripsDbAdapter.TRIP_COL_REMINDER)) * ONE_MINUTE;
  final long departMS=c.getInt(TripsDbAdapter.TRIP_COL_DEPARTURE) * ONE_MINUTE;
  mState=NOT_FOUND;
  while (mState != DONE) {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    ObaResponse response=ObaApi.getArrivalsDeparturesForStop(stopId);
synchronized (this) {
      if (mState == DONE) {
        break;
      }
      final long now=System.currentTimeMillis();
      if (response.getCode() == ObaApi.OBA_OK) {
        if (checkArrivals(response,c,reminderMS,now)) {
          break;
        }
      }
      if (mState == NOT_FOUND && ((departMS + LOOKAHEAD_DURATION_MS) > now)) {
        Log.d(TAG,""String_Node_Str"" + getTaskId());
        mState=DONE;
        break;
      }
    }
    try {
      Thread.sleep(30 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}"
43899,"final void doNotification(long timeDiff,Cursor c){
  final Context ctx=TripService.this;
  Log.d(TAG,""String_Node_Str"" + getTaskId());
  if (mNotification == null) {
    mNotification=new Notification(R.drawable.stat_trip,null,System.currentTimeMillis());
    mNotification.defaults|=Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE;
    Intent deleteIntent=new Intent(ctx,TripService.class);
    deleteIntent.setAction(ACTION_CANCEL_POLL);
    deleteIntent.setData(buildTripUri(mTripId,mStopId));
    mNotification.deleteIntent=PendingIntent.getService(ctx,0,deleteIntent,PendingIntent.FLAG_ONE_SHOT);
    Intent stopActivity=new Intent(ctx,StopInfoActivity.class);
    stopActivity.putExtra(StopInfoActivity.STOP_ID,mStopId);
    mNotificationIntent=PendingIntent.getActivity(ctx,0,stopActivity,PendingIntent.FLAG_ONE_SHOT);
  }
 else {
    mNotification.defaults=0;
  }
  final String title=getResources().getString(R.string.app_name);
  mNotification.setLatestEventInfo(ctx,title,getNotifyText(c,timeDiff),mNotificationIntent);
  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  nm.notify(NOTIFY_ID,mNotification);
}","final void doNotification(long timeDiff,Cursor c){
  final Context ctx=TripService.this;
  if (mNotification == null) {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    mNotification=new Notification(R.drawable.stat_trip,null,System.currentTimeMillis());
    mNotification.defaults|=Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE;
    Intent deleteIntent=new Intent(ctx,TripService.class);
    deleteIntent.setAction(ACTION_CANCEL_POLL);
    deleteIntent.setData(buildTripUri(mTripId,mStopId));
    mNotification.deleteIntent=PendingIntent.getService(ctx,0,deleteIntent,PendingIntent.FLAG_ONE_SHOT);
    Intent stopActivity=new Intent(ctx,StopInfoActivity.class);
    stopActivity.putExtra(StopInfoActivity.STOP_ID,mStopId);
    mNotificationIntent=PendingIntent.getActivity(ctx,0,stopActivity,PendingIntent.FLAG_ONE_SHOT);
  }
 else {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    mNotification.defaults=0;
  }
  final String title=getResources().getString(R.string.app_name);
  mNotification.setLatestEventInfo(ctx,title,getNotifyText(c,timeDiff),mNotificationIntent);
  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  nm.notify(NOTIFY_ID,mNotification);
}"
43900,"final String getNotifyText(Cursor c,long timeDiff){
  final String routeName=RoutesDbAdapter.getRouteShortName(this,c.getString(TripsDbAdapter.TRIP_COL_ROUTEID));
  final Resources res=getResources();
  if (timeDiff < ONE_MINUTE) {
    final String fmt=res.getString(R.string.trip_stat_lessthanone);
    return String.format(fmt,routeName);
  }
 else   if (timeDiff < ONE_MINUTE * 2) {
    final String fmt=res.getString(R.string.trip_stat_one);
    return String.format(fmt,routeName);
  }
 else {
    final String fmt=res.getString(R.string.trip_stat);
    return String.format(fmt,routeName,(int)(timeDiff / ONE_MINUTE));
  }
}","final String getNotifyText(Cursor c,long timeDiff){
  final String routeName=RoutesDbAdapter.getRouteShortName(this,c.getString(TripsDbAdapter.TRIP_COL_ROUTEID));
  final Resources res=getResources();
  if (timeDiff <= 0) {
    final String fmt=res.getString(R.string.trip_stat_gone);
    return String.format(fmt,routeName);
  }
 else   if (timeDiff < ONE_MINUTE) {
    final String fmt=res.getString(R.string.trip_stat_lessthanone);
    return String.format(fmt,routeName);
  }
 else   if (timeDiff < ONE_MINUTE * 2) {
    final String fmt=res.getString(R.string.trip_stat_one);
    return String.format(fmt,routeName);
  }
 else {
    final String fmt=res.getString(R.string.trip_stat);
    return String.format(fmt,routeName,(int)(timeDiff / ONE_MINUTE));
  }
}"
43901,"@Override public void onPause(){
  mTimer.cancel();
  super.onPause();
}","@Override public void onPause(){
  mTimer.cancel();
  mTimer=null;
  super.onPause();
}"
43902,"@Override public void onResume(){
  mTimer.schedule(new TimerTask(){
    @Override public void run(){
      mRefreshHandler.post(mRefresh);
    }
  }
,RefreshPeriod,RefreshPeriod);
  super.onResume();
}","@Override public void onResume(){
  if (mTimer == null) {
    mTimer=new Timer();
  }
  mTimer.schedule(new TimerTask(){
    @Override public void run(){
      mRefreshHandler.post(mRefresh);
    }
  }
,RefreshPeriod,RefreshPeriod);
  super.onResume();
}"
43903,"/** 
 * @param connector JMX connector
 * @param url JMX service URL object
 * @param displayUrl The URL user manually input
 */
ConnectionImpl(JMXConnector connector,JMXServiceURL url){
  Validate.notNull(connector,""String_Node_Str"");
  Validate.notNull(url,""String_Node_Str"");
  this.connector=connector;
  this.url=url;
}","/** 
 * @param connector JMX connector
 * @param url JMX service URL object
 */
ConnectionImpl(JMXConnector connector,JMXServiceURL url){
  Validate.notNull(connector,""String_Node_Str"");
  Validate.notNull(url,""String_Node_Str"");
  this.connector=connector;
  this.url=url;
}"
43904,"/** 
 * @param connector JMX connector
 * @param url JMX service URL object
 * @param displayUrl The URL user manually input
 */
ConnectionImpl(JMXConnector connector,JMXServiceURL url){
  Validate.notNull(connector,""String_Node_Str"");
  Validate.notNull(url,""String_Node_Str"");
  this.connector=connector;
  this.url=url;
}","/** 
 * @param connector JMX connector
 * @param url JMX service URL object
 */
ConnectionImpl(JMXConnector connector,JMXServiceURL url){
  Validate.notNull(connector,""String_Node_Str"");
  Validate.notNull(url,""String_Node_Str"");
  this.connector=connector;
  this.url=url;
}"
43905,"/** 
 * Get full MBean name with given bean name, domain and session
 * @param bean Name of bean. It can be NULL so that session#getBean() is returned
 * @param domain Domain for bean
 * @param session Current session
 * @return Full qualified name of MBean
 * @throws JMException Thrown when given MBean name is malformed
 * @throws IOException
 */
public static String getBeanName(String bean,String domain,Session session) throws JMException, IOException {
  Validate.notNull(session,""String_Node_Str"");
  if (bean == null) {
    return session.getBean();
  }
  if (SyntaxUtils.isNull(bean)) {
    return null;
  }
  MBeanServerConnection con=session.getConnection().getServerConnection();
  if (PATTERN_BEAN_NAME.matcher(bean).find()) {
    ObjectName name=new ObjectName(bean);
    con.getMBeanInfo(name);
    return bean;
  }
  String domainName=DomainCommand.getDomainName(domain,session);
  if (domainName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (PATTERN_PROPERTIES.matcher(bean).find()) {
    return domainName + ""String_Node_Str"" + bean;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + bean + ""String_Node_Str"");
}","/** 
 * Get full MBean name with given bean name, domain and session
 * @param bean Name of bean. It can be NULL so that session#getBean() is returned
 * @param domain Domain for bean
 * @param session Current session
 * @return Full qualified name of MBean
 * @throws JMException Thrown when given MBean name is malformed
 * @throws IOException
 */
public static String getBeanName(String bean,String domain,Session session) throws JMException, IOException {
  Validate.notNull(session,""String_Node_Str"");
  if (bean == null) {
    return session.getBean();
  }
  if (SyntaxUtils.isNull(bean)) {
    return null;
  }
  MBeanServerConnection con=session.getConnection().getServerConnection();
  if (bean.indexOf(':') != -1) {
    try {
      ObjectName name=new ObjectName(bean);
      con.getMBeanInfo(name);
      return bean;
    }
 catch (    MalformedObjectNameException e) {
    }
catch (    InstanceNotFoundException e) {
    }
  }
  String domainName=DomainCommand.getDomainName(domain,session);
  if (domainName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    ObjectName name=new ObjectName(domainName + ""String_Node_Str"" + bean);
    con.getMBeanInfo(name);
    return domainName + ""String_Node_Str"" + bean;
  }
 catch (  MalformedObjectNameException e) {
  }
catch (  InstanceNotFoundException e) {
  }
  throw new IllegalArgumentException(""String_Node_Str"" + bean + ""String_Node_Str"");
}"
43906,"private void getAttributeAndVerify(final String domain,String bean,final String attribute,final String expectedBean,final Object expectedValue){
  command.setDomain(domain);
  command.setBean(bean);
  command.setAttributes(Arrays.asList(attribute));
  command.setSimpleFormat(true);
  final MBeanServerConnection con=context.mock(MBeanServerConnection.class);
  final MBeanInfo beanInfo=context.mock(MBeanInfo.class);
  final MBeanAttributeInfo attributeInfo=context.mock(MBeanAttributeInfo.class);
  try {
    context.checking(new Expectations(){
{
        one(con).getDomains();
        will(returnValue(new String[]{domain,RandomStringUtils.randomAlphabetic(5)}));
        one(con).getMBeanInfo(new ObjectName(expectedBean));
        will(returnValue(beanInfo));
        one(beanInfo).getAttributes();
        will(returnValue(new MBeanAttributeInfo[]{attributeInfo}));
        allowing(attributeInfo).getName();
        will(returnValue(attribute));
        allowing(attributeInfo).isReadable();
        will(returnValue(true));
        one(con).getAttribute(new ObjectName(expectedBean),attribute);
        will(returnValue(expectedValue));
      }
    }
);
    command.setSession(new MockSession(output,con));
    command.execute();
    context.assertIsSatisfied();
    assertEquals(expectedValue.toString(),output.toString().trim());
  }
 catch (  JMException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","private void getAttributeAndVerify(final String domain,String bean,final String attribute,final String expectedBean,final Object expectedValue){
  command.setDomain(domain);
  command.setBean(bean);
  command.setAttributes(Arrays.asList(attribute));
  command.setSimpleFormat(true);
  final MBeanServerConnection con=context.mock(MBeanServerConnection.class);
  final MBeanInfo beanInfo=context.mock(MBeanInfo.class);
  final MBeanAttributeInfo attributeInfo=context.mock(MBeanAttributeInfo.class);
  try {
    context.checking(new Expectations(){
{
        one(con).getDomains();
        will(returnValue(new String[]{domain,RandomStringUtils.randomAlphabetic(5)}));
        allowing(con).getMBeanInfo(new ObjectName(expectedBean));
        will(returnValue(beanInfo));
        one(beanInfo).getAttributes();
        will(returnValue(new MBeanAttributeInfo[]{attributeInfo}));
        allowing(attributeInfo).getName();
        will(returnValue(attribute));
        allowing(attributeInfo).isReadable();
        will(returnValue(true));
        one(con).getAttribute(new ObjectName(expectedBean),attribute);
        will(returnValue(expectedValue));
      }
    }
);
    command.setSession(new MockSession(output,con));
    command.execute();
    context.assertIsSatisfied();
    assertEquals(expectedValue.toString(),output.toString().trim());
  }
 catch (  JMException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
43907,"private void schedulePendingTasks(){
  Map<String,Method> tasks=pendingTasks.all();
  for (  Map.Entry<String,Method> task : tasks.entrySet()) {
    Method method=task.getValue();
    Class<?> controller=method.getDeclaringClass();
    String URI=linker.linkTo(controller,method);
    try {
      Trigger trigger=builder.triggerFor(controller,method);
      trigger.getJobDataMap().put(""String_Node_Str"",URI);
      scheduler.schedule(DefaultRequestScopedTask.class,trigger,task.getKey());
      pendingTasks.remove(task.getKey());
    }
 catch (    ParseException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","private void schedulePendingTasks(){
  Iterator<Entry<String,Method>> tasks=pendingTasks.iterator();
  while (tasks.hasNext()) {
    Entry<String,Method> task=tasks.next();
    Method method=task.getValue();
    Class<?> controller=method.getDeclaringClass();
    String URI=linker.linkTo(controller,method);
    try {
      Trigger trigger=builder.triggerFor(controller,method);
      trigger.getJobDataMap().put(""String_Node_Str"",URI);
      scheduler.schedule(DefaultRequestScopedTask.class,trigger,task.getKey());
      tasks.remove();
    }
 catch (    ParseException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}"
43908,"@PostConstruct public void start(){
  try {
    this.scheduler.start();
  }
 catch (  SchedulerException e) {
    logger.debug(""String_Node_Str"",e);
  }
}","/** 
 * Calls {#start()} after the indicated number of seconds. (This call does not block).  This can be useful within applications that have initializers that create the scheduler immediately,  before the resources needed by the executing jobs have been fully initialized.
 */
@PostConstruct public void start(){
  try {
    this.scheduler.startDelayed(5);
  }
 catch (  SchedulerException e) {
    logger.debug(""String_Node_Str"",e);
  }
}"
43909,"/** 
 * Change NullSocket to: class NullSocket extends Socket { private final byte[] buffer = new byte[50];
 * @Override public InputStream getInputStream() { return new ByteArrayInputStream(this.buffer); }
 * @Override public OutputStream getOutputStream() { return new ByteArrayOutputStream(10); } }
 */
@Override public void onDisable(){
  for (  UUID uuid : tagged.keySet()) {
    Player plr=Bukkit.getPlayer(uuid);
    NPC npc=npcm.getNPC(plr.getUniqueId());
    if (npc != null) {
      if (isDebugEnabled()) {
        log.info(""String_Node_Str"" + plr.getName() + ""String_Node_Str"");
      }
      updatePlayerData(npc,plr.getUniqueId());
      despawnNPC(plr.getUniqueId());
    }
  }
  log.info(""String_Node_Str"");
}","/** 
 * Change NullSocket to: class NullSocket extends Socket { private final byte[] buffer = new byte[50];
 * @Override public InputStream getInputStream() { return new ByteArrayInputStream(this.buffer); }
 * @Override public OutputStream getOutputStream() { return new ByteArrayOutputStream(10); } }
 */
@Override public void onDisable(){
  for (  NPC npc : npcm.getNPCs()) {
    UUID uuid=npcm.getNPCIdFromEntity(npc.getBukkitEntity());
    updatePlayerData(npc,uuid);
    npcm.despawnById(uuid);
    if (isDebugEnabled()) {
      log.info(""String_Node_Str"" + uuid);
    }
  }
  log.info(""String_Node_Str"");
}"
43910,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerJoin(PlayerJoinEvent event){
  Player loginPlayer=event.getPlayer();
  if (plugin.hasDataContainer(loginPlayer.getName())) {
    PlayerDataContainer loginDataContainer=plugin.getPlayerData(loginPlayer.getName());
    if (loginDataContainer.hasSpawnedNPC()) {
      CraftPlayer cPlayer=(CraftPlayer)loginPlayer;
      EntityPlayer ePlayer=cPlayer.getHandle();
      ePlayer.invulnerableTicks=0;
      plugin.despawnNPC(loginDataContainer);
    }
    if (loginDataContainer.shouldBePunished()) {
      loginPlayer.setExp(loginDataContainer.getExp());
      loginPlayer.getInventory().setArmorContents(loginDataContainer.getPlayerArmor());
      loginPlayer.getInventory().setContents(loginDataContainer.getPlayerInventory());
      int healthSet=plugin.healthCheck(loginDataContainer.getHealth());
      loginPlayer.setHealth(healthSet);
      assert(loginPlayer.getHealth() == loginDataContainer.getHealth());
      loginPlayer.setLastDamageCause(new EntityDamageEvent(loginPlayer,DamageCause.ENTITY_EXPLOSION,0));
      loginPlayer.setNoDamageTicks(0);
    }
    if (loginPlayer.getHealth() > 0) {
      loginDataContainer.setPvPTimeout(plugin.getTagDuration());
    }
    loginDataContainer.setShouldBePunished(false);
    loginDataContainer.setSpawnedNPC(false);
  }
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerJoin(PlayerJoinEvent event){
  Player loginPlayer=event.getPlayer();
  if (plugin.hasDataContainer(loginPlayer.getName())) {
    PlayerDataContainer loginDataContainer=plugin.getPlayerData(loginPlayer.getName());
    if (loginDataContainer.hasSpawnedNPC()) {
      CraftPlayer cPlayer=(CraftPlayer)loginPlayer;
      EntityPlayer ePlayer=cPlayer.getHandle();
      ePlayer.invulnerableTicks=0;
      plugin.despawnNPC(loginDataContainer);
      if (loginPlayer.getHealth() > 0) {
        loginDataContainer.setPvPTimeout(plugin.getTagDuration());
      }
    }
    if (loginDataContainer.shouldBePunished()) {
      loginPlayer.setExp(loginDataContainer.getExp());
      loginPlayer.getInventory().setArmorContents(loginDataContainer.getPlayerArmor());
      loginPlayer.getInventory().setContents(loginDataContainer.getPlayerInventory());
      int healthSet=plugin.healthCheck(loginDataContainer.getHealth());
      loginPlayer.setHealth(healthSet);
      assert(loginPlayer.getHealth() == loginDataContainer.getHealth());
      loginPlayer.setLastDamageCause(new EntityDamageEvent(loginPlayer,DamageCause.ENTITY_EXPLOSION,0));
      loginPlayer.setNoDamageTicks(0);
    }
    loginDataContainer.setShouldBePunished(false);
    loginDataContainer.setSpawnedNPC(false);
  }
}"
43911,"@SuppressWarnings(""String_Node_Str"") @EventHandler public void onChunkLoad(ChunkLoadEvent event){
  for (  NPC npc : npcs.values()) {
    if (npc != null && event.getChunk() == npc.getBukkitEntity().getLocation().getBlock().getChunk()) {
      BWorld world=getBWorld(event.getWorld());
      world.getWorldServer().addEntity(npc.getEntity());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @EventHandler public void onChunkLoad(ChunkLoadEvent event){
  for (  NPC npc : npcs.values()) {
    if (npc != null && event.getChunk() == npc.getBukkitEntity().getLocation().getBlock().getChunk()) {
      BWorld world=getBWorld(event.getWorld());
      if (world.getWorldServer().getEntity(npc.getEntity().id) != npc.getEntity()) {
        world.getWorldServer().addEntity(npc.getEntity());
      }
    }
  }
}"
43912,"public void rename(String id,String name){
  if (name.length() > 16) {
    String tmp=name.substring(0,16);
    server.getLogger().log(Level.WARNING,""String_Node_Str"");
    server.getLogger().log(Level.WARNING,name + ""String_Node_Str"" + tmp);
    name=tmp;
  }
  HumanNPC npc=(HumanNPC)getNPC(id);
  npc.setName(name);
  BWorld b=getBWorld(npc.getBukkitEntity().getLocation().getWorld());
  WorldServer s=(WorldServer)b.getWorldServer();
  try {
    Method m=s.getClass().getDeclaredMethod(""String_Node_Str"",new Class[]{Entity.class});
    m.setAccessible(true);
    m.invoke(s,npc.getEntity());
    m=s.getClass().getDeclaredMethod(""String_Node_Str"",new Class[]{Entity.class});
    m.setAccessible(true);
    m.invoke(s,npc.getEntity());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  s.everyoneSleeping();
}","public void rename(String id,String name){
  if (name.length() > 16) {
    String tmp=name.substring(0,16);
    server.getLogger().log(Level.WARNING,""String_Node_Str"");
    server.getLogger().log(Level.WARNING,name + ""String_Node_Str"" + tmp);
    name=tmp;
  }
  HumanNPC npc=(HumanNPC)getNPC(id);
  npc.setName(name);
  BWorld b=getBWorld(npc.getBukkitEntity().getLocation().getWorld());
  WorldServer s=b.getWorldServer();
  try {
    Method m=s.getClass().getDeclaredMethod(""String_Node_Str"",new Class[]{Entity.class});
    m.setAccessible(true);
    m.invoke(s,npc.getEntity());
    m=s.getClass().getDeclaredMethod(""String_Node_Str"",new Class[]{Entity.class});
    m.setAccessible(true);
    m.invoke(s,npc.getEntity());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  s.everyoneSleeping();
}"
43913,"public void lookAtPoint(Location point){
  if (getEntity().getBukkitEntity().getWorld() != point.getWorld()) {
    return;
  }
  Location npcLoc=((LivingEntity)getEntity().getBukkitEntity()).getEyeLocation();
  double xDiff=point.getX() - npcLoc.getX();
  double yDiff=point.getY() - npcLoc.getY();
  double zDiff=point.getZ() - npcLoc.getZ();
  double DistanceXZ=Math.sqrt(xDiff * xDiff + zDiff * zDiff);
  double DistanceY=Math.sqrt(DistanceXZ * DistanceXZ + yDiff * yDiff);
  double newYaw=Math.acos(xDiff / DistanceXZ) * 180 / Math.PI;
  double newPitch=Math.acos(yDiff / DistanceY) * 180 / Math.PI - 90;
  if (zDiff < 0.0) {
    newYaw=newYaw + Math.abs(180 - newYaw) * 2;
  }
  getEntity().yaw=(float)(newYaw - 90);
  getEntity().pitch=(float)newPitch;
  ((EntityPlayer)getEntity()).bU=(float)(newYaw - 90);
}","public void lookAtPoint(Location point){
  if (getEntity().getBukkitEntity().getWorld() != point.getWorld()) {
    return;
  }
  Location npcLoc=((LivingEntity)getEntity().getBukkitEntity()).getEyeLocation();
  double xDiff=point.getX() - npcLoc.getX();
  double yDiff=point.getY() - npcLoc.getY();
  double zDiff=point.getZ() - npcLoc.getZ();
  double DistanceXZ=Math.sqrt(xDiff * xDiff + zDiff * zDiff);
  double DistanceY=Math.sqrt(DistanceXZ * DistanceXZ + yDiff * yDiff);
  double newYaw=Math.acos(xDiff / DistanceXZ) * 180 / Math.PI;
  double newPitch=Math.acos(yDiff / DistanceY) * 180 / Math.PI - 90;
  if (zDiff < 0.0) {
    newYaw=newYaw + Math.abs(180 - newYaw) * 2;
  }
  getEntity().yaw=(float)(newYaw - 90);
  getEntity().pitch=(float)newPitch;
  ((EntityPlayer)getEntity()).az=(float)(newYaw - 90);
}"
43914,"public boolean WarArenaHook(Player plr){
  boolean notInArena=true;
  if (plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    notInArena=Warzone.getZoneByPlayerName(plr.getName()) == null && Warzone.getZoneByPlayerName(plr.getName()) == null;
  }
  return notInArena;
}","public boolean WarArenaHook(Player plr){
  boolean notInArena=true;
  if (plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    notInArena=Warzone.getZoneByPlayerName(plr.getName()) == null;
  }
  return notInArena;
}"
43915,"@EventHandler(priority=EventPriority.LOWEST) public void onTeleport(PlayerTeleportEvent event){
  if (plugin.hasDataContainer(event.getPlayer().getName())) {
    PlayerDataContainer playerData=plugin.getPlayerData(event.getPlayer().getName());
    if (plugin.settings.blockTeleport() == true && !playerData.hasPVPtagExpired()) {
      TeleportCause cause=event.getCause();
      if (cause == TeleportCause.PLUGIN || cause == TeleportCause.COMMAND) {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.LOW) public void onTeleport(PlayerTeleportEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (plugin.hasDataContainer(event.getPlayer().getName())) {
    PlayerDataContainer playerData=plugin.getPlayerData(event.getPlayer().getName());
    if (plugin.settings.blockTeleport() == true && !playerData.hasPVPtagExpired()) {
      TeleportCause cause=event.getCause();
      if ((cause == TeleportCause.PLUGIN || cause == TeleportCause.COMMAND) && (event.getFrom().distance(event.getTo()) > 8)) {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
}"
43916,"@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamage(EntityDamageEvent EntityDamaged){
  if (EntityDamaged.isCancelled() || (EntityDamaged.getDamage() == 0)) {
    return;
  }
  if (EntityDamaged instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)EntityDamaged;
    Entity dmgr=e.getDamager();
    if (dmgr instanceof Projectile) {
      dmgr=((Projectile)dmgr).getShooter();
    }
    if ((dmgr instanceof Player) && (e.getEntity() instanceof Player)) {
      Player damager=(Player)dmgr;
      Player tagged=(Player)e.getEntity();
      if (damager != tagged) {
        for (        String disallowedWorlds : plugin.settings.getDisallowedWorlds()) {
          if (damager.getWorld().getName().equalsIgnoreCase(disallowedWorlds)) {
            return;
          }
        }
        boolean isInCombatDamager=false;
        if (plugin.hasDataContainer(damager.getName())) {
          PlayerDataContainer containerDamager=plugin.getPlayerData(damager.getName());
          isInCombatDamager=!containerDamager.hasPVPtagExpired();
        }
        boolean isInCombatTagged=false;
        if (plugin.hasDataContainer(tagged.getName())) {
          if (plugin.npcm.isNPC(tagged)) {
            isInCombatTagged=true;
          }
 else {
            PlayerDataContainer containerTagged=plugin.getPlayerData(tagged.getName());
            isInCombatTagged=!containerTagged.hasPVPtagExpired();
          }
        }
        if (plugin.settings.isSendMessageWhenTagged() && !isInCombatTagged && !isInCombatDamager) {
          damager.sendMessage(ChatColor.RED + ""String_Node_Str"");
          tagged.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        if (plugin.settings.getCurrentMode() == Settings.SettingsType.NPC) {
          onPlayerDamageByPlayerNPCMode(damager,tagged);
        }
 else         if (plugin.settings.getCurrentMode() == Settings.SettingsType.TIMED) {
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamage(EntityDamageEvent EntityDamaged){
  if (EntityDamaged.isCancelled() || (EntityDamaged.getDamage() == 0)) {
    return;
  }
  if (EntityDamaged instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)EntityDamaged;
    Entity dmgr=e.getDamager();
    if (dmgr instanceof Projectile) {
      dmgr=((Projectile)dmgr).getShooter();
    }
    if ((dmgr instanceof Player) && (e.getEntity() instanceof Player)) {
      Player damager=(Player)dmgr;
      Player tagged=(Player)e.getEntity();
      if (damager != tagged && damager != null) {
        for (        String disallowedWorlds : plugin.settings.getDisallowedWorlds()) {
          if (damager.getWorld().getName().equalsIgnoreCase(disallowedWorlds)) {
            return;
          }
        }
        boolean isInCombatDamager=false;
        if (plugin.hasDataContainer(damager.getName())) {
          PlayerDataContainer containerDamager=plugin.getPlayerData(damager.getName());
          isInCombatDamager=!containerDamager.hasPVPtagExpired();
        }
        boolean isInCombatTagged=false;
        if (plugin.hasDataContainer(tagged.getName())) {
          if (plugin.npcm.isNPC(tagged)) {
            isInCombatTagged=true;
          }
 else {
            PlayerDataContainer containerTagged=plugin.getPlayerData(tagged.getName());
            isInCombatTagged=!containerTagged.hasPVPtagExpired();
          }
        }
        if (plugin.settings.isSendMessageWhenTagged() && !isInCombatTagged && !isInCombatDamager) {
          damager.sendMessage(ChatColor.RED + ""String_Node_Str"");
          tagged.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        if (plugin.settings.getCurrentMode() == Settings.SettingsType.NPC) {
          onPlayerDamageByPlayerNPCMode(damager,tagged);
        }
 else         if (plugin.settings.getCurrentMode() == Settings.SettingsType.TIMED) {
        }
      }
    }
  }
}"
43917,"private void onPlayerJoinNPCMode(Player loginPlayer){
  if (plugin.hasDataContainer(loginPlayer.getName())) {
    PlayerDataContainer loginDataContainer=plugin.getPlayerData(loginPlayer.getName());
    if (loginDataContainer.hasSpawnedNPC()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      plugin.despawnNPC(loginDataContainer);
    }
    if (plugin.isDebugEnabled()) {
      plugin.log.info(""String_Node_Str"" + loginDataContainer.getPlayerName() + ""String_Node_Str"");
    }
    if (loginDataContainer.shouldBePunished()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      loginPlayer.setExp(loginDataContainer.getExp());
      loginPlayer.getInventory().setArmorContents(loginDataContainer.getPlayerArmor());
      loginPlayer.getInventory().setContents(loginDataContainer.getPlayerInventory());
      int healthSet=healthCheck(loginDataContainer);
      loginPlayer.setHealth(healthSet);
      assert(loginPlayer.getHealth() == loginDataContainer.getHealth());
      loginPlayer.setLastDamageCause(new EntityDamageEvent(loginPlayer,DamageCause.ENTITY_EXPLOSION,0));
    }
    plugin.removeDataContainer(loginPlayer.getName());
    plugin.createPlayerData(loginPlayer.getName()).setPvPTimeout(plugin.getTagDuration());
  }
}","private void onPlayerJoinNPCMode(Player loginPlayer){
  if (plugin.hasDataContainer(loginPlayer.getName())) {
    PlayerDataContainer loginDataContainer=plugin.getPlayerData(loginPlayer.getName());
    if (loginDataContainer.hasSpawnedNPC()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      plugin.despawnNPC(loginDataContainer);
    }
    if (plugin.isDebugEnabled()) {
      plugin.log.info(""String_Node_Str"" + loginDataContainer.getPlayerName() + ""String_Node_Str"");
    }
    if (loginDataContainer.shouldBePunished()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      loginPlayer.setExp(loginDataContainer.getExp());
      loginPlayer.getInventory().setArmorContents(loginDataContainer.getPlayerArmor());
      loginPlayer.getInventory().setContents(loginDataContainer.getPlayerInventory());
      int healthSet=healthCheck(loginDataContainer.getHealth());
      loginPlayer.setHealth(healthSet);
      assert(loginPlayer.getHealth() == loginDataContainer.getHealth());
      loginPlayer.setLastDamageCause(new EntityDamageEvent(loginPlayer,DamageCause.ENTITY_EXPLOSION,0));
    }
    plugin.removeDataContainer(loginPlayer.getName());
    plugin.createPlayerData(loginPlayer.getName()).setPvPTimeout(plugin.getTagDuration());
  }
}"
43918,"/** 
 * private void onPlayerJoinTimedMode(Player loginPlayer){ if(plugin.hasDataContainer(loginPlayer.getName())){ //Player has a data container and is likely to need some sort of punishment PlayerDataContainer loginDataContainer = plugin.getPlayerData(loginPlayer.getName()); if(loginDataContainer.hasSpawnedNPC()){ //Player has pvplogged and has not been killed yet //despawn the npc and transfer any effects over to the player if(plugin.isDebugEnabled()){plugin.log.info(""[CombatTag] Player logged in and has npc"");} plugin.despawnNPC(loginDataContainer); } if(plugin.isDebugEnabled()){plugin.log.info(""[CombatTag] "" + loginDataContainer.getPlayerName() +"" should be punushed"");} if(loginDataContainer.shouldBePunished()){ if(plugin.isDebugEnabled()){plugin.log.info(""[CombatTag] Getting info from NPC and putting it back into the player"");} loginPlayer.setExp(loginDataContainer.getExp()); loginPlayer.getInventory().setArmorContents(loginDataContainer.getPlayerArmor()); loginPlayer.getInventory().setContents(loginDataContainer.getPlayerInventory()); int healthSet = healthCheck(loginDataContainer); loginPlayer.setHealth(healthSet); assert(loginPlayer.getHealth() == loginDataContainer.getHealth()); loginPlayer.setLastDamageCause(new EntityDamageEvent(loginPlayer, DamageCause.ENTITY_EXPLOSION, 0)); } plugin.removeDataContainer(loginPlayer.getName()); plugin.createPlayerData(loginPlayer.getName()).setPvPTimeout(plugin.getTagDuration()); } }
 */
private int healthCheck(PlayerDataContainer loginDataContainer){
  int healthSet=loginDataContainer.getHealth();
  if (loginDataContainer.getHealth() < 0) {
    healthSet=0;
  }
  if (loginDataContainer.getHealth() > 20) {
    healthSet=20;
  }
  return healthSet;
}","private int healthCheck(int health){
  if (health < 0) {
    health=0;
  }
  if (health > 20) {
    health=20;
  }
  return health;
}"
43919,"public void scheduleDelayedKill(String name){
}","public void scheduleDelayedKill(final Player quitPlr,final NPC npc){
  long despawnTicks=settings.getNpcDespawnTime() * 20L;
  final String plrName=quitPlr.getName();
  final Player plrNpc=(Player)npc.getBukkitEntity();
  Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      plrNpc.setHealth(0);
      entityListener.onNPCDeath(plrName);
    }
  }
,despawnTicks);
}"
43920,"private void addOtherSettingsIfNecessary(SettingsHelper helper,String version){
  Settings temp=new Settings();
  if (helper.getProperty(debug) == null) {
    helper.setProperty(debug,Boolean.toString(temp.isDebugEnabled()));
  }
  if (helper.getProperty(tagDuration) == null) {
    helper.setProperty(tagDuration,String.valueOf(temp.getTagDuration()));
  }
  if (helper.getProperty(instaKill) == null) {
    helper.setProperty(instaKill,Boolean.toString(temp.isInstaKill()));
  }
  if (helper.getProperty(SettingsLoader.version) == null || !isLatestVersion(helper,version)) {
    helper.setProperty(SettingsLoader.version,version);
  }
  if (helper.getProperty(disabledWorlds) == null) {
    helper.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (helper.getProperty(disabledCommands) == null) {
    helper.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (helper.getProperty(npcName) == null) {
    helper.setProperty(npcName,temp.getNpcName());
  }
  if (helper.getProperty(blockEditWhileTagged) == null) {
    helper.setProperty(blockEditWhileTagged,Boolean.toString(temp.isBlockEditWhileTagged()));
  }
  if (helper.getProperty(sendMessageWhenTagged) == null) {
    helper.setProperty(sendMessageWhenTagged,Boolean.toString(temp.isSendMessageWhenTagged()));
  }
}","private void addOtherSettingsIfNecessary(SettingsHelper helper,String version){
  Settings temp=new Settings();
  if (helper.getProperty(debug) == null) {
    helper.setProperty(debug,Boolean.toString(temp.isDebugEnabled()));
  }
  if (helper.getProperty(tagDuration) == null) {
    helper.setProperty(tagDuration,String.valueOf(temp.getTagDuration()));
  }
  if (helper.getProperty(instaKill) == null) {
    helper.setProperty(instaKill,Boolean.toString(temp.isInstaKill()));
  }
  if (helper.getProperty(SettingsLoader.version) == null || !isLatestVersion(helper,version)) {
    helper.setProperty(SettingsLoader.version,version);
  }
  if (helper.getProperty(disabledWorlds) == null) {
    helper.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (helper.getProperty(disabledCommands) == null) {
    helper.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (helper.getProperty(npcName) == null) {
    helper.setProperty(npcName,temp.getNpcName());
  }
  if (helper.getProperty(blockEditWhileTagged) == null) {
    helper.setProperty(blockEditWhileTagged,Boolean.toString(temp.isBlockEditWhileTagged()));
  }
  if (helper.getProperty(sendMessageWhenTagged) == null) {
    helper.setProperty(sendMessageWhenTagged,Boolean.toString(temp.isSendMessageWhenTagged()));
  }
  if (helper.getProperty(npcDespawnTime) == null) {
    helper.setProperty(npcDespawnTime,String.valueOf(temp.getNpcDespawnTime()));
  }
}"
43921,"private boolean hasValidProperties(SettingsHelper helper){
  if ((helper.getProperty(version) != null) && (helper.getProperty(tagDuration) != null) && (helper.getProperty(debug) != null)&& (helper.getProperty(instaKill) != null)&& (helper.getProperty(disabledCommands) != null)&& (helper.getProperty(disabledWorlds) != null)&& (helper.getProperty(npcName) != null)&& (helper.getProperty(blockEditWhileTagged) != null)&& (helper.getProperty(sendMessageWhenTagged) != null)) {
    return true;
  }
 else {
    return false;
  }
}","private boolean hasValidProperties(SettingsHelper helper){
  if ((helper.getProperty(version) != null) && (helper.getProperty(tagDuration) != null) && (helper.getProperty(debug) != null)&& (helper.getProperty(instaKill) != null)&& (helper.getProperty(disabledCommands) != null)&& (helper.getProperty(disabledWorlds) != null)&& (helper.getProperty(npcName) != null)&& (helper.getProperty(blockEditWhileTagged) != null)&& (helper.getProperty(sendMessageWhenTagged) != null)&& (helper.getProperty(npcDespawnTime) != null)) {
    return true;
  }
 else {
    return false;
  }
}"
43922,"private void loadProperties(SettingsHelper helper){
  settings.setDebugEnabled(Boolean.valueOf(helper.getProperty(debug)));
  settings.setTagDuration(Integer.valueOf(helper.getProperty(tagDuration)));
  settings.setBlockEditWhileTagged(Boolean.valueOf(helper.getProperty(blockEditWhileTagged)));
  settings.setInstaKill(Boolean.valueOf(helper.getProperty(instaKill)));
  settings.setSendMessageWhenTagged(Boolean.valueOf(helper.getProperty(sendMessageWhenTagged)));
  settings.setNpcName(String.valueOf(helper.getProperty(npcName)));
  String disabledCommandsString=helper.getProperty(disabledCommands).replace(""String_Node_Str"",""String_Node_Str"");
  disabledCommandsString=disabledCommandsString.replace(""String_Node_Str"",""String_Node_Str"");
  String disabledCmds[]=disabledCommandsString.split(""String_Node_Str"");
  if (disabledCmds.length == 1 && disabledCmds[0].equals(""String_Node_Str"")) {
    settings.setDisabledCommands(new String[0]);
  }
 else {
    settings.setDisabledCommands(disabledCmds);
  }
  String disabledWorldsString=helper.getProperty(disabledWorlds).replace(""String_Node_Str"",""String_Node_Str"");
  disabledWorldsString=disabledWorldsString.replace(""String_Node_Str"",""String_Node_Str"");
  settings.setDisallowedWorlds(disabledWorldsString.split(""String_Node_Str""));
}","private void loadProperties(SettingsHelper helper){
  settings.setDebugEnabled(Boolean.valueOf(helper.getProperty(debug)));
  settings.setTagDuration(Integer.valueOf(helper.getProperty(tagDuration)));
  settings.setNpcDespawnTime(Integer.valueOf(helper.getProperty(npcDespawnTime)));
  settings.setBlockEditWhileTagged(Boolean.valueOf(helper.getProperty(blockEditWhileTagged)));
  settings.setInstaKill(Boolean.valueOf(helper.getProperty(instaKill)));
  settings.setSendMessageWhenTagged(Boolean.valueOf(helper.getProperty(sendMessageWhenTagged)));
  settings.setNpcName(String.valueOf(helper.getProperty(npcName)));
  String disabledCommandsString=helper.getProperty(disabledCommands).replace(""String_Node_Str"",""String_Node_Str"");
  disabledCommandsString=disabledCommandsString.replace(""String_Node_Str"",""String_Node_Str"");
  String disabledCmds[]=disabledCommandsString.split(""String_Node_Str"");
  if (disabledCmds.length == 1 && disabledCmds[0].equals(""String_Node_Str"")) {
    settings.setDisabledCommands(new String[0]);
  }
 else {
    settings.setDisabledCommands(disabledCmds);
  }
  String disabledWorldsString=helper.getProperty(disabledWorlds).replace(""String_Node_Str"",""String_Node_Str"");
  disabledWorldsString=disabledWorldsString.replace(""String_Node_Str"",""String_Node_Str"");
  settings.setDisallowedWorlds(disabledWorldsString.split(""String_Node_Str""));
}"
43923,"@EventHandler(priority=EventPriority.MONITOR) public void onEntityDeath(EntityDeathEvent event){
  if (plugin.npcm.isNPC(event.getEntity())) {
    onNPCDeath(event);
  }
 else   if (event.getEntity() instanceof Player) {
    Player deadPlayer=(Player)event.getEntity();
    onPlayerDeath(deadPlayer);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onEntityDeath(EntityDeathEvent event){
  if (plugin.npcm.isNPC(event.getEntity())) {
    onNPCDeath(event.getEntity());
  }
 else   if (event.getEntity() instanceof Player) {
    Player deadPlayer=(Player)event.getEntity();
    onPlayerDeath(deadPlayer);
  }
}"
43924,"private void onNPCDeath(EntityDeathEvent event){
  if (plugin.hasDataContainer(plugin.getPlayerName(event.getEntity()))) {
    plugin.killPlayerEmptyInventory(plugin.getPlayerData(plugin.getPlayerName(event.getEntity())));
  }
}","public void onNPCDeath(String plrName){
  if (plugin.hasDataContainer(plrName)) {
    plugin.killPlayerEmptyInventory(plugin.getPlayerData(plrName));
  }
}"
43925,"@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamage(EntityDamageEvent EntityDamaged){
  if (EntityDamaged.isCancelled() || (EntityDamaged.getDamage() == 0)) {
    return;
  }
  if (EntityDamaged instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)EntityDamaged;
    Entity dmgr=e.getDamager();
    if (dmgr instanceof Projectile) {
      dmgr=((Projectile)dmgr).getShooter();
    }
    if ((dmgr instanceof Player) && (e.getEntity() instanceof Player)) {
      Player damager=(Player)dmgr;
      Player tagged=(Player)e.getEntity();
      for (      String disallowedWorlds : plugin.settings.getDisallowedWorlds()) {
        if (damager.getWorld().getName().equalsIgnoreCase(disallowedWorlds)) {
          return;
        }
      }
      boolean isInCombatDamager=false;
      if (plugin.hasDataContainer(damager.getName())) {
        PlayerDataContainer container=plugin.getPlayerData(damager.getName());
        isInCombatDamager=!container.hasPVPtagExpired();
      }
      boolean isInCombatTagged=false;
      if (plugin.hasDataContainer(tagged.getName())) {
        PlayerDataContainer container=plugin.getPlayerData(tagged.getName());
        isInCombatTagged=!container.hasPVPtagExpired();
      }
      if (plugin.settings.isSendMessageWhenTagged() && !isInCombatTagged && !isInCombatDamager) {
        damager.sendMessage(ChatColor.RED + ""String_Node_Str"");
        tagged.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (plugin.settings.getCurrentMode() == Settings.SettingsType.NPC) {
        onPlayerDamageByPlayerNPCMode(damager,tagged);
      }
 else       if (plugin.settings.getCurrentMode() == Settings.SettingsType.TIMED) {
        onPlayerDamageByPlayerTimedMode(damager,tagged);
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamage(EntityDamageEvent EntityDamaged){
  if (EntityDamaged.isCancelled() || (EntityDamaged.getDamage() == 0)) {
    return;
  }
  if (EntityDamaged instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)EntityDamaged;
    Entity dmgr=e.getDamager();
    if (dmgr instanceof Projectile) {
      dmgr=((Projectile)dmgr).getShooter();
    }
    if ((dmgr instanceof Player) && (e.getEntity() instanceof Player)) {
      Player damager=(Player)dmgr;
      Player tagged=(Player)e.getEntity();
      for (      String disallowedWorlds : plugin.settings.getDisallowedWorlds()) {
        if (damager.getWorld().getName().equalsIgnoreCase(disallowedWorlds)) {
          return;
        }
      }
      boolean isInCombatDamager=false;
      if (plugin.hasDataContainer(damager.getName())) {
        PlayerDataContainer containerDamager=plugin.getPlayerData(damager.getName());
        isInCombatDamager=!containerDamager.hasPVPtagExpired();
      }
      boolean isInCombatTagged=false;
      if (plugin.hasDataContainer(tagged.getName())) {
        if (plugin.npcm.isNPC(tagged)) {
          isInCombatTagged=true;
        }
 else {
          PlayerDataContainer containerTagged=plugin.getPlayerData(tagged.getName());
          isInCombatTagged=!containerTagged.hasPVPtagExpired();
        }
      }
      if (plugin.settings.isSendMessageWhenTagged() && !isInCombatTagged && !isInCombatDamager) {
        damager.sendMessage(ChatColor.RED + ""String_Node_Str"");
        tagged.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (plugin.settings.getCurrentMode() == Settings.SettingsType.NPC) {
        onPlayerDamageByPlayerNPCMode(damager,tagged);
      }
 else       if (plugin.settings.getCurrentMode() == Settings.SettingsType.TIMED) {
        onPlayerDamageByPlayerTimedMode(damager,tagged);
      }
    }
  }
}"
43926,"private void onPlayerQuitTimedMode(Player quitPlr){
  if (plugin.hasDataContainer(quitPlr.getName())) {
    PlayerDataContainer quitDataContainer=plugin.getPlayerData(quitPlr.getName());
    if (!quitDataContainer.hasPVPtagExpired()) {
      quitDataContainer.setHealth(quitPlr.getHealth());
      quitDataContainer.setPlayerArmor(quitPlr.getInventory().getArmorContents());
      quitDataContainer.setPlayerInventory(quitPlr.getInventory().getContents());
      quitDataContainer.setExp(quitPlr.getExp());
      plugin.scheduleDelayedKill(quitPlr.getName());
    }
  }
}","private void onPlayerQuitTimedMode(Player quitPlr){
  if (plugin.hasDataContainer(quitPlr.getName())) {
    PlayerDataContainer quitDataContainer=plugin.getPlayerData(quitPlr.getName());
    if (!quitDataContainer.hasPVPtagExpired()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      if (plugin.settings.isInstaKill()) {
        quitPlr.setHealth(0);
        plugin.removeDataContainer(quitPlr.getName());
      }
 else {
        final NPC npc=plugin.spawnNpc(quitPlr.getName(),quitPlr.getLocation());
        if (npc.getBukkitEntity() instanceof Player) {
          Player npcPlayer=(Player)npc.getBukkitEntity();
          plugin.copyContentsNpc(npc,quitPlr);
          String plrName=quitPlr.getName();
          plugin.npcm.rename(plrName,plugin.getNpcName(plrName));
          npcPlayer.setHealth(quitPlr.getHealth());
          quitDataContainer.setSpawnedNPC(true);
          quitDataContainer.setNPCId(quitPlr.getName());
          quitDataContainer.setShouldBePunished(true);
          quitPlr.getWorld().createExplosion(quitPlr.getLocation(),explosionDamage);
          plugin.scheduleDelayedKill(quitPlr,npc);
        }
      }
    }
  }
}"
43927,"private void onPlayerJoinTimedMode(Player joinedPlr){
}","private void onPlayerJoinTimedMode(Player loginPlayer){
  if (plugin.hasDataContainer(loginPlayer.getName())) {
    PlayerDataContainer loginDataContainer=plugin.getPlayerData(loginPlayer.getName());
    if (loginDataContainer.hasSpawnedNPC()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      plugin.despawnNPC(loginDataContainer);
    }
    if (plugin.isDebugEnabled()) {
      plugin.log.info(""String_Node_Str"" + loginDataContainer.getPlayerName() + ""String_Node_Str"");
    }
    if (loginDataContainer.shouldBePunished()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      loginPlayer.setExp(loginDataContainer.getExp());
      loginPlayer.getInventory().setArmorContents(loginDataContainer.getPlayerArmor());
      loginPlayer.getInventory().setContents(loginDataContainer.getPlayerInventory());
      loginPlayer.setHealth(loginDataContainer.getHealth());
      assert(loginPlayer.getHealth() == loginDataContainer.getHealth());
      loginPlayer.setLastDamageCause(new EntityDamageEvent(loginPlayer,DamageCause.ENTITY_EXPLOSION,0));
    }
    plugin.removeDataContainer(loginPlayer.getName());
    plugin.createPlayerData(loginPlayer.getName()).setPvPTimeout(plugin.getTagDuration());
  }
}"
43928,"@EventHandler public void onPlayerQuit(PlayerQuitEvent e){
  Player quitPlr=e.getPlayer();
  if (plugin.settings.getCurrentMode() == Settings.SettingsType.NPC) {
    onPlayerQuitNPCMode(quitPlr);
  }
 else   if (plugin.settings.getCurrentMode() == Settings.SettingsType.TIMED) {
    onPlayerQuitTimedMode(quitPlr);
  }
}","@EventHandler public void onPlayerQuit(PlayerQuitEvent e){
  Player quitPlr=e.getPlayer();
  if (plugin.settings.getNpcDespawnTime() == -1) {
    onPlayerQuitNPCMode(quitPlr);
  }
 else   if (plugin.settings.getNpcDespawnTime() > 0) {
    onPlayerQuitTimedMode(quitPlr);
  }
}"
43929,"private void onPlayerQuitNPCMode(Player quitPlr){
  if (plugin.hasDataContainer(quitPlr.getName())) {
    PlayerDataContainer quitDataContainer=plugin.getPlayerData(quitPlr.getName());
    if (!quitDataContainer.hasPVPtagExpired()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      if (plugin.settings.isInstaKill()) {
        quitPlr.setHealth(0);
        plugin.removeDataContainer(quitPlr.getName());
      }
 else {
        NPC npc=plugin.spawnNpc(quitPlr.getName(),quitPlr.getLocation());
        if (npc.getBukkitEntity() instanceof Player) {
          Player npcPlayer=(Player)npc.getBukkitEntity();
          plugin.copyContentsNpc(npc,quitPlr);
          String plrName=quitPlr.getName();
          plugin.npcm.rename(plrName,plugin.getNpcName(plrName));
          npcPlayer.setHealth(quitPlr.getHealth());
          quitDataContainer.setSpawnedNPC(true);
          quitDataContainer.setNPCId(quitPlr.getName());
          quitDataContainer.setShouldBePunished(true);
          quitPlr.getWorld().createExplosion(quitPlr.getLocation(),explosionDamage);
        }
      }
    }
  }
}","private void onPlayerQuitNPCMode(final Player quitPlr){
  if (plugin.hasDataContainer(quitPlr.getName())) {
    PlayerDataContainer quitDataContainer=plugin.getPlayerData(quitPlr.getName());
    if (!quitDataContainer.hasPVPtagExpired()) {
      if (plugin.isDebugEnabled()) {
        plugin.log.info(""String_Node_Str"");
      }
      if (plugin.settings.isInstaKill()) {
        quitPlr.setHealth(0);
        plugin.removeDataContainer(quitPlr.getName());
      }
 else {
        final NPC npc=plugin.spawnNpc(quitPlr.getName(),quitPlr.getLocation());
        if (npc.getBukkitEntity() instanceof Player) {
          Player npcPlayer=(Player)npc.getBukkitEntity();
          plugin.copyContentsNpc(npc,quitPlr);
          String plrName=quitPlr.getName();
          plugin.npcm.rename(plrName,plugin.getNpcName(plrName));
          npcPlayer.setHealth(quitPlr.getHealth());
          quitDataContainer.setSpawnedNPC(true);
          quitDataContainer.setNPCId(quitPlr.getName());
          quitDataContainer.setShouldBePunished(true);
          quitPlr.getWorld().createExplosion(quitPlr.getLocation(),explosionDamage);
        }
      }
    }
  }
}"
43930,"@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerJoin(PlayerJoinEvent e){
  Player loginPlayer=e.getPlayer();
  if (plugin.settings.getCurrentMode() == Settings.SettingsType.NPC) {
    onPlayerJoinNPCMode(loginPlayer);
  }
 else   if (plugin.settings.getCurrentMode() == Settings.SettingsType.TIMED) {
    onPlayerJoinTimedMode(loginPlayer);
  }
}","@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerJoin(PlayerJoinEvent e){
  Player loginPlayer=e.getPlayer();
  if (plugin.settings.getNpcDespawnTime() == -1) {
    onPlayerJoinNPCMode(loginPlayer);
  }
 else   if (plugin.settings.getNpcDespawnTime() > 0) {
    onPlayerJoinTimedMode(loginPlayer);
  }
 else {
    plugin.log.info(""String_Node_Str"");
  }
}"
43931,"public Settings(){
  currentMode=SettingsType.NPC;
  instaKill=false;
  tagDuration=10;
  debugEnabled=false;
  disabledCommands=new String[0];
  disallowedWorlds=new String[0];
  npcName=""String_Node_Str"";
  blockEditWhileTagged=true;
  sendMessageWhenTagged=false;
}","public Settings(){
  currentMode=SettingsType.NPC;
  instaKill=false;
  tagDuration=10;
  debugEnabled=false;
  disabledCommands=new String[0];
  disallowedWorlds=new String[0];
  npcName=""String_Node_Str"";
  blockEditWhileTagged=true;
  sendMessageWhenTagged=false;
  npcDespawnTime=-1;
}"
43932,"public void onEnable(){
  log.info(""String_Node_Str"");
  log.addHandler(new Handler(){
    public void publish(    LogRecord logRecord){
      String mystring=logRecord.getMessage();
      if (mystring.contains(""String_Node_Str"")) {
        String myarray[]=mystring.split(""String_Node_Str"");
        if (myarray.length == 4) {
          String PlrQuitName=myarray[0];
          String DisconnectMessage=myarray[3];
          getPCC(PlrQuitName).setDisconnectType(DisconnectMessage);
        }
      }
    }
    public void flush(){
    }
    public void close(){
    }
  }
);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_KICK,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,playerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,(Listener)entityListener,Event.Priority.Monitor,this);
  new File(mainDirectory).mkdir();
  if (!CONFIG.exists()) {
    updateprop();
    log.info(""String_Node_Str"");
  }
  if (!PVPLOG.exists()) {
    try {
      PVPLOG.createNewFile();
      FileOutputStream badplayers=new FileOutputStream(PVPLOG);
      pvploggers.store(badplayers,""String_Node_Str"");
      badplayers.flush();
      badplayers.close();
      log.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      log.warning(""String_Node_Str"" + ex.getMessage());
    }
    log.info(""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
    loadProcedure();
    logit(""String_Node_Str"");
  }
  loadplayers();
}","public void onEnable(){
  log.info(""String_Node_Str"");
  log.addHandler(new Handler(){
    public void publish(    LogRecord logRecord){
      if (logRecord == null) {
        logit(""String_Node_Str"");
        return;
      }
 else       if (logRecord.getMessage() == null) {
        logit(""String_Node_Str"");
        return;
      }
 else {
        try {
          String mystring=logRecord.getMessage();
          if (mystring.contains(""String_Node_Str"")) {
            String myarray[]=mystring.split(""String_Node_Str"");
            if (!(myarray == null)) {
              logit(""String_Node_Str"");
              if (myarray.length == 4) {
                String PlrQuitName=myarray[0];
                String DisconnectMessage=myarray[3];
                getPCC(PlrQuitName).setDisconnectType(DisconnectMessage);
              }
            }
 else {
              logit(""String_Node_Str"");
            }
          }
          return;
        }
 catch (        NullPointerException e) {
          log.info(""String_Node_Str"");
        }
      }
    }
    public void flush(){
    }
    public void close(){
    }
  }
);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_KICK,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,playerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,(Listener)entityListener,Event.Priority.Monitor,this);
  new File(mainDirectory).mkdir();
  if (!CONFIG.exists()) {
    updateprop();
    log.info(""String_Node_Str"");
  }
  if (!PVPLOG.exists()) {
    try {
      PVPLOG.createNewFile();
      FileOutputStream badplayers=new FileOutputStream(PVPLOG);
      pvploggers.store(badplayers,""String_Node_Str"");
      badplayers.flush();
      badplayers.close();
      log.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      log.warning(""String_Node_Str"" + ex.getMessage());
    }
    log.info(""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
    loadProcedure();
    logit(""String_Node_Str"");
  }
  loadplayers();
}"
43933,"public void dropitemsandclearPCCitems(String Winner,String Loser){
  PlayerCombatClass PCCLoser=getPCC(Loser);
  PlayerCombatClass PCCWinner=getPCC(Winner);
  if (isPlrOnline(PCCWinner.getPlayerName())) {
    Player PlrWinner=getServer().getPlayer(PCCWinner.getPlayerName());
    sendMessageWinner(PlrWinner,PCCLoser.getPlayerName());
    if (getPenalty().equals(""String_Node_Str"")) {
      logit(""String_Node_Str"" + Loser + ""String_Node_Str""+ Winner+ ""String_Node_Str"");
      for (int i=0; PCCLoser.getItems().size() > i; i++) {
        PlrWinner.getWorld().dropItemNaturally(PlrWinner.getLocation(),PCCLoser.getItems().get(i));
      }
    }
  }
 else {
    logit(""String_Node_Str"");
  }
  PCCLoser.clearItems();
  return;
}","public void dropitemsandclearPCCitems(String Winner,String Loser){
  PlayerCombatClass PCCLoser=getPCC(Loser);
  PlayerCombatClass PCCWinner=getPCC(Winner);
  if (isPlrOnline(PCCWinner.getPlayerName())) {
    Player PlrWinner=getServer().getPlayer(PCCWinner.getPlayerName());
    sendMessageWinner(PlrWinner,PCCLoser.getPlayerName());
    if (getPenalty().equals(""String_Node_Str"")) {
      logit(""String_Node_Str"" + Loser + ""String_Node_Str""+ Winner+ ""String_Node_Str"");
      if (PCCLoser.getItems() != null) {
        for (int i=0; PCCLoser.getItems().size() > i; i++) {
          PlrWinner.getWorld().dropItemNaturally(PlrWinner.getLocation(),PCCLoser.getItems().get(i));
        }
      }
    }
  }
 else {
    logit(""String_Node_Str"");
  }
  PCCLoser.clearItems();
  return;
}"
43934,"public void publish(LogRecord logRecord){
  String mystring=logRecord.getMessage();
  if (mystring.contains(""String_Node_Str"")) {
    String myarray[]=mystring.split(""String_Node_Str"");
    if (myarray.length == 4) {
      String PlrQuitName=myarray[0];
      String DisconnectMessage=myarray[3];
      getPCC(PlrQuitName).setDisconnectType(DisconnectMessage);
    }
  }
}","public void publish(LogRecord logRecord){
  if (logRecord == null) {
    logit(""String_Node_Str"");
    return;
  }
 else   if (logRecord.getMessage() == null) {
    logit(""String_Node_Str"");
    return;
  }
 else {
    try {
      String mystring=logRecord.getMessage();
      if (mystring.contains(""String_Node_Str"")) {
        String myarray[]=mystring.split(""String_Node_Str"");
        if (!(myarray == null)) {
          logit(""String_Node_Str"");
          if (myarray.length == 4) {
            String PlrQuitName=myarray[0];
            String DisconnectMessage=myarray[3];
            getPCC(PlrQuitName).setDisconnectType(DisconnectMessage);
          }
        }
 else {
          logit(""String_Node_Str"");
        }
      }
      return;
    }
 catch (    NullPointerException e) {
      log.info(""String_Node_Str"");
    }
  }
}"
43935,"@Override public void onPlayerQuit(PlayerQuitEvent e){
  final Player quitter=e.getPlayer();
  if (!(quitter.isDead())) {
    final PlayerCombatClass CCQuitter=plugin.getPCC(quitter.getName());
    if (CCQuitter.isTagged()) {
      if (!(CCQuitter.tagExpired())) {
        plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
        if (plugin.getPenalty().equals(""String_Node_Str"")) {
          CCQuitter.setItems(quitter);
        }
        if (CCQuitter.getTimesReloged() >= plugin.getMaxRelog()) {
          plugin.logit(""String_Node_Str"" + plugin.getPenalty());
          plugin.logit(""String_Node_Str"");
          CCQuitter.removeTimesReloged();
          if (plugin.getPenalty().equals(""String_Node_Str"")) {
            plugin.logit(""String_Node_Str"");
            plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
          }
          CCQuitter.setPvplogged(true);
        }
 else         if (!(CCQuitter.hasScheduledtask())) {
          plugin.logit(""String_Node_Str"");
          CCQuitter.setScheduledtask(true);
          if (CCQuitter.getDisconnectType() == null) {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getGracePeriod());
          }
 else           if (CCQuitter.getDisconnectType().equals(""String_Node_Str"")) {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getGracePeriod());
          }
 else           if (CCQuitter.getDisconnectType().equals(""String_Node_Str"")) {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getExtendedGracePeriod());
          }
 else {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getGracePeriod());
          }
          CCQuitter.incrementTimesReloged();
          if (plugin.isPlrOnline(CCQuitter.getTaggedBy())) {
            plugin.getServer().getPlayer(CCQuitter.getTaggedBy()).sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ CCQuitter.getPlayerName()+ ChatColor.GOLD+ ""String_Node_Str""+ (CCQuitter.gracePeriodInSeconds())+ ""String_Node_Str"");
          }
          CombatTagRunnable cr=new CombatTagRunnable(CCQuitter.getPlayerName());
          CCQuitter.setTasknumber(plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,cr,(CCQuitter.getGracePeriod() / 50)));
        }
 else {
          plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
        }
      }
 else {
      }
    }
 else {
      plugin.logit(quitter.getName() + ""String_Node_Str"");
    }
  }
}","@Override public void onPlayerQuit(PlayerQuitEvent e){
  final Player quitter=e.getPlayer();
  if (!(quitter.isDead())) {
    final PlayerCombatClass CCQuitter=plugin.getPCC(quitter.getName());
    if (CCQuitter.isTagged()) {
      if (!(CCQuitter.tagExpired())) {
        plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
        if (plugin.getPenalty().equals(""String_Node_Str"")) {
          CCQuitter.setItems(quitter);
        }
        if (CCQuitter.getTimesReloged() >= plugin.getMaxRelog()) {
          plugin.logit(""String_Node_Str"" + plugin.getPenalty());
          plugin.logit(""String_Node_Str"");
          CCQuitter.removeTimesReloged();
          plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
          CCQuitter.setPvplogged(true);
        }
 else         if (!(CCQuitter.hasScheduledtask())) {
          plugin.logit(""String_Node_Str"");
          CCQuitter.setScheduledtask(true);
          if (CCQuitter.getDisconnectType() == null) {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getGracePeriod());
          }
 else           if (CCQuitter.getDisconnectType().equals(""String_Node_Str"")) {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getGracePeriod());
          }
 else           if (CCQuitter.getDisconnectType().equals(""String_Node_Str"")) {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getExtendedGracePeriod());
          }
 else {
            plugin.logit(""String_Node_Str"");
            CCQuitter.setGracePeriod(plugin.getGracePeriod());
          }
          CCQuitter.incrementTimesReloged();
          if (plugin.isPlrOnline(CCQuitter.getTaggedBy())) {
            plugin.getServer().getPlayer(CCQuitter.getTaggedBy()).sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ CCQuitter.getPlayerName()+ ChatColor.GOLD+ ""String_Node_Str""+ (CCQuitter.gracePeriodInSeconds())+ ""String_Node_Str"");
          }
          CombatTagRunnable cr=new CombatTagRunnable(CCQuitter.getPlayerName());
          CCQuitter.setTasknumber(plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,cr,(CCQuitter.getGracePeriod() / 50)));
        }
 else {
          plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
        }
      }
 else {
      }
    }
 else {
      plugin.logit(quitter.getName() + ""String_Node_Str"");
    }
  }
}"
43936,"@Override public void run(){
  plugin.logit(""String_Node_Str"");
  PlayerCombatClass CCQuitter=plugin.getPCC(name);
  CCQuitter.setScheduledtask(false);
  if (!(plugin.isPlrOnline(CCQuitter.getPlayerName()))) {
    plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
    if (CCQuitter.isTagged()) {
      CCQuitter.setPvplogged(true);
      if (plugin.getPenalty().equals(""String_Node_Str"")) {
        if (plugin.getInventoryClear()) {
          plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
        }
      }
    }
  }
 else {
    removetaggedbyandremovefromtaggedplayers(CCQuitter);
  }
}","@Override public void run(){
  plugin.logit(""String_Node_Str"");
  PlayerCombatClass CCQuitter=plugin.getPCC(name);
  CCQuitter.setScheduledtask(false);
  if (!(plugin.isPlrOnline(CCQuitter.getPlayerName()))) {
    plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
    if (CCQuitter.isTagged()) {
      CCQuitter.setPvplogged(true);
      plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
    }
  }
 else {
    removetaggedbyandremovefromtaggedplayers(CCQuitter);
  }
}"
43937,"public void clearItems(){
  ITEMS.clear();
  return;
}","public void clearItems(){
  if (ITEMS != null) {
    ITEMS.clear();
  }
  return;
}"
43938,"public void dropitemsandclearPCCitems(String Winner,String Loser){
  PlayerCombatClass PCCWinner=getPCC(Winner);
  PlayerCombatClass PCCLoser=getPCC(Loser);
  if (!(getServer().getPlayer(PCCWinner.getPlayerName()) == null)) {
    Player PlrWinner=getServer().getPlayer(PCCWinner.getPlayerName());
    logit(""String_Node_Str"" + Loser + ""String_Node_Str""+ Winner+ ""String_Node_Str"");
    if (PlrWinner.isOnline()) {
      PlrWinner.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ Loser+ ChatColor.GOLD+ ""String_Node_Str"");
      for (int i=0; PCCLoser.getItems().size() > i; i++) {
        PlrWinner.getWorld().dropItemNaturally(PlrWinner.getLocation(),PCCLoser.getItems().get(i));
      }
    }
 else {
    }
  }
 else {
    logit(""String_Node_Str"");
  }
  PCCLoser.clearItems();
  return;
}","public void dropitemsandclearPCCitems(String Winner,String Loser){
  PlayerCombatClass PCCWinner=getPCC(Winner);
  PlayerCombatClass PCCLoser=getPCC(Loser);
  if (isPlrOnline(PCCWinner.getPlayerName())) {
    Player PlrWinner=getServer().getPlayer(PCCWinner.getPlayerName());
    logit(""String_Node_Str"" + Loser + ""String_Node_Str""+ Winner+ ""String_Node_Str"");
    PlrWinner.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ Loser+ ChatColor.GOLD+ ""String_Node_Str"");
    for (int i=0; PCCLoser.getItems().size() > i; i++) {
      PlrWinner.getWorld().dropItemNaturally(PlrWinner.getLocation(),PCCLoser.getItems().get(i));
    }
  }
 else {
    logit(""String_Node_Str"");
  }
  PCCLoser.clearItems();
  return;
}"
43939,"public void updateTags(String playername,String originalPlayerName){
  PlayerCombatClass PCCPlr1=getPCC(playername);
  if (PCCPlr1.isTagged()) {
    logit(PCCPlr1.getPlayerName() + ""String_Node_Str"");
    if (PCCPlr1.tagExpired()) {
      logit(""String_Node_Str"");
      if (!(PCCPlr1.hasScheduledtask())) {
        if (!(getServer().getPlayer(PCCPlr1.getTaggedBy()) == null)) {
          logit(PCCPlr1.getPlayerName() + ""String_Node_Str"");
          PlayerCombatClass PCCPlr2=getPCC(PCCPlr1.getTaggedBy());
          logit(""String_Node_Str"");
          PCCPlr2.removeFromTaggedPlayers(PCCPlr1.getPlayerName());
          logit(""String_Node_Str"");
          PCCPlr1.removeTaggedBy();
        }
      }
 else {
        logit(PCCPlr1.getPlayerName() + ""String_Node_Str"");
        if (!(getServer().getPlayer(PCCPlr1.getPlayerName()) == null)) {
          logit(PCCPlr1.getTaggedBy() + ""String_Node_Str"");
          logit(""String_Node_Str"");
          getServer().getScheduler().cancelTask(PCCPlr1.getTasknumber());
          PCCPlr1.setScheduledtask(false);
          logit(PCCPlr1.getPlayerName() + ""String_Node_Str"");
          PlayerCombatClass PCCPlr2=getPCC(PCCPlr1.getTaggedBy());
          logit(""String_Node_Str"");
          PCCPlr2.removeFromTaggedPlayers(PCCPlr1.getPlayerName());
          logit(""String_Node_Str"");
          PCCPlr1.removeTaggedBy();
        }
      }
    }
  }
  if (PCCPlr1.hasTaggedPlayer()) {
    logit(PCCPlr1.getPlayerName() + ""String_Node_Str"");
    ArrayList<String> Myarray=PCCPlr1.getTaggedPlayers();
    logit(""String_Node_Str"");
    Iterator<String> itr=Myarray.iterator();
    ArrayList<String> backup=new ArrayList<String>();
    while (itr.hasNext()) {
      backup.add(itr.next());
    }
    Iterator<String> newitr=backup.iterator();
    while (newitr.hasNext()) {
      String currentplayer=newitr.next();
      if (originalPlayerName == currentplayer) {
        continue;
      }
      logit(""String_Node_Str"" + currentplayer);
      updateTags(currentplayer,originalPlayerName);
    }
  }
}","public void updateTags(String playername,Boolean Continue_deeper){
  PlayerCombatClass Tagged=getPCC(playername);
  if (Tagged.isTagged()) {
    if (Tagged.tagExpired()) {
      if (isPlrOnline(Tagged.getPlayerName())) {
        PlayerCombatClass Tagger=getPCC(Tagged.getTaggedBy());
        Tagged.removeTaggedBy();
        Tagger.removeFromTaggedPlayers(Tagged.getPlayerName());
      }
    }
  }
  if (Continue_deeper == true) {
    if (Tagged.hasTaggedPlayer()) {
      logit(Tagged.getPlayerName() + ""String_Node_Str"");
      ArrayList<String> Myarray=Tagged.getTaggedPlayers();
      logit(""String_Node_Str"");
      Iterator<String> itr=Myarray.iterator();
      ArrayList<String> backup=new ArrayList<String>();
      while (itr.hasNext()) {
        backup.add(itr.next());
      }
      Iterator<String> newitr=backup.iterator();
      while (newitr.hasNext()) {
        String currentplayer=newitr.next();
        logit(""String_Node_Str"" + currentplayer);
        updateTags(currentplayer,false);
      }
    }
  }
}"
43940,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (command.getName().equalsIgnoreCase(""String_Node_Str"") || command.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (sender instanceof Player) {
      if (args.length == 0) {
        Player CmdPlr=(Player)sender;
        PlayerCombatClass PCCPlr=getPCC(CmdPlr.getName());
        updateTags(PCCPlr.getPlayerName(),PCCPlr.getPlayerName());
        if (PCCPlr.isTagged()) {
          CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ PCCPlr.getTaggedBy()+ ChatColor.GOLD+ ""String_Node_Str""+ PCCPlr.tagPeriodInSeconds()+ ""String_Node_Str"");
          CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getGracePeriod() / 1000 + ""String_Node_Str"");
        }
 else {
          CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ PCCPlr.TaggedList());
        return true;
      }
    }
 else {
      log.info(""String_Node_Str"");
      return true;
    }
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (command.getName().equalsIgnoreCase(""String_Node_Str"") || command.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (sender instanceof Player) {
      if (args.length == 0) {
        Player CmdPlr=(Player)sender;
        PlayerCombatClass PCCPlr=getPCC(CmdPlr.getName());
        updateTags(PCCPlr.getPlayerName(),true);
        if (PCCPlr.isTagged()) {
          CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ PCCPlr.getTaggedBy()+ ChatColor.GOLD+ ""String_Node_Str""+ PCCPlr.tagPeriodInSeconds()+ ""String_Node_Str"");
          CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getGracePeriod() / 1000 + ""String_Node_Str"");
        }
 else {
          CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        CmdPlr.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ PCCPlr.TaggedList());
        return true;
      }
    }
 else {
      log.info(""String_Node_Str"");
      return true;
    }
  }
  return false;
}"
43941,"@Override public void onPlayerKick(PlayerKickEvent e){
  plugin.logit(""String_Node_Str"");
  Player Plr=e.getPlayer();
  plugin.logit(""String_Node_Str"");
  PlayerCombatClass PlrKicked=plugin.getPCC(Plr.getName());
  if (PlrKicked.isTagged()) {
    plugin.logit(""String_Node_Str"");
    PlayerCombatClass Tagger=plugin.getPCC(PlrKicked.getTaggedBy());
    plugin.logit(""String_Node_Str"");
    PlrKicked.removeTaggedBy();
    plugin.logit(""String_Node_Str"");
    Tagger.removeFromTaggedPlayers(PlrKicked.getPlayerName());
    plugin.logit(""String_Node_Str"");
    PlrKicked.setPvplogged(false);
    plugin.logit(""String_Node_Str"");
    PlrKicked.setGraceAndTagPast();
    if (PlrKicked.hasScheduledtask()) {
      plugin.logit(""String_Node_Str"");
      PlrKicked.setScheduledtask(false);
      plugin.getServer().getScheduler().cancelTask(PlrKicked.getTasknumber());
    }
  }
 else {
    plugin.logit(""String_Node_Str"");
  }
  return;
}","@Override public void onPlayerKick(PlayerKickEvent e){
  plugin.logit(""String_Node_Str"");
  Player Plr=e.getPlayer();
  plugin.logit(""String_Node_Str"");
  PlayerCombatClass PlrKicked=plugin.getPCC(Plr.getName());
  if (PlrKicked.isTagged()) {
    plugin.logit(""String_Node_Str"");
    PlayerCombatClass Tagger=plugin.getPCC(PlrKicked.getTaggedBy());
    plugin.logit(""String_Node_Str"");
    PlrKicked.removeTaggedBy();
    plugin.logit(""String_Node_Str"");
    Tagger.removeFromTaggedPlayers(PlrKicked.getPlayerName());
    plugin.logit(""String_Node_Str"");
    PlrKicked.setPvplogged(false);
    plugin.logit(""String_Node_Str"");
    if (PlrKicked.hasScheduledtask()) {
      plugin.logit(""String_Node_Str"");
      PlrKicked.setScheduledtask(false);
      plugin.getServer().getScheduler().cancelTask(PlrKicked.getTasknumber());
    }
  }
 else {
    plugin.logit(""String_Node_Str"");
  }
  plugin.logit(""String_Node_Str"" + new Boolean(PlrKicked.hasTaggedPlayer()).toString());
  if (PlrKicked.hasTaggedPlayer()) {
    ArrayList<String> Myarray=PlrKicked.getTaggedPlayers();
    plugin.logit(""String_Node_Str"");
    Iterator<String> itr=Myarray.iterator();
    ArrayList<String> backup=new ArrayList<String>();
    while (itr.hasNext()) {
      String temp=itr.next();
      plugin.logit(temp + ""String_Node_Str"" + PlrKicked.getPlayerName()+ ""String_Node_Str"");
      backup.add(temp);
    }
    Iterator<String> newitr=backup.iterator();
    while (newitr.hasNext()) {
      PlayerCombatClass PCCPlr2=plugin.getPCC(newitr.next());
      plugin.logit(""String_Node_Str"");
      PlrKicked.removeFromTaggedPlayers(PCCPlr2.getPlayerName());
      plugin.logit(""String_Node_Str"");
      PCCPlr2.removeTaggedBy();
    }
  }
  return;
}"
43942,"@Override public void onPlayerQuit(PlayerQuitEvent e){
}","@Override public void onPlayerQuit(PlayerQuitEvent e){
  final Player quitter=e.getPlayer();
  final PlayerCombatClass CCQuitter=plugin.getPCC(quitter.getName());
  if (CCQuitter.isTagged()) {
    if (!(CCQuitter.tagExpired())) {
      plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
      CCQuitter.setItems(quitter);
      if (!(CCQuitter.hasScheduledtask())) {
        plugin.logit(""String_Node_Str"");
        CCQuitter.setScheduledtask(true);
        CCQuitter.setGracePeriod(plugin.getGracePeriod());
        if (!((plugin.getServer().getPlayer(CCQuitter.getTaggedBy())) == null)) {
          plugin.getServer().getPlayer(CCQuitter.getTaggedBy()).sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ CCQuitter.getPlayerName()+ ChatColor.GOLD+ ""String_Node_Str""+ (plugin.getGracePeriod() / 1000)+ ""String_Node_Str"");
        }
        CombatTagRunnable cr=new CombatTagRunnable(CCQuitter.getPlayerName());
        CCQuitter.setTasknumber(plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,cr,(CCQuitter.getGracePeriod() / 50)));
      }
 else {
        plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
      }
    }
 else {
    }
  }
 else {
    plugin.logit(quitter.getName() + ""String_Node_Str"");
  }
}"
43943,"@Override public void run(){
  PlayerCombatClass CCQuitter=plugin.getPCC(name);
  CCQuitter.setScheduledtask(false);
  if (plugin.getServer().getPlayer(CCQuitter.getPlayerName()) == null) {
    plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
    if (CCQuitter.isTagged()) {
      CCQuitter.setPvplogged(true);
      if (plugin.getPenalty().equals(""String_Node_Str"")) {
        if (plugin.getInventoryClear()) {
          plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
        }
      }
    }
  }
 else {
    CCQuitter.removeTaggedBy();
    plugin.getPCC(CCQuitter.getTaggedBy()).removeFromTaggedPlayers(CCQuitter.getPlayerName());
  }
}","@Override public void run(){
  plugin.logit(""String_Node_Str"");
  PlayerCombatClass CCQuitter=plugin.getPCC(name);
  CCQuitter.setScheduledtask(false);
  if (!(plugin.isPlrOnline(CCQuitter.getPlayerName()))) {
    plugin.logit(CCQuitter.getPlayerName() + ""String_Node_Str"");
    if (CCQuitter.isTagged()) {
      CCQuitter.setPvplogged(true);
      if (plugin.getPenalty().equals(""String_Node_Str"")) {
        if (plugin.getInventoryClear()) {
          plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
        }
      }
    }
  }
 else {
    plugin.logit(""String_Node_Str"");
    if (!(plugin.getServer().getPlayer(CCQuitter.getPlayerName()).isOnline())) {
      if (plugin.getPenalty().equals(""String_Node_Str"")) {
        if (plugin.getInventoryClear()) {
          plugin.dropitemsandclearPCCitems(CCQuitter.getTaggedBy(),CCQuitter.getPlayerName());
        }
      }
    }
 else {
      removetaggedbyandremovefromtaggedplayers(CCQuitter);
    }
  }
}"
43944,"@Override public void onPlayerJoin(PlayerJoinEvent e){
  Player p=e.getPlayer();
  if (!plugin.isinPlayerList(p.getName())) {
    plugin.logit(""String_Node_Str"");
    plugin.addtoPCC(p);
  }
  PlayerCombatClass PlrComClass=plugin.getPCC(p.getName());
  if (PlrComClass.hasPvplogged()) {
    plugin.killAndClean(p);
    if (PlrComClass.isTagged()) {
      PlayerCombatClass tagger=plugin.getPCC(PlrComClass.getTaggedBy());
      plugin.getServer().broadcastMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ p.getName()+ ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str""+ ChatColor.RED+ PlrComClass.getTaggedBy());
      tagger.removeFromTaggedPlayers(PlrComClass.getPlayerName());
    }
 else {
      plugin.getServer().broadcastMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ p.getName()+ ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    PlrComClass.removeTaggedBy();
    PlrComClass.setPvplogged(false);
  }
 else   if (plugin.checkpvplogger(p.getName())) {
    plugin.killAndClean(p);
    plugin.logit(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
    plugin.removepvplogger(p.getName());
    plugin.getServer().broadcastMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ p.getName()+ ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
  }
  return;
}","@Override public void onPlayerJoin(PlayerJoinEvent e){
  Player p=e.getPlayer();
  if (!plugin.isinPlayerList(p.getName())) {
    plugin.logit(""String_Node_Str"");
    plugin.addtoPCC(p);
  }
  PlayerCombatClass PlrComClass=plugin.getPCC(p.getName());
  if (PlrComClass.hasPvplogged()) {
    plugin.killAndClean(p);
    if (PlrComClass.isTagged()) {
      PlayerCombatClass tagger=plugin.getPCC(PlrComClass.getTaggedBy());
      plugin.getServer().broadcastMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ p.getName()+ ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str""+ ChatColor.RED+ PlrComClass.getTaggedBy());
      tagger.removeFromTaggedPlayers(PlrComClass.getPlayerName());
    }
 else {
      plugin.getServer().broadcastMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ p.getName()+ ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    PlrComClass.removeTaggedBy();
    PlrComClass.setPvplogged(false);
  }
 else   if (plugin.checkpvplogger(p.getName())) {
    plugin.killAndClean(p);
    plugin.logit(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
    plugin.removepvplogger(p.getName());
    plugin.getServer().broadcastMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ p.getName()+ ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    PlayerCombatClass PlrLogin=plugin.getPCC(p.getName());
    if (PlrLogin.isTagged()) {
      if (PlrLogin.hasScheduledtask()) {
        plugin.getServer().getScheduler().cancelTask(PlrLogin.getTasknumber());
        PlrLogin.setScheduledtask(false);
        PlrLogin.setTagExpiration(plugin.getDelay());
      }
    }
  }
  return;
}"
43945,"private static LoggerProvider findProvider(){
  try {
    final LogManager jdkLogManager=LogManager.getLogManager();
    if (jdkLogManager.getClass().getName().equals(""String_Node_Str"")) {
      return new JBossLogManagerProvider();
    }
  }
 catch (  Throwable t) {
  }
  final ClassLoader cl=getClassLoader();
  try {
    Class.forName(""String_Node_Str"",true,cl);
    Class.forName(""String_Node_Str"",true,cl);
    return new Log4jLoggerProvider();
  }
 catch (  Throwable t) {
  }
  try {
    Class.forName(""String_Node_Str"",false,cl);
    return new Slf4jLoggerProvider();
  }
 catch (  Throwable t) {
  }
  return new JDKLoggerProvider();
}","private static LoggerProvider findProvider(){
  try {
    final LogManager jdkLogManager=LogManager.getLogManager();
    if (jdkLogManager.getClass().getName().equals(""String_Node_Str"")) {
      Class.forName(""String_Node_Str"",false,LoggerProviders.class.getClassLoader());
      return new JBossLogManagerProvider();
    }
  }
 catch (  Throwable t) {
  }
  final ClassLoader cl=getClassLoader();
  try {
    Class.forName(""String_Node_Str"",true,cl);
    Class.forName(""String_Node_Str"",true,cl);
    return new Log4jLoggerProvider();
  }
 catch (  Throwable t) {
  }
  try {
    Class.forName(""String_Node_Str"",false,cl);
    return new Slf4jLoggerProvider();
  }
 catch (  Throwable t) {
  }
  return new JDKLoggerProvider();
}"
43946,"public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {
    Intent intent;
    intent=new Intent(""String_Node_Str"");
    getBaseContext().sendBroadcast(intent);
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
    Intent intent;
    intent=new Intent(""String_Node_Str"");
    getBaseContext().sendBroadcast(intent);
    return true;
  }
 else {
    return super.onKeyDown(keyCode,event);
  }
}","public boolean onKeyDown(int keyCode,KeyEvent event){
  Intent intent;
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
    intent=new Intent(""String_Node_Str"");
  getBaseContext().sendBroadcast(intent);
return true;
case KeyEvent.KEYCODE_VOLUME_UP:
intent=new Intent(""String_Node_Str"");
getBaseContext().sendBroadcast(intent);
return true;
case KeyEvent.KEYCODE_BACK:
case KeyEvent.KEYCODE_HOME:
return true;
default :
return super.onKeyDown(keyCode,event);
}
}"
43947,"public void setCustomBackground(){
  if (utils.getCheckBoxPref(this,LockscreenSettings.KEY_SHOW_CUSTOM_BG,false)) {
    String BG_FILE=getFilesDir().toString() + File.separator + LockscreenSettings.BG_PHOTO_FILE;
    Bitmap bgBitmap=BitmapFactory.decodeFile(BG_FILE);
    BitmapDrawable background=new BitmapDrawable(getResources(),bgBitmap);
    background.setGravity(Gravity.CENTER);
    getWindow().setBackgroundDrawable(background);
  }
 else {
    getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
  }
}","public void setCustomBackground(){
  if (utils.getCheckBoxPref(this,LockscreenSettings.KEY_SHOW_CUSTOM_BG,false)) {
    if (bgBitmap != null) {
      bgBitmap.recycle();
      bgBitmap=null;
      System.gc();
    }
    String BG_FILE=getFilesDir().toString() + File.separator + LockscreenSettings.BG_PHOTO_FILE;
    bgBitmap=BitmapFactory.decodeFile(BG_FILE);
    BitmapDrawable background=new BitmapDrawable(getResources(),bgBitmap);
    background.setGravity(Gravity.CENTER);
    getWindow().setBackgroundDrawable(background);
  }
 else {
    getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
  }
}"
43948,"@Override public void onStart(Intent aIntent,int aStartId){
  if (aIntent == null)   return;
  final String action=aIntent.getAction();
  if (action == null)   return;
  if (action.equals(""String_Node_Str"") && getPlayer() == 1) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 1) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.android.music.IMediaPlaybackService mService=com.android.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 2) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 2) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.htc.music.IMediaPlaybackService mService=com.htc.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 3) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 3) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.piratemedia.musicmod.IMediaPlaybackService mService=com.piratemedia.musicmod.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 4) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 4) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.tbig.playerpro.IMediaPlaybackService mService=com.tbig.playerpro.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(SMS_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(PHONE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(MUTE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
    notifyChange(BT_CHANGED);
  }
 else   if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Intent lock=utils.getLockIntent(this);
    lock.setAction(utils.ACTION_UNLOCK);
    startActivity(lock);
  }
 else   if (action.equals(START_STOP_FORGROUND)) {
    foregroundStuff(utils.getCheckBoxPref(getBaseContext(),LockscreenSettings.SERVICE_FOREGROUND,true));
  }
 else   if (action.equals(STOP_SERVICE)) {
    stopSelf();
  }
}","@Override public void onStart(Intent aIntent,int aStartId){
  if (aIntent == null)   return;
  final String action=aIntent.getAction();
  if (action == null)   return;
  if (action.equals(""String_Node_Str"") && getPlayer() == 1) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 1) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.android.music.IMediaPlaybackService mService=com.android.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 2) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 2) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.htc.music.IMediaPlaybackService mService=com.htc.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 3) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 3) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.piratemedia.musicmod.IMediaPlaybackService mService=com.piratemedia.musicmod.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 4) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 4) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.tbig.playerpro.IMediaPlaybackService mService=com.tbig.playerpro.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(SMS_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(PHONE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(MUTE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
    notifyChange(BT_CHANGED);
  }
 else   if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Intent lock=utils.getLockIntent(this);
    lock.setAction(utils.ACTION_UNLOCK);
    startActivity(lock);
  }
 else   if (action.equals(START_STOP_FORGROUND)) {
    foregroundStuff(utils.getCheckBoxPref(getBaseContext(),LockscreenSettings.SERVICE_FOREGROUND,true));
  }
 else   if (action.equals(STOP_SERVICE)) {
    stopSelf();
  }
}"
43949,"/** 
 * ADW: Apply and store the theme stuff
 * @param v
 */
public void applyTheme(View v){
  PreviewPreference themePreview=(PreviewPreference)findPreference(""String_Node_Str"");
  String packageName=themePreview.getValue().toString();
  SharedPreferences sp=getPreferenceManager().getSharedPreferences();
  SharedPreferences.Editor editor=sp.edit();
  editor.putString(""String_Node_Str"",packageName);
  if (!packageName.equals(LockscreenSettings.THEME_DEFAULT)) {
    Resources themeResources=null;
    try {
      themeResources=getPackageManager().getResourcesForApplication(packageName.toString());
    }
 catch (    NameNotFoundException e) {
    }
    if (themeResources != null) {
      int tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_control_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",music_control_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int text_notif_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",text_notif_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean background_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",background_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean allow_art_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",allow_art_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean show_icons=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",show_icons);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean simple_text_notif=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",simple_text_notif);
      }
    }
  }
 else {
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
  }
  editor.commit();
  startActivity(new Intent(getBaseContext(),LockscreenSettings.class));
  finish();
}","/** 
 * ADW: Apply and store the theme stuff
 * @param v
 */
public void applyTheme(View v){
  PreviewPreference themePreview=(PreviewPreference)findPreference(""String_Node_Str"");
  String packageName=themePreview.getValue().toString();
  SharedPreferences sp=getPreferenceManager().getSharedPreferences();
  SharedPreferences.Editor editor=sp.edit();
  editor.putString(""String_Node_Str"",packageName);
  if (!packageName.equals(LockscreenSettings.THEME_DEFAULT)) {
    Resources themeResources=null;
    try {
      themeResources=getPackageManager().getResourcesForApplication(packageName.toString());
    }
 catch (    NameNotFoundException e) {
    }
    if (themeResources != null) {
      int tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_control_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",music_control_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int text_notif_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",text_notif_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean background_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",background_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean allow_art_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",allow_art_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean show_icons=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",show_icons);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean simple_text_notif=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",simple_text_notif);
      }
    }
  }
 else {
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
  }
  editor.commit();
  if (utils.getCheckBoxPref(getBaseContext(),SMALL_TEXT_KEY,false)) {
    utils.setCheckBoxPref(getBaseContext(),GMAIL_ACCOUNT_KEY,false);
    utils.setCheckBoxPref(getBaseContext(),GMAIL_MERGE_KEY,true);
  }
  startActivity(new Intent(getBaseContext(),LockscreenSettings.class));
  finish();
}"
43950,"public void causeAjaxErrorActionListener(AjaxBehaviorEvent event){
  getResponse().setStatus(501);
}","public void causeAjaxErrorActionListener(ActionEvent event){
  getResponse().setStatus(501);
}"
43951,"@Test @Uses({@Use(field=""String_Node_Str"",enumeration=true),@Use(field=""String_Node_Str"",enumeration=true)}) public void testDirectionAndMethod(){
  notifyStackAttributes.set(NotifyStackAttributes.direction,direction.name().toLowerCase(Locale.ENGLISH));
  notifyStackAttributes.set(NotifyStackAttributes.method,method.name().toLowerCase(Locale.ENGLISH));
  notifyStackAttributes.set(NotifyStackAttributes.position,""String_Node_Str"");
  generateMessagesWithWait(3);
  NotifyMessage firstMessage=getMessageWithNumber(1);
  NotifyMessage secondMessage=getMessageWithNumber(2);
  NotifyMessage thirdMessage=getMessageWithNumber(3);
  Locations locationsM1=Utils.getLocations(firstMessage.getRoot());
  Locations locationsM2=Utils.getLocations(secondMessage.getRoot());
  Locations locationsM3=Utils.getLocations(thirdMessage.getRoot());
  if (method.equals(Method.FIRST)) {
    Assert.assertTrue(direction.isAfter(locationsM1,locationsM2));
    Assert.assertTrue(direction.isAfter(locationsM2,locationsM3));
  }
 else   if (method.equals(Method.LAST)) {
    Assert.assertFalse(direction.isAfter(locationsM1,locationsM2));
    Assert.assertFalse(direction.isAfter(locationsM2,locationsM3));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + method);
  }
}","@Test @Uses({@Use(field=""String_Node_Str"",enumeration=true),@Use(field=""String_Node_Str"",enumeration=true)}) public void testDirectionAndMethod(){
  notifyStackAttributes.set(NotifyStackAttributes.direction,direction.name().toLowerCase(Locale.ENGLISH));
  notifyStackAttributes.set(NotifyStackAttributes.method,method.name().toLowerCase(Locale.ENGLISH));
  notifyStackAttributes.set(NotifyStackAttributes.position,""String_Node_Str"");
  waiting(500);
  generateMessagesWithWait(3);
  NotifyMessage firstMessage=getMessageWithNumber(1);
  NotifyMessage secondMessage=getMessageWithNumber(2);
  NotifyMessage thirdMessage=getMessageWithNumber(3);
  Locations locationsM1=Utils.getLocations(firstMessage.getRoot());
  Locations locationsM2=Utils.getLocations(secondMessage.getRoot());
  Locations locationsM3=Utils.getLocations(thirdMessage.getRoot());
  if (method.equals(Method.FIRST)) {
    Assert.assertTrue(direction.isAfter(locationsM1,locationsM2));
    Assert.assertTrue(direction.isAfter(locationsM2,locationsM3));
  }
 else   if (method.equals(Method.LAST)) {
    Assert.assertFalse(direction.isAfter(locationsM1,locationsM2));
    Assert.assertFalse(direction.isAfter(locationsM2,locationsM3));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + method);
  }
}"
43952,"@Test public void testRerenderStack(){
  generateMessagesWithWait(3);
  Assert.assertEquals(notify.size(),3,""String_Node_Str"");
  MetamerPage.waitRequest(rerenderStackButton,WaitRequestType.XHR).click();
  Graphene.waitAjax().until(new ExpectedCondition<Boolean>(){
    @Override public Boolean apply(    WebDriver from){
      return notify.size() == 0;
    }
  }
);
  Assert.assertEquals(notify.size(),0,""String_Node_Str"");
}","@Test public void testRerenderStack(){
  waiting(500);
  generateMessagesWithWait(3);
  Assert.assertEquals(notify.size(),3,""String_Node_Str"");
  MetamerPage.waitRequest(rerenderStackButton,WaitRequestType.XHR).click();
  Graphene.waitAjax().until(new ExpectedCondition<Boolean>(){
    @Override public Boolean apply(    WebDriver from){
      return notify.size() == 0;
    }
  }
);
  Assert.assertEquals(notify.size(),0,""String_Node_Str"");
}"
43953,"@Test @Use(field=""String_Node_Str"",enumeration=true) public void testPosition(){
  notifyStackAttributes.set(NotifyStackAttributes.position,position.value);
  generateMessagesWithWait(3);
  NotifyMessage firstMessage=getMessageWithNumber(1);
  NotifyMessage secondMessage=getMessageWithNumber(2);
  NotifyMessage thirdMessage=getMessageWithNumber(3);
  Assert.assertEquals(firstMessage.getPosition(),position.getPosition());
  Assert.assertEquals(secondMessage.getPosition(),position.getPosition());
  Assert.assertEquals(thirdMessage.getPosition(),position.getPosition());
}","@Test @Use(field=""String_Node_Str"",enumeration=true) public void testPosition(){
  notifyStackAttributes.set(NotifyStackAttributes.position,position.value);
  waiting(500);
  generateMessagesWithWait(3);
  NotifyMessage firstMessage=getMessageWithNumber(1);
  NotifyMessage secondMessage=getMessageWithNumber(2);
  NotifyMessage thirdMessage=getMessageWithNumber(3);
  Assert.assertEquals(firstMessage.getPosition(),position.getPosition());
  Assert.assertEquals(secondMessage.getPosition(),position.getPosition());
  Assert.assertEquals(thirdMessage.getPosition(),position.getPosition());
}"
43954,"public void testRequestEventsBefore(WebElement attributesTable,String... events){
  for (  String event : events) {
    String inputExp=format(""String_Node_Str"",event);
    WebElement input=attributesTable.findElement(By.cssSelector(inputExp));
    String inputVal=format(""String_Node_Str"",event);
    String inputValFull=""String_Node_Str"" + inputVal + ""String_Node_Str"";
    input.clear();
    waiting(1000);
    input=attributesTable.findElement(By.cssSelector(inputExp));
    input.sendKeys(inputValFull);
    waiting(300);
    Graphene.waitAjax().until(ElementPresent.getInstance().element(attributesTable));
    input=attributesTable.findElement(By.cssSelector(inputExp));
    MetamerPage.waitRequest(input,WaitRequestType.HTTP).submit();
  }
  cleanMetamerEventsVariable();
}","public void testRequestEventsBefore(WebElement attributesTable,String... events){
  for (  String event : events) {
    String inputExp=format(""String_Node_Str"",event);
    WebElement input=attributesTable.findElement(By.cssSelector(inputExp));
    String inputVal=format(""String_Node_Str"",event);
    String inputValFull=""String_Node_Str"" + inputVal + ""String_Node_Str"";
    input.clear();
    waiting(1000);
    input=attributesTable.findElement(By.cssSelector(inputExp));
    input.sendKeys(inputValFull);
    waiting(300);
    Graphene.waitAjax().until().element(attributesTable).is().present();
    input=attributesTable.findElement(By.cssSelector(inputExp));
    MetamerPage.waitRequest(input,WaitRequestType.HTTP).submit();
  }
  cleanMetamerEventsVariable();
}"
43955,"public void addNewTabToCollection(){
  UITab tab=new UITab();
  int index=tabs.size() + 6;
  tab.setHeader(""String_Node_Str"" + index + ""String_Node_Str"");
  tab.setId(""String_Node_Str"" + index);
  tab.setName(""String_Node_Str"" + index);
  tab.setRender(""String_Node_Str"" + index);
  tabs.add(tab);
}","public void addNewTabToCollection(){
  UITab tab=new UITab();
  int index=tabs.size() + 6;
  tab.setHeader(""String_Node_Str"" + index + ""String_Node_Str"");
  tab.setId(""String_Node_Str"" + index);
  tab.setName(""String_Node_Str"" + index);
  tabs.add(tab);
}"
43956,"public void attachNewTabProgramatically(){
  UITab tab=(UITab)FacesContext.getCurrentInstance().getApplication().createComponent(UITab.COMPONENT_TYPE);
  int index=tabPanel.getChildren().size() + 1;
  tab.setHeader(""String_Node_Str"" + index + ""String_Node_Str"");
  tab.setId(""String_Node_Str"" + index);
  tab.setName(""String_Node_Str"" + index);
  tab.setRender(""String_Node_Str"" + index);
  tabPanel.getChildren().add(tab);
}","public void attachNewTabProgramatically(){
  UITab tab=(UITab)FacesContext.getCurrentInstance().getApplication().createComponent(UITab.COMPONENT_TYPE);
  int index=tabPanel.getChildren().size() + 1;
  tab.setHeader(""String_Node_Str"" + index + ""String_Node_Str"");
  tab.setId(""String_Node_Str"" + index);
  tab.setName(""String_Node_Str"" + index);
  tabPanel.getChildren().add(tab);
}"
43957,"protected void checkEvent(String text,int number){
  LogEntries filter=log.getLogEntries(LogEntryLevel.INFO).filter(new RichFacesFilterBuilder().filterToContentContains(text));
  int logEntriesWithContent=filter.size();
  assertEquals(logEntriesWithContent,number,""String_Node_Str"");
}","protected void checkEvent(String text,int number){
  LogEntries filter=log.getLogEntries(LogEntryLevel.INFO).filter(new RichFacesLogFilterBuilder().filterToContentContains(text));
  int logEntriesWithContent=filter.size();
  assertEquals(logEntriesWithContent,number,""String_Node_Str"");
}"
43958,"public void generateNewTab(){
  logger.info(""String_Node_Str"");
  int i=tabBeans.size();
  String idBase=""String_Node_Str"" + (i + 6);
  tabBeans.add(new TabBean(idBase,idBase,idBase + ""String_Node_Str"",""String_Node_Str"" + idBase));
  logger.info(""String_Node_Str"" + tabBeans.size() + ""String_Node_Str"");
}","public void generateNewTab(){
  logger.info(""String_Node_Str"");
  String idBase=""String_Node_Str"" + ++tabIdLast;
  tabBeans.add(new TabBean(idBase,idBase,idBase + ""String_Node_Str"",""String_Node_Str"" + idBase));
  logger.info(""String_Node_Str"" + tabBeans.size() + ""String_Node_Str"");
}"
43959,"@Test public void testSortByCapitalName(){
  clickOnParticularSortAnchorCheckFirstRow(sortByCapitalName,FIRST_STATE_SORTED_BY_CAPITAL_ASCENDING_ORDER,FIRST_STATE_SORTED_BY_CAPITAL_DESCENDING_ORDER,""String_Node_Str"",""String_Node_Str"");
}","@Test public void testSortByCapitalName(){
  clickOnParticularSortAnchorCheckFirstRow(page.sortByCapitalName,FIRST_STATE_SORTED_BY_CAPITAL_ASCENDING_ORDER,FIRST_STATE_SORTED_BY_CAPITAL_DESCENDING_ORDER,""String_Node_Str"",""String_Node_Str"");
}"
43960,"@Test public void testSortByStateName(){
  clickOnParticularSortAnchorCheckFirstRow(sortByStateName,FIRST_STATE_SORTED_BY_STATE_ASCENDING_ORDER,FIRST_STATE_SORTED_BY_STATE_DESCENDING_ORDER,""String_Node_Str"",""String_Node_Str"");
}","@Test public void testSortByStateName(){
  clickOnParticularSortAnchorCheckFirstRow(page.sortByStateName,FIRST_STATE_SORTED_BY_STATE_ASCENDING_ORDER,FIRST_STATE_SORTED_BY_STATE_DESCENDING_ORDER,""String_Node_Str"",""String_Node_Str"");
}"
43961,"@Test public void testSortByTimeZone(){
  clickOnParticularSortAnchorCheckFirstRow(sortByTimeZone,FIRST_STATE_SORTED_BY_TIME_ZONE_ASCENDING_ORDER,FIRST_STATE_SORTED_BY_TIME_ZONE_DESCENDING_ORDER,""String_Node_Str"",""String_Node_Str"");
}","@Test public void testSortByTimeZone(){
  clickOnParticularSortAnchorCheckFirstRow(page.sortByTimeZone,FIRST_STATE_SORTED_BY_TIME_ZONE_ASCENDING_ORDER,FIRST_STATE_SORTED_BY_TIME_ZONE_DESCENDING_ORDER,""String_Node_Str"",""String_Node_Str"");
}"
43962,"/** 
 * Sorts table and checks the first row according to expected first row
 * @param sortBy
 * @param ascendingState expected state
 * @param descendingState expected state
 * @param ascendingError
 * @param descendingError
 */
private void clickOnParticularSortAnchorCheckFirstRow(JQueryLocator sortBy,StateWithCapitalAndTimeZone ascendingState,StateWithCapitalAndTimeZone descendingState,String ascendingError,String descendingError){
  guardXhr(selenium).click(sortBy);
  StateWithCapitalAndTimeZone actualState=initializeStateDataFromRow();
  assertEquals(actualState,ascendingState,ascendingError);
  guardXhr(selenium).click(sortBy);
  actualState=initializeStateDataFromRow();
  assertEquals(actualState,descendingState,descendingError);
}","/** 
 * Sorts table and checks the first row according to expected first row
 * @param sortBy
 * @param ascendingState expected state
 * @param descendingState expected state
 * @param ascendingError
 * @param descendingError
 */
private void clickOnParticularSortAnchorCheckFirstRow(WebElement sortBy,StateWithCapitalAndTimeZone ascendingState,StateWithCapitalAndTimeZone descendingState,String ascendingError,String descendingError){
  Graphene.guardXhr(sortBy).click();
  StateWithCapitalAndTimeZone actualState=initializeStateDataFromRow();
  assertEquals(actualState,ascendingState,ascendingError);
  Graphene.guardXhr(sortBy).click();
  actualState=initializeStateDataFromRow();
  assertEquals(actualState,descendingState,descendingError);
}"
43963,"/** 
 * returns new StateWithCapitalAndTimeZone, which is initialized byt the data in the partilucal row
 * @param row
 * @return
 */
private StateWithCapitalAndTimeZone initializeStateDataFromRow(){
  JQueryLocator tds=jq(firstRow.getRawLocator() + ""String_Node_Str"");
  String capitalName=null;
  String stateName=null;
  String timeZone=null;
  int i=0;
  for (Iterator<JQueryLocator> iterator=tds.iterator(); iterator.hasNext(); ) {
    JQueryLocator currentTd=iterator.next();
switch (i) {
case 1:
      capitalName=selenium.getText(currentTd);
    break;
case 2:
  stateName=selenium.getText(currentTd);
break;
case 3:
timeZone=selenium.getText(currentTd);
break;
default :
break;
}
i++;
}
return new StateWithCapitalAndTimeZone(stateName,capitalName,timeZone);
}","/** 
 * returns new StateWithCapitalAndTimeZone, which is initialized byt the data in the partilucal row
 * @param row
 * @return
 */
private StateWithCapitalAndTimeZone initializeStateDataFromRow(){
  List<WebElement> tds=page.firstRow.findElements(By.tagName(""String_Node_Str""));
  String capitalName=null;
  String stateName=null;
  String timeZone=null;
  int i=0;
  for (Iterator<WebElement> iterator=tds.iterator(); iterator.hasNext(); ) {
    WebElement currentTd=iterator.next();
switch (i) {
case 1:
      capitalName=currentTd.getText();
    break;
case 2:
  stateName=currentTd.getText();
break;
case 3:
timeZone=currentTd.getText();
break;
default :
break;
}
i++;
}
return new StateWithCapitalAndTimeZone(stateName,capitalName,timeZone);
}"
43964,"/** 
 * Initializes the managed bean.
 */
@PostConstruct public void init(){
  logger=LoggerFactory.getLogger(getClass());
  logger.debug(""String_Node_Str"" + getClass().getName());
  attributesNotify=Attributes.getComponentAttributesFromFacesConfig(UINotify.class,getClass());
  attributesNotifyMessages=Attributes.getComponentAttributesFromFacesConfig(UINotifyMessages.class,getClass());
  attributesNotifyStackFirst=Attributes.getComponentAttributesFromFacesConfig(UINotifyStack.class,getClass());
  attributesNotifyStackSecond=Attributes.getComponentAttributesFromFacesConfig(UINotifyStack.class,getClass());
  attributesBean=Attributes.getEmptyAttributes(getClass());
  attributesNotify.setAttribute(""String_Node_Str"",false);
  attributesNotify.get(""String_Node_Str"").setType(Boolean.class);
  attributesNotify.setAttribute(""String_Node_Str"",null);
  attributesNotify.setAttribute(""String_Node_Str"",DEFAULT_DETAIL);
  attributesNotify.setAttribute(""String_Node_Str"",true);
  attributesNotify.setAttribute(""String_Node_Str"",true);
  attributesNotify.setAttribute(""String_Node_Str"",100000);
  attributesNotify.setAttribute(""String_Node_Str"",DEFAULT_SUMMARY);
  attributesNotify.remove(""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",false);
  attributesNotifyMessages.get(""String_Node_Str"").setType(Boolean.class);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",100);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",true);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",100000);
  attributesNotifyMessages.remove(""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",800);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",true);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",true);
  attributesNotifyMessages.remove(""String_Node_Str"");
  attributesNotifyMessages.remove(""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",true);
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",true);
  attributesBean.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesBean.setAttribute(""String_Node_Str"",DEFAULT_DETAIL);
  attributesBean.setAttribute(""String_Node_Str"",DEFAULT_SUMMARY);
}","/** 
 * Initializes the managed bean.
 */
@PostConstruct public void init(){
  logger=LoggerFactory.getLogger(getClass());
  logger.debug(""String_Node_Str"" + getClass().getName());
  attributesNotify=Attributes.getComponentAttributesFromFacesConfig(UINotify.class,getClass());
  attributesNotifyMessages=Attributes.getComponentAttributesFromFacesConfig(HtmlNotifyMessages.class,getClass());
  attributesNotifyStackFirst=Attributes.getComponentAttributesFromFacesConfig(UINotifyStack.class,getClass());
  attributesNotifyStackSecond=Attributes.getComponentAttributesFromFacesConfig(UINotifyStack.class,getClass());
  attributesBean=Attributes.getEmptyAttributes(getClass());
  attributesNotify.setAttribute(""String_Node_Str"",false);
  attributesNotify.get(""String_Node_Str"").setType(Boolean.class);
  attributesNotify.setAttribute(""String_Node_Str"",null);
  attributesNotify.setAttribute(""String_Node_Str"",DEFAULT_DETAIL);
  attributesNotify.setAttribute(""String_Node_Str"",true);
  attributesNotify.setAttribute(""String_Node_Str"",true);
  attributesNotify.setAttribute(""String_Node_Str"",100000);
  attributesNotify.setAttribute(""String_Node_Str"",DEFAULT_SUMMARY);
  attributesNotify.remove(""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",false);
  attributesNotifyMessages.get(""String_Node_Str"").setType(Boolean.class);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",null);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",100);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",true);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",100000);
  attributesNotifyMessages.remove(""String_Node_Str"");
  attributesNotifyMessages.setAttribute(""String_Node_Str"",800);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",true);
  attributesNotifyMessages.setAttribute(""String_Node_Str"",true);
  attributesNotifyMessages.remove(""String_Node_Str"");
  attributesNotifyMessages.remove(""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackFirst.setAttribute(""String_Node_Str"",true);
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesNotifyStackSecond.setAttribute(""String_Node_Str"",true);
  attributesBean.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributesBean.setAttribute(""String_Node_Str"",DEFAULT_DETAIL);
  attributesBean.setAttribute(""String_Node_Str"",DEFAULT_SUMMARY);
}"
43965,"@PostConstruct public void init(){
  log.debug(""String_Node_Str"");
  attributes=Attributes.getComponentAttributesFromFacesConfig(UIContextMenu.class,getClass());
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
}","@PostConstruct public void init(){
  log=LoggerFactory.getLogger(getClass());
  log.debug(""String_Node_Str"");
  attributes=Attributes.getComponentAttributesFromFacesConfig(UIContextMenu.class,getClass());
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
  attributes.setAttribute(""String_Node_Str"",""String_Node_Str"");
}"
43966,"@Test public void testSizeExceededLabel(){
  String testData=""String_Node_Str"";
  fileUploadAttributes.set(FileUploadAttributes.sizeExceededLabel,testData);
  sendFile(bigFile,true,false);
  assertEquals(testData,page.uploadStatusLabel.getText(),""String_Node_Str"");
}","@Test public void testSizeExceededLabel(){
  String testData=""String_Node_Str"";
  fileUploadAttributes.set(FileUploadAttributes.sizeExceededLabel,testData);
  sendFile(bigFile,true,false);
  new WebDriverWait(driver,2).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(page.uploadStatusLabel));
  assertEquals(testData,page.uploadStatusLabel.getText(),""String_Node_Str"");
}"
43967,"@Test @IssueTracking(""String_Node_Str"") public void testRendered(){
  outputPanelAttributes.set(OutputPanelAttributes.rendered,false);
  assertFalse(selenium.isElementPresent(outputDiv),""String_Node_Str"");
  String timeValue=selenium.getText(time);
  guardXhr(selenium).click(increaseCounterButton);
  waitGui.failWith(""String_Node_Str"").waitForChange(timeValue,retrieveText.locator(time));
  timeValue=selenium.getText(time);
  guardXhr(selenium).click(increaseCounterButton);
  waitGui.failWith(""String_Node_Str"").waitForChange(timeValue,retrieveText.locator(time));
  outputPanelAttributes.set(OutputPanelAttributes.rendered,true);
  assertTrue(selenium.isElementPresent(outputDiv),""String_Node_Str"");
  String counter=selenium.getText(outputDiv);
  assertEquals(counter,""String_Node_Str"",""String_Node_Str"");
}","@Test @RegressionTest(""String_Node_Str"") public void testRendered(){
  outputPanelAttributes.set(OutputPanelAttributes.rendered,false);
  assertFalse(selenium.isElementPresent(outputDiv),""String_Node_Str"");
  String timeValue=selenium.getText(time);
  guardXhr(selenium).click(increaseCounterButton);
  waitGui.failWith(""String_Node_Str"").waitForChange(timeValue,retrieveText.locator(time));
  timeValue=selenium.getText(time);
  guardXhr(selenium).click(increaseCounterButton);
  waitGui.failWith(""String_Node_Str"").waitForChange(timeValue,retrieveText.locator(time));
  outputPanelAttributes.set(OutputPanelAttributes.rendered,true);
  assertTrue(selenium.isElementPresent(outputDiv),""String_Node_Str"");
  String counter=selenium.getText(outputDiv);
  assertEquals(counter,""String_Node_Str"",""String_Node_Str"");
}"
43968,"@Test @IssueTracking(""String_Node_Str"") public void testClick(){
  selenium.click(increaseCounterButton);
  waitGui.until(textEquals.locator(outputDiv).text(""String_Node_Str""));
  selenium.click(increaseCounterButton);
  waitGui.until(textEquals.locator(outputDiv).text(""String_Node_Str""));
}","@Test @RegressionTest(""String_Node_Str"") public void testClick(){
  selenium.click(increaseCounterButton);
  waitGui.until(textEquals.locator(outputDiv).text(""String_Node_Str""));
  selenium.click(increaseCounterButton);
  waitGui.until(textEquals.locator(outputDiv).text(""String_Node_Str""));
}"
43969,"@BeforeClass public void init(){
  messages.put(ID.assertTrue,""String_Node_Str"");
  messages.put(ID.assertFalse,""String_Node_Str"");
  messages.put(ID.decimalMinMax,""String_Node_Str"");
  messages.put(ID.digits,""String_Node_Str"");
  messages.put(ID.max,""String_Node_Str"");
  messages.put(ID.min,""String_Node_Str"");
  messages.put(ID.minMax,""String_Node_Str"");
  messages.put(ID.notEmpty,""String_Node_Str"");
  messages.put(ID.notNull,""String_Node_Str"");
  messages.put(ID.pattern,""String_Node_Str"");
  messages.put(ID.custom,""String_Node_Str"");
  messages.put(ID.regexp,""String_Node_Str"");
  messages.put(ID.past,""String_Node_Str"");
  messages.put(ID.future,""String_Node_Str"");
  messages.put(ID.stringSize,""String_Node_Str"");
  messages.put(ID.size,""String_Node_Str"");
  wrongValue.put(ID.assertTrue,Boolean.FALSE);
  wrongValue.put(ID.assertFalse,Boolean.TRUE);
  wrongValue.put(ID.decimalMinMax,""String_Node_Str"");
  wrongValue.put(ID.digits,""String_Node_Str"");
  wrongValue.put(ID.max,""String_Node_Str"");
  wrongValue.put(ID.min,""String_Node_Str"");
  wrongValue.put(ID.minMax,""String_Node_Str"");
  wrongValue.put(ID.notEmpty,""String_Node_Str"");
  wrongValue.put(ID.notNull,null);
  wrongValue.put(ID.pattern,""String_Node_Str"");
  wrongValue.put(ID.custom,""String_Node_Str"");
  wrongValue.put(ID.regexp,""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  long offset=3 * 24 * 60* 60* 1000;
  wrongValue.put(ID.past,sdf.format(new Date(System.currentTimeMillis() + offset)));
  wrongValue.put(ID.future,sdf.format(new Date(System.currentTimeMillis() - offset)));
  wrongValue.put(ID.stringSize,""String_Node_Str"");
  wrongValue.put(ID.size,""String_Node_Str"");
}","@BeforeClass public void init(){
  messages.put(ID.assertTrue,""String_Node_Str"");
  messages.put(ID.assertFalse,""String_Node_Str"");
  messages.put(ID.decimalMinMax,""String_Node_Str"");
  messages.put(ID.digits,""String_Node_Str"");
  messages.put(ID.max,""String_Node_Str"");
  messages.put(ID.min,""String_Node_Str"");
  messages.put(ID.minMax,""String_Node_Str"");
  messages.put(ID.notEmpty,""String_Node_Str"");
  messages.put(ID.notNull,""String_Node_Str"");
  messages.put(ID.pattern,""String_Node_Str"");
  messages.put(ID.custom,""String_Node_Str"");
  messages.put(ID.regexp,""String_Node_Str"");
  messages.put(ID.past,""String_Node_Str"");
  messages.put(ID.future,""String_Node_Str"");
  messages.put(ID.stringSize,""String_Node_Str"");
  messages.put(ID.size,""String_Node_Str"");
  wrongValue.put(ID.assertTrue,Boolean.FALSE);
  wrongValue.put(ID.assertFalse,Boolean.TRUE);
  wrongValue.put(ID.decimalMinMax,""String_Node_Str"");
  wrongValue.put(ID.digits,""String_Node_Str"");
  wrongValue.put(ID.max,""String_Node_Str"");
  wrongValue.put(ID.min,""String_Node_Str"");
  wrongValue.put(ID.minMax,""String_Node_Str"");
  wrongValue.put(ID.notEmpty,""String_Node_Str"");
  wrongValue.put(ID.notNull,null);
  wrongValue.put(ID.pattern,""String_Node_Str"");
  wrongValue.put(ID.custom,""String_Node_Str"");
  wrongValue.put(ID.regexp,""String_Node_Str"");
  wrongValue.put(ID.stringSize,""String_Node_Str"");
  wrongValue.put(ID.size,""String_Node_Str"");
}"
43970,"/** 
 * Boolean input, verify true
 */
public void verifyBooleanTrue(){
  selenium.click(setCorrectBtn);
  selenium.check(inputFormat.format(ID.assertTrue),(Boolean)wrongValue.get(ID.assertTrue));
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertTrue)).text(messages.get(ID.assertTrue)));
}","/** 
 * Boolean input, verify true
 */
public void verifyBooleanTrue(){
  clickCorrectButton();
  selenium.check(inputFormat.format(ID.assertTrue),(Boolean)wrongValue.get(ID.assertTrue));
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertTrue)).text(messages.get(ID.assertTrue)));
}"
43971,"/** 
 * Integer input, verify max
 */
protected void verifyMax(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.max),wrongValue.get(ID.max).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.max)).text(messages.get(ID.max)));
}","/** 
 * Integer input, verify max
 */
protected void verifyMax(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.max),wrongValue.get(ID.max).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.max)).text(messages.get(ID.max)));
}"
43972,"/** 
 * Integer input, verify not empty
 */
protected void verifyNotEmpty(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.notEmpty),wrongValue.get(ID.notEmpty).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.notEmpty)).text(messages.get(ID.notEmpty)));
}","/** 
 * Integer input, verify not empty
 */
protected void verifyNotEmpty(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.notEmpty),wrongValue.get(ID.notEmpty).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.notEmpty)).text(messages.get(ID.notEmpty)));
}"
43973,"/** 
 * Integer input, verify string pattern
 */
protected void verifyPattern(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.pattern),wrongValue.get(ID.pattern).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.pattern)).text(messages.get(ID.pattern)));
}","/** 
 * Integer input, verify string pattern
 */
protected void verifyPattern(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.pattern),wrongValue.get(ID.pattern).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.pattern)).text(messages.get(ID.pattern)));
}"
43974,"/** 
 * Integer input, verify custom string
 */
protected void verifyCustom(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.custom),wrongValue.get(ID.custom).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.custom)).text(messages.get(ID.custom)));
}","/** 
 * Integer input, verify custom string
 */
protected void verifyCustom(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.custom),wrongValue.get(ID.custom).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.custom)).text(messages.get(ID.custom)));
}"
43975,"/** 
 * Decimal input, verify digits
 */
protected void verifyDecimalDigits(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.digits),wrongValue.get(ID.digits).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
}","/** 
 * Decimal input, verify digits
 */
protected void verifyDecimalDigits(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.digits),wrongValue.get(ID.digits).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
}"
43976,"public void verifyAllWrongWithJSFSubmit(){
  selenium.click(setWrongBtn);
  selenium.click(hCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertTrue)).text(messages.get(ID.assertTrue)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertFalse)).text(messages.get(ID.assertFalse)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.digits)).text(messages.get(ID.digits)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.max)).text(messages.get(ID.max)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.min)).text(messages.get(ID.min)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.minMax)).text(messages.get(ID.minMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notEmpty)).text(messages.get(ID.notEmpty)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notNull)).text(messages.get(ID.notNull)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.pattern)).text(messages.get(ID.pattern)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.custom)).text(messages.get(ID.custom)));
  if (selenium.isElementPresent(inputFormat.format(ID.regexp))) {
    waitGui.until(textEquals.locator(msgFormat.format(ID.regexp)).text(messages.get(ID.regexp)));
  }
  waitGui.until(textEquals.locator(msgFormat.format(ID.past)).text(messages.get(ID.past)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.future)).text(messages.get(ID.future)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.stringSize)).text(messages.get(ID.stringSize)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.size)).text(messages.get(ID.size)));
}","public void verifyAllWrongWithJSFSubmit(){
  clickWrongButton();
  selenium.click(hCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertTrue)).text(messages.get(ID.assertTrue)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertFalse)).text(messages.get(ID.assertFalse)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.digits)).text(messages.get(ID.digits)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.max)).text(messages.get(ID.max)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.min)).text(messages.get(ID.min)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.minMax)).text(messages.get(ID.minMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notEmpty)).text(messages.get(ID.notEmpty)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notNull)).text(messages.get(ID.notNull)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.pattern)).text(messages.get(ID.pattern)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.custom)).text(messages.get(ID.custom)));
  if (selenium.isElementPresent(inputFormat.format(ID.regexp))) {
    waitGui.until(textEquals.locator(msgFormat.format(ID.regexp)).text(messages.get(ID.regexp)));
  }
  waitGui.until(textEquals.locator(msgFormat.format(ID.past)).text(messages.get(ID.past)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.future)).text(messages.get(ID.future)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.stringSize)).text(messages.get(ID.stringSize)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.size)).text(messages.get(ID.size)));
}"
43977,"/** 
 * Integer input, verify min max
 */
protected void verifyMinMax(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.minMax),wrongValue.get(ID.minMax).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.minMax)).text(messages.get(ID.minMax)));
}","/** 
 * Integer input, verify min max
 */
protected void verifyMinMax(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.minMax),wrongValue.get(ID.minMax).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.minMax)).text(messages.get(ID.minMax)));
}"
43978,"/** 
 * Integer input, verify selection size
 */
protected void verifySelectionSize(){
  selenium.click(setCorrectBtn);
  selenium.click(setWrongBtn);
  selenium.check(selectionItem.format(wrongValue.get(ID.size)),true);
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.size)).text(messages.get(ID.size)));
}","/** 
 * Integer input, verify selection size
 */
protected void verifySelectionSize(){
  clickCorrectButton();
  clickWrongButton();
  selenium.check(selectionItem.format(wrongValue.get(ID.size)),true);
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.size)).text(messages.get(ID.size)));
}"
43979,"/** 
 * Decimal input, verify from 2.5 to 9.688
 */
protected void verifyDecimalMinMax(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.decimalMinMax),wrongValue.get(ID.decimalMinMax).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
}","/** 
 * Decimal input, verify from 2.5 to 9.688
 */
protected void verifyDecimalMinMax(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.decimalMinMax),wrongValue.get(ID.decimalMinMax).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
}"
43980,"/** 
 * Integer input, verify min
 */
protected void verifyMin(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.min),wrongValue.get(ID.min).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.min)).text(messages.get(ID.min)));
}","/** 
 * Integer input, verify min
 */
protected void verifyMin(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.min),wrongValue.get(ID.min).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.min)).text(messages.get(ID.min)));
}"
43981,"public void verifyAllWrongWithAjaxSubmit(){
  selenium.click(setWrongBtn);
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertTrue)).text(messages.get(ID.assertTrue)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertFalse)).text(messages.get(ID.assertFalse)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.digits)).text(messages.get(ID.digits)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.max)).text(messages.get(ID.max)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.min)).text(messages.get(ID.min)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.minMax)).text(messages.get(ID.minMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notEmpty)).text(messages.get(ID.notEmpty)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notNull)).text(messages.get(ID.notNull)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.pattern)).text(messages.get(ID.pattern)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.custom)).text(messages.get(ID.custom)));
  if (selenium.isElementPresent(inputFormat.format(ID.regexp))) {
    waitGui.until(textEquals.locator(msgFormat.format(ID.regexp)).text(messages.get(ID.regexp)));
  }
  waitGui.until(textEquals.locator(msgFormat.format(ID.past)).text(messages.get(ID.past)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.future)).text(messages.get(ID.future)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.stringSize)).text(messages.get(ID.stringSize)));
}","public void verifyAllWrongWithAjaxSubmit(){
  clickWrongButton();
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertTrue)).text(messages.get(ID.assertTrue)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertFalse)).text(messages.get(ID.assertFalse)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.decimalMinMax)).text(messages.get(ID.decimalMinMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.digits)).text(messages.get(ID.digits)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.max)).text(messages.get(ID.max)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.min)).text(messages.get(ID.min)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.minMax)).text(messages.get(ID.minMax)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notEmpty)).text(messages.get(ID.notEmpty)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.notNull)).text(messages.get(ID.notNull)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.pattern)).text(messages.get(ID.pattern)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.custom)).text(messages.get(ID.custom)));
  if (selenium.isElementPresent(inputFormat.format(ID.regexp))) {
    waitGui.until(textEquals.locator(msgFormat.format(ID.regexp)).text(messages.get(ID.regexp)));
  }
  waitGui.until(textEquals.locator(msgFormat.format(ID.past)).text(messages.get(ID.past)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.future)).text(messages.get(ID.future)));
  waitGui.until(textEquals.locator(msgFormat.format(ID.stringSize)).text(messages.get(ID.stringSize)));
}"
43982,"/** 
 * Boolean input, verify false
 */
public void verifyBooleanFalse(){
  selenium.click(setCorrectBtn);
  selenium.check(inputFormat.format(ID.assertFalse),(Boolean)wrongValue.get(ID.assertFalse));
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertFalse)).text(messages.get(ID.assertFalse)));
}","/** 
 * Boolean input, verify false
 */
public void verifyBooleanFalse(){
  clickCorrectButton();
  selenium.check(inputFormat.format(ID.assertFalse),(Boolean)wrongValue.get(ID.assertFalse));
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.assertFalse)).text(messages.get(ID.assertFalse)));
}"
43983,"/** 
 * Integer input, verify string size
 */
protected void verifyStringSize(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.stringSize),wrongValue.get(ID.stringSize).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.stringSize)).text(messages.get(ID.stringSize)));
}","/** 
 * Integer input, verify string size
 */
protected void verifyStringSize(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.stringSize),wrongValue.get(ID.stringSize).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.stringSize)).text(messages.get(ID.stringSize)));
}"
43984,"/** 
 * Integer input, verify regExp
 */
protected void verifyRegExp(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.regexp),wrongValue.get(ID.regexp).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.regexp)).text(messages.get(ID.regexp)));
}","/** 
 * Integer input, verify regExp
 */
protected void verifyRegExp(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.regexp),wrongValue.get(ID.regexp).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.regexp)).text(messages.get(ID.regexp)));
}"
43985,"/** 
 * Integer input, verify not null
 */
protected void verifyNotNull(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.notNull),""String_Node_Str"");
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.notNull)).text(messages.get(ID.notNull)));
}","/** 
 * Integer input, verify not null
 */
protected void verifyNotNull(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.notNull),""String_Node_Str"");
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.notNull)).text(messages.get(ID.notNull)));
}"
43986,"/** 
 * Integer input, verify date in past
 */
protected void verifyDatePast(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.past),wrongValue.get(ID.past).toString());
  guardXhr(selenium).click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.past)).text(messages.get(ID.past)));
}","/** 
 * Integer input, verify date in past
 */
protected void verifyDatePast(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.past),wrongValue.get(ID.past).toString());
  guardXhr(selenium).click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.past)).text(messages.get(ID.past)));
}"
43987,"/** 
 * Integer input, verify date in future
 */
protected void verifyDateFuture(){
  selenium.click(setCorrectBtn);
  selenium.type(inputFormat.format(ID.future),wrongValue.get(ID.future).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.future)).text(messages.get(ID.future)));
}","/** 
 * Integer input, verify date in future
 */
protected void verifyDateFuture(){
  clickCorrectButton();
  selenium.type(inputFormat.format(ID.future),wrongValue.get(ID.future).toString());
  selenium.click(a4jCommandBtn);
  waitGui.until(textEquals.locator(msgFormat.format(ID.future)).text(messages.get(ID.future)));
}"
43988,"protected void setProperty(String propertyName,Object value){
  selenium.getCommandInterceptionProxy().registerInterceptor(new RepeatForElementNotFound());
  ExtendedLocator<JQueryLocator> locator=propertyLocator.format(propertyName,""String_Node_Str"");
  final AttributeLocator<?> typeLocator=locator.getAttribute(Attribute.TYPE);
  final ExtendedLocator<JQueryLocator> optionLocator=locator.getChild(jq(""String_Node_Str""));
  String inputType=null;
  if (selenium.getCount(propertyLocator.format(propertyName)) > 1) {
    inputType=""String_Node_Str"";
  }
 else   if (selenium.getCount(optionLocator) > 1) {
    inputType=""String_Node_Str"";
  }
 else {
    inputType=selenium.getAttribute(typeLocator);
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  String valueAsString=value.toString();
  if (""String_Node_Str"".equals(inputType)) {
    applyText(locator,valueAsString);
  }
 else   if (""String_Node_Str"".equals(inputType)) {
    boolean checked=Boolean.valueOf(valueAsString);
    applyCheckbox(locator,checked);
  }
 else   if (""String_Node_Str"".equals(inputType)) {
    locator=propertyLocator.format(propertyName,""String_Node_Str"" + (""String_Node_Str"".equals(valueAsString) ? ""String_Node_Str"" : valueAsString) + ""String_Node_Str"");
    if (!selenium.isChecked(locator)) {
      applyRadio(locator);
    }
  }
 else   if (""String_Node_Str"".equals(inputType)) {
    String curValue=selenium.getValue(locator);
    if (valueAsString.equals(curValue)) {
      return;
    }
    applySelect(locator,valueAsString);
  }
  selenium.getCommandInterceptionProxy().unregisterInterceptorType(RepeatForElementNotFound.class);
}","protected void setProperty(String propertyName,Object value){
  selenium.getCommandInterceptionProxy().registerInterceptor(new RepeatForElementNotFound());
  ExtendedLocator<JQueryLocator> locator=propertyLocator.format(propertyName,""String_Node_Str"");
  final AttributeLocator<?> typeLocator=locator.getAttribute(Attribute.TYPE);
  final ExtendedLocator<JQueryLocator> optionLocator=locator.getChild(jq(""String_Node_Str""));
  String inputType=null;
  if (selenium.getCount(propertyLocator.format(propertyName)) > 1) {
    inputType=""String_Node_Str"";
  }
 else   if (selenium.getCount(optionLocator) > 1) {
    inputType=""String_Node_Str"";
  }
 else {
    inputType=selenium.getAttribute(typeLocator);
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  String valueAsString=value.toString();
  if (""String_Node_Str"".equals(inputType)) {
    applyText(locator,valueAsString);
  }
 else   if (""String_Node_Str"".equals(inputType)) {
    boolean checked=Boolean.valueOf(valueAsString);
    applyCheckbox(locator,checked);
  }
 else   if (""String_Node_Str"".equals(inputType)) {
    if (""String_Node_Str"".equals(valueAsString)) {
      locator=pjq(""String_Node_Str"" + propertyName + ""String_Node_Str"");
    }
 else {
      locator=propertyLocator.format(propertyName,""String_Node_Str"" + valueAsString + ""String_Node_Str"");
    }
    if (!selenium.isChecked(locator)) {
      applyRadio(locator);
    }
  }
 else   if (""String_Node_Str"".equals(inputType)) {
    String curValue=selenium.getValue(locator);
    if (valueAsString.equals(curValue)) {
      return;
    }
    applySelect(locator,valueAsString);
  }
  selenium.getCommandInterceptionProxy().unregisterInterceptorType(RepeatForElementNotFound.class);
}"
43989,"@Test public void testAllWrongAndCorrect(){
  getPage().getAgeInput().click();
  getPage().getAgeInput().sendKeys(""String_Node_Str"");
  getPage().getEmailInput().click();
  getPage().getEmailInput().sendKeys(""String_Node_Str"");
  getPage().getNameInput().click();
  getPage().getNameInput().sendKeys(""String_Node_Str"");
  getPage().loseFocus();
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(getPage().getAgeErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(getPage().getEmailErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(getPage().getNameErrorArea()));
  getPage().getAgeInput().click();
  getPage().getAgeInput().clear();
  getPage().getAgeInput().sendKeys(""String_Node_Str"");
  getPage().getEmailInput().click();
  getPage().getEmailInput().clear();
  getPage().getEmailInput().sendKeys(""String_Node_Str"");
  getPage().getNameInput().click();
  getPage().getEmailInput().clear();
  getPage().getNameInput().sendKeys(""String_Node_Str"");
  getPage().loseFocus();
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementNotPresent.getInstance().element(getPage().getAgeErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementNotPresent.getInstance().element(getPage().getEmailErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementNotPresent.getInstance().element(getPage().getNameErrorArea()));
}","@Test public void testAllWrongAndCorrect(){
  getPage().getAgeInput().click();
  getPage().getAgeInput().sendKeys(""String_Node_Str"");
  getPage().getEmailInput().click();
  getPage().getEmailInput().sendKeys(""String_Node_Str"");
  getPage().getNameInput().click();
  getPage().getNameInput().sendKeys(""String_Node_Str"");
  getPage().loseFocus();
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(getPage().getAgeErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(getPage().getEmailErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementPresent.getInstance().element(getPage().getNameErrorArea()));
  getPage().getAgeInput().click();
  getPage().getAgeInput().clear();
  getPage().getAgeInput().sendKeys(""String_Node_Str"");
  getPage().getEmailInput().click();
  getPage().getEmailInput().clear();
  getPage().getEmailInput().sendKeys(""String_Node_Str"");
  getPage().getNameInput().click();
  getPage().getNameInput().clear();
  getPage().getNameInput().sendKeys(""String_Node_Str"");
  getPage().loseFocus();
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementNotPresent.getInstance().element(getPage().getAgeErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementNotPresent.getInstance().element(getPage().getEmailErrorArea()));
  new WebDriverWait(getWebDriver()).failWith(""String_Node_Str"").until(ElementNotPresent.getInstance().element(getPage().getNameErrorArea()));
}"
43990,"/** 
 * Fills in the name input incorrect value according to the borderValues, it tries to fill various values. Checks whether there are error messages.
 * @param nameInput
 * @param bottomBorderValue
 * @param topBorderValue
 */
public void fillNameInputWithIncorrectValues(JQueryLocator nameInput,int bottomBorderValue,int topBorderValue){
  fillInputWithStringOfLength(nameInput,0);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutValueRequeired(true);
  eraseInput(nameInput);
  fillInputWithStringOfLength(nameInput,bottomBorderValue - 1);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutSizeOfName(true);
  eraseInput(nameInput);
  fillInputWithStringOfLength(nameInput,topBorderValue + 1);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutSizeOfName(true);
  eraseInput(nameInput);
  fillInputWithStringOfLength(nameInput,topBorderValue * 3);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutSizeOfName(true);
}","/** 
 * Fills in the name input incorrect value according to the borderValues, it tries to fill various values. Checks whether there are error messages.
 * @param nameInput
 * @param bottomBorderValue
 * @param topBorderValue
 */
public void fillNameInputWithIncorrectValues(JQueryLocator nameInput,int bottomBorderValue,int topBorderValue,boolean valueRequiredErrorMessage){
  fillInputWithStringOfLength(nameInput,0);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutValueRequeired(valueRequiredErrorMessage);
  eraseInput(nameInput);
  fillInputWithStringOfLength(nameInput,bottomBorderValue - 1);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutSizeOfName(true);
  eraseInput(nameInput);
  fillInputWithStringOfLength(nameInput,topBorderValue + 1);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutSizeOfName(true);
  eraseInput(nameInput);
  fillInputWithStringOfLength(nameInput,topBorderValue * 3);
  guardNoRequest(selenium).fireEvent(nameInput,Event.BLUR);
  isThereErrorMessageAboutSizeOfName(true);
}"
43991,"/** 
 * Finds out whether there is error message about size of name, it is implemented in the subclass
 * @param isThereErrorMessageAboutEmail
 */
protected abstract void isThereErrorMessageAboutSizeOfName(boolean isThereErrorMessageAboutEmail);","/** 
 * Finds out whether there is error message about size of name, it is implemented in the subclass
 * @param isThereErrorMessageAboutEmail
 */
protected abstract void isThereErrorMessageAboutSizeOfName(boolean isThereErrorMessageAboutSizeOfName);"
43992,"@Test public void testIncorrectName(){
  fillNameInputWithIncorrectValues(nameInput,3,8);
}","@Test public void testIncorrectName(){
  fillNameInputWithIncorrectValues(nameInput,3,8,true);
}"
43993,"@Test public void testNameInputIncorrectValues(){
  fillNameInputWithIncorrectValues(nameInput,3,12);
}","@Test public void testNameInputIncorrectValues(){
  fillNameInputWithIncorrectValues(nameInput,3,12,false);
}"
43994,"@Test public void testClientProgressBarIsRisingGraphically(){
  widths=new ArrayList<Integer>();
  AttributeRetriever styleRetriever=retrieveAttribute.attributeLocator(progressBar.getAttribute(Attribute.STYLE));
  styleRetriever.initializeValue();
  guardNoRequest(selenium).click(startProgress);
  while (true) {
    try {
      long currentTimeBeforeChange=System.currentTimeMillis();
      waitGui.waitForChangeAndReturn(styleRetriever);
      long currentTimeAfterChange=System.currentTimeMillis();
      if ((currentTimeAfterChange - currentTimeBeforeChange) > MAX_DEVIATION) {
        fail(""String_Node_Str"" + MAX_DEVIATION);
      }
      getsTheWidthFromRetrieverAndStoresinList(styleRetriever);
      styleRetriever.initializeValue();
    }
 catch (    WaitTimeoutException ex) {
      break;
    }
  }
  checkTheWidthDeviaton();
}","@Test public void testClientProgressBarIsRisingGraphically(){
  widths=new ArrayList<Integer>();
  AttributeRetriever styleRetriever=retrieveAttribute.attributeLocator(progressBar.getAttribute(Attribute.STYLE));
  styleRetriever.initializeValue();
  guardNoRequest(selenium).click(startProgress);
  while (true) {
    try {
      long currentTimeBeforeChange=System.currentTimeMillis();
      waitGui.waitForChangeAndReturn(styleRetriever);
      long currentTimeAfterChange=System.currentTimeMillis();
      long duration=currentTimeAfterChange - currentTimeBeforeChange;
      if (duration > MAX_DEVIATION) {
        fail(""String_Node_Str"" + MAX_DEVIATION + ""String_Node_Str""+ ""String_Node_Str""+ duration);
      }
      getsTheWidthFromRetrieverAndStoresinList(styleRetriever);
      styleRetriever.initializeValue();
    }
 catch (    WaitTimeoutException ex) {
      break;
    }
  }
  checkTheWidthDeviaton();
}"
43995,"/** 
 * The method   {@link #processOutputEvent(Event)} is called when an inputevent arrives and the time since the last input event is greater than this interval.
 * @param timeUnit
 * @return interval in timeUnit
 */
public long getOutputInterval(TimeUnit timeUnit){
  return timeUnit.convert(outputIntervalinMilliseconds,TimeUnit.MILLISECONDS);
}","/** 
 * The method   {@link #processOutputEvent(Event)} is called when an inputevent arrives and the time since the last input event is greater than this interval.
 * @param timeUnit
 * @return interval in timeUnit
 */
public long getOutputInterval(TimeUnit timeUnit){
  return timeUnit.convert(outputIntervalInMilliseconds,TimeUnit.MILLISECONDS);
}"
43996,"/** 
 * Set a time-based policy to call   {@link #processOutputEvent(Event)}. The time based policy and the event-based policy are not mutually exclusive. There are two modes: <ol> <li>When   {@code onEvent==true} method {@link #processOutputEvent(Event)}is only when an input event arrives *and* the time since the last input event is greater than this interval. <li>When   {@code onEvent==false} method {@link #processOutputEvent(Event)}is called periodically whether or not an input event has arrived. Because the method will be called forever for every PE in the prototype you should use this setting it with caution. </ol> If   {@code interval==0} the time-based policy is disabled.
 * @param interval in timeUnit
 * @param timeUnit the timeUnit of interval
 * @param onEvent selects event-time policy mode.
 */
public void setOutputInterval(long interval,TimeUnit timeUnit,boolean onEvent){
  outputIntervalinMilliseconds=TimeUnit.MILLISECONDS.convert(interval,timeUnit);
  if (!isPrototype)   return;
  if (timer != null)   timer.cancel();
  if (interval == 0) {
    isTimedOutput=false;
    return;
  }
  isOutputOnEvent=onEvent;
  timer=new Timer();
  timer.schedule(new PETask(),0,outputIntervalinMilliseconds);
}","/** 
 * Set a time-based policy to call   {@link #processOutputEvent(Event)}. The time based policy and the event-based policy are not mutually exclusive. There are two modes: <ol> <li>When   {@code onEvent==true} method {@link #processOutputEvent(Event)}is only when an input event arrives *and* the time since the last input event is greater than this interval. <li>When   {@code onEvent==false} method {@link #processOutputEvent(Event)}is called periodically whether or not an input event has arrived. Because the method will be called forever for every PE in the prototype you should use this setting it with caution. </ol> If   {@code interval==0} the time-based policy is disabled.
 * @param interval in timeUnit
 * @param timeUnit the timeUnit of interval
 * @param onEvent selects event-time policy mode.
 */
public void setOutputInterval(long interval,TimeUnit timeUnit,boolean onEvent){
  outputIntervalInMilliseconds=TimeUnit.MILLISECONDS.convert(interval,timeUnit);
  if (!isPrototype)   return;
  if (timer != null)   timer.cancel();
  if (interval == 0) {
    isTimedOutput=false;
    return;
  }
  isOutputOnEvent=onEvent;
  timer=new Timer();
  timer.schedule(new PETask(),0,outputIntervalInMilliseconds);
}"
43997,"WindowedPE(App app,int bufferSize){
  super(app);
  this.bufferSize=bufferSize;
}","/** 
 * Constructor for the event-based slot. The abstract method  {@link #addPeriodicSlot()} must be called by the concrete class.
 * @param app the application
 * @param numSlots the number of slots to be stored
 */
public WindowedPE(App app,int numSlots){
  this(app,0l,null,numSlots);
}"
43998,"public void test1(){
  System.out.println(""String_Node_Str"");
  CircularFifoBuffer<Integer> circularBuffer=new CircularFifoBuffer<Integer>(10);
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 15; i++) {
    circularBuffer.add(i + 100);
  }
  System.out.println(""String_Node_Str"");
  int j=5;
  for (  Integer num : circularBuffer) {
    System.out.print(num + ""String_Node_Str"");
    Assert.assertEquals(j + 100,num.intValue());
    j++;
  }
  System.out.println(""String_Node_Str"");
  circularBuffer.clear();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 5; i++) {
    circularBuffer.add(i + 200);
  }
  System.out.println(""String_Node_Str"");
  int z=0;
  for (  Integer num : circularBuffer) {
    System.out.print(num + ""String_Node_Str"");
    Assert.assertEquals(z + 200,num.intValue());
    z++;
  }
  System.out.println(""String_Node_Str"");
}","public void test1(){
  System.out.println(""String_Node_Str"");
  CircularFifoBuffer<Integer> circularBuffer=new CircularFifoBuffer<Integer>(10);
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 15; i++) {
    circularBuffer.add(i + 100);
  }
  System.out.println(""String_Node_Str"");
  int j=5;
  for (  Integer num : circularBuffer) {
    System.out.print(num + ""String_Node_Str"");
    Assert.assertEquals(j + 100,num.intValue());
    j++;
  }
  System.out.println(""String_Node_Str"" + circularBuffer.get());
  Assert.assertEquals(105,circularBuffer.get().intValue());
  System.out.println(""String_Node_Str"");
  circularBuffer.clear();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 5; i++) {
    circularBuffer.add(i + 200);
  }
  System.out.println(""String_Node_Str"");
  int z=0;
  for (  Integer num : circularBuffer) {
    System.out.print(num + ""String_Node_Str"");
    Assert.assertEquals(z + 200,num.intValue());
    z++;
  }
  System.out.println(""String_Node_Str"");
}"
43999,"@Override public void run(){
  for (  Map.Entry<String,ProcessingElement> entry : peInstances.entrySet()) {
    ProcessingElement peInstance=entry.getValue();
    peInstance.isTimedOutput=true;
    if (!isOutputOnEvent) {
      peInstance.handleInputEvent(new TimerEvent());
    }
  }
}","@Override public void run(){
  for (  Map.Entry<String,ProcessingElement> entry : peInstances.entrySet()) {
    ProcessingElement peInstance=entry.getValue();
    peInstance.isTimedOutput=true;
    if (!isOutputOnEvent) {
      Object object;
      if (isThreadSafe) {
        object=new Object();
      }
 else {
        object=this;
      }
synchronized (object) {
        peInstance.processOutputEvent(new TimerEvent());
      }
    }
  }
}"
44000,"@SuppressWarnings(""String_Node_Str"") @Override protected void init(){
  ProcessingElement counterPE=new CounterPE(this);
  counterPE.setOutputInterval(20,TimeUnit.MILLISECONDS,false);
  Stream<TestEvent> testStream=new Stream<TestEvent>(this,""String_Node_Str"",new TestKeyFinder(),counterPE);
  generateTestEventPE=new GenerateTestEventPE(this,testStream);
}","@SuppressWarnings(""String_Node_Str"") @Override protected void init(){
  counterPE=new CounterPE(this);
  counterPE.setOutputInterval(20,TimeUnit.MILLISECONDS,false);
  Stream<TestEvent> testStream=new Stream<TestEvent>(this,""String_Node_Str"",new TestKeyFinder(),counterPE);
  generateTestEventPE=new GenerateTestEventPE(this,testStream);
}"
