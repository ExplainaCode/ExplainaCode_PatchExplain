record_number,buggy_code,fixed_code
44001,"@Override protected void start(){
  for (int i=0; i < 20; i++) {
    generateTestEventPE.processOutputEvent(null);
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      logger.error(e.getMessage());
      e.printStackTrace();
    }
  }
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  removeAll();
}","@Override protected void start(){
  for (int i=0; i < 200; i++) {
    generateTestEventPE.processOutputEvent(null);
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      logger.error(e.getMessage());
      e.printStackTrace();
    }
  }
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  logger.info(""String_Node_Str"");
  Collection<ProcessingElement> pes=counterPE.getInstances();
  for (  ProcessingElement pe : pes) {
    counterPE=(CounterPE)pe;
    logger.info(""String_Node_Str"",pe.id,counterPE.getCount());
    Assert.assertEquals(results.get(pe.id).longValue(),counterPE.getCount());
  }
  logger.info(""String_Node_Str"");
  removeAll();
}"
44002,"Type getGenericReturnType(Method m){
  try {
    return m.getGenericReturnType();
  }
 catch (  Error ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + m + ""String_Node_Str"");
    return m.getReturnType();
  }
}","Type getGenericReturnType(Method m){
  try {
    return m.getGenericReturnType();
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + m + ""String_Node_Str"");
    return m.getReturnType();
  }
}"
44003,"Type[] getGenericInterfaces(Class c){
  try {
    return c.getGenericInterfaces();
  }
 catch (  Error ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + c + ""String_Node_Str"");
    return c.getInterfaces();
  }
}","Type[] getGenericInterfaces(Class c){
  try {
    return c.getGenericInterfaces();
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + c + ""String_Node_Str"");
    return c.getInterfaces();
  }
}"
44004,"public void appendToDocument(Document doc,Element parent){
  try {
    doAppendToDocument(doc,parent);
  }
 catch (  Error ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + jclass.getName() + ""String_Node_Str""+ ex.getMessage());
  }
}","public void appendToDocument(Document doc,Element parent){
  try {
    doAppendToDocument(doc,parent);
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + jclass.getName() + ""String_Node_Str""+ ex.getMessage());
  }
}"
44005,"Type getGenericType(Field f){
  try {
    return f.getGenericType();
  }
 catch (  Error ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + f + ""String_Node_Str"");
    return f.getType();
  }
}","Type getGenericType(Field f){
  try {
    return f.getGenericType();
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + f + ""String_Node_Str"");
    return f.getType();
  }
}"
44006,"public static String getGenericTypeName(Type type){
  if (type instanceof Class) {
    String name=((Class)type).getName();
    if (name.charAt(0) == '[') {
      String suffix=""String_Node_Str"";
      while (name.charAt(0) == '[') {
        name=name.substring(1);
        suffix=suffix + ""String_Node_Str"";
      }
      if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.charAt(0) == 'L')       return name.substring(1,name.length() - 1).replace('$','.') + suffix;
 else {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
    return name.replace('$','.');
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType ptype=(ParameterizedType)type;
    StringBuilder sb=new StringBuilder();
    sb.append(getGenericTypeName(ptype.getRawType()));
    boolean occured=false;
    for (    Type ta : getActualTypeArguments(ptype)) {
      if (occured)       sb.append(""String_Node_Str"");
 else {
        sb.append('<');
        occured=true;
      }
      sb.append(getGenericTypeName(ta));
    }
    if (occured)     sb.append('>');
    return sb.toString();
  }
 else {
    try {
      return type.toString().replace('$','.');
    }
 catch (    Error e) {
      System.err.println(e);
      System.err.println(""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
}","public static String getGenericTypeName(Type type){
  if (type instanceof Class) {
    String name=((Class)type).getName();
    if (name.charAt(0) == '[') {
      String suffix=""String_Node_Str"";
      while (name.charAt(0) == '[') {
        name=name.substring(1);
        suffix=suffix + ""String_Node_Str"";
      }
      if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.equals(""String_Node_Str""))       return ""String_Node_Str"" + suffix;
 else       if (name.charAt(0) == 'L')       return name.substring(1,name.length() - 1).replace('$','.') + suffix;
 else {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
    return name.replace('$','.');
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType ptype=(ParameterizedType)type;
    StringBuilder sb=new StringBuilder();
    sb.append(getGenericTypeName(ptype.getRawType()));
    boolean occured=false;
    for (    Type ta : getActualTypeArguments(ptype)) {
      if (occured)       sb.append(""String_Node_Str"");
 else {
        sb.append('<');
        occured=true;
      }
      sb.append(getGenericTypeName(ta));
    }
    if (occured)     sb.append('>');
    return sb.toString();
  }
 else {
    try {
      return type.toString().replace('$','.');
    }
 catch (    Throwable e) {
      System.err.println(e);
      System.err.println(""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
}"
44007,"Type[] getGenericParameterTypes(Constructor m){
  try {
    return m.getGenericParameterTypes();
  }
 catch (  Error ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + m + ""String_Node_Str"");
    return m.getParameterTypes();
  }
}","Type[] getGenericParameterTypes(Constructor m){
  try {
    return m.getGenericParameterTypes();
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + m + ""String_Node_Str"");
    return m.getParameterTypes();
  }
}"
44008,"void doAppendField(Field field,FieldNode asmField,Document doc,Element parent){
  int mods=field.getModifiers();
  if (!Modifier.isPublic(mods) && !Modifier.isProtected(mods))   return;
  Element e=doc.createElement(""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",field.getName());
  e.setAttribute(""String_Node_Str"",getClassName(field.getType(),true));
  e.setAttribute(""String_Node_Str"",getGenericTypeName(getGenericType(field)));
  e.setAttribute(""String_Node_Str"",Modifier.isFinal(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isStatic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (Modifier.isAbstract(mods))   e.setAttribute(""String_Node_Str"",""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isTransient(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isPublic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isVolatile(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  setDeprecatedAttr(e,field.getDeclaredAnnotations(),e.getAttribute(""String_Node_Str""));
  if (asmField == null)   System.err.println(""String_Node_Str"" + field);
 else   if (asmField.value != null) {
    String type=e.getAttribute(""String_Node_Str"");
    boolean isPublic=Modifier.isPublic(mods);
    Locale invariant=Locale.US;
    try {
      if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"") {
        double fvalue=(Float)asmField.value;
        String svalue;
        if (fvalue == Float.MIN_NORMAL)         svalue=""String_Node_Str"";
 else         svalue=String.format(invariant,""String_Node_Str"",asmField.value);
        e.setAttribute(""String_Node_Str"",svalue);
      }
 else       if (type == ""String_Node_Str"") {
        double dvalue=(Double)asmField.value;
        String svalue;
        if (dvalue == Double.MAX_VALUE)         svalue=""String_Node_Str"";
 else         if (dvalue == Double.MIN_VALUE)         svalue=""String_Node_Str"";
 else         if (dvalue == Double.MIN_NORMAL)         svalue=""String_Node_Str"";
 else         if (Double.isNaN(dvalue))         svalue=""String_Node_Str"";
 else         if (dvalue == Double.POSITIVE_INFINITY)         svalue=""String_Node_Str"";
 else         if (dvalue == Double.NEGATIVE_INFINITY)         svalue=""String_Node_Str"";
 else         svalue=String.format(invariant,""String_Node_Str"",dvalue);
        e.setAttribute(""String_Node_Str"",svalue);
      }
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",0 == (Integer)asmField.value ? ""String_Node_Str"" : ""String_Node_Str"");
 else       if (type == ""String_Node_Str"") {
        String value=(String)asmField.value;
        if (value != null)         e.setAttribute(""String_Node_Str"",""String_Node_Str"" + escapeLiteral(value.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")) + ""String_Node_Str"");
      }
 else       if (Modifier.isStatic(mods) && e.getAttribute(""String_Node_Str"").endsWith(""String_Node_Str""))       e.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Error exc) {
      System.err.println(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ exc.getMessage());
    }
  }
 else   if (!Modifier.isStatic(mods) && e.getAttribute(""String_Node_Str"").endsWith(""String_Node_Str""))   e.setAttribute(""String_Node_Str"",""String_Node_Str"");
  e.appendChild(doc.createTextNode(""String_Node_Str""));
  parent.appendChild(e);
}","void doAppendField(Field field,FieldNode asmField,Document doc,Element parent){
  int mods=field.getModifiers();
  if (!Modifier.isPublic(mods) && !Modifier.isProtected(mods))   return;
  Element e=doc.createElement(""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",field.getName());
  e.setAttribute(""String_Node_Str"",getClassName(field.getType(),true));
  e.setAttribute(""String_Node_Str"",getGenericTypeName(getGenericType(field)));
  e.setAttribute(""String_Node_Str"",Modifier.isFinal(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isStatic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (Modifier.isAbstract(mods))   e.setAttribute(""String_Node_Str"",""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isTransient(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isPublic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isVolatile(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  setDeprecatedAttr(e,field.getDeclaredAnnotations(),e.getAttribute(""String_Node_Str""));
  if (asmField == null)   System.err.println(""String_Node_Str"" + field);
 else   if (asmField.value != null) {
    String type=e.getAttribute(""String_Node_Str"");
    boolean isPublic=Modifier.isPublic(mods);
    Locale invariant=Locale.US;
    try {
      if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",String.format(""String_Node_Str"",asmField.value));
 else       if (type == ""String_Node_Str"") {
        double fvalue=(Float)asmField.value;
        String svalue;
        if (fvalue == Float.MIN_NORMAL)         svalue=""String_Node_Str"";
 else         svalue=String.format(invariant,""String_Node_Str"",asmField.value);
        e.setAttribute(""String_Node_Str"",svalue);
      }
 else       if (type == ""String_Node_Str"") {
        double dvalue=(Double)asmField.value;
        String svalue;
        if (dvalue == Double.MAX_VALUE)         svalue=""String_Node_Str"";
 else         if (dvalue == Double.MIN_VALUE)         svalue=""String_Node_Str"";
 else         if (dvalue == Double.MIN_NORMAL)         svalue=""String_Node_Str"";
 else         if (Double.isNaN(dvalue))         svalue=""String_Node_Str"";
 else         if (dvalue == Double.POSITIVE_INFINITY)         svalue=""String_Node_Str"";
 else         if (dvalue == Double.NEGATIVE_INFINITY)         svalue=""String_Node_Str"";
 else         svalue=String.format(invariant,""String_Node_Str"",dvalue);
        e.setAttribute(""String_Node_Str"",svalue);
      }
 else       if (type == ""String_Node_Str"")       e.setAttribute(""String_Node_Str"",0 == (Integer)asmField.value ? ""String_Node_Str"" : ""String_Node_Str"");
 else       if (type == ""String_Node_Str"") {
        String value=(String)asmField.value;
        if (value != null)         e.setAttribute(""String_Node_Str"",""String_Node_Str"" + escapeLiteral(value.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")) + ""String_Node_Str"");
      }
 else       if (Modifier.isStatic(mods) && e.getAttribute(""String_Node_Str"").endsWith(""String_Node_Str""))       e.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Throwable exc) {
      System.err.println(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ exc.getMessage());
    }
  }
 else   if (!Modifier.isStatic(mods) && e.getAttribute(""String_Node_Str"").endsWith(""String_Node_Str""))   e.setAttribute(""String_Node_Str"",""String_Node_Str"");
  e.appendChild(doc.createTextNode(""String_Node_Str""));
  parent.appendChild(e);
}"
44009,"Type getGenericSuperclass(Class c){
  try {
    return c.getGenericSuperclass();
  }
 catch (  Error ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + c + ""String_Node_Str"");
    return c.getSuperclass();
  }
}","Type getGenericSuperclass(Class c){
  try {
    return c.getGenericSuperclass();
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"" + c + ""String_Node_Str"");
    return c.getSuperclass();
  }
}"
44010,"void doAppendToDocument(Document doc,Element parent){
  int mods=jclass.getModifiers();
  Element e=doc.createElement(jclass.isInterface() && !jclass.isAnnotation() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!jclass.isInterface() || jclass.isAnnotation()) {
    Type t=getGenericSuperclass(jclass);
    if (t != null)     e.setAttribute(""String_Node_Str"",getGenericTypeName(t));
    Class t2=jclass.getSuperclass();
    if (t2 != null)     e.setAttribute(""String_Node_Str"",getClassName(t2,true));
  }
  String className=getClassName(jclass,false);
  e.setAttribute(""String_Node_Str"",className);
  e.setAttribute(""String_Node_Str"",Modifier.isFinal(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isStatic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isAbstract(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isPublic(mods) ? ""String_Node_Str"" : Modifier.isProtected(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (is_obfuscated)   e.setAttribute(""String_Node_Str"",Boolean.toString(is_obfuscated));
  Element typeParameters=getTypeParametersNode(doc,jclass.getTypeParameters());
  if (typeParameters != null)   e.appendChild(typeParameters);
  setDeprecatedAttr(e,jclass.getDeclaredAnnotations(),e.getAttribute(""String_Node_Str""));
  Type[] ifaces=getGenericInterfaces(jclass);
  sortTypes(ifaces);
  for (  Type iface : ifaces) {
    Element iface_elem=doc.createElement(""String_Node_Str"");
    if (iface instanceof Class)     iface_elem.setAttribute(""String_Node_Str"",getClassName((Class)iface,true));
 else     if (iface instanceof ParameterizedType) {
      ParameterizedType pt=(ParameterizedType)iface;
      if (pt.getRawType() instanceof Class)       iface_elem.setAttribute(""String_Node_Str"",getClassName(((Class)pt.getRawType()),true));
    }
    iface_elem.setAttribute(""String_Node_Str"",getGenericTypeName(iface));
    iface_elem.appendChild(doc.createTextNode(""String_Node_Str""));
    e.appendChild(iface_elem);
  }
  for (  Constructor ctor : jclass.getDeclaredConstructors())   appendCtor(ctor,doc,e);
  Class base_class=jclass.getSuperclass();
  Map<String,Method> methods=new HashMap<String,Method>();
  for (  Method method : jclass.getDeclaredMethods()) {
    if (method.isSynthetic() && isInPublicInheritanceChain(jclass))     continue;
    int mmods=method.getModifiers();
    int rtmods=method.getReturnType().getModifiers();
    if (!Modifier.isPublic(rtmods) && !Modifier.isProtected(rtmods))     continue;
    boolean nonPublic=false;
    Class[] ptypes=method.getParameterTypes();
    for (int pidx=0; pidx < ptypes.length; pidx++) {
      int ptmods=ptypes[pidx].getModifiers();
      if (!Modifier.isPublic(ptmods) && !Modifier.isProtected(ptmods))       nonPublic=true;
    }
    if (nonPublic)     continue;
    if (base_class != null && !Modifier.isFinal(mmods)) {
      Method base_method=null;
      Class ancestor=base_class;
      while (ancestor != null && base_method == null) {
        try {
          base_method=ancestor.getDeclaredMethod(method.getName(),method.getParameterTypes());
        }
 catch (        Exception ex) {
        }
        ancestor=ancestor.getSuperclass();
      }
      if (base_method != null) {
        int base_mods=base_method.getModifiers();
        int base_decl_class_mods=base_method.getDeclaringClass().getModifiers();
        if (!Modifier.isStatic(base_mods) && !Modifier.isAbstract(base_mods) && (Modifier.isPublic(mmods) == Modifier.isPublic(base_mods))&& Modifier.isPublic(base_decl_class_mods)) {
          if (!Modifier.isAbstract(mmods) || method.getName().equals(""String_Node_Str"")) {
            if (!method.getName().equals(""String_Node_Str"") || !jclass.getName().equals(""String_Node_Str""))             continue;
          }
        }
      }
    }
    String key=getGenericSignature(method);
    if (methods.containsKey(key)) {
      Type method_type=getGenericReturnType(method);
      Method hashed=methods.get(key);
      Type hashed_type=getGenericReturnType(hashed);
      Class mret=method_type instanceof Class ? (Class)method_type : null;
      Class hret=hashed_type instanceof Class ? (Class)hashed_type : null;
      if (mret == null || (hret != null && hret.isAssignableFrom(mret)))       methods.put(key,method);
 else       if (hret != null && !mret.isAssignableFrom(hret)) {
        System.err.print(""String_Node_Str"" + jclass.getName() + ""String_Node_Str""+ key);
        System.err.println(""String_Node_Str"" + getGenericReturnType(hashed).toString() + ""String_Node_Str""+ getGenericReturnType(method).toString());
      }
    }
 else {
      methods.put(key,method);
    }
  }
  ArrayList<String> sigs=new ArrayList<String>(methods.keySet());
  java.util.Collections.sort(sigs);
  for (  String sig : sigs)   appendMethod(methods.get(sig),doc,e);
  Field[] fields=getDeclaredFields();
  sortFields(fields);
  for (  Field field : fields)   appendField(field,asmFields.get(field.getName()),doc,e);
  parent.appendChild(e);
}","void doAppendToDocument(Document doc,Element parent){
  int mods=jclass.getModifiers();
  Element e=doc.createElement(jclass.isInterface() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!jclass.isInterface()) {
    Type t=getGenericSuperclass(jclass);
    if (t != null)     e.setAttribute(""String_Node_Str"",getGenericTypeName(t));
    Class t2=jclass.getSuperclass();
    if (t2 != null)     e.setAttribute(""String_Node_Str"",getClassName(t2,true));
  }
  String className=getClassName(jclass,false);
  e.setAttribute(""String_Node_Str"",className);
  e.setAttribute(""String_Node_Str"",Modifier.isFinal(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isStatic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isAbstract(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isPublic(mods) ? ""String_Node_Str"" : Modifier.isProtected(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (is_obfuscated)   e.setAttribute(""String_Node_Str"",Boolean.toString(is_obfuscated));
  Element typeParameters=getTypeParametersNode(doc,jclass.getTypeParameters());
  if (typeParameters != null)   e.appendChild(typeParameters);
  setDeprecatedAttr(e,jclass.getDeclaredAnnotations(),e.getAttribute(""String_Node_Str""));
  Type[] ifaces=getGenericInterfaces(jclass);
  sortTypes(ifaces);
  for (  Type iface : ifaces) {
    Element iface_elem=doc.createElement(""String_Node_Str"");
    if (iface instanceof Class)     iface_elem.setAttribute(""String_Node_Str"",getClassName((Class)iface,true));
 else     if (iface instanceof ParameterizedType) {
      ParameterizedType pt=(ParameterizedType)iface;
      if (pt.getRawType() instanceof Class)       iface_elem.setAttribute(""String_Node_Str"",getClassName(((Class)pt.getRawType()),true));
    }
    iface_elem.setAttribute(""String_Node_Str"",getGenericTypeName(iface));
    iface_elem.appendChild(doc.createTextNode(""String_Node_Str""));
    e.appendChild(iface_elem);
  }
  for (  Constructor ctor : jclass.getDeclaredConstructors())   appendCtor(ctor,doc,e);
  Class base_class=jclass.getSuperclass();
  Map<String,Method> methods=new HashMap<String,Method>();
  for (  Method method : jclass.getDeclaredMethods()) {
    if (method.isSynthetic() && isInPublicInheritanceChain(jclass))     continue;
    int mmods=method.getModifiers();
    int rtmods=method.getReturnType().getModifiers();
    if (!Modifier.isPublic(rtmods) && !Modifier.isProtected(rtmods))     continue;
    boolean nonPublic=false;
    Class[] ptypes=method.getParameterTypes();
    for (int pidx=0; pidx < ptypes.length; pidx++) {
      int ptmods=ptypes[pidx].getModifiers();
      if (!Modifier.isPublic(ptmods) && !Modifier.isProtected(ptmods))       nonPublic=true;
    }
    if (nonPublic)     continue;
    if (base_class != null && !Modifier.isFinal(mmods)) {
      Method base_method=null;
      Class ancestor=base_class;
      while (ancestor != null && base_method == null) {
        try {
          base_method=ancestor.getDeclaredMethod(method.getName(),method.getParameterTypes());
        }
 catch (        Exception ex) {
        }
        ancestor=ancestor.getSuperclass();
      }
      if (base_method != null) {
        int base_mods=base_method.getModifiers();
        int base_decl_class_mods=base_method.getDeclaringClass().getModifiers();
        if (!Modifier.isStatic(base_mods) && !Modifier.isAbstract(base_mods) && (Modifier.isPublic(mmods) == Modifier.isPublic(base_mods))&& Modifier.isPublic(base_decl_class_mods)) {
          if (!Modifier.isAbstract(mmods) || method.getName().equals(""String_Node_Str"")) {
            if (!method.getName().equals(""String_Node_Str"") || !jclass.getName().equals(""String_Node_Str""))             continue;
          }
        }
      }
    }
    String key=getGenericSignature(method);
    if (methods.containsKey(key)) {
      Type method_type=getGenericReturnType(method);
      Method hashed=methods.get(key);
      Type hashed_type=getGenericReturnType(hashed);
      Class mret=method_type instanceof Class ? (Class)method_type : null;
      Class hret=hashed_type instanceof Class ? (Class)hashed_type : null;
      if (mret == null || (hret != null && hret.isAssignableFrom(mret)))       methods.put(key,method);
 else       if (hret != null && !mret.isAssignableFrom(hret)) {
        System.err.print(""String_Node_Str"" + jclass.getName() + ""String_Node_Str""+ key);
        System.err.println(""String_Node_Str"" + getGenericReturnType(hashed).toString() + ""String_Node_Str""+ getGenericReturnType(method).toString());
      }
    }
 else {
      methods.put(key,method);
    }
  }
  ArrayList<String> sigs=new ArrayList<String>(methods.keySet());
  java.util.Collections.sort(sigs);
  for (  String sig : sigs)   appendMethod(methods.get(sig),doc,e);
  Field[] fields=getDeclaredFields();
  sortFields(fields);
  for (  Field field : fields)   appendField(field,asmFields.get(field.getName()),doc,e);
  parent.appendChild(e);
}"
44011,"void doAppendToDocument(Document doc,Element parent){
  int mods=jclass.getModifiers();
  boolean is_annotation=false;
  Element e=doc.createElement(jclass.isInterface() && !jclass.isAnnotation() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!jclass.isInterface() || jclass.isAnnotation()) {
    Type t=jclass.getGenericSuperclass();
    if (t != null)     e.setAttribute(""String_Node_Str"",getGenericTypeName(t));
    Class t2=jclass.getSuperclass();
    if (t2 != null)     e.setAttribute(""String_Node_Str"",getClassName(t2,true));
  }
  String className=getClassName(jclass,false);
  e.setAttribute(""String_Node_Str"",className);
  e.setAttribute(""String_Node_Str"",Modifier.isFinal(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isStatic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isAbstract(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isPublic(mods) ? ""String_Node_Str"" : Modifier.isProtected(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (is_obfuscated)   e.setAttribute(""String_Node_Str"",Boolean.toString(is_obfuscated));
  Element typeParameters=getTypeParametersNode(doc,jclass.getTypeParameters());
  if (typeParameters != null)   e.appendChild(typeParameters);
  setDeprecatedAttr(e,jclass.getDeclaredAnnotations(),e.getAttribute(""String_Node_Str""));
  Type[] ifaces=jclass.getGenericInterfaces();
  sortTypes(ifaces);
  for (  Type iface : ifaces) {
    Element iface_elem=doc.createElement(""String_Node_Str"");
    if (iface instanceof Class)     iface_elem.setAttribute(""String_Node_Str"",getClassName((Class)iface,true));
 else     if (iface instanceof ParameterizedType) {
      ParameterizedType pt=(ParameterizedType)iface;
      if (pt.getRawType() instanceof Class)       iface_elem.setAttribute(""String_Node_Str"",getClassName(((Class)pt.getRawType()),true));
    }
    iface_elem.setAttribute(""String_Node_Str"",getGenericTypeName(iface));
    iface_elem.appendChild(doc.createTextNode(""String_Node_Str""));
    e.appendChild(iface_elem);
    if (iface_elem.getAttribute(""String_Node_Str"").equals(""String_Node_Str""))     is_annotation=true;
  }
  for (  Constructor ctor : jclass.getDeclaredConstructors())   appendCtor(ctor,doc,e);
  Class base_class=jclass.getSuperclass();
  Map<String,Method> methods=new HashMap<String,Method>();
  for (  Method method : jclass.getDeclaredMethods()) {
    int mmods=method.getModifiers();
    int rtmods=method.getReturnType().getModifiers();
    if (!Modifier.isPublic(rtmods) && !Modifier.isProtected(rtmods))     continue;
    boolean nonPublic=false;
    Class[] ptypes=method.getParameterTypes();
    for (int pidx=0; pidx < ptypes.length; pidx++) {
      int ptmods=ptypes[pidx].getModifiers();
      if (!Modifier.isPublic(ptmods) && !Modifier.isProtected(ptmods))       nonPublic=true;
    }
    if (nonPublic)     continue;
    if (base_class != null && !Modifier.isFinal(mmods)) {
      Method base_method=null;
      Class ancestor=base_class;
      while (ancestor != null && base_method == null) {
        try {
          base_method=ancestor.getDeclaredMethod(method.getName(),method.getParameterTypes());
        }
 catch (        Exception ex) {
        }
        ancestor=ancestor.getSuperclass();
      }
      if (base_method != null) {
        int base_mods=base_method.getModifiers();
        int base_decl_class_mods=base_method.getDeclaringClass().getModifiers();
        if (!Modifier.isStatic(base_mods) && !Modifier.isAbstract(base_mods) && (Modifier.isPublic(mmods) == Modifier.isPublic(base_mods))&& Modifier.isPublic(base_decl_class_mods)) {
          if (!Modifier.isAbstract(mmods) || method.getName().equals(""String_Node_Str"")) {
            if (!method.getName().equals(""String_Node_Str"") || !jclass.getName().equals(""String_Node_Str""))             continue;
          }
        }
      }
    }
    Comparator clscmp=new Comparator<Class>(){
      public int compare(      Class c1,      Class c2){
        return c1.getName().compareTo(c2.getName());
      }
    }
;
    if (Arrays.binarySearch(jclass.getInterfaces(),Comparable.class,clscmp) >= 0 && method.getName().equals(""String_Node_Str"") && ptypes[0].equals(Object.class) && !jclass.equals(java.io.ObjectStreamField.class))     continue;
    if (Arrays.binarySearch(jclass.getInterfaces(),Comparator.class,clscmp) >= 0 && method.getName().equals(""String_Node_Str"") && ptypes.length == 2 && ptypes[0].equals(Object.class) && ptypes[1].equals(Object.class))     continue;
    String key=getSignature(method);
    if (methods.containsKey(key)) {
      Type method_type=method.getGenericReturnType();
      Method hashed=methods.get(key);
      Type hashed_type=hashed.getGenericReturnType();
      Class mret=method_type instanceof Class ? (Class)method_type : null;
      Class hret=hashed_type instanceof Class ? (Class)hashed_type : null;
      if (mret == null || (hret != null && hret.isAssignableFrom(mret)))       methods.put(key,method);
 else       if (hret != null && !mret.isAssignableFrom(hret)) {
        System.err.print(""String_Node_Str"" + jclass.getName() + ""String_Node_Str""+ key);
        System.err.println(""String_Node_Str"" + hashed.getGenericReturnType().toString() + ""String_Node_Str""+ method.getGenericReturnType().toString());
      }
    }
 else {
      methods.put(key,method);
    }
  }
  ArrayList<String> sigs=new ArrayList<String>(methods.keySet());
  java.util.Collections.sort(sigs);
  for (  String sig : sigs)   appendMethod(methods.get(sig),doc,e);
  Field[] fields=getDeclaredFields();
  sortFields(fields);
  for (  Field field : fields)   appendField(field,asmFields.get(field.getName()),doc,e);
  parent.appendChild(e);
  if (is_annotation)   parent.appendChild(createAnnotationMock(doc,className));
}","void doAppendToDocument(Document doc,Element parent){
  int mods=jclass.getModifiers();
  boolean is_annotation=false;
  Element e=doc.createElement(jclass.isInterface() && !jclass.isAnnotation() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!jclass.isInterface() || jclass.isAnnotation()) {
    Type t=jclass.getGenericSuperclass();
    if (t != null)     e.setAttribute(""String_Node_Str"",getGenericTypeName(t));
    Class t2=jclass.getSuperclass();
    if (t2 != null)     e.setAttribute(""String_Node_Str"",getClassName(t2,true));
  }
  String className=getClassName(jclass,false);
  e.setAttribute(""String_Node_Str"",className);
  e.setAttribute(""String_Node_Str"",Modifier.isFinal(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isStatic(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isAbstract(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  e.setAttribute(""String_Node_Str"",Modifier.isPublic(mods) ? ""String_Node_Str"" : Modifier.isProtected(mods) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (is_obfuscated)   e.setAttribute(""String_Node_Str"",Boolean.toString(is_obfuscated));
  Element typeParameters=getTypeParametersNode(doc,jclass.getTypeParameters());
  if (typeParameters != null)   e.appendChild(typeParameters);
  setDeprecatedAttr(e,jclass.getDeclaredAnnotations(),e.getAttribute(""String_Node_Str""));
  Type[] ifaces=jclass.getGenericInterfaces();
  sortTypes(ifaces);
  for (  Type iface : ifaces) {
    Element iface_elem=doc.createElement(""String_Node_Str"");
    if (iface instanceof Class)     iface_elem.setAttribute(""String_Node_Str"",getClassName((Class)iface,true));
 else     if (iface instanceof ParameterizedType) {
      ParameterizedType pt=(ParameterizedType)iface;
      if (pt.getRawType() instanceof Class)       iface_elem.setAttribute(""String_Node_Str"",getClassName(((Class)pt.getRawType()),true));
    }
    iface_elem.setAttribute(""String_Node_Str"",getGenericTypeName(iface));
    iface_elem.appendChild(doc.createTextNode(""String_Node_Str""));
    e.appendChild(iface_elem);
    if (iface_elem.getAttribute(""String_Node_Str"").equals(""String_Node_Str""))     is_annotation=true;
  }
  for (  Constructor ctor : jclass.getDeclaredConstructors())   appendCtor(ctor,doc,e);
  Class base_class=jclass.getSuperclass();
  Map<String,Method> methods=new HashMap<String,Method>();
  for (  Method method : jclass.getDeclaredMethods()) {
    if (method.isSynthetic() && isInPublicInheritanceChain(jclass))     continue;
    int mmods=method.getModifiers();
    int rtmods=method.getReturnType().getModifiers();
    if (!Modifier.isPublic(rtmods) && !Modifier.isProtected(rtmods))     continue;
    boolean nonPublic=false;
    Class[] ptypes=method.getParameterTypes();
    for (int pidx=0; pidx < ptypes.length; pidx++) {
      int ptmods=ptypes[pidx].getModifiers();
      if (!Modifier.isPublic(ptmods) && !Modifier.isProtected(ptmods))       nonPublic=true;
    }
    if (nonPublic)     continue;
    if (base_class != null && !Modifier.isFinal(mmods)) {
      Method base_method=null;
      Class ancestor=base_class;
      while (ancestor != null && base_method == null) {
        try {
          base_method=ancestor.getDeclaredMethod(method.getName(),method.getParameterTypes());
        }
 catch (        Exception ex) {
        }
        ancestor=ancestor.getSuperclass();
      }
      if (base_method != null) {
        int base_mods=base_method.getModifiers();
        int base_decl_class_mods=base_method.getDeclaringClass().getModifiers();
        if (!Modifier.isStatic(base_mods) && !Modifier.isAbstract(base_mods) && (Modifier.isPublic(mmods) == Modifier.isPublic(base_mods))&& Modifier.isPublic(base_decl_class_mods)) {
          if (!Modifier.isAbstract(mmods) || method.getName().equals(""String_Node_Str"")) {
            if (!method.getName().equals(""String_Node_Str"") || !jclass.getName().equals(""String_Node_Str""))             continue;
          }
        }
      }
    }
    String key=getGenericSignature(method);
    if (methods.containsKey(key)) {
      Type method_type=method.getGenericReturnType();
      Method hashed=methods.get(key);
      Type hashed_type=hashed.getGenericReturnType();
      Class mret=method_type instanceof Class ? (Class)method_type : null;
      Class hret=hashed_type instanceof Class ? (Class)hashed_type : null;
      if (mret == null || (hret != null && hret.isAssignableFrom(mret)))       methods.put(key,method);
 else       if (hret != null && !mret.isAssignableFrom(hret)) {
        System.err.print(""String_Node_Str"" + jclass.getName() + ""String_Node_Str""+ key);
        System.err.println(""String_Node_Str"" + hashed.getGenericReturnType().toString() + ""String_Node_Str""+ method.getGenericReturnType().toString());
      }
    }
 else {
      methods.put(key,method);
    }
  }
  ArrayList<String> sigs=new ArrayList<String>(methods.keySet());
  java.util.Collections.sort(sigs);
  for (  String sig : sigs)   appendMethod(methods.get(sig),doc,e);
  Field[] fields=getDeclaredFields();
  sortFields(fields);
  for (  Field field : fields)   appendField(field,asmFields.get(field.getName()),doc,e);
  parent.appendChild(e);
  if (is_annotation)   parent.appendChild(createAnnotationMock(doc,className));
}"
44012,"String getSignature(Method method){
  StringBuffer sig=new StringBuffer();
  sig.append(method.getName());
  for (  Type t : method.getGenericParameterTypes()) {
    sig.append(""String_Node_Str"");
    sig.append(getGenericTypeName(t));
  }
  return sig.toString();
}","String getSignature(Method method){
  StringBuffer sig=new StringBuffer();
  sig.append(method.getName());
  for (  Class t : method.getParameterTypes()) {
    sig.append(""String_Node_Str"");
    sig.append(t.getName());
  }
  return sig.toString();
}"
44013,"/** 
 * Sets the system env variables.
 */
private void setSystemEnvVariables(){
  if (configXmlPath == null) {
    configXmlPath=System.getenv().get(Constants.INPUT_SYSENV_CONFIG);
    logger.info(""String_Node_Str"" + configXmlPath);
  }
  if (outputDir == null) {
    outputDir=System.getenv().get(Constants.INPUT_SYSENV_OUTPUT_DIR);
    logger.info(""String_Node_Str"" + outputDir);
  }
  if (cssFilePath == null) {
    cssFilePath=System.getenv().get(Constants.INPUT_SYSENV_CSS);
    logger.info(""String_Node_Str"" + cssFilePath);
  }
}","/** 
 * Sets the system env variables.
 */
private void setSystemEnvVariables(){
  if (configXmlPath == null) {
    configXmlPath=System.getenv().get(Constants.INPUT_SYSENV_CONFIG);
    logger.finest(""String_Node_Str"" + configXmlPath);
  }
  if (outputDir == null) {
    outputDir=System.getenv().get(Constants.INPUT_SYSENV_OUTPUT_DIR);
    logger.finest(""String_Node_Str"" + outputDir);
  }
  if (cssFilePath == null) {
    cssFilePath=System.getenv().get(Constants.INPUT_SYSENV_CSS);
    logger.finest(""String_Node_Str"" + cssFilePath);
  }
}"
44014,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName));
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName));
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
44015,"/** 
 * Gets the text in div.
 * @param text the text
 * @param styleClassName the style class name
 * @return the text in div
 */
private String getTextInDiv(String text,String styleClassName){
  String temp=""String_Node_Str"";
  if (styleClassName != null) {
    temp+=""String_Node_Str"" + styleClassName + ""String_Node_Str"";
  }
  String tag=Constants.HTML_DIV_START.replace(""String_Node_Str"",temp);
  tag+=text;
  tag+=Constants.HTML_DIV_END;
  logger.info(""String_Node_Str"" + tag);
  return tag;
}","/** 
 * Gets the text in div.
 * @param text the text
 * @param styleClassName the style class name
 * @return the text in div
 */
private String getTextInDiv(String text,String styleClassName){
  String temp=""String_Node_Str"";
  if (styleClassName != null) {
    temp+=""String_Node_Str"" + styleClassName + ""String_Node_Str"";
  }
  String tag=Constants.HTML_DIV_START.replace(""String_Node_Str"",temp);
  tag+=text;
  tag+=Constants.HTML_DIV_END;
  logger.finest(""String_Node_Str"" + tag);
  return tag;
}"
44016,"/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && Node.COMMENT_NODE == sib.getNodeType()) {
    sib=getNextSibling(sib);
  }
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",sib);
  return sib;
}","/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && Node.COMMENT_NODE == sib.getNodeType()) {
    sib=getNextSibling(sib);
  }
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.FINEST,""String_Node_Str"",sib);
  return sib;
}"
44017,"/** 
 * Gets the first child ignoring empty white-space nodes.
 * @param node the node
 * @return the first child
 */
private Node getFirstChild(Node node){
  Node firstChild=node.getFirstChild();
  if (firstChild != null && firstChild.getNodeType() == Node.TEXT_NODE) {
    String value=firstChild.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        firstChild=getNextSibling(firstChild);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",firstChild);
  return firstChild;
}","/** 
 * Gets the first child ignoring empty white-space nodes.
 * @param node the node
 * @return the first child
 */
private Node getFirstChild(Node node){
  Node firstChild=node.getFirstChild();
  if (firstChild != null && firstChild.getNodeType() == Node.TEXT_NODE) {
    String value=firstChild.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        firstChild=getNextSibling(firstChild);
      }
    }
  }
  logger.log(Level.FINEST,""String_Node_Str"",firstChild);
  return firstChild;
}"
44018,"public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setInput(inputs);
              }
            }
            logger.info(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setOutput(inputs);
              }
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}","public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setInput(inputs);
              }
            }
            logger.finest(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setOutput(inputs);
              }
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}"
44019,"/** 
 * Gets the local name.
 * @param ctype the ctype
 * @return local name after stripping namespace prefix
 */
private String getLocalName(String ctype){
  logger.info(""String_Node_Str"" + ctype);
  String[] strs=ctype.split(""String_Node_Str"");
  if (strs.length > 1)   return strs[1];
 else   return strs[0];
}","/** 
 * Gets the local name.
 * @param ctype the ctype
 * @return local name after stripping namespace prefix
 */
private String getLocalName(String ctype){
  logger.finest(""String_Node_Str"" + ctype);
  String[] strs=ctype.split(""String_Node_Str"");
  if (strs.length > 1)   return strs[1];
 else   return strs[0];
}"
44020,"/** 
 * Visit.
 * @param node traverse and collect node names
 */
public void visit(Node node){
  logger.log(Level.INFO,""String_Node_Str"",node);
  this.nameNodeSet.add(node.getNodeName());
  NodeList children=node.getChildNodes();
  if (children != null) {
    int noOfNodes=children.getLength();
    for (int i=0; i < noOfNodes; i++) {
      Node tmpNode=children.item(i);
      this.nameNodeSet.add(tmpNode.getNodeName());
      visit(tmpNode);
    }
  }
}","/** 
 * Visit.
 * @param node traverse and collect node names
 */
public void visit(Node node){
  logger.log(Level.FINEST,""String_Node_Str"",node);
  this.nameNodeSet.add(node.getNodeName());
  NodeList children=node.getChildNodes();
  if (children != null) {
    int noOfNodes=children.getLength();
    for (int i=0; i < noOfNodes; i++) {
      Node tmpNode=children.item(i);
      this.nameNodeSet.add(tmpNode.getNodeName());
      visit(tmpNode);
    }
  }
}"
44021,"/** 
 * Gets the usage hierarchy for field.
 * @param allPossiblePaths the all possible paths
 * @param fieldName the field name
 * @return the possible usage paths to a field.
 */
public static List<String> getUsageHierarchyForField(List<String> allPossiblePaths,String fieldName){
  logger.info(""String_Node_Str"" + fieldName);
  logger.entering(""String_Node_Str"",""String_Node_Str"",fieldName);
  ArrayList<String> paths=new ArrayList<String>();
  for (  String path : allPossiblePaths) {
    if (path.endsWith(fieldName)) {
      paths.add(path.substring(0,path.lastIndexOf(""String_Node_Str"")));
    }
 else     if (path.contains(""String_Node_Str"" + fieldName + ""String_Node_Str"")) {
      paths.add(path.substring(0,path.indexOf(""String_Node_Str"" + fieldName + ""String_Node_Str"")));
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",paths);
  return paths;
}","/** 
 * Gets the usage hierarchy for field.
 * @param allPossiblePaths the all possible paths
 * @param fieldName the field name
 * @return the possible usage paths to a field.
 */
public static List<String> getUsageHierarchyForField(List<String> allPossiblePaths,String fieldName){
  logger.finest(""String_Node_Str"" + fieldName);
  logger.entering(""String_Node_Str"",""String_Node_Str"",fieldName);
  ArrayList<String> paths=new ArrayList<String>();
  for (  String path : allPossiblePaths) {
    if (path.endsWith(fieldName)) {
      paths.add(path.substring(0,path.lastIndexOf(""String_Node_Str"")));
    }
 else     if (path.contains(""String_Node_Str"" + fieldName + ""String_Node_Str"")) {
      paths.add(path.substring(0,path.indexOf(""String_Node_Str"" + fieldName + ""String_Node_Str"")));
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",paths);
  return paths;
}"
44022,"private void writeUseFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + ""String_Node_Str""));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","private void writeUseFile(WSDLDocInterface doc,AbstractType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + ""String_Node_Str""));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44023,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    writeUseFile(doc,type);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44024,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type,parentPath);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        ComplexType cType=doc.searchCType(typeCName);
        if (cType != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          String typeVisName=HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName);
          StringBuffer attrParams=new StringBuffer();
          if (!Utils.isEmpty(type.getParentType())) {
            String baseType=Utils.removeNameSpace(type.getParentType());
            if (doc.searchCType(baseType) == null && doc.searchSimpleType(baseType) == null) {
              attrParams.append(baseType);
            }
 else {
              attrParams.append(HtmlUtils.getAnchorTag(null,baseType + Constants.DOT_HTML,baseType,baseType));
            }
          }
          if (attrParams.length() > 0) {
            typeVisName+=""String_Node_Str"" + attrParams + ""String_Node_Str"";
          }
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeVisName+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          SimpleType Stype=doc.searchSimpleType(typeCName);
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          String typeVisName=HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName);
          String base=Utils.removeNameSpace(Stype.getBase());
          if (!Utils.isEmpty(base)) {
            if (doc.searchCType(base) == null && doc.searchSimpleType(base) == null) {
              typeVisName+=""String_Node_Str"" + base + ""String_Node_Str"";
            }
 else {
              typeVisName+=""String_Node_Str"" + HtmlUtils.getAnchorTag(null,base + Constants.DOT_HTML,base,base) + ""String_Node_Str"";
            }
          }
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeVisName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44025,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  wsdlPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  wsdlPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  ConfigurationReader.loadDefaultConfiguration();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}"
44026,"/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    html.append(getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    html.append(getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0 && returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
      returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    }
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44027,"private void mergeImportedXsd(Document document,XSDDocument xsdDocument,String tagName) throws ParserException, SAXException, IOException {
  if (document != null) {
    NodeList nodes=document.getElementsByTagNameNS(""String_Node_Str"",tagName);
    if (nodes != null) {
      for (int i=0; i < nodes.getLength(); i++) {
        org.w3c.dom.Element element=(org.w3c.dom.Element)nodes.item(i);
        if (element.hasAttribute(""String_Node_Str"")) {
          URL url=convertToURL(element.getAttribute(""String_Node_Str""),xsdDocument.getDocumentURL());
          if (url != null) {
            String schemaLocation=url.toExternalForm();
            if (!xsdDocument.getXsdsProcessed().contains(schemaLocation)) {
              XSDParserImpl parser=Context.getContext().getNewXsdParser();
              XSDDocument parsedDocument=(XSDDocument)parser.parse(schemaLocation);
              for (              Element elem : parsedDocument.getAllIndependentElements()) {
                xsdDocument.addIndependentElement(elem);
              }
              for (              ComplexType elem : parsedDocument.getAllComplexTypes()) {
                xsdDocument.addComplexType(elem);
              }
              for (              SimpleType elem : parsedDocument.getAllSimpleTypes()) {
                xsdDocument.addSimpleType(elem);
              }
              xsdDocument.getAllEnums().addAll(parsedDocument.getAllEnums());
              xsdDocument.getElementComplexTypeMap().putAll(parsedDocument.getElementComplexTypeMap());
              xsdDocument.getParentToComplexTypeMap().putAll(parsedDocument.getParentToComplexTypeMap());
              xsdDocument.getXsdsProcessed().addAll(parsedDocument.getXsdsProcessed());
              xsdDocument.getXsdsProcessed().add(schemaLocation);
            }
          }
 else {
            Logger.getLogger(XSDParserImpl.class.getName()).log(Level.SEVERE,element.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","private void mergeImportedXsd(Document document,XSDDocument xsdDocument,String tagName) throws ParserException, SAXException, IOException {
  if (document != null) {
    NodeList nodes=document.getElementsByTagNameNS(""String_Node_Str"",tagName);
    if (nodes != null) {
      for (int i=0; i < nodes.getLength(); i++) {
        org.w3c.dom.Element element=(org.w3c.dom.Element)nodes.item(i);
        if (element.hasAttribute(""String_Node_Str"")) {
          URL url=convertToURL(element.getAttribute(""String_Node_Str""),xsdDocument.getDocumentURL());
          if (url != null) {
            String schemaLocation=url.toExternalForm();
            if (!xsdDocument.getXsdsProcessed().contains(schemaLocation)) {
              XSDParserImpl parser=Context.getContext().getNewXsdParser();
              XSDDocument parsedDocument=(XSDDocument)parser.parse(schemaLocation);
              for (              Element elem : parsedDocument.getAllIndependentElements()) {
                xsdDocument.addIndependentElement(elem);
              }
              for (              ComplexType elem : parsedDocument.getAllComplexTypes()) {
                ComplexType cType=xsdDocument.searchCType(elem.getName());
                if (cType != null && cType.getParentType() != null && cType.getParentType().equals(elem.getName())) {
                  if (cType.getChildElements() != null) {
                    cType.getChildElements().addAll(elem.getChildElements());
                  }
 else {
                    cType.setChildElements(elem.getChildElements());
                  }
                  if (cType.getAttributes() != null) {
                    cType.getAttributes().addAll(elem.getAttributes());
                  }
 else {
                    cType.setAttributes(elem.getAttributes());
                  }
                  if (cType.getInstanceElements() != null) {
                    cType.getInstanceElements().addAll(elem.getInstanceElements());
                  }
 else {
                    cType.setInstanceElements(elem.getInstanceElements());
                  }
                  cType.setParentType(null);
                }
 else {
                  xsdDocument.addComplexType(elem);
                }
              }
              for (              SimpleType elem : parsedDocument.getAllSimpleTypes()) {
                xsdDocument.addSimpleType(elem);
              }
              xsdDocument.getAllEnums().addAll(parsedDocument.getAllEnums());
              xsdDocument.getElementComplexTypeMap().putAll(parsedDocument.getElementComplexTypeMap());
              xsdDocument.getParentToComplexTypeMap().putAll(parsedDocument.getParentToComplexTypeMap());
              xsdDocument.getXsdsProcessed().addAll(parsedDocument.getXsdsProcessed());
              xsdDocument.getXsdsProcessed().add(schemaLocation);
            }
          }
 else {
            Logger.getLogger(XSDParserImpl.class.getName()).log(Level.SEVERE,element.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
44028,"public synchronized XSDDocInterface parse(String url) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",url);
  XSDDocument xsdDocument=Context.getContext().getNewXsdDocument();
  try {
    URL file=new URL(url);
    Document doc=initialize(file);
    xsdDocument.setDocumentURL(file);
    mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
    if (doc != null) {
      this.visit(doc);
      this.parseAllNSElements(doc,xsdDocument);
      this.parseAllNSComplexTypes(doc,xsdDocument);
      this.linkChildTypes(xsdDocument);
      this.parseAllNSSimpleTypes(doc,xsdDocument);
      this.buildElementToTypeMap(xsdDocument);
      mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
      handleAnonymous(doc,xsdDocument);
    }
  }
 catch (  SAXException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  postProcessXsdDocument(xsdDocument,doc);
  return xsdDocument;
}","public synchronized XSDDocInterface parse(String url) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",url);
  XSDDocument xsdDocument=Context.getContext().getNewXsdDocument();
  try {
    URL file=new URL(url);
    Document doc=initialize(file);
    xsdDocument.setDocumentURL(file);
    if (doc != null) {
      this.visit(doc);
      this.parseAllNSElements(doc,xsdDocument);
      this.parseAllNSComplexTypes(doc,xsdDocument);
      this.linkChildTypes(xsdDocument);
      this.parseAllNSSimpleTypes(doc,xsdDocument);
      this.buildElementToTypeMap(xsdDocument);
      mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
      mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
      handleAnonymous(doc,xsdDocument);
    }
  }
 catch (  SAXException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  postProcessXsdDocument(xsdDocument,doc);
  return xsdDocument;
}"
44029,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(ctype.getName() + name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          xsdDocument.addSimpleType(simpleType);
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(ctype.getName() + name + ""String_Node_Str"");
          }
          if (simpleType.getEnums() != null) {
            for (            EnumElement enumE : simpleType.getEnums()) {
              enumE.setType(simpleType.getName());
              xsdDocument.addEnum(enumE);
            }
          }
          xsdDocument.addSimpleType(simpleType);
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
44030,"/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    SimpleType sType=populateSimpleType(xsdDocument,obj,false);
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      if (Utils.isEmpty(sType.getName())) {
        sType.setName(""String_Node_Str"" + i);
      }
      xsdDocument.addSimpleType(sType);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}","/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    SimpleType sType=populateSimpleType(xsdDocument,obj,false);
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      if (Utils.isEmpty(sType.getName())) {
        sType.setName(""String_Node_Str"" + i);
      }
      if (sType.getEnums() != null) {
        for (        EnumElement enumE : sType.getEnums()) {
          enumE.setType(sType.getName());
          xsdDocument.addEnum(enumE);
        }
      }
      xsdDocument.addSimpleType(sType);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}"
44031,"/** 
 * Parses the enum elements.
 * @param namespacePrefix the namespace prefix
 * @param element the element
 * @param xsdDocument the xsd document
 * @return collection of enums contained by an element associates enums toits annotations
 * @throws ParserException 
 */
private List<EnumElement> parseEnumElements(org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{element,xsdDocument});
  List<EnumElement> elements=new ArrayList<EnumElement>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String value=obj.getAttribute(""String_Node_Str"");
    EnumElement elem=Context.getContext().getNewEnumeration();
    elem.setValue(value);
    elem.setType(element.getAttribute(""String_Node_Str""));
    elem.setAnnotations(parseAnnotation(obj));
    elements.add(elem);
    postProcessEnum(elem,obj);
    xsdDocument.addEnum(elem);
  }
  logger.log(Level.FINER,""String_Node_Str"",elements);
  return elements;
}","/** 
 * Parses the enum elements.
 * @param namespacePrefix the namespace prefix
 * @param element the element
 * @param xsdDocument the xsd document
 * @return collection of enums contained by an element associates enums toits annotations
 * @throws ParserException 
 */
private List<EnumElement> parseEnumElements(org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{element,xsdDocument});
  List<EnumElement> elements=new ArrayList<EnumElement>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String value=obj.getAttribute(""String_Node_Str"");
    EnumElement elem=Context.getContext().getNewEnumeration();
    elem.setValue(value);
    elem.setType(element.getAttribute(""String_Node_Str""));
    elem.setAnnotations(parseAnnotation(obj));
    elements.add(elem);
    postProcessEnum(elem,obj);
  }
  logger.log(Level.FINER,""String_Node_Str"",elements);
  return elements;
}"
44032,"public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                opHolder.setInput(elements);
              }
            }
            logger.info(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null)               opHolder.setOutput(elements);
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}","public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setInput(inputs);
              }
            }
            logger.info(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setOutput(inputs);
              }
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}"
44033,"/** 
 * Gets the annotation info.
 * @return handle to ParsedAnnotationInfo object whichis the parsed annotation data including documentation and appInfo
 */
public ParsedAnnotationInfo getAnnotationInfo(){
  return annotation;
}","/** 
 * Gets the annotation info.
 * @return handle to ParsedAnnotationInfo object which is the parsedannotation data including documentation and appInfo
 */
public ParsedAnnotationInfo getAnnotationInfo(){
  return annotation;
}"
44034,"public int compareTo(Element object){
  return this.getName().toUpperCase().compareTo(object.getName().toUpperCase());
}","public int compareTo(Element object){
  int retVal=this.getName().toUpperCase().compareTo(object.getName().toUpperCase());
  if (retVal == 0 && (this.getType().equals(object.getType()) && ((this.getContainerComplexType() != null && this.getContainerComplexType().equals(object.getContainerComplexType())) || (object.getContainerComplexType() == null && this.getContainerComplexType() == null)))) {
    return 0;
  }
 else {
    if (retVal == 0) {
      retVal=1;
    }
    return retVal;
  }
}"
44035,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,NodeList ctypes,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
44036,"/** 
 * Parses the complex types.
 * @param tagName the tag name
 * @param srcDoc dom handle
 * @param xsdDocument handle parses the complex types, its annotations and populates the xsd
 * @throws XsdDocException 
 */
private void parseComplexTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList ctypeElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  this.setCtypes(ctypeElements);
  int noOfDomElements=ctypeElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)ctypeElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    ComplexType cType=Context.getContext().getNewComplexType();
    cType.setName(name);
    cType.setAnnotationInfo(parseAnnotation(obj));
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        cType.getAttributes().add(attribute);
      }
    }
    cType.setChildElements(this.parseChildElements(cType,ctypeElements,obj,xsdDocument));
    List<Element> instances=(List<Element>)typeElementsMap.get(name);
    if (instances != null) {
      cType.setInstanceElements(instances);
    }
    postProcessComplexType(cType,obj);
    xsdDocument.addComplexType(cType);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}","/** 
 * Parses the complex types.
 * @param tagName the tag name
 * @param srcDoc dom handle
 * @param xsdDocument handle parses the complex types, its annotations and populates the xsd
 * @throws XsdDocException 
 */
private void parseComplexTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList ctypeElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  this.setCtypes(ctypeElements);
  int noOfDomElements=ctypeElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)ctypeElements.item(i);
    xsdDocument.addComplexType(processComplexType(xsdDocument,obj));
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}"
44037,"/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 * @throws ParserException 
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    postProcessElement(elem,obj);
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}","/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 * @throws ParserException 
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    String type=obj.getAttribute(""String_Node_Str"");
    if (!Utils.isEmpty(type)) {
      String[] typeParts=type.split(""String_Node_Str"");
      if (typeParts != null && typeParts.length > 1) {
        type=typeParts[1];
      }
    }
 else {
      NodeList nodes=obj.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
      if (nodes != null && nodes.getLength() > 0) {
        org.w3c.dom.Element node=(org.w3c.dom.Element)nodes.item(0);
        ComplexType cType=processComplexType(xsdDocument,node);
        if (Utils.isEmpty(cType.getName())) {
          cType.setName(name + ""String_Node_Str"");
          List<Element> instances=(List<Element>)typeElementsMap.get(name);
          if (instances != null) {
            cType.setInstanceElements(instances);
          }
 else {
            instances=new ArrayList<Element>();
            instances.add(elem);
            cType.setInstanceElements(instances);
          }
        }
        type=cType.getName();
        xsdDocument.addComplexType(cType);
      }
    }
    elem.setType(type);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    postProcessElement(elem,obj);
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}"
44038,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(ctype.getName() + name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          xsdDocument.addSimpleType(simpleType);
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
44039,"private SimpleType populateSimpleType(XSDDocument xsdDocument,org.w3c.dom.Element obj,boolean fromAttribute) throws ParserException {
  NodeList nodes=obj.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  String base=((org.w3c.dom.Element)nodes.item(0)).getAttribute(""String_Node_Str"");
  String name=obj.getAttribute(""String_Node_Str"");
  SimpleType sType=Context.getContext().getNewSimpleType();
  sType.setBase(base);
  sType.setName(name);
  List<Element> instances=(List<Element>)typeElementsMap.get(name);
  NamedNodeMap nameNodeMap=obj.getAttributes();
  int size=nameNodeMap.getLength();
  for (int j=0; j < size; j++) {
    Attr attr=(Attr)nameNodeMap.item(j);
    if (attr != null) {
      Attribute attribute=new Attribute();
      attribute.setName(attr.getName());
      attribute.setValue(attr.getValue());
      sType.getAttributes().add(attribute);
    }
  }
  sType.setAnnotationInfo(parseAnnotation(obj));
  sType.setEnums(this.parseEnumElements(obj,xsdDocument));
  if (instances != null) {
    sType.setInstanceElements(instances);
  }
  if (!fromAttribute) {
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      xsdDocument.addSimpleType(sType);
    }
  }
 else {
    xsdDocument.addSimpleType(sType);
  }
  postProcessSimpleType(sType,obj);
  return sType;
}","private SimpleType populateSimpleType(XSDDocument xsdDocument,org.w3c.dom.Element obj,boolean fromAttribute) throws ParserException {
  NodeList nodes=obj.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  String base=((org.w3c.dom.Element)nodes.item(0)).getAttribute(""String_Node_Str"");
  String name=obj.getAttribute(""String_Node_Str"");
  SimpleType sType=Context.getContext().getNewSimpleType();
  sType.setBase(base);
  sType.setName(name);
  List<Element> instances=(List<Element>)typeElementsMap.get(name);
  NamedNodeMap nameNodeMap=obj.getAttributes();
  int size=nameNodeMap.getLength();
  for (int j=0; j < size; j++) {
    Attr attr=(Attr)nameNodeMap.item(j);
    if (attr != null) {
      Attribute attribute=new Attribute();
      attribute.setName(attr.getName());
      attribute.setValue(attr.getValue());
      sType.getAttributes().add(attribute);
    }
  }
  sType.setAnnotationInfo(parseAnnotation(obj));
  sType.setEnums(this.parseEnumElements(obj,xsdDocument));
  if (instances != null) {
    sType.setInstanceElements(instances);
  }
  postProcessSimpleType(sType,obj);
  return sType;
}"
44040,"/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    populateSimpleType(xsdDocument,obj,false);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}","/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    SimpleType sType=populateSimpleType(xsdDocument,obj,false);
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      if (Utils.isEmpty(sType.getName())) {
        sType.setName(""String_Node_Str"" + i);
      }
      xsdDocument.addSimpleType(sType);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}"
44041,"/** 
 * Convert to url. The path supplied is first tried as a URL external form string, if it fails it is tried as a Class path resource, Then it is tried as a local file path.
 * @param path the path 
 * @return the uRL
 */
public static URL convertToURL(String path){
  URL url=null;
  try {
    url=new URL(path);
  }
 catch (  MalformedURLException e) {
    url=Thread.currentThread().getContextClassLoader().getResource(path);
    if (url == null) {
      File file=new File(path);
      if (file.exists()) {
        try {
          url=file.toURI().toURL();
        }
 catch (        MalformedURLException e1) {
          Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,path + ""String_Node_Str"",e);
          throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str""+ path+ ""String_Node_Str"",e);
        }
      }
    }
  }
  return url;
}","/** 
 * Convert to url. The path supplied is first tried as a URL external form string, if it fails it is tried as a Class path resource, Then it is tried as a local file path.
 * @param path the path 
 * @return the uRL
 */
public static URL convertToURL(String path){
  URL url=null;
  try {
    url=new URL(path);
  }
 catch (  MalformedURLException e) {
    url=Thread.currentThread().getContextClassLoader().getResource(path);
    if (url == null) {
      File file=new File(path);
      if (file.exists()) {
        try {
          url=file.toURI().toURL();
        }
 catch (        MalformedURLException e1) {
          Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,path + ""String_Node_Str"",e);
          throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str""+ path+ ""String_Node_Str"",e);
        }
      }
    }
  }
  if (url == null) {
    throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str""+ path+ ""String_Node_Str"");
  }
  return url;
}"
44042,"/** 
 * Adds the simple attribute content.
 * @param simpleAttributeContent the simple attribute content
 */
public void addSimpleAttributeContent(AttributeElement simpleAttributeContent){
  if (this.simpleAttributeContent == null) {
    this.simpleAttributeContent=new TreeSet<AttributeElement>();
  }
  this.simpleAttributeContent.add(simpleAttributeContent);
}","/** 
 * Adds the simple attribute content.
 * @param simpleAttributeContent the simple attribute content
 */
public void addSimpleAttributeContent(AttributeElement simpleAttributeContent){
  if (this.simpleAttributeContent == null) {
    this.simpleAttributeContent=new LinkedHashSet<AttributeElement>();
  }
  this.simpleAttributeContent.add(simpleAttributeContent);
}"
44043,"/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",sib);
  return sib;
}","/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && Node.COMMENT_NODE == sib.getNodeType()) {
    sib=getNextSibling(sib);
  }
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",sib);
  return sib;
}"
44044,"private void writeUseFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","private void writeUseFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + ""String_Node_Str""));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44045,"/** 
 * Adds the footer.
 * @param html the html
 * @throws OutputFormatterException
 */
private void addFooter(StringBuffer html,boolean isType,boolean isComplexType,String typeName,String relPath,boolean isIndex,String keyLinks) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation(isType,isComplexType,typeName,relPath,isIndex,keyLinks);
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Adds the footer.
 * @param html the html
 * @throws OutputFormatterException
 */
private void addFooter(StringBuffer html,Map<String,String> replacementMap,String hdrFileParameterName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation(replacementMap,hdrFileParameterName);
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44046,"/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 * @throws OutputFormatterException
 */
protected String getFooterInformation(boolean isType,boolean isComplex,String typeName,String relPath,boolean isIndex,String keyLinks) throws OutputFormatterException {
  String parameterName=getHeaderFileName(isType,isComplex,isIndex);
  String headerFile=outputGenaratorParam.getParameters().get(parameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      header=header.replaceAll(""String_Node_Str"",typeName);
      header=header.replaceAll(""String_Node_Str"",relPath);
      if (isIndex) {
        if (keyLinks == null) {
          keyLinks=""String_Node_Str"";
        }
        header=header.replaceAll(""String_Node_Str"",keyLinks);
      }
      header=""String_Node_Str"" + header;
      return header;
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  return ""String_Node_Str"";
}","/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 * @throws OutputFormatterException
 */
protected String getFooterInformation(Map<String,String> replacementMap,String hdrFileParameterName) throws OutputFormatterException {
  String headerFile=outputGenaratorParam.getParameters().get(hdrFileParameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      for (      Map.Entry<String,String> entry : replacementMap.entrySet()) {
        header=header.replaceAll(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",entry.getValue());
      }
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      header=""String_Node_Str"" + header;
      return header;
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  return ""String_Node_Str"";
}"
44047,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html,false,false,null,getRelativePath(currentPackageName),false,null);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,false,false,null,getRelativePath(currentPackageName),false,null);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName));
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
44048,"private void createIndexFiles() throws OutputFormatterException {
  Map<String,IndexerDataObject> completeMap=getCompleteIndexerMap();
  StringBuffer keyLinks=getKeyLinks(completeMap);
  int i=1;
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(""String_Node_Str"" + i,""String_Node_Str""));
    buildHeader(html,false,false,null,""String_Node_Str"",true,keyLinks.toString());
    html.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (!(dataObj instanceof IndexerType)) {
        String baseHref=""String_Node_Str"" + dataObj.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String baseDoc=""String_Node_Str"";
        String inPageHref=dataObj.getBaseName();
        if (dataObj instanceof IndexerOperationHolder) {
          baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=dataObj.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          IndexerOperationHolder opHolder=(IndexerOperationHolder)dataObj;
          if (opHolder.getOperation().getAnnotations() != null && opHolder.getOperation().getAnnotations().getDocumentation() != null) {
            baseDoc=opHolder.getOperation().getAnnotations().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerElementHolder) {
          IndexerElementHolder elemHolder=(IndexerElementHolder)dataObj;
          if (elemHolder.isReqResp()) {
            baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
            if (elemHolder.isInput()) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=dataObj.getServiceName();
            baseTitleDesc=typeDesc + baseName;
            inPageHref=elemHolder.getOperationHolder().getBaseName();
          }
 else {
            baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
            if (elemHolder.getElement() instanceof Element) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=elemHolder.getElement().getContainerComplexType().getName();
            baseTitleDesc=typeDesc + baseName;
          }
          if (elemHolder.getElement().getAnnotationInfo() != null && elemHolder.getElement().getAnnotationInfo().getDocumentation() != null) {
            baseDoc=elemHolder.getElement().getAnnotationInfo().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerEnumValueElements) {
          IndexerEnumValueElements elemHolder=(IndexerEnumValueElements)dataObj;
          baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=elemHolder.getEnumElem().getType();
          baseTitleDesc=typeDesc + baseName;
          if (elemHolder.getEnumElem().getAnnotations() != null && elemHolder.getEnumElem().getAnnotations().getDocumentation() != null) {
            baseDoc=elemHolder.getEnumElem().getAnnotations().getDocumentation();
          }
        }
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ dataObj.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ baseDoc+ ""String_Node_Str"");
      }
    }
    html.append(""String_Node_Str"");
    addFooter(html,false,false,null,""String_Node_Str"",true,keyLinks.toString());
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + ""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str"");
    i=i + 1;
  }
  createDeprecationFile(completeMap);
}","private void createIndexFiles() throws OutputFormatterException {
  Map<String,IndexerDataObject> completeMap=getCompleteIndexerMap();
  StringBuffer keyLinks=getKeyLinks(completeMap);
  int i=1;
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(""String_Node_Str"" + i,""String_Node_Str""));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",""String_Node_Str"");
    replacementMap.put(""String_Node_Str"",""String_Node_Str"");
    replacementMap.put(""String_Node_Str"",keyLinks.toString());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (!(dataObj instanceof IndexerType)) {
        String baseHref=""String_Node_Str"" + dataObj.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String baseDoc=""String_Node_Str"";
        String inPageHref=dataObj.getBaseName();
        if (dataObj instanceof IndexerOperationHolder) {
          baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=dataObj.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          IndexerOperationHolder opHolder=(IndexerOperationHolder)dataObj;
          if (opHolder.getOperation().getAnnotations() != null && opHolder.getOperation().getAnnotations().getDocumentation() != null) {
            baseDoc=opHolder.getOperation().getAnnotations().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerElementHolder) {
          IndexerElementHolder elemHolder=(IndexerElementHolder)dataObj;
          if (elemHolder.isReqResp()) {
            baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
            if (elemHolder.isInput()) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=dataObj.getServiceName();
            baseTitleDesc=typeDesc + baseName;
            inPageHref=elemHolder.getOperationHolder().getBaseName();
          }
 else {
            baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
            if (elemHolder.getElement() instanceof Element) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=elemHolder.getElement().getContainerComplexType().getName();
            baseTitleDesc=typeDesc + baseName;
          }
          if (elemHolder.getElement().getAnnotationInfo() != null && elemHolder.getElement().getAnnotationInfo().getDocumentation() != null) {
            baseDoc=elemHolder.getElement().getAnnotationInfo().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerEnumValueElements) {
          IndexerEnumValueElements elemHolder=(IndexerEnumValueElements)dataObj;
          baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=elemHolder.getEnumElem().getType();
          baseTitleDesc=typeDesc + baseName;
          if (elemHolder.getEnumElem().getAnnotations() != null && elemHolder.getEnumElem().getAnnotations().getDocumentation() != null) {
            baseDoc=elemHolder.getEnumElem().getAnnotations().getDocumentation();
          }
        }
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ dataObj.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ baseDoc+ ""String_Node_Str"");
      }
    }
    html.append(""String_Node_Str"");
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + ""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str"");
    i=i + 1;
  }
  createDeprecationFile(completeMap);
}"
44049,"/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  buildHeader(html,false,false,null,""String_Node_Str"",true,null);
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html,false,false,null,""String_Node_Str"",true,null);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}"
44050,"private void writePackageTree(List<XSDDocInterface> wsdlDoc,String outputdir,boolean isAllPackages,String packageName) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + currentPackageName+ Constants.HTML_H3_END);
  if (!isAllPackages) {
    html.append(""String_Node_Str"" + Constants.HTML_BR);
    String str=""String_Node_Str"";
    while (packageName.indexOf('/') != -1) {
      str=""String_Node_Str"";
      packageName=packageName.substring(packageName.indexOf('/') + 1);
    }
    html.append(Constants.NBSP_THRICE + Constants.NBSP_THRICE + HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"" + Constants.DOT_HTML,null,""String_Node_Str""));
  }
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html,isAllPackages);
  html.append(""String_Node_Str"");
  writeFile(html,outputdir,""String_Node_Str"" + Constants.DOT_HTML);
}","private void writePackageTree(List<XSDDocInterface> wsdlDoc,String outputdir,boolean isAllPackages) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(""String_Node_Str"" + currentPackageName,outputdir));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",(outputdir == null ? ""String_Node_Str"" : getRelativePath(outputdir)));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + currentPackageName+ Constants.HTML_H3_END);
  if (!isAllPackages) {
    html.append(""String_Node_Str"" + Constants.HTML_BR);
    String str=getRelativePath(outputdir);
    html.append(Constants.NBSP_THRICE + Constants.NBSP_THRICE + HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"" + Constants.DOT_HTML,null,""String_Node_Str""));
  }
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html,isAllPackages);
  html.append(""String_Node_Str"");
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  if (outputdir == null) {
    outputdir=""String_Node_Str"";
  }
  writeFile(html,getCurrentOutputDir() + outputdir,""String_Node_Str"" + Constants.DOT_HTML);
}"
44051,"/** 
 * Sets the input types.
 * @param html the html
 * @param opH the op h
 * @param serviceName the service name
 */
private String setInputTypes(StringBuffer html,OperationHolder opH,String serviceName,String locBase){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,opH});
  String params=""String_Node_Str"";
  List<Element> inputs=opH.getInputTypes();
  if (inputs != null) {
    Iterator<Element> iter=inputs.iterator();
    while (iter.hasNext()) {
      Element elem=iter.next();
      params=HtmlUtils.getAnchorTag(null,locBase + ""String_Node_Str"" + SEPARATOR+ elem.getType()+ Constants.DOT_HTML,elem.getType(),elem.getType());
      params+=""String_Node_Str"" + elem.getName();
      if (iter.hasNext()) {
        params+=""String_Node_Str"";
      }
    }
  }
  html.append(params);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
  return params;
}","/** 
 * Sets the input types.
 * @param html the html
 * @param opH the op h
 * @param wsdlDoc the wsdl doc
 * @throws OutputFormatterException
 */
private void setInputTypes(StringBuffer html,OperationHolder opH,WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,opH});
  List<Element> inputs=opH.getInputTypes();
  if (inputs != null) {
    Iterator<Element> iter=inputs.iterator();
    while (iter.hasNext()) {
      Element elem=iter.next();
      html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + SEPARATOR + elem.getType()+ Constants.DOT_HTML,elem.getType(),elem.getType()),""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(getTextInSpan(elem.getName(),""String_Node_Str""));
      if (iter.hasNext()) {
        html.append(""String_Node_Str"");
      }
      ComplexType cType=wsdlDoc.searchCType(elem.getType());
      if (cType != null) {
        writeComplexTypeFile(wsdlDoc,cType,cType.getName());
      }
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44052,"/** 
 * Builds the header.
 * @param html the html
 * @throws OutputFormatterException
 */
private void buildHeader(StringBuffer html,boolean isType,boolean isComplex,String typeName,String relPath,boolean isIndex,String keyLinks) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String header=getFooterInformation(isType,isComplex,typeName,relPath,isIndex,keyLinks);
  html.append(header);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header.
 * @param html the html
 * @throws OutputFormatterException
 */
private void buildHeader(StringBuffer html,Map<String,String> replacementMap,String hdrFileParameterName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String header=getFooterInformation(replacementMap,hdrFileParameterName);
  html.append(header);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44053,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    buildHeader(html,true,false,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,true,false,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44054,"/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,wsdlDoc.getServiceName(),""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=setInputTypes(html,opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    html.append(getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44055,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    buildHeader(html,true,true,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type,parentPath);
    addFooter(html,true,true,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type,parentPath);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44056,"private void createDeprecationFile(Map<String,IndexerDataObject> completeMap) throws OutputFormatterException {
  Map<IndexerType,String> deprecatedTypes=new TreeMap<IndexerType,String>();
  Map<IndexerElementHolder,String> deprecatedElements=new TreeMap<IndexerElementHolder,String>();
  Map<IndexerOperationHolder,String> deprecatedOperations=new TreeMap<IndexerOperationHolder,String>();
  Map<IndexerEnumValueElements,String> deprecatedEnums=new TreeMap<IndexerEnumValueElements,String>();
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (dataObj instanceof IndexerType) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerType)dataObj).getType().getAnnotations());
        if (depreDetails != null) {
          deprecatedTypes.put(((IndexerType)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerElementHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerElementHolder)dataObj).getElement().getAnnotationInfo());
        if (depreDetails != null) {
          deprecatedElements.put(((IndexerElementHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerOperationHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerOperationHolder)dataObj).getOperation().getAnnotations());
        if (depreDetails == null) {
          OperationHolder oper=((IndexerOperationHolder)dataObj).getOperation();
          for (          Element input : oper.getInputTypes()) {
            depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
          }
          if (depreDetails == null) {
            for (            Element input : oper.getOutputTypes()) {
              depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
            }
          }
        }
        if (depreDetails != null) {
          deprecatedOperations.put(((IndexerOperationHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerEnumValueElements) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerEnumValueElements)dataObj).getEnumElem().getAnnotations());
        if (depreDetails != null) {
          deprecatedEnums.put(((IndexerEnumValueElements)dataObj),depreDetails.toString());
        }
      }
    }
  }
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(""String_Node_Str"",null));
  buildHeader(html,false,false,null,""String_Node_Str"",true,null);
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  if (!(deprecatedTypes.isEmpty() && deprecatedElements.isEmpty() && deprecatedEnums.isEmpty()&& deprecatedOperations.isEmpty())) {
    if (!deprecatedOperations.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerOperationHolder,String> entry : deprecatedOperations.entrySet()) {
        IndexerOperationHolder op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedTypes.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerType,String> entry : deprecatedTypes.entrySet()) {
        IndexerType op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + ""String_Node_Str""+ op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerElementHolder,String> entry : deprecatedElements.entrySet()) {
        IndexerElementHolder elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        if (elemHolder.isReqResp()) {
          baseHref=baseHref + SEPARATOR + elemHolder.getServiceName()+ Constants.DOT_HTML;
          if (elemHolder.isInput()) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          inPageHref=elemHolder.getOperationHolder().getBaseName();
        }
 else {
          baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
          if (elemHolder.getElement() instanceof Element) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getElement().getContainerComplexType().getName();
          baseTitleDesc=typeDesc + baseName;
        }
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedEnums.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerEnumValueElements,String> entry : deprecatedEnums.entrySet()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        IndexerEnumValueElements elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
        typeDesc=""String_Node_Str"";
        baseName=elemHolder.getEnumElem().getType();
        baseTitleDesc=typeDesc + baseName;
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
  }
 else {
    html.append(""String_Node_Str"");
  }
  addFooter(html,false,false,null,""String_Node_Str"",true,null);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"");
}","private void createDeprecationFile(Map<String,IndexerDataObject> completeMap) throws OutputFormatterException {
  Map<IndexerType,String> deprecatedTypes=new TreeMap<IndexerType,String>();
  Map<IndexerElementHolder,String> deprecatedElements=new TreeMap<IndexerElementHolder,String>();
  Map<IndexerOperationHolder,String> deprecatedOperations=new TreeMap<IndexerOperationHolder,String>();
  Map<IndexerEnumValueElements,String> deprecatedEnums=new TreeMap<IndexerEnumValueElements,String>();
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (dataObj instanceof IndexerType) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerType)dataObj).getType().getAnnotations());
        if (depreDetails != null) {
          deprecatedTypes.put(((IndexerType)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerElementHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerElementHolder)dataObj).getElement().getAnnotationInfo());
        if (depreDetails != null) {
          deprecatedElements.put(((IndexerElementHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerOperationHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerOperationHolder)dataObj).getOperation().getAnnotations());
        if (depreDetails == null) {
          OperationHolder oper=((IndexerOperationHolder)dataObj).getOperation();
          for (          Element input : oper.getInputTypes()) {
            depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
          }
          if (depreDetails == null) {
            for (            Element input : oper.getOutputTypes()) {
              depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
            }
          }
        }
        if (depreDetails != null) {
          deprecatedOperations.put(((IndexerOperationHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerEnumValueElements) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerEnumValueElements)dataObj).getEnumElem().getAnnotations());
        if (depreDetails != null) {
          deprecatedEnums.put(((IndexerEnumValueElements)dataObj),depreDetails.toString());
        }
      }
    }
  }
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(""String_Node_Str"",null));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  if (!(deprecatedTypes.isEmpty() && deprecatedElements.isEmpty() && deprecatedEnums.isEmpty()&& deprecatedOperations.isEmpty())) {
    if (!deprecatedOperations.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerOperationHolder,String> entry : deprecatedOperations.entrySet()) {
        IndexerOperationHolder op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedTypes.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerType,String> entry : deprecatedTypes.entrySet()) {
        IndexerType op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + ""String_Node_Str""+ op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerElementHolder,String> entry : deprecatedElements.entrySet()) {
        IndexerElementHolder elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        if (elemHolder.isReqResp()) {
          baseHref=baseHref + SEPARATOR + elemHolder.getServiceName()+ Constants.DOT_HTML;
          if (elemHolder.isInput()) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          inPageHref=elemHolder.getOperationHolder().getBaseName();
        }
 else {
          baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
          if (elemHolder.getElement() instanceof Element) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getElement().getContainerComplexType().getName();
          baseTitleDesc=typeDesc + baseName;
        }
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedEnums.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerEnumValueElements,String> entry : deprecatedEnums.entrySet()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        IndexerEnumValueElements elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
        typeDesc=""String_Node_Str"";
        baseName=elemHolder.getEnumElem().getType();
        baseTitleDesc=typeDesc + baseName;
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
  }
 else {
    html.append(""String_Node_Str"");
  }
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"");
}"
44057,"public void createTreeFiles() throws OutputFormatterException {
  List<XSDDocInterface> allPackages=new ArrayList<XSDDocInterface>();
  for (  Map.Entry<String,List<XSDDocInterface>> entry : packageDocMap.entrySet()) {
    currentPackageName=entry.getKey();
    List<XSDDocInterface> list=entry.getValue();
    for (    XSDDocInterface xsd : list) {
      List<ComplexType> cTypes=xsd.getAllComplexTypes();
      for (      ComplexType cType : cTypes) {
        cType.setPackageName(((WSDLDocInterface)xsd).getPackageName());
      }
    }
    writePackageTree(list,getCurrentOutputDir() + File.separator + currentPackageName,false,currentPackageName);
    allPackages.addAll(entry.getValue());
  }
  writePackageTree(allPackages,getCurrentOutputDir(),true,null);
}","public void createTreeFiles() throws OutputFormatterException {
  List<XSDDocInterface> allPackages=new ArrayList<XSDDocInterface>();
  for (  Map.Entry<String,List<XSDDocInterface>> entry : packageDocMap.entrySet()) {
    currentPackageName=entry.getKey();
    List<XSDDocInterface> list=entry.getValue();
    for (    XSDDocInterface xsd : list) {
      List<ComplexType> cTypes=xsd.getAllComplexTypes();
      for (      ComplexType cType : cTypes) {
        cType.setPackageName(((WSDLDocInterface)xsd).getPackageName());
      }
    }
    writePackageTree(list,currentPackageName,false);
    allPackages.addAll(entry.getValue());
  }
  writePackageTree(allPackages,null,true);
}"
44058,"/** 
 * Load configurations from the file path specified.
 * @param config the config
 */
public static void loadConfigurations(InputStream config){
  Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",config);
  try {
    Document document=getDocument(config);
    if (document == null) {
      Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"");
      throw new ConfigurationException(""String_Node_Str"");
    }
    Context context=Context.getContext();
    NodeList nodeList=document.getElementsByTagName(""String_Node_Str"");
    Node node=nodeList.item(0);
    if (node != null) {
      String css=node.getTextContent();
      context.setCssFilePath(css);
    }
    populateAnnotationParsers(document,context);
    populateOutputGenerators(document,context);
    nodeList=document.getElementsByTagName(""String_Node_Str"");
    node=nodeList.item(0);
    if (node != null) {
      String outputdir=node.getTextContent();
      context.setOutputDir(outputdir);
    }
    populateDocuments(document,context);
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",new Object[]{document,context});
  }
 catch (  SAXException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
catch (  IOException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
}","/** 
 * Load configurations from the file path specified.
 * @param config the config
 */
public static void loadConfigurations(InputStream config){
  Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",config);
  try {
    Document document=getDocument(config);
    if (document == null) {
      Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"");
      throw new ConfigurationException(""String_Node_Str"");
    }
    Context context=Context.getContext();
    NodeList nodeList=document.getElementsByTagName(""String_Node_Str"");
    Node node=nodeList.item(0);
    if (node != null) {
      String css=node.getTextContent();
      context.setCssFilePath(css);
    }
    populateAnnotationParsers(document,context);
    populateOutputGenerators(document,context);
    nodeList=document.getElementsByTagName(""String_Node_Str"");
    node=nodeList.item(0);
    if (node != null) {
      String outputdir=node.getTextContent();
      context.setOutputDir(outputdir);
    }
    populateDocuments(document,context);
    populateFactoryClasses(document,context);
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",new Object[]{document,context});
  }
 catch (  SAXException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
catch (  IOException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
}"
44059,"public ComplexType searchCType(String name){
  if (xsdDocument != null) {
    return this.xsdDocument.searchCType(name);
  }
  return xsdDocument.searchCType(name);
}","public ComplexType searchCType(String name){
  if (xsdDocument != null) {
    return this.xsdDocument.searchCType(name);
  }
  return null;
}"
44060,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  this.xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  this.xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  ConfigurationReader.loadDefaultConfiguration();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}"
44061,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 */
private Set<Element> parseChildElements(ComplexType ctype,NodeList ctypes,org.w3c.dom.Element element,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=new AttributeElement();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 */
private Set<Element> parseChildElements(ComplexType ctype,NodeList ctypes,org.w3c.dom.Element element,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=new AttributeElement();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
44062,"/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  String[] strs=tagName.split(""String_Node_Str"");
  String nsprefix=strs[0] + ""String_Node_Str"";
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}","/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}"
44063,"/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element node){
  logger.log(Level.FINER,""String_Node_Str"",node);
  ParsedAnnotationInfo info=null;
  if (node != null) {
    info=new ParsedAnnotationInfo();
    String documentation=""String_Node_Str"";
    for (Node childNode=node.getFirstChild(); childNode != null; ) {
      Node nextChild=childNode.getNextSibling();
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=childNode.getNodeName();
        AnnotationParser parser=getAnnotationParser(tagName);
        if (parser != null) {
          ParsedAnnotationTag parsedData=parser.parseAnnotation((org.w3c.dom.Element)childNode);
          info.addParsedAnnotationTag(tagName,parsedData);
        }
      }
 else       if (childNode.getNodeType() == Node.TEXT_NODE) {
        documentation=documentation + childNode.getNodeValue();
      }
      childNode=nextChild;
    }
    if (!Utils.isEmpty(documentation)) {
      info.setDocumentation(documentation);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}","/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element node){
  logger.log(Level.FINER,""String_Node_Str"",node);
  ParsedAnnotationInfo info=null;
  if (node != null) {
    info=new ParsedAnnotationInfo();
    processDocumentation(node,info);
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}"
44064,"/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element elem){
  logger.log(Level.FINER,""String_Node_Str"",elem);
  NodeList docElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element docElement=(org.w3c.dom.Element)docElementList.item(0);
  ParsedAnnotationInfo info=new ParsedAnnotationInfo();
  if (docElement != null) {
    String documentation=docElement.getTextContent();
    info.setDocumentation(documentation);
  }
  NodeList annoElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element node=(org.w3c.dom.Element)annoElementList.item(0);
  if (node != null) {
    for (Node childNode=node.getFirstChild(); childNode != null; ) {
      Node nextChild=childNode.getNextSibling();
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=childNode.getNodeName();
        AnnotationParser parser=getAnnotationParser(tagName);
        if (parser != null) {
          ParsedAnnotationTag parsedData=parser.parseAnnotation((org.w3c.dom.Element)childNode);
          info.addParsedAnnotationTag(tagName,parsedData);
        }
      }
      childNode=nextChild;
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}","/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element elem){
  logger.log(Level.FINER,""String_Node_Str"",elem);
  NodeList docElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element docElement=(org.w3c.dom.Element)docElementList.item(0);
  ParsedAnnotationInfo info=new ParsedAnnotationInfo();
  if (docElement != null) {
    processDocumentation(docElement,info);
  }
  NodeList annoElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element node=(org.w3c.dom.Element)annoElementList.item(0);
  if (node != null) {
    for (Node childNode=node.getFirstChild(); childNode != null; ) {
      Node nextChild=childNode.getNextSibling();
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=childNode.getNodeName();
        AnnotationParser parser=getAnnotationParser(tagName);
        if (parser != null) {
          ParsedAnnotationTag parsedData=parser.parseAnnotation((org.w3c.dom.Element)childNode);
          info.addParsedAnnotationTag(tagName,parsedData);
        }
      }
      childNode=nextChild;
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}"
44065,"private void processSeeLinks(StringBuffer html,ParsedAnnotationInfo annInfo){
  if (annInfo != null) {
    List<ParsedAnnotationTag> seeLinks=AnnotationsHelper.getAnnotationTag(annInfo,""String_Node_Str"");
    if (seeLinks != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      for (      ParsedAnnotationTag seeLink : seeLinks) {
        html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
      }
    }
    List<ParsedAnnotationTag> callInofs=AnnotationsHelper.getCallInfo(annInfo);
    if (callInofs != null) {
      for (      ParsedAnnotationTag callInfo : callInofs) {
        seeLinks=AnnotationsHelper.getCallInfoChildren(callInfo,""String_Node_Str"");
        if (seeLinks != null) {
          if (callInfo.getChildren().get(""String_Node_Str"") != null) {
            html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            String value=AnnotationsHelper.getFirstCallInfoTagValue(callInfo,""String_Node_Str"");
            if (!Utils.isEmpty(value)) {
              html.append(getTextInDiv(""String_Node_Str"" + value + ""String_Node_Str"",""String_Node_Str""));
            }
          }
          List<ParsedAnnotationTag> calls=AnnotationsHelper.getCallInfoChildren(callInfo,""String_Node_Str"");
          if (calls != null) {
            String callString=""String_Node_Str"";
            Iterator<ParsedAnnotationTag> callIter=calls.iterator();
            while (callIter.hasNext()) {
              ParsedAnnotationTag call=callIter.next();
              callString=callString + call.getTagValue();
              if (callIter.hasNext()) {
                callString=callString + ""String_Node_Str"";
              }
            }
            html.append(getTextInDiv(callString + ""String_Node_Str"",""String_Node_Str""));
          }
          for (          ParsedAnnotationTag seeLink : seeLinks) {
            html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","private void processSeeLinks(StringBuffer html,ParsedAnnotationInfo annInfo){
  if (annInfo != null) {
    List<ParsedAnnotationTag> seeLinks=AnnotationsHelper.getAnnotationTag(annInfo,""String_Node_Str"");
    boolean headingAdded=false;
    if (seeLinks != null) {
      headingAdded=true;
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      for (      ParsedAnnotationTag seeLink : seeLinks) {
        html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
      }
    }
    List<ParsedAnnotationTag> callInofs=AnnotationsHelper.getCallInfo(annInfo);
    if (callInofs != null) {
      for (      ParsedAnnotationTag callInfo : callInofs) {
        seeLinks=AnnotationsHelper.getCallInfoChildren(callInfo,""String_Node_Str"");
        if (seeLinks != null) {
          if (!headingAdded) {
            html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          }
          for (          ParsedAnnotationTag seeLink : seeLinks) {
            html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
44066,"private Node getTypesInTree(List<XSDDocInterface> wsdlDoc){
  List<ComplexType> complexTypes=new ArrayList<ComplexType>();
  for (  XSDDocInterface xsdDocument : wsdlDoc) {
    if (xsdDocument.getAllComplexTypes() != null) {
      complexTypes.addAll(xsdDocument.getAllComplexTypes());
    }
  }
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    node.setName(type.getPackageName() + ""String_Node_Str"" + type.getName());
    node.setOriginalParent(type.getPackageName() + ""String_Node_Str"" + type.getParentType());
    getParent(root,node,type.getPackageName() + ""String_Node_Str"" + type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}","private Node getTypesInTree(List<XSDDocInterface> wsdlDoc){
  List<ComplexType> complexTypes=new ArrayList<ComplexType>();
  for (  XSDDocInterface xsdDocument : wsdlDoc) {
    if (xsdDocument.getAllComplexTypes() != null) {
      complexTypes.addAll(xsdDocument.getAllComplexTypes());
    }
  }
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    String packageName=type.getPackageName();
    if (packageName == null) {
      packageName=""String_Node_Str"";
    }
    node.setName(packageName + ""String_Node_Str"" + type.getName());
    node.setOriginalParent(packageName + ""String_Node_Str"" + type.getParentType());
    getParent(root,node,packageName + ""String_Node_Str"" + type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}"
44067,"/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,packageName + SEPARATOR + className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}","/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    if (packageName.startsWith(""String_Node_Str"")) {
      packageName=packageName.substring(1);
    }
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,packageName + SEPARATOR + className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}"
44068,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44069,"private void writePackageTree(WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + wsdlDoc.getPackageName()+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html,wsdlDoc.getPackageName());
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"" + Constants.DOT_HTML);
  System.out.println(root);
}","private void writePackageTree(WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + wsdlDoc.getPackageName()+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html);
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"" + Constants.DOT_HTML);
  System.out.println(root);
}"
44070,"private void writeTree(Node root,StringBuffer html,String packageName){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + packageName + ""String_Node_Str""+ node.getName()+ Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html,packageName);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}","private void writeTree(Node root,StringBuffer html){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + currentPackageName + ""String_Node_Str""+ node.getName()+ Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}"
44071,"/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  String[] folders=currentPackageName.split(""String_Node_Str"");
  for (  String folder : folders) {
    relPath=relPath + ""String_Node_Str"";
  }
  relPath=relPath + ""String_Node_Str"";
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  String[] folders=currentPackageName.split(""String_Node_Str"");
  for (  String folder : folders) {
    relPath=relPath + ""String_Node_Str"";
  }
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44072,"/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null && ""String_Node_Str"".equals(currLocFromBase)) {
    System.out.println(currLocFromBase);
  }
  if (currLocFromBase != null) {
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}","/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null) {
    if (currLocFromBase.startsWith(""String_Node_Str"")) {
      currLocFromBase=currLocFromBase.substring(1);
    }
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}"
44073,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  String xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
  XSDParser parser=new XSDParserImpl();
  xsdIntf=parser.parse(xsdPath);
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  String xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  ConfigurationReader.loadDefaultConfiguration();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
  XSDParser parser=new XSDParserImpl();
  xsdIntf=parser.parse(xsdPath);
}"
44074,"public static StringBuffer processDeprication(ParsedAnnotationInfo annInfo){
  String deprVersion=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String deprDetails=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String useInstead=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  StringBuffer result=null;
  if (!Utils.isEmpty(deprVersion)) {
    result=new StringBuffer();
    result.append(""String_Node_Str"" + deprVersion + Constants.HTML_BR);
    result.append(""String_Node_Str"" + deprDetails + Constants.HTML_BR);
    result.append(""String_Node_Str"" + useInstead + Constants.HTML_BR);
  }
  return result;
}","public static StringBuffer processDeprication(ParsedAnnotationInfo annInfo){
  String deprVersion=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String deprDetails=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String useInstead=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  StringBuffer result=null;
  if (!Utils.isEmpty(deprVersion)) {
    result=new StringBuffer();
    result.append(""String_Node_Str"" + deprVersion + Constants.HTML_BR);
    if (!Utils.isEmpty(deprDetails)) {
      result.append(""String_Node_Str"" + deprDetails + Constants.HTML_BR);
    }
    if (!Utils.isEmpty(useInstead)) {
      result.append(""String_Node_Str"" + useInstead + Constants.HTML_BR);
    }
  }
  return result;
}"
44075,"/** 
 * Adds the footer.
 * @param html the html
 */
private void addFooter(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation();
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Adds the footer.
 * @param html the html
 * @throws OutputFormatterException 
 */
private void addFooter(StringBuffer html,boolean isType,boolean isComplexType,String typeName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation(isType,isComplexType,typeName);
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44076,"/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 */
protected String getFooterInformation(){
  return ""String_Node_Str"";
}","/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 * @throws OutputFormatterException 
 */
protected String getFooterInformation(boolean isType,boolean isComplex,String typeName) throws OutputFormatterException {
  String parameterName=isType ? (isComplex ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String headerFile=outputGenaratorParam.getParameters().get(parameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      header=header.replaceAll(""String_Node_Str"",typeName);
      header=""String_Node_Str"" + header;
      return header;
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  return ""String_Node_Str"";
}"
44077,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writePackageTree(wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html,false,false,null);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,false,false,null);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
44078,"public void completeProcessing() throws OutputFormatterException {
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
  }
}","public void completeProcessing() throws OutputFormatterException {
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
    createTreeFiles();
  }
}"
44079,"/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}"
44080,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildHeader(html,true,true,type.getName());
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html,true,true,type.getName());
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44081,"/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 * @throws OutputFormatterException
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    html.append(Constants.HTML_HR);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}","/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 * @throws OutputFormatterException
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}"
44082,"private void writePackageTree(WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + wsdlDoc.getPackageName()+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html);
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"" + Constants.DOT_HTML);
  System.out.println(root);
}","private void writePackageTree(List<XSDDocInterface> wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + currentPackageName+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html);
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir() + File.separator + currentPackageName,""String_Node_Str"" + Constants.DOT_HTML);
}"
44083,"/** 
 * Builds the header.
 * @param html the html
 */
private void buildHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  if (currentPackageName != null) {
    String[] folders=currentPackageName.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATION_SUMMARY_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATIONS_DETAIL_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header.
 * @param html the html
 * @throws OutputFormatterException 
 */
private void buildHeader(StringBuffer html,boolean isType,boolean isComplex,String typeName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String parameterName=isType ? (isComplex ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String headerFile=outputGenaratorParam.getParameters().get(parameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      if (typeName != null) {
        header=header.replaceAll(""String_Node_Str"",typeName);
      }
      html.append(header);
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44084,"private Node getTypesInTree(WSDLDocInterface wsdlDoc){
  XSDDocInterface xsdDocument=((WSDLDocument)wsdlDoc).getXsdDocument();
  List<ComplexType> complexTypes=xsdDocument.getAllComplexTypes();
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    node.setName(type.getName());
    node.setOriginalParent(type.getParentType());
    getParent(root,node,type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}","private Node getTypesInTree(List<XSDDocInterface> wsdlDoc){
  List<ComplexType> complexTypes=new ArrayList<ComplexType>();
  for (  XSDDocInterface xsdDocument : wsdlDoc) {
    if (xsdDocument.getAllComplexTypes() != null) {
      complexTypes.addAll(xsdDocument.getAllComplexTypes());
    }
  }
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    node.setName(type.getName());
    node.setOriginalParent(type.getParentType());
    getParent(root,node,type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}"
44085,"private void writeTree(Node root,StringBuffer html){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + currentPackageName + ""String_Node_Str""+ node.getName()+ Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}","private void writeTree(Node root,StringBuffer html){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + node.getName() + Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}"
44086,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildHeader(html,true,false,type.getName());
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,true,false,type.getName());
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44087,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  if (packageName != null && packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html,wsdlDoc.getPackageName());
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writePackageTree(wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writePackageTree(wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
44088,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    buildTypeHeader(html,doc.getPackageName());
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44089,"/** 
 * Builds the header.
 * @param html the html
 */
private void buildHeader(StringBuffer html,String packageName){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  int count=packageName.replaceAll(""String_Node_Str"",""String_Node_Str"").length();
  String str=""String_Node_Str"";
  for (int i=0; i < count; i++) {
    str+=""String_Node_Str"";
  }
  html.append(HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATION_SUMMARY_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATIONS_DETAIL_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header.
 * @param html the html
 */
private void buildHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  if (currentPackageName != null) {
    String[] folders=currentPackageName.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATION_SUMMARY_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATIONS_DETAIL_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44090,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44091,"/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html,String packageName){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  int count=packageName.replaceAll(""String_Node_Str"",""String_Node_Str"").length();
  String str=""String_Node_Str"";
  for (int i=0; i < count + 1; i++) {
    str+=""String_Node_Str"";
  }
  html.append(HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  String[] folders=currentPackageName.split(""String_Node_Str"");
  for (  String folder : folders) {
    relPath=relPath + ""String_Node_Str"";
  }
  relPath=relPath + ""String_Node_Str"";
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44092,"/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null) {
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}","/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null && ""String_Node_Str"".equals(currLocFromBase)) {
    System.out.println(currLocFromBase);
  }
  if (currLocFromBase != null) {
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}"
44093,"/** 
 * Creates the all classes file.
 */
private void createAllClassesFile(){
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}","/** 
 * Creates the all classes file.
 * @throws OutputFormatterException 
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}"
44094,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
44095,"/** 
 * Write css files.
 */
private void writeCssFiles(){
  InputStream is=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
    String outputDir=getCurrentOutputDir();
    writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    if (Context.getContext().getCssFilePath() != null) {
      sb=new StringBuffer();
      while ((line=br.readLine()) != null) {
        sb.append(line);
      }
      writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    logger.severe(e.getMessage());
  }
}","/** 
 * Write css files.
 * @throws OutputFormatterException 
 */
private void writeCssFiles() throws OutputFormatterException {
  InputStream is=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
    String outputDir=getCurrentOutputDir();
    writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    if (Context.getContext().getCssFilePath() != null) {
      sb=new StringBuffer();
      while ((line=br.readLine()) != null) {
        sb.append(line);
      }
      writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    logger.severe(e.getMessage());
  }
}"
44096,"public void completeProcessing(){
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
  }
}","public void completeProcessing() throws OutputFormatterException {
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
  }
}"
44097,"/** 
 * Creates the index file.
 */
private void createIndexFile(){
  StringBuffer html=new StringBuffer(200);
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.ALLCLASSES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSESFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.INDEX+ Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the index file.
 * @throws OutputFormatterException 
 */
private void createIndexFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer(200);
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.ALLCLASSES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSESFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.INDEX+ Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),Constants.INDEX + Constants.DOT_HTML);
}"
44098,"/** 
 * Creates the all packages file.
 */
private void createAllPackagesFile(){
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.PACKAGES,null));
  Set<String> set=packageServicesMap.keySet();
  html.append(Constants.HTML_BOLD_START + Constants.PACKAGES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    html.append(HtmlUtils.getAnchorTag(packageName,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ Constants.ALLCLASSES+ Constants.DOT_HTML,null,packageName,Constants.CLASSESFRAME,null) + Constants.HTML_BR);
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML);
}","/** 
 * Creates the all packages file.
 * @throws OutputFormatterException 
 */
private void createAllPackagesFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.PACKAGES,null));
  Set<String> set=packageServicesMap.keySet();
  html.append(Constants.HTML_BOLD_START + Constants.PACKAGES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    html.append(HtmlUtils.getAnchorTag(packageName,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ Constants.ALLCLASSES+ Constants.DOT_HTML,null,packageName,Constants.CLASSESFRAME,null) + Constants.HTML_BR);
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML);
}"
44099,"/** 
 * Creates the all packages description file.
 */
private void createAllPackagesDescriptionFile(){
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException 
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}"
44100,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    for (    Element element : elements) {
      if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
        isRecursive=true;
      }
      String nodePath=parentPath + ""String_Node_Str"" + element.getName();
      String typeCName=getCTypeTypeName(element.getType());
      if (type.getName().equalsIgnoreCase(typeCName)) {
        isRecursive=true;
      }
      if (doc.searchCType(typeCName) != null && !isRecursive) {
        writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else       if (doc.searchSimpleType(typeCName) != null) {
        writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else {
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
      }
      if (element.getAnnotationInfo().getDocumentation() != null) {
        html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
      }
      processDefaultsAndBoundries(html,doc,element);
      deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,element.getAnnotationInfo());
      html.append(Constants.HTML_HR + Constants.HTML_BR);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException 
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    for (    Element element : elements) {
      if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
        isRecursive=true;
      }
      String nodePath=parentPath + ""String_Node_Str"" + element.getName();
      String typeCName=getCTypeTypeName(element.getType());
      if (type.getName().equalsIgnoreCase(typeCName)) {
        isRecursive=true;
      }
      if (doc.searchCType(typeCName) != null && !isRecursive) {
        writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else       if (doc.searchSimpleType(typeCName) != null) {
        writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else {
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
      }
      if (element.getAnnotationInfo().getDocumentation() != null) {
        html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
      }
      processDefaultsAndBoundries(html,doc,element);
      deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,element.getAnnotationInfo());
      html.append(Constants.HTML_HR + Constants.HTML_BR);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44101,"/** 
 * Write file.
 * @param html the html
 * @param dir the dir
 * @param fileName the file name
 */
private void writeFile(StringBuffer html,String dir,String fileName){
  try {
    File file=new File(dir);
    file.mkdirs();
    FileWriter fw=new FileWriter(dir + File.separator + fileName);
    fw.write(html.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException e) {
    new OutputFormatterException(e);
  }
}","/** 
 * Write file.
 * @param html the html
 * @param dir the dir
 * @param fileName the file name
 * @throws OutputFormatterException 
 */
private void writeFile(StringBuffer html,String dir,String fileName) throws OutputFormatterException {
  try {
    File file=new File(dir);
    file.mkdirs();
    FileWriter fw=new FileWriter(dir + File.separator + fileName);
    fw.write(html.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException e) {
    throw new OutputFormatterException(e);
  }
}"
44102,"/** 
 * Creates the individual package files.
 */
private void createIndividualPackageFiles(){
  Set<String> set=packageServicesMap.keySet();
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(Constants.CLASSES,packageName));
    html.append(Constants.HTML_BOLD_START + Constants.CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,className + Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + packageName,Constants.ALLCLASSES + Constants.DOT_HTML);
  }
}","/** 
 * Creates the individual package files.
 * @throws OutputFormatterException 
 */
private void createIndividualPackageFiles() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(Constants.CLASSES,packageName));
    html.append(Constants.HTML_BOLD_START + Constants.CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,className + Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + packageName,Constants.ALLCLASSES + Constants.DOT_HTML);
  }
}"
44103,"/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    html.append(Constants.HTML_HR);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}","/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 * @throws OutputFormatterException 
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    html.append(Constants.HTML_HR);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}"
44104,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    List<EnumElement> enumElements=type.getEnums();
    for (    EnumElement enumElement : enumElements) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(enumElement.getValue());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      if (enumElement.getAnnotations().getDocumentation() != null) {
        html.append(enumElement.getAnnotations().getDocumentation());
      }
      deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,enumElement.getAnnotations());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException 
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    List<EnumElement> enumElements=type.getEnums();
    for (    EnumElement enumElement : enumElements) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(enumElement.getValue());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      if (enumElement.getAnnotations().getDocumentation() != null) {
        html.append(enumElement.getAnnotations().getDocumentation());
      }
      deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,enumElement.getAnnotations());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44105,"/** 
 * Gets the operation documentation.
 * @param wsdlDoc the wsdl doc
 * @param holder the holder
 * @return the operation documentation
 */
private void appendOperationDocumentation(StringBuffer html,WSDLDocInterface wsdlDoc,OperationHolder holder){
  if (holder != null) {
    String documentation=null;
    if (holder.getAnnotations() != null) {
      documentation=holder.getAnnotations().getDocumentation();
    }
    List<Element> inputs=holder.getInputTypes();
    for (    Element elem : inputs) {
      String type=elem.getType();
      ComplexType ctype=wsdlDoc.searchCType(type);
      ParsedAnnotationInfo annotationInfo=ctype.getAnnotations();
      if (annotationInfo != null) {
        if (Utils.isEmpty(documentation)) {
          documentation=annotationInfo.getDocumentation();
          if (documentation != null) {
            html.append(getTextInSpan(documentation,""String_Node_Str""));
          }
        }
        StringBuffer deprDet=AnnotationsHelper.processDeprication(annotationInfo);
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,wsdlDoc,annotationInfo);
      }
    }
  }
}","/** 
 * Gets the operation documentation.
 * @param wsdlDoc the wsdl doc
 * @param holder the holder
 * @return the operation documentation
 */
private void appendOperationDocumentation(StringBuffer html,WSDLDocInterface wsdlDoc,OperationHolder holder){
  if (holder != null) {
    String documentation=null;
    if (holder.getAnnotations() != null) {
      documentation=holder.getAnnotations().getDocumentation();
      if (holder.getAnnotations().getDocumentation() != null) {
        html.append(getTextInSpan(documentation,""String_Node_Str"") + Constants.HTML_BR);
      }
    }
    List<Element> inputs=holder.getInputTypes();
    for (    Element elem : inputs) {
      String type=elem.getType();
      ComplexType ctype=wsdlDoc.searchCType(type);
      ParsedAnnotationInfo annotationInfo=ctype.getAnnotations();
      if (annotationInfo != null) {
        Map<String,List<ParsedAnnotationTag>> tagList=annotationInfo.getValue();
        if (tagList != null) {
          List<ParsedAnnotationTag> summaryTag=(List<ParsedAnnotationTag>)tagList.get(""String_Node_Str"");
          if (summaryTag != null) {
            String summary=summaryTag.get(0).getTagValue();
            html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
            html.append(getTextInSpan(summary,""String_Node_Str"") + Constants.HTML_BR + Constants.HTML_BR);
          }
        }
        documentation=annotationInfo.getDocumentation();
        if (documentation != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(getTextInSpan(documentation,""String_Node_Str"") + Constants.HTML_BR);
        }
      }
    }
    List<Element> outputs=holder.getOutputTypes();
    for (    Element opElem : outputs) {
      String opType=opElem.getType();
      ComplexType opCtype=wsdlDoc.searchCType(opType);
      ParsedAnnotationInfo opannotationInfo=opCtype.getAnnotations();
      if (opannotationInfo != null) {
        String opDocumentation=opannotationInfo.getDocumentation();
        if (opDocumentation != null) {
          html.append(Constants.HTML_BR + getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(getTextInSpan(opDocumentation,""String_Node_Str"") + Constants.HTML_BR);
        }
      }
    }
    for (    Element elem : inputs) {
      String type=elem.getType();
      ComplexType ctype=wsdlDoc.searchCType(type);
      ParsedAnnotationInfo annotationInfo=ctype.getAnnotations();
      if (annotationInfo != null) {
        StringBuffer deprDet=AnnotationsHelper.processDeprication(annotationInfo);
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,wsdlDoc,annotationInfo);
      }
    }
  }
}"
44106,"/** 
 * Gets the help text.
 * @return the help text
 */
private static String getHelpText(){
  String help=null;
  InputStream is=Main.class.getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line + System.getProperty(""String_Node_Str""));
    }
    help=sb.toString();
  }
 catch (  IOException e) {
    Logger.getLogger(Main.class.getName()).throwing(Main.class.getName(),""String_Node_Str"",e);
  }
  return help;
}","/** 
 * Gets the help text.
 * @return text displayed when help option is supplied.
 */
private static String getHelpText(){
  String help=null;
  InputStream is=Main.class.getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line + System.getProperty(""String_Node_Str""));
    }
    help=sb.toString();
  }
 catch (  IOException e) {
    Logger.getLogger(Main.class.getName()).throwing(Main.class.getName(),""String_Node_Str"",e);
  }
  return help;
}"
44107,"/** 
 * Removes the empty values.
 * @param documentval the documentval
 * @return the list
 */
private static List<String> removeEmptyValues(String[] documentval){
  List<String> retList=new ArrayList<String>();
  for (  String value : documentval) {
    if (value != null && !Utils.isEmpty(value)) {
      retList.add(value);
    }
  }
  return retList;
}","/** 
 * Removes any empty values supplied as documents.
 * @param documentval the documentval
 * @return the list
 */
private static List<String> removeEmptyValues(String[] documentval){
  List<String> retList=new ArrayList<String>();
  for (  String value : documentval) {
    if (value != null && !Utils.isEmpty(value)) {
      retList.add(value);
    }
  }
  return retList;
}"
44108,"/** 
 * Gets the all operations.
 * @return the all operations
 */
public List<OperationHolder> getAllOperations();","/** 
 * Gets the all wsdl operations.
 * @return the all operations
 */
public List<OperationHolder> getAllOperations();"
44109,"/** 
 * Gets the port types.
 * @return the port types
 */
public List<PortType> getPortTypes();","/** 
 * Gets all the port types defined in WSDL.
 * @return the port types
 */
public List<PortType> getPortTypes();"
44110,"/** 
 * Gets the package name.
 * @return the package name
 */
public String getPackageName();","/** 
 * Gets the package name of the WSDL. Package name is the local part of the WSDL Service URL.
 * @return the package name
 */
public String getPackageName();"
44111,"/** 
 * Gets the annotations.
 * @return the annotations
 */
public ParsedAnnotationInfo getAnnotations();","/** 
 * Gets the annotations on the WSDL. Typically returns the annotation defined on the service element.
 * @return the annotations
 */
public ParsedAnnotationInfo getAnnotations();"
44112,"/** 
 * Gets the complete remote path.
 * @return the complete remote path
 */
public String getCompleteRemotePath();","/** 
 * Gets the complete remote address of the service endpoint.
 * @return the complete remote path
 */
public String getCompleteRemotePath();"
44113,"/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}","/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,packageName + SEPARATOR + className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}"
44114,"private void buildFieldSummary(StringBuffer html,WSDLDocInterface doc,ComplexType type){
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  Set<Element> elements=type.getChildElements();
  if (type.getSimpleAttributeContent() != null) {
    elements.addAll(type.getSimpleAttributeContent());
  }
  for (  Element element : elements) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    String typeCName=getCTypeTypeName(element.getType());
    html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
    if (doc.searchCType(typeCName) != null || doc.searchSimpleType(typeCName) != null) {
      html.append(HtmlUtils.getAnchorTag(null,element.getType() + Constants.DOT_HTML,element.getType(),element.getType()));
    }
 else {
      html.append(element.getType());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + element.getName(),element.getName(),element.getName()));
    html.append(Constants.HTML_BR);
    if (element.getAnnotationInfo() != null && element.getAnnotationInfo().getDocumentation() != null) {
      html.append(element.getAnnotationInfo().getDocumentation());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
  }
  html.append(Constants.HTML_TABLE_END);
}","private void buildFieldSummary(StringBuffer html,WSDLDocInterface doc,ComplexType type){
  Set<Element> elements=type.getChildElements();
  if (type.getSimpleAttributeContent() != null) {
    elements.addAll(type.getSimpleAttributeContent());
  }
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  if (elements == null || elements.isEmpty()) {
    html.append(Constants.HTML_TABLE_END);
    html.append(type.getName() + ""String_Node_Str"");
    return;
  }
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  Element element : elements) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    String typeCName=getCTypeTypeName(element.getType());
    html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
    if (doc.searchCType(typeCName) != null || doc.searchSimpleType(typeCName) != null) {
      html.append(HtmlUtils.getAnchorTag(null,element.getType() + Constants.DOT_HTML,element.getType(),element.getType()));
    }
 else {
      html.append(element.getType());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + element.getName(),element.getName(),element.getName()));
    html.append(Constants.HTML_BR);
    if (element.getAnnotationInfo() != null && element.getAnnotationInfo().getDocumentation() != null) {
      html.append(element.getAnnotationInfo().getDocumentation());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
  }
  html.append(Constants.HTML_TABLE_END);
}"
44115,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  if (packageName != null && packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
44116,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    for (    Element element : elements) {
      if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
        isRecursive=true;
      }
      String nodePath=parentPath + ""String_Node_Str"" + element.getName();
      String typeCName=getCTypeTypeName(element.getType());
      if (type.getName().equalsIgnoreCase(typeCName)) {
        isRecursive=true;
      }
      html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
      if (doc.searchCType(typeCName) != null && !isRecursive) {
        writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else       if (doc.searchSimpleType(typeCName) != null) {
        writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else {
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
      }
      if (element.getAnnotationInfo().getDocumentation() != null) {
        html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
      }
      processDefaultsAndBoundries(html,doc,element);
      deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,element.getAnnotationInfo());
      html.append(Constants.HTML_HR + Constants.HTML_BR);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
44117,"private void printToFileIfApplicable(Object doc,OutputGenaratorParam outputGenaratorParam,String fileName) throws WsdlDocException {
  if (outputGenaratorParam.getParameters() != null) {
    if (outputGenaratorParam.getParameters().get(""String_Node_Str"") != null && ""String_Node_Str"".equals(outputGenaratorParam.getParameters().get(""String_Node_Str""))) {
      String outFile=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      if (outFile != null) {
        try {
          writeFile(doc.toString(),outFile,fileName);
        }
 catch (        IOException e) {
          throw new WsdlDocException(e);
        }
      }
    }
  }
}","private void printToFileIfApplicable(Object doc,OutputGenaratorParam outputGenaratorParam,String fileName) throws WsdlDocException {
  if (outputGenaratorParam.getParameters() != null) {
    if (outputGenaratorParam.getParameters().get(""String_Node_Str"") != null && ""String_Node_Str"".equals(outputGenaratorParam.getParameters().get(""String_Node_Str""))) {
      String outFile=outputGenaratorParam.getOutputDir();
      if (outFile != null) {
        try {
          writeFile(doc.toString(),outFile,fileName);
        }
 catch (        IOException e) {
          throw new WsdlDocException(e);
        }
      }
    }
  }
}"
44118,"/** 
 * Construct a new instance. <p/> If the   {@code skipLevelFilterCheck} is set to {@code true} it's the responsibility of the subclass to checkwhether the record is  {@link #isLoggable(java.util.logging.LogRecord) loggable} or not.
 * @param skipLevelFilterCheck {@code true} if the {@link #isLoggable(java.util.logging.LogRecord)} should beskipped, otherwise  {@code false}
 */
protected ExtHandler(final boolean skipLevelFilterCheck){
  handlersUpdater.clear(this);
  super.setErrorManager(DEFAULT_ERROR_MANAGER);
  this.skipLevelFilterCheck=skipLevelFilterCheck;
}","/** 
 * Construct a new instance.
 */
protected ExtHandler(){
  handlersUpdater.clear(this);
  super.setErrorManager(DEFAULT_ERROR_MANAGER);
}"
44119,"/** 
 * Publish an   {@code ExtLogRecord}. <p/> The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. <p/> The   {@code ExtHandler} is responsible for formatting the message, when and if necessary. The formatting shouldinclude localization.
 * @param record the log record to publish
 */
public final void publish(final ExtLogRecord record){
  if (enabled && record != null) {
    if (skipLevelFilterCheck || isLoggable(record)) {
      doPublish(record);
    }
  }
}","/** 
 * Publish an   {@code ExtLogRecord}. <p/> The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. <p/> The   {@code ExtHandler} is responsible for formatting the message, when and if necessary. The formatting shouldinclude localization.
 * @param record the log record to publish
 */
public void publish(final ExtLogRecord record){
  if (enabled && record != null && isLoggable(record)) {
    doPublish(record);
  }
}"
44120,"/** 
 * Construct a new instance.
 * @param limit the queue length to use
 */
public QueueHandler(final int limit){
  super(true);
  if (limit < 1) {
    throw badQueueLength();
  }
  this.limit=limit;
}","/** 
 * Construct a new instance.
 * @param limit the queue length to use
 */
public QueueHandler(final int limit){
  if (limit < 1) {
    throw badQueueLength();
  }
  this.limit=limit;
}"
44121,"protected MultiHandler(){
  super(true);
}","protected MultiHandler(){
}"
44122,"@Test public void testSetNullEncodingOnOutputStream() throws Exception {
  handler=new OutputStreamHandler(NO_FORMATTER);
  handler.setWriter(out);
  handler.setEncoding(null);
  handler.publish(AbstractHandlerTest.createLogRecord(""String_Node_Str""));
  assertThat(out.toString(),is(""String_Node_Str""));
}","@Test public void testSetNullEncodingOnOutputStream() throws Exception {
  handler=new OutputStreamHandler(NO_FORMATTER);
  handler.setWriter(out);
  handler.setEncoding(null);
  handler.publish(new ExtLogRecord(Level.INFO,""String_Node_Str"",getClass().getName()));
  assertThat(out.toString(),is(""String_Node_Str""));
}"
44123,"@Test public void testSetEncodingOnOutputStream() throws Exception {
  handler=new ConsoleHandler(Target.CONSOLE,NO_FORMATTER);
  handler.setWriter(out);
  handler.setEncoding(""String_Node_Str"");
  assertThat(handler.getEncoding(),is(""String_Node_Str""));
  handler.publish(AbstractHandlerTest.createLogRecord(""String_Node_Str""));
  assertThat(out.toString(),is(""String_Node_Str""));
}","@Test public void testSetEncodingOnOutputStream() throws Exception {
  handler=new ConsoleHandler(Target.CONSOLE,NO_FORMATTER);
  handler.setWriter(out);
  handler.setEncoding(""String_Node_Str"");
  assertThat(handler.getEncoding(),is(""String_Node_Str""));
  handler.publish(new ExtLogRecord(Level.INFO,""String_Node_Str"",getClass().getName()));
  assertThat(out.toString(),is(""String_Node_Str""));
}"
44124,"/** 
 * Set the target encoding.
 * @param encoding the new encoding
 * @throws SecurityException if you do not have sufficient permission to invoke this operation
 * @throws java.io.UnsupportedEncodingException if the specified encoding is not supported
 */
public void setEncoding(final String encoding) throws SecurityException, UnsupportedEncodingException {
synchronized (outputLock) {
    super.setEncoding(encoding);
    final OutputStream outputStream=this.outputStream;
    updateWriter(outputStream,encoding);
  }
}","/** 
 * Set the target encoding.
 * @param encoding the new encoding
 * @throws SecurityException if you do not have sufficient permission to invoke this operation
 * @throws java.io.UnsupportedEncodingException if the specified encoding is not supported
 */
public void setEncoding(final String encoding) throws SecurityException, UnsupportedEncodingException {
synchronized (outputLock) {
    super.setEncoding(encoding);
    if (this.outputStream != null) {
      final OutputStream outputStream=this.outputStream;
      updateWriter(outputStream,encoding);
    }
  }
}"
44125,"private void calcNextRollover(final long fromTime){
  if (period == Period.NEVER) {
    nextRollover=Long.MAX_VALUE;
    return;
  }
  nextSuffix=format.format(new Date(fromTime));
  final Calendar calendar=Calendar.getInstance(timeZone);
  calendar.setTimeInMillis(fromTime);
  final Period period=this.period;
switch (period) {
default :
case YEAR:
    calendar.set(Calendar.MONTH,0);
case MONTH:
  calendar.set(Calendar.DAY_OF_MONTH,0);
calendar.clear(Calendar.WEEK_OF_MONTH);
case WEEK:
if (period == Period.WEEK) {
calendar.set(Calendar.DAY_OF_WEEK,0);
}
 else {
calendar.clear(Calendar.DAY_OF_WEEK);
}
calendar.clear(Calendar.DAY_OF_WEEK_IN_MONTH);
case DAY:
calendar.set(Calendar.HOUR_OF_DAY,0);
case HALF_DAY:
calendar.set(Calendar.HOUR,0);
case HOUR:
calendar.set(Calendar.MINUTE,0);
case MINUTE:
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
}
switch (period) {
case YEAR:
calendar.add(Calendar.YEAR,1);
break;
case MONTH:
calendar.add(Calendar.MONTH,1);
break;
case WEEK:
calendar.add(Calendar.WEEK_OF_YEAR,1);
break;
case DAY:
calendar.add(Calendar.DAY_OF_MONTH,1);
break;
case HALF_DAY:
calendar.add(Calendar.AM_PM,1);
break;
case HOUR:
calendar.add(Calendar.HOUR_OF_DAY,1);
break;
case MINUTE:
calendar.add(Calendar.MINUTE,1);
break;
}
nextRollover=calendar.getTimeInMillis();
}","private void calcNextRollover(final long fromTime){
  if (period == Period.NEVER) {
    nextRollover=Long.MAX_VALUE;
    return;
  }
  nextSuffix=format.format(new Date(fromTime));
  final Calendar calendar=Calendar.getInstance(timeZone);
  calendar.setTimeInMillis(fromTime);
  final Period period=this.period;
switch (period) {
default :
case YEAR:
    calendar.set(Calendar.MONTH,0);
case MONTH:
  calendar.set(Calendar.DAY_OF_MONTH,0);
calendar.clear(Calendar.WEEK_OF_MONTH);
case WEEK:
if (period == Period.WEEK) {
calendar.set(Calendar.DAY_OF_WEEK,calendar.getFirstDayOfWeek());
}
 else {
calendar.clear(Calendar.DAY_OF_WEEK);
}
calendar.clear(Calendar.DAY_OF_WEEK_IN_MONTH);
case DAY:
calendar.set(Calendar.HOUR_OF_DAY,0);
case HALF_DAY:
if (period == Period.HALF_DAY) {
calendar.set(Calendar.HOUR,0);
}
 else {
calendar.set(Calendar.HOUR,0);
calendar.set(Calendar.AM_PM,0);
}
case HOUR:
calendar.set(Calendar.MINUTE,0);
case MINUTE:
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
}
switch (period) {
case YEAR:
calendar.add(Calendar.YEAR,1);
break;
case MONTH:
calendar.add(Calendar.MONTH,1);
break;
case WEEK:
calendar.add(Calendar.WEEK_OF_YEAR,1);
break;
case DAY:
calendar.add(Calendar.DAY_OF_MONTH,1);
break;
case HALF_DAY:
calendar.add(Calendar.AM_PM,1);
break;
case HOUR:
calendar.add(Calendar.HOUR_OF_DAY,1);
break;
case MINUTE:
calendar.add(Calendar.MINUTE,1);
break;
}
nextRollover=calendar.getTimeInMillis();
}"
44126,"@Test public void testPeriodicAndSizeRotate() throws Exception {
  final int logCount=100;
  final long rotateSize=1024L;
  final SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
  final Calendar cal=Calendar.getInstance();
  String extension=""String_Node_Str"" + fmt.format(cal.getTimeInMillis());
  PeriodicSizeRotatingFileHandler handler=new PeriodicSizeRotatingFileHandler();
  configureHandlerDefaults(handler);
  handler.setRotateSize(rotateSize);
  handler.setMaxBackupIndex(2);
  handler.setSuffix(""String_Node_Str"" + fmt.toPattern());
  handler.setFile(logFile);
  for (int i=0; i < logCount; i++) {
    handler.publish(createLogRecord(""String_Node_Str"",i));
  }
  File rotatedFile1=new File(BASE_LOG_DIR,FILENAME + extension + ""String_Node_Str"");
  File rotatedFile2=new File(BASE_LOG_DIR,FILENAME + extension + ""String_Node_Str"");
  Assert.assertTrue(logFile.exists());
  Assert.assertTrue(rotatedFile1.exists());
  Assert.assertTrue(rotatedFile2.exists());
  cal.add(Calendar.DAY_OF_MONTH,1);
  for (int i=0; i < logCount; i++) {
    ExtLogRecord record=createLogRecord(""String_Node_Str"",i);
    record.setMillis(cal.getTimeInMillis());
    handler.publish(record);
  }
  handler.close();
  extension=""String_Node_Str"" + fmt.format(cal.getTimeInMillis());
  rotatedFile1=new File(BASE_LOG_DIR,FILENAME + extension + ""String_Node_Str"");
  rotatedFile2=new File(BASE_LOG_DIR,FILENAME + extension + ""String_Node_Str"");
  Assert.assertTrue(logFile.exists());
  Assert.assertTrue(rotatedFile1.exists());
  Assert.assertTrue(rotatedFile2.exists());
  Assert.assertTrue(logFile.length() > 0L);
  Assert.assertTrue(rotatedFile1.length() > 0L);
  Assert.assertTrue(rotatedFile2.length() > 0L);
  rotatedFile1.delete();
  rotatedFile2.delete();
}","@Test public void testPeriodicAndSizeRotate() throws Exception {
  for (int i=0; i < supportedPeriods.size(); i++) {
    int j=i - 2;
    if (j < 0)     j=0;
    int handlerPeriod=supportedPeriods.get(i);
    for (; j <= i + 2; j++) {
      if (j >= supportedPeriods.size())       break;
      int logMessagePeriod=supportedPeriods.get(j);
      testPeriodicAndSizeRotate0(handlerPeriod,logMessagePeriod,true);
      testPeriodicAndSizeRotate0(handlerPeriod,logMessagePeriod,false);
    }
  }
}"
44127,"/** 
 * Construct a new instance.
 */
protected ExtHandler(){
  handlersUpdater.clear(this);
}","/** 
 * Construct a new instance.
 */
protected ExtHandler(){
  handlersUpdater.clear(this);
  super.setErrorManager(DEFAULT_ERROR_MANAGER);
}"
44128,"protected FastCopyHashMap<String,String> childValue(final Map<String,String> parentValue){
  return new FastCopyHashMap<String,String>(parentValue);
}","@Override protected FastCopyHashMap<String,String> childValue(final FastCopyHashMap<String,String> parentValue){
  return new FastCopyHashMap<String,String>(parentValue);
}"
44129,"protected FastCopyHashMap<String,String> initialValue(){
  return new FastCopyHashMap<String,String>();
}","@Override protected FastCopyHashMap<String,String> initialValue(){
  return new FastCopyHashMap<String,String>();
}"
44130,"private void calcNextRollover(final long fromTime){
  if (period == Period.NEVER) {
    nextRollover=Long.MAX_VALUE;
    return;
  }
  nextSuffix=format.format(new Date(fromTime));
  final Calendar calendar=Calendar.getInstance(timeZone);
  calendar.setTimeInMillis(fromTime);
  final Period period=this.period;
switch (period) {
default :
case YEAR:
    calendar.clear(Calendar.MONTH);
case MONTH:
  calendar.clear(Calendar.DAY_OF_MONTH);
calendar.clear(Calendar.WEEK_OF_MONTH);
case WEEK:
calendar.clear(Calendar.DAY_OF_WEEK);
calendar.clear(Calendar.DAY_OF_WEEK_IN_MONTH);
case DAY:
calendar.clear(Calendar.HOUR_OF_DAY);
case HALF_DAY:
calendar.clear(Calendar.HOUR);
case HOUR:
calendar.clear(Calendar.MINUTE);
case MINUTE:
calendar.clear(Calendar.SECOND);
calendar.clear(Calendar.MILLISECOND);
}
switch (period) {
case YEAR:
calendar.add(Calendar.YEAR,1);
break;
case MONTH:
calendar.add(Calendar.MONTH,1);
break;
case WEEK:
calendar.add(Calendar.WEEK_OF_YEAR,1);
break;
case DAY:
calendar.add(Calendar.DAY_OF_MONTH,1);
break;
case HALF_DAY:
calendar.add(Calendar.AM_PM,1);
break;
case HOUR:
calendar.add(Calendar.HOUR,1);
break;
case MINUTE:
calendar.add(Calendar.MINUTE,1);
break;
}
nextRollover=calendar.getTimeInMillis();
}","private void calcNextRollover(final long fromTime){
  if (period == Period.NEVER) {
    nextRollover=Long.MAX_VALUE;
    return;
  }
  nextSuffix=format.format(new Date(fromTime));
  final Calendar calendar=Calendar.getInstance(timeZone);
  calendar.setTimeInMillis(fromTime);
  final Period period=this.period;
switch (period) {
default :
case YEAR:
    calendar.clear(Calendar.MONTH);
case MONTH:
  calendar.clear(Calendar.DAY_OF_MONTH);
calendar.clear(Calendar.WEEK_OF_MONTH);
case WEEK:
calendar.clear(Calendar.DAY_OF_WEEK);
calendar.clear(Calendar.DAY_OF_WEEK_IN_MONTH);
case DAY:
calendar.set(Calendar.HOUR_OF_DAY,0);
case HALF_DAY:
calendar.clear(Calendar.HOUR);
case HOUR:
calendar.clear(Calendar.MINUTE);
case MINUTE:
calendar.clear(Calendar.SECOND);
calendar.clear(Calendar.MILLISECOND);
}
switch (period) {
case YEAR:
calendar.add(Calendar.YEAR,1);
break;
case MONTH:
calendar.add(Calendar.MONTH,1);
break;
case WEEK:
calendar.add(Calendar.WEEK_OF_YEAR,1);
break;
case DAY:
calendar.add(Calendar.DAY_OF_MONTH,1);
break;
case HALF_DAY:
calendar.add(Calendar.AM_PM,1);
break;
case HOUR:
calendar.add(Calendar.HOUR,1);
break;
case MINUTE:
calendar.add(Calendar.MINUTE,1);
break;
}
nextRollover=calendar.getTimeInMillis();
}"
44131,"public Logger run(){
  final Logger logger=new Logger(LoggerNode.this,fullName);
  logger.setLevel(null);
  return logger;
}","public Logger run(){
  final Logger logger=new Logger(LoggerNode.this,fullName);
  return logger;
}"
44132,"Logger createLogger(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    return AccessController.doPrivileged(new PrivilegedAction<Logger>(){
      public Logger run(){
        final Logger logger=new Logger(LoggerNode.this,fullName);
        logger.setLevel(null);
        return logger;
      }
    }
);
  }
 else {
    final Logger logger=new Logger(this,fullName);
    logger.setLevel(null);
    return logger;
  }
}","Logger createLogger(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    return AccessController.doPrivileged(new PrivilegedAction<Logger>(){
      public Logger run(){
        final Logger logger=new Logger(LoggerNode.this,fullName);
        return logger;
      }
    }
);
  }
 else {
    final Logger logger=new Logger(this,fullName);
    return logger;
  }
}"
44133,"/** 
 * Construct a child instance.
 * @param context the logmanager
 * @param parent the parent node
 * @param nodeName the name of this subnode
 */
private LoggerNode(LogContext context,LoggerNode parent,String nodeName){
  nodeName=nodeName.trim();
  if (nodeName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.parent=parent;
  handlersUpdater.clear(this);
  if (parent.parent == null) {
    fullName=nodeName;
  }
 else {
    fullName=parent.fullName + ""String_Node_Str"" + nodeName;
  }
  this.context=context;
}","/** 
 * Construct a child instance.
 * @param context the logmanager
 * @param parent the parent node
 * @param nodeName the name of this subnode
 */
private LoggerNode(LogContext context,LoggerNode parent,String nodeName){
  nodeName=nodeName.trim();
  if (nodeName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.parent=parent;
  handlersUpdater.clear(this);
  if (parent.parent == null) {
    fullName=nodeName;
  }
 else {
    fullName=parent.fullName + ""String_Node_Str"" + nodeName;
  }
  this.context=context;
  effectiveLevel=parent.effectiveLevel;
}"
44134,"private Object getArgument(final Properties properties,final Method method,final String propertyName,final String propValue) throws IOException {
  final Class<? extends Object> objClass=method.getDeclaringClass();
  final Object argument;
  final Class<?> paramType=method.getParameterTypes()[0];
  if (paramType == String.class) {
    argument=propValue;
  }
 else   if (paramType == Handler.class) {
    argument=configureHandler(properties,propValue);
  }
 else   if (paramType == Filter.class) {
    argument=configureFilter(properties,propValue);
  }
 else   if (paramType == Formatter.class) {
    argument=configureFormatter(properties,propValue);
  }
 else   if (paramType == java.util.logging.Level.class) {
    argument=LogContext.getSystemLogContext().getLevelForName(propValue);
  }
 else   if (paramType == java.util.logging.Logger.class) {
    argument=LogContext.getSystemLogContext().getLogger(propValue);
  }
 else   if (paramType == boolean.class || paramType == Boolean.class) {
    argument=Boolean.valueOf(propValue);
  }
 else   if (paramType == byte.class || paramType == Byte.class) {
    argument=Byte.valueOf(propValue);
  }
 else   if (paramType == short.class || paramType == Short.class) {
    argument=Short.valueOf(propValue);
  }
 else   if (paramType == int.class || paramType == Integer.class) {
    argument=Integer.valueOf(propValue);
  }
 else   if (paramType == long.class || paramType == Long.class) {
    argument=Long.valueOf(propValue);
  }
 else   if (paramType == float.class || paramType == Float.class) {
    argument=Float.valueOf(propValue);
  }
 else   if (paramType == double.class || paramType == Double.class) {
    argument=Double.valueOf(propValue);
  }
 else   if (paramType == char.class || paramType == Character.class) {
    argument=Character.valueOf(propValue.length() > 0 ? propValue.charAt(0) : 0);
  }
 else   if (paramType == TimeZone.class) {
    argument=TimeZone.getTimeZone(propValue);
  }
 else   if (paramType == Charset.class) {
    argument=Charset.forName(propValue);
  }
 else   if (Enum.class.isAssignableFrom(paramType)) {
    argument=Enum.valueOf(paramType.asSubclass(Enum.class),propValue);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ objClass);
  }
  return argument;
}","private Object getArgument(final Properties properties,final Method method,final String propertyName,final String propValue) throws IOException {
  final Class<? extends Object> objClass=method.getDeclaringClass();
  final Object argument;
  final Class<?> paramType=method.getParameterTypes()[0];
  if (paramType == String.class) {
    argument=propValue;
  }
 else   if (paramType == Handler.class) {
    argument=configureHandler(properties,propValue);
  }
 else   if (paramType == Filter.class) {
    argument=configureFilter(properties,propValue);
  }
 else   if (paramType == Formatter.class) {
    argument=configureFormatter(properties,propValue);
  }
 else   if (paramType == java.util.logging.Level.class) {
    argument=LogContext.getSystemLogContext().getLevelForName(propValue);
  }
 else   if (paramType == java.util.logging.Logger.class) {
    argument=LogContext.getSystemLogContext().getLogger(propValue);
  }
 else   if (paramType == boolean.class || paramType == Boolean.class) {
    argument=Boolean.valueOf(propValue);
  }
 else   if (paramType == byte.class || paramType == Byte.class) {
    argument=Byte.valueOf(propValue);
  }
 else   if (paramType == short.class || paramType == Short.class) {
    argument=Short.valueOf(propValue);
  }
 else   if (paramType == int.class || paramType == Integer.class) {
    argument=Integer.valueOf(propValue);
  }
 else   if (paramType == long.class || paramType == Long.class) {
    argument=Long.valueOf(propValue);
  }
 else   if (paramType == float.class || paramType == Float.class) {
    argument=Float.valueOf(propValue);
  }
 else   if (paramType == double.class || paramType == Double.class) {
    argument=Double.valueOf(propValue);
  }
 else   if (paramType == char.class || paramType == Character.class) {
    argument=Character.valueOf(propValue.length() > 0 ? propValue.charAt(0) : 0);
  }
 else   if (paramType == TimeZone.class) {
    argument=TimeZone.getTimeZone(propValue);
  }
 else   if (paramType == Charset.class) {
    argument=Charset.forName(propValue);
  }
 else   if (paramType.isEnum()) {
    argument=Enum.valueOf(paramType.asSubclass(Enum.class),propValue);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ objClass);
  }
  return argument;
}"
44135,"private void configure(final Properties properties) throws IOException {
  final List<String> loggerNames=getStringCsvList(properties,""String_Node_Str"",""String_Node_Str"");
  final Set<String> done=new HashSet<String>();
  for (  String loggerName : loggerNames) {
    if (!done.add(loggerName)) {
      continue;
    }
    final Logger logger=LogContext.getSystemLogContext().getLogger(loggerName);
    configuredLoggers.put(loggerName,logger);
    final String levelName=getStringProperty(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    if (levelName != null) {
      logger.setLevel(LogContext.getSystemLogContext().getLevelForName(levelName));
    }
    final String filterName=getStringProperty(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    if (filterName != null) {
      logger.setFilter(configureFilter(properties,filterName));
    }
    final List<String> handlerNames=getStringCsvList(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    for (    String handlerName : handlerNames) {
      logger.addHandler(configureHandler(properties,handlerName));
    }
    final String useParentHandlersString=getStringProperty(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    if (useParentHandlersString != null) {
      logger.setUseParentHandlers(Boolean.parseBoolean(useParentHandlersString));
    }
  }
}","private void configure(final Properties properties) throws IOException {
  final List<String> loggerNames=getStringCsvList(properties,""String_Node_Str"",""String_Node_Str"");
  final Set<String> done=new HashSet<String>();
  reportErrors=Boolean.parseBoolean(properties.getProperty(""String_Node_Str"",""String_Node_Str""));
  for (  String loggerName : loggerNames) {
    if (!done.add(loggerName)) {
      continue;
    }
    final Logger logger=LogContext.getSystemLogContext().getLogger(loggerName);
    configuredLoggers.put(loggerName,logger);
    final String levelName=getStringProperty(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    if (levelName != null) {
      try {
        logger.setLevel(LogContext.getSystemLogContext().getLevelForName(levelName));
      }
 catch (      IllegalArgumentException e) {
        System.err.printf(""String_Node_Str"",levelName,logger,e.getMessage());
      }
    }
    final String filterName=getStringProperty(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    if (filterName != null) {
      try {
        logger.setFilter(configureFilter(properties,filterName));
      }
 catch (      IllegalArgumentException e) {
        System.err.printf(""String_Node_Str"",filterName,logger,e.getMessage());
      }
    }
    final List<String> handlerNames=getStringCsvList(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    for (    String handlerName : handlerNames) {
      try {
        logger.addHandler(configureHandler(properties,handlerName));
      }
 catch (      IllegalArgumentException e) {
        System.err.printf(""String_Node_Str"",handlerName,logger,e.getMessage());
      }
    }
    final String useParentHandlersString=getStringProperty(properties,getKey(""String_Node_Str"",loggerName,""String_Node_Str""));
    if (useParentHandlersString != null) {
      logger.setUseParentHandlers(Boolean.parseBoolean(useParentHandlersString));
    }
  }
}"
44136,"private void configureProperties(final Properties properties,final Object object,final String prefix) throws IOException {
  final List<String> propertyNames=getStringCsvList(properties,getKey(prefix,""String_Node_Str""));
  final Class<? extends Object> objClass=object.getClass();
  final Iterator<String> it=propertyNames.iterator();
  if (!it.hasNext()) {
    return;
  }
 else {
    final Map<String,Method> setters=new HashMap<String,Method>();
    for (    Method method : objClass.getMethods()) {
      final int modifiers=method.getModifiers();
      if (Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) {
        continue;
      }
      final String name=method.getName();
      if (!name.startsWith(""String_Node_Str"")) {
        continue;
      }
      final Class<?>[] parameterTypes=method.getParameterTypes();
      if (parameterTypes.length != 1) {
        continue;
      }
      if (method.getReturnType() != void.class) {
        continue;
      }
      setters.put(name.substring(3,4).toLowerCase() + name.substring(4),method);
    }
    do {
      String propertyName=it.next();
      final String propValue=getStringProperty(properties,getKey(prefix,propertyName));
      if (propValue != null) {
        final Object argument;
        final Method method=setters.get(propertyName);
        if (method == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ objClass);
        }
        argument=getArgument(properties,method,propertyName,propValue);
        try {
          method.invoke(object,argument);
        }
 catch (        Exception e) {
          throw new IllegalArgumentException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ objClass,e);
        }
      }
    }
 while (it.hasNext());
  }
}","private void configureProperties(final Properties properties,final Object object,final String prefix) throws IOException {
  final List<String> propertyNames=getStringCsvList(properties,getKey(prefix,""String_Node_Str""));
  final Class<? extends Object> objClass=object.getClass();
  final Iterator<String> it=propertyNames.iterator();
  if (!it.hasNext()) {
    return;
  }
 else {
    final Map<String,Method> setters=new HashMap<String,Method>();
    for (    Method method : objClass.getMethods()) {
      final int modifiers=method.getModifiers();
      if (Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) {
        continue;
      }
      final String name=method.getName();
      if (!name.startsWith(""String_Node_Str"")) {
        continue;
      }
      final Class<?>[] parameterTypes=method.getParameterTypes();
      if (parameterTypes.length != 1) {
        continue;
      }
      if (method.getReturnType() != void.class) {
        continue;
      }
      setters.put(name.substring(3,4).toLowerCase() + name.substring(4),method);
    }
    do {
      String propertyName=it.next();
      final String propValue=getStringProperty(properties,getKey(prefix,propertyName));
      if (propValue != null) {
        final Object argument;
        final Method method=setters.get(propertyName);
        if (method == null) {
          if (reportErrors) {
            System.err.printf(""String_Node_Str"",propertyName,objClass);
          }
          continue;
        }
        try {
          argument=getArgument(properties,method,propertyName,propValue);
        }
 catch (        IllegalArgumentException e) {
          System.err.printf(""String_Node_Str"",object,e.getMessage());
          continue;
        }
        try {
          method.invoke(object,argument);
        }
 catch (        Exception e) {
          if (reportErrors) {
            System.err.printf(""String_Node_Str"",propertyName,objClass);
            e.printStackTrace(System.err);
          }
        }
      }
    }
 while (it.hasNext());
  }
}"
44137,"private Handler configureHandler(final Properties properties,final String handlerName) throws IOException {
  if (configuredHandlers.containsKey(handlerName)) {
    return configuredHandlers.get(handlerName);
  }
  final String handlerClassName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName));
  if (handlerClassName == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + handlerName + ""String_Node_Str"");
  }
  final Handler handler;
  try {
    handler=(Handler)Class.forName(handlerClassName).getConstructor().newInstance();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + handlerName + ""String_Node_Str"",e);
  }
  configuredHandlers.put(handlerName,handler);
  final String levelName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (levelName != null) {
    handler.setLevel(LogContext.getSystemLogContext().getLevelForName(levelName));
  }
  final String encodingName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (encodingName != null) {
    handler.setEncoding(encodingName);
  }
  final String errorManagerName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (errorManagerName != null) {
    handler.setErrorManager(configureErrorManager(properties,errorManagerName));
  }
  final String filterName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (filterName != null) {
    handler.setFilter(configureFilter(properties,filterName));
  }
  final String formatterName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (formatterName != null) {
    handler.setFormatter(configureFormatter(properties,formatterName));
  }
  configureProperties(properties,handler,getKey(""String_Node_Str"",handlerName));
  return handler;
}","private Handler configureHandler(final Properties properties,final String handlerName) throws IOException {
  if (configuredHandlers.containsKey(handlerName)) {
    return configuredHandlers.get(handlerName);
  }
  final String handlerClassName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName));
  if (handlerClassName == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + handlerName + ""String_Node_Str"");
  }
  final Handler handler;
  try {
    handler=(Handler)Class.forName(handlerClassName).getConstructor().newInstance();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + handlerName + ""String_Node_Str"",e);
  }
  configuredHandlers.put(handlerName,handler);
  final String levelName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (levelName != null) {
    try {
      handler.setLevel(LogContext.getSystemLogContext().getLevelForName(levelName));
    }
 catch (    IllegalArgumentException e) {
      System.err.printf(""String_Node_Str"",levelName,handler,e.getMessage());
    }
  }
  final String encodingName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (encodingName != null) {
    try {
      handler.setEncoding(encodingName);
    }
 catch (    UnsupportedEncodingException e) {
      System.err.printf(""String_Node_Str"",encodingName,handler,e.getMessage());
    }
  }
  final String errorManagerName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (errorManagerName != null) {
    try {
      handler.setErrorManager(configureErrorManager(properties,errorManagerName));
    }
 catch (    IllegalArgumentException e) {
      System.err.printf(""String_Node_Str"",errorManagerName,handler,e.getMessage());
    }
  }
  final String filterName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (filterName != null) {
    try {
      handler.setFilter(configureFilter(properties,filterName));
    }
 catch (    IllegalArgumentException e) {
      System.err.printf(""String_Node_Str"",filterName,handler,e.getMessage());
    }
  }
  final String formatterName=getStringProperty(properties,getKey(""String_Node_Str"",handlerName,""String_Node_Str""));
  if (formatterName != null) {
    try {
      handler.setFormatter(configureFormatter(properties,formatterName));
    }
 catch (    IllegalArgumentException e) {
      System.err.printf(""String_Node_Str"",filterName,handler,e.getMessage());
    }
  }
  configureProperties(properties,handler,getKey(""String_Node_Str"",handlerName));
  return handler;
}"
44138,"/** 
 * Publish an   {@code ExtLogRecord}. <p/> The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. <p/> The   {@code ExtHandler} is responsible for formatting the message, when and if necessary. The formatting shouldinclude localization.
 * @param record the log record to publish
 */
public abstract void publish(final ExtLogRecord record);","/** 
 * Publish an   {@code ExtLogRecord}. <p/> The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. <p/> The   {@code ExtHandler} is responsible for formatting the message, when and if necessary. The formatting shouldinclude localization.
 * @param record the log record to publish
 */
public final void publish(final ExtLogRecord record){
  if (record != null && isLoggable(record)) {
    doPublish(record);
  }
}"
44139,"/** 
 * {@inheritDoc} 
 */
public void setOutputStream(final OutputStream outputStream){
  if (outputStream == null || outputStream instanceof UncloseableOutputStream) {
    super.setOutputStream(outputStream);
  }
 else {
    super.setOutputStream(new UncloseableOutputStream(outputStream));
  }
}","/** 
 * {@inheritDoc} 
 */
public void setOutputStream(final OutputStream outputStream){
  super.setOutputStream(wrap(outputStream));
}"
44140,"/** 
 * Construct a new instance.
 * @param target the target to write to, or {@code null} to start with an uninitialized target
 * @param formatter the formatter to use
 */
public ConsoleHandler(final Target target,final Formatter formatter){
  super(targets.get(target),formatter);
}","/** 
 * Construct a new instance.
 * @param target the target to write to, or {@code null} to start with an uninitialized target
 * @param formatter the formatter to use
 */
public ConsoleHandler(final Target target,final Formatter formatter){
  super(wrap(targets.get(target)),formatter);
}"
44141,"/** 
 * Set the output file.
 * @param file the file
 * @throws FileNotFoundException if an error occurs opening the file
 */
public void setFile(File file) throws FileNotFoundException {
synchronized (outputLock) {
    if (file == null) {
      setOutputStream(null);
    }
    final File parentFile=file.getParentFile();
    if (parentFile != null) {
      parentFile.mkdirs();
    }
    boolean ok=false;
    final FileOutputStream fos=new FileOutputStream(file,append);
    try {
      setOutputStream(fos);
      this.file=file;
    }
  finally {
      if (!ok) {
        safeClose(fos);
      }
    }
  }
}","/** 
 * Set the output file.
 * @param file the file
 * @throws FileNotFoundException if an error occurs opening the file
 */
public void setFile(File file) throws FileNotFoundException {
synchronized (outputLock) {
    if (file == null) {
      setOutputStream(null);
      return;
    }
    final File parentFile=file.getParentFile();
    if (parentFile != null) {
      parentFile.mkdirs();
    }
    boolean ok=false;
    final FileOutputStream fos=new FileOutputStream(file,append);
    try {
      setOutputStream(fos);
      this.file=file;
      ok=true;
    }
  finally {
      if (!ok) {
        safeClose(fos);
      }
    }
  }
}"
44142,"/** 
 * Recursively update the effective log level of all log instances on all children.  The recursion depth will be proportionate to the log node nesting depth so stack use should not be an issue.  Must only be called while the log context's level change lock is held.
 * @param newLevel the new effective level
 */
void updateChildEffectiveLevel(int newLevel){
  for (  LoggerNode node : children.values()) {
    if (node != null) {
      final Logger instance=node.getLogger();
      if (instance != null) {
        instance.setEffectiveLevel(newLevel);
      }
    }
  }
}","/** 
 * Recursively update the effective log level of all log instances on all children.  The recursion depth will be proportionate to the log node nesting depth so stack use should not be an issue.  Must only be called while the log context's level change lock is held.
 * @param newLevel the new effective level
 */
void updateChildEffectiveLevel(int newLevel){
  for (  LoggerNode node : children.values()) {
    if (node != null) {
      final Logger instance=node.getLogger();
      if (instance != null) {
        instance.setEffectiveLevel(newLevel);
      }
 else {
        node.updateChildEffectiveLevel(newLevel);
      }
    }
  }
}"
44143,"/** 
 * Create a wrapper that exposes the handler's close and flush methods via the I/O API.
 * @param handler the logging handler
 * @return the wrapper
 */
public static Flushable wrap(final Handler handler){
  return handler instanceof Flushable ? (Flushable)handler : new Flushable(){
    public void close(){
      handler.close();
    }
    public void flush(){
      handler.flush();
    }
  }
;
}","/** 
 * Create a wrapper that exposes the handler's close and flush methods via the I/O API.
 * @param handler the logging handler
 * @return the wrapper
 */
public static FlushableCloseable wrap(final Handler handler){
  return handler instanceof FlushableCloseable ? (FlushableCloseable)handler : new FlushableCloseable(){
    public void close(){
      handler.close();
    }
    public void flush(){
      handler.flush();
    }
  }
;
}"
44144,"/** 
 * Get or create a logger instance for this node.
 * @return a logger instance
 */
Logger getOrCreateLogger(){
  final String fullName=this.fullName;
  final LoggerNode parent=this.parent;
  for (; ; ) {
    LoggerRef loggerRef=this.loggerRef;
    if (loggerRef != null) {
      final Logger logger=loggerRef.get();
      if (logger != null) {
        return logger;
      }
    }
    final Logger logger=new Logger(this,fullName);
    if (loggerRefUpdater.compareAndSet(this,null,parent == null ? new StrongLoggerRef(logger) : new WeakLoggerRef(logger))) {
      return logger;
    }
  }
}","/** 
 * Get or create a logger instance for this node.
 * @return a logger instance
 */
Logger getOrCreateLogger(){
  final String fullName=this.fullName;
  final LoggerNode parent=this.parent;
  for (; ; ) {
    final LoggerRef loggerRef=this.loggerRef;
    if (loggerRef != null) {
      final Logger logger=loggerRef.get();
      if (logger != null) {
        return logger;
      }
    }
    final Logger logger=new Logger(this,fullName);
    if (loggerRefUpdater.compareAndSet(this,loggerRef,parent == null ? new StrongLoggerRef(logger) : new WeakLoggerRef(logger))) {
      return logger;
    }
  }
}"
44145,"public void render(final StringBuilder builder,final ExtLogRecord record){
  final String subject=getSubject(record);
  final int len=subject.length();
  final int minimumWidth=this.minimumWidth;
  final int maximumWidth=this.maximumWidth;
  if (len > maximumWidth) {
    builder.append(subject.substring(len - maximumWidth));
    return;
  }
 else   if (len < minimumWidth) {
    if (leftJustify) {
      builder.append(subject);
      int spaces=minimumWidth - len;
      for (int i=0; i < spaces; i++) {
        builder.append(' ');
      }
    }
 else {
      int spaces=minimumWidth - len;
      for (int i=0; i < spaces; i++) {
        builder.append(' ');
      }
      builder.append(subject);
    }
  }
}","public void render(final StringBuilder builder,final ExtLogRecord record){
  final String subject=getSubject(record);
  final int len=subject.length();
  final int minimumWidth=this.minimumWidth;
  final int maximumWidth=this.maximumWidth;
  if (len > maximumWidth) {
    builder.append(subject.substring(len - maximumWidth));
  }
 else   if (len < minimumWidth) {
    if (leftJustify) {
      builder.append(subject);
      int spaces=minimumWidth - len;
      for (int i=0; i < spaces; i++) {
        builder.append(' ');
      }
    }
 else {
      int spaces=minimumWidth - len;
      for (int i=0; i < spaces; i++) {
        builder.append(' ');
      }
      builder.append(subject);
    }
  }
 else {
    builder.append(subject);
  }
}"
44146,"private String formatRecord(){
  final ResourceBundle bundle=getResourceBundle();
  String msg=getMessage();
  if (bundle != null) {
    try {
      msg=bundle.getString(msg);
    }
 catch (    MissingResourceException ex) {
    }
  }
  final Object[] parameters=getParameters();
  return parameters != null && parameters.length > 0 && msg.indexOf('{') >= 0 ? MessageFormat.format(msg,parameters) : msg;
}","private String formatRecord(){
  final ResourceBundle bundle=getResourceBundle();
  String msg=getMessage();
  if (bundle != null) {
    try {
      msg=bundle.getString(msg);
    }
 catch (    MissingResourceException ex) {
    }
  }
  final Object[] parameters=getParameters();
  if (parameters == null || parameters.length == 0) {
    return msg;
  }
switch (formatStyle) {
case PRINTF:
{
      return String.format(msg,parameters);
    }
case MESSAGE_FORMAT:
{
    return msg.indexOf('{') >= 0 ? MessageFormat.format(msg,parameters) : msg;
  }
}
return msg;
}"
44147,"public String getFormattedMessage(){
  if (formattedMessage == null) {
    formattedMessage=formatRecord();
  }
  return formattedMessage;
}","/** 
 * Get the fully formatted log record, with resources resolved and parameters applied.
 * @return the formatted log record
 */
public String getFormattedMessage(){
  if (formattedMessage == null) {
    formattedMessage=formatRecord();
  }
  return formattedMessage;
}"
44148,"/** 
 * Find the first stack frame below the call to the logger, and populate the log record with that information.
 */
private void calculateCaller(){
  if (!calculateCaller) {
    return;
  }
  calculateCaller=false;
  final StackTraceElement[] stack=new Throwable().getStackTrace();
  boolean found=false;
  for (  StackTraceElement element : stack) {
    final String className=element.getClassName();
    if (found && !loggerClassName.equals(className)) {
      setSourceClassName(className);
      setSourceMethodName(element.getMethodName());
      setSourceLineNumber(element.getLineNumber());
      setSourceFileName(element.getFileName());
      return;
    }
 else {
      found=loggerClassName.equals(className);
    }
  }
  setUnknownCaller();
}","/** 
 * Find the first stack frame below the call to the logger, and populate the log record with that information.
 */
private void calculateCaller(){
  if (!calculateCaller) {
    return;
  }
  calculateCaller=false;
  final StackTraceElement[] stack=new Throwable().getStackTrace();
  boolean found=false;
  for (  StackTraceElement element : stack) {
    final String className=element.getClassName();
    if (found) {
      if (!loggerClassName.equals(className)) {
        setSourceClassName(className);
        setSourceMethodName(element.getMethodName());
        setSourceLineNumber(element.getLineNumber());
        setSourceFileName(element.getFileName());
        return;
      }
    }
 else {
      found=loggerClassName.equals(className);
    }
  }
  setUnknownCaller();
}"
44149,"/** 
 * Construct a new instance.  Grabs the current NDC immediately.  MDC is deferred.
 * @param level a logging level value
 * @param msg the raw non-localized logging message (may be null)
 */
public ExtLogRecord(java.util.logging.Level level,String msg){
  super(level,msg);
  ndc=NDC.get();
}","/** 
 * Construct a new instance.  Grabs the current NDC immediately.  MDC is deferred.
 * @param level a logging level value
 * @param msg the raw non-localized logging message (may be null)
 */
public ExtLogRecord(java.util.logging.Level level,String msg){
  super(level,msg);
  setSourceClassName(null);
  ndc=NDC.get();
}"
44150,"void checkAccess(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(CONTROL_PERMISSION);
  }
}","static void checkAccess(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(CONTROL_PERMISSION);
  }
}"
44151,"public static List<Injector> getDefaultInjectors(Object managed){
  List<Injector> result=new ArrayList<Injector>();
  if (managed instanceof Activity) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new IntentExtraInjector());
    result.add(new LayoutInjector());
    result.add(new ObjectInjector());
    result.add(new ResourceInjector());
  }
  if (managed instanceof Fragment) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new ResourceInjector());
    result.add(new IntentExtraInjector());
    result.add(new ObjectInjector());
  }
  if (managed instanceof android.app.Fragment) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new ResourceInjector());
    result.add(new IntentExtraInjector());
    result.add(new ObjectInjector());
  }
  return result;
}","public static List<Injector> getDefaultInjectors(Object managed){
  List<Injector> result=new ArrayList<Injector>();
  if (managed instanceof Activity) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new IntentExtraInjector());
    result.add(new LayoutInjector());
    result.add(new ObjectInjector());
    result.add(new ResourceInjector());
  }
  if (managed instanceof Fragment) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new ResourceInjector());
    result.add(new IntentExtraInjector());
    result.add(new ObjectInjector());
  }
  try {
    if (managed instanceof android.app.Fragment) {
      result.add(new ViewInjector());
      result.add(new ServiceInjector());
      result.add(new ResourceInjector());
      result.add(new IntentExtraInjector());
      result.add(new ObjectInjector());
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return result;
}"
44152,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
44153,"@Override public void onCreate(){
  InjectLayout layoutAnnotation=ReflectionUtil.getAnnotation(managed.getClass(),InjectLayout.class);
  if (layoutAnnotation != null) {
    int id=AndroidUtil.getIdentifierFromR(activity,""String_Node_Str"",layoutAnnotation.value());
    if (managed instanceof Activity) {
      ((Activity)managed).setContentView(id);
    }
    if (managed instanceof Fragment || managed instanceof android.app.Fragment)     throw new RuntimeException(""String_Node_Str"");
  }
}","@Override public void onCreate(){
  InjectLayout layoutAnnotation=ReflectionUtil.getAnnotation(managed.getClass(),InjectLayout.class);
  if (layoutAnnotation != null) {
    int id=AndroidUtil.getIdentifierFromR(activity,""String_Node_Str"",layoutAnnotation.value());
    if (managed instanceof Activity) {
      ((Activity)managed).setContentView(id);
    }
    try {
      if (managed instanceof Fragment || managed instanceof android.app.Fragment)       throw new RuntimeException(""String_Node_Str"");
    }
 catch (    NoClassDefFoundError e) {
    }
  }
}"
44154,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
44155,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
44156,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
44157,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  this.context=context;
  this.managed=managed;
  this.container=container;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  this.context=context;
  this.managed=managed;
  this.container=container;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
44158,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
44159,"/** 
 * Contract for subclasses: You need to call super before relying on injections in  {@link #onCreate(Bundle)}.
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    new Container(this,this,getClass());
  }
 catch (  RobojectException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Contract for subclasses: You need to call super before relying on injections in   {@link #onCreate(Bundle)}.
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    new Container(this,this,getClass());
  }
 catch (  RobojectException e) {
    throw new RuntimeException(e);
  }
}"
44160,"/** 
 * Inject an extra to the given field, using the value of the given annotation as extra id. If the annotation has no value, then use the field name as extra id.
 */
private void injectExtra(Field field,InjectExtra annotation){
  String value=annotation.value();
  Intent intent=activity.getIntent();
  if (InjectExtra.DEFAULT_VALUE.equals(value)) {
    value=field.getName();
  }
  Class<?> type=field.getType();
  Object extra=null;
  try {
    if (String.class.isAssignableFrom(type)) {
      extra=intent.getStringExtra(value);
    }
    if (ArrayList.class.isAssignableFrom(type)) {
      extra=intent.getStringArrayListExtra(value);
      if (extra == null) {
        extra=intent.getParcelableArrayListExtra(value);
      }
    }
 else     if (Boolean.class.isAssignableFrom(type)) {
      extra=intent.getBooleanExtra(value,false);
    }
 else     if (Bundle.class.isAssignableFrom(type)) {
      extra=intent.getBundleExtra(value);
    }
 else     if (Byte.class.isAssignableFrom(type)) {
      extra=intent.getByteExtra(value,(byte)0);
    }
 else     if (Character.class.isAssignableFrom(type)) {
      extra=intent.getCharExtra(value,(char)0);
    }
 else     if (CharSequence.class.isAssignableFrom(type)) {
      extra=intent.getCharSequenceExtra(value);
    }
 else     if (Double.class.isAssignableFrom(type)) {
      extra=intent.getDoubleExtra(value,0d);
    }
 else     if (Float.class.isAssignableFrom(type)) {
      extra=intent.getFloatExtra(value,0f);
    }
 else     if (Integer.class.isAssignableFrom(type)) {
      extra=intent.getIntExtra(value,0);
    }
 else     if (Long.class.isAssignableFrom(type)) {
      extra=intent.getLongExtra(value,0l);
    }
 else     if (Parcelable.class.isAssignableFrom(type)) {
      extra=intent.getParcelableExtra(value);
    }
 else     if (Serializable.class.isAssignableFrom(type)) {
      extra=intent.getSerializableExtra(value);
    }
 else     if (Short.class.isAssignableFrom(type)) {
      extra=intent.getShortExtra(value,(short)0);
    }
 else     if (type.isArray()) {
      Class<?> componentType=type.getComponentType();
      if (String.class.isAssignableFrom(componentType)) {
        extra=intent.getStringArrayExtra(value);
      }
 else       if (Boolean.class.isAssignableFrom(componentType)) {
        extra=intent.getBooleanArrayExtra(value);
      }
 else       if (Byte.class.isAssignableFrom(componentType)) {
        extra=intent.getByteArrayExtra(value);
      }
 else       if (Character.class.isAssignableFrom(componentType)) {
        extra=intent.getCharArrayExtra(value);
      }
 else       if (Double.class.isAssignableFrom(componentType)) {
        extra=intent.getDoubleArrayExtra(value);
      }
 else       if (Float.class.isAssignableFrom(componentType)) {
        extra=intent.getFloatArrayExtra(value);
      }
 else       if (Integer.class.isAssignableFrom(componentType)) {
        extra=intent.getIntArrayExtra(value);
      }
 else       if (Long.class.isAssignableFrom(componentType)) {
        extra=intent.getLongArrayExtra(value);
      }
 else       if (Parcelable.class.isAssignableFrom(componentType)) {
        extra=intent.getParcelableArrayExtra(value);
      }
 else       if (Short.class.isAssignableFrom(componentType)) {
        extra=intent.getShortArrayExtra(value);
      }
    }
    if (extra == null) {
      String message=""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName()+ ""String_Node_Str""+ ""String_Node_Str"";
      if (annotation.mandatory()) {
        throw new RuntimeException(message);
      }
 else {
        Log.i(getClass().getCanonicalName(),message);
        return;
      }
    }
    field.setAccessible(true);
    field.set(activity,extra);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName(),e);
  }
}","/** 
 * Inject an extra to the given field, using the value of the given annotation as extra id. If the annotation has no value, then use the field name as extra id.
 */
private void injectExtra(Field field,InjectExtra annotation){
  String value=annotation.value();
  Intent intent=activity.getIntent();
  if (InjectExtra.DEFAULT_VALUE.equals(value)) {
    value=field.getName();
  }
  Class<?> type=field.getType();
  Object extra=null;
  try {
    if (String.class.isAssignableFrom(type)) {
      extra=intent.getStringExtra(value);
    }
 else     if (ArrayList.class.isAssignableFrom(type)) {
      extra=intent.getStringArrayListExtra(value);
      if (extra == null) {
        extra=intent.getParcelableArrayListExtra(value);
      }
    }
 else     if (Boolean.class.isAssignableFrom(type)) {
      extra=intent.getBooleanExtra(value,false);
    }
 else     if (Bundle.class.isAssignableFrom(type)) {
      extra=intent.getBundleExtra(value);
    }
 else     if (Byte.class.isAssignableFrom(type)) {
      extra=intent.getByteExtra(value,(byte)0);
    }
 else     if (Character.class.isAssignableFrom(type)) {
      extra=intent.getCharExtra(value,(char)0);
    }
 else     if (CharSequence.class.isAssignableFrom(type)) {
      extra=intent.getCharSequenceExtra(value);
    }
 else     if (Double.class.isAssignableFrom(type)) {
      extra=intent.getDoubleExtra(value,0d);
    }
 else     if (Float.class.isAssignableFrom(type)) {
      extra=intent.getFloatExtra(value,0f);
    }
 else     if (Integer.class.isAssignableFrom(type)) {
      extra=intent.getIntExtra(value,0);
    }
 else     if (Long.class.isAssignableFrom(type)) {
      extra=intent.getLongExtra(value,0l);
    }
 else     if (Parcelable.class.isAssignableFrom(type)) {
      extra=intent.getParcelableExtra(value);
    }
 else     if (Serializable.class.isAssignableFrom(type)) {
      extra=intent.getSerializableExtra(value);
    }
 else     if (Short.class.isAssignableFrom(type)) {
      extra=intent.getShortExtra(value,(short)0);
    }
 else     if (type.isArray()) {
      Class<?> componentType=type.getComponentType();
      if (String.class.isAssignableFrom(componentType)) {
        extra=intent.getStringArrayExtra(value);
      }
 else       if (Boolean.class.isAssignableFrom(componentType)) {
        extra=intent.getBooleanArrayExtra(value);
      }
 else       if (Byte.class.isAssignableFrom(componentType)) {
        extra=intent.getByteArrayExtra(value);
      }
 else       if (Character.class.isAssignableFrom(componentType)) {
        extra=intent.getCharArrayExtra(value);
      }
 else       if (Double.class.isAssignableFrom(componentType)) {
        extra=intent.getDoubleArrayExtra(value);
      }
 else       if (Float.class.isAssignableFrom(componentType)) {
        extra=intent.getFloatArrayExtra(value);
      }
 else       if (Integer.class.isAssignableFrom(componentType)) {
        extra=intent.getIntArrayExtra(value);
      }
 else       if (Long.class.isAssignableFrom(componentType)) {
        extra=intent.getLongArrayExtra(value);
      }
 else       if (Parcelable.class.isAssignableFrom(componentType)) {
        extra=intent.getParcelableArrayExtra(value);
      }
 else       if (Short.class.isAssignableFrom(componentType)) {
        extra=intent.getShortArrayExtra(value);
      }
    }
    if (extra == null) {
      String message=""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName()+ ""String_Node_Str""+ ""String_Node_Str"";
      if (annotation.mandatory()) {
        throw new RuntimeException(message);
      }
 else {
        Log.i(getClass().getCanonicalName(),message);
        return;
      }
    }
    field.setAccessible(true);
    field.set(activity,extra);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName(),e);
  }
}"
44161,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (field.getType().isAssignableFrom(service.getClass())) {
    try {
      field.setAccessible(true);
      field.set(managed,service);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (field.getType().isAssignableFrom(service.getClass())) {
    try {
      field.setAccessible(true);
      field.set(managed,service);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  if (managed instanceof RobojectActivity) {
    ((RobojectActivity)managed).onServiceConnected(name,service);
  }
}"
44162,"private void injectService(final Field field,Inject annotation){
  Class<? extends Service> androidServiceClass=annotation.value();
  Intent intent=new Intent(context,androidServiceClass);
  context.bindService(intent,new ServiceConnection(){
    @Override public void onServiceConnected(    ComponentName name,    IBinder service){
      if (field.getType().isAssignableFrom(service.getClass())) {
        try {
          field.setAccessible(true);
          field.set(managed,service);
        }
 catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"",e);
        }
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      try {
        field.set(managed,null);
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
      ServiceInjector.this.managed=null;
    }
  }
,Service.BIND_AUTO_CREATE);
}","private void injectService(final Field field,Inject annotation){
  Class<? extends Service> androidServiceClass=annotation.value();
  Intent intent=new Intent(context,androidServiceClass);
  context.bindService(intent,new ServiceConnection(){
    @Override public void onServiceConnected(    ComponentName name,    IBinder service){
      if (field.getType().isAssignableFrom(service.getClass())) {
        try {
          field.setAccessible(true);
          field.set(managed,service);
        }
 catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"",e);
        }
      }
      if (managed instanceof RobojectActivity) {
        ((RobojectActivity)managed).onServiceConnected(name,service);
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      try {
        field.set(managed,null);
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
      ServiceInjector.this.managed=null;
    }
  }
,Service.BIND_AUTO_CREATE);
}"
44163,"public static void main(String[] args){
  try {
    timeSlicerToKML.setAnalysisType(TimeSlicerToKML.FIRST_ANALYSIS);
    timeSlicerToKML.setTreePath(""String_Node_Str"");
    timeSlicerToKML.setMrsdString(""String_Node_Str"");
    timeSlicerToKML.setTreesPath(""String_Node_Str"");
    timeSlicerToKML.setHPD(0.80);
    timeSlicerToKML.setGridSize(100);
    timeSlicerToKML.setBurnIn(500);
    timeSlicerToKML.setLocationAttributeName(""String_Node_Str"");
    timeSlicerToKML.setRateAttributeName(""String_Node_Str"");
    timeSlicerToKML.setPrecisionAttName(""String_Node_Str"");
    timeSlicerToKML.setUseTrueNoise(true);
    timeSlicerToKML.setTimescaler(1);
    timeSlicerToKML.setKmlWriterPath(""String_Node_Str"");
    timeSlicerToKML.setMinPolygonRedMapping(0);
    timeSlicerToKML.setMinPolygonGreenMapping(0);
    timeSlicerToKML.setMinPolygonBlueMapping(0);
    timeSlicerToKML.setMinPolygonOpacityMapping(100);
    timeSlicerToKML.setMaxPolygonRedMapping(50);
    timeSlicerToKML.setMaxPolygonGreenMapping(255);
    timeSlicerToKML.setMaxPolygonBlueMapping(255);
    timeSlicerToKML.setMaxPolygonOpacityMapping(255);
    timeSlicerToKML.setMinBranchRedMapping(0);
    timeSlicerToKML.setMinBranchGreenMapping(0);
    timeSlicerToKML.setMinBranchBlueMapping(0);
    timeSlicerToKML.setMinBranchOpacityMapping(255);
    timeSlicerToKML.setMaxBranchRedMapping(255);
    timeSlicerToKML.setMaxBranchGreenMapping(5);
    timeSlicerToKML.setMaxBranchBlueMapping(50);
    timeSlicerToKML.setMaxBranchOpacityMapping(255);
    timeSlicerToKML.setMaxAltitudeMapping(500000);
    timeSlicerToKML.setBranchWidth(4);
    timeSlicerToKML.GenerateKML();
    System.out.println(""String_Node_Str"" + timeSlicerToKML.time + ""String_Node_Str"");
  }
 catch (  OutOfMemoryError e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  RuntimeException e) {
    e.printStackTrace();
  }
catch (  ImportException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    if (FIRST_ANALYSIS) {
      timeSlicerToKML.setAnalysisType(TimeSlicerToKML.FIRST_ANALYSIS);
      timeSlicerToKML.setTreePath(""String_Node_Str"");
      timeSlicerToKML.setNumberOfIntervals(10);
    }
 else {
      timeSlicerToKML.setAnalysisType(TimeSlicerToKML.SECOND_ANALYSIS);
      timeSlicerToKML.setCustomSliceHeightsPath(""String_Node_Str"");
    }
    timeSlicerToKML.setTreesPath(""String_Node_Str"");
    timeSlicerToKML.setBurnIn(500);
    timeSlicerToKML.setLocationAttributeName(""String_Node_Str"");
    timeSlicerToKML.setMrsdString(""String_Node_Str"");
    timeSlicerToKML.setHPD(0.80);
    timeSlicerToKML.setGridSize(100);
    timeSlicerToKML.setRateAttributeName(""String_Node_Str"");
    timeSlicerToKML.setPrecisionAttName(""String_Node_Str"");
    timeSlicerToKML.setUseTrueNoise(true);
    timeSlicerToKML.setTimescaler(1);
    timeSlicerToKML.setKmlWriterPath(""String_Node_Str"");
    timeSlicerToKML.setMinPolygonRedMapping(0);
    timeSlicerToKML.setMinPolygonGreenMapping(0);
    timeSlicerToKML.setMinPolygonBlueMapping(0);
    timeSlicerToKML.setMinPolygonOpacityMapping(100);
    timeSlicerToKML.setMaxPolygonRedMapping(50);
    timeSlicerToKML.setMaxPolygonGreenMapping(255);
    timeSlicerToKML.setMaxPolygonBlueMapping(255);
    timeSlicerToKML.setMaxPolygonOpacityMapping(255);
    timeSlicerToKML.setMinBranchRedMapping(0);
    timeSlicerToKML.setMinBranchGreenMapping(0);
    timeSlicerToKML.setMinBranchBlueMapping(0);
    timeSlicerToKML.setMinBranchOpacityMapping(255);
    timeSlicerToKML.setMaxBranchRedMapping(255);
    timeSlicerToKML.setMaxBranchGreenMapping(5);
    timeSlicerToKML.setMaxBranchBlueMapping(50);
    timeSlicerToKML.setMaxBranchOpacityMapping(255);
    timeSlicerToKML.setMaxAltitudeMapping(500000);
    timeSlicerToKML.setBranchWidth(4);
    timeSlicerToKML.GenerateKML();
    System.out.println(""String_Node_Str"" + timeSlicerToKML.time + ""String_Node_Str"");
  }
 catch (  OutOfMemoryError e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  RuntimeException e) {
    e.printStackTrace();
  }
catch (  ImportException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}"
44164,"private TimeLine generateCustomTimeLine(double[] timeSlices){
  int numberOfSlices=timeSlices.length;
  double startTime=mrsd.getTime() - (timeSlices[numberOfSlices - 1] * DayInMillis * DaysInYear* timescaler);
  double endTime=mrsd.getTime();
  TimeLine timeLine=new TimeLine(startTime,endTime,numberOfSlices);
  return timeLine;
}","private TimeLine generateCustomTimeLine(double[] timeSlices){
  int numberOfSlices=timeSlices.length;
  double firstSlice=timeSlices[0];
  double startTime=mrsd.getTime() - (firstSlice * DayInMillis * DaysInYear* timescaler);
  double endTime=mrsd.getTime();
  return new TimeLine(startTime,endTime,numberOfSlices);
}"
44165,"public void GenerateKML() throws IOException, ImportException, ParseException, RuntimeException, OutOfMemoryError {
  time=-System.currentTimeMillis();
  mrsd=new ThreadLocalSpreadDate(mrsdString);
switch (analysisType) {
case 1:
    tree=(RootedTree)treeImporter.importNextTree();
  treeRootHeight=Utils.getNodeHeight(tree,tree.getRootNode());
sliceHeights=generateTreeSliceHeights(treeRootHeight,numberOfIntervals);
timeLine=generateTreeTimeLine(tree);
break;
case 2:
timeLine=generateCustomTimeLine(sliceHeights);
break;
}
System.out.println(""String_Node_Str"");
Utils.printArray(sliceHeights);
System.out.println();
layers=new ArrayList<Layer>();
int NTHREDS=Runtime.getRuntime().availableProcessors();
ExecutorService executor=Executors.newFixedThreadPool(NTHREDS * 2);
int treesAssumed=10000;
int treesRead=0;
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
int stepSize=treesAssumed / 60;
if (stepSize < 1) {
stepSize=1;
}
slicesMap=new ConcurrentHashMap<Double,List<Coordinates>>();
int totalTrees=0;
while (treesImporter.hasTree()) {
currentTree=(RootedTree)treesImporter.importNextTree();
if (totalTrees >= burnIn) {
executor.submit(new AnalyzeTree(currentTree,precisionString,coordinatesName,rateString,sliceHeights,timescaler,mrsd,slicesMap,useTrueNoise));
treesRead+=1;
}
if (totalTrees > 0 && totalTrees % stepSize == 0) {
System.out.print(""String_Node_Str"");
System.out.flush();
}
totalTrees++;
}
if ((totalTrees - burnIn) <= 0.0) {
throw new RuntimeException(""String_Node_Str"");
}
 else {
System.out.println(""String_Node_Str"" + treesRead + ""String_Node_Str""+ burnIn+ ""String_Node_Str""+ totalTrees+ ""String_Node_Str"");
}
executor.shutdown();
while (!executor.isTerminated()) {
}
System.out.println(""String_Node_Str"");
Iterator<Double> iterator=slicesMap.keySet().iterator();
executor=Executors.newFixedThreadPool(NTHREDS);
formatter=new SimpleDateFormat(""String_Node_Str"",Locale.US);
startTime=timeLine.getStartTime();
endTime=timeLine.getEndTime();
System.out.println(""String_Node_Str"");
int polygonsStyleId=1;
while (iterator.hasNext()) {
System.out.println(""String_Node_Str"" + polygonsStyleId + ""String_Node_Str"");
Double sliceTime=iterator.next();
new Polygons(sliceTime,polygonsStyleId).run();
polygonsStyleId++;
}
switch (analysisType) {
case 1:
System.out.println(""String_Node_Str"");
executor.submit(new Branches());
break;
case 2:
break;
}
executor.shutdown();
while (!executor.isTerminated()) {
}
System.out.println(""String_Node_Str"");
PrintWriter writer=new PrintWriter(kmlPath);
KMLGenerator kmloutput=new KMLGenerator();
kmloutput.generate(writer,timeLine,layers);
time+=System.currentTimeMillis();
}","public void GenerateKML() throws IOException, ImportException, ParseException, RuntimeException, OutOfMemoryError {
  time=-System.currentTimeMillis();
  mrsd=new ThreadLocalSpreadDate(mrsdString);
switch (analysisType) {
case FIRST_ANALYSIS:
    tree=(RootedTree)treeImporter.importNextTree();
  treeRootHeight=Utils.getNodeHeight(tree,tree.getRootNode());
sliceHeights=generateTreeSliceHeights(treeRootHeight,numberOfIntervals);
timeLine=generateTreeTimeLine(tree);
break;
case SECOND_ANALYSIS:
timeLine=generateCustomTimeLine(sliceHeights);
break;
}
System.out.println(""String_Node_Str"");
Utils.printArray(sliceHeights);
System.out.println();
layers=new ArrayList<Layer>();
int NTHREDS=Runtime.getRuntime().availableProcessors();
ExecutorService executor=Executors.newFixedThreadPool(NTHREDS * 2);
int treesAssumed=10000;
int treesRead=0;
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
int stepSize=treesAssumed / 60;
if (stepSize < 1) {
stepSize=1;
}
slicesMap=new ConcurrentHashMap<Double,List<Coordinates>>();
int totalTrees=0;
while (treesImporter.hasTree()) {
currentTree=(RootedTree)treesImporter.importNextTree();
if (totalTrees >= burnIn) {
executor.submit(new AnalyzeTree(currentTree,precisionString,coordinatesName,rateString,sliceHeights,timescaler,mrsd,slicesMap,useTrueNoise));
treesRead+=1;
}
if (totalTrees > 0 && totalTrees % stepSize == 0) {
System.out.print(""String_Node_Str"");
System.out.flush();
}
totalTrees++;
}
if ((totalTrees - burnIn) <= 0.0) {
throw new RuntimeException(""String_Node_Str"");
}
 else {
System.out.println(""String_Node_Str"" + treesRead + ""String_Node_Str""+ burnIn+ ""String_Node_Str""+ totalTrees+ ""String_Node_Str"");
}
executor.shutdown();
while (!executor.isTerminated()) {
}
System.out.println(""String_Node_Str"");
Iterator<Double> iterator=slicesMap.keySet().iterator();
executor=Executors.newFixedThreadPool(NTHREDS);
formatter=new SimpleDateFormat(""String_Node_Str"",Locale.US);
startTime=timeLine.getStartTime();
endTime=timeLine.getEndTime();
System.out.println(""String_Node_Str"");
int polygonsStyleId=1;
while (iterator.hasNext()) {
System.out.println(""String_Node_Str"" + polygonsStyleId + ""String_Node_Str"");
Double sliceTime=iterator.next();
new Polygons(sliceTime,polygonsStyleId).run();
polygonsStyleId++;
}
switch (analysisType) {
case FIRST_ANALYSIS:
System.out.println(""String_Node_Str"");
executor.submit(new Branches());
break;
case SECOND_ANALYSIS:
break;
}
executor.shutdown();
while (!executor.isTerminated()) {
}
System.out.println(""String_Node_Str"");
PrintWriter writer=new PrintWriter(kmlPath);
KMLGenerator kmloutput=new KMLGenerator();
kmloutput.generate(writer,timeLine,layers);
time+=System.currentTimeMillis();
}"
44166,"private TimeLine generateCustomTimeLine(double[] timeSlices){
  int numberOfSlices=timeSlices.length;
  double startTime=mrsd.getTime() - (timeSlices[numberOfSlices - 1] * DayInMillis * DaysInYear* timescaler);
  double endTime=mrsd.getTime();
  TimeLine timeLine=new TimeLine(startTime,endTime,numberOfSlices);
  return timeLine;
}","private TimeLine generateCustomTimeLine(double[] timeSlices){
  int numberOfSlices=timeSlices.length;
  double firstSlice=timeSlices[0];
  double startTime=mrsd.getTime() - (firstSlice * DayInMillis * DaysInYear* timescaler);
  double endTime=mrsd.getTime();
  return new TimeLine(startTime,endTime,numberOfSlices);
}"
44167,"public static int newton(int n,int k){
  BigInteger newton=BigInteger.valueOf(1);
  String newtonString=null;
  for (int i=1; i <= k; i++) {
    newton=newton.multiply(BigInteger.valueOf(n - i + 1)).divide(BigInteger.valueOf(i));
    newtonString=newton.toString();
  }
  return Integer.parseInt(newtonString);
}","/** 
 * maps a single value from its range into another interval
 * @param low1, high1 - range of value; low2, high2 - interval
 * @return the mapped value
 */
public static int newton(int n,int k){
  BigInteger newton=BigInteger.valueOf(1);
  String newtonString=null;
  for (int i=1; i <= k; i++) {
    newton=newton.multiply(BigInteger.valueOf(n - i + 1)).divide(BigInteger.valueOf(i));
    newtonString=newton.toString();
  }
  return Integer.parseInt(newtonString);
}"
44168,"public static double map(double x,double x1,double x2,double y1,double y2){
  double y=((y1 - y2) / (x1 - x2)) * x - ((x2 * y1 - x1 * y2) / (x1 - x2));
  return y;
}","public static double map(double value,double low1,double high1,double low2,double high2){
  return (value - low1) / (high1 - low1) * (high2 - low2) + low2;
}"
44169,"private boolean checkMccTree(String treeFilename,String coordinatesName) throws FileNotFoundException, IOException, ImportException {
  RootedTree tree=(RootedTree)new NexusImporter(new FileReader(treeFilename)).importNextTree();
  boolean flag=false;
  double nodeCount=Utils.getNodeCount(tree);
  double unannotatedNodeCount=0;
  for (  Node node : tree.getNodes()) {
    if (!tree.isRoot(node)) {
      Double longitude=(Double)node.getAttribute(coordinatesName + 2);
      Double latitude=(Double)node.getAttribute(coordinatesName + 1);
      if (longitude == null || latitude == null) {
        unannotatedNodeCount++;
      }
    }
  }
  if (unannotatedNodeCount == nodeCount) {
    flag=false;
    throw new RuntimeException(""String_Node_Str"" + coordinatesName + ""String_Node_Str"");
  }
 else   if (unannotatedNodeCount == 0) {
    flag=true;
  }
 else   if (unannotatedNodeCount < nodeCount) {
    notNull=true;
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  return flag;
}","private boolean checkMccTree(String treeFilename,String coordinatesName) throws FileNotFoundException, IOException, ImportException {
  RootedTree tree=(RootedTree)new NexusImporter(new FileReader(treeFilename)).importNextTree();
  boolean flag=false;
  double nodeCount=Utils.getNodeCount(tree);
  double unannotatedNodeCount=0;
  for (  Node node : tree.getNodes()) {
    if (!tree.isRoot(node)) {
      Double longitude=(Double)node.getAttribute(coordinatesName + 2);
      Double latitude=(Double)node.getAttribute(coordinatesName + 1);
      if (longitude == null || latitude == null) {
        unannotatedNodeCount++;
      }
    }
  }
  if (unannotatedNodeCount == nodeCount) {
    flag=false;
    throw new RuntimeException(""String_Node_Str"" + coordinatesName + ""String_Node_Str"");
  }
 else   if (unannotatedNodeCount == 0) {
    flag=true;
  }
 else   if (unannotatedNodeCount < nodeCount) {
    notNull=true;
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    notNull=false;
    throw new RuntimeException(""String_Node_Str"");
  }
  return flag;
}"
44170,"public void run(){
  try {
    double treeRootHeight=tree.getHeight(tree.getRootNode());
    double treeNormalization=currentTree.getHeight(currentTree.getRootNode());
    double[] precisionArray=Utils.getTreeDoubleArrayAttribute(currentTree,precisionString);
    for (    Node node : currentTree.getNodes()) {
      if (!currentTree.isRoot(node)) {
        Node parentNode=currentTree.getParent(node);
        double nodeHeight=currentTree.getHeight(node);
        double parentHeight=currentTree.getHeight(parentNode);
        double[] location=Utils.getDoubleArrayNodeAttribute(node,coordinatesName);
        double[] parentLocation=Utils.getDoubleArrayNodeAttribute(parentNode,coordinatesName);
        double rate=Utils.getDoubleNodeAttribute(node,rateString);
        for (int i=0; i <= numberOfIntervals; i++) {
          double sliceHeight=treeRootHeight - (treeRootHeight / numberOfIntervals) * ((double)i);
          if (nodeHeight < sliceHeight && sliceHeight <= parentHeight) {
            int days=(int)(sliceHeight * timescaler);
            double sliceTime=mrsd.minus(days);
            if (slicesMap.containsKey(sliceTime)) {
              double[] imputedLocation=imputeValue(location,parentLocation,sliceHeight,nodeHeight,parentHeight,rate,useTrueNoise,treeNormalization,precisionArray);
              slicesMap.get(sliceTime).add(new Coordinates(imputedLocation[1],imputedLocation[0],0.0));
            }
 else {
              List<Coordinates> coords=new ArrayList<Coordinates>();
              double[] imputedLocation=imputeValue(location,parentLocation,sliceHeight,nodeHeight,parentHeight,rate,useTrueNoise,treeNormalization,precisionArray);
              coords.add(new Coordinates(imputedLocation[1],imputedLocation[0],0.0));
              slicesMap.putIfAbsent(sliceTime,coords);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    double treeRootHeight=tree.getHeight(tree.getRootNode());
    double treeNormalization=Utils.getTreeLength(currentTree,currentTree.getRootNode());
    double[] precisionArray=Utils.getTreeDoubleArrayAttribute(currentTree,precisionString);
    for (    Node node : currentTree.getNodes()) {
      if (!currentTree.isRoot(node)) {
        Node parentNode=currentTree.getParent(node);
        double nodeHeight=currentTree.getHeight(node);
        double parentHeight=currentTree.getHeight(parentNode);
        double[] location=Utils.getDoubleArrayNodeAttribute(node,coordinatesName);
        double[] parentLocation=Utils.getDoubleArrayNodeAttribute(parentNode,coordinatesName);
        double rate=Utils.getDoubleNodeAttribute(node,rateString);
        for (int i=0; i <= numberOfIntervals; i++) {
          double sliceHeight=treeRootHeight - (treeRootHeight / numberOfIntervals) * ((double)i);
          if (nodeHeight < sliceHeight && sliceHeight <= parentHeight) {
            int days=(int)(sliceHeight * timescaler);
            double sliceTime=mrsd.minus(days);
            if (slicesMap.containsKey(sliceTime)) {
              double[] imputedLocation=imputeValue(location,parentLocation,sliceHeight,nodeHeight,parentHeight,rate,useTrueNoise,treeNormalization,precisionArray);
              slicesMap.get(sliceTime).add(new Coordinates(imputedLocation[1],imputedLocation[0],0.0));
            }
 else {
              List<Coordinates> coords=new ArrayList<Coordinates>();
              double[] imputedLocation=imputeValue(location,parentLocation,sliceHeight,nodeHeight,parentHeight,rate,useTrueNoise,treeNormalization,precisionArray);
              coords.add(new Coordinates(imputedLocation[1],imputedLocation[0],0.0));
              slicesMap.putIfAbsent(sliceTime,coords);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
44171,"public TimeSlicerTab(){
  setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
  backgroundColor=new Color(231,237,246);
  polygonsMaxColor=new Color(50,255,255,255);
  branchesMaxColor=new Color(255,5,50,255);
  polygonsMinColor=new Color(0,0,0,100);
  branchesMinColor=new Color(0,0,0,255);
  GridBagConstraints c=new GridBagConstraints();
  nuclearIcon=CreateImageIcon(""String_Node_Str"");
  treeIcon=CreateImageIcon(""String_Node_Str"");
  treesIcon=CreateImageIcon(""String_Node_Str"");
  processingIcon=CreateImageIcon(""String_Node_Str"");
  saveIcon=CreateImageIcon(""String_Node_Str"");
  errorIcon=CreateImageIcon(""String_Node_Str"");
  burnInParser=new JTextField(""String_Node_Str"",10);
  coordinatesNameParser=new JTextField(""String_Node_Str"",10);
  rateAttNameParser=new JTextField(""String_Node_Str"",10);
  precisionAttNameParser=new JTextField(""String_Node_Str"",10);
  numberOfIntervalsParser=new JTextField(""String_Node_Str"",5);
  maxAltMappingParser=new JTextField(""String_Node_Str"",5);
  kmlPathParser=new JTextField(""String_Node_Str"",10);
  HPDParser=new JTextField(""String_Node_Str"",5);
  generateKml=new JButton(""String_Node_Str"",nuclearIcon);
  openTree=new JButton(""String_Node_Str"",treeIcon);
  openTrees=new JButton(""String_Node_Str"",treesIcon);
  generateProcessing=new JButton(""String_Node_Str"",processingIcon);
  saveProcessingPlot=new JButton(""String_Node_Str"",saveIcon);
  polygonsMaxColorChooser=new JButton(""String_Node_Str"");
  branchesMaxColorChooser=new JButton(""String_Node_Str"");
  polygonsMinColorChooser=new JButton(""String_Node_Str"");
  branchesMinColorChooser=new JButton(""String_Node_Str"");
  branchesWidthParser=new JSlider(JSlider.HORIZONTAL,2,10,4);
  branchesWidthParser.setMajorTickSpacing(2);
  branchesWidthParser.setMinorTickSpacing(1);
  branchesWidthParser.setPaintTicks(true);
  branchesWidthParser.setPaintLabels(true);
  gridSizeParser=new JSlider(JSlider.HORIZONTAL,100,200,100);
  gridSizeParser.setMajorTickSpacing(50);
  gridSizeParser.setMinorTickSpacing(10);
  gridSizeParser.setPaintTicks(true);
  gridSizeParser.setPaintLabels(true);
  progressBar=new JProgressBar();
  trueNoiseParser=new JCheckBox();
  imputeParser=new JCheckBox();
  leftPanel=new JPanel();
  leftPanel.setBackground(backgroundColor);
  leftPanel.setLayout(new BoxLayout(leftPanel,BoxLayout.Y_AXIS));
  leftPanel.setPreferredSize(new Dimension(leftPanelWidth,leftPanelHeight));
  openTree.addActionListener(new ListenOpenTree());
  openTrees.addActionListener(new ListenOpenTrees());
  generateKml.addActionListener(new ListenGenerateKml());
  generateProcessing.addActionListener(new ListenGenerateProcessing());
  saveProcessingPlot.addActionListener(new ListenSaveProcessingPlot());
  imputeParser.addActionListener(new listenImputeParser());
  polygonsMaxColorChooser.addActionListener(new ListenPolygonsMaxColorChooser());
  branchesMaxColorChooser.addActionListener(new ListenBranchesMaxColorChooser());
  polygonsMinColorChooser.addActionListener(new ListenPolygonsMinColorChooser());
  branchesMinColorChooser.addActionListener(new ListenBranchesMinColorChooser());
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(openTree);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(openTrees);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  dateSpinner=new DateSpinner();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(dateSpinner,c);
  String era[]={""String_Node_Str"",""String_Node_Str""};
  eraParser=new JComboBox(era);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(eraParser,c);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(coordinatesNameParser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(true);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(branchesMinColorChooser,c);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(branchesMaxColorChooser,c);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(branchesWidthParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(maxAltMappingParser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(false);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(polygonsMinColorChooser,c);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(polygonsMaxColorChooser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(false);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  imputeParser.setSelected(true);
  tmpPanel.add(imputeParser);
  trueNoiseParser.setSelected(true);
  tmpPanel.add(trueNoiseParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(rateAttNameParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(precisionAttNameParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(burnInParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(HPDParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(numberOfIntervalsParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(gridSizeParser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(true);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(kmlPathParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(generateKml,c);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(generateProcessing,c);
  c.ipady=7;
  c.gridwidth=3;
  c.gridx=0;
  c.gridy=1;
  tmpPanel.add(progressBar,c);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(saveProcessingPlot);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(true);
  leftPanel.add(sp);
  JScrollPane leftScrollPane=new JScrollPane(leftPanel,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  leftScrollPane.setMinimumSize(new Dimension(leftPanelWidth + 60,leftPanelHeight));
  add(leftScrollPane,BorderLayout.CENTER);
  timeSlicerToProcessing=new TimeSlicerToProcessing();
  timeSlicerToProcessing.setPreferredSize(new Dimension(2048,1025));
  if (System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str"")) {
    JScrollPane rightScrollPane=new JScrollPane(timeSlicerToProcessing,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    add(rightScrollPane,BorderLayout.CENTER);
  }
 else {
    ScrollPane rightScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);
    rightScrollPane.add(timeSlicerToProcessing);
    add(rightScrollPane,BorderLayout.CENTER);
  }
}","public TimeSlicerTab(){
  setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
  backgroundColor=new Color(231,237,246);
  polygonsMaxColor=new Color(50,255,255,255);
  branchesMaxColor=new Color(255,5,50,255);
  polygonsMinColor=new Color(0,0,0,100);
  branchesMinColor=new Color(0,0,0,255);
  GridBagConstraints c=new GridBagConstraints();
  nuclearIcon=CreateImageIcon(""String_Node_Str"");
  treeIcon=CreateImageIcon(""String_Node_Str"");
  treesIcon=CreateImageIcon(""String_Node_Str"");
  processingIcon=CreateImageIcon(""String_Node_Str"");
  saveIcon=CreateImageIcon(""String_Node_Str"");
  errorIcon=CreateImageIcon(""String_Node_Str"");
  burnInParser=new JTextField(""String_Node_Str"",10);
  coordinatesNameParser=new JTextField(""String_Node_Str"",10);
  rateAttNameParser=new JTextField(""String_Node_Str"",10);
  precisionAttNameParser=new JTextField(""String_Node_Str"",10);
  numberOfIntervalsParser=new JTextField(""String_Node_Str"",5);
  maxAltMappingParser=new JTextField(""String_Node_Str"",5);
  kmlPathParser=new JTextField(""String_Node_Str"",10);
  HPDParser=new JTextField(""String_Node_Str"",5);
  generateKml=new JButton(""String_Node_Str"",nuclearIcon);
  openTree=new JButton(""String_Node_Str"",treeIcon);
  openTrees=new JButton(""String_Node_Str"",treesIcon);
  generateProcessing=new JButton(""String_Node_Str"",processingIcon);
  saveProcessingPlot=new JButton(""String_Node_Str"",saveIcon);
  polygonsMaxColorChooser=new JButton(""String_Node_Str"");
  branchesMaxColorChooser=new JButton(""String_Node_Str"");
  polygonsMinColorChooser=new JButton(""String_Node_Str"");
  branchesMinColorChooser=new JButton(""String_Node_Str"");
  branchesWidthParser=new JSlider(JSlider.HORIZONTAL,2,10,4);
  branchesWidthParser.setMajorTickSpacing(2);
  branchesWidthParser.setMinorTickSpacing(1);
  branchesWidthParser.setPaintTicks(true);
  branchesWidthParser.setPaintLabels(true);
  gridSizeParser=new JSlider(JSlider.HORIZONTAL,100,200,100);
  gridSizeParser.setMajorTickSpacing(50);
  gridSizeParser.setMinorTickSpacing(10);
  gridSizeParser.setPaintTicks(true);
  gridSizeParser.setPaintLabels(true);
  progressBar=new JProgressBar();
  trueNoiseParser=new JCheckBox();
  imputeParser=new JCheckBox();
  leftPanel=new JPanel();
  leftPanel.setBackground(backgroundColor);
  leftPanel.setLayout(new BoxLayout(leftPanel,BoxLayout.Y_AXIS));
  leftPanel.setPreferredSize(new Dimension(leftPanelWidth,leftPanelHeight));
  openTree.addActionListener(new ListenOpenTree());
  openTrees.addActionListener(new ListenOpenTrees());
  generateKml.addActionListener(new ListenGenerateKml());
  generateProcessing.addActionListener(new ListenGenerateProcessing());
  saveProcessingPlot.addActionListener(new ListenSaveProcessingPlot());
  imputeParser.addActionListener(new listenImputeParser());
  polygonsMaxColorChooser.addActionListener(new ListenPolygonsMaxColorChooser());
  branchesMaxColorChooser.addActionListener(new ListenBranchesMaxColorChooser());
  polygonsMinColorChooser.addActionListener(new ListenPolygonsMinColorChooser());
  branchesMinColorChooser.addActionListener(new ListenBranchesMinColorChooser());
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(openTree);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(openTrees);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  dateSpinner=new DateSpinner();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(dateSpinner,c);
  String era[]={""String_Node_Str"",""String_Node_Str""};
  eraParser=new JComboBox(era);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(eraParser,c);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(coordinatesNameParser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(true);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(branchesMinColorChooser,c);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(branchesMaxColorChooser,c);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(branchesWidthParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(maxAltMappingParser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(false);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(polygonsMinColorChooser,c);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(polygonsMaxColorChooser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(false);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  imputeParser.setSelected(true);
  tmpPanel.add(imputeParser);
  trueNoiseParser.setSelected(true);
  tmpPanel.add(trueNoiseParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(rateAttNameParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(precisionAttNameParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(burnInParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(HPDParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(numberOfIntervalsParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(gridSizeParser);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(false);
  leftPanel.add(sp);
  tmpPanelsHolder=new JPanel();
  tmpPanelsHolder.setLayout(new BoxLayout(tmpPanelsHolder,BoxLayout.Y_AXIS));
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(kmlPathParser);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setLayout(new GridBagLayout());
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  tmpPanel.add(generateKml,c);
  c.gridx=2;
  c.gridy=0;
  tmpPanel.add(generateProcessing,c);
  c.ipady=7;
  c.gridwidth=3;
  c.gridx=0;
  c.gridy=1;
  tmpPanel.add(progressBar,c);
  tmpPanelsHolder.add(tmpPanel);
  tmpPanel=new JPanel();
  tmpPanel.setMaximumSize(new Dimension(leftPanelWidth + 60,100));
  tmpPanel.setBackground(backgroundColor);
  tmpPanel.setBorder(new TitledBorder(""String_Node_Str""));
  tmpPanel.add(saveProcessingPlot);
  tmpPanelsHolder.add(tmpPanel);
  sp=new SpinningPanel(tmpPanelsHolder,""String_Node_Str"",new Dimension(leftPanelWidth + 60,20));
  sp.showBottom(false);
  leftPanel.add(sp);
  JScrollPane leftScrollPane=new JScrollPane(leftPanel,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  leftScrollPane.setMinimumSize(new Dimension(leftPanelWidth + 60,leftPanelHeight));
  add(leftScrollPane,BorderLayout.CENTER);
  timeSlicerToProcessing=new TimeSlicerToProcessing();
  timeSlicerToProcessing.setPreferredSize(new Dimension(2048,1025));
  if (System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str"")) {
    JScrollPane rightScrollPane=new JScrollPane(timeSlicerToProcessing,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    add(rightScrollPane,BorderLayout.CENTER);
  }
 else {
    ScrollPane rightScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);
    rightScrollPane.add(timeSlicerToProcessing);
    add(rightScrollPane,BorderLayout.CENTER);
  }
}"
44172,"private void drawBranches(){
  strokeWeight((float)branchWidth);
  for (  Node node : tree.getNodes()) {
    if (!tree.isRoot(node)) {
      Float longitude=(float)Utils.getDoubleNodeAttribute(node,longitudeName);
      Float latitude=(float)Utils.getDoubleNodeAttribute(node,latitudeName);
      Node parentNode=tree.getParent(node);
      Float parentLongitude=(float)Utils.getDoubleNodeAttribute(parentNode,longitudeName);
      Float parentLatitude=(float)Utils.getDoubleNodeAttribute(parentNode,latitudeName);
      float x0=map(parentLongitude,minX,maxX,0,width);
      float y0=map(parentLatitude,maxY,minY,0,height);
      float x1=map(longitude,minX,maxX,0,width);
      float y1=map(latitude,maxY,minY,0,height);
      double nodeHeight=tree.getHeight(node);
      int red=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchRedMapping,maxBranchRedMapping);
      int green=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchGreenMapping,maxBranchGreenMapping);
      int blue=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchBlueMapping,maxBranchBlueMapping);
      int alpha=(int)Utils.map(nodeHeight,0,treeHeightMax,maxBranchOpacityMapping,minBranchOpacityMapping);
      stroke(red,green,blue,alpha);
      line(x0,y0,x1,y1);
    }
  }
}","private void drawBranches(){
  strokeWeight((float)branchWidth);
  for (  Node node : tree.getNodes()) {
    if (!tree.isRoot(node)) {
      double longitude=Utils.getDoubleNodeAttribute(node,longitudeName);
      double latitude=Utils.getDoubleNodeAttribute(node,latitudeName);
      Node parentNode=tree.getParent(node);
      double parentLongitude=Utils.getDoubleNodeAttribute(parentNode,longitudeName);
      double parentLatitude=Utils.getDoubleNodeAttribute(parentNode,latitudeName);
      double x0=Utils.map(parentLongitude,minX,maxX,0,width);
      double y0=Utils.map(parentLatitude,maxY,minY,0,height);
      double x1=Utils.map(longitude,minX,maxX,0,width);
      double y1=Utils.map(latitude,maxY,minY,0,height);
      double nodeHeight=tree.getHeight(node);
      int red=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchRedMapping,maxBranchRedMapping);
      int green=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchGreenMapping,maxBranchGreenMapping);
      int blue=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchBlueMapping,maxBranchBlueMapping);
      int alpha=(int)Utils.map(nodeHeight,0,treeHeightMax,maxBranchOpacityMapping,minBranchOpacityMapping);
      stroke(red,green,blue,alpha);
      line((float)x0,(float)y0,(float)x1,(float)y1);
    }
  }
}"
44173,"private void drawPolygons(){
  for (  Node node : tree.getNodes()) {
    if (!tree.isRoot(node)) {
      if (!tree.isExternal(node)) {
        Integer modality=Utils.getIntegerNodeAttribute(node,coordinatesName + ""String_Node_Str"" + HPD+ ""String_Node_Str"");
        for (int i=1; i <= modality; i++) {
          Object[] longitudeHPD=Utils.getArrayNodeAttribute(node,longitudeName + ""String_Node_Str"" + HPD+ ""String_Node_Str""+ i);
          Object[] latitudeHPD=Utils.getArrayNodeAttribute(node,latitudeName + ""String_Node_Str"" + HPD+ ""String_Node_Str""+ i);
          double nodeHeight=tree.getHeight(node);
          int red=(int)Utils.map(nodeHeight,0,treeHeightMax,minPolygonRedMapping,maxPolygonRedMapping);
          int green=(int)Utils.map(nodeHeight,0,treeHeightMax,minPolygonGreenMapping,maxPolygonGreenMapping);
          int blue=(int)Utils.map(nodeHeight,0,treeHeightMax,minPolygonBlueMapping,maxPolygonBlueMapping);
          int alpha=(int)Utils.map(nodeHeight,0,treeHeightMax,maxPolygonOpacityMapping,minPolygonOpacityMapping);
          stroke(red,green,blue,alpha);
          fill(red,green,blue,alpha);
          List<Coordinates> coordinates=Utils.ParsePolygons(longitudeHPD,latitudeHPD);
          beginShape();
          for (int row=0; row < coordinates.size() - 1; row++) {
            float X=map((float)coordinates.get(row).getLongitude(),minX,maxX,0,width);
            float Y=map((float)coordinates.get(row).getLatitude(),maxY,minY,0,height);
            float XEND=map((float)coordinates.get(row + 1).getLongitude(),minX,maxX,0,width);
            float YEND=map((float)(coordinates.get(row + 1).getLatitude()),maxY,minY,0,height);
            vertex(X,Y);
            vertex(XEND,YEND);
          }
          endShape(CLOSE);
        }
      }
    }
  }
}","private void drawPolygons(){
  for (  Node node : tree.getNodes()) {
    if (!tree.isRoot(node)) {
      if (!tree.isExternal(node)) {
        Integer modality=Utils.getIntegerNodeAttribute(node,coordinatesName + ""String_Node_Str"" + HPD+ ""String_Node_Str"");
        for (int i=1; i <= modality; i++) {
          Object[] longitudeHPD=Utils.getArrayNodeAttribute(node,longitudeName + ""String_Node_Str"" + HPD+ ""String_Node_Str""+ i);
          Object[] latitudeHPD=Utils.getArrayNodeAttribute(node,latitudeName + ""String_Node_Str"" + HPD+ ""String_Node_Str""+ i);
          double nodeHeight=tree.getHeight(node);
          int red=(int)Utils.map(nodeHeight,0,treeHeightMax,minPolygonRedMapping,maxPolygonRedMapping);
          int green=(int)Utils.map(nodeHeight,0,treeHeightMax,minPolygonGreenMapping,maxPolygonGreenMapping);
          int blue=(int)Utils.map(nodeHeight,0,treeHeightMax,minPolygonBlueMapping,maxPolygonBlueMapping);
          int alpha=(int)Utils.map(nodeHeight,0,treeHeightMax,maxPolygonOpacityMapping,minPolygonOpacityMapping);
          stroke(red,green,blue,alpha);
          fill(red,green,blue,alpha);
          List<Coordinates> coordinates=Utils.ParsePolygons(longitudeHPD,latitudeHPD);
          beginShape();
          for (int row=0; row < coordinates.size() - 1; row++) {
            double X=Utils.map(coordinates.get(row).getLongitude(),minX,maxX,0,width);
            double Y=Utils.map(coordinates.get(row).getLatitude(),maxY,minY,0,height);
            double XEND=Utils.map(coordinates.get(row + 1).getLongitude(),minX,maxX,0,width);
            double YEND=Utils.map((coordinates.get(row + 1).getLatitude()),maxY,minY,0,height);
            vertex((float)X,(float)Y);
            vertex((float)XEND,(float)YEND);
          }
          endShape(CLOSE);
        }
      }
    }
  }
}"
44174,"public void setup(){
  minX=-180;
  maxX=180;
  minY=-80;
  maxY=90;
  mapBackground=new MapBackground(this);
}","public void setup(){
  minX=-180;
  maxX=180;
  minY=-90;
  maxY=90;
  mapBackground=new MapBackground(this);
}"
44175,"public Void doInBackground(){
  try {
    generateProcessing.setEnabled(false);
    progressBar.setIndeterminate(true);
    rateIndicatorBFToProcessing.setLogFilePath(logFilename,burnInParser.getValue() / 100);
    rateIndicatorBFToProcessing.setBfCutoff(Double.valueOf(bfCutoffParser.getText()));
    rateIndicatorBFToProcessing.setLocationFilePath(locationsFilename);
    rateIndicatorBFToProcessing.setMinBranchRedMapping(branchesMinColor.getRed());
    rateIndicatorBFToProcessing.setMinBranchGreenMapping(branchesMinColor.getGreen());
    rateIndicatorBFToProcessing.setMinBranchBlueMapping(branchesMinColor.getBlue());
    rateIndicatorBFToProcessing.setMinBranchOpacityMapping(branchesMinColor.getAlpha());
    rateIndicatorBFToProcessing.setMaxBranchRedMapping(branchesMaxColor.getRed());
    rateIndicatorBFToProcessing.setMaxBranchGreenMapping(branchesMaxColor.getGreen());
    rateIndicatorBFToProcessing.setMaxBranchBlueMapping(branchesMaxColor.getBlue());
    rateIndicatorBFToProcessing.setMaxBranchOpacityMapping(branchesMaxColor.getAlpha());
    rateIndicatorBFToProcessing.setBranchWidth(branchesWidthParser.getValue() / 2);
    if (meanPoissonPriorParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultMeanPoissonPrior();
    }
 else {
      rateIndicatorBFToProcessing.setUserMeanPoissonPrior(Double.valueOf(meanPoissonPriorParser.getSelectedItem().toString()));
    }
    if (poissonPriorOffsetParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultPoissonPriorOffset();
    }
 else {
      rateIndicatorBFToProcessing.setUserPoissonPriorOffset(Double.valueOf(poissonPriorOffsetParser.getSelectedItem().toString()));
    }
    rateIndicatorBFToProcessing.init();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=String.format(""String_Node_Str"",e.toString());
    JOptionPane.showMessageDialog(Utils.getActiveFrame(),msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,errorIcon);
  }
  return null;
}","public Void doInBackground(){
  try {
    generateProcessing.setEnabled(false);
    progressBar.setIndeterminate(true);
    rateIndicatorBFToProcessing.setLogFilePath(logFilename,burnInParser.getValue() / 100.0);
    rateIndicatorBFToProcessing.setBfCutoff(Double.valueOf(bfCutoffParser.getText()));
    rateIndicatorBFToProcessing.setLocationFilePath(locationsFilename);
    rateIndicatorBFToProcessing.setMinBranchRedMapping(branchesMinColor.getRed());
    rateIndicatorBFToProcessing.setMinBranchGreenMapping(branchesMinColor.getGreen());
    rateIndicatorBFToProcessing.setMinBranchBlueMapping(branchesMinColor.getBlue());
    rateIndicatorBFToProcessing.setMinBranchOpacityMapping(branchesMinColor.getAlpha());
    rateIndicatorBFToProcessing.setMaxBranchRedMapping(branchesMaxColor.getRed());
    rateIndicatorBFToProcessing.setMaxBranchGreenMapping(branchesMaxColor.getGreen());
    rateIndicatorBFToProcessing.setMaxBranchBlueMapping(branchesMaxColor.getBlue());
    rateIndicatorBFToProcessing.setMaxBranchOpacityMapping(branchesMaxColor.getAlpha());
    rateIndicatorBFToProcessing.setBranchWidth(branchesWidthParser.getValue() / 2);
    if (meanPoissonPriorParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultMeanPoissonPrior();
    }
 else {
      rateIndicatorBFToProcessing.setUserMeanPoissonPrior(Double.valueOf(meanPoissonPriorParser.getSelectedItem().toString()));
    }
    if (poissonPriorOffsetParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultPoissonPriorOffset();
    }
 else {
      rateIndicatorBFToProcessing.setUserPoissonPriorOffset(Double.valueOf(poissonPriorOffsetParser.getSelectedItem().toString()));
    }
    rateIndicatorBFToProcessing.init();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=String.format(""String_Node_Str"",e.toString());
    JOptionPane.showMessageDialog(Utils.getActiveFrame(),msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,errorIcon);
  }
  return null;
}"
44176,"public ReadLog(String filename,double burnIn){
  time=-System.currentTimeMillis();
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
  time+=System.currentTimeMillis();
}","public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  System.out.println(nrow * burnIn);
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}"
44177,"public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  System.out.println(nrow * burnIn);
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}","public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}"
44178,"@Override public void setUp() throws Exception {
  this.db=new MockDatabase();
  ActiveRecordBase.bootStrap(this.db,getApplicationContext());
  exampleRecord=new ExampleRecord();
  subRecord=new SubRecord();
  subRecord.record=exampleRecord;
  subRecord.id=(long)123;
  exampleRecord.id=(long)321;
  exampleRecord.subrecord=subRecord;
  blog=new Blog();
  blog.id=(long)2;
  post1=new Post();
  post2=new Post();
  post1.id=(long)1;
  post1.blog=blog;
  post2.id=(long)3;
  post2.blog=blog;
  blog.posts.addAll(post1,post2);
}","@Override public void setUp() throws Exception {
  this.db=new MockDatabase();
  ActiveRecordBase.bootStrap(this.db,null);
  exampleRecord=new ExampleRecord();
  subRecord=new SubRecord();
  subRecord.record=exampleRecord;
  subRecord.id=(long)123;
  exampleRecord.id=(long)321;
  exampleRecord.subrecord=subRecord;
  blog=new Blog();
  blog.id=(long)2;
  post1=new Post();
  post2=new Post();
  post1.id=(long)1;
  post1.blog=blog;
  post2.id=(long)3;
  post2.blog=blog;
  blog.posts.addAll(post1,post2);
}"
44179,"protected static void parseCommandLine(String[] args){
  LinkedList<String> argbuffer=new LinkedList<String>();
  Collections.addAll(argbuffer,args);
  try {
    while (!argbuffer.isEmpty()) {
      String arg=argbuffer.pop();
      if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          TemplateFormatter tf=new TemplateFormatter(MCSignOnDoor.class.getResource(""String_Node_Str""));
          tf.defineVariable(""String_Node_Str"",VERSION);
          tf.defineVariable(""String_Node_Str"",Integer.toString(port));
          tf.defineVariable(""String_Node_Str"",awayMessage);
          String s=tf.execute();
          System.out.println(s);
        }
 catch (        IOException ex) {
          System.out.println(""String_Node_Str"" + ex.getMessage());
        }
catch (        URISyntaxException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
catch (        MalformedFormatException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
 finally {
          System.exit(0);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        outputToConfig=argbuffer.pop();
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        parseConfigFile(new File(argbuffer.pop()));
        break;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        port=Integer.parseInt(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        ip=InetAddress.getByName(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        respondToPing=false;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setAwayMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setMotdMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setPlayerRatio(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setWhiteMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setBannedMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setIpMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        ignorePingFromBlocked=true;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        basepath=new File(argbuffer.pop()).getPath() + File.separator;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        sentryMode=true;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        String logfilename;
        if (!argbuffer.peek().startsWith(""String_Node_Str"")) {
          logfilename=argbuffer.pop();
        }
 else {
          logfilename=DEFAULT_LOGFILE;
        }
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        rootlog.addHandler(new FileHandler(logfilename,true));
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        Handler hs[]=rootlog.getHandlers();
        for (        Handler h : hs) {
          if (h instanceof ConsoleHandler)           rootlog.removeHandler(h);
        }
      }
 else {
        System.out.println(""String_Node_Str"" + arg + ""String_Node_Str"");
      }
    }
  }
 catch (  SecurityException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
 finally {
  }
}","protected static void parseCommandLine(String[] args){
  LinkedList<String> argbuffer=new LinkedList<String>();
  Collections.addAll(argbuffer,args);
  try {
    while (!argbuffer.isEmpty()) {
      String arg=argbuffer.pop();
      if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          TemplateFormatter tf=new TemplateFormatter(MCSignOnDoor.class.getResourceAsStream(""String_Node_Str""));
          tf.defineVariable(""String_Node_Str"",VERSION);
          tf.defineVariable(""String_Node_Str"",Integer.toString(port));
          tf.defineVariable(""String_Node_Str"",awayMessage);
          String s=tf.execute();
          System.out.println(s);
        }
 catch (        FileNotFoundException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
catch (        IOException ex) {
          System.out.println(""String_Node_Str"" + ex.getMessage());
        }
catch (        MalformedFormatException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
catch (        Exception e) {
          System.err.println(""String_Node_Str"");
          e.printStackTrace();
        }
 finally {
          System.exit(0);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        outputToConfig=argbuffer.pop();
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        parseConfigFile(new File(argbuffer.pop()));
        break;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        port=Integer.parseInt(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        ip=InetAddress.getByName(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        respondToPing=false;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setAwayMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setMotdMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setPlayerRatio(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setWhiteMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setBannedMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setIpMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        ignorePingFromBlocked=true;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        basepath=new File(argbuffer.pop()).getPath() + File.separator;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        sentryMode=true;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        String logfilename;
        if (!argbuffer.peek().startsWith(""String_Node_Str"")) {
          logfilename=argbuffer.pop();
        }
 else {
          logfilename=DEFAULT_LOGFILE;
        }
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        rootlog.addHandler(new FileHandler(logfilename,true));
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        Handler hs[]=rootlog.getHandlers();
        for (        Handler h : hs) {
          if (h instanceof ConsoleHandler)           rootlog.removeHandler(h);
        }
      }
 else {
        System.out.println(""String_Node_Str"" + arg + ""String_Node_Str"");
      }
    }
  }
 catch (  SecurityException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
 finally {
  }
}"
44180,"protected static void parseCommandLine(String[] args){
  LinkedList<String> argbuffer=new LinkedList<String>();
  Collections.addAll(argbuffer,args);
  try {
    while (!argbuffer.isEmpty()) {
      String arg=argbuffer.pop();
      arg=arg.replace('/','-');
      if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          TemplateFormatter tf=new TemplateFormatter(MCSignOnDoor.class.getResource(""String_Node_Str""));
          tf.defineVariable(""String_Node_Str"",VERSION);
          tf.defineVariable(""String_Node_Str"",Integer.toString(port));
          tf.defineVariable(""String_Node_Str"",awayMessage);
          String s=tf.execute();
          System.out.println(s);
        }
 catch (        IOException ex) {
          System.out.println(""String_Node_Str"" + ex.getMessage());
        }
catch (        URISyntaxException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
catch (        MalformedFormatException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
 finally {
          System.exit(0);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        outputToConfig=argbuffer.pop();
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        parseConfigFile(new File(argbuffer.pop()));
        break;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        port=Integer.parseInt(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        ip=InetAddress.getByName(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        respondToPing=false;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setAwayMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setMotdMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setPlayerRatio(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setWhiteMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setBannedMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setIpMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        ignorePingFromBlocked=true;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        basepath=new File(argbuffer.pop()).getPath() + File.separator;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        String logfilename;
        if (!argbuffer.peek().replace('/','-').startsWith(""String_Node_Str"")) {
          logfilename=argbuffer.pop();
        }
 else {
          logfilename=DEFAULT_LOGFILE;
        }
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        rootlog.addHandler(new FileHandler(logfilename,true));
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        Handler hs[]=rootlog.getHandlers();
        for (        Handler h : hs) {
          if (h instanceof ConsoleHandler)           rootlog.removeHandler(h);
        }
      }
 else {
        System.out.println(""String_Node_Str"" + arg + ""String_Node_Str"");
      }
    }
  }
 catch (  SecurityException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
 finally {
  }
}","protected static void parseCommandLine(String[] args){
  LinkedList<String> argbuffer=new LinkedList<String>();
  Collections.addAll(argbuffer,args);
  try {
    while (!argbuffer.isEmpty()) {
      String arg=argbuffer.pop();
      if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          TemplateFormatter tf=new TemplateFormatter(MCSignOnDoor.class.getResource(""String_Node_Str""));
          tf.defineVariable(""String_Node_Str"",VERSION);
          tf.defineVariable(""String_Node_Str"",Integer.toString(port));
          tf.defineVariable(""String_Node_Str"",awayMessage);
          String s=tf.execute();
          System.out.println(s);
        }
 catch (        IOException ex) {
          System.out.println(""String_Node_Str"" + ex.getMessage());
        }
catch (        URISyntaxException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
catch (        MalformedFormatException e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
 finally {
          System.exit(0);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        outputToConfig=argbuffer.pop();
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        parseConfigFile(new File(argbuffer.pop()));
        break;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        port=Integer.parseInt(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        ip=InetAddress.getByName(argbuffer.pop());
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        respondToPing=false;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setAwayMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setMotdMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setPlayerRatio(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setWhiteMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setBannedMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        if (!setIpMessage(argbuffer.pop())) {
          System.exit(-1);
        }
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        ignorePingFromBlocked=true;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"")) {
        basepath=new File(argbuffer.pop()).getPath() + File.separator;
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        String logfilename;
        if (!argbuffer.peek().startsWith(""String_Node_Str"")) {
          logfilename=argbuffer.pop();
        }
 else {
          logfilename=DEFAULT_LOGFILE;
        }
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        rootlog.addHandler(new FileHandler(logfilename,true));
      }
 else       if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
        Logger rootlog=Logger.getLogger(""String_Node_Str"");
        Handler hs[]=rootlog.getHandlers();
        for (        Handler h : hs) {
          if (h instanceof ConsoleHandler)           rootlog.removeHandler(h);
        }
      }
 else {
        System.out.println(""String_Node_Str"" + arg + ""String_Node_Str"");
      }
    }
  }
 catch (  SecurityException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
 finally {
  }
}"
44181,"/** 
 * The same as   {@link #byLocation(float,float,int)} but instead of using coordinates a foursquare location IDis provided
 * @param fourSquareLocation a valid foursquare location ID e.g.  5XfVJe
 * @return this
 */
public Instagram byFoursquareLocation(String fourSquareLocation){
  addResource(Type.LOCATION,null,-1,-1,-1,false,fourSquareLocation);
  return this;
}","/** 
 * The same as   {@link #byLocation(float,float,int)} but instead of using coordinates a foursquare location IDis provided
 * @param fourSquareLocation a valid foursquare location ID e.g.  5XfVJe
 * @return this
 */
public Instagram byFoursquareLocation(String fourSquareLocation) throws Exception {
  throw new Exception(""String_Node_Str"");
}"
44182,"/** 
 * Adds a resource object to the request of the given type, which is always required
 * @param type the type of resource, all other params are optional dependent upon what this value is
 * @return this
 */
protected Instagram addResource(Type type,String value,float longitude,float lattitude,int distance,boolean exactMatch,String fourSquareLocation){
  ResourceParams parameterSet=newResourceParams();
switch (type) {
case USER:
    if (value == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  parameterSet.set(""String_Node_Str"",""String_Node_Str"");
parameterSet.set(""String_Node_Str"",value);
break;
case TAG:
if (value == null) {
throw new IllegalArgumentException(""String_Node_Str"");
}
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
parameterSet.set(""String_Node_Str"",value);
parameterSet.set(""String_Node_Str"",exactMatch);
break;
case AREA:
case LOCATION:
if (value == null || distance > 5000) {
throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
}
if (type == Type.LOCATION) {
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
if (fourSquareLocation != null) {
parameterSet.set(""String_Node_Str"",fourSquareLocation);
}
}
 else {
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
}
if (fourSquareLocation == null) {
parameterSet.set(""String_Node_Str"",lattitude);
parameterSet.set(""String_Node_Str"",longitude);
if (distance > 0) {
parameterSet.set(""String_Node_Str"",lattitude);
}
}
break;
case POPULAR:
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
break;
}
return this;
}","/** 
 * Adds a resource object to the request of the given type, which is always required
 * @param type the type of resource, all other params are optional dependent upon what this value is
 * @return this
 */
protected Instagram addResource(Type type,String value,float longitude,float lattitude,int distance,boolean exactMatch,String fourSquareLocation){
  ResourceParams parameterSet=newResourceParams();
switch (type) {
case USER:
    if (value == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  parameterSet.set(""String_Node_Str"",""String_Node_Str"");
parameterSet.set(""String_Node_Str"",value);
break;
case TAG:
if (value == null) {
throw new IllegalArgumentException(""String_Node_Str"");
}
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
parameterSet.set(""String_Node_Str"",value);
parameterSet.set(""String_Node_Str"",exactMatch);
break;
case AREA:
case LOCATION:
if (distance > 5000) {
throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
}
if (type == Type.LOCATION) {
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
if (fourSquareLocation != null) {
throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
}
}
 else {
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
}
if (fourSquareLocation == null) {
parameterSet.set(""String_Node_Str"",lattitude);
parameterSet.set(""String_Node_Str"",longitude);
if (distance > 0) {
parameterSet.set(""String_Node_Str"",distance);
}
}
break;
case POPULAR:
parameterSet.set(""String_Node_Str"",""String_Node_Str"");
break;
}
return this;
}"
44183,"/** 
 * The same as   {@link #byLocation(float,float,int)} but instead of using coordinates a foursquare location IDis provided
 * @param fourSquareLocation a valid foursquare location ID e.g.  5XfVJe
 * @deprecated Instagram has deprecated foursquare support since 20th April 2016
 * @return this
 */
public Instagram byFoursquareLocation(String fourSquareLocation) throws Exception {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * The same as   {@link #byLocation(float,float,int)} but instead of using coordinates a foursquare location IDis provided
 * @param fourSquareLocation a valid foursquare location ID e.g.  5XfVJe
 * @return this
 * @deprecated Instagram has deprecated foursquare support since 20th April 2016
 */
public Instagram byFoursquareLocation(String fourSquareLocation) throws Exception {
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
44184,"/** 
 * Retrieve VEDO tags for a given recording. For information on this endpoint see documentation page: http://dev.datasift.com/pylon/docs/api/pylon-api-endpoints/pylontags
 * @param recordingId A recording id. See {@link com.datasift.client.pylon.PylonRecording.PylonRecordingId}
 * @return vedo tags for the given filter
 */
public FutureData<PylonTags> tags(PylonRecordingId recordingId){
  URI uri=newParams().put(""String_Node_Str"",recordingId).forURL(config.newAPIEndpointURI(TAGS));
  FutureData<PylonTags> future=new FutureData<>();
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new PylonTags(),config)));
  performRequest(future,request);
  return future;
}","/** 
 * Retrieve VEDO tags for a given recording. For information on this endpoint see documentation page: http://dev.datasift.com/pylon/docs/api/pylon-api-endpoints/pylontags
 * @param recordingId A recording id. See {@link com.datasift.client.pylon.PylonRecording.PylonRecordingId}
 * @return vedo tags for the given filter
 */
public FutureData<PylonTags> tags(PylonRecordingId recordingId){
  URI uri=newParams().put(""String_Node_Str"",recordingId.id).forURL(config.newAPIEndpointURI(TAGS));
  FutureData<PylonTags> future=new FutureData<>();
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new PylonTags(),config)));
  performRequest(future,request);
  return future;
}"
44185,"public PylonQuery(String hash,PylonQueryParameters parameters){
  new PylonQuery(hash,parameters,null,null,null);
}","public PylonQuery(String hash,PylonQueryParameters parameters){
  this(hash,parameters,null,null,null);
}"
44186,"public PylonSampleRequest(String hash){
  new PylonSampleRequest(hash,null,null,null,null);
}","public PylonSampleRequest(String hash){
  this(hash,null,null,null,null);
}"
44187,"/** 
 * Update an existing identity with values
 * @param id     target to update
 * @param label  new label (may be null otherwise)
 * @param active new activity (may be null otherwise)
 * @param master new master (may be null otherwise)
 * @return the new updated Identity
 */
public FutureData<Identity> update(String id,String label,boolean active,boolean master){
  String activeStr=active ? ""String_Node_Str"" : ""String_Node_Str"";
  FutureData<Identity> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(IDENTITY + ""String_Node_Str"" + id));
  try {
    Request request=config.http().putJSON(uri,new PageReader(newRequestCallback(future,new Identity(),config))).setData(new NewIdentity(label,activeStr,master));
    performRequest(future,request);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
  }
  return future;
}","/** 
 * Update an existing identity with values
 * @param id     target to update
 * @param label  new label (may be null otherwise)
 * @param active new activity (may be null otherwise)
 * @param master new master (may be null otherwise)
 * @return the new updated Identity
 */
public FutureData<Identity> update(String id,String label,Boolean active,Boolean master){
  String activeStr=null;
  if (active != null) {
    activeStr=active ? ""String_Node_Str"" : ""String_Node_Str"";
  }
  FutureData<Identity> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(IDENTITY + ""String_Node_Str"" + id));
  try {
    Request request=config.http().putJSON(uri,new PageReader(newRequestCallback(future,new Identity(),config))).setData(new NewIdentity(label,activeStr,master));
    performRequest(future,request);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
  }
  return future;
}"
44188,"/** 
 * Update a token
 * @param identity identity to update a token inside
 * @param service service to update the token for
 * @param allowance new limit value
 * @return the updated Token
 */
public FutureData<Token> updateLimit(String identity,String service,Long allowance){
  if (identity == null || identity.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (service == null || service.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (allowance < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<Token> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(IDENTITY + ""String_Node_Str"" + identity+ ""String_Node_Str""+ service));
  try {
    Request request=config.http().putJSON(uri,new PageReader(newRequestCallback(future,new Token(),config))).setData(new NewLimitValue(allowance));
    performRequest(future,request);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
  }
  return future;
}","/** 
 * Update a token
 * @param identity identity to update a token inside
 * @param service service to update the token for
 * @param allowance new limit value
 * @return the updated Token
 */
public FutureData<Limit> updateLimit(String identity,String service,Long allowance){
  if (identity == null || identity.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (service == null || service.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (allowance < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<Limit> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(IDENTITY + ""String_Node_Str"" + identity+ ""String_Node_Str""+ service));
  try {
    Request request=config.http().putJSON(uri,new PageReader(newRequestCallback(future,new Limit(),config))).setData(new NewLimitValue(allowance));
    performRequest(future,request);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
  }
  return future;
}"
44189,"/** 
 * Fetch a token using it's ID and it's Identity's ID
 * @param identity the ID of the identity to query
 * @param tokenid  the ID of the token to fetch
 * @return the identity for the ID provided
 */
public FutureData<Token> getToken(String identity,String tokenid){
  FutureData<Token> future=new FutureData<>();
  URI uri=newParams().put(""String_Node_Str"",identity).forURL(config.newAPIEndpointURI(IDENTITY + ""String_Node_Str"" + identity+ ""String_Node_Str""+ tokenid));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new Token(),config)));
  performRequest(future,request);
  return future;
}","/** 
 * Fetch a token using it's service ID and it's Identity's ID
 * @param identity the ID of the identity to query
 * @param service  the service of the token to fetch
 * @return the identity for the ID provided
 */
public FutureData<Token> getToken(String identity,String service){
  FutureData<Token> future=new FutureData<>();
  URI uri=newParams().put(""String_Node_Str"",identity).forURL(config.newAPIEndpointURI(IDENTITY + ""String_Node_Str"" + identity+ ""String_Node_Str""+ service));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new Token(),config)));
  performRequest(future,request);
  return future;
}"
44190,"public IdentityStatus status(){
  return status;
}","public String status(){
  return status;
}"
44191,"private static void executeIdentity(DataSiftClient dataSift,String endpoint,HashMap<String,String> params) throws IOException {
switch (endpoint) {
case ""String_Node_Str"":
    String label=getOrDefault(params,""String_Node_Str"",null);
  int page=Integer.parseInt(getOrDefault(params,""String_Node_Str"",""String_Node_Str""));
int perpage=Integer.parseInt(getOrDefault(params,""String_Node_Str"",""String_Node_Str""));
printResponse(dataSift.account().list(label,page,perpage).sync());
break;
case ""String_Node_Str"":
printResponse(dataSift.account().get(params.get(""String_Node_Str"")).sync());
break;
case ""String_Node_Str"":
String createlabel=params.get(""String_Node_Str"");
Boolean active=getOrDefault(params,""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
Boolean master=getOrDefault(params,""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
printResponse(dataSift.account().create(createlabel,active,master).sync());
break;
case ""String_Node_Str"":
String targetid=params.get(""String_Node_Str"");
String updatelabel=getOrDefault(params,""String_Node_Str"",null);
String updateactivitystring=getOrDefault(params,""String_Node_Str"",null);
Boolean updateactivity=null;
if (updateactivitystring.equals(""String_Node_Str"")) {
updateactivity=true;
}
 else if (updateactivitystring.equals(""String_Node_Str"")) {
updateactivity=false;
}
String updatemasterstring=getOrDefault(params,""String_Node_Str"",null);
Boolean updatemaster=null;
if (updatemasterstring.equals(""String_Node_Str"")) {
updatemaster=true;
}
 else if (updatemasterstring.equals(""String_Node_Str"")) {
updatemaster=false;
}
printResponse(dataSift.account().update(targetid,updatelabel,updateactivity,updatemaster).sync());
break;
case ""String_Node_Str"":
printResponse(dataSift.account().delete(params.get(""String_Node_Str"")).sync());
break;
}
}","private static void executeIdentity(DataSiftClient dataSift,String endpoint,HashMap<String,String> params) throws IOException {
switch (endpoint) {
case ""String_Node_Str"":
    String label=getOrDefault(params,""String_Node_Str"",null);
  int page=Integer.parseInt(getOrDefault(params,""String_Node_Str"",""String_Node_Str""));
int perpage=Integer.parseInt(getOrDefault(params,""String_Node_Str"",""String_Node_Str""));
printResponse(dataSift.account().list(label,page,perpage).sync());
break;
case ""String_Node_Str"":
printResponse(dataSift.account().get(params.get(""String_Node_Str"")).sync());
break;
case ""String_Node_Str"":
String createlabel=params.get(""String_Node_Str"");
Boolean active=getOrDefault(params,""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
Boolean master=getOrDefault(params,""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
printResponse(dataSift.account().create(createlabel,active,master).sync());
break;
case ""String_Node_Str"":
String targetid=params.get(""String_Node_Str"");
String updatelabel=getOrDefault(params,""String_Node_Str"",null);
String updateactivitystring=getOrDefault(params,""String_Node_Str"",null);
Boolean updateactivity=null;
if (updateactivitystring != null) {
if (updateactivitystring.equals(""String_Node_Str"")) {
updateactivity=true;
}
 else if (updateactivitystring.equals(""String_Node_Str"")) {
updateactivity=false;
}
}
String updatemasterstring=getOrDefault(params,""String_Node_Str"",null);
Boolean updatemaster=null;
if (updatemasterstring != null) {
if (updatemasterstring.equals(""String_Node_Str"")) {
updatemaster=true;
}
 else if (updatemasterstring.equals(""String_Node_Str"")) {
updatemaster=false;
}
}
printResponse(dataSift.account().update(targetid,updatelabel,updateactivity,updatemaster).sync());
break;
case ""String_Node_Str"":
printResponse(dataSift.account().delete(params.get(""String_Node_Str"")).sync());
break;
}
}"
44192,"public void put(String currentSwitch,String name,String value){
  if (currentSwitch.indexOf(""String_Node_Str"") == 0) {
    currentSwitch=currentSwitch.substring(2);
  }
  if (currentSwitch.indexOf(""String_Node_Str"") == 0) {
    currentSwitch=currentSwitch.substring(1);
  }
  Object val=res.get(currentSwitch);
  String shortForm=shortForm(currentSwitch);
  if (val == null && shortForm != null) {
    if (value != null) {
      val=new HashMap<>();
    }
    res.put(shortForm,val);
  }
  if (value == null) {
    res.put(currentSwitch,name);
  }
 else {
    if (val != null) {
      ((HashMap<String,String>)val).put(name,value);
    }
  }
}","public void put(String currentSwitch,String name,String value){
  if (currentSwitch.indexOf(""String_Node_Str"") == 0) {
    currentSwitch=currentSwitch.substring(2);
  }
  if (currentSwitch.indexOf(""String_Node_Str"") == 0) {
    currentSwitch=currentSwitch.substring(1);
  }
  Object val=res.get(currentSwitch);
  String shortForm=shortForm(currentSwitch);
  if (val == null && shortForm != null) {
    if (value != null) {
      val=new HashMap<>();
    }
    res.put(shortForm,val);
  }
  if (value == null) {
    if (val instanceof Map) {
      ((HashMap<String,String>)val).put(name,value);
    }
 else {
      res.put(currentSwitch,name);
    }
  }
 else {
    if (val != null) {
      ((HashMap<String,String>)val).put(name,value);
    }
  }
}"
44193,"protected <T extends DataSiftResult>Function2<String,io.higgs.http.client.Response> newRequestCallback(final FutureData<T> future,final T instance,final DataSiftConfig config){
  return new Function2<String,io.higgs.http.client.Response>(){
    public void apply(    String s,    io.higgs.http.client.Response response){
      T result=instance;
      if (response.getStatus() != null && HttpResponseStatus.NO_CONTENT.equals(response.getStatus())) {
        result.successful();
      }
 else       if (response.hasFailed()) {
        result.failed(response.failureCause());
        if (config.isAllowedToRaiseExceptions()) {
          throw new DataSiftException(""String_Node_Str"",response.failureCause(),response);
        }
      }
 else {
        try {
          result=(T)DataSiftClient.MAPPER.readValue(s,instance.getClass());
        }
 catch (        IOException e) {
          result.failed(e);
          if (config.isAllowedToRaiseExceptions()) {
            throw new JsonParsingException(""String_Node_Str"",e,response);
          }
        }
      }
      result.setResponse(new com.datasift.client.Response(s,response));
      if (config.isAllowedToRaiseExceptions() && response.getStatus().code() == 401) {
        throw new AuthException(""String_Node_Str"",response);
      }
      if (config.isAllowedToRaiseExceptions() && !result.isSuccessful()) {
        throw new DataSiftException(result.getError(),result.failureCause());
      }
      future.received(result);
    }
  }
;
}","protected <T extends DataSiftResult>Function2<String,io.higgs.http.client.Response> newRequestCallback(final FutureData<T> future,final T instance,final DataSiftConfig config){
  return new Function2<String,io.higgs.http.client.Response>(){
    public void apply(    String s,    io.higgs.http.client.Response response){
      T result=instance;
      if (response.getStatus() != null && HttpResponseStatus.NO_CONTENT.equals(response.getStatus())) {
        result.successful();
      }
 else       if (response.hasFailed()) {
        result.failed(response.failureCause());
        throw new DataSiftException(""String_Node_Str"",response.failureCause(),response);
      }
 else {
        try {
          result=(T)DataSiftClient.MAPPER.readValue(s,instance.getClass());
        }
 catch (        IOException e) {
          result.failed(e);
          throw new JsonParsingException(""String_Node_Str"",e,response);
        }
      }
      result.setResponse(new com.datasift.client.Response(s,response));
      if (response.getStatus().code() == 401) {
        throw new AuthException(""String_Node_Str"",response);
      }
      if (!result.isSuccessful()) {
        throw new DataSiftException(result.getError(),result.failureCause());
      }
      future.received(result);
    }
  }
;
}"
44194,"/** 
 * @param config a configuration which should be used for making API requests
 */
public DataSiftClient(DataSiftConfig config){
  super(config);
  configureMapper();
  this.config=config;
  this.historics=new DataSiftHistorics(config);
  this.source=new DataSiftManagedSource(config);
  this.preview=new DataSiftPreview(config);
  this.push=new DataSiftPush(config);
  this.liveStream=new StreamingData(config);
}","/** 
 * @param config a configuration which should be used for making API requests
 */
public DataSiftClient(DataSiftConfig config){
  super(config);
  configureMapper();
  this.config=config;
  this.historics=new DataSiftHistorics(config);
  this.source=new DataSiftManagedSource(config);
  this.preview=new DataSiftPreview(config);
  this.push=new DataSiftPush(config);
  this.liveStream=new StreamingData(config);
  DependencyProvider.global().add(config);
}"
44195,"public void apply(Stream stream){
  URI uri=newParams().put(""String_Node_Str"",stream.hash()).forURL(config.newAPIEndpointURI(DPU));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,dpu,config)));
  applyConfig(request).execute();
}","public void apply(Stream stream){
  URI uri=newParams().put(""String_Node_Str"",stream.hash()).forURL(config.newAPIEndpointURI(DPU));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,dpu,config)));
  performRequest(future,request);
}"
44196,"/** 
 * @param timePeriod A time period during which the usage information should be broken down
 * @return a break down over the time period specified
 */
public FutureData<Usage> usage(Usage.Period timePeriod){
  FutureData<Usage> future=new FutureData<Usage>();
  String period;
switch (timePeriod) {
case HOUR:
    period=""String_Node_Str"";
  break;
case CURRENT:
period=""String_Node_Str"";
break;
case DAY:
default :
period=""String_Node_Str"";
}
URI uri=newParams().put(""String_Node_Str"",period).forURL(config.newAPIEndpointURI(USAGE));
Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new Usage(),config)));
applyConfig(request).execute();
return future;
}","/** 
 * @param timePeriod A time period during which the usage information should be broken down
 * @return a break down over the time period specified
 */
public FutureData<Usage> usage(Usage.Period timePeriod){
  FutureData<Usage> future=new FutureData<Usage>();
  String period;
switch (timePeriod) {
case HOUR:
    period=""String_Node_Str"";
  break;
case CURRENT:
period=""String_Node_Str"";
break;
case DAY:
default :
period=""String_Node_Str"";
}
URI uri=newParams().put(""String_Node_Str"",period).forURL(config.newAPIEndpointURI(USAGE));
Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new Usage(),config)));
performRequest(future,request);
return future;
}"
44197,"public FutureData<Dpu> dpu(FutureData<Stream> streamFuture){
  final FutureData<Dpu> future=new FutureData<Dpu>();
  final Dpu dpu=new Dpu();
  final FutureResponse<Stream> response=new FutureResponse<Stream>(){
    public void apply(    Stream stream){
      URI uri=newParams().put(""String_Node_Str"",stream.hash()).forURL(config.newAPIEndpointURI(DPU));
      Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,dpu,config)));
      applyConfig(request).execute();
    }
  }
;
  unwrapFuture(streamFuture,future,dpu,response);
  return future;
}","public FutureData<Dpu> dpu(FutureData<Stream> streamFuture){
  final FutureData<Dpu> future=new FutureData<Dpu>();
  final Dpu dpu=new Dpu();
  final FutureResponse<Stream> response=new FutureResponse<Stream>(){
    public void apply(    Stream stream){
      URI uri=newParams().put(""String_Node_Str"",stream.hash()).forURL(config.newAPIEndpointURI(DPU));
      Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,dpu,config)));
      performRequest(future,request);
    }
  }
;
  unwrapFuture(streamFuture,future,dpu,response);
  return future;
}"
44198,"/** 
 * Compile a CSDL string to a stream hash to which you can later subscribe and receive interactions from
 * @param csdl the CSDL to compile
 * @return a stream object representing the DataSift compiled CSDL, use {@link com.datasift.client.core.Stream#hash()}to list the hash for the compiled CSDL
 */
public FutureData<Stream> compile(String csdl){
  FutureData<Stream> future=new FutureData<Stream>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(COMPILE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new Stream(),config))).form(""String_Node_Str"",csdl);
  applyConfig(request).execute();
  return future;
}","/** 
 * Compile a CSDL string to a stream hash to which you can later subscribe and receive interactions from
 * @param csdl the CSDL to compile
 * @return a stream object representing the DataSift compiled CSDL, use {@link com.datasift.client.core.Stream#hash()}to list the hash for the compiled CSDL
 */
public FutureData<Stream> compile(String csdl){
  FutureData<Stream> future=new FutureData<Stream>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(COMPILE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new Stream(),config))).form(""String_Node_Str"",csdl);
  performRequest(future,request);
  return future;
}"
44199,"/** 
 * @return The balance on the account being used to make API calls
 */
public FutureData<Balance> balance(){
  FutureData<Balance> future=new FutureData<Balance>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(BALANCE));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new Balance(),config)));
  applyConfig(request).execute();
  return future;
}","/** 
 * @return The balance on the account being used to make API calls
 */
public FutureData<Balance> balance(){
  FutureData<Balance> future=new FutureData<Balance>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(BALANCE));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new Balance(),config)));
  performRequest(future,request);
  return future;
}"
44200,"/** 
 * Validate the given CSDL string against the DataSift API
 * @param csdl the CSDL to validate
 * @return the results of the validation, use {@link com.datasift.client.core.Validation#isSuccessful()} to check ifvalidation was successful or not
 */
public FutureData<Validation> validate(String csdl){
  FutureData<Validation> future=new FutureData<Validation>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(VALIDATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new Validation(),config))).form(""String_Node_Str"",csdl);
  applyConfig(request).execute();
  return future;
}","/** 
 * Validate the given CSDL string against the DataSift API
 * @param csdl the CSDL to validate
 * @return the results of the validation, use {@link com.datasift.client.core.Validation#isSuccessful()} to check ifvalidation was successful or not
 */
public FutureData<Validation> validate(String csdl){
  FutureData<Validation> future=new FutureData<Validation>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(VALIDATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new Validation(),config))).form(""String_Node_Str"",csdl);
  performRequest(future,request);
  return future;
}"
44201,"/** 
 * Forces the client to wait until a response is received before returning
 * @return a result instance - if an interrupt exception is thrown it is possible that a response isn't availableyet the user must check to ensure null isn't returned
 */
public T sync(){
  if (data != null) {
    return data;
  }
synchronized (this) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      return data;
    }
  }
  return data;
}","/** 
 * Forces the client to wait until a response is received before returning
 * @return a result instance - if an interrupt exception is thrown it is possible that a response isn't availableyet the user must check to ensure null isn't returned
 */
public T sync(){
  if (data != null) {
    return data;
  }
synchronized (this) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      if (interruptCause != null) {
        if (interruptCause instanceof DataSiftException) {
          throw (DataSiftException)interruptCause;
        }
 else {
          throw new DataSiftException(""String_Node_Str"",interruptCause);
        }
      }
      return data;
    }
  }
  return data;
}"
44202,"public FutureData<PreparedHistoricsQuery> prepare(String hash,long start,long end,String name,int sample,String... sources){
  FutureData<PreparedHistoricsQuery> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(PREPARE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new PreparedHistoricsQuery(),config))).form(""String_Node_Str"",hash).form(""String_Node_Str"",start).form(""String_Node_Str"",end).form(""String_Node_Str"",name);
  if (sample > 0) {
    request.form(""String_Node_Str"",sample);
  }
  if (sources == null || sources.length == 0) {
    sources=new String[]{""String_Node_Str""};
  }
  StringBuilder b=new StringBuilder();
  for (  String source : sources) {
    b.append(source).append(""String_Node_Str"");
  }
  request.form(""String_Node_Str"",b.toString().substring(0,b.length() - 1));
  applyConfig(request).execute();
  return future;
}","public FutureData<PreparedHistoricsQuery> prepare(String hash,long start,long end,String name,int sample,String... sources){
  FutureData<PreparedHistoricsQuery> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(PREPARE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new PreparedHistoricsQuery(),config))).form(""String_Node_Str"",hash).form(""String_Node_Str"",start).form(""String_Node_Str"",end).form(""String_Node_Str"",name);
  if (sample > 0) {
    request.form(""String_Node_Str"",sample);
  }
  if (sources == null || sources.length == 0) {
    sources=new String[]{""String_Node_Str""};
  }
  StringBuilder b=new StringBuilder();
  for (  String source : sources) {
    b.append(source).append(""String_Node_Str"");
  }
  request.form(""String_Node_Str"",b.toString().substring(0,b.length() - 1));
  performRequest(future,request);
  return future;
}"
44203,"/** 
 * Stop a given historics query
 * @param id     the historics ID
 * @param reason an optional ID
 * @return the results of calling the stop API
 */
public FutureData<DataSiftResult> stop(String id,String reason){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(STOP));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  if (reason != null) {
    request.form(""String_Node_Str"",reason);
  }
  applyConfig(request).execute();
  return future;
}","/** 
 * Stop a given historics query
 * @param id     the historics ID
 * @param reason an optional ID
 * @return the results of calling the stop API
 */
public FutureData<DataSiftResult> stop(String id,String reason){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(STOP));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  if (reason != null) {
    request.form(""String_Node_Str"",reason);
  }
  performRequest(future,request);
  return future;
}"
44204,"/** 
 * Get detailed information about a historics query
 * @param id           the id of the historics to list
 * @param withEstimate if true then an estimated completion time is include in the response
 * @return a historics query
 */
public FutureData<HistoricsQuery> get(String id,boolean withEstimate){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<HistoricsQuery> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(GET));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsQuery(),config))).form(""String_Node_Str"",id).form(""String_Node_Str"",withEstimate ? 1 : 0);
  applyConfig(request).execute();
  return future;
}","/** 
 * Get detailed information about a historics query
 * @param id           the id of the historics to list
 * @param withEstimate if true then an estimated completion time is include in the response
 * @return a historics query
 */
public FutureData<HistoricsQuery> get(String id,boolean withEstimate){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<HistoricsQuery> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(GET));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsQuery(),config))).form(""String_Node_Str"",id).form(""String_Node_Str"",withEstimate ? 1 : 0);
  performRequest(future,request);
  return future;
}"
44205,"protected FutureData<DataSiftResult> start(String id,FutureData<DataSiftResult> f){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=f != null ? f : new FutureData<DataSiftResult>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(START));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  applyConfig(request).execute();
  return future;
}","protected FutureData<DataSiftResult> start(String id,FutureData<DataSiftResult> f){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=f != null ? f : new FutureData<DataSiftResult>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(START));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  performRequest(future,request);
  return future;
}"
44206,"/** 
 * Update the name of a historics query
 * @param id   the ID of the historics to update
 * @param name the new name for the historics
 * @return a result that can be used to check the success or failure of the request
 */
public FutureData<DataSiftResult> update(String id,String name){
  if (id == null || name == null || id.isEmpty() || name.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(UPDATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id).form(""String_Node_Str"",name);
  applyConfig(request).execute();
  return future;
}","/** 
 * Update the name of a historics query
 * @param id   the ID of the historics to update
 * @param name the new name for the historics
 * @return a result that can be used to check the success or failure of the request
 */
public FutureData<DataSiftResult> update(String id,String name){
  if (id == null || name == null || id.isEmpty() || name.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(UPDATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id).form(""String_Node_Str"",name);
  performRequest(future,request);
  return future;
}"
44207,"/** 
 * Retrieve a list of   {@link HistoricsQuery} objects
 * @param max          max number of objects to list
 * @param page         a page number
 * @param withEstimate if true, include an estimated completion time
 * @return an iterable list of {@link HistoricsQuery}s
 */
public FutureData<HistoricsQueryList> list(int max,int page,boolean withEstimate){
  FutureData<HistoricsQueryList> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(GET));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsQueryList(),config))).form(""String_Node_Str"",withEstimate ? 1 : 0);
  if (max > 0) {
    request.form(""String_Node_Str"",max);
  }
  if (page > 0) {
    request.form(""String_Node_Str"",page);
  }
  applyConfig(request).execute();
  return future;
}","/** 
 * Retrieve a list of   {@link HistoricsQuery} objects
 * @param max          max number of objects to list
 * @param page         a page number
 * @param withEstimate if true, include an estimated completion time
 * @return an iterable list of {@link HistoricsQuery}s
 */
public FutureData<HistoricsQueryList> list(int max,int page,boolean withEstimate){
  FutureData<HistoricsQueryList> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(GET));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsQueryList(),config))).form(""String_Node_Str"",withEstimate ? 1 : 0);
  if (max > 0) {
    request.form(""String_Node_Str"",max);
  }
  if (page > 0) {
    request.form(""String_Node_Str"",page);
  }
  performRequest(future,request);
  return future;
}"
44208,"/** 
 * Delete the historic with the given ID
 * @param id an historic ID
 * @return a result indicating whether the request was successful or not
 */
public FutureData<DataSiftResult> delete(String id){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(DELETE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  applyConfig(request).execute();
  return future;
}","/** 
 * Delete the historic with the given ID
 * @param id an historic ID
 * @return a result indicating whether the request was successful or not
 */
public FutureData<DataSiftResult> delete(String id){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(DELETE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  performRequest(future,request);
  return future;
}"
44209,"/** 
 * Check the status of data availability in our archive for the given time period
 * @param start   the dat from which the archive should be checked
 * @param end     the up to which the archive should be checked
 * @param sources an optional list of data sources that should be queried, e.g. [facebook,twitter,...]
 * @return a report of the current status/availability of data for the given time period
 */
public FutureData<HistoricsStatus> status(DateTime start,DateTime end,String... sources){
  FutureData<HistoricsStatus> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(STATUS));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsStatus(),config))).form(""String_Node_Str"",MILLISECONDS.toSeconds(start.getMillis())).form(""String_Node_Str"",MILLISECONDS.toSeconds(end.getMillis()));
  if (sources != null && sources.length > 0) {
    StringBuilder b=new StringBuilder();
    for (    String source : sources) {
      b.append(source).append(""String_Node_Str"");
    }
    request.form(""String_Node_Str"",b.toString().substring(0,b.length() - 1));
  }
  applyConfig(request).execute();
  return future;
}","/** 
 * Check the status of data availability in our archive for the given time period
 * @param start   the dat from which the archive should be checked
 * @param end     the up to which the archive should be checked
 * @param sources an optional list of data sources that should be queried, e.g. [facebook,twitter,...]
 * @return a report of the current status/availability of data for the given time period
 */
public FutureData<HistoricsStatus> status(DateTime start,DateTime end,String... sources){
  FutureData<HistoricsStatus> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(STATUS));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsStatus(),config))).form(""String_Node_Str"",MILLISECONDS.toSeconds(start.getMillis())).form(""String_Node_Str"",MILLISECONDS.toSeconds(end.getMillis()));
  if (sources != null && sources.length > 0) {
    StringBuilder b=new StringBuilder();
    for (    String source : sources) {
      b.append(source).append(""String_Node_Str"");
    }
    request.form(""String_Node_Str"",b.toString().substring(0,b.length() - 1));
  }
  performRequest(future,request);
  return future;
}"
44210,"/** 
 * @param id the ID of the managed source to stop
 * @return this
 */
public FutureData<ManagedSource> stop(String id){
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<ManagedSource> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(STOP));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new ManagedSource(),config))).form(""String_Node_Str"",id);
  applyConfig(request).execute();
  return future;
}","/** 
 * @param id the ID of the managed source to stop
 * @return this
 */
public FutureData<ManagedSource> stop(String id){
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<ManagedSource> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(STOP));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new ManagedSource(),config))).form(""String_Node_Str"",id);
  performRequest(future,request);
  return future;
}"
44211,"public void apply(ManagedSource data){
  URI uri=newParams().forURL(config.newAPIEndpointURI(START));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,data,config))).form(""String_Node_Str"",data.getId());
  applyConfig(request).execute();
}","public void apply(ManagedSource data){
  URI uri=newParams().forURL(config.newAPIEndpointURI(START));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,data,config))).form(""String_Node_Str"",data.getId());
  performRequest(future,request);
}"
44212,"public FutureData<ManagedSourceLog> log(String id,int page,int perPage){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<ManagedSourceLog> future=new FutureData<>();
  ParamBuilder b=newParams();
  if (page > 0) {
    b.put(""String_Node_Str"",page);
  }
  if (perPage > 0) {
    b.put(""String_Node_Str"",perPage);
  }
  URI uri=b.forURL(config.newAPIEndpointURI(LOG));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new ManagedSourceLog(),config)));
  applyConfig(request).execute();
  return future;
}","public FutureData<ManagedSourceLog> log(String id,int page,int perPage){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<ManagedSourceLog> future=new FutureData<>();
  ParamBuilder b=newParams();
  if (page > 0) {
    b.put(""String_Node_Str"",page);
  }
  if (perPage > 0) {
    b.put(""String_Node_Str"",perPage);
  }
  URI uri=b.forURL(config.newAPIEndpointURI(LOG));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new ManagedSourceLog(),config)));
  performRequest(future,request);
  return future;
}"
44213,"/** 
 * @param id the ID of the managed source to fetch
 * @return the managed source for the ID provided
 */
public FutureData<ManagedSource> get(String id){
  FutureData<ManagedSource> future=new FutureData<>();
  URI uri=newParams().put(""String_Node_Str"",id).forURL(config.newAPIEndpointURI(GET));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new ManagedSource(),config)));
  applyConfig(request).execute();
  return future;
}","/** 
 * @param id the ID of the managed source to fetch
 * @return the managed source for the ID provided
 */
public FutureData<ManagedSource> get(String id){
  FutureData<ManagedSource> future=new FutureData<>();
  URI uri=newParams().put(""String_Node_Str"",id).forURL(config.newAPIEndpointURI(GET));
  Request request=config.http().GET(uri,new PageReader(newRequestCallback(future,new ManagedSource(),config)));
  performRequest(future,request);
  return future;
}"
44214,"/** 
 * @param source start a configured managed source
 * @return this
 */
public FutureData<DataSiftResult> start(final FutureData<ManagedSource> source){
  if (source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final FutureData<DataSiftResult> future=new FutureData<>();
  final DataSiftResult res=new BaseDataSiftResult();
  unwrapFuture(source,future,res,new FutureResponse<ManagedSource>(){
    public void apply(    ManagedSource data){
      URI uri=newParams().forURL(config.newAPIEndpointURI(START));
      POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,data,config))).form(""String_Node_Str"",data.getId());
      applyConfig(request).execute();
    }
  }
);
  return future;
}","/** 
 * @param source start a configured managed source
 * @return this
 */
public FutureData<DataSiftResult> start(final FutureData<ManagedSource> source){
  if (source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final FutureData<DataSiftResult> future=new FutureData<>();
  final DataSiftResult res=new BaseDataSiftResult();
  unwrapFuture(source,future,res,new FutureResponse<ManagedSource>(){
    public void apply(    ManagedSource data){
      URI uri=newParams().forURL(config.newAPIEndpointURI(START));
      POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,data,config))).form(""String_Node_Str"",data.getId());
      performRequest(future,request);
    }
  }
);
  return future;
}"
44215,"protected <T extends DataSource>FutureData<ManagedSource> updateOrCreate(String name,T source,String id){
  if (name == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<ManagedSource> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(id == null ? CREATE : UPDATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new ManagedSource(),config))).form(""String_Node_Str"",source.type().value()).form(""String_Node_Str"",name);
  if (source.hasParams()) {
    request.form(""String_Node_Str"",source.getParametersAsJSON());
  }
  if (source.hasResources()) {
    request.form(""String_Node_Str"",source.getResourcesAsJSON());
  }
  if (source.hasAuth()) {
    request.form(""String_Node_Str"",source.getAuthAsJSON());
  }
  applyConfig(request).execute();
  return future;
}","protected <T extends DataSource>FutureData<ManagedSource> updateOrCreate(String name,T source,String id){
  if (name == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<ManagedSource> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(id == null ? CREATE : UPDATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new ManagedSource(),config))).form(""String_Node_Str"",source.type().value()).form(""String_Node_Str"",name);
  if (source.hasParams()) {
    request.form(""String_Node_Str"",source.getParametersAsJSON());
  }
  if (source.hasResources()) {
    request.form(""String_Node_Str"",source.getResourcesAsJSON());
  }
  if (source.hasAuth()) {
    request.form(""String_Node_Str"",source.getAuthAsJSON());
  }
  performRequest(future,request);
  return future;
}"
44216,"/** 
 * @param id the ID of the managed source to delete
 * @return this
 */
public FutureData<DataSiftResult> delete(String id){
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(DELETE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  applyConfig(request).execute();
  return future;
}","/** 
 * @param id the ID of the managed source to delete
 * @return this
 */
public FutureData<DataSiftResult> delete(String id){
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<DataSiftResult> future=new FutureData<>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(DELETE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new BaseDataSiftResult(),config))).form(""String_Node_Str"",id);
  performRequest(future,request);
  return future;
}"
44217,"/** 
 * Get the data that's available for the given preview
 * @param preview the historics preview to fetch
 * @return the data available
 */
public FutureData<HistoricsPreviewData> get(HistoricsPreview preview){
  if (preview == null || preview.id() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<HistoricsPreviewData> future=new FutureData<HistoricsPreviewData>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(GET));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsPreviewData(),config))).form(""String_Node_Str"",preview.id());
  applyConfig(request).execute();
  return future;
}","/** 
 * Get the data that's available for the given preview
 * @param preview the historics preview to fetch
 * @return the data available
 */
public FutureData<HistoricsPreviewData> get(HistoricsPreview preview){
  if (preview == null || preview.id() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<HistoricsPreviewData> future=new FutureData<HistoricsPreviewData>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(GET));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsPreviewData(),config))).form(""String_Node_Str"",preview.id());
  performRequest(future,request);
  return future;
}"
44218,"/** 
 * Create a historic preview for the given stream within the given time frame, using the set of parameters provided
 * @param start      a timestamp of when to start the preview from
 * @param end        optionally when the preview ends -  If not specified, i.e. set to a value less than 1,defaults to the earliest out of start + 24 hours or now - 1 hour.
 * @param stream     the stream/filter to create the preview for
 * @param parameters A list of at least one but no more than 20 Historics Preview parameters e.g.  target,analysis,argument  see http://dev.datasift.com/docs/api/1/previewcreate for documentation of available parameters
 * @return the preview created
 */
public FutureData<HistoricsPreview> create(long start,long end,Stream stream,String[] parameters){
  if (stream == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (parameters == null || parameters.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (parameters.length > 20) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<HistoricsPreview> future=new FutureData<HistoricsPreview>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(CREATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsPreview(),config))).form(""String_Node_Str"",start).form(""String_Node_Str"",stream.hash());
  StringBuilder b=new StringBuilder();
  for (  String p : parameters) {
    b.append(p).append(',');
  }
  request.form(""String_Node_Str"",b.toString().substring(0,b.length() - 1));
  if (end > 0) {
    request.form(""String_Node_Str"",end);
  }
  applyConfig(request).execute();
  return future;
}","/** 
 * Create a historic preview for the given stream within the given time frame, using the set of parameters provided
 * @param start      a timestamp of when to start the preview from
 * @param end        optionally when the preview ends -  If not specified, i.e. set to a value less than 1,defaults to the earliest out of start + 24 hours or now - 1 hour.
 * @param stream     the stream/filter to create the preview for
 * @param parameters A list of at least one but no more than 20 Historics Preview parameters e.g.  target,analysis,argument  see http://dev.datasift.com/docs/api/1/previewcreate for documentation of available parameters
 * @return the preview created
 */
public FutureData<HistoricsPreview> create(long start,long end,Stream stream,String[] parameters){
  if (stream == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (parameters == null || parameters.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (parameters.length > 20) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  FutureData<HistoricsPreview> future=new FutureData<HistoricsPreview>();
  URI uri=newParams().forURL(config.newAPIEndpointURI(CREATE));
  POST request=config.http().POST(uri,new PageReader(newRequestCallback(future,new HistoricsPreview(),config))).form(""String_Node_Str"",start).form(""String_Node_Str"",stream.hash());
  StringBuilder b=new StringBuilder();
  for (  String p : parameters) {
    b.append(p).append(',');
  }
  request.form(""String_Node_Str"",b.toString().substring(0,b.length() - 1));
  if (end > 0) {
    request.form(""String_Node_Str"",end);
  }
  performRequest(future,request);
  return future;
}"
44219,"/** 
 * Populate this object from a JSONObject object.
 * @param res
 * @throws EAPIError
 */
protected void init(JSONObject res) throws EInvalidData {
  try {
    _playback_id=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _hash=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _name=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _start=new Date(res.getLong(""String_Node_Str"") * 1000);
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _end=new Date(res.getLong(""String_Node_Str"") * 1000);
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _status=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _progress=res.getInt(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _created_at=new Date(res.getLong(""String_Node_Str"") * 1000);
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _sources.clear();
    JSONArray data=res.getJSONArray(""String_Node_Str"");
    for (int i=0; i < data.length(); i++) {
      _sources.add(data.getString(i));
    }
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _sample=res.getDouble(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _volume_info.clear();
    JSONObject volume_info=res.getJSONObject(""String_Node_Str"");
    Iterator<?> volume_info_iterator=volume_info.keys();
    while (volume_info_iterator.hasNext()) {
      String key=(String)volume_info_iterator.next();
      try {
        _volume_info.put(key,volume_info.getInt(key));
      }
 catch (      JSONException e) {
        throw new EInvalidData(""String_Node_Str"");
      }
    }
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  _deleted=_status.equals(""String_Node_Str"");
}","/** 
 * Populate this object from a JSONObject object.
 * @param res
 * @throws EAPIError
 */
protected void init(JSONObject res) throws EInvalidData {
  try {
    _playback_id=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _hash=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _name=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _start=new Date(res.getLong(""String_Node_Str"") * 1000);
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _end=new Date(res.getLong(""String_Node_Str"") * 1000);
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _status=res.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _progress=res.getInt(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _created_at=new Date(res.getLong(""String_Node_Str"") * 1000);
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _sources.clear();
    JSONArray data=res.getJSONArray(""String_Node_Str"");
    for (int i=0; i < data.length(); i++) {
      _sources.add(data.getString(i));
    }
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  try {
    _sample=res.getDouble(""String_Node_Str"");
  }
 catch (  JSONException e) {
    throw new EInvalidData(""String_Node_Str"");
  }
  _deleted=_status.equals(""String_Node_Str"");
}"
44220,"public void testGetHistoric(){
  String playback_id=""String_Node_Str"";
  String definition_id=""String_Node_Str"";
  String name=""String_Node_Str"";
  long start=1329217703L;
  long end=1329221303L;
  long created_at=1334790000L;
  String status=""String_Node_Str"";
  int progress=45;
  double sample=42.0;
  String source1=""String_Node_Str"";
  String source2=""String_Node_Str"";
  String volume_info_type1=""String_Node_Str"";
  int volume_info_num1=123;
  String volume_info_type2=""String_Node_Str"";
  int volume_info_num2=456;
  api_client.setResponse(""String_Node_Str"" + playback_id + ""String_Node_Str""+ definition_id+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(start)+ ""String_Node_Str""+ String.valueOf(end)+ ""String_Node_Str""+ String.valueOf(created_at)+ ""String_Node_Str""+ ""String_Node_Str""+ status+ ""String_Node_Str""+ String.valueOf(progress)+ ""String_Node_Str""+ source1+ ""String_Node_Str""+ source2+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(sample)+ ""String_Node_Str""+ volume_info_type1+ ""String_Node_Str""+ String.valueOf(volume_info_num1)+ ""String_Node_Str""+ ""String_Node_Str""+ volume_info_type2+ ""String_Node_Str""+ String.valueOf(volume_info_num2)+ ""String_Node_Str"",200);
  try {
    Historic h=user.getHistoric(DataForTests.historic_playback_id);
    assertEquals(""String_Node_Str"",playback_id,h.getHash());
    assertEquals(""String_Node_Str"",definition_id,h.getStreamHash());
    assertEquals(""String_Node_Str"",name,h.getName());
    assertEquals(""String_Node_Str"",start,h.getStartDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",end,h.getEndDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",status,h.getStatus());
    assertEquals(""String_Node_Str"",progress,h.getProgress());
    assertEquals(""String_Node_Str"",sample,h.getSample());
    ArrayList<String> sources=h.getSources();
    assertEquals(""String_Node_Str"",2,sources.size());
    assertTrue(""String_Node_Str"",sources.contains(source1));
    assertTrue(""String_Node_Str"",sources.contains(source2));
    HashMap<String,Integer> volume_info=h.getVolumeInfo();
    assertEquals(""String_Node_Str"",2,volume_info.size());
    assertTrue(""String_Node_Str"",volume_info.containsKey(volume_info_type1));
    assertTrue(""String_Node_Str"",volume_info.containsKey(volume_info_type2));
    assertEquals(""String_Node_Str"",volume_info_num1,volume_info.get(volume_info_type1).intValue());
    assertEquals(""String_Node_Str"",volume_info_num2,volume_info.get(volume_info_type2).intValue());
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAPIError e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void testGetHistoric(){
  String playback_id=""String_Node_Str"";
  String definition_id=""String_Node_Str"";
  String name=""String_Node_Str"";
  long start=1329217703L;
  long end=1329221303L;
  long created_at=1334790000L;
  String status=""String_Node_Str"";
  int progress=45;
  double sample=42.0;
  String source1=""String_Node_Str"";
  String source2=""String_Node_Str"";
  api_client.setResponse(""String_Node_Str"" + playback_id + ""String_Node_Str""+ definition_id+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(start)+ ""String_Node_Str""+ String.valueOf(end)+ ""String_Node_Str""+ String.valueOf(created_at)+ ""String_Node_Str""+ ""String_Node_Str""+ status+ ""String_Node_Str""+ String.valueOf(progress)+ ""String_Node_Str""+ source1+ ""String_Node_Str""+ source2+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(sample)+ ""String_Node_Str"",200);
  try {
    Historic h=user.getHistoric(DataForTests.historic_playback_id);
    assertEquals(""String_Node_Str"",playback_id,h.getHash());
    assertEquals(""String_Node_Str"",definition_id,h.getStreamHash());
    assertEquals(""String_Node_Str"",name,h.getName());
    assertEquals(""String_Node_Str"",start,h.getStartDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",end,h.getEndDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",status,h.getStatus());
    assertEquals(""String_Node_Str"",progress,h.getProgress());
    assertEquals(""String_Node_Str"",sample,h.getSample());
    ArrayList<String> sources=h.getSources();
    assertEquals(""String_Node_Str"",2,sources.size());
    assertTrue(""String_Node_Str"",sources.contains(source1));
    assertTrue(""String_Node_Str"",sources.contains(source2));
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAPIError e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}"
44221,"public void testConstruction(){
  try {
    api_client.setResponse(""String_Node_Str"" + DataForTests.definition_hash + ""String_Node_Str"",200);
    Historic h=def.createHistoric(DataForTests.historic_start,DataForTests.historic_end,DataForTests.historic_sources,DataForTests.historic_sample,DataForTests.historic_name);
    assertEquals(""String_Node_Str"",DataForTests.definition_hash,h.getStreamHash());
    assertEquals(""String_Node_Str"",DataForTests.historic_name,h.getName());
    assertEquals(""String_Node_Str"",DataForTests.historic_start,h.getStartDate());
    assertEquals(""String_Node_Str"",DataForTests.historic_end,h.getEndDate());
    assertEquals(""String_Node_Str"",""String_Node_Str"",h.getStatus());
    assertEquals(""String_Node_Str"",0,h.getProgress());
    assertEquals(""String_Node_Str"",DataForTests.historic_sample,h.getSample());
    String[] sources_input=DataForTests.historic_sources.split(""String_Node_Str"");
    ArrayList<String> sources=h.getSources();
    assertEquals(""String_Node_Str"",sources_input.length,sources.size());
    for (    String source : sources_input) {
      assertTrue(""String_Node_Str"" + source + ""String_Node_Str"",sources.contains(source));
    }
    HashMap<String,Integer> volume_info=h.getVolumeInfo();
    assertEquals(""String_Node_Str"",0,volume_info.size());
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void testConstruction(){
  try {
    api_client.setResponse(""String_Node_Str"" + DataForTests.definition_hash + ""String_Node_Str"",200);
    Historic h=def.createHistoric(DataForTests.historic_start,DataForTests.historic_end,DataForTests.historic_sources,DataForTests.historic_sample,DataForTests.historic_name);
    assertEquals(""String_Node_Str"",DataForTests.definition_hash,h.getStreamHash());
    assertEquals(""String_Node_Str"",DataForTests.historic_name,h.getName());
    assertEquals(""String_Node_Str"",DataForTests.historic_start,h.getStartDate());
    assertEquals(""String_Node_Str"",DataForTests.historic_end,h.getEndDate());
    assertEquals(""String_Node_Str"",""String_Node_Str"",h.getStatus());
    assertEquals(""String_Node_Str"",0,h.getProgress());
    assertEquals(""String_Node_Str"",DataForTests.historic_sample,h.getSample());
    String[] sources_input=DataForTests.historic_sources.split(""String_Node_Str"");
    ArrayList<String> sources=h.getSources();
    assertEquals(""String_Node_Str"",sources_input.length,sources.size());
    for (    String source : sources_input) {
      assertTrue(""String_Node_Str"" + source + ""String_Node_Str"",sources.contains(source));
    }
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}"
44222,"/** 
 * Constructor.
 * @param User user
 * @param ArrayList<String>hashes
 * @param IMultiStreamConsumerEvents eventHandler
 * @throws EInvalidData
 * @throws ECompileFailed
 * @throws EAccessDenied
 * @throws EAPIError 
 * @throws URISyntaxException 
 * @throws WebSocketException 
 */
public WS(User user,IMultiStreamConsumerEvents eventHandler,boolean isHistoric,String... hashes) throws EInvalidData, ECompileFailed, EAccessDenied, EAPIError {
  super(user,eventHandler);
  try {
    _is_historic=isHistoric;
    _thread=new WSThread(this,user,Arrays.asList(hashes));
  }
 catch (  WebSocketException e) {
    throw new EAPIError(e.getMessage());
  }
catch (  URISyntaxException e) {
    throw new EAPIError(e.getMessage());
  }
}","/** 
 * Constructor.
 * @param User user
 * @param ArrayList<String>hashes
 * @param IMultiStreamConsumerEvents eventHandler
 * @throws EInvalidData
 * @throws ECompileFailed
 * @throws EAccessDenied
 * @throws EAPIError 
 * @throws URISyntaxException 
 * @throws WebSocketException 
 */
public WS(User user,IMultiStreamConsumerEvents eventHandler,boolean isHistoric,String... hashes) throws EInvalidData, ECompileFailed, EAccessDenied, EAPIError {
  super(user,eventHandler);
  try {
    _is_historic=isHistoric;
    _thread=new WSThread(this,user,hashes == null ? new ArrayList<String>() : Arrays.asList(hashes));
  }
 catch (  WebSocketException e) {
    throw new EAPIError(e.getMessage());
  }
catch (  URISyntaxException e) {
    throw new EAPIError(e.getMessage());
  }
}"
44223,"/** 
 * Get the data availability info. If the historic has not yet been prepared that will be done automagically to obtain the cost.
 * @return HistoricDataAvailability
 * @throws EAPIError 
 * @throws EAccessDenied 
 * @throws EInvalidData 
 */
public HistoricDataAvailability getAvailability() throws EInvalidData, EAccessDenied, EAPIError {
  if (_availability == null) {
    prepare();
  }
  return _availability;
}","/** 
 * Get the data availability info. If the historic has not yet been prepared that will be done automagically to obtain the availability data.
 * @return HistoricDataAvailability
 * @throws EAPIError 
 * @throws EAccessDenied 
 * @throws EInvalidData 
 */
public HistoricDataAvailability getAvailability() throws EInvalidData, EAccessDenied, EAPIError {
  if (_availability == null) {
    prepare();
  }
  return _availability;
}"
44224,"/** 
 * Save changes to the name and output_parameters of this subscription.
 * @throws EInvalidData
 * @throws EAPIError
 * @throws EAccessDenied
 */
public void save() throws EInvalidData, EAPIError, EAccessDenied {
  HashMap<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",getId());
  for (  String key : _output_params.keySet()) {
    params.put(""String_Node_Str"" + key,_output_params.get(key));
  }
  params.put(""String_Node_Str"",getName());
  init(_user.callAPI(""String_Node_Str"",params));
}","/** 
 * Save changes to the name and output_parameters of this subscription.
 * @throws EInvalidData
 * @throws EAPIError
 * @throws EAccessDenied
 */
public void save() throws EInvalidData, EAPIError, EAccessDenied {
  HashMap<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",getId());
  for (  String key : _output_params.keySet()) {
    params.put(OUTPUT_PARAMS_PREFIX + key,_output_params.get(key));
  }
  params.put(""String_Node_Str"",getName());
  init(_user.callAPI(""String_Node_Str"",params));
}"
44225,"/** 
 * @param args
 */
public static void main(String[] args){
  Env.init(args);
  if (Env.getArgCount() < 4) {
    usage();
  }
  String stream_hash=Env.getArg(0);
  String start_date=Env.getArg(1);
  String end_date=Env.getArg(2);
  String sources=Env.getArg(3);
  double sample=Double.parseDouble(Env.getArg(4));
  String name=Env.getArg(5);
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  Date start=null;
  Date end=null;
  try {
    start=df.parse(start_date);
  }
 catch (  ParseException e2) {
    System.err.println(""String_Node_Str"" + Env.getArg(1));
    System.exit(1);
  }
  try {
    end=df.parse(end_date);
  }
 catch (  ParseException e2) {
    System.err.println(""String_Node_Str"" + Env.getArg(1));
    System.exit(1);
  }
  try {
    Historic historic=Env.getUser().createHistoric(stream_hash,start,end,sources,sample,name);
    Env.displayHistoricDetails(historic);
  }
 catch (  EInvalidData e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
  System.out.println(""String_Node_Str"" + Env.getUser().getRateLimitRemaining());
}","/** 
 * @param args
 */
public static void main(String[] args){
  Env.init(args);
  if (Env.getArgCount() != 6) {
    usage();
  }
  String stream_hash=Env.getArg(0);
  String start_date=Env.getArg(1);
  String end_date=Env.getArg(2);
  String sources=Env.getArg(3);
  double sample=Double.parseDouble(Env.getArg(4));
  String name=Env.getArg(5);
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  Date start=null;
  Date end=null;
  try {
    start=df.parse(start_date);
  }
 catch (  ParseException e2) {
    System.err.println(""String_Node_Str"" + Env.getArg(1));
    System.exit(1);
  }
  try {
    end=df.parse(end_date);
  }
 catch (  ParseException e2) {
    System.err.println(""String_Node_Str"" + Env.getArg(1));
    System.exit(1);
  }
  try {
    Historic historic=Env.getUser().createHistoric(stream_hash,start,end,sources,sample,name);
    Env.displayHistoricDetails(historic);
  }
 catch (  EInvalidData e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
  System.out.println(""String_Node_Str"" + Env.getUser().getRateLimitRemaining());
}"
44226,"static public void displaySubscriptionDetails(PushSubscription subscription){
  String output_type=subscription.getOutputType();
  System.out.println(""String_Node_Str"" + String.valueOf(subscription.getId()));
  System.out.println(""String_Node_Str"" + subscription.getName());
  System.out.println(""String_Node_Str"" + subscription.getStatus());
  System.out.println(""String_Node_Str"" + subscription.getCreatedAt());
  System.out.println(""String_Node_Str"" + subscription.getLastRequest());
  System.out.println(""String_Node_Str"" + subscription.getLastSuccess());
  System.out.println(""String_Node_Str"" + output_type);
  System.out.println(""String_Node_Str"");
  PushOutputParams output_params=subscription.getOutputParams();
  for (  String key : output_params.keySet()) {
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ output_params.get(key));
  }
}","static public void displaySubscriptionDetails(PushSubscription subscription){
  System.out.println(""String_Node_Str"" + subscription.getId());
  System.out.println(""String_Node_Str"" + subscription.getName());
  System.out.println(""String_Node_Str"" + subscription.getStatus());
  System.out.println(""String_Node_Str"" + subscription.getCreatedAt());
  System.out.println(""String_Node_Str"" + subscription.getLastRequest());
  System.out.println(""String_Node_Str"" + subscription.getLastSuccess());
  System.out.println(""String_Node_Str"" + subscription.getOutputType());
  System.out.println(""String_Node_Str"");
  PushOutputParams output_params=subscription.getOutputParams();
  for (  String key : output_params.keySet()) {
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ output_params.get(key));
  }
}"
44227,"public static void usage(String message,boolean exit){
  if (message.length() > 0) {
    System.err.println(""String_Node_Str"");
    System.err.println(message);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  if (exit) {
    System.exit(1);
  }
}","public static void usage(String message,boolean exit){
  if (message.length() > 0) {
    System.err.println(""String_Node_Str"");
    System.err.println(message);
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  if (exit) {
    System.exit(1);
  }
}"
44228,"/** 
 * @param args
 */
public static void main(String[] args){
  Env.init(args);
  try {
switch (Env.getArgCount()) {
case 0:
      Log log=Env.getUser().getPushSubscriptionLogs();
    if (log.getCount() == 0) {
      System.out.println(""String_Node_Str"");
    }
 else {
      for (      LogEntry l : log) {
        System.out.println(new SimpleDateFormat(""String_Node_Str"").format(l.getRequestTime()) + ""String_Node_Str"" + String.valueOf(l.getSubscriptionId())+ ""String_Node_Str""+ (l.getSuccess() ? ""String_Node_Str"" : ""String_Node_Str"")+ l.getMessage());
      }
    }
  break;
case 1:
String subscription_id=Env.getArg(0);
PushSubscription push=Env.getUser().getPushSubscription(subscription_id);
Log subscription_log=push.getLog();
if (subscription_log.getCount() == 0) {
System.out.println(""String_Node_Str"" + subscription_id + ""String_Node_Str"");
}
 else {
for (LogEntry l : subscription_log) {
System.out.println(new SimpleDateFormat(""String_Node_Str"").format(l.getRequestTime()) + ""String_Node_Str"" + (l.getSuccess() ? ""String_Node_Str"" : ""String_Node_Str"")+ l.getMessage());
}
}
break;
default :
System.err.println(""String_Node_Str"");
break;
}
}
 catch (NumberFormatException e) {
System.err.println(""String_Node_Str"");
}
catch (EAPIError e) {
System.err.println(""String_Node_Str"" + e.getMessage());
}
catch (EAccessDenied e) {
System.err.println(""String_Node_Str"" + e.getMessage());
}
catch (EInvalidData e) {
System.err.println(""String_Node_Str"" + e.getMessage());
}
}","/** 
 * @param args
 */
public static void main(String[] args){
  Env.init(args);
  try {
switch (Env.getArgCount()) {
case 0:
      Log log=Env.getUser().getPushSubscriptionLogs();
    if (log.getCount() == 0) {
      System.out.println(""String_Node_Str"");
    }
 else {
      for (      LogEntry l : log) {
        System.out.println(new SimpleDateFormat(""String_Node_Str"").format(l.getRequestTime()) + ""String_Node_Str"" + l.getSubscriptionId()+ ""String_Node_Str""+ (l.getSuccess() ? ""String_Node_Str"" : ""String_Node_Str"")+ l.getMessage());
      }
    }
  break;
case 1:
String subscription_id=Env.getArg(0);
PushSubscription push=Env.getUser().getPushSubscription(subscription_id);
Log subscription_log=push.getLog();
if (subscription_log.getCount() == 0) {
System.out.println(""String_Node_Str"" + subscription_id + ""String_Node_Str"");
}
 else {
for (LogEntry l : subscription_log) {
System.out.println(new SimpleDateFormat(""String_Node_Str"").format(l.getRequestTime()) + ""String_Node_Str"" + (l.getSuccess() ? ""String_Node_Str"" : ""String_Node_Str"")+ l.getMessage());
}
}
break;
default :
System.err.println(""String_Node_Str"");
break;
}
}
 catch (NumberFormatException e) {
System.err.println(""String_Node_Str"");
}
catch (EAPIError e) {
System.err.println(""String_Node_Str"" + e.getMessage());
}
catch (EAccessDenied e) {
System.err.println(""String_Node_Str"" + e.getMessage());
}
catch (EInvalidData e) {
System.err.println(""String_Node_Str"" + e.getMessage());
}
}"
44229,"/** 
 * Call the DataSift API to prepare this historic query.
 * @throws EInvalidData
 * @throws EAccessDenied
 * @throws EAPIError
 */
public void prepare() throws EInvalidData, EAccessDenied, EAPIError {
  if (_playback_id.length() != 0) {
    throw new EInvalidData(""String_Node_Str"");
  }
  JSONObject res=null;
  try {
    HashMap<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",_hash);
    params.put(""String_Node_Str"",String.valueOf(_start.getTime() / 1000));
    params.put(""String_Node_Str"",String.valueOf(_end.getTime() / 1000));
    params.put(""String_Node_Str"",_name);
    params.put(""String_Node_Str"",Utils.join(_feeds,""String_Node_Str""));
    params.put(""String_Node_Str"",String.valueOf(_sample));
    res=_user.callAPI(""String_Node_Str"",params);
    try {
      _playback_id=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _dpus=res.getDouble(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _availability=new HistoricDataAvailability(res.getJSONObject(""String_Node_Str""));
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
  }
 catch (  EAPIError e) {
switch (e.getCode()) {
case 400:
      throw new EInvalidData(e.getMessage());
default :
    throw new EAPIError(""String_Node_Str"" + e.getCode() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
}
}
reloadData();
}","/** 
 * Call the DataSift API to prepare this historic query.
 * @throws EInvalidData
 * @throws EAccessDenied
 * @throws EAPIError
 */
public void prepare() throws EInvalidData, EAccessDenied, EAPIError {
  if (_playback_id.length() != 0) {
    throw new EInvalidData(""String_Node_Str"");
  }
  JSONObject res=null;
  try {
    HashMap<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",_hash);
    params.put(""String_Node_Str"",String.valueOf(_start.getTime() / 1000));
    params.put(""String_Node_Str"",String.valueOf(_end.getTime() / 1000));
    params.put(""String_Node_Str"",_name);
    params.put(""String_Node_Str"",Utils.join(_sources,""String_Node_Str""));
    params.put(""String_Node_Str"",String.valueOf(_sample));
    res=_user.callAPI(""String_Node_Str"",params);
    try {
      _playback_id=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _dpus=res.getDouble(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _availability=new HistoricDataAvailability(res.getJSONObject(""String_Node_Str""));
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
  }
 catch (  EAPIError e) {
switch (e.getCode()) {
case 400:
      throw new EInvalidData(e.getMessage());
default :
    throw new EAPIError(""String_Node_Str"" + e.getCode() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
}
}
reloadData();
}"
44230,"/** 
 * Reload the data for this historic from the DataSift API.
 * @throws EInvalidData
 * @throws EAccessDenied
 * @throws EAPIError
 */
public void reloadData() throws EInvalidData, EAccessDenied, EAPIError {
  if (_playback_id.length() == 0) {
    throw new EInvalidData(""String_Node_Str"");
  }
  JSONObject res=null;
  try {
    HashMap<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",_playback_id);
    res=_user.callAPI(""String_Node_Str"",params);
    try {
      _playback_id=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _hash=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _name=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _start=new Date(res.getLong(""String_Node_Str"") * 1000);
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _end=new Date(res.getLong(""String_Node_Str"") * 1000);
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _status=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _progress=res.getInt(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _created_at=new Date(res.getLong(""String_Node_Str"") * 1000);
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _feeds.clear();
      JSONArray data=res.getJSONArray(""String_Node_Str"");
      for (int i=0; i < data.length(); i++) {
        _feeds.add(data.getString(i));
      }
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _sample=res.getInt(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _volume_info.clear();
      JSONObject volume_info=res.getJSONObject(""String_Node_Str"");
      Iterator<?> volume_info_iterator=volume_info.keys();
      while (volume_info_iterator.hasNext()) {
        String key=(String)volume_info_iterator.next();
        try {
          _volume_info.put(key,volume_info.getInt(key));
        }
 catch (        JSONException e) {
          throw new EAPIError(""String_Node_Str"");
        }
      }
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
  }
 catch (  EAPIError e) {
switch (e.getCode()) {
case 400:
      throw new EInvalidData(e.getMessage());
default :
    throw new EAPIError(""String_Node_Str"" + e.getCode() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
}
}
}","/** 
 * Reload the data for this historic from the DataSift API.
 * @throws EInvalidData
 * @throws EAccessDenied
 * @throws EAPIError
 */
public void reloadData() throws EInvalidData, EAccessDenied, EAPIError {
  if (_playback_id.length() == 0) {
    throw new EInvalidData(""String_Node_Str"");
  }
  JSONObject res=null;
  try {
    HashMap<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",_playback_id);
    res=_user.callAPI(""String_Node_Str"",params);
    try {
      _playback_id=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _hash=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _name=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _start=new Date(res.getLong(""String_Node_Str"") * 1000);
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _end=new Date(res.getLong(""String_Node_Str"") * 1000);
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _status=res.getString(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _progress=res.getInt(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _created_at=new Date(res.getLong(""String_Node_Str"") * 1000);
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _sources.clear();
      JSONArray data=res.getJSONArray(""String_Node_Str"");
      for (int i=0; i < data.length(); i++) {
        _sources.add(data.getString(i));
      }
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _sample=res.getInt(""String_Node_Str"");
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
    try {
      _volume_info.clear();
      JSONObject volume_info=res.getJSONObject(""String_Node_Str"");
      Iterator<?> volume_info_iterator=volume_info.keys();
      while (volume_info_iterator.hasNext()) {
        String key=(String)volume_info_iterator.next();
        try {
          _volume_info.put(key,volume_info.getInt(key));
        }
 catch (        JSONException e) {
          throw new EAPIError(""String_Node_Str"");
        }
      }
    }
 catch (    JSONException e) {
      throw new EAPIError(""String_Node_Str"");
    }
  }
 catch (  EAPIError e) {
switch (e.getCode()) {
case 400:
      throw new EInvalidData(e.getMessage());
default :
    throw new EAPIError(""String_Node_Str"" + e.getCode() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
}
}
}"
44231,"/** 
 * Factory method that takes a Historic object.
 * @param user
 * @param type
 * @param definition
 * @param eventHandler
 * @return
 * @throws EAccessDenied
 * @throws ECompileFailed
 * @throws EInvalidData
 * @throws EAPIError 
 */
public static StreamConsumer historicFactory(User user,String type,Historic historic,IMultiStreamConsumerEvents eventHandler) throws EInvalidData, ECompileFailed, EAccessDenied, EAPIError {
  if (type == StreamConsumer.TYPE_WS) {
    return new WS(user,eventHandler,true);
  }
  throw new EInvalidData(""String_Node_Str"" + type);
}","/** 
 * Factory method that takes a Historic object for websockets.
 * @param user
 * @param type
 * @param definition
 * @param eventHandler
 * @return
 * @throws EAccessDenied
 * @throws ECompileFailed
 * @throws EInvalidData
 * @throws EAPIError 
 */
public static StreamConsumer historicFactory(User user,String type,Historic historic,IMultiStreamConsumerEvents eventHandler) throws EInvalidData, ECompileFailed, EAccessDenied, EAPIError {
  if (type == StreamConsumer.TYPE_WS) {
    return new WS(user,eventHandler,true,historic.getHash());
  }
  throw new EInvalidData(""String_Node_Str"" + type);
}"
44232,"/** 
 * Constructor.
 * @param User user
 * @param ArrayList<String>hashes
 * @param IMultiStreamConsumerEvents eventHandler
 * @param boolean isHistoric
 * @throws EInvalidData
 * @throws ECompileFailed
 * @throws EAccessDenied
 * @throws EAPIError 
 * @throws URISyntaxException 
 * @throws WebSocketException 
 */
public WS(User user,IMultiStreamConsumerEvents eventHandler) throws EInvalidData, ECompileFailed, EAccessDenied, EAPIError {
  this(user,eventHandler,null);
}","/** 
 * Constructor.
 * @param User user
 * @param ArrayList<String>hashes
 * @param IMultiStreamConsumerEvents eventHandler
 * @throws EInvalidData
 * @throws ECompileFailed
 * @throws EAccessDenied
 * @throws EAPIError 
 * @throws URISyntaxException 
 * @throws WebSocketException 
 */
public WS(User user,IMultiStreamConsumerEvents eventHandler,boolean isHistoric,String... hashes) throws EInvalidData, ECompileFailed, EAccessDenied, EAPIError {
  super(user,eventHandler);
  try {
    _is_historic=isHistoric;
    _thread=new WSThread(this,user,Arrays.asList(hashes));
  }
 catch (  WebSocketException e) {
    throw new EAPIError(e.getMessage());
  }
catch (  URISyntaxException e) {
    throw new EAPIError(e.getMessage());
  }
}"
44233,"public void testGetHistoric(){
  String playback_id=""String_Node_Str"";
  String definition_id=""String_Node_Str"";
  String name=""String_Node_Str"";
  long start=1329217703L;
  long end=1329221303L;
  long created_at=1334790000L;
  String status=""String_Node_Str"";
  int progress=45;
  int sample=42;
  String feed1=""String_Node_Str"";
  String feed2=""String_Node_Str"";
  String volume_info_type1=""String_Node_Str"";
  int volume_info_num1=123;
  String volume_info_type2=""String_Node_Str"";
  int volume_info_num2=456;
  api_client.setResponse(""String_Node_Str"" + playback_id + ""String_Node_Str""+ definition_id+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(start)+ ""String_Node_Str""+ String.valueOf(end)+ ""String_Node_Str""+ String.valueOf(created_at)+ ""String_Node_Str""+ ""String_Node_Str""+ status+ ""String_Node_Str""+ String.valueOf(progress)+ ""String_Node_Str""+ feed1+ ""String_Node_Str""+ feed2+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(sample)+ ""String_Node_Str""+ volume_info_type1+ ""String_Node_Str""+ String.valueOf(volume_info_num1)+ ""String_Node_Str""+ ""String_Node_Str""+ volume_info_type2+ ""String_Node_Str""+ String.valueOf(volume_info_num2)+ ""String_Node_Str"",200);
  try {
    Historic h=user.getHistoric(DataForTests.historic_playback_id);
    assertEquals(""String_Node_Str"",playback_id,h.getHash());
    assertEquals(""String_Node_Str"",definition_id,h.getStreamHash());
    assertEquals(""String_Node_Str"",name,h.getName());
    assertEquals(""String_Node_Str"",start,h.getStartDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",end,h.getEndDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",status,h.getStatus());
    assertEquals(""String_Node_Str"",progress,h.getProgress());
    assertEquals(""String_Node_Str"",sample,h.getSample());
    ArrayList<String> feeds=h.getFeeds();
    assertEquals(""String_Node_Str"",2,feeds.size());
    assertTrue(""String_Node_Str"",feeds.contains(feed1));
    assertTrue(""String_Node_Str"",feeds.contains(feed2));
    HashMap<String,Integer> volume_info=h.getVolumeInfo();
    assertEquals(""String_Node_Str"",2,volume_info.size());
    assertTrue(""String_Node_Str"",volume_info.containsKey(volume_info_type1));
    assertTrue(""String_Node_Str"",volume_info.containsKey(volume_info_type2));
    assertEquals(""String_Node_Str"",volume_info_num1,volume_info.get(volume_info_type1).intValue());
    assertEquals(""String_Node_Str"",volume_info_num2,volume_info.get(volume_info_type2).intValue());
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAPIError e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void testGetHistoric(){
  String playback_id=""String_Node_Str"";
  String definition_id=""String_Node_Str"";
  String name=""String_Node_Str"";
  long start=1329217703L;
  long end=1329221303L;
  long created_at=1334790000L;
  String status=""String_Node_Str"";
  int progress=45;
  int sample=42;
  String source1=""String_Node_Str"";
  String source2=""String_Node_Str"";
  String volume_info_type1=""String_Node_Str"";
  int volume_info_num1=123;
  String volume_info_type2=""String_Node_Str"";
  int volume_info_num2=456;
  api_client.setResponse(""String_Node_Str"" + playback_id + ""String_Node_Str""+ definition_id+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(start)+ ""String_Node_Str""+ String.valueOf(end)+ ""String_Node_Str""+ String.valueOf(created_at)+ ""String_Node_Str""+ ""String_Node_Str""+ status+ ""String_Node_Str""+ String.valueOf(progress)+ ""String_Node_Str""+ source1+ ""String_Node_Str""+ source2+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(sample)+ ""String_Node_Str""+ volume_info_type1+ ""String_Node_Str""+ String.valueOf(volume_info_num1)+ ""String_Node_Str""+ ""String_Node_Str""+ volume_info_type2+ ""String_Node_Str""+ String.valueOf(volume_info_num2)+ ""String_Node_Str"",200);
  try {
    Historic h=user.getHistoric(DataForTests.historic_playback_id);
    assertEquals(""String_Node_Str"",playback_id,h.getHash());
    assertEquals(""String_Node_Str"",definition_id,h.getStreamHash());
    assertEquals(""String_Node_Str"",name,h.getName());
    assertEquals(""String_Node_Str"",start,h.getStartDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",end,h.getEndDate().getTime() / 1000);
    assertEquals(""String_Node_Str"",status,h.getStatus());
    assertEquals(""String_Node_Str"",progress,h.getProgress());
    assertEquals(""String_Node_Str"",sample,h.getSample());
    ArrayList<String> sources=h.getSources();
    assertEquals(""String_Node_Str"",2,sources.size());
    assertTrue(""String_Node_Str"",sources.contains(source1));
    assertTrue(""String_Node_Str"",sources.contains(source2));
    HashMap<String,Integer> volume_info=h.getVolumeInfo();
    assertEquals(""String_Node_Str"",2,volume_info.size());
    assertTrue(""String_Node_Str"",volume_info.containsKey(volume_info_type1));
    assertTrue(""String_Node_Str"",volume_info.containsKey(volume_info_type2));
    assertEquals(""String_Node_Str"",volume_info_num1,volume_info.get(volume_info_type1).intValue());
    assertEquals(""String_Node_Str"",volume_info_num2,volume_info.get(volume_info_type2).intValue());
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAPIError e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}"
44234,"public void testConstruction(){
  try {
    api_client.setResponse(""String_Node_Str"" + DataForTests.definition_hash + ""String_Node_Str"",200);
    Historic h=def.createHistoric(DataForTests.historic_start,DataForTests.historic_end,DataForTests.historic_feeds,DataForTests.historic_sample,DataForTests.historic_name);
    assertEquals(""String_Node_Str"",DataForTests.definition_hash,h.getStreamHash());
    assertEquals(""String_Node_Str"",DataForTests.historic_name,h.getName());
    assertEquals(""String_Node_Str"",DataForTests.historic_start,h.getStartDate());
    assertEquals(""String_Node_Str"",DataForTests.historic_end,h.getEndDate());
    assertEquals(""String_Node_Str"",""String_Node_Str"",h.getStatus());
    assertEquals(""String_Node_Str"",0,h.getProgress());
    assertEquals(""String_Node_Str"",DataForTests.historic_sample,h.getSample());
    String[] feeds_input=DataForTests.historic_feeds.split(""String_Node_Str"");
    ArrayList<String> feeds=h.getFeeds();
    assertEquals(""String_Node_Str"",feeds_input.length,feeds.size());
    for (    String feed : feeds_input) {
      assertTrue(""String_Node_Str"" + feed + ""String_Node_Str"",feeds.contains(feed));
    }
    HashMap<String,Integer> volume_info=h.getVolumeInfo();
    assertEquals(""String_Node_Str"",0,volume_info.size());
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void testConstruction(){
  try {
    api_client.setResponse(""String_Node_Str"" + DataForTests.definition_hash + ""String_Node_Str"",200);
    Historic h=def.createHistoric(DataForTests.historic_start,DataForTests.historic_end,DataForTests.historic_sources,DataForTests.historic_sample,DataForTests.historic_name);
    assertEquals(""String_Node_Str"",DataForTests.definition_hash,h.getStreamHash());
    assertEquals(""String_Node_Str"",DataForTests.historic_name,h.getName());
    assertEquals(""String_Node_Str"",DataForTests.historic_start,h.getStartDate());
    assertEquals(""String_Node_Str"",DataForTests.historic_end,h.getEndDate());
    assertEquals(""String_Node_Str"",""String_Node_Str"",h.getStatus());
    assertEquals(""String_Node_Str"",0,h.getProgress());
    assertEquals(""String_Node_Str"",DataForTests.historic_sample,h.getSample());
    String[] sources_input=DataForTests.historic_sources.split(""String_Node_Str"");
    ArrayList<String> sources=h.getSources();
    assertEquals(""String_Node_Str"",sources_input.length,sources.size());
    for (    String source : sources_input) {
      assertTrue(""String_Node_Str"" + source + ""String_Node_Str"",sources.contains(source));
    }
    HashMap<String,Integer> volume_info=h.getVolumeInfo();
    assertEquals(""String_Node_Str"",0,volume_info.size());
  }
 catch (  EInvalidData e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
catch (  EAccessDenied e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}"
44235,"public void run(){
  if (getConsumerState() == StreamConsumer.STATE_RESTARTING) {
    onRestarted();
  }
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        if (_ws != null) {
          _ws.close();
        }
        _ws=null;
        _ws=new WebSocketConnection(_uri);
        _ws.addHeader(""String_Node_Str"" + _user.getUsername() + ""String_Node_Str""+ _user.getAPIKey());
        _ws.addHeader(""String_Node_Str"" + _user.getUserAgent());
        _ws.setEventHandler(new WebSocketEventHandler(){
          public void onOpen(){
            _consumer.onConnect();
            for (            String hash : _subscriptions) {
              try {
                do_subscribe(hash);
              }
 catch (              EAPIError e) {
                try {
                  _consumer.onWarning(""String_Node_Str"" + hash);
                }
 catch (                EInvalidData e1) {
                }
              }
            }
          }
          public void onMessage(          WebSocketMessage message){
            String line=message.getText();
            if (line.length() > 10) {
              processLine(line);
            }
          }
          public void onClose(){
            _consumer.onDisconnect();
switch (getConsumerState()) {
case StreamConsumer.STATE_RUNNING:
              if (_auto_reconnect) {
                restartConsumer();
              }
 else {
                stopped();
              }
            break;
case StreamConsumer.STATE_STOPPING:
          stopped();
        break;
    }
  }
}
);
_ws.connect();
while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
  Thread.sleep(500);
}
if (getConsumerState() != StreamConsumer.STATE_STOPPING && getConsumerState() != StreamConsumer.STATE_STOPPED) {
  stopConsumer();
  reason=""String_Node_Str"";
}
 else {
  reason=""String_Node_Str"";
}
int stopCounter=60;
while (stopCounter > 0 && getConsumerState() == StreamConsumer.STATE_STOPPING) {
  Thread.sleep(500);
  stopCounter--;
}
if (stopCounter == 0) {
synchronized (this) {
    try {
      _consumer.onWarning(""String_Node_Str"");
    }
 catch (    EInvalidData e) {
    }
  }
}
}
 catch (WebSocketException e) {
_auto_reconnect=false;
reason=e.getMessage();
}
catch (InterruptedException e) {
reason=""String_Node_Str"";
}
 finally {
try {
  _ws.close();
}
 catch (Exception e) {
}
}
}
if (reason.length() == 0 && (getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect) {
if (reconnect_delay == 0) {
reconnect_delay=1;
}
 else if (reconnect_delay < 16) {
reconnect_delay++;
}
 else {
reason=""String_Node_Str"";
stopConsumer();
reconnect_delay=0;
}
if (reconnect_delay > 0) {
try {
  _consumer.onWarning(""String_Node_Str"" + reconnect_delay + ""String_Node_Str"");
}
 catch (EInvalidData e) {
}
}
}
}
 while ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect);
if (reason.length() == 0) {
if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
reason=""String_Node_Str"";
}
 else {
reason=""String_Node_Str"";
}
}
onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RESTARTING) {
      onRestarted();
    }
    if ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        if (_ws != null) {
          _ws.close();
        }
        _ws=null;
        _ws=new WebSocketConnection(_uri);
        _ws.addHeader(""String_Node_Str"" + _user.getUsername() + ""String_Node_Str""+ _user.getAPIKey());
        _ws.addHeader(""String_Node_Str"" + _user.getUserAgent());
        _ws.setEventHandler(new WebSocketEventHandler(){
          public void onOpen(){
            _consumer.onConnect();
            for (            String hash : _subscriptions) {
              try {
                do_subscribe(hash);
              }
 catch (              EAPIError e) {
                try {
                  _consumer.onWarning(""String_Node_Str"" + hash);
                }
 catch (                EInvalidData e1) {
                }
              }
            }
          }
          public void onMessage(          WebSocketMessage message){
            String line=message.getText();
            if (line.length() > 10) {
              processLine(line);
            }
          }
          public void onClose(){
            _consumer.onDisconnect();
switch (getConsumerState()) {
case StreamConsumer.STATE_RUNNING:
              if (_auto_reconnect) {
                restartConsumer();
              }
 else {
                stopped();
              }
            break;
case StreamConsumer.STATE_STOPPING:
          stopped();
        break;
    }
  }
}
);
_ws.connect();
while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
  Thread.sleep(500);
}
if (getConsumerState() != StreamConsumer.STATE_RESTARTING) {
  if (getConsumerState() != StreamConsumer.STATE_STOPPING && getConsumerState() != StreamConsumer.STATE_STOPPED) {
    stopConsumer();
    reason=""String_Node_Str"";
  }
 else {
    reason=""String_Node_Str"";
  }
}
int stopCounter=60;
while (stopCounter > 0 && getConsumerState() == StreamConsumer.STATE_STOPPING) {
  Thread.sleep(500);
  stopCounter--;
}
if (stopCounter == 0) {
synchronized (this) {
    try {
      _consumer.onWarning(""String_Node_Str"");
    }
 catch (    EInvalidData e) {
    }
  }
}
}
 catch (WebSocketException e) {
_auto_reconnect=false;
reason=e.getMessage();
}
catch (InterruptedException e) {
reason=""String_Node_Str"";
}
 finally {
try {
  _ws.close();
}
 catch (Exception e) {
}
}
}
if (reason.length() == 0 && (getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect) {
if (reconnect_delay == 0) {
reconnect_delay=1;
}
 else if (reconnect_delay < 16) {
reconnect_delay++;
}
 else {
reason=""String_Node_Str"";
stopConsumer();
reconnect_delay=0;
}
if (reconnect_delay > 0) {
try {
  _consumer.onWarning(""String_Node_Str"" + reconnect_delay + ""String_Node_Str"");
}
 catch (EInvalidData e) {
}
}
}
}
 while ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect);
if (reason.length() == 0) {
if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
reason=""String_Node_Str"";
}
 else {
reason=""String_Node_Str"";
}
}
onStopped(reason);
}"
44236,"public synchronized void processLine(String line){
  try {
    JSONdn data=new JSONdn(line);
    if (data.has(""String_Node_Str"")) {
      String status=data.getStringVal(""String_Node_Str"");
      if (status.equals(""String_Node_Str"") || status.equals(""String_Node_Str"")) {
        _consumer.onError(data.getStringVal(""String_Node_Str""));
        _consumer.stop();
      }
 else       if (status.equals(""String_Node_Str"")) {
        _consumer.onWarning(data.getStringVal(""String_Node_Str""));
      }
 else       if (status.equals(""String_Node_Str"")) {
        _consumer.onStatus(status,data);
      }
 else {
        _consumer.onError(""String_Node_Str"" + line);
      }
    }
 else     if (data.has(""String_Node_Str"")) {
      Interaction i=new Interaction(data.getJSONObject(""String_Node_Str"").toString());
      if (i.has(""String_Node_Str"")) {
        _consumer.onMultiDeleted(data.getStringVal(""String_Node_Str""),i);
      }
 else {
        _consumer.onMultiInteraction(data.getStringVal(""String_Node_Str""),i);
      }
    }
 else {
      _consumer.onError(""String_Node_Str"" + line);
    }
  }
 catch (  JSONException e) {
  }
catch (  EInvalidData e) {
  }
}","public synchronized void processLine(String line){
  try {
    JSONdn data=new JSONdn(line);
    if (data.has(""String_Node_Str"")) {
      String status=data.getStringVal(""String_Node_Str"");
      String message=data.getStringVal(""String_Node_Str"");
      if (status.equals(""String_Node_Str"") || status.equals(""String_Node_Str"")) {
        if (message.equals(""String_Node_Str"")) {
          _consumer.onWarning(message);
        }
 else {
          _consumer.onError(message);
          _consumer.stop();
        }
      }
 else       if (status.equals(""String_Node_Str"")) {
        _consumer.onWarning(message);
      }
 else {
        _consumer.onStatus(status,data);
      }
    }
 else     if (data.has(""String_Node_Str"")) {
      Interaction i=new Interaction(data.getJSONObject(""String_Node_Str"").toString());
      if (i.has(""String_Node_Str"")) {
        _consumer.onMultiDeleted(data.getStringVal(""String_Node_Str""),i);
      }
 else {
        _consumer.onMultiInteraction(data.getStringVal(""String_Node_Str""),i);
      }
    }
 else {
      _consumer.onError(""String_Node_Str"" + line);
    }
  }
 catch (  JSONException e) {
  }
catch (  EInvalidData e) {
  }
}"
44237,"public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (_kill_requested)     return;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        String url=""String_Node_Str"" + _user.getStreamBaseURL() + ""String_Node_Str""+ _hashes.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        HttpGet get=new HttpGet(url);
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          BufferedReader reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            if (_kill_requested)             return;
            String line=reader.readLine();
            if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          stopConsumer();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  if (_kill_requested)   return;
  onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (_kill_requested)     return;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        String url=""String_Node_Str"" + _user.getStreamBaseURL() + ""String_Node_Str""+ _hashes.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        HttpGet get=new HttpGet(url);
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            if (_kill_requested)             return;
            String line=reader.readLine();
            if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          stopConsumer();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  if (_kill_requested)   return;
  onStopped(reason);
}"
44238,"public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        System.out.println(""String_Node_Str"");
        DefaultHttpClient client=new DefaultHttpClient();
        HttpGet get=new HttpGet(""String_Node_Str"" + _user.getStreamBaseURL() + _definition.getHash());
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          System.out.println(""String_Node_Str"");
          reconnect_delay=0;
          BufferedReader reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            String line=reader.readLine();
            if (line == null) {
              break;
            }
 else             if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          _consumer.stop();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
            continue;
          }
 else           if (_auto_reconnect && reconnect_delay < 240) {
            reconnect_delay*=2;
            continue;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        System.out.println(""String_Node_Str"");
        DefaultHttpClient client=new DefaultHttpClient();
        HttpGet get=new HttpGet(""String_Node_Str"" + _user.getStreamBaseURL() + _definition.getHash());
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          System.out.println(""String_Node_Str"");
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            String line=reader.readLine();
            if (line == null) {
              break;
            }
 else             if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          _consumer.stop();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
            continue;
          }
 else           if (_auto_reconnect && reconnect_delay < 240) {
            reconnect_delay*=2;
            continue;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}"
44239,"public void run(){
  if (getConsumerState() == StreamConsumer.STATE_RESTARTING) {
    onRestarted();
  }
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        _ws.setEventHandler(new WebSocketEventHandler(){
          public void onOpen(){
          }
          public void onMessage(          WebSocketMessage message){
            String line=message.getText();
            if (line.length() > 100) {
              processLine(line);
            }
          }
          public void onClose(){
            if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
              if (_auto_reconnect) {
                restartConsumer();
              }
 else {
                stopConsumer();
              }
            }
          }
        }
);
        _ws.connect();
        while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
          Thread.sleep(5000);
        }
        reason=""String_Node_Str"";
      }
 catch (      WebSocketException e) {
        _auto_reconnect=false;
        reason=e.getMessage();
      }
catch (      InterruptedException e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && (getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}","public void run(){
  if (getConsumerState() == StreamConsumer.STATE_RESTARTING) {
    onRestarted();
  }
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        _ws.setEventHandler(new WebSocketEventHandler(){
          public void onOpen(){
          }
          public void onMessage(          WebSocketMessage message){
            String line=message.getText();
            if (line.length() > 100) {
              processLine(line);
            }
          }
          public void onClose(){
            if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
              if (_auto_reconnect) {
                restartConsumer();
              }
 else {
                stopConsumer();
              }
            }
          }
        }
);
        _ws.connect();
        while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
          Thread.sleep(5000);
        }
        reason=""String_Node_Str"";
      }
 catch (      WebSocketException e) {
        _auto_reconnect=false;
        reason=e.getMessage();
      }
catch (      InterruptedException e) {
        reason=""String_Node_Str"";
      }
 finally {
        try {
          _ws.close();
        }
 catch (        WebSocketException e) {
        }
      }
    }
    if (reason.length() == 0 && (getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}"
44240,"public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (_kill_requested)     return;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        String url=""String_Node_Str"" + _user.getStreamBaseURL() + ""String_Node_Str""+ _hashes.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        HttpGet get=new HttpGet(url);
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          BufferedReader reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            if (_kill_requested)             return;
            String line=reader.readLine();
            if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          stopConsumer();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  if (_kill_requested)   return;
  onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (_kill_requested)     return;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        String url=""String_Node_Str"" + _user.getStreamBaseURL() + ""String_Node_Str""+ _hashes.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        HttpGet get=new HttpGet(url);
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            if (_kill_requested)             return;
            String line=reader.readLine();
            if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          stopConsumer();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  if (_kill_requested)   return;
  onStopped(reason);
}"
44241,"public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        HttpGet get=new HttpGet(""String_Node_Str"" + _user.getStreamBaseURL() + _definition.getHash());
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          BufferedReader reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            String line=reader.readLine();
            if (line == null) {
              break;
            }
 else             if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          _consumer.stop();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        HttpGet get=new HttpGet(""String_Node_Str"" + _user.getStreamBaseURL() + _definition.getHash());
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            String line=reader.readLine();
            if (line == null) {
              break;
            }
 else             if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          _consumer.stop();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}"
44242,"public void run(){
  if (getConsumerState() == StreamConsumer.STATE_RESTARTING) {
    onRestarted();
  }
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        _ws.setEventHandler(new WebSocketEventHandler(){
          public void onOpen(){
          }
          public void onMessage(          WebSocketMessage message){
            String line=message.getText();
            if (line.length() > 100) {
              processLine(line);
            }
          }
          public void onClose(){
            if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
              if (_auto_reconnect) {
                restartConsumer();
              }
 else {
                stopConsumer();
              }
            }
          }
        }
);
        _ws.connect();
        while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
          Thread.sleep(5000);
        }
        reason=""String_Node_Str"";
      }
 catch (      WebSocketException e) {
        _auto_reconnect=false;
        reason=e.getMessage();
      }
catch (      InterruptedException e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && (getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}","public void run(){
  if (getConsumerState() == StreamConsumer.STATE_RESTARTING) {
    onRestarted();
  }
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        _ws.setEventHandler(new WebSocketEventHandler(){
          public void onOpen(){
          }
          public void onMessage(          WebSocketMessage message){
            String line=message.getText();
            if (line.length() > 100) {
              processLine(line);
            }
          }
          public void onClose(){
            if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
              if (_auto_reconnect) {
                restartConsumer();
              }
 else {
                stopConsumer();
              }
            }
          }
        }
);
        _ws.connect();
        while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
          Thread.sleep(5000);
        }
        reason=""String_Node_Str"";
      }
 catch (      WebSocketException e) {
        _auto_reconnect=false;
        reason=e.getMessage();
      }
catch (      InterruptedException e) {
        reason=""String_Node_Str"";
      }
 finally {
        try {
          _ws.close();
        }
 catch (        WebSocketException e) {
        }
      }
    }
    if (reason.length() == 0 && (getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while ((getConsumerState() == StreamConsumer.STATE_RUNNING || getConsumerState() == StreamConsumer.STATE_RESTARTING) && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}"
44243,"public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (_kill_requested)     return;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        String url=""String_Node_Str"" + _user.getStreamBaseURL() + ""String_Node_Str""+ _hashes.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        HttpGet get=new HttpGet(url);
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            if (_kill_requested)             return;
            String line=reader.readLine();
            if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          stopConsumer();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  if (_kill_requested)   return;
  onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (_kill_requested)     return;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      DefaultHttpClient client=new DefaultHttpClient();
      String url=""String_Node_Str"" + _user.getStreamBaseURL() + ""String_Node_Str""+ _hashes.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      HttpGet get=new HttpGet(url);
      try {
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            if (_kill_requested)             return;
            String line=reader.readLine();
            if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          stopConsumer();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
 finally {
        try {
          get.abort();
          client.getConnectionManager().shutdown();
        }
 catch (        Exception e) {
        }
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  if (_kill_requested)   return;
  onStopped(reason);
}"
44244,"public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      try {
        DefaultHttpClient client=new DefaultHttpClient();
        HttpGet get=new HttpGet(""String_Node_Str"" + _user.getStreamBaseURL() + _definition.getHash());
        get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
        HttpResponse response=client.execute(get);
        int statusCode=response.getStatusLine().getStatusCode();
        if (statusCode == 200) {
          reconnect_delay=0;
          reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
          while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
            String line=reader.readLine();
            if (line == null) {
              break;
            }
 else             if (line.length() > 100) {
              processLine(line);
            }
          }
        }
 else         if (statusCode == 404) {
          reason=""String_Node_Str"";
          _consumer.stop();
        }
 else {
          if (reconnect_delay == 0) {
            reconnect_delay=10;
          }
 else           if (reconnect_delay < 240) {
            reconnect_delay*=2;
          }
 else {
            reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
            _consumer.stop();
          }
        }
      }
 catch (      Exception e) {
        reason=""String_Node_Str"";
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}","public void run(){
  int reconnect_delay=0;
  String reason=""String_Node_Str"";
  do {
    if (getConsumerState() == StreamConsumer.STATE_RUNNING && reconnect_delay > 0) {
      try {
        Thread.sleep(reconnect_delay * 1000);
      }
 catch (      Exception e) {
      }
    }
    BufferedReader reader=null;
    if (getConsumerState() == StreamConsumer.STATE_RUNNING) {
      DefaultHttpClient client=new DefaultHttpClient();
      try {
        HttpGet get=new HttpGet(""String_Node_Str"" + _user.getStreamBaseURL() + _definition.getHash());
        try {
          get.addHeader(""String_Node_Str"",_user.getUsername() + ""String_Node_Str"" + _user.getAPIKey());
          HttpResponse response=client.execute(get);
          int statusCode=response.getStatusLine().getStatusCode();
          if (statusCode == 200) {
            reconnect_delay=0;
            reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            while (getConsumerState() == StreamConsumer.STATE_RUNNING) {
              String line=reader.readLine();
              if (line == null) {
                break;
              }
 else               if (line.length() > 100) {
                processLine(line);
              }
            }
          }
 else           if (statusCode == 404) {
            reason=""String_Node_Str"";
            _consumer.stop();
          }
 else {
            if (reconnect_delay == 0) {
              reconnect_delay=10;
            }
 else             if (reconnect_delay < 240) {
              reconnect_delay*=2;
            }
 else {
              reason=""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase();
              _consumer.stop();
            }
          }
        }
 catch (        Exception e) {
          reason=""String_Node_Str"";
        }
 finally {
          try {
            get.abort();
            client.getConnectionManager().shutdown();
          }
 catch (          Exception e) {
          }
        }
      }
 catch (      EInvalidData e) {
        reason=e.getMessage();
        try {
          _consumer.stop();
        }
 catch (        EInvalidData eid) {
        }
      }
catch (      EAccessDenied e) {
        reason=e.getMessage();
        try {
          _consumer.stop();
        }
 catch (        EInvalidData eid) {
        }
      }
    }
    if (reason.length() == 0 && getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect) {
      if (reconnect_delay == 0) {
        reconnect_delay=1;
      }
 else       if (reconnect_delay < 16) {
        reconnect_delay++;
      }
 else {
        reason=""String_Node_Str"";
        stopConsumer();
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
 while (getConsumerState() == StreamConsumer.STATE_RUNNING && _auto_reconnect);
  if (reason.length() == 0) {
    if (getConsumerState() == StreamConsumer.STATE_STOPPING) {
      reason=""String_Node_Str"";
    }
 else {
      reason=""String_Node_Str"";
    }
  }
  onStopped(reason);
}"
44245,"/** 
 * @param source
 * @throws EInvalidData
 * @throws JSONException
 */
public Usage(String source) throws EInvalidData, JSONException {
  super(source);
  try {
    getJSONObject(""String_Node_Str"");
  }
 catch (  JSONException e) {
    _items_key=""String_Node_Str"";
  }
}","/** 
 * @param source
 * @throws EInvalidData
 * @throws JSONException
 */
public Usage(String source) throws EInvalidData, JSONException {
  super(source);
  _df=new SimpleDateFormat(""String_Node_Str"");
}"
44246,"/** 
 * Get usage data for this user.
 * @access public
 * @param int start Specifies the start of the period in which we'reinterested, or 0 for no start timestamp.
 * @param int end Specifies the end of the period in which we're interested,or 0 for no end timestamp.
 * @param String hash Specifies the stream hash in which we're interested, or an empty string for a summary of all streams.
 * @return Usage
 * @throws EAccessDenied
 * @throws EAPIError
 * @throws EInvalidData
 */
public Usage getUsage(int start,int end,String hash) throws EAPIError, EAccessDenied, EInvalidData {
  HashMap<String,String> params=new HashMap<String,String>();
  if (start != 0) {
    if (start < 0) {
      throw new EInvalidData(""String_Node_Str"");
    }
    if (end > 0 && start > end) {
      throw new EInvalidData(""String_Node_Str"");
    }
    params.put(""String_Node_Str"",Integer.toString(start));
  }
  if (end != 0) {
    if (end < 0) {
      throw new EInvalidData(""String_Node_Str"");
    }
    params.put(""String_Node_Str"",Integer.toString(end));
  }
  if (hash.length() > 0) {
    params.put(""String_Node_Str"",hash);
  }
  JSONObject res=callAPI(""String_Node_Str"",params);
  try {
    return new Usage(res.toString());
  }
 catch (  JSONException e) {
    throw new EAPIError(""String_Node_Str"" + e.toString());
  }
catch (  EInvalidData e) {
    throw new EAPIError(""String_Node_Str"" + e.toString());
  }
}","/** 
 * Get usage data for this user.
 * @access public
 * @param String period Use the final static vars in this class to specifyeither ""day"" or ""hour"".
 * @return Usage
 * @throws EAccessDenied
 * @throws EAPIError
 * @throws EInvalidData
 */
public Usage getUsage(String period) throws EAPIError, EAccessDenied, EInvalidData {
  HashMap<String,String> params=new HashMap<String,String>();
  if (period != User.USAGE_HOUR && period != User.USAGE_DAY) {
    throw new EInvalidData(""String_Node_Str"");
  }
  params.put(""String_Node_Str"",period);
  JSONObject res=callAPI(""String_Node_Str"",params);
  try {
    return new Usage(res.toString());
  }
 catch (  JSONException e) {
    throw new EAPIError(""String_Node_Str"" + e.toString());
  }
catch (  EInvalidData e) {
    throw new EAPIError(""String_Node_Str"" + e.toString());
  }
}"
44247,"@Override public void loadResource(final Resource resource) throws IOException {
  try {
    Attributes attributes=null;
    EList<EObject> contents=resource.getContents();
    XMLResource.URIHandler uriHandler=new org.eclipse.emf.ecore.xmi.impl.URIHandlerImpl();
    if (resource.getURI().hasQuery())     uriHandler.setBaseURI(resource.getURI().trimSegments(1).appendSegment(""String_Node_Str""));
 else     uriHandler.setBaseURI(resource.getURI());
    if (uri.hasQuery()) {
      NamingEnumeration<SearchResult> results=null;
      if (uri.lastSegment() == null)       results=ldapService.findUser(URI.decode(uri.query()));
 else       ldapService.find(SearchControls.SUBTREE_SCOPE,URI.decode(uri.lastSegment()),URI.decode(uri.query()));
      ECollection eCollection=ExtFactory.eINSTANCE.createECollection();
      contents.add(eCollection);
      InternalEList<EObject> values=(InternalEList<EObject>)eCollection.getValues();
      while (results.hasMore()) {
        SearchResult searchResult=results.next();
        attributes=searchResult.getAttributes();
        values.addUnique(builder.buildEObject(attributes,uriHandler,true));
      }
    }
 else {
      attributes=ldapService.getAttributes(URI.decode(uri.lastSegment()));
      contents.add(builder.buildEObject(attributes,uriHandler,false));
    }
  }
 catch (  NamingException e) {
    throw new IOException(e);
  }
}","@Override public void loadResource(final Resource resource) throws IOException {
  try {
    Attributes attributes=null;
    EList<EObject> contents=resource.getContents();
    XMLResource.URIHandler uriHandler=new org.eclipse.emf.ecore.xmi.impl.URIHandlerImpl();
    if (resource.getURI().hasQuery())     uriHandler.setBaseURI(resource.getURI().trimSegments(1).appendSegment(""String_Node_Str""));
 else     uriHandler.setBaseURI(resource.getURI());
    if (uri.hasQuery()) {
      NamingEnumeration<SearchResult> results=null;
      if (uri.lastSegment() == null)       results=ldapService.findUser(URI.decode(uri.query()));
 else       results=ldapService.find(SearchControls.SUBTREE_SCOPE,URI.decode(uri.lastSegment()),URI.decode(uri.query()));
      ECollection eCollection=ExtFactory.eINSTANCE.createECollection();
      contents.add(eCollection);
      InternalEList<EObject> values=(InternalEList<EObject>)eCollection.getValues();
      while (results.hasMore()) {
        SearchResult searchResult=results.next();
        attributes=searchResult.getAttributes();
        values.addUnique(builder.buildEObject(attributes,uriHandler,true));
      }
    }
 else {
      attributes=ldapService.getAttributes(URI.decode(uri.lastSegment()));
      contents.add(builder.buildEObject(attributes,uriHandler,false));
    }
  }
 catch (  NamingException e) {
    throw new IOException(e);
  }
}"
44248,"@Override public void repositoryRemoved(TaskRepository repository){
synchronized (providers) {
    providers.get(repository.getRepositoryUrl()).dispose();
  }
}","@Override public void repositoryRemoved(TaskRepository repository){
synchronized (providers) {
    providers.remove(repository.getRepositoryUrl()).dispose();
  }
}"
44249,"/** 
 * Find.
 * @param key the key
 * @return the t
 */
public T find(KeyType key){
  SliceQuery<Object,String,byte[]> query=HFactory.createSliceQuery(keySpace,SerializerTypeInferer.getSerializer(keyTypeClass),StringSerializer.get(),BytesArraySerializer.get());
  QueryResult<ColumnSlice<String,byte[]>> result=query.setColumnFamily(columnFamilyName).setKey(key).setRange(""String_Node_Str"",""String_Node_Str"",false,10).execute();
  try {
    if (result.get().getColumns().isEmpty()) {
      return null;
    }
  }
 catch (  Exception e) {
    return null;
  }
  try {
    Constructor<?>[] constructorsT=persistentClass.getConstructors();
    T t=null;
    if (constructorsT.length > 1) {
      if (constructorsT[0].getParameterTypes().length == 1 && constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass)) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
 else {
      if (constructorsT[0].getParameterTypes().length == 1 && (constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass) || Object.class.equals(constructorsT[0].getParameterTypes()[0]))) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
    HectorHelper.populateEntity(t,key,result);
    return t;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Find.
 * @param key the key
 * @return the t
 */
public T find(KeyType key){
  SliceQuery<Object,String,byte[]> query=HFactory.createSliceQuery(keySpace,SerializerTypeInferer.getSerializer(keyTypeClass),StringSerializer.get(),BytesArraySerializer.get());
  int columnQuerySize=100;
  QueryResult<ColumnSlice<String,byte[]>> result=query.setColumnFamily(columnFamilyName).setKey(key).setRange(""String_Node_Str"",""String_Node_Str"",false,columnQuerySize).execute();
  try {
    if (result.get().getColumns().isEmpty()) {
      return null;
    }
  }
 catch (  Exception e) {
    return null;
  }
  try {
    Constructor<?>[] constructorsT=persistentClass.getConstructors();
    T t=null;
    if (constructorsT.length > 1) {
      if (constructorsT[0].getParameterTypes().length == 1 && constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass)) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
 else {
      if (constructorsT[0].getParameterTypes().length == 1 && (constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass) || Object.class.equals(constructorsT[0].getParameterTypes()[0]))) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
    HectorHelper.populateEntity(t,key,result);
    return t;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
44250,"@Override public HConsistencyLevel get(OperationType op,String cfName){
switch (op) {
case READ:
    return HConsistencyLevel.QUORUM;
case WRITE:
  return HConsistencyLevel.ONE;
}
return HConsistencyLevel.ONE;
}","@Override public HConsistencyLevel get(OperationType op,String cfName){
switch (op) {
case READ:
    return HConsistencyLevel.QUORUM;
case WRITE:
  return HConsistencyLevel.QUORUM;
}
return HConsistencyLevel.QUORUM;
}"
44251,"public final void method245(int i,int j,int k,int l,int i1,int j1,int k1){
  if (i1 >= 50000) {
    _mudclient.method71(i,j,k,l,i1 - 50000,j1,k1);
    return;
  }
  if (i1 >= 40000) {
    _mudclient.method68(i,j,k,l,i1 - 40000,j1,k1);
    return;
  }
  if (i1 >= 20000) {
    _mudclient.method45(i,j,k,l,i1 - 20000,j1,k1);
    return;
  }
  if (i1 >= 5000) {
    _mudclient.method52(i,j,k,l,i1 - 5000,j1,k1);
    return;
  }
  super.spriteClip1(i,j,k,l,i1);
}","public final void method245(int i,int j,int k,int l,int i1,int j1,int k1){
  if (i1 == 39999)   i1++;
  if (i1 >= 50000) {
    _mudclient.method71(i,j,k,l,i1 - 50000,j1,k1);
    return;
  }
  if (i1 >= 40000) {
    _mudclient.method68(i,j,k,l,i1 - 40000,j1,k1);
    return;
  }
  if (i1 >= 20000) {
    _mudclient.method45(i,j,k,l,i1 - 20000,j1,k1);
    return;
  }
  if (i1 >= 5000) {
    _mudclient.method52(i,j,k,l,i1 - 5000,j1,k1);
    return;
  }
  super.spriteClip1(i,j,k,l,i1);
}"
44252,"protected final void handleIncomingPacket(int command,int length,byte data[]){
  try {
    if (command == 254) {
      int bar=DataOperations.getUnsigned4Bytes(data,1);
      if (bar == -1) {
        smithingscreen.isVisible=false;
      }
 else {
        SmithingScreen.changeItems(smithingscreen,bar);
        smithingscreen.isVisible=true;
      }
    }
    if (command == 231) {
      return;
    }
    if (command == 233) {
      questPoints=DataOperations.getUnsignedByte(data[1]);
      int k=DataOperations.getUnsignedByte(data[2]);
      int r=3;
      newQuestNames=new String[k];
      questStage=new byte[k];
      for (int i=0; i < k; i++) {
        int uid=DataOperations.getUnsignedByte(data[r]);
        r++;
        newQuestNames[i]=questName[uid];
        questStage[i]=(byte)DataOperations.getUnsignedByte(data[r]);
        r++;
      }
    }
    if (command == 110) {
      int i=1;
      serverStartTime=DataOperations.getUnsigned8Bytes(data,i);
      i+=8;
      serverLocation=new String(data,i,length - i);
      return;
    }
    if (command == 145) {
      if (!hasWorldInfo) {
        return;
      }
      loading=true;
      lastPlayerCount=playerCount;
      for (int k=0; k < lastPlayerCount; k++)       lastPlayerArray[k]=playerArray[k];
      int currentOffset=8;
      setSectionX(DataOperations.getIntFromByteArray(data,currentOffset,11));
      currentOffset+=11;
      setSectionY(DataOperations.getIntFromByteArray(data,currentOffset,13));
      currentOffset+=13;
      int mobSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
      currentOffset+=4;
      boolean sectionLoaded=loadSection(getSectionX(),getSectionY());
      setSectionX(getSectionX() - getAreaX());
      setSectionY(getSectionY() - getAreaY());
      int mapEnterX=getSectionX() * magicLoc + 64;
      int mapEnterY=getSectionY() * magicLoc + 64;
      if (sectionLoaded) {
        ourPlayer.waypointCurrent=0;
        ourPlayer.waypointEndSprite=0;
        ourPlayer.currentX=ourPlayer.waypointsX[0]=mapEnterX;
        ourPlayer.currentY=ourPlayer.waypointsY[0]=mapEnterY;
      }
      playerCount=0;
      ourPlayer=makePlayer(serverIndex,mapEnterX,mapEnterY,mobSprite);
      int newPlayerCount=DataOperations.getIntFromByteArray(data,currentOffset,8);
      currentOffset+=8;
      for (int currentNewPlayer=0; currentNewPlayer < newPlayerCount; currentNewPlayer++) {
        Mob lastMob=getLastPlayer(DataOperations.getIntFromByteArray(data,currentOffset,16));
        currentOffset+=16;
        int nextPlayer=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        if (nextPlayer != 0) {
          int waypointsLeft=DataOperations.getIntFromByteArray(data,currentOffset,1);
          currentOffset++;
          if (waypointsLeft == 0) {
            int currentNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,3);
            currentOffset+=3;
            int currentWaypoint=lastMob.waypointCurrent;
            int newWaypointX=lastMob.waypointsX[currentWaypoint];
            int newWaypointY=lastMob.waypointsY[currentWaypoint];
            if (currentNextSprite == 2 || currentNextSprite == 1 || currentNextSprite == 3)             newWaypointX+=magicLoc;
            if (currentNextSprite == 6 || currentNextSprite == 5 || currentNextSprite == 7)             newWaypointX-=magicLoc;
            if (currentNextSprite == 4 || currentNextSprite == 3 || currentNextSprite == 5)             newWaypointY+=magicLoc;
            if (currentNextSprite == 0 || currentNextSprite == 1 || currentNextSprite == 7)             newWaypointY-=magicLoc;
            lastMob.nextSprite=currentNextSprite;
            lastMob.waypointCurrent=currentWaypoint=(currentWaypoint + 1) % 10;
            lastMob.waypointsX[currentWaypoint]=newWaypointX;
            lastMob.waypointsY[currentWaypoint]=newWaypointY;
          }
 else {
            int needsNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
            currentOffset+=4;
            if ((needsNextSprite & 0xc) == 12) {
              continue;
            }
            lastMob.nextSprite=needsNextSprite;
          }
        }
        playerArray[playerCount++]=lastMob;
      }
      int mobCount=0;
      while (currentOffset + 24 < length * 8) {
        int mobIndex=DataOperations.getIntFromByteArray(data,currentOffset,16);
        currentOffset+=16;
        int areaMobX=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobX > 15)         areaMobX-=32;
        int areaMobY=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobY > 15)         areaMobY-=32;
        int mobArrayMobID=DataOperations.getIntFromByteArray(data,currentOffset,4);
        currentOffset+=4;
        int addIndex=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        int mobX=(getSectionX() + areaMobX) * magicLoc + 64;
        int mobY=(getSectionY() + areaMobY) * magicLoc + 64;
        makePlayer(mobIndex,mobX,mobY,mobArrayMobID);
        if (addIndex == 0)         mobArrayIndexes[mobCount++]=mobIndex;
      }
      if (mobCount > 0) {
        super.streamClass.createPacket(83);
        super.streamClass.add2ByteInt(mobCount);
        for (int currentMob=0; currentMob < mobCount; currentMob++) {
          Mob dummyMob=mobArray[mobArrayIndexes[currentMob]];
          super.streamClass.add2ByteInt(dummyMob.serverIndex);
          super.streamClass.add2ByteInt(dummyMob.mobIntUnknown);
        }
        super.streamClass.formatPacket();
        mobCount=0;
      }
      loading=false;
      return;
    }
    if (command == 109) {
      for (int l=1; l < length; )       if (DataOperations.getUnsignedByte(data[l]) == 255) {
        int newCount=0;
        int newSectionX=getSectionX() + data[l + 1] >> 3;
        int newSectionY=getSectionY() + data[l + 2] >> 3;
        l+=3;
        for (int groundItem=0; groundItem < groundItemCount; groundItem++) {
          int newX=(groundItemX[groundItem] >> 3) - newSectionX;
          int newY=(groundItemY[groundItem] >> 3) - newSectionY;
          if (newX != 0 || newY != 0) {
            if (groundItem != newCount) {
              groundItemX[newCount]=groundItemX[groundItem];
              groundItemY[newCount]=groundItemY[groundItem];
              groundItemType[newCount]=groundItemType[groundItem];
              groundItemObjectVar[newCount]=groundItemObjectVar[groundItem];
            }
            newCount++;
          }
        }
        groundItemCount=newCount;
      }
 else {
        int i8=DataOperations.getUnsigned2Bytes(data,l);
        l+=2;
        int k14=getSectionX() + data[l++];
        int j19=getSectionY() + data[l++];
        if ((i8 & 0x8000) == 0) {
          groundItemX[groundItemCount]=k14;
          groundItemY[groundItemCount]=j19;
          groundItemType[groundItemCount]=i8;
          groundItemObjectVar[groundItemCount]=0;
          for (int k23=0; k23 < objectCount; k23++) {
            if (objectX[k23] != k14 || objectY[k23] != j19)             continue;
            groundItemObjectVar[groundItemCount]=EntityHandler.getObjectDef(objectType[k23]).getGroundItemVar();
            break;
          }
          groundItemCount++;
        }
 else {
          i8&=0x7fff;
          int l23=0;
          for (int k26=0; k26 < groundItemCount; k26++) {
            if (groundItemX[k26] != k14 || groundItemY[k26] != j19 || groundItemType[k26] != i8) {
              if (k26 != l23) {
                groundItemX[l23]=groundItemX[k26];
                groundItemY[l23]=groundItemY[k26];
                groundItemType[l23]=groundItemType[k26];
                groundItemObjectVar[l23]=groundItemObjectVar[k26];
              }
              l23++;
            }
 else {
              i8=-123;
            }
          }
          groundItemCount=l23;
        }
      }
      return;
    }
    if (command == 27) {
      for (int i1=1; i1 < length; )       if (DataOperations.getUnsignedByte(data[i1]) == 255) {
        int j8=0;
        int l14=getSectionX() + data[i1 + 1] >> 3;
        int k19=getSectionY() + data[i1 + 2] >> 3;
        i1+=3;
        for (int i24=0; i24 < objectCount; i24++) {
          int l26=(objectX[i24] >> 3) - l14;
          int k29=(objectY[i24] >> 3) - k19;
          if (l26 != 0 || k29 != 0) {
            if (i24 != j8) {
              objectModelArray[j8]=objectModelArray[i24];
              objectModelArray[j8].anInt257=j8;
              objectX[j8]=objectX[i24];
              objectY[j8]=objectY[i24];
              objectType[j8]=objectType[i24];
              objectID[j8]=objectID[i24];
            }
            j8++;
          }
 else {
            gameCamera.removeModel(objectModelArray[i24]);
            engineHandle.updateObject(objectX[i24],objectY[i24],objectType[i24],objectID[i24]);
          }
        }
        objectCount=j8;
      }
 else {
        int k8=DataOperations.getUnsigned2Bytes(data,i1);
        i1+=2;
        int i15=getSectionX() + data[i1++];
        int l19=getSectionY() + data[i1++];
        int l29=data[i1++];
        int j24=0;
        for (int i27=0; i27 < objectCount; i27++)         if (objectX[i27] != i15 || objectY[i27] != l19 || objectID[i27] != l29) {
          if (i27 != j24) {
            objectModelArray[j24]=objectModelArray[i27];
            objectModelArray[j24].anInt257=j24;
            objectX[j24]=objectX[i27];
            objectY[j24]=objectY[i27];
            objectType[j24]=objectType[i27];
            objectID[j24]=objectID[i27];
          }
          j24++;
        }
 else {
          gameCamera.removeModel(objectModelArray[i27]);
          engineHandle.updateObject(objectX[i27],objectY[i27],objectType[i27],objectID[i27]);
        }
        objectCount=j24;
        if (k8 != 60000) {
          engineHandle.registerObjectDir(i15,l19,l29);
          int i34;
          int j37;
          if (l29 == 0 || l29 == 4) {
            i34=EntityHandler.getObjectDef(k8).getWidth();
            j37=EntityHandler.getObjectDef(k8).getHeight();
          }
 else {
            j37=EntityHandler.getObjectDef(k8).getWidth();
            i34=EntityHandler.getObjectDef(k8).getHeight();
          }
          int j40=((i15 + i15 + i34) * magicLoc) / 2;
          int i42=((l19 + l19 + j37) * magicLoc) / 2;
          int k43=EntityHandler.getObjectDef(k8).modelID;
          Model model_1=gameDataModels[k43].method203();
          gameCamera.addModel(model_1);
          model_1.anInt257=objectCount;
          model_1.method188(0,l29 * 32,0);
          model_1.method190(j40,-engineHandle.getAveragedElevation(j40,i42),i42);
          model_1.method184(true,48,48,-50,-10,-50);
          engineHandle.method412(i15,l19,k8,l29);
          if (k8 == 74)           model_1.method190(0,-480,0);
          objectX[objectCount]=i15;
          objectY[objectCount]=l19;
          objectType[objectCount]=k8;
          objectID[objectCount]=l29;
          objectModelArray[objectCount++]=model_1;
        }
      }
      return;
    }
    if (command == 114) {
      int invOffset=1;
      inventoryCount=data[invOffset++] & 0xff;
      for (int invItem=0; invItem < inventoryCount; invItem++) {
        int j15=DataOperations.getUnsigned2Bytes(data,invOffset);
        invOffset+=2;
        getInventoryItems()[invItem]=(j15 & 0x7fff);
        wearing[invItem]=j15 / 32768;
        if (EntityHandler.getItemDef(j15 & 0x7fff).isStackable()) {
          inventoryItemsCount[invItem]=DataOperations.readInt(data,invOffset);
          invOffset+=4;
        }
 else {
          inventoryItemsCount[invItem]=1;
        }
      }
      return;
    }
    if (command == 53) {
      int mobCount=DataOperations.getUnsigned2Bytes(data,1);
      int mobUpdateOffset=3;
      for (int currentMob=0; currentMob < mobCount; currentMob++) {
        int mobArrayIndex=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
        mobUpdateOffset+=2;
        if (mobArrayIndex < 0 || mobArrayIndex > mobArray.length) {
          return;
        }
        Mob mob=mobArray[mobArrayIndex];
        if (mob == null) {
          return;
        }
        byte mobUpdateType=data[mobUpdateOffset++];
        if (mobUpdateType == 0) {
          int i30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.anInt163=150;
            mob.anInt162=i30;
          }
        }
 else         if (mobUpdateType == 1) {
          byte byte7=data[mobUpdateOffset++];
          if (mob != null) {
            String s2=DataConversions.byteToString(data,mobUpdateOffset,byte7);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s2;
            displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,2,mob.admin);
          }
          mobUpdateOffset+=byte7;
        }
 else         if (mobUpdateType == 2) {
          int j30=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hits=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hitsBase=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          if (mob != null) {
            mob.anInt164=j30;
            mob.hitPointsCurrent=hits;
            mob.hitPointsBase=hitsBase;
            mob.combatTimer=200;
            if (mob == ourPlayer) {
              playerStatCurrent[3]=hits;
              playerStatBase[3]=hitsBase;
              showWelcomeBox=false;
            }
          }
        }
 else         if (mobUpdateType == 3) {
          int k30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int k34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=k30;
            mob.attackingNpcIndex=k34;
            mob.attackingMobIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 4) {
          int l30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int l34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=l30;
            mob.attackingMobIndex=l34;
            mob.attackingNpcIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 5) {
          if (mob != null) {
            mob.mobIntUnknown=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=2;
            mob.nameLong=DataOperations.getUnsigned8Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=8;
            mob.name=DataOperations.longToString(mob.nameLong);
            int i31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset++;
            for (int i35=0; i35 < i31; i35++) {
              mob.animationCount[i35]=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
              mobUpdateOffset++;
            }
            for (int l37=i31; l37 < 12; l37++)             mob.animationCount[l37]=0;
            mob.colourHairType=data[mobUpdateOffset++] & 0xff;
            mob.colourTopType=data[mobUpdateOffset++] & 0xff;
            mob.colourBottomType=data[mobUpdateOffset++] & 0xff;
            mob.colourSkinType=data[mobUpdateOffset++] & 0xff;
            mob.level=data[mobUpdateOffset++] & 0xff;
            mob.anInt179=data[mobUpdateOffset++] & 0xff;
            mob.admin=data[mobUpdateOffset++] & 0xff;
          }
 else {
            mobUpdateOffset+=14;
            int j31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset+=j31 + 1;
          }
        }
 else         if (mobUpdateType == 6) {
          byte byte8=data[mobUpdateOffset];
          mobUpdateOffset++;
          if (mob != null) {
            String s3=DataConversions.byteToString(data,mobUpdateOffset,byte8);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s3;
            if (mob == ourPlayer)             displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,5,mob.admin);
          }
          mobUpdateOffset+=byte8;
        }
      }
      return;
    }
    if (command == 129) {
      combatStyle=DataOperations.getUnsignedByte(data[1]);
      return;
    }
    if (command == 95) {
      for (int l1=1; l1 < length; )       if (DataOperations.getUnsignedByte(data[l1]) == 255) {
        int j9=0;
        int l15=getSectionX() + data[l1 + 1] >> 3;
        int j20=getSectionY() + data[l1 + 2] >> 3;
        l1+=3;
        for (int currentDoor=0; currentDoor < doorCount; currentDoor++) {
          int j27=(doorX[currentDoor] >> 3) - l15;
          int k31=(doorY[currentDoor] >> 3) - j20;
          if (j27 != 0 || k31 != 0) {
            if (currentDoor != j9) {
              doorModel[j9]=doorModel[currentDoor];
              doorModel[j9].anInt257=j9 + 10000;
              doorX[j9]=doorX[currentDoor];
              doorY[j9]=doorY[currentDoor];
              doorDirection[j9]=doorDirection[currentDoor];
              doorType[j9]=doorType[currentDoor];
            }
            j9++;
          }
 else {
            gameCamera.removeModel(doorModel[currentDoor]);
            engineHandle.updateDoor(doorX[currentDoor],doorY[currentDoor],doorDirection[currentDoor],doorType[currentDoor]);
          }
        }
        doorCount=j9;
      }
 else {
        int k9=DataOperations.getUnsigned2Bytes(data,l1);
        l1+=2;
        int i16=getSectionX() + data[l1++];
        int k20=getSectionY() + data[l1++];
        byte byte5=data[l1++];
        int k27=0;
        for (int l31=0; l31 < doorCount; l31++)         if (doorX[l31] != i16 || doorY[l31] != k20 || doorDirection[l31] != byte5) {
          if (l31 != k27) {
            doorModel[k27]=doorModel[l31];
            doorModel[k27].anInt257=k27 + 10000;
            doorX[k27]=doorX[l31];
            doorY[k27]=doorY[l31];
            doorDirection[k27]=doorDirection[l31];
            doorType[k27]=doorType[l31];
          }
          k27++;
        }
 else {
          gameCamera.removeModel(doorModel[l31]);
          engineHandle.updateDoor(doorX[l31],doorY[l31],doorDirection[l31],doorType[l31]);
        }
        doorCount=k27;
        if (k9 != 60000) {
          engineHandle.method408(i16,k20,byte5,k9);
          Model model=makeModel(i16,k20,byte5,k9,doorCount);
          doorModel[doorCount]=model;
          doorX[doorCount]=i16;
          doorY[doorCount]=k20;
          doorType[doorCount]=k9;
          doorDirection[doorCount++]=byte5;
        }
      }
      return;
    }
    if (command == 77) {
      lastNpcCount=npcCount;
      npcCount=0;
      for (int lastNpcIndex=0; lastNpcIndex < lastNpcCount; lastNpcIndex++)       lastNpcArray[lastNpcIndex]=npcArray[lastNpcIndex];
      int newNpcOffset=8;
      int newNpcCount=DataOperations.getIntFromByteArray(data,newNpcOffset,8);
      newNpcOffset+=8;
      for (int newNpcIndex=0; newNpcIndex < newNpcCount; newNpcIndex++) {
        Mob newNPC=getLastNpc(DataOperations.getIntFromByteArray(data,newNpcOffset,16));
        newNpcOffset+=16;
        int npcNeedsUpdate=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
        newNpcOffset++;
        if (npcNeedsUpdate != 0) {
          int i32=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
          newNpcOffset++;
          if (i32 == 0) {
            int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,3);
            newNpcOffset+=3;
            int waypointCurrent=newNPC.waypointCurrent;
            int waypointX=newNPC.waypointsX[waypointCurrent];
            int waypointY=newNPC.waypointsY[waypointCurrent];
            if (nextSprite == 2 || nextSprite == 1 || nextSprite == 3)             waypointX+=magicLoc;
            if (nextSprite == 6 || nextSprite == 5 || nextSprite == 7)             waypointX-=magicLoc;
            if (nextSprite == 4 || nextSprite == 3 || nextSprite == 5)             waypointY+=magicLoc;
            if (nextSprite == 0 || nextSprite == 1 || nextSprite == 7)             waypointY-=magicLoc;
            newNPC.nextSprite=nextSprite;
            newNPC.waypointCurrent=waypointCurrent=(waypointCurrent + 1) % 10;
            newNPC.waypointsX[waypointCurrent]=waypointX;
            newNPC.waypointsY[waypointCurrent]=waypointY;
          }
 else {
            int nextSpriteOffset=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
            newNpcOffset+=4;
            if ((nextSpriteOffset & 0xc) == 12) {
              continue;
            }
            newNPC.nextSprite=nextSpriteOffset;
          }
        }
        npcArray[npcCount++]=newNPC;
      }
      while (newNpcOffset + 34 < length * 8) {
        int serverIndex=DataOperations.getIntFromByteArray(data,newNpcOffset,16);
        newNpcOffset+=16;
        int i28=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (i28 > 15)         i28-=32;
        int j32=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (j32 > 15)         j32-=32;
        int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
        newNpcOffset+=4;
        int x=(getSectionX() + i28) * magicLoc + 64;
        int y=(getSectionY() + j32) * magicLoc + 64;
        int type=DataOperations.getIntFromByteArray(data,newNpcOffset,10);
        newNpcOffset+=10;
        if (type >= EntityHandler.npcCount())         type=24;
        addNPC(serverIndex,x,y,nextSprite,type);
      }
      return;
    }
    if (command == 190) {
      int j2=DataOperations.getUnsigned2Bytes(data,1);
      int i10=3;
      for (int k16=0; k16 < j2; k16++) {
        int i21=DataOperations.getUnsigned2Bytes(data,i10);
        i10+=2;
        Mob mob_2=npcRecordArray[i21];
        int j28=DataOperations.getUnsignedByte(data[i10]);
        i10++;
        if (j28 == 1) {
          int k32=DataOperations.getUnsigned2Bytes(data,i10);
          i10+=2;
          byte byte9=data[i10];
          i10++;
          if (mob_2 != null) {
            String s4=DataConversions.byteToString(data,i10,byte9);
            mob_2.lastMessageTimeout=150;
            mob_2.lastMessage=s4;
            if (k32 == ourPlayer.serverIndex)             displayMessage(""String_Node_Str"" + EntityHandler.getNpcDef(mob_2.type).getName() + ""String_Node_Str""+ mob_2.lastMessage,5,0);
          }
          i10+=byte9;
        }
 else         if (j28 == 2) {
          int l32=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int i36=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int k38=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          if (mob_2 != null) {
            mob_2.anInt164=l32;
            mob_2.hitPointsCurrent=i36;
            mob_2.hitPointsBase=k38;
            mob_2.combatTimer=200;
          }
        }
      }
      return;
    }
    if (command == 223) {
      showQuestionMenu=true;
      int newQuestionMenuCount=DataOperations.getUnsignedByte(data[1]);
      questionMenuCount=newQuestionMenuCount;
      int newQuestionMenuOffset=2;
      for (int l16=0; l16 < newQuestionMenuCount; l16++) {
        int newQuestionMenuQuestionLength=DataOperations.getUnsignedByte(data[newQuestionMenuOffset]);
        newQuestionMenuOffset++;
        questionMenuAnswer[l16]=new String(data,newQuestionMenuOffset,newQuestionMenuQuestionLength);
        newQuestionMenuOffset+=newQuestionMenuQuestionLength;
      }
      return;
    }
    if (command == 127) {
      showQuestionMenu=false;
      return;
    }
    if (command == 131) {
      needsClear=true;
      notInWilderness=true;
      hasWorldInfo=true;
      serverIndex=DataOperations.getUnsigned2Bytes(data,1);
      wildX=DataOperations.getUnsigned2Bytes(data,3);
      wildY=DataOperations.getUnsigned2Bytes(data,5);
      wildYSubtract=DataOperations.getUnsigned2Bytes(data,7);
      wildYMultiplier=DataOperations.getUnsigned2Bytes(data,9);
      wildY-=wildYSubtract * wildYMultiplier;
      return;
    }
    if (command == 180) {
      int l2=1;
      for (int k10=0; k10 < 18; k10++) {
        playerStatCurrent[k10]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int i17=0; i17 < 18; i17++) {
        playerStatBase[i17]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int k21=0; k21 < 18; k21++) {
        playerStatExperience[k21]=DataOperations.readInt(data,l2);
        l2+=4;
      }
      expGained=0;
      return;
    }
    if (command == 177) {
      int i3=1;
      for (int x=0; x < 6; x++) {
        equipmentStatus[x]=DataOperations.getSigned2Bytes(data,i3);
        i3+=2;
      }
      return;
    }
    if (command == 165) {
      playerAliveTimeout=250;
      return;
    }
    if (command == 115) {
      int thingLength=(length - 1) / 4;
      for (int currentThing=0; currentThing < thingLength; currentThing++) {
        int currentItemSectionX=getSectionX() + DataOperations.getSigned2Bytes(data,1 + currentThing * 4) >> 3;
        int currentItemSectionY=getSectionY() + DataOperations.getSigned2Bytes(data,3 + currentThing * 4) >> 3;
        int currentCount=0;
        for (int currentItem=0; currentItem < groundItemCount; currentItem++) {
          int currentItemOffsetX=(groundItemX[currentItem] >> 3) - currentItemSectionX;
          int currentItemOffsetY=(groundItemY[currentItem] >> 3) - currentItemSectionY;
          if (currentItemOffsetX != 0 || currentItemOffsetY != 0) {
            if (currentItem != currentCount) {
              groundItemX[currentCount]=groundItemX[currentItem];
              groundItemY[currentCount]=groundItemY[currentItem];
              groundItemType[currentCount]=groundItemType[currentItem];
              groundItemObjectVar[currentCount]=groundItemObjectVar[currentItem];
            }
            currentCount++;
          }
        }
        groundItemCount=currentCount;
        currentCount=0;
        for (int j33=0; j33 < objectCount; j33++) {
          int k36=(objectX[j33] >> 3) - currentItemSectionX;
          int l38=(objectY[j33] >> 3) - currentItemSectionY;
          if (k36 != 0 || l38 != 0) {
            if (j33 != currentCount) {
              objectModelArray[currentCount]=objectModelArray[j33];
              objectModelArray[currentCount].anInt257=currentCount;
              objectX[currentCount]=objectX[j33];
              objectY[currentCount]=objectY[j33];
              objectType[currentCount]=objectType[j33];
              objectID[currentCount]=objectID[j33];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(objectModelArray[j33]);
            engineHandle.updateObject(objectX[j33],objectY[j33],objectType[j33],objectID[j33]);
          }
        }
        objectCount=currentCount;
        currentCount=0;
        for (int l36=0; l36 < doorCount; l36++) {
          int i39=(doorX[l36] >> 3) - currentItemSectionX;
          int j41=(doorY[l36] >> 3) - currentItemSectionY;
          if (i39 != 0 || j41 != 0) {
            if (l36 != currentCount) {
              doorModel[currentCount]=doorModel[l36];
              doorModel[currentCount].anInt257=currentCount + 10000;
              doorX[currentCount]=doorX[l36];
              doorY[currentCount]=doorY[l36];
              doorDirection[currentCount]=doorDirection[l36];
              doorType[currentCount]=doorType[l36];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(doorModel[l36]);
            engineHandle.updateDoor(doorX[l36],doorY[l36],doorDirection[l36],doorType[l36]);
          }
        }
        doorCount=currentCount;
      }
      return;
    }
    if (command == 230) {
      showDrawPointsScreen=true;
      int pkbytes=1;
      pkatk=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkdef=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkstr=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkrange=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkmagic=DataOperations.readInt(data,pkbytes);
    }
    if (command == 207) {
      showCharacterLookScreen=true;
      return;
    }
    if (command == 4) {
      int currentMob=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[currentMob] != null)       tradeOtherPlayerName=mobArray[currentMob].name;
      showTradeWindow=true;
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      tradeMyItemCount=0;
      tradeOtherItemCount=0;
      return;
    }
    if (command == 187) {
      showTradeWindow=false;
      showTradeConfirmWindow=false;
      return;
    }
    if (command == 250) {
      tradeOtherItemCount=data[1] & 0xff;
      int l3=2;
      for (int i11=0; i11 < tradeOtherItemCount; i11++) {
        tradeOtherItems[i11]=DataOperations.getUnsigned2Bytes(data,l3);
        l3+=2;
        tradeOtherItemsCount[i11]=DataOperations.readInt(data,l3);
        l3+=4;
      }
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      return;
    }
    if (command == 92) {
      tradeOtherAccepted=data[1] == 1;
    }
    if (command == 253) {
      showShop=true;
      int i4=1;
      int j11=data[i4++] & 0xff;
      byte byte4=data[i4++];
      shopItemSellPriceModifier=data[i4++] & 0xff;
      shopItemBuyPriceModifier=data[i4++] & 0xff;
      for (int i22=0; i22 < 40; i22++)       shopItems[i22]=-1;
      for (int j25=0; j25 < j11; j25++) {
        shopItems[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemCount[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemsBuyPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
        shopItemsSellPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
      }
      if (byte4 == 1) {
        int l28=39;
        for (int k33=0; k33 < inventoryCount; k33++) {
          if (l28 < j11)           break;
          boolean flag2=false;
          for (int j39=0; j39 < 40; j39++) {
            if (shopItems[j39] != getInventoryItems()[k33])             continue;
            flag2=true;
            break;
          }
          if (getInventoryItems()[k33] == 10)           flag2=true;
          if (!flag2) {
            shopItems[l28]=getInventoryItems()[k33] & 0x7fff;
            shopItemsSellPrice[l28]=EntityHandler.getItemDef(shopItems[l28]).basePrice - (int)(EntityHandler.getItemDef(shopItems[l28]).basePrice / 2.5);
            shopItemsSellPrice[l28]=shopItemsSellPrice[l28] - (int)(shopItemsSellPrice[l28] * 0.10);
            shopItemCount[l28]=0;
            l28--;
          }
        }
      }
      if (selectedShopItemIndex >= 0 && selectedShopItemIndex < 40 && shopItems[selectedShopItemIndex] != selectedShopItemType) {
        selectedShopItemIndex=-1;
        selectedShopItemType=-2;
      }
      return;
    }
    if (command == 220) {
      showShop=false;
      return;
    }
    if (command == 18) {
      tradeWeAccepted=data[1] == 1;
    }
    if (command == 152) {
      configAutoCameraAngle=DataOperations.getUnsignedByte(data[1]) == 1;
      configMouseButtons=DataOperations.getUnsignedByte(data[2]) == 1;
      configSoundEffects=DataOperations.getUnsignedByte(data[3]) == 1;
      showRoof=DataOperations.getUnsignedByte(data[4]) == 1;
      autoScreenshot=DataOperations.getUnsignedByte(data[5]) == 1;
      combatWindow=DataOperations.getUnsignedByte(data[6]) == 1;
      return;
    }
    if (command == 209) {
      for (int currentPrayer=0; currentPrayer < length - 1; currentPrayer++) {
        boolean prayerOff=data[currentPrayer + 1] == 1;
        if (!prayerOn[currentPrayer] && prayerOff)         playSound(""String_Node_Str"");
        if (prayerOn[currentPrayer] && !prayerOff)         playSound(""String_Node_Str"");
        prayerOn[currentPrayer]=prayerOff;
      }
      return;
    }
    if (command == 93) {
      showBank=true;
      int l4=1;
      newBankItemCount=data[l4++] & 0xff;
      bankItemsMax=data[l4++] & 0xff;
      for (int k11=0; k11 < newBankItemCount; k11++) {
        newBankItems[k11]=DataOperations.getUnsigned2Bytes(data,l4);
        l4+=2;
        newBankItemsCount[k11]=DataOperations.getUnsigned4Bytes(data,l4);
        l4+=4;
      }
      updateBankItems();
      return;
    }
    if (command == 171) {
      showBank=false;
      return;
    }
    if (command == 211) {
      int idx=data[1] & 0xFF;
      int oldExp=playerStatExperience[idx];
      playerStatExperience[idx]=DataOperations.readInt(data,2);
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 229) {
      int j5=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[j5] != null) {
        duelOpponentName=mobArray[j5].name;
      }
      showDuelWindow=true;
      duelMyItemCount=0;
      duelOpponentItemCount=0;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      duelNoRetreating=false;
      duelNoMagic=false;
      duelNoPrayer=false;
      duelNoWeapons=false;
      return;
    }
    if (command == 160) {
      showDuelWindow=false;
      showDuelConfirmWindow=false;
      return;
    }
    if (command == 251) {
      showTradeConfirmWindow=true;
      tradeConfirmAccepted=false;
      showTradeWindow=false;
      int k5=1;
      tradeConfirmOtherNameLong=DataOperations.getUnsigned8Bytes(data,k5);
      k5+=8;
      tradeConfirmOtherItemCount=data[k5++] & 0xff;
      for (int l11=0; l11 < tradeConfirmOtherItemCount; l11++) {
        tradeConfirmOtherItems[l11]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmOtherItemsCount[l11]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      tradeConfirmItemCount=data[k5++] & 0xff;
      for (int k17=0; k17 < tradeConfirmItemCount; k17++) {
        tradeConfirmItems[k17]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmItemsCount[k17]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      return;
    }
    if (command == 63) {
      duelOpponentItemCount=data[1] & 0xff;
      int l5=2;
      for (int i12=0; i12 < duelOpponentItemCount; i12++) {
        duelOpponentItems[i12]=DataOperations.getUnsigned2Bytes(data,l5);
        l5+=2;
        duelOpponentItemsCount[i12]=DataOperations.readInt(data,l5);
        l5+=4;
      }
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 198) {
      duelNoRetreating=data[1] == 1;
      duelNoMagic=data[2] == 1;
      duelNoPrayer=data[3] == 1;
      duelNoWeapons=data[4] == 1;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 139) {
      int bankDataOffset=1;
      int bankSlot=data[bankDataOffset++] & 0xff;
      int bankItemId=DataOperations.getUnsigned2Bytes(data,bankDataOffset);
      bankDataOffset+=2;
      int bankItemCount=DataOperations.getUnsigned4Bytes(data,bankDataOffset);
      bankDataOffset+=4;
      if (bankItemCount == 0) {
        newBankItemCount--;
        for (int currentBankSlot=bankSlot; currentBankSlot < newBankItemCount; currentBankSlot++) {
          newBankItems[currentBankSlot]=newBankItems[currentBankSlot + 1];
          newBankItemsCount[currentBankSlot]=newBankItemsCount[currentBankSlot + 1];
        }
      }
 else {
        newBankItems[bankSlot]=bankItemId;
        newBankItemsCount[bankSlot]=bankItemCount;
        if (bankSlot >= newBankItemCount)         newBankItemCount=bankSlot + 1;
      }
      updateBankItems();
      return;
    }
    if (command == 228) {
      int j6=1;
      int k12=1;
      int i18=data[j6++] & 0xff;
      int k22=DataOperations.getUnsigned2Bytes(data,j6);
      j6+=2;
      if (EntityHandler.getItemDef(k22 & 0x7fff).isStackable()) {
        k12=DataOperations.readInt(data,j6);
        j6+=4;
      }
      getInventoryItems()[i18]=k22 & 0x7fff;
      wearing[i18]=k22 / 32768;
      inventoryItemsCount[i18]=k12;
      if (i18 >= inventoryCount)       inventoryCount=i18 + 1;
      return;
    }
    if (command == 191) {
      int k6=data[1] & 0xff;
      inventoryCount--;
      for (int l12=k6; l12 < inventoryCount; l12++) {
        getInventoryItems()[l12]=getInventoryItems()[l12 + 1];
        inventoryItemsCount[l12]=inventoryItemsCount[l12 + 1];
        wearing[l12]=wearing[l12 + 1];
      }
      return;
    }
    if (command == 208) {
      int pointer=1;
      int idx=data[pointer++] & 0xff;
      int oldExp=playerStatExperience[idx];
      playerStatCurrent[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatBase[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatExperience[idx]=DataOperations.readInt(data,pointer);
      pointer+=4;
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 65) {
      duelOpponentAccepted=data[1] == 1;
    }
    if (command == 197) {
      duelMyAccepted=data[1] == 1;
    }
    if (command == 147) {
      showDuelConfirmWindow=true;
      duelWeAccept=false;
      showDuelWindow=false;
      int i7=1;
      duelOpponentNameLong=DataOperations.getUnsigned8Bytes(data,i7);
      i7+=8;
      duelConfirmOpponentItemCount=data[i7++] & 0xff;
      for (int j13=0; j13 < duelConfirmOpponentItemCount; j13++) {
        duelConfirmOpponentItems[j13]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmOpponentItemsCount[j13]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelConfirmMyItemCount=data[i7++] & 0xff;
      for (int j18=0; j18 < duelConfirmMyItemCount; j18++) {
        duelConfirmMyItems[j18]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmMyItemsCount[j18]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelCantRetreat=data[i7++] & 0xff;
      duelUseMagic=data[i7++] & 0xff;
      duelUsePrayer=data[i7++] & 0xff;
      duelUseWeapons=data[i7++] & 0xff;
      return;
    }
    if (command == 11) {
      String s=new String(data,1,length - 1);
      playSound(s);
      return;
    }
    if (command == 23) {
      if (anInt892 < 50) {
        int j7=data[1] & 0xff;
        int k13=data[2] + getSectionX();
        int k18=data[3] + getSectionY();
        anIntArray782[anInt892]=j7;
        anIntArray923[anInt892]=0;
        anIntArray944[anInt892]=k13;
        anIntArray757[anInt892]=k18;
        anInt892++;
      }
      return;
    }
    if (command == 248) {
      if (!hasReceivedWelcomeBoxDetails) {
        lastLoggedInDays=DataOperations.getUnsigned2Bytes(data,1);
        subscriptionLeftDays=DataOperations.getUnsigned2Bytes(data,3);
        lastLoggedInAddress=new String(data,5,length - 5);
        showWelcomeBox=true;
        hasReceivedWelcomeBoxDetails=true;
      }
      return;
    }
    if (command == 148) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=false;
      return;
    }
    if (command == 64) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=true;
      return;
    }
    if (command == 126) {
      fatigue=DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 206) {
      if (!sleeping) {
      }
      sleeping=true;
      gameMenu.updateText(chatHandle,""String_Node_Str"");
      super.inputText=""String_Node_Str"";
      super.enteredText=""String_Node_Str"";
      sleepEquation=DataOperations.getImage(data,1,length);
      return;
    }
    if (command == 182) {
      int offset=1;
      questPoints=DataOperations.getUnsigned2Bytes(data,offset);
      offset+=2;
      for (int i=0; i < questName.length; i++)       questStage[i]=data[offset + i];
      return;
    }
    if (command == 224) {
      sleeping=false;
      sleepMessage=null;
      return;
    }
    if (command == 225) {
      sleepMessage=""String_Node_Str"";
      return;
    }
    if (command == 174) {
      DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 181) {
      if (autoScreenshot) {
        takeScreenshot(false);
      }
      return;
    }
    if (command == 172) {
      systemUpdate=DataOperations.getUnsigned2Bytes(data,1) * 32;
      return;
    }
  }
 catch (  Exception e) {
  }
}","protected final void handleIncomingPacket(int command,int length,byte data[]){
  try {
    if (command == 254) {
      int bar=DataOperations.getUnsigned4Bytes(data,1);
      if (bar == -1) {
        smithingscreen.isVisible=false;
      }
 else {
        SmithingScreen.changeItems(smithingscreen,bar);
        smithingscreen.isVisible=true;
      }
    }
    if (command == 231) {
      return;
    }
    if (command == 233) {
      questPoints=DataOperations.getUnsignedByte(data[1]);
      int k=DataOperations.getUnsignedByte(data[2]);
      int r=3;
      newQuestNames=new String[k];
      questStage=new byte[k];
      for (int i=0; i < k; i++) {
        int uid=DataOperations.getUnsignedByte(data[r]);
        r++;
        newQuestNames[i]=questName[uid];
        questStage[i]=(byte)DataOperations.getUnsignedByte(data[r]);
        r++;
      }
    }
    if (command == 110) {
      int i=1;
      serverStartTime=DataOperations.getUnsigned8Bytes(data,i);
      i+=8;
      serverLocation=new String(data,i,length - i);
      return;
    }
    if (command == 145) {
      if (!hasWorldInfo) {
        return;
      }
      loading=true;
      lastPlayerCount=playerCount;
      for (int k=0; k < lastPlayerCount; k++)       lastPlayerArray[k]=playerArray[k];
      int currentOffset=8;
      setSectionX(DataOperations.getIntFromByteArray(data,currentOffset,11));
      currentOffset+=11;
      setSectionY(DataOperations.getIntFromByteArray(data,currentOffset,13));
      currentOffset+=13;
      int mobSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
      currentOffset+=4;
      boolean sectionLoaded=loadSection(getSectionX(),getSectionY());
      setSectionX(getSectionX() - getAreaX());
      setSectionY(getSectionY() - getAreaY());
      int mapEnterX=getSectionX() * magicLoc + 64;
      int mapEnterY=getSectionY() * magicLoc + 64;
      if (sectionLoaded) {
        ourPlayer.waypointCurrent=0;
        ourPlayer.waypointEndSprite=0;
        ourPlayer.currentX=ourPlayer.waypointsX[0]=mapEnterX;
        ourPlayer.currentY=ourPlayer.waypointsY[0]=mapEnterY;
      }
      playerCount=0;
      ourPlayer=makePlayer(serverIndex,mapEnterX,mapEnterY,mobSprite);
      int newPlayerCount=DataOperations.getIntFromByteArray(data,currentOffset,8);
      currentOffset+=8;
      for (int currentNewPlayer=0; currentNewPlayer < newPlayerCount; currentNewPlayer++) {
        Mob lastMob=getLastPlayer(DataOperations.getIntFromByteArray(data,currentOffset,16));
        currentOffset+=16;
        int nextPlayer=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        if (nextPlayer != 0) {
          int waypointsLeft=DataOperations.getIntFromByteArray(data,currentOffset,1);
          currentOffset++;
          if (waypointsLeft == 0) {
            int currentNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,3);
            currentOffset+=3;
            int currentWaypoint=lastMob.waypointCurrent;
            int newWaypointX=lastMob.waypointsX[currentWaypoint];
            int newWaypointY=lastMob.waypointsY[currentWaypoint];
            if (currentNextSprite == 2 || currentNextSprite == 1 || currentNextSprite == 3)             newWaypointX+=magicLoc;
            if (currentNextSprite == 6 || currentNextSprite == 5 || currentNextSprite == 7)             newWaypointX-=magicLoc;
            if (currentNextSprite == 4 || currentNextSprite == 3 || currentNextSprite == 5)             newWaypointY+=magicLoc;
            if (currentNextSprite == 0 || currentNextSprite == 1 || currentNextSprite == 7)             newWaypointY-=magicLoc;
            lastMob.nextSprite=currentNextSprite;
            lastMob.waypointCurrent=currentWaypoint=(currentWaypoint + 1) % 10;
            lastMob.waypointsX[currentWaypoint]=newWaypointX;
            lastMob.waypointsY[currentWaypoint]=newWaypointY;
          }
 else {
            int needsNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
            currentOffset+=4;
            if ((needsNextSprite & 0xc) == 12) {
              continue;
            }
            lastMob.nextSprite=needsNextSprite;
          }
        }
        playerArray[playerCount++]=lastMob;
      }
      int mobCount=0;
      while (currentOffset + 24 < length * 8) {
        int mobIndex=DataOperations.getIntFromByteArray(data,currentOffset,16);
        currentOffset+=16;
        int areaMobX=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobX > 15)         areaMobX-=32;
        int areaMobY=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobY > 15)         areaMobY-=32;
        int mobArrayMobID=DataOperations.getIntFromByteArray(data,currentOffset,4);
        currentOffset+=4;
        int addIndex=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        int mobX=(getSectionX() + areaMobX) * magicLoc + 64;
        int mobY=(getSectionY() + areaMobY) * magicLoc + 64;
        makePlayer(mobIndex,mobX,mobY,mobArrayMobID);
        if (addIndex == 0)         mobArrayIndexes[mobCount++]=mobIndex;
      }
      if (mobCount > 0) {
        super.streamClass.createPacket(83);
        super.streamClass.add2ByteInt(mobCount);
        for (int currentMob=0; currentMob < mobCount; currentMob++) {
          Mob dummyMob=mobArray[mobArrayIndexes[currentMob]];
          super.streamClass.add2ByteInt(dummyMob.serverIndex);
          super.streamClass.add2ByteInt(dummyMob.mobIntUnknown);
        }
        super.streamClass.formatPacket();
        mobCount=0;
      }
      loading=false;
      return;
    }
    if (command == 109) {
      if (needsClear) {
        for (int i=0; i < groundItemType.length; i++) {
          groundItemType[i]=-1;
          groundItemX[i]=-1;
          groundItemY[i]=-1;
          groundItemObjectVar[i]=-1;
        }
        groundItemCount=0;
        needsClear=false;
      }
      for (int l=1; l < length; )       if (DataOperations.getUnsignedByte(data[l]) == 255) {
        int newCount=0;
        int newSectionX=getSectionX() + data[l + 1] >> 3;
        int newSectionY=getSectionY() + data[l + 2] >> 3;
        l+=3;
        for (int groundItem=0; groundItem < groundItemCount; groundItem++) {
          int newX=(groundItemX[groundItem] >> 3) - newSectionX;
          int newY=(groundItemY[groundItem] >> 3) - newSectionY;
          if (newX != 0 || newY != 0) {
            if (groundItem != newCount) {
              groundItemX[newCount]=groundItemX[groundItem];
              groundItemY[newCount]=groundItemY[groundItem];
              groundItemType[newCount]=groundItemType[groundItem];
              groundItemObjectVar[newCount]=groundItemObjectVar[groundItem];
            }
            newCount++;
          }
        }
        groundItemCount=newCount;
      }
 else {
        int i8=DataOperations.getUnsigned2Bytes(data,l);
        l+=2;
        int k14=getSectionX() + data[l++];
        int j19=getSectionY() + data[l++];
        if ((i8 & 0x8000) == 0) {
          groundItemX[groundItemCount]=k14;
          groundItemY[groundItemCount]=j19;
          groundItemType[groundItemCount]=i8;
          groundItemObjectVar[groundItemCount]=0;
          for (int k23=0; k23 < objectCount; k23++) {
            if (objectX[k23] != k14 || objectY[k23] != j19)             continue;
            groundItemObjectVar[groundItemCount]=EntityHandler.getObjectDef(objectType[k23]).getGroundItemVar();
            break;
          }
          groundItemCount++;
        }
 else {
          i8&=0x7fff;
          int l23=0;
          for (int k26=0; k26 < groundItemCount; k26++) {
            if (groundItemX[k26] != k14 || groundItemY[k26] != j19 || groundItemType[k26] != i8) {
              if (k26 != l23) {
                groundItemX[l23]=groundItemX[k26];
                groundItemY[l23]=groundItemY[k26];
                groundItemType[l23]=groundItemType[k26];
                groundItemObjectVar[l23]=groundItemObjectVar[k26];
              }
              l23++;
            }
 else {
              i8=-123;
            }
          }
          groundItemCount=l23;
        }
      }
      return;
    }
    if (command == 27) {
      for (int i1=1; i1 < length; )       if (DataOperations.getUnsignedByte(data[i1]) == 255) {
        int j8=0;
        int l14=getSectionX() + data[i1 + 1] >> 3;
        int k19=getSectionY() + data[i1 + 2] >> 3;
        i1+=3;
        for (int i24=0; i24 < objectCount; i24++) {
          int l26=(objectX[i24] >> 3) - l14;
          int k29=(objectY[i24] >> 3) - k19;
          if (l26 != 0 || k29 != 0) {
            if (i24 != j8) {
              objectModelArray[j8]=objectModelArray[i24];
              objectModelArray[j8].anInt257=j8;
              objectX[j8]=objectX[i24];
              objectY[j8]=objectY[i24];
              objectType[j8]=objectType[i24];
              objectID[j8]=objectID[i24];
            }
            j8++;
          }
 else {
            gameCamera.removeModel(objectModelArray[i24]);
            engineHandle.updateObject(objectX[i24],objectY[i24],objectType[i24],objectID[i24]);
          }
        }
        objectCount=j8;
      }
 else {
        int k8=DataOperations.getUnsigned2Bytes(data,i1);
        i1+=2;
        int i15=getSectionX() + data[i1++];
        int l19=getSectionY() + data[i1++];
        int l29=data[i1++];
        int j24=0;
        for (int i27=0; i27 < objectCount; i27++)         if (objectX[i27] != i15 || objectY[i27] != l19 || objectID[i27] != l29) {
          if (i27 != j24) {
            objectModelArray[j24]=objectModelArray[i27];
            objectModelArray[j24].anInt257=j24;
            objectX[j24]=objectX[i27];
            objectY[j24]=objectY[i27];
            objectType[j24]=objectType[i27];
            objectID[j24]=objectID[i27];
          }
          j24++;
        }
 else {
          gameCamera.removeModel(objectModelArray[i27]);
          engineHandle.updateObject(objectX[i27],objectY[i27],objectType[i27],objectID[i27]);
        }
        objectCount=j24;
        if (k8 != 60000) {
          engineHandle.registerObjectDir(i15,l19,l29);
          int i34;
          int j37;
          if (l29 == 0 || l29 == 4) {
            i34=EntityHandler.getObjectDef(k8).getWidth();
            j37=EntityHandler.getObjectDef(k8).getHeight();
          }
 else {
            j37=EntityHandler.getObjectDef(k8).getWidth();
            i34=EntityHandler.getObjectDef(k8).getHeight();
          }
          int j40=((i15 + i15 + i34) * magicLoc) / 2;
          int i42=((l19 + l19 + j37) * magicLoc) / 2;
          int k43=EntityHandler.getObjectDef(k8).modelID;
          Model model_1=gameDataModels[k43].method203();
          gameCamera.addModel(model_1);
          model_1.anInt257=objectCount;
          model_1.method188(0,l29 * 32,0);
          model_1.method190(j40,-engineHandle.getAveragedElevation(j40,i42),i42);
          model_1.method184(true,48,48,-50,-10,-50);
          engineHandle.method412(i15,l19,k8,l29);
          if (k8 == 74)           model_1.method190(0,-480,0);
          objectX[objectCount]=i15;
          objectY[objectCount]=l19;
          objectType[objectCount]=k8;
          objectID[objectCount]=l29;
          objectModelArray[objectCount++]=model_1;
        }
      }
      return;
    }
    if (command == 114) {
      int invOffset=1;
      inventoryCount=data[invOffset++] & 0xff;
      for (int invItem=0; invItem < inventoryCount; invItem++) {
        int j15=DataOperations.getUnsigned2Bytes(data,invOffset);
        invOffset+=2;
        getInventoryItems()[invItem]=(j15 & 0x7fff);
        wearing[invItem]=j15 / 32768;
        if (EntityHandler.getItemDef(j15 & 0x7fff).isStackable()) {
          inventoryItemsCount[invItem]=DataOperations.readInt(data,invOffset);
          invOffset+=4;
        }
 else {
          inventoryItemsCount[invItem]=1;
        }
      }
      return;
    }
    if (command == 53) {
      int mobCount=DataOperations.getUnsigned2Bytes(data,1);
      int mobUpdateOffset=3;
      for (int currentMob=0; currentMob < mobCount; currentMob++) {
        int mobArrayIndex=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
        mobUpdateOffset+=2;
        if (mobArrayIndex < 0 || mobArrayIndex > mobArray.length) {
          return;
        }
        Mob mob=mobArray[mobArrayIndex];
        if (mob == null) {
          return;
        }
        byte mobUpdateType=data[mobUpdateOffset++];
        if (mobUpdateType == 0) {
          int i30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.anInt163=150;
            mob.anInt162=i30;
          }
        }
 else         if (mobUpdateType == 1) {
          byte byte7=data[mobUpdateOffset++];
          if (mob != null) {
            String s2=DataConversions.byteToString(data,mobUpdateOffset,byte7);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s2;
            displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,2,mob.admin);
          }
          mobUpdateOffset+=byte7;
        }
 else         if (mobUpdateType == 2) {
          int j30=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hits=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hitsBase=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          if (mob != null) {
            mob.anInt164=j30;
            mob.hitPointsCurrent=hits;
            mob.hitPointsBase=hitsBase;
            mob.combatTimer=200;
            if (mob == ourPlayer) {
              playerStatCurrent[3]=hits;
              playerStatBase[3]=hitsBase;
              showWelcomeBox=false;
            }
          }
        }
 else         if (mobUpdateType == 3) {
          int k30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int k34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=k30;
            mob.attackingNpcIndex=k34;
            mob.attackingMobIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 4) {
          int l30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int l34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=l30;
            mob.attackingMobIndex=l34;
            mob.attackingNpcIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 5) {
          if (mob != null) {
            mob.mobIntUnknown=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=2;
            mob.nameLong=DataOperations.getUnsigned8Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=8;
            mob.name=DataOperations.longToString(mob.nameLong);
            int i31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset++;
            for (int i35=0; i35 < i31; i35++) {
              mob.animationCount[i35]=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
              mobUpdateOffset++;
            }
            for (int l37=i31; l37 < 12; l37++)             mob.animationCount[l37]=0;
            mob.colourHairType=data[mobUpdateOffset++] & 0xff;
            mob.colourTopType=data[mobUpdateOffset++] & 0xff;
            mob.colourBottomType=data[mobUpdateOffset++] & 0xff;
            mob.colourSkinType=data[mobUpdateOffset++] & 0xff;
            mob.level=data[mobUpdateOffset++] & 0xff;
            mob.anInt179=data[mobUpdateOffset++] & 0xff;
            mob.admin=data[mobUpdateOffset++] & 0xff;
          }
 else {
            mobUpdateOffset+=14;
            int j31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset+=j31 + 1;
          }
        }
 else         if (mobUpdateType == 6) {
          byte byte8=data[mobUpdateOffset];
          mobUpdateOffset++;
          if (mob != null) {
            String s3=DataConversions.byteToString(data,mobUpdateOffset,byte8);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s3;
            if (mob == ourPlayer)             displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,5,mob.admin);
          }
          mobUpdateOffset+=byte8;
        }
      }
      return;
    }
    if (command == 129) {
      combatStyle=DataOperations.getUnsignedByte(data[1]);
      return;
    }
    if (command == 95) {
      for (int l1=1; l1 < length; )       if (DataOperations.getUnsignedByte(data[l1]) == 255) {
        int j9=0;
        int l15=getSectionX() + data[l1 + 1] >> 3;
        int j20=getSectionY() + data[l1 + 2] >> 3;
        l1+=3;
        for (int currentDoor=0; currentDoor < doorCount; currentDoor++) {
          int j27=(doorX[currentDoor] >> 3) - l15;
          int k31=(doorY[currentDoor] >> 3) - j20;
          if (j27 != 0 || k31 != 0) {
            if (currentDoor != j9) {
              doorModel[j9]=doorModel[currentDoor];
              doorModel[j9].anInt257=j9 + 10000;
              doorX[j9]=doorX[currentDoor];
              doorY[j9]=doorY[currentDoor];
              doorDirection[j9]=doorDirection[currentDoor];
              doorType[j9]=doorType[currentDoor];
            }
            j9++;
          }
 else {
            gameCamera.removeModel(doorModel[currentDoor]);
            engineHandle.updateDoor(doorX[currentDoor],doorY[currentDoor],doorDirection[currentDoor],doorType[currentDoor]);
          }
        }
        doorCount=j9;
      }
 else {
        int k9=DataOperations.getUnsigned2Bytes(data,l1);
        l1+=2;
        int i16=getSectionX() + data[l1++];
        int k20=getSectionY() + data[l1++];
        byte byte5=data[l1++];
        int k27=0;
        for (int l31=0; l31 < doorCount; l31++)         if (doorX[l31] != i16 || doorY[l31] != k20 || doorDirection[l31] != byte5) {
          if (l31 != k27) {
            doorModel[k27]=doorModel[l31];
            doorModel[k27].anInt257=k27 + 10000;
            doorX[k27]=doorX[l31];
            doorY[k27]=doorY[l31];
            doorDirection[k27]=doorDirection[l31];
            doorType[k27]=doorType[l31];
          }
          k27++;
        }
 else {
          gameCamera.removeModel(doorModel[l31]);
          engineHandle.updateDoor(doorX[l31],doorY[l31],doorDirection[l31],doorType[l31]);
        }
        doorCount=k27;
        if (k9 != 60000) {
          engineHandle.method408(i16,k20,byte5,k9);
          Model model=makeModel(i16,k20,byte5,k9,doorCount);
          doorModel[doorCount]=model;
          doorX[doorCount]=i16;
          doorY[doorCount]=k20;
          doorType[doorCount]=k9;
          doorDirection[doorCount++]=byte5;
        }
      }
      return;
    }
    if (command == 77) {
      lastNpcCount=npcCount;
      npcCount=0;
      for (int lastNpcIndex=0; lastNpcIndex < lastNpcCount; lastNpcIndex++)       lastNpcArray[lastNpcIndex]=npcArray[lastNpcIndex];
      int newNpcOffset=8;
      int newNpcCount=DataOperations.getIntFromByteArray(data,newNpcOffset,8);
      newNpcOffset+=8;
      for (int newNpcIndex=0; newNpcIndex < newNpcCount; newNpcIndex++) {
        Mob newNPC=getLastNpc(DataOperations.getIntFromByteArray(data,newNpcOffset,16));
        newNpcOffset+=16;
        int npcNeedsUpdate=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
        newNpcOffset++;
        if (npcNeedsUpdate != 0) {
          int i32=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
          newNpcOffset++;
          if (i32 == 0) {
            int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,3);
            newNpcOffset+=3;
            int waypointCurrent=newNPC.waypointCurrent;
            int waypointX=newNPC.waypointsX[waypointCurrent];
            int waypointY=newNPC.waypointsY[waypointCurrent];
            if (nextSprite == 2 || nextSprite == 1 || nextSprite == 3)             waypointX+=magicLoc;
            if (nextSprite == 6 || nextSprite == 5 || nextSprite == 7)             waypointX-=magicLoc;
            if (nextSprite == 4 || nextSprite == 3 || nextSprite == 5)             waypointY+=magicLoc;
            if (nextSprite == 0 || nextSprite == 1 || nextSprite == 7)             waypointY-=magicLoc;
            newNPC.nextSprite=nextSprite;
            newNPC.waypointCurrent=waypointCurrent=(waypointCurrent + 1) % 10;
            newNPC.waypointsX[waypointCurrent]=waypointX;
            newNPC.waypointsY[waypointCurrent]=waypointY;
          }
 else {
            int nextSpriteOffset=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
            newNpcOffset+=4;
            if ((nextSpriteOffset & 0xc) == 12) {
              continue;
            }
            newNPC.nextSprite=nextSpriteOffset;
          }
        }
        npcArray[npcCount++]=newNPC;
      }
      while (newNpcOffset + 34 < length * 8) {
        int serverIndex=DataOperations.getIntFromByteArray(data,newNpcOffset,16);
        newNpcOffset+=16;
        int i28=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (i28 > 15)         i28-=32;
        int j32=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (j32 > 15)         j32-=32;
        int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
        newNpcOffset+=4;
        int x=(getSectionX() + i28) * magicLoc + 64;
        int y=(getSectionY() + j32) * magicLoc + 64;
        int type=DataOperations.getIntFromByteArray(data,newNpcOffset,10);
        newNpcOffset+=10;
        if (type >= EntityHandler.npcCount())         type=24;
        addNPC(serverIndex,x,y,nextSprite,type);
      }
      return;
    }
    if (command == 190) {
      int j2=DataOperations.getUnsigned2Bytes(data,1);
      int i10=3;
      for (int k16=0; k16 < j2; k16++) {
        int i21=DataOperations.getUnsigned2Bytes(data,i10);
        i10+=2;
        Mob mob_2=npcRecordArray[i21];
        int j28=DataOperations.getUnsignedByte(data[i10]);
        i10++;
        if (j28 == 1) {
          int k32=DataOperations.getUnsigned2Bytes(data,i10);
          i10+=2;
          byte byte9=data[i10];
          i10++;
          if (mob_2 != null) {
            String s4=DataConversions.byteToString(data,i10,byte9);
            mob_2.lastMessageTimeout=150;
            mob_2.lastMessage=s4;
            if (k32 == ourPlayer.serverIndex)             displayMessage(""String_Node_Str"" + EntityHandler.getNpcDef(mob_2.type).getName() + ""String_Node_Str""+ mob_2.lastMessage,5,0);
          }
          i10+=byte9;
        }
 else         if (j28 == 2) {
          int l32=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int i36=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int k38=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          if (mob_2 != null) {
            mob_2.anInt164=l32;
            mob_2.hitPointsCurrent=i36;
            mob_2.hitPointsBase=k38;
            mob_2.combatTimer=200;
          }
        }
      }
      return;
    }
    if (command == 223) {
      showQuestionMenu=true;
      int newQuestionMenuCount=DataOperations.getUnsignedByte(data[1]);
      questionMenuCount=newQuestionMenuCount;
      int newQuestionMenuOffset=2;
      for (int l16=0; l16 < newQuestionMenuCount; l16++) {
        int newQuestionMenuQuestionLength=DataOperations.getUnsignedByte(data[newQuestionMenuOffset]);
        newQuestionMenuOffset++;
        questionMenuAnswer[l16]=new String(data,newQuestionMenuOffset,newQuestionMenuQuestionLength);
        newQuestionMenuOffset+=newQuestionMenuQuestionLength;
      }
      return;
    }
    if (command == 127) {
      showQuestionMenu=false;
      return;
    }
    if (command == 131) {
      needsClear=true;
      notInWilderness=true;
      hasWorldInfo=true;
      serverIndex=DataOperations.getUnsigned2Bytes(data,1);
      wildX=DataOperations.getUnsigned2Bytes(data,3);
      wildY=DataOperations.getUnsigned2Bytes(data,5);
      wildYSubtract=DataOperations.getUnsigned2Bytes(data,7);
      wildYMultiplier=DataOperations.getUnsigned2Bytes(data,9);
      wildY-=wildYSubtract * wildYMultiplier;
      return;
    }
    if (command == 180) {
      int l2=1;
      for (int k10=0; k10 < 18; k10++) {
        playerStatCurrent[k10]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int i17=0; i17 < 18; i17++) {
        playerStatBase[i17]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int k21=0; k21 < 18; k21++) {
        playerStatExperience[k21]=DataOperations.readInt(data,l2);
        l2+=4;
      }
      expGained=0;
      return;
    }
    if (command == 177) {
      int i3=1;
      for (int x=0; x < 6; x++) {
        equipmentStatus[x]=DataOperations.getSigned2Bytes(data,i3);
        i3+=2;
      }
      return;
    }
    if (command == 165) {
      playerAliveTimeout=250;
      return;
    }
    if (command == 115) {
      int thingLength=(length - 1) / 4;
      for (int currentThing=0; currentThing < thingLength; currentThing++) {
        int currentItemSectionX=getSectionX() + DataOperations.getSigned2Bytes(data,1 + currentThing * 4) >> 3;
        int currentItemSectionY=getSectionY() + DataOperations.getSigned2Bytes(data,3 + currentThing * 4) >> 3;
        int currentCount=0;
        for (int currentItem=0; currentItem < groundItemCount; currentItem++) {
          int currentItemOffsetX=(groundItemX[currentItem] >> 3) - currentItemSectionX;
          int currentItemOffsetY=(groundItemY[currentItem] >> 3) - currentItemSectionY;
          if (currentItemOffsetX != 0 || currentItemOffsetY != 0) {
            if (currentItem != currentCount) {
              groundItemX[currentCount]=groundItemX[currentItem];
              groundItemY[currentCount]=groundItemY[currentItem];
              groundItemType[currentCount]=groundItemType[currentItem];
              groundItemObjectVar[currentCount]=groundItemObjectVar[currentItem];
            }
            currentCount++;
          }
        }
        groundItemCount=currentCount;
        currentCount=0;
        for (int j33=0; j33 < objectCount; j33++) {
          int k36=(objectX[j33] >> 3) - currentItemSectionX;
          int l38=(objectY[j33] >> 3) - currentItemSectionY;
          if (k36 != 0 || l38 != 0) {
            if (j33 != currentCount) {
              objectModelArray[currentCount]=objectModelArray[j33];
              objectModelArray[currentCount].anInt257=currentCount;
              objectX[currentCount]=objectX[j33];
              objectY[currentCount]=objectY[j33];
              objectType[currentCount]=objectType[j33];
              objectID[currentCount]=objectID[j33];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(objectModelArray[j33]);
            engineHandle.updateObject(objectX[j33],objectY[j33],objectType[j33],objectID[j33]);
          }
        }
        objectCount=currentCount;
        currentCount=0;
        for (int l36=0; l36 < doorCount; l36++) {
          int i39=(doorX[l36] >> 3) - currentItemSectionX;
          int j41=(doorY[l36] >> 3) - currentItemSectionY;
          if (i39 != 0 || j41 != 0) {
            if (l36 != currentCount) {
              doorModel[currentCount]=doorModel[l36];
              doorModel[currentCount].anInt257=currentCount + 10000;
              doorX[currentCount]=doorX[l36];
              doorY[currentCount]=doorY[l36];
              doorDirection[currentCount]=doorDirection[l36];
              doorType[currentCount]=doorType[l36];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(doorModel[l36]);
            engineHandle.updateDoor(doorX[l36],doorY[l36],doorDirection[l36],doorType[l36]);
          }
        }
        doorCount=currentCount;
      }
      return;
    }
    if (command == 230) {
      showDrawPointsScreen=true;
      int pkbytes=1;
      pkatk=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkdef=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkstr=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkrange=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkmagic=DataOperations.readInt(data,pkbytes);
    }
    if (command == 207) {
      showCharacterLookScreen=true;
      return;
    }
    if (command == 4) {
      int currentMob=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[currentMob] != null)       tradeOtherPlayerName=mobArray[currentMob].name;
      showTradeWindow=true;
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      tradeMyItemCount=0;
      tradeOtherItemCount=0;
      return;
    }
    if (command == 187) {
      showTradeWindow=false;
      showTradeConfirmWindow=false;
      return;
    }
    if (command == 250) {
      tradeOtherItemCount=data[1] & 0xff;
      int l3=2;
      for (int i11=0; i11 < tradeOtherItemCount; i11++) {
        tradeOtherItems[i11]=DataOperations.getUnsigned2Bytes(data,l3);
        l3+=2;
        tradeOtherItemsCount[i11]=DataOperations.readInt(data,l3);
        l3+=4;
      }
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      return;
    }
    if (command == 92) {
      tradeOtherAccepted=data[1] == 1;
    }
    if (command == 253) {
      showShop=true;
      int i4=1;
      int j11=data[i4++] & 0xff;
      byte byte4=data[i4++];
      shopItemSellPriceModifier=data[i4++] & 0xff;
      shopItemBuyPriceModifier=data[i4++] & 0xff;
      for (int i22=0; i22 < 40; i22++)       shopItems[i22]=-1;
      for (int j25=0; j25 < j11; j25++) {
        shopItems[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemCount[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemsBuyPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
        shopItemsSellPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
      }
      if (byte4 == 1) {
        int l28=39;
        for (int k33=0; k33 < inventoryCount; k33++) {
          if (l28 < j11)           break;
          boolean flag2=false;
          for (int j39=0; j39 < 40; j39++) {
            if (shopItems[j39] != getInventoryItems()[k33])             continue;
            flag2=true;
            break;
          }
          if (getInventoryItems()[k33] == 10)           flag2=true;
          if (!flag2) {
            shopItems[l28]=getInventoryItems()[k33] & 0x7fff;
            shopItemsSellPrice[l28]=EntityHandler.getItemDef(shopItems[l28]).basePrice - (int)(EntityHandler.getItemDef(shopItems[l28]).basePrice / 2.5);
            shopItemsSellPrice[l28]=shopItemsSellPrice[l28] - (int)(shopItemsSellPrice[l28] * 0.10);
            shopItemCount[l28]=0;
            l28--;
          }
        }
      }
      if (selectedShopItemIndex >= 0 && selectedShopItemIndex < 40 && shopItems[selectedShopItemIndex] != selectedShopItemType) {
        selectedShopItemIndex=-1;
        selectedShopItemType=-2;
      }
      return;
    }
    if (command == 220) {
      showShop=false;
      return;
    }
    if (command == 18) {
      tradeWeAccepted=data[1] == 1;
    }
    if (command == 152) {
      configAutoCameraAngle=DataOperations.getUnsignedByte(data[1]) == 1;
      configMouseButtons=DataOperations.getUnsignedByte(data[2]) == 1;
      configSoundEffects=DataOperations.getUnsignedByte(data[3]) == 1;
      showRoof=DataOperations.getUnsignedByte(data[4]) == 1;
      autoScreenshot=DataOperations.getUnsignedByte(data[5]) == 1;
      combatWindow=DataOperations.getUnsignedByte(data[6]) == 1;
      return;
    }
    if (command == 209) {
      for (int currentPrayer=0; currentPrayer < length - 1; currentPrayer++) {
        boolean prayerOff=data[currentPrayer + 1] == 1;
        if (!prayerOn[currentPrayer] && prayerOff)         playSound(""String_Node_Str"");
        if (prayerOn[currentPrayer] && !prayerOff)         playSound(""String_Node_Str"");
        prayerOn[currentPrayer]=prayerOff;
      }
      return;
    }
    if (command == 93) {
      showBank=true;
      int l4=1;
      newBankItemCount=data[l4++] & 0xff;
      bankItemsMax=data[l4++] & 0xff;
      for (int k11=0; k11 < newBankItemCount; k11++) {
        newBankItems[k11]=DataOperations.getUnsigned2Bytes(data,l4);
        l4+=2;
        newBankItemsCount[k11]=DataOperations.getUnsigned4Bytes(data,l4);
        l4+=4;
      }
      updateBankItems();
      return;
    }
    if (command == 171) {
      showBank=false;
      return;
    }
    if (command == 211) {
      int idx=data[1] & 0xFF;
      int oldExp=playerStatExperience[idx];
      playerStatExperience[idx]=DataOperations.readInt(data,2);
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 229) {
      int j5=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[j5] != null) {
        duelOpponentName=mobArray[j5].name;
      }
      showDuelWindow=true;
      duelMyItemCount=0;
      duelOpponentItemCount=0;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      duelNoRetreating=false;
      duelNoMagic=false;
      duelNoPrayer=false;
      duelNoWeapons=false;
      return;
    }
    if (command == 160) {
      showDuelWindow=false;
      showDuelConfirmWindow=false;
      return;
    }
    if (command == 251) {
      showTradeConfirmWindow=true;
      tradeConfirmAccepted=false;
      showTradeWindow=false;
      int k5=1;
      tradeConfirmOtherNameLong=DataOperations.getUnsigned8Bytes(data,k5);
      k5+=8;
      tradeConfirmOtherItemCount=data[k5++] & 0xff;
      for (int l11=0; l11 < tradeConfirmOtherItemCount; l11++) {
        tradeConfirmOtherItems[l11]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmOtherItemsCount[l11]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      tradeConfirmItemCount=data[k5++] & 0xff;
      for (int k17=0; k17 < tradeConfirmItemCount; k17++) {
        tradeConfirmItems[k17]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmItemsCount[k17]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      return;
    }
    if (command == 63) {
      duelOpponentItemCount=data[1] & 0xff;
      int l5=2;
      for (int i12=0; i12 < duelOpponentItemCount; i12++) {
        duelOpponentItems[i12]=DataOperations.getUnsigned2Bytes(data,l5);
        l5+=2;
        duelOpponentItemsCount[i12]=DataOperations.readInt(data,l5);
        l5+=4;
      }
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 198) {
      duelNoRetreating=data[1] == 1;
      duelNoMagic=data[2] == 1;
      duelNoPrayer=data[3] == 1;
      duelNoWeapons=data[4] == 1;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 139) {
      int bankDataOffset=1;
      int bankSlot=data[bankDataOffset++] & 0xff;
      int bankItemId=DataOperations.getUnsigned2Bytes(data,bankDataOffset);
      bankDataOffset+=2;
      int bankItemCount=DataOperations.getUnsigned4Bytes(data,bankDataOffset);
      bankDataOffset+=4;
      if (bankItemCount == 0) {
        newBankItemCount--;
        for (int currentBankSlot=bankSlot; currentBankSlot < newBankItemCount; currentBankSlot++) {
          newBankItems[currentBankSlot]=newBankItems[currentBankSlot + 1];
          newBankItemsCount[currentBankSlot]=newBankItemsCount[currentBankSlot + 1];
        }
      }
 else {
        newBankItems[bankSlot]=bankItemId;
        newBankItemsCount[bankSlot]=bankItemCount;
        if (bankSlot >= newBankItemCount)         newBankItemCount=bankSlot + 1;
      }
      updateBankItems();
      return;
    }
    if (command == 228) {
      int j6=1;
      int k12=1;
      int i18=data[j6++] & 0xff;
      int k22=DataOperations.getUnsigned2Bytes(data,j6);
      j6+=2;
      if (EntityHandler.getItemDef(k22 & 0x7fff).isStackable()) {
        k12=DataOperations.readInt(data,j6);
        j6+=4;
      }
      getInventoryItems()[i18]=k22 & 0x7fff;
      wearing[i18]=k22 / 32768;
      inventoryItemsCount[i18]=k12;
      if (i18 >= inventoryCount)       inventoryCount=i18 + 1;
      return;
    }
    if (command == 191) {
      int k6=data[1] & 0xff;
      inventoryCount--;
      for (int l12=k6; l12 < inventoryCount; l12++) {
        getInventoryItems()[l12]=getInventoryItems()[l12 + 1];
        inventoryItemsCount[l12]=inventoryItemsCount[l12 + 1];
        wearing[l12]=wearing[l12 + 1];
      }
      return;
    }
    if (command == 208) {
      int pointer=1;
      int idx=data[pointer++] & 0xff;
      int oldExp=playerStatExperience[idx];
      playerStatCurrent[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatBase[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatExperience[idx]=DataOperations.readInt(data,pointer);
      pointer+=4;
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 65) {
      duelOpponentAccepted=data[1] == 1;
    }
    if (command == 197) {
      duelMyAccepted=data[1] == 1;
    }
    if (command == 147) {
      showDuelConfirmWindow=true;
      duelWeAccept=false;
      showDuelWindow=false;
      int i7=1;
      duelOpponentNameLong=DataOperations.getUnsigned8Bytes(data,i7);
      i7+=8;
      duelConfirmOpponentItemCount=data[i7++] & 0xff;
      for (int j13=0; j13 < duelConfirmOpponentItemCount; j13++) {
        duelConfirmOpponentItems[j13]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmOpponentItemsCount[j13]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelConfirmMyItemCount=data[i7++] & 0xff;
      for (int j18=0; j18 < duelConfirmMyItemCount; j18++) {
        duelConfirmMyItems[j18]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmMyItemsCount[j18]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelCantRetreat=data[i7++] & 0xff;
      duelUseMagic=data[i7++] & 0xff;
      duelUsePrayer=data[i7++] & 0xff;
      duelUseWeapons=data[i7++] & 0xff;
      return;
    }
    if (command == 11) {
      String s=new String(data,1,length - 1);
      playSound(s);
      return;
    }
    if (command == 23) {
      if (anInt892 < 50) {
        int j7=data[1] & 0xff;
        int k13=data[2] + getSectionX();
        int k18=data[3] + getSectionY();
        anIntArray782[anInt892]=j7;
        anIntArray923[anInt892]=0;
        anIntArray944[anInt892]=k13;
        anIntArray757[anInt892]=k18;
        anInt892++;
      }
      return;
    }
    if (command == 248) {
      if (!hasReceivedWelcomeBoxDetails) {
        lastLoggedInDays=DataOperations.getUnsigned2Bytes(data,1);
        subscriptionLeftDays=DataOperations.getUnsigned2Bytes(data,3);
        lastLoggedInAddress=new String(data,5,length - 5);
        showWelcomeBox=true;
        hasReceivedWelcomeBoxDetails=true;
      }
      return;
    }
    if (command == 148) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=false;
      return;
    }
    if (command == 64) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=true;
      return;
    }
    if (command == 126) {
      fatigue=DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 206) {
      if (!sleeping) {
      }
      sleeping=true;
      gameMenu.updateText(chatHandle,""String_Node_Str"");
      super.inputText=""String_Node_Str"";
      super.enteredText=""String_Node_Str"";
      sleepEquation=DataOperations.getImage(data,1,length);
      return;
    }
    if (command == 182) {
      int offset=1;
      questPoints=DataOperations.getUnsigned2Bytes(data,offset);
      offset+=2;
      for (int i=0; i < questName.length; i++)       questStage[i]=data[offset + i];
      return;
    }
    if (command == 224) {
      sleeping=false;
      sleepMessage=null;
      return;
    }
    if (command == 225) {
      sleepMessage=""String_Node_Str"";
      return;
    }
    if (command == 174) {
      DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 181) {
      if (autoScreenshot) {
        takeScreenshot(false);
      }
      return;
    }
    if (command == 172) {
      systemUpdate=DataOperations.getUnsigned2Bytes(data,1) * 32;
      return;
    }
  }
 catch (  Exception e) {
  }
}"
44253,"protected final void handleIncomingPacket(int command,int length,byte data[]){
  try {
    if (command == 254) {
      int bar=DataOperations.getUnsigned4Bytes(data,1);
      if (bar == -1) {
        smithingscreen.isVisible=false;
      }
 else {
        SmithingScreen.changeItems(smithingscreen,bar);
        smithingscreen.isVisible=true;
      }
    }
    if (command == 231) {
      return;
    }
    if (command == 233) {
      questPoints=DataOperations.getUnsignedByte(data[1]);
      int k=DataOperations.getUnsignedByte(data[2]);
      int r=3;
      newQuestNames=new String[k];
      questStage=new byte[k];
      for (int i=0; i < k; i++) {
        int uid=DataOperations.getUnsignedByte(data[r]);
        r++;
        newQuestNames[i]=questName[uid];
        questStage[i]=(byte)DataOperations.getUnsignedByte(data[r]);
        r++;
      }
    }
    if (command == 110) {
      int i=1;
      serverStartTime=DataOperations.getUnsigned8Bytes(data,i);
      i+=8;
      serverLocation=new String(data,i,length - i);
      return;
    }
    if (command == 145) {
      if (!hasWorldInfo) {
        return;
      }
      loading=true;
      lastPlayerCount=playerCount;
      for (int k=0; k < lastPlayerCount; k++)       lastPlayerArray[k]=playerArray[k];
      int currentOffset=8;
      setSectionX(DataOperations.getIntFromByteArray(data,currentOffset,11));
      currentOffset+=11;
      setSectionY(DataOperations.getIntFromByteArray(data,currentOffset,13));
      currentOffset+=13;
      int mobSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
      currentOffset+=4;
      boolean sectionLoaded=loadSection(getSectionX(),getSectionY());
      setSectionX(getSectionX() - getAreaX());
      setSectionY(getSectionY() - getAreaY());
      int mapEnterX=getSectionX() * magicLoc + 64;
      int mapEnterY=getSectionY() * magicLoc + 64;
      if (sectionLoaded) {
        ourPlayer.waypointCurrent=0;
        ourPlayer.waypointEndSprite=0;
        ourPlayer.currentX=ourPlayer.waypointsX[0]=mapEnterX;
        ourPlayer.currentY=ourPlayer.waypointsY[0]=mapEnterY;
      }
      playerCount=0;
      ourPlayer=makePlayer(serverIndex,mapEnterX,mapEnterY,mobSprite);
      int newPlayerCount=DataOperations.getIntFromByteArray(data,currentOffset,8);
      currentOffset+=8;
      for (int currentNewPlayer=0; currentNewPlayer < newPlayerCount; currentNewPlayer++) {
        Mob lastMob=getLastPlayer(DataOperations.getIntFromByteArray(data,currentOffset,16));
        currentOffset+=16;
        int nextPlayer=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        if (nextPlayer != 0) {
          int waypointsLeft=DataOperations.getIntFromByteArray(data,currentOffset,1);
          currentOffset++;
          if (waypointsLeft == 0) {
            int currentNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,3);
            currentOffset+=3;
            int currentWaypoint=lastMob.waypointCurrent;
            int newWaypointX=lastMob.waypointsX[currentWaypoint];
            int newWaypointY=lastMob.waypointsY[currentWaypoint];
            if (currentNextSprite == 2 || currentNextSprite == 1 || currentNextSprite == 3)             newWaypointX+=magicLoc;
            if (currentNextSprite == 6 || currentNextSprite == 5 || currentNextSprite == 7)             newWaypointX-=magicLoc;
            if (currentNextSprite == 4 || currentNextSprite == 3 || currentNextSprite == 5)             newWaypointY+=magicLoc;
            if (currentNextSprite == 0 || currentNextSprite == 1 || currentNextSprite == 7)             newWaypointY-=magicLoc;
            lastMob.nextSprite=currentNextSprite;
            lastMob.waypointCurrent=currentWaypoint=(currentWaypoint + 1) % 10;
            lastMob.waypointsX[currentWaypoint]=newWaypointX;
            lastMob.waypointsY[currentWaypoint]=newWaypointY;
          }
 else {
            int needsNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
            currentOffset+=4;
            if ((needsNextSprite & 0xc) == 12) {
              continue;
            }
            lastMob.nextSprite=needsNextSprite;
          }
        }
        playerArray[playerCount++]=lastMob;
      }
      int mobCount=0;
      while (currentOffset + 24 < length * 8) {
        int mobIndex=DataOperations.getIntFromByteArray(data,currentOffset,16);
        currentOffset+=16;
        int areaMobX=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobX > 15)         areaMobX-=32;
        int areaMobY=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobY > 15)         areaMobY-=32;
        int mobArrayMobID=DataOperations.getIntFromByteArray(data,currentOffset,4);
        currentOffset+=4;
        int addIndex=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        int mobX=(getSectionX() + areaMobX) * magicLoc + 64;
        int mobY=(getSectionY() + areaMobY) * magicLoc + 64;
        makePlayer(mobIndex,mobX,mobY,mobArrayMobID);
        if (addIndex == 0)         mobArrayIndexes[mobCount++]=mobIndex;
      }
      if (mobCount > 0) {
        super.streamClass.createPacket(83);
        super.streamClass.add2ByteInt(mobCount);
        for (int currentMob=0; currentMob < mobCount; currentMob++) {
          Mob dummyMob=mobArray[mobArrayIndexes[currentMob]];
          super.streamClass.add2ByteInt(dummyMob.serverIndex);
          super.streamClass.add2ByteInt(dummyMob.mobIntUnknown);
        }
        super.streamClass.formatPacket();
        mobCount=0;
      }
      loading=false;
      return;
    }
    if (command == 109) {
      if (needsClear) {
        for (int i=0; i < groundItemType.length; i++) {
          groundItemType[i]=-1;
          groundItemX[i]=-1;
          groundItemY[i]=-1;
        }
        needsClear=false;
      }
      for (int l=1; l < length; )       if (DataOperations.getUnsignedByte(data[l]) == 255) {
        int newCount=0;
        int newSectionX=getSectionX() + data[l + 1] >> 3;
        int newSectionY=getSectionY() + data[l + 2] >> 3;
        l+=3;
        for (int groundItem=0; groundItem < groundItemCount; groundItem++) {
          int newX=(groundItemX[groundItem] >> 3) - newSectionX;
          int newY=(groundItemY[groundItem] >> 3) - newSectionY;
          if (newX != 0 || newY != 0) {
            if (groundItem != newCount) {
              groundItemX[newCount]=groundItemX[groundItem];
              groundItemY[newCount]=groundItemY[groundItem];
              groundItemType[newCount]=groundItemType[groundItem];
              groundItemObjectVar[newCount]=groundItemObjectVar[groundItem];
            }
            newCount++;
          }
        }
        groundItemCount=newCount;
      }
 else {
        int i8=DataOperations.getUnsigned2Bytes(data,l);
        l+=2;
        int k14=getSectionX() + data[l++];
        int j19=getSectionY() + data[l++];
        if ((i8 & 0x8000) == 0) {
          groundItemX[groundItemCount]=k14;
          groundItemY[groundItemCount]=j19;
          groundItemType[groundItemCount]=i8;
          groundItemObjectVar[groundItemCount]=0;
          for (int k23=0; k23 < objectCount; k23++) {
            if (objectX[k23] != k14 || objectY[k23] != j19)             continue;
            groundItemObjectVar[groundItemCount]=EntityHandler.getObjectDef(objectType[k23]).getGroundItemVar();
            break;
          }
          groundItemCount++;
        }
 else {
          i8&=0x7fff;
          int l23=0;
          for (int k26=0; k26 < groundItemCount; k26++) {
            if (groundItemX[k26] != k14 || groundItemY[k26] != j19 || groundItemType[k26] != i8) {
              if (k26 != l23) {
                groundItemX[l23]=groundItemX[k26];
                groundItemY[l23]=groundItemY[k26];
                groundItemType[l23]=groundItemType[k26];
                groundItemObjectVar[l23]=groundItemObjectVar[k26];
              }
              l23++;
            }
 else {
              i8=-123;
            }
          }
          groundItemCount=l23;
        }
      }
      return;
    }
    if (command == 27) {
      for (int i1=1; i1 < length; )       if (DataOperations.getUnsignedByte(data[i1]) == 255) {
        int j8=0;
        int l14=getSectionX() + data[i1 + 1] >> 3;
        int k19=getSectionY() + data[i1 + 2] >> 3;
        i1+=3;
        for (int i24=0; i24 < objectCount; i24++) {
          int l26=(objectX[i24] >> 3) - l14;
          int k29=(objectY[i24] >> 3) - k19;
          if (l26 != 0 || k29 != 0) {
            if (i24 != j8) {
              objectModelArray[j8]=objectModelArray[i24];
              objectModelArray[j8].anInt257=j8;
              objectX[j8]=objectX[i24];
              objectY[j8]=objectY[i24];
              objectType[j8]=objectType[i24];
              objectID[j8]=objectID[i24];
            }
            j8++;
          }
 else {
            gameCamera.removeModel(objectModelArray[i24]);
            engineHandle.updateObject(objectX[i24],objectY[i24],objectType[i24],objectID[i24]);
          }
        }
        objectCount=j8;
      }
 else {
        int k8=DataOperations.getUnsigned2Bytes(data,i1);
        i1+=2;
        int i15=getSectionX() + data[i1++];
        int l19=getSectionY() + data[i1++];
        int l29=data[i1++];
        int j24=0;
        for (int i27=0; i27 < objectCount; i27++)         if (objectX[i27] != i15 || objectY[i27] != l19 || objectID[i27] != l29) {
          if (i27 != j24) {
            objectModelArray[j24]=objectModelArray[i27];
            objectModelArray[j24].anInt257=j24;
            objectX[j24]=objectX[i27];
            objectY[j24]=objectY[i27];
            objectType[j24]=objectType[i27];
            objectID[j24]=objectID[i27];
          }
          j24++;
        }
 else {
          gameCamera.removeModel(objectModelArray[i27]);
          engineHandle.updateObject(objectX[i27],objectY[i27],objectType[i27],objectID[i27]);
        }
        objectCount=j24;
        if (k8 != 60000) {
          engineHandle.registerObjectDir(i15,l19,l29);
          int i34;
          int j37;
          if (l29 == 0 || l29 == 4) {
            i34=EntityHandler.getObjectDef(k8).getWidth();
            j37=EntityHandler.getObjectDef(k8).getHeight();
          }
 else {
            j37=EntityHandler.getObjectDef(k8).getWidth();
            i34=EntityHandler.getObjectDef(k8).getHeight();
          }
          int j40=((i15 + i15 + i34) * magicLoc) / 2;
          int i42=((l19 + l19 + j37) * magicLoc) / 2;
          int k43=EntityHandler.getObjectDef(k8).modelID;
          Model model_1=gameDataModels[k43].method203();
          gameCamera.addModel(model_1);
          model_1.anInt257=objectCount;
          model_1.method188(0,l29 * 32,0);
          model_1.method190(j40,-engineHandle.getAveragedElevation(j40,i42),i42);
          model_1.method184(true,48,48,-50,-10,-50);
          engineHandle.method412(i15,l19,k8,l29);
          if (k8 == 74)           model_1.method190(0,-480,0);
          objectX[objectCount]=i15;
          objectY[objectCount]=l19;
          objectType[objectCount]=k8;
          objectID[objectCount]=l29;
          objectModelArray[objectCount++]=model_1;
        }
      }
      return;
    }
    if (command == 114) {
      int invOffset=1;
      inventoryCount=data[invOffset++] & 0xff;
      for (int invItem=0; invItem < inventoryCount; invItem++) {
        int j15=DataOperations.getUnsigned2Bytes(data,invOffset);
        invOffset+=2;
        getInventoryItems()[invItem]=(j15 & 0x7fff);
        wearing[invItem]=j15 / 32768;
        if (EntityHandler.getItemDef(j15 & 0x7fff).isStackable()) {
          inventoryItemsCount[invItem]=DataOperations.readInt(data,invOffset);
          invOffset+=4;
        }
 else {
          inventoryItemsCount[invItem]=1;
        }
      }
      return;
    }
    if (command == 53) {
      int mobCount=DataOperations.getUnsigned2Bytes(data,1);
      int mobUpdateOffset=3;
      for (int currentMob=0; currentMob < mobCount; currentMob++) {
        int mobArrayIndex=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
        mobUpdateOffset+=2;
        if (mobArrayIndex < 0 || mobArrayIndex > mobArray.length) {
          return;
        }
        Mob mob=mobArray[mobArrayIndex];
        if (mob == null) {
          return;
        }
        byte mobUpdateType=data[mobUpdateOffset++];
        if (mobUpdateType == 0) {
          int i30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.anInt163=150;
            mob.anInt162=i30;
          }
        }
 else         if (mobUpdateType == 1) {
          byte byte7=data[mobUpdateOffset++];
          if (mob != null) {
            String s2=DataConversions.byteToString(data,mobUpdateOffset,byte7);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s2;
            displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,2,mob.admin);
          }
          mobUpdateOffset+=byte7;
        }
 else         if (mobUpdateType == 2) {
          int j30=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hits=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hitsBase=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          if (mob != null) {
            mob.anInt164=j30;
            mob.hitPointsCurrent=hits;
            mob.hitPointsBase=hitsBase;
            mob.combatTimer=200;
            if (mob == ourPlayer) {
              playerStatCurrent[3]=hits;
              playerStatBase[3]=hitsBase;
              showWelcomeBox=false;
            }
          }
        }
 else         if (mobUpdateType == 3) {
          int k30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int k34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=k30;
            mob.attackingNpcIndex=k34;
            mob.attackingMobIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 4) {
          int l30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int l34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=l30;
            mob.attackingMobIndex=l34;
            mob.attackingNpcIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 5) {
          if (mob != null) {
            mob.mobIntUnknown=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=2;
            mob.nameLong=DataOperations.getUnsigned8Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=8;
            mob.name=DataOperations.longToString(mob.nameLong);
            int i31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset++;
            for (int i35=0; i35 < i31; i35++) {
              mob.animationCount[i35]=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
              mobUpdateOffset++;
            }
            for (int l37=i31; l37 < 12; l37++)             mob.animationCount[l37]=0;
            mob.colourHairType=data[mobUpdateOffset++] & 0xff;
            mob.colourTopType=data[mobUpdateOffset++] & 0xff;
            mob.colourBottomType=data[mobUpdateOffset++] & 0xff;
            mob.colourSkinType=data[mobUpdateOffset++] & 0xff;
            mob.level=data[mobUpdateOffset++] & 0xff;
            mob.anInt179=data[mobUpdateOffset++] & 0xff;
            mob.admin=data[mobUpdateOffset++] & 0xff;
          }
 else {
            mobUpdateOffset+=14;
            int j31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset+=j31 + 1;
          }
        }
 else         if (mobUpdateType == 6) {
          byte byte8=data[mobUpdateOffset];
          mobUpdateOffset++;
          if (mob != null) {
            String s3=DataConversions.byteToString(data,mobUpdateOffset,byte8);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s3;
            if (mob == ourPlayer)             displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,5,mob.admin);
          }
          mobUpdateOffset+=byte8;
        }
      }
      return;
    }
    if (command == 129) {
      combatStyle=DataOperations.getUnsignedByte(data[1]);
      return;
    }
    if (command == 95) {
      for (int l1=1; l1 < length; )       if (DataOperations.getUnsignedByte(data[l1]) == 255) {
        int j9=0;
        int l15=getSectionX() + data[l1 + 1] >> 3;
        int j20=getSectionY() + data[l1 + 2] >> 3;
        l1+=3;
        for (int currentDoor=0; currentDoor < doorCount; currentDoor++) {
          int j27=(doorX[currentDoor] >> 3) - l15;
          int k31=(doorY[currentDoor] >> 3) - j20;
          if (j27 != 0 || k31 != 0) {
            if (currentDoor != j9) {
              doorModel[j9]=doorModel[currentDoor];
              doorModel[j9].anInt257=j9 + 10000;
              doorX[j9]=doorX[currentDoor];
              doorY[j9]=doorY[currentDoor];
              doorDirection[j9]=doorDirection[currentDoor];
              doorType[j9]=doorType[currentDoor];
            }
            j9++;
          }
 else {
            gameCamera.removeModel(doorModel[currentDoor]);
            engineHandle.updateDoor(doorX[currentDoor],doorY[currentDoor],doorDirection[currentDoor],doorType[currentDoor]);
          }
        }
        doorCount=j9;
      }
 else {
        int k9=DataOperations.getUnsigned2Bytes(data,l1);
        l1+=2;
        int i16=getSectionX() + data[l1++];
        int k20=getSectionY() + data[l1++];
        byte byte5=data[l1++];
        int k27=0;
        for (int l31=0; l31 < doorCount; l31++)         if (doorX[l31] != i16 || doorY[l31] != k20 || doorDirection[l31] != byte5) {
          if (l31 != k27) {
            doorModel[k27]=doorModel[l31];
            doorModel[k27].anInt257=k27 + 10000;
            doorX[k27]=doorX[l31];
            doorY[k27]=doorY[l31];
            doorDirection[k27]=doorDirection[l31];
            doorType[k27]=doorType[l31];
          }
          k27++;
        }
 else {
          gameCamera.removeModel(doorModel[l31]);
          engineHandle.updateDoor(doorX[l31],doorY[l31],doorDirection[l31],doorType[l31]);
        }
        doorCount=k27;
        if (k9 != 60000) {
          engineHandle.method408(i16,k20,byte5,k9);
          Model model=makeModel(i16,k20,byte5,k9,doorCount);
          doorModel[doorCount]=model;
          doorX[doorCount]=i16;
          doorY[doorCount]=k20;
          doorType[doorCount]=k9;
          doorDirection[doorCount++]=byte5;
        }
      }
      return;
    }
    if (command == 77) {
      lastNpcCount=npcCount;
      npcCount=0;
      for (int lastNpcIndex=0; lastNpcIndex < lastNpcCount; lastNpcIndex++)       lastNpcArray[lastNpcIndex]=npcArray[lastNpcIndex];
      int newNpcOffset=8;
      int newNpcCount=DataOperations.getIntFromByteArray(data,newNpcOffset,8);
      newNpcOffset+=8;
      for (int newNpcIndex=0; newNpcIndex < newNpcCount; newNpcIndex++) {
        Mob newNPC=getLastNpc(DataOperations.getIntFromByteArray(data,newNpcOffset,16));
        newNpcOffset+=16;
        int npcNeedsUpdate=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
        newNpcOffset++;
        if (npcNeedsUpdate != 0) {
          int i32=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
          newNpcOffset++;
          if (i32 == 0) {
            int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,3);
            newNpcOffset+=3;
            int waypointCurrent=newNPC.waypointCurrent;
            int waypointX=newNPC.waypointsX[waypointCurrent];
            int waypointY=newNPC.waypointsY[waypointCurrent];
            if (nextSprite == 2 || nextSprite == 1 || nextSprite == 3)             waypointX+=magicLoc;
            if (nextSprite == 6 || nextSprite == 5 || nextSprite == 7)             waypointX-=magicLoc;
            if (nextSprite == 4 || nextSprite == 3 || nextSprite == 5)             waypointY+=magicLoc;
            if (nextSprite == 0 || nextSprite == 1 || nextSprite == 7)             waypointY-=magicLoc;
            newNPC.nextSprite=nextSprite;
            newNPC.waypointCurrent=waypointCurrent=(waypointCurrent + 1) % 10;
            newNPC.waypointsX[waypointCurrent]=waypointX;
            newNPC.waypointsY[waypointCurrent]=waypointY;
          }
 else {
            int nextSpriteOffset=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
            newNpcOffset+=4;
            if ((nextSpriteOffset & 0xc) == 12) {
              continue;
            }
            newNPC.nextSprite=nextSpriteOffset;
          }
        }
        npcArray[npcCount++]=newNPC;
      }
      while (newNpcOffset + 34 < length * 8) {
        int serverIndex=DataOperations.getIntFromByteArray(data,newNpcOffset,16);
        newNpcOffset+=16;
        int i28=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (i28 > 15)         i28-=32;
        int j32=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (j32 > 15)         j32-=32;
        int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
        newNpcOffset+=4;
        int x=(getSectionX() + i28) * magicLoc + 64;
        int y=(getSectionY() + j32) * magicLoc + 64;
        int type=DataOperations.getIntFromByteArray(data,newNpcOffset,10);
        newNpcOffset+=10;
        if (type >= EntityHandler.npcCount())         type=24;
        addNPC(serverIndex,x,y,nextSprite,type);
      }
      return;
    }
    if (command == 190) {
      int j2=DataOperations.getUnsigned2Bytes(data,1);
      int i10=3;
      for (int k16=0; k16 < j2; k16++) {
        int i21=DataOperations.getUnsigned2Bytes(data,i10);
        i10+=2;
        Mob mob_2=npcRecordArray[i21];
        int j28=DataOperations.getUnsignedByte(data[i10]);
        i10++;
        if (j28 == 1) {
          int k32=DataOperations.getUnsigned2Bytes(data,i10);
          i10+=2;
          byte byte9=data[i10];
          i10++;
          if (mob_2 != null) {
            String s4=DataConversions.byteToString(data,i10,byte9);
            mob_2.lastMessageTimeout=150;
            mob_2.lastMessage=s4;
            if (k32 == ourPlayer.serverIndex)             displayMessage(""String_Node_Str"" + EntityHandler.getNpcDef(mob_2.type).getName() + ""String_Node_Str""+ mob_2.lastMessage,5,0);
          }
          i10+=byte9;
        }
 else         if (j28 == 2) {
          int l32=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int i36=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int k38=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          if (mob_2 != null) {
            mob_2.anInt164=l32;
            mob_2.hitPointsCurrent=i36;
            mob_2.hitPointsBase=k38;
            mob_2.combatTimer=200;
          }
        }
      }
      return;
    }
    if (command == 223) {
      showQuestionMenu=true;
      int newQuestionMenuCount=DataOperations.getUnsignedByte(data[1]);
      questionMenuCount=newQuestionMenuCount;
      int newQuestionMenuOffset=2;
      for (int l16=0; l16 < newQuestionMenuCount; l16++) {
        int newQuestionMenuQuestionLength=DataOperations.getUnsignedByte(data[newQuestionMenuOffset]);
        newQuestionMenuOffset++;
        questionMenuAnswer[l16]=new String(data,newQuestionMenuOffset,newQuestionMenuQuestionLength);
        newQuestionMenuOffset+=newQuestionMenuQuestionLength;
      }
      return;
    }
    if (command == 127) {
      showQuestionMenu=false;
      return;
    }
    if (command == 131) {
      needsClear=true;
      notInWilderness=true;
      hasWorldInfo=true;
      serverIndex=DataOperations.getUnsigned2Bytes(data,1);
      wildX=DataOperations.getUnsigned2Bytes(data,3);
      wildY=DataOperations.getUnsigned2Bytes(data,5);
      wildYSubtract=DataOperations.getUnsigned2Bytes(data,7);
      wildYMultiplier=DataOperations.getUnsigned2Bytes(data,9);
      wildY-=wildYSubtract * wildYMultiplier;
      return;
    }
    if (command == 180) {
      int l2=1;
      for (int k10=0; k10 < 18; k10++) {
        playerStatCurrent[k10]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int i17=0; i17 < 18; i17++) {
        playerStatBase[i17]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int k21=0; k21 < 18; k21++) {
        playerStatExperience[k21]=DataOperations.readInt(data,l2);
        l2+=4;
      }
      expGained=0;
      return;
    }
    if (command == 177) {
      int i3=1;
      for (int x=0; x < 6; x++) {
        equipmentStatus[x]=DataOperations.getSigned2Bytes(data,i3);
        i3+=2;
      }
      return;
    }
    if (command == 165) {
      playerAliveTimeout=250;
      return;
    }
    if (command == 115) {
      int thingLength=(length - 1) / 4;
      for (int currentThing=0; currentThing < thingLength; currentThing++) {
        int currentItemSectionX=getSectionX() + DataOperations.getSigned2Bytes(data,1 + currentThing * 4) >> 3;
        int currentItemSectionY=getSectionY() + DataOperations.getSigned2Bytes(data,3 + currentThing * 4) >> 3;
        int currentCount=0;
        for (int currentItem=0; currentItem < groundItemCount; currentItem++) {
          int currentItemOffsetX=(groundItemX[currentItem] >> 3) - currentItemSectionX;
          int currentItemOffsetY=(groundItemY[currentItem] >> 3) - currentItemSectionY;
          if (currentItemOffsetX != 0 || currentItemOffsetY != 0) {
            if (currentItem != currentCount) {
              groundItemX[currentCount]=groundItemX[currentItem];
              groundItemY[currentCount]=groundItemY[currentItem];
              groundItemType[currentCount]=groundItemType[currentItem];
              groundItemObjectVar[currentCount]=groundItemObjectVar[currentItem];
            }
            currentCount++;
          }
        }
        groundItemCount=currentCount;
        currentCount=0;
        for (int j33=0; j33 < objectCount; j33++) {
          int k36=(objectX[j33] >> 3) - currentItemSectionX;
          int l38=(objectY[j33] >> 3) - currentItemSectionY;
          if (k36 != 0 || l38 != 0) {
            if (j33 != currentCount) {
              objectModelArray[currentCount]=objectModelArray[j33];
              objectModelArray[currentCount].anInt257=currentCount;
              objectX[currentCount]=objectX[j33];
              objectY[currentCount]=objectY[j33];
              objectType[currentCount]=objectType[j33];
              objectID[currentCount]=objectID[j33];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(objectModelArray[j33]);
            engineHandle.updateObject(objectX[j33],objectY[j33],objectType[j33],objectID[j33]);
          }
        }
        objectCount=currentCount;
        currentCount=0;
        for (int l36=0; l36 < doorCount; l36++) {
          int i39=(doorX[l36] >> 3) - currentItemSectionX;
          int j41=(doorY[l36] >> 3) - currentItemSectionY;
          if (i39 != 0 || j41 != 0) {
            if (l36 != currentCount) {
              doorModel[currentCount]=doorModel[l36];
              doorModel[currentCount].anInt257=currentCount + 10000;
              doorX[currentCount]=doorX[l36];
              doorY[currentCount]=doorY[l36];
              doorDirection[currentCount]=doorDirection[l36];
              doorType[currentCount]=doorType[l36];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(doorModel[l36]);
            engineHandle.updateDoor(doorX[l36],doorY[l36],doorDirection[l36],doorType[l36]);
          }
        }
        doorCount=currentCount;
      }
      return;
    }
    if (command == 230) {
      showDrawPointsScreen=true;
      int pkbytes=1;
      pkatk=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkdef=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkstr=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkrange=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkmagic=DataOperations.readInt(data,pkbytes);
    }
    if (command == 207) {
      showCharacterLookScreen=true;
      return;
    }
    if (command == 4) {
      int currentMob=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[currentMob] != null)       tradeOtherPlayerName=mobArray[currentMob].name;
      showTradeWindow=true;
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      tradeMyItemCount=0;
      tradeOtherItemCount=0;
      return;
    }
    if (command == 187) {
      showTradeWindow=false;
      showTradeConfirmWindow=false;
      return;
    }
    if (command == 250) {
      tradeOtherItemCount=data[1] & 0xff;
      int l3=2;
      for (int i11=0; i11 < tradeOtherItemCount; i11++) {
        tradeOtherItems[i11]=DataOperations.getUnsigned2Bytes(data,l3);
        l3+=2;
        tradeOtherItemsCount[i11]=DataOperations.readInt(data,l3);
        l3+=4;
      }
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      return;
    }
    if (command == 92) {
      tradeOtherAccepted=data[1] == 1;
    }
    if (command == 253) {
      showShop=true;
      int i4=1;
      int j11=data[i4++] & 0xff;
      byte byte4=data[i4++];
      shopItemSellPriceModifier=data[i4++] & 0xff;
      shopItemBuyPriceModifier=data[i4++] & 0xff;
      for (int i22=0; i22 < 40; i22++)       shopItems[i22]=-1;
      for (int j25=0; j25 < j11; j25++) {
        shopItems[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemCount[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemsBuyPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
        shopItemsSellPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
      }
      if (byte4 == 1) {
        int l28=39;
        for (int k33=0; k33 < inventoryCount; k33++) {
          if (l28 < j11)           break;
          boolean flag2=false;
          for (int j39=0; j39 < 40; j39++) {
            if (shopItems[j39] != getInventoryItems()[k33])             continue;
            flag2=true;
            break;
          }
          if (getInventoryItems()[k33] == 10)           flag2=true;
          if (!flag2) {
            shopItems[l28]=getInventoryItems()[k33] & 0x7fff;
            shopItemsSellPrice[l28]=EntityHandler.getItemDef(shopItems[l28]).basePrice - (int)(EntityHandler.getItemDef(shopItems[l28]).basePrice / 2.5);
            shopItemsSellPrice[l28]=shopItemsSellPrice[l28] - (int)(shopItemsSellPrice[l28] * 0.10);
            shopItemCount[l28]=0;
            l28--;
          }
        }
      }
      if (selectedShopItemIndex >= 0 && selectedShopItemIndex < 40 && shopItems[selectedShopItemIndex] != selectedShopItemType) {
        selectedShopItemIndex=-1;
        selectedShopItemType=-2;
      }
      return;
    }
    if (command == 220) {
      showShop=false;
      return;
    }
    if (command == 18) {
      tradeWeAccepted=data[1] == 1;
    }
    if (command == 152) {
      configAutoCameraAngle=DataOperations.getUnsignedByte(data[1]) == 1;
      configMouseButtons=DataOperations.getUnsignedByte(data[2]) == 1;
      configSoundEffects=DataOperations.getUnsignedByte(data[3]) == 1;
      showRoof=DataOperations.getUnsignedByte(data[4]) == 1;
      autoScreenshot=DataOperations.getUnsignedByte(data[5]) == 1;
      combatWindow=DataOperations.getUnsignedByte(data[6]) == 1;
      return;
    }
    if (command == 209) {
      for (int currentPrayer=0; currentPrayer < length - 1; currentPrayer++) {
        boolean prayerOff=data[currentPrayer + 1] == 1;
        if (!prayerOn[currentPrayer] && prayerOff)         playSound(""String_Node_Str"");
        if (prayerOn[currentPrayer] && !prayerOff)         playSound(""String_Node_Str"");
        prayerOn[currentPrayer]=prayerOff;
      }
      return;
    }
    if (command == 93) {
      showBank=true;
      int l4=1;
      newBankItemCount=data[l4++] & 0xff;
      bankItemsMax=data[l4++] & 0xff;
      for (int k11=0; k11 < newBankItemCount; k11++) {
        newBankItems[k11]=DataOperations.getUnsigned2Bytes(data,l4);
        l4+=2;
        newBankItemsCount[k11]=DataOperations.getUnsigned4Bytes(data,l4);
        l4+=4;
      }
      updateBankItems();
      return;
    }
    if (command == 171) {
      showBank=false;
      return;
    }
    if (command == 211) {
      int idx=data[1] & 0xFF;
      int oldExp=playerStatExperience[idx];
      playerStatExperience[idx]=DataOperations.readInt(data,2);
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 229) {
      int j5=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[j5] != null) {
        duelOpponentName=mobArray[j5].name;
      }
      showDuelWindow=true;
      duelMyItemCount=0;
      duelOpponentItemCount=0;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      duelNoRetreating=false;
      duelNoMagic=false;
      duelNoPrayer=false;
      duelNoWeapons=false;
      return;
    }
    if (command == 160) {
      showDuelWindow=false;
      showDuelConfirmWindow=false;
      return;
    }
    if (command == 251) {
      showTradeConfirmWindow=true;
      tradeConfirmAccepted=false;
      showTradeWindow=false;
      int k5=1;
      tradeConfirmOtherNameLong=DataOperations.getUnsigned8Bytes(data,k5);
      k5+=8;
      tradeConfirmOtherItemCount=data[k5++] & 0xff;
      for (int l11=0; l11 < tradeConfirmOtherItemCount; l11++) {
        tradeConfirmOtherItems[l11]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmOtherItemsCount[l11]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      tradeConfirmItemCount=data[k5++] & 0xff;
      for (int k17=0; k17 < tradeConfirmItemCount; k17++) {
        tradeConfirmItems[k17]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmItemsCount[k17]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      return;
    }
    if (command == 63) {
      duelOpponentItemCount=data[1] & 0xff;
      int l5=2;
      for (int i12=0; i12 < duelOpponentItemCount; i12++) {
        duelOpponentItems[i12]=DataOperations.getUnsigned2Bytes(data,l5);
        l5+=2;
        duelOpponentItemsCount[i12]=DataOperations.readInt(data,l5);
        l5+=4;
      }
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 198) {
      duelNoRetreating=data[1] == 1;
      duelNoMagic=data[2] == 1;
      duelNoPrayer=data[3] == 1;
      duelNoWeapons=data[4] == 1;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 139) {
      int bankDataOffset=1;
      int bankSlot=data[bankDataOffset++] & 0xff;
      int bankItemId=DataOperations.getUnsigned2Bytes(data,bankDataOffset);
      bankDataOffset+=2;
      int bankItemCount=DataOperations.getUnsigned4Bytes(data,bankDataOffset);
      bankDataOffset+=4;
      if (bankItemCount == 0) {
        newBankItemCount--;
        for (int currentBankSlot=bankSlot; currentBankSlot < newBankItemCount; currentBankSlot++) {
          newBankItems[currentBankSlot]=newBankItems[currentBankSlot + 1];
          newBankItemsCount[currentBankSlot]=newBankItemsCount[currentBankSlot + 1];
        }
      }
 else {
        newBankItems[bankSlot]=bankItemId;
        newBankItemsCount[bankSlot]=bankItemCount;
        if (bankSlot >= newBankItemCount)         newBankItemCount=bankSlot + 1;
      }
      updateBankItems();
      return;
    }
    if (command == 228) {
      int j6=1;
      int k12=1;
      int i18=data[j6++] & 0xff;
      int k22=DataOperations.getUnsigned2Bytes(data,j6);
      j6+=2;
      if (EntityHandler.getItemDef(k22 & 0x7fff).isStackable()) {
        k12=DataOperations.readInt(data,j6);
        j6+=4;
      }
      getInventoryItems()[i18]=k22 & 0x7fff;
      wearing[i18]=k22 / 32768;
      inventoryItemsCount[i18]=k12;
      if (i18 >= inventoryCount)       inventoryCount=i18 + 1;
      return;
    }
    if (command == 191) {
      int k6=data[1] & 0xff;
      inventoryCount--;
      for (int l12=k6; l12 < inventoryCount; l12++) {
        getInventoryItems()[l12]=getInventoryItems()[l12 + 1];
        inventoryItemsCount[l12]=inventoryItemsCount[l12 + 1];
        wearing[l12]=wearing[l12 + 1];
      }
      return;
    }
    if (command == 208) {
      int pointer=1;
      int idx=data[pointer++] & 0xff;
      int oldExp=playerStatExperience[idx];
      playerStatCurrent[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatBase[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatExperience[idx]=DataOperations.readInt(data,pointer);
      pointer+=4;
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 65) {
      duelOpponentAccepted=data[1] == 1;
    }
    if (command == 197) {
      duelMyAccepted=data[1] == 1;
    }
    if (command == 147) {
      showDuelConfirmWindow=true;
      duelWeAccept=false;
      showDuelWindow=false;
      int i7=1;
      duelOpponentNameLong=DataOperations.getUnsigned8Bytes(data,i7);
      i7+=8;
      duelConfirmOpponentItemCount=data[i7++] & 0xff;
      for (int j13=0; j13 < duelConfirmOpponentItemCount; j13++) {
        duelConfirmOpponentItems[j13]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmOpponentItemsCount[j13]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelConfirmMyItemCount=data[i7++] & 0xff;
      for (int j18=0; j18 < duelConfirmMyItemCount; j18++) {
        duelConfirmMyItems[j18]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmMyItemsCount[j18]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelCantRetreat=data[i7++] & 0xff;
      duelUseMagic=data[i7++] & 0xff;
      duelUsePrayer=data[i7++] & 0xff;
      duelUseWeapons=data[i7++] & 0xff;
      return;
    }
    if (command == 11) {
      String s=new String(data,1,length - 1);
      playSound(s);
      return;
    }
    if (command == 23) {
      if (anInt892 < 50) {
        int j7=data[1] & 0xff;
        int k13=data[2] + getSectionX();
        int k18=data[3] + getSectionY();
        anIntArray782[anInt892]=j7;
        anIntArray923[anInt892]=0;
        anIntArray944[anInt892]=k13;
        anIntArray757[anInt892]=k18;
        anInt892++;
      }
      return;
    }
    if (command == 248) {
      if (!hasReceivedWelcomeBoxDetails) {
        lastLoggedInDays=DataOperations.getUnsigned2Bytes(data,1);
        subscriptionLeftDays=DataOperations.getUnsigned2Bytes(data,3);
        lastLoggedInAddress=new String(data,5,length - 5);
        showWelcomeBox=true;
        hasReceivedWelcomeBoxDetails=true;
      }
      return;
    }
    if (command == 148) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=false;
      return;
    }
    if (command == 64) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=true;
      return;
    }
    if (command == 126) {
      fatigue=DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 206) {
      if (!sleeping) {
      }
      sleeping=true;
      gameMenu.updateText(chatHandle,""String_Node_Str"");
      super.inputText=""String_Node_Str"";
      super.enteredText=""String_Node_Str"";
      sleepEquation=DataOperations.getImage(data,1,length);
      return;
    }
    if (command == 182) {
      int offset=1;
      questPoints=DataOperations.getUnsigned2Bytes(data,offset);
      offset+=2;
      for (int i=0; i < questName.length; i++)       questStage[i]=data[offset + i];
      return;
    }
    if (command == 224) {
      sleeping=false;
      sleepMessage=null;
      return;
    }
    if (command == 225) {
      sleepMessage=""String_Node_Str"";
      return;
    }
    if (command == 174) {
      DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 181) {
      if (autoScreenshot) {
        takeScreenshot(false);
      }
      return;
    }
    if (command == 172) {
      systemUpdate=DataOperations.getUnsigned2Bytes(data,1) * 32;
      return;
    }
  }
 catch (  Exception e) {
  }
}","protected final void handleIncomingPacket(int command,int length,byte data[]){
  try {
    if (command == 254) {
      int bar=DataOperations.getUnsigned4Bytes(data,1);
      if (bar == -1) {
        smithingscreen.isVisible=false;
      }
 else {
        SmithingScreen.changeItems(smithingscreen,bar);
        smithingscreen.isVisible=true;
      }
    }
    if (command == 231) {
      return;
    }
    if (command == 233) {
      questPoints=DataOperations.getUnsignedByte(data[1]);
      int k=DataOperations.getUnsignedByte(data[2]);
      int r=3;
      newQuestNames=new String[k];
      questStage=new byte[k];
      for (int i=0; i < k; i++) {
        int uid=DataOperations.getUnsignedByte(data[r]);
        r++;
        newQuestNames[i]=questName[uid];
        questStage[i]=(byte)DataOperations.getUnsignedByte(data[r]);
        r++;
      }
    }
    if (command == 110) {
      int i=1;
      serverStartTime=DataOperations.getUnsigned8Bytes(data,i);
      i+=8;
      serverLocation=new String(data,i,length - i);
      return;
    }
    if (command == 145) {
      if (!hasWorldInfo) {
        return;
      }
      loading=true;
      lastPlayerCount=playerCount;
      for (int k=0; k < lastPlayerCount; k++)       lastPlayerArray[k]=playerArray[k];
      int currentOffset=8;
      setSectionX(DataOperations.getIntFromByteArray(data,currentOffset,11));
      currentOffset+=11;
      setSectionY(DataOperations.getIntFromByteArray(data,currentOffset,13));
      currentOffset+=13;
      int mobSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
      currentOffset+=4;
      boolean sectionLoaded=loadSection(getSectionX(),getSectionY());
      setSectionX(getSectionX() - getAreaX());
      setSectionY(getSectionY() - getAreaY());
      int mapEnterX=getSectionX() * magicLoc + 64;
      int mapEnterY=getSectionY() * magicLoc + 64;
      if (sectionLoaded) {
        ourPlayer.waypointCurrent=0;
        ourPlayer.waypointEndSprite=0;
        ourPlayer.currentX=ourPlayer.waypointsX[0]=mapEnterX;
        ourPlayer.currentY=ourPlayer.waypointsY[0]=mapEnterY;
      }
      playerCount=0;
      ourPlayer=makePlayer(serverIndex,mapEnterX,mapEnterY,mobSprite);
      int newPlayerCount=DataOperations.getIntFromByteArray(data,currentOffset,8);
      currentOffset+=8;
      for (int currentNewPlayer=0; currentNewPlayer < newPlayerCount; currentNewPlayer++) {
        Mob lastMob=getLastPlayer(DataOperations.getIntFromByteArray(data,currentOffset,16));
        currentOffset+=16;
        int nextPlayer=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        if (nextPlayer != 0) {
          int waypointsLeft=DataOperations.getIntFromByteArray(data,currentOffset,1);
          currentOffset++;
          if (waypointsLeft == 0) {
            int currentNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,3);
            currentOffset+=3;
            int currentWaypoint=lastMob.waypointCurrent;
            int newWaypointX=lastMob.waypointsX[currentWaypoint];
            int newWaypointY=lastMob.waypointsY[currentWaypoint];
            if (currentNextSprite == 2 || currentNextSprite == 1 || currentNextSprite == 3)             newWaypointX+=magicLoc;
            if (currentNextSprite == 6 || currentNextSprite == 5 || currentNextSprite == 7)             newWaypointX-=magicLoc;
            if (currentNextSprite == 4 || currentNextSprite == 3 || currentNextSprite == 5)             newWaypointY+=magicLoc;
            if (currentNextSprite == 0 || currentNextSprite == 1 || currentNextSprite == 7)             newWaypointY-=magicLoc;
            lastMob.nextSprite=currentNextSprite;
            lastMob.waypointCurrent=currentWaypoint=(currentWaypoint + 1) % 10;
            lastMob.waypointsX[currentWaypoint]=newWaypointX;
            lastMob.waypointsY[currentWaypoint]=newWaypointY;
          }
 else {
            int needsNextSprite=DataOperations.getIntFromByteArray(data,currentOffset,4);
            currentOffset+=4;
            if ((needsNextSprite & 0xc) == 12) {
              continue;
            }
            lastMob.nextSprite=needsNextSprite;
          }
        }
        playerArray[playerCount++]=lastMob;
      }
      int mobCount=0;
      while (currentOffset + 24 < length * 8) {
        int mobIndex=DataOperations.getIntFromByteArray(data,currentOffset,16);
        currentOffset+=16;
        int areaMobX=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobX > 15)         areaMobX-=32;
        int areaMobY=DataOperations.getIntFromByteArray(data,currentOffset,5);
        currentOffset+=5;
        if (areaMobY > 15)         areaMobY-=32;
        int mobArrayMobID=DataOperations.getIntFromByteArray(data,currentOffset,4);
        currentOffset+=4;
        int addIndex=DataOperations.getIntFromByteArray(data,currentOffset,1);
        currentOffset++;
        int mobX=(getSectionX() + areaMobX) * magicLoc + 64;
        int mobY=(getSectionY() + areaMobY) * magicLoc + 64;
        makePlayer(mobIndex,mobX,mobY,mobArrayMobID);
        if (addIndex == 0)         mobArrayIndexes[mobCount++]=mobIndex;
      }
      if (mobCount > 0) {
        super.streamClass.createPacket(83);
        super.streamClass.add2ByteInt(mobCount);
        for (int currentMob=0; currentMob < mobCount; currentMob++) {
          Mob dummyMob=mobArray[mobArrayIndexes[currentMob]];
          super.streamClass.add2ByteInt(dummyMob.serverIndex);
          super.streamClass.add2ByteInt(dummyMob.mobIntUnknown);
        }
        super.streamClass.formatPacket();
        mobCount=0;
      }
      loading=false;
      return;
    }
    if (command == 109) {
      for (int l=1; l < length; )       if (DataOperations.getUnsignedByte(data[l]) == 255) {
        int newCount=0;
        int newSectionX=getSectionX() + data[l + 1] >> 3;
        int newSectionY=getSectionY() + data[l + 2] >> 3;
        l+=3;
        for (int groundItem=0; groundItem < groundItemCount; groundItem++) {
          int newX=(groundItemX[groundItem] >> 3) - newSectionX;
          int newY=(groundItemY[groundItem] >> 3) - newSectionY;
          if (newX != 0 || newY != 0) {
            if (groundItem != newCount) {
              groundItemX[newCount]=groundItemX[groundItem];
              groundItemY[newCount]=groundItemY[groundItem];
              groundItemType[newCount]=groundItemType[groundItem];
              groundItemObjectVar[newCount]=groundItemObjectVar[groundItem];
            }
            newCount++;
          }
        }
        groundItemCount=newCount;
      }
 else {
        int i8=DataOperations.getUnsigned2Bytes(data,l);
        l+=2;
        int k14=getSectionX() + data[l++];
        int j19=getSectionY() + data[l++];
        if ((i8 & 0x8000) == 0) {
          groundItemX[groundItemCount]=k14;
          groundItemY[groundItemCount]=j19;
          groundItemType[groundItemCount]=i8;
          groundItemObjectVar[groundItemCount]=0;
          for (int k23=0; k23 < objectCount; k23++) {
            if (objectX[k23] != k14 || objectY[k23] != j19)             continue;
            groundItemObjectVar[groundItemCount]=EntityHandler.getObjectDef(objectType[k23]).getGroundItemVar();
            break;
          }
          groundItemCount++;
        }
 else {
          i8&=0x7fff;
          int l23=0;
          for (int k26=0; k26 < groundItemCount; k26++) {
            if (groundItemX[k26] != k14 || groundItemY[k26] != j19 || groundItemType[k26] != i8) {
              if (k26 != l23) {
                groundItemX[l23]=groundItemX[k26];
                groundItemY[l23]=groundItemY[k26];
                groundItemType[l23]=groundItemType[k26];
                groundItemObjectVar[l23]=groundItemObjectVar[k26];
              }
              l23++;
            }
 else {
              i8=-123;
            }
          }
          groundItemCount=l23;
        }
      }
      return;
    }
    if (command == 27) {
      for (int i1=1; i1 < length; )       if (DataOperations.getUnsignedByte(data[i1]) == 255) {
        int j8=0;
        int l14=getSectionX() + data[i1 + 1] >> 3;
        int k19=getSectionY() + data[i1 + 2] >> 3;
        i1+=3;
        for (int i24=0; i24 < objectCount; i24++) {
          int l26=(objectX[i24] >> 3) - l14;
          int k29=(objectY[i24] >> 3) - k19;
          if (l26 != 0 || k29 != 0) {
            if (i24 != j8) {
              objectModelArray[j8]=objectModelArray[i24];
              objectModelArray[j8].anInt257=j8;
              objectX[j8]=objectX[i24];
              objectY[j8]=objectY[i24];
              objectType[j8]=objectType[i24];
              objectID[j8]=objectID[i24];
            }
            j8++;
          }
 else {
            gameCamera.removeModel(objectModelArray[i24]);
            engineHandle.updateObject(objectX[i24],objectY[i24],objectType[i24],objectID[i24]);
          }
        }
        objectCount=j8;
      }
 else {
        int k8=DataOperations.getUnsigned2Bytes(data,i1);
        i1+=2;
        int i15=getSectionX() + data[i1++];
        int l19=getSectionY() + data[i1++];
        int l29=data[i1++];
        int j24=0;
        for (int i27=0; i27 < objectCount; i27++)         if (objectX[i27] != i15 || objectY[i27] != l19 || objectID[i27] != l29) {
          if (i27 != j24) {
            objectModelArray[j24]=objectModelArray[i27];
            objectModelArray[j24].anInt257=j24;
            objectX[j24]=objectX[i27];
            objectY[j24]=objectY[i27];
            objectType[j24]=objectType[i27];
            objectID[j24]=objectID[i27];
          }
          j24++;
        }
 else {
          gameCamera.removeModel(objectModelArray[i27]);
          engineHandle.updateObject(objectX[i27],objectY[i27],objectType[i27],objectID[i27]);
        }
        objectCount=j24;
        if (k8 != 60000) {
          engineHandle.registerObjectDir(i15,l19,l29);
          int i34;
          int j37;
          if (l29 == 0 || l29 == 4) {
            i34=EntityHandler.getObjectDef(k8).getWidth();
            j37=EntityHandler.getObjectDef(k8).getHeight();
          }
 else {
            j37=EntityHandler.getObjectDef(k8).getWidth();
            i34=EntityHandler.getObjectDef(k8).getHeight();
          }
          int j40=((i15 + i15 + i34) * magicLoc) / 2;
          int i42=((l19 + l19 + j37) * magicLoc) / 2;
          int k43=EntityHandler.getObjectDef(k8).modelID;
          Model model_1=gameDataModels[k43].method203();
          gameCamera.addModel(model_1);
          model_1.anInt257=objectCount;
          model_1.method188(0,l29 * 32,0);
          model_1.method190(j40,-engineHandle.getAveragedElevation(j40,i42),i42);
          model_1.method184(true,48,48,-50,-10,-50);
          engineHandle.method412(i15,l19,k8,l29);
          if (k8 == 74)           model_1.method190(0,-480,0);
          objectX[objectCount]=i15;
          objectY[objectCount]=l19;
          objectType[objectCount]=k8;
          objectID[objectCount]=l29;
          objectModelArray[objectCount++]=model_1;
        }
      }
      return;
    }
    if (command == 114) {
      int invOffset=1;
      inventoryCount=data[invOffset++] & 0xff;
      for (int invItem=0; invItem < inventoryCount; invItem++) {
        int j15=DataOperations.getUnsigned2Bytes(data,invOffset);
        invOffset+=2;
        getInventoryItems()[invItem]=(j15 & 0x7fff);
        wearing[invItem]=j15 / 32768;
        if (EntityHandler.getItemDef(j15 & 0x7fff).isStackable()) {
          inventoryItemsCount[invItem]=DataOperations.readInt(data,invOffset);
          invOffset+=4;
        }
 else {
          inventoryItemsCount[invItem]=1;
        }
      }
      return;
    }
    if (command == 53) {
      int mobCount=DataOperations.getUnsigned2Bytes(data,1);
      int mobUpdateOffset=3;
      for (int currentMob=0; currentMob < mobCount; currentMob++) {
        int mobArrayIndex=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
        mobUpdateOffset+=2;
        if (mobArrayIndex < 0 || mobArrayIndex > mobArray.length) {
          return;
        }
        Mob mob=mobArray[mobArrayIndex];
        if (mob == null) {
          return;
        }
        byte mobUpdateType=data[mobUpdateOffset++];
        if (mobUpdateType == 0) {
          int i30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.anInt163=150;
            mob.anInt162=i30;
          }
        }
 else         if (mobUpdateType == 1) {
          byte byte7=data[mobUpdateOffset++];
          if (mob != null) {
            String s2=DataConversions.byteToString(data,mobUpdateOffset,byte7);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s2;
            displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,2,mob.admin);
          }
          mobUpdateOffset+=byte7;
        }
 else         if (mobUpdateType == 2) {
          int j30=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hits=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          int hitsBase=DataOperations.getUnsignedByte(data[mobUpdateOffset++]);
          if (mob != null) {
            mob.anInt164=j30;
            mob.hitPointsCurrent=hits;
            mob.hitPointsBase=hitsBase;
            mob.combatTimer=200;
            if (mob == ourPlayer) {
              playerStatCurrent[3]=hits;
              playerStatBase[3]=hitsBase;
              showWelcomeBox=false;
            }
          }
        }
 else         if (mobUpdateType == 3) {
          int k30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int k34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=k30;
            mob.attackingNpcIndex=k34;
            mob.attackingMobIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 4) {
          int l30=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          int l34=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
          mobUpdateOffset+=2;
          if (mob != null) {
            mob.attackingCameraInt=l30;
            mob.attackingMobIndex=l34;
            mob.attackingNpcIndex=-1;
            mob.anInt176=attackingInt40;
          }
        }
 else         if (mobUpdateType == 5) {
          if (mob != null) {
            mob.mobIntUnknown=DataOperations.getUnsigned2Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=2;
            mob.nameLong=DataOperations.getUnsigned8Bytes(data,mobUpdateOffset);
            mobUpdateOffset+=8;
            mob.name=DataOperations.longToString(mob.nameLong);
            int i31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset++;
            for (int i35=0; i35 < i31; i35++) {
              mob.animationCount[i35]=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
              mobUpdateOffset++;
            }
            for (int l37=i31; l37 < 12; l37++)             mob.animationCount[l37]=0;
            mob.colourHairType=data[mobUpdateOffset++] & 0xff;
            mob.colourTopType=data[mobUpdateOffset++] & 0xff;
            mob.colourBottomType=data[mobUpdateOffset++] & 0xff;
            mob.colourSkinType=data[mobUpdateOffset++] & 0xff;
            mob.level=data[mobUpdateOffset++] & 0xff;
            mob.anInt179=data[mobUpdateOffset++] & 0xff;
            mob.admin=data[mobUpdateOffset++] & 0xff;
          }
 else {
            mobUpdateOffset+=14;
            int j31=DataOperations.getUnsignedByte(data[mobUpdateOffset]);
            mobUpdateOffset+=j31 + 1;
          }
        }
 else         if (mobUpdateType == 6) {
          byte byte8=data[mobUpdateOffset];
          mobUpdateOffset++;
          if (mob != null) {
            String s3=DataConversions.byteToString(data,mobUpdateOffset,byte8);
            mob.lastMessageTimeout=150;
            mob.lastMessage=s3;
            if (mob == ourPlayer)             displayMessage(mob.name + ""String_Node_Str"" + mob.lastMessage,5,mob.admin);
          }
          mobUpdateOffset+=byte8;
        }
      }
      return;
    }
    if (command == 129) {
      combatStyle=DataOperations.getUnsignedByte(data[1]);
      return;
    }
    if (command == 95) {
      for (int l1=1; l1 < length; )       if (DataOperations.getUnsignedByte(data[l1]) == 255) {
        int j9=0;
        int l15=getSectionX() + data[l1 + 1] >> 3;
        int j20=getSectionY() + data[l1 + 2] >> 3;
        l1+=3;
        for (int currentDoor=0; currentDoor < doorCount; currentDoor++) {
          int j27=(doorX[currentDoor] >> 3) - l15;
          int k31=(doorY[currentDoor] >> 3) - j20;
          if (j27 != 0 || k31 != 0) {
            if (currentDoor != j9) {
              doorModel[j9]=doorModel[currentDoor];
              doorModel[j9].anInt257=j9 + 10000;
              doorX[j9]=doorX[currentDoor];
              doorY[j9]=doorY[currentDoor];
              doorDirection[j9]=doorDirection[currentDoor];
              doorType[j9]=doorType[currentDoor];
            }
            j9++;
          }
 else {
            gameCamera.removeModel(doorModel[currentDoor]);
            engineHandle.updateDoor(doorX[currentDoor],doorY[currentDoor],doorDirection[currentDoor],doorType[currentDoor]);
          }
        }
        doorCount=j9;
      }
 else {
        int k9=DataOperations.getUnsigned2Bytes(data,l1);
        l1+=2;
        int i16=getSectionX() + data[l1++];
        int k20=getSectionY() + data[l1++];
        byte byte5=data[l1++];
        int k27=0;
        for (int l31=0; l31 < doorCount; l31++)         if (doorX[l31] != i16 || doorY[l31] != k20 || doorDirection[l31] != byte5) {
          if (l31 != k27) {
            doorModel[k27]=doorModel[l31];
            doorModel[k27].anInt257=k27 + 10000;
            doorX[k27]=doorX[l31];
            doorY[k27]=doorY[l31];
            doorDirection[k27]=doorDirection[l31];
            doorType[k27]=doorType[l31];
          }
          k27++;
        }
 else {
          gameCamera.removeModel(doorModel[l31]);
          engineHandle.updateDoor(doorX[l31],doorY[l31],doorDirection[l31],doorType[l31]);
        }
        doorCount=k27;
        if (k9 != 60000) {
          engineHandle.method408(i16,k20,byte5,k9);
          Model model=makeModel(i16,k20,byte5,k9,doorCount);
          doorModel[doorCount]=model;
          doorX[doorCount]=i16;
          doorY[doorCount]=k20;
          doorType[doorCount]=k9;
          doorDirection[doorCount++]=byte5;
        }
      }
      return;
    }
    if (command == 77) {
      lastNpcCount=npcCount;
      npcCount=0;
      for (int lastNpcIndex=0; lastNpcIndex < lastNpcCount; lastNpcIndex++)       lastNpcArray[lastNpcIndex]=npcArray[lastNpcIndex];
      int newNpcOffset=8;
      int newNpcCount=DataOperations.getIntFromByteArray(data,newNpcOffset,8);
      newNpcOffset+=8;
      for (int newNpcIndex=0; newNpcIndex < newNpcCount; newNpcIndex++) {
        Mob newNPC=getLastNpc(DataOperations.getIntFromByteArray(data,newNpcOffset,16));
        newNpcOffset+=16;
        int npcNeedsUpdate=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
        newNpcOffset++;
        if (npcNeedsUpdate != 0) {
          int i32=DataOperations.getIntFromByteArray(data,newNpcOffset,1);
          newNpcOffset++;
          if (i32 == 0) {
            int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,3);
            newNpcOffset+=3;
            int waypointCurrent=newNPC.waypointCurrent;
            int waypointX=newNPC.waypointsX[waypointCurrent];
            int waypointY=newNPC.waypointsY[waypointCurrent];
            if (nextSprite == 2 || nextSprite == 1 || nextSprite == 3)             waypointX+=magicLoc;
            if (nextSprite == 6 || nextSprite == 5 || nextSprite == 7)             waypointX-=magicLoc;
            if (nextSprite == 4 || nextSprite == 3 || nextSprite == 5)             waypointY+=magicLoc;
            if (nextSprite == 0 || nextSprite == 1 || nextSprite == 7)             waypointY-=magicLoc;
            newNPC.nextSprite=nextSprite;
            newNPC.waypointCurrent=waypointCurrent=(waypointCurrent + 1) % 10;
            newNPC.waypointsX[waypointCurrent]=waypointX;
            newNPC.waypointsY[waypointCurrent]=waypointY;
          }
 else {
            int nextSpriteOffset=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
            newNpcOffset+=4;
            if ((nextSpriteOffset & 0xc) == 12) {
              continue;
            }
            newNPC.nextSprite=nextSpriteOffset;
          }
        }
        npcArray[npcCount++]=newNPC;
      }
      while (newNpcOffset + 34 < length * 8) {
        int serverIndex=DataOperations.getIntFromByteArray(data,newNpcOffset,16);
        newNpcOffset+=16;
        int i28=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (i28 > 15)         i28-=32;
        int j32=DataOperations.getIntFromByteArray(data,newNpcOffset,5);
        newNpcOffset+=5;
        if (j32 > 15)         j32-=32;
        int nextSprite=DataOperations.getIntFromByteArray(data,newNpcOffset,4);
        newNpcOffset+=4;
        int x=(getSectionX() + i28) * magicLoc + 64;
        int y=(getSectionY() + j32) * magicLoc + 64;
        int type=DataOperations.getIntFromByteArray(data,newNpcOffset,10);
        newNpcOffset+=10;
        if (type >= EntityHandler.npcCount())         type=24;
        addNPC(serverIndex,x,y,nextSprite,type);
      }
      return;
    }
    if (command == 190) {
      int j2=DataOperations.getUnsigned2Bytes(data,1);
      int i10=3;
      for (int k16=0; k16 < j2; k16++) {
        int i21=DataOperations.getUnsigned2Bytes(data,i10);
        i10+=2;
        Mob mob_2=npcRecordArray[i21];
        int j28=DataOperations.getUnsignedByte(data[i10]);
        i10++;
        if (j28 == 1) {
          int k32=DataOperations.getUnsigned2Bytes(data,i10);
          i10+=2;
          byte byte9=data[i10];
          i10++;
          if (mob_2 != null) {
            String s4=DataConversions.byteToString(data,i10,byte9);
            mob_2.lastMessageTimeout=150;
            mob_2.lastMessage=s4;
            if (k32 == ourPlayer.serverIndex)             displayMessage(""String_Node_Str"" + EntityHandler.getNpcDef(mob_2.type).getName() + ""String_Node_Str""+ mob_2.lastMessage,5,0);
          }
          i10+=byte9;
        }
 else         if (j28 == 2) {
          int l32=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int i36=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          int k38=DataOperations.getUnsignedByte(data[i10]);
          i10++;
          if (mob_2 != null) {
            mob_2.anInt164=l32;
            mob_2.hitPointsCurrent=i36;
            mob_2.hitPointsBase=k38;
            mob_2.combatTimer=200;
          }
        }
      }
      return;
    }
    if (command == 223) {
      showQuestionMenu=true;
      int newQuestionMenuCount=DataOperations.getUnsignedByte(data[1]);
      questionMenuCount=newQuestionMenuCount;
      int newQuestionMenuOffset=2;
      for (int l16=0; l16 < newQuestionMenuCount; l16++) {
        int newQuestionMenuQuestionLength=DataOperations.getUnsignedByte(data[newQuestionMenuOffset]);
        newQuestionMenuOffset++;
        questionMenuAnswer[l16]=new String(data,newQuestionMenuOffset,newQuestionMenuQuestionLength);
        newQuestionMenuOffset+=newQuestionMenuQuestionLength;
      }
      return;
    }
    if (command == 127) {
      showQuestionMenu=false;
      return;
    }
    if (command == 131) {
      needsClear=true;
      notInWilderness=true;
      hasWorldInfo=true;
      serverIndex=DataOperations.getUnsigned2Bytes(data,1);
      wildX=DataOperations.getUnsigned2Bytes(data,3);
      wildY=DataOperations.getUnsigned2Bytes(data,5);
      wildYSubtract=DataOperations.getUnsigned2Bytes(data,7);
      wildYMultiplier=DataOperations.getUnsigned2Bytes(data,9);
      wildY-=wildYSubtract * wildYMultiplier;
      return;
    }
    if (command == 180) {
      int l2=1;
      for (int k10=0; k10 < 18; k10++) {
        playerStatCurrent[k10]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int i17=0; i17 < 18; i17++) {
        playerStatBase[i17]=DataOperations.getUnsignedByte(data[l2++]);
      }
      for (int k21=0; k21 < 18; k21++) {
        playerStatExperience[k21]=DataOperations.readInt(data,l2);
        l2+=4;
      }
      expGained=0;
      return;
    }
    if (command == 177) {
      int i3=1;
      for (int x=0; x < 6; x++) {
        equipmentStatus[x]=DataOperations.getSigned2Bytes(data,i3);
        i3+=2;
      }
      return;
    }
    if (command == 165) {
      playerAliveTimeout=250;
      return;
    }
    if (command == 115) {
      int thingLength=(length - 1) / 4;
      for (int currentThing=0; currentThing < thingLength; currentThing++) {
        int currentItemSectionX=getSectionX() + DataOperations.getSigned2Bytes(data,1 + currentThing * 4) >> 3;
        int currentItemSectionY=getSectionY() + DataOperations.getSigned2Bytes(data,3 + currentThing * 4) >> 3;
        int currentCount=0;
        for (int currentItem=0; currentItem < groundItemCount; currentItem++) {
          int currentItemOffsetX=(groundItemX[currentItem] >> 3) - currentItemSectionX;
          int currentItemOffsetY=(groundItemY[currentItem] >> 3) - currentItemSectionY;
          if (currentItemOffsetX != 0 || currentItemOffsetY != 0) {
            if (currentItem != currentCount) {
              groundItemX[currentCount]=groundItemX[currentItem];
              groundItemY[currentCount]=groundItemY[currentItem];
              groundItemType[currentCount]=groundItemType[currentItem];
              groundItemObjectVar[currentCount]=groundItemObjectVar[currentItem];
            }
            currentCount++;
          }
        }
        groundItemCount=currentCount;
        currentCount=0;
        for (int j33=0; j33 < objectCount; j33++) {
          int k36=(objectX[j33] >> 3) - currentItemSectionX;
          int l38=(objectY[j33] >> 3) - currentItemSectionY;
          if (k36 != 0 || l38 != 0) {
            if (j33 != currentCount) {
              objectModelArray[currentCount]=objectModelArray[j33];
              objectModelArray[currentCount].anInt257=currentCount;
              objectX[currentCount]=objectX[j33];
              objectY[currentCount]=objectY[j33];
              objectType[currentCount]=objectType[j33];
              objectID[currentCount]=objectID[j33];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(objectModelArray[j33]);
            engineHandle.updateObject(objectX[j33],objectY[j33],objectType[j33],objectID[j33]);
          }
        }
        objectCount=currentCount;
        currentCount=0;
        for (int l36=0; l36 < doorCount; l36++) {
          int i39=(doorX[l36] >> 3) - currentItemSectionX;
          int j41=(doorY[l36] >> 3) - currentItemSectionY;
          if (i39 != 0 || j41 != 0) {
            if (l36 != currentCount) {
              doorModel[currentCount]=doorModel[l36];
              doorModel[currentCount].anInt257=currentCount + 10000;
              doorX[currentCount]=doorX[l36];
              doorY[currentCount]=doorY[l36];
              doorDirection[currentCount]=doorDirection[l36];
              doorType[currentCount]=doorType[l36];
            }
            currentCount++;
          }
 else {
            gameCamera.removeModel(doorModel[l36]);
            engineHandle.updateDoor(doorX[l36],doorY[l36],doorDirection[l36],doorType[l36]);
          }
        }
        doorCount=currentCount;
      }
      return;
    }
    if (command == 230) {
      showDrawPointsScreen=true;
      int pkbytes=1;
      pkatk=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkdef=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkstr=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkrange=DataOperations.readInt(data,pkbytes);
      pkbytes+=4;
      pkmagic=DataOperations.readInt(data,pkbytes);
    }
    if (command == 207) {
      showCharacterLookScreen=true;
      return;
    }
    if (command == 4) {
      int currentMob=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[currentMob] != null)       tradeOtherPlayerName=mobArray[currentMob].name;
      showTradeWindow=true;
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      tradeMyItemCount=0;
      tradeOtherItemCount=0;
      return;
    }
    if (command == 187) {
      showTradeWindow=false;
      showTradeConfirmWindow=false;
      return;
    }
    if (command == 250) {
      tradeOtherItemCount=data[1] & 0xff;
      int l3=2;
      for (int i11=0; i11 < tradeOtherItemCount; i11++) {
        tradeOtherItems[i11]=DataOperations.getUnsigned2Bytes(data,l3);
        l3+=2;
        tradeOtherItemsCount[i11]=DataOperations.readInt(data,l3);
        l3+=4;
      }
      tradeOtherAccepted=false;
      tradeWeAccepted=false;
      return;
    }
    if (command == 92) {
      tradeOtherAccepted=data[1] == 1;
    }
    if (command == 253) {
      showShop=true;
      int i4=1;
      int j11=data[i4++] & 0xff;
      byte byte4=data[i4++];
      shopItemSellPriceModifier=data[i4++] & 0xff;
      shopItemBuyPriceModifier=data[i4++] & 0xff;
      for (int i22=0; i22 < 40; i22++)       shopItems[i22]=-1;
      for (int j25=0; j25 < j11; j25++) {
        shopItems[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemCount[j25]=DataOperations.getUnsigned2Bytes(data,i4);
        i4+=2;
        shopItemsBuyPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
        shopItemsSellPrice[j25]=DataOperations.getUnsigned4Bytes(data,i4);
        i4+=4;
      }
      if (byte4 == 1) {
        int l28=39;
        for (int k33=0; k33 < inventoryCount; k33++) {
          if (l28 < j11)           break;
          boolean flag2=false;
          for (int j39=0; j39 < 40; j39++) {
            if (shopItems[j39] != getInventoryItems()[k33])             continue;
            flag2=true;
            break;
          }
          if (getInventoryItems()[k33] == 10)           flag2=true;
          if (!flag2) {
            shopItems[l28]=getInventoryItems()[k33] & 0x7fff;
            shopItemsSellPrice[l28]=EntityHandler.getItemDef(shopItems[l28]).basePrice - (int)(EntityHandler.getItemDef(shopItems[l28]).basePrice / 2.5);
            shopItemsSellPrice[l28]=shopItemsSellPrice[l28] - (int)(shopItemsSellPrice[l28] * 0.10);
            shopItemCount[l28]=0;
            l28--;
          }
        }
      }
      if (selectedShopItemIndex >= 0 && selectedShopItemIndex < 40 && shopItems[selectedShopItemIndex] != selectedShopItemType) {
        selectedShopItemIndex=-1;
        selectedShopItemType=-2;
      }
      return;
    }
    if (command == 220) {
      showShop=false;
      return;
    }
    if (command == 18) {
      tradeWeAccepted=data[1] == 1;
    }
    if (command == 152) {
      configAutoCameraAngle=DataOperations.getUnsignedByte(data[1]) == 1;
      configMouseButtons=DataOperations.getUnsignedByte(data[2]) == 1;
      configSoundEffects=DataOperations.getUnsignedByte(data[3]) == 1;
      showRoof=DataOperations.getUnsignedByte(data[4]) == 1;
      autoScreenshot=DataOperations.getUnsignedByte(data[5]) == 1;
      combatWindow=DataOperations.getUnsignedByte(data[6]) == 1;
      return;
    }
    if (command == 209) {
      for (int currentPrayer=0; currentPrayer < length - 1; currentPrayer++) {
        boolean prayerOff=data[currentPrayer + 1] == 1;
        if (!prayerOn[currentPrayer] && prayerOff)         playSound(""String_Node_Str"");
        if (prayerOn[currentPrayer] && !prayerOff)         playSound(""String_Node_Str"");
        prayerOn[currentPrayer]=prayerOff;
      }
      return;
    }
    if (command == 93) {
      showBank=true;
      int l4=1;
      newBankItemCount=data[l4++] & 0xff;
      bankItemsMax=data[l4++] & 0xff;
      for (int k11=0; k11 < newBankItemCount; k11++) {
        newBankItems[k11]=DataOperations.getUnsigned2Bytes(data,l4);
        l4+=2;
        newBankItemsCount[k11]=DataOperations.getUnsigned4Bytes(data,l4);
        l4+=4;
      }
      updateBankItems();
      return;
    }
    if (command == 171) {
      showBank=false;
      return;
    }
    if (command == 211) {
      int idx=data[1] & 0xFF;
      int oldExp=playerStatExperience[idx];
      playerStatExperience[idx]=DataOperations.readInt(data,2);
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 229) {
      int j5=DataOperations.getUnsigned2Bytes(data,1);
      if (mobArray[j5] != null) {
        duelOpponentName=mobArray[j5].name;
      }
      showDuelWindow=true;
      duelMyItemCount=0;
      duelOpponentItemCount=0;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      duelNoRetreating=false;
      duelNoMagic=false;
      duelNoPrayer=false;
      duelNoWeapons=false;
      return;
    }
    if (command == 160) {
      showDuelWindow=false;
      showDuelConfirmWindow=false;
      return;
    }
    if (command == 251) {
      showTradeConfirmWindow=true;
      tradeConfirmAccepted=false;
      showTradeWindow=false;
      int k5=1;
      tradeConfirmOtherNameLong=DataOperations.getUnsigned8Bytes(data,k5);
      k5+=8;
      tradeConfirmOtherItemCount=data[k5++] & 0xff;
      for (int l11=0; l11 < tradeConfirmOtherItemCount; l11++) {
        tradeConfirmOtherItems[l11]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmOtherItemsCount[l11]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      tradeConfirmItemCount=data[k5++] & 0xff;
      for (int k17=0; k17 < tradeConfirmItemCount; k17++) {
        tradeConfirmItems[k17]=DataOperations.getUnsigned2Bytes(data,k5);
        k5+=2;
        tradeConfirmItemsCount[k17]=DataOperations.readInt(data,k5);
        k5+=4;
      }
      return;
    }
    if (command == 63) {
      duelOpponentItemCount=data[1] & 0xff;
      int l5=2;
      for (int i12=0; i12 < duelOpponentItemCount; i12++) {
        duelOpponentItems[i12]=DataOperations.getUnsigned2Bytes(data,l5);
        l5+=2;
        duelOpponentItemsCount[i12]=DataOperations.readInt(data,l5);
        l5+=4;
      }
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 198) {
      duelNoRetreating=data[1] == 1;
      duelNoMagic=data[2] == 1;
      duelNoPrayer=data[3] == 1;
      duelNoWeapons=data[4] == 1;
      duelOpponentAccepted=false;
      duelMyAccepted=false;
      return;
    }
    if (command == 139) {
      int bankDataOffset=1;
      int bankSlot=data[bankDataOffset++] & 0xff;
      int bankItemId=DataOperations.getUnsigned2Bytes(data,bankDataOffset);
      bankDataOffset+=2;
      int bankItemCount=DataOperations.getUnsigned4Bytes(data,bankDataOffset);
      bankDataOffset+=4;
      if (bankItemCount == 0) {
        newBankItemCount--;
        for (int currentBankSlot=bankSlot; currentBankSlot < newBankItemCount; currentBankSlot++) {
          newBankItems[currentBankSlot]=newBankItems[currentBankSlot + 1];
          newBankItemsCount[currentBankSlot]=newBankItemsCount[currentBankSlot + 1];
        }
      }
 else {
        newBankItems[bankSlot]=bankItemId;
        newBankItemsCount[bankSlot]=bankItemCount;
        if (bankSlot >= newBankItemCount)         newBankItemCount=bankSlot + 1;
      }
      updateBankItems();
      return;
    }
    if (command == 228) {
      int j6=1;
      int k12=1;
      int i18=data[j6++] & 0xff;
      int k22=DataOperations.getUnsigned2Bytes(data,j6);
      j6+=2;
      if (EntityHandler.getItemDef(k22 & 0x7fff).isStackable()) {
        k12=DataOperations.readInt(data,j6);
        j6+=4;
      }
      getInventoryItems()[i18]=k22 & 0x7fff;
      wearing[i18]=k22 / 32768;
      inventoryItemsCount[i18]=k12;
      if (i18 >= inventoryCount)       inventoryCount=i18 + 1;
      return;
    }
    if (command == 191) {
      int k6=data[1] & 0xff;
      inventoryCount--;
      for (int l12=k6; l12 < inventoryCount; l12++) {
        getInventoryItems()[l12]=getInventoryItems()[l12 + 1];
        inventoryItemsCount[l12]=inventoryItemsCount[l12 + 1];
        wearing[l12]=wearing[l12 + 1];
      }
      return;
    }
    if (command == 208) {
      int pointer=1;
      int idx=data[pointer++] & 0xff;
      int oldExp=playerStatExperience[idx];
      playerStatCurrent[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatBase[idx]=DataOperations.getUnsignedByte(data[pointer++]);
      playerStatExperience[idx]=DataOperations.readInt(data,pointer);
      pointer+=4;
      if (playerStatExperience[idx] > oldExp) {
        expGained+=(playerStatExperience[idx] - oldExp);
      }
      return;
    }
    if (command == 65) {
      duelOpponentAccepted=data[1] == 1;
    }
    if (command == 197) {
      duelMyAccepted=data[1] == 1;
    }
    if (command == 147) {
      showDuelConfirmWindow=true;
      duelWeAccept=false;
      showDuelWindow=false;
      int i7=1;
      duelOpponentNameLong=DataOperations.getUnsigned8Bytes(data,i7);
      i7+=8;
      duelConfirmOpponentItemCount=data[i7++] & 0xff;
      for (int j13=0; j13 < duelConfirmOpponentItemCount; j13++) {
        duelConfirmOpponentItems[j13]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmOpponentItemsCount[j13]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelConfirmMyItemCount=data[i7++] & 0xff;
      for (int j18=0; j18 < duelConfirmMyItemCount; j18++) {
        duelConfirmMyItems[j18]=DataOperations.getUnsigned2Bytes(data,i7);
        i7+=2;
        duelConfirmMyItemsCount[j18]=DataOperations.readInt(data,i7);
        i7+=4;
      }
      duelCantRetreat=data[i7++] & 0xff;
      duelUseMagic=data[i7++] & 0xff;
      duelUsePrayer=data[i7++] & 0xff;
      duelUseWeapons=data[i7++] & 0xff;
      return;
    }
    if (command == 11) {
      String s=new String(data,1,length - 1);
      playSound(s);
      return;
    }
    if (command == 23) {
      if (anInt892 < 50) {
        int j7=data[1] & 0xff;
        int k13=data[2] + getSectionX();
        int k18=data[3] + getSectionY();
        anIntArray782[anInt892]=j7;
        anIntArray923[anInt892]=0;
        anIntArray944[anInt892]=k13;
        anIntArray757[anInt892]=k18;
        anInt892++;
      }
      return;
    }
    if (command == 248) {
      if (!hasReceivedWelcomeBoxDetails) {
        lastLoggedInDays=DataOperations.getUnsigned2Bytes(data,1);
        subscriptionLeftDays=DataOperations.getUnsigned2Bytes(data,3);
        lastLoggedInAddress=new String(data,5,length - 5);
        showWelcomeBox=true;
        hasReceivedWelcomeBoxDetails=true;
      }
      return;
    }
    if (command == 148) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=false;
      return;
    }
    if (command == 64) {
      serverMessage=new String(data,1,length - 1);
      showServerMessageBox=true;
      serverMessageBoxTop=true;
      return;
    }
    if (command == 126) {
      fatigue=DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 206) {
      if (!sleeping) {
      }
      sleeping=true;
      gameMenu.updateText(chatHandle,""String_Node_Str"");
      super.inputText=""String_Node_Str"";
      super.enteredText=""String_Node_Str"";
      sleepEquation=DataOperations.getImage(data,1,length);
      return;
    }
    if (command == 182) {
      int offset=1;
      questPoints=DataOperations.getUnsigned2Bytes(data,offset);
      offset+=2;
      for (int i=0; i < questName.length; i++)       questStage[i]=data[offset + i];
      return;
    }
    if (command == 224) {
      sleeping=false;
      sleepMessage=null;
      return;
    }
    if (command == 225) {
      sleepMessage=""String_Node_Str"";
      return;
    }
    if (command == 174) {
      DataOperations.getUnsigned2Bytes(data,1);
      return;
    }
    if (command == 181) {
      if (autoScreenshot) {
        takeScreenshot(false);
      }
      return;
    }
    if (command == 172) {
      systemUpdate=DataOperations.getUnsigned2Bytes(data,1) * 32;
      return;
    }
  }
 catch (  Exception e) {
  }
}"
44254,"public Character getCharacterAllInfo(String name,String realm,String region,long lastModified) throws CharacterNotFoundException, ServerUnavailableException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  Map<Integer,String> classList=new HashMap<Integer,String>();
  classList.put(11,""String_Node_Str"");
  classList.put(7,""String_Node_Str"");
  classList.put(2,""String_Node_Str"");
  classList.put(6,""String_Node_Str"");
  classList.put(4,""String_Node_Str"");
  classList.put(5,""String_Node_Str"");
  classList.put(8,""String_Node_Str"");
  classList.put(1,""String_Node_Str"");
  classList.put(9,""String_Node_Str"");
  classList.put(3,""String_Node_Str"");
  Map<Integer,String> raceList=new HashMap<Integer,String>();
  raceList.put(4,""String_Node_Str"");
  raceList.put(11,""String_Node_Str"");
  raceList.put(1,""String_Node_Str"");
  raceList.put(3,""String_Node_Str"");
  raceList.put(6,""String_Node_Str"");
  raceList.put(10,""String_Node_Str"");
  raceList.put(22,""String_Node_Str"");
  raceList.put(7,""String_Node_Str"");
  raceList.put(9,""String_Node_Str"");
  raceList.put(2,""String_Node_Str"");
  raceList.put(8,""String_Node_Str"");
  raceList.put(5,""String_Node_Str"");
  Map<Integer,String> genderList=new HashMap<Integer,String>();
  genderList.put(0,""String_Node_Str"");
  genderList.put(1,""String_Node_Str"");
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Character character=new Character();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    JSONArray jarrayAchievementsCompleted, jarrayAchievementsCompletedTimestamp, jarrayCriteria, jarrayCriteriaQuantity, jarrayCriteriaTimestamp;
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new CharacterNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    character.setName(jsonobject.getString(""String_Node_Str""));
    character.setRealm(jsonobject.getString(""String_Node_Str""));
    character.setRegion(region);
    character.setCclass(classList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setRace(raceList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setLevel(jsonobject.getInt(""String_Node_Str""));
    character.setPoints(jsonobject.getInt(""String_Node_Str""));
    character.setIlvl(jsonobject.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    character.setGender(genderList.get(jsonobject.getInt(""String_Node_Str"")));
    try {
      character.setGuildname(jsonobject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      character.setGuildname(""String_Node_Str"");
    }
    if (jsonobject.getInt(""String_Node_Str"") == 4 || jsonobject.getInt(""String_Node_Str"") == 11 || jsonobject.getInt(""String_Node_Str"") == 1 || jsonobject.getInt(""String_Node_Str"") == 3 || jsonobject.getInt(""String_Node_Str"") == 7 || jsonobject.getInt(""String_Node_Str"") == 22)     character.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 6 || jsonobject.getInt(""String_Node_Str"") == 10 || jsonobject.getInt(""String_Node_Str"") == 9 || jsonobject.getInt(""String_Node_Str"") == 2 || jsonobject.getInt(""String_Node_Str"") == 5 || jsonobject.getInt(""String_Node_Str"") == 8)     character.setFaction(""String_Node_Str"");
 else     character.setFaction(""String_Node_Str"");
    jarrayAchievementsCompleted=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayAchievementsCompletedTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteria=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaQuantity=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    List<Achievement> achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayAchievementsCompleted.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayAchievementsCompleted.getInt(i));
      achievemenet.setTimestamp(jarrayAchievementsCompletedTimestamp.getLong(i));
      achievemenet.setCompleted(true);
      achievemenet.setCriteriaQuantity(1);
      achievementList.add(achievemenet);
    }
    character.setAchievements(achievementList);
    achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayCriteria.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayCriteria.getInt(i));
      achievemenet.setTimestamp(jarrayCriteriaTimestamp.getLong(i));
      achievemenet.setCriteriaQuantity(jarrayCriteriaQuantity.getLong(i));
      achievemenet.setCompleted(false);
      achievementList.add(achievemenet);
    }
    character.setCriteria(achievementList);
    return character;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}","public Character getCharacterAllInfo(String name,String realm,String region,long lastModified) throws CharacterNotFoundException, ServerUnavailableException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  Map<Integer,String> classList=new HashMap<Integer,String>();
  classList.put(11,""String_Node_Str"");
  classList.put(7,""String_Node_Str"");
  classList.put(2,""String_Node_Str"");
  classList.put(6,""String_Node_Str"");
  classList.put(4,""String_Node_Str"");
  classList.put(5,""String_Node_Str"");
  classList.put(8,""String_Node_Str"");
  classList.put(1,""String_Node_Str"");
  classList.put(9,""String_Node_Str"");
  classList.put(3,""String_Node_Str"");
  Map<Integer,String> raceList=new HashMap<Integer,String>();
  raceList.put(4,""String_Node_Str"");
  raceList.put(11,""String_Node_Str"");
  raceList.put(1,""String_Node_Str"");
  raceList.put(3,""String_Node_Str"");
  raceList.put(6,""String_Node_Str"");
  raceList.put(10,""String_Node_Str"");
  raceList.put(22,""String_Node_Str"");
  raceList.put(7,""String_Node_Str"");
  raceList.put(9,""String_Node_Str"");
  raceList.put(2,""String_Node_Str"");
  raceList.put(8,""String_Node_Str"");
  raceList.put(5,""String_Node_Str"");
  Map<Integer,String> genderList=new HashMap<Integer,String>();
  genderList.put(0,""String_Node_Str"");
  genderList.put(1,""String_Node_Str"");
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Character character=new Character();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    JSONArray jarrayAchievementsCompleted, jarrayAchievementsCompletedTimestamp, jarrayCriteria, jarrayCriteriaQuantity, jarrayCriteriaTimestamp;
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new CharacterNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    character.setName(jsonobject.getString(""String_Node_Str""));
    character.setRealm(jsonobject.getString(""String_Node_Str""));
    character.setRegion(region);
    character.setCclass(classList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setRace(raceList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setLevel(jsonobject.getInt(""String_Node_Str""));
    character.setPoints(jsonobject.getInt(""String_Node_Str""));
    character.setIlvl(jsonobject.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str""));
    character.setGender(genderList.get(jsonobject.getInt(""String_Node_Str"")));
    try {
      character.setGuildname(jsonobject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      character.setGuildname(""String_Node_Str"");
    }
    if (jsonobject.getInt(""String_Node_Str"") == 4 || jsonobject.getInt(""String_Node_Str"") == 11 || jsonobject.getInt(""String_Node_Str"") == 1 || jsonobject.getInt(""String_Node_Str"") == 3 || jsonobject.getInt(""String_Node_Str"") == 7 || jsonobject.getInt(""String_Node_Str"") == 22)     character.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 6 || jsonobject.getInt(""String_Node_Str"") == 10 || jsonobject.getInt(""String_Node_Str"") == 9 || jsonobject.getInt(""String_Node_Str"") == 2 || jsonobject.getInt(""String_Node_Str"") == 5 || jsonobject.getInt(""String_Node_Str"") == 8)     character.setFaction(""String_Node_Str"");
 else     character.setFaction(""String_Node_Str"");
    jarrayAchievementsCompleted=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayAchievementsCompletedTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteria=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaQuantity=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    List<Achievement> achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayAchievementsCompleted.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayAchievementsCompleted.getInt(i));
      achievemenet.setTimestamp(jarrayAchievementsCompletedTimestamp.getLong(i));
      achievemenet.setCompleted(true);
      achievemenet.setCriteriaQuantity(1);
      achievementList.add(achievemenet);
    }
    character.setAchievements(achievementList);
    achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayCriteria.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayCriteria.getInt(i));
      achievemenet.setTimestamp(jarrayCriteriaTimestamp.getLong(i));
      achievemenet.setCriteriaQuantity(jarrayCriteriaQuantity.getLong(i));
      achievemenet.setCompleted(false);
      achievementList.add(achievemenet);
    }
    character.setCriteria(achievementList);
    return character;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}"
44255,"public Character getCharacterBasicInfo(String name,String realm,String region,long lastModified) throws CharacterNotFoundException, ServerUnavailableException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  Map<Integer,String> classList=new HashMap<Integer,String>();
  classList.put(11,""String_Node_Str"");
  classList.put(7,""String_Node_Str"");
  classList.put(2,""String_Node_Str"");
  classList.put(6,""String_Node_Str"");
  classList.put(4,""String_Node_Str"");
  classList.put(5,""String_Node_Str"");
  classList.put(8,""String_Node_Str"");
  classList.put(1,""String_Node_Str"");
  classList.put(9,""String_Node_Str"");
  classList.put(3,""String_Node_Str"");
  Map<Integer,String> raceList=new HashMap<Integer,String>();
  raceList.put(4,""String_Node_Str"");
  raceList.put(11,""String_Node_Str"");
  raceList.put(1,""String_Node_Str"");
  raceList.put(3,""String_Node_Str"");
  raceList.put(6,""String_Node_Str"");
  raceList.put(10,""String_Node_Str"");
  raceList.put(22,""String_Node_Str"");
  raceList.put(7,""String_Node_Str"");
  raceList.put(9,""String_Node_Str"");
  raceList.put(2,""String_Node_Str"");
  raceList.put(8,""String_Node_Str"");
  raceList.put(5,""String_Node_Str"");
  Map<Integer,String> genderList=new HashMap<Integer,String>();
  genderList.put(0,""String_Node_Str"");
  genderList.put(1,""String_Node_Str"");
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Character character=new Character();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new CharacterNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    character.setName(jsonobject.getString(""String_Node_Str""));
    character.setRealm(jsonobject.getString(""String_Node_Str""));
    character.setRegion(region);
    character.setCclass(classList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setRace(raceList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setLevel(jsonobject.getInt(""String_Node_Str""));
    character.setPoints(jsonobject.getInt(""String_Node_Str""));
    character.setGender(genderList.get(jsonobject.getInt(""String_Node_Str"")));
    try {
      character.setGuildname(jsonobject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      character.setGuildname(""String_Node_Str"");
    }
    if (jsonobject.getInt(""String_Node_Str"") == 4 || jsonobject.getInt(""String_Node_Str"") == 11 || jsonobject.getInt(""String_Node_Str"") == 1 || jsonobject.getInt(""String_Node_Str"") == 3 || jsonobject.getInt(""String_Node_Str"") == 7 || jsonobject.getInt(""String_Node_Str"") == 22)     character.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 6 || jsonobject.getInt(""String_Node_Str"") == 10 || jsonobject.getInt(""String_Node_Str"") == 9 || jsonobject.getInt(""String_Node_Str"") == 2 || jsonobject.getInt(""String_Node_Str"") == 5 || jsonobject.getInt(""String_Node_Str"") == 8)     character.setFaction(""String_Node_Str"");
 else     character.setFaction(""String_Node_Str"");
    return character;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}","public Character getCharacterBasicInfo(String name,String realm,String region,long lastModified) throws CharacterNotFoundException, ServerUnavailableException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  Map<Integer,String> classList=new HashMap<Integer,String>();
  classList.put(11,""String_Node_Str"");
  classList.put(7,""String_Node_Str"");
  classList.put(2,""String_Node_Str"");
  classList.put(6,""String_Node_Str"");
  classList.put(4,""String_Node_Str"");
  classList.put(5,""String_Node_Str"");
  classList.put(8,""String_Node_Str"");
  classList.put(1,""String_Node_Str"");
  classList.put(9,""String_Node_Str"");
  classList.put(3,""String_Node_Str"");
  Map<Integer,String> raceList=new HashMap<Integer,String>();
  raceList.put(4,""String_Node_Str"");
  raceList.put(11,""String_Node_Str"");
  raceList.put(1,""String_Node_Str"");
  raceList.put(3,""String_Node_Str"");
  raceList.put(6,""String_Node_Str"");
  raceList.put(10,""String_Node_Str"");
  raceList.put(22,""String_Node_Str"");
  raceList.put(7,""String_Node_Str"");
  raceList.put(9,""String_Node_Str"");
  raceList.put(2,""String_Node_Str"");
  raceList.put(8,""String_Node_Str"");
  raceList.put(5,""String_Node_Str"");
  Map<Integer,String> genderList=new HashMap<Integer,String>();
  genderList.put(0,""String_Node_Str"");
  genderList.put(1,""String_Node_Str"");
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Character character=new Character();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new CharacterNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    character.setName(jsonobject.getString(""String_Node_Str""));
    character.setRealm(jsonobject.getString(""String_Node_Str""));
    character.setRegion(region);
    character.setCclass(classList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setRace(raceList.get(jsonobject.getInt(""String_Node_Str"")));
    character.setLevel(jsonobject.getInt(""String_Node_Str""));
    character.setPoints(jsonobject.getInt(""String_Node_Str""));
    character.setGender(genderList.get(jsonobject.getInt(""String_Node_Str"")));
    try {
      character.setGuildname(jsonobject.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
 catch (    JSONException e) {
      character.setGuildname(""String_Node_Str"");
    }
    if (jsonobject.getInt(""String_Node_Str"") == 4 || jsonobject.getInt(""String_Node_Str"") == 11 || jsonobject.getInt(""String_Node_Str"") == 1 || jsonobject.getInt(""String_Node_Str"") == 3 || jsonobject.getInt(""String_Node_Str"") == 7 || jsonobject.getInt(""String_Node_Str"") == 22)     character.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 6 || jsonobject.getInt(""String_Node_Str"") == 10 || jsonobject.getInt(""String_Node_Str"") == 9 || jsonobject.getInt(""String_Node_Str"") == 2 || jsonobject.getInt(""String_Node_Str"") == 5 || jsonobject.getInt(""String_Node_Str"") == 8)     character.setFaction(""String_Node_Str"");
 else     character.setFaction(""String_Node_Str"");
    return character;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}"
44256,"public Guild getGuildAllInfo(String name,String realm,String region,long lastModified) throws ServerUnavailableException, GuildNotFoundException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Guild guild=new Guild();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    JSONArray jarrayAchievementsCompleted, jarrayAchievementsCompletedTimestamp, jarrayCriteria, jarrayCriteriaQuantity, jarrayCriteriaTimestamp;
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new GuildNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    guild.setName(jsonobject.getString(""String_Node_Str""));
    guild.setRealm(jsonobject.getString(""String_Node_Str""));
    guild.setRegion(region);
    guild.setLevel(jsonobject.getInt(""String_Node_Str""));
    guild.setPoints(jsonobject.getInt(""String_Node_Str""));
    guild.setLastmodified(new java.sql.Timestamp(jsonobject.getLong(""String_Node_Str"")));
    if (jsonobject.getInt(""String_Node_Str"") == 0)     guild.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 1)     guild.setFaction(""String_Node_Str"");
    jarrayAchievementsCompleted=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayAchievementsCompletedTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteria=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaQuantity=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    List<Achievement> achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayAchievementsCompleted.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayAchievementsCompleted.getInt(i));
      achievemenet.setTimestamp(jarrayAchievementsCompletedTimestamp.getLong(i));
      achievemenet.setCompleted(true);
      achievemenet.setCriteriaQuantity(1);
      achievementList.add(achievemenet);
    }
    guild.setAchievements(achievementList);
    achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayCriteria.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayCriteria.getInt(i));
      achievemenet.setTimestamp(jarrayCriteriaTimestamp.getLong(i));
      achievemenet.setCriteriaQuantity(jarrayCriteriaQuantity.getInt(i));
      achievemenet.setCompleted(false);
      achievementList.add(achievemenet);
    }
    guild.setCriteria(achievementList);
    return guild;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}","public Guild getGuildAllInfo(String name,String realm,String region,long lastModified) throws ServerUnavailableException, GuildNotFoundException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Guild guild=new Guild();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    JSONArray jarrayAchievementsCompleted, jarrayAchievementsCompletedTimestamp, jarrayCriteria, jarrayCriteriaQuantity, jarrayCriteriaTimestamp;
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new GuildNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    guild.setName(jsonobject.getString(""String_Node_Str""));
    guild.setRealm(jsonobject.getString(""String_Node_Str""));
    guild.setRegion(region);
    guild.setLevel(jsonobject.getInt(""String_Node_Str""));
    guild.setPoints(jsonobject.getInt(""String_Node_Str""));
    guild.setLastmodified(new java.sql.Timestamp(jsonobject.getLong(""String_Node_Str"")));
    if (jsonobject.getInt(""String_Node_Str"") == 0)     guild.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 1)     guild.setFaction(""String_Node_Str"");
    jarrayAchievementsCompleted=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayAchievementsCompletedTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteria=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaQuantity=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    jarrayCriteriaTimestamp=jsonobject.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    List<Achievement> achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayAchievementsCompleted.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayAchievementsCompleted.getInt(i));
      achievemenet.setTimestamp(jarrayAchievementsCompletedTimestamp.getLong(i));
      achievemenet.setCompleted(true);
      achievemenet.setCriteriaQuantity(1);
      achievementList.add(achievemenet);
    }
    guild.setAchievements(achievementList);
    achievementList=new ArrayList<Achievement>();
    for (int i=0; i < jarrayCriteria.length(); i++) {
      Achievement achievemenet=new Achievement();
      achievemenet.setAid(jarrayCriteria.getInt(i));
      achievemenet.setTimestamp(jarrayCriteriaTimestamp.getLong(i));
      achievemenet.setCriteriaQuantity(jarrayCriteriaQuantity.getInt(i));
      achievemenet.setCompleted(false);
      achievementList.add(achievemenet);
    }
    guild.setCriteria(achievementList);
    return guild;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}"
44257,"public Guild getGuildBasicInfo(String name,String realm,String region,long lastModified) throws ServerUnavailableException, GuildNotFoundException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Guild guild=new Guild();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new GuildNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    guild.setName(jsonobject.getString(""String_Node_Str""));
    guild.setRealm(jsonobject.getString(""String_Node_Str""));
    guild.setRegion(region);
    guild.setLevel(jsonobject.getInt(""String_Node_Str""));
    guild.setPoints(jsonobject.getInt(""String_Node_Str""));
    if (jsonobject.getInt(""String_Node_Str"") == 0)     guild.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 1)     guild.setFaction(""String_Node_Str"");
    return guild;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}","public Guild getGuildBasicInfo(String name,String realm,String region,long lastModified) throws ServerUnavailableException, GuildNotFoundException, InvalidApplicationSignatureException, TooManyRequestsException, NotModifiedException {
  String URL=""String_Node_Str"";
  try {
    name=java.net.URLEncoder.encode(name,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    realm=java.net.URLEncoder.encode(realm,""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
  String finalURL=URL.replace(""String_Node_Str"",region).replace(""String_Node_Str"",realm).replace(""String_Node_Str"",name);
  Guild guild=new Guild();
  try {
    JSONObject jsonobject=getJSONFromRequest(finalURL,lastModified);
    if (jsonobject == null)     throw new ServerUnavailableException();
    try {
      if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new GuildNotFoundException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidApplicationSignatureException();
        }
 else         if (jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"") || jsonobject.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
          throw new TooManyRequestsException();
        }
 else {
          throw new ServerUnavailableException();
        }
      }
    }
 catch (    JSONException e) {
    }
    ;
    guild.setName(jsonobject.getString(""String_Node_Str""));
    guild.setRealm(jsonobject.getString(""String_Node_Str""));
    guild.setRegion(region);
    guild.setLevel(jsonobject.getInt(""String_Node_Str""));
    guild.setPoints(jsonobject.getInt(""String_Node_Str""));
    if (jsonobject.getInt(""String_Node_Str"") == 0)     guild.setFaction(""String_Node_Str"");
 else     if (jsonobject.getInt(""String_Node_Str"") == 1)     guild.setFaction(""String_Node_Str"");
    return guild;
  }
 catch (  JSONException e) {
    e.printStackTrace();
    return null;
  }
}"
44258,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.isConfigurationSection(""String_Node_Str"")) {
    List<String> classNames=system.getStringList(""String_Node_Str"");
    Map<Integer,NumberRange> tiers=new HashMap<>();
    if (system.getList(""String_Node_Str"") != null) {
      for (      Object obj : system.getList(""String_Node_Str"")) {
        if (obj instanceof LinkedHashMap) {
          try {
            ConfigurationSection tiersConfig=createTiersConfig(obj);
            Integer tier=tiersConfig.getInt(""String_Node_Str"");
            String levels=tiersConfig.getString(""String_Node_Str"");
            String[] levelRange=levels.split(""String_Node_Str"");
            NumberRange range=new NumberRange(Integer.parseInt(levelRange[0]),Integer.parseInt(levelRange[1]));
            tiers.put(tier,range);
          }
 catch (          Exception e) {
            LoggerUtil.getInstance().severe(""String_Node_Str"");
          }
        }
      }
    }
    if (!classNames.isEmpty() || !tiers.isEmpty()) {
      HeroesRule rule=new HeroesRule(classNames,tiers);
      rules=new HashMap<>();
      rules.put(HeroesRule.class,rule);
    }
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.isConfigurationSection(""String_Node_Str"")) {
    List<String> classNames=system.getStringList(""String_Node_Str"");
    Map<Integer,NumberRange> tiers=new HashMap<>();
    if (system.getList(""String_Node_Str"") != null) {
      for (      Object obj : system.getList(""String_Node_Str"")) {
        if (obj instanceof LinkedHashMap) {
          try {
            ConfigurationSection tiersConfig=createTiersConfig(obj);
            Integer tier=tiersConfig.getInt(""String_Node_Str"");
            String levels=tiersConfig.getString(""String_Node_Str"");
            String[] range=levels.split(""String_Node_Str"");
            NumberRange levelRange=new NumberRange(Integer.parseInt(range[0]),Integer.parseInt(range[1]));
            tiers.put(tier,levelRange);
          }
 catch (          Exception e) {
            LoggerUtil.getInstance().severe(""String_Node_Str"");
          }
        }
      }
    }
    if (!classNames.isEmpty() || !tiers.isEmpty()) {
      HeroesRule rule=new HeroesRule(classNames,tiers);
      rules=new HashMap<>();
      rules.put(HeroesRule.class,rule);
    }
  }
  return rules;
}"
44259,"@Override protected boolean isBroken(PlayerKilledEvent event){
  boolean ruleBroken=false;
  if (DependencyUtils.hasHeroes()) {
    Hero victim=DependencyUtils.getHeroes().getCharacterManager().getHero(event.getVictim());
    for (    String className : classNames) {
      if (victim.getHeroClass().getName().equals(className)) {
        ruleBroken|=true;
        LoggerUtil.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ className);
        break;
      }
    }
    Integer tieredLevel=victim.getTieredLevel(victim.getHeroClass());
    Integer level=victim.getLevel(victim.getHeroClass());
    if (tiers.containsKey(tieredLevel) && tiers.get(tieredLevel).containsInteger(level)) {
      ruleBroken|=true;
      LoggerUtil.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ tieredLevel+ ""String_Node_Str""+ level);
    }
  }
  return ruleBroken;
}","@Override protected boolean isBroken(PlayerKilledEvent event){
  boolean ruleBroken=false;
  if (DependencyUtils.hasHeroes()) {
    Hero victim=DependencyUtils.getHeroes().getCharacterManager().getHero(event.getVictim());
    for (    String className : classNames) {
      if (victim.getHeroClass().getName().equals(className)) {
        ruleBroken|=true;
        LoggerUtil.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ className);
        break;
      }
    }
    Integer tier=victim.getHeroClass().getTier();
    Integer level=victim.getLevel(victim.getHeroClass());
    if (tiers.containsKey(tier) && tiers.get(tier).containsInteger(level)) {
      ruleBroken|=true;
      LoggerUtil.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ tier+ ""String_Node_Str""+ level);
    }
  }
  return ruleBroken;
}"
44260,"public static boolean hasMcMMO(){
  return mcMMOPlugin != null;
}","public static boolean hasMcMMO(){
  return mcMMOPlugin != null && mcMMOPlugin.isEnabled();
}"
44261,"public static boolean hasSimpleClans(){
  return simpleClansPlugin != null;
}","public static boolean hasSimpleClans(){
  return simpleClansPlugin != null && simpleClansPlugin.isEnabled();
}"
44262,"public static boolean hasHeroes(){
  return heroesPlugin != null;
}","public static boolean hasHeroes(){
  return heroesPlugin != null && heroesPlugin.isEnabled();
}"
44263,"public static boolean hasBattleArena(){
  return battleArenaPlugin != null;
}","public static boolean hasBattleArena(){
  return battleArenaPlugin != null && battleArenaPlugin.isEnabled();
}"
44264,"public static boolean hasResidence(){
  return residencePlugin != null;
}","public static boolean hasResidence(){
  return residencePlugin != null && residencePlugin.isEnabled();
}"
44265,"public static boolean hasFactions(){
  return factionsPlugin != null;
}","public static boolean hasFactions(){
  return factionsPlugin != null && factionsPlugin.isEnabled();
}"
44266,"public static boolean hasVault(){
  return vaultPlugin != null;
}","public static boolean hasVault(){
  return vaultPlugin != null && vaultPlugin.isEnabled();
}"
44267,"public static boolean hasTowny(){
  return townyPlugin != null;
}","public static boolean hasTowny(){
  return townyPlugin != null && townyPlugin.isEnabled();
}"
44268,"@SuppressWarnings(""String_Node_Str"") private static <T>T getPlugin(String pluginName,String className){
  Plugin plugin=Bukkit.getServer().getPluginManager().getPlugin(pluginName);
  try {
    Class<?> testClass=Class.forName(className);
    if (testClass.isInstance(plugin) && plugin.isEnabled()) {
      LoggerUtil.getInstance().info(""String_Node_Str"" + plugin.getDescription().getName());
      return (T)plugin;
    }
  }
 catch (  ClassNotFoundException e) {
    LoggerUtil.getInstance().debug(""String_Node_Str"" + pluginName);
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") private static <T>T getPlugin(String pluginName,String className){
  Plugin plugin=Bukkit.getServer().getPluginManager().getPlugin(pluginName);
  try {
    Class<?> testClass=Class.forName(className);
    if (testClass.isInstance(plugin)) {
      LoggerUtil.getInstance().info(""String_Node_Str"" + plugin.getDescription().getName());
      return (T)plugin;
    }
  }
 catch (  ClassNotFoundException e) {
    LoggerUtil.getInstance().debug(""String_Node_Str"" + pluginName);
  }
  return null;
}"
44269,"public static boolean hasDeathTpPlus(){
  return deathTpPlusPlugin != null;
}","public static boolean hasDeathTpPlus(){
  return deathTpPlusPlugin != null && deathTpPlusPlugin.isEnabled();
}"
44270,"public static boolean hasWorldGuard(){
  return worldGuardPlugin != null;
}","public static boolean hasWorldGuard(){
  return worldGuardPlugin != null && worldGuardPlugin.isEnabled();
}"
44271,"private static NumberRange parseRange(String dropString){
  String[] dropParts=dropString.split(""String_Node_Str"");
  String[] amountRange=dropParts[1].split(""String_Node_Str"");
  int min=0;
  int max;
  if (amountRange.length == 2) {
    min=Integer.parseInt(amountRange[0]);
    max=Integer.parseInt(amountRange[1]);
  }
 else {
    max=Integer.parseInt(dropParts[1]);
  }
  return new NumberRange(min,max);
}","private static NumberRange parseRange(String dropString){
  String[] dropParts=dropString.split(""String_Node_Str"");
  String[] amountRange=dropParts[1].split(""String_Node_Str"");
  double min=0;
  double max;
  if (amountRange.length == 2) {
    min=Double.parseDouble(amountRange[0]);
    max=Double.parseDouble(amountRange[1]);
  }
 else {
    max=Double.parseDouble(dropParts[1]);
  }
  return new NumberRange(min,max);
}"
44272,"public ItemStack nextItemStack(int lootLevel){
  if (material != null) {
    int dropAmount=fixedAmount ? nextFixedAmount() : nextIntAmount(lootLevel);
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == null && durability == null) {
        itemStack=new ItemStack(material,dropAmount);
      }
 else {
        MaterialData materialData=data == null ? new MaterialData(material) : new MaterialData(material,data);
        itemStack=materialData.toItemStack(dropAmount);
        if (durability != null) {
          itemStack.setDurability(durability);
        }
      }
      itemStack.addUnsafeEnchantments(EnchantmentChance.nextEnchantments(enchantmentChances));
      if (!attributeChances.isEmpty()) {
        List<Attribute> attributes=AttributeChance.nextAttributes(attributeChances);
        itemStack=Attributes.apply(itemStack,attributes,true);
        ItemMeta meta=itemStack.getItemMeta();
        List<String> lore=new ArrayList<>();
        lore.addAll(meta.getLore());
        for (        Attribute attribute : attributes) {
          Map<MessageToken,String> parameters=new HashMap<>();
          parameters.put(MessageToken.AMOUNT,String.format(""String_Node_Str"",attribute.getAmount()));
          Message message=AttributeChance.LORE_MAP.get(attribute.getType());
          lore.add(message.assembleMessage(parameters));
        }
        meta.setLore(lore);
      }
      if (unbreakable) {
        itemStack=ItemUtils.setUnbreakable(itemStack);
      }
      if (hideFlags) {
        itemStack=ItemUtils.setHideFlags(itemStack);
      }
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return new ItemStack(Material.AIR,0);
}","public ItemStack nextItemStack(int lootLevel){
  if (material != null) {
    int dropAmount=fixedAmount ? nextFixedAmount() : nextIntAmount(lootLevel);
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == null && durability == null) {
        itemStack=new ItemStack(material,dropAmount);
      }
 else {
        MaterialData materialData=data == null ? new MaterialData(material) : new MaterialData(material,data);
        itemStack=materialData.toItemStack(dropAmount);
        if (durability != null) {
          itemStack.setDurability(durability);
        }
      }
      itemStack.addUnsafeEnchantments(EnchantmentChance.nextEnchantments(enchantmentChances));
      if (!attributeChances.isEmpty()) {
        List<Attribute> attributes=AttributeChance.nextAttributes(attributeChances);
        itemStack=Attributes.apply(itemStack,attributes,true);
        List<String> lore=new ArrayList<>();
        for (        Attribute attribute : attributes) {
          Map<MessageToken,String> parameters=new HashMap<>();
          parameters.put(MessageToken.AMOUNT,String.format(""String_Node_Str"",attribute.getAmount()));
          Message message=AttributeChance.LORE_MAP.get(attribute.getType());
          lore.add(message.assembleMessage(parameters));
        }
        ItemMeta itemMeta=itemStack.getItemMeta();
        itemMeta.setLore(lore);
      }
      if (unbreakable) {
        itemStack=ItemUtils.setUnbreakable(itemStack);
      }
      if (hideFlags) {
        itemStack=ItemUtils.setHideFlags(itemStack);
      }
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return new ItemStack(Material.AIR,0);
}"
44273,"@Override public ItemStack nextItemStack(int lootLevel){
  ItemStack itemStack=super.nextItemStack(lootLevel);
  if (!Material.AIR.equals(itemStack.getType()) && itemStack.getItemMeta() != null) {
    ItemMeta itemMeta=itemStack.getItemMeta();
    itemMeta.setDisplayName(displayName);
    itemMeta.setLore(lore);
    itemStack.setItemMeta(itemMeta);
  }
  return itemStack;
}","@Override public ItemStack nextItemStack(int lootLevel){
  ItemStack itemStack=super.nextItemStack(lootLevel);
  if (!Material.AIR.equals(itemStack.getType()) && itemStack.getItemMeta() != null) {
    ItemMeta itemMeta=itemStack.getItemMeta();
    itemMeta.setDisplayName(displayName);
    List<String> lore=new ArrayList<>();
    lore.addAll(this.lore);
    lore.addAll(itemMeta.getLore());
    itemMeta.setLore(lore);
    itemStack.setItemMeta(itemMeta);
  }
  return itemStack;
}"
44274,"@Override public void deliver(Player player){
  if (!DependencyUtils.hasEconomy() || player == null) {
    return;
  }
  double amount=calculateAmount();
  if (Math.abs(amount) > 0.0) {
    for (    UUID memberId : createParty(player.getUniqueId())) {
      registerAmount(memberId,amount);
      Message message=memberId.equals(player.getName()) ? getMessage() : getPartyMessage(amount);
      addParameter(MessageToken.PLAYER,Bukkit.getOfflinePlayer(memberId).getName()).addParameter(MessageToken.AMOUNT,DependencyUtils.getEconomy().format(Math.abs(amount)));
      MessageHandler handler=new MessageHandler(message,getParameters());
      handler.send(memberId);
    }
  }
}","@Override public void deliver(Player player){
  if (!DependencyUtils.hasEconomy() || player == null) {
    return;
  }
  double amount=calculateAmount();
  if (Math.abs(amount) > 0.0) {
    for (    UUID memberId : createParty(player.getUniqueId())) {
      registerAmount(memberId,amount);
      Message message=memberId.equals(player.getUniqueId()) ? getMessage() : getPartyMessage(amount);
      addParameter(MessageToken.PLAYER,Bukkit.getOfflinePlayer(memberId).getName()).addParameter(MessageToken.AMOUNT,DependencyUtils.getEconomy().format(Math.abs(amount)));
      MessageHandler handler=new MessageHandler(message,getParameters());
      handler.send(memberId);
    }
  }
}"
44275,"public AssembledDrop(Location location){
  this.location=location;
  worldName=location.getWorld().getName();
  gain=IDENTITY;
  party=Collections.emptyList();
  integerCurrency=false;
  name=""String_Node_Str"";
  coin=ZERO;
  itemDrops=new ArrayList<>();
  entityDrops=new ArrayList<>();
  jockeyDrops=new ArrayList<>();
  message=DefaultMessage.NO_MESSAGE;
  parameters=new HashMap<>();
}","public AssembledDrop(Location location){
  this.location=location;
  worldName=location.getWorld().getName();
  gain=IDENTITY;
  party=Collections.emptyList();
  integerCurrency=false;
  name=""String_Node_Str"";
  coin=ZERO;
  itemDrops=new ArrayList<>();
  customEntityDrops=new ArrayList<>();
  entityDrops=new ArrayList<>();
  jockeyDrops=new ArrayList<>();
  message=DefaultMessage.NO_MESSAGE;
  parameters=new HashMap<>();
}"
44276,"private void dropItems(Player player,AssembledDrop drop){
  if (player != null) {
    drop.addParameter(MessageToken.PLAYER,player.getName());
  }
  for (  ItemStack stack : drop.getItemDrops()) {
    ItemMeta itemMeta=stack.getItemMeta();
    if (itemMeta != null) {
      if (itemMeta.hasDisplayName()) {
        String displayName=getAssembledMessage(itemMeta.getDisplayName(),drop);
        itemMeta.setDisplayName(displayName);
      }
      if (itemMeta.hasLore()) {
        List<String> lore=new ArrayList<>();
        for (        String loreLine : itemMeta.getLore()) {
          lore.add(getAssembledMessage(loreLine,drop));
        }
        itemMeta.setLore(lore);
      }
      stack.setItemMeta(itemMeta);
    }
    if (drop.isAddToInventory() && player != null) {
      Map<Integer,ItemStack> leftOver=player.getInventory().addItem(stack);
      for (      Map.Entry<Integer,ItemStack> entry : leftOver.entrySet()) {
        drop.getWorld().dropItemNaturally(drop.getLocation(),entry.getValue());
      }
    }
 else {
      drop.getWorld().dropItemNaturally(drop.getLocation(),stack);
    }
  }
}","private void dropItems(Player player,AssembledDrop drop){
  if (player != null) {
    drop.addParameter(MessageToken.PLAYER,player.getName());
  }
  for (  ItemStack stack : drop.getItemDrops()) {
    if (Material.AIR.equals(stack.getType())) {
      continue;
    }
    ItemMeta itemMeta=stack.getItemMeta();
    if (itemMeta.hasDisplayName()) {
      String displayName=getAssembledMessage(itemMeta.getDisplayName(),drop);
      itemMeta.setDisplayName(displayName);
    }
    if (itemMeta.hasLore()) {
      List<String> lore=new ArrayList<>();
      for (      String loreLine : itemMeta.getLore()) {
        lore.add(getAssembledMessage(loreLine,drop));
      }
      itemMeta.setLore(lore);
    }
    stack.setItemMeta(itemMeta);
    if (drop.isAddToInventory() && player != null) {
      Map<Integer,ItemStack> leftOver=player.getInventory().addItem(stack);
      for (      Map.Entry<Integer,ItemStack> entry : leftOver.entrySet()) {
        drop.getWorld().dropItemNaturally(drop.getLocation(),entry.getValue());
      }
    }
 else {
      drop.getWorld().dropItemNaturally(drop.getLocation(),stack);
    }
  }
}"
44277,"@Around(""String_Node_Str"") public double applyBonusMultiplierAspect(ProceedingJoinPoint pjp) throws Throwable {
  double percentage=(double)pjp.proceed();
  LoggerUtil.getInstance().debug(""String_Node_Str"" + bonus.getMultiplier() + ""String_Node_Str""+ percentage);
  return percentage * bonus.getMultiplier();
}","@Around(""String_Node_Str"") public double applyBonusMultiplierAspect(ProceedingJoinPoint pjp) throws Throwable {
  double percentage=(double)pjp.proceed();
  if (bonus.isValid()) {
    LoggerUtil.getInstance().debug(""String_Node_Str"" + bonus.getMultiplier() + ""String_Node_Str""+ percentage);
    percentage*=bonus.getMultiplier();
  }
  return percentage;
}"
44278,"@Around(""String_Node_Str"") public double applyBonusMultiplierAspect(ProceedingJoinPoint pjp) throws Throwable {
  double percentage=(double)pjp.proceed();
  LoggerUtil.getInstance().debug(""String_Node_Str"" + bonus.getMultiplier() + ""String_Node_Str""+ percentage);
  return percentage * bonus.getMultiplier();
}","@Around(""String_Node_Str"") public double applyBonusMultiplierAspect(ProceedingJoinPoint pjp) throws Throwable {
  double percentage=(double)pjp.proceed();
  if (bonus.isValid()) {
    LoggerUtil.getInstance().debug(""String_Node_Str"" + bonus.getMultiplier() + ""String_Node_Str""+ percentage);
    percentage*=bonus.getMultiplier();
  }
  return percentage;
}"
44279,"private static Collection<AbstractDropSource> createCustomEntitySources(String section,ConfigurationSection config){
  Collection<AbstractDropSource> sources=new ArrayList<>();
switch (CustomEntityDropType.fromName(parseTypeName(section))) {
case ANGRY_WOLF:
case PLAYER:
case POWERED_CREEPER:
case WITHER_SKELETON:
case ZOMBIE_VILLAGER:
    sources.add(new EntityDropSource(section,config));
  break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + section);
}
return sources;
}","private static Collection<AbstractDropSource> createCustomEntitySources(String section,ConfigurationSection config){
  Collection<AbstractDropSource> sources=new ArrayList<>();
switch (CustomEntityDropType.fromName(parseTypeName(section))) {
case ANGRY_WOLF:
case PLAYER:
case POWERED_CREEPER:
case WITHER_SKELETON:
case ZOMBIE_BABY:
case ZOMBIE_VILLAGER:
    sources.add(new EntityDropSource(section,config));
  break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + section);
}
return sources;
}"
44280,"private Collection<AbstractDropSource> getDropSources(T type){
  Collection<AbstractDropSource> source=Collections.emptyList();
  if (hasDropSource(type)) {
    source=sources.get(type);
  }
  LoggerUtil.getInstance().debugTrue(""String_Node_Str"" + type,source.isEmpty());
  return source;
}","private Collection<AbstractDropSource> getDropSources(T type){
  Collection<AbstractDropSource> source=Collections.emptyList();
  if (hasDropSource(type)) {
    source=sources.get(type);
  }
  if (type != null) {
    LoggerUtil.getInstance().debugTrue(""String_Node_Str"" + type,source.isEmpty());
  }
  return source;
}"
44281,"public void loadConfig(String file) throws IOException, InvalidConfigurationException {
  worldConfigMap.put(DEFAULT_CONFIG_FILE,loadDropConfig(new DropConfig(plugin),getConfig(new File(plugin.getDataFolder(),file))));
}","public void loadConfig(String file,String world) throws IOException, InvalidConfigurationException {
  worldConfigMap.put(world,loadDropConfig(new DropConfig(plugin),getConfig(new File(plugin.getDataFolder(),file))));
}"
44282,"public ReloadCommand(ecoCreature plugin){
  super(""String_Node_Str"");
  this.plugin=plugin;
  setDescription(""String_Node_Str"");
  setUsage(""String_Node_Str"");
  setArgumentRange(0,1);
  setIdentifiers(""String_Node_Str"");
  setPermission(""String_Node_Str"");
}","public ReloadCommand(ecoCreature plugin){
  super(""String_Node_Str"");
  this.plugin=plugin;
  setDescription(""String_Node_Str"");
  setUsage(""String_Node_Str"");
  setArgumentRange(0,2);
  setIdentifiers(""String_Node_Str"");
  setPermission(""String_Node_Str"");
}"
44283,"@Override public boolean execute(CommandSender sender,String identifier,String[] args){
  if (args == null || args.length == 0) {
    plugin.reloadConfig();
    sender.sendMessage(""String_Node_Str"");
  }
 else {
    try {
      plugin.loadConfig(args[0]);
    }
 catch (    Exception e) {
      sender.sendMessage(""String_Node_Str"");
    }
  }
  return true;
}","@Override public boolean execute(CommandSender sender,String identifier,String[] args){
  if (args != null) {
    try {
switch (args.length) {
case 0:
        plugin.reloadConfig();
      sender.sendMessage(""String_Node_Str"");
    break;
case 1:
  if (sender instanceof Player) {
    Player player=(Player)sender;
    plugin.loadConfig(args[0],player.getWorld().getName());
  }
 else {
    sender.sendMessage(""String_Node_Str"");
  }
break;
case 2:
plugin.loadConfig(args[0],args[1]);
break;
}
}
 catch (Exception e) {
sender.sendMessage(""String_Node_Str"");
}
}
return true;
}"
44284,"public void loadConfig(String file) throws IOException, InvalidConfigurationException {
  dropConfigLoader.loadConfig(file);
  dropEventFactory=new DropEventFactory(dropConfigLoader);
  restartUpdateTask();
}","public void loadConfig(String file,String world) throws IOException, InvalidConfigurationException {
  dropConfigLoader.loadConfig(file,world);
  dropEventFactory=new DropEventFactory(dropConfigLoader);
  restartUpdateTask();
}"
44285,"private void registerEvents(){
  Bukkit.getPluginManager().registerEvents(new DropEventListener(metrics),this);
  Bukkit.getPluginManager().registerEvents(new SpawnEventListener(dropConfigLoader),this);
  Bukkit.getPluginManager().registerEvents(new BlockEventListener(dropEventFactory),this);
  Bukkit.getPluginManager().registerEvents(new PlayerDeathEventListener(dropEventFactory),this);
  Bukkit.getPluginManager().registerEvents(new EntityDeathEventListener(dropEventFactory),this);
  if (DependencyUtils.hasDeathTpPlus()) {
    Bukkit.getPluginManager().registerEvents(new StreakEventListener(dropEventFactory),this);
  }
  if (DependencyUtils.hasHeroes()) {
    Bukkit.getPluginManager().registerEvents(new HeroesEventListener(dropEventFactory),this);
  }
  if (DependencyUtils.hasMcMMO()) {
    Bukkit.getPluginManager().registerEvents(new McMMOEventListener(dropEventFactory),this);
  }
}","private void registerEvents(){
  Bukkit.getPluginManager().registerEvents(new DropEventListener(metrics),this);
  Bukkit.getPluginManager().registerEvents(new SpawnEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new BlockEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new PlayerDeathEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new EntityDeathEventListener(this),this);
  if (DependencyUtils.hasDeathTpPlus()) {
    Bukkit.getPluginManager().registerEvents(new StreakEventListener(this),this);
  }
  if (DependencyUtils.hasHeroes()) {
    Bukkit.getPluginManager().registerEvents(new HeroesEventListener(this),this);
  }
  if (DependencyUtils.hasMcMMO()) {
    Bukkit.getPluginManager().registerEvents(new McMMOEventListener(this),this);
  }
}"
44286,"@EventHandler(priority=EventPriority.MONITOR) public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
  for (  DropEvent dropEvent : factory.createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
  for (  DropEvent dropEvent : plugin.getDropEventFactory().createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44287,"public BlockEventListener(DropEventFactory factory){
  this.factory=factory;
}","public BlockEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44288,"@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(EntityDeathEvent event){
  if (event instanceof PlayerDeathEvent) {
    return;
  }
  Collection<DropEvent> events=Collections.emptyList();
  if (EventUtils.isEntityKilledEvent(event)) {
    events=factory.createEvents(EntityKilledEvent.createEvent(event));
  }
 else   if (EventUtils.isEntityFarmed(event) || EventUtils.isEntityFireFarmed(event)) {
    events=factory.createEvents(EntityFarmedEvent.createEvent(event));
  }
  for (  DropEvent dropEvent : events) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(EntityDeathEvent event){
  if (event instanceof PlayerDeathEvent) {
    return;
  }
  Collection<DropEvent> events=Collections.emptyList();
  if (EventUtils.isEntityKilledEvent(event)) {
    events=plugin.getDropEventFactory().createEvents(EntityKilledEvent.createEvent(event));
  }
 else   if (EventUtils.isEntityFarmed(event) || EventUtils.isEntityFireFarmed(event)) {
    events=plugin.getDropEventFactory().createEvents(EntityFarmedEvent.createEvent(event));
  }
  for (  DropEvent dropEvent : events) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44289,"public EntityDeathEventListener(DropEventFactory factory){
  this.factory=factory;
}","public EntityDeathEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44290,"public HeroesEventListener(DropEventFactory factory){
  this.factory=factory;
}","public HeroesEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44291,"@EventHandler(priority=EventPriority.MONITOR) public void onHeroChangeLevel(HeroChangeLevelEvent event){
  for (  DropEvent dropEvent : factory.createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onHeroChangeLevel(HeroChangeLevelEvent event){
  for (  DropEvent dropEvent : plugin.getDropEventFactory().createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44292,"public McMMOEventListener(DropEventFactory factory){
  this.factory=factory;
}","public McMMOEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44293,"@EventHandler(priority=EventPriority.MONITOR) public void onMcMMOPlayerLevelUp(McMMOPlayerLevelUpEvent event){
  for (  DropEvent dropEvent : factory.createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onMcMMOPlayerLevelUp(McMMOPlayerLevelUpEvent event){
  for (  DropEvent dropEvent : plugin.getDropEventFactory().createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44294,"@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(PlayerDeathEvent event){
  Collection<DropEvent> events=Collections.emptySet();
  if (EventUtils.isPVPDeath(event)) {
    events=factory.createEvents(PlayerKilledEvent.createEvent(event));
  }
 else   if (EventUtils.isNotSuicide(event)) {
    events=factory.createEvents(event);
  }
  for (  DropEvent dropEvent : events) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(PlayerDeathEvent event){
  Collection<DropEvent> events=Collections.emptySet();
  if (EventUtils.isPVPDeath(event)) {
    events=plugin.getDropEventFactory().createEvents(PlayerKilledEvent.createEvent(event));
  }
 else   if (EventUtils.isNotSuicide(event)) {
    events=plugin.getDropEventFactory().createEvents(event);
  }
  for (  DropEvent dropEvent : events) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44295,"public PlayerDeathEventListener(DropEventFactory factory){
  this.factory=factory;
}","public PlayerDeathEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44296,"public SpawnEventListener(DropConfigLoader dropConfigLoader){
  this.dropConfigLoader=dropConfigLoader;
}","public SpawnEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44297,"@EventHandler(priority=EventPriority.MONITOR) public void onCreatureSpawn(CreatureSpawnEvent event){
  if (!event.isCancelled() && event.getSpawnReason() == SpawnReason.SPAWNER) {
    dropConfigLoader.getDropConfig(event.getEntity().getWorld()).tagSpawnerMob(event);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onCreatureSpawn(CreatureSpawnEvent event){
  if (!event.isCancelled() && event.getSpawnReason() == SpawnReason.SPAWNER) {
    plugin.getDropConfigLoader().getDropConfig(event.getEntity().getWorld()).tagSpawnerMob(event);
  }
}"
44298,"@EventHandler(priority=EventPriority.MONITOR) public void onDeathStreakEvent(DeathStreakEvent event){
  for (  DropEvent dropEvent : factory.createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onDeathStreakEvent(DeathStreakEvent event){
  for (  DropEvent dropEvent : plugin.getDropEventFactory().createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44299,"public StreakEventListener(DropEventFactory factory){
  this.factory=factory;
}","public StreakEventListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44300,"@EventHandler(priority=EventPriority.MONITOR) public void onKillStreakEvent(KillStreakEvent event){
  for (  DropEvent dropEvent : factory.createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onKillStreakEvent(KillStreakEvent event){
  for (  DropEvent dropEvent : plugin.getDropEventFactory().createEvents(event)) {
    Bukkit.getPluginManager().callEvent(dropEvent);
  }
}"
44301,"public CronGain(Map<String,Double> multipliers,String permission){
  super(multipliers,""String_Node_Str"");
}","public CronGain(Map<String,Double> multipliers){
  super(multipliers,""String_Node_Str"");
}"
44302,"public static Collection<PlayerGain> parseConfig(ConfigurationSection config){
  Collection<PlayerGain> gain=Collections.emptyList();
  if (config != null) {
    gain=new ArrayList<PlayerGain>();
    gain.add(new GroupGain(parseMultipliers(config)));
  }
  return gain;
}","public static Collection<PlayerGain> parseConfig(ConfigurationSection config){
  Collection<PlayerGain> gain=Collections.emptyList();
  if (config != null) {
    gain=new ArrayList<PlayerGain>();
    gain.add(new CronGain(parseMultipliers(config)));
  }
  return gain;
}"
44303,"public DeathPenaltySource(ConfigurationSection config){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setName(CustomRewardType.DEATH_PENALTY.toString());
  percentPenalty=config.getBoolean(""String_Node_Str"",true);
  penaltyAmount=config.getDouble(""String_Node_Str"",0.05D);
  setCoinPenaltyMessage(new DefaultMessage(config.getString(""String_Node_Str"",DEATH_PENALTY_MESSAGE)));
}","public DeathPenaltySource(String section,ConfigurationSection config){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setName(CustomRewardType.DEATH_PENALTY.toString());
  percentPenalty=config.getBoolean(""String_Node_Str"",true);
  penaltyAmount=config.getDouble(""String_Node_Str"",0.05D);
  setCoinPenaltyMessage(new DefaultMessage(config.getString(""String_Node_Str"",DEATH_PENALTY_MESSAGE)));
}"
44304,"public PluginConfig(ecoCreature plugin){
  this.plugin=plugin;
  dataWorldsFolder=new File(plugin.getDataFolder(),""String_Node_Str"");
  initialized=dataWorldsFolder.mkdirs() && initConfig();
}","public PluginConfig(ecoCreature plugin){
  this.plugin=plugin;
  dataWorldsFolder=new File(plugin.getDataFolder(),""String_Node_Str"");
  initialized=(dataWorldsFolder.exists() || dataWorldsFolder.mkdirs()) && initConfig();
}"
44305,"private Collection<AbstractRewardSource> getRewardSource(T type){
  Collection<AbstractRewardSource> source=Collections.emptySet();
  if (hasRewardSource(type)) {
    source=sources.get(type);
  }
  LoggerUtil.getInstance().debugTrue(""String_Node_Str"" + type,source.isEmpty());
  return Collections.emptySet();
}","private Collection<AbstractRewardSource> getRewardSource(T type){
  Collection<AbstractRewardSource> source=Collections.emptySet();
  if (hasRewardSource(type)) {
    source=sources.get(type);
  }
  LoggerUtil.getInstance().debugTrue(""String_Node_Str"" + type,source.isEmpty());
  return source;
}"
44306,"public Collection<EntityType> getOutcome(){
  Collection<EntityType> types=new ArrayList<EntityType>();
  for (int i=0; i < nextAmount(); i++) {
    types.add(type);
  }
  return types;
}","public Collection<EntityType> getOutcome(){
  Collection<EntityType> types=new ArrayList<EntityType>();
  int amount=nextAmount();
  for (int i=0; i < amount; i++) {
    types.add(type);
  }
  return types;
}"
44307,"public AbstractRule(){
  clearDrops=false;
  message=DefaultMessage.NO_MESSAGE;
}","public AbstractRule(){
  clearDrops=false;
  clearExpOrbs=false;
  message=DefaultMessage.NO_MESSAGE;
}"
44308,"public Collection<Reward> createRewards(Event event){
  Collection<Reward> rewards=new HashSet<Reward>();
  for (int i=0; i < nextAmount(); i++) {
    rewards.add(createReward(event));
  }
  return rewards;
}","public Collection<Reward> createRewards(Event event){
  Collection<Reward> rewards=new HashSet<Reward>();
  int amount=nextAmount();
  for (int i=0; i < amount; i++) {
    rewards.add(createReward(event));
  }
  return rewards;
}"
44309,"private Reward createWinnerReward(PlayerKilledEvent event){
  WorldSettings settings=getSettings(event.getEntity().getWorld());
  Reward reward=settings.createReward(event);
  reward.addParameter(MessageToken.CREATURE,event.getVictim().getName());
  if (reward.getEntityDrops().contains(EntityType.EXPERIENCE_ORB)) {
    event.setDroppedExp(0);
  }
  addPlayerSkullToEvent(reward,event);
  addBooksToEvent(reward,event);
  return reward;
}","private Reward createWinnerReward(PlayerKilledEvent event){
  WorldSettings settings=getSettings(event.getEntity().getWorld());
  Reward reward=settings.createReward(event);
  reward.addParameter(MessageToken.CREATURE,event.getVictim().getName());
  if (reward.getEntityDrops().contains(EntityType.EXPERIENCE_ORB)) {
    event.setDroppedExp(0);
  }
  addBooksToEvent(reward,event);
  return reward;
}"
44310,"public FactionsGain(Map<Rel,Double> multipliers){
  super(multipliers,""String_Node_Str"");
}","public FactionsGain(Map<String,Double> multipliers){
  super(multipliers,""String_Node_Str"");
}"
44311,"public static Set<PlayerGain> parseConfig(ConfigurationSection config){
  Set<PlayerGain> gain=Collections.emptySet();
  if (config != null && DependencyUtils.hasFactions()) {
    Map<Rel,Double> multipliers=new HashMap<Rel,Double>();
    for (    String relation : config.getKeys(false)) {
      try {
        multipliers.put(Rel.valueOf(relation),Double.valueOf(config.getConfigurationSection(relation).getDouble(AMOUNT_KEY,NO_GAIN)));
      }
 catch (      IllegalArgumentException e) {
        LoggerUtil.getInstance().warning(""String_Node_Str"" + relation);
      }
    }
    gain=new HashSet<PlayerGain>();
    gain.add(new FactionsGain(multipliers));
  }
  return gain;
}","public static Set<PlayerGain> parseConfig(ConfigurationSection config){
  Set<PlayerGain> gain=Collections.emptySet();
  if (config != null && DependencyUtils.hasFactions()) {
    Map<String,Double> multipliers=new HashMap<String,Double>();
    for (    String relation : config.getKeys(false)) {
      try {
        multipliers.put(relation,Double.valueOf(config.getConfigurationSection(relation).getDouble(AMOUNT_KEY,NO_GAIN)));
      }
 catch (      IllegalArgumentException e) {
        LoggerUtil.getInstance().warning(""String_Node_Str"" + relation);
      }
    }
    gain=new HashSet<PlayerGain>();
    gain.add(new FactionsGain(multipliers));
  }
  return gain;
}"
44312,"@Override public double getGain(Player player){
  UPlayer uPlayer=UPlayer.get(player);
  Faction faction=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
  Rel rel=RelationUtil.getRelationOfThatToMe(faction,uPlayer);
  return uPlayer != null && getMultipliers().containsKey(rel) ? getMultipliers().get(rel) : NO_GAIN;
}","@Override public double getGain(Player player){
  UPlayer uPlayer=UPlayer.get(player);
  Faction faction=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
  Rel rel=RelationUtil.getRelationOfThatToMe(faction,uPlayer);
  return uPlayer != null && getMultipliers().containsKey(rel.toString()) ? getMultipliers().get(rel.toString()) : NO_GAIN;
}"
44313,"private static Set<PlayerGain> loadGainMultipliers(ConfigurationSection config){
  Set<PlayerGain> gainMultipliers=new HashSet<PlayerGain>();
  gainMultipliers.addAll(GroupGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(TimeGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(EnvironmentGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(BiomeGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(WeatherGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(WeaponGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(RegionGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(RegiosGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(ResidenceGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(FactionsGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(TownyGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(MobArenaGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(HeroesGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(McMMOGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(CronGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  return gainMultipliers;
}","private static Set<PlayerGain> loadGainMultipliers(ConfigurationSection config){
  Set<PlayerGain> gainMultipliers=new HashSet<PlayerGain>();
  gainMultipliers.addAll(GroupGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(TimeGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(EnvironmentGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(BiomeGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(WeatherGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(WeaponGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(RegionGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(RegiosGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(ResidenceGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  if (DependencyUtils.hasFactions()) {
    gainMultipliers.addAll(FactionsGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  }
  gainMultipliers.addAll(TownyGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(MobArenaGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(HeroesGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(McMMOGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  gainMultipliers.addAll(CronGain.parseConfig(config.getConfigurationSection(""String_Node_Str"")));
  return gainMultipliers;
}"
44314,"public FactionsGain(Map<String,Double> multipliers){
  super(multipliers,""String_Node_Str"");
}","public FactionsGain(Map<Rel,Double> multipliers){
  super(multipliers,""String_Node_Str"");
}"
44315,"public static Set<PlayerGain> parseConfig(ConfigurationSection config){
  Set<PlayerGain> gain=Collections.emptySet();
  if (config != null && DependencyUtils.hasFactions()) {
    Map<String,Double> multipliers=new HashMap<String,Double>();
    for (    String relation : config.getKeys(false)) {
      try {
        multipliers.put(relation,Double.valueOf(config.getConfigurationSection(relation).getDouble(AMOUNT_KEY,NO_GAIN)));
      }
 catch (      IllegalArgumentException e) {
        LoggerUtil.getInstance().warning(""String_Node_Str"" + relation);
      }
    }
    gain=new HashSet<PlayerGain>();
    gain.add(new FactionsGain(multipliers));
  }
  return gain;
}","public static Set<PlayerGain> parseConfig(ConfigurationSection config){
  Set<PlayerGain> gain=Collections.emptySet();
  if (config != null && DependencyUtils.hasFactions()) {
    Map<Rel,Double> multipliers=new HashMap<Rel,Double>();
    for (    String relation : config.getKeys(false)) {
      try {
        multipliers.put(Rel.valueOf(relation),Double.valueOf(config.getConfigurationSection(relation).getDouble(AMOUNT_KEY,NO_GAIN)));
      }
 catch (      IllegalArgumentException e) {
        LoggerUtil.getInstance().warning(""String_Node_Str"" + relation);
      }
    }
    gain=new HashSet<PlayerGain>();
    gain.add(new FactionsGain(multipliers));
  }
  return gain;
}"
44316,"@Override public double getGain(Player player){
  UPlayer uPlayer=UPlayer.get(player);
  Faction faction=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
  Rel rel=RelationUtil.getRelationOfThatToMe(faction,uPlayer);
  return uPlayer != null && getMultipliers().containsKey(rel.toString()) ? getMultipliers().get(rel.toString()) : NO_GAIN;
}","@Override public double getGain(Player player){
  UPlayer uPlayer=UPlayer.get(player);
  Faction faction=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
  Rel rel=RelationUtil.getRelationOfThatToMe(faction,uPlayer);
  return uPlayer != null && getMultipliers().containsKey(rel) ? getMultipliers().get(rel) : NO_GAIN;
}"
44317,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    BattleArenaRule rule=new BattleArenaRule();
    rule.setBattleArenaRewards(system.getBoolean(""String_Node_Str""));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(BattleArenaRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    BattleArenaRule rule=new BattleArenaRule();
    rule.setBattleArenaRewards(system.getBoolean(""String_Node_Str""));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(BattleArenaRule.class,rule);
  }
  return rules;
}"
44318,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    CreativeModeRule rule=new CreativeModeRule();
    rule.setCreativeModeRewards(system.getBoolean(""String_Node_Str"",false));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(CreativeModeRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    CreativeModeRule rule=new CreativeModeRule();
    rule.setCreativeModeRewards(system.getBoolean(""String_Node_Str"",false));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(CreativeModeRule.class,rule);
  }
  return rules;
}"
44319,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  List<String> classNames=system.getStringList(""String_Node_Str"");
  HeroesRule rule=new HeroesRule();
  rule.setClassNames(classNames);
  Map<Class<? extends AbstractRule>,Rule> rules=new HashMap<Class<? extends AbstractRule>,Rule>();
  rules.put(HeroesRule.class,rule);
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    List<String> classNames=system.getStringList(""String_Node_Str"");
    HeroesRule rule=new HeroesRule();
    rule.setClassNames(classNames);
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(HeroesRule.class,rule);
  }
  return rules;
}"
44320,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    MobArenaRule rule=new MobArenaRule();
    rule.setMobArenaRewards(system.getBoolean(""String_Node_Str""));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(MobArenaRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    MobArenaRule rule=new MobArenaRule();
    rule.setMobArenaRewards(system.getBoolean(""String_Node_Str""));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(MobArenaRule.class,rule);
  }
  return rules;
}"
44321,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(MurderedPetRule.class,new MurderedPetRule());
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  rules=new HashMap<Class<? extends AbstractRule>,Rule>();
  rules.put(MurderedPetRule.class,new MurderedPetRule());
  return rules;
}"
44322,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    ProjectileRule rule=new ProjectileRule();
    rule.setBowRewards(system.getBoolean(""String_Node_Str"",true));
    rule.setMessage(new DefaultMessage(system.getString(""String_Node_Str"",NO_BOW_REWARD_MESSAGE)));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(ProjectileRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    ProjectileRule rule=new ProjectileRule();
    rule.setBowRewards(system.getBoolean(""String_Node_Str"",true));
    rule.setMessage(new DefaultMessage(system.getString(""String_Node_Str"",NO_BOW_REWARD_MESSAGE)));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(ProjectileRule.class,rule);
  }
  return rules;
}"
44323,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  SimpleClansRule rule=new SimpleClansRule();
  rule.setClearNonRivalDrops(system.getBoolean(""String_Node_Str"",false));
  Map<Class<? extends AbstractRule>,Rule> rules=new HashMap<Class<? extends AbstractRule>,Rule>();
  rules.put(SimpleClansRule.class,rule);
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    SimpleClansRule rule=new SimpleClansRule();
    rule.setClearNonRivalDrops(system.getBoolean(""String_Node_Str"",false));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(SimpleClansRule.class,rule);
  }
  return rules;
}"
44324,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    SpawnerDistanceRule rule=new SpawnerDistanceRule();
    rule.setCanCampSpawner(system.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(system.getBoolean(""String_Node_Str"",true));
    rule.setClearExpOrbs(system.getBoolean(""String_Node_Str"",true));
    rule.setCampByDistance(system.getBoolean(""String_Node_Str"",true));
    rule.setCampRadius(system.getInt(""String_Node_Str"",CAMP_RADIUS));
    rule.setMessage(new DefaultMessage(system.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(SpawnerDistanceRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    SpawnerDistanceRule rule=new SpawnerDistanceRule();
    rule.setCanCampSpawner(system.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(system.getBoolean(""String_Node_Str"",true));
    rule.setClearExpOrbs(system.getBoolean(""String_Node_Str"",true));
    rule.setCampByDistance(system.getBoolean(""String_Node_Str"",true));
    rule.setCampRadius(system.getInt(""String_Node_Str"",CAMP_RADIUS));
    rule.setMessage(getNoCampMessage(system));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(SpawnerDistanceRule.class,rule);
  }
  return rules;
}"
44325,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null) {
    SpawnerMobRule rule=new SpawnerMobRule();
    rule.setCanCampSpawner(system.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(system.getBoolean(""String_Node_Str"",true));
    rule.setClearExpOrbs(system.getBoolean(""String_Node_Str"",true));
    rule.setCampByEntity(system.getBoolean(""String_Node_Str"",false));
    rule.setMessage(getNoCampMessage(system));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(SpawnerMobRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    SpawnerMobRule rule=new SpawnerMobRule();
    rule.setCanCampSpawner(system.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(system.getBoolean(""String_Node_Str"",true));
    rule.setClearExpOrbs(system.getBoolean(""String_Node_Str"",true));
    rule.setCampByEntity(system.getBoolean(""String_Node_Str"",false));
    rule.setMessage(getNoCampMessage(system));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(SpawnerMobRule.class,rule);
  }
  return rules;
}"
44326,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection config){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (config != null) {
    TamedCreatureRule rule=new TamedCreatureRule();
    rule.setWolverineMode(config.getBoolean(""String_Node_Str"",true));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(TamedCreatureRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    TamedCreatureRule rule=new TamedCreatureRule();
    rule.setWolverineMode(system.getBoolean(""String_Node_Str"",true));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(TamedCreatureRule.class,rule);
  }
  return rules;
}"
44327,"public TownyRule(){
  setClearExpOrbs(false);
}","public TownyRule(){
  townMap=new HashMap<String,Boolean>();
  setClearExpOrbs(true);
}"
44328,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection gain){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  ConfigurationSection townyConfig=gain.getConfigurationSection(""String_Node_Str"");
  if (townyConfig != null) {
    boolean defaultClearExpOrbs=gain.getBoolean(""String_Node_Str"",false);
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    for (    String townName : townyConfig.getKeys(false)) {
      if (""String_Node_Str"".equals(townName)) {
        continue;
      }
      ConfigurationSection townConfig=townyConfig.getConfigurationSection(townName);
      if (townConfig != null) {
        TownyRule rule=new TownyRule();
        rule.setTownName(townName);
        rule.setClearExpOrbs(townConfig.getBoolean(""String_Node_Str"",defaultClearExpOrbs));
        rules.put(TownyRule.class,rule);
      }
    }
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection gain){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  ConfigurationSection townyConfig=gain.getConfigurationSection(""String_Node_Str"");
  if (townyConfig != null) {
    TownyRule rule=new TownyRule();
    for (    String townName : townyConfig.getKeys(false)) {
      ConfigurationSection townConfig=townyConfig.getConfigurationSection(townName);
      if (townConfig != null) {
        rule.addTown(townName,townConfig.getBoolean(""String_Node_Str"",false));
      }
    }
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(TownyRule.class,rule);
  }
  return rules;
}"
44329,"@Override protected boolean isBroken(EntityKilledEvent event){
  return DependencyUtils.hasTowny() && townName.equals(TownyUniverse.getTownName(event.getKiller().getLocation())) && isClearExpOrbs();
}","@Override protected boolean isBroken(EntityKilledEvent event){
  boolean inTown=false;
  if (DependencyUtils.hasTowny()) {
    String townName=TownyUniverse.getTownName(event.getKiller().getLocation());
    if (townMap.containsKey(townName)) {
      inTown=townMap.get(townName);
    }
 else     if (townName != null && townMap.containsKey(IN_TOWN)) {
      inTown=townMap.get(IN_TOWN);
    }
  }
  return inTown && isClearExpOrbs();
}"
44330,"public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection config){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (config != null) {
    UnderSeaLevelRule rule=new UnderSeaLevelRule();
    rule.setHuntUnderSeaLevel(config.getBoolean(""String_Node_Str"",true));
    rule.setMessage(new DefaultMessage(config.getString(""String_Node_Str"",NO_UNDER_SEA_LEVEL_MESSAGE)));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(UnderSeaLevelRule.class,rule);
  }
  return rules;
}","public static Map<Class<? extends AbstractRule>,Rule> parseConfig(ConfigurationSection system){
  Map<Class<? extends AbstractRule>,Rule> rules=Collections.emptyMap();
  if (system != null && system.getConfigurationSection(""String_Node_Str"") != null) {
    UnderSeaLevelRule rule=new UnderSeaLevelRule();
    rule.setHuntUnderSeaLevel(system.getBoolean(""String_Node_Str"",true));
    rule.setMessage(new DefaultMessage(system.getString(""String_Node_Str"",NO_UNDER_SEA_LEVEL_MESSAGE)));
    rules=new HashMap<Class<? extends AbstractRule>,Rule>();
    rules.put(UnderSeaLevelRule.class,rule);
  }
  return rules;
}"
44331,"private static List<EntityDrop> parseDrops(List<String> dropsList){
  List<EntityDrop> drops=Collections.emptyList();
  for (  String dropString : dropsList) {
    EntityDrop drop=createEntityDrop(dropString);
    if (drop != null) {
      drops=new ArrayList<EntityDrop>();
      drops.add(drop);
    }
  }
  return drops;
}","private static List<EntityDrop> parseDrops(List<String> dropsList){
  List<EntityDrop> drops=new ArrayList<EntityDrop>();
  for (  String dropString : dropsList) {
    EntityDrop drop=createEntityDrop(dropString);
    if (drop != null) {
      drops.add(drop);
    }
  }
  return drops;
}"
44332,"public static List<EntityDrop> parseConfig(ConfigurationSection config){
  List<EntityDrop> drops=Collections.emptyList();
  if (config != null && config.getList(""String_Node_Str"") != null) {
    for (    Object obj : config.getList(""String_Node_Str"")) {
      if (obj instanceof LinkedHashMap) {
        ConfigurationSection memoryConfig=createMemoryConfig(obj);
        String passengerString=memoryConfig.getString(""String_Node_Str"");
        String vehicleString=memoryConfig.getString(""String_Node_Str"");
        JockeyDrop drop=createJockeyDrop(passengerString,vehicleString);
        if (drop != null) {
          drops=new ArrayList<EntityDrop>();
          drops.add(drop);
        }
      }
    }
  }
  return drops;
}","public static List<EntityDrop> parseConfig(ConfigurationSection config){
  List<EntityDrop> drops=new ArrayList<EntityDrop>();
  if (config != null && config.getList(""String_Node_Str"") != null) {
    for (    Object obj : config.getList(""String_Node_Str"")) {
      if (obj instanceof LinkedHashMap) {
        ConfigurationSection memoryConfig=createMemoryConfig(obj);
        String passengerString=memoryConfig.getString(""String_Node_Str"");
        String vehicleString=memoryConfig.getString(""String_Node_Str"");
        JockeyDrop drop=createJockeyDrop(passengerString,vehicleString);
        if (drop != null) {
          drops.add(drop);
        }
      }
    }
  }
  return drops;
}"
44333,"public AbstractRewardSource(String section,ConfigurationSection config){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigurationSection rewardConfig=config.getConfigurationSection(section);
  name=rewardConfig.getName();
  itemDrops=new ArrayList<AbstractItemDrop>();
  itemDrops.addAll(ItemDrop.parseConfig(rewardConfig));
  itemDrops.addAll(BookDrop.parseConfig(rewardConfig));
  itemDrops.addAll(LoreDrop.parseConfig(rewardConfig));
  entityDrops=EntityDrop.parseConfig(rewardConfig);
  jockeyDrops=new ArrayList<JockeyDrop>();
  for (  EntityDrop drop : JockeyDrop.parseConfig(rewardConfig)) {
    if (drop instanceof JockeyDrop) {
      jockeyDrops.add((JockeyDrop)drop);
    }
  }
  coin=CoinDrop.parseConfig(rewardConfig);
  coinRewardMessage=new CoinMessageDecorator(new DefaultMessage(rewardConfig.getString(""String_Node_Str"",config.getString(""String_Node_Str"",COIN_REWARD_MESSAGE))));
  coinPenaltyMessage=new CoinMessageDecorator(new DefaultMessage(rewardConfig.getString(""String_Node_Str"",config.getString(""String_Node_Str"",COIN_PENALTY_MESSAGE))));
  noCoinRewardMessage=new NoCoinMessageDecorator(new DefaultMessage(rewardConfig.getString(""String_Node_Str"",config.getString(""String_Node_Str"",NO_COIN_REWARD_MESSAGE))));
  addItemsToInventory=rewardConfig.getBoolean(""String_Node_Str"",false);
}","public AbstractRewardSource(String section,ConfigurationSection config){
  this();
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigurationSection rewardConfig=config.getConfigurationSection(section);
  name=rewardConfig.getName();
  itemDrops=new ArrayList<AbstractItemDrop>();
  itemDrops.addAll(ItemDrop.parseConfig(rewardConfig));
  itemDrops.addAll(BookDrop.parseConfig(rewardConfig));
  itemDrops.addAll(LoreDrop.parseConfig(rewardConfig));
  entityDrops=EntityDrop.parseConfig(rewardConfig);
  jockeyDrops=new ArrayList<JockeyDrop>();
  for (  EntityDrop drop : JockeyDrop.parseConfig(rewardConfig)) {
    if (drop instanceof JockeyDrop) {
      jockeyDrops.add((JockeyDrop)drop);
    }
  }
  coin=CoinDrop.parseConfig(rewardConfig);
  coinRewardMessage=new CoinMessageDecorator(new DefaultMessage(rewardConfig.getString(""String_Node_Str"",config.getString(""String_Node_Str"",COIN_REWARD_MESSAGE))));
  coinPenaltyMessage=new CoinMessageDecorator(new DefaultMessage(rewardConfig.getString(""String_Node_Str"",config.getString(""String_Node_Str"",COIN_PENALTY_MESSAGE))));
  noCoinRewardMessage=new NoCoinMessageDecorator(new DefaultMessage(rewardConfig.getString(""String_Node_Str"",config.getString(""String_Node_Str"",NO_COIN_REWARD_MESSAGE))));
  addItemsToInventory=rewardConfig.getBoolean(""String_Node_Str"",false);
}"
44334,"private static List<EntityDrop> parseDrops(List<String> dropsList){
  List<EntityDrop> drops=Collections.emptyList();
  for (  String dropString : dropsList) {
    EntityDrop drop=createEntityDrop(dropString);
    if (drop != null) {
      drops=new ArrayList<EntityDrop>();
      drops.add(drop);
    }
  }
  return drops;
}","private static List<EntityDrop> parseDrops(List<String> dropsList){
  List<EntityDrop> drops=new ArrayList<EntityDrop>();
  for (  String dropString : dropsList) {
    EntityDrop drop=createEntityDrop(dropString);
    if (drop != null) {
      drops.add(drop);
    }
  }
  return drops;
}"
44335,"private void dropCoin(String player,Reward reward){
  if (!DependencyUtils.hasEconomy()) {
    return;
  }
  double amount=calculateAmount(reward);
  Set<String> party=new HashSet<String>();
  party.add(player);
  party.addAll(reward.getParty());
  for (  String member : party) {
    registerAmount(member,amount);
    Message message=member.equals(player) ? reward.getMessage() : getPartyMessage(amount);
    reward.addParameter(MessageToken.PLAYER,member).addParameter(MessageToken.AMOUNT,DependencyUtils.getEconomy().format(Math.abs(amount)));
    MessageHandler handler=new MessageHandler(message,reward.getParameters());
    handler.send(member);
  }
}","private void dropCoin(String player,Reward reward){
  if (!DependencyUtils.hasEconomy()) {
    return;
  }
  double amount=calculateAmount(reward);
  if (Math.abs(amount) > 0.0) {
    for (    String member : createParty(player,reward)) {
      registerAmount(member,amount);
      Message message=member.equals(player) ? reward.getMessage() : getPartyMessage(amount);
      reward.addParameter(MessageToken.PLAYER,member).addParameter(MessageToken.AMOUNT,DependencyUtils.getEconomy().format(Math.abs(amount)));
      MessageHandler handler=new MessageHandler(message,reward.getParameters());
      handler.send(member);
    }
  }
}"
44336,"private double calculateAmount(Reward reward){
  LoggerUtil.getInstance().debug(""String_Node_Str"" + reward.getCoin());
  LoggerUtil.getInstance().debug(""String_Node_Str"" + reward.getGain());
  double amount=reward.getCoin() * reward.getGain();
  LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  if (reward.getParty().size() > 1) {
    amount/=reward.getParty().size();
    LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  }
  if (reward.isIntegerCurrency()) {
    amount=Math.round(amount);
    LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  }
  return amount;
}","private double calculateAmount(Reward reward){
  LoggerUtil.getInstance().debug(""String_Node_Str"" + reward.getCoin());
  LoggerUtil.getInstance().debug(""String_Node_Str"" + reward.getGain());
  double amount=reward.getCoin() * reward.getGain();
  LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  if (reward.getParty().size() > 1) {
    LoggerUtil.getInstance().debug(""String_Node_Str"" + reward.getParty().size());
    amount/=reward.getParty().size();
    LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  }
  if (reward.isIntegerCurrency()) {
    amount=round(amount,0,BigDecimal.ROUND_HALF_UP);
    LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  }
 else {
    amount=round(amount,2,BigDecimal.ROUND_HALF_UP);
    LoggerUtil.getInstance().debug(""String_Node_Str"" + amount);
  }
  return amount;
}"
44337,"private static Short parseDurability(String dropString){
  String[] dropParts=dropString.split(""String_Node_Str"");
  String[] itemParts=dropParts[0].split(""String_Node_Str"");
  String[] itemSubParts=itemParts[0].split(""String_Node_Str"");
  return itemSubParts.length > 2 ? Short.parseShort(itemSubParts[2]) : null;
}","private static Short parseDurability(String dropString){
  String[] dropParts=dropString.split(""String_Node_Str"");
  String[] itemParts=dropParts[0].split(""String_Node_Str"");
  String[] itemSubParts=itemParts[0].split(""String_Node_Str"");
  return itemSubParts.length > 2 && !itemSubParts[2].isEmpty() ? Short.parseShort(itemSubParts[2]) : null;
}"
44338,"private static Byte parseData(String dropString){
  String[] dropParts=dropString.split(""String_Node_Str"");
  String[] itemParts=dropParts[0].split(""String_Node_Str"");
  String[] itemSubParts=itemParts[0].split(""String_Node_Str"");
  return itemSubParts.length > 1 ? Byte.parseByte(itemSubParts[1]) : null;
}","private static Byte parseData(String dropString){
  String[] dropParts=dropString.split(""String_Node_Str"");
  String[] itemParts=dropParts[0].split(""String_Node_Str"");
  String[] itemSubParts=itemParts[0].split(""String_Node_Str"");
  return itemSubParts.length > 1 && !itemSubParts[1].isEmpty() ? Byte.parseByte(itemSubParts[1]) : null;
}"
44339,"@Override public String getAssembledMessage(Map<MessageToken,String> parameters){
  String assembledMessage=template;
  if (assembledMessage != null && assembledMessage.length() > 0) {
    for (    Entry<MessageToken,String> entry : parameters.entrySet()) {
      if (entry.getKey() == MessageToken.AMOUNT) {
        assembledMessage=assembledMessage.replaceAll(entry.getKey().toString(),entry.getValue().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (entry.getKey() == MessageToken.ITEM) {
        assembledMessage=assembledMessage.replaceAll(entry.getKey().toString(),toCamelCase(entry.getValue()));
      }
 else       if (entry.getKey() == MessageToken.CLASS && DependencyUtils.hasHeroes()) {
        Player player=Bukkit.getPlayer(parameters.get(MessageToken.PLAYER));
        if (player != null) {
          assembledMessage=assembledMessage.replaceAll(MessageToken.CLASS.toString(),DependencyUtils.getHeroes().getCharacterManager().getHero(player).getHeroClass().getName());
        }
      }
 else {
        assembledMessage=assembledMessage.replaceAll(entry.getKey().toString(),entry.getValue());
      }
    }
  }
  return assembledMessage;
}","@Override public String getAssembledMessage(Map<MessageToken,String> parameters){
  String assembledMessage=template;
  if (DependencyUtils.hasHeroes() && parameters.containsKey(MessageToken.PLAYER)) {
    Player player=Bukkit.getPlayer(parameters.get(MessageToken.PLAYER));
    if (player != null) {
      parameters.put(MessageToken.CLASS,DependencyUtils.getHeroes().getCharacterManager().getHero(player).getHeroClass().getName());
    }
  }
  if (assembledMessage != null && assembledMessage.length() > 0) {
    for (    Entry<MessageToken,String> entry : parameters.entrySet()) {
      if (entry.getKey() == MessageToken.AMOUNT) {
        assembledMessage=assembledMessage.replaceAll(entry.getKey().toString(),entry.getValue().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (entry.getKey() == MessageToken.ITEM) {
        assembledMessage=assembledMessage.replaceAll(entry.getKey().toString(),toCamelCase(entry.getValue()));
      }
 else {
        assembledMessage=assembledMessage.replaceAll(entry.getKey().toString(),entry.getValue());
      }
    }
  }
  return assembledMessage;
}"
44340,"public ItemStack getOutcome(boolean isFixedDrops){
  if (random.nextDouble() * 100.0D < percentage && material != null) {
    int dropAmount=isFixedDrops ? range.getMaximumInteger() : range.getMinimumInteger() + random.nextInt(Math.abs(range.getMaximumInteger() - range.getMinimumInteger() + 1));
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == null) {
        itemStack=new ItemStack(material,dropAmount);
      }
 else {
        MaterialData materialData=new MaterialData(material,data);
        itemStack=materialData.toItemStack(dropAmount);
        if (durability != null) {
          itemStack.setDurability(durability);
        }
      }
      itemStack.addEnchantments(ItemEnchantment.getOutcome(enchantments));
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return null;
}","public ItemStack getOutcome(boolean isFixedDrops){
  if (random.nextDouble() * 100.0D < percentage && material != null) {
    int dropAmount=isFixedDrops ? range.getMaximumInteger() : range.getMinimumInteger() + random.nextInt(Math.abs(range.getMaximumInteger() - range.getMinimumInteger() + 1));
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == null && durability == null) {
        itemStack=new ItemStack(material,dropAmount);
      }
 else {
        MaterialData materialData=data == null ? new MaterialData(material) : new MaterialData(material,data);
        itemStack=materialData.toItemStack(dropAmount);
        if (durability != null) {
          itemStack.setDurability(durability);
        }
      }
      itemStack.addEnchantments(ItemEnchantment.getOutcome(enchantments));
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return null;
}"
44341,"private double calculateAmount(Reward reward){
  LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + reward.getCoin());
  LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + reward.getGain());
  double amount=reward.getCoin() * reward.getGain();
  LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + amount);
  if (reward.getParty().size() > 1) {
    amount/=reward.getParty().size();
    LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + amount);
  }
  if (reward.isIntegerCurrency()) {
    LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + amount);
    amount=Math.round(amount);
  }
  return amount;
}","private double calculateAmount(Reward reward){
  LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + reward.getCoin());
  LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + reward.getGain());
  double amount=reward.getCoin() * reward.getGain();
  LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + amount);
  if (reward.getParty().size() > 1) {
    amount/=reward.getParty().size();
    LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + amount);
  }
  if (reward.isIntegerCurrency()) {
    amount=Math.round(amount);
    LoggerUtil.getInstance().debug(this.getClass(),""String_Node_Str"" + amount);
  }
  return amount;
}"
44342,"@Override protected Location getLocation(Event event){
  if (event instanceof EntityDeathEvent) {
    return ((EntityDeathEvent)event).getEntity().getLocation();
  }
 else   if (event instanceof PlayerDeathEvent) {
    return ((PlayerDeathEvent)event).getEntity().getLocation();
  }
  return null;
}","@Override protected Location getLocation(Event event){
  Location location=null;
  if (event instanceof EntityKilledEvent) {
    location=((EntityKilledEvent)event).getEntity().getLocation();
  }
 else   if (event instanceof PlayerKilledEvent) {
    location=((PlayerKilledEvent)event).getEntity().getLocation();
  }
 else   if (event instanceof PlayerDeathEvent) {
    location=((PlayerDeathEvent)event).getEntity().getLocation();
  }
  return location;
}"
44343,"@EventHandler(ignoreCancelled=true) public void onRewardEvent(RewardEvent event){
  if (!event.isCancelled()) {
    Reward reward=event.getReward();
    Player player=event.getPlayer();
    dropCoin(player.getName(),reward);
    dropItems(reward);
    dropEntities(reward);
    plugin.getMetrics().addCount(reward.getName());
  }
}","@EventHandler(ignoreCancelled=true) public void onRewardEvent(RewardEvent event){
  if (!event.isCancelled()) {
    Reward reward=event.getReward();
    Player player=event.getPlayer();
    if (player != null) {
      dropCoin(player.getName(),reward);
      dropItems(reward);
      dropEntities(reward);
      plugin.getMetrics().addCount(reward.getName());
      if (ECLogger.getInstance().isDebug()) {
        ECLogger.getInstance().debug(this.getClass(),""String_Node_Str"" + reward.getName());
      }
    }
  }
}"
44344,"protected static AbstractRewardSource mergeSets(AbstractRewardSource source,ConfigurationSection rewardConfig,ConfigurationSection rewardSets){
  List<String> sets=rewardConfig.getStringList(""String_Node_Str"");
  if (!sets.isEmpty() && rewardSets != null) {
    for (    String setName : sets) {
      if (rewardSets.getConfigurationSection(setName) != null) {
        AbstractRewardSource setSource=RewardSourceFactory.createSource(source.getName(),rewardSets.getConfigurationSection(setName));
        source=mergeRewardSource(source,setSource);
      }
    }
  }
  return source;
}","protected static AbstractRewardSource mergeSets(AbstractRewardSource source,ConfigurationSection rewardConfig,ConfigurationSection rewardSets){
  List<String> sets=rewardConfig.getStringList(""String_Node_Str"");
  if (!sets.isEmpty() && rewardSets != null) {
    for (    String setName : sets) {
      if (rewardSets.getConfigurationSection(setName) != null) {
        AbstractRewardSource setSource=RewardSourceFactory.createSource(CustomRewardType.SET.getName(),rewardSets.getConfigurationSection(setName));
        setSource.setName(source.getName());
        source=mergeRewardSource(source,setSource);
      }
    }
  }
  return source;
}"
44345,"private void dropCoin(String player,Reward reward){
  if (!DependencyUtils.hasDeathTpPlus()) {
    return;
  }
  double amount=calculateAmount(reward);
  Set<String> party=new HashSet<String>();
  party.add(player);
  party.addAll(reward.getParty());
  for (  String member : party) {
    registerAmount(member,amount);
    Message message=member.equals(player) ? reward.getMessage() : getPartyMessage(amount);
    message.addParameter(MessageToken.PLAYER,member);
    message.addParameter(MessageToken.AMOUNT,DependencyUtils.getEconomy().format(Math.abs(amount)));
    MessageHandler handler=new MessageHandler(member,message);
    handler.send();
  }
}","private void dropCoin(String player,Reward reward){
  if (!DependencyUtils.hasEconomy()) {
    return;
  }
  double amount=calculateAmount(reward);
  Set<String> party=new HashSet<String>();
  party.add(player);
  party.addAll(reward.getParty());
  for (  String member : party) {
    registerAmount(member,amount);
    Message message=member.equals(player) ? reward.getMessage() : getPartyMessage(amount);
    message.addParameter(MessageToken.PLAYER,member);
    message.addParameter(MessageToken.AMOUNT,DependencyUtils.getEconomy().format(Math.abs(amount)));
    MessageHandler handler=new MessageHandler(member,message);
    handler.send();
  }
}"
44346,"public boolean hasDrops(){
  return !itemDrops.isEmpty() && !entityDrops.isEmpty();
}","public boolean hasDrops(){
  return !itemDrops.isEmpty() || !entityDrops.isEmpty();
}"
44347,"protected static AbstractRewardSource mergeSets(AbstractRewardSource source,ConfigurationSection rewardConfig,ConfigurationSection rewardSets){
  List<String> sets=rewardConfig.getStringList(""String_Node_Str"");
  if (!sets.isEmpty() && rewardSets != null) {
    for (    String setName : sets) {
      if (rewardSets.getConfigurationSection(setName) != null) {
        AbstractRewardSource setSource=RewardSourceFactory.createSource(CustomRewardType.SET.getName(),rewardSets.getConfigurationSection(setName));
        source=mergeRewardSource(source,setSource);
      }
    }
  }
  return source;
}","protected static AbstractRewardSource mergeSets(AbstractRewardSource source,ConfigurationSection rewardConfig,ConfigurationSection rewardSets){
  List<String> sets=rewardConfig.getStringList(""String_Node_Str"");
  if (!sets.isEmpty() && rewardSets != null) {
    for (    String setName : sets) {
      if (rewardSets.getConfigurationSection(setName) != null) {
        AbstractRewardSource setSource=RewardSourceFactory.createSource(source.getName(),rewardSets.getConfigurationSection(setName));
        source=mergeRewardSource(source,setSource);
      }
    }
  }
  return source;
}"
44348,"public static AbstractRewardSettings parseConfig(ConfigurationSection config){
  Map<EntityType,List<AbstractRewardSource>> sources=new HashMap<EntityType,List<AbstractRewardSource>>();
  ConfigurationSection rewardTable=config.getConfigurationSection(""String_Node_Str"");
  if (rewardTable != null) {
    for (    String typeName : rewardTable.getKeys(false)) {
      EntityType type=EntityType.fromName(typeName);
      if (type != null) {
        AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(typeName,rewardTable.getConfigurationSection(typeName)),config);
        if (!sources.containsKey(type)) {
          sources.put(type,new ArrayList<AbstractRewardSource>());
        }
        sources.get(type).add(mergeSets(source,rewardTable,config.getConfigurationSection(""String_Node_Str"")));
      }
    }
  }
  EntityRewardSettings settings=new EntityRewardSettings(sources);
  settings.setHuntingRules(loadHuntingRules(config));
  return settings;
}","public static AbstractRewardSettings parseConfig(ConfigurationSection config){
  Map<EntityType,List<AbstractRewardSource>> sources=new HashMap<EntityType,List<AbstractRewardSource>>();
  ConfigurationSection rewardTable=config.getConfigurationSection(""String_Node_Str"");
  if (rewardTable != null) {
    for (    String typeName : rewardTable.getKeys(false)) {
      EntityType type=EntityType.fromName(typeName);
      if (type != null) {
        AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(typeName,rewardTable.getConfigurationSection(typeName)),config);
        if (!sources.containsKey(type)) {
          sources.put(type,new ArrayList<AbstractRewardSource>());
        }
        sources.get(type).add(mergeSets(source,rewardTable.getConfigurationSection(typeName),config.getConfigurationSection(""String_Node_Str"")));
      }
    }
  }
  EntityRewardSettings settings=new EntityRewardSettings(sources);
  settings.setHuntingRules(loadHuntingRules(config));
  return settings;
}"
44349,"private static Message configureMessage(Message message,ConfigurationSection config){
  if (message != null && config != null) {
    message.setMessageOutputEnabled(config.getBoolean(""String_Node_Str"",true));
    message.setCoinLoggingEnabled(config.getBoolean(""String_Node_Str"",true));
    if (message instanceof NoCoinRewardMessage) {
      ((NoCoinRewardMessage)message).setNoRewardMessageEnabled(config.getBoolean(""String_Node_Str"",false));
    }
    if (message instanceof SpawnerCampMessage) {
      ((SpawnerCampMessage)message).setSpawnerCampMessageEnabled(config.getBoolean(""String_Node_Str"",false));
    }
  }
  return message;
}","private static Message configureMessage(Message message,ConfigurationSection config){
  if (message != null && config != null) {
    message.setMessageOutputEnabled(config.getBoolean(""String_Node_Str"",true));
    message.setCoinLoggingEnabled(config.getBoolean(""String_Node_Str"",true));
    if (message instanceof NoCoinMessageDecorator) {
      ((NoCoinMessageDecorator)message).setNoRewardMessageEnabled(config.getBoolean(""String_Node_Str"",false));
    }
  }
  return message;
}"
44350,"public static Set<Rule> parseConfig(ConfigurationSection config){
  Set<Rule> rules=Collections.emptySet();
  if (config != null) {
    SpawnerMobRule rule=new SpawnerMobRule();
    rule.setCanCampSpawner(config.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(config.getBoolean(""String_Node_Str"",true));
    rule.setCampByEntity(config.getBoolean(""String_Node_Str"",false));
    rule.setMessage(new DefaultMessage(config.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    rules=new HashSet<Rule>();
    rules.add(rule);
  }
  return rules;
}","public static Set<Rule> parseConfig(ConfigurationSection config){
  Set<Rule> rules=Collections.emptySet();
  if (config != null) {
    SpawnerMobRule rule=new SpawnerMobRule();
    rule.setCanCampSpawner(config.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(config.getBoolean(""String_Node_Str"",true));
    rule.setCampByEntity(config.getBoolean(""String_Node_Str"",false));
    NoCampMessageDecorator message=new NoCampMessageDecorator(new DefaultMessage(config.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    message.setSpawnerCampMessageEnabled(config.getBoolean(""String_Node_Str"",false));
    rule.setMessage(message);
    rules=new HashSet<Rule>();
    rules.add(rule);
  }
  return rules;
}"
44351,"public AbstractRewardSource(ConfigurationSection config){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  name=config.getName();
  itemDrops=ItemDrop.parseConfig(config);
  entityDrops=EntityDrop.parseConfig(config);
  coin=CoinDrop.parseConfig(config);
  coinRewardMessage=new DefaultMessage(config.getString(""String_Node_Str"",COIN_REWARD_MESSAGE));
  coinPenaltyMessage=new DefaultMessage(config.getString(""String_Node_Str"",COIN_PENALTY_MESSAGE));
  noCoinRewardMessage=new NoCoinRewardMessage(config.getString(""String_Node_Str"",NO_COIN_REWARD_MESSAGE));
}","public AbstractRewardSource(ConfigurationSection config){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  name=config.getName();
  itemDrops=ItemDrop.parseConfig(config);
  entityDrops=EntityDrop.parseConfig(config);
  coin=CoinDrop.parseConfig(config);
  coinRewardMessage=new DefaultMessage(config.getString(""String_Node_Str"",COIN_REWARD_MESSAGE));
  coinPenaltyMessage=new DefaultMessage(config.getString(""String_Node_Str"",COIN_PENALTY_MESSAGE));
  noCoinRewardMessage=new NoCoinMessageDecorator(new DefaultMessage(config.getString(""String_Node_Str"",NO_COIN_REWARD_MESSAGE)));
}"
44352,"private double calculateAmount(Reward reward){
  double amount=reward.getCoin() * reward.getGain();
  ECLogger.getInstance().debug(""String_Node_Str"" + amount);
  amount/=reward.hasParty() ? reward.getParty().size() : 1;
  if (reward.getParty().size() > 1) {
    amount/=reward.getParty().size();
    ECLogger.getInstance().debug(""String_Node_Str"" + amount);
  }
  if (reward.isIntegerCurrency()) {
    ECLogger.getInstance().debug(""String_Node_Str"" + amount);
    amount=Math.round(amount);
  }
  return amount;
}","private double calculateAmount(Reward reward){
  double amount=reward.getCoin() * reward.getGain();
  ECLogger.getInstance().debug(""String_Node_Str"" + amount);
  if (reward.getParty().size() > 1) {
    amount/=reward.getParty().size();
    ECLogger.getInstance().debug(""String_Node_Str"" + amount);
  }
  if (reward.isIntegerCurrency()) {
    ECLogger.getInstance().debug(""String_Node_Str"" + amount);
    amount=Math.round(amount);
  }
  return amount;
}"
44353,"public static List<EntityDrop> parseConfig(ConfigurationSection config){
  List<EntityDrop> drops=Collections.emptyList();
  if (config != null) {
    drops=new ArrayList<EntityDrop>();
    if (config.getList(""String_Node_Str"") != null) {
      List<String> dropsList=config.getStringList(""String_Node_Str"");
      drops=EntityDrop.parseDrops(dropsList);
    }
 else {
      drops=EntityDrop.parseDrops(config.getString(""String_Node_Str""));
    }
    EntityDrop exp=parseExpConfig(config);
    if (exp != null) {
      drops.add(exp);
    }
  }
  return drops;
}","public static List<EntityDrop> parseConfig(ConfigurationSection config){
  List<EntityDrop> drops=Collections.emptyList();
  if (config != null) {
    drops=new ArrayList<EntityDrop>();
    if (config.getList(""String_Node_Str"") != null) {
      List<String> dropsList=config.getStringList(""String_Node_Str"");
      drops.addAll(EntityDrop.parseDrops(dropsList));
    }
 else {
      drops.addAll(EntityDrop.parseDrops(config.getString(""String_Node_Str"")));
    }
    EntityDrop exp=parseExpConfig(config);
    if (exp != null) {
      drops.add(exp);
    }
  }
  return drops;
}"
44354,"public Set<String> getParty(Player player){
  Set<String> players=Collections.emptySet();
  for (  Party party : parties) {
    players=new HashSet<String>();
    if (party.isShared()) {
      players.addAll(party.getPlayers(player));
    }
  }
  return players;
}","public Set<String> getParty(Player player){
  Set<String> players=new HashSet<String>();
  for (  Party party : parties) {
    if (party.isShared()) {
      players.addAll(party.getPlayers(player));
    }
  }
  return players;
}"
44355,"private static Map<CustomType,List<AbstractRewardSource>> loadCustomSources(FileConfiguration config){
  Map<CustomType,List<AbstractRewardSource>> sources=new HashMap<CustomType,List<AbstractRewardSource>>();
  ConfigurationSection tableConfig=config.getConfigurationSection(""String_Node_Str"");
  ConfigurationSection setConfig=config.getConfigurationSection(""String_Node_Str"");
  if (tableConfig != null) {
    for (    String customName : tableConfig.getKeys(false)) {
      CustomType customType=CustomType.fromName(customName);
      if (customType != CustomType.INVALID) {
        AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(customName,tableConfig.getConfigurationSection(customName)),config);
        if (!sources.containsKey(customType)) {
          sources.put(customType,new ArrayList<AbstractRewardSource>());
        }
        List<String> setList=tableConfig.getConfigurationSection(customName).getStringList(""String_Node_Str"");
        if (!setList.isEmpty()) {
          for (          String setName : setList) {
            if (setConfig != null && setConfig.getConfigurationSection(setName) != null) {
              AbstractRewardSource setSource=RewardSourceFactory.createSource(CustomType.SET.getName(),setConfig.getConfigurationSection(setName));
              sources.get(customType).add(mergeRewardSource(source,setSource));
            }
          }
        }
 else {
          sources.get(customType).add(source);
        }
      }
      if (config.getBoolean(""String_Node_Str"",false)) {
        AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(CustomType.DEATH_PENALTY.getName(),config),config);
        if (!sources.containsKey(CustomType.DEATH_PENALTY)) {
          sources.put(CustomType.DEATH_PENALTY,new ArrayList<AbstractRewardSource>());
        }
        sources.get(CustomType.DEATH_PENALTY).add(source);
      }
      if (config.getBoolean(""String_Node_Str"",false)) {
        AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(CustomType.LEGACY_PVP.getName(),config),config);
        if (!sources.containsKey(CustomType.LEGACY_PVP)) {
          sources.put(CustomType.LEGACY_PVP,new ArrayList<AbstractRewardSource>());
        }
        sources.get(CustomType.LEGACY_PVP).add(source);
      }
    }
  }
  return sources;
}","private static Map<CustomType,List<AbstractRewardSource>> loadCustomSources(FileConfiguration config){
  Map<CustomType,List<AbstractRewardSource>> sources=new HashMap<CustomType,List<AbstractRewardSource>>();
  ConfigurationSection tableConfig=config.getConfigurationSection(""String_Node_Str"");
  ConfigurationSection setConfig=config.getConfigurationSection(""String_Node_Str"");
  if (tableConfig != null) {
    for (    String customName : tableConfig.getKeys(false)) {
      CustomType customType=CustomType.fromName(customName);
      if (customType != CustomType.INVALID) {
        AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(customName,tableConfig.getConfigurationSection(customName)),config);
        if (!sources.containsKey(customType)) {
          sources.put(customType,new ArrayList<AbstractRewardSource>());
        }
        List<String> setList=tableConfig.getConfigurationSection(customName).getStringList(""String_Node_Str"");
        if (!setList.isEmpty()) {
          for (          String setName : setList) {
            if (setConfig != null && setConfig.getConfigurationSection(setName) != null) {
              AbstractRewardSource setSource=RewardSourceFactory.createSource(CustomType.SET.getName(),setConfig.getConfigurationSection(setName));
              sources.get(customType).add(mergeRewardSource(source,setSource));
            }
          }
        }
 else {
          sources.get(customType).add(source);
        }
      }
    }
    if (config.getBoolean(""String_Node_Str"",false)) {
      AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(CustomType.DEATH_PENALTY.getName(),config),config);
      if (!sources.containsKey(CustomType.DEATH_PENALTY)) {
        sources.put(CustomType.DEATH_PENALTY,new ArrayList<AbstractRewardSource>());
      }
      sources.get(CustomType.DEATH_PENALTY).add(source);
    }
    if (config.getBoolean(""String_Node_Str"",false)) {
      AbstractRewardSource source=configureRewardSource(RewardSourceFactory.createSource(CustomType.LEGACY_PVP.getName(),config),config);
      if (!sources.containsKey(CustomType.LEGACY_PVP)) {
        sources.put(CustomType.LEGACY_PVP,new ArrayList<AbstractRewardSource>());
      }
      sources.get(CustomType.LEGACY_PVP).add(source);
    }
  }
  return sources;
}"
44356,"private FileConfiguration getConfig(File file) throws IOException, InvalidConfigurationException {
  FileConfiguration config=new YamlConfiguration();
  if (!file.exists()) {
    file.getParentFile().mkdir();
    file.createNewFile();
    InputStream inputStream=plugin.getResource(file.getName());
    FileOutputStream outputStream=new FileOutputStream(file);
    byte[] buffer=new byte[8192];
    int length=0;
    while ((length=inputStream.read(buffer)) > 0) {
      outputStream.write(buffer,0,length);
    }
    inputStream.close();
    outputStream.close();
    ECLogger.getInstance().info(""String_Node_Str"" + file.getName());
  }
 else {
    ECLogger.getInstance().severe(""String_Node_Str"");
  }
  config.load(file);
  config.setDefaults(YamlConfiguration.loadConfiguration(plugin.getResource(file.getName())));
  config.options().copyDefaults(true);
  return config;
}","private FileConfiguration getConfig(File file) throws IOException, InvalidConfigurationException {
  FileConfiguration config=new YamlConfiguration();
  if (!file.exists()) {
    file.getParentFile().mkdir();
    file.createNewFile();
    InputStream inputStream=plugin.getResource(file.getName());
    FileOutputStream outputStream=new FileOutputStream(file);
    byte[] buffer=new byte[8192];
    int length=0;
    while ((length=inputStream.read(buffer)) > 0) {
      outputStream.write(buffer,0,length);
    }
    inputStream.close();
    outputStream.close();
    ECLogger.getInstance().info(""String_Node_Str"" + file.getName());
  }
 else {
    ECLogger.getInstance().info(""String_Node_Str"" + file.getName());
  }
  config.load(file);
  config.setDefaults(YamlConfiguration.loadConfiguration(plugin.getResource(DEFAULT_FILE)));
  config.options().copyDefaults(true);
  return config;
}"
44357,"public PluginConfig(ecoCreature plugin){
  this.plugin=plugin;
  loaded=false;
  dataWorldsFolder=new File(plugin.getDataFolder(),""String_Node_Str"");
  dataWorldsFolder.mkdirs();
  try {
    load();
    loaded=true;
  }
 catch (  IOException ioe) {
    ECLogger.getInstance().severe(""String_Node_Str"" + ioe.toString());
  }
catch (  InvalidConfigurationException ice) {
    ECLogger.getInstance().severe(""String_Node_Str"" + ice.toString());
  }
}","public PluginConfig(ecoCreature plugin){
  this.plugin=plugin;
  dataWorldsFolder=new File(plugin.getDataFolder(),""String_Node_Str"");
  dataWorldsFolder.mkdirs();
  initialized=initConfig();
}"
44358,"public void onEnable(){
  DependencyUtils.init();
  metrics=new RewardMetrics(this);
  pluginConfig=new PluginConfig(this);
  if (pluginConfig.isLoaded()) {
    addCommands();
    registerEvents();
    new UpdateTask(this);
    ECLogger.getInstance().info(getDescription().getVersion() + ""String_Node_Str"");
  }
 else {
    Bukkit.getPluginManager().disablePlugin(this);
  }
}","public void onEnable(){
  DependencyUtils.init();
  metrics=new RewardMetrics(this);
  pluginConfig=new PluginConfig(this);
  if (pluginConfig.isInitialized()) {
    addCommands();
    registerEvents();
    new UpdateTask(this);
    ECLogger.getInstance().info(getDescription().getVersion() + ""String_Node_Str"");
  }
 else {
    Bukkit.getPluginManager().disablePlugin(this);
  }
}"
44359,"@Override public void onDisable(){
  getServer().getScheduler().cancelTasks(this);
  pluginConfig.save();
  ECLogger.getInstance().info(getDescription().getVersion() + ""String_Node_Str"");
}","@Override public void onDisable(){
  getServer().getScheduler().cancelTasks(this);
  ECLogger.getInstance().info(getDescription().getVersion() + ""String_Node_Str"");
}"
44360,"private static WorldSettings loadWorldSettings(FileConfiguration config){
  WorldSettings settings=new WorldSettings();
  settings.setClearDefaultDrops(config.getBoolean(""String_Node_Str"",true));
  settings.setOverrideDrops(config.getBoolean(""String_Node_Str"",true));
  settings.setNoFarm(config.getBoolean(""String_Node_Str"",false));
  settings.setNoFarmFire(config.getBoolean(""String_Node_Str"",false));
  settings.setGainMultipliers(loadGainMultipliers(config));
  settings.setParties(loadParties(config));
  settings.setHuntingRules(loadHuntingRules(config));
  settings.setMaterialSources(loadMaterialSources(config));
  settings.setEntitySources(loadEntitySources(config));
  settings.setCustomSources(loadCustomSources(config));
  return settings;
}","private static WorldSettings loadWorldSettings(FileConfiguration config){
  WorldSettings settings=new WorldSettings();
  settings.setClearOnNoDrops(config.getBoolean(""String_Node_Str"",true));
  settings.setOverrideDrops(config.getBoolean(""String_Node_Str"",true));
  settings.setNoFarm(config.getBoolean(""String_Node_Str"",false));
  settings.setNoFarmFire(config.getBoolean(""String_Node_Str"",false));
  settings.setGainMultipliers(loadGainMultipliers(config));
  settings.setParties(loadParties(config));
  settings.setHuntingRules(loadHuntingRules(config));
  settings.setMaterialSources(loadMaterialSources(config));
  settings.setEntitySources(loadEntitySources(config));
  settings.setCustomSources(loadCustomSources(config));
  return settings;
}"
44361,"private Set<RewardEvent> getRewardEvents(EntityKilledEvent event){
  Set<RewardEvent> events=new HashSet<RewardEvent>();
  Player killer=event.getKiller();
  WorldSettings settings=plugin.getWorldSettings(killer.getWorld());
  if (settings.hasRewardSource(event)) {
    Reward outcome=settings.getRewardSource(event).getOutcome(event);
    outcome.setGain(settings.getGainMultiplier(killer));
    outcome.setParty(settings.getParty(killer));
    outcome.getMessage().addParameter(MessageToken.CREATURE,outcome.getName());
    outcome.getMessage().addParameter(MessageToken.ITEM,event.getWeaponName());
    if (outcome.getEntityDrops().contains(EntityType.EXPERIENCE_ORB)) {
      event.setDroppedExp(0);
    }
    if (settings.isOverrideDrops()) {
      event.getDrops().clear();
    }
    events.add(new RewardEvent(killer,outcome));
  }
  return events;
}","private Set<RewardEvent> getRewardEvents(EntityKilledEvent event){
  Set<RewardEvent> events=new HashSet<RewardEvent>();
  Player killer=event.getKiller();
  WorldSettings settings=plugin.getWorldSettings(killer.getWorld());
  if (settings.hasRewardSource(event)) {
    Reward outcome=settings.getRewardSource(event).getOutcome(event);
    outcome.setGain(settings.getGainMultiplier(killer));
    outcome.setParty(settings.getParty(killer));
    outcome.getMessage().addParameter(MessageToken.CREATURE,outcome.getName());
    outcome.getMessage().addParameter(MessageToken.ITEM,event.getWeaponName());
    if (settings.isOverrideDrops() || (settings.isClearOnNoDrops() && !outcome.hasDrops())) {
      event.getDrops().clear();
    }
    if (outcome.getEntityDrops().contains(EntityType.EXPERIENCE_ORB)) {
      event.setDroppedExp(0);
    }
    events.add(new RewardEvent(killer,outcome));
  }
  return events;
}"
44362,"@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(EntityDeathEvent event){
  if (event instanceof PlayerDeathEvent) {
    return;
  }
  handleDefaultDrops(event);
  if (EventUtils.getKillerFromDeathEvent(event) != null) {
    for (    RewardEvent rewardEvent : handler.getRewardEvents(EntityKilledEvent.createEvent(event))) {
      Bukkit.getPluginManager().callEvent(rewardEvent);
    }
  }
 else {
    handleNoFarm(event);
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(EntityDeathEvent event){
  if (event instanceof PlayerDeathEvent) {
    return;
  }
  if (EventUtils.getKillerFromDeathEvent(event) != null) {
    for (    RewardEvent rewardEvent : handler.getRewardEvents(EntityKilledEvent.createEvent(event))) {
      Bukkit.getPluginManager().callEvent(rewardEvent);
    }
  }
 else {
    handleNoFarm(event);
  }
}"
44363,"public boolean hasDrops(){
  return !itemDrops.isEmpty();
}","public boolean hasDrops(){
  return !itemDrops.isEmpty() && !entityDrops.isEmpty();
}"
44364,"@Override public Set<String> getPlayers(Player player){
  Set<String> party=new HashSet<String>();
  if (DependencyUtils.hasMcMMO() && PartyAPI.inParty(player)) {
    for (    Player member : PartyAPI.getOnlineMembers(player)) {
      party.add(member.getName());
    }
  }
  return party;
}","@Override public Set<String> getPlayers(Player player){
  Set<String> party=new HashSet<String>();
  if (DependencyUtils.hasMcMMO() && PartyAPI.inParty(player)) {
    List<Player> members=PartyAPI.getOnlineMembers(player);
    if (members != null) {
      for (      Player member : members) {
        party.add(member.getName());
      }
    }
  }
  return party;
}"
44365,"public Reward(Location location){
  this.location=location;
  gain=1.0;
  party=new HashSet<String>();
  integerCurrency=false;
  name=CustomType.UNKNOWN.getName();
  coin=0.0;
  itemDrops=new ArrayList<ItemStack>();
  entityDrops=new ArrayList<EntityType>();
  message=new DefaultMessage();
}","public Reward(Location location){
  this.location=location;
  gain=1.0;
  party=new HashSet<String>();
  integerCurrency=false;
  name=""String_Node_Str"";
  coin=0.0;
  itemDrops=new ArrayList<ItemStack>();
  entityDrops=new ArrayList<EntityType>();
  message=new DefaultMessage();
}"
44366,"public static Set<Rule> parseConfig(ConfigurationSection config){
  Set<Rule> rules=new HashSet<Rule>();
  if (config != null) {
    SpawnerDistanceRule rule=new SpawnerDistanceRule();
    rule.setCanCampSpawner(config.getBoolean(""String_Node_Str"",false));
    rule.setClearDropsEnabled(config.getBoolean(""String_Node_Str"",true));
    rule.setCampByDistance(config.getBoolean(""String_Node_Str"",true));
    rule.setCampRadius(config.getInt(""String_Node_Str"",16));
    rule.setMessage(new DefaultMessage(config.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    rules.add(rule);
  }
  return rules;
}","public static Set<Rule> parseConfig(ConfigurationSection config){
  Set<Rule> rules=new HashSet<Rule>();
  if (config != null) {
    SpawnerDistanceRule rule=new SpawnerDistanceRule();
    rule.setCanCampSpawner(config.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(config.getBoolean(""String_Node_Str"",true));
    rule.setCampByDistance(config.getBoolean(""String_Node_Str"",true));
    rule.setCampRadius(config.getInt(""String_Node_Str"",16));
    rule.setMessage(new DefaultMessage(config.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    rules.add(rule);
  }
  return rules;
}"
44367,"public static Set<Rule> parseConfig(ConfigurationSection config){
  Set<Rule> rules=new HashSet<Rule>();
  if (config != null) {
    SpawnerMobRule rule=new SpawnerMobRule();
    rule.setCanCampSpawner(config.getBoolean(""String_Node_Str"",false));
    rule.setClearDropsEnabled(config.getBoolean(""String_Node_Str"",true));
    rule.setCampByEntity(config.getBoolean(""String_Node_Str"",false));
    rule.setMessage(new DefaultMessage(config.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    rules.add(rule);
  }
  return rules;
}","public static Set<Rule> parseConfig(ConfigurationSection config){
  Set<Rule> rules=new HashSet<Rule>();
  if (config != null) {
    SpawnerMobRule rule=new SpawnerMobRule();
    rule.setCanCampSpawner(config.getBoolean(""String_Node_Str"",false));
    rule.setClearDrops(config.getBoolean(""String_Node_Str"",true));
    rule.setCampByEntity(config.getBoolean(""String_Node_Str"",false));
    rule.setMessage(new DefaultMessage(config.getString(""String_Node_Str"",NO_CAMP_MESSAGE)));
    rules.add(rule);
  }
  return rules;
}"
44368,"public BasicMessage(MessageManager messageManager){
  this.messageManager=messageManager;
}","public BasicMessage(MessageManager messageManager){
  this.messageManager=messageManager;
  parameters=new HashMap<MessageToken,String>();
}"
44369,"@Override public void send(){
  for (  MessageToken token : parameters.keySet()) {
    if (token == MessageToken.AMOUNT_TOKEN) {
      template.replaceAll(token.toString(),parameters.get(token).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (token == MessageToken.ITEM_TOKEN) {
      template.replaceAll(token.toString(),toCamelCase(parameters.get(token)));
    }
 else {
      template.replaceAll(token.toString(),parameters.get(token));
    }
  }
  if (messageManager.shouldOutputMessages && parameters.containsKey(MessageToken.PLAYER_TOKEN)) {
    Bukkit.getPlayer(parameters.get(MessageToken.PLAYER_TOKEN)).sendMessage(template);
  }
  if (messageManager.shouldLogCoinRewards && parameters.containsKey(MessageToken.AMOUNT_TOKEN)) {
    ecoCreature.getECLogger().info(removeColorCodes(template));
  }
}","@Override public void send(){
  for (  MessageToken token : parameters.keySet()) {
    if (token == MessageToken.AMOUNT_TOKEN) {
      template=template.replaceAll(token.toString(),parameters.get(token).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (token == MessageToken.ITEM_TOKEN) {
      template=template.replaceAll(token.toString(),toCamelCase(parameters.get(token)));
    }
 else {
      template=template.replaceAll(token.toString(),parameters.get(token));
    }
  }
  if (messageManager.shouldOutputMessages && parameters.containsKey(MessageToken.PLAYER_TOKEN)) {
    Bukkit.getPlayer(parameters.get(MessageToken.PLAYER_TOKEN)).sendMessage(template);
  }
  if (messageManager.shouldLogCoinRewards && parameters.containsKey(MessageToken.AMOUNT_TOKEN)) {
    ecoCreature.getECLogger().info(removeColorCodes(template));
  }
}"
44370,"public String getWeaponName(){
  return usedTamedCreature() ? RewardType.fromEntity(getTamedCreature()).getName() : getWeapon().name();
}","public String getWeaponName(){
  return usedTamedCreature() ? RewardType.fromEntity(getTamedCreature()).getName() : EntityUtils.getItemNameInHand(getPlayer());
}"
44371,"public String getWeaponName(){
  return getWeapon().name();
}","public String getWeaponName(){
  return EntityUtils.getItemNameInHand(getKiller());
}"
44372,"public void registerDeathPenalty(Player player){
  if (!hasDeathPenalty || !DependencyUtils.hasPermission(player,""String_Node_Str"") || !DependencyUtils.hasEconomy()) {
    return;
  }
  double amount=isPercentPenalty ? DependencyUtils.getEconomy().getBalance(player.getName()) * (penaltyAmount / 100.0D) : penaltyAmount;
  if (amount > 0.0D) {
    DependencyUtils.getEconomy().withdrawPlayer(player.getName(),amount);
    messageManager.deathPenaltyMessage(messageManager.deathPenaltyMessage,player,amount);
  }
}","public void registerDeathPenalty(Player player){
  if (!hasDeathPenalty || !DependencyUtils.hasPermission(player,""String_Node_Str"") || !DependencyUtils.hasEconomy()) {
    return;
  }
  double amount=isPercentPenalty ? DependencyUtils.getEconomy().getBalance(player.getName()) * (penaltyAmount / 100.0D) : penaltyAmount;
  if (isIntegerCurrency) {
    amount=Math.round(amount);
  }
  if (amount > 0.0D) {
    DependencyUtils.getEconomy().withdrawPlayer(player.getName(),amount);
    messageManager.deathPenaltyMessage(messageManager.deathPenaltyMessage,player,amount);
  }
}"
44373,"public void registerSpawnerBreak(Player player,Block block){
  if (player == null || block == null) {
    return;
  }
  if (!block.getType().equals(Material.MOB_SPAWNER)) {
    return;
  }
  if (DependencyUtils.hasPermission(player,""String_Node_Str"") && rewards.containsKey(RewardType.SPAWNER)) {
    if (hasReward(RewardType.SPAWNER)) {
      Reward reward=getRewardForType(RewardType.SPAWNER);
      registerReward(player,reward,Material.getMaterial(player.getItemInHand().getTypeId()).name());
      for (      ItemStack itemStack : reward.getDropAmounts(isFixedDrops)) {
        block.getWorld().dropItemNaturally(block.getLocation(),itemStack);
      }
    }
  }
}","public void registerSpawnerBreak(Player player,Block block){
  if (player == null || block == null) {
    return;
  }
  if (!block.getType().equals(Material.MOB_SPAWNER)) {
    return;
  }
  if (DependencyUtils.hasPermission(player,""String_Node_Str"") && rewards.containsKey(RewardType.SPAWNER)) {
    if (hasReward(RewardType.SPAWNER)) {
      Reward reward=getRewardForType(RewardType.SPAWNER);
      registerReward(player,reward,EntityUtils.getItemNameInHand(player));
      for (      ItemStack itemStack : reward.getDropAmounts(isFixedDrops)) {
        block.getWorld().dropItemNaturally(block.getLocation(),itemStack);
      }
    }
  }
}"
44374,"public void registerCreatureDeath(CreatureKilledByPlayerEvent event){
  if (shouldClearDefaultDrops) {
    event.getDrops().clear();
    event.setDroppedExp(0);
  }
  if (event.getKiller().getItemInHand().getType().equals(Material.BOW) && !hasBowRewards) {
    messageManager.basicMessage(messageManager.noBowRewardMessage,event.getKiller());
    return;
  }
  if (EntityUtils.isUnderSeaLevel(event.getKiller()) && !canHuntUnderSeaLevel) {
    messageManager.basicMessage(messageManager.noBowRewardMessage,event.getKiller());
    return;
  }
  if (event.usedTamedCreature() && !isWolverineMode) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (EntityUtils.isOwner(event.getKiller(),event.getKilledCreature())) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (DependencyUtils.hasMobArena() && DependencyUtils.getMobArenaHandler().isPlayerInArena(event.getKiller()) && !hasMobArenaRewards) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (!hasCreativeModeRewards && event.getKiller().getGameMode() == GameMode.CREATIVE) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (!canCampSpawner && (campByDistance || campByEntity)) {
    if ((campByEntity && isSpawnerMob(event.getKilledCreature())) || (campByDistance && (EntityUtils.isNearSpawner(event.getKiller(),campRadius) || EntityUtils.isNearSpawner(event.getKilledCreature(),campRadius)))) {
      if (shouldClearCampDrops) {
        event.getDrops().clear();
        event.setDroppedExp(0);
      }
      messageManager.spawnerMessage(messageManager.noCampMessage,event.getKiller());
      ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
      return;
    }
  }
  if (!DependencyUtils.hasPermission(event.getKiller(),""String_Node_Str"" + RewardType.fromEntity(event.getKilledCreature()).getName())) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ RewardType.fromEntity(event.getKilledCreature()).getName());
    return;
  }
  if (hasReward(event.getKilledCreature())) {
    Reward reward=getRewardForEntity(event.getKilledCreature());
    if (reward.hasExp()) {
      event.setDroppedExp(reward.getExp().getAmount());
    }
    registerReward(event.getKiller(),reward,event.getWeaponName());
    try {
      List<ItemStack> rewardDrops=reward.getDropAmounts(isFixedDrops);
      if (!rewardDrops.isEmpty()) {
        if (!event.getDrops().isEmpty() && shouldOverrideDrops) {
          event.getDrops().clear();
        }
        event.getDrops().addAll(rewardDrops);
      }
    }
 catch (    IllegalArgumentException e) {
      ECLogger.getInstance().warning(e.getMessage());
    }
  }
}","public void registerCreatureDeath(CreatureKilledByPlayerEvent event){
  if (shouldClearDefaultDrops) {
    event.getDrops().clear();
    event.setDroppedExp(0);
  }
  if (EntityUtils.getItemTypeInHand(event.getKiller()).equals(Material.BOW) && !hasBowRewards) {
    messageManager.basicMessage(messageManager.noBowRewardMessage,event.getKiller());
    return;
  }
  if (EntityUtils.isUnderSeaLevel(event.getKiller()) && !canHuntUnderSeaLevel) {
    messageManager.basicMessage(messageManager.noBowRewardMessage,event.getKiller());
    return;
  }
  if (event.usedTamedCreature() && !isWolverineMode) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (EntityUtils.isOwner(event.getKiller(),event.getKilledCreature())) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (DependencyUtils.hasMobArena() && DependencyUtils.getMobArenaHandler().isPlayerInArena(event.getKiller()) && !hasMobArenaRewards) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (!hasCreativeModeRewards && event.getKiller().getGameMode() == GameMode.CREATIVE) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (!canCampSpawner && (campByDistance || campByEntity)) {
    if ((campByEntity && isSpawnerMob(event.getKilledCreature())) || (campByDistance && (EntityUtils.isNearSpawner(event.getKiller(),campRadius) || EntityUtils.isNearSpawner(event.getKilledCreature(),campRadius)))) {
      if (shouldClearCampDrops) {
        event.getDrops().clear();
        event.setDroppedExp(0);
      }
      messageManager.spawnerMessage(messageManager.noCampMessage,event.getKiller());
      ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
      return;
    }
  }
  if (!DependencyUtils.hasPermission(event.getKiller(),""String_Node_Str"" + RewardType.fromEntity(event.getKilledCreature()).getName())) {
    ECLogger.getInstance().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ RewardType.fromEntity(event.getKilledCreature()).getName());
    return;
  }
  if (hasReward(event.getKilledCreature())) {
    Reward reward=getRewardForEntity(event.getKilledCreature());
    if (reward.hasExp()) {
      event.setDroppedExp(reward.getExp().getAmount());
    }
    registerReward(event.getKiller(),reward,event.getWeaponName());
    try {
      List<ItemStack> rewardDrops=reward.getDropAmounts(isFixedDrops);
      if (!rewardDrops.isEmpty()) {
        if (!event.getDrops().isEmpty() && shouldOverrideDrops) {
          event.getDrops().clear();
        }
        event.getDrops().addAll(rewardDrops);
      }
    }
 catch (    IllegalArgumentException e) {
      ECLogger.getInstance().warning(e.getMessage());
    }
  }
}"
44375,"public void registerPVPReward(PlayerKilledByPlayerEvent event){
  if (!hasPVPReward || !DependencyUtils.hasPermission(event.getKiller(),""String_Node_Str"")) {
    return;
  }
  double amount=0.0D;
  if (hasReward(RewardType.PLAYER)) {
    Reward reward=getRewardForType(RewardType.PLAYER);
    amount=reward.getCoin().getAmount() * getGainMultiplier(event.getKiller());
    if (reward.hasDrops() && shouldOverrideDrops) {
      event.getDrops().clear();
    }
    event.getDrops().addAll(reward.getDropAmounts(isFixedDrops));
    if (reward.hasExp()) {
      event.setDroppedExp(reward.getExp().getAmount());
    }
  }
 else   if (DependencyUtils.hasEconomy()) {
    amount=isPercentPvpReward ? DependencyUtils.getEconomy().getBalance(event.getVictim().getName()) * (pvpRewardAmount / 100.0D) : pvpRewardAmount;
  }
  if (amount > 0.0D && DependencyUtils.hasEconomy()) {
    amount=Math.min(amount,DependencyUtils.getEconomy().getBalance(event.getVictim().getName()));
    DependencyUtils.getEconomy().withdrawPlayer(event.getVictim().getName(),amount);
    messageManager.deathPenaltyMessage(messageManager.deathPenaltyMessage,event.getVictim(),amount);
    DependencyUtils.getEconomy().depositPlayer(event.getKiller().getName(),amount);
    messageManager.rewardMessage(messageManager.pvpRewardMessage,event.getKiller(),amount,event.getVictim().getName(),event.getWeaponName());
  }
}","public void registerPVPReward(PlayerKilledByPlayerEvent event){
  if (!hasPVPReward || !DependencyUtils.hasPermission(event.getKiller(),""String_Node_Str"")) {
    return;
  }
  double amount=0.0D;
  if (hasReward(RewardType.PLAYER)) {
    Reward reward=getRewardForType(RewardType.PLAYER);
    amount=reward.getCoin().getAmount() * getGainMultiplier(event.getKiller());
    if (reward.hasDrops() && shouldOverrideDrops) {
      event.getDrops().clear();
    }
    event.getDrops().addAll(reward.getDropAmounts(isFixedDrops));
    if (reward.hasExp()) {
      event.setDroppedExp(reward.getExp().getAmount());
    }
  }
 else   if (DependencyUtils.hasEconomy()) {
    amount=isPercentPvpReward ? DependencyUtils.getEconomy().getBalance(event.getVictim().getName()) * (pvpRewardAmount / 100.0D) : pvpRewardAmount;
  }
  if (isIntegerCurrency) {
    amount=Math.round(amount);
  }
  if (amount > 0.0D && DependencyUtils.hasEconomy()) {
    amount=Math.min(amount,DependencyUtils.getEconomy().getBalance(event.getVictim().getName()));
    DependencyUtils.getEconomy().withdrawPlayer(event.getVictim().getName(),amount);
    messageManager.deathPenaltyMessage(messageManager.deathPenaltyMessage,event.getVictim(),amount);
    DependencyUtils.getEconomy().depositPlayer(event.getKiller().getName(),amount);
    messageManager.rewardMessage(messageManager.pvpRewardMessage,event.getKiller(),amount,event.getVictim().getName(),event.getWeaponName());
  }
}"
44376,"private void registerReward(Player player,Reward reward,String weaponName){
  double amount=reward.hasCoin() ? reward.getCoin().getAmount() * getGainMultiplier(player) : 0.0;
  List<Player> party=new ArrayList<Player>();
  if (isHeroesPartyShare && DependencyUtils.hasHeroes() && DependencyUtils.getHeroes().getCharacterManager().getHero(player).hasParty()) {
    for (    Hero hero : DependencyUtils.getHeroes().getCharacterManager().getHero(player).getParty().getMembers()) {
      party.add(hero.getPlayer());
    }
    amount/=(double)party.size();
  }
 else   if (isMcMMOPartyShare && DependencyUtils.hasMcMMO() && PartyAPI.inParty(player)) {
    party.addAll(PartyAPI.getOnlineMembers(player));
    amount/=(double)party.size();
  }
 else   if (isMobArenaShare && DependencyUtils.hasMobArena() && DependencyUtils.getMobArenaHandler().isPlayerInArena(player)) {
    party.addAll(DependencyUtils.getMobArenaHandler().getArenaWithPlayer(player).getAllPlayers());
    amount/=(double)party.size();
  }
 else {
    party.add(player);
  }
  for (  Player member : party) {
    if (amount > 0.0D && DependencyUtils.hasEconomy()) {
      DependencyUtils.getEconomy().depositPlayer(member.getName(),amount);
      messageManager.rewardMessage(reward.getRewardMessage(),member,amount,reward.getName(),weaponName);
    }
 else     if (amount < 0.0D && DependencyUtils.hasEconomy()) {
      DependencyUtils.getEconomy().withdrawPlayer(member.getName(),Math.abs(amount));
      messageManager.penaltyMessage(reward.getPenaltyMessage(),member,amount,reward.getName(),weaponName);
    }
 else {
      messageManager.noRewardMessage(reward.getNoRewardMessage(),member,reward.getName(),weaponName);
    }
  }
  metricsManager.addCount(reward.getType());
}","private void registerReward(Player player,Reward reward,String weaponName){
  double amount=reward.hasCoin() ? reward.getCoin().getAmount() * getGainMultiplier(player) : 0.0;
  List<Player> party=new ArrayList<Player>();
  if (isHeroesPartyShare && DependencyUtils.hasHeroes() && DependencyUtils.getHeroes().getCharacterManager().getHero(player).hasParty()) {
    for (    Hero hero : DependencyUtils.getHeroes().getCharacterManager().getHero(player).getParty().getMembers()) {
      party.add(hero.getPlayer());
    }
    amount/=(double)party.size();
  }
 else   if (isMcMMOPartyShare && DependencyUtils.hasMcMMO() && PartyAPI.inParty(player)) {
    party.addAll(PartyAPI.getOnlineMembers(player));
    amount/=(double)party.size();
  }
 else   if (isMobArenaShare && DependencyUtils.hasMobArena() && DependencyUtils.getMobArenaHandler().isPlayerInArena(player)) {
    party.addAll(DependencyUtils.getMobArenaHandler().getArenaWithPlayer(player).getAllPlayers());
    amount/=(double)party.size();
  }
 else {
    party.add(player);
  }
  if (isIntegerCurrency) {
    amount=Math.round(amount);
  }
  for (  Player member : party) {
    if (amount > 0.0D && DependencyUtils.hasEconomy()) {
      DependencyUtils.getEconomy().depositPlayer(member.getName(),amount);
      messageManager.rewardMessage(reward.getRewardMessage(),member,amount,reward.getName(),weaponName);
    }
 else     if (amount < 0.0D && DependencyUtils.hasEconomy()) {
      DependencyUtils.getEconomy().withdrawPlayer(member.getName(),Math.abs(amount));
      messageManager.penaltyMessage(reward.getPenaltyMessage(),member,amount,reward.getName(),weaponName);
    }
 else {
      messageManager.noRewardMessage(reward.getNoRewardMessage(),member,reward.getName(),weaponName);
    }
  }
  metricsManager.addCount(reward.getType());
}"
44377,"private void registerEvents(){
  Bukkit.getPluginManager().registerEvents(new BlockEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new DeathEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new KillEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new SpawnEventListener(this),this);
  if (deathTpPlusPlugin != null) {
    Bukkit.getPluginManager().registerEvents(new StreakEventListener(this),this);
  }
}","private void registerEvents(){
  Bukkit.getPluginManager().registerEvents(new BlockEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new DeathEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new KillEventListener(this),this);
  Bukkit.getPluginManager().registerEvents(new SpawnEventListener(this),this);
  if (hasDeathTpPlus()) {
    Bukkit.getPluginManager().registerEvents(new StreakEventListener(this),this);
  }
  if (hasHeroes()) {
    Bukkit.getPluginManager().registerEvents(new HeroMasteredListener(this),this);
  }
}"
44378,"private void initPlugins(){
  deathTpPlusPlugin=(DeathTpPlus)getPlugin(""String_Node_Str"",""String_Node_Str"");
  heroesPlugin=(Heroes)getPlugin(""String_Node_Str"",""String_Node_Str"");
  worldGuardPlugin=(WorldGuardPlugin)getPlugin(""String_Node_Str"",""String_Node_Str"");
  residencePlugin=(Residence)getPlugin(""String_Node_Str"",""String_Node_Str"");
  townyPlugin=(Towny)getPlugin(""String_Node_Str"",""String_Node_Str"");
  factionsPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  mcMMOPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  Plugin regiosPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  if (regiosPlugin != null) {
    regiosAPI=new RegiosAPI();
  }
  Plugin mobArenaPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  if (mobArenaPlugin != null) {
    mobArenaHandler=new MobArenaHandler();
  }
}","private void initPlugins(){
  deathTpPlusPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  heroesPlugin=(Heroes)getPlugin(""String_Node_Str"",""String_Node_Str"");
  worldGuardPlugin=(WorldGuardPlugin)getPlugin(""String_Node_Str"",""String_Node_Str"");
  residencePlugin=(Residence)getPlugin(""String_Node_Str"",""String_Node_Str"");
  townyPlugin=(Towny)getPlugin(""String_Node_Str"",""String_Node_Str"");
  factionsPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  mcMMOPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  Plugin regiosPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  if (regiosPlugin != null) {
    regiosAPI=new RegiosAPI();
  }
  Plugin mobArenaPlugin=getPlugin(""String_Node_Str"",""String_Node_Str"");
  if (mobArenaPlugin != null) {
    mobArenaHandler=new MobArenaHandler();
  }
}"
44379,"private static ecoReward mergeReward(ecoReward from,ecoReward to){
  ecoReward reward=new ecoReward();
  reward.setRewardName(to.getRewardName());
  reward.setRewardType(to.getRewardType());
  reward.setDrops(!from.getDrops().isEmpty() ? from.getDrops() : to.getDrops());
  reward.setCoinMin(from.getCoinMin() != null ? from.getCoinMin() : to.getCoinMin());
  reward.setCoinMax(from.getCoinMax() != null ? from.getCoinMax() : to.getCoinMax());
  reward.setCoinPercentage(from.getCoinPercentage() != null ? from.getCoinPercentage() : to.getCoinPercentage());
  reward.setExpMin(from.getExpMin() != null ? from.getExpMin() : to.getExpMin());
  reward.setExpMax(from.getExpMax() != null ? from.getExpMax() : to.getExpMax());
  reward.setExpPercentage(from.getExpPercentage() != null ? from.getExpPercentage() : to.getExpPercentage());
  reward.setNoRewardMessage(!from.getNoRewardMessage().equals(to.getNoRewardMessage()) ? from.getNoRewardMessage() : to.getNoRewardMessage());
  reward.setRewardMessage(!from.getRewardMessage().equals(to.getRewardMessage()) ? from.getRewardMessage() : to.getRewardMessage());
  reward.setPenaltyMessage(!from.getPenaltyMessage().equals(to.getPenaltyMessage()) ? from.getPenaltyMessage() : to.getPenaltyMessage());
  return reward;
}","private static ecoReward mergeReward(ecoReward from,ecoReward to){
  ecoReward reward=new ecoReward();
  reward.setRewardName(to.getRewardName());
  reward.setRewardType(to.getRewardType());
  reward.setDrops(!from.getDrops().isEmpty() ? from.getDrops() : to.getDrops());
  reward.setCoinMin(from.getCoinMin() > 0.0 ? from.getCoinMin() : to.getCoinMin());
  reward.setCoinMax(from.getCoinMax() > 0.0 ? from.getCoinMax() : to.getCoinMax());
  reward.setCoinPercentage(from.getCoinPercentage() > 0.0 ? from.getCoinPercentage() : to.getCoinPercentage());
  reward.setExpMin(from.getExpMin() != null ? from.getExpMin() : to.getExpMin());
  reward.setExpMax(from.getExpMax() != null ? from.getExpMax() : to.getExpMax());
  reward.setExpPercentage(from.getExpPercentage() != null ? from.getExpPercentage() : to.getExpPercentage());
  reward.setNoRewardMessage(!from.getNoRewardMessage().equals(to.getNoRewardMessage()) ? from.getNoRewardMessage() : to.getNoRewardMessage());
  reward.setRewardMessage(!from.getRewardMessage().equals(to.getRewardMessage()) ? from.getRewardMessage() : to.getRewardMessage());
  reward.setPenaltyMessage(!from.getPenaltyMessage().equals(to.getPenaltyMessage()) ? from.getPenaltyMessage() : to.getPenaltyMessage());
  return reward;
}"
44380,"private double computeReward(Player player,ecoReward reward){
  double amount=reward.getRewardAmount();
  try {
    if (ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()) != null) {
      String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
      if (hasPermission(player,""String_Node_Str"") && groupMultiplier.containsKey(group)) {
        amount*=groupMultiplier.get(group);
      }
    }
  }
 catch (  UnsupportedOperationException e) {
    if (warnGroupMultiplierSupport) {
      ecoCreature.getEcoLogger().warning(e.getMessage());
      warnGroupMultiplierSupport=false;
    }
  }
  if (hasPermission(player,""String_Node_Str"") && timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
    amount*=timeMultiplier.get(ecoEntityUtil.getTimePeriod(player));
  }
  if (hasPermission(player,""String_Node_Str"") && envMultiplier.containsKey(player.getWorld().getEnvironment())) {
    amount*=envMultiplier.get(player.getWorld().getEnvironment());
  }
  if (ecoCreature.worldGuardPlugin != null) {
    Map<String,ProtectedRegion> regions=ecoCreature.worldGuardPlugin.getRegionManager(player.getWorld()).getRegions();
    for (    String regionName : regions.keySet()) {
      if (hasPermission(player,""String_Node_Str"") && worldGuardRegionMultiplier.containsKey(regionName)) {
        amount*=worldGuardRegionMultiplier.get(regionName);
      }
    }
  }
  if (hasPermission(player,""String_Node_Str"") && ecoCreature.heroesPlugin != null && ecoCreature.heroesPlugin.getCharacterManager().getHero(player).hasParty()) {
    amount*=heroesPartyMultiplier;
  }
  if (hasMobArenaRewards && hasPermission(player,""String_Node_Str"") && ecoCreature.mobArenaHandler != null && ecoCreature.mobArenaHandler.isPlayerInArena(player)) {
    amount*=mobArenaMultiplier;
  }
  return isIntegerCurrency ? (double)Math.round(amount) : amount;
}","private double computeReward(Player player,ecoReward reward){
  double amount=reward.getRewardAmount();
  try {
    if (ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()) != null) {
      String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
      if (hasPermission(player,""String_Node_Str"") && groupMultiplier.containsKey(group)) {
        amount*=groupMultiplier.get(group);
      }
    }
  }
 catch (  UnsupportedOperationException e) {
    if (warnGroupMultiplierSupport) {
      ecoCreature.getEcoLogger().warning(e.getMessage());
      warnGroupMultiplierSupport=false;
    }
  }
  if (hasPermission(player,""String_Node_Str"") && timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
    amount*=timeMultiplier.get(ecoEntityUtil.getTimePeriod(player));
  }
  if (hasPermission(player,""String_Node_Str"") && envMultiplier.containsKey(player.getWorld().getEnvironment())) {
    amount*=envMultiplier.get(player.getWorld().getEnvironment());
  }
  if (ecoCreature.worldGuardPlugin != null) {
    Iterator<ProtectedRegion> regionSet=ecoCreature.worldGuardPlugin.getRegionManager(player.getWorld()).getApplicableRegions(player.getLocation()).iterator();
    while (regionSet.hasNext()) {
      String regionName=regionSet.next().getId();
      if (hasPermission(player,""String_Node_Str"") && worldGuardRegionMultiplier.containsKey(regionName)) {
        amount*=worldGuardRegionMultiplier.get(regionName);
      }
    }
  }
  if (hasPermission(player,""String_Node_Str"") && ecoCreature.heroesPlugin != null && ecoCreature.heroesPlugin.getCharacterManager().getHero(player).hasParty()) {
    amount*=heroesPartyMultiplier;
  }
  if (hasMobArenaRewards && hasPermission(player,""String_Node_Str"") && ecoCreature.mobArenaHandler != null && ecoCreature.mobArenaHandler.isPlayerInArena(player)) {
    amount*=mobArenaMultiplier;
  }
  return isIntegerCurrency ? (double)Math.round(amount) : amount;
}"
44381,"public static ecoMessageManager getMessageManager(Entity entity){
  ecoMessageManager messageManager=messageManagers.get(entity.getWorld().getName());
  if (messageManager == null) {
    messageManager=messageManagers.get(ecoConfigManager.DEFAULT_WORLD);
  }
  return messageManager;
}","public ecoMessageManager getMessageManager(World world){
  ecoMessageManager messageManager=globalMessageManager.get(world.getName());
  if (messageManager == null) {
    messageManager=globalMessageManager.get(ecoConfigManager.DEFAULT_WORLD);
  }
  return messageManager;
}"
44382,"public static ecoRewardManager getRewardManager(Entity entity){
  ecoRewardManager rewardManager=rewardManagers.get(entity.getWorld().getName());
  if (rewardManager == null) {
    rewardManager=rewardManagers.get(ecoConfigManager.DEFAULT_WORLD);
  }
  return rewardManager;
}","public ecoRewardManager getRewardManager(World world){
  ecoRewardManager rewardManager=globalRewardManager.get(world.getName());
  if (rewardManager == null) {
    rewardManager=globalRewardManager.get(ecoConfigManager.DEFAULT_WORLD);
  }
  return rewardManager;
}"
44383,"public void onEnable(){
  Locale.setDefault(Locale.US);
  logger.setName(this.getDescription().getName());
  setupVault();
  setupMetrics();
  setupDeathTpPlus();
  setupMobArenaHandler();
  setupHeroes();
  setupMcMMO();
  setupWorldGuard();
  messageManagers=new HashMap<String,ecoMessageManager>();
  rewardManagers=new HashMap<String,ecoRewardManager>();
  configManager=new ecoConfigManager(this);
  registerCommands();
  registerEvents();
  Bukkit.getScheduler().scheduleAsyncRepeatingTask(this,new ecoUpdate(this,DEV_BUKKIT_URL),CHECK_DELAY,CHECK_PERIOD);
  logger.info(getDescription().getVersion() + ""String_Node_Str"");
}","public void onEnable(){
  Locale.setDefault(Locale.US);
  logger.setName(this.getDescription().getName());
  setupVault();
  setupMetrics();
  setupDeathTpPlus();
  setupMobArenaHandler();
  setupHeroes();
  setupMcMMO();
  setupWorldGuard();
  globalMessageManager=new HashMap<String,ecoMessageManager>();
  globalRewardManager=new HashMap<String,ecoRewardManager>();
  configManager=new ecoConfigManager(this);
  spawnerMobs=new HashSet<Integer>();
  registerCommands();
  registerEvents();
  Bukkit.getScheduler().scheduleAsyncRepeatingTask(this,new ecoUpdate(this,DEV_BUKKIT_URL),CHECK_DELAY,CHECK_PERIOD);
  logger.info(getDescription().getVersion() + ""String_Node_Str"");
}"
44384,"private void registerEvents(){
  Bukkit.getPluginManager().registerEvents(new ecoBlockListener(),this);
  Bukkit.getPluginManager().registerEvents(new ecoEntityListener(),this);
  Bukkit.getPluginManager().registerEvents(new ecoDeathListener(),this);
  if (deathTpPlusPlugin != null) {
    Bukkit.getPluginManager().registerEvents(new ecoStreakListener(),this);
  }
}","private void registerEvents(){
  Bukkit.getPluginManager().registerEvents(new ecoBlockListener(this),this);
  Bukkit.getPluginManager().registerEvents(new ecoEntityListener(this),this);
  Bukkit.getPluginManager().registerEvents(new ecoDeathListener(this),this);
  if (deathTpPlusPlugin != null) {
    Bukkit.getPluginManager().registerEvents(new ecoStreakListener(this),this);
  }
}"
44385,"@EventHandler(priority=EventPriority.MONITOR) public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
  ecoCreature.getRewardManager(event.getPlayer()).registerSpawnerBreak(event.getPlayer(),event.getBlock());
}","@EventHandler(priority=EventPriority.MONITOR) public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
  plugin.getRewardManager(event.getPlayer().getWorld()).registerSpawnerBreak(event.getPlayer(),event.getBlock());
}"
44386,"public ecoBlockListener(){
}","public ecoBlockListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44387,"@EventHandler(priority=EventPriority.MONITOR) public void onCreatureKilledByPlayer(CreatureKilledByPlayerEvent event){
  ecoCreature.getRewardManager(event.getPlayer()).registerCreatureDeath(event);
}","@EventHandler(priority=EventPriority.MONITOR) public void onCreatureKilledByPlayer(CreatureKilledByPlayerEvent event){
  plugin.getRewardManager(event.getPlayer().getWorld()).registerCreatureDeath(event);
}"
44388,"@EventHandler(priority=EventPriority.MONITOR) public void onPlayerKilledByPlayer(PlayerKilledByPlayerEvent event){
  ecoCreature.getRewardManager(event.getKiller()).registerPVPReward(event);
}","@EventHandler(priority=EventPriority.MONITOR) public void onPlayerKilledByPlayer(PlayerKilledByPlayerEvent event){
  plugin.getRewardManager(event.getKiller().getWorld()).registerPVPReward(event);
}"
44389,"public ecoDeathListener(){
}","public ecoDeathListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44390,"@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(EntityDeathEvent event){
  Player killer=ecoEntityUtil.getKillerFromDeathEvent(event);
  if (killer == null) {
    if (ecoCreature.getRewardManager(event.getEntity()).noFarm) {
      ecoCreature.getRewardManager(event.getEntity()).handleNoFarm(event);
    }
    return;
  }
  Bukkit.getPluginManager().callEvent(new CreatureKilledByPlayerEvent(event));
}","@EventHandler(priority=EventPriority.NORMAL) public void onEntityDeath(EntityDeathEvent event){
  if (!(event instanceof PlayerDeathEvent)) {
    Player killer=ecoEntityUtil.getKillerFromDeathEvent(event);
    if (killer != null) {
      Bukkit.getPluginManager().callEvent(new CreatureKilledByPlayerEvent(event));
    }
 else {
      plugin.getRewardManager(event.getEntity().getWorld()).handleNoFarm(event);
    }
  }
}"
44391,"@EventHandler(priority=EventPriority.NORMAL) public void onPlayerDeath(PlayerDeathEvent event){
  if (ecoEntityUtil.isPVPDeath(event)) {
    Bukkit.getPluginManager().callEvent(new PlayerKilledByPlayerEvent(event));
  }
 else {
    ecoCreature.getRewardManager(event.getEntity()).registerDeathPenalty((Player)event.getEntity());
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerDeath(PlayerDeathEvent event){
  if (ecoEntityUtil.isPVPDeath(event)) {
    Bukkit.getPluginManager().callEvent(new PlayerKilledByPlayerEvent(event));
  }
 else {
    plugin.getRewardManager(event.getEntity().getWorld()).registerDeathPenalty(event.getEntity());
  }
}"
44392,"@EventHandler(priority=EventPriority.MONITOR) public void onCreatureSpawn(CreatureSpawnEvent event){
  if (event.isCancelled())   return;
  if (event.getSpawnReason() == SpawnReason.SPAWNER)   ecoEntityUtil.setSpawnerMob(event.getEntity());
}","@EventHandler(priority=EventPriority.MONITOR) public void onCreatureSpawn(CreatureSpawnEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (event.getSpawnReason() == SpawnReason.SPAWNER) {
    plugin.setSpawnerMob(event.getEntity());
  }
}"
44393,"public ecoEntityListener(){
}","public ecoEntityListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44394,"public ecoStreakListener(){
}","public ecoStreakListener(ecoCreature plugin){
  this.plugin=plugin;
}"
44395,"@EventHandler(priority=EventPriority.MONITOR) public void onDeathStreakEvent(DeathStreakEvent event){
  ecoCreature.getRewardManager(event.getPlayer()).registerDeathStreak(event.getPlayer(),event.getDeaths());
}","@EventHandler(priority=EventPriority.MONITOR) public void onDeathStreakEvent(DeathStreakEvent event){
  plugin.getRewardManager(event.getPlayer().getWorld()).registerDeathStreak(event.getPlayer(),event.getDeaths());
}"
44396,"@EventHandler(priority=EventPriority.MONITOR) public void onKillStreakEvent(KillStreakEvent event){
  ecoCreature.getRewardManager(event.getPlayer()).registerKillStreak(event.getPlayer(),event.getKills());
}","@EventHandler(priority=EventPriority.MONITOR) public void onKillStreakEvent(KillStreakEvent event){
  plugin.getRewardManager(event.getPlayer().getWorld()).registerKillStreak(event.getPlayer(),event.getKills());
}"
44397,"private void load() throws FileNotFoundException, IOException, InvalidConfigurationException {
  defaultConfig=new YamlConfiguration();
  defaultConfigFile=new File(plugin.getDataFolder(),DEFAULT_CONFIG_FILE);
  File oldConfigFile=new File(plugin.getDataFolder(),OLD_CONFIG_FILE);
  if (defaultConfigFile.exists()) {
    defaultConfig.load(defaultConfigFile);
  }
 else   if (oldConfigFile.exists()) {
    ecoCreature.getEcoLogger().info(""String_Node_Str"");
    defaultConfig=getConfig(oldConfigFile);
    if (oldConfigFile.delete()) {
      ecoCreature.getEcoLogger().info(""String_Node_Str"");
    }
  }
 else {
    defaultConfig=getConfig(defaultConfigFile);
  }
  ecoCreature.getEcoLogger().info(""String_Node_Str"");
  ecoMessageManager defaultMessageManager=loadMessageConfig(defaultConfig);
  ecoRewardManager defaultRewardManager=loadRewardConfig(defaultConfig);
  ecoCreature.messageManagers.put(DEFAULT_WORLD,defaultMessageManager);
  ecoCreature.rewardManagers.put(DEFAULT_WORLD,defaultRewardManager);
  worldConfigs=new Hashtable<String,FileConfiguration>();
  for (  World world : plugin.getServer().getWorlds()) {
    File worldConfigFile=new File(dataWorldsFolder,world.getName() + ""String_Node_Str"");
    if (worldConfigFile.exists()) {
      FileConfiguration worldConfig=getConfig(worldConfigFile);
      ecoCreature.getEcoLogger().info(""String_Node_Str"" + world.getName() + ""String_Node_Str"");
      ecoCreature.messageManagers.put(world.getName(),loadMessageConfig(worldConfig));
      ecoCreature.rewardManagers.put(world.getName(),loadRewardConfig(worldConfig));
      worldConfigs.put(world.getName(),worldConfig);
    }
 else {
      ecoCreature.messageManagers.put(world.getName(),defaultMessageManager);
      ecoCreature.rewardManagers.put(world.getName(),defaultRewardManager);
    }
  }
}","private void load() throws FileNotFoundException, IOException, InvalidConfigurationException {
  defaultConfig=new YamlConfiguration();
  defaultConfigFile=new File(plugin.getDataFolder(),DEFAULT_CONFIG_FILE);
  File oldConfigFile=new File(plugin.getDataFolder(),OLD_CONFIG_FILE);
  if (defaultConfigFile.exists()) {
    defaultConfig.load(defaultConfigFile);
  }
 else   if (oldConfigFile.exists()) {
    ecoCreature.getEcoLogger().info(""String_Node_Str"");
    defaultConfig=getConfig(oldConfigFile);
    if (oldConfigFile.delete()) {
      ecoCreature.getEcoLogger().info(""String_Node_Str"");
    }
  }
 else {
    defaultConfig=getConfig(defaultConfigFile);
  }
  ecoCreature.getEcoLogger().info(""String_Node_Str"");
  ecoMessageManager defaultMessageManager=loadMessageConfig(defaultConfig);
  ecoRewardManager defaultRewardManager=loadRewardConfig(defaultConfig);
  plugin.getGlobalMessageManager().put(DEFAULT_WORLD,defaultMessageManager);
  plugin.getGlobalRewardManager().put(DEFAULT_WORLD,defaultRewardManager);
  worldConfigs=new HashMap<String,FileConfiguration>();
  for (  World world : plugin.getServer().getWorlds()) {
    File worldConfigFile=new File(dataWorldsFolder,world.getName() + ""String_Node_Str"");
    if (worldConfigFile.exists()) {
      FileConfiguration worldConfig=getConfig(worldConfigFile);
      ecoCreature.getEcoLogger().info(""String_Node_Str"" + world.getName() + ""String_Node_Str"");
      plugin.getGlobalMessageManager().put(world.getName(),loadMessageConfig(worldConfig));
      plugin.getGlobalRewardManager().put(world.getName(),loadRewardConfig(worldConfig));
      worldConfigs.put(world.getName(),worldConfig);
    }
 else {
      plugin.getGlobalMessageManager().put(world.getName(),defaultMessageManager);
      plugin.getGlobalRewardManager().put(world.getName(),defaultRewardManager);
    }
  }
}"
44398,"public void registerCreatureDeath(CreatureKilledByPlayerEvent event){
  if (shouldClearDefaultDrops) {
    event.getDrops().clear();
    event.setDroppedExp(0);
  }
  if (event.getKiller().getItemInHand().getType().equals(Material.BOW) && !hasBowRewards) {
    plugin.getMessageManager(event.getKiller().getWorld()).sendMessage(plugin.getMessageManager(event.getKiller().getWorld()).noBowRewardMessage,event.getKiller());
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(event.getKiller()) && !canHuntUnderSeaLevel) {
    plugin.getMessageManager(event.getKiller().getWorld()).sendMessage(plugin.getMessageManager(event.getKiller().getWorld()).noBowRewardMessage,event.getKiller());
    return;
  }
 else   if (ecoEntityUtil.isOwner(event.getKiller(),event.getKilledCreature())) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
 else   if (ecoCreature.mobArenaHandler != null && ecoCreature.mobArenaHandler.isPlayerInArena(event.getKiller()) && !hasMobArenaRewards) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
 else   if (!hasCreativeModeRewards && event.getKiller().getGameMode() == GameMode.CREATIVE) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
 else   if (!canCampSpawner && (campByDistance || campByEntity)) {
    if ((campByEntity && plugin.isSpawnerMob(event.getKilledCreature())) || (campByDistance && (isNearSpawner(event.getKiller()) || isNearSpawner(event.getKilledCreature())))) {
      if (shouldClearCampDrops) {
        event.getDrops().clear();
        event.setDroppedExp(0);
      }
      plugin.getMessageManager(event.getKiller().getWorld()).sendMessage(plugin.getMessageManager(event.getKiller().getWorld()).noCampMessage,event.getKiller());
      ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
      return;
    }
  }
 else   if (!plugin.hasPermission(event.getKiller(),""String_Node_Str"" + RewardType.fromEntity(event.getKilledCreature()).getName())) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ RewardType.fromEntity(event.getKilledCreature()).getName());
    return;
  }
  ecoReward reward=getRewardFromEntity(event.getKilledCreature());
  if (reward != null) {
    Integer exp=reward.getExpAmount();
    if (exp != null) {
      event.setDroppedExp(exp);
    }
    String weaponName=event.getTamedCreature() != null ? RewardType.fromEntity(event.getTamedCreature()).getName() : Material.getMaterial(event.getKiller().getItemInHand().getTypeId()).name();
    registerReward(event.getKiller(),reward,weaponName);
    try {
      List<ItemStack> rewardDrops=reward.computeDrops();
      if (!rewardDrops.isEmpty()) {
        if (!event.getDrops().isEmpty() && shouldOverrideDrops) {
          event.getDrops().clear();
        }
        event.getDrops().addAll(rewardDrops);
      }
    }
 catch (    IllegalArgumentException e) {
      ecoCreature.getEcoLogger().warning(e.getMessage());
    }
  }
}","public void registerCreatureDeath(CreatureKilledByPlayerEvent event){
  if (shouldClearDefaultDrops) {
    event.getDrops().clear();
    event.setDroppedExp(0);
  }
  if (event.getKiller().getItemInHand().getType().equals(Material.BOW) && !hasBowRewards) {
    plugin.getMessageManager(event.getKiller().getWorld()).sendMessage(plugin.getMessageManager(event.getKiller().getWorld()).noBowRewardMessage,event.getKiller());
    return;
  }
  if (ecoEntityUtil.isUnderSeaLevel(event.getKiller()) && !canHuntUnderSeaLevel) {
    plugin.getMessageManager(event.getKiller().getWorld()).sendMessage(plugin.getMessageManager(event.getKiller().getWorld()).noBowRewardMessage,event.getKiller());
    return;
  }
  if (ecoEntityUtil.isOwner(event.getKiller(),event.getKilledCreature())) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (ecoCreature.mobArenaHandler != null && ecoCreature.mobArenaHandler.isPlayerInArena(event.getKiller()) && !hasMobArenaRewards) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (!hasCreativeModeRewards && event.getKiller().getGameMode() == GameMode.CREATIVE) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
    return;
  }
  if (!canCampSpawner && (campByDistance || campByEntity)) {
    if ((campByEntity && plugin.isSpawnerMob(event.getKilledCreature())) || (campByDistance && (isNearSpawner(event.getKiller()) || isNearSpawner(event.getKilledCreature())))) {
      if (shouldClearCampDrops) {
        event.getDrops().clear();
        event.setDroppedExp(0);
      }
      plugin.getMessageManager(event.getKiller().getWorld()).sendMessage(plugin.getMessageManager(event.getKiller().getWorld()).noCampMessage,event.getKiller());
      ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str"");
      return;
    }
  }
  if (!plugin.hasPermission(event.getKiller(),""String_Node_Str"" + RewardType.fromEntity(event.getKilledCreature()).getName())) {
    ecoCreature.getEcoLogger().debug(""String_Node_Str"" + event.getKiller().getName() + ""String_Node_Str""+ RewardType.fromEntity(event.getKilledCreature()).getName());
    return;
  }
  ecoReward reward=getRewardFromEntity(event.getKilledCreature());
  if (reward != null) {
    Integer exp=reward.getExpAmount();
    if (exp != null) {
      event.setDroppedExp(exp);
    }
    String weaponName=event.getTamedCreature() != null ? RewardType.fromEntity(event.getTamedCreature()).getName() : Material.getMaterial(event.getKiller().getItemInHand().getTypeId()).name();
    registerReward(event.getKiller(),reward,weaponName);
    try {
      List<ItemStack> rewardDrops=reward.computeDrops();
      if (!rewardDrops.isEmpty()) {
        if (!event.getDrops().isEmpty() && shouldOverrideDrops) {
          event.getDrops().clear();
        }
        event.getDrops().addAll(rewardDrops);
      }
    }
 catch (    IllegalArgumentException e) {
      ecoCreature.getEcoLogger().warning(e.getMessage());
    }
  }
}"
44399,"@Override public int getValue(){
  return rewardTypeCount.get(RewardType.fromName(getColumnName()));
}","@Override public int getValue(){
  Integer count=rewardTypeCount.get(RewardType.fromName(getColumnName()));
  rewardTypeCount.put(RewardType.fromName(getColumnName()),Integer.valueOf(0));
  return count;
}"
44400,"public void setupGraphs(){
  Graph graph=createGraph(""String_Node_Str"");
  for (  RewardType rewardType : RewardType.values()) {
    graph.addPlotter(new Plotter(rewardType.getName()){
      @Override public int getValue(){
        return rewardTypeCount.get(RewardType.fromName(getColumnName()));
      }
    }
);
  }
}","public void setupGraphs(){
  Graph graph=createGraph(""String_Node_Str"");
  for (  RewardType rewardType : RewardType.values()) {
    graph.addPlotter(new Plotter(rewardType.getName()){
      @Override public int getValue(){
        Integer count=rewardTypeCount.get(RewardType.fromName(getColumnName()));
        rewardTypeCount.put(RewardType.fromName(getColumnName()),Integer.valueOf(0));
        return count;
      }
    }
);
  }
}"
44401,"private Double computeReward(Player player,ecoReward reward){
  Double amount=reward.getRewardAmount();
  Double groupAmount=0D;
  Double timeAmount=0D;
  Double envAmount=0D;
  if (isIntegerCurrency) {
    amount=(double)Math.round(amount);
  }
  if (ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()) != null) {
    String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
    if (hasPermission(player,""String_Node_Str"") && groupMultiplier.containsKey(group)) {
      groupAmount=amount * groupMultiplier.get(group) - amount;
    }
  }
 else   if (warnGroupMultiplierSupport) {
    ecoCreature.getEcoLogger().warning(""String_Node_Str"");
    warnGroupMultiplierSupport=false;
  }
  if (hasPermission(player,""String_Node_Str"") && timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
    timeAmount=amount * timeMultiplier.get(ecoEntityUtil.getTimePeriod(player)) - amount;
  }
  if (hasPermission(player,""String_Node_Str"") && envMultiplier.containsKey(player.getWorld().getEnvironment())) {
    envAmount=amount * envMultiplier.get(player.getWorld().getEnvironment()) - amount;
  }
  return amount + groupAmount + timeAmount+ envAmount;
}","private Double computeReward(Player player,ecoReward reward){
  Double amount=reward.getRewardAmount();
  Double groupAmount=0D;
  Double timeAmount=0D;
  Double envAmount=0D;
  if (ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()) != null) {
    String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
    if (hasPermission(player,""String_Node_Str"") && groupMultiplier.containsKey(group)) {
      groupAmount=amount * groupMultiplier.get(group) - amount;
    }
  }
 else   if (warnGroupMultiplierSupport) {
    ecoCreature.getEcoLogger().warning(""String_Node_Str"");
    warnGroupMultiplierSupport=false;
  }
  if (hasPermission(player,""String_Node_Str"") && timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
    timeAmount=amount * timeMultiplier.get(ecoEntityUtil.getTimePeriod(player)) - amount;
  }
  if (hasPermission(player,""String_Node_Str"") && envMultiplier.containsKey(player.getWorld().getEnvironment())) {
    envAmount=amount * envMultiplier.get(player.getWorld().getEnvironment()) - amount;
  }
  Double total=amount + groupAmount + timeAmount+ envAmount;
  return isIntegerCurrency ? (double)Math.round(total) : total;
}"
44402,"private Double computeReward(Player player,ecoReward reward){
  Double amount=reward.getRewardAmount();
  Double groupAmount=0D;
  Double timeAmount=0D;
  Double envAmount=0D;
  if (isIntegerCurrency) {
    amount=(double)Math.round(amount);
  }
  try {
    String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
    if (hasPermission(player,""String_Node_Str"") && groupMultiplier.containsKey(group)) {
      groupAmount=amount * groupMultiplier.get(group) - amount;
    }
    if (hasPermission(player,""String_Node_Str"") && timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
      timeAmount=amount * timeMultiplier.get(ecoEntityUtil.getTimePeriod(player)) - amount;
    }
    if (hasPermission(player,""String_Node_Str"") && envMultiplier.containsKey(player.getWorld().getEnvironment())) {
      envAmount=amount * envMultiplier.get(player.getWorld().getEnvironment()) - amount;
    }
  }
 catch (  UnsupportedOperationException exception) {
    if (warnGroupMultiplierSupport) {
      ecoCreature.getEcoLogger().warning(""String_Node_Str"");
      warnGroupMultiplierSupport=false;
    }
  }
  return amount + groupAmount + timeAmount+ envAmount;
}","private Double computeReward(Player player,ecoReward reward){
  Double amount=reward.getRewardAmount();
  Double groupAmount=0D;
  Double timeAmount=0D;
  Double envAmount=0D;
  if (isIntegerCurrency) {
    amount=(double)Math.round(amount);
  }
  if (ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()) != null) {
    String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
    if (hasPermission(player,""String_Node_Str"") && groupMultiplier.containsKey(group)) {
      groupAmount=amount * groupMultiplier.get(group) - amount;
    }
  }
 else   if (warnGroupMultiplierSupport) {
    ecoCreature.getEcoLogger().warning(""String_Node_Str"");
    warnGroupMultiplierSupport=false;
  }
  if (hasPermission(player,""String_Node_Str"") && timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
    timeAmount=amount * timeMultiplier.get(ecoEntityUtil.getTimePeriod(player)) - amount;
  }
  if (hasPermission(player,""String_Node_Str"") && envMultiplier.containsKey(player.getWorld().getEnvironment())) {
    envAmount=amount * envMultiplier.get(player.getWorld().getEnvironment()) - amount;
  }
  return amount + groupAmount + timeAmount+ envAmount;
}"
44403,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event instanceof PlayerDeathEvent) {
    if (ecoEntityUtil.isPVPDeath(event)) {
      plugin.getServer().getPluginManager().callEvent(new PlayerKilledByPlayerEvent(event));
    }
    return;
  }
  Player killer=ecoEntityUtil.getKillerFromDeathEvent(event);
  if (killer == null) {
    if (ecoCreature.getRewardManager(event.getEntity()).noFarm) {
      ecoCreature.getRewardManager(event.getEntity()).handleNoFarm(event);
    }
    return;
  }
  plugin.getServer().getPluginManager().callEvent(new CreatureKilledByPlayerEvent(event));
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (event instanceof PlayerDeathEvent) {
    if (ecoEntityUtil.isPVPDeath(event)) {
      plugin.getServer().getPluginManager().callEvent(new PlayerKilledByPlayerEvent(event));
    }
 else {
      ecoCreature.getRewardManager(event.getEntity()).registerDeathPenalty((Player)event.getEntity());
    }
    return;
  }
  Player killer=ecoEntityUtil.getKillerFromDeathEvent(event);
  if (killer == null) {
    if (ecoCreature.getRewardManager(event.getEntity()).noFarm) {
      ecoCreature.getRewardManager(event.getEntity()).handleNoFarm(event);
    }
    return;
  }
  plugin.getServer().getPluginManager().callEvent(new CreatureKilledByPlayerEvent(event));
}"
44404,"public ItemStack computeItemStack(){
  if (Math.round(Math.random() * 100.0D) < percentage) {
    int dropAmount=isFixedDrops ? maxAmount : minAmount + random.nextInt(Math.abs(maxAmount - minAmount + 1));
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == 0) {
        itemStack=new ItemStack(item,dropAmount);
      }
 else {
        MaterialData materialData=new MaterialData(item,data);
        itemStack=materialData.toItemStack(dropAmount);
      }
      for (      ecoEnchantment e : enchantments) {
        itemStack.addEnchantment(e.getEnchantment(),e.getLevel());
      }
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return null;
}","public ItemStack computeItemStack(){
  if (Math.random() * 100.0D < percentage) {
    int dropAmount=isFixedDrops ? maxAmount : minAmount + random.nextInt(Math.abs(maxAmount - minAmount + 1));
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == 0) {
        itemStack=new ItemStack(item,dropAmount);
      }
 else {
        MaterialData materialData=new MaterialData(item,data);
        itemStack=materialData.toItemStack(dropAmount);
      }
      for (      ecoEnchantment e : enchantments) {
        itemStack.addEnchantment(e.getEnchantment(),e.getLevel());
      }
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return null;
}"
44405,"private List<ecoDrop> parseDrops(String dropsString,Boolean isFixedDrops){
  List<ecoDrop> drops=new ArrayList<ecoDrop>();
  if (dropsString != null && !dropsString.isEmpty()) {
    try {
      for (      String dropString : dropsString.split(""String_Node_Str"")) {
        ecoDrop drop=new ecoDrop();
        String[] dropParts=dropString.split(""String_Node_Str"");
        String[] itemParts=dropParts[0].split(""String_Node_Str"");
        if (itemParts.length > 1) {
          for (int i=1; i < itemParts.length; i++) {
            String[] enchantParts=itemParts[i].split(""String_Node_Str"");
            drop.addEnchantment(Enchantment.getByName(enchantParts[0].toUpperCase()),enchantParts.length > 1 ? Integer.parseInt(enchantParts[1]) : 1);
          }
        }
        String[] itemSubParts=itemParts[0].split(""String_Node_Str"");
        drop.setItem(Material.matchMaterial(itemSubParts[0]));
        if (drop.getItem() == null)         throw new Exception();
        drop.setData(itemSubParts.length > 1 ? Byte.parseByte(itemSubParts[1]) : 1);
        String[] amountRange=dropParts[1].split(""String_Node_Str"");
        if (amountRange.length == 2) {
          drop.setMinAmount(Integer.parseInt(amountRange[0]));
          drop.setMaxAmount(Integer.parseInt(amountRange[1]));
        }
 else {
          drop.setMaxAmount(Integer.parseInt(dropParts[1]));
        }
        drop.setPercentage(Double.parseDouble(dropParts[2]));
        drop.setIsFixedDrops(isFixedDrops);
        drops.add(drop);
      }
    }
 catch (    Exception exception) {
      log.warning(""String_Node_Str"" + dropsString);
    }
  }
  return drops;
}","private List<ecoDrop> parseDrops(String dropsString,Boolean isFixedDrops){
  List<ecoDrop> drops=new ArrayList<ecoDrop>();
  if (dropsString != null && !dropsString.isEmpty()) {
    try {
      for (      String dropString : dropsString.split(""String_Node_Str"")) {
        ecoDrop drop=new ecoDrop();
        String[] dropParts=dropString.split(""String_Node_Str"");
        String[] itemParts=dropParts[0].split(""String_Node_Str"");
        if (itemParts.length > 1) {
          for (int i=1; i < itemParts.length; i++) {
            String[] enchantParts=itemParts[i].split(""String_Node_Str"");
            drop.addEnchantment(Enchantment.getByName(enchantParts[0].toUpperCase()),enchantParts.length > 1 ? Integer.parseInt(enchantParts[1]) : 1);
          }
        }
        String[] itemSubParts=itemParts[0].split(""String_Node_Str"");
        drop.setItem(Material.matchMaterial(itemSubParts[0]));
        if (drop.getItem() == null)         throw new Exception();
        drop.setData(itemSubParts.length > 1 ? Byte.parseByte(itemSubParts[1]) : 0);
        String[] amountRange=dropParts[1].split(""String_Node_Str"");
        if (amountRange.length == 2) {
          drop.setMinAmount(Integer.parseInt(amountRange[0]));
          drop.setMaxAmount(Integer.parseInt(amountRange[1]));
        }
 else {
          drop.setMaxAmount(Integer.parseInt(dropParts[1]));
        }
        drop.setPercentage(Double.parseDouble(dropParts[2]));
        drop.setIsFixedDrops(isFixedDrops);
        drops.add(drop);
      }
    }
 catch (    Exception exception) {
      log.warning(""String_Node_Str"" + dropsString);
    }
  }
  return drops;
}"
44406,"public ItemStack computeItemStack(){
  if (random.nextDouble() * 100.0D + 1 < percentage) {
    int dropAmount=isFixedDrops ? maxAmount : minAmount + random.nextInt(Math.abs(maxAmount - minAmount + 1));
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == 0) {
        itemStack=new ItemStack(item,dropAmount);
      }
 else {
        MaterialData materialData=new MaterialData(item,data);
        itemStack=materialData.toItemStack(dropAmount);
      }
      for (      ecoEnchantment e : enchantments) {
        itemStack.addEnchantment(e.getEnchantment(),e.getLevel());
      }
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return null;
}","public ItemStack computeItemStack(){
  if (Math.round(Math.random() * 100.0D) < percentage) {
    int dropAmount=isFixedDrops ? maxAmount : minAmount + random.nextInt(Math.abs(maxAmount - minAmount + 1));
    if (dropAmount > 0) {
      ItemStack itemStack;
      if (data == 0) {
        itemStack=new ItemStack(item,dropAmount);
      }
 else {
        MaterialData materialData=new MaterialData(item,data);
        itemStack=materialData.toItemStack(dropAmount);
      }
      for (      ecoEnchantment e : enchantments) {
        itemStack.addEnchantment(e.getEnchantment(),e.getLevel());
      }
      if (itemStack.getAmount() > 0) {
        return itemStack;
      }
    }
  }
  return null;
}"
44407,"public static RewardType fromEntity(Entity entity){
  RewardType rewardType=null;
  if (entity instanceof Player) {
    rewardType=RewardType.PLAYER;
  }
 else   if (entity instanceof Wolf) {
    Wolf wolf=(Wolf)entity;
    if (wolf.isAngry()) {
      rewardType=ANGRY_WOLF;
    }
 else {
      rewardType=WOLF;
    }
  }
 else {
    CreatureType creatureType=ecoEntityUtil.getCreatureType(entity);
    if (creatureType != null) {
      rewardType=RewardType.fromName(creatureType.getName());
    }
  }
  return rewardType;
}","public static RewardType fromEntity(Entity entity){
  RewardType rewardType=null;
  if (entity instanceof Creeper) {
    Creeper creeper=(Creeper)entity;
    if (creeper.isPowered()) {
      rewardType=RewardType.POWERED_CREEPER;
    }
 else {
      rewardType=RewardType.CREEPER;
    }
  }
 else   if (entity instanceof Player) {
    rewardType=RewardType.PLAYER;
  }
 else   if (entity instanceof Wolf) {
    Wolf wolf=(Wolf)entity;
    if (wolf.isAngry()) {
      rewardType=ANGRY_WOLF;
    }
 else {
      rewardType=WOLF;
    }
  }
 else {
    CreatureType creatureType=ecoEntityUtil.getCreatureType(entity);
    if (creatureType != null) {
      rewardType=RewardType.fromName(creatureType.getName());
    }
  }
  return rewardType;
}"
44408,"public ecoRewardManager loadRewardConfig(Configuration config){
  ecoRewardManager rewardManager=new ecoRewardManager(plugin);
  isEnabled=config.getBoolean(""String_Node_Str"",true);
  debug=config.getBoolean(""String_Node_Str"",false) || debug;
  rewardManager.isIntegerCurrency=config.getBoolean(""String_Node_Str"",false);
  rewardManager.canCampSpawner=config.getBoolean(""String_Node_Str"",false);
  rewardManager.shouldClearCampDrops=config.getBoolean(""String_Node_Str"",true);
  rewardManager.shouldOverrideDrops=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isFixedDrops=config.getBoolean(""String_Node_Str"",false);
  rewardManager.campRadius=config.getInt(""String_Node_Str"",7);
  rewardManager.hasBowRewards=config.getBoolean(""String_Node_Str"",true);
  rewardManager.hasDeathPenalty=config.getBoolean(""String_Node_Str"",false);
  rewardManager.hasPVPReward=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isPercentPenalty=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isPercentPvpReward=config.getBoolean(""String_Node_Str"",true);
  rewardManager.penaltyAmount=config.getDouble(""String_Node_Str"",0.05D);
  rewardManager.pvpRewardAmount=config.getDouble(""String_Node_Str"",0.05D);
  rewardManager.canHuntUnderSeaLevel=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isWolverineMode=config.getBoolean(""String_Node_Str"",true);
  rewardManager.hasDTPRewards=config.getBoolean(""String_Node_Str"",true);
  rewardManager.dtpPenaltyAmount=config.getDouble(""String_Node_Str"",5.0D);
  rewardManager.dtpPenaltyAmount=config.getDouble(""String_Node_Str"",10.0D);
  rewardManager.noFarm=config.getBoolean(""String_Node_Str"",false);
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String group : config.getKeys(""String_Node_Str"")) {
      rewardManager.groupMultiplier.put(group.toLowerCase(),Double.valueOf(config.getDouble(""String_Node_Str"" + group + ""String_Node_Str"",0.0D)));
    }
  }
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String period : config.getKeys(""String_Node_Str"")) {
      rewardManager.timeMultiplier.put(TimePeriod.fromName(period),Double.valueOf(config.getDouble(""String_Node_Str"" + period + ""String_Node_Str"",1.0D)));
    }
  }
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String environment : config.getKeys(""String_Node_Str"")) {
      rewardManager.envMultiplier.put(Environment.valueOf(environment.toUpperCase()),Double.valueOf(config.getDouble(""String_Node_Str"" + environment + ""String_Node_Str"",1.0D)));
    }
  }
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String creatureName : config.getKeys(""String_Node_Str"")) {
      ecoReward reward=new ecoReward();
      reward.setCreatureName(creatureName);
      reward.setCreatureType(CreatureType.fromName(creatureName));
      String root=""String_Node_Str"" + creatureName;
      reward.setDrops(parseDrops(config.getString(root + ""String_Node_Str""),rewardManager.isFixedDrops));
      reward.setCoinMax(config.getDouble(root + ""String_Node_Str"",0));
      reward.setCoinMin(config.getDouble(root + ""String_Node_Str"",5));
      reward.setCoinPercentage(config.getDouble(root + ""String_Node_Str"",50));
      reward.setNoRewardMessage(new ecoMessage(convertMessage(config.getString(root + ""String_Node_Str"",ecoMessageManager.NO_REWARD_MESSAGE)),config.getBoolean(""String_Node_Str"",false)));
      reward.setRewardMessage(new ecoMessage(convertMessage(config.getString(root + ""String_Node_Str"",ecoMessageManager.REWARD_MESSAGE)),true));
      reward.setPenaltyMessage(new ecoMessage(convertMessage(config.getString(root + ""String_Node_Str"",ecoMessageManager.PENALTY_MESSAGE)),true));
      if (creatureName.equals(""String_Node_Str"")) {
        rewardManager.spawnerReward=reward;
      }
 else {
        rewardManager.rewards.put(reward.getCreatureType(),reward);
      }
    }
  }
  return rewardManager;
}","public ecoRewardManager loadRewardConfig(Configuration config){
  ecoRewardManager rewardManager=new ecoRewardManager(plugin);
  isEnabled=config.getBoolean(""String_Node_Str"",true);
  debug=config.getBoolean(""String_Node_Str"",false) || debug;
  rewardManager.isIntegerCurrency=config.getBoolean(""String_Node_Str"",false);
  rewardManager.canCampSpawner=config.getBoolean(""String_Node_Str"",false);
  rewardManager.shouldClearCampDrops=config.getBoolean(""String_Node_Str"",true);
  rewardManager.shouldOverrideDrops=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isFixedDrops=config.getBoolean(""String_Node_Str"",false);
  rewardManager.campRadius=config.getInt(""String_Node_Str"",7);
  rewardManager.hasBowRewards=config.getBoolean(""String_Node_Str"",true);
  rewardManager.hasDeathPenalty=config.getBoolean(""String_Node_Str"",false);
  rewardManager.hasPVPReward=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isPercentPenalty=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isPercentPvpReward=config.getBoolean(""String_Node_Str"",true);
  rewardManager.penaltyAmount=config.getDouble(""String_Node_Str"",0.05D);
  rewardManager.pvpRewardAmount=config.getDouble(""String_Node_Str"",0.05D);
  rewardManager.canHuntUnderSeaLevel=config.getBoolean(""String_Node_Str"",true);
  rewardManager.isWolverineMode=config.getBoolean(""String_Node_Str"",true);
  rewardManager.hasDTPRewards=config.getBoolean(""String_Node_Str"",true);
  rewardManager.dtpPenaltyAmount=config.getDouble(""String_Node_Str"",5.0D);
  rewardManager.dtpRewardAmount=config.getDouble(""String_Node_Str"",10.0D);
  rewardManager.noFarm=config.getBoolean(""String_Node_Str"",false);
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String group : config.getKeys(""String_Node_Str"")) {
      rewardManager.groupMultiplier.put(group.toLowerCase(),Double.valueOf(config.getDouble(""String_Node_Str"" + group + ""String_Node_Str"",0.0D)));
    }
  }
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String period : config.getKeys(""String_Node_Str"")) {
      rewardManager.timeMultiplier.put(TimePeriod.fromName(period),Double.valueOf(config.getDouble(""String_Node_Str"" + period + ""String_Node_Str"",1.0D)));
    }
  }
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String environment : config.getKeys(""String_Node_Str"")) {
      rewardManager.envMultiplier.put(Environment.valueOf(environment.toUpperCase()),Double.valueOf(config.getDouble(""String_Node_Str"" + environment + ""String_Node_Str"",1.0D)));
    }
  }
  if (config.getKeys(""String_Node_Str"") != null) {
    for (    String creatureName : config.getKeys(""String_Node_Str"")) {
      ecoReward reward=new ecoReward();
      reward.setCreatureName(creatureName);
      reward.setCreatureType(CreatureType.fromName(creatureName));
      String root=""String_Node_Str"" + creatureName;
      reward.setDrops(parseDrops(config.getString(root + ""String_Node_Str""),rewardManager.isFixedDrops));
      reward.setCoinMax(config.getDouble(root + ""String_Node_Str"",0));
      reward.setCoinMin(config.getDouble(root + ""String_Node_Str"",5));
      reward.setCoinPercentage(config.getDouble(root + ""String_Node_Str"",50));
      reward.setNoRewardMessage(new ecoMessage(convertMessage(config.getString(root + ""String_Node_Str"",ecoMessageManager.NO_REWARD_MESSAGE)),config.getBoolean(""String_Node_Str"",false)));
      reward.setRewardMessage(new ecoMessage(convertMessage(config.getString(root + ""String_Node_Str"",ecoMessageManager.REWARD_MESSAGE)),true));
      reward.setPenaltyMessage(new ecoMessage(convertMessage(config.getString(root + ""String_Node_Str"",ecoMessageManager.PENALTY_MESSAGE)),true));
      if (creatureName.equals(""String_Node_Str"")) {
        rewardManager.spawnerReward=reward;
      }
 else {
        rewardManager.rewards.put(reward.getCreatureType(),reward);
      }
    }
  }
  return rewardManager;
}"
44409,"public void registerDeathStreak(Player player){
  if (hasDTPRewards && plugin.hasEconomy()) {
    ecoCreature.economy.withdrawPlayer(player.getName(),dtpPenaltyAmount);
    ecoCreature.getMessageManager(player).sendMessage(ecoCreature.getMessageManager(player).dtpDeathStreakMessage,player);
  }
}","public void registerDeathStreak(Player player){
  if (hasDTPRewards && plugin.hasEconomy() && dtpPenaltyAmount > 0.0D) {
    ecoCreature.economy.withdrawPlayer(player.getName(),dtpPenaltyAmount);
    ecoCreature.getMessageManager(player).sendMessage(ecoCreature.getMessageManager(player).dtpDeathStreakMessage,player,dtpPenaltyAmount);
  }
}"
44410,"public void registerKillStreak(Player player){
  if (hasDTPRewards && plugin.hasEconomy()) {
    ecoCreature.economy.depositPlayer(player.getName(),dtpRewardAmount);
    ecoCreature.getMessageManager(player).sendMessage(ecoCreature.getMessageManager(player).dtpKillStreakMessage,player);
  }
}","public void registerKillStreak(Player player){
  if (hasDTPRewards && plugin.hasEconomy() && dtpRewardAmount > 0.0D) {
    ecoCreature.economy.depositPlayer(player.getName(),dtpRewardAmount);
    ecoCreature.getMessageManager(player).sendMessage(ecoCreature.getMessageManager(player).dtpKillStreakMessage,player,dtpRewardAmount);
  }
}"
44411,"public void load() throws IOException {
  Configuration defaultConfig;
  File defaultConfigFile=new File(ecoCreature.dataFolder,DEFAULT_CONFIG_FILE);
  File oldConfigFile=new File(ecoCreature.dataFolder,OLD_CONFIG_FILE);
  if (defaultConfigFile.exists()) {
    defaultConfig=new Configuration(defaultConfigFile);
  }
 else   if (oldConfigFile.exists()) {
    defaultConfig=new Configuration(oldConfigFile);
  }
 else {
    defaultConfig=getConfig(defaultConfigFile);
  }
  defaultConfig.load();
  loadConfig(DEFAULT_WORLD,defaultConfig);
  for (  World world : plugin.getServer().getWorlds()) {
    ecoCreature.messageManagers.put(world.getName(),ecoCreature.messageManagers.get(DEFAULT_WORLD).clone());
    ecoCreature.rewardManagers.put(world.getName(),ecoCreature.rewardManagers.get(DEFAULT_WORLD).clone());
    File worldConfigFile=new File(ecoCreature.dataWorldsFolder,world.getName() + ""String_Node_Str"");
    Configuration worldConfig=getConfig(worldConfigFile);
    worldConfig.load();
    loadConfig(world.getName(),worldConfig);
  }
}","public void load() throws IOException {
  Configuration defaultConfig;
  File defaultConfigFile=new File(ecoCreature.dataFolder,DEFAULT_CONFIG_FILE);
  File oldConfigFile=new File(ecoCreature.dataFolder,OLD_CONFIG_FILE);
  if (defaultConfigFile.exists()) {
    defaultConfig=new Configuration(defaultConfigFile);
  }
 else   if (oldConfigFile.exists()) {
    defaultConfig=new Configuration(oldConfigFile);
  }
 else {
    defaultConfig=getConfig(defaultConfigFile);
  }
  defaultConfig.load();
  log.info(""String_Node_Str"");
  ecoMessageManager defaultMessageManager=loadMessageConfig(defaultConfig);
  ecoRewardManager defaultRewardManager=loadRewardConfig(defaultConfig);
  ecoCreature.messageManagers.put(DEFAULT_WORLD,defaultMessageManager);
  ecoCreature.rewardManagers.put(DEFAULT_WORLD,defaultRewardManager);
  for (  World world : plugin.getServer().getWorlds()) {
    File worldConfigFile=new File(ecoCreature.dataWorldsFolder,world.getName() + ""String_Node_Str"");
    Configuration worldConfig;
    if (worldConfigFile.exists()) {
      worldConfig=getConfig(worldConfigFile);
      worldConfig.load();
      log.info(""String_Node_Str"" + world.getName() + ""String_Node_Str"");
      ecoCreature.messageManagers.put(world.getName(),loadMessageConfig(worldConfig));
      ecoCreature.rewardManagers.put(world.getName(),loadRewardConfig(worldConfig));
    }
 else {
      ecoCreature.messageManagers.put(world.getName(),defaultMessageManager);
      ecoCreature.rewardManagers.put(world.getName(),defaultRewardManager);
    }
  }
}"
44412,"private Configuration getConfig(File configFile) throws IOException {
  if (!configFile.exists()) {
    InputStream inputStream=ecoCreature.class.getResourceAsStream(DEFAULT_CONFIG_FILE);
    FileOutputStream outputStream=new FileOutputStream(configFile);
    byte[] buffer=new byte[8192];
    int length=0;
    while ((length=inputStream.read(buffer)) > 0)     outputStream.write(buffer,0,length);
    inputStream.close();
    outputStream.close();
    log.info(""String_Node_Str"" + DEFAULT_CONFIG_FILE);
  }
  return new Configuration(new File(configFile.getPath()));
}","private Configuration getConfig(File configFile) throws IOException {
  if (!configFile.exists()) {
    InputStream inputStream=ecoCreature.class.getResourceAsStream(""String_Node_Str"" + DEFAULT_CONFIG_FILE);
    FileOutputStream outputStream=new FileOutputStream(configFile);
    byte[] buffer=new byte[8192];
    int length=0;
    while ((length=inputStream.read(buffer)) > 0)     outputStream.write(buffer,0,length);
    inputStream.close();
    outputStream.close();
    log.info(""String_Node_Str"" + DEFAULT_CONFIG_FILE);
  }
  return new Configuration(new File(configFile.getPath()));
}"
44413,"private Double computeReward(Player player,ecoReward reward){
  Double amount=reward.getRewardAmount();
  Double groupAmount=0D;
  Double timeAmount=0D;
  Double envAmount=0D;
  if (isIntegerCurrency) {
    amount=(double)Math.round(amount);
  }
  try {
    String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
    if (groupMultiplier.containsKey(group)) {
      groupAmount=amount * groupMultiplier.get(group) - amount;
    }
    timeAmount=amount * timeMultiplier.get(ecoEntityUtil.getTimePeriod(player)) - amount;
    envAmount=amount * envMultiplier.get(player.getWorld().getEnvironment()) - amount;
  }
 catch (  Exception exception) {
    if (warnGroupMultiplierSupport) {
      log.warning(""String_Node_Str"");
      warnGroupMultiplierSupport=false;
    }
  }
  log.debug(""String_Node_Str"" + amount);
  log.debug(""String_Node_Str"" + groupAmount);
  log.debug(""String_Node_Str"" + timeAmount);
  log.debug(""String_Node_Str"" + envAmount);
  return amount + groupAmount + timeAmount+ envAmount;
}","private Double computeReward(Player player,ecoReward reward){
  Double amount=reward.getRewardAmount();
  Double groupAmount=0D;
  Double timeAmount=0D;
  Double envAmount=0D;
  if (isIntegerCurrency) {
    amount=(double)Math.round(amount);
  }
  try {
    String group=ecoCreature.permission.getPrimaryGroup(player.getWorld().getName(),player.getName()).toLowerCase();
    if (groupMultiplier.containsKey(group)) {
      groupAmount=amount * groupMultiplier.get(group) - amount;
    }
    if (timeMultiplier.containsKey(ecoEntityUtil.getTimePeriod(player))) {
      timeAmount=amount * timeMultiplier.get(ecoEntityUtil.getTimePeriod(player)) - amount;
    }
    if (envMultiplier.containsKey(player.getWorld().getEnvironment())) {
      envAmount=amount * envMultiplier.get(player.getWorld().getEnvironment()) - amount;
    }
  }
 catch (  Exception exception) {
    if (warnGroupMultiplierSupport) {
      log.warning(""String_Node_Str"");
      warnGroupMultiplierSupport=false;
    }
  }
  log.debug(""String_Node_Str"" + amount);
  log.debug(""String_Node_Str"" + groupAmount);
  log.debug(""String_Node_Str"" + timeAmount);
  log.debug(""String_Node_Str"" + envAmount);
  return amount + groupAmount + timeAmount+ envAmount;
}"
44414,"public ecoRewardManager(ecoCreature plugin){
  this.plugin=plugin;
  log=this.plugin.getLogger();
}","public ecoRewardManager(ecoCreature plugin){
  this.plugin=plugin;
  log=this.plugin.getLogger();
  groupMultiplier=new HashMap<String,Double>();
  timeMultiplier=new HashMap<TimePeriod,Double>();
  envMultiplier=new HashMap<Environment,Double>();
  rewards=new HashMap<CreatureType,ecoReward>();
}"
44415,"public void registerCreatureDeath(Player killer,LivingEntity tamedCreature,LivingEntity killedCreature,List<ItemStack> drops){
  if (killer.getItemInHand().getType().equals(Material.BOW) && !hasBowRewards) {
    ecoCreature.getMessageManager(killer).sendMessage(ecoCreature.getMessageManager(killer).noBowRewardMessage,killer);
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(killer) && !canHuntUnderSeaLevel) {
    ecoCreature.getMessageManager(killer).sendMessage(ecoCreature.getMessageManager(killer).noBowRewardMessage,killer);
    return;
  }
 else   if (ecoEntityUtil.isOwner(killer,killedCreature)) {
    return;
  }
 else   if (ecoCreature.mobArenaHandler != null && ecoCreature.mobArenaHandler.isPlayerInArena(killer)) {
    return;
  }
 else   if ((ecoEntityUtil.isNearSpawner(killer) || ecoEntityUtil.isNearSpawner(killedCreature)) && !canCampSpawner) {
    if (shouldClearCampDrops) {
      drops.clear();
    }
    ecoCreature.getMessageManager(killer).sendMessage(ecoCreature.getMessageManager(killer).noCampMessage,killer);
    return;
  }
 else   if (!hasIgnoreCase(killer,""String_Node_Str"" + ecoEntityUtil.getCreatureType(killedCreature).getName())) {
    return;
  }
  ecoReward reward=rewards.get(RewardType.fromEntity(killedCreature));
  if (reward == null) {
    log.warning(""String_Node_Str"");
  }
 else {
    String weaponName=tamedCreature != null ? ecoEntityUtil.getCreatureType(tamedCreature).getName() : Material.getMaterial(killer.getItemInHand().getTypeId()).name();
    registerReward(killer,reward,weaponName);
  }
}","public void registerCreatureDeath(Player killer,LivingEntity tamedCreature,LivingEntity killedCreature,List<ItemStack> drops){
  if (killer.getItemInHand().getType().equals(Material.BOW) && !hasBowRewards) {
    ecoCreature.getMessageManager(killer).sendMessage(ecoCreature.getMessageManager(killer).noBowRewardMessage,killer);
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(killer) && !canHuntUnderSeaLevel) {
    ecoCreature.getMessageManager(killer).sendMessage(ecoCreature.getMessageManager(killer).noBowRewardMessage,killer);
    return;
  }
 else   if (ecoEntityUtil.isOwner(killer,killedCreature)) {
    return;
  }
 else   if (ecoCreature.mobArenaHandler != null && ecoCreature.mobArenaHandler.isPlayerInArena(killer)) {
    return;
  }
 else   if ((ecoEntityUtil.isNearSpawner(killer) || ecoEntityUtil.isNearSpawner(killedCreature)) && !canCampSpawner) {
    if (shouldClearCampDrops) {
      drops.clear();
    }
    ecoCreature.getMessageManager(killer).sendMessage(ecoCreature.getMessageManager(killer).noCampMessage,killer);
    return;
  }
 else   if (!hasIgnoreCase(killer,""String_Node_Str"" + ecoEntityUtil.getCreatureType(killedCreature).getName())) {
    return;
  }
  ecoReward reward=rewards.get(RewardType.fromEntity(killedCreature));
  if (reward == null) {
    log.warning(""String_Node_Str"");
  }
 else {
    String weaponName=tamedCreature != null ? ecoEntityUtil.getCreatureType(tamedCreature).getName() : Material.getMaterial(killer.getItemInHand().getTypeId()).name();
    registerReward(killer,reward,weaponName);
    if (ecoCreature.getRewardManager(killer).shouldOverrideDrops) {
      drops.clear();
    }
    drops.addAll(reward.computeDrops());
  }
}"
44416,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Player) {
    plugin.getRewardManager().registerPlayerDeath(event);
    return;
  }
  Player player=null;
  LivingEntity tamedCreature=null;
  if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
    if (subEvent.getDamager() instanceof Player) {
      player=(Player)subEvent.getDamager();
    }
 else     if (subEvent.getDamager() instanceof Tameable) {
      if (((Tameable)subEvent.getDamager()).isTamed() && ((Tameable)subEvent.getDamager()).getOwner() instanceof Player) {
        tamedCreature=(LivingEntity)subEvent.getDamager();
        player=(Player)((Tameable)subEvent.getDamager()).getOwner();
      }
    }
 else     if (subEvent.getDamager() instanceof Projectile) {
      if (((Projectile)subEvent.getDamager()).getShooter() instanceof Player) {
        player=(Player)((Projectile)subEvent.getDamager()).getShooter();
      }
    }
  }
  if (player == null) {
    EntityDamageEvent damageEvent=event.getEntity().getLastDamageCause();
    if (ecoRewardManager.noFarm && damageEvent != null) {
      if (damageEvent instanceof EntityDamageByBlockEvent) {
        if (damageEvent.getCause().equals(DamageCause.CONTACT) || damageEvent.getCause().equals(DamageCause.DROWNING) || damageEvent.getCause().equals(DamageCause.SUFFOCATION)) {
          event.getDrops().clear();
        }
      }
 else       if (damageEvent.getCause() != null && damageEvent.getCause().equals(DamageCause.FALL)) {
        event.getDrops().clear();
      }
    }
    return;
  }
  if (player.getItemInHand().getType().equals(Material.BOW) && !ecoRewardManager.hasBowRewards) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(player) && !ecoRewardManager.canHuntUnderSeaLevel) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
  LivingEntity livingEntity=(LivingEntity)event.getEntity();
  if ((ecoEntityUtil.isNearSpawner(player) || ecoEntityUtil.isNearSpawner(livingEntity)) && !ecoRewardManager.canCampSpawner) {
    if (ecoRewardManager.shouldClearCampDrops) {
      event.getDrops().clear();
    }
    plugin.getMessageManager().sendMessage(ecoMessageManager.noCampMessage,player);
  }
 else {
    plugin.getRewardManager().registerCreatureDeath(player,tamedCreature,livingEntity);
  }
  if (ecoRewardManager.rewards.containsKey(ecoEntityUtil.getCreatureType(livingEntity))) {
    if (ecoRewardManager.shouldOverrideDrops) {
      event.getDrops().clear();
    }
    event.getDrops().addAll(ecoRewardManager.rewards.get(ecoEntityUtil.getCreatureType(livingEntity)).computeDrops());
  }
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Player) {
    plugin.getRewardManager().registerPlayerDeath(event);
    return;
  }
  Player player=null;
  LivingEntity tamedCreature=null;
  if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
    if (subEvent.getDamager() instanceof Player) {
      player=(Player)subEvent.getDamager();
    }
 else     if (subEvent.getDamager() instanceof Tameable) {
      if (((Tameable)subEvent.getDamager()).isTamed() && ((Tameable)subEvent.getDamager()).getOwner() instanceof Player) {
        tamedCreature=(LivingEntity)subEvent.getDamager();
        player=(Player)((Tameable)subEvent.getDamager()).getOwner();
      }
    }
 else     if (subEvent.getDamager() instanceof Projectile) {
      if (((Projectile)subEvent.getDamager()).getShooter() instanceof Player) {
        player=(Player)((Projectile)subEvent.getDamager()).getShooter();
      }
    }
  }
  if (player == null) {
    EntityDamageEvent damageEvent=event.getEntity().getLastDamageCause();
    if (ecoRewardManager.noFarm && damageEvent != null) {
      if (damageEvent instanceof EntityDamageByBlockEvent && damageEvent.getCause().equals(DamageCause.CONTACT)) {
        event.getDrops().clear();
      }
 else       if (damageEvent.getCause() != null && (damageEvent.getCause().equals(DamageCause.FALL) || damageEvent.getCause().equals(DamageCause.DROWNING) || damageEvent.getCause().equals(DamageCause.SUFFOCATION))) {
        event.getDrops().clear();
      }
    }
    return;
  }
  if (player.getItemInHand().getType().equals(Material.BOW) && !ecoRewardManager.hasBowRewards) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(player) && !ecoRewardManager.canHuntUnderSeaLevel) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
  LivingEntity livingEntity=(LivingEntity)event.getEntity();
  if ((ecoEntityUtil.isNearSpawner(player) || ecoEntityUtil.isNearSpawner(livingEntity)) && !ecoRewardManager.canCampSpawner) {
    if (ecoRewardManager.shouldClearCampDrops) {
      event.getDrops().clear();
    }
    plugin.getMessageManager().sendMessage(ecoMessageManager.noCampMessage,player);
  }
 else {
    plugin.getRewardManager().registerCreatureDeath(player,tamedCreature,livingEntity);
  }
  if (ecoRewardManager.rewards.containsKey(ecoEntityUtil.getCreatureType(livingEntity))) {
    if (ecoRewardManager.shouldOverrideDrops) {
      event.getDrops().clear();
    }
    event.getDrops().addAll(ecoRewardManager.rewards.get(ecoEntityUtil.getCreatureType(livingEntity)).computeDrops());
  }
}"
44417,"public void registerCreatureDeath(Player player,LivingEntity tamedCreature,LivingEntity killedCreature){
  if (player == null || killedCreature == null) {
    return;
  }
  if (!hasIgnoreCase(player,""String_Node_Str"")) {
    return;
  }
  if (killedCreature instanceof Tameable) {
    if (((Tameable)killedCreature).isTamed() && ((Tameable)killedCreature).getOwner() instanceof Player) {
      Player owner=(Player)((Tameable)killedCreature).getOwner();
      if (owner.getName().equals(player.getName())) {
        return;
      }
    }
  }
  ecoReward reward=rewards.get(ecoEntityUtil.getCreatureType(killedCreature));
  String weaponName=tamedCreature != null ? ecoEntityUtil.getCreatureType(tamedCreature).getName() : Material.getMaterial(player.getItemInHand().getTypeId()).name();
  if (reward == null) {
    log.info(""String_Node_Str"" + killedCreature.getClass().getSimpleName());
    return;
  }
  registerReward(player,reward,weaponName);
}","public void registerCreatureDeath(Player player,LivingEntity tamedCreature,LivingEntity killedCreature){
  if (player == null || killedCreature == null) {
    return;
  }
  if (!hasIgnoreCase(player,""String_Node_Str"" + ecoEntityUtil.getCreatureType(killedCreature).getName())) {
    return;
  }
  if (killedCreature instanceof Tameable) {
    if (((Tameable)killedCreature).isTamed() && ((Tameable)killedCreature).getOwner() instanceof Player) {
      Player owner=(Player)((Tameable)killedCreature).getOwner();
      if (owner.getName().equals(player.getName())) {
        return;
      }
    }
  }
  ecoReward reward=rewards.get(ecoEntityUtil.getCreatureType(killedCreature));
  String weaponName=tamedCreature != null ? ecoEntityUtil.getCreatureType(tamedCreature).getName() : Material.getMaterial(player.getItemInHand().getTypeId()).name();
  if (reward == null) {
    log.info(""String_Node_Str"" + killedCreature.getClass().getSimpleName());
    return;
  }
  registerReward(player,reward,weaponName);
}"
44418,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Player) {
    return;
  }
  Player player=null;
  LivingEntity tamedCreature=null;
  if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
    if (subEvent.getDamager() instanceof Player) {
      player=(Player)subEvent.getDamager();
    }
 else     if (subEvent.getDamager() instanceof Tameable) {
      if (((Tameable)subEvent.getDamager()).isTamed() && ((Tameable)subEvent.getDamager()).getOwner() instanceof Player) {
        tamedCreature=(LivingEntity)subEvent.getDamager();
        player=(Player)((Tameable)subEvent.getDamager()).getOwner();
      }
    }
 else     if (subEvent.getDamager() instanceof Projectile) {
      if (((Projectile)subEvent.getDamager()).getShooter() instanceof Player) {
        player=(Player)((Projectile)subEvent.getDamager()).getShooter();
      }
    }
  }
  if (player == null) {
    return;
  }
  if (player.getItemInHand().getType().equals(Material.BOW) && !ecoRewardManager.hasBowRewards) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(player) && !ecoRewardManager.canHuntUnderSeaLevel) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
  LivingEntity livingEntity=(LivingEntity)event.getEntity();
  if ((ecoEntityUtil.isNearSpawner(player) || ecoEntityUtil.isNearSpawner(livingEntity)) && !ecoRewardManager.canCampSpawner) {
    if (ecoRewardManager.shouldClearCampDrops) {
      event.getDrops().clear();
    }
    plugin.getMessageManager().sendMessage(ecoMessageManager.noCampMessage,player);
  }
 else {
    plugin.getRewardManager().registerCreatureReward(player,tamedCreature,livingEntity);
  }
  if (ecoRewardManager.rewards.containsKey(livingEntity)) {
    if (ecoRewardManager.shouldOverrideDrops) {
      event.getDrops().clear();
    }
    event.getDrops().addAll(ecoRewardManager.rewards.get(ecoEntityUtil.getCreatureType(livingEntity)).computeDrops());
  }
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Player) {
    return;
  }
  Player player=null;
  LivingEntity tamedCreature=null;
  if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent subEvent=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
    if (subEvent.getDamager() instanceof Player) {
      player=(Player)subEvent.getDamager();
    }
 else     if (subEvent.getDamager() instanceof Tameable) {
      if (((Tameable)subEvent.getDamager()).isTamed() && ((Tameable)subEvent.getDamager()).getOwner() instanceof Player) {
        tamedCreature=(LivingEntity)subEvent.getDamager();
        player=(Player)((Tameable)subEvent.getDamager()).getOwner();
      }
    }
 else     if (subEvent.getDamager() instanceof Projectile) {
      if (((Projectile)subEvent.getDamager()).getShooter() instanceof Player) {
        player=(Player)((Projectile)subEvent.getDamager()).getShooter();
      }
    }
  }
  if (player == null) {
    return;
  }
  if (player.getItemInHand().getType().equals(Material.BOW) && !ecoRewardManager.hasBowRewards) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
 else   if (ecoEntityUtil.isUnderSeaLevel(player) && !ecoRewardManager.canHuntUnderSeaLevel) {
    plugin.getMessageManager().sendMessage(ecoMessageManager.noBowRewardMessage,player);
    return;
  }
  LivingEntity livingEntity=(LivingEntity)event.getEntity();
  if ((ecoEntityUtil.isNearSpawner(player) || ecoEntityUtil.isNearSpawner(livingEntity)) && !ecoRewardManager.canCampSpawner) {
    if (ecoRewardManager.shouldClearCampDrops) {
      event.getDrops().clear();
    }
    plugin.getMessageManager().sendMessage(ecoMessageManager.noCampMessage,player);
  }
 else {
    plugin.getRewardManager().registerCreatureReward(player,tamedCreature,livingEntity);
  }
  if (ecoRewardManager.rewards.containsKey(ecoEntityUtil.getCreatureType(livingEntity))) {
    if (ecoRewardManager.shouldOverrideDrops) {
      event.getDrops().clear();
    }
    event.getDrops().addAll(ecoRewardManager.rewards.get(ecoEntityUtil.getCreatureType(livingEntity)).computeDrops());
  }
}"
44419,"public void load() throws Exception {
  config=getConfig(MAIN_CONFIG_FILE);
  config.load();
  isEnabled=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.isIntegerCurrency=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.canCampSpawner=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.shouldClearCampDrops=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.shouldOverrideDrops=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.isFixedDrops=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.campRadius=config.getInt(""String_Node_Str"",15);
  ecoRewardManager.hasBowRewards=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.hasDeathPenalty=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.isPercentPenalty=!config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.penaltyAmount=config.getDouble(""String_Node_Str"",0.0D);
  ecoRewardManager.canHuntUnderSeaLevel=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.isWolverineMode=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.shouldOutputMessages=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.shouldOutputNoRewardMessage=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.shouldOutputSpawnerMessage=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.noBowRewardMessage=convertMessage(config.getString(""String_Node_Str""));
  ecoRewardManager.noCampMessage=convertMessage(config.getString(""String_Node_Str""));
  ecoRewardManager.deathPenaltyMessage=convertMessage(config.getString(""String_Node_Str""));
  for (  String groupMultiplierName : config.getKeys(""String_Node_Str"")) {
    ecoRewardManager.groupMultiplier.put(groupMultiplierName,Double.valueOf(config.getDouble(""String_Node_Str"" + groupMultiplierName + ""String_Node_Str"",0.0D)));
  }
  ecoRewardManager.rewards=new HashMap<CreatureType,ecoReward>();
  for (  String rewardName : config.getKeys(""String_Node_Str"")) {
    ecoReward reward=new ecoReward();
    reward.setRewardName(rewardName);
    reward.setCreatureType(CreatureType.fromName(rewardName));
    String root=""String_Node_Str"" + rewardName;
    reward.setDrops(parseDrops(config.getString(root + ""String_Node_Str"")));
    reward.setCoinMax(config.getDouble(root + ""String_Node_Str"",0));
    reward.setCoinMin(config.getDouble(root + ""String_Node_Str"",5));
    reward.setCoinPercentage(config.getDouble(root + ""String_Node_Str"",50));
    reward.setNoRewardMessage(convertMessage(config.getString(root + ""String_Node_Str"")));
    reward.setRewardMessage(convertMessage(config.getString(root + ""String_Node_Str"")));
    reward.setPenaltyMessage(convertMessage(config.getString(root + ""String_Node_Str"")));
    if (rewardName.equals(""String_Node_Str"")) {
      ecoRewardManager.spawnerReward=reward;
    }
 else {
      ecoRewardManager.rewards.put(reward.getCreatureType(),reward);
    }
  }
}","public void load() throws Exception {
  config=getConfig(MAIN_CONFIG_FILE);
  config.load();
  isEnabled=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.isIntegerCurrency=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.canCampSpawner=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.shouldClearCampDrops=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.shouldOverrideDrops=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.isFixedDrops=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.campRadius=config.getInt(""String_Node_Str"",15);
  ecoRewardManager.hasBowRewards=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.hasDeathPenalty=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.isPercentPenalty=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.penaltyAmount=config.getDouble(""String_Node_Str"",0.0D);
  ecoRewardManager.canHuntUnderSeaLevel=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.isWolverineMode=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.shouldOutputMessages=config.getBoolean(""String_Node_Str"",true);
  ecoRewardManager.shouldOutputNoRewardMessage=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.shouldOutputSpawnerMessage=config.getBoolean(""String_Node_Str"",false);
  ecoRewardManager.noBowRewardMessage=convertMessage(config.getString(""String_Node_Str""));
  ecoRewardManager.noCampMessage=convertMessage(config.getString(""String_Node_Str""));
  ecoRewardManager.deathPenaltyMessage=convertMessage(config.getString(""String_Node_Str""));
  for (  String groupMultiplierName : config.getKeys(""String_Node_Str"")) {
    ecoRewardManager.groupMultiplier.put(groupMultiplierName,Double.valueOf(config.getDouble(""String_Node_Str"" + groupMultiplierName + ""String_Node_Str"",0.0D)));
  }
  ecoRewardManager.rewards=new HashMap<CreatureType,ecoReward>();
  for (  String rewardName : config.getKeys(""String_Node_Str"")) {
    ecoReward reward=new ecoReward();
    reward.setRewardName(rewardName);
    reward.setCreatureType(CreatureType.fromName(rewardName));
    String root=""String_Node_Str"" + rewardName;
    reward.setDrops(parseDrops(config.getString(root + ""String_Node_Str"")));
    reward.setCoinMax(config.getDouble(root + ""String_Node_Str"",0));
    reward.setCoinMin(config.getDouble(root + ""String_Node_Str"",5));
    reward.setCoinPercentage(config.getDouble(root + ""String_Node_Str"",50));
    reward.setNoRewardMessage(convertMessage(config.getString(root + ""String_Node_Str"")));
    reward.setRewardMessage(convertMessage(config.getString(root + ""String_Node_Str"")));
    reward.setPenaltyMessage(convertMessage(config.getString(root + ""String_Node_Str"")));
    if (rewardName.equals(""String_Node_Str"")) {
      ecoRewardManager.spawnerReward=reward;
    }
 else {
      ecoRewardManager.rewards.put(reward.getCreatureType(),reward);
    }
  }
}"
44420,"public boolean isEnabled(){
  return isEnabled;
}","public Boolean isEnabled(){
  return isEnabled;
}"
44421,"public void registerCreatureReward(Player player,CreatureType tamedCreature,CreatureType killedCreature){
  if (player == null) {
    return;
  }
  if (killedCreature == null) {
    return;
  }
  ecoReward reward=rewards.get(killedCreature);
  String weaponName=tamedCreature != null ? tamedCreature.getName() : Material.getMaterial(player.getItemInHand().getTypeId()).name();
  double amount=computeAmount(reward);
  if (isIntegerCurrency) {
    amount=Math.round(amount);
  }
  if (groupMultiplier.containsKey(ecoCreature.permissionsHandler.getGroup(player.getWorld().getName(),player.getName()))) {
    amount*=((Double)groupMultiplier.get(ecoCreature.permissionsHandler.getGroup(player.getWorld().getName(),player.getName()))).doubleValue();
  }
  if (amount > 0.0D) {
    plugin.method.getAccount(player.getName()).add(amount);
    if (ecoRewardManager.shouldOutputMessages) {
      player.sendMessage(reward.getRewardMessage().replaceAll(""String_Node_Str"",plugin.method.format(amount).replaceAll(""String_Node_Str"",""String_Node_Str"")).replaceAll(""String_Node_Str"",toCamelCase(weaponName)).replaceAll(""String_Node_Str"",reward.getRewardName()));
    }
  }
 else   if (amount < 0.0D) {
    plugin.method.getAccount(player.getName()).add(amount);
    if (ecoRewardManager.shouldOutputMessages) {
      player.sendMessage(reward.getPenaltyMessage().replaceAll(""String_Node_Str"",plugin.method.format(amount).replaceAll(""String_Node_Str"",""String_Node_Str"")).replaceAll(""String_Node_Str"",toCamelCase(weaponName)).replaceAll(""String_Node_Str"",reward.getRewardName()));
    }
  }
 else {
    if ((ecoRewardManager.shouldOutputMessages) && (ecoRewardManager.shouldOutputNoRewardMessage)) {
      player.sendMessage(reward.getNoRewardMessage().replaceAll(""String_Node_Str"",reward.getRewardName()).replaceAll(""String_Node_Str"",toCamelCase(weaponName)));
    }
  }
}","public void registerCreatureReward(Player player,CreatureType tamedCreature,CreatureType killedCreature){
  if (player == null || killedCreature == null) {
    return;
  }
  if (!ecoCreature.permissionsHandler.has(player,""String_Node_Str"" + killedCreature.getName())) {
    return;
  }
  ecoReward reward=rewards.get(killedCreature);
  String weaponName=tamedCreature != null ? tamedCreature.getName() : Material.getMaterial(player.getItemInHand().getTypeId()).name();
  registerReward(player,reward,weaponName);
}"
44422,"public void registerSpawnerReward(Player player,Block block){
  if (player == null) {
    return;
  }
  if (block == null || !block.getType().equals(Material.MOB_SPAWNER)) {
    return;
  }
  if (ecoCreature.permissionsHandler.has(player,""String_Node_Str"")) {
    for (    ItemStack itemStack : spawnerReward.computeDrops()) {
      block.getWorld().dropItemNaturally(block.getLocation(),itemStack);
    }
  }
}","public void registerSpawnerReward(Player player,Block block){
  if (player == null || block == null) {
    return;
  }
  if (!block.getType().equals(Material.MOB_SPAWNER)) {
    return;
  }
  if (ecoCreature.permissionsHandler.has(player,""String_Node_Str"")) {
    registerReward(player,spawnerReward,Material.getMaterial(player.getItemInHand().getTypeId()).name());
    for (    ItemStack itemStack : spawnerReward.computeDrops()) {
      block.getWorld().dropItemNaturally(block.getLocation(),itemStack);
    }
  }
}"
44423,"private static String toCamelCase(String rawItemName){
  String[] rawItemNameParts=rawItemName.split(""String_Node_Str"");
  String itemName=""String_Node_Str"";
  for (  String itemNamePart : rawItemNameParts) {
    itemName=itemName + ""String_Node_Str"" + toProperCase(itemNamePart);
  }
  if (itemName.trim().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (itemName.trim().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  return itemName.trim();
}","private static String toCamelCase(String rawItemName){
  String[] rawItemNameParts=rawItemName.split(""String_Node_Str"");
  String itemName=""String_Node_Str"";
  for (  String itemNamePart : rawItemNameParts) {
    itemName=itemName + ""String_Node_Str"" + toProperCase(itemNamePart);
  }
  if (itemName.trim().equals(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
  if (itemName.trim().equals(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
  return itemName.trim();
}"
44424,"public void registerDeathPenalty(Player player){
  if (player == null) {
    return;
  }
  if (!hasDeathPenalty) {
    return;
  }
  double amount=isPercentPenalty ? plugin.method.getAccount(player.getName()).balance() * (penaltyAmount / 100.0D) : penaltyAmount;
  plugin.method.getAccount(player.getName()).subtract(amount);
  if (ecoRewardManager.shouldOutputMessages) {
    player.sendMessage(deathPenaltyMessage.replaceAll(""String_Node_Str"",plugin.method.format(amount).replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
}","public void registerDeathPenalty(Player player){
  if (player == null || !hasDeathPenalty) {
    return;
  }
  Double amount=isPercentPenalty ? plugin.method.getAccount(player.getName()).balance() * (penaltyAmount / 100.0D) : penaltyAmount;
  plugin.method.getAccount(player.getName()).subtract(amount);
  if (ecoRewardManager.shouldOutputMessages) {
    player.sendMessage(deathPenaltyMessage.replaceAll(""String_Node_Str"",plugin.method.format(amount).replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
}"
44425,"public void onEntityDeath(EntityDeathEvent paramEntityDeathEvent){
  if ((paramEntityDeathEvent.getEntity() instanceof Player))   return;
  LivingEntity localLivingEntity=(LivingEntity)paramEntityDeathEvent.getEntity();
  Player localPlayer=(Player)this.recent.get(paramEntityDeathEvent.getEntity());
  if (localPlayer != null) {
    if (ecoConstants.OD)     paramEntityDeathEvent.getDrops().clear();
    if ((!ecoConstants.BR) && (localPlayer.getItemInHand().getTypeId() == 261)) {
      localPlayer.sendMessage(ecoConstants.MNB);
      this.recent.remove(paramEntityDeathEvent.getEntity());
    }
 else     if ((!ecoConstants.AUSL) && (UnderSeaLevel(localPlayer))) {
      localPlayer.sendMessage(ecoConstants.MNB);
      this.recent.remove(paramEntityDeathEvent.getEntity());
    }
 else {
      if (((!ecoConstants.AC) && (FindSpawnersPlayer(localPlayer)) && (FindSpawnersCreature(localLivingEntity))) || ((!ecoConstants.AC) && (FindSpawnersPlayer(localPlayer))) || ((!ecoConstants.AC) && (FindSpawnersCreature(localLivingEntity)))) {
        if (ecoConstants.CCD)         paramEntityDeathEvent.getDrops().clear();
        if (ecoConstants.MS)         localPlayer.sendMessage(ecoConstants.MNC);
      }
 else       if (ecoCreature.Permissions.has(localPlayer,""String_Node_Str"" + localLivingEntity.getClass().getSimpleName())) {
        ecoCreature.getRewardHandler().CashRegistry(localPlayer,cIndex(localLivingEntity.getClass().getSimpleName()),Material.getMaterial(localPlayer.getItemInHand().getTypeId()).name());
      }
      if (ecoConstants.uQuestHooking) {
        double d1=Math.floor(Math.random() * 100.0D);
        if (d1 < ecoConstants.uQuestRQP)         ecoCreature.questInteraction.giveQuestRandom(localPlayer,true);
      }
      for (int i=0; i < ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())].length; i++) {
        double d2=Math.floor(Math.random() * 100.0D);
        Random localRandom=new Random();
        if (d2 >= ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())][i][2])         continue;
        int j=(int)ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())][i][1];
        int k=0;
        if (ecoConstants.FD)         k=j;
 else         k=localRandom.nextInt(j) + 1;
        ItemStack localItemStack=new ItemStack((int)ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())][i][0],k,0);
        if (localItemStack == null)         continue;
        if (localItemStack.getAmount() == 0)         localPlayer.sendMessage(""String_Node_Str"");
 else         paramEntityDeathEvent.getDrops().addAll(Arrays.asList(new ItemStack[]{localItemStack}));
      }
      this.recent.remove(paramEntityDeathEvent.getEntity());
    }
  }
}","public void onEntityDeath(EntityDeathEvent paramEntityDeathEvent){
  if ((paramEntityDeathEvent.getEntity() instanceof Player))   return;
  LivingEntity localLivingEntity=(LivingEntity)paramEntityDeathEvent.getEntity();
  Player localPlayer=(Player)this.recent.get(paramEntityDeathEvent.getEntity());
  if (localPlayer != null) {
    if (ecoConstants.OD)     paramEntityDeathEvent.getDrops().clear();
    if ((!ecoConstants.BR) && (localPlayer.getItemInHand().getTypeId() == 261)) {
      localPlayer.sendMessage(ecoConstants.MNB);
      this.recent.remove(paramEntityDeathEvent.getEntity());
    }
 else     if ((!ecoConstants.AUSL) && (UnderSeaLevel(localPlayer))) {
      localPlayer.sendMessage(ecoConstants.MNB);
      this.recent.remove(paramEntityDeathEvent.getEntity());
    }
 else {
      if (((!ecoConstants.AC) && (FindSpawnersPlayer(localPlayer)) && (FindSpawnersCreature(localLivingEntity))) || ((!ecoConstants.AC) && (FindSpawnersPlayer(localPlayer))) || ((!ecoConstants.AC) && (FindSpawnersCreature(localLivingEntity)))) {
        if (ecoConstants.CCD)         paramEntityDeathEvent.getDrops().clear();
        if (ecoConstants.MS)         localPlayer.sendMessage(ecoConstants.MNC);
      }
 else       if (ecoCreature.Permissions.has(localPlayer,""String_Node_Str"" + localLivingEntity.getClass().getSimpleName())) {
        ecoCreature.getRewardHandler().CashRegistry(localPlayer,cIndex(localLivingEntity.getClass().getSimpleName()),Material.getMaterial(localPlayer.getItemInHand().getTypeId()).name());
      }
      if (ecoConstants.uQuestHooking) {
        double d1=Math.floor(Math.random() * 100.0D);
        if (d1 < ecoConstants.uQuestRQP)         ecoCreature.questInteraction.giveQuestRandom(localPlayer,true);
      }
      for (int i=0; i < ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())].length; i++) {
        double d2=Math.floor(Math.random() * 100.0D);
        Random localRandom=new Random();
        if (d2 >= ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())][i][2])         continue;
        int j=(int)ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())][i][1];
        int k=0;
        if (ecoConstants.FD)         k=j;
 else         k=localRandom.nextInt(j) + 1;
        ItemStack localItemStack=new ItemStack((int)ecoConstants.CD[cIndex(localLivingEntity.getClass().getSimpleName())][i][0],k,(short)0);
        if (localItemStack == null)         continue;
        if (localItemStack.getAmount() == 0)         localPlayer.sendMessage(""String_Node_Str"");
 else         paramEntityDeathEvent.getDrops().addAll(Arrays.asList(new ItemStack[]{localItemStack}));
      }
      this.recent.remove(paramEntityDeathEvent.getEntity());
    }
  }
}"
44426,"public void onBlockBreak(BlockBreakEvent paramBlockBreakEvent){
  Player localPlayer=paramBlockBreakEvent.getPlayer();
  Block localBlock=paramBlockBreakEvent.getBlock();
  if ((localBlock.getType().equals(Material.MOB_SPAWNER)) && (localPlayer != null) && (ecoCreature.Permissions.has(localPlayer,""String_Node_Str""))) {
    ecoCreature.getRewardHandler().CashRegistry(localPlayer,14,Material.getMaterial(localPlayer.getItemInHand().getTypeId()).name());
    for (int i=0; i < ecoConstants.CD[14].length; i++) {
      double d=Math.floor(Math.random() * 100.0D);
      Random localRandom=new Random();
      if (d >= ecoConstants.CD[14][i][2])       continue;
      int j=(int)ecoConstants.CD[14][i][1];
      int k=0;
      if (ecoConstants.FD)       k=j;
 else       k=localRandom.nextInt(j) + 1;
      ItemStack localItemStack=new ItemStack((int)ecoConstants.CD[14][i][0],k,0);
      if (localItemStack == null)       continue;
      if (localItemStack.getAmount() == 0)       localPlayer.sendMessage(""String_Node_Str"");
 else       localBlock.getWorld().dropItemNaturally(localBlock.getLocation(),localItemStack);
    }
  }
}","public void onBlockBreak(BlockBreakEvent paramBlockBreakEvent){
  Player localPlayer=paramBlockBreakEvent.getPlayer();
  Block localBlock=paramBlockBreakEvent.getBlock();
  if ((localBlock.getType().equals(Material.MOB_SPAWNER)) && (localPlayer != null) && (ecoCreature.Permissions.has(localPlayer,""String_Node_Str""))) {
    ecoCreature.getRewardHandler().CashRegistry(localPlayer,14,Material.getMaterial(localPlayer.getItemInHand().getTypeId()).name());
    for (int i=0; i < ecoConstants.CD[14].length; i++) {
      double d=Math.floor(Math.random() * 100.0D);
      Random localRandom=new Random();
      if (d >= ecoConstants.CD[14][i][2])       continue;
      int j=(int)ecoConstants.CD[14][i][1];
      int k=0;
      if (ecoConstants.FD)       k=j;
 else       k=localRandom.nextInt(j) + 1;
      ItemStack localItemStack=new ItemStack((int)ecoConstants.CD[14][i][0],k,(short)0);
      if (localItemStack == null)       continue;
      if (localItemStack.getAmount() == 0)       localPlayer.sendMessage(""String_Node_Str"");
 else       localBlock.getWorld().dropItemNaturally(localBlock.getLocation(),localItemStack);
    }
  }
}"
44427,"public void extractSettings(String paramString){
  File localFile=new File(getDataFolder(),paramString);
  if (!localFile.exists()) {
    InputStream localInputStream=getClass().getResourceAsStream(""String_Node_Str"" + paramString);
    if (localInputStream != null) {
      FileOutputStream localFileOutputStream=null;
      try {
        localFileOutputStream=new FileOutputStream(localFile);
        byte[] arrayOfByte=new byte[8192];
        int i=0;
        while ((i=localInputStream.read(arrayOfByte)) > 0)         localFileOutputStream.write(arrayOfByte,0,i);
        System.out.println(""String_Node_Str"" + paramString);
      }
 catch (      Exception localException5) {
        localException3.printStackTrace();
        try {
          if (localInputStream != null)           localInputStream.close();
        }
 catch (        Exception localException6) {
        }
        try {
          if (localFileOutputStream != null)           localFileOutputStream.close();
        }
 catch (        Exception localException7) {
        }
      }
 finally {
        try {
          if (localInputStream != null)           localInputStream.close();
        }
 catch (        Exception localException8) {
        }
        try {
          if (localFileOutputStream != null)           localFileOutputStream.close();
        }
 catch (        Exception localException9) {
        }
      }
    }
  }
}","public void extractSettings(String paramString){
  File localFile=new File(getDataFolder(),paramString);
  if (!localFile.exists()) {
    InputStream localInputStream=getClass().getResourceAsStream(""String_Node_Str"" + paramString);
    if (localInputStream != null) {
      FileOutputStream localFileOutputStream=null;
      try {
        localFileOutputStream=new FileOutputStream(localFile);
        byte[] arrayOfByte=new byte[8192];
        int i=0;
        while ((i=localInputStream.read(arrayOfByte)) > 0)         localFileOutputStream.write(arrayOfByte,0,i);
        System.out.println(""String_Node_Str"" + paramString);
      }
 catch (      Exception localException5) {
        localException5.printStackTrace();
        try {
          if (localInputStream != null)           localInputStream.close();
        }
 catch (        Exception localException6) {
        }
        try {
          if (localFileOutputStream != null)           localFileOutputStream.close();
        }
 catch (        Exception localException7) {
        }
      }
 finally {
        try {
          if (localInputStream != null)           localInputStream.close();
        }
 catch (        Exception localException8) {
        }
        try {
          if (localFileOutputStream != null)           localFileOutputStream.close();
        }
 catch (        Exception localException9) {
        }
      }
    }
  }
}"
44428,"public synchronized String allocate(AbstractBuild owner,String id,BuildListener buildListener) throws InterruptedException, IOException {
  PrintStream logger=buildListener.getLogger();
  while (ids.get(id) != null) {
    logger.println(""String_Node_Str"" + id + ""String_Node_Str""+ ids.get(id).toString());
    wait();
  }
  ids.put(id,owner);
  return id;
}","public synchronized String allocate(AbstractBuild owner,String id,BuildListener buildListener) throws InterruptedException, IOException {
  PrintStream logger=buildListener.getLogger();
  while (ids.get(id) != null) {
    logger.println(""String_Node_Str"" + id + ""String_Node_Str""+ ids.get(id).toString());
    wait(10000);
  }
  ids.put(id,owner);
  return id;
}"
44429,"/** 
 * Deploy this resource.
 * @param resource
 * @param options
 */
public void deployResource(Resource resource,int options){
  Resolver resolver=repositoryAdmin.resolver();
  resolver.add(resource);
  int resolveAttempt=5;
  while (resolveAttempt-- > 0) {
    try {
      if (resolver.resolve(options)) {
        resolver.deploy(options);
        break;
      }
 else {
        Reason[] reqs=resolver.getUnsatisfiedRequirements();
        for (int i=0; i < reqs.length; i++) {
          ClassServiceUtility.log(bundleContext,LogService.LOG_ERROR,""String_Node_Str"" + reqs[i]);
        }
        break;
      }
    }
 catch (    IllegalStateException e) {
      if (resolveAttempt == 0)       e.printStackTrace();
    }
  }
}","/** 
 * Deploy this resource.
 * @param resource
 * @param options
 */
public void deployResource(Resource resource,int options){
  String name=resource.getSymbolicName() + ""String_Node_Str"" + resource.getVersion();
  Lock lock=this.getLock(name);
  try {
    boolean acquired=lock.tryLock();
    if (acquired) {
      try {
        Resolver resolver=repositoryAdmin.resolver();
        resolver.add(resource);
        int resolveAttempt=5;
        while (resolveAttempt-- > 0) {
          try {
            if (resolver.resolve(options)) {
              resolver.deploy(options);
              break;
            }
 else {
              Reason[] reqs=resolver.getUnsatisfiedRequirements();
              for (int i=0; i < reqs.length; i++) {
                ClassServiceUtility.log(bundleContext,LogService.LOG_ERROR,""String_Node_Str"" + reqs[i]);
              }
              break;
            }
          }
 catch (          IllegalStateException e) {
            if (resolveAttempt == 0)             e.printStackTrace();
          }
        }
      }
  finally {
        lock.unlock();
      }
    }
 else {
      acquired=lock.tryLock(secondsToWait,TimeUnit.SECONDS);
      if (acquired) {
        try {
        }
  finally {
          lock.unlock();
        }
      }
 else {
      }
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    this.removeLock(name);
  }
}"
44430,"public java.util.Date getDob(){
  return this._dob;
}","public VarioDate getDob(){
  return this._dob;
}"
44431,"public void setDob(java.util.Date dob){
  this._dob=dob;
}","public void setDob(VarioDate dob){
  this._dob=dob;
}"
44432,"public static void main(String[] args) throws Exception {
  HashMap<String,String> typeMap=new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
;
  GenerateSimpleXMLCode xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu.printExampleElements(typeMap);
  xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  if (true)   System.exit(1);
  xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu.printExampleElements(typeMap);
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  if (true)   return;
  xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu.printExampleElements(typeMap);
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(TEXT_NODE,""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(TEXT_NODE,""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(TEXT_NODE,""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
}","public static void main(String[] args) throws Exception {
  HashMap<String,String> typeMap=new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
;
  GenerateSimpleXMLCode xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  if (true)   System.exit(1);
  xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu.printExampleElements(typeMap);
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  if (true)   return;
  xu=GenerateSimpleXMLCode.createInstance(""String_Node_Str"");
  xu.printExampleElements(typeMap);
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(TEXT_NODE,""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(TEXT_NODE,""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(TEXT_NODE,""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
  xu.generateCode(""String_Node_Str"",""String_Node_Str"",x(typeMap,new HashMap<String,String>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
}"
44433,"public static void main(String[] args) throws Exception {
  if (args.length == 0)   Util.fatal(HTMLDocumentGenerator.class,""String_Node_Str"");
  RNGMetadataAPI app=RNGMetadataAPI.createInstance(args[0]);
  HTMLDocumentGenerator gener=new HTMLDocumentGenerator(""String_Node_Str"");
  gener.HTMLHeader(""String_Node_Str"");
  NodeList nodes=app.findAllXMLNodes(""String_Node_Str"");
  for (int i=0; i < nodes.getLength(); i++) {
    MetaData data=app.createMetaDataObject(nodes.item(i),true);
    gener.generate(data);
  }
  gener.HTMLEnd();
}","public static void main(String[] args) throws Exception {
  if (args.length < 2)   Util.fatal(HTMLDocumentGenerator.class,""String_Node_Str"");
  List<String> argsStr=new ArrayList<String>();
  for (int i=0; i < args.length - 1; i++) {
    System.err.println(args[i]);
    argsStr.add(args[i]);
  }
  RNGMetadataAPI app=RNGMetadataAPI.createInstance(argsStr.toArray(new String[args.length - 1]));
  HTMLDocumentGenerator gener=new HTMLDocumentGenerator(args[args.length - 1]);
  gener.HTMLHeader(""String_Node_Str"");
  List<org.w3c.dom.Node> nodes=app.findAllXMLNodesOrDie(""String_Node_Str"");
  for (int i=0; i < nodes.size(); i++) {
    MetaData data=app.createMetaDataObject(nodes.get(i),true);
    gener.generate(data);
  }
  gener.HTMLEnd();
}"
44434,"public void generate(MetaData data){
  String type=getType(data.patternList);
  if (type.length() > 0) {
    type=""String_Node_Str"" + type + ""String_Node_Str""+ type+ ""String_Node_Str"";
  }
  p(""String_Node_Str"" + data.name + type+ ""String_Node_Str"");
  List<MetaData> props=data.properties;
  boolean hasAttribs=false;
  boolean hasElems=false;
  for (  MetaData d : props) {
    hasAttribs=hasAttribs || d.nodeType == MetaData.XML_ATTRIBUTE;
    hasElems=hasElems || d.nodeType == MetaData.XML_ELEMENT;
  }
  if (hasAttribs) {
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    for (    MetaData d : props) {
      if (d.nodeType == MetaData.XML_ATTRIBUTE) {
        p(""String_Node_Str"" + d.name + ""String_Node_Str""+ d.dataType+ ""String_Node_Str""+ RNGMetadataAPI.cardinToString(d.min,d.max)+ ""String_Node_Str""+ RNGMetadataAPI.listToString(d.choiceList)+ ""String_Node_Str"");
      }
      ;
    }
    p(""String_Node_Str"");
    p(""String_Node_Str"");
  }
  if (hasElems) {
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    for (    MetaData d : props) {
      if (d.nodeType == MetaData.XML_ELEMENT) {
        if (!d.isChoiceGroup) {
          String typeStr=""String_Node_Str"";
          if (d.patternList.size() > 0) {
            typeStr=""String_Node_Str"" + getType(d.patternList) + ""String_Node_Str""+ getType(d.patternList)+ ""String_Node_Str"";
          }
          p(""String_Node_Str"" + d.name + ""String_Node_Str""+ typeStr+ ""String_Node_Str""+ RNGMetadataAPI.cardinToString(d.min,d.max)+ ""String_Node_Str""+ RNGMetadataAPI.listToString(d.choiceList)+ ""String_Node_Str"");
          ;
        }
 else {
          p(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + RNGMetadataAPI.cardinToString(d.min,d.max) + ""String_Node_Str""+ RNGMetadataAPI.propertiesToString(d)+ ""String_Node_Str"");
          ;
        }
      }
    }
    p(""String_Node_Str"");
    p(""String_Node_Str"");
  }
  if (data.hasTextNode) {
    p(""String_Node_Str"");
  }
  p(""String_Node_Str"" + data.documentation + ""String_Node_Str"");
}","public void generate(MetaData data){
  String type=getType(data.patternList);
  if (type.length() > 0) {
    type=""String_Node_Str"" + type + ""String_Node_Str""+ type+ ""String_Node_Str"";
  }
  p(""String_Node_Str"" + data.name + type+ ""String_Node_Str"");
  List<MetaData> props=data.properties;
  boolean hasAttribs=false;
  boolean hasElems=false;
  for (  MetaData d : props) {
    hasAttribs=hasAttribs || d.nodeType == MetaData.XML_ATTRIBUTE;
    hasElems=hasElems || d.nodeType == MetaData.XML_ELEMENT;
  }
  if (hasAttribs) {
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    for (    MetaData d : props) {
      if (d.nodeType == MetaData.XML_ATTRIBUTE) {
        p(""String_Node_Str"" + d.name + ""String_Node_Str""+ d.dataType+ ""String_Node_Str""+ RNGMetadataAPI.cardinToString(d.min,d.max)+ ""String_Node_Str""+ RNGMetadataAPI.listToString(d.choiceList)+ ""String_Node_Str"");
      }
      ;
    }
    p(""String_Node_Str"");
    p(""String_Node_Str"");
  }
  if (hasElems) {
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    p(""String_Node_Str"");
    for (    MetaData d : props) {
      if (d.nodeType == MetaData.XML_ELEMENT) {
        if (!d.isChoiceGroup) {
          String typeStr=""String_Node_Str"";
          if (d.patternList.size() > 0) {
            typeStr=""String_Node_Str"" + getType(d.patternList) + ""String_Node_Str""+ getType(d.patternList)+ ""String_Node_Str"";
          }
          p(""String_Node_Str"" + d.name + ""String_Node_Str""+ typeStr+ ""String_Node_Str""+ RNGMetadataAPI.cardinToString(d.min,d.max)+ ""String_Node_Str""+ RNGMetadataAPI.listToString(d.choiceList)+ ""String_Node_Str"");
          ;
        }
 else {
          p(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + RNGMetadataAPI.cardinToString(d.min,d.max) + ""String_Node_Str""+ (d.properties.size() > 0 ? RNGMetadataAPI.propertiesToString(d) : ""String_Node_Str"")+ ""String_Node_Str"");
          ;
        }
      }
    }
    p(""String_Node_Str"");
    p(""String_Node_Str"");
  }
  if (data.hasTextNode) {
    p(""String_Node_Str"" + data.dataType + ""String_Node_Str"");
  }
  p(""String_Node_Str"" + data.documentation + ""String_Node_Str"");
}"
44435,"public Placer(GameTile placing,Glyphs.Play glyph){
  _placing=placing;
  _glyph=glyph;
  Rectangle tbounds=new Rectangle(Media.TERRAIN_SIZE);
  for (  Location ploc : _ctrl.logic.computeLegalPlays(placing)) {
    final Glyphs.Target target=new Glyphs.Target(Atlantis.media.getTargetTile(),ploc);
    target.layer.setZOrder(-1);
    tiles.add(target.layer);
    _targets.add(target);
    Atlantis.input.register(target.layer,tbounds,new Input.Action(){
      public void onTrigger(){
        activateTarget(target);
      }
    }
);
  }
}","public Placer(GameTile placing,Glyphs.Play glyph){
  _placing=placing;
  _glyph=glyph;
  Rectangle tbounds=new Rectangle(Media.TERRAIN_SIZE);
  for (  Location ploc : _ctrl.logic.computeLegalPlays(placing)) {
    final Glyphs.Target target=new Glyphs.Target(Atlantis.media.getTargetTile(),ploc);
    target.layer.setDepth(-1);
    tiles.add(target.layer);
    _targets.add(target);
    Atlantis.input.register(target.layer,tbounds,new Input.Action(){
      public void onTrigger(){
        activateTarget(target);
      }
    }
);
  }
}"
44436,"protected void showPiecenScoreAnimation(Piecen p,int score){
  Glyphs.Play pglyph=_pglyphs.get(p.loc);
  final TextGlyph sglyph=TextGlyph.forText(""String_Node_Str"" + score,SCORE_FORMAT);
  float swidth=sglyph.layer.canvas().width(), sheight=sglyph.layer.canvas().height();
  sglyph.layer.setOrigin(swidth / 2f,sheight);
  tiles.add(sglyph.layer);
  Feature f=pglyph.tile.terrain.features[p.featureIdx];
  Point start=Input.layerToParent(pglyph.layer,tiles,f.piecenSpot,new Point());
  Atlantis.anim.tweenXY(sglyph.layer).in(2000f).easeIn().from(start.x,start.y).to(start.x,start.y - sheight).then().action(new Runnable(){
    public void run(){
      sglyph.layer.destroy();
    }
  }
);
  Atlantis.anim.tweenAlpha(sglyph.layer).in(2000f).easeIn().from(1f).to(0f);
}","protected void showPiecenScoreAnimation(Piecen p,int score){
  Glyphs.Play pglyph=_pglyphs.get(p.loc);
  final TextGlyph sglyph=TextGlyph.forText(""String_Node_Str"" + score,SCORE_FORMAT.withTextColor(Media.PIECEN_COLORS[p.ownerIdx]));
  float swidth=sglyph.layer.canvas().width(), sheight=sglyph.layer.canvas().height();
  sglyph.layer.setOrigin(swidth / 2f,sheight);
  tiles.add(sglyph.layer);
  Feature f=pglyph.tile.terrain.features[p.featureIdx];
  Point start=Input.layerToParent(pglyph.layer,tiles,f.piecenSpot,new Point());
  Atlantis.anim.tweenXY(sglyph.layer).in(2000f).easeOut().from(start.x,start.y).to(start.x,start.y - sheight).then().action(new Runnable(){
    public void run(){
      sglyph.layer.destroy();
    }
  }
);
  Atlantis.anim.tweenAlpha(sglyph.layer).in(2000f).easeOut().from(1f).to(0f);
}"
44437,"public Board(){
  float width=graphics().width(), height=graphics().height();
  SurfaceLayer bground=graphics().createSurfaceLayer((int)width,(int)height);
  bground.surface().setFillPattern(graphics().createPattern(Atlantis.media.getTableImage()));
  bground.surface().fillRect(0,0,width,height);
  bground.setZOrder(-1);
  tiles.setZOrder(0);
  scores.layer.setZOrder(+1);
  flight.setZOrder(+2);
  graphics().rootLayer().add(bground);
  graphics().rootLayer().add(tiles);
  graphics().rootLayer().add(scores.layer);
  graphics().rootLayer().add(flight);
  SurfaceLayer grid=graphics().createSurfaceLayer((int)width,(int)height);
  grid.surface().drawLine(0f,height / 2,width,height / 2,1f);
  grid.surface().drawLine(width / 2,0f,width / 2,height,1f);
  grid.setZOrder(+3);
  graphics().rootLayer().add(grid);
}","public Board(){
  float width=graphics().width(), height=graphics().height();
  SurfaceLayer bground=graphics().createSurfaceLayer((int)width,(int)height);
  bground.surface().setFillPattern(graphics().createPattern(Atlantis.media.getTableImage()));
  bground.surface().fillRect(0,0,width,height);
  bground.setDepth(-1);
  tiles.setDepth(0);
  scores.layer.setDepth(+1);
  flight.setDepth(+2);
  graphics().rootLayer().add(bground);
  graphics().rootLayer().add(tiles);
  graphics().rootLayer().add(scores.layer);
  graphics().rootLayer().add(flight);
  SurfaceLayer grid=graphics().createSurfaceLayer((int)width,(int)height);
  grid.surface().drawLine(0f,height / 2,width,height / 2,1f);
  grid.surface().drawLine(width / 2,0f,width / 2,height,1f);
  grid.setDepth(+3);
  graphics().rootLayer().add(grid);
}"
44438,"protected void activateTarget(Glyphs.Target target){
  if (_active != null) {
    _active.layer.setVisible(true);
  }
  _active=target;
  _active.layer.setVisible(false);
  int mypidx=_gobj.turnHolder.get();
  restoreZoom();
  if (_ctrls == null) {
    GroupLayer scores=_glyph.layer.parent();
    scores.remove(_glyph.layer);
    flight.add(_glyph.layer);
    _glyph.layer.setZOrder(+1);
    _glyph.layer.transform().translate(scores.transform().tx() - tiles.transform().tx(),scores.transform().ty() - tiles.transform().ty());
    _ctrls=new Glyphs.Tile();
    _ctrls.layer.setZOrder(+2);
    float twidth=Media.TERRAIN_WIDTH, theight=Media.TERRAIN_HEIGHT;
    float awidth=Media.ACTION_WIDTH, aheight=Media.ACTION_HEIGHT;
    _ctrls.layer.add(_rotate=Atlantis.media.getActionTile(Media.ROTATE_ACTION));
    _ctrls.layer.add(_nopiecen=Atlantis.media.getActionTile(Media.NOPIECEN_ACTION));
    _nopiecen.setTranslation(twidth,theight);
    _ctrls.layer.add(_cancel=Atlantis.media.getActionTile(Media.CANCEL_ACTION));
    _cancel.setTranslation(0,theight);
    _ctrls.layer.add(_placep=Atlantis.media.getPiecenTile(mypidx));
    _placep.setTranslation(twidth,theight);
    _placep.setAlpha(0.5f);
    tiles.add(_ctrls.layer);
    _piecens=graphics().createGroupLayer();
    Rectangle pbounds=new Rectangle(Media.PIECEN_SIZE);
    for (int fidx=0; fidx < _placing.terrain.features.length; fidx++) {
      Feature f=_placing.terrain.features[fidx];
      ImageLayer pimg=Atlantis.media.getPiecenTile(mypidx);
      pimg.setTranslation(f.piecenSpot.getX(),f.piecenSpot.getY());
      _piecens.add(pimg);
      final Piecen p=new Piecen(mypidx,_active.loc,fidx);
      Atlantis.input.register(new Input.LayerReactor(pimg,pbounds){
        @Override public boolean hitTest(        IPoint p){
          return _piecens.visible() && super.hitTest(p);
        }
        public void onTrigger(){
          commitPlacement(p);
        }
      }
);
    }
    _glyph.layer.add(_piecens);
    IRectangle abounds=new Rectangle(Media.ACTION_SIZE);
    Atlantis.input.register(_rotate,abounds,new Input.Action(){
      public void onTrigger(){
        int cidx=_orients.indexOf(_glyph.getOrient());
        _glyph.setOrient(_orients.get((cidx + 1) % _orients.size()),true);
      }
    }
);
    Atlantis.input.register(_nopiecen,abounds,new Input.Action(){
      public void onTrigger(){
        commitPlacement(null);
      }
    }
);
    Atlantis.input.register(_cancel,abounds,new Input.Action(){
      public void onTrigger(){
        restoreZoom();
        showConsiderControls();
      }
    }
);
    Atlantis.input.register(_placep,pbounds,new Input.Action(){
      public void onTrigger(){
        zoomInOn(_active);
        showCommitControls();
      }
    }
);
  }
  _ctrls.layer.setVisible(false);
  _ctrls.setLocation(_active.loc,false,null);
  _orients=_ctrl.logic.computeLegalOrients(_placing,_active.loc);
  if (!_orients.contains(_glyph.getOrient())) {
    _glyph.setOrient(_orients.get(0),true);
  }
  _glyph.setLocation(_active.loc,true,new Runnable(){
    public void run(){
      if (_glyph.layer.parent() == flight) {
        flight.remove(_glyph.layer);
        tiles.add(_glyph.layer);
      }
      _ctrls.layer.setVisible(true);
    }
  }
);
  showConsiderControls();
}","protected void activateTarget(Glyphs.Target target){
  if (_active != null) {
    _active.layer.setVisible(true);
  }
  _active=target;
  _active.layer.setVisible(false);
  final int mypidx=_gobj.turnHolder.get();
  restoreZoom();
  if (_ctrls == null) {
    GroupLayer scores=_glyph.layer.parent();
    scores.remove(_glyph.layer);
    flight.add(_glyph.layer);
    _glyph.layer.setDepth(+1);
    _glyph.layer.transform().translate(scores.transform().tx() - tiles.transform().tx(),scores.transform().ty() - tiles.transform().ty());
    _ctrls=new Glyphs.Tile();
    _ctrls.layer.setDepth(+2);
    float twidth=Media.TERRAIN_WIDTH, theight=Media.TERRAIN_HEIGHT;
    float awidth=Media.ACTION_WIDTH, aheight=Media.ACTION_HEIGHT;
    _ctrls.layer.add(_rotate=Atlantis.media.getActionTile(Media.ROTATE_ACTION));
    _ctrls.layer.add(_nopiecen=Atlantis.media.getActionTile(Media.NOPIECEN_ACTION));
    _nopiecen.setTranslation(twidth,theight);
    _ctrls.layer.add(_cancel=Atlantis.media.getActionTile(Media.CANCEL_ACTION));
    _cancel.setTranslation(0,theight);
    _ctrls.layer.add(_placep=Atlantis.media.getPiecenTile(mypidx));
    _placep.setTranslation(twidth,theight);
    _placep.setAlpha(0.5f);
    tiles.add(_ctrls.layer);
    _piecens=graphics().createGroupLayer();
    Rectangle pbounds=new Rectangle(Media.PIECEN_SIZE);
    for (    final Feature f : _placing.terrain.features) {
      ImageLayer pimg=Atlantis.media.getPiecenTile(mypidx);
      pimg.setTranslation(f.piecenSpot.getX(),f.piecenSpot.getY());
      _piecens.add(pimg);
      Atlantis.input.register(new Input.LayerReactor(pimg,pbounds){
        @Override public boolean hitTest(        IPoint p){
          return _piecens.visible() && super.hitTest(p);
        }
        public void onTrigger(){
          commitPlacement(f);
        }
      }
);
    }
    _glyph.layer.add(_piecens);
    IRectangle abounds=new Rectangle(Media.ACTION_SIZE);
    Atlantis.input.register(_rotate,abounds,new Input.Action(){
      public void onTrigger(){
        int cidx=_orients.indexOf(_glyph.getOrient());
        _glyph.setOrient(_orients.get((cidx + 1) % _orients.size()),true);
      }
    }
);
    Atlantis.input.register(_nopiecen,abounds,new Input.Action(){
      public void onTrigger(){
        commitPlacement(null);
      }
    }
);
    Atlantis.input.register(_cancel,abounds,new Input.Action(){
      public void onTrigger(){
        restoreZoom();
        showConsiderControls();
      }
    }
);
    Atlantis.input.register(_placep,pbounds,new Input.Action(){
      public void onTrigger(){
        zoomInOn(_active);
        showCommitControls();
      }
    }
);
  }
  _ctrls.layer.setVisible(false);
  _ctrls.setLocation(_active.loc,false,null);
  _orients=_ctrl.logic.computeLegalOrients(_placing,_active.loc);
  if (!_orients.contains(_glyph.getOrient())) {
    _glyph.setOrient(_orients.get(0),true);
  }
  _glyph.setLocation(_active.loc,true,new Runnable(){
    public void run(){
      if (_glyph.layer.parent() == flight) {
        flight.remove(_glyph.layer);
        tiles.add(_glyph.layer);
      }
      _ctrls.layer.setVisible(true);
    }
  }
);
  showConsiderControls();
}"
44439,"protected void commitPlacement(Piecen piecen){
  _ctrl.place(new Placement(_placing,_glyph.getOrient(),_active.loc),piecen);
  restoreZoom();
}","protected void commitPlacement(Feature f){
  Placement play=new Placement(_placing,_glyph.getOrient(),_active.loc);
  Piecen piecen=(f == null) ? null : new Piecen(_gobj.turnHolder.get(),_active.loc,play.getFeatureIndex(f));
  _ctrl.place(play,piecen);
  restoreZoom();
}"
44440,"public void init(String[] players){
  float ypos=MARGIN;
  TextFormat titleFormat=new TextFormat().withFont(graphics().createFont(""String_Node_Str"",Font.Style.BOLD,24));
  Font nameFont=graphics().createFont(""String_Node_Str"",Font.Style.PLAIN,16);
  TextFormat nameFormat=new TextFormat().withFont(nameFont);
  TextFormat numberFormat=new TextFormat().withFont(nameFont).withAlignment(TextFormat.Alignment.RIGHT);
  TextGlyph title=TextGlyph.forText(""String_Node_Str"",titleFormat);
  title.layer.setTranslation(MARGIN,ypos);
  layer.add(title.layer);
  ypos+=title.layer.canvas().height();
  _turnHolder=graphics().createCanvasLayer(WIDTH,PLAYER_HEIGHT);
  _turnHolder.canvas().setFillColor(0xFF99CCFF);
  _turnHolder.canvas().fillRect(0,0,WIDTH,PLAYER_HEIGHT);
  layer.add(_turnHolder);
  _turnHolder.setVisible(false);
  _playersY=ypos;
  _piecens=new TextGlyph[players.length];
  _scores=new TextGlyph[players.length];
  int pidx=0;
  for (  String player : players) {
    TextGlyph score=(_scores[pidx]=TextGlyph.forTemplate(""String_Node_Str"",numberFormat));
    TextGlyph piecens=(_piecens[pidx]=TextGlyph.forTemplate(""String_Node_Str"",numberFormat));
    ImageLayer piecen=Atlantis.media.getPiecenTile(pidx++);
    int hgap=4, vgap=4, nameWidth=WIDTH - 2 * MARGIN - Media.PIECEN_WIDTH - score.layer.canvas().width() - piecens.layer.canvas().width() - 3 * hgap;
    TextGlyph name=TextGlyph.forWidth(nameWidth,nameFormat);
    name.setText(player);
    float xpos=MARGIN;
    name.layer.setTranslation(xpos,ypos + vgap / 2);
    xpos+=nameWidth + hgap;
    piecen.setTranslation(xpos + Media.PIECEN_WIDTH / 2,ypos + PLAYER_HEIGHT / 2 - 2);
    xpos+=Media.PIECEN_WIDTH + hgap;
    piecens.layer.setTranslation(xpos,ypos + vgap / 2);
    xpos+=piecens.layer.canvas().width() + hgap;
    score.layer.setTranslation(xpos,ypos + vgap / 2);
    layer.add(name.layer);
    layer.add(piecen);
    layer.add(piecens.layer);
    layer.add(score.layer);
    ypos+=Media.PIECEN_HEIGHT + vgap;
  }
  ypos+=MARGIN;
  _remaining=TextGlyph.forTemplate(""String_Node_Str"",nameFormat);
  _remaining.layer.setTranslation(MARGIN,ypos);
  layer.add(_remaining.layer);
  ypos+=_remaining.layer.canvas().height();
  ypos+=MARGIN / 2;
  _nextLabel=TextGlyph.forText(""String_Node_Str"",nameFormat);
  _nextLabel.layer.setTranslation(MARGIN,ypos);
  layer.add(_nextLabel.layer);
  _nextLabel.layer.setVisible(false);
  ypos+=_nextLabel.layer.canvas().height();
  _nextTileY=ypos;
  ypos+=Media.TERRAIN_HEIGHT;
  ypos+=MARGIN;
  CanvasLayer bg=graphics().createCanvasLayer(WIDTH,(int)Math.ceil(ypos));
  bg.canvas().setFillColor(0xFFCCCCCC);
  bg.canvas().fillRect(0,0,WIDTH,ypos);
  layer.add(0,bg);
}","public void init(String[] players){
  float ypos=MARGIN;
  TextFormat titleFormat=new TextFormat().withFont(graphics().createFont(""String_Node_Str"",Font.Style.BOLD,24));
  Font nameFont=graphics().createFont(""String_Node_Str"",Font.Style.PLAIN,16);
  TextFormat nameFormat=new TextFormat().withFont(nameFont);
  TextFormat numberFormat=new TextFormat().withFont(nameFont).withAlignment(TextFormat.Alignment.RIGHT);
  TextGlyph title=TextGlyph.forText(""String_Node_Str"",titleFormat);
  title.layer.setTranslation(MARGIN,ypos);
  layer.add(title.layer);
  ypos+=title.layer.canvas().height();
  _turnHolder=graphics().createCanvasLayer(WIDTH,PLAYER_HEIGHT);
  _turnHolder.canvas().setFillColor(0xFF99CCFF);
  _turnHolder.canvas().fillRect(0,0,WIDTH,PLAYER_HEIGHT);
  layer.add(_turnHolder);
  _turnHolder.setVisible(false);
  _playersY=ypos;
  _piecens=new TextGlyph[players.length];
  _scores=new TextGlyph[players.length];
  int pidx=0;
  for (  String player : players) {
    TextGlyph score=(_scores[pidx]=TextGlyph.forTemplate(""String_Node_Str"",numberFormat));
    TextGlyph piecens=(_piecens[pidx]=TextGlyph.forTemplate(""String_Node_Str"",numberFormat));
    ImageLayer piecen=Atlantis.media.getPiecenTile(pidx++);
    int hgap=4, vgap=4, nameWidth=WIDTH - 2 * MARGIN - Media.PIECEN_WIDTH - score.layer.canvas().width() - piecens.layer.canvas().width() - 3 * hgap;
    TextGlyph name=TextGlyph.forWidth(nameWidth,nameFormat);
    name.setText(player);
    float xpos=MARGIN;
    name.layer.setTranslation(xpos,ypos + vgap / 2);
    xpos+=nameWidth + hgap;
    piecen.setTranslation(xpos + Media.PIECEN_WIDTH / 2,ypos + PLAYER_HEIGHT / 2 - 2);
    xpos+=Media.PIECEN_WIDTH + hgap;
    piecens.layer.setTranslation(xpos,ypos + vgap / 2);
    xpos+=piecens.layer.canvas().width() + hgap;
    score.layer.setTranslation(xpos,ypos + vgap / 2);
    layer.add(name.layer);
    layer.add(piecen);
    layer.add(piecens.layer);
    layer.add(score.layer);
    ypos+=Media.PIECEN_HEIGHT + vgap;
  }
  ypos+=MARGIN;
  _remaining=TextGlyph.forTemplate(""String_Node_Str"",nameFormat);
  _remaining.layer.setTranslation(MARGIN,ypos);
  layer.add(_remaining.layer);
  ypos+=_remaining.layer.canvas().height();
  ypos+=MARGIN / 2;
  _nextLabel=TextGlyph.forText(""String_Node_Str"",nameFormat);
  _nextLabel.layer.setTranslation(MARGIN,ypos);
  layer.add(_nextLabel.layer);
  _nextLabel.layer.setVisible(false);
  ypos+=_nextLabel.layer.canvas().height();
  _nextTileY=ypos;
  ypos+=Media.TERRAIN_HEIGHT;
  ypos+=MARGIN;
  CanvasLayer bg=graphics().createCanvasLayer(WIDTH,(int)Math.ceil(ypos));
  bg.canvas().setFillColor(0xFFCCCCCC);
  bg.canvas().fillRect(0,0,WIDTH,ypos);
  bg.setDepth(-1);
  layer.add(bg);
}"
44441,"public void init(){
  graphics().setSize(1024,768);
  Log.setImpl(new Log.Impl(){
    public void debug(    String message,    Throwable t){
      if (t != null)       log().debug(message,t);
 else       log().debug(message);
    }
    public void info(    String message,    Throwable t){
      if (t != null)       log().info(message,t);
 else       log().info(message);
    }
    public void warning(    String message,    Throwable t){
      if (t != null)       log().warn(message,t);
 else       log().warn(message);
    }
  }
);
  Atlantis.media.init();
  _bground=graphics().createSurfaceLayer(graphics().width(),graphics().height());
  _bground.surface().setFillPattern(graphics().createPattern(Atlantis.media.getTableImage()));
  graphics().rootLayer().add(_bground);
  Board board=new Board();
  graphics().rootLayer().add(board.tiles);
  Scoreboard scores=new Scoreboard();
  scores.init(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  graphics().rootLayer().add(scores.layer);
  float width=graphics().width(), height=graphics().height();
  SurfaceLayer grid=graphics().createSurfaceLayer((int)width,(int)height);
  grid.surface().drawLine(0f,height / 2,width,height / 2,1f);
  grid.surface().drawLine(width / 2,0f,width / 2,height,1f);
  graphics().rootLayer().add(grid);
  GameController ctrl=new GameController(board,scores);
  ctrl.startGame();
}","public void init(){
  graphics().setSize(1024,768);
  Log.setImpl(new Log.Impl(){
    public void debug(    String message,    Throwable t){
      if (t != null)       log().debug(message,t);
 else       log().debug(message);
    }
    public void info(    String message,    Throwable t){
      if (t != null)       log().info(message,t);
 else       log().info(message);
    }
    public void warning(    String message,    Throwable t){
      if (t != null)       log().warn(message,t);
 else       log().warn(message);
    }
  }
);
  Atlantis.media.init();
  _bground=graphics().createSurfaceLayer(graphics().width(),graphics().height());
  _bground.surface().setFillPattern(graphics().createPattern(Atlantis.media.getTableImage()));
  graphics().rootLayer().add(_bground);
  Board board=new Board();
  graphics().rootLayer().add(board.tiles);
  Scoreboard scores=new Scoreboard();
  scores.init(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  graphics().rootLayer().add(scores.layer);
  graphics().rootLayer().add(board.flight);
  float width=graphics().width(), height=graphics().height();
  SurfaceLayer grid=graphics().createSurfaceLayer((int)width,(int)height);
  grid.surface().drawLine(0f,height / 2,width,height / 2,1f);
  grid.surface().drawLine(width / 2,0f,width / 2,height,1f);
  graphics().rootLayer().add(grid);
  GameController ctrl=new GameController(board,scores);
  ctrl.startGame();
}"
44442,"/** 
 * Loads up our resources and performs other one-time initialization tasks.
 */
public void init(GameController ctrl){
  _ctrl=ctrl;
  Rectangle sbounds=new Rectangle(0,0,graphics().width(),graphics().height());
  Atlantis.input.register(sbounds,new Pointer.Listener(){
    @Override public void onPointerStart(    float x,    float y){
      _drag=new Point(x,y);
    }
    @Override public void onPointerDrag(    float x,    float y){
      if (_drag != null) {
        tiles.setTranslation(tiles.transform().tx() + (x - _drag.x),tiles.transform().ty() + (y - _drag.y));
        _drag.set(x,y);
      }
    }
    @Override public void onPointerEnd(    float x,    float y){
      _drag=null;
    }
    protected Point _drag;
  }
);
  _origin=sbounds.getCenter();
  tiles.setTranslation(_origin.x,_origin.y);
}","/** 
 * Loads up our resources and performs other one-time initialization tasks.
 */
public void init(GameController ctrl){
  _ctrl=ctrl;
  Rectangle sbounds=new Rectangle(0,0,graphics().width(),graphics().height());
  Atlantis.input.register(sbounds,new Pointer.Listener(){
    @Override public void onPointerStart(    float x,    float y){
      _drag=new Point(x,y);
    }
    @Override public void onPointerDrag(    float x,    float y){
      if (_drag != null) {
        float ntx=tiles.transform().tx() + (x - _drag.x);
        float nty=tiles.transform().ty() + (y - _drag.y);
        tiles.setTranslation(ntx,nty);
        flight.setTranslation(ntx,nty);
        _drag.set(x,y);
      }
    }
    @Override public void onPointerEnd(    float x,    float y){
      _drag=null;
    }
    protected Point _drag;
  }
);
  _origin=sbounds.getCenter();
  tiles.setTranslation(_origin.x,_origin.y);
  flight.setTranslation(_origin.x,_origin.y);
}"
44443,"@Override public void onPointerDrag(float x,float y){
  if (_drag != null) {
    tiles.setTranslation(tiles.transform().tx() + (x - _drag.x),tiles.transform().ty() + (y - _drag.y));
    _drag.set(x,y);
  }
}","@Override public void onPointerDrag(float x,float y){
  if (_drag != null) {
    float ntx=tiles.transform().tx() + (x - _drag.x);
    float nty=tiles.transform().ty() + (y - _drag.y);
    tiles.setTranslation(ntx,nty);
    flight.setTranslation(ntx,nty);
    _drag.set(x,y);
  }
}"
44444,"public void run(){
  _ctrls.layer.setVisible(true);
  _placep.setVisible(true);
}","public void run(){
  if (_glyph.layer.parent() == flight) {
    flight.remove(_glyph.layer);
    tiles.add(0,_glyph.layer);
  }
  _ctrls.layer.setVisible(true);
  _placep.setVisible(true);
}"
44445,"protected void activateTarget(Glyphs.Target target){
  if (_active != null) {
    _active.layer.setVisible(true);
  }
  _active=target;
  _active.layer.setVisible(false);
  int mypidx=0;
  restoreZoom();
  if (_ctrls == null) {
    GroupLayer scores=_glyph.layer.parent();
    scores.remove(_glyph.layer);
    tiles.add(_glyph.layer);
    _glyph.layer.transform().translate(scores.transform().tx() - tiles.transform().tx(),scores.transform().ty() - tiles.transform().ty());
    _ctrls=new Glyphs.Tile();
    float quadw=Media.TERRAIN_WIDTH / 2, quadh=Media.TERRAIN_HEIGHT / 2;
    _ctrls.layer.add(_rotate=Atlantis.media.getActionTile(Media.ROTATE_ACTION));
    _rotate.setTranslation(quadw / 2,quadh / 2);
    _ctrls.layer.add(_commit=Atlantis.media.getActionTile(Media.OK_ACTION));
    _commit.setTranslation(3 * quadw / 2,3 * quadh / 2);
    _ctrls.layer.add(_placep=Atlantis.media.getPiecenTile(mypidx));
    _placep.setTranslation(3 * quadw / 2,3 * quadh / 2);
    _placep.setAlpha(0.5f);
    tiles.add(_ctrls.layer);
    _piecens=graphics().createGroupLayer();
    Rectangle pbounds=new Rectangle(Media.PIECEN_SIZE);
    for (int fidx=0; fidx < _placing.terrain.features.length; fidx++) {
      Feature f=_placing.terrain.features[fidx];
      ImageLayer pimg=Atlantis.media.getPiecenTile(mypidx);
      pimg.setTranslation(f.piecenSpot.getX(),f.piecenSpot.getY());
      _piecens.add(pimg);
      final Piecen p=new Piecen(Piecen.Color.values()[mypidx],_active.loc,fidx);
      Atlantis.input.register(new Input.LayerReactor(pimg,pbounds){
        @Override public boolean hitTest(        IPoint p){
          return _piecens.visible() && super.hitTest(p);
        }
        public void onTrigger(){
          commitPlacement(p);
        }
      }
);
    }
    _glyph.layer.add(_piecens);
    IRectangle abounds=new Rectangle(Media.ACTION_SIZE);
    Atlantis.input.register(_rotate,abounds,new Input.Action(){
      public void onTrigger(){
        int cidx=_orients.indexOf(_glyph.getOrient());
        _glyph.setOrient(_orients.get((cidx + 1) % _orients.size()),true);
      }
    }
);
    Atlantis.input.register(_commit,abounds,new Input.Action(){
      public void onTrigger(){
        commitPlacement(null);
      }
    }
);
    Atlantis.input.register(_placep,pbounds,new Input.Action(){
      public void onTrigger(){
        _placep.setVisible(false);
        zoomInOn(_active);
        _piecens.setVisible(true);
        int idx=0;
        for (        Feature f : _placing.terrain.features) {
          int claim=Logic.computeClaim(_plays,_placing,_glyph.getOrient(),_active.loc,f);
          _piecens.get(idx).setVisible(claim == 0);
          idx++;
        }
        _commit.setVisible(true);
      }
    }
);
  }
  _ctrls.layer.setVisible(false);
  _piecens.setVisible(false);
  _orients=Logic.computeLegalOrients(_plays,_placing,_active.loc);
  if (!_orients.contains(_glyph.getOrient())) {
    _glyph.setOrient(_orients.get(0),true);
  }
  _glyph.setLocation(_active.loc,true,new Runnable(){
    public void run(){
      _ctrls.layer.setVisible(true);
      _placep.setVisible(true);
    }
  }
);
  _ctrls.setLocation(_active.loc,false,null);
  boolean canRotate=(_orients.size() > 1);
  _rotate.setVisible(canRotate);
  boolean havePiecens=true;
  _placep.setVisible(false);
  _commit.setVisible(!havePiecens);
}","protected void activateTarget(Glyphs.Target target){
  if (_active != null) {
    _active.layer.setVisible(true);
  }
  _active=target;
  _active.layer.setVisible(false);
  int mypidx=0;
  restoreZoom();
  if (_ctrls == null) {
    GroupLayer scores=_glyph.layer.parent();
    scores.remove(_glyph.layer);
    flight.add(_glyph.layer);
    _glyph.layer.transform().translate(scores.transform().tx() - tiles.transform().tx(),scores.transform().ty() - tiles.transform().ty());
    _ctrls=new Glyphs.Tile();
    float quadw=Media.TERRAIN_WIDTH / 2, quadh=Media.TERRAIN_HEIGHT / 2;
    _ctrls.layer.add(_rotate=Atlantis.media.getActionTile(Media.ROTATE_ACTION));
    _rotate.setTranslation(quadw / 2,quadh / 2);
    _ctrls.layer.add(_commit=Atlantis.media.getActionTile(Media.OK_ACTION));
    _commit.setTranslation(3 * quadw / 2,3 * quadh / 2);
    _ctrls.layer.add(_placep=Atlantis.media.getPiecenTile(mypidx));
    _placep.setTranslation(3 * quadw / 2,3 * quadh / 2);
    _placep.setAlpha(0.5f);
    tiles.add(_ctrls.layer);
    _piecens=graphics().createGroupLayer();
    Rectangle pbounds=new Rectangle(Media.PIECEN_SIZE);
    for (int fidx=0; fidx < _placing.terrain.features.length; fidx++) {
      Feature f=_placing.terrain.features[fidx];
      ImageLayer pimg=Atlantis.media.getPiecenTile(mypidx);
      pimg.setTranslation(f.piecenSpot.getX(),f.piecenSpot.getY());
      _piecens.add(pimg);
      final Piecen p=new Piecen(Piecen.Color.values()[mypidx],_active.loc,fidx);
      Atlantis.input.register(new Input.LayerReactor(pimg,pbounds){
        @Override public boolean hitTest(        IPoint p){
          return _piecens.visible() && super.hitTest(p);
        }
        public void onTrigger(){
          commitPlacement(p);
        }
      }
);
    }
    _glyph.layer.add(_piecens);
    IRectangle abounds=new Rectangle(Media.ACTION_SIZE);
    Atlantis.input.register(_rotate,abounds,new Input.Action(){
      public void onTrigger(){
        int cidx=_orients.indexOf(_glyph.getOrient());
        _glyph.setOrient(_orients.get((cidx + 1) % _orients.size()),true);
      }
    }
);
    Atlantis.input.register(_commit,abounds,new Input.Action(){
      public void onTrigger(){
        commitPlacement(null);
      }
    }
);
    Atlantis.input.register(_placep,pbounds,new Input.Action(){
      public void onTrigger(){
        _placep.setVisible(false);
        zoomInOn(_active);
        _piecens.setVisible(true);
        int idx=0;
        for (        Feature f : _placing.terrain.features) {
          int claim=Logic.computeClaim(_plays,_placing,_glyph.getOrient(),_active.loc,f);
          _piecens.get(idx).setVisible(claim == 0);
          idx++;
        }
        _commit.setVisible(true);
      }
    }
);
  }
  _ctrls.layer.setVisible(false);
  _piecens.setVisible(false);
  _orients=Logic.computeLegalOrients(_plays,_placing,_active.loc);
  if (!_orients.contains(_glyph.getOrient())) {
    _glyph.setOrient(_orients.get(0),true);
  }
  _glyph.setLocation(_active.loc,true,new Runnable(){
    public void run(){
      if (_glyph.layer.parent() == flight) {
        flight.remove(_glyph.layer);
        tiles.add(0,_glyph.layer);
      }
      _ctrls.layer.setVisible(true);
      _placep.setVisible(true);
    }
  }
);
  _ctrls.setLocation(_active.loc,false,null);
  boolean canRotate=(_orients.size() > 1);
  _rotate.setVisible(canRotate);
  boolean havePiecens=true;
  _placep.setVisible(false);
  _commit.setVisible(!havePiecens);
}"
44446,"public void setNextTile(Glyphs.Play tile){
  _nextLabel.layer.setVisible(tile != null);
  tile.layer.setTranslation(WIDTH / 2,_nextTileY + Media.TERRAIN_HEIGHT / 2);
  layer.add(tile.layer);
  System.out.println(""String_Node_Str"" + tile.layer.transform().tx() + ""String_Node_Str""+ tile.layer.transform().ty());
}","public void setNextTile(Glyphs.Play tile){
  _nextLabel.layer.setVisible(tile != null);
  tile.layer.setTranslation(WIDTH / 2,_nextTileY + Media.TERRAIN_HEIGHT / 2);
  layer.add(tile.layer);
}"
44447,"/** 
 * Computes and returns the set of board positions where the supplied tile can be legally played, given the supplied preexisting plays.
 */
public static Set<Location> computeLegalPlays(Placements plays,GameTile tile){
  Set<Location> locs=Sets.newHashSet();
  for (  Placement play : plays) {
    locs.addAll(play.loc.neighbors());
  }
  for (  Placement play : plays) {
    locs.remove(play.loc);
  }
  OUTER:   for (Iterator<Location> iter=locs.iterator(); iter.hasNext(); ) {
    Location pos=iter.next();
    ORIENT:     for (    Orient orient : Orient.values()) {
      Placement play=new Placement(tile,orient,pos);
      for (      Location npos : pos.neighbors()) {
        Placement neighbor=plays.get(npos);
        if (neighbor != null && !tilesMatch(neighbor,play)) {
          continue ORIENT;
        }
      }
      continue OUTER;
    }
  }
  return locs;
}","/** 
 * Computes and returns the set of board positions where the supplied tile can be legally played, given the supplied preexisting plays.
 */
public static Set<Location> computeLegalPlays(Placements plays,GameTile tile){
  Set<Location> locs=Sets.newHashSet();
  for (  Placement play : plays) {
    locs.addAll(play.loc.neighbors());
  }
  for (  Placement play : plays) {
    locs.remove(play.loc);
  }
  OUTER:   for (Iterator<Location> iter=locs.iterator(); iter.hasNext(); ) {
    Location pos=iter.next();
    ORIENT:     for (    Orient orient : Orient.values()) {
      Placement play=new Placement(tile,orient,pos);
      for (      Location npos : pos.neighbors()) {
        Placement neighbor=plays.get(npos);
        if (neighbor != null && !tilesMatch(neighbor,play)) {
          continue ORIENT;
        }
      }
      continue OUTER;
    }
    iter.remove();
  }
  return locs;
}"
44448,"public void setLocation(int x,int y){
  layer.setTranslation((x + 0.5f) * AtlantisTiles.TERRAIN_WIDTH,(y + 0.5f) * AtlantisTiles.TERRAIN_HEIGHT + hhei);
}","public void setLocation(int x,int y){
  layer.setTranslation((x + 0.5f) * AtlantisTiles.TERRAIN_WIDTH,(y + 0.5f) * AtlantisTiles.TERRAIN_HEIGHT);
}"
44449,"public void setPlacing(Terrain terrain,boolean hasShield){
  if (_placingGlyph != null) {
    _placingGlyph.layer.destroy();
  }
  _placing=play;
  _placingGlyph=new PlayGlyph(terrain,hasShield);
  _placingGlyph.layer.setAlpha(0.5f);
  layer.add(_placingGlyph.layer);
}","public void setPlacing(GameTile tile){
  if (_placingGlyph != null) {
    _placingGlyph.layer.destroy();
  }
  _placing=tile;
  _placingGlyph=new PlayGlyph(tile);
  _placingGlyph.layer.setAlpha(0.5f);
  layer.add(_placingGlyph.layer);
}"
44450,"public PlayGlyph(Terrain terrain,boolean hasShield){
  float hwid=AtlantisTiles.TERRAIN_WIDTH / 2, hhei=AtlantisTiles.TERRAIN_HEIGHT / 2;
  layer=graphics().createGroupLayer();
  layer.setOrigin(hwid,hhei);
  layer.add(Atlantis.tiles.getTerrainTile(terrain.tileIdx));
}","public PlayGlyph(GameTile tile){
  float hwid=AtlantisTiles.TERRAIN_WIDTH / 2, hhei=AtlantisTiles.TERRAIN_HEIGHT / 2;
  layer=graphics().createGroupLayer();
  layer.setOrigin(hwid,hhei);
  layer.add(Atlantis.tiles.getTerrainTile(tile.terrain.tileIdx));
}"
44451,"public void startGame(){
  Set<Placement> plays=new HashSet<Placement>();
  plays.add(new Placement(Terrain.CITY_ONE_ROAD_STRAIGHT,false,Orient.NORTH,0,0));
  _board.reset(plays);
}","public void startGame(){
  Set<Placement> plays=new HashSet<Placement>();
  plays.add(new Placement(GameTile.STARTER,Orient.NORTH,0,0));
  _board.reset(plays);
}"
44452,"/** 
 * Creates a placement with the supplied configuration.
 */
public Placement(Terrain tile,boolean hasShield,Orient orient,int x,int y){
  this.tile=tile;
  this.hasShield=hasShield;
  this.orient=orient;
  this.x=x;
  this.y=y;
  this.claims=new int[tile.features.length];
}","/** 
 * Creates a placement with the supplied configuration.
 */
public Placement(GameTile tile,Orient orient,int x,int y){
  this.tile=tile;
  this.orient=orient;
  this.x=x;
  this.y=y;
  this.claims=new int[tile.features().length];
}"
44453,"@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",tile).add(""String_Node_Str"",hasShield).add(""String_Node_Str"",orient).add(""String_Node_Str"",Points.pointToString(x,y)).add(""String_Node_Str"",claims).add(""String_Node_Str"",piecen).toString();
}","@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",tile).add(""String_Node_Str"",orient).add(""String_Node_Str"",Points.pointToString(x,y)).add(""String_Node_Str"",claims).add(""String_Node_Str"",piecen).toString();
}"
44454,"/** 
 * Returns the index of the feature that contains the supplied mouse coordinates (which will have been translated relative to the tile's origin).
 * @return the index of the feature that contains the mouse coordinates. Some feature shouldalways contain the mouse.
 */
public int getFeatureIndex(int mouseX,int mouseY){
  for (int ii=tile.features.length - 1; ii >= 0; ii--) {
    if (tile.features[ii].contains(mouseX,mouseY,orient)) {
      return ii;
    }
  }
  Log.warning(""String_Node_Str"",""String_Node_Str"",this,""String_Node_Str"",mouseX,""String_Node_Str"",mouseY);
  return 0;
}","/** 
 * Returns the index of the feature that contains the supplied mouse coordinates (which will have been translated relative to the tile's origin).
 * @return the index of the feature that contains the mouse coordinates. Some feature shouldalways contain the mouse.
 */
public int getFeatureIndex(int mouseX,int mouseY){
  Feature[] features=tile.features();
  for (int ii=features.length - 1; ii >= 0; ii--) {
    if (features[ii].contains(mouseX,mouseY,orient)) {
      return ii;
    }
  }
  Log.warning(""String_Node_Str"",""String_Node_Str"",this,""String_Node_Str"",mouseX,""String_Node_Str"",mouseY);
  return 0;
}"
44455,"/** 
 * Route plan using osrm server.
 * @param param
 * @param host_port
 * @param http
 * @return
 * @throws IOException
 * @throws ParseException
 * @throws JAXBException
 * @throws InterruptedException
 */
public AbstractResponseParametersType routePlan(DetermineRouteRequestType param,String host_port,String http,Locale locale) throws IOException, JAXBException, ParseException, InterruptedException {
  DetermineRouteResponseType res=new DetermineRouteResponseType();
  RouteSummaryType routeSummary=new RouteSummaryType();
  RouteHandleType routeHandle=new RouteHandleType();
  RouteInstructionsListType routeInstructionsList=new RouteInstructionsListType();
  try {
    RouteGeometryType routeGeometry=new RouteGeometryType();
    WayPointListType wayPointList=param.getRoutePlan().getWayPointList();
    String url=http + ""String_Node_Str"" + host_port+ ""String_Node_Str"";
    CoordinateReferenceSystem sourceCRS=CRS.decode(EPSG_4326);
    CoordinateReferenceSystem targetCRS=GeoUtil.getSRS(wayPointList.getStartPoint());
    Point point=GeoUtil.getPoint(wayPointList.getStartPoint(),sourceCRS);
    url+=""String_Node_Str"" + point.getY() + ""String_Node_Str""+ point.getX();
    point=GeoUtil.getPoint(wayPointList.getEndPoint(),sourceCRS);
    url+=""String_Node_Str"" + point.getY() + ""String_Node_Str""+ point.getX();
    for (    WayPointType wayPoint : wayPointList.getViaPoint()) {
      point=GeoUtil.getPoint(wayPoint,sourceCRS);
      url+=""String_Node_Str"" + point.getY() + ""String_Node_Str""+ point.getX();
    }
    LOG.info(url);
    LineStringType lst=new LineStringType();
    lst.setSrsName(targetCRS.getName().getCode());
    JsonFactory f=new JsonFactory();
    JsonParser jp=f.createJsonParser(new URL(url));
    jp.nextToken();
    while (jp.nextToken() != JsonToken.END_OBJECT && jp.getCurrentToken() != null) {
      String fieldname=jp.getCurrentName();
      if (fieldname == null)       ;
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        DistanceType duration=new DistanceType();
        duration.setUom(DistanceUnitType.M);
        duration.setValue(new BigDecimal(jp.getText()));
        routeSummary.setTotalDistance(duration);
      }
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        Duration duration=dataTypeFactory.newDuration(true,0,0,0,0,0,jp.getIntValue());
        routeSummary.setTotalTime(duration);
      }
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        decodeRouteGeometry(lst.getPosOrPointPropertyOrPointRep(),targetCRS,sourceCRS,jp);
      }
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        processInstructions(locale,routeSummary,routeInstructionsList,jp);
      }
      jp.nextToken();
    }
    jp.close();
    routeGeometry.setLineString(lst);
    res.setRouteGeometry(routeGeometry);
    res.setRouteHandle(routeHandle);
    if (param.getRouteInstructionsRequest() != null)     res.setRouteInstructionsList(routeInstructionsList);
    res.getRouteInstructionsList().setFormat(MediaType.TEXT_PLAIN);
    res.getRouteInstructionsList().setLang(locale.getLanguage());
    res.setRouteSummary(routeSummary);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + t,t);
    t.printStackTrace();
  }
  return res;
}","/** 
 * Route plan using osrm server.
 * @param param
 * @param host_port
 * @param http
 * @return
 * @throws IOException
 * @throws ParseException
 * @throws JAXBException
 * @throws InterruptedException
 */
public AbstractResponseParametersType routePlan(DetermineRouteRequestType param,String host_port,String http,Locale locale) throws IOException, JAXBException, ParseException, InterruptedException {
  DetermineRouteResponseType res=new DetermineRouteResponseType();
  RouteSummaryType routeSummary=new RouteSummaryType();
  RouteHandleType routeHandle=new RouteHandleType();
  RouteInstructionsListType routeInstructionsList=new RouteInstructionsListType();
  try {
    RouteGeometryType routeGeometry=new RouteGeometryType();
    WayPointListType wayPointList=param.getRoutePlan().getWayPointList();
    String url=http + ""String_Node_Str"" + host_port+ ""String_Node_Str"";
    CoordinateReferenceSystem sourceCRS=CRS.decode(EPSG_4326);
    CoordinateReferenceSystem targetCRS=GeoUtil.getSRS(wayPointList.getStartPoint());
    Point point=GeoUtil.getPoint(wayPointList.getStartPoint(),sourceCRS);
    url+=""String_Node_Str"" + point.getY() + ""String_Node_Str""+ point.getX();
    for (    WayPointType wayPoint : wayPointList.getViaPoint()) {
      point=GeoUtil.getPoint(wayPoint,sourceCRS);
      url+=""String_Node_Str"" + point.getY() + ""String_Node_Str""+ point.getX();
    }
    point=GeoUtil.getPoint(wayPointList.getEndPoint(),sourceCRS);
    url+=""String_Node_Str"" + point.getY() + ""String_Node_Str""+ point.getX();
    LOG.info(url);
    LineStringType lst=new LineStringType();
    lst.setSrsName(targetCRS.getName().getCode());
    JsonFactory f=new JsonFactory();
    JsonParser jp=f.createJsonParser(new URL(url));
    jp.nextToken();
    while (jp.nextToken() != JsonToken.END_OBJECT && jp.getCurrentToken() != null) {
      String fieldname=jp.getCurrentName();
      if (fieldname == null)       ;
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        DistanceType duration=new DistanceType();
        duration.setUom(DistanceUnitType.M);
        duration.setValue(new BigDecimal(jp.getText()));
        routeSummary.setTotalDistance(duration);
      }
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        Duration duration=dataTypeFactory.newDuration(true,0,0,0,0,0,jp.getIntValue());
        routeSummary.setTotalTime(duration);
      }
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        decodeRouteGeometry(lst.getPosOrPointPropertyOrPointRep(),targetCRS,sourceCRS,jp);
      }
 else       if (jp.getCurrentName().equals(""String_Node_Str"")) {
        processInstructions(locale,routeSummary,routeInstructionsList,jp);
      }
      jp.nextToken();
    }
    jp.close();
    routeGeometry.setLineString(lst);
    res.setRouteGeometry(routeGeometry);
    res.setRouteHandle(routeHandle);
    if (param.getRouteInstructionsRequest() != null)     res.setRouteInstructionsList(routeInstructionsList);
    res.getRouteInstructionsList().setFormat(MediaType.TEXT_PLAIN);
    res.getRouteInstructionsList().setLang(locale.getLanguage());
    res.setRouteSummary(routeSummary);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + t,t);
    t.printStackTrace();
  }
  return res;
}"
44456,"public static com.vividsolutions.jts.geom.Point getPoint(WayPointType startPoint,CoordinateReferenceSystem targetCRS){
  PositionType ptype=(PositionType)startPoint.getLocation().getValue();
  PointType pointType=ptype.getPoint();
  DirectPositionType ctype=pointType.getPos();
  CoordinateReferenceSystem sourceCRS=getSRS(startPoint);
  LOG.trace(sourceCRS.toWKT());
  LOG.trace(""String_Node_Str"" + ctype.getValue().get(0) + ""String_Node_Str""+ ctype.getValue().get(1)+ ""String_Node_Str"");
  com.vividsolutions.jts.geom.Point p=geomFact.createPoint(new Coordinate(ctype.getValue().get(0),ctype.getValue().get(1)));
  if (targetCRS != null && !sourceCRS.equals(targetCRS)) {
    try {
      MathTransform transform=CRS.findMathTransform(sourceCRS,targetCRS);
      p=JTS.transform(p,transform).getCentroid();
      p=geomFact.createPoint(new Coordinate(p.getY(),p.getX()));
      LOG.trace(""String_Node_Str"" + p.getX() + ""String_Node_Str""+ p.getY()+ ""String_Node_Str"");
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"",t);
    }
  }
  return p;
}","public static com.vividsolutions.jts.geom.Point getPoint(WayPointType startPoint,CoordinateReferenceSystem targetCRS){
  PositionType ptype=(PositionType)startPoint.getLocation().getValue();
  PointType pointType=ptype.getPoint();
  DirectPositionType ctype=pointType.getPos();
  CoordinateReferenceSystem sourceCRS=getSRS(startPoint);
  LOG.trace(sourceCRS.toWKT());
  LOG.trace(""String_Node_Str"" + ctype.getValue().get(0) + ""String_Node_Str""+ ctype.getValue().get(1)+ ""String_Node_Str"");
  com.vividsolutions.jts.geom.Point p=geomFact.createPoint(new Coordinate(ctype.getValue().get(0),ctype.getValue().get(1)));
  LOG.info(p);
  if (targetCRS != null && !sourceCRS.equals(targetCRS)) {
    try {
      MathTransform transform=CRS.findMathTransform(sourceCRS,targetCRS);
      p=JTS.transform(p,transform).getCentroid();
      p=geomFact.createPoint(new Coordinate(p.getY(),p.getX()));
      LOG.info(p);
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"",t);
    }
  }
  return p;
}"
44457,"private List<JAXBElement<?>> decodeRouteGeometry(String encoded,List<JAXBElement<?>> list,CoordinateReferenceSystem targetCRS,CoordinateReferenceSystem sourceCRS) throws NoSuchAuthorityCodeException, FactoryException, MismatchedDimensionException, TransformException {
  MathTransform transform=null;
  LOG.info(targetCRS.toWKT());
  LOG.info(sourceCRS.toWKT());
  double precision=5;
  precision=Math.pow(10,-precision);
  int len=encoded.length(), index=0, lat=0, lng=0;
  while (index < len) {
    int b, shift=0, result=0;
    do {
      b=encoded.charAt(index++) - 63;
      result|=(b & 0x1f) << shift;
      shift+=5;
    }
 while (b >= 0x20);
    int dlat=(((result & 1) != 0) ? ~(result >> 1) : (result >> 1));
    lat+=dlat;
    shift=0;
    result=0;
    do {
      b=encoded.charAt(index++) - 63;
      result|=(b & 0x1f) << shift;
      shift+=5;
    }
 while (b >= 0x20);
    int dlng=(((result & 1) != 0) ? ~(result >> 1) : (result >> 1));
    lng+=dlng;
    Coordinate coord=new Coordinate(lng * precision,lat * precision);
    Point sourceGeometry=gf.createPoint(coord);
    if (sourceCRS != targetCRS) {
      if (transform == null)       transform=CRS.findMathTransform(sourceCRS,targetCRS);
      sourceGeometry=JTS.transform(sourceGeometry,transform).getCentroid();
    }
    DirectPositionListType e=new DirectPositionListType();
    e.getValue().add(coord.x);
    e.getValue().add(coord.y);
    JAXBElement<DirectPositionListType> elem=new JAXBElement<DirectPositionListType>(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),DirectPositionListType.class,e);
    list.add(elem);
  }
  return list;
}","private List<JAXBElement<?>> decodeRouteGeometry(String encoded,List<JAXBElement<?>> list,CoordinateReferenceSystem targetCRS,CoordinateReferenceSystem sourceCRS) throws NoSuchAuthorityCodeException, FactoryException, MismatchedDimensionException, TransformException {
  MathTransform transform=null;
  LOG.trace(targetCRS.toWKT());
  LOG.trace(sourceCRS.toWKT());
  double precision=5;
  precision=Math.pow(10,-precision);
  int len=encoded.length(), index=0, lat=0, lng=0;
  while (index < len) {
    int b, shift=0, result=0;
    do {
      b=encoded.charAt(index++) - 63;
      result|=(b & 0x1f) << shift;
      shift+=5;
    }
 while (b >= 0x20);
    int dlat=(((result & 1) != 0) ? ~(result >> 1) : (result >> 1));
    lat+=dlat;
    shift=0;
    result=0;
    do {
      b=encoded.charAt(index++) - 63;
      result|=(b & 0x1f) << shift;
      shift+=5;
    }
 while (b >= 0x20);
    int dlng=(((result & 1) != 0) ? ~(result >> 1) : (result >> 1));
    lng+=dlng;
    Coordinate coord=new Coordinate(lat * precision,lng * precision);
    Point sourceGeometry=gf.createPoint(coord);
    LOG.info(sourceGeometry);
    if (sourceCRS != targetCRS) {
      if (transform == null)       transform=CRS.findMathTransform(sourceCRS,targetCRS);
      sourceGeometry=JTS.transform(sourceGeometry,transform).getCentroid();
      LOG.info(sourceGeometry);
    }
    DirectPositionListType e=new DirectPositionListType();
    e.getValue().add(sourceGeometry.getY());
    e.getValue().add(sourceGeometry.getX());
    JAXBElement<DirectPositionListType> elem=new JAXBElement<DirectPositionListType>(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),DirectPositionListType.class,e);
    list.add(elem);
  }
  return list;
}"
44458,"public void editPeriodEnd(final String value){
  Date dateParsed=editDate(period.endTime(),value);
  if (dateParsed != null)   tasksSystem.setPeriodEnding(task,periodIndex(),dateParsed);
}","public void editPeriodEnd(final String value){
  Date dateParsed=editDate(period.startTime(),value);
  if (dateParsed != null)   tasksSystem.setPeriodEnding(task,periodIndex(),dateParsed);
}"
44459,"@Override public void run(){
  worklogListModel.sendWorklog();
}","@Override public void run(){
  worklogListModel.sendWorklog();
  updateWorklogList();
}"
44460,"private void sendWorklog(){
  new Thread(new Runnable(){
    @Override public void run(){
      worklogListModel.sendWorklog();
    }
  }
).start();
}","private void sendWorklog(){
  new Thread(new Runnable(){
    @Override public void run(){
      worklogListModel.sendWorklog();
      updateWorklogList();
    }
  }
).start();
}"
44461,"void onTaskData(final TaskData object){
  final ObjectIdentity taskId=provider.provideId();
  CreateTaskEvent3 createTaskEvent=new CreateTaskEvent3(taskId,object.getTaskName(),object.getBudget(),object.getLabel());
  SetJiraIssueToTask setIssueEvent=jiraEventFactory.createSetIssueToTaskEvent(taskId,object.getJiraIssue());
  consumer.consume(createTaskEvent);
  consumer.consume(setIssueEvent);
}","void onTaskData(final TaskData object){
  final ObjectIdentity taskId=provider.provideId();
  CreateTaskEvent3 createTaskEvent=new CreateTaskEvent3(taskId,object.getTaskName(),object.getBudget(),object.getLabel());
  SetJiraIssueToTask setIssueEvent=null;
  if (object.getJiraIssue() != null)   setIssueEvent=jiraEventFactory.createSetIssueToTaskEvent(taskId,object.getJiraIssue());
  consumer.consume(createTaskEvent);
  if (setIssueEvent != null)   consumer.consume(setIssueEvent);
}"
44462,"@Override public void run(){
  sendWorklog();
}","@Override public void run(){
  sendWorklog();
  updateWorklogList();
}"
44463,"private void startSendWorklogThread(){
  new Thread(new Runnable(){
    @Override public void run(){
      sendWorklog();
    }
  }
).start();
}","private void startSendWorklogThread(){
  new Thread(new Runnable(){
    @Override public void run(){
      sendWorklog();
      updateWorklogList();
    }
  }
).start();
}"
44464,"public void sendWorklog(){
  final List<Worklog> worklogs=selectedTaskWorklogs();
  for (  final Worklog worklog : worklogs) {
    worklog.send();
    changeAlert.fire();
  }
}","public synchronized void sendWorklog(){
  final List<Worklog> worklogs=selectedTaskWorklogs();
  for (  final Worklog worklog : worklogs) {
    worklog.send();
    changeAlert.fire();
  }
}"
44465,"@Override public void run(){
  worklogListModel.sendWorklog();
}","@Override public void run(){
  sendWorklog();
}"
44466,"private void addSendWorklogListener(){
  sendWorkLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      sendWorklog();
    }
  }
);
}","private void addSendWorklogListener(){
  sendWorkLogButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      startSendWorklogThread();
    }
  }
);
}"
44467,"private void sendWorklog(){
  new Thread(new Runnable(){
    @Override public void run(){
      worklogListModel.sendWorklog();
    }
  }
).start();
}","private void sendWorklog(){
  try {
    sendWorkLogButton.setEnabled(false);
    worklogListModel.sendWorklog();
  }
  finally {
    sendWorkLogButton.setEnabled(true);
  }
}"
44468,"private void defineDatas(){
  datas=new Object[issues.size()][columns.length];
  for (int x=0; x < issues.size(); x++) {
    RemoteJiraIssue issue=issues.get(x);
    datas[x][0]=issue.getKey();
    datas[x][1]=issue.getSummary();
    datas[x][2]=issue.getStatus();
    datas[x][COLUMN_ACTIONS]=""String_Node_Str"";
    datas[x][COLUMN_ASSIGN_TO]=issue.getAssignee();
    datas[x][COLUMN_COMMENT]=""String_Node_Str"";
  }
}","private void defineDatas(){
  datas=new Object[issues.size()][columns.length];
  for (int x=0; x < issues.size(); x++) {
    RemoteJiraIssue issue=issues.get(x);
    datas[x][0]=issue.getKey();
    datas[x][1]=issue.getSummary();
    datas[x][2]=issue.getStatus();
    datas[x][COLUMN_ACTIONS]=null;
    datas[x][COLUMN_ASSIGN_TO]=issue.getAssignee();
    datas[x][COLUMN_COMMENT]=""String_Node_Str"";
  }
}"
44469,"@Override public void run(){
  tasksList.setSelectedValue(task,true);
}","@Override public void run(){
  tasksList.setSelectedValue(task,true);
  screenData.setSelectedTask(task.name());
}"
44470,"public void setSelectedTask(final TaskView task){
class SetSelectedValue implements Runnable {
    @Override public void run(){
      tasksList.setSelectedValue(task,true);
    }
  }
  SwingUtilities.invokeLater(new SetSelectedValue());
}","public void setSelectedTask(final TaskView task){
class SetSelectedValue implements Runnable {
    @Override public void run(){
      tasksList.setSelectedValue(task,true);
      screenData.setSelectedTask(task.name());
    }
  }
  SwingUtilities.invokeLater(new SetSelectedValue());
}"
44471,"public void clear(){
  toDraw=false;
  StylesFactory.clearCache();
  style=StylesFactory.getCurrentStyle();
}","public void clear(){
  toDraw=false;
  StylesFactory.clearCache();
  setStyle(StylesFactory.getCurrentStyle());
}"
44472,"public void setStyle(Style style){
  toDraw=false;
  this.style=style;
}","public void setStyle(Style style){
  toDraw=false;
  style.setColor(color);
  this.style=style;
}"
44473,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  upgrade();
  surface=new Surface(this);
  LayoutParams params=new LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT,android.view.ViewGroup.LayoutParams.FILL_PARENT);
  setContentView(surface,params);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  surface=new Surface(this);
  LayoutParams params=new LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT,android.view.ViewGroup.LayoutParams.FILL_PARENT);
  setContentView(surface,params);
}"
44474,"protected Void doInBackground(Void... urls){
  surface.getThread().pauseDrawing();
  String path=""String_Node_Str"";
  String filename=""String_Node_Str"";
  String extension=""String_Node_Str"";
  if (!new File(path).exists()) {
    new File(path).mkdirs();
  }
  int suffix=1;
  while (new File(path + filename + suffix+ extension).exists()) {
    suffix++;
  }
  final String fileName=path + filename + suffix+ extension;
  try {
    surface.saveBitmap(fileName);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  return null;
}","protected Void doInBackground(Void... urls){
  surface.getThread().pauseDrawing();
  String sdPath=Environment.getExternalStorageDirectory().getAbsolutePath();
  String path=sdPath + ""String_Node_Str"";
  String filename=""String_Node_Str"";
  String extension=""String_Node_Str"";
  if (!new File(path).exists()) {
    new File(path).mkdirs();
  }
  int suffix=1;
  while (new File(path + filename + suffix+ extension).exists()) {
    suffix++;
  }
  final String fileName=path + filename + suffix+ extension;
  try {
    surface.saveBitmap(fileName);
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
  Uri uri=Uri.fromFile(new File(fileName));
  sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));
  return null;
}"
44475,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_SAVE,0,""String_Node_Str"").setIcon(R.drawable.save);
  menu.add(0,MENU_SEND,0,""String_Node_Str"").setIcon(R.drawable.send);
  menu.add(0,MENU_CLEAR,0,""String_Node_Str"").setIcon(R.drawable.clear);
  SubMenu subMenu=menu.addSubMenu(""String_Node_Str"").setIcon(R.drawable.brushes);
  subMenu.add(GROUP_BRUSHES,StylesFactory.SKETCHY,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SIMPLE,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SHADED,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CHROME,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.FUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.LONGFUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.WEB,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SQUARES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.RIBBON,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CIRCLES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.GRID,0,""String_Node_Str"");
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_SAVE,0,""String_Node_Str"").setIcon(R.drawable.save);
  menu.add(0,MENU_SEND,0,""String_Node_Str"").setIcon(R.drawable.send);
  menu.add(0,MENU_CLEAR,0,""String_Node_Str"").setIcon(R.drawable.clear);
  menu.add(0,MENU_COLOR,0,""String_Node_Str"");
  SubMenu subMenu=menu.addSubMenu(""String_Node_Str"").setIcon(R.drawable.brushes);
  subMenu.add(GROUP_BRUSHES,StylesFactory.SKETCHY,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SIMPLE,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SHADED,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CHROME,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.FUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.LONGFUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.WEB,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SQUARES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.RIBBON,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CIRCLES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.GRID,0,""String_Node_Str"");
  return true;
}"
44476,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getGroupId() == GROUP_BRUSHES) {
    surface.setStyle(StylesFactory.getStyle(item.getItemId()));
    return true;
  }
switch (item.getItemId()) {
case MENU_CLEAR:
    surface.clearBitmap();
  return true;
case MENU_SAVE:
saveToSD();
return true;
case MENU_SEND:
sendImage();
return true;
default :
return false;
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getGroupId() == GROUP_BRUSHES) {
    surface.setStyle(StylesFactory.getStyle(item.getItemId()));
    return true;
  }
switch (item.getItemId()) {
case MENU_CLEAR:
    surface.clearBitmap();
  return true;
case MENU_SAVE:
saveToSD();
return true;
case MENU_SEND:
sendImage();
return true;
case MENU_COLOR:
new ColorPickerDialog(this,new OnColorChangedListener(){
@Override public void colorChanged(int color){
surface.setPaintColor(color);
}
}
,surface.getPaintColor()).show();
return true;
default :
return false;
}
}"
44477,"private void saveToSD(){
  String externalStorageState=Environment.getExternalStorageState();
  if (!externalStorageState.equals(Environment.MEDIA_MOUNTED)) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  final ProgressDialog dialog=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"",true);
  new AsyncTask<Void,Void,Void>(){
    protected Void doInBackground(    Void... urls){
      surface.getThread().pauseDrawing();
      String path=""String_Node_Str"";
      String filename=""String_Node_Str"";
      String extension=""String_Node_Str"";
      if (!new File(path).exists()) {
        new File(path).mkdirs();
      }
      int suffix=1;
      while (new File(path + filename + suffix+ extension).exists()) {
        suffix++;
      }
      final String fileName=path + filename + suffix+ extension;
      try {
        surface.saveBitmap(fileName);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      return null;
    }
    protected void onPostExecute(    Void result){
      surface.getThread().resumeDrawing();
      dialog.hide();
    }
  }
.execute();
}","private void saveToSD(){
  String externalStorageState=Environment.getExternalStorageState();
  if (!externalStorageState.equals(Environment.MEDIA_MOUNTED)) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  final ProgressDialog dialog=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"",true);
  new AsyncTask<Void,Void,Void>(){
    protected Void doInBackground(    Void... urls){
      surface.getThread().pauseDrawing();
      String sdPath=Environment.getExternalStorageDirectory().getAbsolutePath();
      String path=sdPath + ""String_Node_Str"";
      String filename=""String_Node_Str"";
      String extension=""String_Node_Str"";
      if (!new File(path).exists()) {
        new File(path).mkdirs();
      }
      int suffix=1;
      while (new File(path + filename + suffix+ extension).exists()) {
        suffix++;
      }
      final String fileName=path + filename + suffix+ extension;
      try {
        surface.saveBitmap(fileName);
      }
 catch (      FileNotFoundException e) {
        throw new RuntimeException(e);
      }
      Uri uri=Uri.fromFile(new File(fileName));
      sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));
      return null;
    }
    protected void onPostExecute(    Void result){
      surface.getThread().resumeDrawing();
      dialog.hide();
    }
  }
.execute();
}"
44478,"private String getDocWikiFileName(String filePath){
  String name=Disks.getRelativePath(rootDir,Files.findFile(filePath));
  int pos=name.lastIndexOf('.');
  if (pos > 0)   name=name.substring(0,pos);
  return name.replace('/','_');
}","private String getDocWikiFileName(String filePath){
  String name=Disks.getRelativePath(rootDir,Files.findFile(filePath));
  int pos=name.lastIndexOf('.');
  if (pos > 0)   name=name.substring(0,pos);
  return name.replace('/','_').replace('.','_');
}"
44479,"private void reading(){
  for (; i < cs.length; i++) {
    char c=cs[i];
switch (c) {
case '{':
      forStyle();
    break;
case '`':
  forEscaping();
break;
case '<':
forImage();
break;
case '[':
forLink();
break;
default :
if (endles.last() == c) {
endles.popLast();
return;
}
ep.sb.append(c);
}
}
}","private void reading(){
  for (; i < cs.length; i++) {
    char c=cs[i];
switch (c) {
case '$':
      forVariable();
    break;
case '{':
  forStyle();
break;
case '`':
forEscaping();
break;
case '<':
forImage();
break;
case '[':
forLink();
break;
default :
if (endles.last() == c) {
endles.popLast();
return;
}
ep.sb.append(c);
}
}
}"
44480,"BlockMaker(char[] cs){
  this.cs=cs;
  this.ep=new EleHolder();
  this.block=ZD.p();
  this.endles=new LinkedCharArray();
}","BlockMaker(Context context,char[] cs){
  this.context=context == null ? new Context() : context;
  this.cs=cs;
  this.ep=new EleHolder();
  this.block=ZD.p();
  this.endles=new LinkedCharArray();
}"
44481,"static ZBlock toBlock(char[] cs){
  return new BlockMaker(cs).make();
}","private ZBlock toBlock(char[] cs){
  return new BlockMaker(context,cs).make();
}"
44482,"Parsing(BufferedReader reader){
  this.reader=reader;
}","Parsing(BufferedReader reader){
  this.reader=reader;
  this.context=new Context().set(""String_Node_Str"",Calendar.getInstance());
}"
44483,"ZDoc parse(int tabpar){
  ScanResult sr=new Scanning(tabpar).scan(reader);
  doc=sr.doc();
  transform(doc.root(),sr.root());
  return doc;
}","ZDoc parse(int tabpar){
  ScanResult sr=new Scanning(tabpar).scan(reader);
  doc=sr.doc();
  if (!Strings.isBlank(doc.getTitle()))   context.set(""String_Node_Str"",doc.getTitle());
  transform(doc.root(),sr.root());
  return doc;
}"
44484,"private ZBlock makeBlockAndClearStack(LinkedList<Line> stack){
  ZBlock re;
  Line first=stack.getFirst();
  if (first.isOLI() || first.isULI()) {
    re=first.isOLI() ? ol() : ul();
    Iterator<Line> it=stack.iterator();
    while (it.hasNext()) {
      Line line=it.next();
      ZBlock li=line.toBlock().setType(first.type);
      re.add(li);
      transform(li,line);
    }
  }
 else   if (first.isRow()) {
    re=table();
    Iterator<Line> it=stack.iterator();
    while (it.hasNext()) {
      ZBlock row=row();
      List<LinkedCharArray> list=findCells(it.next().getText().toCharArray());
      Iterator<LinkedCharArray> j=list.iterator();
      while (j.hasNext()) {
        char[] cs=j.next().toArray();
        row.add(toBlock(cs));
      }
      re.add(row);
    }
  }
 else {
    StringBuilder sb=new StringBuilder();
    Iterator<Line> it=stack.iterator();
    while (it.hasNext()) {
      Line line=it.next();
      if (!line.isBlank())       sb.append(line.getText());
    }
    re=toBlock(sb.toString().toCharArray());
    if (stack.getLast().hasChild())     transform(re,stack.getLast());
  }
  stack.clear();
  return re;
}","private ZBlock makeBlockAndClearStack(LinkedList<Line> stack){
  ZBlock re;
  Line first=stack.getFirst();
  if (first.isOLI() || first.isULI()) {
    re=first.isOLI() ? ol() : ul();
    Iterator<Line> it=stack.iterator();
    while (it.hasNext()) {
      Line line=it.next();
      ZBlock li=toBlock(line.getCharArray()).setType(first.type);
      re.add(li);
      transform(li,line);
    }
  }
 else   if (first.isRow()) {
    re=table();
    Iterator<Line> it=stack.iterator();
    while (it.hasNext()) {
      ZBlock row=row();
      List<LinkedCharArray> list=findCells(it.next().getText().toCharArray());
      Iterator<LinkedCharArray> j=list.iterator();
      while (j.hasNext()) {
        char[] cs=j.next().toArray();
        row.add(toBlock(cs));
      }
      re.add(row);
    }
  }
 else {
    StringBuilder sb=new StringBuilder();
    Iterator<Line> it=stack.iterator();
    while (it.hasNext()) {
      Line line=it.next();
      if (!line.isBlank())       sb.append(line.getText());
    }
    re=toBlock(sb.toString().toCharArray());
    if (stack.getLast().hasChild())     transform(re,stack.getLast());
  }
  stack.clear();
  return re;
}"
44485,"@Test public void test_link_in_style(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}","@Test public void test_link_in_style(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}"
44486,"@Test public void very_simple_case(){
  ZBlock p=p(""String_Node_Str"");
  ZEle[] eles=p.eles();
  assertEquals(3,eles.length);
  assertEquals(""String_Node_Str"",eles[0].getText());
  assertFalse(eles[0].hasStyle());
  assertEquals(""String_Node_Str"",eles[1].getText());
  assertTrue(eles[1].getStyle().getFont().isBold());
  assertTrue(eles[1].getStyle().getFont().isNormal());
  assertFalse(eles[1].getStyle().getFont().isItalic());
  assertFalse(eles[1].getStyle().getFont().isSub());
  assertEquals(""String_Node_Str"",eles[2].getText());
  assertFalse(eles[2].hasStyle());
}","@Test public void very_simple_case(){
  ZBlock p=P(""String_Node_Str"");
  ZEle[] eles=p.eles();
  assertEquals(3,eles.length);
  assertEquals(""String_Node_Str"",eles[0].getText());
  assertFalse(eles[0].hasStyle());
  assertEquals(""String_Node_Str"",eles[1].getText());
  assertTrue(eles[1].getStyle().getFont().isBold());
  assertTrue(eles[1].getStyle().getFont().isNormal());
  assertFalse(eles[1].getStyle().getFont().isItalic());
  assertFalse(eles[1].getStyle().getFont().isSub());
  assertEquals(""String_Node_Str"",eles[2].getText());
  assertFalse(eles[2].hasStyle());
}"
44487,"@Test public void test_image_remote(){
  ZBlock p=p(""String_Node_Str"");
  ZEle img=p.ele(0);
  assertEquals(""String_Node_Str"",img.getSrc().getPath());
  assertTrue(img.getSrc().isHttp());
}","@Test public void test_image_remote(){
  ZBlock p=P(""String_Node_Str"");
  ZEle img=p.ele(0);
  assertEquals(""String_Node_Str"",img.getSrc().getPath());
  assertTrue(img.getSrc().isHttp());
}"
44488,"@Test public void test_style_in_link_partly(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}","@Test public void test_style_in_link_partly(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}"
44489,"@Test public void test_simple_image(){
  ZBlock p=p(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
}","@Test public void test_simple_image(){
  ZBlock p=P(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
}"
44490,"@Test public void test_link_in_style_partly(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}","@Test public void test_link_in_style_partly(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}"
44491,"@Test public void test_nest_var(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
  assertTrue(p.ele(1).getStyle().font().isBold());
  assertEquals(""String_Node_Str"",p.ele(2).getText());
}","@Test public void test_nest_var(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
  assertTrue(p.ele(1).getStyle().font().isBold());
  assertEquals(""String_Node_Str"",p.ele(2).getText());
}"
44492,"@Test public void test_link_refer_path_and_value(){
  ZRefer href=p(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getValue());
  assertEquals(""String_Node_Str"",href.toString());
  href=p(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getValue());
  assertEquals(""String_Node_Str"",href.toString());
  href=p(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getInner());
  assertEquals(""String_Node_Str"",href.toString());
  href=p(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getValue());
  assertEquals(""String_Node_Str"",href.toString());
}","@Test public void test_link_refer_path_and_value(){
  ZRefer href=P(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getValue());
  assertEquals(""String_Node_Str"",href.toString());
  href=P(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getValue());
  assertEquals(""String_Node_Str"",href.toString());
  href=P(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getInner());
  assertEquals(""String_Node_Str"",href.toString());
  href=P(""String_Node_Str"").ele(0).getHref();
  assertEquals(""String_Node_Str"",href.getPath());
  assertEquals(""String_Node_Str"",href.getValue());
  assertEquals(""String_Node_Str"",href.toString());
}"
44493,"@Test public void test_style_in_link(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}","@Test public void test_style_in_link(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertTrue(p.ele(0).getStyle().getFont().isBold());
  assertTrue(p.ele(0).getStyle().getFont().isItalic());
  assertEquals(""String_Node_Str"",p.ele(1).getText());
}"
44494,"@Test public void test_simple_link(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
}","@Test public void test_simple_link(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
}"
44495,"@Test public void teset_image_in_link_remote(){
  ZBlock p=p(""String_Node_Str"");
  ZEle img=p.ele(0);
  assertEquals(""String_Node_Str"",img.getHref().getPath());
  assertEquals(""String_Node_Str"",img.getSrc().getPath());
  assertTrue(img.getSrc().isHttp());
}","@Test public void teset_image_in_link_remote(){
  ZBlock p=P(""String_Node_Str"");
  ZEle img=p.ele(0);
  assertEquals(""String_Node_Str"",img.getHref().getPath());
  assertEquals(""String_Node_Str"",img.getSrc().getPath());
  assertTrue(img.getSrc().isHttp());
}"
44496,"@Test public void test_text_link(){
  ZBlock p=p(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
}","@Test public void test_text_link(){
  ZBlock p=P(""String_Node_Str"");
  assertEquals(""String_Node_Str"",p.ele(0).getText());
  assertEquals(""String_Node_Str"",p.ele(0).getHref().getValue());
}"
44497,"@Test public void test_image_sizing(){
  ZBlock p=p(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(3,p.ele(0).getWidth());
  assertEquals(5,p.ele(0).getHeight());
  p=p(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(3,p.ele(0).getWidth());
  assertEquals(5,p.ele(0).getHeight());
  p=p(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(0,p.ele(0).getWidth());
  assertEquals(5,p.ele(0).getHeight());
  p=p(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(3,p.ele(0).getWidth());
  assertEquals(0,p.ele(0).getHeight());
}","@Test public void test_image_sizing(){
  ZBlock p=P(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(3,p.ele(0).getWidth());
  assertEquals(5,p.ele(0).getHeight());
  p=P(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(3,p.ele(0).getWidth());
  assertEquals(5,p.ele(0).getHeight());
  p=P(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(0,p.ele(0).getWidth());
  assertEquals(5,p.ele(0).getHeight());
  p=P(""String_Node_Str"");
  assertTrue(p.ele(0).isImage());
  assertEquals(""String_Node_Str"",p.ele(0).getSrc().getValue());
  assertEquals(3,p.ele(0).getWidth());
  assertEquals(0,p.ele(0).getHeight());
}"
44498,"@SuppressWarnings(""String_Node_Str"") public CharSequence render(ZDoc doc){
  Tag html=tag(""String_Node_Str"");
  Tag head=tag(""String_Node_Str"");
  html.add(head);
  head.add(tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str""));
  if (!Strings.isBlank(doc.getTitle()))   head.add(tag(""String_Node_Str"").add(text(doc.getTitle())));
  if (doc.hasAttr(""String_Node_Str"")) {
    List<File> csss=(List<File>)doc.getAttr(""String_Node_Str"");
    for (    File css : csss) {
      String path=doc.getRelativePath(css);
      head.add(Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",path).attr(""String_Node_Str"",""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (doc.hasAttr(""String_Node_Str"")) {
    List<File> jss=(List<File>)doc.getAttr(""String_Node_Str"");
    for (    File js : jss) {
      String path=doc.getRelativePath(js);
      head.add(Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",path).attr(""String_Node_Str"",""String_Node_Str""));
    }
  }
  Tag body=tag(""String_Node_Str"");
  body.add(tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str""));
  body.add(Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"").add(Tag.text(doc.getTitle())));
  if (doc.hasAuthor())   body.add(appendAuthorTag(doc,Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"")));
  html.add(body);
  Tag container=tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
  body.add(container);
  if (doc.hasAuthor())   body.add(appendAuthorTag(doc,Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"")));
  ZBlock[] ps=doc.root().children();
  for (  ZBlock p : ps)   renderBlock(container,p);
  return html.toString();
}","@SuppressWarnings(""String_Node_Str"") public CharSequence render(ZDoc doc){
  Tag html=tag(""String_Node_Str"");
  Tag head=tag(""String_Node_Str"");
  html.add(head);
  head.add(tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str""));
  if (!Strings.isBlank(doc.getTitle()))   head.add(tag(""String_Node_Str"").add(text(doc.getTitle())));
  if (doc.hasAttr(""String_Node_Str"")) {
    List<File> csss=(List<File>)doc.getAttr(""String_Node_Str"");
    for (    File css : csss) {
      String path=doc.getRelativePath(css);
      head.add(Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",path).attr(""String_Node_Str"",""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (doc.hasAttr(""String_Node_Str"")) {
    List<File> jss=(List<File>)doc.getAttr(""String_Node_Str"");
    for (    File js : jss) {
      String path=doc.getRelativePath(js);
      head.add(Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",path).attr(""String_Node_Str"",""String_Node_Str""));
    }
  }
  Tag body=tag(""String_Node_Str"");
  body.add(tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str""));
  body.add(Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"").add(Tag.text(doc.getTitle())));
  if (doc.hasAuthor())   body.add(appendAuthorTag(doc,Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"")));
  html.add(body);
  Tag container=tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
  body.add(container);
  if (doc.hasAuthor())   body.add(appendAuthorTag(doc,Tag.tag(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"")));
  ZBlock[] ps=doc.root().children();
  for (  ZBlock p : ps)   renderBlock(container,p);
  return new StringBuilder().append(COMMON_INFO).append(""String_Node_Str"").append(html.toString());
}"
44499,"public GoogleWikiBuilder appendHeading(String text,int level){
  sb.append(makeHeading(text,level));
  nextLine();
  return this;
}","public GoogleWikiBuilder appendHeading(String text,int level){
  nextLine();
  sb.append(makeHeading(text,level));
  nextLine();
  return this;
}"
44500,"public static String makeHeading(String text,int level){
  if (level < 1)   level=1;
  if (level > 6)   level=6;
  String str=""String_Node_Str"";
  for (int i=0; i < 6; i++) {
    str+=""String_Node_Str"";
  }
  str=str + text + str;
  return str;
}","public static String makeHeading(String text,int level){
  if (level < 1)   level=1;
  if (level > 6)   level=6;
  String str=""String_Node_Str"";
  for (int i=0; i < level; i++) {
    str+=""String_Node_Str"";
  }
  str=str + text + str;
  return str;
}"
44501,"private void handleListItem(ZBlock li,GoogleWikiBuilder wikiBuilder){
  int liDeep=li.countMyTypeInAncestors();
  wikiBuilder.appendRaw(GoogleWikiBuilder.makeListItem(parseEles(li.eles()),liDeep)).nextLine();
  if (li.hasChildren()) {
    ZBlock[] ps=li.children();
    for (    ZBlock p : ps)     renderBlock(p,wikiBuilder);
  }
}","private void handleListItem(ZBlock li,GoogleWikiBuilder wikiBuilder){
  int liDeep=li.countMyTypeInAncestors();
  wikiBuilder.nextLine();
  wikiBuilder.appendRaw(GoogleWikiBuilder.makeListItem(parseEles(li.eles()),liDeep)).nextLine();
  if (li.hasChildren()) {
    ZBlock[] ps=li.children();
    for (    ZBlock p : ps)     renderBlock(p,wikiBuilder);
  }
}"
44502,"/** 
 * 根据表信息创建实体类。
 * @param tableInfo 表格信息
 * @param classPath 文件类存放文件夹
 * @return 是否操作成功
 */
private static boolean generateCode(TableInfo tableInfo,String classPath){
  String className=StringUtil.tableNameToClass(tableInfo.getTableName());
  StringBuilder builder=new StringBuilder();
  StringBuilder getSet=new StringBuilder();
  String dataTime=DatetimeUtil.dateTime();
  System.out.println(""String_Node_Str"" + dataTime + ""String_Node_Str""+ tableInfo+ ""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(tableInfo.getTableComment()).append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(ResourceUtils.getProject().getUser()).append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(dataTime).append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(className).append(""String_Node_Str"");
  String clsPro;
  String setName, getName;
  for (  ColumnInfo columnInfo : tableInfo.getColumnList()) {
    clsPro=StringUtil.columnToPropertis(columnInfo.getColumnName());
    setName=StringUtil.getSetMethod(clsPro,""String_Node_Str"");
    getName=columnInfo.getDataType().equals(""String_Node_Str"") ? StringUtil.getSetMethod(clsPro,""String_Node_Str"") : StringUtil.getSetMethod(clsPro,""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(columnInfo.getColumnComment()).append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(columnInfo.getColumnComment()).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(getName).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(columnInfo.getColumnName()).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"").append(columnInfo.getColumnComment()).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(setName).append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
  }
  builder.append(getSet);
  builder.append(""String_Node_Str"");
  String packageName=ResourceUtils.getProject().getPackageName() + ""String_Node_Str"";
  classPath=FileUtil.createJavaFolder(classPath,packageName);
  String filePath=classPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
  String header=CODE_TEMPLATE.replace(""String_Node_Str"",className).replace(""String_Node_Str"",dataTime).replace(""String_Node_Str"",packageName);
  return FileUtil.createClassFile(header + builder.toString(),filePath);
}","/** 
 * 根据表信息创建实体类。
 * @param tableInfo 表格信息
 * @param classPath 文件类存放文件夹
 * @return 是否操作成功
 */
private static boolean generateCode(TableInfo tableInfo,String classPath){
  String className=StringUtil.tableNameToClass(tableInfo.getTableName());
  StringBuilder builder=new StringBuilder();
  StringBuilder getSet=new StringBuilder();
  String dataTime=DatetimeUtil.dateTime();
  System.out.println(""String_Node_Str"" + dataTime + ""String_Node_Str""+ tableInfo+ ""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(tableInfo.getTableComment()).append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(ResourceUtils.getProject().getUser()).append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(dataTime).append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"").append(className).append(""String_Node_Str"");
  String clsPro;
  String setName, getName;
  for (  ColumnInfo columnInfo : tableInfo.getColumnList()) {
    clsPro=StringUtil.columnToPropertis(columnInfo.getColumnName());
    setName=StringUtil.getSetMethod(clsPro,""String_Node_Str"");
    getName=columnInfo.getDataType().equals(""String_Node_Str"") ? StringUtil.getSetMethod(clsPro,""String_Node_Str"") : StringUtil.getSetMethod(clsPro,""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(columnInfo.getColumnComment()).append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(columnInfo.getColumnComment()).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(getName).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(columnInfo.getColumnName()).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"").append(columnInfo.getColumnComment()).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(setName).append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    getSet.append(""String_Node_Str"");
  }
  builder.append(getSet);
  builder.append(""String_Node_Str"");
  String packageName=PACKAGE_NAME + ""String_Node_Str"";
  classPath=FileUtil.createJavaFolder(classPath,packageName);
  String filePath=classPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
  String header=CODE_TEMPLATE.replace(""String_Node_Str"",className).replace(""String_Node_Str"",dataTime).replace(""String_Node_Str"",packageName);
  return FileUtil.createClassFile(header + builder.toString(),filePath);
}"
44503,"/** 
 * @param tableInfo 数据库表含义
 * @param classPath 类 存放路径
 * @return 是否操作成功
 */
private static boolean createMybatis(TableInfo tableInfo,String classPath){
  String className=StringUtil.tableNameToClass(tableInfo.getTableName());
  Sql sql=createSql(tableInfo,className);
  StringBuilder xmlContent=new StringBuilder();
  xmlContent.append(sql.getInsertSql()).append(sql.getUpdateSql()).append(sql.getSelectAllSql()).append(sql.getSelectSql()).append(sql.getDeleteSql());
  String content=MYBATIS_XML.replace(""String_Node_Str"",ResourceUtils.getProject().getPackageName() + ""String_Node_Str"" + className+ ""String_Node_Str"").replace(""String_Node_Str"",xmlContent);
  String xmlPath=FileUtil.createXmlFolder(classPath,ResourceUtils.getProject().getPackageName() + ""String_Node_Str"");
  String filePath=xmlPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
  if (FileUtil.createClassFile(content,filePath)) {
    String packageName=ResourceUtils.getProject().getPackageName() + ""String_Node_Str"";
    classPath=FileUtil.createJavaFolder(classPath,packageName);
    filePath=classPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
    String dataTime=DatetimeUtil.dateTime();
    String header=CODE_TEMPLATE.replace(""String_Node_Str"",className + ""String_Node_Str"").replace(""String_Node_Str"",dataTime).replace(""String_Node_Str"",packageName);
    return FileUtil.createClassFile(header + sql.getMapper(),filePath);
  }
  return false;
}","/** 
 * @param tableInfo 数据库表含义
 * @param classPath 类 存放路径
 * @return 是否操作成功
 */
private static boolean createMybatis(TableInfo tableInfo,String classPath){
  String className=StringUtil.tableNameToClass(tableInfo.getTableName());
  Sql sql=createSql(tableInfo,className);
  StringBuilder xmlContent=new StringBuilder();
  xmlContent.append(sql.getInsertSql()).append(sql.getUpdateSql()).append(sql.getSelectAllSql()).append(sql.getSelectSql()).append(sql.getDeleteSql());
  String packageName=PACKAGE_NAME + ""String_Node_Str"";
  String content=MYBATIS_XML.replace(""String_Node_Str"",packageName + ""String_Node_Str"" + className+ ""String_Node_Str"").replace(""String_Node_Str"",xmlContent);
  String xmlPath=FileUtil.createXmlFolder(classPath,packageName);
  String filePath=xmlPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
  if (FileUtil.createClassFile(content,filePath)) {
    classPath=FileUtil.createJavaFolder(classPath,packageName);
    filePath=classPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
    String dataTime=DatetimeUtil.dateTime();
    String header=CODE_TEMPLATE.replace(""String_Node_Str"",className + ""String_Node_Str"").replace(""String_Node_Str"",dataTime).replace(""String_Node_Str"",packageName);
    String importDomain=""String_Node_Str"" + PACKAGE_NAME + ""String_Node_Str""+ className+ ""String_Node_Str"";
    return FileUtil.createClassFile(header + importDomain + sql.getMapper(),filePath);
  }
  return false;
}"
44504,"/** 
 * 创建SQL脚本.
 * @param tableInfo 表格属性
 * @param clsName   类型
 * @return sql语句
 */
private static Sql createSql(TableInfo tableInfo,String clsName){
  Sql sql=new Sql();
  StringBuilder insert=new StringBuilder();
  StringBuilder update=new StringBuilder();
  StringBuilder delete=new StringBuilder();
  StringBuilder selectOne=new StringBuilder();
  StringBuilder selectAll=new StringBuilder();
  StringBuilder mapper=new StringBuilder();
  String tableName=tableInfo.getTableName().toUpperCase();
  String dataTime=DatetimeUtil.dateTime();
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableInfo.getTableComment()).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(ResourceUtils.getProject().getUser()).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(dataTime).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  String inserId=StringUtil.sqlName(""String_Node_Str"",clsName);
  insert.append(""String_Node_Str"").append(inserId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  insert.append(""String_Node_Str"").append(tableName);
  insert.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(inserId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"");
  String delteId=StringUtil.sqlName(""String_Node_Str"",clsName);
  delete.append(""String_Node_Str"").append(delteId).append(""String_Node_Str"");
  String selectOneId=StringUtil.sqlName(""String_Node_Str"",clsName);
  String selectOwnId=StringUtil.sqlName(""String_Node_Str"",clsName);
  selectOne.append(""String_Node_Str"").append(selectOneId).append(""String_Node_Str"");
  selectAll.append(""String_Node_Str"").append(selectOwnId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(selectOwnId).append(""String_Node_Str"");
  String updateId=StringUtil.sqlName(""String_Node_Str"",clsName);
  update.append(""String_Node_Str"").append(updateId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  update.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  String clsPro;
  StringBuilder proBuilder=new StringBuilder();
  StringBuilder selectSql=new StringBuilder();
  selectSql.append(""String_Node_Str"");
  String wherePRI=""String_Node_Str"", columnName;
  boolean pri=false;
  for (  ColumnInfo columnInfo : tableInfo.getColumnList()) {
    clsPro=StringUtil.columnToPropertis(columnInfo.getColumnName());
    columnName=columnInfo.getColumnName().toUpperCase();
    if (columnInfo.getColumnKey().equals(""String_Node_Str"")) {
      pri=true;
      delete.append(columnInfo.getDataType()).append(""String_Node_Str"");
      delete.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
      delete.append(""String_Node_Str"");
      selectOne.append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"");
      wherePRI=""String_Node_Str"" + columnName + ""String_Node_Str""+ clsPro+ ""String_Node_Str"";
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"").append(columnInfo.getColumnName()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"").append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(selectOneId).append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"").append(columnInfo.getColumnName()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(delteId).append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(updateId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"");
    }
 else {
      proBuilder.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
      insert.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"");
      selectSql.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"");
      update.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    }
  }
  insert.setCharAt(insert.lastIndexOf(""String_Node_Str""),' ');
  proBuilder.setCharAt(proBuilder.lastIndexOf(""String_Node_Str""),' ');
  selectSql.setCharAt(selectSql.lastIndexOf(""String_Node_Str""),' ');
  selectSql.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  selectAll.append(selectSql).append(""String_Node_Str"").append(""String_Node_Str"");
  if (!pri) {
    selectOne=new StringBuilder(""String_Node_Str"");
    update=new StringBuilder(""String_Node_Str"");
    delete=new StringBuilder(""String_Node_Str"");
  }
 else {
    selectOne.append(selectSql).append(wherePRI).append(""String_Node_Str"");
    update.setCharAt(update.lastIndexOf(""String_Node_Str""),' ');
    update.append(wherePRI).append(""String_Node_Str"");
  }
  insert.append(""String_Node_Str"");
  insert.append(proBuilder);
  insert.append(""String_Node_Str"");
  insert.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  sql.setInsertSql(insert.toString());
  sql.setDeleteSql(delete.toString());
  sql.setSelectAllSql(selectAll.toString());
  sql.setSelectSql(selectOne.toString());
  sql.setUpdateSql(update.toString());
  sql.setMapper(mapper.toString());
  return sql;
}","/** 
 * 创建SQL脚本.
 * @param tableInfo 表格属性
 * @param clsName   类型
 * @return sql语句
 */
private static Sql createSql(TableInfo tableInfo,String clsName){
  Sql sql=new Sql();
  StringBuilder insert=new StringBuilder();
  StringBuilder update=new StringBuilder();
  StringBuilder delete=new StringBuilder();
  StringBuilder selectOne=new StringBuilder();
  StringBuilder selectAll=new StringBuilder();
  StringBuilder mapper=new StringBuilder();
  String tableName=tableInfo.getTableName().toUpperCase();
  String dataTime=DatetimeUtil.dateTime();
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableInfo.getTableComment()).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(ResourceUtils.getProject().getUser()).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(dataTime).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  String inserId=StringUtil.sqlName(""String_Node_Str"",clsName);
  insert.append(""String_Node_Str"").append(inserId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  insert.append(""String_Node_Str"").append(tableName);
  insert.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(inserId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"");
  String delteId=StringUtil.sqlName(""String_Node_Str"",clsName);
  delete.append(""String_Node_Str"").append(delteId).append(""String_Node_Str"");
  String selectOneId=StringUtil.sqlName(""String_Node_Str"",clsName);
  String selectOwnId=StringUtil.sqlName(""String_Node_Str"",clsName);
  selectOne.append(""String_Node_Str"").append(selectOneId).append(""String_Node_Str"");
  selectAll.append(""String_Node_Str"").append(selectOwnId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(selectOwnId).append(""String_Node_Str"");
  String updateId=StringUtil.sqlName(""String_Node_Str"",clsName);
  update.append(""String_Node_Str"").append(updateId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"");
  update.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  String clsPro;
  StringBuilder proBuilder=new StringBuilder();
  StringBuilder selectSql=new StringBuilder();
  selectSql.append(""String_Node_Str"");
  String wherePRI=""String_Node_Str"", columnName;
  boolean pri=false;
  for (  ColumnInfo columnInfo : tableInfo.getColumnList()) {
    clsPro=StringUtil.columnToPropertis(columnInfo.getColumnName());
    columnName=columnInfo.getColumnName().toUpperCase();
    if (columnInfo.getColumnKey().equals(""String_Node_Str"")) {
      pri=true;
      selectSql.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"");
      delete.append(columnInfo.getDataType()).append(""String_Node_Str"");
      delete.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
      delete.append(""String_Node_Str"");
      selectOne.append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"");
      wherePRI=""String_Node_Str"" + columnName + ""String_Node_Str""+ clsPro+ ""String_Node_Str"";
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"").append(columnInfo.getColumnName()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"").append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(selectOneId).append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"").append(columnInfo.getColumnName()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(delteId).append(""String_Node_Str"").append(columnInfo.getDataType()).append(""String_Node_Str"").append(columnInfo.getColumnName().toLowerCase()).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"");
      mapper.append(""String_Node_Str"").append(updateId).append(""String_Node_Str"").append(clsName).append(""String_Node_Str"").append(clsName.toLowerCase()).append(""String_Node_Str"");
    }
 else {
      proBuilder.append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
      insert.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"");
      selectSql.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"");
      update.append(""String_Node_Str"").append(columnName).append(""String_Node_Str"").append(clsPro).append(""String_Node_Str"");
    }
  }
  insert.setCharAt(insert.lastIndexOf(""String_Node_Str""),' ');
  proBuilder.setCharAt(proBuilder.lastIndexOf(""String_Node_Str""),' ');
  selectSql.setCharAt(selectSql.lastIndexOf(""String_Node_Str""),' ');
  selectSql.append(""String_Node_Str"").append(tableName).append(""String_Node_Str"");
  selectAll.append(selectSql).append(""String_Node_Str"").append(""String_Node_Str"");
  if (!pri) {
    selectOne=new StringBuilder(""String_Node_Str"");
    update=new StringBuilder(""String_Node_Str"");
    delete=new StringBuilder(""String_Node_Str"");
  }
 else {
    selectOne.append(selectSql).append(wherePRI).append(""String_Node_Str"");
    update.setCharAt(update.lastIndexOf(""String_Node_Str""),' ');
    update.append(wherePRI).append(""String_Node_Str"");
  }
  insert.append(""String_Node_Str"");
  insert.append(proBuilder);
  insert.append(""String_Node_Str"");
  insert.append(""String_Node_Str"");
  mapper.append(""String_Node_Str"");
  sql.setInsertSql(insert.toString());
  sql.setDeleteSql(delete.toString());
  sql.setSelectAllSql(selectAll.toString());
  sql.setSelectSql(selectOne.toString());
  sql.setUpdateSql(update.toString());
  sql.setMapper(mapper.toString());
  return sql;
}"
44505,"/** 
 * 如果xml文件夹不存在，则创建.
 * @param folderPath 文件夹地址
 * @param packageName 包名
 * @return 路径
 */
public static String createXmlFolder(String folderPath,String packageName){
  folderPath=generatPackageFileFloder(folderPath + ""String_Node_Str"",ResourceUtils.getProject().getPackageName());
  File file=new File(folderPath);
  if (!file.exists()) {
    file.mkdirs();
  }
  return folderPath;
}","/** 
 * 如果xml文件夹不存在，则创建.
 * @param folderPath 文件夹地址
 * @param packageName 包名
 * @return 路径
 */
public static String createXmlFolder(String folderPath,String packageName){
  folderPath=generatPackageFileFloder(folderPath + ""String_Node_Str"",packageName);
  File file=new File(folderPath);
  if (!file.exists()) {
    file.mkdirs();
  }
  return folderPath;
}"
44506,"/** 
 * get the size of the   {@link HDFSBlob}
 * @return the size of the {@link HDFSBlob}
 * @throws IOException if the operation did not succeed
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public long getSize() throws IOException, MissingBlobException {
  log.debug(""String_Node_Str"" + this.getId().toASCIIString());
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  return getFileSystem().getFileStatus(path).getLen();
}","/** 
 * get the size of the   {@link HDFSBlob}
 * @return the size of the {@link HDFSBlob}
 * @throws IOException if the operation did not succeed
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public long getSize() throws IOException, MissingBlobException {
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  return getFileSystem().getFileStatus(path).getLen();
}"
44507,"/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    log.debug(e.getLocalizedMessage() + ""String_Node_Str"",e);
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    this.hdfs=this.conn.getFileSystem();
    return this.getFileSystem().exists(path);
  }
}","/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    return this.getFileSystem().exists(path);
  }
}"
44508,"/** 
 * move a   {@link HDFSBlob} to another location on the Hadoop filesystem
 * @param toUri the  {@link URI} of the new location where this{@link HDFSBlob} should be moved to
 * @param hints hints are currently ignored
 * @throws DuplicateBlobException if another file exists with the same  {@link URI}
 * @throws IOException if the move did not succeed on the underlying filesystem
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public Blob moveTo(final URI toUri,final Map<String,String> hints) throws DuplicateBlobException, IOException, MissingBlobException {
  log.debug(""String_Node_Str"" + this.getId().toASCIIString() + ""String_Node_Str""+ toUri.toASCIIString());
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  HDFSBlob newBlob=(HDFSBlob)this.getConnection().getBlob(toUri,null);
  if (newBlob.exists()) {
    throw new DuplicateBlobException(toUri);
  }
  InputStream in=this.openInputStream();
  OutputStream out=newBlob.openOutputStream(this.getSize(),false);
  IOUtils.copy(in,out);
  in.close();
  out.close();
  this.delete();
  return newBlob;
}","/** 
 * move a   {@link HDFSBlob} to another location on the Hadoop filesystem
 * @param toUri the  {@link URI} of the new location where this{@link HDFSBlob} should be moved to
 * @param hints hints are currently ignored
 * @throws DuplicateBlobException if another file exists with the same  {@link URI}
 * @throws IOException if the move did not succeed on the underlying filesystem
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public Blob moveTo(final URI toUri,final Map<String,String> hints) throws DuplicateBlobException, IOException, MissingBlobException {
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  HDFSBlob newBlob=(HDFSBlob)this.getConnection().getBlob(toUri,null);
  if (newBlob.exists()) {
    throw new DuplicateBlobException(toUri);
  }
  InputStream in=null;
  OutputStream out=null;
  try {
    in=this.openInputStream();
    out=newBlob.openOutputStream(this.getSize(),false);
    IOUtils.copy(in,out);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
  this.delete();
  return newBlob;
}"
44509,"/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  HDFSBlob blob;
  try {
    blob=new HDFSBlob(new URI(this.store.getId() + UUID.randomUUID().toString()),this);
    OutputStream out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    in.close();
    out.close();
    return blob;
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
}","/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  HDFSBlob blob;
  OutputStream out=null;
  try {
    blob=new HDFSBlob(new URI(this.store.getId() + UUID.randomUUID().toString()),this);
    out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    return blob;
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}"
44510,"@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}","@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  store.setFileSystem(mockFs);
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}"
44511,"@Test public void testHDFSBlobStoreString() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store);
}","@Test public void testHDFSBlobStoreString() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  store.setFileSystem(mockFs);
  assertNotNull(store);
}"
44512,"@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}","@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  store.setFileSystem(mockFs);
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}"
44513,"@Test public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(9);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockConnection.getBlob((URI)anyObject(),(Map<String,String>)anyObject())).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}","@Test @SuppressWarnings(""String_Node_Str"") public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(9);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockConnection.getBlob((URI)anyObject(),(Map<String,String>)anyObject())).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}"
44514,"/** 
 * create a new   {@link HDFSBlobStoreConnection} to specified HDFs namenode
 * @param store the  {@link HDFSBlobStore} this {@link HDFSBlobStoreConnection}will try to connect to
 * @throws IOException if the connection did not succeed
 */
public HDFSBlobStoreConnection(final HDFSBlobStore store) throws IOException {
  this.store=store;
  hdfs=store.openHDFSConnection();
}","/** 
 * create a new   {@link HDFSBlobStoreConnection} to specified HDFs namenode
 * @param store the  {@link HDFSBlobStore} this {@link HDFSBlobStoreConnection}will try to connect to
 * @throws IOException if the connection did not succeed
 */
public HDFSBlobStoreConnection(final HDFSBlobStore store) throws IOException {
  this.store=store;
  hdfs=this.getFileSystem();
}"
44515,"/** 
 * check the connection state
 * @return true if the connection is open
 */
public boolean isClosed(){
  return hdfs == null;
}","/** 
 * check the connection state
 * @return true if the connection is open
 */
public boolean isClosed(){
  return closed;
}"
44516,"FileSystem getFileSystem() throws IOException {
  if (hdfs == null) {
    hdfs=store.openHDFSConnection();
    log.debug(""String_Node_Str"" + store.getId());
  }
  return hdfs;
}","FileSystem getFileSystem() throws IOException {
  if (hdfs == null) {
    hdfs=store.getFilesystem();
    log.debug(""String_Node_Str"" + store.getId());
  }
  return hdfs;
}"
44517,"/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  return new HDFSIdIterator(this.getFileSystem(),filterPrefix);
}","/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  if (isClosed()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return new HDFSIdIterator(this.getFileSystem(),filterPrefix);
}"
44518,"/** 
 * close this connection
 */
@Override public void close(){
  store.releaseHDFSConnection(hdfs);
  hdfs=null;
}","/** 
 * close this connection
 */
@Override public void close(){
  closed=true;
  hdfs=null;
}"
44519,"/** 
 * fetch a   {@link HDFSBlob} from the {@link HDFSBlobStore}
 * @param uri the  {@link URI} of the {@link HDFSBlob}
 * @param hints not used
 * @throws UnsupportedIdException if the supplied  {@link URI} was not valid
 */
public Blob getBlob(final URI uri,final Map<String,String> hints) throws UnsupportedIdException, IOException {
  if (uri == null) {
    URI tmp=URI.create(store.getId() + UUID.randomUUID().toString());
    log.debug(""String_Node_Str"" + tmp.toASCIIString());
    return new HDFSBlob(tmp,this);
  }
  log.debug(""String_Node_Str"" + uri);
  if (uri.getRawSchemeSpecificPart().startsWith(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + uri);
  }
  if (!uri.toASCIIString().startsWith(""String_Node_Str"")) {
    throw new UnsupportedIdException(uri,""String_Node_Str"");
  }
  HDFSBlob blob=new HDFSBlob(uri,this);
  return blob;
}","/** 
 * fetch a   {@link HDFSBlob} from the {@link HDFSBlobStore}
 * @param uri the  {@link URI} of the {@link HDFSBlob}
 * @param hints not used
 * @throws UnsupportedIdException if the supplied  {@link URI} was not valid
 */
public Blob getBlob(final URI uri,final Map<String,String> hints) throws UnsupportedIdException, IOException {
  if (isClosed()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (uri == null) {
    URI tmp=URI.create(store.getId() + UUID.randomUUID().toString());
    log.debug(""String_Node_Str"" + tmp.toASCIIString());
    return new HDFSBlob(tmp,this);
  }
  log.debug(""String_Node_Str"" + uri);
  if (uri.getRawSchemeSpecificPart().startsWith(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + uri);
  }
  if (!uri.toASCIIString().startsWith(""String_Node_Str"")) {
    throw new UnsupportedIdException(uri,""String_Node_Str"");
  }
  HDFSBlob blob=new HDFSBlob(uri,this);
  return blob;
}"
44520,"@Test public void testGetFileSystem() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getFileSystem());
  assertTrue(connection.getFileSystem() == mockFs);
}","@Test public void testGetFileSystem() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getFileSystem());
  assertTrue(connection.getFileSystem() == mockFs);
}"
44521,"@Test(expected=UnsupportedOperationException.class) public void testSync() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.sync();
}","@Test(expected=UnsupportedOperationException.class) public void testSync() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.sync();
}"
44522,"@Test public void testGetBlob1() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(3);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}","@Test public void testGetBlob1() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId).times(3);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}"
44523,"@Test public void testListBlobIds() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus()).times(2);
  expect(mockStore.getId()).andReturn(URI.create(""String_Node_Str"")).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}","@Test public void testListBlobIds() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus()).times(2);
  expect(mockStore.getId()).andReturn(URI.create(""String_Node_Str"")).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}"
44524,"@Test public void testGetBlobStore() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getBlobStore());
  assertTrue(connection.getBlobStore() == mockStore);
  assertTrue(connection.getBlobStore() instanceof HDFSBlobStore);
}","@Test public void testGetBlobStore() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getBlobStore());
  assertTrue(connection.getBlobStore() == mockStore);
  assertTrue(connection.getBlobStore() instanceof HDFSBlobStore);
}"
44525,"@Test public void testClose() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  mockFs.close();
  mockStore.releaseHDFSConnection(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.close();
}","@Test public void testClose() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  mockFs.close();
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.close();
}"
44526,"@Test public void testHDFSBlobStoreConnection() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str""));
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection);
}","@Test public void testHDFSBlobStoreConnection() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection);
}"
44527,"@Test public void testReopen() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str""));
  mockFs.close();
  mockStore.releaseHDFSConnection(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertFalse(connection.isClosed());
  connection.close();
}","@Test public void testReopen() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  mockFs.close();
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertFalse(connection.isClosed());
  connection.close();
}"
44528,"@Test public void testCreateBlob1() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(20),null));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  byte[] buf=new byte[4096];
  new Random().nextBytes(buf);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new ByteArrayInputStream(buf),4096,null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
  assertTrue(b.exists());
}","@Test public void testCreateBlob1() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId).times(3);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(20),null));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  byte[] buf=new byte[4096];
  new Random().nextBytes(buf);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new ByteArrayInputStream(buf),4096,null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
  assertTrue(b.exists());
}"
44529,"/** 
 * creates a new   {@link HDFSBlob} using the supplied uri as an identifierfor the underlying  {@link HDFSBlobStoreConnection}
 * @param uri the identifier of the  {@link HDFSBlob}
 * @param conn the  {@link HDFSBlobStoreConnection} that should be used tomanipulate this  {@link HDFSBlob}
 * @throws UnsupportedIdException
 */
public HDFSBlob(final URI uri,final HDFSBlobStoreConnection conn) throws UnsupportedIdException {
  if (uri.getScheme() == null) {
    throw new UnsupportedIdException(uri);
  }
  this.conn=conn;
  try {
    if (uri.getPath() == null && uri.toString().startsWith(""String_Node_Str"")) {
      this.uri=new URI(conn.getBlobStore().getId() + (conn.getBlobStore().getId().toASCIIString().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + uri.getRawSchemeSpecificPart());
    }
 else {
      this.uri=uri;
    }
    this.path=new Path(this.uri.toASCIIString());
  }
 catch (  URISyntaxException e) {
    throw new UnsupportedIdException(uri,e.getLocalizedMessage());
  }
}","/** 
 * creates a new   {@link HDFSBlob} using the supplied uri as an identifierfor the underlying  {@link HDFSBlobStoreConnection}
 * @param uri the identifier of the  {@link HDFSBlob}
 * @param conn the  {@link HDFSBlobStoreConnection} that should be used tomanipulate this  {@link HDFSBlob}
 * @throws UnsupportedIdException
 */
public HDFSBlob(final URI uri,final HDFSBlobStoreConnection conn){
  this.conn=conn;
  this.storeId=this.conn.getBlobStore().getId();
  this.uri=uri;
  this.path=new Path(this.storeId.toASCIIString() + ""String_Node_Str"" + this.uri.getRawSchemeSpecificPart());
}"
44530,"/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    return this.getFileSystem().exists(path);
  }
}","/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    this.storeId=this.conn.getBlobStore().getId();
    return this.getFileSystem().exists(path);
  }
}"
44531,"/** 
 * open a new   {@link HDFSBlobStoreConnection} to a HDFS namenode
 * @param tx since transactions are not supported. this must be set to null
 * @param hints not used
 * @return a new {@link HDFSBlobStoreConnection} th this{@link HDFSBlobStore}'s id
 * @throws UnsupportedOperationException if the transaction parameter was not null
 * @throws IOException if the operation did not succeed
 */
public BlobStoreConnection openConnection(final Transaction tx,final Map<String,String> hints) throws UnsupportedOperationException, IOException {
  return new HDFSBlobStoreConnection(this);
}","/** 
 * open a new   {@link HDFSBlobStoreConnection} to a HDFS namenode
 * @param tx since transactions are not supported. this must be set to null
 * @param hints not used
 * @return a new {@link HDFSBlobStoreConnection} th this{@link HDFSBlobStore}'s id
 * @throws UnsupportedOperationException if the transaction parameter was not null
 * @throws IOException if the operation did not succeed
 */
public BlobStoreConnection openConnection(final Transaction tx,final Map<String,String> hints) throws UnsupportedOperationException, IOException {
  if (tx != null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return new HDFSBlobStoreConnection(this);
}"
44532,"/** 
 * create a new   {@link HDFSBlobStore} at a specific URI in {@link String}format
 * @param id the  {@link URI} pointing to the HDFS namenode
 * @throws URISyntaxException if the supplied  {@link URI} was not valid
 */
public HDFSBlobStore(final String uri) throws URISyntaxException {
  this.id=new URI(uri);
}","/** 
 * create a new   {@link HDFSBlobStore} at a specific URI in {@link String}format
 * @param id the  {@link URI} pointing to the HDFS namenode
 * @throws URISyntaxException if the supplied  {@link URI} was not valid
 */
public HDFSBlobStore(final URI uri){
  this.id=uri;
}"
44533,"/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  return new HDFSIdIterator(getFiles(new Path(filterPrefix),new ArrayList<FileStatus>()));
}","/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  if (filterPrefix == null || filterPrefix.length() == 0) {
    return new HDFSIdIterator(getFiles(new Path(this.store.getId().toASCIIString() + ""String_Node_Str""),new ArrayList<FileStatus>(),true));
  }
  int delim=filterPrefix.lastIndexOf('/');
  List<FileStatus> files=new ArrayList<FileStatus>();
  Path path=new Path(this.store.getId().toASCIIString() + ""String_Node_Str"" + (delim > -1 ? filterPrefix.substring(0,delim) : ""String_Node_Str""));
  List<FileStatus> tmpFiles=getFiles(path,new ArrayList<FileStatus>(),false);
  for (  FileStatus f : tmpFiles) {
    log.debug(""String_Node_Str"" + f.getPath().getName());
    if (f.getPath().getName().startsWith(filterPrefix)) {
      files.add(f);
    }
  }
  return new HDFSIdIterator(files);
}"
44534,"private List<FileStatus> getFiles(final Path p,List<FileStatus> target) throws IOException {
  for (  FileStatus f : getFileSystem().listStatus(p)) {
    if (f.isFile()) {
      target.add(f);
    }
    if (f.isDirectory()) {
      getFiles(f.getPath(),target);
    }
  }
  return target;
}","private List<FileStatus> getFiles(final Path p,List<FileStatus> target,boolean recursive) throws IOException {
  for (  FileStatus f : getFileSystem().listStatus(p)) {
    if (f.isFile()) {
      target.add(f);
    }
    if (f.isDirectory() && recursive) {
      getFiles(f.getPath(),target,recursive);
    }
  }
  return target;
}"
44535,"/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  HDFSBlob blob;
  OutputStream out=null;
  try {
    blob=new HDFSBlob(new URI(this.store.getId() + UUID.randomUUID().toString()),this);
    out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    return blob;
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}","/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  if (in == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  HDFSBlob blob;
  OutputStream out=null;
  try {
    blob=new HDFSBlob(URI.create(""String_Node_Str"" + UUID.randomUUID().toString()),this);
    log.debug(""String_Node_Str"" + blob.getId().toASCIIString());
    out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    return blob;
  }
  finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}"
44536,"@Override public URI next(){
  return files.get(currentIndex++).getPath().toUri();
}","@Override public URI next(){
  return URI.create(""String_Node_Str"" + files.get(currentIndex++).getPath().getName());
}"
44537,"@Test public void testGetBlob1() throws Exception {
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}","@Test public void testGetBlob1() throws Exception {
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(3);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}"
44538,"@Test public void testListBlobIds() throws Exception {
  expect(mockStore.getFileSystem()).andReturn(mockFs);
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus());
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}","@Test public void testListBlobIds() throws Exception {
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus()).times(2);
  expect(mockStore.getId()).andReturn(URI.create(""String_Node_Str"")).times(2);
  expect(mockStore.getFileSystem()).andReturn(mockFs).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}"
44539,"@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}","@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri);
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}"
44540,"@Before public void init() throws Exception {
  mockFs=createMock(FileSystem.class);
  store=new HDFSBlobStore(storeUri.toASCIIString());
  Field f=HDFSBlobStore.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  f.set(store,mockFs);
}","@Before public void init() throws Exception {
  mockFs=createMock(FileSystem.class);
  store=new HDFSBlobStore(storeUri);
  Field f=HDFSBlobStore.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  f.set(store,mockFs);
}"
44541,"@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}","@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri);
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}"
44542,"@Test public void testHDFSBlob() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b);
}","@Test public void testHDFSBlob() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b);
}"
44543,"@Test public void testExists() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.exists());
}","@Test public void testExists() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.exists());
}"
44544,"@Test @SuppressWarnings(""String_Node_Str"") public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(9);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockConnection.getBlob((URI)anyObject(),(Map<String,String>)anyObject())).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}","@Test @Ignore public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(1);
  expect(mockConnection.getBlob(anyObject(URI.class),anyObject(Map.class))).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(1);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}"
44545,"@Test public void testGetId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(new URI(blobStoreUri + blobUri.toASCIIString().substring(5)),b.getId());
}","@Test public void testGetId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(blobUri,b.getId());
}"
44546,"@Test public void testDelete() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  b.delete();
}","@Test public void testDelete() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore);
  expect(mockStore.getId()).andReturn(blobStoreUri);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  b.delete();
}"
44547,"@Test public void testGetCanonicalId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(new URI(blobStoreUri + blobUri.toASCIIString().substring(5)),b.getCanonicalId());
}","@Test public void testGetCanonicalId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(blobUri,b.getCanonicalId());
}"
44548,"@Test public void testOpenInputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openInputStream());
}","@Test public void testOpenInputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openInputStream());
}"
44549,"@Test public void testOpenOutputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openOutputStream(0,false));
}","@Test public void testOpenOutputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openOutputStream(0,false));
}"
44550,"@Test public void testGetConnection() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(mockConnection,b.getConnection());
}","@Test public void testGetConnection() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(mockConnection,b.getConnection());
}"
44551,"@Test public void testGetSize() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.getSize() == 1024);
}","@Test public void testGetSize() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.getSize() == 1024);
}"
44552,"/** 
 * Returns only the valid translations message corresponding to the declared   {@link org.jboss.logging.processor.intf.model.MessageMethod} methods in the{@link org.jboss.logging.processor.Annotations#messageBundle()} or {@link org.jboss.logging.processor.Annotations#messageLogger()}interface.
 * @param messageInterface the message interface.
 * @param file             the translation file
 * @return the valid translations messages
 */
private Map<MessageMethod,String> validateTranslationMessages(final MessageInterface messageInterface,final File file){
  Map<MessageMethod,String> validTranslations=new HashMap<MessageMethod,String>();
  try {
    Properties translations=new Properties();
    translations.load(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
    final Set<MessageMethod> messageMethods=new HashSet<MessageMethod>();
    messageMethods.addAll(messageInterface.methods());
    for (    MessageInterface msgIntf : messageInterface.extendedInterfaces()) {
      if (msgIntf.isLoggerInterface()) {
        continue;
      }
      messageMethods.addAll(msgIntf.methods());
    }
    for (    MessageMethod messageMethod : messageMethods) {
      final String key=messageMethod.translationKey();
      if (translations.containsKey(key)) {
        final String initMessage=messageMethod.message().value();
        final String translationMessage=translations.getProperty(key);
        if (!translationMessage.trim().isEmpty()) {
          final FormatValidator validator=getValidatorFor(messageMethod,translationMessage);
          if (validator.isValid()) {
            validTranslations.put(messageMethod,translationMessage);
          }
 else {
            logger().warn(validator.summaryMessage());
          }
        }
 else {
          logger().warn(""String_Node_Str"",key);
        }
      }
 else {
        logger().warn(""String_Node_Str"",key);
      }
    }
  }
 catch (  IOException e) {
    logger().error(e,""String_Node_Str"",file.getName());
  }
  return validTranslations;
}","/** 
 * Returns only the valid translations message corresponding to the declared   {@link org.jboss.logging.processor.intf.model.MessageMethod} methods in the{@link org.jboss.logging.processor.Annotations#messageBundle()} or {@link org.jboss.logging.processor.Annotations#messageLogger()}interface.
 * @param messageInterface the message interface.
 * @param file             the translation file
 * @return the valid translations messages
 */
private Map<MessageMethod,String> validateTranslationMessages(final MessageInterface messageInterface,final File file){
  Map<MessageMethod,String> validTranslations=new HashMap<MessageMethod,String>();
  try {
    Properties translations=new Properties();
    translations.load(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
    final Set<MessageMethod> messageMethods=new HashSet<MessageMethod>();
    messageMethods.addAll(messageInterface.methods());
    for (    MessageInterface msgIntf : messageInterface.extendedInterfaces()) {
      if (msgIntf.isLoggerInterface()) {
        continue;
      }
      messageMethods.addAll(msgIntf.methods());
    }
    for (    MessageMethod messageMethod : messageMethods) {
      final String key=messageMethod.translationKey();
      if (translations.containsKey(key)) {
        final String initMessage=messageMethod.message().value();
        final String translationMessage=translations.getProperty(key);
        if (!translationMessage.trim().isEmpty()) {
          final FormatValidator validator=getValidatorFor(messageMethod,translationMessage);
          if (validator.isValid()) {
            if (validator.argumentCount() == messageMethod.formatParameterCount()) {
              validTranslations.put(messageMethod,translationMessage);
            }
 else {
              logger().warn((Element)messageMethod.reference(),""String_Node_Str"",validator.argumentCount(),messageMethod.formatParameterCount());
            }
          }
 else {
            logger().warn((Element)messageMethod.reference(),validator.summaryMessage());
          }
        }
 else {
          logger().warn(""String_Node_Str"",key);
        }
      }
 else {
        logger().warn(""String_Node_Str"",key);
      }
    }
  }
 catch (  IOException e) {
    logger().error(e,""String_Node_Str"",file.getName());
  }
  return validTranslations;
}"
44553,"/** 
 * Initialize the string format.
 */
private void init(){
  final Matcher matcher=PATTERN.matcher(format);
  int position=0;
  int i=0;
  while (i < format.length()) {
    if (matcher.find(i)) {
      if (matcher.start() != i) {
        formatParts.add(StringPart.of(position++,format.substring(i,matcher.start())));
      }
      final String[] formatGroup=new String[6];
      for (int groupIndex=0; groupIndex < matcher.groupCount(); groupIndex++) {
        formatGroup[groupIndex]=matcher.group(groupIndex + 1);
      }
      final StringFormatPart stringFormatPart=StringFormatPart.of(position++,formatGroup);
      formatParts.add(stringFormatPart);
      formats.add(stringFormatPart);
      i=matcher.end();
    }
 else {
      checkText(format.substring(i));
      formatParts.add(StringPart.of(position,format.substring(i)));
      break;
    }
  }
  final Set<Integer> counted=new HashSet<Integer>();
  for (  StringFormatPart stringFormatPart : formats) {
    if (stringFormatPart.conversion().isLineSeparator() || stringFormatPart.conversion().isPercent())     continue;
    if (stringFormatPart.index() > 0) {
      if (counted.add(stringFormatPart.index()))       argumentCount++;
    }
 else     if (stringFormatPart.index() == 0) {
      argumentCount++;
    }
  }
}","/** 
 * Initialize the string format.
 */
private void init(){
  final Matcher matcher=PATTERN.matcher(format);
  int position=0;
  int i=0;
  while (i < format.length()) {
    if (matcher.find(i)) {
      if (matcher.start() != i) {
        formatParts.add(StringPart.of(position++,format.substring(i,matcher.start())));
      }
      final String[] formatGroup=new String[6];
      for (int groupIndex=0; groupIndex < matcher.groupCount(); groupIndex++) {
        formatGroup[groupIndex]=matcher.group(groupIndex + 1);
      }
      final StringFormatPart stringFormatPart=StringFormatPart.of(position++,formatGroup);
      formatParts.add(stringFormatPart);
      formats.add(stringFormatPart);
      i=matcher.end();
    }
 else {
      checkText(format.substring(i));
      formatParts.add(StringPart.of(position,format.substring(i)));
      break;
    }
  }
  final Set<Integer> counted=new HashSet<Integer>();
  int count=1;
  for (  StringFormatPart stringFormatPart : formats) {
    if (stringFormatPart.conversion().isLineSeparator() || stringFormatPart.conversion().isPercent())     continue;
    if (stringFormatPart.index() > 0) {
      if (counted.add(stringFormatPart.index())) {
        argumentCount++;
      }
    }
 else     if (stringFormatPart.index() == 0) {
      if (!counted.contains(count)) {
        argumentCount++;
        counted.add(count);
        count++;
      }
    }
  }
}"
44554,"/** 
 * Creates a string format.
 * @param format the format.
 * @return the string format.
 */
public static StringFormatValidator withTranslation(final String format,final String translationFormat){
  final StringFormatValidator result=new StringFormatValidator(format);
  final StringFormatValidator translationResult=new StringFormatValidator(translationFormat);
  try {
    result.init();
    result.validate();
  }
 catch (  RuntimeException e) {
    if (result.isValid()) {
      result.valid=false;
      result.setDetailMessage(""String_Node_Str"",format,e.getMessage());
    }
  }
  try {
    translationResult.init();
    translationResult.validate();
  }
 catch (  RuntimeException e) {
    if (translationResult.isValid()) {
      translationResult.valid=false;
      translationResult.setDetailMessage(""String_Node_Str"",format,e.getMessage());
    }
  }
  if (!result.isValid())   return result;
  if (!translationResult.isValid())   return translationResult;
  final List<StringFormatPart> initParts=sortParts(result.formats);
  final List<StringFormatPart> translationParts=sortParts(translationResult.formats);
  if (initParts.size() == translationParts.size()) {
    final Iterator<StringFormatPart> initIter=initParts.iterator();
    final Iterator<StringFormatPart> translationIter=translationParts.iterator();
    while (initIter.hasNext()) {
      final StringFormatPart initPart=initIter.next();
      final StringFormatPart translationPart=translationIter.next();
      if (initPart.conversion() != translationPart.conversion()) {
        result.valid=false;
        result.setDetailMessage(""String_Node_Str"",translationFormat,format);
        result.setSummaryMessage(""String_Node_Str"");
        break;
      }
    }
  }
 else {
    result.valid=false;
    result.setDetailMessage(""String_Node_Str"",translationFormat,format);
    result.setSummaryMessage(""String_Node_Str"");
  }
  return result;
}","/** 
 * Creates a string format. <p/> <b>Note:</b> The validator returned is the validator for the translation format.
 * @param format            the format.
 * @param translationFormat the format of the translation
 * @return the string format.
 */
public static StringFormatValidator withTranslation(final String format,final String translationFormat){
  final StringFormatValidator result=new StringFormatValidator(format);
  final StringFormatValidator translationResult=new StringFormatValidator(translationFormat);
  try {
    result.init();
    result.validate();
  }
 catch (  RuntimeException e) {
    if (result.isValid()) {
      result.valid=false;
      result.setDetailMessage(""String_Node_Str"",format,e.getMessage());
    }
  }
  try {
    translationResult.init();
    translationResult.validate();
  }
 catch (  RuntimeException e) {
    if (translationResult.isValid()) {
      translationResult.valid=false;
      translationResult.setDetailMessage(""String_Node_Str"",format,e.getMessage());
    }
  }
  if (!result.isValid())   return result;
  if (!translationResult.isValid())   return translationResult;
  final List<StringFormatPart> initParts=sortParts(result.formats);
  final List<StringFormatPart> translationParts=sortParts(translationResult.formats);
  if (initParts.size() == translationParts.size()) {
    final Iterator<StringFormatPart> initIter=initParts.iterator();
    final Iterator<StringFormatPart> translationIter=translationParts.iterator();
    while (initIter.hasNext()) {
      final StringFormatPart initPart=initIter.next();
      final StringFormatPart translationPart=translationIter.next();
      if (initPart.conversion() != translationPart.conversion()) {
        translationResult.valid=false;
        translationResult.setDetailMessage(""String_Node_Str"",translationFormat,format);
        translationResult.setSummaryMessage(""String_Node_Str"");
        break;
      }
    }
  }
 else {
    translationResult.valid=false;
    translationResult.setDetailMessage(""String_Node_Str"",translationFormat,format);
    translationResult.setSummaryMessage(""String_Node_Str"");
  }
  return translationResult;
}"
44555,"static List<StringFormatPart> sortParts(final Collection<StringFormatPart> parts){
  final TreeMap<Integer,List<StringFormatPart>> paramMap=new TreeMap<Integer,List<StringFormatPart>>();
  int counter=0;
  int index=0;
  for (  StringFormatPart part : parts) {
    if (part.index() > 0 || part.index() == 0) {
      index=part.index();
    }
 else     if (part.index() < -1) {
      index=0;
    }
    final List<StringFormatPart> params;
    if (paramMap.containsKey(index)) {
      params=paramMap.get(index);
      if (index > 0) {
        continue;
      }
    }
 else {
      params=new ArrayList<StringFormatPart>();
      paramMap.put(index,params);
    }
    counter++;
    params.add(part);
  }
  final List<StringFormatPart> result=new ArrayList<StringFormatPart>(parts.size());
  for (  List<StringFormatPart> list : paramMap.values()) {
    result.addAll(list);
  }
  return result;
}","static List<StringFormatPart> sortParts(final Collection<StringFormatPart> parts){
  final TreeMap<Integer,StringFormatPart> paramMap=new TreeMap<Integer,StringFormatPart>();
  int index=0;
  int count=0;
  for (  StringFormatPart part : parts) {
    if (part.index() > 0) {
      index=part.index();
    }
 else     if (part.index() == 0) {
      index=++count;
    }
    if (!paramMap.containsKey(index)) {
      paramMap.put(index,part);
    }
  }
  return new ArrayList<StringFormatPart>(paramMap.values());
}"
44556,"private void compare(final int handlerIndex,final String key,final Properties properties,final Object... params){
  final String expectedMessage=getFormattedProperty(key,properties,params);
  final String loggedMessage=HANDLER.getMessage(handlerIndex).replaceAll(LOGGER_ID_PATTERN,""String_Node_Str"");
  Assert.assertEquals(expectedMessage,loggedMessage);
}","private void compare(final int handlerIndex,final String key,final Properties properties,final Object... params){
  final String expectedMessage=getFormattedProperty(key,properties,params);
  final String loggedMessage=HANDLER.getMessage(handlerIndex).replaceAll(LOGGER_ID_PATTERN,""String_Node_Str"");
  Assert.assertEquals(loggedMessage,expectedMessage);
}"
44557,"@Test public void testStringFormat() throws Exception {
  final String fileName=""String_Node_Str"";
  final Properties en=findFile(String.format(fileName,""String_Node_Str""));
  final Properties es=findFile(String.format(fileName,""String_Node_Str""));
  final StringFormatLogger logger=Logger.getMessageLogger(StringFormatLogger.class,CATEGORY,new Locale(""String_Node_Str""));
  final Date date=new Date();
  logger.dukesBirthday(date);
  logger.dukesBirthdayFailure(date);
  logger.stringInt(""String_Node_Str"",1);
  logger.stringIntFailure(""String_Node_Str"",1);
  compare(0,""String_Node_Str"",es,date);
  compare(1,""String_Node_Str"",en,date);
  compare(2,""String_Node_Str"",es,""String_Node_Str"",1);
  compare(3,""String_Node_Str"",en,""String_Node_Str"",1);
}","@Test public void testStringFormat() throws Exception {
  final String fileName=""String_Node_Str"";
  final Properties en=findFile(String.format(fileName,""String_Node_Str""));
  final Properties es=findFile(String.format(fileName,""String_Node_Str""));
  final StringFormatLogger logger=Logger.getMessageLogger(StringFormatLogger.class,CATEGORY,new Locale(""String_Node_Str""));
  final Date date=new Date();
  logger.dukesBirthday(date);
  logger.dukesBirthdayFailure(date);
  compare(0,""String_Node_Str"",es,date);
  compare(1,""String_Node_Str"",en,date);
  logger.stringInt(""String_Node_Str"",1);
  logger.stringIntFailure(""String_Node_Str"",1);
  compare(2,""String_Node_Str"",es,""String_Node_Str"",1);
  compare(3,""String_Node_Str"",en,""String_Node_Str"",1);
  logger.repeat(""String_Node_Str"");
  logger.repeatFailure(""String_Node_Str"");
  compare(4,""String_Node_Str"",es,""String_Node_Str"");
  compare(5,""String_Node_Str"",en,""String_Node_Str"");
}"
44558,"@Test public void validateParameterTypePerPosition(){
  StringFormatValidator validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",10,""String_Node_Str"");
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"");
  assertFalse(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",42);
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",42,new Date(),""String_Node_Str"");
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",42);
  assertTrue(validator.isValid(),validator.detailMessage());
}","@Test public void validateParameterTypePerPosition(){
  StringFormatValidator validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",10,""String_Node_Str"");
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"");
  assertFalse(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",42);
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",42,new Date(),""String_Node_Str"");
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"",42);
  assertTrue(validator.isValid(),validator.detailMessage());
  validator=StringFormatValidator.of(""String_Node_Str"",""String_Node_Str"");
  assertTrue(validator.isValid(),validator.detailMessage());
}"
44559,"@Override public boolean isAssignableFrom(final Class<?> type){
  final TypeMirror typeMirror=elements.getTypeElement(type.getName().replace(""String_Node_Str"",""String_Node_Str"")).asType();
  return types.isAssignable(param.asType(),typeMirror);
}","@Override public boolean isAssignableFrom(final Class<?> type){
  final TypeMirror typeMirror=elements.getTypeElement(typeToString(type)).asType();
  return types.isAssignable(param.asType(),typeMirror);
}"
44560,"@Override public boolean isSubtypeOf(final Class<?> type){
  final TypeMirror typeMirror=elements.getTypeElement(type.getName().replace(""String_Node_Str"",""String_Node_Str"")).asType();
  return types.isSubtype(typeMirror,param.asType());
}","@Override public boolean isSubtypeOf(final Class<?> type){
  final TypeMirror typeMirror=elements.getTypeElement(typeToString(type)).asType();
  return types.isSubtype(typeMirror,param.asType());
}"
44561,"private boolean checkType(final Parameter parameter,final TypeMirror type){
  if (parameter.isPrimitive()) {
    return parameter.type().equalsIgnoreCase(type.getKind().name());
  }
  return types.isAssignable(elements.getTypeElement(parameter.type()).asType(),type);
}","private boolean checkType(final Parameter parameter,final TypeMirror type){
  if (parameter.isPrimitive()) {
    if (type.getKind().isPrimitive()) {
      return parameter.type().equalsIgnoreCase(type.getKind().name());
    }
    return types.isAssignable(elements.getTypeElement(unbox(parameter)).asType(),type);
  }
  if (type.getKind().isPrimitive()) {
    final TypeElement primitiveType=types.boxedClass((PrimitiveType)type);
    return types.isAssignable(elements.getTypeElement(parameter.type()).asType(),primitiveType.asType());
  }
  return types.isAssignable(elements.getTypeElement(parameter.type()).asType(),type);
}"
44562,"/** 
 * Generate the code corresponding to this class model
 * @return the generated code
 * @throws IllegalStateException if the class has already been defined.
 */
JCodeModel generateModel() throws IllegalStateException {
  final JDefinedClass definedClass=getDefinedClass();
  JAnnotationUse generatedAnnotation=definedClass.annotate(javax.annotation.Generated.class);
  generatedAnnotation.param(""String_Node_Str"",getClass().getName());
  generatedAnnotation.param(""String_Node_Str"",ClassModelHelper.generatedDateValue());
  JDocComment docComment=definedClass.javadoc();
  docComment.add(""String_Node_Str"");
  if (superClassName != null) {
    definedClass._extends(codeModel.ref(superClassName));
  }
  definedClass._implements(codeModel.ref(messageInterface.name().replace(""String_Node_Str"",""String_Node_Str"")));
  if (!messageInterface.extendedInterfaces().isEmpty()) {
    for (    MessageInterface intf : messageInterface.extendedInterfaces()) {
      final String interfaceName=intf.name().replace(""String_Node_Str"",""String_Node_Str"");
      definedClass._implements(codeModel.ref(interfaceName));
    }
  }
  return codeModel;
}","/** 
 * Generate the code corresponding to this class model
 * @return the generated code
 * @throws IllegalStateException if the class has already been defined.
 */
JCodeModel generateModel() throws IllegalStateException {
  final JDefinedClass definedClass=getDefinedClass();
  JAnnotationUse generatedAnnotation=definedClass.annotate(javax.annotation.Generated.class);
  generatedAnnotation.param(""String_Node_Str"",getClass().getName());
  generatedAnnotation.param(""String_Node_Str"",ClassModelHelper.generatedDateValue());
  JDocComment docComment=definedClass.javadoc();
  docComment.add(""String_Node_Str"");
  if (superClassName != null) {
    definedClass._extends(codeModel.ref(superClassName));
  }
  definedClass._implements(codeModel.ref(typeToString(messageInterface.name())));
  if (!messageInterface.extendedInterfaces().isEmpty()) {
    for (    MessageInterface intf : messageInterface.extendedInterfaces()) {
      final String interfaceName=typeToString(intf.name());
      definedClass._implements(codeModel.ref(interfaceName));
    }
  }
  return codeModel;
}"
44563,"/** 
 * Returns the number of parameters excluding the   {@link org.jboss.logging.generator.Annotations#cause()} parameterand any  {@link org.jboss.logging.generator.Annotations#param()} parameters if found.
 * @param params the parameters to get the count for.
 * @return the number of parameters.
 */
public static int parameterCount(final Collection<? extends VariableElement> params){
  int result=params.size();
  for (  VariableElement param : params) {
    if (isAnnotatedWith(param,annotations().param())) {
      --result;
    }
  }
  return (result - (hasCause(params) ? 1 : 0));
}","/** 
 * Returns the number of parameters excluding the   {@link org.jboss.logging.generator.Annotations#cause()} parameterand any  {@link org.jboss.logging.generator.Annotations#param()} parameters if found.
 * @param params the parameters to get the count for.
 * @return the number of parameters.
 */
public static int parameterCount(final Collection<? extends VariableElement> params){
  int result=params.size();
  for (  VariableElement param : params) {
    if (isAnnotatedWith(param,annotations().param()) || isAnnotatedWith(param,annotations().field()) || isAnnotatedWith(param,annotations().property())) {
      --result;
    }
  }
  return (result - (hasCause(params) ? 1 : 0));
}"
44564,"@Override public void processTypeElement(final TypeElement annotation,final TypeElement element,final MessageInterface messageInterface){
  if (generatedFilesPath != null) {
    if (element.getKind().isInterface()) {
      String packageName=elementUtils().getPackageOf(element).getQualifiedName().toString();
      String relativePath=packageName.replaceAll(""String_Node_Str"",FILE_SEPARATOR);
      String fileName=getPrimaryClassNamePrefix(element) + GENERATED_FILE_EXTENSION;
      this.generateSkeletalTranslationFile(relativePath,fileName,messageInterface);
    }
  }
}","@Override public void processTypeElement(final TypeElement annotation,final TypeElement element,final MessageInterface messageInterface){
  if (generatedFilesPath != null) {
    if (element.getKind().isInterface()) {
      String packageName=elementUtils().getPackageOf(element).getQualifiedName().toString();
      String relativePath=packageName.replace('.',File.separatorChar);
      String fileName=getPrimaryClassNamePrefix(element) + GENERATED_FILE_EXTENSION;
      this.generateSkeletalTranslationFile(relativePath,fileName,messageInterface);
    }
  }
}"
44565,"/** 
 * Initializes the instance.
 * @param typeUtil the type utilities for internal usage.
 * @param method   the method to process.
 */
private void init(final Types typeUtil,ExecutableElement method){
  this.method=method;
  Message message=method.getAnnotation(Message.class);
  LogMessage logMessage=method.getAnnotation(LogMessage.class);
  if (method.getReturnType().getKind() != TypeKind.VOID) {
    try {
      this.returnTypeDescriptor=ReturnType.of(this.returnType());
    }
 catch (    ClassNotFoundException ex) {
      throw new IllegalStateException(String.format(""String_Node_Str"",method.getReturnType(),method));
    }
  }
  final Collection<MethodDescriptor> methodDescriptors=find(this.name());
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    if (methodDesc.message() != null && message == null) {
      message=methodDesc.message();
    }
    if (message != null) {
      break;
    }
  }
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    if (methodDesc.message == null) {
      methodDesc.message=message;
      descriptors.remove(methodDesc);
      descriptors.add(methodDesc);
    }
  }
  for (  VariableElement param : method.getParameters()) {
    if (param.getAnnotation(Cause.class) != null) {
      this.cause=new MethodParameter(typeUtil.asElement(param.asType()).toString(),param);
    }
    if (param.asType().getKind().isPrimitive()) {
      this.parameters.add(new MethodParameter(param.asType().toString(),param));
    }
 else {
      this.parameters.add(new MethodParameter(typeUtil.asElement(param.asType()).toString(),param));
    }
  }
  this.logMessage=logMessage;
  this.message=message;
}","/** 
 * Initializes the instance.
 * @param typeUtil the type utilities for internal usage.
 * @param method   the method to process.
 */
private void init(final Types typeUtil,ExecutableElement method){
  this.method=method;
  Message message=method.getAnnotation(Message.class);
  LogMessage logMessage=method.getAnnotation(LogMessage.class);
  this.returnType=ReturnType.of(method.getReturnType(),typeUtil);
  final Collection<MethodDescriptor> methodDescriptors=find(this.name());
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    if (methodDesc.message() != null && message == null) {
      message=methodDesc.message();
    }
    if (message != null) {
      break;
    }
  }
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    if (methodDesc.message == null) {
      methodDesc.message=message;
      descriptors.remove(methodDesc);
      descriptors.add(methodDesc);
    }
  }
  for (  VariableElement param : method.getParameters()) {
    if (param.getAnnotation(Cause.class) != null) {
      this.cause=new MethodParameter(typeUtil.asElement(param.asType()).toString(),param);
    }
    if (param.asType().getKind().isPrimitive()) {
      this.parameters.add(new MethodParameter(param.asType().toString(),param));
    }
 else {
      this.parameters.add(new MethodParameter(typeUtil.asElement(param.asType()).toString(),param));
    }
  }
  this.logMessage=logMessage;
  this.message=message;
}"
44566,"/** 
 * Returns the return type for the method.
 * @return the return type for the method.
 */
public String returnType(){
  return method.getReturnType().toString();
}","/** 
 * Returns the return type descriptor.
 * @return the return type descriptor.
 */
public ReturnType returnType(){
  return returnType;
}"
44567,"/** 
 * Initializes the object.
 */
private void init(){
  if (!primitive) {
    final Constructor<?>[] constructors=returnType.getConstructors();
    for (    Constructor<?> construct : constructors) {
      final Class<?>[] params=construct.getParameterTypes();
switch (params.length) {
case 1:
        final Class<?> param=params[0];
      if (param.isAssignableFrom(String.class)) {
        stringConsturctor=true;
      }
 else       if (Throwable.class.isAssignableFrom(param)) {
        throwableConstructor=true;
      }
    break;
case 2:
  final Class<?> param1=params[0];
final Class<?> param2=params[1];
if (param1.isAssignableFrom(String.class) && Throwable.class.isAssignableFrom(param2)) {
stringAndThrowableConstructor=true;
}
 else if (Throwable.class.isAssignableFrom(param1) && param2.isAssignableFrom(String.class)) {
throwableAndStringConstructor=true;
}
break;
}
}
}
}","/** 
 * Initializes the object.
 */
private void init(final Types typeUtil){
  if (!returnType.getKind().isPrimitive() && returnType.getKind() != TypeKind.VOID) {
    final Element element=typeUtil.asElement(returnType);
    final List<ExecutableElement> constructors=ElementFilter.constructorsIn(element.getEnclosedElements());
    for (    ExecutableElement constructor : constructors) {
      List<? extends VariableElement> params=constructor.getParameters();
switch (params.size()) {
case 1:
        if (ElementHelper.isAssignableFrom(params.get(0).asType(),String.class)) {
          stringConsturctor=true;
        }
 else         if (ElementHelper.isAssignableFrom(Throwable.class,params.get(0).asType())) {
          throwableConstructor=true;
        }
      break;
case 2:
    if (ElementHelper.isAssignableFrom(params.get(0).asType(),String.class) && ElementHelper.isAssignableFrom(Throwable.class,params.get(1).asType())) {
      stringAndThrowableConstructor=true;
    }
 else     if (ElementHelper.isAssignableFrom(Throwable.class,params.get(0).asType()) && ElementHelper.isAssignableFrom(params.get(1).asType(),String.class)) {
      throwableAndStringConstructor=true;
    }
  break;
}
}
}
}"
44568,"/** 
 * Creates a new descriptor.
 * @param returnTypeName the name of the return type.
 * @param primitive      {@code true} if the return type is a primitive, otherwise  {@code false}.
 * @throws ClassNotFoundException if the return type is not found in the classpath.
 */
private ReturnType(final String returnTypeName,final boolean primitive) throws ClassNotFoundException {
  this.returnTypeClassName=returnTypeName;
  this.primitive=primitive;
  if (primitive) {
    returnType=null;
  }
 else {
    returnType=Class.forName(returnTypeClassName);
  }
}","/** 
 * Creates a new descriptor that is not primitive.
 * @param returnTypeClassName the class name of the return type.
 */
private ReturnType(final TypeMirror returnType){
  this.returnType=returnType;
}"
44569,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((returnType == null) ? 0 : returnType.hashCode());
  result=prime * result + ((stringConsturctor) ? 1 : 0);
  result=prime * result + ((throwableConstructor) ? 1 : 0);
  result=prime * result + ((stringAndThrowableConstructor) ? 1 : 0);
  result=prime * result + ((throwableAndStringConstructor) ? 1 : 0);
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((returnType == null) ? 0 : returnType.hashCode());
  return result;
}"
44570,"/** 
 * Creates a new descriptor.
 * @param returnTypeName the name of the return type.
 * @param primitive      {@code true} if the return type is a primitive, otherwise  {@code false}.
 * @throws ClassNotFoundException if the return type is not found in the classpath.
 */
protected static ReturnType of(final String returnTypeName,final boolean primitive) throws ClassNotFoundException {
  final ReturnType result=new ReturnType(returnTypeName,primitive);
  result.init();
  return result;
}","/** 
 * Creates a new descriptor that is not primitive.
 * @param returnTypeClassName the class name of the return type.
 */
protected static ReturnType of(final TypeMirror returnType,final Types typeUtil){
  final ReturnType result=new ReturnType(returnType);
  result.init(typeUtil);
  return result;
}"
44571,"@Override public boolean equals(final Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof ReturnType)) {
    return false;
  }
  final ReturnType other=(ReturnType)obj;
  if ((this.returnType == null) ? other.returnType != null : this.returnType.equals(other.returnType)) {
    return false;
  }
  return (this.stringConsturctor == other.stringConsturctor) && (this.throwableConstructor == other.throwableConstructor) && (this.stringAndThrowableConstructor == other.stringAndThrowableConstructor)&& (this.throwableAndStringConstructor == other.throwableAndStringConstructor);
}","@Override public boolean equals(final Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof ReturnType)) {
    return false;
  }
  final ReturnType other=(ReturnType)obj;
  if ((this.returnType == null) ? other.returnType != null : this.returnType.equals(other.returnType)) {
    return false;
  }
  return true;
}"
44572,"/** 
 * Returns a string version of the return type.
 * @return a string version of the return type.
 */
public String getReturnTypeAsString(){
  return returnTypeClassName;
}","/** 
 * Returns a string version of the return type.
 * @return a string version of the return type.
 */
public String getReturnTypeAsString(){
  return returnType.toString();
}"
44573,"/** 
 * Indicates whether or not the return type is a primitive.
 * @return {@code true} if a primitive, otherwise {@code false}.
 */
public boolean isPrimitive(){
  return primitive;
}","/** 
 * Indicates whether or not the return type is a primitive.
 * @return {@code true} if a primitive, otherwise {@code false}.
 */
public boolean isPrimitive(){
  return returnType.getKind().isPrimitive();
}"
44574,"/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  JFieldVar projectCodeVar=null;
  if (!getProjectCode().isEmpty()) {
    projectCodeVar=getDefinedClass().field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,""String_Node_Str"");
    projectCodeVar.init(JExpr.lit(getProjectCode()));
  }
  getDefinedClass().constructor(JMod.PROTECTED);
  ClassModelUtil.createReadResolveMethod(getDefinedClass());
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final JClass returnType=codeModel.ref(methodDesc.returnType());
    final JMethod jMethod=getDefinedClass().method(JMod.PUBLIC | JMod.FINAL,returnType,methodDesc.name());
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final JMethod msgMethod=addMessageMethod(methodDesc.name(),message.value());
    final JBlock body=jMethod.body();
    final JClass returnField=codeModel.ref(returnType.fullName());
    final JVar result=body.decl(returnField,""String_Node_Str"");
    JClass formatter=null;
switch (message.format()) {
case MESSAGE_FORMAT:
      formatter=codeModel.ref(java.text.MessageFormat.class);
    break;
case PRINTF:
  formatter=codeModel.ref(String.class);
break;
}
final JInvocation formatterMethod=formatter.staticInvoke(""String_Node_Str"");
if (message.id() > Message.NONE && projectCodeVar != null) {
String formatedId=String.format(STRING_ID_FORMAT,message.id());
formatterMethod.arg(projectCodeVar.plus(JExpr.lit(formatedId)).plus(JExpr.invoke(msgMethod)));
}
 else {
formatterMethod.arg(JExpr.invoke(msgMethod));
}
for (MethodDescriptor.MethodParameter param : methodDesc.parameters()) {
final JClass paramType=codeModel.ref(param.fullType());
JVar paramVar=jMethod.param(JMod.FINAL,paramType,param.name());
if (!param.isCause()) {
formatterMethod.arg(paramVar);
}
}
if (codeModel.ref(Throwable.class).isAssignableFrom(returnField)) {
initCause(result,returnField,body,methodDesc,formatterMethod);
}
 else {
result.init(formatterMethod);
}
body._return(result);
}
return codeModel;
}","/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  JFieldVar projectCodeVar=null;
  if (!getProjectCode().isEmpty()) {
    projectCodeVar=getDefinedClass().field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,""String_Node_Str"");
    projectCodeVar.init(JExpr.lit(getProjectCode()));
  }
  getDefinedClass().constructor(JMod.PROTECTED);
  ClassModelUtil.createReadResolveMethod(getDefinedClass());
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final JClass returnType=codeModel.ref(methodDesc.returnType().getReturnTypeAsString());
    final JMethod jMethod=getDefinedClass().method(JMod.PUBLIC | JMod.FINAL,returnType,methodDesc.name());
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final JMethod msgMethod=addMessageMethod(methodDesc.name(),message.value());
    final JBlock body=jMethod.body();
    final JClass returnField=codeModel.ref(returnType.fullName());
    final JVar result=body.decl(returnField,""String_Node_Str"");
    JClass formatter=null;
switch (message.format()) {
case MESSAGE_FORMAT:
      formatter=codeModel.ref(java.text.MessageFormat.class);
    break;
case PRINTF:
  formatter=codeModel.ref(String.class);
break;
}
final JInvocation formatterMethod=formatter.staticInvoke(""String_Node_Str"");
if (message.id() > Message.NONE && projectCodeVar != null) {
String formatedId=String.format(STRING_ID_FORMAT,message.id());
formatterMethod.arg(projectCodeVar.plus(JExpr.lit(formatedId)).plus(JExpr.invoke(msgMethod)));
}
 else {
formatterMethod.arg(JExpr.invoke(msgMethod));
}
for (MethodDescriptor.MethodParameter param : methodDesc.parameters()) {
final JClass paramType=codeModel.ref(param.fullType());
JVar paramVar=jMethod.param(JMod.FINAL,paramType,param.name());
if (!param.isCause()) {
formatterMethod.arg(paramVar);
}
}
if (methodDesc.returnType().isException()) {
initCause(result,returnField,body,methodDesc,formatterMethod);
}
 else {
result.init(formatterMethod);
}
body._return(result);
}
return codeModel;
}"
44575,"private void initCause(final JVar result,final JClass returnField,final JBlock body,final MethodDescriptor methodDesc,final JInvocation formatterMethod){
  ReturnType desc=methodDesc.returnTypeDescriptor();
  if (desc.hasStringAndThrowableConstructor() && methodDesc.hasCause()) {
    result.init(JExpr._new(returnField).arg(formatterMethod).arg(JExpr.ref(methodDesc.cause().name())));
  }
 else   if (desc.hasThrowableAndStringConstructor() && methodDesc.hasCause()) {
    result.init(JExpr._new(returnField).arg(JExpr.ref(methodDesc.cause().name())).arg(formatterMethod));
  }
 else   if (desc.hasStringConsturctor()) {
    result.init(JExpr._new(returnField).arg(formatterMethod));
    if (methodDesc.hasCause()) {
      JInvocation resultInv=body.invoke(result,""String_Node_Str"");
      resultInv.arg(JExpr.ref(methodDesc.cause().name()));
    }
  }
 else   if (desc.hasThrowableConstructor() && methodDesc.hasCause()) {
    result.init(JExpr._new(returnField).arg(methodDesc.cause().name()));
  }
 else   if (methodDesc.hasCause()) {
    result.init(JExpr._new(returnField));
    JInvocation resultInv=body.invoke(result,""String_Node_Str"");
    resultInv.arg(JExpr.ref(methodDesc.cause().name()));
  }
 else {
    result.init(JExpr._new(returnField));
  }
}","private void initCause(final JVar result,final JClass returnField,final JBlock body,final MethodDescriptor methodDesc,final JInvocation formatterMethod){
  ReturnType desc=methodDesc.returnType();
  if (desc.hasStringAndThrowableConstructor() && methodDesc.hasCause()) {
    result.init(JExpr._new(returnField).arg(formatterMethod).arg(JExpr.ref(methodDesc.cause().name())));
  }
 else   if (desc.hasThrowableAndStringConstructor() && methodDesc.hasCause()) {
    result.init(JExpr._new(returnField).arg(JExpr.ref(methodDesc.cause().name())).arg(formatterMethod));
  }
 else   if (desc.hasStringConsturctor()) {
    result.init(JExpr._new(returnField).arg(formatterMethod));
    if (methodDesc.hasCause()) {
      JInvocation resultInv=body.invoke(result,""String_Node_Str"");
      resultInv.arg(JExpr.ref(methodDesc.cause().name()));
    }
  }
 else   if (desc.hasThrowableConstructor() && methodDesc.hasCause()) {
    result.init(JExpr._new(returnField).arg(methodDesc.cause().name()));
  }
 else   if (methodDesc.hasCause()) {
    result.init(JExpr._new(returnField));
    JInvocation resultInv=body.invoke(result,""String_Node_Str"");
    resultInv.arg(JExpr.ref(methodDesc.cause().name()));
  }
 else {
    result.init(JExpr._new(returnField));
  }
}"
44576,"/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  log=getDefinedClass().field(JMod.PROTECTED | JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  JFieldVar projectCodeVar=null;
  if (!getProjectCode().isEmpty()) {
    projectCodeVar=getDefinedClass().field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,""String_Node_Str"");
    projectCodeVar.init(JExpr.lit(getProjectCode()));
  }
  final JMethod constructor=getDefinedClass().constructor(JMod.PROTECTED);
  final JVar constructorParam=constructor.param(JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JBlock body=constructor.body();
  body.directStatement(""String_Node_Str"" + log.name() + ""String_Node_Str""+ constructorParam.name()+ ""String_Node_Str"");
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final JClass returnType=codeModel.ref(methodDesc.returnType());
    final String methodName=methodDesc.name();
    final JMethod jMethod=getDefinedClass().method(JMod.PUBLIC | JMod.FINAL,returnType,methodName);
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final JMethod msgMethod=addMessageMethod(methodName,message.value());
    if (methodDesc.isLoggerMethod()) {
      createLoggerMethod(methodDesc,jMethod,msgMethod,message.id(),projectCodeVar);
    }
 else {
      createBundleMethod(methodDesc,jMethod,msgMethod,message.id(),projectCodeVar);
    }
  }
  if (extendsBasicLogger) {
    implementBasicLogger(codeModel);
  }
  return codeModel;
}","/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  log=getDefinedClass().field(JMod.PROTECTED | JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  JFieldVar projectCodeVar=null;
  if (!getProjectCode().isEmpty()) {
    projectCodeVar=getDefinedClass().field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,""String_Node_Str"");
    projectCodeVar.init(JExpr.lit(getProjectCode()));
  }
  final JMethod constructor=getDefinedClass().constructor(JMod.PROTECTED);
  final JVar constructorParam=constructor.param(JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JBlock body=constructor.body();
  body.directStatement(""String_Node_Str"" + log.name() + ""String_Node_Str""+ constructorParam.name()+ ""String_Node_Str"");
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final JClass returnType=codeModel.ref(methodDesc.returnType().getReturnTypeAsString());
    final String methodName=methodDesc.name();
    final JMethod jMethod=getDefinedClass().method(JMod.PUBLIC | JMod.FINAL,returnType,methodName);
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final JMethod msgMethod=addMessageMethod(methodName,message.value());
    if (methodDesc.isLoggerMethod()) {
      createLoggerMethod(methodDesc,jMethod,msgMethod,message.id(),projectCodeVar);
    }
 else {
      createBundleMethod(methodDesc,jMethod,msgMethod,message.id(),projectCodeVar);
    }
  }
  if (extendsBasicLogger) {
    implementBasicLogger(codeModel);
  }
  return codeModel;
}"
44577,"/** 
 * Create the bundle method body.
 * @param methodDesc     the method descriptor.
 * @param method         the method to create the body for.
 * @param msgMethod      the message method for retrieving the message.
 * @param messageId      the message id.
 * @param projectCodeVar the project code variable
 */
private void createBundleMethod(final MethodDescriptor methodDesc,final JMethod method,final JMethod msgMethod,final int messageId,final JVar projectCodeVar){
  final JBlock body=method.body();
  final JClass returnField=getCodeModel().ref(method.type().fullName());
  final JVar result=body.decl(returnField,""String_Node_Str"");
  JClass formatter=null;
switch (methodDesc.message().format()) {
case MESSAGE_FORMAT:
    formatter=getCodeModel().ref(java.text.MessageFormat.class);
  break;
case PRINTF:
formatter=getCodeModel().ref(String.class);
break;
}
final JInvocation formatterMethod=formatter.staticInvoke(""String_Node_Str"");
if (messageId > Message.NONE && projectCodeVar != null) {
String formatedId=String.format(STRING_ID_FORMAT,messageId);
formatterMethod.arg(projectCodeVar.plus(JExpr.lit(formatedId)).plus(JExpr.invoke(msgMethod)));
}
 else {
formatterMethod.arg(JExpr.invoke(msgMethod));
}
for (MethodDescriptor.MethodParameter param : methodDesc.parameters()) {
final JClass paramType=getCodeModel().ref(param.fullType());
JVar paramVar=method.param(JMod.FINAL,paramType,param.name());
formatterMethod.arg(paramVar);
}
result.init(formatterMethod);
body._return(result);
}","/** 
 * Create the bundle method body.
 * @param methodDesc     the method descriptor.
 * @param method         the method to create the body for.
 * @param msgMethod      the message method for retrieving the message.
 * @param messageId      the message id.
 * @param projectCodeVar the project code variable
 */
private void createBundleMethod(final MethodDescriptor methodDesc,final JMethod method,final JMethod msgMethod,final int messageId,final JVar projectCodeVar){
  final JBlock body=method.body();
  final JClass returnField=getCodeModel().ref(method.type().fullName());
  final JVar result=body.decl(returnField,""String_Node_Str"");
  JClass formatter=null;
switch (methodDesc.message().format()) {
case MESSAGE_FORMAT:
    formatter=getCodeModel().ref(java.text.MessageFormat.class);
  break;
case PRINTF:
formatter=getCodeModel().ref(String.class);
break;
}
final JInvocation formatterMethod=formatter.staticInvoke(""String_Node_Str"");
if (messageId > Message.NONE && projectCodeVar != null) {
String formatedId=String.format(STRING_ID_FORMAT,messageId);
formatterMethod.arg(projectCodeVar.plus(JExpr.lit(formatedId)).plus(JExpr.invoke(msgMethod)));
}
 else {
formatterMethod.arg(JExpr.invoke(msgMethod));
}
for (MethodDescriptor.MethodParameter param : methodDesc.parameters()) {
final JClass paramType=getCodeModel().ref(param.fullType());
JVar paramVar=method.param(JMod.FINAL,paramType,param.name());
formatterMethod.arg(paramVar);
}
if (methodDesc.returnType().isException()) {
initCause(result,returnField,body,methodDesc,formatterMethod);
}
 else {
result.init(formatterMethod);
}
body._return(result);
}"
44578,"/** 
 * {@inheritDoc}
 */
@Override public void processTypeElement(final TypeElement annotation,final TypeElement element,final Collection<ExecutableElement> methods){
  PackageElement packageElement=elementUtils().getPackageOf(element);
  String packageName=packageElement.getQualifiedName().toString();
  String primaryClassName=getPrimaryClassName(element);
  primaryClassName=toQualifiedClassName(packageName,primaryClassName);
  String primaryClassNamePrefix=getPrimaryClassNamePrefix(element);
  String interfaceName=element.getSimpleName().toString();
  Map<String,String> elementTranslations=getAllMessageMethods(methods);
  try {
    String packagePath;
    if (translationFilesPath != null) {
      packagePath=translationFilesPath + packageName.replaceAll(""String_Node_Str"",FILE_SEPARATOR);
    }
 else {
      FileObject fObj=filer().getResource(StandardLocation.CLASS_OUTPUT,packageName,interfaceName);
      packagePath=fObj.toUri().getPath().replaceAll(Pattern.quote(interfaceName),FILE_SEPARATOR);
    }
    File dir=new File(packagePath);
    File[] files=dir.listFiles(new TranslationFileFilter(primaryClassNamePrefix));
    if (files != null) {
      for (      File file : files) {
        String classNameSuffix=getTranslationClassNameSuffix(file.getName());
        String qualifiedClassName=primaryClassName.concat(classNameSuffix);
        Map<String,String> translations=validateTranslationMessages(elementTranslations,file);
        this.generateSourceFile(primaryClassName,qualifiedClassName,translations);
      }
    }
  }
 catch (  IOException e) {
    logger().error(e,""String_Node_Str"",packageName);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void processTypeElement(final TypeElement annotation,final TypeElement element,final Collection<ExecutableElement> methods){
  PackageElement packageElement=elementUtils().getPackageOf(element);
  String packageName=packageElement.getQualifiedName().toString();
  String primaryClassName=getPrimaryClassName(element);
  primaryClassName=toQualifiedClassName(packageName,primaryClassName);
  String primaryClassNamePrefix=getPrimaryClassNamePrefix(element);
  String interfaceName=element.getSimpleName().toString();
  Map<String,String> elementTranslations=getAllMessageMethods(methods);
  try {
    String packagePath;
    if (translationFilesPath != null) {
      packagePath=translationFilesPath + packageName.replaceAll(""String_Node_Str"",FILE_SEPARATOR);
    }
 else {
      FileObject fObj=filer().getResource(StandardLocation.CLASS_OUTPUT,packageName,interfaceName);
      packagePath=fObj.toUri().getPath().replaceAll(Pattern.quote(interfaceName),""String_Node_Str"");
    }
    File dir=new File(packagePath);
    File[] files=dir.listFiles(new TranslationFileFilter(primaryClassNamePrefix));
    if (files != null) {
      for (      File file : files) {
        String classNameSuffix=getTranslationClassNameSuffix(file.getName());
        String qualifiedClassName=primaryClassName.concat(classNameSuffix);
        Map<String,String> translations=validateTranslationMessages(elementTranslations,file);
        this.generateSourceFile(primaryClassName,qualifiedClassName,translations);
      }
    }
  }
 catch (  IOException e) {
    logger().error(e,""String_Node_Str"",packageName);
  }
}"
44579,"private void log(final Kind kind,final Element element,final Exception exception,final String messageFormat,final Object... args){
  String stringCause=TransformationHelper.stackTraceToString(exception);
  if (messageFormat == null) {
    log(kind,element,stringCause);
  }
 else {
    String messageWithCause=messageFormat.concat(""String_Node_Str"");
    log(kind,element,messageWithCause,args,stringCause);
  }
}","private void log(final Kind kind,final Element element,final Exception exception,final String messageFormat,final Object... args){
  String stringCause=TransformationHelper.stackTraceToString(exception);
  if (messageFormat == null) {
    log(kind,element,stringCause);
  }
 else {
    String messageWithCause=messageFormat.concat(""String_Node_Str"");
    List<Object> newArgs=new ArrayList<Object>();
    newArgs.addAll(Arrays.asList(args));
    newArgs.add(stringCause);
    log(kind,element,messageWithCause,newArgs.toArray());
  }
}"
44580,"private void log(final Kind kind,final Element element,final Exception exception,final String messageFormat,final Object... args){
  String stringCause=TransformationHelper.stackTraceToString(exception);
  if (messageFormat == null) {
    log(kind,element,stringCause);
  }
 else {
    String messageWithCause=messageFormat.concat(""String_Node_Str"");
    log(kind,element,messageFormat,args,stringCause);
  }
}","private void log(final Kind kind,final Element element,final Exception exception,final String messageFormat,final Object... args){
  String stringCause=TransformationHelper.stackTraceToString(exception);
  if (messageFormat == null) {
    log(kind,element,stringCause);
  }
 else {
    String messageWithCause=messageFormat.concat(""String_Node_Str"");
    log(kind,element,messageWithCause,args,stringCause);
  }
}"
44581,"/** 
 * Check if an element is annotated with the given annotation.
 * @param clazz the annotation class
 * @return true if the element is annotated, false otherwise
 * @throws NullPointerException if element parameter is null
 */
public static boolean isAnnotatedWith(final Element element,final Class<? extends Annotation> clazz){
  if (element == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Annotation annotation=element.getAnnotation(clazz);
  if (clazz != null) {
    return true;
  }
  return false;
}","/** 
 * Check if an element is annotated with the given annotation.
 * @param clazz the annotation class
 * @return true if the element is annotated, false otherwise
 * @throws NullPointerException if element parameter is null
 */
public static boolean isAnnotatedWith(final Element element,final Class<? extends Annotation> clazz){
  if (element == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Annotation annotation=element.getAnnotation(clazz);
  if (annotation != null) {
    return true;
  }
  return false;
}"
44582,"/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  for (  ExecutableElement method : methods) {
    boolean invalid=false;
    try {
      if (Throwable.class.isAssignableFrom(Class.forName(method.getReturnType().toString()))) {
        invalid=true;
      }
      if (Class.forName(method.getReturnType().toString()).isAssignableFrom(String.class)) {
        invalid=true;
      }
    }
 catch (    ClassNotFoundException e) {
      throw new ValidationException(""String_Node_Str"",e,method);
    }
    if (invalid) {
      throw new ValidationException(""String_Node_Str"",method);
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  for (  ExecutableElement method : methods) {
    boolean invalid=true;
    try {
      if (Throwable.class.isAssignableFrom(Class.forName(method.getReturnType().toString()))) {
        invalid=false;
      }
      if (Class.forName(method.getReturnType().toString()).isAssignableFrom(String.class)) {
        invalid=false;
      }
    }
 catch (    ClassNotFoundException e) {
      throw new ValidationException(""String_Node_Str"",e,method);
    }
    if (invalid) {
      throw new ValidationException(""String_Node_Str"",method);
    }
  }
}"
44583,"/** 
 * Adds a method to return the message value. The method name should be the method name annotated   {@code org.jboss.logging.Message}. This method will be appended with   {@code $str}. <p/> <p> If the message method has already been defined the previously created method is returned. </p> <p/> <p> Note this method invokes the  {@code addMessageVar(varName,messageValue,id)} to add the variable.</p>
 * @param methodName  the method name.
 * @param returnValue the message value.
 * @param id          the id to prepend the project code/message with.
 * @return the newly created method.
 */
protected JMethod addMessageMethod(final String methodName,final String returnValue,final int id){
  final String internalMethodName=methodName + ""String_Node_Str"";
  JMethod method=definedClass().getMethod(internalMethodName,EMPTY_TYPE_ARRAY);
  if (method == null) {
    final JClass returnType=codeModel().ref(String.class);
    method=definedClass().method(JMod.PROTECTED,returnType,internalMethodName);
    final JBlock body=method.body();
    if (id > 0) {
      final JVar idVar=definedClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,methodName + ""String_Node_Str"");
      idVar.init(JExpr.lit(ClassModelUtil.formatMessageId(projectCode,id)));
      body._return(idVar.plus(addMessageVar(methodName,returnValue)));
    }
 else {
      body._return(addMessageVar(methodName,returnValue));
    }
  }
  return method;
}","/** 
 * Adds a method to return the message value. The method name should be the method name annotated   {@code org.jboss.logging.Message}. This method will be appended with   {@code $str}. <p/> <p> If the message method has already been defined the previously created method is returned. </p> <p/> <p> Note this method invokes the  {@code addMessageVar(varName,messageValue,id)} to add the variable.</p>
 * @param methodName  the method name.
 * @param returnValue the message value.
 * @return the newly created method.
 */
protected JMethod addMessageMethod(final String methodName,final String returnValue){
  final String internalMethodName=methodName + ""String_Node_Str"";
  JMethod method=definedClass().getMethod(internalMethodName,EMPTY_TYPE_ARRAY);
  if (method == null) {
    final JClass returnType=codeModel().ref(String.class);
    method=definedClass().method(JMod.PROTECTED,returnType,internalMethodName);
    final JBlock body=method.body();
    body._return(addMessageVar(methodName,returnValue));
  }
  return method;
}"
44584,"/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  definedClass().constructor(JMod.PROTECTED);
  ClassModelUtil.createReadResolveMethod(definedClass());
  addValidator(new MessageIdValidator(methodDescriptor));
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final JClass returnType=codeModel.ref(methodDesc.returnTypeAsString());
    final JMethod jMethod=definedClass().method(JMod.PUBLIC | JMod.FINAL,returnType,methodDesc.name());
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final JMethod msgMethod=addMessageMethod(methodDesc.name(),message.value(),message.id());
    final JBlock body=jMethod.body();
    final JClass returnField=codeModel.ref(returnType.fullName());
    final JVar result=body.decl(returnField,""String_Node_Str"");
    JClass formatter=null;
switch (message.format()) {
case MESSAGE_FORMAT:
      formatter=codeModel.ref(java.text.MessageFormat.class);
    break;
case PRINTF:
  formatter=codeModel.ref(String.class);
break;
}
final JInvocation formatterMethod=formatter.staticInvoke(""String_Node_Str"");
formatterMethod.arg(JExpr.invoke(msgMethod));
for (VariableElement param : methodDesc.parameters()) {
final JClass paramType=codeModel.ref(param.asType().toString());
JVar paramVar=jMethod.param(JMod.FINAL,paramType,param.getSimpleName().toString());
formatterMethod.arg(paramVar);
}
if (methodDesc.hasClause() && codeModel.ref(Throwable.class).isAssignableFrom(returnField)) {
result.init(JExpr._new(returnField));
JInvocation inv=body.invoke(result,""String_Node_Str"");
inv.arg(JExpr.ref(methodDesc.causeVarName()));
}
 else {
result.init(formatterMethod);
}
body._return(result);
}
return codeModel;
}","/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  definedClass().constructor(JMod.PROTECTED);
  ClassModelUtil.createReadResolveMethod(definedClass());
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final JClass returnType=codeModel.ref(methodDesc.returnTypeAsString());
    final JMethod jMethod=definedClass().method(JMod.PUBLIC | JMod.FINAL,returnType,methodDesc.name());
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final JMethod msgMethod=addMessageMethod(methodDesc.name(),message.value());
    final JVar messageIdVar=addIdVar(methodDesc.name(),message.id());
    final JBlock body=jMethod.body();
    final JClass returnField=codeModel.ref(returnType.fullName());
    final JVar result=body.decl(returnField,""String_Node_Str"");
    JClass formatter=null;
switch (message.format()) {
case MESSAGE_FORMAT:
      formatter=codeModel.ref(java.text.MessageFormat.class);
    break;
case PRINTF:
  formatter=codeModel.ref(String.class);
break;
}
final JInvocation formatterMethod=formatter.staticInvoke(""String_Node_Str"");
if (messageIdVar == null) {
formatterMethod.arg(JExpr.invoke(msgMethod));
}
 else {
formatterMethod.arg(messageIdVar.plus(JExpr.invoke(msgMethod)));
}
for (VariableElement param : methodDesc.parameters()) {
final JClass paramType=codeModel.ref(param.asType().toString());
JVar paramVar=jMethod.param(JMod.FINAL,paramType,param.getSimpleName().toString());
formatterMethod.arg(paramVar);
}
if (methodDesc.hasClause() && codeModel.ref(Throwable.class).isAssignableFrom(returnField)) {
result.init(JExpr._new(returnField));
JInvocation inv=body.invoke(result,""String_Node_Str"");
inv.arg(JExpr.ref(methodDesc.causeVarName()));
}
 else {
result.init(formatterMethod);
}
body._return(result);
}
return codeModel;
}"
44585,"/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
  addValidator(new BundleReturnTypeValidator(methodDescriptor));
}","/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
  addValidator(new BundleReturnTypeValidator(methodDescriptor));
  addValidator(new MessageIdValidator(methodDescriptor));
}"
44586,"/** 
 * {@inheritDoc}
 */
@Override public JCodeModel generateModel() throws IllegalStateException {
  JCodeModel model=super.generateModel();
  JDefinedClass definedClass=definedClass();
  JMethod constructor=definedClass.constructor(JMod.PROTECTED);
  constructor.body().invoke(""String_Node_Str"");
  JMethod readResolve=ClassModelUtil.createReadResolveMethod(definedClass);
  readResolve.annotate(Override.class);
  Set<Map.Entry<String,String>> entries=this.translations.entrySet();
  for (  Map.Entry<String,String> entry : entries) {
    String key=entry.getKey();
    String value=entry.getValue();
    JMethod method=addMessageMethod(key,value,-1);
    method.annotate(Override.class);
  }
  return model;
}","/** 
 * {@inheritDoc}
 */
@Override public JCodeModel generateModel() throws IllegalStateException {
  JCodeModel model=super.generateModel();
  JDefinedClass definedClass=definedClass();
  JMethod constructor=definedClass.constructor(JMod.PROTECTED);
  constructor.body().invoke(""String_Node_Str"");
  JMethod readResolve=ClassModelUtil.createReadResolveMethod(definedClass);
  readResolve.annotate(Override.class);
  Set<Map.Entry<String,String>> entries=this.translations.entrySet();
  for (  Map.Entry<String,String> entry : entries) {
    String key=entry.getKey();
    String value=entry.getValue();
    JMethod method=addMessageMethod(key,value);
    method.annotate(Override.class);
  }
  return model;
}"
44587,"/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  log=definedClass().field(JMod.PROTECTED | JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JMethod constructor=definedClass().constructor(JMod.PROTECTED);
  final JVar constructorParam=constructor.param(JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JBlock body=constructor.body();
  body.directStatement(""String_Node_Str"" + log.name() + ""String_Node_Str""+ constructorParam.name()+ ""String_Node_Str"");
  addValidator(new MessageIdValidator(methodDescriptor));
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final String methodName=methodDesc.name();
    final JMethod jMethod=definedClass().method(JMod.PUBLIC | JMod.FINAL,codeModel.VOID,methodName);
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final LogMessage logMessage=methodDesc.logMessage();
    Logger.Level logLevel=Logger.Level.INFO;
    if (logMessage != null) {
      logLevel=logMessage.level();
    }
    final JMethod msgMethod=addMessageMethod(methodName,message.value(),message.id());
    final StringBuilder logMethod=new StringBuilder(logLevel.name().toLowerCase());
switch (methodDesc.message().format()) {
case MESSAGE_FORMAT:
      logMethod.append(""String_Node_Str"");
    break;
case PRINTF:
  logMethod.append(""String_Node_Str"");
break;
}
final JBlock methodBody=jMethod.body();
final JInvocation logInv=methodBody.invoke(log,logMethod.toString());
if (methodDesc.hasClause()) {
logInv.arg(JExpr.direct(methodDesc.causeVarName()));
}
logInv.arg(JExpr.invoke(msgMethod));
for (VariableElement param : methodDesc.parameters()) {
final JClass paramType=codeModel.ref(param.asType().toString());
final JVar var=jMethod.param(JMod.FINAL,paramType,param.getSimpleName().toString());
if (!param.equals(methodDesc.cause())) {
logInv.arg(var);
}
}
}
return codeModel;
}","/** 
 * {@inheritDoc}
 */
@Override protected JCodeModel generateModel() throws IllegalStateException {
  final JCodeModel codeModel=super.generateModel();
  log=definedClass().field(JMod.PROTECTED | JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JMethod constructor=definedClass().constructor(JMod.PROTECTED);
  final JVar constructorParam=constructor.param(JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JBlock body=constructor.body();
  body.directStatement(""String_Node_Str"" + log.name() + ""String_Node_Str""+ constructorParam.name()+ ""String_Node_Str"");
  for (  MethodDescriptor methodDesc : methodDescriptor) {
    final String methodName=methodDesc.name();
    final JMethod jMethod=definedClass().method(JMod.PUBLIC | JMod.FINAL,codeModel.VOID,methodName);
    jMethod.annotate(Override.class);
    final Message message=methodDesc.message();
    final LogMessage logMessage=methodDesc.logMessage();
    Logger.Level logLevel=Logger.Level.INFO;
    if (logMessage != null) {
      logLevel=logMessage.level();
    }
    final JMethod msgMethod=addMessageMethod(methodName,message.value());
    final JVar messageIdVar=addIdVar(methodDesc.name(),message.id());
    final StringBuilder logMethod=new StringBuilder(logLevel.name().toLowerCase());
switch (methodDesc.message().format()) {
case MESSAGE_FORMAT:
      logMethod.append(""String_Node_Str"");
    break;
case PRINTF:
  logMethod.append(""String_Node_Str"");
break;
}
final JBlock methodBody=jMethod.body();
final JInvocation logInv=methodBody.invoke(log,logMethod.toString());
if (methodDesc.hasClause()) {
logInv.arg(JExpr.direct(methodDesc.causeVarName()));
}
if (messageIdVar == null) {
logInv.arg(JExpr.invoke(msgMethod));
}
 else {
logInv.arg(messageIdVar.plus(JExpr.invoke(msgMethod)));
}
for (VariableElement param : methodDesc.parameters()) {
final JClass paramType=codeModel.ref(param.asType().toString());
final JVar var=jMethod.param(JMod.FINAL,paramType,param.getSimpleName().toString());
if (!param.equals(methodDesc.cause())) {
logInv.arg(var);
}
}
}
return codeModel;
}"
44588,"/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
  addValidator(new LoggerReturnTypeValidator(methodDescriptor));
}","/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
  addValidator(new LoggerReturnTypeValidator(methodDescriptor));
  addValidator(new MessageIdValidator(methodDescriptor));
}"
44589,"/** 
 * {@inheritDoc}
 */
@Override public JCodeModel generateModel() throws IllegalStateException {
  JCodeModel model=super.generateModel();
  JDefinedClass definedClass=model._getClass(this.getClassName());
  JMethod constructor=definedClass.constructor(JMod.PROTECTED);
  constructor.param(JMod.FINAL,Logger.class,LOGGER_PARAMETER_NAME);
  JBlock constructorBody=constructor.body();
  constructorBody.directStatement(""String_Node_Str"" + LOGGER_PARAMETER_NAME + ""String_Node_Str"");
  Set<Map.Entry<String,String>> entries=this.translations.entrySet();
  for (  Map.Entry<String,String> entry : entries) {
    String key=entry.getKey();
    String value=entry.getValue();
    JMethod method=addMessageMethod(key,value,-1);
    method.annotate(Override.class);
  }
  return model;
}","/** 
 * {@inheritDoc}
 */
@Override public JCodeModel generateModel() throws IllegalStateException {
  JCodeModel model=super.generateModel();
  JDefinedClass definedClass=model._getClass(this.getClassName());
  JMethod constructor=definedClass.constructor(JMod.PROTECTED);
  constructor.param(JMod.FINAL,Logger.class,LOGGER_PARAMETER_NAME);
  JBlock constructorBody=constructor.body();
  constructorBody.directStatement(""String_Node_Str"" + LOGGER_PARAMETER_NAME + ""String_Node_Str"");
  Set<Map.Entry<String,String>> entries=this.translations.entrySet();
  for (  Map.Entry<String,String> entry : entries) {
    String key=entry.getKey();
    String value=entry.getValue();
    JMethod method=addMessageMethod(key,value);
    method.annotate(Override.class);
  }
  return model;
}"
44590,"/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  boolean invalid=true;
  for (  Class<?> clazz : acceptedTypes) {
    try {
      if (clazz.isAssignableFrom(Class.forName(methodDesc.returnTypeAsString()))) {
        invalid=false;
      }
    }
 catch (    ClassNotFoundException e) {
      throw new ValidationException(""String_Node_Str"",e,methodDesc.method());
    }
  }
  if (invalid) {
    throw new ValidationException(""String_Node_Str"",methodDesc.method());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  boolean invalid=true;
  try {
    if (Throwable.class.isAssignableFrom(Class.forName(methodDesc.returnTypeAsString()))) {
      invalid=false;
    }
    if (Class.forName(methodDesc.returnTypeAsString()).isAssignableFrom(String.class)) {
      invalid=false;
    }
  }
 catch (  ClassNotFoundException e) {
    throw new ValidationException(""String_Node_Str"",e,methodDesc.method());
  }
  if (invalid) {
    throw new ValidationException(""String_Node_Str"",methodDesc.method());
  }
}"
44591,"/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  final Set<Integer> messageIds=new HashSet<Integer>();
  final Set<Message> messages=new HashSet<Message>();
  for (  MethodDescriptor md : methodDesc) {
    if (messages.add(md.message())) {
      if (!messageIds.add(md.message().id())) {
        throw new ValidationException(""String_Node_Str"",md.method());
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  final Set<Integer> messageIds=new HashSet<Integer>();
  final Set<Message> messages=new HashSet<Message>();
  for (  MethodDescriptor md : methodDesc) {
    if (messages.add(md.message())) {
      final int id=md.message().id();
      if (id > Message.NONE && !messageIds.add(id)) {
        throw new ValidationException(""String_Node_Str"",md.method());
      }
    }
  }
}"
44592,"/** 
 * Creates the source file. <p> Executes the following methods in the order listed. <ol> <li>Runs validation for each validator.</li> <li>  {@code ClassModel#generateModel()}</li> </ol> </p>
 * @param fileObject the files object to write the source to.
 * @throws Exception if an error occurs creating the source file.
 */
public final void create(final JavaFileObject fileObject) throws IOException, IllegalStateException, ValidationException {
  for (  Validator validator : validators) {
    validator.validate();
  }
  generateModel().build(new JavaFileObjectCodeWriter(fileObject));
}","/** 
 * Creates the source file. <p> Executes the following methods in the order listed. <ol> <li>  {@link ClassModel#preValidation()}</li> <li>Runs validation for each validator.</li> <li>  {@link ClassModel#generateModel()}</li> </ol> </p>
 * @param fileObject the files object to write the source to.
 * @throws Exception if an error occurs creating the source file.
 */
public final void create(final JavaFileObject fileObject) throws IOException, IllegalStateException, ValidationException {
  preValidation();
  for (  Validator validator : validators) {
    validator.validate();
  }
  generateModel().build(new JavaFileObjectCodeWriter(fileObject));
}"
44593,"/** 
 * Class constructor.
 * @param interfaceName the interface name to implement.
 * @param projectCode the project code to prepend messages with.
 * @param type the type of the implementation.
 */
protected ImplementationClassModel(final String interfaceName,final String projectCode,ImplementationType type){
  super(interfaceName + type.extension(),projectCode,Object.class.getName(),interfaceName,Serializable.class.getName());
  this.interfaceName=interfaceName;
  this.type=type;
}","/** 
 * Class constructor.
 * @param interfaceName the interface name to implement.
 * @param projectCode the project code to prepend messages with.
 * @param type the type of the implementation.
 */
protected ImplementationClassModel(final String interfaceName,final String projectCode,ImplementationType type){
  super(interfaceName + type.extension(),projectCode,Object.class.getName(),interfaceName,Serializable.class.getName());
  this.interfaceName=interfaceName;
  this.type=type;
  methodDescriptor=new MethodDescriptor();
  messageAnnotationValidator=new MessageAnnotationValidator();
}"
44594,"/** 
 * Adds a method to the class.
 * @param method the method to add.
 */
public abstract void addMethod(final ExecutableElement method);","/** 
 * Adds a method to the class.
 * @param method the method to add.
 */
public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  messageAnnotationValidator.addMethod(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
}"
44595,"/** 
 * Creates a new message bundle code model.
 * @param interfaceName the interface name.
 * @param projectCode the project code from the annotation.
 */
public MessageBundleImplementor(final String interfaceName,final String projectCode){
  super(interfaceName,projectCode,ImplementationType.BUNDLE);
  methodDescriptor=new MethodDescriptor();
}","/** 
 * Creates a new message bundle code model.
 * @param interfaceName the interface name.
 * @param projectCode the project code from the annotation.
 */
public MessageBundleImplementor(final String interfaceName,final String projectCode){
  super(interfaceName,projectCode,ImplementationType.BUNDLE);
}"
44596,"/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
  addValidator(new BundleReturnTypeValidator(methodDescriptor));
  addValidator(new MessageIdValidator(methodDescriptor));
}","/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  super.addMethod(method);
  addValidator(new BundleReturnTypeValidator(methodDescriptor));
}"
44597,"/** 
 * Creates a new message logger code model.
 * @param interfaceName the interface name.
 * @param projectCode the project code from the annotation.
 */
public MessageLoggerImplementor(final String interfaceName,final String projectCode){
  super(interfaceName,projectCode,ImplementationType.LOGGER);
  methodDescriptor=new MethodDescriptor();
}","/** 
 * Creates a new message logger code model.
 * @param interfaceName the interface name.
 * @param projectCode the project code from the annotation.
 */
public MessageLoggerImplementor(final String interfaceName,final String projectCode){
  super(interfaceName,projectCode,ImplementationType.LOGGER);
}"
44598,"/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(new MethodParameterValidator(methodDescriptor));
  addValidator(new LoggerReturnTypeValidator(methodDescriptor));
  addValidator(new MessageIdValidator(methodDescriptor));
}","/** 
 * {@inheritDoc}
 */
@Override public void addMethod(final ExecutableElement method){
  super.addMethod(method);
  addValidator(new LoggerReturnTypeValidator(methodDescriptor));
}"
44599,"/** 
 * Transforms the   {@code method} into a method descriptor and creates a newmethod descriptor.
 * @param method the method to process.
 * @return the method descriptor that was created.
 */
public MethodDescriptor add(final ExecutableElement method){
  final MethodDescriptor result=new MethodDescriptor(this,method);
  Message message=method.getAnnotation(Message.class);
  LogMessage logMessage=method.getAnnotation(LogMessage.class);
  result.returnType=method.getReturnType();
  final Collection<MethodDescriptor> methodDescriptors=find(result.name());
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    if (methodDesc.message() != null && message == null) {
      message=methodDesc.message();
    }
    if (methodDesc.logMessage() != null && logMessage == null) {
      logMessage=methodDesc.logMessage();
    }
    if (message != null && logMessage != null) {
      break;
    }
  }
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    boolean changed=false;
    if (methodDesc.logMessage() == null) {
      methodDesc.logMessage=logMessage;
      changed=true;
    }
    if (methodDesc.message() == null) {
      methodDesc.message=message;
      changed=true;
    }
    if (changed) {
      descriptors.remove(methodDesc);
      descriptors.add(methodDesc);
    }
  }
  for (  VariableElement param : method.getParameters()) {
    if (param.getAnnotation(Cause.class) != null) {
      result.cause=param;
    }
    result.parameters.add(param);
  }
  result.logMessage=logMessage;
  result.message=message;
  result.descriptors.add(result);
  return result;
}","/** 
 * Transforms the   {@code method} into a method descriptor and creates a newmethod descriptor.
 * @param method the method to process.
 * @return the method descriptor that was created.
 */
protected MethodDescriptor add(final ExecutableElement method){
  final MethodDescriptor result=new MethodDescriptor(this,method);
  Message message=method.getAnnotation(Message.class);
  LogMessage logMessage=method.getAnnotation(LogMessage.class);
  result.returnType=method.getReturnType();
  final Collection<MethodDescriptor> methodDescriptors=find(result.name());
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    if (methodDesc.message() != null && message == null) {
      message=methodDesc.message();
    }
    if (methodDesc.logMessage() != null && logMessage == null) {
      logMessage=methodDesc.logMessage();
    }
    if (message != null && logMessage != null) {
      break;
    }
  }
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    boolean changed=false;
    if (methodDesc.logMessage == null) {
      methodDesc.logMessage=logMessage;
      changed=true;
    }
    if (methodDesc.message == null) {
      methodDesc.message=message;
      changed=true;
    }
    if (changed) {
      descriptors.remove(methodDesc);
      descriptors.add(methodDesc);
    }
  }
  for (  VariableElement param : method.getParameters()) {
    if (param.getAnnotation(Cause.class) != null) {
      result.cause=param;
    }
    result.parameters.add(param);
  }
  result.logMessage=logMessage;
  result.message=message;
  result.descriptors.add(result);
  return result;
}"
44600,"/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  final Set<Integer> messageIds=new HashSet<Integer>();
  final Set<Message> messages=new HashSet<Message>();
  for (  MethodDescriptor md : methodDesc) {
    if (messages.add(md.message())) {
      final int id=md.message().id();
      if (id > Message.NONE && !messageIds.add(id)) {
        throw new ValidationException(""String_Node_Str"",md.method());
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void validate() throws ValidationException {
  final Set<Integer> messageIds=new HashSet<Integer>();
  final Set<String> messages=new HashSet<String>();
  for (  MethodDescriptor md : methodDesc) {
    if (messages.add(md.name())) {
      final int id=md.message().id();
      if (id > Message.NONE && !messageIds.add(id)) {
        throw new ValidationException(""String_Node_Str"",md.method());
      }
    }
  }
}"
44601,"/** 
 * Generate a class for the given translation file.
 * @param primaryClassName       the qualified super class name
 * @param generatedClassName     the qualified class name
 * @param messageAnnotationClass the annotation who trigger generation
 * @param translationFile        the translation file
 */
private void generateClassFor(final String primaryClassName,final String generatedClassName,final Class<?> messageAnnotationClass,final File translationFile){
  try {
    String superClassName=TranslationUtil.getEnclosingTranslationClassName(generatedClassName);
    if (!superClassName.equals(primaryClassName)) {
      String name=translationFile.getName();
      int lastUnder=name.lastIndexOf(""String_Node_Str"");
      String enclosingTranslationFileName=name.substring(0,lastUnder) + ""String_Node_Str"";
      File parent=new File(translationFile.getParent(),enclosingTranslationFileName);
      if (!parent.exists()) {
        this.generateClassFor(primaryClassName,superClassName,messageAnnotationClass,parent);
      }
    }
    Properties translations=new Properties();
    if (translationFile != null && translationFile.exists()) {
      translations.load(new FileInputStream(translationFile));
    }
    ClassModel classModel;
    if (messageAnnotationClass.isAssignableFrom(MessageBundle.class)) {
      classModel=new MessageBundleClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageBundle.class.getName());
    }
 else {
      classModel=new MessageLoggerClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageLogger.class.getName());
    }
    classModel=new TranslationMethods(classModel,(Map)translations);
    classModel.generateModel();
    classModel.writeClass(filer.createSourceFile(classModel.getClassName()));
  }
 catch (  Exception e) {
    this.messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",generatedClassName));
  }
}","/** 
 * Generate a class for the given translation file.
 * @param primaryClassName       the qualified super class name
 * @param generatedClassName     the qualified class name
 * @param messageAnnotationClass the annotation who trigger generation
 * @param translationFile        the translation file
 */
private void generateClassFor(final String primaryClassName,final String generatedClassName,final Class<?> messageAnnotationClass,final File translationFile){
  try {
    String superClassName=TranslationUtil.getEnclosingTranslationClassName(generatedClassName);
    if (!superClassName.equals(primaryClassName)) {
      String name=translationFile.getName();
      int lastUnder=name.lastIndexOf(""String_Node_Str"");
      String enclosingTranslationFileName=name.substring(0,lastUnder) + ""String_Node_Str"";
      File parent=new File(translationFile.getParent(),enclosingTranslationFileName);
      if (!parent.exists()) {
        this.generateClassFor(primaryClassName,superClassName,messageAnnotationClass,parent);
      }
    }
    Properties translations=new Properties();
    System.out.println(translationFile.getName() + ""String_Node_Str"" + translationFile.exists());
    if (translationFile != null && translationFile.exists()) {
      translations.load(new FileInputStream(translationFile));
      System.out.println(translations.keySet());
    }
    ClassModel classModel;
    if (messageAnnotationClass.isAssignableFrom(MessageBundle.class)) {
      classModel=new MessageBundleClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageBundle.class.getName());
    }
 else {
      classModel=new MessageLoggerClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageLogger.class.getName());
    }
    classModel=new TranslationMethods(classModel,(Map)translations);
    classModel.generateModel();
    classModel.writeClass(filer.createSourceFile(classModel.getClassName()));
  }
 catch (  Exception e) {
    this.messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",generatedClassName));
  }
}"
44602,"/** 
 * Create a translation decorator who adds translation methods.
 * @param model the model to decorate
 * @param translations the translations to add
 */
public TranslationMethods(final ClassModel model,final Map<String,String> translations){
  super(model);
  if (translations == null) {
    this.translations=translations;
  }
 else {
    this.translations=Collections.EMPTY_MAP;
  }
}","/** 
 * Create a translation decorator who adds translation methods.
 * @param model the model to decorate
 * @param translations the translations to add
 */
public TranslationMethods(final ClassModel model,final Map<String,String> translations){
  super(model);
  if (translations != null) {
    this.translations=translations;
  }
 else {
    this.translations=Collections.EMPTY_MAP;
  }
}"
44603,"private void createClass(final ImplementationClassModel codeModel,final TypeElement type) throws IOException, Exception, ValidationException {
  codeModel.initModel();
  for (  TypeMirror interfaceType : type.getInterfaces()) {
    for (    ExecutableElement method : ElementFilter.methodsIn(processingEnv().getTypeUtils().asElement(interfaceType).getEnclosedElements())) {
      codeModel.addMethod(method);
    }
  }
  for (  ExecutableElement method : ElementFilter.methodsIn(type.getEnclosedElements())) {
    codeModel.addMethod(method);
  }
  codeModel.writeClass(filer().createSourceFile(codeModel.getClassName()));
}","private void createClass(final ImplementationClassModel codeModel,final TypeElement type) throws IOException, Exception, ValidationException {
  for (  TypeMirror interfaceType : type.getInterfaces()) {
    for (    ExecutableElement method : ElementFilter.methodsIn(processingEnv().getTypeUtils().asElement(interfaceType).getEnclosedElements())) {
      codeModel.addMethod(method);
    }
  }
  for (  ExecutableElement method : ElementFilter.methodsIn(type.getEnclosedElements())) {
    codeModel.addMethod(method);
  }
  codeModel.create(filer().createSourceFile(codeModel.getClassName()));
}"
44604,"/** 
 * Returns the current date formatted in the ISO 8601 format.
 * @return the current date formatted in ISO 8601.
 */
protected static final String generatedDateValue(){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  return sdf.format(new Date());
}","/** 
 * Returns the current date formatted in the ISO 8601 format.
 * @return the current date formatted in ISO 8601.
 */
protected static String generatedDateValue(){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  return sdf.format(new Date());
}"
44605,"/** 
 * Get the class model.
 * @return the class model
 */
public final JCodeModel codeModel(){
  return this.codeModel;
}","/** 
 * Get the class model.
 * @return the class model
 */
protected final JCodeModel codeModel(){
  return this.codeModel;
}"
44606,"protected ClassModel(final ToolLogger logger,final String className,final String projectCode,final String superClassName,final String... interfaceNames){
  this.interfaceNames=interfaceNames;
  this.superClassName=superClassName;
  this.className=className;
  this.projectCode=projectCode;
  this.logger=logger;
}","protected ClassModel(final ToolLogger logger,final String className,final String projectCode,final String superClassName,final String... interfaceNames){
  this.interfaceNames=interfaceNames;
  this.superClassName=superClassName;
  this.className=className;
  this.projectCode=projectCode;
  this.logger=logger;
  this.validators=new ArrayList<Validator>();
}"
44607,"/** 
 * Adds a method to return the message value. The method name should be the method name annotated   {@code org.jboss.logging.Message}. This method will be appended with   {@code $str}. <p/> <p> If the message method has already been defined the previously created method is returned. </p> <p/> <p> Note this method invokes the  {@code addMessageVar(varName,messageValue,id)} to add the variable.</p>
 * @param methodName  the method name.
 * @param returnValue the message value.
 * @param id          the id to prepend the project code/message with.
 * @return the newly created method.
 */
protected JMethod addMessageMethod(final String methodName,final String returnValue,final int id){
  final String internalMethodName=methodName + ""String_Node_Str"";
  JMethod method=definedClass().getMethod(internalMethodName,EMPTY_TYPE_ARRAY);
  if (method == null) {
    final JClass returnType=codeModel().ref(String.class);
    method=definedClass().method(JMod.PROTECTED,returnType,internalMethodName);
    final JBlock body=method.body();
    final JVar idVar=definedClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,methodName + ""String_Node_Str"");
    idVar.init(JExpr.lit(formatMessageId(id)));
    body._return(idVar.plus(addMessageVar(methodName,returnValue)));
  }
  return method;
}","/** 
 * Adds a method to return the message value. The method name should be the method name annotated   {@code org.jboss.logging.Message}. This method will be appended with   {@code $str}. <p/> <p> If the message method has already been defined the previously created method is returned. </p> <p/> <p> Note this method invokes the  {@code addMessageVar(varName,messageValue,id)} to add the variable.</p>
 * @param methodName  the method name.
 * @param returnValue the message value.
 * @param id          the id to prepend the project code/message with.
 * @return the newly created method.
 */
protected JMethod addMessageMethod(final String methodName,final String returnValue,final int id){
  final String internalMethodName=methodName + ""String_Node_Str"";
  JMethod method=definedClass().getMethod(internalMethodName,EMPTY_TYPE_ARRAY);
  if (method == null) {
    final JClass returnType=codeModel().ref(String.class);
    method=definedClass().method(JMod.PROTECTED,returnType,internalMethodName);
    final JBlock body=method.body();
    if (id > 0) {
      final JVar idVar=definedClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,String.class,methodName + ""String_Node_Str"");
      idVar.init(JExpr.lit(formatMessageId(id)));
      body._return(idVar.plus(addMessageVar(methodName,returnValue)));
    }
 else {
      body._return(addMessageVar(methodName,returnValue));
    }
  }
  return method;
}"
44608,"public void initModel() throws JClassAlreadyExistsException {
  codeModel=new JCodeModel();
  definedClass=codeModel._class(this.className);
  final JAnnotationUse anno=definedClass.annotate(javax.annotation.Generated.class);
  anno.param(""String_Node_Str"",getClass().getCanonicalName());
  anno.param(""String_Node_Str"",generatedDateValue());
  final JDocComment docComment=definedClass.javadoc();
  docComment.add(""String_Node_Str"");
  if (this.superClassName != null) {
    definedClass._extends(codeModel.ref(this.superClassName));
  }
  if (this.interfaceNames != null) {
    for (    String intf : this.interfaceNames) {
      definedClass._implements(codeModel.ref(intf));
    }
  }
}","/** 
 * Initializes the code model. Invoked as the first method in the  {@code ClassModel#create(JavaFileObject)} method.
 * @throws JClassAlreadyExistsException should be never happen, but if thethe class name was already defined.
 */
protected void initModel() throws JClassAlreadyExistsException {
  codeModel=new JCodeModel();
  definedClass=codeModel._class(this.className);
  final JAnnotationUse anno=definedClass.annotate(javax.annotation.Generated.class);
  anno.param(""String_Node_Str"",getClass().getCanonicalName());
  anno.param(""String_Node_Str"",generatedDateValue());
  final JDocComment docComment=definedClass.javadoc();
  docComment.add(""String_Node_Str"");
  if (this.superClassName != null) {
    definedClass._extends(codeModel.ref(this.superClassName));
  }
  if (this.interfaceNames != null) {
    for (    String intf : this.interfaceNames) {
      definedClass._implements(codeModel.ref(intf));
    }
  }
}"
44609,"/** 
 * Write the class to a file.
 * @param fileObject the file object to write the code model too.
 * @throws IOException if error occurs when writing class
 */
public void writeClass(final JavaFileObject fileObject) throws IOException {
  beforeWrite();
  this.codeModel.build(new JavaFileObjectCodeWriter(fileObject));
}","/** 
 * Write the class to a file.
 * @param fileObject the file object to write the code model too.
 * @throws IOException if error occurs when writing class
 */
public void writeClass(final JavaFileObject fileObject) throws IOException {
  this.codeModel.build(new JavaFileObjectCodeWriter(fileObject));
}"
44610,"/** 
 * Returns the main enclosing class.
 * @return the main enclosing class.
 */
public final JDefinedClass definedClass(){
  return definedClass;
}","/** 
 * Returns the main enclosing class.
 * @return the main enclosing class.
 */
protected final JDefinedClass definedClass(){
  return definedClass;
}"
44611,"/** 
 * {@inheritDoc}
 */
@Override public void initModel() throws JClassAlreadyExistsException {
  super.initModel();
  final JFieldVar serialVersionUID=definedClass().field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,codeModel().LONG,""String_Node_Str"");
  serialVersionUID.init(JExpr.lit(1L));
}","/** 
 * {@inheritDoc}
 */
@Override protected void initModel() throws JClassAlreadyExistsException {
  super.initModel();
  final JFieldVar serialVersionUID=definedClass().field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL,codeModel().LONG,""String_Node_Str"");
  serialVersionUID.init(JExpr.lit(1L));
}"
44612,"/** 
 * Adds a method to the class.
 * @param method the method to add.
 * @throws ValidationException if the method is invalid.
 */
public abstract void addMethod(final ExecutableElement method) throws ValidationException ;","/** 
 * Adds a method to the class.
 * @param method the method to add.
 */
public abstract void addMethod(final ExecutableElement method);"
44613,"@Override public void initModel() throws JClassAlreadyExistsException {
  super.initModel();
  final JFieldVar instance=definedClass().field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,definedClass(),INSTANCE_FIELD_NAME);
  instance.init(JExpr._new(definedClass()));
  definedClass().constructor(JMod.PROTECTED);
  final JMethod readResolveMethod=definedClass().method(JMod.PROTECTED,definedClass(),GET_INSTANCE_METHOD_NAME);
  readResolveMethod.body()._return(instance);
}","@Override protected void initModel() throws JClassAlreadyExistsException {
  super.initModel();
  final JFieldVar instance=definedClass().field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,definedClass(),INSTANCE_FIELD_NAME);
  instance.init(JExpr._new(definedClass()));
  definedClass().constructor(JMod.PROTECTED);
  final JMethod readResolveMethod=definedClass().method(JMod.PROTECTED,definedClass(),GET_INSTANCE_METHOD_NAME);
  readResolveMethod.body()._return(instance);
}"
44614,"@Override public void addMethod(final ExecutableElement method) throws ValidationException {
  methodDescriptor=methodDescriptor.add(method);
  MethodParameterValidator.create(methodDescriptor).validate();
}","@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(MethodParameterValidator.create(methodDescriptor));
}"
44615,"@Override public void initModel() throws JClassAlreadyExistsException {
  super.initModel();
  log=definedClass().field(JMod.PROTECTED | JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JMethod constructor=definedClass().constructor(JMod.PROTECTED);
  final JVar param=constructor.param(JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JBlock body=constructor.body();
  body.directStatement(""String_Node_Str"" + log.name() + ""String_Node_Str""+ param.name()+ ""String_Node_Str"");
}","@Override protected void initModel() throws JClassAlreadyExistsException {
  super.initModel();
  log=definedClass().field(JMod.PROTECTED | JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JMethod constructor=definedClass().constructor(JMod.PROTECTED);
  final JVar param=constructor.param(JMod.FINAL,Logger.class,LOG_FIELD_NAME);
  final JBlock body=constructor.body();
  body.directStatement(""String_Node_Str"" + log.name() + ""String_Node_Str""+ param.name()+ ""String_Node_Str"");
}"
44616,"@Override public void addMethod(final ExecutableElement method) throws ValidationException {
  methodDescriptor=methodDescriptor.add(method);
  MethodParameterValidator.create(methodDescriptor).validate();
}","@Override public void addMethod(final ExecutableElement method){
  methodDescriptor=methodDescriptor.add(method);
  addValidator(MethodParameterValidator.create(methodDescriptor));
}"
44617,"@Override public void validate() throws ValidationException {
  final Collection<MethodDescriptor> methodDescriptors=methodDescriptor.find(methodDescriptor.name());
  final int paramCount1=methodDescriptor.parameters().size() - ((methodDescriptor.hasClause()) ? 1 : 0);
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    final int paramCount2=methodDesc.parameters().size() - ((methodDesc.hasClause()) ? 1 : 0);
    if (paramCount1 != paramCount2) {
      throw new ValidationException(""String_Node_Str"",methodDescriptor.method());
    }
  }
}","@Override public void validate() throws ValidationException {
  final Collection<MethodDescriptor> methodDescriptors=methodDescriptor.find(methodDescriptor.name());
  final int paramCount1=methodDescriptor.parameters().size() - ((methodDescriptor.hasClause()) ? 1 : 0);
  for (  MethodDescriptor methodDesc : methodDescriptors) {
    final int paramCount2=methodDesc.parameters().size() - ((methodDesc.hasClause()) ? 1 : 0);
    if (paramCount1 != paramCount2) {
      throw new ValidationException(""String_Node_Str"",methodDesc.method());
    }
  }
}"
44618,"/** 
 * The property file filter.
 * @param className the class that have i18n property file
 */
public TranslationFileFilter(final String className){
  this.className=className;
}","/** 
 * The property file filter.
 * @param className the class that have i18n property file
 */
public TranslationFileFilter(final String className){
  this.className=className;
  System.out.println(className);
}"
44619,"/** 
 * {@inheritDoc}
 */
@Override public void generate(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Set<? extends TypeElement> typesElement=ElementFilter.typesIn(roundEnv.getRootElements());
  for (  TypeElement element : typesElement) {
    if (element.getKind().isInterface() && element.getModifiers().contains(Modifier.PUBLIC)) {
      MessageBundle bundleAnnotation=element.getAnnotation(MessageBundle.class);
      MessageLogger loggerAnnotation=element.getAnnotation(MessageLogger.class);
      if (bundleAnnotation != null || loggerAnnotation != null) {
        PackageElement packageElement=elementUtils.getPackageOf(element);
        String packageName=packageElement.getQualifiedName().toString();
        String interfaceName=element.getSimpleName().toString();
        String primaryClassName=TransformationUtil.toQualifiedClassName(packageName,interfaceName.concat(bundleAnnotation != null ? ""String_Node_Str"" : ""String_Node_Str""));
        Class<?> annotationClass=bundleAnnotation != null ? MessageBundle.class : MessageLogger.class;
        try {
          FileObject fObj=filer.getResource(StandardLocation.CLASS_OUTPUT,packageName,interfaceName);
          String packagePath=fObj.toUri().getPath().replaceAll(interfaceName,""String_Node_Str"");
          File dir=new File(packagePath);
          File[] files=dir.listFiles(new TranslationFileFilter(interfaceName));
          for (          File file : files) {
            String qualifiedClassName=primaryClassName + TranslationUtil.getTranslationClassNameSuffix(file.getName());
            this.messager.printMessage(Diagnostic.Kind.NOTE,String.format(""String_Node_Str"",qualifiedClassName,packageName));
            this.generateClassFor(primaryClassName,qualifiedClassName,annotationClass,file);
          }
        }
 catch (        IOException e) {
          this.messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",packageName));
        }
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void generate(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Set<? extends TypeElement> typesElement=ElementFilter.typesIn(roundEnv.getRootElements());
  for (  TypeElement element : typesElement) {
    if (element.getKind().isInterface() && element.getModifiers().contains(Modifier.PUBLIC)) {
      MessageBundle bundleAnnotation=element.getAnnotation(MessageBundle.class);
      MessageLogger loggerAnnotation=element.getAnnotation(MessageLogger.class);
      if (bundleAnnotation != null || loggerAnnotation != null) {
        PackageElement packageElement=elementUtils.getPackageOf(element);
        String packageName=packageElement.getQualifiedName().toString();
        String interfaceName=element.getSimpleName().toString();
        String primaryClassName=TransformationUtil.toQualifiedClassName(packageName,interfaceName.concat(bundleAnnotation != null ? ""String_Node_Str"" : ""String_Node_Str""));
        Class<?> annotationClass=bundleAnnotation != null ? MessageBundle.class : MessageLogger.class;
        try {
          FileObject fObj=filer.getResource(StandardLocation.CLASS_OUTPUT,packageName,interfaceName);
          String packagePath=fObj.toUri().getPath().replaceAll(interfaceName,""String_Node_Str"");
          File dir=new File(packagePath);
          File[] files=dir.listFiles(new TranslationFileFilter(interfaceName));
          if (files != null) {
            for (            File file : files) {
              String qualifiedClassName=primaryClassName + TranslationUtil.getTranslationClassNameSuffix(file.getName());
              this.messager.printMessage(Diagnostic.Kind.NOTE,String.format(""String_Node_Str"",qualifiedClassName,packageName));
              this.generateClassFor(primaryClassName,qualifiedClassName,annotationClass,file);
            }
          }
        }
 catch (        IOException e) {
          this.messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",packageName));
        }
      }
    }
  }
}"
44620,"/** 
 * Generate a class for the given translation file.
 * @param primaryClassName       the qualified super class name
 * @param generatedClassName     the qualified class name
 * @param messageAnnotationClass the annotation who trigger generation
 * @param translationFile        the translation file
 */
private void generateClassFor(final String primaryClassName,final String generatedClassName,final Class<?> messageAnnotationClass,final File translationFile){
  try {
    String superClassName=TranslationUtil.getEnclosingTranslationClassName(generatedClassName);
    if (!superClassName.equals(primaryClassName)) {
      String name=translationFile.getName();
      int lastUnder=name.lastIndexOf(""String_Node_Str"");
      String enclosingTranslationFileName=name.substring(0,lastUnder) + ""String_Node_Str"";
      File parent=new File(translationFile.getParent(),enclosingTranslationFileName);
      if (!parent.exists()) {
        this.generateClassFor(primaryClassName,superClassName,messageAnnotationClass,parent);
      }
    }
    Properties translations=new Properties();
    System.out.println(translationFile.getName() + ""String_Node_Str"" + translationFile.exists());
    if (translationFile != null && translationFile.exists()) {
      translations.load(new FileInputStream(translationFile));
      System.out.println(translations.keySet());
    }
    ClassModel classModel;
    if (messageAnnotationClass.isAssignableFrom(MessageBundle.class)) {
      classModel=new MessageBundleClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageBundle.class.getName());
    }
 else {
      classModel=new MessageLoggerClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageLogger.class.getName());
    }
    classModel=new TranslationMethods(classModel,(Map)translations);
    classModel.generateModel();
    classModel.writeClass(filer.createSourceFile(classModel.getClassName()));
  }
 catch (  Exception e) {
    this.messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",generatedClassName));
  }
}","/** 
 * Generate a class for the given translation file.
 * @param primaryClassName       the qualified super class name
 * @param generatedClassName     the qualified class name
 * @param messageAnnotationClass the annotation who trigger generation
 * @param translationFile        the translation file
 */
private void generateClassFor(final String primaryClassName,final String generatedClassName,final Class<?> messageAnnotationClass,final File translationFile){
  try {
    String superClassName=TranslationUtil.getEnclosingTranslationClassName(generatedClassName);
    if (!superClassName.equals(primaryClassName)) {
      String name=translationFile.getName();
      int lastUnder=name.lastIndexOf(""String_Node_Str"");
      String enclosingTranslationFileName=name.substring(0,lastUnder) + ""String_Node_Str"";
      File parent=new File(translationFile.getParent(),enclosingTranslationFileName);
      if (!parent.exists()) {
        this.generateClassFor(primaryClassName,superClassName,messageAnnotationClass,parent);
      }
    }
    Properties translations=new Properties();
    if (translationFile != null && translationFile.exists()) {
      translations.load(new FileInputStream(translationFile));
    }
    ClassModel classModel;
    if (messageAnnotationClass.isAssignableFrom(MessageBundle.class)) {
      classModel=new MessageBundleClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageBundle.class.getName());
    }
 else {
      classModel=new MessageLoggerClassModel(generatedClassName,superClassName);
      classModel=new GeneratedAnnotation(classModel,MessageLogger.class.getName());
    }
    classModel=new TranslationMethods(classModel,(Map)translations);
    classModel.generateModel();
    classModel.writeClass(filer.createSourceFile(classModel.getClassName()));
  }
 catch (  Exception e) {
    this.messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",generatedClassName));
  }
}"
44621,"/** 
 * {@inheritDoc}
 */
@Override public void generate(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Set<? extends TypeElement> typesElement=ElementFilter.typesIn(roundEnv.getRootElements());
  for (  TypeElement element : typesElement) {
    if (element.getKind().isInterface() && element.getModifiers().contains(Modifier.PUBLIC)) {
      MessageBundle bundleAnnotation=element.getAnnotation(MessageBundle.class);
      MessageLogger loggerAnnotation=element.getAnnotation(MessageLogger.class);
      if (bundleAnnotation != null || loggerAnnotation != null) {
        PackageElement packageElement=elementsUtils.getPackageOf(element);
        String packageName=packageElement.getQualifiedName().toString();
        String interfaceName=element.getSimpleName().toString();
        String primaryClassName=interfaceName.concat(bundleAnnotation != null ? ""String_Node_Str"" : ""String_Node_Str"");
        Class<?> annotationClass=bundleAnnotation != null ? MessageBundle.class : MessageLogger.class;
        try {
          FileObject fObj=filer.getResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",packageName);
          String packagePath=fObj.toUri().getPath().replaceAll(Pattern.quote(""String_Node_Str""),System.getProperty(""String_Node_Str""));
          File dir=new File(packagePath);
          TranslationFileFilter filter=new TranslationFileFilter(interfaceName);
          File[] files=dir.listFiles(filter);
          for (          File file : files) {
            String locale=TranslationUtil.getTranslationFileLocale(file.getName());
            String className=primaryClassName + TranslationUtil.getTranslationClassNameSuffix(file.getName());
            String qualifiedClassName=packageName + ""String_Node_Str"" + className;
            String superClassName=TranslationUtil.getEnclosingTranslationClassName(qualifiedClassName);
            messager.printMessage(Diagnostic.Kind.NOTE,String.format(""String_Node_Str"",className));
            this.generateClassFor(superClassName,qualifiedClassName,annotationClass,file);
          }
        }
 catch (        IOException e) {
          messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",packageName));
        }
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void generate(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Set<? extends TypeElement> typesElement=ElementFilter.typesIn(roundEnv.getRootElements());
  for (  TypeElement element : typesElement) {
    if (element.getKind().isInterface() && element.getModifiers().contains(Modifier.PUBLIC)) {
      MessageBundle bundleAnnotation=element.getAnnotation(MessageBundle.class);
      MessageLogger loggerAnnotation=element.getAnnotation(MessageLogger.class);
      if (bundleAnnotation != null || loggerAnnotation != null) {
        PackageElement packageElement=elementsUtils.getPackageOf(element);
        String packageName=packageElement.getQualifiedName().toString();
        String interfaceName=element.getSimpleName().toString();
        String primaryClassName=interfaceName.concat(bundleAnnotation != null ? ""String_Node_Str"" : ""String_Node_Str"");
        Class<?> annotationClass=bundleAnnotation != null ? MessageBundle.class : MessageLogger.class;
        try {
          FileObject fObj=filer.getResource(StandardLocation.CLASS_OUTPUT,packageName,interfaceName);
          String packagePath=fObj.toUri().getPath().replaceAll(interfaceName,""String_Node_Str"");
          File dir=new File(packagePath);
          TranslationFileFilter filter=new TranslationFileFilter(interfaceName);
          File[] files=dir.listFiles(filter);
          for (          File file : files) {
            String className=primaryClassName + TranslationUtil.getTranslationClassNameSuffix(file.getName());
            String qualifiedClassName=packageName.isEmpty() ? className : packageName + ""String_Node_Str"" + className;
            String superClassName=TranslationUtil.getEnclosingTranslationClassName(qualifiedClassName);
            messager.printMessage(Diagnostic.Kind.NOTE,String.format(""String_Node_Str"",className,packageName));
            this.generateClassFor(superClassName,qualifiedClassName,annotationClass,file);
          }
        }
 catch (        IOException e) {
          messager.printMessage(Diagnostic.Kind.ERROR,String.format(""String_Node_Str"",packageName));
        }
      }
    }
  }
}"
44622,"/** 
 * Creates a new message bundle code model.
 * @param interfaceName the interface name.
 * @param projectCode the project code from the annotation.
 * @throws JClassAlreadyExistsException should never happen, but could be thrown if the class has already been defined
 */
public MessageBundleCodeModel(final String interfaceName,final String projectCode) throws JClassAlreadyExistsException {
  super(interfaceName,projectCode);
  init();
}","/** 
 * Creates a new message bundle code model.
 * @param interfaceName the interface name.
 * @param projectCode the project code from the annotation.
 * @throws JClassAlreadyExistsException should never happen, but could be thrown if the class has already been defined
 */
public MessageBundleCodeModel(final String interfaceName,final String projectCode) throws JClassAlreadyExistsException {
  super(interfaceName,projectCode);
  methodDescriptor=new MethodDescriptor();
  init();
}"
44623,"public void initializeIdentityStore(String cmsRepositoryId,CmsRepository identityStoreRepository){
  if (identityStoreRepository == null) {
    throw new CmsException(""String_Node_Str"");
  }
  try {
    Set<String> repIds=new HashSet<String>();
    repIds.add(cmsRepositoryId);
    repIds.add(identityStoreRepository.getId());
    if (CollectionUtils.isNotEmpty(roleXmlResources)) {
      logger.info(""String_Node_Str"" + identityStoreRepository.getId());
      String systemUserId=retrieveSystemRepositoryUserId();
      if (StringUtils.isBlank(systemUserId)) {
        logger.warn(""String_Node_Str"");
        return;
      }
      Map<String,ContentObject> rolesPerName=new HashMap<String,ContentObject>();
      for (      String repositoryId : repIds) {
        for (        Resource roleXmlResource : roleXmlResources) {
          ContentObject roleObject=importRole(roleXmlResource,systemUserId,repositoryId);
          if (roleObject != null) {
            rolesPerName.put(((StringProperty)roleObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValue(),roleObject);
          }
        }
        ContentObject roleCmsExternalViewerContentObject=rolesPerName.get(CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForRepository(CmsRole.ROLE_CMS_EXTERNAL_VIEWER,repositoryId));
        if (roleCmsExternalViewerContentObject.getId() == null) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_EXTERNAL_VIEWER);
        }
 else {
          ObjectReferenceProperty isMemberOfProperty=(ObjectReferenceProperty)roleCmsExternalViewerContentObject.getCmsProperty(""String_Node_Str"");
          if (isMemberOfProperty != null && isMemberOfProperty.hasValues()) {
            logger.warn(""String_Node_Str"" + roleCmsExternalViewerContentObject.getSystemName() + ""String_Node_Str""+ CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForRepository(CmsRole.ROLE_CMS_EXTERNAL_VIEWER,repositoryId)+ ""String_Node_Str""+ isMemberOfProperty.getSimpleTypeValues()+ ""String_Node_Str"");
            isMemberOfProperty.removeValues();
            contentService.save(roleCmsExternalViewerContentObject,false,true,null);
          }
        }
        if (addRoleAsMemberToRole(Arrays.asList(CmsRole.ROLE_CMS_EXTERNAL_VIEWER),CmsRole.ROLE_CMS_INTERNAL_VIEWER,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_INTERNAL_VIEWER);
        }
        List<CmsRole> roleCmsInternalViewerAsList=Arrays.asList(CmsRole.ROLE_CMS_INTERNAL_VIEWER);
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_EDITOR);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_PORTAL_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_PORTAL_EDITOR);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_TAXONOMY_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_TAXONOMY_EDITOR);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_WEB_SITE_PUBLISHER,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_WEB_SITE_PUBLISHER);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_IDENTITY_STORE_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_IDENTITY_STORE_EDITOR);
        }
        if (addRoleAsMemberToRole(Arrays.asList(CmsRole.ROLE_CMS_EDITOR,CmsRole.ROLE_CMS_PORTAL_EDITOR,CmsRole.ROLE_CMS_TAXONOMY_EDITOR,CmsRole.ROLE_CMS_WEB_SITE_PUBLISHER,CmsRole.ROLE_CMS_IDENTITY_STORE_EDITOR),CmsRole.ROLE_ADMIN,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_ADMIN);
        }
      }
    }
 else {
      logger.warn(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new CmsException(e);
  }
}","public void initializeIdentityStore(String cmsRepositoryId,CmsRepository identityStoreRepository){
  if (identityStoreRepository == null) {
    throw new CmsException(""String_Node_Str"");
  }
  try {
    Set<String> repIds=new HashSet<String>();
    repIds.add(cmsRepositoryId);
    repIds.add(identityStoreRepository.getId());
    if (CollectionUtils.isNotEmpty(roleXmlResources)) {
      logger.info(""String_Node_Str"" + identityStoreRepository.getId());
      String systemUserId=retrieveSystemRepositoryUserId();
      if (StringUtils.isBlank(systemUserId)) {
        logger.warn(""String_Node_Str"");
        return;
      }
      Map<String,ContentObject> rolesPerName=new HashMap<String,ContentObject>();
      for (      String repositoryId : repIds) {
        for (        Resource roleXmlResource : roleXmlResources) {
          ContentObject roleObject=importRole(roleXmlResource,systemUserId,repositoryId,identityStoreRepository.getId());
          if (roleObject != null) {
            rolesPerName.put(((StringProperty)roleObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValue(),roleObject);
          }
        }
        ContentObject roleCmsExternalViewerContentObject=rolesPerName.get(CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForRepository(CmsRole.ROLE_CMS_EXTERNAL_VIEWER,repositoryId));
        if (roleCmsExternalViewerContentObject.getId() == null) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_EXTERNAL_VIEWER);
        }
 else {
          ObjectReferenceProperty isMemberOfProperty=(ObjectReferenceProperty)roleCmsExternalViewerContentObject.getCmsProperty(""String_Node_Str"");
          if (isMemberOfProperty != null && isMemberOfProperty.hasValues()) {
            logger.warn(""String_Node_Str"" + roleCmsExternalViewerContentObject.getSystemName() + ""String_Node_Str""+ CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForRepository(CmsRole.ROLE_CMS_EXTERNAL_VIEWER,repositoryId)+ ""String_Node_Str""+ isMemberOfProperty.getSimpleTypeValues()+ ""String_Node_Str"");
            isMemberOfProperty.removeValues();
            contentService.save(roleCmsExternalViewerContentObject,false,true,null);
          }
        }
        if (addRoleAsMemberToRole(Arrays.asList(CmsRole.ROLE_CMS_EXTERNAL_VIEWER),CmsRole.ROLE_CMS_INTERNAL_VIEWER,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_INTERNAL_VIEWER);
        }
        List<CmsRole> roleCmsInternalViewerAsList=Arrays.asList(CmsRole.ROLE_CMS_INTERNAL_VIEWER);
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_EDITOR);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_PORTAL_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_PORTAL_EDITOR);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_TAXONOMY_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_TAXONOMY_EDITOR);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_WEB_SITE_PUBLISHER,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_WEB_SITE_PUBLISHER);
        }
        if (addRoleAsMemberToRole(roleCmsInternalViewerAsList,CmsRole.ROLE_CMS_IDENTITY_STORE_EDITOR,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_CMS_IDENTITY_STORE_EDITOR);
        }
        if (addRoleAsMemberToRole(Arrays.asList(CmsRole.ROLE_CMS_EDITOR,CmsRole.ROLE_CMS_PORTAL_EDITOR,CmsRole.ROLE_CMS_TAXONOMY_EDITOR,CmsRole.ROLE_CMS_WEB_SITE_PUBLISHER,CmsRole.ROLE_CMS_IDENTITY_STORE_EDITOR),CmsRole.ROLE_ADMIN,rolesPerName,repositoryId)) {
          saveRoleObject(rolesPerName,repositoryId,CmsRole.ROLE_ADMIN);
        }
      }
    }
 else {
      logger.warn(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new CmsException(e);
  }
}"
44624,"public void createSystemPerson(String cmsRepositoryId,String identityStoreId){
  InputStream inputStream=null;
  try {
    ContentObjectCriteria personCriteria=CmsCriteriaFactory.newContentObjectCriteria(""String_Node_Str"");
    personCriteria.addCriterion(CriterionFactory.equalsCaseInsensitive(""String_Node_Str"",IdentityPrincipal.SYSTEM));
    personCriteria.setOffsetAndLimit(0,1);
    personCriteria.doNotCacheResults();
    CmsOutcome<ContentObject> outcome=contentService.searchContentObjects(personCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
    ContentObject systemPersonObject=null;
    boolean systemUpdated=false;
    if (outcome != null && outcome.getCount() > 0) {
      if (outcome.getCount() > 1) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
 else {
        systemPersonObject=outcome.getResults().get(0);
      }
    }
 else {
      logger.info(""String_Node_Str"");
      if (systemPersonXmlResource == null || !systemPersonXmlResource.exists()) {
        throw new CmsException(""String_Node_Str"");
      }
 else {
        inputStream=systemPersonXmlResource.getInputStream();
        String systemPersonXml=IOUtils.toString(inputStream,""String_Node_Str"");
        String systemUserId=retrieveSystemRepositoryUserId();
        if (StringUtils.isBlank(systemUserId)) {
          logger.warn(""String_Node_Str"");
          return;
        }
        systemPersonXml=StringUtils.replace(systemPersonXml,SYSTEM_USER_ID,systemUserId);
        ImportConfiguration configuration=ImportConfiguration.object().persist(PersistMode.DO_NOT_PERSIST).build();
        systemPersonObject=importDao.importContentObject(systemPersonXml,configuration);
        if (systemPersonObject == null) {
          throw new CmsException(""String_Node_Str"");
        }
        systemUpdated=true;
      }
    }
    ObjectReferenceProperty systemRoleProperty=(ObjectReferenceProperty)systemPersonObject.getCmsProperty(""String_Node_Str"");
    systemUpdated=fixRolesForSystemIfBroken(systemRoleProperty,cmsRepositoryId) || systemUpdated;
    if (!StringUtils.equals(cmsRepositoryId,identityStoreId)) {
      systemUpdated=fixRolesForSystemIfBroken(systemRoleProperty,identityStoreId) || systemUpdated;
    }
    if (systemUpdated) {
      contentService.save(systemPersonObject,false,true,null);
    }
  }
 catch (  CmsException e) {
    logger.error(""String_Node_Str"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new CmsException(e);
  }
 finally {
    if (inputStream != null) {
      IOUtils.closeQuietly(inputStream);
    }
  }
}","public void createSystemPerson(String cmsRepositoryId,String idOfTheRepositoryWhichRepresentsTheIdentityStore){
  InputStream inputStream=null;
  try {
    ContentObjectCriteria personCriteria=CmsCriteriaFactory.newContentObjectCriteria(""String_Node_Str"");
    personCriteria.addCriterion(CriterionFactory.equalsCaseInsensitive(""String_Node_Str"",IdentityPrincipal.SYSTEM));
    personCriteria.setOffsetAndLimit(0,1);
    personCriteria.doNotCacheResults();
    CmsOutcome<ContentObject> outcome=contentService.searchContentObjects(personCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
    ContentObject systemPersonObject=null;
    boolean systemUpdated=false;
    if (outcome != null && outcome.getCount() > 0) {
      if (outcome.getCount() > 1) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
 else {
        systemPersonObject=outcome.getResults().get(0);
      }
    }
 else {
      logger.info(""String_Node_Str"");
      if (systemPersonXmlResource == null || !systemPersonXmlResource.exists()) {
        throw new CmsException(""String_Node_Str"");
      }
 else {
        inputStream=systemPersonXmlResource.getInputStream();
        String systemPersonXml=IOUtils.toString(inputStream,""String_Node_Str"");
        String systemUserId=retrieveSystemRepositoryUserId();
        if (StringUtils.isBlank(systemUserId)) {
          logger.warn(""String_Node_Str"");
          return;
        }
        systemPersonXml=StringUtils.replace(systemPersonXml,SYSTEM_USER_ID,systemUserId);
        systemPersonXml=StringUtils.replace(systemPersonXml,IDENTITY_STORE_REPOSITORY_ID,idOfTheRepositoryWhichRepresentsTheIdentityStore);
        ImportConfiguration configuration=ImportConfiguration.object().persist(PersistMode.DO_NOT_PERSIST).build();
        systemPersonObject=importDao.importContentObject(systemPersonXml,configuration);
        if (systemPersonObject == null) {
          throw new CmsException(""String_Node_Str"");
        }
        systemUpdated=true;
      }
    }
    ObjectReferenceProperty systemRoleProperty=(ObjectReferenceProperty)systemPersonObject.getCmsProperty(""String_Node_Str"");
    systemUpdated=fixRolesForSystemIfBroken(systemRoleProperty,cmsRepositoryId) || systemUpdated;
    if (!StringUtils.equals(cmsRepositoryId,idOfTheRepositoryWhichRepresentsTheIdentityStore)) {
      systemUpdated=fixRolesForSystemIfBroken(systemRoleProperty,idOfTheRepositoryWhichRepresentsTheIdentityStore) || systemUpdated;
    }
    if (systemUpdated) {
      contentService.save(systemPersonObject,false,true,null);
    }
  }
 catch (  CmsException e) {
    logger.error(""String_Node_Str"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new CmsException(e);
  }
 finally {
    if (inputStream != null) {
      IOUtils.closeQuietly(inputStream);
    }
  }
}"
44625,"private ContentObject importRole(Resource roleXmlResource,String systemUserId,String cmsRepositoryId) throws Exception {
  if (roleXmlResource == null || !roleXmlResource.exists()) {
    throw new CmsException(""String_Node_Str"");
  }
 else {
    String roleName=StringUtils.substringBeforeLast(roleXmlResource.getFilename(),CmsConstants.PERIOD_DELIM);
    String roleAffilitation=CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForRepository(CmsRole.valueOf(roleName),cmsRepositoryId);
    CmsOutcome<ContentObject> outcome=findRole(roleAffilitation);
    if (outcome != null && outcome.getCount() > 0) {
      if (outcome.getCount() > 1) {
        logger.warn(""String_Node_Str"" + roleAffilitation + ""String_Node_Str"");
      }
      return outcome.getResults().get(0);
    }
    logger.info(""String_Node_Str"",roleAffilitation);
    InputStream inputStream=null;
    try {
      inputStream=roleXmlResource.getInputStream();
      String roleXml=IOUtils.toString(inputStream,""String_Node_Str"");
      roleXml=StringUtils.replace(roleXml,SYSTEM_USER_ID,systemUserId);
      roleXml=StringUtils.replace(roleXml,roleName,roleAffilitation);
      ImportConfiguration configuration=ImportConfiguration.object().persist(PersistMode.DO_NOT_PERSIST).build();
      ContentObject roleObject=importDao.importContentObject(roleXml,configuration);
      if (roleObject == null) {
        throw new CmsException(""String_Node_Str"");
      }
      roleObject.setSystemName(cmsRepositoryEntityUtils.fixSystemName(roleObject.getSystemName()));
      return roleObject;
    }
  finally {
      if (inputStream != null) {
        IOUtils.closeQuietly(inputStream);
      }
    }
  }
}","private ContentObject importRole(Resource roleXmlResource,String systemUserId,String cmsRepositoryId,String idOfTheRepositoryWhichRepresentsTheIdentityStore) throws Exception {
  if (roleXmlResource == null || !roleXmlResource.exists()) {
    throw new CmsException(""String_Node_Str"");
  }
 else {
    String roleName=StringUtils.substringBeforeLast(roleXmlResource.getFilename(),CmsConstants.PERIOD_DELIM);
    String roleAffilitation=CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForRepository(CmsRole.valueOf(roleName),cmsRepositoryId);
    CmsOutcome<ContentObject> outcome=findRole(roleAffilitation);
    if (outcome != null && outcome.getCount() > 0) {
      if (outcome.getCount() > 1) {
        logger.warn(""String_Node_Str"" + roleAffilitation + ""String_Node_Str"");
      }
      return outcome.getResults().get(0);
    }
    logger.info(""String_Node_Str"",roleAffilitation);
    InputStream inputStream=null;
    try {
      inputStream=roleXmlResource.getInputStream();
      String roleXml=IOUtils.toString(inputStream,""String_Node_Str"");
      roleXml=StringUtils.replace(roleXml,SYSTEM_USER_ID,systemUserId);
      roleXml=StringUtils.replace(roleXml,roleName,roleAffilitation);
      roleXml=StringUtils.replace(roleXml,IDENTITY_STORE_REPOSITORY_ID,idOfTheRepositoryWhichRepresentsTheIdentityStore);
      if (StringUtils.contains(roleXml,""String_Node_Str"" + cmsRepositoryId + ""String_Node_Str""+ idOfTheRepositoryWhichRepresentsTheIdentityStore)) {
        roleXml=StringUtils.replace(roleXml,""String_Node_Str"" + cmsRepositoryId + ""String_Node_Str""+ idOfTheRepositoryWhichRepresentsTheIdentityStore,""String_Node_Str"" + idOfTheRepositoryWhichRepresentsTheIdentityStore);
      }
      ImportConfiguration configuration=ImportConfiguration.object().persist(PersistMode.DO_NOT_PERSIST).build();
      ContentObject roleObject=importDao.importContentObject(roleXml,configuration);
      if (roleObject == null) {
        throw new CmsException(""String_Node_Str"");
      }
      roleObject.setSystemName(cmsRepositoryEntityUtils.fixSystemName(roleObject.getSystemName()));
      return roleObject;
    }
  finally {
      if (inputStream != null) {
        IOUtils.closeQuietly(inputStream);
      }
    }
  }
}"
44626,"/** 
 * Every search returns the total number of matched objects even if the objects we ask to render back in the result set are less than the total matched We need the total number of matched objects in order to build the PagedDataModel in the following lines. The PagedDataModel supports the lazy loading of results and their presentation in pages of a few ones each time so that very large results sets can be presented to the user  without consuming all the system memory. The PagedDataModel will automatically set up the result set in each page fetch in order to lazy load pages of content objects as the user iterates  through the pages of returned content objects
 */
public int searchForContentWithPagedResults(ContentObjectCriteria contentObjectCriteria,boolean useDefaultRenderProperties,String locale,int pageSize) throws CmsException {
  searchResultSetSize=0;
  localContentObjectCriteria=CmsCriteriaFactory.newContentObjectCriteria();
  contentObjectCriteria.copyTo(localContentObjectCriteria);
  if (useDefaultRenderProperties)   setDefaultRenderPropertiesToContentObjectCriteria(localContentObjectCriteria,locale);
  CmsOutcome<ContentObject> cmsOutcome=contentService.searchContentObjects(localContentObjectCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
  if (cmsOutcome.getCount() > 0) {
    if (returnedContentObjects != null) {
      returnedContentObjects.reset();
      contentObjectSelection.clearAllSelectedContentObjects_UIAction();
    }
 else     returnedContentObjects=new ContentObjectDataModel(pageSize);
    searchResultSetSize=(int)cmsOutcome.getCount();
    List<ContentObject> cmsOutcomeRowList=cmsOutcome.getResults();
    List<ContentObjectUIWrapper> wrappedContentObjects=new ArrayList<ContentObjectUIWrapper>();
    for (    ContentObject contentObject : cmsOutcomeRowList) {
      wrappedContentObjects.add(contentObjectUIWrapperFactory.getInstance(contentObject));
    }
    DataPage<ContentObjectUIWrapper> dataPage=new DataPage<ContentObjectUIWrapper>(getSearchResultSetSize(),0,wrappedContentObjects);
    returnedContentObjects.setPage(dataPage);
  }
 else {
    returnedContentObjects=null;
    contentObjectSelection.clearAllSelectedContentObjects_UIAction();
  }
  return searchResultSetSize;
}","/** 
 * Every search returns the total number of matched objects even if the objects we ask to render back in the result set are less than the total matched We need the total number of matched objects in order to build the PagedDataModel in the following lines. The PagedDataModel supports the lazy loading of results and their presentation in pages of a few ones each time so that very large results sets can be presented to the user  without consuming all the system memory. The PagedDataModel will automatically set up the result set in each page fetch in order to lazy load pages of content objects as the user iterates  through the pages of returned content objects
 */
public int searchForContentWithPagedResults(ContentObjectCriteria contentObjectCriteria,boolean useDefaultRenderProperties,String locale,int pageSize) throws CmsException {
  searchResultSetSize=0;
  localContentObjectCriteria=CmsCriteriaFactory.newContentObjectCriteria();
  contentObjectCriteria.copyTo(localContentObjectCriteria);
  if (useDefaultRenderProperties)   setDefaultRenderPropertiesToContentObjectCriteria(localContentObjectCriteria,locale);
  CmsOutcome<ContentObject> cmsOutcome=contentService.searchContentObjects(localContentObjectCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
  if (cmsOutcome.getCount() > 0) {
    returnedContentObjects=new ContentObjectDataModel(pageSize);
    searchResultSetSize=(int)cmsOutcome.getCount();
    List<ContentObject> cmsOutcomeRowList=cmsOutcome.getResults();
    List<ContentObjectUIWrapper> wrappedContentObjects=new ArrayList<ContentObjectUIWrapper>();
    for (    ContentObject contentObject : cmsOutcomeRowList) {
      wrappedContentObjects.add(contentObjectUIWrapperFactory.getInstance(contentObject));
    }
    DataPage<ContentObjectUIWrapper> dataPage=new DataPage<ContentObjectUIWrapper>(getSearchResultSetSize(),0,wrappedContentObjects);
    returnedContentObjects.setPage(dataPage);
  }
 else {
    returnedContentObjects=null;
    contentObjectSelection.clearAllSelectedContentObjects_UIAction();
  }
  return searchResultSetSize;
}"
44627,"private Object grantOrDenyAccessToContentObject(ProceedingJoinPoint proceedingJoinPoint,String contentObjectIdOrSystemName,Object[] methodParameters,ResourceRepresentationType contentObjectOutput){
  if (contentObjectIdIsNotNull(contentObjectIdOrSystemName)) {
    SecurityContext activeSecurityContext=AbstractSecureContentObjectAspect.retrieveSecurityContext();
    Node contentObjectNode=null;
    try {
      if (!(proceedingJoinPoint.getTarget() instanceof ContentServiceImpl)) {
        return generateEmptyOutcome(contentObjectOutput);
      }
      contentObjectNode=((ContentServiceImpl)proceedingJoinPoint.getTarget()).getContentObjectNodeByIdOrSystemName(contentObjectIdOrSystemName);
      if (contentObjectNode == null) {
        return generateEmptyOutcome(contentObjectOutput);
      }
      String userId=activeSecurityContext.getIdentity();
      if (!AbstractSecureContentObjectAspect.userHasRole(activeSecurityContext,CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForActiveRepository(CmsRole.ROLE_CMS_INTERNAL_VIEWER))) {
        if (!contentObjectNode.hasProperty(""String_Node_Str"")) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",userId,contentObjectIdOrSystemName);
          return generateEmptyOutcome(contentObjectOutput);
        }
        String profileContentObjectStatus=contentObjectNode.getProperty(""String_Node_Str"").getString();
        if (StringUtils.equals(ContentObjectStatus.published.toString(),profileContentObjectStatus) || StringUtils.equals(ContentObjectStatus.publishedAndArchived.toString(),profileContentObjectStatus)) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,profileContentObjectStatus});
          return proceedingJoinPoint.proceed(methodParameters);
        }
        logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,profileContentObjectStatus});
        return generateEmptyOutcome(contentObjectOutput);
      }
 else       if (!AbstractSecureContentObjectAspect.userHasRole(activeSecurityContext,CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForActiveRepository(CmsRole.ROLE_ADMIN))) {
        Subject subject=activeSecurityContext.getSubject();
        if (subject != null && CollectionUtils.isNotEmpty(subject.getPrincipals(RepositoryUserIdPrincipal.class)) && contentObjectNode.hasProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName())) {
          RepositoryUserIdPrincipal ownerIdPrincipal=subject.getPrincipals(RepositoryUserIdPrincipal.class).iterator().next();
          String ownerId=contentObjectNode.getProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName()).getString();
          if (StringUtils.equals(ownerId,ownerIdPrincipal.getName())) {
            logger.debug(""String_Node_Str"",userId,contentObjectIdOrSystemName);
            return proceedingJoinPoint.proceed(methodParameters);
          }
        }
        if (!contentObjectNode.hasProperty(""String_Node_Str"")) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",userId,contentObjectIdOrSystemName);
          return generateEmptyOutcome(contentObjectOutput);
        }
        Value[] canBeReadByArr=contentObjectNode.getProperty(""String_Node_Str"").getValues();
        List<String> canBeReadBy=new ArrayList<String>();
        for (        Value value : canBeReadByArr) {
          canBeReadBy.add(value.getString());
        }
        if (canBeReadBy.contains(ContentAccessMode.ALL.toString())) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,canBeReadBy.toString()});
          return proceedingJoinPoint.proceed(methodParameters);
        }
        if (canBeReadBy.contains(ContentAccessMode.NONE.toString())) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,canBeReadBy.toString()});
          return generateEmptyOutcome(contentObjectOutput);
        }
        List<String> prefixedRoles=activeSecurityContext.getAllRoles();
        prefixedRoles.add(userId);
        for (        String prefixedRole : prefixedRoles) {
          if (canBeReadBy.contains(prefixedRole)) {
            logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,prefixedRole});
            return proceedingJoinPoint.proceed(methodParameters);
          }
        }
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,canBeReadBy,prefixedRoles});
        return generateEmptyOutcome(contentObjectOutput);
      }
 else {
        logger.debug(""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName});
        return proceedingJoinPoint.proceed(methodParameters);
      }
    }
 catch (    CmsException e) {
      throw e;
    }
catch (    Throwable e) {
      throw new CmsException(e);
    }
  }
 else {
    logger.debug(""String_Node_Str"",contentObjectIdOrSystemName);
    return generateEmptyOutcome(contentObjectOutput);
  }
}","private Object grantOrDenyAccessToContentObject(ProceedingJoinPoint proceedingJoinPoint,String contentObjectIdOrSystemName,Object[] methodParameters,ResourceRepresentationType contentObjectOutput){
  if (contentObjectIdIsNotNull(contentObjectIdOrSystemName)) {
    SecurityContext activeSecurityContext=AbstractSecureContentObjectAspect.retrieveSecurityContext();
    Node contentObjectNode=null;
    try {
      if (!(proceedingJoinPoint.getTarget() instanceof ContentServiceImpl)) {
        return generateEmptyOutcome(contentObjectOutput);
      }
      contentObjectNode=((ContentServiceImpl)proceedingJoinPoint.getTarget()).getContentObjectNodeByIdOrSystemName(contentObjectIdOrSystemName);
      if (contentObjectNode == null) {
        return generateEmptyOutcome(contentObjectOutput);
      }
      String userId=activeSecurityContext.getIdentity();
      if (!AbstractSecureContentObjectAspect.userHasRole(activeSecurityContext,CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForActiveRepository(CmsRole.ROLE_CMS_INTERNAL_VIEWER))) {
        if (!contentObjectNode.hasProperty(""String_Node_Str"")) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",userId,contentObjectIdOrSystemName);
          return generateEmptyOutcome(contentObjectOutput);
        }
        String profileContentObjectStatus=contentObjectNode.getProperty(""String_Node_Str"").getString();
        if (StringUtils.equals(ContentObjectStatus.published.toString(),profileContentObjectStatus) || StringUtils.equals(ContentObjectStatus.publishedAndArchived.toString(),profileContentObjectStatus)) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,profileContentObjectStatus});
          if (!CmsConstants.UUIDPattern.matcher(contentObjectIdOrSystemName).matches() && methodParameters != null && methodParameters.length > 1 && contentObjectNode.hasProperty(CmsBuiltInItem.CmsIdentifier.getJcrName())) {
            methodParameters[0]=contentObjectNode.getProperty(CmsBuiltInItem.CmsIdentifier.getJcrName()).getString();
          }
          return proceedingJoinPoint.proceed(methodParameters);
        }
        logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,profileContentObjectStatus});
        return generateEmptyOutcome(contentObjectOutput);
      }
 else       if (!AbstractSecureContentObjectAspect.userHasRole(activeSecurityContext,CmsRoleAffiliationFactory.INSTANCE.getCmsRoleAffiliationForActiveRepository(CmsRole.ROLE_ADMIN))) {
        Subject subject=activeSecurityContext.getSubject();
        if (subject != null && CollectionUtils.isNotEmpty(subject.getPrincipals(RepositoryUserIdPrincipal.class)) && contentObjectNode.hasProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName())) {
          RepositoryUserIdPrincipal ownerIdPrincipal=subject.getPrincipals(RepositoryUserIdPrincipal.class).iterator().next();
          String ownerId=contentObjectNode.getProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName()).getString();
          if (StringUtils.equals(ownerId,ownerIdPrincipal.getName())) {
            logger.debug(""String_Node_Str"",userId,contentObjectIdOrSystemName);
            if (!CmsConstants.UUIDPattern.matcher(contentObjectIdOrSystemName).matches() && methodParameters != null && methodParameters.length > 1 && contentObjectNode.hasProperty(CmsBuiltInItem.CmsIdentifier.getJcrName())) {
              methodParameters[0]=contentObjectNode.getProperty(CmsBuiltInItem.CmsIdentifier.getJcrName()).getString();
            }
            return proceedingJoinPoint.proceed(methodParameters);
          }
        }
        if (!contentObjectNode.hasProperty(""String_Node_Str"")) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",userId,contentObjectIdOrSystemName);
          return generateEmptyOutcome(contentObjectOutput);
        }
        Value[] canBeReadByArr=contentObjectNode.getProperty(""String_Node_Str"").getValues();
        List<String> canBeReadBy=new ArrayList<String>();
        for (        Value value : canBeReadByArr) {
          canBeReadBy.add(value.getString());
        }
        if (canBeReadBy.contains(ContentAccessMode.ALL.toString())) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,canBeReadBy.toString()});
          if (!CmsConstants.UUIDPattern.matcher(contentObjectIdOrSystemName).matches() && methodParameters != null && methodParameters.length > 1 && contentObjectNode.hasProperty(CmsBuiltInItem.CmsIdentifier.getJcrName())) {
            methodParameters[0]=contentObjectNode.getProperty(CmsBuiltInItem.CmsIdentifier.getJcrName()).getString();
          }
          return proceedingJoinPoint.proceed(methodParameters);
        }
        if (canBeReadBy.contains(ContentAccessMode.NONE.toString())) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,canBeReadBy.toString()});
          return generateEmptyOutcome(contentObjectOutput);
        }
        List<String> prefixedRoles=activeSecurityContext.getAllRoles();
        prefixedRoles.add(userId);
        for (        String prefixedRole : prefixedRoles) {
          if (canBeReadBy.contains(prefixedRole)) {
            logger.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,prefixedRole});
            if (!CmsConstants.UUIDPattern.matcher(contentObjectIdOrSystemName).matches() && methodParameters != null && methodParameters.length > 1 && contentObjectNode.hasProperty(CmsBuiltInItem.CmsIdentifier.getJcrName())) {
              methodParameters[0]=contentObjectNode.getProperty(CmsBuiltInItem.CmsIdentifier.getJcrName()).getString();
            }
            return proceedingJoinPoint.proceed(methodParameters);
          }
        }
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName,canBeReadBy,prefixedRoles});
        return generateEmptyOutcome(contentObjectOutput);
      }
 else {
        logger.debug(""String_Node_Str"",new Object[]{userId,contentObjectIdOrSystemName});
        if (!CmsConstants.UUIDPattern.matcher(contentObjectIdOrSystemName).matches() && methodParameters != null && methodParameters.length > 1 && contentObjectNode.hasProperty(CmsBuiltInItem.CmsIdentifier.getJcrName())) {
          methodParameters[0]=contentObjectNode.getProperty(CmsBuiltInItem.CmsIdentifier.getJcrName()).getString();
        }
        return proceedingJoinPoint.proceed(methodParameters);
      }
    }
 catch (    CmsException e) {
      throw e;
    }
catch (    Throwable e) {
      throw new CmsException(e);
    }
  }
 else {
    logger.debug(""String_Node_Str"",contentObjectIdOrSystemName);
    return generateEmptyOutcome(contentObjectOutput);
  }
}"
44628,"@Path(""String_Node_Str"") public ResourceLocator connectToAstroboaRepository(@HeaderParam(""String_Node_Str"") String authorization,@PathParam(""String_Node_Str"") String repositoryId,@Context ServletContext servletContext){
  if (StringUtils.isBlank(repositoryId)) {
    throw new WebApplicationException(HttpURLConnection.HTTP_NOT_FOUND);
  }
  try {
    AstroboaClient astroboaClient=null;
    long start=System.currentTimeMillis();
    if (authorization != null) {
      astroboaClient=AstroboaClientCache.Instance.get(authorization);
      if (astroboaClient == null) {
        String encodedUsernamePass=authorization.substring(5);
        String usernamePass=Base64.base64Decode(encodedUsernamePass);
        String[] usernamePassSplitted=usernamePass.split(""String_Node_Str"");
        if (usernamePassSplitted.length == 2) {
          astroboaClient=new AstroboaClient(AstroboaClient.INTERNAL_CONNECTION);
          AstroboaCredentials credentials=new AstroboaCredentials(usernamePassSplitted[0],usernamePassSplitted[1]);
          astroboaClient.login(repositoryId,credentials);
          astroboaClient=AstroboaClientCache.Instance.cache(astroboaClient,authorization);
        }
 else {
          logger.error(""String_Node_Str"" + authorization);
          throw new WebApplicationException(HttpURLConnection.HTTP_UNAUTHORIZED);
        }
      }
    }
 else {
      final String anonymousCacheKey=repositoryId + IdentityPrincipal.ANONYMOUS;
      astroboaClient=AstroboaClientCache.Instance.get(anonymousCacheKey);
      if (astroboaClient == null) {
        astroboaClient=new AstroboaClient(AstroboaClient.INTERNAL_CONNECTION);
        String permanentKey=retrievePermanentKeyForAnonymousUser(repositoryId,servletContext);
        astroboaClient.loginAsAnonymous(repositoryId,permanentKey);
        astroboaClient=AstroboaClientCache.Instance.cache(astroboaClient,anonymousCacheKey);
      }
    }
    logger.debug(""String_Node_Str"",System.identityHashCode(astroboaClient),DurationFormatUtils.formatDurationHMS(System.currentTimeMillis() - start));
    return new ResourceLocator(astroboaClient);
  }
 catch (  CmsInvalidPasswordException e) {
    logger.error(""String_Node_Str"");
    throw new WebApplicationException(HttpURLConnection.HTTP_UNAUTHORIZED);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new WebApplicationException(HttpURLConnection.HTTP_NOT_FOUND);
  }
}","@Path(""String_Node_Str"") public ResourceLocator connectToAstroboaRepository(@HeaderParam(""String_Node_Str"") String authorization,@PathParam(""String_Node_Str"") String repositoryId,@Context ServletContext servletContext){
  if (StringUtils.isBlank(repositoryId)) {
    throw new WebApplicationException(HttpURLConnection.HTTP_NOT_FOUND);
  }
  try {
    AstroboaClient astroboaClient=null;
    long start=System.currentTimeMillis();
    if (authorization != null) {
      String cacheKey=authorization + repositoryId;
      astroboaClient=AstroboaClientCache.Instance.get(cacheKey);
      if (astroboaClient == null) {
        String encodedUsernamePass=authorization.substring(5);
        String usernamePass=Base64.base64Decode(encodedUsernamePass);
        String[] usernamePassSplitted=usernamePass.split(""String_Node_Str"");
        if (usernamePassSplitted.length == 2) {
          astroboaClient=new AstroboaClient(AstroboaClient.INTERNAL_CONNECTION);
          AstroboaCredentials credentials=new AstroboaCredentials(usernamePassSplitted[0],usernamePassSplitted[1]);
          astroboaClient.login(repositoryId,credentials);
          astroboaClient=AstroboaClientCache.Instance.cache(astroboaClient,cacheKey);
        }
 else {
          logger.error(""String_Node_Str"" + authorization);
          throw new WebApplicationException(HttpURLConnection.HTTP_UNAUTHORIZED);
        }
      }
    }
 else {
      final String anonymousCacheKey=repositoryId + IdentityPrincipal.ANONYMOUS;
      astroboaClient=AstroboaClientCache.Instance.get(anonymousCacheKey);
      if (astroboaClient == null) {
        astroboaClient=new AstroboaClient(AstroboaClient.INTERNAL_CONNECTION);
        String permanentKey=retrievePermanentKeyForAnonymousUser(repositoryId,servletContext);
        astroboaClient.loginAsAnonymous(repositoryId,permanentKey);
        astroboaClient=AstroboaClientCache.Instance.cache(astroboaClient,anonymousCacheKey);
      }
    }
    logger.debug(""String_Node_Str"",System.identityHashCode(astroboaClient),DurationFormatUtils.formatDurationHMS(System.currentTimeMillis() - start));
    return new ResourceLocator(astroboaClient);
  }
 catch (  CmsInvalidPasswordException e) {
    logger.error(""String_Node_Str"");
    throw new WebApplicationException(HttpURLConnection.HTTP_UNAUTHORIZED);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new WebApplicationException(HttpURLConnection.HTTP_NOT_FOUND);
  }
}"
44629,"public void addAllObjectsOfCurrentPage_UIAction(PagedListDataModel pagedListDataModel,HtmlDataTable htmlDataTable){
  selectedContentObjects=(List<ContentObjectUIWrapper>)pagedListDataModel.getWrappedData();
  atLeastOneContentObjectIsSelected=true;
}","public void addAllObjectsOfCurrentPage_UIAction(PagedListDataModel pagedListDataModel,HtmlDataTable htmlDataTable){
  selectedContentObjects=new ArrayList<ContentObjectUIWrapper>((List<ContentObjectUIWrapper>)pagedListDataModel.getWrappedData());
  atLeastOneContentObjectIsSelected=true;
}"
44630,"/** 
 * If provided value is a valid ISO8601 date then equivalent calendar is returned
 * @param value
 * @return
 * @throws ParseException 
 */
private Calendar checkIfValueIsISO8601Date(String value){
  if (StringUtils.isBlank(value)) {
    return null;
  }
  Calendar date=null;
  try {
    Matcher dateTimeMatcher=ISO8601Pattern.matcher(value);
    if (dateTimeMatcher.matches()) {
      StringBuilder pattern=new StringBuilder(""String_Node_Str"");
      String timeZoneId=null;
      if (dateTimeMatcher.groupCount() >= 7 && dateTimeMatcher.group(7) != null) {
        pattern.append(""String_Node_Str"");
      }
      if (dateTimeMatcher.groupCount() >= 8 && dateTimeMatcher.group(8) != null) {
        if (!""String_Node_Str"".equals(dateTimeMatcher.group(8))) {
          timeZoneId=""String_Node_Str"" + dateTimeMatcher.group(8);
          value=value.replace(dateTimeMatcher.group(8),""String_Node_Str"");
        }
 else {
          timeZoneId=""String_Node_Str"";
          value=value.replace(""String_Node_Str"",""String_Node_Str"");
        }
      }
      date=(Calendar)DateUtils.fromString(value,pattern.toString());
      if (timeZoneId != null) {
        TimeZone timeZone=TimeZone.getTimeZone(timeZoneId);
        if (!timeZone.getID().equals(timeZoneId)) {
          throw new ParseException(""String_Node_Str"" + value);
        }
        date.setTimeZone(timeZone);
      }
    }
 else {
      Matcher dateMatcher=ISO8601DatePattern.matcher(value);
      if (dateMatcher.matches()) {
        date=(Calendar)DateUtils.fromString(value,ISO8601_DATE_FORMAT);
      }
    }
  }
 catch (  Exception e) {
    return null;
  }
  return date;
}","/** 
 * If provided value is a valid ISO8601 date then equivalent calendar is returned
 * @param value
 * @return
 * @throws ParseException 
 */
private Calendar checkIfValueIsISO8601Date(String value){
  if (StringUtils.isBlank(value)) {
    return null;
  }
  Calendar date=null;
  try {
    Matcher dateTimeMatcher=ISO8601Pattern.matcher(value);
    if (dateTimeMatcher.matches()) {
      date=ISO8601.parse(value);
    }
 else {
      Matcher dateMatcher=ISO8601DatePattern.matcher(value);
      if (dateMatcher.matches()) {
        date=(Calendar)DateUtils.fromString(value,ISO8601_DATE_FORMAT);
      }
    }
  }
 catch (  Exception e) {
    return null;
  }
  return date;
}"
44631,"private InputSource locateEntity(String systemId,String publicId) throws IOException {
  URL xsdOrDtdLocation=null;
  if (publicId != null && schemaURLsPerPublicId.containsKey(publicId)) {
    xsdOrDtdLocation=schemaURLsPerPublicId.get(publicId);
  }
  if (systemId == null) {
    return null;
  }
  if (xsdOrDtdLocation == null) {
    String pathToXsdOrDtd=xmlSchemaHomeDir + File.separator + (systemId.contains(CmsConstants.FORWARD_SLASH) ? StringUtils.substringAfterLast(systemId,CmsConstants.FORWARD_SLASH) : systemId);
    xsdOrDtdLocation=this.getClass().getClassLoader().getResource(pathToXsdOrDtd);
  }
  if (xsdOrDtdLocation == null) {
    xsdOrDtdLocation=new URL(systemId);
  }
  try {
    InputSource is=new InputSource(xsdOrDtdLocation.openStream());
    is.setSystemId(xsdOrDtdLocation.toString());
    is.setPublicId(publicId);
    schemaURLsPerPublicId.put(publicId,xsdOrDtdLocation);
    return is;
  }
 catch (  Throwable isEx) {
    LoggerFactory.getLogger(getClass()).warn(""String_Node_Str"" + publicId + ""String_Node_Str""+ systemId+ ""String_Node_Str""+ xsdOrDtdLocation.toString(),isEx);
    return null;
  }
}","private InputSource locateEntity(String systemId,String publicId) throws IOException {
  URL xsdOrDtdLocation=null;
  if (publicId != null && schemaURLsPerPublicId.containsKey(publicId)) {
    xsdOrDtdLocation=schemaURLsPerPublicId.get(publicId);
  }
  if (systemId == null) {
    return null;
  }
  String xsdOrDtdFilename=(systemId.contains(CmsConstants.FORWARD_SLASH) ? StringUtils.substringAfterLast(systemId,CmsConstants.FORWARD_SLASH) : systemId);
  if (xsdOrDtdLocation == null) {
    xsdOrDtdLocation=this.getClass().getResource(xmlSchemaHomeDir + CmsConstants.FORWARD_SLASH + xsdOrDtdFilename);
  }
  if (xsdOrDtdLocation == null) {
    xsdOrDtdLocation=new URL(systemId);
  }
  try {
    InputSource is=new InputSource(xsdOrDtdLocation.openStream());
    is.setSystemId(xsdOrDtdLocation.toString());
    is.setPublicId(publicId);
    schemaURLsPerPublicId.put(publicId,xsdOrDtdLocation);
    return is;
  }
 catch (  Throwable isEx) {
    LoggerFactory.getLogger(getClass()).warn(""String_Node_Str"" + publicId + ""String_Node_Str""+ systemId+ ""String_Node_Str""+ xsdOrDtdLocation.toString(),isEx);
    return null;
  }
}"
44632,"private boolean elementExtendsComplexCmsPropertyType(XSComplexType complexType){
  String typeName=complexType.getBaseType().getName();
  String typeNamespace=complexType.getBaseType().getTargetNamespace();
  ItemQName complexTypeAsItemQName=ItemUtils.createNewItem(""String_Node_Str"",typeNamespace,typeName);
  return complexTypeAsItemQName.equals(CmsDefinitionItem.complexCmsPropertyType);
}","private boolean elementExtendsComplexCmsPropertyType(XSComplexType complexType){
  Boolean elementExtendsComplexCmsPropertyType=null;
  XSType currentElementType=complexType.getBaseType();
  do {
    String typeName=currentElementType.getName();
    String typeNamespace=currentElementType.getTargetNamespace();
    logger.debug(""String_Node_Str"",new Object[]{""String_Node_Str"" + typeNamespace + ""String_Node_Str"",typeName});
    ItemQName complexTypeAsItemQName=ItemUtils.createNewItem(""String_Node_Str"",typeNamespace,typeName);
    if (complexTypeAsItemQName.equals(CmsDefinitionItem.complexCmsPropertyType)) {
      elementExtendsComplexCmsPropertyType=true;
    }
 else {
      ItemQName parentTypeAsItemQName=ItemUtils.createNewItem(""String_Node_Str"",currentElementType.getBaseType().getTargetNamespace(),currentElementType.getBaseType().getName());
      if (!complexTypeAsItemQName.equals(parentTypeAsItemQName)) {
        currentElementType=currentElementType.getBaseType();
      }
 else {
        break;
      }
    }
  }
 while (elementExtendsComplexCmsPropertyType == null);
  return BooleanUtils.isTrue(elementExtendsComplexCmsPropertyType);
}"
44633,"public boolean deleteTaxonomy(String taxonomyIdOrName){
  if (StringUtils.isBlank(taxonomyIdOrName))   throw new CmsException(""String_Node_Str"");
  Session session=null;
  Context context=null;
  try {
    session=getSession();
    Node taxonomyNode=getTaxonomyNodeByIdOrName(session,taxonomyIdOrName);
    if (taxonomyNode == null) {
      throw new CmsException(""String_Node_Str"" + taxonomyIdOrName + ""String_Node_Str"");
    }
    boolean taxonomyIsAReservedTaxonomy=isTaxonomyNameAReservedName(taxonomyNode.getName());
    if (taxonomyIsAReservedTaxonomy) {
      throw new CmsException(""String_Node_Str"" + taxonomyNode.getName() + ""String_Node_Str"");
    }
    Node taxonomyRootNode=JcrNodeUtils.getTaxonomyRootNode(session);
    if (!taxonomyNode.getParent().getPath().equals(taxonomyRootNode.getPath())) {
      throw new CmsException(""String_Node_Str"" + taxonomyNode.getName() + ""String_Node_Str"");
    }
    context=new Context(cmsRepositoryEntityUtils,cmsQueryHandler,session);
    NodeIterator rootTopics=taxonomyNode.getNodes(CmsBuiltInItem.Topic.getJcrName());
    while (rootTopics.hasNext()) {
      topicUtils.removeTopicJcrNode(rootTopics.nextNode(),session,false,context);
    }
    taxonomyNode.remove();
    session.save();
    return true;
  }
 catch (  Throwable e) {
    throw new CmsException(e);
  }
 finally {
    if (context != null) {
      context.dispose();
      context=null;
    }
  }
}","public boolean deleteTaxonomy(String taxonomyIdOrName){
  if (StringUtils.isBlank(taxonomyIdOrName))   throw new CmsException(""String_Node_Str"");
  Session session=null;
  Context context=null;
  try {
    session=getSession();
    Node taxonomyNode=getTaxonomyNodeByIdOrName(session,taxonomyIdOrName);
    if (taxonomyNode == null) {
      logger.info(""String_Node_Str"",taxonomyIdOrName);
      return false;
    }
    boolean taxonomyIsAReservedTaxonomy=isTaxonomyNameAReservedName(taxonomyNode.getName());
    if (taxonomyIsAReservedTaxonomy) {
      throw new CmsException(""String_Node_Str"" + taxonomyNode.getName() + ""String_Node_Str"");
    }
    Node taxonomyRootNode=JcrNodeUtils.getTaxonomyRootNode(session);
    if (!taxonomyNode.getParent().getPath().equals(taxonomyRootNode.getPath())) {
      throw new CmsException(""String_Node_Str"" + taxonomyNode.getName() + ""String_Node_Str"");
    }
    context=new Context(cmsRepositoryEntityUtils,cmsQueryHandler,session);
    NodeIterator rootTopics=taxonomyNode.getNodes(CmsBuiltInItem.Topic.getJcrName());
    while (rootTopics.hasNext()) {
      topicUtils.removeTopicJcrNode(rootTopics.nextNode(),session,false,context);
    }
    taxonomyNode.remove();
    session.save();
    return true;
  }
 catch (  Throwable e) {
    throw new CmsException(e);
  }
 finally {
    if (context != null) {
      context.dispose();
      context=null;
    }
  }
}"
44634,"@SuppressWarnings(""String_Node_Str"") public <T>T serializeAllTaxonomies(ResourceRepresentationType<T> taxonomyOutput,FetchLevel fetchLevel,boolean prettyPrint){
  ByteArrayOutputStream os=null;
  try {
    Session session=getSession();
    if (taxonomyOutput == null) {
      taxonomyOutput=(ResourceRepresentationType<T>)ResourceRepresentationType.TAXONOMY_LIST;
    }
    if (ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput) || ResourceRepresentationType.TAXONOMY_LIST.equals(taxonomyOutput)) {
      Node taxonomyRootNode=JcrNodeUtils.getTaxonomyRootNode(session);
      if (!taxonomyRootNode.hasNodes()) {
        if (ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput)) {
          return null;
        }
 else {
          return (T)new CmsOutcomeImpl<Taxonomy>(0,0,0);
        }
      }
      NodeIterator taxonomyNodes=taxonomyRootNode.getNodes();
      if (taxonomyNodes.getSize() > 1 && ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput)) {
        throw new CmsException(""String_Node_Str"");
      }
      CmsOutcome<Taxonomy> outcome=new CmsOutcomeImpl<Taxonomy>(taxonomyNodes.getSize(),0,(int)taxonomyNodes.getSize());
      while (taxonomyNodes.hasNext()) {
        Node taxonomyNode=taxonomyNodes.nextNode();
        Taxonomy taxonomy=taxonomyRenderer.renderTaxonomy(taxonomyNode,null,cmsRepositoryEntityFactoryForActiveClient.newTaxonomy());
        if (fetchLevel != null) {
switch (fetchLevel) {
case ENTITY_AND_CHILDREN:
            taxonomy.getRootTopics();
          break;
case FULL:
        loadAllChildren(taxonomy.getRootTopics());
      break;
default :
    break;
}
}
outcome.getResults().add(taxonomy);
}
return (T)outcome;
}
 else if (ResourceRepresentationType.XML.equals(taxonomyOutput) || ResourceRepresentationType.JSON.equals(taxonomyOutput)) {
os=new ByteArrayOutputStream();
TaxonomyCriteria taxonomyCriteria=CmsCriteriaFactory.newTaxonomyCriteria();
taxonomyCriteria.getRenderProperties().prettyPrint(prettyPrint);
serializationDao.serializeSearchResults(session,taxonomyCriteria,os,fetchLevel,taxonomyOutput,false);
return (T)new String(os.toByteArray(),""String_Node_Str"");
}
 else {
throw new CmsException(""String_Node_Str"" + taxonomyOutput);
}
}
 catch (RepositoryException ex) {
throw new CmsException(ex);
}
catch (Exception e) {
throw new CmsException(e);
}
 finally {
IOUtils.closeQuietly(os);
}
}","@SuppressWarnings(""String_Node_Str"") public <T>T serializeAllTaxonomies(ResourceRepresentationType<T> taxonomyOutput,FetchLevel fetchLevel,boolean prettyPrint){
  ByteArrayOutputStream os=null;
  try {
    Session session=getSession();
    if (taxonomyOutput == null) {
      taxonomyOutput=(ResourceRepresentationType<T>)ResourceRepresentationType.TAXONOMY_LIST;
    }
    if (ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput) || ResourceRepresentationType.TAXONOMY_LIST.equals(taxonomyOutput)) {
      Node taxonomyRootNode=JcrNodeUtils.getTaxonomyRootNode(session);
      if (!taxonomyRootNode.hasNodes()) {
        if (ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput)) {
          return null;
        }
 else {
          return (T)new CmsOutcomeImpl<Taxonomy>(0,0,0);
        }
      }
      NodeIterator taxonomyNodes=taxonomyRootNode.getNodes();
      if (taxonomyNodes.getSize() > 1 && ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput)) {
        throw new CmsException(""String_Node_Str"");
      }
      CmsOutcome<Taxonomy> outcome=new CmsOutcomeImpl<Taxonomy>(taxonomyNodes.getSize(),0,(int)taxonomyNodes.getSize());
      while (taxonomyNodes.hasNext()) {
        Node taxonomyNode=taxonomyNodes.nextNode();
        Taxonomy taxonomy=taxonomyRenderer.renderTaxonomy(taxonomyNode,null,cmsRepositoryEntityFactoryForActiveClient.newTaxonomy());
        if (fetchLevel != null) {
switch (fetchLevel) {
case ENTITY_AND_CHILDREN:
            taxonomy.getRootTopics();
          break;
case FULL:
        loadAllChildren(taxonomy.getRootTopics());
      break;
default :
    break;
}
}
outcome.getResults().add(taxonomy);
}
return (T)outcome;
}
 else if (ResourceRepresentationType.XML.equals(taxonomyOutput) || ResourceRepresentationType.JSON.equals(taxonomyOutput)) {
os=new ByteArrayOutputStream();
TaxonomyCriteria taxonomyCriteria=CmsCriteriaFactory.newTaxonomyCriteria();
SerializationConfiguration serializationConfiguration=SerializationConfiguration.taxonomy().prettyPrint(prettyPrint).representationType(taxonomyOutput).build();
serializationDao.serializeSearchResults(session,taxonomyCriteria,os,fetchLevel,serializationConfiguration);
return (T)new String(os.toByteArray(),""String_Node_Str"");
}
 else {
throw new CmsException(""String_Node_Str"" + taxonomyOutput);
}
}
 catch (RepositoryException ex) {
throw new CmsException(ex);
}
catch (Exception e) {
throw new CmsException(e);
}
 finally {
IOUtils.closeQuietly(os);
}
}"
44635,"@SuppressWarnings(""String_Node_Str"") public <T>T getTaxonomy(String taxonomyIdOrName,ResourceRepresentationType<T> taxonomyOutput,FetchLevel fetchLevel,boolean prettyPrint){
  if (StringUtils.isBlank(taxonomyIdOrName)) {
    return null;
  }
  if (!CmsConstants.UUIDPattern.matcher(taxonomyIdOrName).matches() && Taxonomy.REPOSITORY_USER_FOLKSONOMY_NAME.equals(taxonomyIdOrName)) {
    throw new CmsException(""String_Node_Str"");
  }
  ByteArrayOutputStream os=null;
  try {
    Session session=getSession();
    Node taxonomyNode=getTaxonomyNodeByIdOrName(session,taxonomyIdOrName);
    if (taxonomyNode == null) {
      return null;
    }
    if (taxonomyOutput == null || ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput) || ResourceRepresentationType.TAXONOMY_LIST.equals(taxonomyOutput)) {
      Taxonomy taxonomy=taxonomyRenderer.renderTaxonomy(taxonomyNode,null,cmsRepositoryEntityFactoryForActiveClient.newTaxonomy());
      if (fetchLevel != null) {
switch (fetchLevel) {
case ENTITY_AND_CHILDREN:
          taxonomy.getRootTopics();
        break;
case FULL:
      loadAllChildren(taxonomy.getRootTopics());
    break;
default :
  break;
}
}
if (taxonomyOutput == null || ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput)) {
return (T)taxonomy;
}
 else {
CmsOutcome<Taxonomy> outcome=new CmsOutcomeImpl<Taxonomy>(1,0,1);
outcome.getResults().add(taxonomy);
return (T)outcome;
}
}
 else if (ResourceRepresentationType.XML.equals(taxonomyOutput) || ResourceRepresentationType.JSON.equals(taxonomyOutput)) {
String taxonomy=null;
os=new ByteArrayOutputStream();
serializationDao.serializeCmsRepositoryEntity(taxonomyNode,os,taxonomyOutput,CmsEntityType.TAXONOMY,null,fetchLevel,true,false,prettyPrint);
taxonomy=new String(os.toByteArray(),""String_Node_Str"");
return (T)taxonomy;
}
 else {
throw new CmsException(""String_Node_Str"" + taxonomyOutput);
}
}
 catch (RepositoryException ex) {
throw new CmsException(ex);
}
catch (Exception e) {
throw new CmsException(e);
}
 finally {
IOUtils.closeQuietly(os);
}
}","@SuppressWarnings(""String_Node_Str"") public <T>T getTaxonomy(String taxonomyIdOrName,ResourceRepresentationType<T> taxonomyOutput,FetchLevel fetchLevel,boolean prettyPrint){
  if (StringUtils.isBlank(taxonomyIdOrName)) {
    return null;
  }
  if (!CmsConstants.UUIDPattern.matcher(taxonomyIdOrName).matches() && Taxonomy.REPOSITORY_USER_FOLKSONOMY_NAME.equals(taxonomyIdOrName)) {
    throw new CmsException(""String_Node_Str"");
  }
  ByteArrayOutputStream os=null;
  try {
    Session session=getSession();
    Node taxonomyNode=getTaxonomyNodeByIdOrName(session,taxonomyIdOrName);
    if (taxonomyNode == null) {
      return null;
    }
    if (taxonomyOutput == null || ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput) || ResourceRepresentationType.TAXONOMY_LIST.equals(taxonomyOutput)) {
      Taxonomy taxonomy=taxonomyRenderer.renderTaxonomy(taxonomyNode,null,cmsRepositoryEntityFactoryForActiveClient.newTaxonomy());
      if (fetchLevel != null) {
switch (fetchLevel) {
case ENTITY_AND_CHILDREN:
          taxonomy.getRootTopics();
        break;
case FULL:
      loadAllChildren(taxonomy.getRootTopics());
    break;
default :
  break;
}
}
if (taxonomyOutput == null || ResourceRepresentationType.TAXONOMY_INSTANCE.equals(taxonomyOutput)) {
return (T)taxonomy;
}
 else {
CmsOutcome<Taxonomy> outcome=new CmsOutcomeImpl<Taxonomy>(1,0,1);
outcome.getResults().add(taxonomy);
return (T)outcome;
}
}
 else if (ResourceRepresentationType.XML.equals(taxonomyOutput) || ResourceRepresentationType.JSON.equals(taxonomyOutput)) {
String taxonomy=null;
os=new ByteArrayOutputStream();
SerializationConfiguration serializationConfiguration=SerializationConfiguration.taxonomy().prettyPrint(prettyPrint).representationType(taxonomyOutput).build();
serializationDao.serializeCmsRepositoryEntity(taxonomyNode,os,CmsEntityType.TAXONOMY,null,fetchLevel,true,serializationConfiguration);
taxonomy=new String(os.toByteArray(),""String_Node_Str"");
return (T)taxonomy;
}
 else {
throw new CmsException(""String_Node_Str"" + taxonomyOutput);
}
}
 catch (RepositoryException ex) {
throw new CmsException(ex);
}
catch (Exception e) {
throw new CmsException(e);
}
 finally {
IOUtils.closeQuietly(os);
}
}"
44636,"public Taxonomy saveTaxonomy(Object taxonomySource){
  if (taxonomySource == null) {
    throw new CmsException(""String_Node_Str"");
  }
  if (taxonomySource instanceof String) {
    return importDao.importTaxonomy((String)taxonomySource,ImportMode.SAVE_ENTITY_TREE);
  }
  if (!(taxonomySource instanceof Taxonomy)) {
    throw new CmsException(""String_Node_Str"" + taxonomySource.getClass().getName());
  }
  Taxonomy taxonomy=(Taxonomy)taxonomySource;
  if (StringUtils.isBlank(taxonomy.getName())) {
    throw new CmsException(""String_Node_Str"");
  }
  changeIdentifierIfTaxonomyIsBuiltIn(taxonomy,Taxonomy.SUBJECT_TAXONOMY_NAME);
  String taxonomyName=taxonomy.getName();
  boolean taxonomyNameIsAReservedName=isTaxonomyNameAReservedName(taxonomyName);
  if (!taxonomyNameIsAReservedName) {
    if (!XMLChar.isValidNCName(taxonomyName)) {
      throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str"");
    }
 else     if (!cmsRepositoryEntityUtils.isValidSystemName(taxonomyName)) {
      throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
    }
  }
  Session session=null;
  SaveMode saveMode=null;
  try {
    saveMode=StringUtils.isBlank(taxonomy.getId()) ? SaveMode.INSERT : SaveMode.UPDATE_ALL;
    session=getSession();
    Node taxonomyRootJcrNode=JcrNodeUtils.getTaxonomyRootNode(session);
    Node taxonomyJcrNode=null;
switch (saveMode) {
case INSERT:
      throwExceptionIfTaxonomyNameExists(taxonomy,taxonomyRootJcrNode);
    if (taxonomyNameIsAReservedName) {
      throw new CmsException(""String_Node_Str"" + taxonomy.getName());
    }
  taxonomyJcrNode=taxonomyRootJcrNode.addNode(taxonomyName,CmsBuiltInItem.Taxonomy.getJcrName());
cmsRepositoryEntityUtils.createCmsIdentifier(taxonomyJcrNode,taxonomy,false);
break;
case UPDATE_ALL:
if (Taxonomy.SUBJECT_TAXONOMY_NAME.equalsIgnoreCase(taxonomyName)) {
taxonomyJcrNode=taxonomyRootJcrNode.getNode(Taxonomy.SUBJECT_TAXONOMY_NAME);
}
 else {
taxonomyJcrNode=cmsRepositoryEntityUtils.retrieveUniqueNodeForCmsRepositoryEntity(session,taxonomy);
}
if (taxonomyJcrNode == null) {
if (taxonomyNameIsAReservedName) {
throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ taxonomy.getId());
}
if (taxonomyRootJcrNode.hasNode(taxonomyName)) {
if (cmsRepositoryEntityUtils.hasCmsIdentifier(taxonomyRootJcrNode.getNode(taxonomyName))) {
String taxonomyJcrNodeIdentifier=cmsRepositoryEntityUtils.getCmsIdentifier(taxonomyRootJcrNode.getNode(taxonomyName));
if (StringUtils.equals(taxonomyJcrNodeIdentifier,taxonomy.getId())) {
  logger.warn(""String_Node_Str"" + taxonomy.getId() + ""String_Node_Str""+ ""String_Node_Str""+ taxonomyName+ ""String_Node_Str""+ taxonomy.getId()+ ""String_Node_Str"");
  taxonomyJcrNode=taxonomyRootJcrNode.getNode(taxonomyName);
}
 else {
  throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ taxonomyJcrNodeIdentifier+ ""String_Node_Str""+ taxonomy.getId());
}
}
 else {
throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ ""String_Node_Str""+ taxonomy.getId());
}
}
 else {
taxonomyJcrNode=taxonomyRootJcrNode.addNode(taxonomyName,CmsBuiltInItem.Taxonomy.getJcrName());
cmsRepositoryEntityUtils.createCmsIdentifier(taxonomyJcrNode,taxonomy,true);
}
}
if (taxonomyJcrNode.getParent() == null || (!taxonomyJcrNode.getParent().isNodeType(CmsBuiltInItem.RepositoryUser.getJcrName()) && !taxonomyJcrNode.getParent().isNodeType(CmsBuiltInItem.TaxonomyRoot.getJcrName()))) {
throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ taxonomyJcrNode.getPath());
}
if (!taxonomyJcrNode.getName().equals(taxonomyName)) {
if (isTaxonomyNameAReservedName(taxonomyJcrNode.getName())) {
throw new CmsException(""String_Node_Str"" + taxonomyJcrNode.getName() + ""String_Node_Str"");
}
throwExceptionIfTaxonomyNameExists(taxonomy,taxonomyRootJcrNode);
if (!taxonomyNameIsAReservedName) {
session.move(taxonomyJcrNode.getPath(),taxonomyRootJcrNode.getPath() + CmsConstants.FORWARD_SLASH + taxonomyName);
}
}
break;
default :
break;
}
if (taxonomyJcrNode != null) {
cmsLocalizationUtils.updateCmsLocalization(taxonomy,taxonomyJcrNode);
cmsRepositoryEntityUtils.setSystemProperties(taxonomyJcrNode,taxonomy);
}
if (SaveMode.INSERT == saveMode) {
saveRootTopics(taxonomy);
}
session.save();
return taxonomy;
}
 catch (CmsException e) {
throw e;
}
catch (Exception e) {
throw new CmsException(e);
}
}","public Taxonomy saveTaxonomy(Object taxonomySource){
  if (taxonomySource == null) {
    throw new CmsException(""String_Node_Str"");
  }
  if (taxonomySource instanceof String) {
    ImportConfiguration configuration=ImportConfiguration.taxonomy().persist(PersistMode.PERSIST_ENTITY_TREE).build();
    return importDao.importTaxonomy((String)taxonomySource,configuration);
  }
  if (!(taxonomySource instanceof Taxonomy)) {
    throw new CmsException(""String_Node_Str"" + taxonomySource.getClass().getName());
  }
  Taxonomy taxonomy=(Taxonomy)taxonomySource;
  if (StringUtils.isBlank(taxonomy.getName())) {
    if (!StringUtils.isBlank(taxonomy.getId())) {
      try {
        Node taxonomyNode=getTaxonomyNodeByIdOrName(getSession(),taxonomy.getId());
        if (taxonomyNode == null) {
          throw new CmsException(""String_Node_Str"" + taxonomy.getId() + ""String_Node_Str"");
        }
 else {
          taxonomy.setName(taxonomyNode.getName());
        }
      }
 catch (      RepositoryException e) {
        throw new CmsException(e);
      }
    }
 else {
      throw new CmsException(""String_Node_Str"");
    }
  }
  changeIdentifierIfTaxonomyIsBuiltIn(taxonomy,Taxonomy.SUBJECT_TAXONOMY_NAME);
  String taxonomyName=taxonomy.getName();
  boolean taxonomyNameIsAReservedName=isTaxonomyNameAReservedName(taxonomyName);
  if (!taxonomyNameIsAReservedName) {
    if (!XMLChar.isValidNCName(taxonomyName)) {
      throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str"");
    }
 else     if (!cmsRepositoryEntityUtils.isValidSystemName(taxonomyName)) {
      throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
    }
  }
  Session session=null;
  SaveMode saveMode=null;
  try {
    saveMode=StringUtils.isBlank(taxonomy.getId()) ? SaveMode.INSERT : SaveMode.UPDATE;
    session=getSession();
    Node taxonomyRootJcrNode=JcrNodeUtils.getTaxonomyRootNode(session);
    Node taxonomyJcrNode=null;
switch (saveMode) {
case INSERT:
      throwExceptionIfTaxonomyNameExists(taxonomy,taxonomyRootJcrNode);
    if (taxonomyNameIsAReservedName) {
      throw new CmsException(""String_Node_Str"" + taxonomy.getName());
    }
  taxonomyJcrNode=taxonomyRootJcrNode.addNode(taxonomyName,CmsBuiltInItem.Taxonomy.getJcrName());
cmsRepositoryEntityUtils.createCmsIdentifier(taxonomyJcrNode,taxonomy,false);
break;
case UPDATE:
if (Taxonomy.SUBJECT_TAXONOMY_NAME.equalsIgnoreCase(taxonomyName)) {
taxonomyJcrNode=taxonomyRootJcrNode.getNode(Taxonomy.SUBJECT_TAXONOMY_NAME);
}
 else {
taxonomyJcrNode=cmsRepositoryEntityUtils.retrieveUniqueNodeForCmsRepositoryEntity(session,taxonomy);
}
if (taxonomyJcrNode == null) {
if (taxonomyNameIsAReservedName) {
throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ taxonomy.getId());
}
if (taxonomyRootJcrNode.hasNode(taxonomyName)) {
if (cmsRepositoryEntityUtils.hasCmsIdentifier(taxonomyRootJcrNode.getNode(taxonomyName))) {
String taxonomyJcrNodeIdentifier=cmsRepositoryEntityUtils.getCmsIdentifier(taxonomyRootJcrNode.getNode(taxonomyName));
if (StringUtils.equals(taxonomyJcrNodeIdentifier,taxonomy.getId())) {
  logger.warn(""String_Node_Str"" + taxonomy.getId() + ""String_Node_Str""+ ""String_Node_Str""+ taxonomyName+ ""String_Node_Str""+ taxonomy.getId()+ ""String_Node_Str"");
  taxonomyJcrNode=taxonomyRootJcrNode.getNode(taxonomyName);
}
 else {
  throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ taxonomyJcrNodeIdentifier+ ""String_Node_Str""+ taxonomy.getId());
}
}
 else {
throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ ""String_Node_Str""+ taxonomy.getId());
}
}
 else {
taxonomyJcrNode=taxonomyRootJcrNode.addNode(taxonomyName,CmsBuiltInItem.Taxonomy.getJcrName());
cmsRepositoryEntityUtils.createCmsIdentifier(taxonomyJcrNode,taxonomy,true);
}
}
if (taxonomyJcrNode.getParent() == null || (!taxonomyJcrNode.getParent().isNodeType(CmsBuiltInItem.RepositoryUser.getJcrName()) && !taxonomyJcrNode.getParent().isNodeType(CmsBuiltInItem.TaxonomyRoot.getJcrName()))) {
throw new CmsException(""String_Node_Str"" + taxonomyName + ""String_Node_Str""+ taxonomyJcrNode.getPath());
}
if (!taxonomyJcrNode.getName().equals(taxonomyName)) {
if (isTaxonomyNameAReservedName(taxonomyJcrNode.getName())) {
throw new CmsException(""String_Node_Str"" + taxonomyJcrNode.getName() + ""String_Node_Str"");
}
throwExceptionIfTaxonomyNameExists(taxonomy,taxonomyRootJcrNode);
if (!taxonomyNameIsAReservedName) {
session.move(taxonomyJcrNode.getPath(),taxonomyRootJcrNode.getPath() + CmsConstants.FORWARD_SLASH + taxonomyName);
}
}
break;
default :
break;
}
if (taxonomyJcrNode != null) {
cmsLocalizationUtils.updateCmsLocalization(taxonomy,taxonomyJcrNode);
}
if (SaveMode.INSERT == saveMode) {
saveRootTopics(taxonomy);
}
session.save();
return taxonomy;
}
 catch (CmsException e) {
throw e;
}
catch (Exception e) {
throw new CmsException(e);
}
}"
44637,"@Override public <T>T getCmsDefinition(String fullPropertyDefinitionPath,ResourceRepresentationType<T> output,boolean prettyPrint){
  if (definitionServiceSecure != null) {
    if (successfullyConnectedToRemoteService) {
      client.activateClientContext();
    }
    return definitionServiceSecure.getCmsDefinition(fullPropertyDefinitionPath,output,prettyPrint,getAuthenticationToken());
  }
 else {
    throw new CmsException(""String_Node_Str"");
  }
}","@Override public <T>T getCmsDefinition(String fullPropertyDefinitionPath,ResourceRepresentationType<T> output,boolean prettyPrint){
  if (definitionServiceSecure != null) {
    if (successfullyConnectedToRemoteService) {
      client.activateClientContext();
    }
    T cmsDefinition=null;
    try {
      if (cachedDefinitionServiceDao != null) {
        logger.debug(""String_Node_Str"",fullPropertyDefinitionPath);
        cmsDefinition=cachedDefinitionServiceDao.getCmsDefinition(fullPropertyDefinitionPath,output,prettyPrint);
      }
      if (cmsDefinition == null) {
        logger.debug(""String_Node_Str"",fullPropertyDefinitionPath);
        cmsDefinition=definitionServiceSecure.getCmsDefinition(fullPropertyDefinitionPath,output,prettyPrint,getAuthenticationToken());
        if (cmsDefinition != null && cachedDefinitionServiceDao != null) {
          logger.debug(""String_Node_Str"",fullPropertyDefinitionPath);
          cachedDefinitionServiceDao.cacheCmsDefinition(fullPropertyDefinitionPath,cmsDefinition,output,prettyPrint);
        }
      }
    }
 catch (    Exception e) {
      throw new CmsException(e);
    }
    return cmsDefinition;
  }
 else {
    throw new CmsException(""String_Node_Str"");
  }
}"
44638,"@GET @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"" + CmsConstants.PROPERTY_PATH_REG_EXP_FOR_RESTEASY + ""String_Node_Str"") public Response getDefinitionAsJson(@PathParam(""String_Node_Str"") String propertyPath,@QueryParam(""String_Node_Str"") String output,@QueryParam(""String_Node_Str"") String callback,@QueryParam(""String_Node_Str"") String prettyPrint){
  boolean prettyPrintEnabled=ContentApiUtils.isPrettyPrintEnabled(prettyPrint);
  if (StringUtils.equals(propertyPath,CmsConstants.ASTROBOA_MODEL_SCHEMA_FILENAME_WITH_VERSION) || StringUtils.equals(propertyPath,CmsConstants.ASTROBOA_API_SCHEMA_FILENAME_WITH_VERSION)) {
    return getDefinitionInternal(propertyPath,Output.XSD,callback,prettyPrintEnabled);
  }
  Output outputEnum=Output.XML;
  if (StringUtils.isNotBlank(output)) {
    outputEnum=Output.valueOf(output.toUpperCase());
  }
  return getDefinitionInternal(propertyPath,outputEnum,callback,prettyPrintEnabled);
}","@GET @Produces(MediaType.APPLICATION_JSON) @Path(""String_Node_Str"" + CmsConstants.PROPERTY_PATH_REG_EXP_FOR_RESTEASY + ""String_Node_Str"") public Response getDefinitionAsJson(@PathParam(""String_Node_Str"") String propertyPath,@QueryParam(""String_Node_Str"") String output,@QueryParam(""String_Node_Str"") String callback,@QueryParam(""String_Node_Str"") String prettyPrint){
  boolean prettyPrintEnabled=ContentApiUtils.isPrettyPrintEnabled(prettyPrint);
  if (StringUtils.equals(propertyPath,CmsConstants.ASTROBOA_MODEL_SCHEMA_FILENAME_WITH_VERSION) || StringUtils.equals(propertyPath,CmsConstants.ASTROBOA_API_SCHEMA_FILENAME_WITH_VERSION)) {
    return getDefinitionInternal(propertyPath,Output.XSD,callback,prettyPrintEnabled);
  }
  Output outputEnum=Output.JSON;
  if (StringUtils.isNotBlank(output)) {
    outputEnum=Output.valueOf(output.toUpperCase());
  }
  return getDefinitionInternal(propertyPath,outputEnum,callback,prettyPrintEnabled);
}"
44639,"protected List<CmsPropertyInfo> loadComplexCmsPropertyInfos(CmsPropertyDefinition complexPropertyDefinition){
  List<CmsPropertyInfo> complexCmsPropertyInfos=new ArrayList<CmsPropertyInfo>();
  ComplexCmsProperty<?,?> parentComplexCmsProperty=(ComplexCmsProperty<?,?>)contentObjectMarshalContext.getFirstComplexCmsPropertyInfo().getCmsProperty();
  if (parentComplexCmsProperty == null) {
    throw new CmsException(""String_Node_Str"" + complexPropertyDefinition.getFullPath());
  }
  List<CmsProperty<?,?>> complexCmsProperties=parentComplexCmsProperty.getChildProperties().get(complexPropertyDefinition.getName());
  if (CollectionUtils.isEmpty(complexCmsProperties)) {
    if (parentComplexCmsProperty.hasValueForChildProperty(complexPropertyDefinition.getName())) {
      if (complexPropertyDefinition.isMultiple()) {
        complexCmsProperties=parentComplexCmsProperty.getChildPropertyList(complexPropertyDefinition.getName());
      }
 else {
        CmsProperty<?,?> complexCmsProperty=parentComplexCmsProperty.getChildProperty(complexPropertyDefinition.getName());
        if (complexCmsProperty != null) {
          complexCmsProperties=new ArrayList<CmsProperty<?,?>>();
          complexCmsProperties.add(complexCmsProperty);
        }
      }
    }
  }
  if (CollectionUtils.isNotEmpty(complexCmsProperties)) {
    for (    CmsProperty<?,?> complexCmsProperty : complexCmsProperties) {
      if (StringUtils.isBlank(complexCmsProperty.getId())) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"",complexCmsProperty.getFullPath());
        }
        continue;
      }
 else {
        CmsPropertyInfo complexCmsPropertyInfo=new CmsPropertyInfo();
        complexCmsPropertyInfo.setId(complexCmsProperty.getId());
        complexCmsPropertyInfo.setFullPath(complexCmsProperty.getFullPath());
        complexCmsPropertyInfo.setCmsProperty(complexCmsProperty);
        complexCmsPropertyInfo.setName(complexCmsProperty.getName());
        complexCmsPropertyInfos.add(complexCmsPropertyInfo);
      }
    }
  }
  return complexCmsPropertyInfos;
}","protected List<CmsPropertyInfo> loadComplexCmsPropertyInfos(CmsPropertyDefinition complexPropertyDefinition){
  List<CmsPropertyInfo> complexCmsPropertyInfos=new ArrayList<CmsPropertyInfo>();
  ComplexCmsProperty<?,?> parentComplexCmsProperty=(ComplexCmsProperty<?,?>)contentObjectMarshalContext.getFirstComplexCmsPropertyInfo().getCmsProperty();
  if (parentComplexCmsProperty == null) {
    throw new CmsException(""String_Node_Str"" + complexPropertyDefinition.getFullPath());
  }
  List<CmsProperty<?,?>> complexCmsProperties=parentComplexCmsProperty.getChildProperties().get(complexPropertyDefinition.getName());
  if (CollectionUtils.isEmpty(complexCmsProperties)) {
    if (parentComplexCmsProperty.hasValueForChildProperty(complexPropertyDefinition.getName())) {
      if (complexPropertyDefinition.isMultiple()) {
        complexCmsProperties=parentComplexCmsProperty.getChildPropertyList(complexPropertyDefinition.getName());
      }
 else {
        CmsProperty<?,?> complexCmsProperty=parentComplexCmsProperty.getChildProperty(complexPropertyDefinition.getName());
        if (complexCmsProperty != null) {
          complexCmsProperties=new ArrayList<CmsProperty<?,?>>();
          complexCmsProperties.add(complexCmsProperty);
        }
      }
    }
  }
  if (CollectionUtils.isNotEmpty(complexCmsProperties)) {
    for (    CmsProperty<?,?> complexCmsProperty : complexCmsProperties) {
      CmsPropertyInfo complexCmsPropertyInfo=new CmsPropertyInfo();
      complexCmsPropertyInfo.setId(complexCmsProperty.getId());
      complexCmsPropertyInfo.setFullPath(complexCmsProperty.getFullPath());
      complexCmsPropertyInfo.setCmsProperty(complexCmsProperty);
      complexCmsPropertyInfo.setName(complexCmsProperty.getName());
      complexCmsPropertyInfos.add(complexCmsPropertyInfo);
    }
  }
  return complexCmsPropertyInfos;
}"
44640,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  logger.debug(""String_Node_Str"",localName);
  ImportedEntity entityWhoseImportHasFinished=null;
  if (elementNameToBeIgnored != null) {
    entityWhoseImportHasFinished=checkIgnoredPartHasEnded(localName);
  }
 else   if (StringUtils.equals(CmsConstants.LOCALIZED_LABEL_ELEMENT_NAME,localName)) {
    addLocalizedLabelToImportedEntity(retrieveElementContentValue());
    clearElementContent();
    return;
  }
 else   if (StringUtils.equals(CmsConstants.CONTENT_ELEMENT_NAME,localName) && !cmsRepositoryEntityQueue.isEmpty() && cmsRepositoryEntityQueue.peek().getEntity() instanceof BinaryChannel) {
    addContentToBinaryChannel(retrieveElementContentValue());
    clearElementContent();
    return;
  }
 else   if (entityHasEnded(localName)) {
    entityWhoseImportHasFinished=removeEntityFromQueue();
  }
  if (entityWhoseImportHasFinished != null) {
    entityWhoseImportHasFinished.completeEntityImport((retrieveElementContentValue()));
    if (entityWhoseImportHasFinished.getEntity() instanceof CmsRepositoryEntity) {
      CmsRepositoryEntity cmsRepositoryEntity=(CmsRepositoryEntity)entityWhoseImportHasFinished.getEntity();
      if (!cmsRepositoryEntityQueue.isEmpty() && (cmsRepositoryEntityQueue.peek().getEntity() instanceof Repository || cmsRepositoryEntityQueue.peek().getEntity() instanceof List)) {
        cmsRepositoryEntity=deserializer.save(cmsRepositoryEntity);
      }
 else       if (cmsRepositoryEntity instanceof BinaryChannel) {
        deserializer.loadBinaryChannelContent((BinaryChannel)cmsRepositoryEntity);
      }
      importContext.cacheEntity(cmsRepositoryEntity);
    }
  }
  clearElementContent();
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  logger.debug(""String_Node_Str"",localName);
  ImportedEntity entityWhoseImportHasFinished=null;
  if (elementNameToBeIgnored != null) {
    entityWhoseImportHasFinished=checkIgnoredPartHasEnded(localName);
  }
 else   if (StringUtils.equals(CmsConstants.LOCALIZED_LABEL_ELEMENT_NAME,localName)) {
    addLocalizedLabelToImportedEntity(retrieveElementContentValue());
    clearElementContent();
    return;
  }
 else   if (StringUtils.equals(CmsConstants.CONTENT_ELEMENT_NAME,localName) && !cmsRepositoryEntityQueue.isEmpty() && cmsRepositoryEntityQueue.peek().entityIsABinaryChannelAndRawDataElementIsBeingProcessed()) {
    addContentToBinaryChannel(retrieveElementContentValue());
    clearElementContent();
    cmsRepositoryEntityQueue.peek().processingRawData(false);
    return;
  }
 else   if (entityHasEnded(localName)) {
    entityWhoseImportHasFinished=removeEntityFromQueue();
  }
  if (entityWhoseImportHasFinished != null) {
    entityWhoseImportHasFinished.completeEntityImport((retrieveElementContentValue()));
    if (entityWhoseImportHasFinished.getEntity() instanceof CmsRepositoryEntity) {
      CmsRepositoryEntity cmsRepositoryEntity=(CmsRepositoryEntity)entityWhoseImportHasFinished.getEntity();
      if (!cmsRepositoryEntityQueue.isEmpty() && (cmsRepositoryEntityQueue.peek().getEntity() instanceof Repository || cmsRepositoryEntityQueue.peek().getEntity() instanceof List)) {
        cmsRepositoryEntity=deserializer.save(cmsRepositoryEntity);
      }
 else       if (cmsRepositoryEntity instanceof BinaryChannel) {
        deserializer.loadBinaryChannelContent((BinaryChannel)cmsRepositoryEntity);
      }
      importContext.cacheEntity(cmsRepositoryEntity);
    }
  }
  clearElementContent();
}"
44641,"@Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  logger.debug(""String_Node_Str"",localName,uri);
  if (doNotProcessEvent()) {
    return;
  }
  if (importResult == null) {
    createRootEntity(uri,localName,atts);
  }
 else {
    throwExceptionIfQeueIsEmpty(uri,localName);
    Object currentEntity=getCurrentEntityImported();
    if (currentEntity instanceof ContentObject) {
      if (CmsConstants.OWNER_ELEMENT_NAME.equals(localName)) {
        if (processOwner(atts)) {
          return;
        }
      }
 else {
        processCmsProperty(localName,atts,uri);
        return;
      }
    }
 else     if (currentEntity instanceof CmsProperty) {
      processCmsProperty(localName,atts,uri);
      return;
    }
 else     if (currentEntity instanceof BinaryChannel && CmsConstants.CONTENT_ELEMENT_NAME.equals(localName)) {
      return;
    }
 else     if (CmsConstants.LOCALIZED_LABEL_ELEMENT_NAME.equals(localName)) {
      String langValue=getValueForAttribute(CmsConstants.LANG_ATTRIBUTE_NAME_WITH_PREFIX,atts);
      if (langValue == null) {
        langValue=getValueForAttribute(CmsConstants.LANG_ATTRIBUTE_NAME,atts);
      }
      if (langValue != null) {
        addAttributeToImportedEntity(CmsConstants.LANG_ATTRIBUTE_NAME_WITH_PREFIX,langValue);
      }
 else {
        if (atts.getLength() > 0 && currentEntity instanceof Localization) {
          addLabelsForLocaleToImportedEntity(atts);
        }
      }
      return;
    }
 else     if (CmsConstants.OWNER_ELEMENT_NAME.equals(localName)) {
      if (processOwner(atts)) {
        return;
      }
    }
 else     if (shouldIgnoreElement(localName)) {
      return;
    }
 else {
      if (currentEntity instanceof Topic) {
        final Topic currentlyImportedTopic=(Topic)currentEntity;
        if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          currentlyImportedTopic.setTaxonomy(taxonomy);
          pushEntity(localName,taxonomy,atts);
          return;
        }
 else         if (CmsBuiltInItem.Topic.getLocalPart().equals(localName)) {
          if (atts != null && importContext.isEntityCached(getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts))) {
            throw new SAXException(""String_Node_Str"" + getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts) + ""String_Node_Str"");
          }
          Topic childTopic=createNewTopic(atts,localName);
          currentlyImportedTopic.addChild(childTopic);
          if (childTopic.getTaxonomy() == null && currentlyImportedTopic.getTaxonomy() != null) {
            childTopic.setTaxonomy(currentlyImportedTopic.getTaxonomy());
          }
          pushEntity(localName,childTopic,atts);
          return;
        }
 else         if (CmsConstants.PARENT_TOPIC.equals(localName)) {
          Topic parentTopic=createNewTopic(atts,localName);
          currentlyImportedTopic.setParent(parentTopic);
          pushEntity(localName,parentTopic,atts);
          return;
        }
      }
 else       if (currentEntity instanceof Space) {
        if (CmsBuiltInItem.Space.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((Space)currentEntity).addChild(space);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsConstants.PARENT_SPACE.equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((Space)currentEntity).setParent(space);
          pushEntity(localName,space,atts);
          return;
        }
      }
 else       if (currentEntity instanceof Taxonomy) {
        if (CmsBuiltInItem.Topic.getLocalPart().equals(localName)) {
          if (atts != null && importContext.isEntityCached(getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts))) {
            throw new SAXException(""String_Node_Str"" + getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts) + ""String_Node_Str"");
          }
          Topic topic=createNewTopic(atts,localName);
          ((Taxonomy)currentEntity).addRootTopic(topic);
          pushEntity(localName,topic,atts);
          return;
        }
      }
 else       if (currentEntity instanceof RepositoryUser) {
        if (CmsBuiltInItem.Space.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((RepositoryUserImpl)currentEntity).setSpace(space);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          ((RepositoryUserImpl)currentEntity).setFolksonomy(taxonomy);
          pushEntity(localName,taxonomy,atts);
          return;
        }
      }
 else       if (currentEntity instanceof Repository) {
        if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          pushEntity(localName,taxonomy,atts);
          return;
        }
 else         if (CmsBuiltInItem.OrganizationSpace.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsBuiltInItem.RepositoryUser.getLocalPart().equals(localName)) {
          RepositoryUser repositoryUser=createNewRepositoryUser(atts,localName);
          pushEntity(localName,repositoryUser,atts);
          return;
        }
 else {
          ContentObject contentObject=createNewContentObject(atts,localName,uri);
          pushEntity(localName,contentObject,atts);
          return;
        }
      }
 else       if (currentEntity instanceof List) {
        if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          ((List)currentEntity).add(taxonomy);
          pushEntity(localName,taxonomy,atts);
          return;
        }
 else         if (CmsBuiltInItem.Space.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((List)currentEntity).add(space);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsBuiltInItem.RepositoryUser.getLocalPart().equals(localName)) {
          RepositoryUser repositoryUser=createNewRepositoryUser(atts,localName);
          ((List)currentEntity).add(repositoryUser);
          pushEntity(localName,repositoryUser,atts);
          return;
        }
 else         if (CmsBuiltInItem.Topic.getLocalPart().equals(localName)) {
          Topic topic=createNewTopic(atts,localName);
          ((List)currentEntity).add(topic);
          pushEntity(localName,topic,atts);
          return;
        }
 else {
          ContentObject contentObject=createNewContentObject(atts,localName,uri);
          ((List)currentEntity).add(contentObject);
          pushEntity(localName,contentObject,atts);
          return;
        }
      }
    }
    throw new SAXException(""String_Node_Str"" + localName);
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  logger.debug(""String_Node_Str"",localName,uri);
  if (doNotProcessEvent()) {
    return;
  }
  if (importResult == null) {
    createRootEntity(uri,localName,atts);
  }
 else {
    throwExceptionIfQeueIsEmpty(uri,localName);
    Object currentEntity=getCurrentEntityImported();
    if (currentEntity instanceof ContentObject) {
      if (CmsConstants.OWNER_ELEMENT_NAME.equals(localName)) {
        if (processOwner(atts)) {
          return;
        }
      }
 else {
        processCmsProperty(localName,atts,uri);
        return;
      }
    }
 else     if (currentEntity instanceof CmsProperty) {
      processCmsProperty(localName,atts,uri);
      return;
    }
 else     if (currentEntity instanceof BinaryChannel && CmsConstants.CONTENT_ELEMENT_NAME.equals(localName)) {
      cmsRepositoryEntityQueue.peek().processingRawData(true);
      return;
    }
 else     if (CmsConstants.LOCALIZED_LABEL_ELEMENT_NAME.equals(localName)) {
      String langValue=getValueForAttribute(CmsConstants.LANG_ATTRIBUTE_NAME_WITH_PREFIX,atts);
      if (langValue == null) {
        langValue=getValueForAttribute(CmsConstants.LANG_ATTRIBUTE_NAME,atts);
      }
      if (langValue != null) {
        addAttributeToImportedEntity(CmsConstants.LANG_ATTRIBUTE_NAME_WITH_PREFIX,langValue);
      }
 else {
        if (atts.getLength() > 0 && currentEntity instanceof Localization) {
          addLabelsForLocaleToImportedEntity(atts);
        }
      }
      return;
    }
 else     if (CmsConstants.OWNER_ELEMENT_NAME.equals(localName)) {
      if (processOwner(atts)) {
        return;
      }
    }
 else     if (shouldIgnoreElement(localName)) {
      return;
    }
 else {
      if (currentEntity instanceof Topic) {
        final Topic currentlyImportedTopic=(Topic)currentEntity;
        if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          currentlyImportedTopic.setTaxonomy(taxonomy);
          pushEntity(localName,taxonomy,atts);
          return;
        }
 else         if (CmsBuiltInItem.Topic.getLocalPart().equals(localName)) {
          if (atts != null && importContext.isEntityCached(getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts))) {
            throw new SAXException(""String_Node_Str"" + getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts) + ""String_Node_Str"");
          }
          Topic childTopic=createNewTopic(atts,localName);
          currentlyImportedTopic.addChild(childTopic);
          if (childTopic.getTaxonomy() == null && currentlyImportedTopic.getTaxonomy() != null) {
            childTopic.setTaxonomy(currentlyImportedTopic.getTaxonomy());
          }
          pushEntity(localName,childTopic,atts);
          return;
        }
 else         if (CmsConstants.PARENT_TOPIC.equals(localName)) {
          Topic parentTopic=createNewTopic(atts,localName);
          currentlyImportedTopic.setParent(parentTopic);
          pushEntity(localName,parentTopic,atts);
          return;
        }
      }
 else       if (currentEntity instanceof Space) {
        if (CmsBuiltInItem.Space.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((Space)currentEntity).addChild(space);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsConstants.PARENT_SPACE.equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((Space)currentEntity).setParent(space);
          pushEntity(localName,space,atts);
          return;
        }
      }
 else       if (currentEntity instanceof Taxonomy) {
        if (CmsBuiltInItem.Topic.getLocalPart().equals(localName)) {
          if (atts != null && importContext.isEntityCached(getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts))) {
            throw new SAXException(""String_Node_Str"" + getValueForAttribute(CmsBuiltInItem.Name.getLocalPart(),atts) + ""String_Node_Str"");
          }
          Topic topic=createNewTopic(atts,localName);
          ((Taxonomy)currentEntity).addRootTopic(topic);
          pushEntity(localName,topic,atts);
          return;
        }
      }
 else       if (currentEntity instanceof RepositoryUser) {
        if (CmsBuiltInItem.Space.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((RepositoryUserImpl)currentEntity).setSpace(space);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          ((RepositoryUserImpl)currentEntity).setFolksonomy(taxonomy);
          pushEntity(localName,taxonomy,atts);
          return;
        }
      }
 else       if (currentEntity instanceof Repository) {
        if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          pushEntity(localName,taxonomy,atts);
          return;
        }
 else         if (CmsBuiltInItem.OrganizationSpace.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsBuiltInItem.RepositoryUser.getLocalPart().equals(localName)) {
          RepositoryUser repositoryUser=createNewRepositoryUser(atts,localName);
          pushEntity(localName,repositoryUser,atts);
          return;
        }
 else {
          ContentObject contentObject=createNewContentObject(atts,localName,uri);
          pushEntity(localName,contentObject,atts);
          return;
        }
      }
 else       if (currentEntity instanceof List) {
        if (CmsBuiltInItem.Taxonomy.getLocalPart().equals(localName)) {
          Taxonomy taxonomy=createNewTaxonomy(atts,localName);
          ((List)currentEntity).add(taxonomy);
          pushEntity(localName,taxonomy,atts);
          return;
        }
 else         if (CmsBuiltInItem.Space.getLocalPart().equals(localName)) {
          Space space=createNewSpace(atts,localName);
          ((List)currentEntity).add(space);
          pushEntity(localName,space,atts);
          return;
        }
 else         if (CmsBuiltInItem.RepositoryUser.getLocalPart().equals(localName)) {
          RepositoryUser repositoryUser=createNewRepositoryUser(atts,localName);
          ((List)currentEntity).add(repositoryUser);
          pushEntity(localName,repositoryUser,atts);
          return;
        }
 else         if (CmsBuiltInItem.Topic.getLocalPart().equals(localName)) {
          Topic topic=createNewTopic(atts,localName);
          ((List)currentEntity).add(topic);
          pushEntity(localName,topic,atts);
          return;
        }
 else {
          ContentObject contentObject=createNewContentObject(atts,localName,uri);
          ((List)currentEntity).add(contentObject);
          pushEntity(localName,contentObject,atts);
          return;
        }
      }
    }
    throw new SAXException(""String_Node_Str"" + localName);
  }
}"
44642,"private ContentObject saveAndAssertBinaryContentIsSaved(ContentObject contentObject,String contentSource,File fileWhichContainsContent,String property,Map<String,byte[]> binaryContent) throws Exception {
  try {
    contentObject=importService.importContentObject(contentSource,false,true,true,binaryContent);
    ContentObject object=contentService.getContentObject(contentObject.getId(),ResourceRepresentationType.CONTENT_OBJECT_INSTANCE,FetchLevel.ENTITY,CacheRegion.NONE,null,false);
    BinaryProperty imageProperty=(BinaryProperty)object.getCmsProperty(property);
    Assert.assertTrue(imageProperty.hasValues(),""String_Node_Str"" + property + ""String_Node_Str"");
    for (    BinaryChannel imageBinaryChannel : imageProperty.getSimpleTypeValues()) {
      String sourceFilename=imageBinaryChannel.getSourceFilename();
      Assert.assertTrue(StringUtils.isNotBlank(sourceFilename),""String_Node_Str"" + imageBinaryChannel.getName() + ""String_Node_Str"");
      File fileWhoseContentsAreSavedInBinaryChannel=null;
      if (sourceFilename.equals(fileWhichContainsContent.getName())) {
        fileWhoseContentsAreSavedInBinaryChannel=fileWhichContainsContent;
      }
 else {
        throw new Exception(""String_Node_Str"" + sourceFilename);
      }
      String mimeType=new MimetypesFileTypeMap().getContentType(fileWhoseContentsAreSavedInBinaryChannel);
      Assert.assertEquals(imageBinaryChannel.getName(),property);
      Assert.assertEquals(imageBinaryChannel.getMimeType(),mimeType);
      Assert.assertEquals(imageBinaryChannel.getSourceFilename(),sourceFilename);
      Assert.assertEquals(imageBinaryChannel.getSize(),FileUtils.readFileToByteArray(fileWhoseContentsAreSavedInBinaryChannel).length);
      Assert.assertEquals(imageBinaryChannel.getModified().getTimeInMillis(),fileWhoseContentsAreSavedInBinaryChannel.lastModified());
      Node binaryChannelNode=getSession().getNodeByUUID(imageBinaryChannel.getId());
      Assert.assertEquals(binaryChannelNode.getName(),imageBinaryChannel.getName(),""String_Node_Str"" + binaryChannelNode.getPath());
      Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.Name.getJcrName()).getString(),property);
      Assert.assertEquals(binaryChannelNode.getProperty(JcrBuiltInItem.JcrMimeType.getJcrName()).getString(),mimeType);
      Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.SourceFileName.getJcrName()).getString(),sourceFilename);
      Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.Size.getJcrName()).getLong(),fileWhoseContentsAreSavedInBinaryChannel.length());
      Assert.assertEquals(binaryChannelNode.getProperty(JcrBuiltInItem.JcrLastModified.getJcrName()).getDate().getTimeInMillis(),fileWhoseContentsAreSavedInBinaryChannel.lastModified());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",contentSource);
    throw e;
  }
  return contentObject;
}","private ContentObject saveAndAssertBinaryContentIsSaved(ContentObject contentObject,String contentSource,File fileWhichContainsContent,String property,Map<String,byte[]> binaryContent) throws Exception {
  try {
    contentObject=importService.importContentObject(contentSource,false,true,true,binaryContent);
    ContentObject object=contentService.getContentObject(contentObject.getId(),ResourceRepresentationType.CONTENT_OBJECT_INSTANCE,FetchLevel.ENTITY,CacheRegion.NONE,null,false);
    BinaryProperty imageProperty=(BinaryProperty)object.getCmsProperty(property);
    Assert.assertTrue(imageProperty.hasValues(),""String_Node_Str"" + property + ""String_Node_Str"");
    for (    BinaryChannel imageBinaryChannel : imageProperty.getSimpleTypeValues()) {
      String sourceFilename=imageBinaryChannel.getSourceFilename();
      Assert.assertTrue(StringUtils.isNotBlank(sourceFilename),""String_Node_Str"" + imageBinaryChannel.getName() + ""String_Node_Str"");
      File fileWhoseContentsAreSavedInBinaryChannel=null;
      if (sourceFilename.equals(fileWhichContainsContent.getName())) {
        fileWhoseContentsAreSavedInBinaryChannel=fileWhichContainsContent;
      }
 else {
        throw new Exception(""String_Node_Str"" + sourceFilename);
      }
      String mimeType=new MimetypesFileTypeMap().getContentType(fileWhoseContentsAreSavedInBinaryChannel);
      if (property.contains(""String_Node_Str"")) {
        Assert.assertEquals(imageBinaryChannel.getName(),StringUtils.substringAfterLast(property,""String_Node_Str""));
      }
 else {
        Assert.assertEquals(imageBinaryChannel.getName(),property);
      }
      Assert.assertEquals(imageBinaryChannel.getMimeType(),mimeType);
      Assert.assertEquals(imageBinaryChannel.getSourceFilename(),sourceFilename);
      Assert.assertEquals(imageBinaryChannel.getSize(),FileUtils.readFileToByteArray(fileWhoseContentsAreSavedInBinaryChannel).length);
      Assert.assertEquals(imageBinaryChannel.getModified().getTimeInMillis(),fileWhoseContentsAreSavedInBinaryChannel.lastModified());
      Node binaryChannelNode=getSession().getNodeByUUID(imageBinaryChannel.getId());
      Assert.assertEquals(binaryChannelNode.getName(),imageBinaryChannel.getName(),""String_Node_Str"" + binaryChannelNode.getPath());
      if (property.contains(""String_Node_Str"")) {
        Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.Name.getJcrName()).getString(),StringUtils.substringAfterLast(property,""String_Node_Str""));
      }
 else {
        Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.Name.getJcrName()).getString(),property);
      }
      Assert.assertEquals(binaryChannelNode.getProperty(JcrBuiltInItem.JcrMimeType.getJcrName()).getString(),mimeType);
      Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.SourceFileName.getJcrName()).getString(),sourceFilename);
      Assert.assertEquals(binaryChannelNode.getProperty(CmsBuiltInItem.Size.getJcrName()).getLong(),fileWhoseContentsAreSavedInBinaryChannel.length());
      Assert.assertEquals(binaryChannelNode.getProperty(JcrBuiltInItem.JcrLastModified.getJcrName()).getDate().getTimeInMillis(),fileWhoseContentsAreSavedInBinaryChannel.lastModified());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",contentSource);
    throw e;
  }
  return contentObject;
}"
44643,"@Test public void testSaveXMLorJSONWithBinaryContent() throws Exception {
  RepositoryUser systemUser=getSystemUser();
  ContentObject contentObject=createContentObject(systemUser,""String_Node_Str"",true);
  BinaryChannel logoBinaryChannel=loadManagedBinaryChannel(logo,""String_Node_Str"");
  BinaryProperty imageProperty=(BinaryProperty)contentObject.getCmsProperty(""String_Node_Str"");
  imageProperty.addSimpleTypeValue(logoBinaryChannel);
  contentObject=contentService.save(contentObject,false,true,null);
  addEntityToBeDeletedAfterTestIsFinished(contentObject);
  String xml=contentObject.xml(false,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",null);
  String json=contentObject.json(false,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",null);
  xml=contentService.getContentObject(contentObject.getId(),ResourceRepresentationType.XML,FetchLevel.FULL,CacheRegion.NONE,null,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",null);
  json=contentService.getContentObject(contentObject.getId(),ResourceRepresentationType.JSON,FetchLevel.FULL,CacheRegion.NONE,null,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",null);
  Map<String,byte[]> binaryContent=new HashMap<String,byte[]>();
  String imageURL=logoBinaryChannel.buildResourceApiURL(null,null,null,null,null,false,false);
  byte[] contentCopy=Arrays.copyOf(logoBinaryChannel.getContent(),logoBinaryChannel.getContent().length);
  binaryContent.put(imageURL,contentCopy);
  logoBinaryChannel.setContent(null);
  xml=contentObject.xml(false,false);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",binaryContent);
  json=contentObject.json(false,false);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",binaryContent);
  xml=contentObject.xml(false,false).replaceAll(Pattern.quote(imageURL),""String_Node_Str"");
  binaryContent.put(""String_Node_Str"",contentCopy);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",binaryContent);
  json=contentObject.json(false,false).replaceAll(Pattern.quote(imageURL),""String_Node_Str"");
  binaryContent.put(""String_Node_Str"",contentCopy);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",binaryContent);
}","@Test public void testSaveXMLorJSONWithBinaryContent() throws Exception {
  RepositoryUser systemUser=getSystemUser();
  ContentObject contentObject=createContentObjectForType(TEST_CONTENT_TYPE,systemUser,""String_Node_Str"",true);
  BinaryChannel logoBinaryChannel=loadManagedBinaryChannel(logo,""String_Node_Str"");
  BinaryProperty imageProperty=(BinaryProperty)contentObject.getCmsProperty(""String_Node_Str"");
  imageProperty.addSimpleTypeValue(logoBinaryChannel);
  contentObject=contentService.save(contentObject,false,true,null);
  addEntityToBeDeletedAfterTestIsFinished(contentObject);
  String xml=contentObject.xml(false,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",null);
  String json=contentObject.json(false,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",null);
  xml=contentService.getContentObject(contentObject.getId(),ResourceRepresentationType.XML,FetchLevel.FULL,CacheRegion.NONE,null,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",null);
  json=contentService.getContentObject(contentObject.getId(),ResourceRepresentationType.JSON,FetchLevel.FULL,CacheRegion.NONE,null,true);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",null);
  Map<String,byte[]> binaryContent=new HashMap<String,byte[]>();
  String imageURL=logoBinaryChannel.buildResourceApiURL(null,null,null,null,null,false,false);
  byte[] contentCopy=Arrays.copyOf(logoBinaryChannel.getContent(),logoBinaryChannel.getContent().length);
  binaryContent.put(imageURL,contentCopy);
  logoBinaryChannel.setContent(null);
  xml=contentObject.xml(false,false);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",binaryContent);
  json=contentObject.json(false,false);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",binaryContent);
  xml=contentObject.xml(false,false).replaceAll(Pattern.quote(imageURL),""String_Node_Str"");
  binaryContent.put(""String_Node_Str"",contentCopy);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,xml,logo,""String_Node_Str"",binaryContent);
  json=contentObject.json(false,false).replaceAll(Pattern.quote(imageURL),""String_Node_Str"");
  binaryContent.put(""String_Node_Str"",contentCopy);
  contentObject=saveAndAssertBinaryContentIsSaved(contentObject,json,logo,""String_Node_Str"",binaryContent);
}"
44644,"public void exportContentObjectList(ContentObjectCriteria contentObjectCriteria,String zipFilename){
  CmsOutcome<ContentObject> cmsOutcome=astroboaClient.getContentService().searchContentObjects(contentObjectCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
  if (cmsOutcome == null || cmsOutcome.getCount() == 0) {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    return;
  }
  FacesContext facesContext=FacesContext.getCurrentInstance();
  if (!facesContext.getResponseComplete()) {
    HttpServletResponse response=(HttpServletResponse)facesContext.getExternalContext().getResponse();
    response.setContentType(""String_Node_Str"");
    response.setCharacterEncoding(""String_Node_Str"");
    if (StringUtils.isBlank(zipFilename)) {
      zipFilename=""String_Node_Str"";
    }
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + FilenameUtils.convertFilenameGreekCharactersToEnglishAndReplaceInvalidCharacters(zipFilename.trim()) + ""String_Node_Str"");
    File tempZip=null;
    FileOutputStream fos=null;
    ZipOutputStream zipOutputStream=null;
    FileInputStream zipFileInputStream=null;
    try {
      tempZip=File.createTempFile(zipFilename,""String_Node_Str"");
      fos=new FileOutputStream(tempZip);
      zipOutputStream=new ZipOutputStream(fos);
      List<ContentObject> results=cmsOutcome.getResults();
      List<String> filenameList=new ArrayList<String>();
      int numbreOfContentObjects=500;
      long now=System.currentTimeMillis();
      for (      ContentObject contentObject : results) {
        if (numbreOfContentObjects == 0) {
          break;
        }
        Calendar created=((CalendarProperty)contentObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValue();
        String folderPath=DateUtils.format(created,""String_Node_Str"");
        long nowXml=System.currentTimeMillis();
        String xml=contentObject.xml(true);
        String finalName=buildFilename(folderPath,created,contentObject,filenameList);
        filenameList.add(finalName);
        long nowZip=System.currentTimeMillis();
        zipOutputStream.putNextEntry(new ZipEntry(finalName));
        IOUtils.write(xml,zipOutputStream);
        zipOutputStream.closeEntry();
        numbreOfContentObjects--;
      }
      zipOutputStream.close();
      fos.close();
      long nowFileZip=System.currentTimeMillis();
      zipFileInputStream=new FileInputStream(tempZip);
      IOUtils.copy(zipFileInputStream,response.getOutputStream());
      zipFileInputStream.close();
      facesContext.responseComplete();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
      JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    }
 finally {
      if (fos != null) {
        IOUtils.closeQuietly(fos);
      }
      if (zipOutputStream != null) {
        IOUtils.closeQuietly(zipOutputStream);
      }
      if (zipFileInputStream != null) {
        IOUtils.closeQuietly(zipFileInputStream);
      }
      if (tempZip != null) {
        FileUtils.deleteQuietly(tempZip);
      }
    }
  }
 else {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
  }
}","public void exportContentObjectList(ContentObjectCriteria contentObjectCriteria,String zipFilename){
  CmsOutcome<ContentObject> cmsOutcome=astroboaClient.getContentService().searchContentObjects(contentObjectCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
  if (cmsOutcome == null || cmsOutcome.getCount() == 0) {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    return;
  }
  FacesContext facesContext=FacesContext.getCurrentInstance();
  if (!facesContext.getResponseComplete()) {
    HttpServletResponse response=(HttpServletResponse)facesContext.getExternalContext().getResponse();
    response.setContentType(""String_Node_Str"");
    response.setCharacterEncoding(""String_Node_Str"");
    zipFilename=generateValidZipFilename(zipFilename);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + zipFilename + ""String_Node_Str"");
    File tempZip=null;
    FileOutputStream fos=null;
    ZipOutputStream zipOutputStream=null;
    FileInputStream zipFileInputStream=null;
    try {
      tempZip=File.createTempFile(zipFilename,""String_Node_Str"");
      fos=new FileOutputStream(tempZip);
      zipOutputStream=new ZipOutputStream(fos);
      List<ContentObject> results=cmsOutcome.getResults();
      List<String> filenameList=new ArrayList<String>();
      int numbreOfContentObjects=500;
      long now=System.currentTimeMillis();
      for (      ContentObject contentObject : results) {
        if (numbreOfContentObjects == 0) {
          break;
        }
        Calendar created=((CalendarProperty)contentObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValue();
        String folderPath=DateUtils.format(created,""String_Node_Str"");
        long nowXml=System.currentTimeMillis();
        String xml=contentObject.xml(true);
        String finalName=buildFilename(folderPath,created,contentObject,filenameList);
        filenameList.add(finalName);
        long nowZip=System.currentTimeMillis();
        zipOutputStream.putNextEntry(new ZipEntry(finalName));
        IOUtils.write(xml,zipOutputStream);
        zipOutputStream.closeEntry();
        numbreOfContentObjects--;
      }
      zipOutputStream.close();
      fos.close();
      long nowFileZip=System.currentTimeMillis();
      zipFileInputStream=new FileInputStream(tempZip);
      IOUtils.copy(zipFileInputStream,response.getOutputStream());
      zipFileInputStream.close();
      facesContext.responseComplete();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
      JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    }
 finally {
      if (fos != null) {
        IOUtils.closeQuietly(fos);
      }
      if (zipOutputStream != null) {
        IOUtils.closeQuietly(zipOutputStream);
      }
      if (zipFileInputStream != null) {
        IOUtils.closeQuietly(zipFileInputStream);
      }
      if (tempZip != null) {
        FileUtils.deleteQuietly(tempZip);
      }
    }
  }
 else {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
  }
}"
44645,"public void exportContentObjectSelection(ContentObjectSelectionBean contentObjectSelection,String zipFilename){
  if (contentObjectSelection == null || CollectionUtils.isEmpty(contentObjectSelection.getSelectedContentObjects())) {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    return;
  }
  FacesContext facesContext=FacesContext.getCurrentInstance();
  if (!facesContext.getResponseComplete()) {
    HttpServletResponse response=(HttpServletResponse)facesContext.getExternalContext().getResponse();
    response.setContentType(""String_Node_Str"");
    response.setCharacterEncoding(""String_Node_Str"");
    if (StringUtils.isBlank(zipFilename)) {
      zipFilename=""String_Node_Str"";
    }
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + FilenameUtils.convertFilenameGreekCharactersToEnglishAndReplaceInvalidCharacters(zipFilename.trim()) + ""String_Node_Str"");
    File tempZip=null;
    FileOutputStream fos=null;
    ZipOutputStream zipOutputStream=null;
    FileInputStream zipFileInputStream=null;
    try {
      tempZip=File.createTempFile(zipFilename,""String_Node_Str"");
      fos=new FileOutputStream(tempZip);
      zipOutputStream=new ZipOutputStream(fos);
      List<ContentObjectUIWrapper> results=contentObjectSelection.getSelectedContentObjects();
      List<String> filenameList=new ArrayList<String>();
      int numbreOfContentObjects=500;
      long now=System.currentTimeMillis();
      for (      ContentObjectUIWrapper contentObjectUiWraper : results) {
        if (numbreOfContentObjects == 0) {
          break;
        }
        ContentObject contentObject=contentObjectUiWraper.getContentObject();
        Calendar created=((CalendarProperty)contentObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValue();
        String folderPath=DateUtils.format(created,""String_Node_Str"");
        long nowXml=System.currentTimeMillis();
        String xml=contentObject.toXml();
        String finalName=buildFilename(folderPath,created,contentObject,filenameList);
        filenameList.add(finalName);
        long nowZip=System.currentTimeMillis();
        zipOutputStream.putNextEntry(new ZipEntry(finalName));
        IOUtils.write(xml,zipOutputStream);
        zipOutputStream.closeEntry();
        numbreOfContentObjects--;
      }
      zipOutputStream.close();
      fos.close();
      long nowFileZip=System.currentTimeMillis();
      zipFileInputStream=new FileInputStream(tempZip);
      IOUtils.copy(zipFileInputStream,response.getOutputStream());
      zipFileInputStream.close();
      facesContext.responseComplete();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
      JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    }
 finally {
      if (fos != null) {
        IOUtils.closeQuietly(fos);
      }
      if (zipOutputStream != null) {
        IOUtils.closeQuietly(zipOutputStream);
      }
      if (zipFileInputStream != null) {
        IOUtils.closeQuietly(zipFileInputStream);
      }
      if (tempZip != null) {
        FileUtils.deleteQuietly(tempZip);
      }
    }
  }
 else {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
  }
}","public void exportContentObjectSelection(ContentObjectSelectionBean contentObjectSelection,String zipFilename){
  if (contentObjectSelection == null || CollectionUtils.isEmpty(contentObjectSelection.getSelectedContentObjects())) {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    return;
  }
  FacesContext facesContext=FacesContext.getCurrentInstance();
  if (!facesContext.getResponseComplete()) {
    HttpServletResponse response=(HttpServletResponse)facesContext.getExternalContext().getResponse();
    response.setContentType(""String_Node_Str"");
    response.setCharacterEncoding(""String_Node_Str"");
    zipFilename=generateValidZipFilename(zipFilename);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + zipFilename + ""String_Node_Str"");
    File tempZip=null;
    FileOutputStream fos=null;
    ZipOutputStream zipOutputStream=null;
    FileInputStream zipFileInputStream=null;
    try {
      tempZip=File.createTempFile(zipFilename,""String_Node_Str"");
      fos=new FileOutputStream(tempZip);
      zipOutputStream=new ZipOutputStream(fos);
      List<ContentObjectUIWrapper> results=contentObjectSelection.getSelectedContentObjects();
      List<String> filenameList=new ArrayList<String>();
      int numbreOfContentObjects=500;
      long now=System.currentTimeMillis();
      for (      ContentObjectUIWrapper contentObjectUiWraper : results) {
        if (numbreOfContentObjects == 0) {
          break;
        }
        ContentObject contentObject=contentObjectUiWraper.getContentObject();
        Calendar created=((CalendarProperty)contentObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValue();
        String folderPath=DateUtils.format(created,""String_Node_Str"");
        long nowXml=System.currentTimeMillis();
        String xml=contentObject.toXml();
        String finalName=buildFilename(folderPath,created,contentObject,filenameList);
        filenameList.add(finalName);
        long nowZip=System.currentTimeMillis();
        zipOutputStream.putNextEntry(new ZipEntry(finalName));
        IOUtils.write(xml,zipOutputStream);
        zipOutputStream.closeEntry();
        numbreOfContentObjects--;
      }
      zipOutputStream.close();
      fos.close();
      long nowFileZip=System.currentTimeMillis();
      zipFileInputStream=new FileInputStream(tempZip);
      IOUtils.copy(zipFileInputStream,response.getOutputStream());
      zipFileInputStream.close();
      facesContext.responseComplete();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
      JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
    }
 finally {
      if (fos != null) {
        IOUtils.closeQuietly(fos);
      }
      if (zipOutputStream != null) {
        IOUtils.closeQuietly(zipOutputStream);
      }
      if (zipFileInputStream != null) {
        IOUtils.closeQuietly(zipFileInputStream);
      }
      if (tempZip != null) {
        FileUtils.deleteQuietly(tempZip);
      }
    }
  }
 else {
    JSFUtilities.addMessage(null,""String_Node_Str"",null,FacesMessage.SEVERITY_WARN);
  }
}"
44646,"private String retrieveContentObjectXMLorJSONByIdOrSystemName(String contentObjectIdOrSystemName,String commaDelimitedProjectionPaths,Output output,Date lastModified,boolean prettyPrint){
  try {
    ContentObject contentObject=null;
    if (StringUtils.isBlank(commaDelimitedProjectionPaths)) {
      contentObject=retrieveContentObjectByIdOrSystemName(contentObjectIdOrSystemName,FetchLevel.FULL,null);
    }
 else {
      contentObject=retrieveContentObjectByIdOrSystemName(contentObjectIdOrSystemName,FetchLevel.FULL,commaDelimitedProjectionPaths);
    }
    if (contentObject == null) {
      return null;
    }
    lastModified=((CalendarProperty)contentObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValueAsDate();
    if (output == null) {
      return contentObject.xml(prettyPrint);
    }
switch (output) {
case XML:
      return contentObject.xml(prettyPrint);
case JSON:
    return contentObject.json(prettyPrint);
default :
  return contentObject.xml(prettyPrint);
}
}
 catch (Exception e) {
return null;
}
}","private String retrieveContentObjectXMLorJSONByIdOrSystemName(String contentObjectIdOrSystemName,String commaDelimitedProjectionPaths,Output output,Date lastModified,boolean prettyPrint){
  try {
    ContentObject contentObject=null;
    if (StringUtils.isBlank(commaDelimitedProjectionPaths)) {
      contentObject=retrieveContentObjectByIdOrSystemName(contentObjectIdOrSystemName,FetchLevel.FULL,null);
    }
 else {
      contentObject=retrieveContentObjectByIdOrSystemName(contentObjectIdOrSystemName,FetchLevel.ENTITY,commaDelimitedProjectionPaths);
    }
    if (contentObject == null) {
      return null;
    }
    lastModified=((CalendarProperty)contentObject.getCmsProperty(""String_Node_Str"")).getSimpleTypeValueAsDate();
    if (output == null) {
      return contentObject.xml(prettyPrint);
    }
switch (output) {
case XML:
      return contentObject.xml(prettyPrint);
case JSON:
    return contentObject.json(prettyPrint);
default :
  return contentObject.xml(prettyPrint);
}
}
 catch (Exception e) {
return null;
}
}"
44647,"private void populateSystemName() throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException {
  String systemName=contentObject.getSystemName();
  if (StringUtils.isBlank(systemName)) {
    systemName=retrieveContentObjectProfileTitle();
    if (StringUtils.isBlank(systemName)) {
      systemName=JcrNodeUtils.getYearMonthDayPathForContentObjectNode(contentObjectNode) + contentObjectNode.getUUID();
    }
    systemName=context.getCmsRepositoryEntityUtils().fixSystemName(systemName);
    contentObject.setSystemName(systemName);
  }
  if (!context.getCmsRepositoryEntityUtils().isValidSystemName(systemName)) {
    throw new RepositoryException(""String_Node_Str"" + systemName + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
  }
  if (foundAtLeastOneMoreContentObjectWithSameSystemName(systemName)) {
    systemName=context.getCmsRepositoryEntityUtils().fixSystemName(retrieveContentObjectProfileTitle() + ""String_Node_Str"" + contentObject.getId());
    if (foundAtLeastOneMoreContentObjectWithSameSystemName(systemName)) {
      throw new CmsNonUniqueContentObjectSystemNameException(""String_Node_Str"" + systemName);
    }
 else {
      logger.warn(""String_Node_Str"",new Object[]{contentObject.getId(),systemName,contentObject.getSystemName()});
      contentObject.setSystemName(systemName);
    }
  }
  JcrNodeUtils.addSimpleProperty(SaveMode.UPDATE_ALL,contentObjectNode,CmsBuiltInItem.SystemName,systemName,session.getValueFactory(),ValueType.String);
}","private void populateSystemName() throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException {
  String systemName=contentObject.getSystemName();
  if (StringUtils.isBlank(systemName)) {
    if (contentObjectNode.hasProperty(CmsBuiltInItem.SystemName.getJcrName())) {
      systemName=contentObjectNode.getProperty(CmsBuiltInItem.SystemName.getJcrName()).getString();
      if (!context.getCmsRepositoryEntityUtils().isValidSystemName(systemName)) {
        throw new RepositoryException(""String_Node_Str"" + systemName + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
      }
      contentObject.setSystemName(systemName);
      return;
    }
    systemName=retrieveContentObjectProfileTitle();
    if (StringUtils.isBlank(systemName)) {
      systemName=JcrNodeUtils.getYearMonthDayPathForContentObjectNode(contentObjectNode) + contentObjectNode.getUUID();
    }
    systemName=context.getCmsRepositoryEntityUtils().fixSystemName(systemName);
    contentObject.setSystemName(systemName);
  }
  if (!context.getCmsRepositoryEntityUtils().isValidSystemName(systemName)) {
    throw new RepositoryException(""String_Node_Str"" + systemName + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
  }
  if (foundAtLeastOneMoreContentObjectWithSameSystemName(systemName)) {
    systemName=context.getCmsRepositoryEntityUtils().fixSystemName(retrieveContentObjectProfileTitle() + ""String_Node_Str"" + contentObject.getId());
    if (foundAtLeastOneMoreContentObjectWithSameSystemName(systemName)) {
      throw new CmsNonUniqueContentObjectSystemNameException(""String_Node_Str"" + systemName);
    }
 else {
      logger.warn(""String_Node_Str"",new Object[]{contentObject.getId(),systemName,contentObject.getSystemName()});
      contentObject.setSystemName(systemName);
    }
  }
  JcrNodeUtils.addSimpleProperty(SaveMode.UPDATE_ALL,contentObjectNode,CmsBuiltInItem.SystemName,systemName,session.getValueFactory(),ValueType.String);
}"
44648,"private Response saveContentObjectByIdOrName(@PathParam(""String_Node_Str"") String contentObjectIdOrName,String requestContent,String httpMethod){
  boolean entityIsNew=false;
  ContentObject contentObjectToBeSaved=astroboaClient.getImportService().importContentObject(requestContent,false,true,false);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",contentObjectToBeSaved.xml(true));
  }
  if (CmsConstants.UUIDPattern.matcher(contentObjectIdOrName).matches()) {
    if (contentObjectToBeSaved.getId() == null) {
      contentObjectToBeSaved.setId(contentObjectIdOrName);
      entityIsNew=true;
    }
 else {
      if (!StringUtils.equals(contentObjectIdOrName,contentObjectToBeSaved.getId())) {
        logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ contentObjectIdOrName+ ""String_Node_Str""+ contentObjectToBeSaved.getId());
        throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
      }
    }
  }
 else {
    ContentObject existedContentObject=null;
    ContentObjectCriteria contentObjectCriteria=CmsCriteriaFactory.newContentObjectCriteria();
    contentObjectCriteria.addSystemNameEqualsCriterion(contentObjectIdOrName);
    contentObjectCriteria.setOffsetAndLimit(0,1);
    CmsOutcome<ContentObject> cmsOutcome=astroboaClient.getContentService().searchContentObjects(contentObjectCriteria,ResourceRepresentationType.CONTENT_OBJECT_LIST);
    if (cmsOutcome.getCount() >= 1) {
      existedContentObject=(ContentObject)cmsOutcome.getResults().get(0);
    }
 else {
      entityIsNew=true;
    }
    if (contentObjectToBeSaved.getId() == null) {
      if (existedContentObject != null) {
        contentObjectToBeSaved.setId(existedContentObject.getId());
      }
    }
 else {
      if (existedContentObject != null) {
        if (!StringUtils.equals(existedContentObject.getId(),contentObjectToBeSaved.getId())) {
          logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ contentObjectIdOrName+ ""String_Node_Str""+ existedContentObject.getId()+ ""String_Node_Str""+ contentObjectToBeSaved.getId());
          throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
        }
      }
    }
  }
  return saveContentObject(contentObjectToBeSaved,httpMethod,requestContent,entityIsNew);
}","private Response saveContentObjectByIdOrName(@PathParam(""String_Node_Str"") String contentObjectIdOrName,String requestContent,String httpMethod){
  ContentObject contentObjectToBeSaved=astroboaClient.getImportService().importContentObject(requestContent,false,true,false);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",contentObjectToBeSaved.xml(true));
  }
  ContentObject existingObject=astroboaClient.getContentService().getContentObject(contentObjectIdOrName,ResourceRepresentationType.CONTENT_OBJECT_INSTANCE,FetchLevel.ENTITY,CacheRegion.NONE,null,false);
  boolean entityIsNew=existingObject == null;
  if (CmsConstants.UUIDPattern.matcher(contentObjectIdOrName).matches()) {
    if (contentObjectToBeSaved.getId() == null) {
      contentObjectToBeSaved.setId(contentObjectIdOrName);
    }
 else {
      if (!StringUtils.equals(contentObjectIdOrName,contentObjectToBeSaved.getId())) {
        logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ contentObjectIdOrName+ ""String_Node_Str""+ contentObjectToBeSaved.getId());
        throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
      }
    }
  }
 else {
    if (contentObjectToBeSaved.getId() == null) {
      if (existingObject != null) {
        contentObjectToBeSaved.setId(existingObject.getId());
      }
    }
 else {
      if (existingObject != null) {
        if (!StringUtils.equals(existingObject.getId(),contentObjectToBeSaved.getId())) {
          logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ contentObjectIdOrName+ ""String_Node_Str""+ existingObject.getId()+ ""String_Node_Str""+ contentObjectToBeSaved.getId());
          throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
        }
      }
    }
  }
  return saveContentObject(contentObjectToBeSaved,httpMethod,requestContent,entityIsNew);
}"
44649,"private Response saveTaxonomyByIdOrName(@PathParam(""String_Node_Str"") String taxonomyIdOrName,String requestContent,String httpMethod){
  Taxonomy taxonomyToBeSaved=astroboaClient.getImportService().importTaxonomy(requestContent,false);
  Taxonomy existedTaxonomy=astroboaClient.getTaxonomyService().getTaxonomy(taxonomyIdOrName,ResourceRepresentationType.TAXONOMY_INSTANCE,FetchLevel.ENTITY,false);
  boolean taxonomyIdHasBeenProvided=CmsConstants.UUIDPattern.matcher(taxonomyIdOrName).matches();
  boolean entityIsNew=false;
  if (taxonomyIdHasBeenProvided) {
    if (taxonomyToBeSaved.getId() == null) {
      taxonomyToBeSaved.setId(taxonomyIdOrName);
    }
  }
 else {
    if (taxonomyToBeSaved.getName() == null) {
      taxonomyToBeSaved.setName(taxonomyIdOrName);
    }
  }
  if (existedTaxonomy != null) {
    if (taxonomyToBeSaved.getId() == null) {
      taxonomyToBeSaved.setId(existedTaxonomy.getId());
    }
 else {
      if (!StringUtils.equals(existedTaxonomy.getId(),taxonomyToBeSaved.getId())) {
        logger.warn(""String_Node_Str"",new Object[]{httpMethod,taxonomyIdOrName,existedTaxonomy.getId(),taxonomyToBeSaved.getId()});
        throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
      }
    }
  }
 else {
    if (taxonomyToBeSaved.getName() != null && !taxonomyIdHasBeenProvided && !StringUtils.equals(taxonomyIdOrName,taxonomyToBeSaved.getName())) {
      logger.warn(""String_Node_Str"",new Object[]{httpMethod,taxonomyIdOrName,taxonomyToBeSaved.getName()});
      throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
    }
    entityIsNew=true;
  }
  return saveTaxonomySource(taxonomyToBeSaved.xml(false),httpMethod,entityIsNew);
}","private Response saveTaxonomyByIdOrName(@PathParam(""String_Node_Str"") String taxonomyIdOrName,String requestContent,String httpMethod){
  Taxonomy taxonomyToBeSaved=astroboaClient.getImportService().importTaxonomy(requestContent,false);
  Taxonomy existedTaxonomy=astroboaClient.getTaxonomyService().getTaxonomy(taxonomyIdOrName,ResourceRepresentationType.TAXONOMY_INSTANCE,FetchLevel.ENTITY,false);
  boolean taxonomyIdHasBeenProvided=CmsConstants.UUIDPattern.matcher(taxonomyIdOrName).matches();
  boolean entityIsNew=existedTaxonomy == null;
  if (taxonomyIdHasBeenProvided) {
    if (taxonomyToBeSaved.getId() == null) {
      taxonomyToBeSaved.setId(taxonomyIdOrName);
    }
  }
 else {
    if (taxonomyToBeSaved.getName() == null) {
      taxonomyToBeSaved.setName(taxonomyIdOrName);
    }
  }
  if (existedTaxonomy != null) {
    if (taxonomyToBeSaved.getId() == null) {
      taxonomyToBeSaved.setId(existedTaxonomy.getId());
    }
 else {
      if (!StringUtils.equals(existedTaxonomy.getId(),taxonomyToBeSaved.getId())) {
        logger.warn(""String_Node_Str"",new Object[]{httpMethod,taxonomyIdOrName,existedTaxonomy.getId(),taxonomyToBeSaved.getId()});
        throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
      }
    }
  }
 else {
    if (taxonomyToBeSaved.getName() != null && !taxonomyIdHasBeenProvided && !StringUtils.equals(taxonomyIdOrName,taxonomyToBeSaved.getName())) {
      logger.warn(""String_Node_Str"",new Object[]{httpMethod,taxonomyIdOrName,taxonomyToBeSaved.getName()});
      throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
    }
  }
  return saveTaxonomySource(taxonomyToBeSaved.xml(false),httpMethod,entityIsNew);
}"
44650,"private Response saveTopicByIdOrName(String topicNameOrId,String requestContent,String httpMethod){
  Topic topicToBeSaved=astroboaClient.getImportService().importTopic(requestContent,false);
  boolean entityIsNew=false;
  if (CmsConstants.UUIDPattern.matcher(topicNameOrId).matches()) {
    if (topicToBeSaved.getId() == null) {
      topicToBeSaved.setId(topicNameOrId);
      entityIsNew=true;
    }
 else {
      if (!StringUtils.equals(topicNameOrId,topicToBeSaved.getId())) {
        logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ topicNameOrId+ ""String_Node_Str""+ topicToBeSaved.getId());
        throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
      }
    }
  }
 else {
    Topic existedTopic=null;
    TopicCriteria topicCriteria=CmsCriteriaFactory.newTopicCriteria();
    topicCriteria.addNameEqualsCriterion(topicNameOrId);
    topicCriteria.setOffsetAndLimit(0,1);
    CmsOutcome<Topic> cmsOutcome=astroboaClient.getTopicService().searchTopics(topicCriteria,ResourceRepresentationType.TOPIC_LIST);
    if (cmsOutcome.getCount() >= 1) {
      existedTopic=(Topic)cmsOutcome.getResults().get(0);
    }
 else {
      entityIsNew=true;
    }
    if (topicToBeSaved.getId() == null) {
      if (existedTopic != null) {
        topicToBeSaved.setId(existedTopic.getId());
      }
    }
 else {
      if (existedTopic != null) {
        if (!StringUtils.equals(existedTopic.getId(),topicToBeSaved.getId())) {
          logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ topicNameOrId+ ""String_Node_Str""+ existedTopic.getId()+ ""String_Node_Str""+ topicToBeSaved.getId());
          throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
        }
      }
    }
  }
  return saveTopic(topicToBeSaved,httpMethod,requestContent,entityIsNew);
}","private Response saveTopicByIdOrName(String topicNameOrId,String requestContent,String httpMethod){
  Topic topicToBeSaved=astroboaClient.getImportService().importTopic(requestContent,false);
  Topic existingTopic=astroboaClient.getTopicService().getTopic(topicNameOrId,ResourceRepresentationType.TOPIC_INSTANCE,FetchLevel.ENTITY,false);
  boolean entityIsNew=existingTopic == null;
  if (CmsConstants.UUIDPattern.matcher(topicNameOrId).matches()) {
    if (topicToBeSaved.getId() == null) {
      topicToBeSaved.setId(topicNameOrId);
    }
 else {
      if (!StringUtils.equals(topicNameOrId,topicToBeSaved.getId())) {
        logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ topicNameOrId+ ""String_Node_Str""+ topicToBeSaved.getId());
        throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
      }
    }
  }
 else {
    if (topicToBeSaved.getId() == null) {
      if (existingTopic != null) {
        topicToBeSaved.setId(existingTopic.getId());
      }
    }
 else {
      if (existingTopic != null) {
        if (!StringUtils.equals(existingTopic.getId(),topicToBeSaved.getId())) {
          logger.warn(""String_Node_Str"" + httpMethod + ""String_Node_Str""+ topicNameOrId+ ""String_Node_Str""+ existingTopic.getId()+ ""String_Node_Str""+ topicToBeSaved.getId());
          throw new WebApplicationException(HttpURLConnection.HTTP_BAD_REQUEST);
        }
      }
    }
  }
  return saveTopic(topicToBeSaved,httpMethod,requestContent,entityIsNew);
}"
44651,"private void updateName(Session session,Topic topic,Node topicJcrNode,Context context) throws RepositoryException {
  if (StringUtils.isBlank(topic.getName())) {
    String possibleSystemName=null;
    if (topic.hasLocalizedLabels()) {
      possibleSystemName=topic.getLocalizedLabelForLocale(Locale.ENGLISH.toString());
      if (StringUtils.isBlank(possibleSystemName)) {
        for (        String label : topic.getLocalizedLabels().values()) {
          possibleSystemName=cmsRepositoryEntityUtils.fixSystemName(label);
          if (StringUtils.isNotBlank(possibleSystemName)) {
            break;
          }
        }
      }
 else {
        possibleSystemName=cmsRepositoryEntityUtils.fixSystemName(possibleSystemName);
      }
    }
    if (StringUtils.isBlank(possibleSystemName)) {
      logger.warn(""String_Node_Str"" + topic.getId() + ""String_Node_Str"");
    }
 else {
      topic.setName(possibleSystemName);
    }
  }
  if (topic.getName() != null) {
    if (!cmsRepositoryEntityUtils.isValidSystemName(topic.getName())) {
      throw new RepositoryException(""String_Node_Str"" + topic.getName() + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
    }
    TopicCriteria topicCriteria=CmsCriteriaFactory.newTopicCriteria();
    topicCriteria.addNameEqualsCriterion(topic.getName());
    if (topic.getId() != null) {
      topicCriteria.addIdNotEqualsCriterion(topic.getId());
    }
    topicCriteria.setOffsetAndLimit(0,2);
    CmsQueryResult sameNameTopicsInTaxonomy=cmsQueryHandler.getNodesFromXPathQuery(session,topicCriteria);
    if (sameNameTopicsInTaxonomy.getTotalRowCount() != 0) {
      StringBuilder topicPaths=new StringBuilder();
      NodeIterator nodeIterator=sameNameTopicsInTaxonomy.getNodeIterator();
      while (nodeIterator.hasNext()) {
        topicPaths.append(""String_Node_Str"");
        topicPaths.append(nodeIterator.nextNode().getPath());
      }
      throw new RepositoryException(""String_Node_Str"" + topic.getName() + ""String_Node_Str""+ topicPaths.toString());
    }
 else {
      Node cachedTopicNode=context.getNodeFromCache(topic.getName());
      if (cachedTopicNode != null && !cachedTopicNode.isSame(topicJcrNode)) {
        throw new RepositoryException(""String_Node_Str"" + topic.getName() + ""String_Node_Str""+ ""String_Node_Str""+ topic.getName());
      }
    }
    topicJcrNode.setProperty(CmsBuiltInItem.Name.getJcrName(),topic.getName());
  }
 else   topicJcrNode.setProperty(CmsBuiltInItem.Name.getJcrName(),JcrValueUtils.getJcrNull());
}","private void updateName(Session session,Topic topic,Node topicJcrNode,Context context) throws RepositoryException {
  if (StringUtils.isBlank(topic.getName())) {
    if (topicJcrNode.hasProperty(CmsBuiltInItem.Name.getJcrName())) {
      topic.setName(topicJcrNode.getProperty(CmsBuiltInItem.Name.getJcrName()).getString());
      return;
    }
    String possibleSystemName=null;
    if (topic.hasLocalizedLabels()) {
      possibleSystemName=topic.getLocalizedLabelForLocale(Locale.ENGLISH.toString());
      if (StringUtils.isBlank(possibleSystemName)) {
        for (        String label : topic.getLocalizedLabels().values()) {
          possibleSystemName=cmsRepositoryEntityUtils.fixSystemName(label);
          if (StringUtils.isNotBlank(possibleSystemName)) {
            break;
          }
        }
      }
 else {
        possibleSystemName=cmsRepositoryEntityUtils.fixSystemName(possibleSystemName);
      }
    }
    if (StringUtils.isNotBlank(possibleSystemName)) {
      topic.setName(possibleSystemName);
    }
  }
  if (topic.getName() != null) {
    if (topicJcrNode.hasProperty(CmsBuiltInItem.Name.getJcrName())) {
      if (StringUtils.equals(topicJcrNode.getProperty(CmsBuiltInItem.Name.getJcrName()).getString(),topic.getName())) {
        return;
      }
    }
    if (!cmsRepositoryEntityUtils.isValidSystemName(topic.getName())) {
      throw new RepositoryException(""String_Node_Str"" + topic.getName() + ""String_Node_Str""+ CmsConstants.SYSTEM_NAME_REG_EXP);
    }
    TopicCriteria topicCriteria=CmsCriteriaFactory.newTopicCriteria();
    topicCriteria.addNameEqualsCriterion(topic.getName());
    if (topic.getId() != null) {
      topicCriteria.addIdNotEqualsCriterion(topic.getId());
    }
    topicCriteria.setOffsetAndLimit(0,2);
    CmsQueryResult sameNameTopicsInTaxonomy=cmsQueryHandler.getNodesFromXPathQuery(session,topicCriteria);
    if (sameNameTopicsInTaxonomy.getTotalRowCount() != 0) {
      StringBuilder topicPaths=new StringBuilder();
      NodeIterator nodeIterator=sameNameTopicsInTaxonomy.getNodeIterator();
      while (nodeIterator.hasNext()) {
        topicPaths.append(""String_Node_Str"");
        topicPaths.append(nodeIterator.nextNode().getPath());
      }
      throw new RepositoryException(""String_Node_Str"" + topic.getName() + ""String_Node_Str""+ topicPaths.toString());
    }
 else {
      Node cachedTopicNode=context.getNodeFromCache(topic.getName());
      if (cachedTopicNode != null && !cachedTopicNode.isSame(topicJcrNode)) {
        throw new RepositoryException(""String_Node_Str"" + topic.getName() + ""String_Node_Str""+ ""String_Node_Str""+ topic.getName());
      }
    }
    topicJcrNode.setProperty(CmsBuiltInItem.Name.getJcrName(),topic.getName());
  }
}"
44652,"public Node insertTopicNode(Session session,Topic topic,Context context) throws RepositoryException {
  if (topic.getTaxonomy() == null) {
    if (topic.getParent() != null && topic.getParent().getTaxonomy() != null) {
      topic.setTaxonomy(topic.getParent().getTaxonomy());
    }
 else {
      Taxonomy defaultTaxonomy=cmsRepositoryEntityFactoryForActiveClient.newTaxonomy();
      defaultTaxonomy.setName(CmsBuiltInItem.SubjectTaxonomy.getJcrName());
      topic.setTaxonomy(defaultTaxonomy);
    }
  }
  Node parentTopicNode=topicUtils.retrieveParentTopicNode(session,topic);
  return topicUtils.addNewTopicJcrNode(parentTopicNode,topic,session,false,context);
}","public Node insertTopicNode(Session session,Topic topic,Context context) throws RepositoryException {
  if (topic.getTaxonomy() == null) {
    if (topic.getParent() != null && topic.getParent().getTaxonomy() != null) {
      topic.setTaxonomy(topic.getParent().getTaxonomy());
    }
 else {
      Taxonomy defaultTaxonomy=cmsRepositoryEntityFactoryForActiveClient.newTaxonomy();
      defaultTaxonomy.setName(CmsBuiltInItem.SubjectTaxonomy.getJcrName());
      topic.setTaxonomy(defaultTaxonomy);
    }
  }
  Node parentTopicNode=topicUtils.retrieveParentTopicNode(session,topic,context);
  return topicUtils.addNewTopicJcrNode(parentTopicNode,topic,session,false,context);
}"
44653,"/** 
 * retrieve topic's parent. If no id is specified, taxonomy node is returned instead
 * @param session
 * @param parent
 * @return
 * @throws CMSDaoException 
 * @throws Exception 
 */
public Node retrieveParentTopicNode(Session session,Topic topic) throws RepositoryException {
  Node parentTopicNode=null;
  if (topic.getParent() != null && topic.getParent().getId() != null) {
    parentTopicNode=cmsRepositoryEntityUtils.retrieveUniqueNodeForTopic(session,topic.getParent().getId());
    if (parentTopicNode == null) {
      throw new CmsException(""String_Node_Str"" + topic.getParent().getId());
    }
  }
  if (parentTopicNode != null) {
    return parentTopicNode;
  }
 else {
    return retrieveTaxonomyJcrNodeForTopic(session,topic);
  }
}","/** 
 * retrieve topic's parent. If no id is specified, taxonomy node is returned instead
 * @param session
 * @param parent
 * @return
 * @throws CMSDaoException 
 * @throws Exception 
 */
public Node retrieveParentTopicNode(Session session,Topic topic,Context context) throws RepositoryException {
  Node parentTopicNode=null;
  Topic parentTopic=topic.getParent();
  if (parentTopic != null) {
    if (parentTopic.getId() != null) {
      parentTopicNode=context.retrieveNodeForTopic(parentTopic.getId());
    }
    if (parentTopicNode == null && parentTopic.getName() != null) {
      parentTopicNode=context.retrieveNodeForTopic(parentTopic.getName());
    }
    if (parentTopicNode == null) {
      throw new CmsException(""String_Node_Str"" + parentTopic.toString());
    }
  }
  if (parentTopicNode != null) {
    return parentTopicNode;
  }
 else {
    return retrieveTaxonomyJcrNodeForTopic(session,topic);
  }
}"
44654,"public Node updateTopic(Session session,Topic topic,Node parentTopicJcrNode,Context context) throws RepositoryException {
  Node topicJcrNode=cmsRepositoryEntityUtils.retrieveUniqueNodeForTopic(session,topic.getId());
  if (topicJcrNode == null) {
    if (topic.getId() != null) {
      if (parentTopicJcrNode == null) {
        parentTopicJcrNode=retrieveParentTopicNode(session,topic);
      }
      return addNewTopicJcrNode(parentTopicJcrNode,topic,session,true,context);
    }
 else     throw new CmsException(""String_Node_Str"" + topic.getId());
  }
  updateSystemBuiltin(topic,topicJcrNode);
  updateOwner(topic,topicJcrNode,session,context);
  updateLocalizedLabels(topic,topicJcrNode);
  updateName(session,topic,topicJcrNode,context);
  Node currentTaxonomyNode=JcrNodeUtils.getTaxonomyJcrNode(topicJcrNode,true);
  String currentTaxonomyName=currentTaxonomyNode.getName();
  if (topic.getParent() != null) {
    updateTopicParent(currentTaxonomyName,topic,topicJcrNode,session,context);
  }
 else {
    if (topic.getTaxonomy() == null || (StringUtils.isBlank(topic.getTaxonomy().getId()) && StringUtils.isBlank(topic.getTaxonomy().getName()))) {
      if (!currentTaxonomyNode.isNodeType(CmsBuiltInItem.Taxonomy.getJcrName())) {
        throw new CmsException(""String_Node_Str"" + topic.getId() + ""String_Node_Str""+ topic.getName()+ ""String_Node_Str""+ topicJcrNode.getParent().getPath()+ ""String_Node_Str"");
      }
      checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,currentTaxonomyName);
    }
 else {
      Node taxonomyNode=retrieveTaxonomyJcrNodeForTopic(session,topic);
      if (taxonomyNode == null) {
        throw new CmsException(""String_Node_Str"" + topic.getTaxonomy().getName());
      }
      if (!topicJcrNode.getParent().getUUID().equals(taxonomyNode.getUUID())) {
        checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,topic.getTaxonomy().getName());
        session.move(topicJcrNode.getPath(),taxonomyNode.getPath() + CmsConstants.FORWARD_SLASH + topicJcrNode.getName());
      }
    }
  }
  updateOrder(topic,topicJcrNode);
  updateAllowsReferrerContentObject(topic,topicJcrNode);
  return topicJcrNode;
}","public Node updateTopic(Session session,Topic topic,Node parentTopicJcrNode,Context context) throws RepositoryException {
  Node topicJcrNode=context.retrieveNodeForTopic(topic.getId());
  if (topicJcrNode == null) {
    if (topic.getId() != null) {
      if (parentTopicJcrNode == null) {
        parentTopicJcrNode=retrieveParentTopicNode(session,topic,context);
      }
      return addNewTopicJcrNode(parentTopicJcrNode,topic,session,true,context);
    }
 else     throw new CmsException(""String_Node_Str"" + topic.getId());
  }
  updateSystemBuiltin(topic,topicJcrNode);
  updateOwner(topic,topicJcrNode,session,context);
  updateLocalizedLabels(topic,topicJcrNode);
  updateName(session,topic,topicJcrNode,context);
  Node currentTaxonomyNode=JcrNodeUtils.getTaxonomyJcrNode(topicJcrNode,true);
  String currentTaxonomyName=currentTaxonomyNode.getName();
  if (topic.getParent() != null) {
    updateTopicParent(currentTaxonomyName,topic,topicJcrNode,session,context);
  }
 else {
    if (topic.getTaxonomy() == null || (StringUtils.isBlank(topic.getTaxonomy().getId()) && StringUtils.isBlank(topic.getTaxonomy().getName()))) {
      if (!currentTaxonomyNode.isNodeType(CmsBuiltInItem.Taxonomy.getJcrName())) {
        throw new CmsException(""String_Node_Str"" + topic.getId() + ""String_Node_Str""+ topic.getName()+ ""String_Node_Str""+ topicJcrNode.getParent().getPath()+ ""String_Node_Str"");
      }
      checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,currentTaxonomyName);
    }
 else {
      Node taxonomyNode=retrieveTaxonomyJcrNodeForTopic(session,topic);
      if (taxonomyNode == null) {
        throw new CmsException(""String_Node_Str"" + topic.getTaxonomy().getName());
      }
      if (!topicJcrNode.getParent().getUUID().equals(taxonomyNode.getUUID())) {
        checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,topic.getTaxonomy().getName());
        session.move(topicJcrNode.getPath(),taxonomyNode.getPath() + CmsConstants.FORWARD_SLASH + topicJcrNode.getName());
      }
    }
  }
  updateOrder(topic,topicJcrNode);
  updateAllowsReferrerContentObject(topic,topicJcrNode);
  return topicJcrNode;
}"
44655,"@Override public boolean tokenHasExpired(String authenticationToken){
  return authenticationToken == null || (authenticationTokenEntries != null && !authenticationTokenEntries.contains(authenticationToken));
}","@Override public boolean tokenHasExpired(String authenticationToken){
  return authenticationToken == null || (authenticationTokenEntries != null && !authenticationTokenEntries.containsKey(authenticationToken));
}"
44656,"public void setSystemUserAsTopicOwner(Topic topic,RepositoryUser systemUser){
  if (topic != null) {
    if (topic.getOwner() == null || topic.getOwner() != systemUser || !StringUtils.equals(topic.getOwner().getId(),systemUser.getId())) {
      if (!StringUtils.equals(systemUser.getExternalId(),CmsApiConstants.SYSTEM_REPOSITORY_USER_EXTRENAL_ID)) {
        throw new CmsException(""String_Node_Str"" + systemUser.getExternalId());
      }
      topic.setOwner(systemUser);
      if (topic.getOwner() != null) {
        logger.info(""String_Node_Str"",topic.getOwner().getExternalId() + ""String_Node_Str"" + topic.getOwner().getLabel(),topic.getName());
      }
    }
    if (topic.isChildrenLoaded()) {
      List<Topic> childTopics=topic.getChildren();
      if (CollectionUtils.isNotEmpty(childTopics)) {
        for (        Topic child : childTopics) {
          RepositoryUser childOwner=child.getOwner();
          if (childOwner == null) {
            setSystemUserAsTopicOwner(child,systemUser);
          }
 else {
            if (childOwner != systemUser || !StringUtils.equals(childOwner.getId(),systemUser.getId())) {
              setSystemUserAsTopicOwner(child,systemUser);
            }
          }
        }
      }
    }
  }
}","public void setSystemUserAsTopicOwner(Topic topic,RepositoryUser systemUser){
  if (topic != null) {
    if (!usersAreTheSame(topic.getOwner(),systemUser)) {
      if (!StringUtils.equals(systemUser.getExternalId(),CmsApiConstants.SYSTEM_REPOSITORY_USER_EXTRENAL_ID)) {
        throw new CmsException(""String_Node_Str"" + systemUser.getExternalId());
      }
      topic.setOwner(systemUser);
    }
    if (topic.isChildrenLoaded()) {
      List<Topic> childTopics=topic.getChildren();
      if (CollectionUtils.isNotEmpty(childTopics)) {
        for (        Topic child : childTopics) {
          RepositoryUser childOwner=child.getOwner();
          if (childOwner == null) {
            setSystemUserAsTopicOwner(child,systemUser);
          }
 else {
            if (childOwner != systemUser || !StringUtils.equals(childOwner.getId(),systemUser.getId())) {
              setSystemUserAsTopicOwner(child,systemUser);
            }
          }
        }
      }
    }
  }
}"
44657,"private Node populateTopicJcrNode(Topic topic,Session session,Node topicJcrNode,boolean useProvidedId,Context context) throws RepositoryException {
  updateSystemBuiltin(topic,topicJcrNode);
  updateOwner(topic.getOwner(),topicJcrNode,session,context);
  updateLocalizedLabels(topic,topicJcrNode);
  updateOrder(topic,topicJcrNode);
  updateName(session,topic,topicJcrNode,context);
  updateAllowsReferrerContentObject(topic,topicJcrNode);
  saveOrUpdateChildren(topic,session,topicJcrNode,context);
  return topicJcrNode;
}","private Node populateTopicJcrNode(Topic topic,Session session,Node topicJcrNode,boolean useProvidedId,Context context) throws RepositoryException {
  updateSystemBuiltin(topic,topicJcrNode);
  updateOwner(topic,topicJcrNode,session,context);
  updateLocalizedLabels(topic,topicJcrNode);
  updateOrder(topic,topicJcrNode);
  updateName(session,topic,topicJcrNode,context);
  updateAllowsReferrerContentObject(topic,topicJcrNode);
  saveOrUpdateChildren(topic,session,topicJcrNode,context);
  return topicJcrNode;
}"
44658,"public Node updateTopic(Session session,Topic topic,Node parentTopicJcrNode,Context context) throws RepositoryException {
  Node topicJcrNode=cmsRepositoryEntityUtils.retrieveUniqueNodeForTopic(session,topic.getId());
  if (topicJcrNode == null) {
    if (topic.getId() != null) {
      if (parentTopicJcrNode == null) {
        parentTopicJcrNode=retrieveParentTopicNode(session,topic);
      }
      return addNewTopicJcrNode(parentTopicJcrNode,topic,session,true,context);
    }
 else     throw new CmsException(""String_Node_Str"" + topic.getId());
  }
  updateSystemBuiltin(topic,topicJcrNode);
  updateOwner(topic.getOwner(),topicJcrNode,session,context);
  updateLocalizedLabels(topic,topicJcrNode);
  updateName(session,topic,topicJcrNode,context);
  Node currentTaxonomyNode=JcrNodeUtils.getTaxonomyJcrNode(topicJcrNode,true);
  String currentTaxonomyName=currentTaxonomyNode.getName();
  if (topic.getParent() != null) {
    updateTopicParent(currentTaxonomyName,topic,topicJcrNode,session,context);
  }
 else {
    Node taxonomyNode=retrieveTaxonomyJcrNodeForTopic(session,topic);
    if (taxonomyNode == null) {
      throw new CmsException(""String_Node_Str"" + topic.getTaxonomy().getName());
    }
    if (!topicJcrNode.getParent().getUUID().equals(taxonomyNode.getUUID())) {
      checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,topic.getTaxonomy().getName());
      session.move(topicJcrNode.getPath(),taxonomyNode.getPath() + CmsConstants.FORWARD_SLASH + topicJcrNode.getName());
    }
  }
  updateOrder(topic,topicJcrNode);
  updateAllowsReferrerContentObject(topic,topicJcrNode);
  return topicJcrNode;
}","public Node updateTopic(Session session,Topic topic,Node parentTopicJcrNode,Context context) throws RepositoryException {
  Node topicJcrNode=cmsRepositoryEntityUtils.retrieveUniqueNodeForTopic(session,topic.getId());
  if (topicJcrNode == null) {
    if (topic.getId() != null) {
      if (parentTopicJcrNode == null) {
        parentTopicJcrNode=retrieveParentTopicNode(session,topic);
      }
      return addNewTopicJcrNode(parentTopicJcrNode,topic,session,true,context);
    }
 else     throw new CmsException(""String_Node_Str"" + topic.getId());
  }
  updateSystemBuiltin(topic,topicJcrNode);
  updateOwner(topic,topicJcrNode,session,context);
  updateLocalizedLabels(topic,topicJcrNode);
  updateName(session,topic,topicJcrNode,context);
  Node currentTaxonomyNode=JcrNodeUtils.getTaxonomyJcrNode(topicJcrNode,true);
  String currentTaxonomyName=currentTaxonomyNode.getName();
  if (topic.getParent() != null) {
    updateTopicParent(currentTaxonomyName,topic,topicJcrNode,session,context);
  }
 else {
    if (topic.getTaxonomy() == null || (StringUtils.isBlank(topic.getTaxonomy().getId()) && StringUtils.isBlank(topic.getTaxonomy().getName()))) {
      if (!currentTaxonomyNode.isNodeType(CmsBuiltInItem.Taxonomy.getJcrName())) {
        throw new CmsException(""String_Node_Str"" + topic.getId() + ""String_Node_Str""+ topic.getName()+ ""String_Node_Str""+ topicJcrNode.getParent().getPath()+ ""String_Node_Str"");
      }
      checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,currentTaxonomyName);
    }
 else {
      Node taxonomyNode=retrieveTaxonomyJcrNodeForTopic(session,topic);
      if (taxonomyNode == null) {
        throw new CmsException(""String_Node_Str"" + topic.getTaxonomy().getName());
      }
      if (!topicJcrNode.getParent().getUUID().equals(taxonomyNode.getUUID())) {
        checkThatReferrerContentObjectsAcceptNewTaxonomy(currentTaxonomyName,topic,session,topic.getTaxonomy().getName());
        session.move(topicJcrNode.getPath(),taxonomyNode.getPath() + CmsConstants.FORWARD_SLASH + topicJcrNode.getName());
      }
    }
  }
  updateOrder(topic,topicJcrNode);
  updateAllowsReferrerContentObject(topic,topicJcrNode);
  return topicJcrNode;
}"
44659,"private void updateAllowsReferrerContentObject(Topic topic,Node topicJcrNode) throws RepositoryException {
  topicJcrNode.setProperty(CmsBuiltInItem.AllowsReferrerContentObjects.getJcrName(),topic.isAllowsReferrerContentObjects());
}","private void updateAllowsReferrerContentObject(Topic topic,Node topicJcrNode) throws RepositoryException {
  if (((TopicImpl)topic).allowsReferrerContentObjectsHasBeenSet() || !topicJcrNode.hasProperty(CmsBuiltInItem.AllowsReferrerContentObjects.getJcrName())) {
    topicJcrNode.setProperty(CmsBuiltInItem.AllowsReferrerContentObjects.getJcrName(),topic.isAllowsReferrerContentObjects());
  }
 else {
    topic.setAllowsReferrerContentObjects(topicJcrNode.getProperty(CmsBuiltInItem.AllowsReferrerContentObjects.getJcrName()).getBoolean());
  }
}"
44660,"public void updateOwner(RepositoryUser topicOwner,Node topicJcrNode,Session session,Context context) throws RepositoryException {
  if (topicOwner == null || StringUtils.isBlank(topicOwner.getId())) {
    throw new CmsException(""String_Node_Str"");
  }
  String newOwnerId=topicOwner.getId();
  if (!topicJcrNode.hasProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName()) || !topicJcrNode.getProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName()).getString().equals(newOwnerId)) {
    if (cmsRepositoryEntityUtils.retrieveUniqueNodeForRepositoryUser(session,newOwnerId) == null) {
      throw new CmsException(""String_Node_Str"" + newOwnerId + ""String_Node_Str""+ topicOwner.getExternalId()+ ""String_Node_Str""+ topicOwner.getLabel());
    }
    EntityAssociationUpdateHelper<RepositoryUser> repositoryUserAssociationUpdateHelper=new EntityAssociationUpdateHelper<RepositoryUser>(session,cmsRepositoryEntityAssociationDao,context);
    repositoryUserAssociationUpdateHelper.setReferrerCmsRepositoryEntityNode(topicJcrNode);
    repositoryUserAssociationUpdateHelper.setReferrerPropertyName(CmsBuiltInItem.OwnerCmsIdentifier);
    repositoryUserAssociationUpdateHelper.setValuesToBeAdded(Arrays.asList(topicOwner));
    repositoryUserAssociationUpdateHelper.update();
  }
}","public void updateOwner(Topic topic,Node topicJcrNode,Session session,Context context) throws RepositoryException {
  RepositoryUser topicOwner=retrieveOwnerForTopic(topic,topicJcrNode);
  if (topicOwner == null) {
    setSystemUserAsTopicOwner(topic,repositoryUserDao.getSystemRepositoryUser());
  }
 else {
    if (!usersAreTheSame(topic.getOwner(),topicOwner)) {
      logger.info(""String_Node_Str"",topic.toString(),topicOwner);
      topic.setOwner(topicOwner);
    }
  }
  String newOwnerId=topicOwner.getId();
  if (!topicJcrNode.hasProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName()) || !topicJcrNode.getProperty(CmsBuiltInItem.OwnerCmsIdentifier.getJcrName()).getString().equals(newOwnerId)) {
    EntityAssociationUpdateHelper<RepositoryUser> repositoryUserAssociationUpdateHelper=new EntityAssociationUpdateHelper<RepositoryUser>(session,cmsRepositoryEntityAssociationDao,context);
    repositoryUserAssociationUpdateHelper.setReferrerCmsRepositoryEntityNode(topicJcrNode);
    repositoryUserAssociationUpdateHelper.setReferrerPropertyName(CmsBuiltInItem.OwnerCmsIdentifier);
    repositoryUserAssociationUpdateHelper.setValuesToBeAdded(Arrays.asList(topicOwner));
    repositoryUserAssociationUpdateHelper.update();
  }
}"
44661,"public Node insertTopicNode(Session session,Topic topic,Context context) throws RepositoryException {
  Node parentTopicNode=topicUtils.retrieveParentTopicNode(session,topic);
  return topicUtils.addNewTopicJcrNode(parentTopicNode,topic,session,false,context);
}","public Node insertTopicNode(Session session,Topic topic,Context context) throws RepositoryException {
  if (topic.getTaxonomy() == null) {
    if (topic.getParent() != null && topic.getParent().getTaxonomy() != null) {
      topic.setTaxonomy(topic.getParent().getTaxonomy());
    }
 else {
      Taxonomy defaultTaxonomy=cmsRepositoryEntityFactoryForActiveClient.newTaxonomy();
      defaultTaxonomy.setName(CmsBuiltInItem.SubjectTaxonomy.getJcrName());
      topic.setTaxonomy(defaultTaxonomy);
    }
  }
  Node parentTopicNode=topicUtils.retrieveParentTopicNode(session,topic);
  return topicUtils.addNewTopicJcrNode(parentTopicNode,topic,session,false,context);
}"
44662,"public Topic saveTopic(Object topicSource,Context context) throws CmsException {
  if (topicSource == null) {
    throw new CmsException(""String_Node_Str"");
  }
  if (topicSource instanceof String) {
    return importDao.importTopic((String)topicSource,ImportMode.SAVE_ENTITY);
  }
  if (!(topicSource instanceof Topic)) {
    throw new CmsException(""String_Node_Str"" + topicSource.getClass().getName());
  }
  Topic topic=(Topic)topicSource;
  SaveMode saveMode=null;
  try {
    saveMode=cmsRepositoryEntityUtils.determineSaveMode(topic);
    Session session=getSession();
    if (topic.getTaxonomy() == null) {
      Taxonomy defaultTaxonomy=cmsRepositoryEntityFactoryForActiveClient.newTaxonomy();
      defaultTaxonomy.setName(CmsBuiltInItem.SubjectTaxonomy.getJcrName());
      topic.setTaxonomy(defaultTaxonomy);
    }
    if (!StringUtils.equals(topic.getTaxonomy().getName(),Taxonomy.REPOSITORY_USER_FOLKSONOMY_NAME)) {
      RepositoryUser systemUser=repositoryUserDao.getSystemRepositoryUser();
      topicUtils.setSystemUserAsTopicOwner(topic,systemUser);
    }
    if (context == null) {
      context=new Context(cmsRepositoryEntityUtils,cmsQueryHandler,session);
    }
    Node topicNode=null;
switch (saveMode) {
case UPDATE_ALL:
      topicNode=topicUtils.updateTopic(session,topic,null,context);
    break;
case INSERT:
  topicNode=insertTopicNode(session,topic,context);
break;
default :
break;
}
session.save();
if (topicNode != null) {
context.cacheTopicNode(topicNode,true);
}
return topic;
}
 catch (CmsException e) {
throw e;
}
catch (Exception e) {
throw new CmsException(e);
}
 finally {
if (context != null) {
context.dispose();
context=null;
}
}
}","public Topic saveTopic(Object topicSource,Context context) throws CmsException {
  if (topicSource == null) {
    throw new CmsException(""String_Node_Str"");
  }
  if (topicSource instanceof String) {
    return importDao.importTopic((String)topicSource,ImportMode.SAVE_ENTITY);
  }
  if (!(topicSource instanceof Topic)) {
    throw new CmsException(""String_Node_Str"" + topicSource.getClass().getName());
  }
  Topic topic=(Topic)topicSource;
  SaveMode saveMode=null;
  try {
    saveMode=cmsRepositoryEntityUtils.determineSaveMode(topic);
    Session session=getSession();
    if (context == null) {
      context=new Context(cmsRepositoryEntityUtils,cmsQueryHandler,session);
    }
    Node topicNode=null;
switch (saveMode) {
case UPDATE_ALL:
      topicNode=topicUtils.updateTopic(session,topic,null,context);
    break;
case INSERT:
  topicNode=insertTopicNode(session,topic,context);
break;
default :
break;
}
session.save();
if (topicNode != null) {
context.cacheTopicNode(topicNode,true);
}
return topic;
}
 catch (CmsException e) {
throw e;
}
catch (Exception e) {
throw new CmsException(e);
}
 finally {
if (context != null) {
context.dispose();
context=null;
}
}
}"
44663,"public String getXPath(){
  if (StringUtils.isEmpty(property))   return ""String_Node_Str"";
  StringBuilder criterion=new StringBuilder();
  if (CollectionUtils.isNotEmpty(values) && values.size() > 1)   criterion.append(CmsConstants.LEFT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE);
  criterion.append(CmsConstants.EMPTY_SPACE);
  if (operator == null)   operator=QueryOperator.EQUALS;
  if (QueryOperator.IS_NULL == operator)   criterion.append(XPathUtils.attributeNullCriteria(property));
 else   if (QueryOperator.IS_NOT_NULL == operator)   criterion.append(XPathUtils.attributeNotNullCriteria(property));
 else   if (CollectionUtils.isEmpty(values)) {
    if (operator == QueryOperator.EQUALS)     criterion.append(XPathUtils.attributeNullCriteria(property));
 else     if (operator == QueryOperator.NOT_EQUALS)     criterion.append(XPathUtils.attributeNotNullCriteria(property));
 else     return ""String_Node_Str"";
  }
 else {
    String propertyPath=property;
    if (QueryOperator.EQUALS == operator || QueryOperator.NOT_EQUALS == operator || QueryOperator.LIKE == operator) {
      if (CaseMatching.LOWER_CASE == caseMatching) {
        propertyPath=CmsConstants.FN_LOWER_CASE + CmsConstants.LEFT_PARENTHESIS + property+ CmsConstants.RIGHT_PARENTHESIS;
      }
 else       if (CaseMatching.UPPER_CASE == caseMatching) {
        propertyPath=CmsConstants.FN_UPPER_CASE + CmsConstants.LEFT_PARENTHESIS + property+ CmsConstants.RIGHT_PARENTHESIS;
      }
    }
    if (internalCondition == null)     internalCondition=Condition.AND;
    performSpecialOperationsInCaseOfContainsOperator();
    for (    Object value : values) {
      if (value instanceof String) {
        value=transformValueIfCaseMatchingIsEnabled(value);
        value=checkIfValueIsAReferenceAndLoadReferenceId((String)value);
        value=checkIfPropertyIsOfTypeLongIntegerOrDoubleAndConvertValueAccordingly(propertyPath,(String)value);
      }
      criterion.append(CmsConstants.EMPTY_SPACE + XPathUtils.createObjectCriteria(propertyPath,operator,value,propertyIsSimple,caseMatching,numberOfNodeLevelsToSearchInTheModelHierarchy) + CmsConstants.EMPTY_SPACE+ internalCondition.toString().toLowerCase());
    }
    criterion.replace(criterion.length() - internalCondition.toString().length(),criterion.length(),""String_Node_Str"");
  }
  criterion.append(CmsConstants.EMPTY_SPACE);
  if (CollectionUtils.isNotEmpty(values) && values.size() > 1)   criterion.append(CmsConstants.RIGHT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE);
  return criterion.toString();
}","public String getXPath(){
  if (StringUtils.isEmpty(property))   return ""String_Node_Str"";
  StringBuilder criterion=new StringBuilder();
  if (CollectionUtils.isNotEmpty(values) && values.size() > 1)   criterion.append(CmsConstants.LEFT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE);
  criterion.append(CmsConstants.EMPTY_SPACE);
  if (operator == null)   operator=QueryOperator.EQUALS;
  if (QueryOperator.IS_NULL == operator) {
    checkThatPropertyPathRefersToSimpleProperty();
    criterion.append(XPathUtils.createNullCriterion(property,propertyIsSimple));
  }
 else   if (QueryOperator.IS_NOT_NULL == operator) {
    checkThatPropertyPathRefersToSimpleProperty();
    criterion.append(XPathUtils.createNotNullCriterion(property,propertyIsSimple));
  }
 else   if (CollectionUtils.isEmpty(values)) {
    checkThatPropertyPathRefersToSimpleProperty();
    if (operator == QueryOperator.EQUALS)     criterion.append(XPathUtils.createNullCriterion(property,propertyIsSimple));
 else     if (operator == QueryOperator.NOT_EQUALS)     criterion.append(XPathUtils.createNotNullCriterion(property,propertyIsSimple));
 else     return ""String_Node_Str"";
  }
 else {
    String propertyPath=property;
    if (QueryOperator.EQUALS == operator || QueryOperator.NOT_EQUALS == operator || QueryOperator.LIKE == operator) {
      if (CaseMatching.LOWER_CASE == caseMatching) {
        propertyPath=CmsConstants.FN_LOWER_CASE + CmsConstants.LEFT_PARENTHESIS + property+ CmsConstants.RIGHT_PARENTHESIS;
      }
 else       if (CaseMatching.UPPER_CASE == caseMatching) {
        propertyPath=CmsConstants.FN_UPPER_CASE + CmsConstants.LEFT_PARENTHESIS + property+ CmsConstants.RIGHT_PARENTHESIS;
      }
    }
    if (internalCondition == null)     internalCondition=Condition.AND;
    performSpecialOperationsInCaseOfContainsOperator();
    for (    Object value : values) {
      if (value instanceof String) {
        value=transformValueIfCaseMatchingIsEnabled(value);
        value=checkIfValueIsAReferenceAndLoadReferenceId((String)value);
        value=checkIfPropertyIsOfTypeLongIntegerOrDoubleAndConvertValueAccordingly(propertyPath,(String)value);
      }
      criterion.append(CmsConstants.EMPTY_SPACE + XPathUtils.createObjectCriteria(propertyPath,operator,value,propertyIsSimple,caseMatching,numberOfNodeLevelsToSearchInTheModelHierarchy) + CmsConstants.EMPTY_SPACE+ internalCondition.toString().toLowerCase());
    }
    criterion.replace(criterion.length() - internalCondition.toString().length(),criterion.length(),""String_Node_Str"");
  }
  criterion.append(CmsConstants.EMPTY_SPACE);
  if (CollectionUtils.isNotEmpty(values) && values.size() > 1)   criterion.append(CmsConstants.RIGHT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE);
  return criterion.toString();
}"
44664,"private static String getOrderByProperty(String property,Order order){
  if (order == null)   order=Order.ascending;
  String propertyXPath=XPathUtils.attributeNotNullCriteria(property);
switch (order) {
case ascending:
case descending:
    boolean propertyNameIsJcrScore=property != null && (StringUtils.equals(property.replaceFirst(CmsConstants.AT_CHAR,""String_Node_Str""),JcrBuiltInItem.JcrScore.getJcrName()));
  if (propertyNameIsJcrScore) {
    return jcrScoreOrderBy(propertyXPath,order);
  }
return propertyXPath + CmsConstants.EMPTY_SPACE + order.toString();
default :
return ""String_Node_Str"";
}
}","private static String getOrderByProperty(String property,Order order){
  if (order == null)   order=Order.ascending;
  String propertyXPath=XPathUtils.generateJcrPathForPropertyPath(property,true);
switch (order) {
case ascending:
case descending:
    boolean propertyNameIsJcrScore=property != null && (StringUtils.equals(property.replaceFirst(CmsConstants.AT_CHAR,""String_Node_Str""),JcrBuiltInItem.JcrScore.getJcrName()));
  if (propertyNameIsJcrScore) {
    return jcrScoreOrderBy(propertyXPath,order);
  }
return propertyXPath + CmsConstants.EMPTY_SPACE + order.toString();
default :
return ""String_Node_Str"";
}
}"
44665,"public void generateOrderBy(){
  orderByClause=CmsConstants.EMPTY_SPACE + CmsConstants.ORDER_BY + CmsConstants.EMPTY_SPACE;
  if (MapUtils.isEmpty(orderProperties)) {
    columnProjectionInXPath=""String_Node_Str"";
    orderByClause=""String_Node_Str"";
    numberOfColumnsParticipatingInProjection=0;
  }
 else {
    boolean orderByStart=true;
    boolean selectedColumnsStart=true;
    for (    Entry<String,Order> propertyEntry : orderProperties.entrySet()) {
      final String property=propertyEntry.getKey();
      final Order order=propertyEntry.getValue();
      if (StringUtils.isNotBlank(property) && order != null) {
        String propertyXPathRepresentation=XPathUtils.attributeNotNullCriteria(property);
        String valueToBePlacedInColumnProjection=null;
        String valueToBePlacedInOrderByClause=null;
        if (propertyXPathRepresentation.startsWith(CmsConstants.AT_CHAR)) {
          valueToBePlacedInColumnProjection=""String_Node_Str"";
          valueToBePlacedInOrderByClause=propertyXPathRepresentation;
        }
 else {
          valueToBePlacedInColumnProjection=StringUtils.substringBeforeLast(propertyXPathRepresentation,CmsConstants.FORWARD_SLASH);
          valueToBePlacedInOrderByClause=StringUtils.substringAfterLast(propertyXPathRepresentation,CmsConstants.FORWARD_SLASH);
          if (StringUtils.isBlank(valueToBePlacedInOrderByClause)) {
            valueToBePlacedInOrderByClause=propertyXPathRepresentation;
          }
        }
        orderByClause=orderByClause.concat((orderByStart ? ""String_Node_Str"" : CmsConstants.COMMA) + getOrderByProperty(valueToBePlacedInOrderByClause,order));
        if (orderByStart) {
          orderByStart=false;
        }
        if (propertyEntry.getValue() == Order.ascending || propertyEntry.getValue() == Order.descending) {
          if (isNotJcrFunction(property) && StringUtils.isNotBlank(valueToBePlacedInColumnProjection)) {
            numberOfColumnsParticipatingInProjection++;
            columnProjectionInXPath=columnProjectionInXPath.concat((selectedColumnsStart ? CmsConstants.LEFT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE : ""String_Node_Str"") + CmsConstants.EMPTY_SPACE + valueToBePlacedInColumnProjection);
            if (selectedColumnsStart) {
              selectedColumnsStart=false;
            }
          }
        }
      }
    }
    if (StringUtils.isNotBlank(columnProjectionInXPath))     columnProjectionInXPath=CmsConstants.FORWARD_SLASH + columnProjectionInXPath + CmsConstants.RIGHT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE;
    if (astroboaEngineWillOrderResults()) {
      columnProjectionInXPath=""String_Node_Str"";
      orderByClause=""String_Node_Str"";
    }
  }
}","public void generateOrderBy(){
  orderByClause=CmsConstants.EMPTY_SPACE + CmsConstants.ORDER_BY + CmsConstants.EMPTY_SPACE;
  if (MapUtils.isEmpty(orderProperties)) {
    columnProjectionInXPath=""String_Node_Str"";
    orderByClause=""String_Node_Str"";
    numberOfColumnsParticipatingInProjection=0;
  }
 else {
    boolean orderByStart=true;
    boolean selectedColumnsStart=true;
    for (    Entry<String,Order> propertyEntry : orderProperties.entrySet()) {
      final String property=propertyEntry.getKey();
      final Order order=propertyEntry.getValue();
      if (StringUtils.isNotBlank(property) && order != null) {
        String propertyXPathRepresentation=XPathUtils.generateJcrPathForPropertyPath(property,true);
        String valueToBePlacedInColumnProjection=null;
        String valueToBePlacedInOrderByClause=null;
        if (propertyXPathRepresentation.startsWith(CmsConstants.AT_CHAR)) {
          valueToBePlacedInColumnProjection=""String_Node_Str"";
          valueToBePlacedInOrderByClause=propertyXPathRepresentation;
        }
 else {
          valueToBePlacedInColumnProjection=StringUtils.substringBeforeLast(propertyXPathRepresentation,CmsConstants.FORWARD_SLASH);
          valueToBePlacedInOrderByClause=StringUtils.substringAfterLast(propertyXPathRepresentation,CmsConstants.FORWARD_SLASH);
          if (StringUtils.isBlank(valueToBePlacedInOrderByClause)) {
            valueToBePlacedInOrderByClause=propertyXPathRepresentation;
          }
        }
        orderByClause=orderByClause.concat((orderByStart ? ""String_Node_Str"" : CmsConstants.COMMA) + getOrderByProperty(valueToBePlacedInOrderByClause,order));
        if (orderByStart) {
          orderByStart=false;
        }
        if (propertyEntry.getValue() == Order.ascending || propertyEntry.getValue() == Order.descending) {
          if (isNotJcrFunction(property) && StringUtils.isNotBlank(valueToBePlacedInColumnProjection)) {
            numberOfColumnsParticipatingInProjection++;
            columnProjectionInXPath=columnProjectionInXPath.concat((selectedColumnsStart ? CmsConstants.LEFT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE : ""String_Node_Str"") + CmsConstants.EMPTY_SPACE + valueToBePlacedInColumnProjection);
            if (selectedColumnsStart) {
              selectedColumnsStart=false;
            }
          }
        }
      }
    }
    if (StringUtils.isNotBlank(columnProjectionInXPath))     columnProjectionInXPath=CmsConstants.FORWARD_SLASH + columnProjectionInXPath + CmsConstants.RIGHT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE;
    if (astroboaEngineWillOrderResults()) {
      columnProjectionInXPath=""String_Node_Str"";
      orderByClause=""String_Node_Str"";
    }
  }
}"
44666,"public static String createStringCriteria(String property,QueryOperator operator,String value){
  value=doubleQuotePattern.matcher(value).replaceAll(""String_Node_Str"");
  value=singleQuotePattern.matcher(value).replaceAll(""String_Node_Str"");
  return createAttributeCriteria(property,operator,""String_Node_Str"" + value + ""String_Node_Str"");
}","public static String createStringCriteria(String property,QueryOperator operator,String value){
  value=doubleQuotePattern.matcher(value).replaceAll(""String_Node_Str"");
  value=singleQuotePattern.matcher(value).replaceAll(""String_Node_Str"");
  return createAttributeCriteria(property,operator,""String_Node_Str"" + value + ""String_Node_Str"",true);
}"
44667,"public static String createDateCriteria(String property,QueryOperator operator,Calendar calendar){
  return createAttributeCriteria(property,operator,""String_Node_Str"" + formatForQuery(calendar) + ""String_Node_Str"");
}","public static String createDateCriteria(String property,QueryOperator operator,Calendar calendar){
  return createAttributeCriteria(property,operator,""String_Node_Str"" + formatForQuery(calendar) + ""String_Node_Str"",true);
}"
44668,"public static String createAttributeCriteria(String property,QueryOperator operator,String value){
  return attributeNotNullCriteria(property) + CmsConstants.EMPTY_SPACE + operator.getOp()+ CmsConstants.EMPTY_SPACE+ value;
}","public static String createAttributeCriteria(String property,QueryOperator operator,String value,boolean lastPropertyInPathRepresentsASimpleProperty){
  return generateJcrPathForPropertyPath(property,lastPropertyInPathRepresentsASimpleProperty) + CmsConstants.EMPTY_SPACE + operator.getOp()+ CmsConstants.EMPTY_SPACE+ value;
}"
44669,"private static String createBooleanCriteria(String property,QueryOperator operator,Boolean booleanValue){
  return createAttributeCriteria(property,operator,""String_Node_Str"" + booleanValue.toString() + ""String_Node_Str"");
}","private static String createBooleanCriteria(String property,QueryOperator operator,Boolean booleanValue){
  return createAttributeCriteria(property,operator,""String_Node_Str"" + booleanValue.toString() + ""String_Node_Str"",true);
}"
44670,"private static String generateJcrPathForPropertyPath(String propertyPath,boolean lastPropertyInPathRepresentsASimpleProperty){
  if (StringUtils.isNotBlank(propertyPath)) {
    String functionName=getFunctionNameFromProperty(propertyPath);
    String tempPropertyPath=propertyPath;
    if (StringUtils.isNotBlank(functionName)) {
      tempPropertyPath=StringUtils.substringBetween(propertyPath,functionName + CmsConstants.LEFT_PARENTHESIS,CmsConstants.RIGHT_PARENTHESIS);
    }
    if (CmsConstants.ANY_NAME.equals(tempPropertyPath.trim())) {
      return attachFunctionNameToProperty(functionName,tempPropertyPath);
    }
    if (tempPropertyPath.contains(CmsConstants.PERIOD_DELIM)) {
      tempPropertyPath=StringUtils.replace(tempPropertyPath,CmsConstants.PERIOD_DELIM,CmsConstants.FORWARD_SLASH);
    }
    if (!lastPropertyInPathRepresentsASimpleProperty) {
      return attachFunctionNameToProperty(functionName,ISO9075.encodePath(tempPropertyPath));
    }
    if (!tempPropertyPath.contains(CmsConstants.AT_CHAR)) {
      tempPropertyPath=ISO9075.encodePath(tempPropertyPath);
      if (tempPropertyPath.contains(CmsConstants.FORWARD_SLASH)) {
        tempPropertyPath=CmsUtils.replaceLast(CmsConstants.FORWARD_SLASH,CmsConstants.FORWARD_SLASH + CmsConstants.AT_CHAR,tempPropertyPath);
      }
 else       tempPropertyPath=CmsConstants.AT_CHAR + tempPropertyPath;
    }
    return attachFunctionNameToProperty(functionName,tempPropertyPath);
  }
  return ""String_Node_Str"";
}","public static String generateJcrPathForPropertyPath(String propertyPath,boolean lastPropertyInPathRepresentsASimpleProperty){
  if (StringUtils.isNotBlank(propertyPath)) {
    String functionName=getFunctionNameFromProperty(propertyPath);
    String tempPropertyPath=propertyPath;
    if (StringUtils.isNotBlank(functionName)) {
      tempPropertyPath=StringUtils.substringBetween(propertyPath,functionName + CmsConstants.LEFT_PARENTHESIS,CmsConstants.RIGHT_PARENTHESIS);
    }
    if (CmsConstants.ANY_NAME.equals(tempPropertyPath.trim())) {
      return attachFunctionNameToProperty(functionName,tempPropertyPath);
    }
    if (tempPropertyPath.contains(CmsConstants.PERIOD_DELIM)) {
      tempPropertyPath=StringUtils.replace(tempPropertyPath,CmsConstants.PERIOD_DELIM,CmsConstants.FORWARD_SLASH);
    }
    if (!lastPropertyInPathRepresentsASimpleProperty) {
      return attachFunctionNameToProperty(functionName,ISO9075.encodePath(tempPropertyPath));
    }
    if (!tempPropertyPath.contains(CmsConstants.AT_CHAR)) {
      tempPropertyPath=ISO9075.encodePath(tempPropertyPath);
      if (tempPropertyPath.contains(CmsConstants.FORWARD_SLASH)) {
        tempPropertyPath=CmsUtils.replaceLast(CmsConstants.FORWARD_SLASH,CmsConstants.FORWARD_SLASH + CmsConstants.AT_CHAR,tempPropertyPath);
      }
 else       tempPropertyPath=CmsConstants.AT_CHAR + tempPropertyPath;
    }
    return attachFunctionNameToProperty(functionName,tempPropertyPath);
  }
  return ""String_Node_Str"";
}"
44671,"public static String createObjectCriteria(String property,QueryOperator operator,Object value,boolean propertyIsASimpleProperty,CaseMatching caseMatching,int numberOfNodeLevelsToSearchInTheModelHierarchy){
  if (value == null || QueryOperator.IS_NULL == operator)   return attributeNullCriteria(property);
  if (QueryOperator.CONTAINS == operator)   return addContainsCriteria(property,value.toString(),propertyIsASimpleProperty,numberOfNodeLevelsToSearchInTheModelHierarchy);
  if (QueryOperator.LIKE == operator)   return addLikeCriteria(property,value.toString());
  if (QueryOperator.IS_NOT_NULL == operator)   return attributeNotNullCriteria(property);
  if (value instanceof String) {
    if (caseMatching != null) {
      if (CaseMatching.LOWER_CASE == caseMatching) {
        value=((String)value).toLowerCase();
      }
 else       if (CaseMatching.UPPER_CASE == caseMatching) {
        value=((String)value).toUpperCase();
      }
    }
    return createStringCriteria(property,operator,(String)value);
  }
  if (value instanceof Calendar)   return createDateCriteria(property,operator,(Calendar)value);
  if (value instanceof Date)   return createDateCriteria(property,operator,DateUtils.toCalendar((Date)value));
  if (value instanceof Long)   return createLongCriteria(property,operator,(Long)value);
  if (value instanceof Boolean)   return createBooleanCriteria(property,operator,(Boolean)value);
  if (value instanceof Double)   return createDoubleCriteria(property,operator,(Double)value);
  return createStringCriteria(property,operator,value.toString());
}","public static String createObjectCriteria(String property,QueryOperator operator,Object value,boolean propertyIsASimpleProperty,CaseMatching caseMatching,int numberOfNodeLevelsToSearchInTheModelHierarchy){
  if (value == null || QueryOperator.IS_NULL == operator)   return createNullCriterion(property,propertyIsASimpleProperty);
  if (QueryOperator.CONTAINS == operator)   return addContainsCriteria(property,value.toString(),propertyIsASimpleProperty,numberOfNodeLevelsToSearchInTheModelHierarchy);
  if (QueryOperator.LIKE == operator)   return addLikeCriteria(property,value.toString());
  if (QueryOperator.IS_NOT_NULL == operator)   return createNotNullCriterion(property,propertyIsASimpleProperty);
  if (value instanceof String) {
    if (caseMatching != null) {
      if (CaseMatching.LOWER_CASE == caseMatching) {
        value=((String)value).toLowerCase();
      }
 else       if (CaseMatching.UPPER_CASE == caseMatching) {
        value=((String)value).toUpperCase();
      }
    }
    return createStringCriteria(property,operator,(String)value);
  }
  if (value instanceof Calendar)   return createDateCriteria(property,operator,(Calendar)value);
  if (value instanceof Date)   return createDateCriteria(property,operator,DateUtils.toCalendar((Date)value));
  if (value instanceof Long)   return createLongCriteria(property,operator,(Long)value);
  if (value instanceof Boolean)   return createBooleanCriteria(property,operator,(Boolean)value);
  if (value instanceof Double)   return createDoubleCriteria(property,operator,(Double)value);
  return createStringCriteria(property,operator,value.toString());
}"
44672,"public static String addLikeCriteria(String property,String textToFind){
  String attributeName=generateJcrPathForSimpleProperty(property);
  if (StringUtils.isBlank(attributeName))   attributeName=CmsConstants.PERIOD_DELIM;
  return CmsConstants.EMPTY_SPACE + JcrBuiltInItem.JcrLike.getJcrName() + CmsConstants.LEFT_PARENTHESIS+ attributeName+ CmsConstants.COMMA+ ""String_Node_Str""+ textToFind+ ""String_Node_Str""+ CmsConstants.RIGHT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE;
}","public static String addLikeCriteria(String property,String textToFind){
  String attributeName=generateJcrPathForPropertyPath(property,true);
  if (StringUtils.isBlank(attributeName))   attributeName=CmsConstants.PERIOD_DELIM;
  return CmsConstants.EMPTY_SPACE + JcrBuiltInItem.JcrLike.getJcrName() + CmsConstants.LEFT_PARENTHESIS+ attributeName+ CmsConstants.COMMA+ ""String_Node_Str""+ textToFind+ ""String_Node_Str""+ CmsConstants.RIGHT_PARENTHESIS_WITH_LEADING_AND_TRAILING_SPACE;
}"
44673,"public static String createLongCriteria(String property,QueryOperator operator,Long longValue){
  return createAttributeCriteria(property,operator,longValue.toString());
}","public static String createLongCriteria(String property,QueryOperator operator,Long longValue){
  return createAttributeCriteria(property,operator,longValue.toString(),true);
}"
44674,"private static String createDoubleCriteria(String property,QueryOperator operator,Double doubleValue){
  return createAttributeCriteria(property,operator,doubleValue.toString());
}","private static String createDoubleCriteria(String property,QueryOperator operator,Double doubleValue){
  return createAttributeCriteria(property,operator,doubleValue.toString(),true);
}"
44675,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){
  listener.getLogger().println(""String_Node_Str"");
  PrintStream logger=listener.getLogger();
  FilePath metricFile=new FilePath(build.getWorkspace(),outputFilePath);
  try {
    if (!metricFile.exists()) {
      listener.getLogger().println(String.format(""String_Node_Str"",outputFilePath));
      build.setResult(Result.FAILURE);
      return false;
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  InterruptedException ie) {
    ie.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  Throwable t) {
    t.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  PmccabeFileParser parser=new PmccabeFileParser(metricFile);
  try {
    PmccabeReport report=parser.parse();
    build.addAction(new PmccabeAction(build,report));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  listener.getLogger().println(""String_Node_Str"");
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){
  listener.getLogger().println(""String_Node_Str"");
  FilePath workspace=build.getWorkspace();
  PrintStream logger=listener.getLogger();
  FilePath metricFile=new FilePath(build.getWorkspace(),outputFilePath);
  try {
    if (!metricFile.exists()) {
      listener.getLogger().println(String.format(""String_Node_Str"",outputFilePath));
      build.setResult(Result.FAILURE);
      return false;
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  InterruptedException ie) {
    ie.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  Throwable t) {
    t.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  PmccabeFileParser parser=new PmccabeFileParser(metricFile);
  try {
    PmccabeReport report=workspace.act(parser);
    build.addAction(new PmccabeAction(build,report));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  InterruptedException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  listener.getLogger().println(""String_Node_Str"");
  return true;
}"
44676,"private void loadeggprices(){
  File folder=new File(""String_Node_Str"");
  File configFile=new File(""String_Node_Str"");
  if (configFile.exists()) {
    try {
      mobprice.clear();
      Properties theprices=new Properties();
      theprices.load(new FileInputStream(configFile));
      Iterator<Entry<Object,Object>> iprices=theprices.entrySet().iterator();
      while (iprices.hasNext()) {
        Entry<Object,Object> price=iprices.next();
        try {
          mobeggprice.put(price.getKey().toString().toLowerCase(),new Double(price.getValue().toString()));
        }
 catch (        NumberFormatException ex) {
          System.out.println(""String_Node_Str"" + price.getKey().toString() + ""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
    }
    if (mobprice.size() < CreatureTypes.values().length) {
      System.out.println(""String_Node_Str"");
      createeggprices();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    folder.mkdir();
    System.out.println(""String_Node_Str"");
    createprices();
  }
}","private void loadeggprices(){
  File folder=new File(""String_Node_Str"");
  File configFile=new File(""String_Node_Str"");
  if (configFile.exists()) {
    try {
      mobprice.clear();
      Properties theprices=new Properties();
      theprices.load(new FileInputStream(configFile));
      Iterator<Entry<Object,Object>> iprices=theprices.entrySet().iterator();
      while (iprices.hasNext()) {
        Entry<Object,Object> price=iprices.next();
        try {
          mobeggprice.put(price.getKey().toString().toLowerCase(),new Double(price.getValue().toString()));
        }
 catch (        NumberFormatException ex) {
          System.out.println(""String_Node_Str"" + price.getKey().toString() + ""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
    }
    if (mobprice.size() < CreatureTypes.values().length) {
      System.out.println(""String_Node_Str"");
      createeggprices();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    folder.mkdir();
    System.out.println(""String_Node_Str"");
    createeggprices();
  }
}"
44677,"@SuppressWarnings(""String_Node_Str"") public void loadDisabledSpawners(){
  try {
    ObjectInputStream out=new ObjectInputStream(new FileInputStream(new File(blocksavefile)));
    disabledspawnerlocs=(ConcurrentHashMap<String,Integer>)out.readObject();
    Set<String> keys=disabledspawnerlocs.keySet();
    for (    String key : keys) {
      try {
        int mobtype=disabledspawnerlocs.get(key).intValue();
        EntityType type=EntityType.fromId(mobtype);
        String[] location=key.split(""String_Node_Str"");
        String destworld=location[3];
        int x=Integer.parseInt(location[0]);
        int y=Integer.parseInt(location[1]);
        int z=Integer.parseInt(location[2]);
        int startx=x - 4;
        int endx=startx + 8;
        int starty=y - 1;
        int endy=starty + 8;
        int startz=z - 4;
        int endz=startz + 8;
        for (; startx < endx; startx++) {
          for (; starty < endy; starty++) {
            for (; startz < endz; startz++) {
              String slocation=startx + ""String_Node_Str"" + starty+ ""String_Node_Str""+ startz+ ""String_Node_Str""+ destworld;
              if (disabledspawners.containsKey(location)) {
                disabledspawners.get(location).add(type);
              }
 else {
                LinkedList<EntityType> tlist=new LinkedList<EntityType>();
                tlist.add(type);
                disabledspawners.put(slocation,tlist);
              }
            }
          }
        }
      }
 catch (      Exception ex) {
      }
    }
  }
 catch (  Exception e) {
  }
}","@SuppressWarnings(""String_Node_Str"") public void loadDisabledSpawners(){
  try {
    ObjectInputStream out=new ObjectInputStream(new FileInputStream(new File(blocksavefile)));
    disabledspawnerlocs=(ConcurrentHashMap<String,Integer>)out.readObject();
    Set<String> keys=disabledspawnerlocs.keySet();
    for (    String key : keys) {
      try {
        int mobtype=disabledspawnerlocs.get(key).intValue();
        EntityType type=EntityType.fromId(mobtype);
        String[] location=key.split(""String_Node_Str"");
        String destworld=location[3];
        int x=Integer.parseInt(location[0]);
        int y=Integer.parseInt(location[1]);
        int z=Integer.parseInt(location[2]);
        int startx=x - 4;
        int endx=startx + 8;
        int starty=y - 1;
        int endy=starty + 8;
        int startz=z - 4;
        int endz=startz + 8;
        for (int x1=startx; x1 < endx; x1++) {
          for (int y1=starty; y1 < endy; y1++) {
            for (int z1=startz; z1 < endz; z1++) {
              String slocation=x1 + ""String_Node_Str"" + y1+ ""String_Node_Str""+ z1+ ""String_Node_Str""+ destworld;
              if (disabledspawners.containsKey(slocation)) {
                disabledspawners.get(slocation).add(type);
              }
 else {
                LinkedList<EntityType> tlist=new LinkedList<EntityType>();
                tlist.add(type);
                disabledspawners.put(slocation,tlist);
              }
            }
          }
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
44678,"public void removeDisabledSpawner(Location spawner,EntityType mobname){
  int startx=spawner.getBlockX() - 4;
  int endx=startx + 8;
  int starty=spawner.getBlockY() - 1;
  int endy=starty + 8;
  int startz=spawner.getBlockZ() - 4;
  int endz=startz + 8;
  disabledspawnerlocs.remove(locationBuilder(spawner));
  for (; startx < endx; startx++) {
    for (; starty < endy; starty++) {
      for (; startz < endz; startz++) {
        String location=startx + ""String_Node_Str"" + starty+ ""String_Node_Str""+ startz+ ""String_Node_Str""+ spawner.getWorld().getName();
        if (disabledspawners.containsKey(location)) {
          disabledspawners.get(location).remove(mobname);
        }
      }
    }
  }
  saveDisabledSpawners();
}","public void removeDisabledSpawner(Location spawner,EntityType mobname){
  int startx=spawner.getBlockX() - 4;
  int endx=startx + 8;
  int starty=spawner.getBlockY() - 1;
  int endy=starty + 8;
  int startz=spawner.getBlockZ() - 4;
  int endz=startz + 8;
  disabledspawnerlocs.remove(locationBuilder(spawner));
  for (int x=startx; x < endx; x++) {
    for (int y=starty; y < endy; y++) {
      for (int z=startz; z < endz; z++) {
        String location=x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ spawner.getWorld().getName();
        if (disabledspawners.containsKey(location)) {
          disabledspawners.get(location).remove(mobname);
        }
      }
    }
  }
  saveDisabledSpawners();
}"
44679,"public void addDisabledSpawner(Location spawner,EntityType mobname){
  int startx=spawner.getBlockX() - 4;
  int endx=startx + 8;
  int starty=spawner.getBlockY() - 1;
  int endy=starty + 8;
  int startz=spawner.getBlockZ() - 4;
  int endz=startz + 8;
  disabledspawnerlocs.put(locationBuilder(spawner),new Integer(mobname.getTypeId()));
  for (; startx < endx; startx++) {
    for (; starty < endy; starty++) {
      for (; startz < endz; startz++) {
        String location=startx + ""String_Node_Str"" + starty+ ""String_Node_Str""+ startz+ ""String_Node_Str""+ spawner.getWorld().getName();
        if (disabledspawners.containsKey(location)) {
          disabledspawners.get(location).add(mobname);
        }
 else {
          LinkedList<EntityType> tlist=new LinkedList<EntityType>();
          tlist.add(mobname);
          disabledspawners.put(location,tlist);
        }
      }
    }
  }
  saveDisabledSpawners();
}","public void addDisabledSpawner(Location spawner,EntityType mobname){
  int startx=spawner.getBlockX() - 4;
  int endx=startx + 8;
  int starty=spawner.getBlockY() - 1;
  int endy=starty + 8;
  int startz=spawner.getBlockZ() - 4;
  int endz=startz + 8;
  disabledspawnerlocs.put(locationBuilder(spawner),new Integer(mobname.getTypeId()));
  for (int x=startx; x < endx; x++) {
    for (int y=starty; y < endy; y++) {
      for (int z=startz; z < endz; z++) {
        String location=x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ spawner.getWorld().getName();
        if (disabledspawners.containsKey(location)) {
          disabledspawners.get(location).add(mobname);
        }
 else {
          LinkedList<EntityType> tlist=new LinkedList<EntityType>();
          tlist.add(mobname);
          disabledspawners.put(location,tlist);
        }
      }
    }
  }
  saveDisabledSpawners();
}"
44680,"@EventHandler(priority=EventPriority.MONITOR) public void onBlockBreak(BlockBreakEvent event){
  event.getPlayer().getItemInHand();
  if (!event.isCancelled() && event.getBlock().getType() == Material.MOB_SPAWNER) {
    ItemStack is=event.getPlayer().getItemInHand();
    boolean nodrops=false;
    if (plugin.disabledspawnerlocs.containsKey(plugin.locationBuilder(event.getBlock().getLocation()))) {
      plugin.removeDisabledSpawner(event.getBlock());
      nodrops=true;
    }
    if (plugin.needssilktouch && !itemHasSilkTouch(is)) {
      return;
    }
    try {
      CreatureSpawner theSpawner=(CreatureSpawner)event.getBlock().getState();
      String monster=theSpawner.getCreatureTypeName();
      if (plugin.hasPermissions(event.getPlayer(),""String_Node_Str"") || plugin.hasPermissions(event.getPlayer(),""String_Node_Str"")) {
        event.getPlayer().sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ monster.toLowerCase()+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
      }
      if (plugin.hasPermissions(event.getPlayer(),""String_Node_Str"")) {
        ItemStack mobstack=new ItemStack(Material.MOB_SPAWNER,1);
        event.getBlock().getWorld().dropItemNaturally(event.getBlock().getLocation(),mobstack);
      }
      if (!nodrops && stringmobs.containsKey(monster) && plugin.hasPermissions(event.getPlayer(),""String_Node_Str"" + monster.toLowerCase())) {
        ItemStack eggstack=new ItemStack(383,1,stringmobs.get(monster).shortValue());
        event.getBlock().getWorld().dropItemNaturally(event.getBlock().getLocation(),eggstack);
      }
    }
 catch (    Exception e) {
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onBlockBreak(BlockBreakEvent event){
  event.getPlayer().getItemInHand();
  if (!event.isCancelled() && event.getBlock().getType() == Material.MOB_SPAWNER) {
    ItemStack is=event.getPlayer().getItemInHand();
    boolean nodrops=false;
    if (plugin.disabledspawnerlocs.containsKey(plugin.locationBuilder(event.getBlock().getLocation()))) {
      plugin.removeDisabledSpawner(event.getBlock());
      nodrops=true;
    }
    if (plugin.needssilktouch && !itemHasSilkTouch(is)) {
      return;
    }
    try {
      CreatureSpawner theSpawner=(CreatureSpawner)event.getBlock().getState();
      String monster=intmobs.get(new Integer(theSpawner.getSpawnedType().getTypeId()));
      if (plugin.hasPermissions(event.getPlayer(),""String_Node_Str"") || plugin.hasPermissions(event.getPlayer(),""String_Node_Str"")) {
        if (nodrops) {
          event.getPlayer().sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
        }
 else {
          event.getPlayer().sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ monster.toLowerCase()+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
        }
      }
      if (plugin.hasPermissions(event.getPlayer(),""String_Node_Str"")) {
        ItemStack mobstack=new ItemStack(Material.MOB_SPAWNER,1);
        event.getBlock().getWorld().dropItemNaturally(event.getBlock().getLocation(),mobstack);
      }
      if (!nodrops && stringmobs.containsKey(monster) && plugin.hasPermissions(event.getPlayer(),""String_Node_Str"" + monster.toLowerCase())) {
        ItemStack eggstack=new ItemStack(383,1,theSpawner.getSpawnedType().getTypeId());
        event.getBlock().getWorld().dropItemNaturally(event.getBlock().getLocation(),eggstack);
      }
    }
 catch (    Exception e) {
    }
  }
}"
44681,"@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(PlayerInteractEvent event){
  if (!event.isCancelled()) {
    ItemStack is=event.getPlayer().getItemInHand();
    Player player=event.getPlayer();
    if (is.getTypeId() == 383 && event.getClickedBlock() != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getTypeId() == 52) {
      if (plugin.hasPermissions(player,""String_Node_Str"") && plugin.bl.intmobs.containsKey(new Integer(is.getDurability()))) {
        String type=plugin.bl.intmobs.get(new Integer(is.getDurability()));
        Block theSpawner=event.getClickedBlock();
        if (plugin.hasPermissions(player,""String_Node_Str"" + type.toLowerCase())) {
          if (plugin.useiconomy && plugin.getEggMobPrice(type) > 0) {
            if (!player.hasPermission(""String_Node_Str"")) {
              if (plugin.iConomy.getBalance(player.getName()) < plugin.getEggMobPrice(type)) {
                player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + plugin.iConomy.format(plugin.getEggMobPrice(type))+ ""String_Node_Str""+ ChatColor.RED+ type.toLowerCase()+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
                event.setCancelled(true);
                return;
              }
            }
          }
          if (plugin.setSpawner(theSpawner,type)) {
            player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ type.toLowerCase()+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
            if (player.getGameMode() == GameMode.SURVIVAL) {
              is.setAmount(is.getAmount() - 1);
            }
            if (plugin.useiconomy && plugin.getEggMobPrice(type) > 0) {
              if (!player.hasPermission(""String_Node_Str"")) {
                if (plugin.iConomy.getBalance(player.getName()) < plugin.getEggMobPrice(type)) {
                  plugin.iConomy.withdrawPlayer(player.getName(),plugin.getEggMobPrice(type));
                  player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + plugin.iConomy.format(plugin.getEggMobPrice(type))+ ""String_Node_Str"");
                }
              }
            }
          }
 else {
            player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + type.toLowerCase()+ ""String_Node_Str"");
          }
          event.setCancelled(true);
        }
 else {
          if (type != null && !plugin.hasPermissions(player,""String_Node_Str"" + type.toLowerCase())) {
            if (plugin.hasPermissions(player,""String_Node_Str"")) {
              player.sendMessage(plugin.eggthrowmessage);
            }
            event.setCancelled(true);
          }
 else           if (type == null && !plugin.hasPermissions(player,""String_Node_Str"")) {
            if (plugin.hasPermissions(player,""String_Node_Str"")) {
              player.sendMessage(plugin.eggthrowmessage);
            }
            event.setCancelled(true);
          }
        }
      }
    }
 else     if (is.getTypeId() == 383 && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
      String type=plugin.bl.intmobs.get(new Integer(is.getDurability()));
      if (type != null && !plugin.hasPermissions(player,""String_Node_Str"" + type.toLowerCase())) {
        if (plugin.hasPermissions(player,""String_Node_Str"")) {
          player.sendMessage(plugin.eggthrowmessage);
        }
        event.setCancelled(true);
      }
 else       if (type == null && !plugin.hasPermissions(player,""String_Node_Str"")) {
        event.setCancelled(true);
      }
    }
 else     if (plugin.usespout != null && is.getType().getId() == plugin.tool && event.getClickedBlock() != null && event.getClickedBlock().getTypeId() == 52) {
      SpoutPlayer splayer=SpoutManager.getPlayer(player);
      if (splayer.isSpoutCraftEnabled() && plugin.hasPermissions(player,""String_Node_Str"")) {
        CreatureSpawner theSpawner=(CreatureSpawner)event.getClickedBlock().getState();
        String monster=theSpawner.getCreatureTypeName().toLowerCase();
        splayer.getMainScreen().closePopup();
        plugin.ss.createMonsterGUI(""String_Node_Str"" + monster + ""String_Node_Str"",!plugin.hasPermissions(splayer,""String_Node_Str""),splayer);
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(PlayerInteractEvent event){
  if (!event.isCancelled()) {
    ItemStack is=event.getPlayer().getItemInHand();
    Player player=event.getPlayer();
    if (is.getTypeId() == 383 && event.getClickedBlock() != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getTypeId() == 52) {
      if (plugin.hasPermissions(player,""String_Node_Str"") && plugin.bl.intmobs.containsKey(new Integer(is.getDurability()))) {
        String type=plugin.bl.intmobs.get(new Integer(is.getDurability()));
        Block theSpawner=event.getClickedBlock();
        if (plugin.hasPermissions(player,""String_Node_Str"" + type.toLowerCase())) {
          if (plugin.useiconomy && plugin.getEggMobPrice(type) > 0) {
            if (!player.hasPermission(""String_Node_Str"")) {
              if (plugin.iConomy.getBalance(player.getName()) < plugin.getEggMobPrice(type)) {
                player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + plugin.iConomy.format(plugin.getEggMobPrice(type))+ ""String_Node_Str""+ ChatColor.RED+ type.toLowerCase()+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
                event.setCancelled(true);
                return;
              }
            }
          }
          if (plugin.setSpawner(theSpawner,type)) {
            player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ type.toLowerCase()+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
            if (player.getGameMode() == GameMode.SURVIVAL) {
              if (is.getAmount() == 1) {
                player.setItemInHand(new ItemStack(0));
              }
 else {
                is.setAmount(is.getAmount() - 1);
              }
            }
            if (plugin.useiconomy && plugin.getEggMobPrice(type) > 0) {
              if (!player.hasPermission(""String_Node_Str"")) {
                if (plugin.iConomy.getBalance(player.getName()) < plugin.getEggMobPrice(type)) {
                  plugin.iConomy.withdrawPlayer(player.getName(),plugin.getEggMobPrice(type));
                  player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + plugin.iConomy.format(plugin.getEggMobPrice(type))+ ""String_Node_Str"");
                }
              }
            }
          }
 else {
            player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + type.toLowerCase()+ ""String_Node_Str"");
          }
          event.setCancelled(true);
        }
 else {
          if (type != null && !plugin.hasPermissions(player,""String_Node_Str"" + type.toLowerCase())) {
            if (plugin.hasPermissions(player,""String_Node_Str"")) {
              player.sendMessage(plugin.eggthrowmessage);
            }
            event.setCancelled(true);
          }
 else           if (type == null && !plugin.hasPermissions(player,""String_Node_Str"")) {
            if (plugin.hasPermissions(player,""String_Node_Str"")) {
              player.sendMessage(plugin.eggthrowmessage);
            }
            event.setCancelled(true);
          }
        }
      }
    }
 else     if (is.getTypeId() == 383 && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
      String type=plugin.bl.intmobs.get(new Integer(is.getDurability()));
      if (type != null && !plugin.hasPermissions(player,""String_Node_Str"" + type.toLowerCase())) {
        if (plugin.hasPermissions(player,""String_Node_Str"")) {
          player.sendMessage(plugin.eggthrowmessage);
        }
        event.setCancelled(true);
      }
 else       if (type == null && !plugin.hasPermissions(player,""String_Node_Str"")) {
        event.setCancelled(true);
      }
    }
 else     if (plugin.usespout != null && is.getType().getId() == plugin.tool && event.getClickedBlock() != null && event.getClickedBlock().getTypeId() == 52) {
      SpoutPlayer splayer=SpoutManager.getPlayer(player);
      if (splayer.isSpoutCraftEnabled() && plugin.hasPermissions(player,""String_Node_Str"")) {
        CreatureSpawner theSpawner=(CreatureSpawner)event.getClickedBlock().getState();
        String monster=theSpawner.getCreatureTypeName().toLowerCase();
        splayer.getMainScreen().closePopup();
        plugin.ss.createMonsterGUI(""String_Node_Str"" + monster + ""String_Node_Str"",!plugin.hasPermissions(splayer,""String_Node_Str""),splayer);
      }
    }
  }
}"
44682,"public static void init(String dbmsName,String uri,String username,String password,int reloadDelay) throws Exception {
  if (init) {
    return;
  }
  System.out.println(""String_Node_Str"");
  try {
    dbms=Dbms.valueOf(dbmsName);
  }
 catch (  IllegalArgumentException e) {
    System.err.println(""String_Node_Str"");
    dbms=Dbms.SQLITE;
  }
  try {
    Class.forName(dbms.getDriver());
  }
 catch (  ClassNotFoundException e) {
    throw new Exception(""String_Node_Str"",e);
  }
  dbSource=dbms.getSource(username,password,uri);
  verifyAndCreateTables();
  dbConn=dbSource.getConnection();
  init=true;
  clearWorldCache();
}","public synchronized static void init(String dbmsName,String uri,String username,String password,int reloadDelay) throws Exception {
  if (init) {
    return;
  }
  System.out.println(""String_Node_Str"");
  try {
    dbms=Dbms.valueOf(dbmsName);
  }
 catch (  IllegalArgumentException e) {
    System.err.println(""String_Node_Str"");
    dbms=Dbms.SQLITE;
  }
  try {
    Class.forName(dbms.getDriver());
  }
 catch (  ClassNotFoundException e) {
    throw new Exception(""String_Node_Str"",e);
  }
  dbSource=dbms.getSource(username,password,uri);
  verifyAndCreateTables();
  dbConn=dbSource.getConnection();
  init=true;
  clearWorldCache();
}"
44683,"@Override public String getString(String name,String path){
  String data=null;
  int uid;
  try {
    uid=getId(name);
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return data;
  }
  List<Map<Integer,Object>> results=SqlStorage.runQuery(dataGetPool,new Object[]{uid,path},true,1,2);
  for (  Map<Integer,Object> row : results) {
    Object o=row.get(1);
    if (o instanceof String) {
      data=(String)o;
    }
  }
  return data;
}","@Override public String getString(String name,String path){
  String data=null;
  int uid;
  try {
    uid=getId(name);
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return data;
  }
  List<Map<Integer,Object>> results=SqlStorage.runQuery(dataGetPool,new Object[]{uid,path},true,1);
  for (  Map<Integer,Object> row : results) {
    Object o=row.get(1);
    if (o instanceof String) {
      data=(String)o;
    }
  }
  return data;
}"
44684,"/** 
 * This method prepares the environment for loading rdf and handling failures
 * @param _tripleFile the name a file containing the triples to be loaded into the Blueprints managed graph.
 * @param _subRefNodeName the reference node for this collection.
 * @param _context the object of the triple.
 * @see net.justtrade.rest.handlers.graph.ManagementIndexHelper#getCollectionRefVertex(String,IndexableGraph,boolean)
 */
public void injectRDF(String _tripleFile,String _subRefNodeName,RexsterResourceContext _context){
  final String sMETHOD=""String_Node_Str"";
  String tripleFile=_tripleFile.trim();
  if (tripleFile.startsWith(FILE_SEPARATOR))   tripleFile=tripleFile.substring(1);
  TransactionalGraph tranGraph=(TransactionalGraph)_context.getRexsterApplicationGraph().getGraph();
  try {
    logger.info(sMETHOD + ""String_Node_Str"" + _tripleFile+ ""String_Node_Str"");
    writeToGraphStore(_subRefNodeName,_tripleFile,tranGraph);
    logger.info(sMETHOD + ""String_Node_Str"" + _tripleFile+ ""String_Node_Str"");
  }
 catch (  MalformedURLException mfuex) {
    logger.error(sMETHOD + ""String_Node_Str"" + mfuex.getLocalizedMessage()+ ""String_Node_Str""+ mfuex.getStackTrace());
  }
catch (  Exception ex) {
    logger.error(sMETHOD + ""String_Node_Str"" + ex.getLocalizedMessage()+ ""String_Node_Str"");
  }
  RDF_Analyzer.analyzeModelData();
}","/** 
 * This method prepares the environment for loading rdf and handling failures
 * @param _tripleFile the name a file containing the triples to be loaded into the Blueprints managed graph.
 * @param _subRefNodeName the reference node for this collection.
 * @param _context the object of the triple.
 * @see net.justtrade.rest.handlers.graph.ManagementIndexHelper#getCollectionRefVertex(String,IndexableGraph,boolean)
 */
public void injectRDF(String _tripleFile,String _subRefNodeName,RexsterResourceContext _context){
  final String sMETHOD=""String_Node_Str"";
  String tripleFile=_tripleFile.trim();
  if (tripleFile.startsWith(FILE_SEPARATOR))   tripleFile=tripleFile.substring(1);
  TransactionalGraph tranGraph=(TransactionalGraph)_context.getRexsterApplicationGraph().getGraph();
  try {
    logger.info(sMETHOD + ""String_Node_Str"" + tripleFile+ ""String_Node_Str"");
    writeToGraphStore(_subRefNodeName,tripleFile,tranGraph);
    logger.info(sMETHOD + ""String_Node_Str"" + tripleFile+ ""String_Node_Str"");
  }
 catch (  MalformedURLException mfuex) {
    logger.error(sMETHOD + ""String_Node_Str"" + mfuex.getLocalizedMessage()+ ""String_Node_Str""+ mfuex.getStackTrace());
  }
catch (  Exception ex) {
    logger.error(sMETHOD + ""String_Node_Str"" + ex.getLocalizedMessage()+ ""String_Node_Str"");
  }
  RDF_Analyzer.analyzeModelData();
}"
44685,"/** 
 * @inheritDoc
 */
@Override public void execute() throws MojoExecutionException, MojoFailureException {
  AWSCredentialsProvider creds;
  if (StringUtils.isNotBlank(awsAccessKeyId) && StringUtils.isNotBlank(awsSecretKey)) {
    creds=new StaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId,awsSecretKey));
  }
 else   if (instanceProfileUsed) {
    creds=new InstanceProfileCredentialsProvider();
  }
 else   if (StringUtils.isNotBlank(server)) {
    Server s=settings.getServer(server);
    creds=new StaticCredentialsProvider(new BasicAWSCredentials(s.getUsername(),s.getPassword()));
  }
 else {
    throw new MojoFailureException(""String_Node_Str"");
  }
  AmazonS3 s3=new AmazonS3Client(creds);
  FileSetManager fileSetManager=new FileSetManager(getLog());
  for (  FileSet fs : fileSets) {
    String destPath=StringUtils.trimToEmpty(fs.getOutputDirectory());
    if (StringUtils.isNotBlank(destPath) && !destPath.endsWith(""String_Node_Str"")) {
      destPath+=""String_Node_Str"";
    }
    for (    String file : fileSetManager.getIncludedFiles(fs)) {
      File source=new File(fs.getDirectory(),file);
      getLog().info(""String_Node_Str"" + source + ""String_Node_Str""+ bucket+ ""String_Node_Str""+ destPath+ file);
      s3.putObject(bucket,destPath + file,source);
    }
  }
}","/** 
 * @inheritDoc
 */
@Override public void execute() throws MojoExecutionException, MojoFailureException {
  AWSCredentialsProvider creds;
  if (StringUtils.isNotBlank(awsAccessKeyId) && StringUtils.isNotBlank(awsSecretKey)) {
    creds=new StaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId,awsSecretKey));
  }
 else   if (instanceProfileUsed) {
    creds=new InstanceProfileCredentialsProvider();
  }
 else   if (StringUtils.isNotBlank(server)) {
    Server s=settings.getServer(server);
    if (s == null || StringUtils.isBlank(s.getUsername()) || StringUtils.isBlank(s.getPassword())) {
      throw new MojoFailureException(""String_Node_Str"" + server + ""String_Node_Str"");
    }
    creds=new StaticCredentialsProvider(new BasicAWSCredentials(s.getUsername(),s.getPassword()));
  }
 else {
    throw new MojoFailureException(""String_Node_Str"");
  }
  AmazonS3 s3=new AmazonS3Client(creds);
  FileSetManager fileSetManager=new FileSetManager(getLog());
  for (  FileSet fs : fileSets) {
    String destPath=StringUtils.trimToEmpty(fs.getOutputDirectory());
    if (StringUtils.isNotBlank(destPath) && !destPath.endsWith(""String_Node_Str"")) {
      destPath+=""String_Node_Str"";
    }
    for (    String file : fileSetManager.getIncludedFiles(fs)) {
      File source=new File(fs.getDirectory(),file);
      getLog().info(""String_Node_Str"" + source + ""String_Node_Str""+ bucket+ ""String_Node_Str""+ destPath+ file);
      s3.putObject(bucket,destPath + file,source);
    }
  }
}"
44686,"/** 
 * @param seq
 * @return
 */
public static GeneSequence linearPrimerDesignAlgo(GeneSequence seq){
  int[] primerIndices=new int[4];
  ArrayList<Integer> internalChanges=seq.changes;
  int primerDesignCount;
  int pivotChange;
  int currentChangeIndex;
  boolean tooFar;
  System.out.println(""String_Node_Str"" + internalChanges.size());
  for (int i=0; i < internalChanges.size(); i++) {
    if (internalChanges.get(i) != -1) {
      for (int j=0; j < 4; j++) {
        primerIndices[j]=-1;
      }
      tooFar=false;
      pivotChange=internalChanges.get(i);
      primerDesignCount=0;
      primerIndices[primerDesignCount]=pivotChange;
      System.out.println(""String_Node_Str"" + pivotChange);
      if (i < internalChanges.size() - 1) {
        currentChangeIndex=i + 1;
        while (tooFar == false && currentChangeIndex < internalChanges.size()) {
          if (internalChanges.get(currentChangeIndex) - pivotChange <= 25 && primerDesignCount < 3) {
            primerDesignCount++;
            primerIndices[primerDesignCount]=internalChanges.get(currentChangeIndex);
            currentChangeIndex++;
            System.out.println(""String_Node_Str"" + primerIndices[primerDesignCount]);
          }
 else {
            tooFar=true;
          }
        }
      }
      Primer tempPrimer;
      for (int verifyIndex=primerDesignCount; verifyIndex >= 0; verifyIndex--) {
        tempPrimer=fakeDesignPrimer(primerIndices,primerDesignCount + 1);
        if (tempPrimer != null) {
          seq.addPrimer(tempPrimer);
          for (int clearIndex=i; clearIndex < i + verifyIndex + 1; clearIndex++) {
            internalChanges.set(clearIndex,-1);
          }
          break;
        }
 else {
          if (verifyIndex == 0) {
          }
          primerIndices[verifyIndex]=-1;
        }
      }
    }
  }
  seq.changes=internalChanges;
  for (int i=0; i < seq.primers.size(); i++) {
    System.out.println(seq.primers.get(i).getTopSequence());
  }
  String remainingChanges=""String_Node_Str"";
  for (int i=0; i < seq.changes.size(); i++) {
    remainingChanges+=seq.changes.get(i);
    remainingChanges+=""String_Node_Str"";
  }
  System.out.println(remainingChanges);
  return seq;
}","/** 
 * @param seq
 * @return
 */
public static GeneSequence linearPrimerDesignAlgo(GeneSequence seq){
  int[] primerIndices=new int[4];
  ArrayList<Integer> internalChanges=seq.changes;
  int primerDesignCount;
  int pivotChange;
  int currentChangeIndex;
  boolean tooFar;
  System.out.println(""String_Node_Str"" + internalChanges.size());
  for (int i=0; i < internalChanges.size(); i++) {
    if (internalChanges.get(i) != -1) {
      for (int j=0; j < 4; j++) {
        primerIndices[j]=-1;
      }
      tooFar=false;
      pivotChange=internalChanges.get(i);
      primerDesignCount=0;
      primerIndices[primerDesignCount]=pivotChange;
      if (i < internalChanges.size() - 1) {
        currentChangeIndex=i + 1;
        while (tooFar == false && currentChangeIndex < internalChanges.size()) {
          if (internalChanges.get(currentChangeIndex) - pivotChange <= 25 && primerDesignCount < 3) {
            primerDesignCount++;
            primerIndices[primerDesignCount]=internalChanges.get(currentChangeIndex);
            currentChangeIndex++;
          }
 else {
            tooFar=true;
          }
        }
      }
      Primer tempPrimer;
      for (int verifyIndex=primerDesignCount; verifyIndex >= 0; verifyIndex--) {
        tempPrimer=fakeDesignPrimer(primerIndices,primerDesignCount + 1);
        if (tempPrimer != null) {
          seq.addPrimer(tempPrimer);
          for (int clearIndex=i; clearIndex < i + verifyIndex + 1; clearIndex++) {
            internalChanges.set(clearIndex,-1);
          }
          break;
        }
 else {
          if (verifyIndex == 0) {
          }
          primerIndices[verifyIndex]=-1;
        }
      }
    }
  }
  seq.changes=internalChanges;
  for (int i=0; i < seq.primers.size(); i++) {
    System.out.println(seq.primers.get(i).getTopSequence());
  }
  String remainingChanges=""String_Node_Str"";
  for (int i=0; i < seq.changes.size(); i++) {
    remainingChanges+=seq.changes.get(i);
    remainingChanges+=""String_Node_Str"";
  }
  System.out.println(remainingChanges);
  return seq;
}"
44687,"/** 
 * Goes through the sequence codon per codon and optimizes based on the organism's codon table. Highest frequency codon should be put in at least in this algorithm
 * @param sequence
 * @param codonTable
 * @return
 */
public static String seqOptimizationAlgorithimSimple(String sequence,OrgCodonTable codonTable){
  String currentCodon;
  String optimalCodon;
  String modifiedSequence=""String_Node_Str"";
  AminoAcid currentAA;
  for (int seqIndex=0; seqIndex < sequence.length(); seqIndex+=3) {
    currentCodon=sequence.substring(seqIndex,seqIndex + 3);
    currentAA=codonTable.aminoAcids.get(UtilityMethods.findAminoAcidIndex(currentCodon));
    optimalCodon=currentAA.getDesiredCodon(0).sequence;
    modifiedSequence+=optimalCodon;
  }
  return modifiedSequence;
}","/** 
 * Goes through the sequence codon per codon and optimizes based on the organism's codon table. Highest frequency codon should be put in at least in this algorithm
 * @param sequence
 * @param codonTable
 * @return
 */
public static String seqOptimizationAlgorithimSimple(String sequence,OrgCodonTable codonTable){
  String currentCodon;
  String optimalCodon;
  String modifiedSequence=""String_Node_Str"";
  AminoAcid currentAA;
  for (int seqIndex=0; seqIndex < sequence.length(); seqIndex+=3) {
    currentCodon=sequence.substring(seqIndex,seqIndex + 3);
    currentAA=codonTable.aminoAcids.get(UtilityMethods.findAminoAcidIndex(currentCodon));
    optimalCodon=currentAA.getDesiredCodon(0).sequence;
    modifiedSequence+=optimalCodon;
  }
  modifiedSequence=modifiedSequence.toLowerCase();
  return modifiedSequence;
}"
44688,"/** 
 * For rank of 1 it determines the most frequent codon, for rank 2 it determines the next most frequent codon etc.
 * @param rank
 * @return The nth most frequent Codon for that particular amino acid
 */
public Codon getDesiredCodon(int rank){
  if (this.codons.size() < rank) {
    return null;
  }
 else {
    return this.codons.get(rank - 1);
  }
}","/** 
 * For rank of 1 it determines the most frequent codon, for rank 2 it determines the next most frequent codon etc.
 * @param rank
 * @return The nth most frequent Codon for that particular amino acid
 */
public Codon getDesiredCodon(int rank){
  if (this.codons.size() < rank) {
    return null;
  }
 else {
    return this.codons.get(rank);
  }
}"
44689,"public void actionPerformed(ActionEvent e){
  JButton source=(JButton)e.getSource();
  if (source == cancelButton) {
    mainMenu.closeAnalyzeSequenceView();
  }
 else   if (source == submitButton) {
    if (checkInput() == true) {
    }
 else {
    }
  }
}","public void actionPerformed(ActionEvent e){
  JButton source=(JButton)e.getSource();
  if (source == cancelButton) {
    mainMenu.closeAnalyzeSequenceView();
  }
 else   if (source == submitButton) {
    testChangeCodons();
    if (checkInput() == true) {
    }
 else {
    }
  }
}"
44690,"public boolean testChangeCodons(){
  return true;
}","public boolean testChangeCodons(){
  OrgCodonTable organism=mainMenu.myss.getOrganism(this.organismComboBox.getSelectedIndex());
  String unmodifiedSequence=this.sequenceArea.getText();
  String modifiedSequence;
  String changesString=""String_Node_Str"";
  GeneSequence sequence=new GeneSequence(unmodifiedSequence);
  modifiedSequence=SeqModification.seqOptimizationAlgorithimSimple(unmodifiedSequence,organism);
  sequence.setModifiedSequence(modifiedSequence);
  sequence.findChanges();
  sequence=PrimerDesign.linearPrimerDesignAlgo(sequence);
  System.out.println(""String_Node_Str"" + unmodifiedSequence);
  System.out.println(""String_Node_Str"" + modifiedSequence);
  for (int i=0; i < sequence.changes.size(); i++) {
    changesString+=sequence.changes.get(i);
    changesString+=""String_Node_Str"";
  }
  System.out.println(changesString);
  return true;
}"
44691,"@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.menu,menu);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.mapmenu,menu);
  return true;
}"
44692,"@Override protected Void doInBackground(Void... params){
  while (true) {
    if (zoomLevel != map.getZoomLevel()) {
      handler.post(new Runnable(){
        @Override public void run(){
          mapClear();
          zoomLevel=map.getZoomLevel();
        }
      }
);
    }
    if (isMoved() || isTimeChanged()) {
      stablePainter();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override protected Void doInBackground(Void... params){
  while (true) {
    if (zoomLevel != map.getZoomLevel()) {
      handler.post(new Runnable(){
        @Override public void run(){
          mapClear();
          zoomLevel=map.getZoomLevel();
        }
      }
);
    }
    if (isTimeChanged()) {
      mapClear();
    }
    if (isMoved() || isTimeChanged()) {
      stablePainter();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
44693,"@Override protected Void doInBackground(Void... params){
  while (true) {
    if (zoomLevel != map.getZoomLevel()) {
      handler.post(new Runnable(){
        @Override public void run(){
          mapClear();
          zoomLevel=map.getZoomLevel();
        }
      }
);
    }
    if (isMoved() || isTimeChanged()) {
      drawRecentLocal();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override protected Void doInBackground(Void... params){
  while (true) {
    if (zoomLevel != map.getZoomLevel()) {
      handler.post(new Runnable(){
        @Override public void run(){
          mapClear();
          zoomLevel=map.getZoomLevel();
        }
      }
);
    }
    if (isTimeChanged()) {
      mapClear();
    }
    if (isMoved() || isTimeChanged()) {
      drawRecentLocal();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
44694,"/** 
 * Invoked when a view is clicked
 */
@Override public void onClick(View v){
switch (v.getId()) {
case R.id.switchView:
    if (streetView == 0) {
      map.setStreetView(true);
      streetView=1;
      map.setSatellite(false);
    }
 else {
      map.setStreetView(false);
      streetView=0;
      map.setSatellite(true);
    }
  map.invalidate();
break;
case R.id.showHappy:
if (checkHappy == 0) {
map.getOverlays().add(happyOverlay);
checkHappy=1;
}
 else {
map.getOverlays().clear();
if (checkSad == 1) {
  map.getOverlays().add(sadOverlay);
}
checkHappy=0;
}
invalidateOverlay();
break;
case R.id.showSad:
if (checkSad == 0) {
map.getOverlays().add(sadOverlay);
checkSad=1;
}
 else {
map.getOverlays().clear();
if (checkHappy == 1) {
map.getOverlays().add(happyOverlay);
}
checkSad=0;
}
invalidateOverlay();
break;
case R.id.map:
Intent j=new Intent(this,MyMap.class);
j.putExtra(""String_Node_Str"",streetView);
j.putExtra(""String_Node_Str"",false);
j.putExtra(""String_Node_Str"",checkHappy);
j.putExtra(""String_Node_Str"",checkSad);
startActivity(j);
finish();
break;
case R.id.myTrack_button:
startActivity(new Intent(this,History.class));
break;
case R.id.myChart_button:
startActivity(new Intent(this,ChartList.class));
break;
case R.id.date_button:
showDialog(DATE_DIALOG_ID);
break;
case R.id.time_button:
showDialog(TIME_DIALOG_ID);
break;
case R.id.arrowLeft:
if (newBottles == null || newBottles.size() == 0) {
handler.removeCallbacks(running);
Runnable runnable=new Runnable(){
@Override public void run(){
Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
;
running=runnable;
handler.postDelayed(runnable,1000);
}
if (newBottles != null && newBottles.size() > 0) {
mapClear();
epochTime=newBottles.get(newBottles.size() - 1).getTime();
timeForView.set(epochTime);
setTimeObjectValues();
}
break;
case R.id.arrowRight:
ArrayList<HappyBottle> temp=updateViewAfter();
if (temp != null && temp.size() > 1) {
epochTime=temp.get(temp.size() - 1).getTime();
timeForView.set(epochTime);
mapClear();
setTimeObjectValues();
dateTimeUpdate();
}
 else {
handler.removeCallbacks(running);
Runnable runnable=new Runnable(){
@Override public void run(){
Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
;
running=runnable;
handler.postDelayed(runnable,1000);
}
break;
}
}","/** 
 * Invoked when a view is clicked
 */
@Override public void onClick(View v){
switch (v.getId()) {
case R.id.switchView:
    if (streetView == 0) {
      map.setStreetView(true);
      streetView=1;
      map.setSatellite(false);
    }
 else {
      map.setStreetView(false);
      streetView=0;
      map.setSatellite(true);
    }
  map.invalidate();
break;
case R.id.showHappy:
if (checkHappy == 0) {
map.getOverlays().add(happyOverlay);
checkHappy=1;
}
 else {
map.getOverlays().clear();
if (checkSad == 1) {
  map.getOverlays().add(sadOverlay);
}
checkHappy=0;
}
invalidateOverlay();
break;
case R.id.showSad:
if (checkSad == 0) {
map.getOverlays().add(sadOverlay);
checkSad=1;
}
 else {
map.getOverlays().clear();
if (checkHappy == 1) {
map.getOverlays().add(happyOverlay);
}
checkSad=0;
}
invalidateOverlay();
break;
case R.id.map:
Intent j=new Intent(this,MyMap.class);
j.putExtra(""String_Node_Str"",streetView);
j.putExtra(""String_Node_Str"",false);
j.putExtra(""String_Node_Str"",checkHappy);
j.putExtra(""String_Node_Str"",checkSad);
startActivity(j);
finish();
break;
case R.id.myTrack_button:
startActivity(new Intent(this,History.class));
break;
case R.id.myChart_button:
startActivity(new Intent(this,ChartList.class));
break;
case R.id.date_button:
showDialog(DATE_DIALOG_ID);
break;
case R.id.time_button:
showDialog(TIME_DIALOG_ID);
break;
case R.id.arrowLeft:
if (newBottles == null || newBottles.size() == 0) {
handler.removeCallbacks(running);
Runnable runnable=new Runnable(){
@Override public void run(){
Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
;
running=runnable;
handler.postDelayed(runnable,1000);
}
if (newBottles != null && newBottles.size() > 0) {
mapClear();
epochTime=newBottles.get(newBottles.size() - 1).getTime();
timeForView.set(epochTime);
setTimeObjectValues();
}
break;
case R.id.arrowRight:
ArrayList<HappyBottle> temp=updateViewAfter();
if (temp != null && temp.size() > 1) {
epochTime=temp.get(temp.size() - 1).getTime();
timeForView.set(epochTime);
mapClear();
setTimeObjectValues();
dateTimeUpdate();
}
 else {
handler.removeCallbacks(running);
Runnable runnable=new Runnable(){
@Override public void run(){
Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
;
running=runnable;
handler.postDelayed(runnable,1000);
}
break;
}
map.invalidate();
}"
44695,"protected ArrayList<HappyBottle> getMyLocalBefore(int minLat,int maxLat,int minLong,int maxLong,int limit,long timebefore){
  SQLiteDatabase db=h.getReadableDatabase();
  String[] args={Integer.toString(minLat),Integer.toString(maxLat),Integer.toString(minLong),Integer.toString(maxLong),Long.toString(timebefore)};
  Cursor cursor=db.query(TABLE_NAME,null,""String_Node_Str"",args,null,null,TIME + ""String_Node_Str"",Integer.toString(limit));
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  while (cursor.moveToNext()) {
    HappyBottle b=createBottle(cursor);
    a.add(b);
  }
  cursor.close();
  db.close();
  return a;
}","protected ArrayList<HappyBottle> getMyLocalBefore(int minLat,int maxLat,int minLong,int maxLong,int limit,long timebefore){
  SQLiteDatabase db=h.getReadableDatabase();
  String[] args={Integer.toString(minLat),Integer.toString(maxLat),Integer.toString(minLong),Integer.toString(maxLong),Long.toString(timebefore),Long.toString(myID)};
  Cursor cursor=db.query(TABLE_NAME,null,""String_Node_Str"" + UID + ""String_Node_Str"",args,null,null,TIME + ""String_Node_Str"",Integer.toString(limit));
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  while (cursor.moveToNext()) {
    HappyBottle b=createBottle(cursor);
    a.add(b);
  }
  cursor.close();
  db.close();
  return a;
}"
44696,"protected ArrayList<HappyBottle> getMyLocalRecent(int minLat,int maxLat,int minLong,int maxLong,int limit){
  SQLiteDatabase db=h.getReadableDatabase();
  String[] args={Integer.toString(minLat),Integer.toString(maxLat),Integer.toString(minLong),Integer.toString(maxLong)};
  Cursor cursor=db.query(TABLE_NAME,null,""String_Node_Str"",args,null,null,TIME + ""String_Node_Str"",Integer.toString(limit));
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  while (cursor.moveToNext()) {
    HappyBottle b=createBottle(cursor);
    a.add(b);
  }
  cursor.close();
  db.close();
  return a;
}","protected ArrayList<HappyBottle> getMyLocalRecent(int minLat,int maxLat,int minLong,int maxLong,int limit){
  SQLiteDatabase db=h.getReadableDatabase();
  String[] args={Integer.toString(minLat),Integer.toString(maxLat),Integer.toString(minLong),Integer.toString(maxLong),Long.toString(myID)};
  Cursor cursor=db.query(TABLE_NAME,null,""String_Node_Str"" + UID + ""String_Node_Str"",args,null,null,TIME + ""String_Node_Str"",Integer.toString(limit));
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  while (cursor.moveToNext()) {
    HappyBottle b=createBottle(cursor);
    a.add(b);
  }
  cursor.close();
  db.close();
  return a;
}"
44697,"protected ArrayList<HappyBottle> getMyLocalAfter(int minLat,int maxLat,int minLong,int maxLong,int limit,long timeafter){
  SQLiteDatabase db=h.getReadableDatabase();
  String[] args={Integer.toString(minLat),Integer.toString(maxLat),Integer.toString(minLong),Integer.toString(maxLong),Long.toString(timeafter)};
  Cursor cursor=db.query(TABLE_NAME,null,""String_Node_Str"",args,null,null,TIME + ""String_Node_Str"",Integer.toString(limit));
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  while (cursor.moveToNext()) {
    HappyBottle b=createBottle(cursor);
    a.add(b);
  }
  cursor.close();
  db.close();
  return a;
}","protected ArrayList<HappyBottle> getMyLocalAfter(int minLat,int maxLat,int minLong,int maxLong,int limit,long timeafter){
  SQLiteDatabase db=h.getReadableDatabase();
  String[] args={Integer.toString(minLat),Integer.toString(maxLat),Integer.toString(minLong),Integer.toString(maxLong),Long.toString(timeafter),Long.toString(myID)};
  Cursor cursor=db.query(TABLE_NAME,null,""String_Node_Str"" + UID + ""String_Node_Str"",args,null,null,TIME + ""String_Node_Str"",Integer.toString(limit));
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  while (cursor.moveToNext()) {
    HappyBottle b=createBottle(cursor);
    a.add(b);
  }
  cursor.close();
  db.close();
  return a;
}"
44698,"@Override protected void onResume(){
  super.onResume();
  timeForView.setToNow();
  userLocationOverlay.enableMyLocation();
  zpl=new ZoomPanListener();
  zpl.execute(null);
}","@Override protected void onResume(){
  super.onResume();
  timeForView.setToNow();
  epochChecker=timeForView.normalize(true);
  userLocationOverlay.enableMyLocation();
  zpl=new ZoomPanListener();
  zpl.execute(null);
}"
44699,"private ArrayList<HappyBottle> parse(String in){
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  try {
    JSONArray jarray=new JSONArray(in);
    for (int i=0; i < jarray.length(); i++) {
      JSONObject o=jarray.getJSONObject(i);
      HappyBottle b=newparseone(o);
      a.add(b);
    }
  }
 catch (  JSONException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
    Log.e(TAG,""String_Node_Str"" + in);
    a.add(new HappyBottle(myID,1,1,(short)1,""String_Node_Str"",1));
    Log.e(TAG,""String_Node_Str"");
    Log.e(TAG,in);
    e.printStackTrace();
  }
catch (  Exception e) {
    Log.e(TAG + ""String_Node_Str"",e.toString());
  }
  return a;
}","private ArrayList<HappyBottle> parse(String in){
  ArrayList<HappyBottle> a=new ArrayList<HappyBottle>();
  try {
    JSONArray jarray=new JSONArray(in);
    for (int i=0; i < jarray.length(); i++) {
      JSONObject o=jarray.getJSONObject(i);
      HappyBottle b=newparseone(o);
      a.add(b);
    }
  }
 catch (  JSONException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
    Log.e(TAG,""String_Node_Str"" + in);
    Log.e(TAG,""String_Node_Str"");
    Log.e(TAG,in);
    e.printStackTrace();
  }
catch (  Exception e) {
    Log.e(TAG + ""String_Node_Str"",e.toString());
  }
  return a;
}"
44700,"protected ArrayList<HappyBottle> download(Task t){
  String page=""String_Node_Str"";
  try {
    HttpGet request=new HttpGet();
    request.setURI(new URI(""String_Node_Str""));
    if (t.equals(Task.GETMINE)) {
      request.setURI(new URI(""String_Node_Str"" + myID + ""String_Node_Str""));
    }
    BasicHeader declareAuth=new BasicHeader(""String_Node_Str"",""String_Node_Str"" + Base64.encodeToString(""String_Node_Str"".getBytes(),Base64.DEFAULT) + ""String_Node_Str"");
    request.setHeader(declareAuth);
    page=connectionHelper(request);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return parse(page);
}","protected ArrayList<HappyBottle> download(Task t){
  String page=""String_Node_Str"";
  try {
    HttpGet request=new HttpGet();
    request.setURI(new URI(""String_Node_Str""));
    if (t.equals(Task.GETMINE)) {
      request.setURI(new URI(""String_Node_Str"" + myID + ""String_Node_Str""));
    }
    Log.d(TAG,""String_Node_Str"" + request.getURI().toString());
    page=connectionHelper(request);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return parse(page);
}"
44701,"/** 
 * Initializes activity
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  View happyButton=findViewById(R.id.happy_button);
  happyButton.setOnClickListener(this);
  View sadButton=findViewById(R.id.sad_button);
  sadButton.setOnClickListener(this);
  View submitButton=findViewById(R.id.more_to_map);
  submitButton.setOnClickListener(this);
  UIDh=new UIDhelper();
  myID=UIDh.getSetUID(getSharedPreferences(USER_DATA,-3),this);
}","/** 
 * Initializes activity
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  View happyButton=findViewById(R.id.happy_button);
  happyButton.setOnClickListener(this);
  View sadButton=findViewById(R.id.sad_button);
  sadButton.setOnClickListener(this);
  View submitButton=findViewById(R.id.more_to_map);
  submitButton.setOnClickListener(this);
  UIDh=new UIDhelper();
  myID=UIDh.getSetUID(getSharedPreferences(USER_DATA,-3),this);
  h=new HappyData(this);
}"
44702,"public long getSetUID(SharedPreferences sp,Context ctx){
  long tempID=this.getUID();
  if (tempID >= 0) {
    return tempID;
  }
  final AccountManager manager=AccountManager.get(ctx);
  final Account[] accounts=manager.getAccounts();
  String username=getGmail(accounts);
  if (!username.equals(""String_Node_Str"")) {
    long uid=sp.getLong(""String_Node_Str"",-1);
    UIDtoken.INSTANCE.setUID(uid);
    if (uid < 0) {
      NetHelper NH=new NetHelper();
      long UID=NH.getID(username);
      SharedPreferences.Editor editor=sp.edit();
      editor.putLong(""String_Node_Str"",UID);
      editor.putString(""String_Node_Str"",username);
      editor.commit();
      UIDtoken.INSTANCE.setUID(UID);
      return UID;
    }
 else {
      return -1;
    }
  }
 else {
    Context context=ctx;
    String loginPrompt=ctx.getString(R.string.error_login_message);
    CharSequence text=loginPrompt;
    Toast toast=Toast.makeText(context,text,1000);
    toast.show();
  }
  return -5;
}","public long getSetUID(SharedPreferences sp,Context ctx){
  long tempID=this.getUID();
  if (tempID >= 0) {
    return tempID;
  }
  final AccountManager manager=AccountManager.get(ctx);
  final Account[] accounts=manager.getAccounts();
  String username=getGmail(accounts);
  if (!username.equals(""String_Node_Str"")) {
    long uid=sp.getLong(""String_Node_Str"",-1);
    UIDtoken.INSTANCE.setUID(uid);
    if (uid < 0) {
      NetHelper NH=new NetHelper();
      long UID=NH.getID(username);
      if (UID < 0) {
        return UID;
      }
      SharedPreferences.Editor editor=sp.edit();
      editor.putLong(""String_Node_Str"",UID);
      editor.putString(""String_Node_Str"",username);
      editor.commit();
    }
 else {
      UIDtoken.INSTANCE.setUID(uid);
      return uid;
    }
  }
 else {
    Context context=ctx;
    String loginPrompt=ctx.getString(R.string.error_login_message);
    CharSequence text=loginPrompt;
    Toast toast=Toast.makeText(context,text,1000);
    toast.show();
  }
  return -5;
}"
44703,"/** 
 * Initializes Activity
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map);
  checkHappy=getIntent().getExtras().getInt(""String_Node_Str"");
  checkSad=getIntent().getExtras().getInt(""String_Node_Str"");
  goToMyLocation=getIntent().getExtras().getBoolean(""String_Node_Str"");
  streetView=getIntent().getExtras().getInt(""String_Node_Str"");
  Drawable happyface=this.getResources().getDrawable(R.drawable.pinhappy);
  Drawable sadface=this.getResources().getDrawable(R.drawable.pinsad);
  happyOverlay=new ItemizedEmotionOverlay(happyface,this);
  sadOverlay=new ItemizedEmotionOverlay(sadface,this);
  HappyData datahelper=new HappyData(this);
  ArrayList<HappyBottle> plottables=datahelper.getMyHistory();
  emotionOverlayFiller(1,plottables,happyOverlay);
  emotionOverlayFiller(0,plottables,sadOverlay);
  initMapView();
  initMyLocation();
  goToMyLocation();
  View sadButton=findViewById(R.id.showSad);
  sadButton.setOnClickListener(this);
  View happyButton=findViewById(R.id.showHappy);
  happyButton.setOnClickListener(this);
  View switchButton=findViewById(R.id.switchView);
  switchButton.setOnClickListener(this);
  View histButton=findViewById(R.id.myTrack_button);
  histButton.setOnClickListener(this);
  View chartButton=findViewById(R.id.myChart_button);
  chartButton.setOnClickListener(this);
  setDate=findViewById(R.id.date_button);
  setDate.setOnClickListener(this);
  setTime=findViewById(R.id.time_button);
  setTime.setOnClickListener(this);
  final Calendar c=Calendar.getInstance();
  year=c.get(Calendar.YEAR);
  month=c.get(Calendar.MONTH);
  day=c.get(Calendar.DAY_OF_MONTH);
  hour=c.get(Calendar.HOUR_OF_DAY);
  minute=c.get(Calendar.MINUTE);
  dateTimeUpdate();
  View myButton=findViewById(R.id.map);
  ((Button)myButton).setText(""String_Node_Str"");
  myButton.setOnClickListener(this);
  center=new GeoPoint(-1,-1);
  zoomLevel=map.getZoomLevel();
}","/** 
 * Initializes Activity
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map);
  checkHappy=getIntent().getExtras().getInt(""String_Node_Str"");
  checkSad=getIntent().getExtras().getInt(""String_Node_Str"");
  goToMyLocation=getIntent().getExtras().getBoolean(""String_Node_Str"");
  streetView=getIntent().getExtras().getInt(""String_Node_Str"");
  Drawable happyface=this.getResources().getDrawable(R.drawable.pinhappy);
  Drawable sadface=this.getResources().getDrawable(R.drawable.pinsad);
  happyOverlay=new ItemizedEmotionOverlay(happyface,this);
  sadOverlay=new ItemizedEmotionOverlay(sadface,this);
  HappyData datahelper=new HappyData(this);
  ArrayList<HappyBottle> plottables=datahelper.getMyHistory();
  emotionOverlayAdder(1,plottables,happyOverlay);
  emotionOverlayAdder(0,plottables,sadOverlay);
  initMapView();
  initMyLocation();
  goToMyLocation();
  View sadButton=findViewById(R.id.showSad);
  sadButton.setOnClickListener(this);
  View happyButton=findViewById(R.id.showHappy);
  happyButton.setOnClickListener(this);
  View switchButton=findViewById(R.id.switchView);
  switchButton.setOnClickListener(this);
  View histButton=findViewById(R.id.myTrack_button);
  histButton.setOnClickListener(this);
  View chartButton=findViewById(R.id.myChart_button);
  chartButton.setOnClickListener(this);
  setDate=findViewById(R.id.date_button);
  setDate.setOnClickListener(this);
  setTime=findViewById(R.id.time_button);
  setTime.setOnClickListener(this);
  final Calendar c=Calendar.getInstance();
  year=c.get(Calendar.YEAR);
  month=c.get(Calendar.MONTH);
  day=c.get(Calendar.DAY_OF_MONTH);
  hour=c.get(Calendar.HOUR_OF_DAY);
  minute=c.get(Calendar.MINUTE);
  dateTimeUpdate();
  View myButton=findViewById(R.id.map);
  ((Button)myButton).setText(""String_Node_Str"");
  myButton.setOnClickListener(this);
  center=new GeoPoint(-1,-1);
  zoomLevel=map.getZoomLevel();
}"
44704,"private void drawRecentLocal(){
  if (!(isMoved() || isTimeChanged())) {
    return;
  }
  center=map.getMapCenter();
  zoomLevel=map.getZoomLevel();
  ArrayList<HappyBottle> temp=newBottles;
  newBottles=updateToView();
  if (newBottles != null && newBottles.size() != 0) {
    timeReference=newBottles.get(0).getTime();
  }
  if (!(newBottles.equals(temp))) {
    handler.removeCallbacks(latestThread);
    latestThread=new Runnable(){
      @Override public void run(){
        emotionOverlayFiller(1,newBottles,happyOverlay);
        emotionOverlayFiller(0,newBottles,sadOverlay);
        map.invalidate();
      }
    }
;
    handler.postDelayed(latestThread,10);
    return;
  }
}","private void drawRecentLocal(){
  if (!(isMoved() || isTimeChanged())) {
    return;
  }
  center=map.getMapCenter();
  zoomLevel=map.getZoomLevel();
  ArrayList<HappyBottle> temp=newBottles;
  newBottles=updateToView();
  if (!(newBottles.equals(temp))) {
    handler.removeCallbacks(latestThread);
    latestThread=new Runnable(){
      @Override public void run(){
        emotionOverlayAdder(1,newBottles,happyOverlay);
        emotionOverlayAdder(0,newBottles,sadOverlay);
        map.invalidate();
      }
    }
;
    handler.postDelayed(latestThread,10);
    return;
  }
}"
44705,"@Override public void run(){
  emotionOverlayFiller(1,newBottles,happyOverlay);
  emotionOverlayFiller(0,newBottles,sadOverlay);
  map.invalidate();
}","@Override public void run(){
  emotionOverlayAdder(1,newBottles,happyOverlay);
  emotionOverlayAdder(0,newBottles,sadOverlay);
  map.invalidate();
}"
44706,"/** 
 * This method updates the overlays for only the current the current view
 */
private ArrayList<HappyBottle> updateToView(){
  epochChecker=epochTime;
  GeoPoint center=map.getMapCenter();
  int centerLat=center.getLatitudeE6();
  int centerLong=center.getLongitudeE6();
  int width=map.getLongitudeSpan();
  int height=map.getLatitudeSpan();
  int minLong=centerLong - width / 2;
  int maxLong=centerLong + width / 2;
  int maxLat=centerLat + height / 2;
  int minLat=centerLat - height / 2;
  Log.d(""String_Node_Str"",""String_Node_Str"" + minLong + ""String_Node_Str""+ minLat+ ""String_Node_Str""+ maxLong+ ""String_Node_Str""+ maxLat);
  return datahelper.getMyLocalRecent(minLat,maxLat,minLong,maxLong,100);
}","/** 
 * This method updates the overlays for only the current the current view
 */
private ArrayList<HappyBottle> updateToView(){
  epochChecker=epochTime;
  GeoPoint center=map.getMapCenter();
  int centerLat=center.getLatitudeE6();
  int centerLong=center.getLongitudeE6();
  int width=map.getLongitudeSpan();
  int height=map.getLatitudeSpan();
  int minLong=centerLong - width / 2;
  int maxLong=centerLong + width / 2;
  int maxLat=centerLat + height / 2;
  int minLat=centerLat - height / 2;
  Log.d(""String_Node_Str"",""String_Node_Str"" + minLong + ""String_Node_Str""+ minLat+ ""String_Node_Str""+ maxLong+ ""String_Node_Str""+ maxLat);
  return datahelper.getMyLocalRecent(minLat,maxLat,minLong,maxLong,5);
}"
44707,"public long getSetUID(SharedPreferences sp,Context ctx){
  long tempID=this.getUID();
  if (tempID >= 0) {
    return tempID;
  }
  final AccountManager manager=AccountManager.get(ctx);
  final Account[] accounts=manager.getAccounts();
  String username=getGmail(accounts);
  if (!username.equals(""String_Node_Str"")) {
    long uid=sp.getLong(""String_Node_Str"",-1);
    UIDtoken.INSTANCE.setUID(uid);
    if (uid < 0) {
      NetHelper NH=new NetHelper();
      long UID=NH.getID(username);
      if (UID < 0) {
        return UID;
      }
      SharedPreferences.Editor editor=sp.edit();
      editor.putLong(""String_Node_Str"",UID);
      editor.putString(""String_Node_Str"",username);
      editor.commit();
    }
 else {
      UIDtoken.INSTANCE.setUID(uid);
      return uid;
    }
  }
 else {
    Context context=ctx;
    String loginPrompt=ctx.getString(R.string.error_login_message);
    CharSequence text=loginPrompt;
    Toast toast=Toast.makeText(context,text,1000);
    toast.show();
  }
  return -5;
}","public long getSetUID(SharedPreferences sp,Context ctx){
  long tempID=this.getUID();
  if (tempID >= 0) {
    return tempID;
  }
  final AccountManager manager=AccountManager.get(ctx);
  final Account[] accounts=manager.getAccounts();
  String username=getGmail(accounts);
  if (!username.equals(""String_Node_Str"")) {
    long uid=sp.getLong(""String_Node_Str"",-1);
    UIDtoken.INSTANCE.setUID(uid);
    if (uid < 0) {
      NetHelper NH=new NetHelper();
      uid=NH.getID(username);
      if (uid < 0) {
        return uid;
      }
      SharedPreferences.Editor editor=sp.edit();
      editor.putLong(""String_Node_Str"",uid);
      editor.putString(""String_Node_Str"",username);
      editor.commit();
    }
 else {
    }
    UIDtoken.INSTANCE.setUID(uid);
    return uid;
  }
 else {
    Context context=ctx;
    String loginPrompt=ctx.getString(R.string.error_login_message);
    CharSequence text=loginPrompt;
    Toast toast=Toast.makeText(context,text,1000);
    toast.show();
  }
  return -5;
}"
44708,"/** 
 * Initializes Activity
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map);
  checkHappy=getIntent().getExtras().getInt(""String_Node_Str"");
  checkSad=getIntent().getExtras().getInt(""String_Node_Str"");
  goToMyLocation=getIntent().getExtras().getBoolean(""String_Node_Str"");
  streetView=getIntent().getExtras().getInt(""String_Node_Str"");
  Drawable happyface=this.getResources().getDrawable(R.drawable.pinhappy);
  Drawable sadface=this.getResources().getDrawable(R.drawable.pinsad);
  happyOverlay=new ItemizedEmotionOverlay(happyface,this);
  sadOverlay=new ItemizedEmotionOverlay(sadface,this);
  HappyData datahelper=new HappyData(this);
  ArrayList<HappyBottle> plottables=datahelper.getMyHistory();
  emotionOverlayFiller(1,plottables,happyOverlay);
  emotionOverlayFiller(0,plottables,sadOverlay);
  initMapView();
  goToMyLocation();
  View sadButton=findViewById(R.id.showSad);
  sadButton.setOnClickListener(this);
  View happyButton=findViewById(R.id.showHappy);
  happyButton.setOnClickListener(this);
  View switchButton=findViewById(R.id.switchView);
  switchButton.setOnClickListener(this);
  View histButton=findViewById(R.id.myTrack_button);
  histButton.setOnClickListener(this);
  View chartButton=findViewById(R.id.myChart_button);
  chartButton.setOnClickListener(this);
  setDate=findViewById(R.id.date_button);
  setDate.setOnClickListener(this);
  setTime=findViewById(R.id.time_button);
  setTime.setOnClickListener(this);
  final Calendar c=Calendar.getInstance();
  year=c.get(Calendar.YEAR);
  month=c.get(Calendar.MONTH);
  day=c.get(Calendar.DAY_OF_MONTH);
  hour=c.get(Calendar.HOUR_OF_DAY);
  minute=c.get(Calendar.MINUTE);
  dateTimeUpdate();
  View myButton=findViewById(R.id.map);
  ((Button)myButton).setText(""String_Node_Str"");
  myButton.setOnClickListener(this);
}","/** 
 * Initializes Activity
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map);
  checkHappy=getIntent().getExtras().getInt(""String_Node_Str"");
  checkSad=getIntent().getExtras().getInt(""String_Node_Str"");
  goToMyLocation=getIntent().getExtras().getBoolean(""String_Node_Str"");
  streetView=getIntent().getExtras().getInt(""String_Node_Str"");
  Drawable happyface=this.getResources().getDrawable(R.drawable.pinhappy);
  Drawable sadface=this.getResources().getDrawable(R.drawable.pinsad);
  happyOverlay=new ItemizedEmotionOverlay(happyface,this);
  sadOverlay=new ItemizedEmotionOverlay(sadface,this);
  HappyData datahelper=new HappyData(this);
  ArrayList<HappyBottle> plottables=datahelper.getMyHistory();
  emotionOverlayFiller(1,plottables,happyOverlay);
  emotionOverlayFiller(0,plottables,sadOverlay);
  initMapView();
  initMyLocation();
  goToMyLocation();
  View sadButton=findViewById(R.id.showSad);
  sadButton.setOnClickListener(this);
  View happyButton=findViewById(R.id.showHappy);
  happyButton.setOnClickListener(this);
  View switchButton=findViewById(R.id.switchView);
  switchButton.setOnClickListener(this);
  View histButton=findViewById(R.id.myTrack_button);
  histButton.setOnClickListener(this);
  View chartButton=findViewById(R.id.myChart_button);
  chartButton.setOnClickListener(this);
  setDate=findViewById(R.id.date_button);
  setDate.setOnClickListener(this);
  setTime=findViewById(R.id.time_button);
  setTime.setOnClickListener(this);
  final Calendar c=Calendar.getInstance();
  year=c.get(Calendar.YEAR);
  month=c.get(Calendar.MONTH);
  day=c.get(Calendar.DAY_OF_MONTH);
  hour=c.get(Calendar.HOUR_OF_DAY);
  minute=c.get(Calendar.MINUTE);
  dateTimeUpdate();
  View myButton=findViewById(R.id.map);
  ((Button)myButton).setText(""String_Node_Str"");
  myButton.setOnClickListener(this);
}"
44709,"/** 
 * The same as downloadLocalBefore, except we have a new parameter: timebefore. Only return bottles created before time timebefore.  It will download the most recent <limit> number of bottles, within the view defined by min/max lat/long, but only those before timebefore. If timebefore < 0, it ignores that parameter. 
 * @param minLat
 * @param maxLat
 * @param minLong
 * @param maxLong
 * @param limit
 * @param timebefore
 * @return ArrayList of HappyBottles we download.
 */
public ArrayList<HappyBottle> downloadLocalBefore(int minLat,int maxLat,int minLong,int maxLong,int limit,int timebefore){
  String page=""String_Node_Str"";
  try {
    HttpGet request=new HttpGet();
    if (timebefore < 0) {
      request.setURI(new URI(""String_Node_Str"" + minLat + ""String_Node_Str""+ maxLat+ ""String_Node_Str""+ minLong+ ""String_Node_Str""+ maxLong+ ""String_Node_Str""+ limit+ ""String_Node_Str""));
    }
 else {
      request.setURI(new URI(""String_Node_Str"" + minLat + ""String_Node_Str""+ maxLat+ ""String_Node_Str""+ minLong+ ""String_Node_Str""+ maxLong+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ timebefore+ ""String_Node_Str""));
    }
    Log.d(TAG,request.getURI().toString());
    BasicHeader declareAuth=new BasicHeader(""String_Node_Str"",""String_Node_Str"" + Base64.encodeToString(""String_Node_Str"".getBytes(),Base64.DEFAULT) + ""String_Node_Str"");
    request.setHeader(declareAuth);
    page=connectionHelper(request);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return parse(page);
}","/** 
 * The same as downloadLocalBefore, except we have a new parameter: timebefore. Only return bottles created before time timebefore.  It will download the most recent <limit> number of bottles, within the view defined by min/max lat/long, but only those before timebefore. If timebefore < 0, it ignores that parameter. 
 * @param minLat
 * @param maxLat
 * @param minLong
 * @param maxLong
 * @param limit
 * @param timebefore
 * @return ArrayList of HappyBottles we download.
 */
public ArrayList<HappyBottle> downloadLocalBefore(int minLat,int maxLat,int minLong,int maxLong,int limit,long timebefore){
  String page=""String_Node_Str"";
  try {
    HttpGet request=new HttpGet();
    if (timebefore < 0) {
      request.setURI(new URI(""String_Node_Str"" + minLat + ""String_Node_Str""+ maxLat+ ""String_Node_Str""+ minLong+ ""String_Node_Str""+ maxLong+ ""String_Node_Str""+ limit+ ""String_Node_Str""));
    }
 else {
      request.setURI(new URI(""String_Node_Str"" + minLat + ""String_Node_Str""+ maxLat+ ""String_Node_Str""+ minLong+ ""String_Node_Str""+ maxLong+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ timebefore+ ""String_Node_Str""));
    }
    Log.d(TAG,request.getURI().toString());
    BasicHeader declareAuth=new BasicHeader(""String_Node_Str"",""String_Node_Str"" + Base64.encodeToString(""String_Node_Str"".getBytes(),Base64.DEFAULT) + ""String_Node_Str"");
    request.setHeader(declareAuth);
    page=connectionHelper(request);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return parse(page);
}"
44710,"public double[] percentages(ArrayList<HappyBottle> plottables){
  Iterator<HappyBottle> itr=plottables.iterator();
  double happy=0;
  double sad=0;
  double[] values=new double[2];
  while (itr.hasNext()) {
    HappyBottle element=itr.next();
    int x=new Timestamp(element.getTime()).getDate();
    int date=Calendar.getInstance().get(Calendar.DATE);
    if (x == date) {
      if (element.getEmo() == 1) {
        happy+=1;
      }
 else {
        sad+=1;
      }
    }
  }
  double happyprctg=(happy * 100) / (happy + sad);
  double sadprctg=100 - happyprctg;
  int happytransf=(int)(happyprctg * 100);
  int sadtrans=(int)(sadprctg * 100);
  happyprctg=(double)happytransf / 100;
  sadprctg=(double)sadtrans / 100;
  values[0]=happyprctg;
  values[1]=sadprctg;
  return values;
}","public double[] percentages(ArrayList<HappyBottle> plottables){
  Iterator<HappyBottle> itr=plottables.iterator();
  double happy=0;
  double sad=0;
  double[] values=new double[2];
  while (itr.hasNext()) {
    HappyBottle element=itr.next();
    int x=new Timestamp(element.getTime()).getMonth() + 1;
    int y=new Timestamp(element.getTime()).getYear() + 1900;
    int z=new Timestamp(element.getTime()).getDate();
    int month=Calendar.getInstance().get(Calendar.MONTH) + 1;
    int year=Calendar.getInstance().get(Calendar.YEAR);
    int date=Calendar.getInstance().get(Calendar.DATE);
    if (x == month && y == year && z == date) {
      if (element.getEmo() == 1) {
        happy+=1;
      }
 else {
        sad+=1;
      }
    }
  }
  double happyprctg=(happy * 100) / (happy + sad);
  double sadprctg=100 - happyprctg;
  int happytransf=(int)(happyprctg * 100);
  int sadtrans=(int)(sadprctg * 100);
  happyprctg=(double)happytransf / 100;
  sadprctg=(double)sadtrans / 100;
  values[0]=happyprctg;
  values[1]=sadprctg;
  return values;
}"
44711,"public int test(ArrayList<HappyBottle> plottables){
  Iterator<HappyBottle> itr=plottables.iterator();
  HappyBottle element=itr.next();
  int x=new Timestamp(element.getTime()).getMonth();
  return x;
}","public int test(ArrayList<HappyBottle> plottables){
  Iterator<HappyBottle> itr=plottables.iterator();
  HappyBottle element=itr.next();
  int x=new Timestamp(element.getTime()).getYear();
  return x;
}"
44712,"public double[] percentages(ArrayList<HappyBottle> plottables){
  Iterator<HappyBottle> itr=plottables.iterator();
  double happy=0;
  double sad=0;
  double[] values=new double[2];
  while (itr.hasNext()) {
    HappyBottle element=itr.next();
    int x=new Timestamp(element.getTime()).getMonth() + 1;
    int y=new Timestamp(element.getTime()).getYear();
    int month=Calendar.getInstance().get(Calendar.MONTH) + 1;
    int year=Calendar.getInstance().get(Calendar.YEAR);
    if (x == month) {
      if (element.getEmo() == 1) {
        happy+=1;
      }
 else {
        sad+=1;
      }
    }
  }
  double happyprctg=(happy * 100) / (happy + sad);
  double sadprctg=100 - happyprctg;
  int happytransf=(int)(happyprctg * 100);
  int sadtrans=(int)(sadprctg * 100);
  happyprctg=(double)happytransf / 100;
  sadprctg=(double)sadtrans / 100;
  values[0]=happyprctg;
  values[1]=sadprctg;
  return values;
}","public double[] percentages(ArrayList<HappyBottle> plottables){
  Iterator<HappyBottle> itr=plottables.iterator();
  double happy=0;
  double sad=0;
  double[] values=new double[2];
  while (itr.hasNext()) {
    HappyBottle element=itr.next();
    int x=new Timestamp(element.getTime()).getMonth() + 1;
    int y=new Timestamp(element.getTime()).getYear() + 1900;
    int month=Calendar.getInstance().get(Calendar.MONTH) + 1;
    int year=Calendar.getInstance().get(Calendar.YEAR);
    if (y == year && x == month) {
      if (element.getEmo() == 1) {
        happy+=1;
      }
 else {
        sad+=1;
      }
    }
  }
  double happyprctg=(happy * 100) / (happy + sad);
  double sadprctg=100 - happyprctg;
  int happytransf=(int)(happyprctg * 100);
  int sadtrans=(int)(sadprctg * 100);
  happyprctg=(double)happytransf / 100;
  sadprctg=(double)sadtrans / 100;
  values[0]=happyprctg;
  values[1]=sadprctg;
  return values;
}"
44713,"/** 
 * Invoked when a view is clicked
 */
@Override public void onClick(View v){
switch (v.getId()) {
case R.id.switchView:
    if (streetView == 0) {
      map.setStreetView(true);
      streetView=1;
      map.setSatellite(false);
    }
 else {
      map.setStreetView(false);
      streetView=0;
      map.setSatellite(true);
    }
  map.invalidate();
break;
case R.id.showHappy:
if (checkHappy == 0) {
map.getOverlays().add(happyOverlay);
checkHappy=1;
}
 else {
map.getOverlays().clear();
if (checkSad == 1) {
  map.getOverlays().add(sadOverlay);
}
checkHappy=0;
}
invalidateOverlay();
break;
case R.id.showSad:
if (checkSad == 0) {
map.getOverlays().add(sadOverlay);
checkSad=1;
}
 else {
map.getOverlays().clear();
if (checkHappy == 1) {
map.getOverlays().add(happyOverlay);
}
checkSad=0;
}
invalidateOverlay();
break;
case R.id.map:
Intent j=new Intent(this,MyMap.class);
j.putExtra(""String_Node_Str"",streetView);
j.putExtra(""String_Node_Str"",false);
j.putExtra(""String_Node_Str"",checkHappy);
j.putExtra(""String_Node_Str"",checkSad);
startActivity(j);
finish();
break;
case R.id.myTrack_button:
startActivity(new Intent(this,History.class));
break;
case R.id.myChart_button:
startActivity(new Intent(this,ChartList.class));
break;
}
map.invalidate();
}","/** 
 * Invoked when a view is clicked
 */
@Override public void onClick(View v){
switch (v.getId()) {
case R.id.switchView:
    if (streetView == 0) {
      map.setStreetView(true);
      streetView=1;
      map.setSatellite(false);
    }
 else {
      map.setStreetView(false);
      streetView=0;
      map.setSatellite(true);
    }
  map.invalidate();
break;
case R.id.showHappy:
if (checkHappy == 0) {
map.getOverlays().add(happyOverlay);
checkHappy=1;
}
 else {
map.getOverlays().clear();
if (checkSad == 1) {
  map.getOverlays().add(sadOverlay);
}
checkHappy=0;
}
invalidateOverlay();
break;
case R.id.showSad:
if (checkSad == 0) {
map.getOverlays().add(sadOverlay);
checkSad=1;
}
 else {
map.getOverlays().clear();
if (checkHappy == 1) {
map.getOverlays().add(happyOverlay);
}
checkSad=0;
}
invalidateOverlay();
break;
case R.id.map:
Intent j=new Intent(this,MyMap.class);
j.putExtra(""String_Node_Str"",streetView);
j.putExtra(""String_Node_Str"",false);
j.putExtra(""String_Node_Str"",checkHappy);
j.putExtra(""String_Node_Str"",checkSad);
startActivity(j);
finish();
break;
case R.id.myTrack_button:
startActivity(new Intent(this,History.class));
break;
case R.id.myChart_button:
HappyData datahelper=new HappyData(this);
ArrayList<HappyBottle> plottables=datahelper.getMyHistory();
chartEnable(plottables);
if (enableChart) {
startActivity(new Intent(this,ChartList.class));
}
 else {
Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",100);
toast.show();
}
break;
}
map.invalidate();
}"
44714,"/** 
 * Invoked when a view is clicked
 */
@Override public void onClick(View v){
switch (v.getId()) {
case R.id.switchView:
    if (streetView == 0) {
      map.setStreetView(true);
      streetView=1;
      map.setSatellite(false);
    }
 else {
      map.setStreetView(false);
      streetView=0;
      map.setSatellite(true);
    }
  map.invalidate();
break;
case R.id.showHappy:
if (checkHappy == 0) {
map.getOverlays().add(happyOverlay);
checkHappy=1;
}
 else {
map.getOverlays().clear();
if (checkSad == 1) {
  map.getOverlays().add(sadOverlay);
}
checkHappy=0;
}
invalidateOverlay();
break;
case R.id.showSad:
if (checkSad == 0) {
map.getOverlays().add(sadOverlay);
checkSad=1;
}
 else {
map.getOverlays().clear();
if (checkHappy == 1) {
map.getOverlays().add(happyOverlay);
}
checkSad=0;
}
invalidateOverlay();
break;
case R.id.map:
Intent j=new Intent(this,GlobalMap.class);
j.putExtra(""String_Node_Str"",streetView);
j.putExtra(""String_Node_Str"",false);
j.putExtra(""String_Node_Str"",checkHappy);
j.putExtra(""String_Node_Str"",checkSad);
startActivity(j);
finish();
break;
case R.id.myTrack_button:
startActivity(new Intent(this,History.class));
break;
case R.id.myChart_button:
startActivity(new Intent(this,ChartList.class));
break;
}
map.invalidate();
}","/** 
 * Invoked when a view is clicked
 */
@Override public void onClick(View v){
switch (v.getId()) {
case R.id.switchView:
    if (streetView == 0) {
      map.setStreetView(true);
      streetView=1;
      map.setSatellite(false);
    }
 else {
      map.setStreetView(false);
      streetView=0;
      map.setSatellite(true);
    }
  map.invalidate();
break;
case R.id.showHappy:
if (checkHappy == 0) {
map.getOverlays().add(happyOverlay);
checkHappy=1;
}
 else {
map.getOverlays().clear();
if (checkSad == 1) {
  map.getOverlays().add(sadOverlay);
}
checkHappy=0;
}
invalidateOverlay();
break;
case R.id.showSad:
if (checkSad == 0) {
map.getOverlays().add(sadOverlay);
checkSad=1;
}
 else {
map.getOverlays().clear();
if (checkHappy == 1) {
map.getOverlays().add(happyOverlay);
}
checkSad=0;
}
invalidateOverlay();
break;
case R.id.map:
Intent j=new Intent(this,GlobalMap.class);
j.putExtra(""String_Node_Str"",streetView);
j.putExtra(""String_Node_Str"",false);
j.putExtra(""String_Node_Str"",checkHappy);
j.putExtra(""String_Node_Str"",checkSad);
startActivity(j);
finish();
break;
case R.id.myTrack_button:
startActivity(new Intent(this,History.class));
break;
case R.id.myChart_button:
HappyData datahelper=new HappyData(this);
ArrayList<HappyBottle> plottables=datahelper.getMyHistory();
chartEnable(plottables);
if (enableChart) {
startActivity(new Intent(this,ChartList.class));
}
 else {
Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",100);
toast.show();
}
break;
}
map.invalidate();
}"
44715,"/** 
 * Saves the update as a bottle and adds the bottle to the DB
 * @param msg
 */
private void saveUpdate(String msg){
  if (GPS_longitude == 0 && GPS_latitude == 0) {
    GPS_longitude=Network_longitude;
    GPS_latitude=Network_latitude;
  }
  if (GPS_longitude == 0 && GPS_latitude == 0) {
    Location lastKnownGPSLocation=gpsLocationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
    Location lastKnownNetworkLocation=networkLocationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
    Location lastBestKnownLocation;
    if (lastKnownGPSLocation.getTime() > lastKnownNetworkLocation.getTime()) {
      lastBestKnownLocation=lastKnownGPSLocation;
    }
 else {
      lastBestKnownLocation=lastKnownNetworkLocation;
    }
    GPS_latitude=(int)(lastBestKnownLocation.getLatitude() * 1E6);
    GPS_longitude=(int)(lastBestKnownLocation.getLongitude() * 1E6);
  }
  HappyBottle b=new HappyBottle(myID,GPS_latitude,GPS_longitude,emotion,msg,System.currentTimeMillis());
  dataHelper=new HappyData(this);
  dataHelper.addBottle(b);
}","/** 
 * Saves the update as a bottle and adds the bottle to the DB
 * @param msg
 */
private void saveUpdate(String msg){
  if (GPS_longitude == 0 && GPS_latitude == 0) {
    GPS_longitude=Network_longitude;
    GPS_latitude=Network_latitude;
  }
  if (GPS_longitude == 0 && GPS_latitude == 0) {
    Location lastKnownGPSLocation=gpsLocationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
    Location lastKnownNetworkLocation=networkLocationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
    Location lastBestKnownLocation;
    try {
      if (lastKnownGPSLocation.getTime() > lastKnownNetworkLocation.getTime()) {
        lastBestKnownLocation=lastKnownGPSLocation;
      }
 else {
        lastBestKnownLocation=lastKnownNetworkLocation;
      }
      GPS_latitude=(int)(lastBestKnownLocation.getLatitude() * 1E6);
      GPS_longitude=(int)(lastBestKnownLocation.getLongitude() * 1E6);
    }
 catch (    Exception e) {
    }
  }
  HappyBottle b=new HappyBottle(myID,GPS_latitude,GPS_longitude,emotion,msg,System.currentTimeMillis());
  dataHelper=new HappyData(this);
  dataHelper.addBottle(b);
}"
44716,"public long getSetUID(SharedPreferences sp,Context ctx){
  long tempID=this.getUID();
  if (tempID >= 0) {
    return tempID;
  }
  final AccountManager manager=AccountManager.get(ctx);
  final Account[] accounts=manager.getAccounts();
  if (accounts.length > 1) {
    String username=new String(accounts[0].name);
    long uid=sp.getLong(""String_Node_Str"",-1);
    UIDtoken.INSTANCE.setUID(uid);
    if (uid < 0) {
      NetHelper NH=new NetHelper();
      long UID=NH.getID(username);
      SharedPreferences.Editor editor=sp.edit();
      editor.putLong(""String_Node_Str"",UID);
      editor.putString(""String_Node_Str"",username);
      editor.commit();
      UIDtoken.INSTANCE.setUID(UID);
      return UID;
    }
 else {
      return -1;
    }
  }
  return -5;
}","public long getSetUID(SharedPreferences sp,Context ctx){
  long tempID=this.getUID();
  if (tempID >= 0) {
    return tempID;
  }
  final AccountManager manager=AccountManager.get(ctx);
  final Account[] accounts=manager.getAccounts();
  if (accounts.length >= 1) {
    String username=new String(accounts[0].name);
    long uid=sp.getLong(""String_Node_Str"",-1);
    UIDtoken.INSTANCE.setUID(uid);
    if (uid < 0) {
      NetHelper NH=new NetHelper();
      long UID=NH.getID(username);
      SharedPreferences.Editor editor=sp.edit();
      editor.putLong(""String_Node_Str"",UID);
      editor.putString(""String_Node_Str"",username);
      editor.commit();
      UIDtoken.INSTANCE.setUID(UID);
      return UID;
    }
 else {
      return -1;
    }
  }
  return -5;
}"
44717,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  View sadButton=findViewById(R.id.sad_button);
  View happyButton=findViewById(R.id.happy_button);
  happyButton.setOnClickListener(this);
  sadButton.setOnClickListener(this);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  Log.v(TAG,""String_Node_Str"" + TABLE_NAME + ""String_Node_Str""+ _ID+ ""String_Node_Str""+ UID+ ""String_Node_Str""+ LAT+ ""String_Node_Str""+ LONG+ ""String_Node_Str""+ EMO+ ""String_Node_Str""+ MSG+ ""String_Node_Str""+ TIME+ ""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  View sadButton=findViewById(R.id.sad_button);
  View happyButton=findViewById(R.id.happy_button);
  happyButton.setOnClickListener(this);
  sadButton.setOnClickListener(this);
}"
44718,"public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.more);
  Intent sender=getIntent();
  extradata=sender.getExtras().getString(""String_Node_Str"");
  TextView t=(TextView)findViewById(R.id.more_text);
  t.setText(extradata);
  emotion=sender.getExtras().getInt(""String_Node_Str"");
  EditText textField=(EditText)findViewById(R.id.more_textbox);
  textField.setOnKeyListener(this);
  TextView locationView=(TextView)findViewById(R.id.location);
  locationView.setText(""String_Node_Str"");
  updates=new HappyData(this);
  View submitButton=findViewById(R.id.more_to_dash);
  submitButton.setOnClickListener(this);
  LocationManager locationManager=(LocationManager)this.getSystemService(Context.LOCATION_SERVICE);
  Log.d(TAG,""String_Node_Str"");
  LocationListener locationListener=new LocationListener(){
    public void onLocationChanged(    Location location){
      makeUseOfNewLocation(location);
    }
    public void onStatusChanged(    String provider,    int status,    Bundle extras){
    }
    public void onProviderEnabled(    String provider){
    }
    public void onProviderDisabled(    String provider){
    }
  }
;
  Log.d(TAG,""String_Node_Str"");
  locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,locationListener);
  Location location=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
  double longitude=location.getLongitude();
  double latitude=location.getLatitude();
  makeUseOfNewLocation(location);
  locationManager.removeUpdates(locationListener);
}","public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.more);
  Intent sender=getIntent();
  extradata=sender.getExtras().getString(""String_Node_Str"");
  TextView t=(TextView)findViewById(R.id.more_text);
  t.setText(extradata);
  emotion=sender.getExtras().getInt(""String_Node_Str"");
  EditText textField=(EditText)findViewById(R.id.more_textbox);
  textField.setOnKeyListener(this);
  TextView locationView=(TextView)findViewById(R.id.location);
  locationView.setText(""String_Node_Str"");
  updates=new HappyData(this);
  View submitButton=findViewById(R.id.more_to_dash);
  submitButton.setOnClickListener(this);
  LocationManager locationManager=(LocationManager)this.getSystemService(Context.LOCATION_SERVICE);
  Log.d(TAG,""String_Node_Str"");
  LocationListener locationListener=new LocationListener(){
    public void onLocationChanged(    Location location){
      makeUseOfNewLocation(location);
    }
    public void onStatusChanged(    String provider,    int status,    Bundle extras){
    }
    public void onProviderEnabled(    String provider){
    }
    public void onProviderDisabled(    String provider){
    }
  }
;
  Log.d(TAG,""String_Node_Str"");
  locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,locationListener);
  try {
    Location location=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
    double longitude=location.getLongitude();
    double latitude=location.getLatitude();
    makeUseOfNewLocation(location);
  }
 catch (  Exception e) {
    Log.d(TAG,""String_Node_Str"");
  }
  locationManager.removeUpdates(locationListener);
}"
44719,"/** 
 * Removes a player from jail to a location. Throws a JailException that contains a formatted message, meant to be sent to a player.
 * @param name
 * @param location
 * @throws JailException 
 */
public void unjailPlayer(String name,Location loc) throws JailException {
  Player player=this.getServer().getPlayer(name);
  name=player == null || !player.isOnline() ? name.toLowerCase() : player.getName().toLowerCase();
  PlayerUnjailEvent e=new PlayerUnjailEvent(new JailInfo(name,jailed.getString(name + ""String_Node_Str"")),unjailLoc);
  e.getInfo().addProperties((Map<String,Object>)jailed.get(name + ""String_Node_Str""));
  this.getServer().getPluginManager().callEvent(e);
  if (e.isCancelled())   return;
  if (jailed.get(name) == null) {
    throw new JailException(""String_Node_Str"",JailMessage.NOT_IN_JAIL.message(name));
  }
  if (player == null || !player.isOnline()) {
    jailed.set(name + ""String_Node_Str"",""String_Node_Str"");
    return;
  }
  player.teleport(e.getUnjailLocation());
  this.setGroups(name,jailed.getStringList(name + ""String_Node_Str""));
  jailed.set(name,null);
  this.saveJail();
  JailMessage.UNJAILED.send(player);
}","/** 
 * Removes a player from jail to a location. Throws a JailException that contains a formatted message, meant to be sent to a player.
 * @param name
 * @param location
 * @throws JailException 
 */
public void unjailPlayer(String name,Location loc) throws JailException {
  Player player=this.getServer().getPlayer(name);
  name=player == null || !player.isOnline() ? name.toLowerCase() : player.getName().toLowerCase();
  PlayerUnjailEvent e=new PlayerUnjailEvent(new JailInfo(name,jailed.getString(name + ""String_Node_Str"")),unjailLoc);
  if (jailed.getConfigurationSection(name + ""String_Node_Str"") != null)   e.getInfo().addProperties(jailed.getConfigurationSection(name + ""String_Node_Str"").getValues(true));
  this.getServer().getPluginManager().callEvent(e);
  if (e.isCancelled())   return;
  if (jailed.get(name) == null) {
    throw new JailException(""String_Node_Str"",JailMessage.NOT_IN_JAIL.message(name));
  }
  if (player == null || !player.isOnline()) {
    jailed.set(name + ""String_Node_Str"",""String_Node_Str"");
    return;
  }
  player.teleport(e.getUnjailLocation());
  this.setGroups(name,jailed.getStringList(name + ""String_Node_Str""));
  jailed.set(name,null);
  this.saveJail();
  JailMessage.UNJAILED.send(player);
}"
44720,"/** 
 * Sets the current jailed status of a player.
 * @param player the player to check for
 * @return 
 */
public void setPlayerStatus(String player,JailStatus status){
  jailed.set(player.toLowerCase() + ""String_Node_Str"",status);
}","/** 
 * Sets the current jailed status of a player.
 * @param player the player to check for
 * @return 
 */
public void setPlayerStatus(String player,JailStatus status){
  jailed.set(player.toLowerCase() + ""String_Node_Str"",status.toString());
}"
44721,"public void loadConfig(){
  YamlConfiguration config=(YamlConfiguration)this.getConfig();
  jailLoc=new Location(this.getServer().getWorld(config.getString(""String_Node_Str"",this.getServer().getWorlds().get(0).getName())),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0));
  unjailLoc=new Location(this.getServer().getWorld(config.getString(""String_Node_Str"",this.getServer().getWorlds().get(0).getName())),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0));
  jailGroup=config.getString(""String_Node_Str"",""String_Node_Str"");
  File f=new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  try {
    if (!f.exists())     f.createNewFile();
  }
 catch (  IOException ex) {
  }
  jailed=new YamlConfiguration();
  try {
    config.save(this.getConfig().getCurrentPath());
    jailed.load(f);
  }
 catch (  Exception ex) {
  }
}","public void loadConfig(){
  YamlConfiguration config=(YamlConfiguration)this.getConfig();
  config.options().copyDefaults(true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",this.getServer().getWorlds().get(0).getName());
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",this.getServer().getWorlds().get(0).getName());
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",0);
  jailed=new YamlConfiguration();
  File f=new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  try {
    if (!f.exists()) {
      f.getParentFile().mkdirs();
      f.createNewFile();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  try {
    jailed.load(f);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  jailLoc=new Location(this.getServer().getWorld(config.getString(""String_Node_Str"",this.getServer().getWorlds().get(0).getName())),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0));
  unjailLoc=new Location(this.getServer().getWorld(config.getString(""String_Node_Str"",this.getServer().getWorlds().get(0).getName())),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0),config.getInt(""String_Node_Str"",0));
  jailGroup=config.getString(""String_Node_Str"",""String_Node_Str"");
  this.saveConfig();
}"
44722,"public void setUnjail(CommandSender sender,String[] args){
  if (!(sender instanceof Player) && args.length != 4) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (args.length == 0) {
    Player player=(Player)sender;
    unjailLoc=player.getLocation();
  }
 else {
    if (!(new Scanner(args[0]).hasNextInt()) || !(new Scanner(args[1]).hasNextInt()) || !(new Scanner(args[2]).hasNextInt())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    unjailLoc=new Location(this.getServer().getWorld(args[3]),Integer.parseInt(args[0]),Integer.parseInt(args[1]),Integer.parseInt(args[2]));
  }
  Configuration config=this.getConfiguration();
  config.setProperty(""String_Node_Str"",unjailLoc.getX());
  config.setProperty(""String_Node_Str"",unjailLoc.getY());
  config.setProperty(""String_Node_Str"",unjailLoc.getZ());
  config.setProperty(""String_Node_Str"",unjailLoc.getWorld().getName());
  config.save();
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void setUnjail(CommandSender sender,String[] args){
  if (!(sender instanceof Player) && args.length != 4) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (args.length == 0) {
    Player player=(Player)sender;
    unjailLoc=player.getLocation();
  }
 else {
    if (!(new Scanner(args[0]).hasNextInt()) || !(new Scanner(args[1]).hasNextInt()) || !(new Scanner(args[2]).hasNextInt())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    unjailLoc=new Location(this.getServer().getWorld(args[3]),Integer.parseInt(args[0]),Integer.parseInt(args[1]),Integer.parseInt(args[2]));
  }
  YamlConfiguration config=(YamlConfiguration)this.getConfig();
  config.set(""String_Node_Str"",unjailLoc.getX());
  config.set(""String_Node_Str"",unjailLoc.getY());
  config.set(""String_Node_Str"",unjailLoc.getZ());
  config.set(""String_Node_Str"",unjailLoc.getWorld().getName());
  this.saveConfig();
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44723,"public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  args[0]=(player == null) ? args[0].toLowerCase() : player.getName().toLowerCase();
  if (jailed.get(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (player != null)   player.teleport(jailLoc);
  List<String> groupName=this.getGroups(args[0]);
  jailed.set(args[0] + ""String_Node_Str"",groupName);
  this.setGroup(args[0],jailGroup);
  int minutes=0;
  if (args.length == 2) {
    minutes=this.parseTimeString(args[1]);
    if (minutes != -1) {
      double tempTime=System.currentTimeMillis() + (minutes * 60000);
      jailed.set(args[0] + ""String_Node_Str"",tempTime);
    }
  }
  try {
    jailed.save(jailed.getCurrentPath());
  }
 catch (  IOException ex) {
  }
  if (player != null) {
    if (args.length == 1 || minutes == -1)     player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
 else     player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + this.prettifyMinutes(minutes)+ ""String_Node_Str"");
  }
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  args[0]=(player == null) ? args[0].toLowerCase() : player.getName().toLowerCase();
  if (jailed.get(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (player != null)   player.teleport(jailLoc);
  List<String> groupName=this.getGroups(args[0]);
  jailed.set(args[0] + ""String_Node_Str"",groupName);
  this.setGroup(args[0],jailGroup);
  int minutes=0;
  if (args.length == 2) {
    minutes=this.parseTimeString(args[1]);
    if (minutes != -1) {
      double tempTime=System.currentTimeMillis() + (minutes * 60000);
      jailed.set(args[0] + ""String_Node_Str"",tempTime);
    }
  }
  this.saveJail();
  if (player != null) {
    if (args.length == 1 || minutes == -1)     player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
 else     player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + this.prettifyMinutes(minutes)+ ""String_Node_Str"");
  }
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44724,"public void setJail(CommandSender sender,String[] args){
  if (!(sender instanceof Player) && args.length != 4) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (args.length == 0) {
    Player player=(Player)sender;
    jailLoc=player.getLocation();
  }
 else {
    if (!(new Scanner(args[0]).hasNextInt()) || !(new Scanner(args[1]).hasNextInt()) || !(new Scanner(args[2]).hasNextInt())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    jailLoc=new Location(this.getServer().getWorld(args[3]),Integer.parseInt(args[0]),Integer.parseInt(args[1]),Integer.parseInt(args[2]));
  }
  Configuration config=this.getConfiguration();
  config.setProperty(""String_Node_Str"",jailLoc.getX());
  config.setProperty(""String_Node_Str"",jailLoc.getY());
  config.setProperty(""String_Node_Str"",jailLoc.getZ());
  config.setProperty(""String_Node_Str"",jailLoc.getWorld().getName());
  config.save();
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void setJail(CommandSender sender,String[] args){
  if (!(sender instanceof Player) && args.length != 4) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (args.length == 0) {
    Player player=(Player)sender;
    jailLoc=player.getLocation();
  }
 else {
    if (!(new Scanner(args[0]).hasNextInt()) || !(new Scanner(args[1]).hasNextInt()) || !(new Scanner(args[2]).hasNextInt())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    jailLoc=new Location(this.getServer().getWorld(args[3]),Integer.parseInt(args[0]),Integer.parseInt(args[1]),Integer.parseInt(args[2]));
  }
  YamlConfiguration config=(YamlConfiguration)this.getConfig();
  config.set(""String_Node_Str"",jailLoc.getX());
  config.set(""String_Node_Str"",jailLoc.getY());
  config.set(""String_Node_Str"",jailLoc.getZ());
  config.set(""String_Node_Str"",jailLoc.getWorld().getName());
  this.saveConfig();
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44725,"@Override @SuppressWarnings(""String_Node_Str"") public void onEnable(){
  this.loadConfig();
  if (!useBukkitPermissions)   this.setupPermissions();
  listener=new SimpleJailPlayerListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,listener,Priority.High,this);
  log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}","@Override @SuppressWarnings(""String_Node_Str"") public void onEnable(){
  this.loadConfig();
  if (!useBukkitPermissions)   this.setupPermissions();
 else   bukkitPermissions=(PermissionsPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  listener=new SimpleJailPlayerListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,listener,Priority.High,this);
  log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}"
44726,"public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (useBukkitPermissions || !newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    this.setGroup(player,jailList);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (useBukkitPermissions || !newPerms) {
    Object groupName;
    if (useBukkitPermissions) {
      groupName=bukkitPermissions.getGroups(player.getName());
    }
 else {
      groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    }
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    this.setGroup(player,jailList);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44727,"public void jailPlayer(CommandSender sender,String[] args){
  args[0]=args[0].toLowerCase();
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (!newPerms) {
    jailed.setProperty(args[0],perms.getString(""String_Node_Str"" + args[0] + ""String_Node_Str""));
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailGroup);
  }
 else {
    List groupList=perms.getList(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    if (groupList == null)     groupList=new ArrayList();
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailList);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void jailPlayer(CommandSender sender,String[] args){
  args[0]=args[0].toLowerCase();
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (!newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null)     groupList=new ArrayList();
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailList);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44728,"public void unjailPlayer(CommandSender sender,String[] args){
  args[0]=args[0].toLowerCase();
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  if (jailed.getProperty(args[0]) == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),unjailCoords[0],unjailCoords[1],unjailCoords[2]));
  if (!newPerms) {
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailed.getString(args[0]));
    jailed.removeProperty(args[0]);
  }
 else {
    if (jailed.getProperty(args[0]) instanceof String)     this.convertPermission(args[0]);
    List groupList=jailed.getList(args[0]);
    if (groupList == null)     groupList=new ArrayList();
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",groupList);
    jailed.removeProperty(args[0]);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void unjailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),unjailCoords[0],unjailCoords[1],unjailCoords[2]));
  if (!newPerms) {
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailed.getString(args[0]));
    jailed.removeProperty(args[0]);
  }
 else {
    if (jailed.getProperty(args[0]) instanceof String)     this.convertPermission(args[0]);
    List groupList=jailed.getList(args[0]);
    if (groupList == null)     groupList=new ArrayList();
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",groupList);
    jailed.removeProperty(args[0]);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44729,"public void jailPlayer(CommandSender sender,String[] args){
  args[0]=args[0].toLowerCase();
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (!newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null)     groupList=new ArrayList();
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailList);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (!newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null)     groupList=new ArrayList();
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    perms.setProperty(""String_Node_Str"" + args[0] + ""String_Node_Str"",jailList);
  }
  jailed.save();
  perms.save();
  this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44730,"public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (useBukkitPermissions || !newPerms) {
    List<String> groupName;
    List groups=bukkitPermissions.getGroups(player.getName());
    groupName=new ArrayList();
    for (    Object g : groups) {
      String gName=((Group)g).getName();
      groupName.add(gName);
    }
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else   if (!newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    this.setGroup(player,jailList);
  }
  jailed.save();
  if (!useBukkitPermissions)   perms.save();
  if (!useBukkitPermissions)   this.getServer().dispatchCommand(console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (useBukkitPermissions) {
    List<String> groupName;
    List groups=bukkitPermissions.getGroups(player.getName());
    groupName=new ArrayList();
    for (    Object g : groups) {
      String gName=((Group)g).getName();
      groupName.add(gName);
    }
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else   if (!newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    this.setGroup(player,jailList);
  }
  jailed.save();
  if (!useBukkitPermissions)   perms.save();
  if (!useBukkitPermissions)   this.getServer().dispatchCommand(console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44731,"@Override @SuppressWarnings(""String_Node_Str"") public void onEnable(){
  this.loadConfig();
  if (!useBukkitPermissions)   this.setupPermissions();
 else   bukkitPermissions=(PermissionsPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  listener=new SimpleJailPlayerListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,listener,Priority.High,this);
  log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}","@Override @SuppressWarnings(""String_Node_Str"") public void onEnable(){
  console=((CraftServer)this.getServer()).getServer().console;
  this.loadConfig();
  if (!useBukkitPermissions)   this.setupPermissions();
 else   bukkitPermissions=(PermissionsPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  listener=new SimpleJailPlayerListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,listener,Priority.High,this);
  log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ this.getDescription().getVersion()+ ""String_Node_Str"");
}"
44732,"public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (useBukkitPermissions || !newPerms) {
    Object groupName;
    if (useBukkitPermissions) {
      List groups=bukkitPermissions.getGroups(player.getName());
      groupName=new ArrayList();
      for (      Object g : groups) {
        String gName=((Group)g).getName();
        gName=gName.replaceAll(Matcher.quoteReplacement(""String_Node_Str""),""String_Node_Str"");
        gName=gName.replaceAll(Matcher.quoteReplacement(""String_Node_Str""),""String_Node_Str"");
        gName=gName.replaceAll(Matcher.quoteReplacement(""String_Node_Str""),""String_Node_Str"");
        ((ArrayList)groupName).add(((Group)g).getName());
      }
    }
 else {
      groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    }
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    this.setGroup(player,jailList);
  }
  jailed.save();
  if (!useBukkitPermissions)   perms.save();
  if (!useBukkitPermissions)   this.getServer().dispatchCommand(console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void jailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),jailCoords[0],jailCoords[1],jailCoords[2]));
  if (useBukkitPermissions || !newPerms) {
    List<String> groupName;
    List groups=bukkitPermissions.getGroups(player.getName());
    groupName=new ArrayList();
    for (    Object g : groups) {
      String gName=((Group)g).getName();
      groupName.add(gName);
    }
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else   if (!newPerms) {
    String groupName=permissions.getGroup(this.getServer().getWorlds().get(0).getName(),args[0]);
    jailed.setProperty(args[0],groupName);
    this.setGroup(player,jailGroup);
  }
 else {
    String[] groupName=permissions.getGroups(this.getServer().getWorlds().get(0).getName(),args[0]);
    List groupList=Arrays.asList(groupName);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    jailed.setProperty(args[0],groupList);
    List jailList=new ArrayList();
    jailList.add(jailGroup);
    this.setGroup(player,jailList);
  }
  jailed.save();
  if (!useBukkitPermissions)   perms.save();
  if (!useBukkitPermissions)   this.getServer().dispatchCommand(console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44733,"public void unjailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),unjailCoords[0],unjailCoords[1],unjailCoords[2]));
  if (useBukkitPermissions || !newPerms) {
    this.setGroup(player,jailed.getString(args[0]));
  }
 else {
    if (jailed.getProperty(args[0]) instanceof String) {
      this.convertPermission(args[0]);
    }
    List groupList=jailed.getList(args[0]);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    this.setGroup(player,groupList);
  }
  jailed.removeProperty(args[0]);
  jailed.save();
  if (!useBukkitPermissions)   perms.save();
  if (!useBukkitPermissions)   this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}","public void unjailPlayer(CommandSender sender,String[] args){
  Player player=this.getServer().getPlayer(args[0]);
  if (player == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return;
  }
  args[0]=player.getName();
  if (!(args[0].equals(args[0].toLowerCase())) && jailed.getProperty(args[0].toLowerCase()) != null) {
    jailed.setProperty(args[0],args[0].toLowerCase());
    jailed.removeProperty(args[0].toLowerCase());
  }
  if (jailed.getProperty(args[0]) == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.teleport(new Location(player.getWorld(),unjailCoords[0],unjailCoords[1],unjailCoords[2]));
  if (useBukkitPermissions) {
    this.setGroup(player,jailed.getStringList(args[0],new ArrayList()));
  }
 else   if (!newPerms) {
    this.setGroup(player,jailed.getString(args[0]));
  }
 else {
    if (jailed.getProperty(args[0]) instanceof String) {
      this.convertPermission(args[0]);
    }
    List groupList=jailed.getList(args[0]);
    if (groupList == null) {
      groupList=new ArrayList();
    }
    this.setGroup(player,groupList);
  }
  jailed.removeProperty(args[0]);
  jailed.save();
  if (!useBukkitPermissions)   perms.save();
  if (!useBukkitPermissions)   this.getServer().dispatchCommand(((CraftServer)getServer()).getServer().console,""String_Node_Str"");
  sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}"
44734,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR || pc.getSenderLocation().getBlock().getType() == Material.SPRUCE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.BIRCH_DOOR || pc.getSenderLocation().getBlock().getType() == Material.JUNGLE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.ACACIA_DOOR || pc.getSenderLocation().getBlock().getType() == Material.DARK_OAK_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}"
44735,"public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF || mBlock == Material.REDSTONE_LAMP_ON || mBlock == Material.REDSTONE_TORCH_OFF || mBlock == Material.REDSTONE_TORCH_ON) {
    return keepAlives.contains(b) ? 15 : 0;
  }
  return b.getBlockPower();
}","public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.SPRUCE_DOOR || mBlock == Material.BIRCH_DOOR || mBlock == Material.JUNGLE_DOOR || mBlock == Material.ACACIA_DOOR || mBlock == Material.DARK_OAK_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE || mBlock == Material.SPRUCE_FENCE_GATE || mBlock == Material.BIRCH_FENCE_GATE || mBlock == Material.JUNGLE_FENCE_GATE || mBlock == Material.ACACIA_FENCE_GATE || mBlock == Material.DARK_OAK_FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF || mBlock == Material.REDSTONE_LAMP_ON || mBlock == Material.REDSTONE_TORCH_OFF || mBlock == Material.REDSTONE_TORCH_ON) {
    return keepAlives.contains(b) ? 15 : 0;
  }
  return b.getBlockPower();
}"
44736,"private static void setReceiver(Block block,boolean powerOn){
  Material mBlock=block.getType();
  int iData=(int)block.getData();
  if (mBlock == Material.LEVER) {
    if (!plugin.isApiOudated()) {
      if ((powerOn && (iData & 0x08) != 0x08) || (!powerOn && (iData & 0x08) == 0x08)) {
        CraftBlock cbBlock=(CraftBlock)block;
        BlockState cbState=cbBlock.getState();
        net.minecraft.server.v1_10_R1.WorldServer w=((CraftWorld)block.getWorld()).getHandle();
        Location l=block.getLocation();
        int blockX=l.getBlockX();
        int blockY=l.getBlockY();
        int blockZ=l.getBlockZ();
        BlockPosition bp=new BlockPosition(blockX,blockY,blockZ);
        int blockData=cbState.getRawData();
        int j1=blockData & 7;
        int k1=8 - (blockData & 8);
        net.minecraft.server.v1_10_R1.Block netBlock=w.getType(bp).getBlock();
        w.setTypeAndData(bp,netBlock.fromLegacyData(j1 + k1),3);
        w.applyPhysics(bp,netBlock);
        if (j1 == 1) {
          w.applyPhysics(new BlockPosition(blockX - 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 2) {
          w.applyPhysics(new BlockPosition(blockX + 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 3) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ - 1),netBlock);
        }
 else         if (j1 == 4) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ + 1),netBlock);
        }
 else         if (j1 != 5 && j1 != 6) {
          if (j1 == 0 || j1 == 7) {
            w.applyPhysics(new BlockPosition(blockX,blockY + 1,blockZ),netBlock);
          }
        }
 else {
          w.applyPhysics(new BlockPosition(blockX,blockY - 1,blockZ),netBlock);
        }
      }
    }
 else {
      BlockState state=block.getState();
      Lever lever=(Lever)state.getData();
      lever.setPowered(powerOn);
      state.setData(lever);
      state.update();
    }
  }
 else   if (mBlock == Material.POWERED_RAIL) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR) {
    Block bOtherPiece=block.getRelative(((iData & 0x08) == 0x08) ? BlockFace.DOWN : BlockFace.UP);
    int iOtherPieceData=(int)bOtherPiece.getData();
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
      iOtherPieceData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
      iOtherPieceData^=0x04;
    }
    block.setData((byte)iData);
    bOtherPiece.setData((byte)iOtherPieceData);
    block.getWorld().playEffect(block.getLocation(),Effect.DOOR_TOGGLE,0,10);
  }
 else   if (mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.PISTON_BASE || mBlock == Material.PISTON_STICKY_BASE) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.REDSTONE_LAMP_ON) {
    if (!powerOn) {
      keepAlives.remove(block);
      block.setType(Material.REDSTONE_LAMP_OFF);
    }
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF) {
    if (powerOn) {
      keepAlives.add(block);
      net.minecraft.server.v1_10_R1.World w=((CraftWorld)block.getWorld()).getHandle();
      try {
        setStaticStatus(w,true);
        block.setType(Material.REDSTONE_LAMP_ON);
        setStaticStatus(w,false);
      }
 catch (      NoSuchFieldException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}","private static void setReceiver(Block block,boolean powerOn){
  Material mBlock=block.getType();
  int iData=(int)block.getData();
  if (mBlock == Material.LEVER) {
    if (!plugin.isApiOudated()) {
      if ((powerOn && (iData & 0x08) != 0x08) || (!powerOn && (iData & 0x08) == 0x08)) {
        CraftBlock cbBlock=(CraftBlock)block;
        BlockState cbState=cbBlock.getState();
        net.minecraft.server.v1_10_R1.WorldServer w=((CraftWorld)block.getWorld()).getHandle();
        Location l=block.getLocation();
        int blockX=l.getBlockX();
        int blockY=l.getBlockY();
        int blockZ=l.getBlockZ();
        BlockPosition bp=new BlockPosition(blockX,blockY,blockZ);
        int blockData=cbState.getRawData();
        int j1=blockData & 7;
        int k1=8 - (blockData & 8);
        net.minecraft.server.v1_10_R1.Block netBlock=w.getType(bp).getBlock();
        w.setTypeAndData(bp,netBlock.fromLegacyData(j1 + k1),3);
        w.applyPhysics(bp,netBlock);
        if (j1 == 1) {
          w.applyPhysics(new BlockPosition(blockX - 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 2) {
          w.applyPhysics(new BlockPosition(blockX + 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 3) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ - 1),netBlock);
        }
 else         if (j1 == 4) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ + 1),netBlock);
        }
 else         if (j1 != 5 && j1 != 6) {
          if (j1 == 0 || j1 == 7) {
            w.applyPhysics(new BlockPosition(blockX,blockY + 1,blockZ),netBlock);
          }
        }
 else {
          w.applyPhysics(new BlockPosition(blockX,blockY - 1,blockZ),netBlock);
        }
      }
    }
 else {
      BlockState state=block.getState();
      Lever lever=(Lever)state.getData();
      lever.setPowered(powerOn);
      state.setData(lever);
      state.update();
    }
  }
 else   if (mBlock == Material.POWERED_RAIL) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.SPRUCE_DOOR || mBlock == Material.BIRCH_DOOR || mBlock == Material.JUNGLE_DOOR || mBlock == Material.ACACIA_DOOR || mBlock == Material.DARK_OAK_DOOR) {
    Block bOtherPiece=block.getRelative(((iData & 0x08) == 0x08) ? BlockFace.DOWN : BlockFace.UP);
    int iOtherPieceData=(int)bOtherPiece.getData();
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
      iOtherPieceData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
      iOtherPieceData^=0x04;
    }
    block.setData((byte)iData);
    bOtherPiece.setData((byte)iOtherPieceData);
    block.getWorld().playEffect(block.getLocation(),Effect.DOOR_TOGGLE,0,10);
  }
 else   if (mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE || mBlock == Material.SPRUCE_FENCE_GATE || mBlock == Material.BIRCH_FENCE_GATE || mBlock == Material.JUNGLE_FENCE_GATE || mBlock == Material.ACACIA_FENCE_GATE || mBlock == Material.DARK_OAK_FENCE_GATE) {
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.PISTON_BASE || mBlock == Material.PISTON_STICKY_BASE) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.REDSTONE_LAMP_ON) {
    if (!powerOn) {
      keepAlives.remove(block);
      block.setType(Material.REDSTONE_LAMP_OFF);
    }
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF) {
    if (powerOn) {
      keepAlives.add(block);
      net.minecraft.server.v1_10_R1.World w=((CraftWorld)block.getWorld()).getHandle();
      try {
        setStaticStatus(w,true);
        block.setType(Material.REDSTONE_LAMP_ON);
        setStaticStatus(w,false);
      }
 catch (      NoSuchFieldException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}"
44737,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE) {
      int current=CircuitManager.getBlockCurrent(block);
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),current,current > 0 ? 0 : 15);
    }
 else     if (block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),5,0);
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.SPRUCE_DOOR || block.getType() == Material.BIRCH_DOOR || block.getType() == Material.JUNGLE_DOOR || block.getType() == Material.ACACIA_DOOR || block.getType() == Material.DARK_OAK_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE || block.getType() == Material.SPRUCE_FENCE_GATE || block.getType() == Material.BIRCH_FENCE_GATE || block.getType() == Material.JUNGLE_FENCE_GATE || block.getType() == Material.ACACIA_FENCE_GATE || block.getType() == Material.DARK_OAK_FENCE_GATE) {
      int current=CircuitManager.getBlockCurrent(block);
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),current,current > 0 ? 0 : 15);
    }
 else     if (block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),5,0);
    }
  }
}"
44738,"public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
  return b.getBlockPower();
}","public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF || mBlock == Material.REDSTONE_LAMP_ON || mBlock == Material.REDSTONE_TORCH_OFF || mBlock == Material.REDSTONE_TORCH_ON) {
    return keepAlives.contains(b) ? 15 : 0;
  }
  return b.getBlockPower();
}"
44739,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR || pc.getSenderLocation().getBlock().getType() == Material.SPRUCE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.BIRCH_DOOR || pc.getSenderLocation().getBlock().getType() == Material.JUNGLE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.ACACIA_DOOR || pc.getSenderLocation().getBlock().getType() == Material.DARK_OAK_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR || pc.getSenderLocation().getBlock().getType() == Material.SPRUCE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.BIRCH_DOOR || pc.getSenderLocation().getBlock().getType() == Material.JUNGLE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.ACACIA_DOOR || pc.getSenderLocation().getBlock().getType() == Material.DARK_OAK_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}"
44740,"@EventHandler(priority=EventPriority.LOW) public void onBlockRedstoneChange(BlockRedstoneEvent event){
}","@EventHandler(priority=EventPriority.LOW) public void onBlockRedstoneChange(BlockRedstoneEvent event){
  if (CircuitManager.circuitExists(event.getBlock().getLocation())) {
    CircuitManager.activateCircuit(event.getBlock().getLocation(),event.getNewCurrent());
  }
  if (CircuitManager.shouldLeaveReceiverOn(event.getBlock())) {
    event.setNewCurrent(15);
  }
}"
44741,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || dDelay > QuantumConnectors.MAX_DELAY_TIME) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ (dDelay == 0 ? ""String_Node_Str"" : dDelay + ""String_Node_Str"")+ ""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,args[0] + ""String_Node_Str"" + sDelayMsg);
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,""String_Node_Str"" + args[0] + sDelayMsg);
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || dDelay > QuantumConnectors.MAX_DELAY_TIME) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ (dDelay == 0 ? ""String_Node_Str"" : dDelay + ""String_Node_Str"")+ ""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,args[0] + ""String_Node_Str"" + sDelayMsg);
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,""String_Node_Str"" + args[0] + sDelayMsg);
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}"
44742,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE || block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),CircuitManager.getBlockCurrent(block));
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),CircuitManager.getBlockCurrent(block));
    }
 else     if (block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),5);
    }
  }
}"
44743,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      int iDelay=0;
      if (args.length > 1) {
        try {
          iDelay=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException e) {
          iDelay=-1;
        }
        if (iDelay < 0 || iDelay > QuantumConnectors.MAX_DELAY_TIME) {
          iDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelay);
        plugin.msg(player,""String_Node_Str"");
      }
 else {
        plugin.msg(player,""String_Node_Str"" + args[0] + ""String_Node_Str""+ (iDelay == 0 ? ""String_Node_Str"" : iDelay + ""String_Node_Str"")+ ""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      int iDelay=0;
      if (args.length > 1) {
        try {
          iDelay=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException e) {
          iDelay=-1;
        }
        if (iDelay < 0 || iDelay > QuantumConnectors.MAX_DELAY_TIME) {
          iDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelay);
        plugin.msg(player,""String_Node_Str"");
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelay);
        plugin.msg(player,""String_Node_Str"" + args[0] + ""String_Node_Str""+ (iDelay == 0 ? ""String_Node_Str"" : iDelay + ""String_Node_Str"")+ ""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}"
44744,"public CircuitManager(final QuantumConnectors qc){
  this.plugin=qc;
}","public CircuitManager(final QuantumConnectors qc){
  this.plugin=qc;
  for (  World world : plugin.getServer().getWorlds()) {
    loadWorld(world);
  }
}"
44745,"public byte getTypeCode(String type) throws ApplicationFault {
  if (this.types.containsKey(type))   return this.types.get(type);
  throw new ApplicationFault(""String_Node_Str"" + type + ""String_Node_Str"");
}","public Byte getTypeCode(String type) throws ApplicationFault {
  if (StringUtils.isEmpty(type))   return null;
  if (this.types.containsKey(type))   return this.types.get(type);
  throw new ApplicationFault(""String_Node_Str"" + type + ""String_Node_Str"");
}"
44746,"/** 
 * Set a new stopword list. This also refreshes the existing list.
 * @param words
 * @throws SystemFault
 */
public void setStopwords(List<String> words) throws SystemFault {
  StopwordRefresh.add(words);
  Set<String> newStopWords=new HashSet<String>();
  newStopWords.addAll(words);
  Set<String> stopWordsTemp=this.stopWords;
  this.stopWords=newStopWords;
  stopWordsTemp.clear();
  stopWordsTemp=null;
}","/** 
 * Set a new stopword list. This also refreshes the existing list.
 * @param words
 * @throws SystemFault
 */
public void setStopwords(List<String> words) throws SystemFault {
  StopwordRefresh.add(words);
  Set<String> newStopWords=new HashSet<String>();
  newStopWords.addAll(words);
  this.stopWords=newStopWords;
}"
44747,"public Object process() throws ApplicationFault, SystemFault {
  NV nv=new NV(IOConstants.NAME_VALUE_BYTES,IOConstants.NAME_VALUE_BYTES);
  RecordScalar scalar=new RecordScalar(STOP_WORD_LISTS_KEY,nv);
  HReader.getScalar(IOConstants.TABLE_CONFIG,scalar);
  if (null != scalar.kv.data) {
    String words=new String(scalar.kv.data.toBytes());
    List<String> wordLst=StringUtils.fastSplit(words,STOPWORD_SEPARATOR);
    Set<String> stopWordsTemp=StopwordManager.getInstance().stopWords;
    StopwordManager.getInstance().stopWords=buildStopwords(wordLst);
    stopWordsTemp.clear();
    stopWordsTemp=null;
  }
  return null;
}","public Object process() throws ApplicationFault, SystemFault {
  NV nv=new NV(IOConstants.NAME_VALUE_BYTES,IOConstants.NAME_VALUE_BYTES);
  RecordScalar scalar=new RecordScalar(STOP_WORD_LISTS_KEY,nv);
  HReader.getScalar(IOConstants.TABLE_CONFIG,scalar);
  if (null != scalar.kv.data) {
    String words=new String(scalar.kv.data.toBytes());
    List<String> wordLst=StringUtils.fastSplit(words,STOPWORD_SEPARATOR);
    Set<String> stopWordsTemp=StopwordManager.getInstance().stopWords;
    StopwordManager.getInstance().stopWords=buildStopwords(wordLst);
    if (null != stopWordsTemp)     stopWordsTemp.clear();
    stopWordsTemp=null;
  }
  return null;
}"
44748,"/** 
 * This subsets across all MUST queries. Last 2 must queries are already in sync from the processing.
 * @param planner
 * @param lastMustQuery
 */
private void intersectMustQs(QueryPlanner planner,QueryTerm lastMustQuery){
  if (null == lastMustQuery)   return;
  int stepsT=planner.sequences.size();
  boolean ignoreNext=false;
  for (int step=stepsT - 1; step > -1; step--) {
    List<QueryTerm> curStep=planner.sequences.get(step);
    if (curStep.size() != 1)     continue;
    QueryTerm curQuery=curStep.get(0);
    if (curQuery.isOptional)     continue;
    if (lastMustQuery == curQuery) {
      ignoreNext=true;
      continue;
    }
    if (ignoreNext) {
      ignoreNext=false;
      continue;
    }
    Map<Long,TermList> curBuckets=curQuery.foundIds;
    Map<Long,TermList> lastBuckets=lastMustQuery.foundIds;
    int curBucketsT=curBuckets.size();
    Iterator<Long> curBucketsItr=curBuckets.keySet().iterator();
    for (int i=0; i < curBucketsT; i++) {
      Long bucketId=curBucketsItr.next();
      boolean hasElements=lastBuckets.containsKey(bucketId);
      if (hasElements) {
        hasElements=curBuckets.get(bucketId).intersect(lastBuckets.get(bucketId));
        if (!hasElements) {
          curBucketsItr.remove();
          lastBuckets.remove(bucketId);
        }
      }
 else {
        curBucketsItr.remove();
      }
    }
  }
}","/** 
 * This subsets across all MUST queries. Last 2 must queries are already in sync from the processing.
 * @param planner
 * @param lastMustQuery
 */
private void intersectMustQs(QueryPlanner planner,QueryTerm lastMustQuery){
  if (null == lastMustQuery)   return;
  int stepsT=planner.sequences.size();
  for (int step=stepsT - 1; step > -1; step--) {
    List<QueryTerm> curStep=planner.sequences.get(step);
    if (curStep.size() != 1)     continue;
    QueryTerm curQuery=curStep.get(0);
    if (curQuery.isOptional)     continue;
    if (lastMustQuery == curQuery)     continue;
    Map<Long,TermList> curBuckets=curQuery.foundIds;
    Map<Long,TermList> lastBuckets=lastMustQuery.foundIds;
    int curBucketsT=curBuckets.size();
    Iterator<Long> curBucketsItr=curBuckets.keySet().iterator();
    for (int i=0; i < curBucketsT; i++) {
      Long bucketId=curBucketsItr.next();
      boolean hasElements=lastBuckets.containsKey(bucketId);
      if (hasElements) {
        hasElements=curBuckets.get(bucketId).intersect(lastBuckets.get(bucketId));
        if (!hasElements) {
          curBucketsItr.remove();
          lastBuckets.remove(bucketId);
        }
      }
 else {
        curBucketsItr.remove();
      }
    }
  }
}"
44749,"/** 
 * Remove the document at the specified position
 * @param bytes
 * @return
 */
public static byte[] delete(byte[] bytes,short docPos){
  if (null == bytes)   return null;
  int pos=0;
  int bytesT=bytes.length;
  if (0 == bytesT)   return null;
  Map<Integer,Integer> rowcol=new HashMap<Integer,Integer>();
  int row=0;
  int termsT=0;
  int col=-1;
  short dp;
  while (pos < bytesT) {
    row++;
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      termsT=Storable.getInt(pos,bytes);
      pos=pos + 4;
    }
    pos=pos + (termsT * 3);
    if (TermList.termVectorStorageEnabled)     pos=pos + (termsT * 3);
    col=-2;
    for (int i=0; i < termsT; i++) {
      dp=Storable.getShort(pos,bytes);
      pos=pos + 2;
      if (dp == docPos) {
        col=(termsT == 1) ? -1 : i;
        break;
      }
    }
    if (-2 != col) {
      rowcol.put(row,col);
      pos=pos + (termsT - col - 1) * 2;
    }
  }
  pos=0;
  row=0;
  ByteBuffer bb=ByteBuffer.allocate(bytes.length);
  while (pos < bytesT) {
    row++;
    boolean cutRow=rowcol.containsKey(row);
    if (cutRow && rowcol.get(row) == -1) {
      pos=pos + 4;
      termsT=(byte)bytes[pos++];
      if (-1 == termsT)       termsT=Storable.getInt(pos,bytes);
      pos=pos + 4;
      if (TermList.termVectorStorageEnabled)       pos=pos + termsT * 8;
 else       pos=pos + termsT * 5;
      continue;
    }
    bb.put(bytes,pos,4);
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      bb.put((byte)-1);
      termsT=Storable.getInt(pos,bytes);
      bb.put(bytes,pos,4);
      pos=pos + 4;
    }
 else {
      if (cutRow)       bb.put((byte)(termsT - 1));
 else       bb.put((byte)(termsT));
    }
    if (cutRow) {
      col=rowcol.get(row);
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (TermList.termVectorStorageEnabled) {
        if (col != 0)         bb.put(bytes,pos,col);
        bb.put(bytes,pos + col + 1,termsT - col - 1);
        pos=pos + termsT;
        if (col != 0)         bb.put(bytes,pos,(col) * 2);
        bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
        pos=pos + termsT * 2;
      }
      if (col != 0)       bb.put(bytes,pos,col * 2);
      bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
      pos=pos + termsT * 2;
    }
 else {
      if (TermList.termVectorStorageEnabled) {
        bb.put(bytes,pos,termsT * 8);
        pos=pos + termsT * 8;
      }
 else {
        bb.put(bytes,pos,termsT * 5);
        pos=pos + termsT * 5;
      }
    }
  }
  int len=bb.position();
  if (0 == len)   return null;
  byte[] deletedB=new byte[len];
  bb.position(0);
  bb.get(deletedB,0,len);
  bb.clear();
  return deletedB;
}","/** 
 * Remove the document at the specified position
 * @param bytes
 * @return
 */
public static byte[] delete(byte[] bytes,short docPos){
  if (null == bytes)   return null;
  int pos=0;
  int bytesT=bytes.length;
  if (0 == bytesT)   return null;
  Map<Integer,Integer> rowcol=new HashMap<Integer,Integer>();
  int row=0;
  int termsT=0;
  int col=-1;
  short dp;
  while (pos < bytesT) {
    row++;
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      termsT=Storable.getInt(pos,bytes);
      pos=pos + 4;
    }
    pos=pos + (termsT * 3);
    if (TermList.termVectorStorageEnabled)     pos=pos + (termsT * 3);
    col=Integer.MIN_VALUE;
    for (int i=0; i < termsT; i++) {
      dp=Storable.getShort(pos,bytes);
      pos=pos + 2;
      if (dp == docPos) {
        pos=pos + (termsT - i - 1) * 2;
        col=(termsT == 1) ? -1 : i;
        break;
      }
    }
    if (Integer.MIN_VALUE != col)     rowcol.put(row,col);
  }
  pos=0;
  row=0;
  ByteBuffer bb=ByteBuffer.allocate(bytes.length);
  while (pos < bytesT) {
    row++;
    boolean cutRow=rowcol.containsKey(row);
    if (cutRow && rowcol.get(row) == -1) {
      pos=pos + 4;
      termsT=(byte)bytes[pos++];
      if (-1 == termsT) {
        termsT=Storable.getInt(pos,bytes);
        pos=pos + 4;
      }
      if (TermList.termVectorStorageEnabled)       pos=pos + termsT * 8;
 else       pos=pos + termsT * 5;
      continue;
    }
    bb.put(bytes,pos,4);
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      bb.put((byte)-1);
      termsT=Storable.getInt(pos,bytes);
      bb.put(bytes,pos,4);
      pos=pos + 4;
    }
 else {
      if (cutRow)       bb.put((byte)(termsT - 1));
 else       bb.put((byte)(termsT));
    }
    if (cutRow) {
      col=rowcol.get(row);
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (TermList.termVectorStorageEnabled) {
        if (col != 0)         bb.put(bytes,pos,col);
        bb.put(bytes,pos + col + 1,termsT - col - 1);
        pos=pos + termsT;
        if (col != 0)         bb.put(bytes,pos,(col) * 2);
        bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
        pos=pos + termsT * 2;
      }
      if (col != 0)       bb.put(bytes,pos,col * 2);
      bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
      pos=pos + termsT * 2;
    }
 else {
      if (TermList.termVectorStorageEnabled) {
        bb.put(bytes,pos,termsT * 8);
        pos=pos + termsT * 8;
      }
 else {
        bb.put(bytes,pos,termsT * 5);
        pos=pos + termsT * 5;
      }
    }
  }
  int len=bb.position();
  if (0 == len)   return null;
  byte[] deletedB=new byte[len];
  bb.position(0);
  bb.get(deletedB,0,len);
  bb.clear();
  return deletedB;
}"
44750,"public void testIndexFieldInsert(String id,String title,String teaser) throws Exception {
  HDocument hdoc=new HDocument();
  hdoc.originalId=new Storable(id);
  hdoc.title=new Storable(title);
  hdoc.fields=new ArrayList<HField>();
  HField fld=new HField(""String_Node_Str"",FileReaderUtil.toString(""String_Node_Str""));
  hdoc.fields.add(fld);
  QueryResult res=IndexReader.getInstance().search(new QueryContext(id));
  IndexWriter.getInstance().insert(hdoc);
}","public void testIndexFieldInsert(String id,String title) throws Exception {
  HDocument hdoc=new HDocument();
  hdoc.originalId=new Storable(id);
  hdoc.title=new Storable(title);
  hdoc.fields=new ArrayList<HField>();
  HField fld=new HField(""String_Node_Str"",FileReaderUtil.toString(""String_Node_Str""));
  hdoc.fields.add(fld);
  IndexWriter.getInstance().insert(hdoc);
  QueryResult res=IndexReader.getInstance().search(new QueryContext(""String_Node_Str""));
  System.out.println(res.toString());
}"
44751,"public static void main(String[] args) throws Exception {
  IndexWriterTest t=new IndexWriterTest();
  Configuration conf=new Configuration();
  ServiceFactory.getInstance().init(conf,null);
  List<String> kwL=DictionaryManager.getInstance().getDictionary().getAll();
  for (  String kw : kwL) {
    System.out.println(kw.toString());
  }
  DictionaryManager.getInstance().deleteAll();
  t.testIndexMultiDoc(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  t.testIndexMultiDoc(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  t.testIndexMultiDoc(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  IndexWriterTest t=new IndexWriterTest();
  Configuration conf=new Configuration();
  ServiceFactory.getInstance().init(conf,null);
  List<String> kwL=DictionaryManager.getInstance().getDictionary().getAll();
  for (  String kw : kwL) {
    System.out.println(kw.toString());
  }
  DictionaryManager.getInstance().deleteAll();
  t.testIndexFieldInsert(""String_Node_Str"",""String_Node_Str"");
}"
44752,"public static boolean compareBytes(char[] inputBytes,char[] compareBytes){
  int inputBytesT=inputBytes.length;
  int compareBytesT=compareBytes.length;
  if (compareBytesT != inputBytesT)   return false;
  if (compareBytes[0] != inputBytes[0])   return false;
  if (compareBytes[compareBytesT - 1] != inputBytes[compareBytesT - 1])   return false;
switch (compareBytesT) {
case 3:
    return compareBytes[1] == inputBytes[1];
case 4:
  return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2];
case 5:
return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2] && compareBytes[3] == inputBytes[3];
case 6:
return compareBytes[1] == inputBytes[1] && compareBytes[3] == inputBytes[3] && compareBytes[2] == inputBytes[2] && compareBytes[4] == inputBytes[4];
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
for (int i=0; i < compareBytesT - 1; i++) {
if (compareBytes[i] != inputBytes[i]) return false;
}
break;
case 31:
for (int a=1; a <= 6; a++) {
if (!(compareBytes[a] == inputBytes[a] && compareBytes[a + 6] == inputBytes[a + 6] && compareBytes[a + 12] == inputBytes[a + 12] && compareBytes[a + 18] == inputBytes[a + 18] && compareBytes[a + 24] == inputBytes[a + 24])) return false;
}
break;
default :
for (int i=0; i < compareBytesT - 1; i++) {
if (compareBytes[i] != inputBytes[i]) return false;
}
}
return true;
}","public static boolean compareBytes(char[] inputBytes,char[] compareBytes){
  int inputBytesT=inputBytes.length;
  int compareBytesT=compareBytes.length;
  if (compareBytesT != inputBytesT)   return false;
  if (compareBytes[0] != inputBytes[0])   return false;
  if (compareBytes[compareBytesT - 1] != inputBytes[compareBytesT - 1])   return false;
switch (compareBytesT) {
case 3:
    return compareBytes[1] == inputBytes[1];
case 4:
  return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2];
case 5:
return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2] && compareBytes[3] == inputBytes[3];
case 6:
return compareBytes[1] == inputBytes[1] && compareBytes[3] == inputBytes[3] && compareBytes[2] == inputBytes[2] && compareBytes[4] == inputBytes[4];
default :
compareBytesT--;
for (int i=0; i < compareBytesT; i++) {
if (compareBytes[i] != inputBytes[i]) return false;
}
}
return true;
}"
44753,"public static List<NVBytes> getCompleteRow(String tableName,byte[] pk) throws ApplicationFault {
  HBaseFacade facade=null;
  HTableWrapper table=null;
  Result r=null;
  try {
    facade=HBaseFacade.getInstance();
    table=facade.getTable(tableName);
    Get getter=new Get(pk);
    if (table.exists(getter)) {
      r=table.get(getter);
      List<NVBytes> nvs=new ArrayList<NVBytes>(r.list().size());
      for (      KeyValue kv : r.list()) {
        nvs.add(new NVBytes(kv.getFamily(),kv.getQualifier(),kv.getValue()));
      }
      return nvs;
    }
    return null;
  }
 catch (  Exception ex) {
    throw new ApplicationFault(""String_Node_Str"" + pk.toString(),ex);
  }
 finally {
    if (null != facade && null != table)     facade.putTable(table);
  }
}","public static List<NVBytes> getCompleteRow(String tableName,byte[] pk,Filter filter) throws ApplicationFault {
  HBaseFacade facade=null;
  HTableWrapper table=null;
  Result r=null;
  try {
    facade=HBaseFacade.getInstance();
    table=facade.getTable(tableName);
    Get getter=new Get(pk);
    if (null != filter)     getter.setFilter(filter);
    if (table.exists(getter)) {
      r=table.get(getter);
      List<NVBytes> nvs=new ArrayList<NVBytes>(r.list().size());
      for (      KeyValue kv : r.list()) {
        nvs.add(new NVBytes(kv.getFamily(),kv.getQualifier(),kv.getValue()));
      }
      return nvs;
    }
    return null;
  }
 catch (  Exception ex) {
    throw new ApplicationFault(""String_Node_Str"" + pk.toString(),ex);
  }
 finally {
    if (null != facade && null != table)     facade.putTable(table);
  }
}"
44754,"public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryResult res=query.result;
  if (null == res)   return true;
  if (null == res.sortedDynamicWeights)   return true;
  int foundT=res.sortedDynamicWeights.length;
  int maxFetching=(ctx.documentFetchLimit < foundT) ? ctx.documentFetchLimit : foundT;
  List<DocTeaserWeight> weightedTeasers=new ArrayList<DocTeaserWeight>(maxFetching);
  for (int i=0; i < maxFetching; i++) {
    DocMetaWeight metaWt=(DocMetaWeight)res.sortedDynamicWeights[i];
    byte[] idB=metaWt.id.getBytes();
    List<NVBytes> flds=HReader.getCompleteRow(IOConstants.TABLE_PREVIEW,idB);
    weightedTeasers.add(new DocTeaserWeight(idB,flds,metaWt.weight));
  }
  res.teasers=weightedTeasers.toArray();
  DocTeaserWeight.sort(res.teasers);
  return true;
}","public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryResult res=query.result;
  if (null == res)   return true;
  if (null == res.sortedDynamicWeights)   return true;
  int foundT=res.sortedDynamicWeights.length;
  int maxFetching=(ctx.documentFetchLimit < foundT) ? ctx.documentFetchLimit : foundT;
  List<DocTeaserWeight> weightedTeasers=new ArrayList<DocTeaserWeight>(maxFetching);
  int termsMT=(null == query.planner.mustTerms) ? 0 : query.planner.mustTerms.size();
  int termsOT=(null == query.planner.optionalTerms) ? 0 : query.planner.optionalTerms.size();
  byte[][] wordsB=new byte[termsMT + termsOT][];
  for (int i=0; i < termsMT; i++) {
    wordsB[i]=new Storable(query.planner.mustTerms.get(i).wordOrig).toBytes();
  }
  for (int i=0; i < termsOT; i++) {
    wordsB[i + termsMT]=new Storable(query.planner.optionalTerms.get(i).wordOrig).toBytes();
  }
  TeaserFilter tf=new TeaserFilter(wordsB);
  for (int i=0; i < maxFetching; i++) {
    DocMetaWeight metaWt=(DocMetaWeight)res.sortedDynamicWeights[i];
    byte[] idB=metaWt.id.getBytes();
    List<NVBytes> flds=HReader.getCompleteRow(IOConstants.TABLE_PREVIEW,idB,tf);
    weightedTeasers.add(new DocTeaserWeight(idB,flds,metaWt.weight));
  }
  res.teasers=weightedTeasers.toArray();
  DocTeaserWeight.sort(res.teasers);
  return true;
}"
44755,"private Map<String,DocWeight> computeWeight(QueryContext ctx,QueryPlanner planner){
  Iterator<List<QueryTerm>> stepsItr=planner.sequences.iterator();
  int stepsT=planner.sequences.size();
  StringBuilder sb=new StringBuilder(100);
  long bucketId=-1;
  int termSize=-1;
  Iterator<Long> bucketItr=null;
  TermList tl=null;
  int bytePos=-1;
  float thisWt=-1;
  List<QueryTerm> qts=null;
  int qtSize=-1;
  Iterator<QueryTerm> qtItr=null;
  String mappedDocId=null;
  Map<String,DocWeight> docWeightMap=new Hashtable<String,DocWeight>(250);
  for (int stepsIndex=0; stepsIndex < stepsT; stepsIndex++) {
    qts=stepsItr.next();
    stepsItr.remove();
    if (null == qts)     continue;
    qtSize=qts.size();
    qtItr=qts.iterator();
    for (int qtIndex=0; qtIndex < qtSize; qtIndex++) {
      QueryTerm qt=qtItr.next();
      qtItr.remove();
      if (null == qt)       continue;
      Map<Long,TermList> founded=qt.foundIds;
      if (null == founded)       continue;
      bucketItr=founded.keySet().iterator();
      termSize=founded.size();
      for (int termIndex=0; termIndex < termSize; termIndex++) {
        bucketId=bucketItr.next();
        tl=founded.get(bucketId);
        if (null != tl) {
          bytePos=-1;
          for (          short docPos : tl.docPos) {
            bytePos++;
            if (-1 == docPos)             continue;
            sb.delete(0,100);
            sb.append(bucketId).append('_').append(docPos);
            mappedDocId=sb.toString();
            thisWt=(tl.termWeight[bytePos] * qt.preciousNess) + 1;
            if (docWeightMap.containsKey(mappedDocId)) {
              docWeightMap.get(mappedDocId).add(thisWt);
            }
 else {
              docWeightMap.put(mappedDocId,new DocWeight(mappedDocId,thisWt));
            }
          }
          tl.cleanup();
          bucketItr.remove();
        }
      }
    }
  }
  return docWeightMap;
}","private Map<String,DocWeight> computeWeight(QueryContext ctx,QueryPlanner planner){
  Iterator<List<QueryTerm>> stepsItr=planner.sequences.iterator();
  int stepsT=planner.sequences.size();
  StringBuilder sb=new StringBuilder(100);
  long bucketId=-1;
  int termSize=-1;
  Iterator<Long> bucketItr=null;
  TermList tl=null;
  int bytePos=-1;
  float thisWt=-1;
  List<QueryTerm> qts=null;
  int qtSize=-1;
  Iterator<QueryTerm> qtItr=null;
  String mappedDocId=null;
  Map<String,DocWeight> docWeightMap=new Hashtable<String,DocWeight>(250);
  for (int stepsIndex=0; stepsIndex < stepsT; stepsIndex++) {
    qts=stepsItr.next();
    stepsItr.remove();
    if (null == qts)     continue;
    qtSize=qts.size();
    qtItr=qts.iterator();
    for (int qtIndex=0; qtIndex < qtSize; qtIndex++) {
      QueryTerm qt=qtItr.next();
      qtItr.remove();
      if (null == qt)       continue;
      Map<Long,TermList> founded=qt.foundIds;
      if (null == founded)       continue;
      bucketItr=founded.keySet().iterator();
      termSize=founded.size();
      for (int termIndex=0; termIndex < termSize; termIndex++) {
        bucketId=bucketItr.next();
        tl=founded.get(bucketId);
        if (null == tl)         continue;
        bytePos=-1;
        for (        short docPos : tl.docPos) {
          bytePos++;
          if (-1 == docPos)           continue;
          sb.delete(0,100);
          sb.append(bucketId).append('_').append(docPos);
          mappedDocId=sb.toString();
          thisWt=(tl.termWeight[bytePos] * qt.preciousNess) + 1;
          if (docWeightMap.containsKey(mappedDocId)) {
            docWeightMap.get(mappedDocId).add(thisWt);
          }
 else {
            docWeightMap.put(mappedDocId,new DocWeight(mappedDocId,thisWt));
          }
        }
        tl.cleanup();
        bucketItr.remove();
      }
      founded.clear();
    }
  }
  planner.sequences.clear();
  return docWeightMap;
}"
44756,"public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryPlanner planner=query.planner;
  QueryResult result=query.result;
  Map<String,DocWeight> sortedStaticMap=computeWeight(ctx,planner);
  result.sortedStaticWeights=sortedStaticMap.values().toArray();
  DocWeight.sort(result.sortedStaticWeights);
  return true;
}","public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  L.l.debug(""String_Node_Str"");
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryPlanner planner=query.planner;
  QueryResult result=query.result;
  Map<String,DocWeight> sortedStaticMap=computeWeight(ctx,planner);
  result.sortedStaticWeights=sortedStaticMap.values().toArray();
  DocWeight.sort(result.sortedStaticWeights);
  sortedStaticMap.clear();
  sortedStaticMap=null;
  return true;
}"
44757,"/** 
 * Method is expected to initialize IDP selection in the client's browser by including appropriate source. By default page located at idpSelectionPath is included.
 * @param request request
 * @param response response
 * @throws ServletException error
 * @throws IOException io error
 */
protected void initializeSelection(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  logger.debug(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  request.getRequestDispatcher(idpSelectionPath).include(request,response);
}","/** 
 * Method is expected to initialize IDP selection in the client's browser by including appropriate source. By default page located at idpSelectionPath is included.
 * @param request request
 * @param response response
 * @throws ServletException error
 * @throws IOException io error
 */
protected void initializeSelection(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  logger.debug(""String_Node_Str"");
  request.getRequestDispatcher(idpSelectionPath).forward(request,response);
}"
44758,"/** 
 * Verifies that entry point will redirect user to IDP selection if login parameter is not set to true and idpSelectionPath is set.
 * @throws Exception error
 */
@Test public void testIDPSelection() throws Exception {
  RequestDispatcher dispatcher=createMock(RequestDispatcher.class);
  entryPoint.setIdpSelectionPath(""String_Node_Str"");
  expect(request.getParameter(SAMLEntryPoint.LOGIN_PARAMETER)).andReturn(""String_Node_Str"");
  expect(request.getRequestDispatcher(""String_Node_Str"")).andReturn(dispatcher);
  expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"");
  expect(request.getHeader(org.springframework.security.saml.SAMLConstants.PAOS_HTTP_HEADER)).andReturn(null);
  response.setContentType(""String_Node_Str"");
  dispatcher.include(request,response);
  replay(dispatcher);
  replayMock();
  entryPoint.commence(request,response,null);
  verifyMock();
  verify(dispatcher);
}","/** 
 * Verifies that entry point will redirect user to IDP selection if login parameter is not set to true and idpSelectionPath is set.
 * @throws Exception error
 */
@Test public void testIDPSelection() throws Exception {
  RequestDispatcher dispatcher=createMock(RequestDispatcher.class);
  entryPoint.setIdpSelectionPath(""String_Node_Str"");
  expect(request.getParameter(SAMLEntryPoint.LOGIN_PARAMETER)).andReturn(""String_Node_Str"");
  expect(request.getRequestDispatcher(""String_Node_Str"")).andReturn(dispatcher);
  expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"");
  expect(request.getHeader(org.springframework.security.saml.SAMLConstants.PAOS_HTTP_HEADER)).andReturn(null);
  dispatcher.forward(request,response);
  replay(dispatcher);
  replayMock();
  entryPoint.commence(request,response,null);
  verifyMock();
  verify(dispatcher);
}"
44759,"protected void verifyAuthenticationStatement(AuthnStatement auth,BasicSAMLMessageContext context) throws AuthenticationException {
  if (!isDateTimeSkewValid(MAX_AUTHENTICATION_TIME,auth.getAuthnInstant())) {
    log.debug(""String_Node_Str"",auth.getAuthnInstant());
    throw new CredentialsExpiredException(""String_Node_Str"");
  }
  if (auth.getSessionNotOnOrAfter() != null && auth.getSessionNotOnOrAfter().isAfter(new Date().getTime())) {
    log.debug(""String_Node_Str"",auth.getSessionNotOnOrAfter());
    throw new CredentialsExpiredException(""String_Node_Str"");
  }
  if (auth.getSubjectLocality() != null) {
    HTTPInTransport httpInTransport=(HTTPInTransport)context.getInboundMessageTransport();
    if (auth.getSubjectLocality().getAddress() != null) {
      if (!httpInTransport.getPeerAddress().equals(auth.getSubjectLocality().getAddress())) {
        throw new BadCredentialsException(""String_Node_Str"");
      }
    }
  }
}","protected void verifyAuthenticationStatement(AuthnStatement auth,BasicSAMLMessageContext context) throws AuthenticationException {
  if (!isDateTimeSkewValid(MAX_AUTHENTICATION_TIME,auth.getAuthnInstant())) {
    log.debug(""String_Node_Str"",auth.getAuthnInstant());
    throw new CredentialsExpiredException(""String_Node_Str"");
  }
  if (auth.getSessionNotOnOrAfter() != null && !(new DateTime()).isBefore(auth.getSessionNotOnOrAfter())) {
    log.debug(""String_Node_Str"",auth.getSessionNotOnOrAfter());
    throw new CredentialsExpiredException(""String_Node_Str"");
  }
  if (auth.getSubjectLocality() != null) {
    HTTPInTransport httpInTransport=(HTTPInTransport)context.getInboundMessageTransport();
    if (auth.getSubjectLocality().getAddress() != null) {
      if (!httpInTransport.getPeerAddress().equals(auth.getSubjectLocality().getAddress())) {
        throw new BadCredentialsException(""String_Node_Str"");
      }
    }
  }
}"
44760,"public void deleteFile(String fileName){
  ArrayList<Integer> tmp=new ArrayList<Integer>();
  if (fileEntry.containsKey(fileName)) {
    int pageEntry=fileEntry.get(fileName);
    int nextEntry=pageEntry;
    for (int i=pageEntry; nextEntry != finalPage; ) {
      tmp.add(nextEntry);
      cleanPage(nextEntry);
      nextEntry=pageAccessTable[i];
      i=nextEntry;
    }
    for (int i=0; i < tmp.size(); i++) {
      markPage(tmp.get(i),freePage);
    }
  }
 else   System.out.println(""String_Node_Str"");
}","public void deleteFile(String fileName){
  ArrayList<Integer> tmp=new ArrayList<Integer>();
  if (fileEntry.containsKey(fileName)) {
    int pageEntry=fileEntry.get(fileName);
    int nextEntry=pageEntry;
    for (int i=pageEntry; nextEntry != finalPage; ) {
      tmp.add(nextEntry);
      nextEntry=pageAllocateTable[i];
      i=nextEntry;
    }
    for (int i=0; i < tmp.size(); i++) {
      markPage(tmp.get(i),freePage);
    }
    fileEntry.remove(fileName);
  }
 else   System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
}"
44761,"public void openFile(String fileName){
  if (fileEntry.containsKey(fileName)) {
    openFile.add(fileName);
  }
 else   System.out.println(""String_Node_Str"");
}","public void openFile(String fileName){
  if (fileEntry.containsKey(fileName)) {
    openFile.add(fileName);
  }
 else   System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
}"
44762,"public int getFreePageNum(){
  int flag;
  int freePageNum=-1;
  for (int i=0; i < tableLength; i++) {
    flag=pageAccessTable[i];
    if (flag == 0) {
      freePageNum=i;
      break;
    }
  }
  return freePageNum;
}","public int getFreePageNum(){
  int flag;
  int freePageNum=-1;
  for (int i=0; i < tableLength; i++) {
    flag=pageAllocateTable[i];
    if (flag == 0) {
      freePageNum=i;
      break;
    }
  }
  return freePageNum;
}"
44763,"public void openDB(){
  try {
    disk.seek(0);
    int flag;
    byte[] pageFlag=new byte[4];
    for (int i=0; i < tableLength; i++) {
      disk.read(pageFlag,0,4);
      flag=byteToInt(pageFlag);
      pageAccessTable[i]=flag;
    }
    if (creatFileEntry == 0) {
      createFile(""String_Node_Str"");
      creatFileEntry=1;
    }
    StringBuffer sb=new StringBuffer();
    sb=readFile(""String_Node_Str"");
    String fileName=new String();
    int pageNum=0;
    String[] ss=sb.toString().split(""String_Node_Str"");
    for (int i=0; i < ss.length - 1; i++) {
      if (i == 0 | i % 2 == 0) {
        fileName=ss[i];
      }
 else {
        pageNum=Integer.parseInt(ss[i]);
      }
      fileEntry.put(fileName,pageNum);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void openDB(){
  try {
    disk.seek(0);
    int flag;
    byte[] pageFlag=new byte[4];
    for (int i=0; i < tableLength; i++) {
      disk.read(pageFlag,0,4);
      flag=byteToInt(pageFlag);
      pageAllocateTable[i]=flag;
    }
    if (creatFileFlag == 0) {
      fileEntry.put(""String_Node_Str"",fileEntryPageNum);
      markPage(fileEntryPageNum,finalPage);
      creatFileFlag=1;
    }
    StringBuffer sb=new StringBuffer();
    sb=readFile(""String_Node_Str"");
    String fileName=new String();
    int pageNum=0;
    String[] ss=sb.toString().split(""String_Node_Str"");
    for (int i=0; i < ss.length - 1; i++) {
      if (i == 0 | i % 2 == 0) {
        fileName=ss[i];
      }
 else {
        pageNum=Integer.parseInt(ss[i]);
      }
      fileEntry.put(fileName,pageNum);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
44764,"public void createDisk(String diskName){
  try {
    disk=new RandomAccessFile(diskName,""String_Node_Str"");
    byte[] diskInit=new byte[diskSize];
    Arrays.fill(diskInit,zero);
    disk.seek(0);
    disk.write(diskInit);
    disk.seek(0);
    for (int i=0; i < tableSize / pageSize; i++) {
      disk.write(dp,0,4);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void createDisk(String diskName){
  try {
    disk=new RandomAccessFile(diskName,""String_Node_Str"");
    byte[] diskInit=new byte[diskSize];
    Arrays.fill(diskInit,zero);
    disk.seek(0);
    disk.write(diskInit);
    disk.seek(0);
    for (int i=0; i < tableSize / pageSize + 1; i++) {
      disk.write(dp,0,4);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
44765,"public boolean createFile(String fileName){
  int pageEntry=-1;
  pageEntry=getFreePageNum();
  fileEntry.put(fileName,pageEntry);
  markPage(pageEntry,finalPage);
  if (pageEntry != -1)   return true;
 else   return false;
}","public boolean createFile(String fileName){
  if (fileEntry.containsKey(fileName)) {
    System.out.println(""String_Node_Str"");
    return false;
  }
 else {
    int pageEntry=-1;
    pageEntry=getFreePageNum();
    fileEntry.put(fileName,pageEntry);
    markPage(pageEntry,finalPage);
    if (pageEntry != -1)     return true;
 else     return false;
  }
}"
44766,"public void closeDB(){
  try {
    disk.seek(0);
    int flag;
    byte[] pageFlag=new byte[4];
    for (int i=0; i < tableLength; i++) {
      flag=pageAccessTable[i];
      pageFlag=intToByte(flag);
      disk.write(pageFlag,0,4);
    }
    StringBuffer sb=new StringBuffer();
    String fileName=new String();
    String pageNum=new String();
    Iterator it=fileEntry.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      fileName=(String)entry.getKey();
      pageNum=entry.getValue().toString();
      sb.append(fileName).append(""String_Node_Str"").append(pageNum).append(""String_Node_Str"");
    }
    openFile(""String_Node_Str"");
    writeFile(""String_Node_Str"",sb);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void closeDB(){
  try {
    disk.seek(0);
    int flag;
    byte[] pageFlag=new byte[4];
    for (int i=0; i < tableLength; i++) {
      flag=pageAllocateTable[i];
      pageFlag=intToByte(flag);
      disk.write(pageFlag,0,4);
    }
    StringBuffer sb=new StringBuffer();
    String fileName=new String();
    String pageNum=new String();
    Iterator it=fileEntry.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      fileName=(String)entry.getKey();
      pageNum=entry.getValue().toString();
      sb.append(fileName).append(""String_Node_Str"").append(pageNum).append(""String_Node_Str"");
    }
    openFile(""String_Node_Str"");
    writeFile(""String_Node_Str"",sb);
    fileEntry.clear();
    fileEntry.put(""String_Node_Str"",200);
    openFile.clear();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
44767,"public void markPage(int pageNum,int mark){
  pageAccessTable[pageNum]=mark;
}","public void markPage(int pageNum,int mark){
  pageAllocateTable[pageNum]=mark;
}"
44768,"public StringBuffer readFile(String fileName){
  StringBuffer rs=new StringBuffer();
  if (fileEntry.containsKey(fileName)) {
    int pageEntry=fileEntry.get(fileName);
    int nextEntry=pageEntry;
    byte[] page=new byte[pageSize];
    String s;
    for (int i=pageEntry; nextEntry != finalPage; ) {
      readPage(nextEntry,page);
      s=new String(page);
      rs.append(s);
      nextEntry=pageAccessTable[i];
      i=nextEntry;
    }
    return rs;
  }
 else {
    System.out.println(""String_Node_Str"");
    rs=null;
    return rs;
  }
}","public StringBuffer readFile(String fileName){
  StringBuffer rs=new StringBuffer();
  if (fileEntry.containsKey(fileName)) {
    int pageEntry=fileEntry.get(fileName);
    int nextEntry=pageEntry;
    byte[] page=new byte[pageSize];
    String s;
    for (int i=pageEntry; nextEntry != finalPage; ) {
      readPage(nextEntry,page);
      s=new String(page);
      rs.append(s);
      nextEntry=pageAllocateTable[i];
      i=nextEntry;
    }
    return rs;
  }
 else {
    System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
    rs=null;
    return rs;
  }
}"
44769,"public void writeFile(String fileName,StringBuffer content){
  if (openFile.contains(fileName)) {
    int pageEntry=fileEntry.get(fileName);
    int nextEntry=pageEntry;
    int prevEntry=pageEntry;
    for (int i=0; i < content.length(); i=i + pageSize) {
      byte[] page=new byte[pageSize];
      page=splitStringToByte(content,i);
      if (i == 0) {
        writePage(pageEntry,page);
        markPage(pageEntry,dirtyPage);
      }
 else {
        prevEntry=nextEntry;
        nextEntry=getFreePageNum();
        writePage(nextEntry,page);
        markPage(prevEntry,nextEntry);
        markPage(nextEntry,dirtyPage);
      }
    }
    markPage(nextEntry,finalPage);
  }
 else   System.out.println(""String_Node_Str"");
}","public void writeFile(String fileName,StringBuffer content){
  if (openFile.contains(fileName) && fileEntry.containsKey(fileName)) {
    int pageEntry=fileEntry.get(fileName);
    int nextEntry=pageEntry;
    int prevEntry=pageEntry;
    for (int i=0; i < content.length(); i=i + pageSize) {
      byte[] page=new byte[pageSize];
      page=splitStringToByte(content,i);
      if (i == 0) {
        writePage(pageEntry,page);
        markPage(pageEntry,dirtyPage);
      }
 else {
        prevEntry=nextEntry;
        nextEntry=getFreePageNum();
        writePage(nextEntry,page);
        markPage(prevEntry,nextEntry);
        markPage(nextEntry,dirtyPage);
      }
    }
    markPage(nextEntry,finalPage);
  }
 else   System.out.println(""String_Node_Str"" + fileName);
}"
44770,"@Override public String call(){
  int sumCD=Integer.parseInt(subtitles.get(index).getSubSumCD());
  if (sumCD != 1 && subtitles.get(0).getTargetFolder() == null)   for (int i=0; i < sumCD; i++) {
    downloadSubtitle(subtitles.get(index + i),true);
  }
 else {
    downloadSubtitle(subtitles.get(index),false);
  }
  return ""String_Node_Str"";
}","@Override public String call(){
  int sumCD=Integer.parseInt(subtitles.get(index).getSubSumCD());
  targetFolder=subtitles.get(0).getTargetFolder();
  if (targetFolder == null) {
    for (int i=0; i < sumCD; i++)     try {
      downloadSubtitle(subtitles.get(index + i),true);
    }
 catch (    IOException e) {
      logger.severe(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
 else   try {
    downloadSubtitle(subtitles.get(index),false);
  }
 catch (  IOException e) {
    logger.severe(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
  return ""String_Node_Str"";
}"
44771,"/** 
 * downloads subtitle file
 * @param subtitle > structure with information about subtitle
 * @param origFileName > if true, subtitle file name will be retrieved from API server, otherwise movie name will be used
 * @return > null if something screwed, proper string otherwise
 */
private String downloadSubtitle(Subtitle subtitle,boolean origFileName){
  String downloadLink=subtitle.getSubDownloadLink();
  String gzFileName=""String_Node_Str"";
  String targetFolder=subtitle.getTargetFolder();
  String subFileName=null;
  if (origFileName)   subFileName=subtitle.getSubFileName() + ""String_Node_Str"" + subtitle.getSubFormat();
 else   subFileName=subtitle.getSourceFileName() + ""String_Node_Str"" + subtitle.getSubFormat();
  if (targetFolder == null) {
    if ((targetFolder=invokeSaveWindow(targetFolder)) == null)     return null;
    targetFolder+=System.getProperty(""String_Node_Str"");
  }
  try {
    HttpConn.HttpDownloadFile(downloadLink,targetFolder + gzFileName);
  }
 catch (  IOException e) {
    logger.severe(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  Zip.unGZip(targetFolder + gzFileName,targetFolder + subFileName,true);
  JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
  logger.log(Level.INFO,""String_Node_Str"" + targetFolder + subFileName+ ""String_Node_Str"");
  return ""String_Node_Str"";
}","/** 
 * downloads subtitle file
 * @param subtitle > structure with information about subtitle
 * @param origFileName > if true, subtitle file name will be retrieved from API server, otherwise movie name will be used
 * @return > null if something screwed, proper string otherwise
 * @throws IOException 
 */
private String downloadSubtitle(Subtitle subtitle,boolean origFileName) throws IOException {
  String downloadLink=subtitle.getSubDownloadLink();
  String gzFileName=""String_Node_Str"";
  String subFileName=null;
  if (origFileName)   subFileName=subtitle.getSubFileName();
 else   subFileName=subtitle.getSourceFileName() + ""String_Node_Str"" + subtitle.getSubFormat();
  if (targetFolder == null) {
    if ((targetFolder=invokeSaveWindow(targetFolder)) == null)     return null;
    targetFolder+=System.getProperty(""String_Node_Str"");
  }
  HttpConn.HttpDownloadFile(downloadLink,targetFolder + gzFileName);
  Zip.unGZip(targetFolder + gzFileName,targetFolder + subFileName,true);
  logger.log(Level.INFO,""String_Node_Str"" + targetFolder + subFileName+ ""String_Node_Str"");
  return ""String_Node_Str"";
}"
44772,"/** 
 * show found subtitles in listbox 
 */
private void showSubtitles(){
  if (dontPrint)   return;
  subtitleListModel.clear();
  if (subtitles.size() == 0) {
    subtitleListModel.add(0,""String_Node_Str"");
    return;
  }
  for (  Subtitle sub : subtitles) {
    String release=""String_Node_Str"";
    if (sub.getReleaseName().length() > 2) {
      release=sub.getReleaseName();
      if (release.indexOf(""String_Node_Str"") != -1)       release=release.substring(release.indexOf(""String_Node_Str"") + 1);
    }
    String subtitleInfo=sub.getMovieName() + ""String_Node_Str"" + sub.getMovieYear()+ ""String_Node_Str""+ sub.getLanguageName()+ ""String_Node_Str""+ sub.getSubDlCount()+ ""String_Node_Str""+ ""String_Node_Str""+ sub.getSubActualCD()+ ""String_Node_Str""+ sub.getSubSumCD()+ ""String_Node_Str""+ sub.getSubAddDate()+ ""String_Node_Str""+ ""String_Node_Str""+ release;
    subtitleListModel.addElement(subtitleInfo);
    sub.setTargetFolder(gui.getSelectedFolder());
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException eaten) {
    }
  }
  return;
}","/** 
 * show found subtitles in listbox 
 */
private void showSubtitles(){
  if (dontPrint)   return;
  subtitleListModel.clear();
  if (subtitles.size() == 0) {
    subtitleListModel.add(0,""String_Node_Str"");
    return;
  }
  for (  Subtitle sub : subtitles) {
    String release=""String_Node_Str"";
    if (sub.getReleaseName().length() > 2) {
      release=sub.getReleaseName();
      if (release.indexOf(""String_Node_Str"") != -1)       release=release.substring(release.indexOf(""String_Node_Str"") + 1);
    }
    String subtitleInfo=sub.getMovieName() + ""String_Node_Str"" + sub.getMovieYear()+ ""String_Node_Str""+ sub.getLanguageName()+ ""String_Node_Str""+ sub.getSubDlCount()+ ""String_Node_Str""+ ""String_Node_Str""+ sub.getSubActualCD()+ ""String_Node_Str""+ sub.getSubSumCD()+ ""String_Node_Str""+ sub.getSubAddDate()+ ""String_Node_Str""+ ""String_Node_Str""+ release;
    subtitleListModel.addElement(subtitleInfo);
    if (inputSearch == null)     sub.setTargetFolder(gui.getSelectedFolder());
 else     sub.setTargetFolder(null);
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException eaten) {
    }
  }
  return;
}"
44773,"private boolean getPosts(final String blogUri) throws Exception {
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  URL feedUrl=new URL(""String_Node_Str"" + blogUri + ""String_Node_Str"");
  if (!blogUri.matches(""String_Node_Str"")) {
    feedUrl=new URL(""String_Node_Str"" + blogUri + ""String_Node_Str"");
  }
  Query myQuery=new Query(feedUrl);
  DateTime dtMin=DateTime.parseDate(""String_Node_Str"");
  myQuery.setPublishedMin(dtMin);
  if (blogUri.matches(""String_Node_Str"")) {
    BasicDBObject doc=new BasicDBObject();
    doc.put(""String_Node_Str"",blogUri);
    BasicDBObject sortDoc=new BasicDBObject();
    sortDoc.put(""String_Node_Str"",-1);
    if (collPosts.find(doc).size() > 0) {
      DBCursor cur=collPosts.find(doc).sort(sortDoc);
      if (cur.hasNext()) {
        Date dateChange=formatter.parse(""String_Node_Str"");
        DBObject obj=cur.next();
        dtMin=new DateTime((Date)obj.get(""String_Node_Str""));
        if (collPosts.find(doc).size() > 30 || dateChange.compareTo((Date)obj.get(""String_Node_Str"")) < 0)         myQuery.setPublishedMin(dtMin);
      }
    }
  }
  Feed resultFeed=feedQuery(myQuery);
  String blogID=resultFeed.getSelfLink().getHref().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  int count=1;
  int size=resultFeed.getTotalResults();
  System.out.println(""String_Node_Str"" + r + ""String_Node_Str""+ blogUri+ ""String_Node_Str""+ size+ ""String_Node_Str"");
  do {
    if (size == 0)     break;
    myQuery.setStartIndex(count);
    if (count > 1)     resultFeed=feedQuery(myQuery);
    for (    Entry entry : resultFeed.getEntries()) {
      String postID=""String_Node_Str"";
      try {
        postID=entry.getSelfLink().getHref().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        continue;
      }
      if (entry.getAuthors().get(0).getUri() != null) {
        setMongoPost(entry);
        getComments(postID);
        count++;
      }
    }
  }
 while (count <= size);
  return true;
}","private boolean getPosts(final String blogUri) throws Exception {
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  URL feedUrl=new URL(""String_Node_Str"" + blogUri + ""String_Node_Str"");
  if (!blogUri.matches(""String_Node_Str"")) {
    feedUrl=new URL(""String_Node_Str"" + blogUri + ""String_Node_Str"");
  }
  Query myQuery=new Query(feedUrl);
  DateTime dtMin=DateTime.parseDate(""String_Node_Str"");
  myQuery.setPublishedMin(dtMin);
  if (blogUri.matches(""String_Node_Str"")) {
    BasicDBObject doc=new BasicDBObject();
    doc.put(""String_Node_Str"",blogUri);
    BasicDBObject sortDoc=new BasicDBObject();
    sortDoc.put(""String_Node_Str"",-1);
    if (collPosts.find(doc).size() > 0) {
      DBCursor cur=collPosts.find(doc).sort(sortDoc);
      if (cur.hasNext()) {
        Date dateChange=formatter.parse(""String_Node_Str"");
        DBObject obj=cur.next();
        dtMin=new DateTime((Date)obj.get(""String_Node_Str""));
        if (collPosts.find(doc).size() > 30 || dateChange.compareTo((Date)obj.get(""String_Node_Str"")) < 0)         myQuery.setPublishedMin(dtMin);
      }
    }
  }
  Feed resultFeed=feedQuery(myQuery);
  String blogID=resultFeed.getSelfLink().getHref().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  int count=1;
  int size=resultFeed.getTotalResults();
  do {
    if (size == 0)     break;
    myQuery.setStartIndex(count);
    if (count > 1)     resultFeed=feedQuery(myQuery);
    System.out.println(""String_Node_Str"" + r + ""String_Node_Str""+ blogUri+ ""String_Node_Str""+ count+ ""String_Node_Str""+ size+ ""String_Node_Str"");
    for (    Entry entry : resultFeed.getEntries()) {
      String postID=""String_Node_Str"";
      try {
        postID=entry.getSelfLink().getHref().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        continue;
      }
      if (entry.getAuthors().get(0).getUri() != null) {
        setMongoPost(entry);
        getComments(postID);
      }
      count++;
    }
  }
 while (count <= size);
  return true;
}"
44774,"public void run(){
  while (true) {
    try {
      boolean bOk=true, bSet=true;
      String[] info=q.poll(1,TimeUnit.SECONDS);
      String[] blogs=null;
      String profileID=""String_Node_Str"";
      if (info == NO_MORE_WORK) {
        break;
      }
      if (info.length == 2) {
        profileID=info[0];
        blogs=Pattern.compile(""String_Node_Str"").split(info[1]);
      }
 else {
        blogs=info;
      }
      for (      String blog : blogs) {
        String blogID=blog.trim().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        bOk=getPosts(blogID);
        if (!bOk)         bSet=bOk;
 else {
          if (blog.matches(""String_Node_Str"")) {
            DBCollection collBlogs=mongoDb.getCollection(""String_Node_Str"");
            BasicDBObject docId=new BasicDBObject();
            docId.put(""String_Node_Str"",blog);
            DBObject obj=collBlogs.findOne(docId);
            obj.put(""String_Node_Str"",1);
            collBlogs.save(obj);
          }
        }
      }
      if (bSet) {
        myStm.executeUpdate(""String_Node_Str"" + profileID + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      System.out.println(r + ""String_Node_Str"" + e.getMessage());
    }
  }
  System.out.println(""String_Node_Str"" + r + ""String_Node_Str"");
  mongoConn.close();
}","public void run(){
  while (true) {
    try {
      boolean bOk=true, bSet=true;
      String[] info=q.poll(1,TimeUnit.SECONDS);
      String[] blogs=null;
      String profileID=""String_Node_Str"";
      if (info == NO_MORE_WORK) {
        break;
      }
      if (info.length == 2) {
        profileID=info[0];
        blogs=Pattern.compile(""String_Node_Str"").split(info[1]);
      }
 else {
        blogs=info;
      }
      for (      String blog : blogs) {
        String blogID=blog.trim().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        bOk=getPosts(blogID);
        if (!bOk)         bSet=bOk;
 else {
          if (blog.matches(""String_Node_Str"")) {
            DBCollection collBlogs=mongoDb.getCollection(""String_Node_Str"");
            BasicDBObject docId=new BasicDBObject();
            docId.put(""String_Node_Str"",blog);
            DBObject obj=collBlogs.findOne(docId);
            obj.put(""String_Node_Str"",1);
            collBlogs.save(obj);
          }
        }
      }
      if (bSet) {
        myStm.executeUpdate(""String_Node_Str"" + profileID + ""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"" + r + ""String_Node_Str"");
    }
 catch (    Exception e) {
      System.out.println(r + ""String_Node_Str"" + e.getMessage());
    }
  }
  System.out.println(""String_Node_Str"" + r + ""String_Node_Str"");
  mongoConn.close();
  try {
    myStm.close();
  }
 catch (  Exception e) {
  }
}"
44775,"public static void main(String[] args) throws Exception {
  String word=""String_Node_Str"";
  mongoConn=new Mongo(""String_Node_Str"",27017);
  mongoDb=mongoConn.getDB(""String_Node_Str"");
  try {
    mongoDb.getCollectionNames();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  collPosts=mongoDb.getCollection(""String_Node_Str"");
  registerShutdownHook();
  String mapAuthor=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + word + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String reduceAuthor=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String mapAuthor2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String reduceAuthor2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  QueryBuilder query=new QueryBuilder();
  DBObject docQuery=query.start(""String_Node_Str"").notEquals(new BasicDBList()).and(""String_Node_Str"").notEquals(""String_Node_Str"").get();
  DBCollection collResult=mongoDb.getCollection(""String_Node_Str"");
  MapReduceOutput output2=collResult.mapReduce(mapAuthor2,reduceAuthor2,""String_Node_Str"",MapReduceCommand.OutputType.REPLACE,null);
  DBCollection collResult2=output2.getOutputCollection();
  BasicDBObject sortDoc=new BasicDBObject();
  sortDoc.put(""String_Node_Str"",-1);
  DBCursor cur=collResult2.find().sort(sortDoc).limit(10);
  int hash=cursorInt(cur);
  int hash2=0;
  for (int i=0; i < 10; i++) {
    output2=collResult2.mapReduce(mapAuthor2,reduceAuthor2,""String_Node_Str"",MapReduceCommand.OutputType.REPLACE,null);
    collResult2=output2.getOutputCollection();
    cur=collResult2.find().sort(sortDoc).limit(10);
    hash2=cursorInt(cur);
    if (hash == hash2)     break;
 else     hash=hash2;
  }
  shutdown();
}","public static void main(String[] args) throws Exception {
  String word=""String_Node_Str"";
  mongoConn=new Mongo(""String_Node_Str"",27017);
  mongoDb=mongoConn.getDB(""String_Node_Str"");
  try {
    mongoDb.getCollectionNames();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  collPosts=mongoDb.getCollection(""String_Node_Str"");
  registerShutdownHook();
  String mapAuthor=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + word + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String reduceAuthor=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String mapAuthor2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String reduceAuthor2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  QueryBuilder query=new QueryBuilder();
  DBObject docQuery=query.start(""String_Node_Str"").notEquals(new BasicDBList()).and(""String_Node_Str"").notEquals(""String_Node_Str"").get();
  DBCollection collResult=mongoDb.getCollection(""String_Node_Str"");
  MapReduceOutput output2=collResult.mapReduce(mapAuthor2,reduceAuthor2,""String_Node_Str"",MapReduceCommand.OutputType.REPLACE,null);
  DBCollection collResult2=output2.getOutputCollection();
  BasicDBObject sortDoc=new BasicDBObject();
  sortDoc.put(""String_Node_Str"",-1);
  DBCursor cur=collResult2.find().sort(sortDoc).limit(10);
  int hash=cursorHash(cur);
  int hash2=0;
  for (int i=0; i < 10; i++) {
    output2=collResult2.mapReduce(mapAuthor2,reduceAuthor2,""String_Node_Str"",MapReduceCommand.OutputType.REPLACE,null);
    collResult2=output2.getOutputCollection();
    cur=collResult2.find().sort(sortDoc).limit(10);
    hash2=cursorHash(cur);
    if (hash == hash2)     break;
 else     hash=hash2;
  }
  shutdown();
}"
44776,"/** 
 * creates a new   {@link HDFSBlob} using the supplied uri as an identifierfor the underlying  {@link HDFSBlobStoreConnection}
 * @param uri the identifier of the  {@link HDFSBlob}
 * @param conn the  {@link HDFSBlobStoreConnection} that should be used tomanipulate this  {@link HDFSBlob}
 * @throws UnsupportedIdException
 */
public HDFSBlob(final URI uri,final HDFSBlobStoreConnection conn) throws UnsupportedIdException {
  if (uri.getScheme() == null) {
    throw new UnsupportedIdException(uri);
  }
  this.conn=conn;
  try {
    if (uri.getPath() == null && uri.toString().startsWith(""String_Node_Str"")) {
      this.uri=new URI(conn.getBlobStore().getId() + (conn.getBlobStore().getId().toASCIIString().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + uri.getRawSchemeSpecificPart());
    }
 else {
      this.uri=uri;
    }
    this.path=new Path(this.uri.toASCIIString());
  }
 catch (  URISyntaxException e) {
    throw new UnsupportedIdException(uri,e.getLocalizedMessage());
  }
}","/** 
 * creates a new   {@link HDFSBlob} using the supplied uri as an identifierfor the underlying  {@link HDFSBlobStoreConnection}
 * @param uri the identifier of the  {@link HDFSBlob}
 * @param conn the  {@link HDFSBlobStoreConnection} that should be used tomanipulate this  {@link HDFSBlob}
 * @throws UnsupportedIdException
 */
public HDFSBlob(final URI uri,final HDFSBlobStoreConnection conn){
  this.conn=conn;
  this.storeId=this.conn.getBlobStore().getId();
  this.uri=uri;
  this.path=new Path(this.storeId.toASCIIString() + ""String_Node_Str"" + this.uri.getRawSchemeSpecificPart());
}"
44777,"/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    return this.getFileSystem().exists(path);
  }
}","/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    this.storeId=this.conn.getBlobStore().getId();
    return this.getFileSystem().exists(path);
  }
}"
44778,"/** 
 * open a new   {@link HDFSBlobStoreConnection} to a HDFS namenode
 * @param tx since transactions are not supported. this must be set to null
 * @param hints not used
 * @return a new {@link HDFSBlobStoreConnection} th this{@link HDFSBlobStore}'s id
 * @throws UnsupportedOperationException if the transaction parameter was not null
 * @throws IOException if the operation did not succeed
 */
public BlobStoreConnection openConnection(final Transaction tx,final Map<String,String> hints) throws UnsupportedOperationException, IOException {
  return new HDFSBlobStoreConnection(this);
}","/** 
 * open a new   {@link HDFSBlobStoreConnection} to a HDFS namenode
 * @param tx since transactions are not supported. this must be set to null
 * @param hints not used
 * @return a new {@link HDFSBlobStoreConnection} th this{@link HDFSBlobStore}'s id
 * @throws UnsupportedOperationException if the transaction parameter was not null
 * @throws IOException if the operation did not succeed
 */
public BlobStoreConnection openConnection(final Transaction tx,final Map<String,String> hints) throws UnsupportedOperationException, IOException {
  if (tx != null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return new HDFSBlobStoreConnection(this);
}"
44779,"/** 
 * create a new   {@link HDFSBlobStore} at a specific URI in {@link String}format
 * @param id the  {@link URI} pointing to the HDFS namenode
 * @throws URISyntaxException if the supplied  {@link URI} was not valid
 */
public HDFSBlobStore(final String uri) throws URISyntaxException {
  this.id=new URI(uri);
}","/** 
 * create a new   {@link HDFSBlobStore} at a specific URI in {@link String}format
 * @param id the  {@link URI} pointing to the HDFS namenode
 * @throws URISyntaxException if the supplied  {@link URI} was not valid
 */
public HDFSBlobStore(final URI uri){
  this.id=uri;
}"
44780,"/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  return new HDFSIdIterator(getFiles(new Path(filterPrefix),new ArrayList<FileStatus>()));
}","/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  if (filterPrefix == null || filterPrefix.length() == 0) {
    return new HDFSIdIterator(getFiles(new Path(this.store.getId().toASCIIString() + ""String_Node_Str""),new ArrayList<FileStatus>(),true));
  }
  int delim=filterPrefix.lastIndexOf('/');
  List<FileStatus> files=new ArrayList<FileStatus>();
  Path path=new Path(this.store.getId().toASCIIString() + ""String_Node_Str"" + (delim > -1 ? filterPrefix.substring(0,delim) : ""String_Node_Str""));
  List<FileStatus> tmpFiles=getFiles(path,new ArrayList<FileStatus>(),false);
  for (  FileStatus f : tmpFiles) {
    log.debug(""String_Node_Str"" + f.getPath().getName());
    if (f.getPath().getName().startsWith(filterPrefix)) {
      files.add(f);
    }
  }
  return new HDFSIdIterator(files);
}"
44781,"private List<FileStatus> getFiles(final Path p,List<FileStatus> target) throws IOException {
  for (  FileStatus f : getFileSystem().listStatus(p)) {
    if (f.isFile()) {
      target.add(f);
    }
    if (f.isDirectory()) {
      getFiles(f.getPath(),target);
    }
  }
  return target;
}","private List<FileStatus> getFiles(final Path p,List<FileStatus> target,boolean recursive) throws IOException {
  for (  FileStatus f : getFileSystem().listStatus(p)) {
    if (f.isFile()) {
      target.add(f);
    }
    if (f.isDirectory() && recursive) {
      getFiles(f.getPath(),target,recursive);
    }
  }
  return target;
}"
44782,"/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  HDFSBlob blob;
  OutputStream out=null;
  try {
    blob=new HDFSBlob(new URI(this.store.getId() + UUID.randomUUID().toString()),this);
    out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    return blob;
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}","/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  if (in == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  HDFSBlob blob;
  OutputStream out=null;
  try {
    blob=new HDFSBlob(URI.create(""String_Node_Str"" + UUID.randomUUID().toString()),this);
    log.debug(""String_Node_Str"" + blob.getId().toASCIIString());
    out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    return blob;
  }
  finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}"
44783,"@Override public URI next(){
  return files.get(currentIndex++).getPath().toUri();
}","@Override public URI next(){
  return URI.create(""String_Node_Str"" + files.get(currentIndex++).getPath().getName());
}"
44784,"@Test public void testGetBlob1() throws Exception {
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}","@Test public void testGetBlob1() throws Exception {
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(3);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}"
44785,"@Test public void testListBlobIds() throws Exception {
  expect(mockStore.getFileSystem()).andReturn(mockFs);
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus());
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}","@Test public void testListBlobIds() throws Exception {
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus()).times(2);
  expect(mockStore.getId()).andReturn(URI.create(""String_Node_Str"")).times(2);
  expect(mockStore.getFileSystem()).andReturn(mockFs).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=new HDFSBlobStoreConnection(mockStore);
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}"
44786,"@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}","@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri);
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}"
44787,"@Before public void init() throws Exception {
  mockFs=createMock(FileSystem.class);
  store=new HDFSBlobStore(storeUri.toASCIIString());
  Field f=HDFSBlobStore.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  f.set(store,mockFs);
}","@Before public void init() throws Exception {
  mockFs=createMock(FileSystem.class);
  store=new HDFSBlobStore(storeUri);
  Field f=HDFSBlobStore.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  f.set(store,mockFs);
}"
44788,"@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}","@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri);
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}"
44789,"@Test public void testHDFSBlob() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b);
}","@Test public void testHDFSBlob() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b);
}"
44790,"@Test public void testExists() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.exists());
}","@Test public void testExists() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.exists());
}"
44791,"@Test @SuppressWarnings(""String_Node_Str"") public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(9);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockConnection.getBlob((URI)anyObject(),(Map<String,String>)anyObject())).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}","@Test @Ignore public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(1);
  expect(mockConnection.getBlob(anyObject(URI.class),anyObject(Map.class))).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(1);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}"
44792,"@Test public void testGetId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(new URI(blobStoreUri + blobUri.toASCIIString().substring(5)),b.getId());
}","@Test public void testGetId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(blobUri,b.getId());
}"
44793,"@Test public void testDelete() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  b.delete();
}","@Test public void testDelete() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore);
  expect(mockStore.getId()).andReturn(blobStoreUri);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  b.delete();
}"
44794,"@Test public void testGetCanonicalId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(new URI(blobStoreUri + blobUri.toASCIIString().substring(5)),b.getCanonicalId());
}","@Test public void testGetCanonicalId() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(blobUri,b.getCanonicalId());
}"
44795,"@Test public void testOpenInputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openInputStream());
}","@Test public void testOpenInputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openInputStream());
}"
44796,"@Test public void testOpenOutputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openOutputStream(0,false));
}","@Test public void testOpenOutputStream() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertNotNull(b.openOutputStream(0,false));
}"
44797,"@Test public void testGetConnection() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(mockConnection,b.getConnection());
}","@Test public void testGetConnection() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertEquals(mockConnection,b.getConnection());
}"
44798,"@Test public void testGetSize() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.getSize() == 1024);
}","@Test public void testGetSize() throws Exception {
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(3);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  assertTrue(b.getSize() == 1024);
}"
44799,"/** 
 * get the size of the   {@link HDFSBlob}
 * @return the size of the {@link HDFSBlob}
 * @throws IOException if the operation did not succeed
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public long getSize() throws IOException, MissingBlobException {
  log.debug(""String_Node_Str"" + this.getId().toASCIIString());
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  return getFileSystem().getFileStatus(path).getLen();
}","/** 
 * get the size of the   {@link HDFSBlob}
 * @return the size of the {@link HDFSBlob}
 * @throws IOException if the operation did not succeed
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public long getSize() throws IOException, MissingBlobException {
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  return getFileSystem().getFileStatus(path).getLen();
}"
44800,"/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    log.debug(e.getLocalizedMessage() + ""String_Node_Str"",e);
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    this.hdfs=this.conn.getFileSystem();
    return this.getFileSystem().exists(path);
  }
}","/** 
 * check if this   {@link HDFSBlob} exists in the underlying Hadoop filesystem
 * @throws IOException if the operation did not succeed
 */
public boolean exists() throws IOException {
  try {
    return this.getFileSystem().exists(path);
  }
 catch (  IOException e) {
    this.conn=(HDFSBlobStoreConnection)this.getConnection().getBlobStore().openConnection(null,null);
    return this.getFileSystem().exists(path);
  }
}"
44801,"/** 
 * move a   {@link HDFSBlob} to another location on the Hadoop filesystem
 * @param toUri the  {@link URI} of the new location where this{@link HDFSBlob} should be moved to
 * @param hints hints are currently ignored
 * @throws DuplicateBlobException if another file exists with the same  {@link URI}
 * @throws IOException if the move did not succeed on the underlying filesystem
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public Blob moveTo(final URI toUri,final Map<String,String> hints) throws DuplicateBlobException, IOException, MissingBlobException {
  log.debug(""String_Node_Str"" + this.getId().toASCIIString() + ""String_Node_Str""+ toUri.toASCIIString());
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  HDFSBlob newBlob=(HDFSBlob)this.getConnection().getBlob(toUri,null);
  if (newBlob.exists()) {
    throw new DuplicateBlobException(toUri);
  }
  InputStream in=this.openInputStream();
  OutputStream out=newBlob.openOutputStream(this.getSize(),false);
  IOUtils.copy(in,out);
  in.close();
  out.close();
  this.delete();
  return newBlob;
}","/** 
 * move a   {@link HDFSBlob} to another location on the Hadoop filesystem
 * @param toUri the  {@link URI} of the new location where this{@link HDFSBlob} should be moved to
 * @param hints hints are currently ignored
 * @throws DuplicateBlobException if another file exists with the same  {@link URI}
 * @throws IOException if the move did not succeed on the underlying filesystem
 * @throws MissingBlobException if this  {@link HDFSBlob} does not exist
 */
public Blob moveTo(final URI toUri,final Map<String,String> hints) throws DuplicateBlobException, IOException, MissingBlobException {
  if (!this.exists()) {
    throw new MissingBlobException(uri);
  }
  HDFSBlob newBlob=(HDFSBlob)this.getConnection().getBlob(toUri,null);
  if (newBlob.exists()) {
    throw new DuplicateBlobException(toUri);
  }
  InputStream in=null;
  OutputStream out=null;
  try {
    in=this.openInputStream();
    out=newBlob.openOutputStream(this.getSize(),false);
    IOUtils.copy(in,out);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
  this.delete();
  return newBlob;
}"
44802,"/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  HDFSBlob blob;
  try {
    blob=new HDFSBlob(new URI(this.store.getId() + UUID.randomUUID().toString()),this);
    OutputStream out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    in.close();
    out.close();
    return blob;
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
}","/** 
 * create a new   {@link HDFSBlob} in the {@link HDFSBlobStore}
 * @param in the  {@link InputStream} pointing to the new {@link HDFSBlob}'s data
 * @param estimatedSize not used
 * @param hints not used
 * @throws IOException if the operation did not succeed
 */
public Blob getBlob(final InputStream in,final long estimatedSize,final Map<String,String> hints) throws IOException {
  HDFSBlob blob;
  OutputStream out=null;
  try {
    blob=new HDFSBlob(new URI(this.store.getId() + UUID.randomUUID().toString()),this);
    out=blob.openOutputStream(estimatedSize,false);
    IOUtils.copy(in,out);
    return blob;
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
 finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}"
44803,"@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}","@Test public void testGetId() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  store.setFileSystem(mockFs);
  assertNotNull(store);
  assertEquals(storeUri,store.getId());
}"
44804,"@Test public void testHDFSBlobStoreString() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store);
}","@Test public void testHDFSBlobStoreString() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  store.setFileSystem(mockFs);
  assertNotNull(store);
}"
44805,"@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}","@Test public void testOpenConnection() throws Exception {
  HDFSBlobStore store=new HDFSBlobStore(storeUri.toASCIIString());
  store.setFileSystem(mockFs);
  assertNotNull(store.openConnection(null,null));
  assertFalse(store.openConnection(null,null).isClosed());
}"
44806,"@Test public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(9);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockConnection.getBlob((URI)anyObject(),(Map<String,String>)anyObject())).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}","@Test @SuppressWarnings(""String_Node_Str"") public void testMoveTo() throws Exception {
  URI toUri=new URI(blobStoreUri.toASCIIString() + ""String_Node_Str"");
  expect(mockConnection.getBlobStore()).andReturn(mockStore).times(2);
  expect(mockStore.getId()).andReturn(blobStoreUri).times(2);
  expect(mockConnection.getFileSystem()).andReturn(mockFs).times(9);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockConnection.getBlob((URI)anyObject(),(Map<String,String>)anyObject())).andReturn(new HDFSBlob(toUri,mockConnection));
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  byte[] buf=new byte[1024];
  new Random().nextBytes(buf);
  expect(mockFs.open((Path)anyObject())).andReturn(new FSDataInputStream(new SeekableInputStream(buf)));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  expect(mockFs.getFileStatus((Path)anyObject())).andReturn(createTestFileStatus());
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(1024),null));
  expect(mockFs.delete((Path)anyObject(),anyBoolean())).andReturn(true);
  replay(mockConnection,mockFs,mockStore);
  HDFSBlob b=new HDFSBlob(blobUri,mockConnection);
  HDFSBlob newBlob=(HDFSBlob)b.moveTo(toUri,null);
  assertNotNull(newBlob);
  assertEquals(toUri,newBlob.getId());
}"
44807,"/** 
 * create a new   {@link HDFSBlobStoreConnection} to specified HDFs namenode
 * @param store the  {@link HDFSBlobStore} this {@link HDFSBlobStoreConnection}will try to connect to
 * @throws IOException if the connection did not succeed
 */
public HDFSBlobStoreConnection(final HDFSBlobStore store) throws IOException {
  this.store=store;
  hdfs=store.openHDFSConnection();
}","/** 
 * create a new   {@link HDFSBlobStoreConnection} to specified HDFs namenode
 * @param store the  {@link HDFSBlobStore} this {@link HDFSBlobStoreConnection}will try to connect to
 * @throws IOException if the connection did not succeed
 */
public HDFSBlobStoreConnection(final HDFSBlobStore store) throws IOException {
  this.store=store;
  hdfs=this.getFileSystem();
}"
44808,"/** 
 * check the connection state
 * @return true if the connection is open
 */
public boolean isClosed(){
  return hdfs == null;
}","/** 
 * check the connection state
 * @return true if the connection is open
 */
public boolean isClosed(){
  return closed;
}"
44809,"FileSystem getFileSystem() throws IOException {
  if (hdfs == null) {
    hdfs=store.openHDFSConnection();
    log.debug(""String_Node_Str"" + store.getId());
  }
  return hdfs;
}","FileSystem getFileSystem() throws IOException {
  if (hdfs == null) {
    hdfs=store.getFilesystem();
    log.debug(""String_Node_Str"" + store.getId());
  }
  return hdfs;
}"
44810,"/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  return new HDFSIdIterator(this.getFileSystem(),filterPrefix);
}","/** 
 * create a new   {@link HDFSIdIterator} over all the {@link HDFSBlob}s in the  {@link HDFSBlobStore}
 * @return an {@link Iterator} for the collection of filesystem entries
 * @throws IOException if the operation did not succeed
 */
public Iterator<URI> listBlobIds(final String filterPrefix) throws IOException {
  if (isClosed()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return new HDFSIdIterator(this.getFileSystem(),filterPrefix);
}"
44811,"/** 
 * close this connection
 */
@Override public void close(){
  store.releaseHDFSConnection(hdfs);
  hdfs=null;
}","/** 
 * close this connection
 */
@Override public void close(){
  closed=true;
  hdfs=null;
}"
44812,"/** 
 * fetch a   {@link HDFSBlob} from the {@link HDFSBlobStore}
 * @param uri the  {@link URI} of the {@link HDFSBlob}
 * @param hints not used
 * @throws UnsupportedIdException if the supplied  {@link URI} was not valid
 */
public Blob getBlob(final URI uri,final Map<String,String> hints) throws UnsupportedIdException, IOException {
  if (uri == null) {
    URI tmp=URI.create(store.getId() + UUID.randomUUID().toString());
    log.debug(""String_Node_Str"" + tmp.toASCIIString());
    return new HDFSBlob(tmp,this);
  }
  log.debug(""String_Node_Str"" + uri);
  if (uri.getRawSchemeSpecificPart().startsWith(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + uri);
  }
  if (!uri.toASCIIString().startsWith(""String_Node_Str"")) {
    throw new UnsupportedIdException(uri,""String_Node_Str"");
  }
  HDFSBlob blob=new HDFSBlob(uri,this);
  return blob;
}","/** 
 * fetch a   {@link HDFSBlob} from the {@link HDFSBlobStore}
 * @param uri the  {@link URI} of the {@link HDFSBlob}
 * @param hints not used
 * @throws UnsupportedIdException if the supplied  {@link URI} was not valid
 */
public Blob getBlob(final URI uri,final Map<String,String> hints) throws UnsupportedIdException, IOException {
  if (isClosed()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (uri == null) {
    URI tmp=URI.create(store.getId() + UUID.randomUUID().toString());
    log.debug(""String_Node_Str"" + tmp.toASCIIString());
    return new HDFSBlob(tmp,this);
  }
  log.debug(""String_Node_Str"" + uri);
  if (uri.getRawSchemeSpecificPart().startsWith(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + uri);
  }
  if (!uri.toASCIIString().startsWith(""String_Node_Str"")) {
    throw new UnsupportedIdException(uri,""String_Node_Str"");
  }
  HDFSBlob blob=new HDFSBlob(uri,this);
  return blob;
}"
44813,"@Test public void testGetFileSystem() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getFileSystem());
  assertTrue(connection.getFileSystem() == mockFs);
}","@Test public void testGetFileSystem() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getFileSystem());
  assertTrue(connection.getFileSystem() == mockFs);
}"
44814,"@Test(expected=UnsupportedOperationException.class) public void testSync() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.sync();
}","@Test(expected=UnsupportedOperationException.class) public void testSync() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.sync();
}"
44815,"@Test public void testGetBlob1() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(3);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}","@Test public void testGetBlob1() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId).times(3);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSBlob b=(HDFSBlob)connection.getBlob(new URI(""String_Node_Str""),null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
}"
44816,"@Test public void testListBlobIds() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus()).times(2);
  expect(mockStore.getId()).andReturn(URI.create(""String_Node_Str"")).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}","@Test public void testListBlobIds() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockFs.listStatus((Path)anyObject())).andReturn(createTestFileStatus()).times(2);
  expect(mockStore.getId()).andReturn(URI.create(""String_Node_Str"")).times(2);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  HDFSIdIterator it=(HDFSIdIterator)connection.listBlobIds(""String_Node_Str"");
  assertNotNull(it);
}"
44817,"@Test public void testGetBlobStore() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getBlobStore());
  assertTrue(connection.getBlobStore() == mockStore);
  assertTrue(connection.getBlobStore() instanceof HDFSBlobStore);
}","@Test public void testGetBlobStore() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection.getBlobStore());
  assertTrue(connection.getBlobStore() == mockStore);
  assertTrue(connection.getBlobStore() instanceof HDFSBlobStore);
}"
44818,"@Test public void testClose() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  mockFs.close();
  mockStore.releaseHDFSConnection(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.close();
}","@Test public void testClose() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  mockFs.close();
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  connection.close();
}"
44819,"@Test public void testHDFSBlobStoreConnection() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str""));
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection);
}","@Test public void testHDFSBlobStoreConnection() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertNotNull(connection);
}"
44820,"@Test public void testReopen() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str""));
  mockFs.close();
  mockStore.releaseHDFSConnection(mockFs);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertFalse(connection.isClosed());
  connection.close();
}","@Test public void testReopen() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId);
  mockFs.close();
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  assertFalse(connection.isClosed());
  connection.close();
}"
44821,"@Test public void testCreateBlob1() throws Exception {
  expect(mockStore.openHDFSConnection()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(new URI(""String_Node_Str"")).times(2);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(20),null));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  byte[] buf=new byte[4096];
  new Random().nextBytes(buf);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new ByteArrayInputStream(buf),4096,null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
  assertTrue(b.exists());
}","@Test public void testCreateBlob1() throws Exception {
  expect(mockStore.getFilesystem()).andReturn(mockFs);
  expect(mockStore.getId()).andReturn(mockId).times(3);
  expect(mockFs.exists((Path)anyObject())).andReturn(false);
  expect(mockFs.create((Path)anyObject())).andReturn(new FSDataOutputStream(new ByteArrayOutputStream(20),null));
  expect(mockFs.exists((Path)anyObject())).andReturn(true);
  replay(mockStore,mockFs);
  HDFSBlobStoreConnection connection=createTestConnection();
  byte[] buf=new byte[4096];
  new Random().nextBytes(buf);
  HDFSBlob b=(HDFSBlob)connection.getBlob(new ByteArrayInputStream(buf),4096,null);
  assertNotNull(b);
  assertTrue(b.getConnection() == connection);
  assertTrue(b.exists());
}"
44822,"/** 
 * removes an item from a given inventory. It also takes into account the amount of the item and removes only that much, even if there is less than the amount in two different stacks.
 * @param inventory-the inventory to remove it from
 * @param item-the itemstack to remove from the inventory
 * @return the last index the item was removed from
 */
public int removeFromInventory(PlayerInventory inventory,ItemStack item){
  int amountLeft=item.getAmount();
  if (inventory.contains(item.getType(),item.getAmount())) {
    while (amountLeft > 0) {
      int firstFound=inventory.first(item.getType());
      if (inventory.getItem(firstFound).getAmount() >= amountLeft) {
        inventory.getItem(firstFound).setAmount(inventory.getItem(firstFound).getAmount() - amountLeft);
        return firstFound;
      }
 else {
        amountLeft-=inventory.getItem(inventory.first(item.getType())).getAmount();
        inventory.clear(inventory.first(item.getType()));
      }
    }
  }
  return -1;
}","/** 
 * removes an item from a given inventory. It also takes into account the amount of the item and removes only that much, even if there is less than the amount in two different stacks.
 * @param inventory-the inventory to remove it from
 * @param item-the itemstack to remove from the inventory
 * @return the last index the item was removed from
 */
public int removeFromInventory(PlayerInventory inventory,ItemStack item){
  int amountLeft=item.getAmount();
  if (inventory.contains(item.getType(),item.getAmount())) {
    while (amountLeft > 0) {
      int firstFound=inventory.first(item.getType());
      if (inventory.getItem(firstFound).getAmount() > amountLeft) {
        inventory.getItem(firstFound).setAmount(inventory.getItem(firstFound).getAmount() - amountLeft);
        return firstFound;
      }
 else {
        amountLeft-=inventory.getItem(inventory.first(item.getType())).getAmount();
        inventory.clear(inventory.first(item.getType()));
      }
    }
  }
  return -1;
}"
44823,"/** 
 * removes all of the spell's required items from the given inventory
 * @param inventory-the inventory to remove the items from
 * @return false-if the player did not have the neccesary items
 * @return true-if the items were removed from the player's inventory
 */
public boolean removeRequiredItemsFromInventory(PlayerInventory inventory){
  if (checkInventoryRequirements(inventory)) {
    for (int i=0; i < requiredItems.size(); i++) {
      removeFromInventory(inventory,requiredItems.get(i));
    }
    return true;
  }
  return false;
}","/** 
 * removes all of the spell's required items from the given inventory
 * @param inventory-the inventory to remove the items from
 * @return false-if the player did not have the neccesary items
 * @return true-if the items were removed from the player's inventory
 */
public boolean removeRequiredItemsFromInventory(PlayerInventory inventory){
  if (checkInventoryRequirements(inventory)) {
    for (int i=0; i <= requiredItems.size() - 1; i++) {
      removeFromInventory(inventory,requiredItems.get(i));
    }
    return true;
  }
  return false;
}"
44824,"public void changeToGold(Block block,Player player){
  if (block.getType() == Material.BED_BLOCK || block.getType() == Material.BEDROCK || block.getType() == Material.BOAT || block.getType() == Material.BOOKSHELF || block.getType() == Material.BRICK || block.getType() == Material.BRICK || block.getType() == Material.CAKE_BLOCK || block.getType() == Material.COAL_ORE || block.getType() == Material.COBBLESTONE || block.getType() == Material.COBBLESTONE_STAIRS || block.getType() == Material.DEAD_BUSH || block.getType() == Material.DIAMOND_BLOCK || block.getType() == Material.DIAMOND_ORE || block.getType() == Material.DIRT || block.getType() == Material.FENCE || block.getType() == Material.GLASS || block.getType() == Material.GLOWING_REDSTONE_ORE || block.getType() == Material.GLOWSTONE || block.getType() == Material.GOLD_ORE || block.getType() == Material.GRASS || block.getType() == Material.GRAVEL || block.getType() == Material.ICE || block.getType() == Material.IRON_BLOCK || block.getType() == Material.IRON_DOOR_BLOCK || block.getType() == Material.IRON_ORE || block.getType() == Material.JACK_O_LANTERN || block.getType() == Material.LAPIS_BLOCK || block.getType() == Material.LAPIS_ORE || block.getType() == Material.LAVA || block.getType() == Material.LEAVES || block.getType() == Material.MOSSY_COBBLESTONE || block.getType() == Material.NETHERRACK || block.getType() == Material.OBSIDIAN || block.getType() == Material.PUMPKIN || block.getType() == Material.REDSTONE_ORE || block.getType() == Material.SAND || block.getType() == Material.SNOW_BLOCK || block.getType() == Material.SOIL || block.getType() == Material.SOUL_SAND || block.getType() == Material.STATIONARY_LAVA || block.getType() == Material.STATIONARY_WATER || block.getType() == Material.STEP || block.getType() == Material.STONE || block.getType() == Material.SUGAR_CANE_BLOCK || block.getType() == Material.TNT || block.getType() == Material.TRAP_DOOR || block.getType() == Material.WOOD || block.getType() == Material.LOG || block.getType() == Material.WOOD_STAIRS || block.getType() == Material.WOODEN_DOOR || block.getType() == Material.WOOL || block.getType() == Material.WORKBENCH) {
    System.out.println(block.getLocation());
    locations.get(player).add(block.getLocation());
    materials.get(player).add(block.getType());
    bytes.get(player).add(block.getData());
    block.setType(Material.GOLD_BLOCK);
    System.out.println(""String_Node_Str"");
  }
}","public void changeToGold(Block block,Player player){
  if (block.getType() == Material.BED_BLOCK || block.getType() == Material.BEDROCK || block.getType() == Material.BOAT || block.getType() == Material.BOOKSHELF || block.getType() == Material.BRICK || block.getType() == Material.BRICK || block.getType() == Material.CAKE_BLOCK || block.getType() == Material.COAL_ORE || block.getType() == Material.COBBLESTONE || block.getType() == Material.COBBLESTONE_STAIRS || block.getType() == Material.DEAD_BUSH || block.getType() == Material.DIAMOND_BLOCK || block.getType() == Material.DIAMOND_ORE || block.getType() == Material.DIRT || block.getType() == Material.FENCE || block.getType() == Material.GLASS || block.getType() == Material.GLOWING_REDSTONE_ORE || block.getType() == Material.GLOWSTONE || block.getType() == Material.GOLD_ORE || block.getType() == Material.GRASS || block.getType() == Material.GRAVEL || block.getType() == Material.ICE || block.getType() == Material.IRON_BLOCK || block.getType() == Material.IRON_DOOR_BLOCK || block.getType() == Material.IRON_ORE || block.getType() == Material.JACK_O_LANTERN || block.getType() == Material.LAPIS_BLOCK || block.getType() == Material.LAPIS_ORE || block.getType() == Material.LAVA || block.getType() == Material.LEAVES || block.getType() == Material.MOSSY_COBBLESTONE || block.getType() == Material.NETHERRACK || block.getType() == Material.OBSIDIAN || block.getType() == Material.PUMPKIN || block.getType() == Material.REDSTONE_ORE || block.getType() == Material.SAND || block.getType() == Material.SNOW_BLOCK || block.getType() == Material.SOIL || block.getType() == Material.SOUL_SAND || block.getType() == Material.STATIONARY_LAVA || block.getType() == Material.STATIONARY_WATER || block.getType() == Material.STEP || block.getType() == Material.STONE || block.getType() == Material.SUGAR_CANE_BLOCK || block.getType() == Material.TNT || block.getType() == Material.TRAP_DOOR || block.getType() == Material.WOOD || block.getType() == Material.LOG || block.getType() == Material.WOOD_STAIRS || block.getType() == Material.WOODEN_DOOR || block.getType() == Material.WOOL || block.getType() == Material.WORKBENCH) {
    locations.get(player).add(block.getLocation());
    materials.get(player).add(block.getType());
    bytes.get(player).add(block.getData());
    block.setType(Material.GOLD_BLOCK);
  }
}"
44825,"public void castSpell(Player player){
  Random gen=new Random();
  globalPlayer=player;
  PlayerInventory inventory=player.getInventory();
  if (removeRequiredItemsFromInventory(inventory)) {
    List<Entity> nearbyEntities;
    nearbyEntities=player.getNearbyEntities(5,5,5);
    for (int i=0; i < nearbyEntities.size(); i++) {
      Vector newVelocity=new Vector(((gen.nextFloat() - .3) * .8),gen.nextFloat(),(gen.nextFloat() - .3) * .8);
      nearbyEntities.get(i).setVelocity(newVelocity);
    }
    for (int i=10; i < 16; i=i + 2) {
      delayedRun(i,0);
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}","public void castSpell(Player player){
  Random gen=new Random();
  globalPlayer=player;
  PlayerInventory inventory=player.getInventory();
  if (removeRequiredItemsFromInventory(inventory)) {
    List<Entity> nearbyEntities;
    nearbyEntities=player.getNearbyEntities(5,5,5);
    for (int i=0; i < nearbyEntities.size(); i++) {
      Vector newVelocity=new Vector(((gen.nextFloat() - .3) * .8),gen.nextFloat() * 20,(gen.nextFloat() - .3) * .8);
      nearbyEntities.get(i).setVelocity(newVelocity);
    }
    for (int i=200; i < 16; i=i + 4) {
      delayedRun(i,0);
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}"
44826,"public void run(Object... argument){
  Player player=globalPlayer;
  Random gen=new Random();
  List<Entity> nearbyEntities;
  nearbyEntities=player.getNearbyEntities(5,5,5);
  for (int i=0; i < nearbyEntities.size(); i++) {
    Vector newVelocity=new Vector(((gen.nextFloat() - .5) * .8),gen.nextFloat(),(gen.nextFloat() - .5) * .8);
    nearbyEntities.get(i).setVelocity(newVelocity);
  }
}","public void run(Object... argument){
  Player player=globalPlayer;
  Random gen=new Random();
  List<Entity> nearbyEntities;
  nearbyEntities=player.getNearbyEntities(5,5,5);
  for (int i=0; i < nearbyEntities.size(); i++) {
    Vector newVelocity=new Vector(((gen.nextFloat() - .5) * .8),gen.nextFloat() * 5,(gen.nextFloat() - .5) * .8);
    nearbyEntities.get(i).setVelocity(newVelocity);
  }
}"
44827,"public SpellBook(Player player,SimplePlugin instance){
  plugin=instance;
  registerSpell(new RapidfireSpell(plugin));
  registerSpell(new ExplosionSpell(plugin));
  registerSpell(new SpikeSpell(plugin));
  registerSpell(new Tornado(plugin));
  registerSpell(new SpikeWallSpell(plugin));
  registerSpell(new SpikeFortSpell(plugin));
}","public SpellBook(Player player,SimplePlugin instance){
  plugin=instance;
  registerSpell(new RapidfireSpell(plugin));
  registerSpell(new ExplosionSpell(plugin));
  registerSpell(new SpikeSpell(plugin));
  registerSpell(new Tornado(plugin));
  registerSpell(new SpikeWallSpell(plugin));
  registerSpell(new SpikeFortSpell(plugin));
  registerSpell(new DecoySpell(plugin));
}"
44828,"public void castSpell(Player player){
  PlayerInventory inventory=player.getInventory();
  if (checkInventoryRequirements(inventory)) {
    Block targetBlock=player.getTargetBlock(null,MAXDISTANCE);
    if (targetBlock.getType() != Material.AIR) {
      LivingEntity cow=player.getWorld().spawnCreature(targetBlock.getLocation(),CreatureType.COW);
      List<Entity> nearCow=cow.getNearbyEntities(10,10,10);
      for (int i=0; i < nearCow.size(); i++) {
        Creature currentCreature=(Creature)nearCow.get(i);
        currentCreature.setTarget(cow);
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}","public void castSpell(Player player){
  PlayerInventory inventory=player.getInventory();
  if (checkInventoryRequirements(inventory)) {
    Block targetBlock=player.getTargetBlock(null,MAXDISTANCE);
    if (targetBlock.getType() != Material.AIR) {
      LivingEntity cow=player.getWorld().spawnCreature(targetBlock.getLocation(),CreatureType.COW);
      List<Entity> nearCow=cow.getNearbyEntities(10,10,10);
      for (int i=0; i < nearCow.size(); i++) {
        Entity currentCreature=nearCow.get(i);
        try {
          if (currentCreature.getClass() != CraftPlayer.class && currentCreature.getClass() != CraftItem.class) {
            ((Creature)currentCreature).setTarget(cow);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}"
44829,"/** 
 * removes an item from a given inventory. It also takes into account the amount of the item and removes only that much, even if there is less than the amount in two different stacks.
 * @param inventory-the inventory to remove it from
 * @param item-the itemstack to remove from the inventory
 * @return the last index the item was removed from
 */
public int removeFromInventory(PlayerInventory inventory,ItemStack item){
  int amountLeft=item.getAmount();
  if (inventory.contains(item.getType(),item.getAmount())) {
    while (amountLeft > 0) {
      int firstFound=inventory.first(item.getType());
      if (inventory.getItem(firstFound).getAmount() >= amountLeft) {
        inventory.getItem(firstFound).setAmount(inventory.getItem(firstFound).getAmount() - amountLeft);
        amountLeft=0;
        return firstFound;
      }
 else {
        amountLeft-=inventory.getItem(inventory.first(item.getType())).getAmount();
        inventory.clear(inventory.first(item.getType()));
      }
    }
  }
  return -1;
}","/** 
 * removes an item from a given inventory. It also takes into account the amount of the item and removes only that much, even if there is less than the amount in two different stacks.
 * @param inventory-the inventory to remove it from
 * @param item-the itemstack to remove from the inventory
 * @return the last index the item was removed from
 */
public int removeFromInventory(PlayerInventory inventory,ItemStack item){
  int amountLeft=item.getAmount();
  if (inventory.contains(item.getType(),item.getAmount())) {
    while (amountLeft > 0) {
      int firstFound=inventory.first(item.getType());
      if (inventory.getItem(firstFound).getAmount() > amountLeft) {
        inventory.getItem(firstFound).setAmount(inventory.getItem(firstFound).getAmount() - amountLeft);
        return firstFound;
      }
 else       if (inventory.getItem(firstFound).getAmount()=amountLeft) {
        inventory.clear(inventory.first(item.getType()));
        return firstFound;
      }
 else {
        amountLeft-=inventory.getItem(inventory.first(item.getType())).getAmount();
        inventory.clear(inventory.first(item.getType()));
      }
    }
  }
  return -1;
}"
44830,"/** 
 * removes an item from a given inventory. It also takes into account the amount of the item and removes only that much, even if there is less than the amount in two different stacks.
 * @param inventory-the inventory to remove it from
 * @param item-the itemstack to remove from the inventory
 * @return the last index the item was removed from
 */
public int removeFromInventory(PlayerInventory inventory,ItemStack item){
  int amountLeft=item.getAmount();
  if (inventory.contains(item.getType(),item.getAmount())) {
    while (amountLeft > 0) {
      int firstFound=inventory.first(item.getType());
      if (inventory.getItem(firstFound).getAmount() > amountLeft) {
        inventory.getItem(firstFound).setAmount(inventory.getItem(firstFound).getAmount() - amountLeft);
        return firstFound;
      }
 else       if (inventory.getItem(firstFound).getAmount()=amountLeft) {
        inventory.clear(inventory.first(item.getType()));
        return firstFound;
      }
 else {
        amountLeft-=inventory.getItem(inventory.first(item.getType())).getAmount();
        inventory.clear(inventory.first(item.getType()));
      }
    }
  }
  return -1;
}","/** 
 * removes an item from a given inventory. It also takes into account the amount of the item and removes only that much, even if there is less than the amount in two different stacks.
 * @param inventory-the inventory to remove it from
 * @param item-the itemstack to remove from the inventory
 * @return the last index the item was removed from
 */
public int removeFromInventory(PlayerInventory inventory,ItemStack item){
  int amountLeft=item.getAmount();
  if (inventory.contains(item.getType(),item.getAmount())) {
    while (amountLeft > 0) {
      int firstFound=inventory.first(item.getType());
      if (inventory.getItem(firstFound).getAmount() > amountLeft) {
        inventory.getItem(firstFound).setAmount(inventory.getItem(firstFound).getAmount() - amountLeft);
        return firstFound;
      }
 else       if (inventory.getItem(firstFound).getAmount() == amountLeft) {
        inventory.clear(inventory.first(item.getType()));
        return firstFound;
      }
 else {
        amountLeft-=inventory.getItem(inventory.first(item.getType())).getAmount();
        inventory.clear(inventory.first(item.getType()));
      }
    }
  }
  return -1;
}"
44831,"public void castSpell(Player player){
  PlayerInventory inventory=player.getInventory();
  if (checkInventoryRequirements(inventory)) {
    removeRequiredItemsFromInventory(inventory);
    addItem(newItemStack(Material.BUCKET,1));
    List<Entity> nearbyEntities;
    nearbyEntities=getNearbyEntities(5,5,5);
    for (int i=0; i < nearbyEntities.length; i++) {
      Vector newVelocity=new Vector((randomGen.nextFloat() * 1.5 - 0.75),randomGen.nextFloat() / 2.5,randomGen.nextFloat() * 1.5 - 0.75);
      nearbyEntities.get(i).setVelocity(newVelocity);
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}","public void castSpell(Player player){
  Random gen=new Random();
  PlayerInventory inventory=player.getInventory();
  if (checkInventoryRequirements(inventory)) {
    removeRequiredItemsFromInventory(inventory);
    player.getInventory().addItem(new ItemStack(Material.BUCKET,1));
    List<Entity> nearbyEntities;
    nearbyEntities=player.getNearbyEntities(5,5,5);
    for (int i=0; i < nearbyEntities.size(); i++) {
      Vector newVelocity=new Vector((gen.nextFloat() * 1.5 - 0.75),gen.nextFloat() / 2.5,gen.nextFloat() * 1.5 - 0.75);
      nearbyEntities.get(i).setVelocity(newVelocity);
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}"
44832,"public void createExplosion(Block targetBlock,int size){
  ((CraftWorld)targetBlock.getWorld()).getHandle().createExplosion(null,targetBlock.getLocation().getX(),targetBlock.getLocation().getY(),targetBlock.getLocation().getZ(),size,false);
}","public void createExplosion(Block targetBlock,int size){
}"
44833,"public void onPlayerJoin(PlayerJoinEvent event){
  Player player=event.getPlayer();
  SimplePlugin.playerBooks.put(player.getName(),new SpellBook(player));
}","public void onPlayerJoin(PlayerJoinEvent event){
  Player player=event.getPlayer();
  SimplePlugin.playerBooks.put(player.getName(),new SpellBook(player,plugin));
}"
44834,"public void onEnable(){
  log.info(""String_Node_Str"");
  PluginManager pm=this.getServer().getPluginManager();
  ItemStack hoe=new ItemStack(Material.GOLD_HOE,1);
  ShapedRecipe sceptre=new ShapedRecipe(hoe);
  sceptre.shape(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sceptre.setIngredient('1',Material.STICK);
  sceptre.setIngredient('2',Material.GOLD_BLOCK);
  sceptre.setIngredient('3',Material.STICK);
  sceptre.setIngredient('5',Material.STICK);
  sceptre.setIngredient('8',Material.STICK);
  this.getServer().addRecipe(sceptre);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  Player[] onlinePlayers=this.getServer().getOnlinePlayers();
  for (int i=0; i < onlinePlayers.length; i++) {
    SimplePlugin.playerBooks.put(onlinePlayers[i].getName(),new SpellBook(onlinePlayers[i]));
  }
  log.info(""String_Node_Str"");
}","public void onEnable(){
  log.info(""String_Node_Str"");
  PluginManager pm=this.getServer().getPluginManager();
  ItemStack hoe=new ItemStack(Material.GOLD_HOE,1);
  ShapedRecipe sceptre=new ShapedRecipe(hoe);
  sceptre.shape(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sceptre.setIngredient('1',Material.STICK);
  sceptre.setIngredient('2',Material.GOLD_BLOCK);
  sceptre.setIngredient('3',Material.STICK);
  sceptre.setIngredient('5',Material.STICK);
  sceptre.setIngredient('8',Material.STICK);
  this.getServer().addRecipe(sceptre);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  Player[] onlinePlayers=this.getServer().getOnlinePlayers();
  for (int i=0; i < onlinePlayers.length; i++) {
    SimplePlugin.playerBooks.put(onlinePlayers[i].getName(),new SpellBook(onlinePlayers[i],this));
  }
  log.info(""String_Node_Str"");
}"
44835,"public SpellBook(Player player){
  registerSpell(new BedrockLightningSpell());
  registerSpell(new RapidfireArrowSpell());
  registerSpell(new ExplosionSpell());
}","public SpellBook(Player player,SimplePlugin instance){
  plugin=instance;
  registerSpell(new BedrockLightningSpell(plugin));
  registerSpell(new RapidfireArrowSpell(plugin));
  registerSpell(new ExplosionSpell(plugin));
}"
44836,"public BedrockLightningSpell(){
  spellName=""String_Node_Str"";
  spellDescription=""String_Node_Str"";
}","public BedrockLightningSpell(SimplePlugin instance){
  plugin=instance;
  spellName=""String_Node_Str"";
  spellDescription=""String_Node_Str"";
}"
44837,"public ExplosionSpell(){
  spellName=""String_Node_Str"";
  spellDescription=""String_Node_Str"";
}","public ExplosionSpell(SimplePlugin instance){
  plugin=instance;
  spellName=""String_Node_Str"";
  spellDescription=""String_Node_Str"";
}"
44838,"public void castSpell(Player player){
  PlayerInventory inventory=player.getInventory();
  ItemStack[] requiredItems=new ItemStack[2];
  requiredItems[0]=new ItemStack(Material.ARROW,8);
  requiredItems[1]=new ItemStack(Material.REDSTONE,4);
  if (checkInventoryRequirements(inventory,requiredItems)) {
    removeRequiredItemsFromInventory(inventory,requiredItems);
    player.shootArrow();
    for (int i=0; i < 7; i++) {
      try {
        Thread.sleep(150);
      }
 catch (      InterruptedException ae) {
        System.out.println(ae);
      }
      player.shootArrow();
    }
    player.sendMessage(""String_Node_Str"");
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}","public void castSpell(Player player){
  PlayerInventory inventory=player.getInventory();
  ItemStack[] requiredItems=new ItemStack[2];
  requiredItems[0]=new ItemStack(Material.ARROW,8);
  requiredItems[1]=new ItemStack(Material.REDSTONE,4);
  if (checkInventoryRequirements(inventory,requiredItems)) {
    removeFromInventory(inventory,requiredItems[1]);
    player.shootArrow();
    removeFromInventory(inventory,new ItemStack(Material.ARROW,1));
    for (int i=2; i < 15; i=i + 2) {
      player.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new RunnableShootArrow(player),i);
    }
    player.sendMessage(""String_Node_Str"");
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}"
44839,"public RapidfireArrowSpell(){
  spellName=""String_Node_Str"";
  spellDescription=""String_Node_Str"";
}","public RapidfireArrowSpell(SimplePlugin instance){
  plugin=instance;
  spellName=""String_Node_Str"";
  spellDescription=""String_Node_Str"";
}"
44840,"public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Player player=event.getPlayer();
    Block block=event.getClickedBlock();
    ItemStack itemInHand=player.getItemInHand();
    if (itemInHand.getType() == Material.GOLD_HOE) {
      block.setType(Material.BEDROCK);
    }
  }
}","public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Player player=event.getPlayer();
    Block block=event.getClickedBlock();
    ItemStack itemInHand=player.getItemInHand();
    if (itemInHand.getType() == Material.GOLD_HOE) {
      block.setType(Material.BEDROCK);
    }
  }
}"
44841,"/** 
 * Tests the speed of downloading with a single source using multiple connections, steadily increasing the number of connections to guage  the benefit.
 * @throws Exception If any unexpected error occurs.
 */
public void testNumConnections() throws Exception {
  if (!TEST_ACTIVE) {
    return;
  }
  final String urlString=""String_Node_Str"";
  final URI uri=new URI(urlString);
  final Collection<URI> uris=new LinkedList<URI>();
  uris.add(uri);
  final File testFile=new File(""String_Node_Str"");
  LOG.debug(""String_Node_Str"" + testFile.exists() + ""String_Node_Str""+ testFile.length());
  testFile.delete();
  assertFalse(testFile.isFile());
  final long straighBaseline=download(urlString);
  final int straighBaselineSecs=(int)(straighBaseline / 1000);
  LOG.debug(""String_Node_Str"" + straighBaselineSecs + ""String_Node_Str"");
  final UriResolver resolver=new UriResolver(){
    public Collection<URI> resolve(    final URI uri) throws IOException {
      return uris;
    }
    public URI getSha1(){
      return null;
    }
  }
;
  long baseline=0;
  final File tempDownloadDir=new File(""String_Node_Str"");
  tempDownloadDir.mkdir();
  tempDownloadDir.deleteOnExit();
  for (int i=1; i < 16; i++) {
    final Downloader<MsDState> dl=new MultiSourceDownloader(""String_Node_Str"",testFile,uri,6509767L,""String_Node_Str"",resolver,i,null,tempDownloadDir);
    final long start=System.currentTimeMillis();
    dl.start();
    final long end=System.currentTimeMillis();
    LOG.debug(""String_Node_Str"" + testFile.exists() + ""String_Node_Str""+ testFile.length());
    testFile.delete();
    assertFalse(testFile.isFile());
    final long duration=end - start;
    final int durationSecs=(int)(duration / 1000);
    LOG.debug(""String_Node_Str"" + durationSecs + ""String_Node_Str"");
    if (i == 1) {
      LOG.debug(""String_Node_Str"" + durationSecs + ""String_Node_Str"");
      baseline=duration;
    }
 else {
      if (baseline > duration) {
        final long msSaved=baseline - duration;
        final int secondsSaved=(int)(msSaved / 1000);
        LOG.debug(""String_Node_Str"" + secondsSaved + ""String_Node_Str"");
        final float percentSaved=(float)msSaved / (float)baseline;
        LOG.debug((percentSaved * 100) + ""String_Node_Str"" + i+ ""String_Node_Str"");
      }
 else {
        final int secondsLost=(int)((duration - baseline) / 60);
        LOG.debug(""String_Node_Str"" + secondsLost);
      }
    }
  }
}","/** 
 * Tests the speed of downloading with a single source using multiple connections, steadily increasing the number of connections to guage  the benefit.
 * @throws Exception If any unexpected error occurs.
 */
public void testNumConnections() throws Exception {
  if (!TEST_ACTIVE) {
    return;
  }
  final String urlString=""String_Node_Str"";
  final URI uri=new URI(urlString);
  final Collection<URI> uris=new LinkedList<URI>();
  uris.add(uri);
  final File testFile=new File(""String_Node_Str"");
  LOG.debug(""String_Node_Str"" + testFile.exists() + ""String_Node_Str""+ testFile.length());
  testFile.delete();
  assertFalse(testFile.isFile());
  final long straighBaseline=download(urlString);
  final int straighBaselineSecs=(int)(straighBaseline / 1000);
  LOG.debug(""String_Node_Str"" + straighBaselineSecs + ""String_Node_Str"");
  final UriResolver resolver=new UriResolver(){
    public Collection<URI> resolve(    final URI uri) throws IOException {
      return uris;
    }
    public URI getSha1(){
      return null;
    }
  }
;
  long baseline=0;
  final File tempDownloadDir=new File(""String_Node_Str"");
  tempDownloadDir.mkdir();
  tempDownloadDir.deleteOnExit();
  for (int i=1; i < 16; i++) {
    final Downloader<MsDState> dl=new MultiSourceDownloader(testFile,uri,6509767L,""String_Node_Str"",resolver,i,null,tempDownloadDir);
    final long start=System.currentTimeMillis();
    dl.start();
    final long end=System.currentTimeMillis();
    LOG.debug(""String_Node_Str"" + testFile.exists() + ""String_Node_Str""+ testFile.length());
    testFile.delete();
    assertFalse(testFile.isFile());
    final long duration=end - start;
    final int durationSecs=(int)(duration / 1000);
    LOG.debug(""String_Node_Str"" + durationSecs + ""String_Node_Str"");
    if (i == 1) {
      LOG.debug(""String_Node_Str"" + durationSecs + ""String_Node_Str"");
      baseline=duration;
    }
 else {
      if (baseline > duration) {
        final long msSaved=baseline - duration;
        final int secondsSaved=(int)(msSaved / 1000);
        LOG.debug(""String_Node_Str"" + secondsSaved + ""String_Node_Str"");
        final float percentSaved=(float)msSaved / (float)baseline;
        LOG.debug((percentSaved * 100) + ""String_Node_Str"" + i+ ""String_Node_Str"");
      }
 else {
        final int secondsLost=(int)((duration - baseline) / 60);
        LOG.debug(""String_Node_Str"" + secondsLost);
      }
    }
  }
}"
44842,"private static Downloader<MsDState> getBaseDownloader(final File file,final URI expectedSha1) throws URISyntaxException {
  final String[] urls={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  final Collection<URI> uris=new LinkedList<URI>();
  for (int i=0; i < urls.length; i++) {
    try {
      uris.add(new URI(urls[i]));
    }
 catch (    final URISyntaxException e) {
    }
  }
  final URI uri=new URI(""String_Node_Str"");
  final long size=3534076L;
  if (file.exists()) {
    assertTrue(file.delete());
  }
  assertFalse(file.isFile());
  file.deleteOnExit();
  final UriResolver resolver=new UriResolver(){
    public Collection<URI> resolve(    final URI uri) throws IOException {
      return uris;
    }
    public URI getSha1(){
      return null;
    }
  }
;
  final File downloadDir=new File(""String_Node_Str"");
  downloadDir.mkdir();
  downloadDir.deleteOnExit();
  final Downloader<MsDState> downloader=new MultiSourceDownloader(""String_Node_Str"",file,uri,size,""String_Node_Str"",resolver,2,expectedSha1,downloadDir);
  return downloader;
}","private static Downloader<MsDState> getBaseDownloader(final File file,final URI expectedSha1) throws URISyntaxException {
  final String[] urls={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  final Collection<URI> uris=new LinkedList<URI>();
  for (int i=0; i < urls.length; i++) {
    try {
      uris.add(new URI(urls[i]));
    }
 catch (    final URISyntaxException e) {
    }
  }
  final URI uri=new URI(""String_Node_Str"");
  final long size=3534076L;
  if (file.exists()) {
    assertTrue(file.delete());
  }
  assertFalse(file.isFile());
  file.deleteOnExit();
  final UriResolver resolver=new UriResolver(){
    public Collection<URI> resolve(    final URI uri) throws IOException {
      return uris;
    }
    public URI getSha1(){
      return null;
    }
  }
;
  final File downloadDir=new File(""String_Node_Str"");
  downloadDir.mkdir();
  downloadDir.deleteOnExit();
  final Downloader<MsDState> downloader=new MultiSourceDownloader(file,uri,size,""String_Node_Str"",resolver,2,expectedSha1,downloadDir);
  return downloader;
}"
44843,"@Test public void testLauncher() throws Exception {
  final File file=new File(getClass().getSimpleName());
  file.deleteOnExit();
  final OutputStream os=new FileOutputStream(file);
  for (int i=0; i < 100000; i++) {
    os.write(i);
  }
  os.close();
  final RandomAccessFile raf=new RandomAccessFile(file,""String_Node_Str"");
  final PriorityBlockingQueue<LongRange> completedRanges=createQueue();
  final URI sha1=Sha1Hasher.createSha1Urn(file);
  final DownloadingFileLauncher launcher=new DownloadingFileLauncher(raf,completedRanges,sha1);
  final File fileCopy=new File(file.getName() + ""String_Node_Str"");
  fileCopy.deleteOnExit();
  final OutputStream stream=new FileOutputStream(fileCopy);
  final Runnable runner=new Runnable(){
    public void run(){
      try {
        Thread.sleep(400);
      }
 catch (      final InterruptedException e) {
        e.printStackTrace();
      }
      final Collection<LongRange> ranges=createRanges(file.length());
      m_log.debug(""String_Node_Str"" + ranges);
      for (      final LongRange lr : ranges) {
        launcher.onRangeComplete(lr);
      }
      launcher.onFileComplete();
    }
  }
;
  final Thread thread=new Thread(runner,""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
  launcher.write(stream,true);
  final URI sha1Copy=Sha1Hasher.createSha1Urn(fileCopy);
  assertEquals(sha1,sha1Copy);
  m_log.debug(""String_Node_Str"" + sha1Copy);
}","@Test public void testLauncher() throws Exception {
  final File file=new File(getClass().getSimpleName());
  file.deleteOnExit();
  final OutputStream os=new FileOutputStream(file);
  for (int i=0; i < 100000; i++) {
    os.write(i);
  }
  os.close();
  final RandomAccessFile raf=new RandomAccessFile(file,""String_Node_Str"");
  final PriorityBlockingQueue<LongRange> completedRanges=createQueue();
  final URI sha1=Sha1Hasher.createSha1Urn(file);
  final DownloadingFileLauncher launcher=new DownloadingFileLauncher(raf,completedRanges,sha1,file);
  final File fileCopy=new File(file.getName() + ""String_Node_Str"");
  fileCopy.deleteOnExit();
  final OutputStream stream=new FileOutputStream(fileCopy);
  final Runnable runner=new Runnable(){
    public void run(){
      try {
        Thread.sleep(400);
      }
 catch (      final InterruptedException e) {
        e.printStackTrace();
      }
      final Collection<LongRange> ranges=createRanges(file.length());
      m_log.debug(""String_Node_Str"" + ranges);
      for (      final LongRange lr : ranges) {
        launcher.onRangeComplete(lr);
      }
      launcher.onFileComplete();
    }
  }
;
  final Thread thread=new Thread(runner,""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
  launcher.write(stream,true);
  final URI sha1Copy=Sha1Hasher.createSha1Urn(fileCopy);
  assertEquals(sha1,sha1Copy);
  m_log.debug(""String_Node_Str"" + sha1Copy);
}"
44844,"/** 
 * Tests to make sure we don't get OutOfMemoryErrors trying to stream files -- typically through copying too many bytes at once.
 * @throws Exception If any unexpected error occurs.
 */
@Test public void testOome() throws Exception {
  final File file=new File(getClass().getSimpleName());
  file.deleteOnExit();
  final OutputStream os=new FileOutputStream(file);
  final byte[] bytes=new byte[10000000];
  for (int i=0; i < bytes.length; i++) {
    bytes[i]=(byte)(i % 127);
  }
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.close();
  final RandomAccessFile raf=new RandomAccessFile(file,""String_Node_Str"");
  final PriorityBlockingQueue<LongRange> completedRanges=createQueue();
  final URI sha1=Sha1Hasher.createSha1Urn(file);
  final DownloadingFileLauncher launcher=new DownloadingFileLauncher(raf,completedRanges,sha1);
  final File fileCopy=new File(file.getName() + ""String_Node_Str"");
  fileCopy.deleteOnExit();
  final OutputStream stream=new FileOutputStream(fileCopy);
  final Runnable runner=new Runnable(){
    public void run(){
      try {
        Thread.sleep(400);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      final Collection<LongRange> ranges=createRanges(file.length());
      m_log.debug(""String_Node_Str"" + ranges);
      LongRange minRange=null;
      for (      final LongRange lr : ranges) {
        if (lr.getMinimumLong() != 0L) {
          launcher.onRangeComplete(lr);
        }
 else {
          minRange=lr;
        }
      }
      launcher.onRangeComplete(minRange);
      launcher.onFileComplete();
    }
  }
;
  final Thread thread=new Thread(runner,""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
  launcher.write(stream,true);
  final URI sha1Copy=Sha1Hasher.createSha1Urn(fileCopy);
  assertEquals(sha1,sha1Copy);
  m_log.debug(""String_Node_Str"" + sha1Copy);
}","/** 
 * Tests to make sure we don't get OutOfMemoryErrors trying to stream files -- typically through copying too many bytes at once.
 * @throws Exception If any unexpected error occurs.
 */
@Test public void testOome() throws Exception {
  final File file=new File(getClass().getSimpleName());
  file.deleteOnExit();
  final OutputStream os=new FileOutputStream(file);
  final byte[] bytes=new byte[10000000];
  for (int i=0; i < bytes.length; i++) {
    bytes[i]=(byte)(i % 127);
  }
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.write(bytes);
  os.close();
  final RandomAccessFile raf=new RandomAccessFile(file,""String_Node_Str"");
  final PriorityBlockingQueue<LongRange> completedRanges=createQueue();
  final URI sha1=Sha1Hasher.createSha1Urn(file);
  final DownloadingFileLauncher launcher=new DownloadingFileLauncher(raf,completedRanges,sha1,file);
  final File fileCopy=new File(file.getName() + ""String_Node_Str"");
  fileCopy.deleteOnExit();
  final OutputStream stream=new FileOutputStream(fileCopy);
  final Runnable runner=new Runnable(){
    public void run(){
      try {
        Thread.sleep(400);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      final Collection<LongRange> ranges=createRanges(file.length());
      m_log.debug(""String_Node_Str"" + ranges);
      LongRange minRange=null;
      for (      final LongRange lr : ranges) {
        if (lr.getMinimumLong() != 0L) {
          launcher.onRangeComplete(lr);
        }
 else {
          minRange=lr;
        }
      }
      launcher.onRangeComplete(minRange);
      launcher.onFileComplete();
    }
  }
;
  final Thread thread=new Thread(runner,""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
  launcher.write(stream,true);
  final URI sha1Copy=Sha1Hasher.createSha1Urn(fileCopy);
  assertEquals(sha1,sha1Copy);
  m_log.debug(""String_Node_Str"" + sha1Copy);
}"
44845,"public int compare(final RangeDownloader dl0,final RangeDownloader dl1){
  if (dl0.getKbs() > dl1.getKbs()) {
    return -1;
  }
  if (dl0.getKbs() < dl1.getKbs()) {
    return 1;
  }
  return 0;
}","/** 
 * {@inheritDoc}
 */
public int compare(final RangeDownloader dl0,final RangeDownloader dl1){
  final int kbs0=canonicalize(dl0.getKbs());
  final int kbs1=canonicalize(dl1.getKbs());
  if (kbs0 < kbs1) {
    return 1;
  }
 else   if (kbs1 < kbs0) {
    return -1;
  }
 else {
    return 0;
  }
}"
44846,"/** 
 * Gets the speed of this downloader in kilobytes per second.
 * @return The speed of this downloader in kilobytes per second.
 */
int getKbs();","/** 
 * Gets the speed of this downloader in kilobytes per second.
 * @return The speed of this downloader in kilobytes per second.
 */
Optional<Integer> getKbs();"
44847,"public void onMessageBodyRead(){
  LOG.debug(""String_Node_Str"");
  this.m_completedTime=System.currentTimeMillis();
  this.m_launchFileTracker.onRangeComplete(this.m_assignedRange);
  this.m_rangeTracker.onRangeComplete(this.m_assignedRange);
  this.m_completedRanges++;
  this.m_sourceRanker.onAvailable(this);
}","public void onMessageBodyRead(){
  LOG.debug(""String_Node_Str"");
  this.m_completedTime=System.currentTimeMillis();
  LOG.debug(""String_Node_Str"" + m_completedTime);
  this.m_launchFileTracker.onRangeComplete(this.m_assignedRange);
  this.m_rangeTracker.onRangeComplete(this.m_assignedRange);
  this.m_completedRanges++;
  this.m_sourceRanker.onAvailable(this);
}"
44848,"public int getKbs(){
  if (this.m_contentLength == -1 || this.m_connectedTime == -1 || this.m_completedTime == -1) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + this.m_contentLength + ""String_Node_Str""+ this.m_connectedTime+ ""String_Node_Str""+ ""String_Node_Str""+ this.m_completedTime);
    return -1;
  }
  if (this.m_completedTime == this.m_connectedTime) {
    LOG.error(""String_Node_Str"" + this.m_completedTime);
  }
  final long downloadMs=this.m_completedTime - this.m_connectedTime;
  return (int)(this.m_contentLength * 1000 / downloadMs * 1024);
}","/** 
 * {@inheritDoc}
 */
public Optional<Integer> getKbs(){
  if (this.m_contentLength == -1 || this.m_connectedTime == -1 || this.m_completedTime == -1) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + this.m_contentLength + ""String_Node_Str""+ this.m_connectedTime+ ""String_Node_Str""+ ""String_Node_Str""+ this.m_completedTime);
    return new NoneImpl<Integer>();
  }
 else {
    if (m_completedTime == m_connectedTime) {
      LOG.warn(""String_Node_Str"" + m_completedTime);
    }
    final long safeCompletedTime=Math.max(m_completedTime,m_connectedTime + 1);
    final long downloadMs=safeCompletedTime - m_connectedTime;
    final int kbs=(int)(m_contentLength * 1000 / downloadMs * 1024);
    return new SomeImpl<Integer>(kbs);
  }
}"
44849,"public void onConnect(final long ms){
  this.m_connectedTime=System.currentTimeMillis();
}","public void onConnect(final long ms){
  this.m_connectedTime=System.currentTimeMillis();
  LOG.debug(""String_Node_Str"" + m_connectedTime);
}"
44850,"/** 
 * Send a PImage to four Rainbowduino Device arranged as cube The image gets resized and converted to a Rainbowduino compatible format.
 * @param addrTopLeft the address of the top left rainbowduino
 * @param addrTopRight the address of the top right rainbowduino
 * @param addrBottomLeft the address of the bottom left rainbowduino
 * @param addrBottomRight the address of the bottom right rainbowduino
 * @param data
 * @return true if send was successful
 */
public boolean sendRgbFrame(byte addrTopLeft,byte addrTopRight,byte addrBottomLeft,byte addrBottomRight,PImage data){
  PImage topLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage topRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  data.loadPixels();
  topLeftImg.copy(data,0,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  topRightImg.copy(data,data.width / 2,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomLeftImg.copy(data,0,data.width / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomRightImg.copy(data,data.width / 2,data.width / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  data.updatePixels();
  topLeftImg.loadPixels();
  int[] resizedImageTopLeft=RainbowduinoHelper.resizeImage(topLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topLeftImg.width,topLeftImg.height);
  topLeftImg.updatePixels();
  topRightImg.loadPixels();
  int[] resizedImageTopRight=RainbowduinoHelper.resizeImage(topRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topRightImg.width,topRightImg.height);
  topRightImg.updatePixels();
  bottomLeftImg.loadPixels();
  int[] resizedImageBottomLeft=RainbowduinoHelper.resizeImage(bottomLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomLeftImg.width,bottomLeftImg.height);
  bottomLeftImg.updatePixels();
  bottomRightImg.loadPixels();
  int[] resizedImageBottomRight=RainbowduinoHelper.resizeImage(bottomRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomRightImg.width,bottomRightImg.height);
  bottomRightImg.updatePixels();
  boolean btl=sendFrame(addrTopLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopLeft));
  boolean btr=sendFrame(addrTopRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopRight));
  boolean bbl=sendFrame(addrBottomLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomLeft));
  boolean bbr=sendFrame(addrBottomRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomRight));
  return btl && btr && bbl&& bbr;
}","/** 
 * Send a PImage to four Rainbowduino Device arranged as cube The image gets resized and converted to a Rainbowduino compatible format.
 * @param addrTopLeft the address of the top left rainbowduino
 * @param addrTopRight the address of the top right rainbowduino
 * @param addrBottomLeft the address of the bottom left rainbowduino
 * @param addrBottomRight the address of the bottom right rainbowduino
 * @param data
 * @return true if send was successful
 */
public boolean sendRgbFrame(byte addrTopLeft,byte addrTopRight,byte addrBottomLeft,byte addrBottomRight,PImage data){
  PImage topLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage topRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomLeftImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  PImage bottomRightImg=new PImage(data.width / 2,data.height / 2,PApplet.RGB);
  data.loadPixels();
  topLeftImg.copy(data,0,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  topRightImg.copy(data,data.width / 2,0,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomLeftImg.copy(data,0,data.height / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  bottomRightImg.copy(data,data.width / 2,data.height / 2,data.width / 2,data.height / 2,0,0,data.width / 2,data.height / 2);
  data.updatePixels();
  topLeftImg.loadPixels();
  int[] resizedImageTopLeft=RainbowduinoHelper.resizeImage(topLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topLeftImg.width,topLeftImg.height);
  topLeftImg.updatePixels();
  topRightImg.loadPixels();
  int[] resizedImageTopRight=RainbowduinoHelper.resizeImage(topRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,topRightImg.width,topRightImg.height);
  topRightImg.updatePixels();
  bottomLeftImg.loadPixels();
  int[] resizedImageBottomLeft=RainbowduinoHelper.resizeImage(bottomLeftImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomLeftImg.width,bottomLeftImg.height);
  bottomLeftImg.updatePixels();
  bottomRightImg.loadPixels();
  int[] resizedImageBottomRight=RainbowduinoHelper.resizeImage(bottomRightImg.pixels,NR_OF_LED_HORIZONTAL,NR_OF_LED_VERTICAL,bottomRightImg.width,bottomRightImg.height);
  bottomRightImg.updatePixels();
  boolean btl=sendFrame(addrTopLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopLeft));
  boolean btr=sendFrame(addrTopRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageTopRight));
  boolean bbl=sendFrame(addrBottomLeft,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomLeft));
  boolean bbr=sendFrame(addrBottomRight,RainbowduinoHelper.convertRgbToRainbowduino(resizedImageBottomRight));
  return btl && btr && bbl&& bbr;
}"
44851,"static ModFormat checkType(String id){
  if (id.equals(""String_Node_Str"") || id.equals(""String_Node_Str""))   return new ModFormat(pt,4,31,ptText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.equals(""String_Node_Str"") || id.equals(""String_Node_Str"") || id.equals(""String_Node_Str"")|| id.equals(""String_Node_Str""))   return new ModFormat(trekker,digit(id,3),31,trekkerText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.equals(""String_Node_Str""))   return new ModFormat(generic,8,31,""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str"");
  if (id.equals(""String_Node_Str""))   return new ModFormat(generic,8,31,""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str"");
  if (id.endsWith(""String_Node_Str"") && digit(id,0) >= 0)   return new ModFormat(generic,digit(id,0),31,ftText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.endsWith(""String_Node_Str"") && digit(id,0) >= 0 && digit(id,1) >= 0)   return new ModFormat(ft_orpheus,digit(id,0) * 10 + digit(id,1),31,ftText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.endsWith(""String_Node_Str"") && digit(id,0) >= 0 && digit(id,1) >= 0)   return new ModFormat(generic,digit(id,0) * 10 + digit(id,1),31,ttText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  return null;
}","static ModFormat checkType(String id){
  if (id.equals(""String_Node_Str"") || id.equals(""String_Node_Str""))   return new ModFormat(pt,4,31,ptText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.equals(""String_Node_Str"") || id.equals(""String_Node_Str"") || id.equals(""String_Node_Str"")|| id.equals(""String_Node_Str""))   return new ModFormat(trekker,digit(id,3),31,trekkerText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.equals(""String_Node_Str""))   return new ModFormat(generic,8,31,""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str"");
  if (id.equals(""String_Node_Str""))   return new ModFormat(generic,8,31,""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str"");
  if (id.endsWith(""String_Node_Str"") && digit(id,0) >= 0)   return new ModFormat(generic,digit(id,0),31,ftText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.endsWith(""String_Node_Str"") && digit(id,0) >= 0 && digit(id,1) >= 0)   return new ModFormat(ft_orpheus,number00(id),31,ftText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (id.endsWith(""String_Node_Str"") && digit(id,0) >= 0 && digit(id,1) >= 0)   return new ModFormat(generic,number00(id),31,ttText + ""String_Node_Str"" + id+ ""String_Node_Str"");
  return null;
}"
44852,"private static Instrument readInstrument(ByteReader reader,int index,ModFormat.Type type){
  final String name=reader.string(22);
  final int length=reader.u2() * 2;
  final int finetune=reader.u1() & 15;
  final int volume=Math.min(64,reader.u1());
  final int loopStart=reader.u2() * (type == ust ? 1 : 2);
  final int loopLength=reader.u2() * (type == ust ? 1 : 2);
  final Instrument instrument=new SampledInstrument(index + 1,length);
  instrument.name(name);
  instrument.volume(volume);
  instrument.fineTune(finetune);
  instrument.loop(loopStart,loopLength);
  return instrument;
}","private static Instrument readInstrument(ByteReader reader,int index,ModFormat.Type type){
  final String name=reader.string(22);
  final int length=reader.u2() * 2;
  final int finetune=reader.u1() & 15;
  final int volume=reader.u1();
  final int loopStart=reader.u2() * (type == ust ? 1 : 2);
  final int loopLength=reader.u2() * (type == ust ? 1 : 2);
  final Instrument instrument=new SampledInstrument(index + 1,length);
  instrument.name(name);
  instrument.volume(volume);
  instrument.fineTune(finetune);
  instrument.loop(loopStart,loopLength);
  instrument.is16bit=type == ft_orpheus && (volume & 0x80) != 0;
  return instrument;
}"
44853,"public Mod parse(byte[] data){
  ByteReader reader=new ByteReader(data);
  reader.seek(1080);
  if (reader.available() < 4)   return null;
  String id=reader.string(4);
  ModFormat format=checkType(id);
  if (format == null)   format=testLegacy(reader);
  if (format == null)   return null;
  reader.seek(0);
  String title=reader.string(20);
  Instrument[] instruments=readInstruments(reader,format);
  if (instruments == null)   return null;
  int songLength=reader.u1();
  reader.skip(1);
  int[] order=readPatternOrder(reader);
  int totalPatterns=countPatterns(order,songLength);
  if (!format.isLegacy())   reader.skip(4);
  Block[] patterns=readPatterns(reader,totalPatterns,format,instruments);
  if (patterns == null)   return null;
  readInstrumentSamples(reader,instruments);
  Mod mod=new Mod(format.tracks);
  mod.tracker=format.description;
  mod.title=Tools.trimEnd(title,nulChar);
  mod.instruments=instruments;
  mod.songLength=songLength;
  mod.blockOrder=order;
  mod.blocks=patterns;
  return mod;
}","public Mod parse(byte[] data){
  ByteReader reader=new ByteReader(data);
  reader.seek(1080);
  if (reader.available() < 4)   return null;
  String id=reader.string(4);
  ModFormat format=checkType(id);
  if (format == null)   format=testLegacy(reader);
  if (format == null)   return null;
  reader.seek(0);
  String title=reader.string(20);
  Instrument[] instruments=readInstruments(reader,format);
  format=updateDescription(format,id,instruments);
  int songLength=reader.u1();
  reader.skip(1);
  int[] order=readPatternOrder(reader);
  if (format.type == trekker && format.tracks == 8)   format=format.changeTracks(adjustTrekker8Order(order));
  int totalPatterns=countPatterns(order,songLength);
  if (!format.isLegacy())   reader.skip(4);
  Block[] patterns=readPatterns(reader,totalPatterns,format,instruments);
  if (patterns == null)   return null;
  readInstrumentSamples(reader,instruments);
  Mod mod=new Mod(format.tracks);
  mod.tracker=format.description;
  mod.title=Tools.trimEnd(title,nulChar);
  mod.instruments=instruments;
  mod.songLength=songLength;
  mod.blockOrder=order;
  mod.blocks=patterns;
  return mod;
}"
44854,"private static void readInstrumentSamples(ByteReader reader,Instrument[] instruments){
  for (int i=0; i < instruments.length; i++) {
    for (int j=0, n=instruments[i].data().length; j < n; j++) {
      if (reader.available() == 0) {
        instruments[i].trimTo(j);
        break;
      }
      instruments[i].data()[j]=(byte)reader.s1();
    }
  }
}","private static void readInstrumentSamples(ByteReader reader,Instrument[] instruments){
  for (int i=0; i < instruments.length; i++) {
    for (int j=0, n=instruments[i].data().length; j < n; j++) {
      if (reader.available() == 0) {
        instruments[i].trimTo(j);
        break;
      }
      instruments[i].data()[j]=(byte)reader.s1();
      if (instruments[i].is16bit)       reader.skip(1);
    }
  }
}"
44855,"private static Block readPattern(ByteReader reader,ModFormat format,Instrument[] ins){
  if (reader.available() < 64 * format.tracks * 4)   return null;
  Block block=new Block(64,format.tracks);
  for (int row=0; row < 64; row++) {
    for (int track=0; track < format.tracks; track++) {
      int b0=reader.u1();
      int b1=reader.u1();
      int b2=reader.u1();
      int b3=reader.u1();
      int instrumentIndex=(b0 & 0xF0 | (b2 & 0xF0) >> 4) - 1;
      int period=(b0 << 8 | b1) & 0xFFF;
      int key=Period.getKeyForPeriod(period * 100);
      int effect=b2 & 0xF;
      int efx=b3 >> 4;
      int efy=b3 & 15;
      if (effect == 0x0E) {
        effect=effect << 4 | efx;
        efx=0;
      }
      if (effect == 0x0D) {
        int dec=efx * 10 + efy;
        efx=dec >> 4;
        efy=dec & 15;
      }
      boolean isOutOfRange=instrumentIndex < 0 || instrumentIndex >= ins.length;
      Instrument instrument=isOutOfRange ? null : ins[instrumentIndex];
      block.putNote(row,track,new Note(key,instrument,effect,efx,efy,false));
    }
  }
  return block;
}","private static Block readPattern(ByteReader reader,ModFormat.Type type,int tracks,Instrument[] ins){
  if (reader.available() < 64 * tracks * 4)   return null;
  Block block=new Block(64,tracks);
  for (int row=0; row < 64; row++) {
    for (int track=0; track < tracks; track++) {
      int b0=reader.u1();
      int b1=reader.u1();
      int b2=reader.u1();
      int b3=reader.u1();
      int i=(b0 & 0xF0 | (b2 & 0xF0) >> 4) - 1;
      int period=(b0 << 8 | b1) & 0xFFF;
      int key=Period.getKeyForPeriod(period * 100);
      int effect=type == ust ? ustEffect(b2 & 0xF,b3) : b2 & 0xF;
      int param=type == ust ? ustEffectParam(b2 & 0xF,b3) : b3;
      int paramX=param >> 4;
      int paramY=param & 15;
      if (effect == 0x0E) {
        effect=effect << 4 | paramX;
        paramX=0;
      }
      if (effect == 0x0D) {
        int dec=paramX * 10 + paramY;
        paramX=dec >> 4;
        paramY=dec & 15;
      }
      boolean isOutOfRange=i < 0 || i >= ins.length;
      Instrument instrument=isOutOfRange ? null : ins[i];
      block.putNote(row,track,new Note(key,instrument,effect,paramX,paramY,false));
    }
  }
  return block;
}"
44856,"private static Block[] readPatterns(ByteReader reader,int count,ModFormat format,Instrument[] ins){
  Block[] patterns=new Block[count];
  for (int i=0; i < count; i++) {
    patterns[i]=readPattern(reader,format,ins);
    if (patterns[i] == null)     return null;
  }
  return patterns;
}","private static Block[] readPatterns(ByteReader reader,int n,ModFormat format,Instrument[] ins){
  Block[] patterns=new Block[n];
  for (int i=0; i < n; i++) {
    if (format.type == trekker && format.tracks == 8) {
      Block pattern1=readPattern(reader,format.type,4,ins);
      Block pattern2=readPattern(reader,format.type,4,ins);
      if (pattern1 == null || pattern2 == null)       return null;
      patterns[i]=new Block(64,8);
      for (int row=0; row < 64; row++) {
        for (int track=0; track < 4; track++) {
          patterns[i].putNote(row,track,pattern1.getNote(row,track));
          patterns[i].putNote(row,track + 4,pattern2.getNote(row,track));
        }
      }
    }
 else {
      patterns[i]=readPattern(reader,format.type,format.tracks,ins);
      if (patterns[i] == null)       return null;
    }
  }
  return patterns;
}"
44857,"private static Instrument[] readInstruments(ByteReader reader,ModFormat format){
  if (reader.available() < 30 * format.samples)   ;
  final Instrument[] instruments=new Instrument[format.samples];
  for (int i=0; i < instruments.length; i++)   instruments[i]=readInstrument(reader,i,format.type);
  return instruments;
}","private static Instrument[] readInstruments(ByteReader reader,ModFormat format){
  final Instrument[] instruments=new Instrument[format.samples];
  for (int i=0; i < instruments.length; i++)   instruments[i]=readInstrument(reader,i,format.type);
  return instruments;
}"
44858,"private void playSong(final String filePath){
  final File file=new File(filePath);
  final byte[] data=new byte[(int)file.length()];
  try {
    final FileInputStream in=new FileInputStream(file);
    if (in.read(data) != data.length) {
      in.close();
      Log.e(""String_Node_Str"",""String_Node_Str"");
      return;
    }
    in.close();
  }
 catch (  final Exception e) {
    Log.e(""String_Node_Str"",e.getMessage(),e);
    return;
  }
  for (  Parser parser : parsers) {
    if (parser.test(data)) {
      Mod mod=parser.parse(data);
      if (mod == null) {
        Toast.makeText(this,""String_Node_Str"" + parser.name(),Toast.LENGTH_SHORT);
      }
 else {
        playLoop(mod,file.getName());
        return;
      }
    }
  }
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT);
}","private void playSong(final String filePath){
  final File file=new File(filePath);
  final byte[] data=new byte[(int)file.length()];
  try {
    final FileInputStream in=new FileInputStream(file);
    if (in.read(data) != data.length) {
      in.close();
      Log.e(""String_Node_Str"",""String_Node_Str"");
      return;
    }
    in.close();
  }
 catch (  final Exception e) {
    Log.e(""String_Node_Str"",e.getMessage(),e);
    return;
  }
  for (  Parser parser : parsers) {
    if (parser.test(data)) {
      Mod mod=parser.parse(data);
      if (mod == null) {
        Toast.makeText(this,""String_Node_Str"" + parser.name(),Toast.LENGTH_SHORT).show();
      }
 else {
        playLoop(mod,file.getName());
        return;
      }
    }
  }
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}"
44859,"public Mod parse(byte[] data){
  ByteReader reader=new ByteReader(data);
  reader.seek(1080);
  if (reader.available() < 4)   return null;
  String id=reader.string(4);
  ModFormat format=checkType(id);
  if (format == null)   format=testLegacy(reader);
  if (format == null)   return null;
  reader.seek(0);
  String title=reader.string(20);
  Instrument[] instruments=readInstruments(reader,format);
  format=updateDescription(format,id,instruments);
  int songLength=reader.u1();
  reader.skip(1);
  int[] order=readPatternOrder(reader);
  if (format.type == trekker && format.tracks == 8)   format=format.changeTracks(adjustTrekker8Order(order));
  int totalPatterns=countPatterns(order,songLength);
  if (!format.isLegacy())   reader.skip(4);
  Pattern[] patterns=readPatterns(reader,totalPatterns,format,instruments);
  if (patterns == null)   return null;
  readInstrumentSamples(reader,instruments);
  Mod mod=new Mod(format.tracks);
  mod.tracker=format.description;
  mod.title=Tools.trimEnd(title,nulChar);
  mod.instruments=instruments;
  mod.songLength=songLength;
  mod.patternOrder=order;
  mod.patterns=patterns;
  return mod;
}","public Mod parse(byte[] data){
  ByteReader reader=new ByteReader(data);
  reader.seek(1080);
  if (reader.available() < 4)   return null;
  String id=reader.string(4);
  ModFormat format=checkType(id);
  if (format == null)   format=testLegacy(reader);
  if (format == null)   return null;
  reader.seek(0);
  String title=reader.string(20);
  Instrument[] instruments=readInstruments(reader,format);
  format=updateDescription(format,id,instruments);
  int songLength=reader.u1();
  reader.skip(1);
  int[] order=readPatternOrder(reader);
  if (format.type == trekker && format.tracks == 8)   format=format.changeTracks(adjustTrekker8Order(order));
  int totalPatterns=countPatterns(order,songLength);
  if (!format.isLegacy())   reader.skip(4);
  Pattern[] patterns=readPatterns(reader,totalPatterns,format);
  if (patterns == null)   return null;
  readInstrumentSamples(reader,instruments);
  Mod mod=new Mod(format.tracks);
  mod.tracker=format.description;
  mod.title=Tools.trimEnd(title,nulChar);
  mod.instruments=instruments;
  mod.songLength=songLength;
  mod.patternOrder=order;
  mod.patterns=patterns;
  return mod;
}"
44860,"private static Pattern readPattern(ByteReader reader,ModFormat.Type type,int tracks){
  if (reader.available() < 64 * tracks * 4)   return null;
  Pattern block=new Pattern(tracks,64);
  for (int row=0; row < 64; row++) {
    for (int track=0; track < tracks; track++) {
      int b0=reader.u1();
      int b1=reader.u1();
      int b2=reader.u1();
      int b3=reader.u1();
      int i=(b0 & 0xF0 | (b2 & 0xF0) >> 4) - 1;
      int period=(b0 << 8 | b1) & 0xFFF;
      int key=Period.getKeyForPeriod(period * 100);
      int effect=type == ust ? ustEffect(b2 & 0xF,b3) : b2 & 0xF;
      int param=type == ust ? ustEffectParam(b2 & 0xF,b3) : b3;
      int paramX=param >> 4;
      int paramY=param & 15;
      if (effect == 0x0E) {
        effect=effect << 4 | paramX;
        paramX=0;
      }
      if (effect == 0x0D) {
        int dec=paramX * 10 + paramY;
        paramX=dec >> 4;
        paramY=dec & 15;
      }
      block.setNote(track,row,Note.create(key,i,effect,param,false));
    }
  }
  return block;
}","private static Pattern readPattern(ByteReader reader,ModFormat.Type type,int tracks){
  if (reader.available() < 64 * tracks * 4)   return null;
  Pattern block=new Pattern(tracks,64);
  for (int row=0; row < 64; row++) {
    for (int track=0; track < tracks; track++) {
      int b0=reader.u1();
      int b1=reader.u1();
      int b2=reader.u1();
      int b3=reader.u1();
      int ins=(b0 & 0xF0 | (b2 & 0xF0) >> 4) - 1;
      int period=(b0 << 8 | b1) & 0xFFF;
      int key=Period.getKeyForPeriod(period * 100);
      int effect=type == ust ? ustEffect(b2 & 0xF,b3) : b2 & 0xF;
      int param=type == ust ? ustEffectParam(b2 & 0xF,b3) : b3;
      if (effect == 0x0E) {
        effect=effect << 4 | param >> 4 & 0xF;
        param&=0xF;
      }
      if (effect == 0x0D)       param=(param >> 4) * 10 + (param & 0xF);
      block.setNote(track,row,Note.create(key,ins,effect,param));
    }
  }
  return block;
}"
44861,"private static Pattern[] readPatterns(ByteReader reader,int n,ModFormat format,Instrument[] ins){
  Pattern[] patterns=new Pattern[n];
  for (int i=0; i < n; i++) {
    if (format.type == trekker && format.tracks == 8) {
      Pattern pattern1=readPattern(reader,format.type,4);
      Pattern pattern2=readPattern(reader,format.type,4);
      if (pattern1 == null || pattern2 == null)       return null;
      patterns[i]=new Pattern(8,64);
      for (int row=0; row < 64; row++) {
        for (int track=0; track < 4; track++) {
          patterns[i].setNote(track,row,pattern1.getNote(track,row));
          patterns[i].setNote(track + 4,row,pattern2.getNote(track,row));
        }
      }
    }
 else {
      patterns[i]=readPattern(reader,format.type,format.tracks);
      if (patterns[i] == null)       return null;
    }
  }
  return patterns;
}","private static Pattern[] readPatterns(ByteReader reader,int n,ModFormat format){
  Pattern[] patterns=new Pattern[n];
  for (int i=0; i < n; i++) {
    if (format.type == trekker && format.tracks == 8) {
      Pattern pattern1=readPattern(reader,format.type,4);
      Pattern pattern2=readPattern(reader,format.type,4);
      if (pattern1 == null || pattern2 == null)       return null;
      patterns[i]=new Pattern(8,64);
      for (int row=0; row < 64; row++) {
        for (int track=0; track < 4; track++) {
          patterns[i].setNote(track,row,pattern1.getNote(track,row));
          patterns[i].setNote(track + 4,row,pattern2.getNote(track,row));
        }
      }
    }
 else {
      patterns[i]=readPattern(reader,format.type,format.tracks);
      if (patterns[i] == null)       return null;
    }
  }
  return patterns;
}"
44862,"public static long create(int key,int instrument,int effect,int param,boolean hold){
  key=Tools.crop(key,0,128);
  long x=hold && key < 128 ? holdMask : 0;
  x|=(instrument & 0xFFFL) << 40;
  x|=(key & 0xFFL) << 32;
  x|=(effect & 0xFFFFL) << 16;
  x|=param & 0xFFFFL;
  return x;
}","public static long create(int key,int instrument,int effect,int param){
  return create(key,instrument,effect,param,false);
}"
44863,"@Override public String createMetadata(Object nativeItem) throws CannotDisseminateFormatException {
  try {
    DatasetRecordBean dataset=(DatasetRecordBean)nativeItem;
    String result=XMLUtil.toXMLString(dataset.getMetadata(),""String_Node_Str"");
    return result;
  }
 catch (  Exception e) {
    throw (CannotDisseminateFormatException)new CannotDisseminateFormatException(METADATA_PREFIX).initCause(e);
  }
}","@Override public String createMetadata(Object nativeItem) throws CannotDisseminateFormatException {
  try {
    DatasetRecordBean dataset=(DatasetRecordBean)nativeItem;
    ServiceCollection services=ServiceCollection.getInstance();
    TransformerService service=services.getTransformerService();
    String result=service.doTransformIdentity(dataset.getMetadata());
    result=XMLUtil.cleanXML(result);
    return result;
  }
 catch (  Exception e) {
    throw (CannotDisseminateFormatException)new CannotDisseminateFormatException(METADATA_PREFIX).initCause(e);
  }
}"
44864,"/** 
 * Builds an oai_datacite format representation of a record.
 * @param rec The record
 * @return XML metadata in oai_datacite format.
 */
private String buildDocument(DatasetRecordBean rec) throws UnsupportedEncodingException {
  StringBuilder doc=new StringBuilder();
  String[] attribs=new String[]{""String_Node_Str"" + schemaNamespace + ""String_Node_Str"",""String_Node_Str"" + schemaNamespace + ""String_Node_Str""+ schemaLocation+ ""String_Node_Str""};
  String metadata=XMLUtil.toXMLString(rec.getMetadata(),""String_Node_Str"");
  doc.append(openTagWithAttrib(rootElement,attribs));
  doc.append(openTag(rqElement));
  doc.append(rec.isRefQuality() ? ""String_Node_Str"" : ""String_Node_Str"");
  doc.append(closeTag(rqElement));
  doc.append(openTag(versionElement));
  doc.append(rec.getSchemaVersion());
  doc.append(closeTag(versionElement));
  doc.append(openTag(symbolElement));
  doc.append(StringEscapeUtils.escapeXml(rec.getSymbol()));
  doc.append(closeTag(symbolElement));
  doc.append(openTag(payloadElement));
  doc.append(metadata);
  doc.append(closeTag(payloadElement));
  doc.append(closeTag(rootElement));
  return doc.toString();
}","/** 
 * Builds an oai_datacite format representation of a record.
 * @param rec The record
 * @return XML metadata in oai_datacite format.
 */
private String buildDocument(DatasetRecordBean rec) throws UnsupportedEncodingException, ServiceException {
  StringBuilder doc=new StringBuilder();
  String[] attribs=new String[]{""String_Node_Str"" + schemaNamespace + ""String_Node_Str"",""String_Node_Str"" + schemaNamespace + ""String_Node_Str""+ schemaLocation+ ""String_Node_Str""};
  ServiceCollection services=ServiceCollection.getInstance();
  TransformerService service=services.getTransformerService();
  String metadata=service.doTransformIdentity(rec.getMetadata());
  metadata=XMLUtil.cleanXML(metadata);
  doc.append(openTagWithAttrib(rootElement,attribs));
  doc.append(openTag(rqElement));
  doc.append(rec.isRefQuality() ? ""String_Node_Str"" : ""String_Node_Str"");
  doc.append(closeTag(rqElement));
  doc.append(openTag(versionElement));
  doc.append(rec.getSchemaVersion());
  doc.append(closeTag(versionElement));
  doc.append(openTag(symbolElement));
  doc.append(StringEscapeUtils.escapeXml(rec.getSymbol()));
  doc.append(closeTag(symbolElement));
  doc.append(openTag(payloadElement));
  doc.append(metadata);
  doc.append(closeTag(payloadElement));
  doc.append(closeTag(rootElement));
  return doc.toString();
}"
44865,"/** 
 * Transform DataCite Metadata Scheme to OAI Dubmin Core.
 * @param schemaVersion The schema verion being transformed.
 * @param metadata The metadata to transform
 * @return The resulting metadata as a String
 * @throws ServiceException
 */
public String doTransformKernelToOaidc(String schemaVersion,byte[] metadata) throws ServiceException {
  Templates transform=getTransform(schemaVersion);
  return doTransform_kernelToOaidc(metadata,transform,schemaVersion);
}","/** 
 * Transform DataCite Metadata Scheme to OAI Dubmin Core.
 * @param schemaVersion The schema verion being transformed.
 * @param metadata The metadata to transform
 * @return The resulting metadata as a String
 * @throws ServiceException
 */
public String doTransformKernelToOaidc(String schemaVersion,byte[] metadata) throws ServiceException {
  try {
    Templates transform=getTransform(schemaVersion);
    return doTransform(metadata,transform);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + schemaVersion + ""String_Node_Str""+ metadata,e);
    throw new ServiceException(""String_Node_Str"" + schemaVersion + ""String_Node_Str"",e);
  }
}"
44866,"/** 
 * Public constructor
 * @param context
 * @throws ServiceException
 */
public TransformerService(ServletContext context) throws ServiceException {
  super(context);
  try {
    logger.warn(""String_Node_Str"");
    ApplicationContext applicationContext=ApplicationContext.getInstance();
    templatesMap=new HashMap<String,Templates>();
    logger.warn(""String_Node_Str"");
    String resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_0_TO_OAIDC);
    DOMSource domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_0ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_0,kernel2_0ToOaidcTemplates);
    templatesMap.put(null,kernel2_0ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_1_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_1ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_1,kernel2_1ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_2_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_2ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_2,kernel2_2ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_3_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_3ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_3,kernel2_3ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL3_0_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel3_0ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_3_0,kernel3_0ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
  }
 catch (  TransformerConfigurationException te) {
    throw new ServiceException(te.getMessageAndLocation(),te);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new ServiceException(e);
  }
}","/** 
 * Public constructor
 * @param context
 * @throws ServiceException
 */
public TransformerService(ServletContext context) throws ServiceException {
  super(context);
  try {
    logger.warn(""String_Node_Str"");
    ApplicationContext applicationContext=ApplicationContext.getInstance();
    templatesMap=new HashMap<String,Templates>();
    logger.warn(""String_Node_Str"");
    String resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_IDENTITY);
    DOMSource domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    identityTransform=TransformerFactory.newInstance().newTemplates(domSource);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_0_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_0ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_0,kernel2_0ToOaidcTemplates);
    templatesMap.put(null,kernel2_0ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_1_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_1ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_1,kernel2_1ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_2_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_2ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_2,kernel2_2ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL2_3_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel2_3ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_2_3,kernel2_3ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
    resourcePath=applicationContext.getProperty(Constants.Property.STYLESHEET_KERNEL3_0_TO_OAIDC);
    domSource=buildDOMSource(context.getResourceAsStream(resourcePath));
    Templates kernel3_0ToOaidcTemplates=TransformerFactory.newInstance().newTemplates(domSource);
    templatesMap.put(Constants.SchemaVersion.VERSION_3_0,kernel3_0ToOaidcTemplates);
    logger.warn(""String_Node_Str"");
  }
 catch (  TransformerConfigurationException te) {
    throw new ServiceException(te.getMessageAndLocation(),te);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new ServiceException(e);
  }
}"
44867,"public boolean teleportTo(String pstring,Integer x,Integer y,Integer z,String world){
  if (tcutils == null)   tcutils=TweakcraftUtils.getInstance();
  Player player=plugin.getServer().getPlayerExact(pstring);
  World w=null;
  if (player == null)   return false;
  if (world == null || world.equals(""String_Node_Str"")) {
    w=player.getWorld();
  }
 else {
    w=plugin.getServer().getWorld(world);
    if (w == null)     w=player.getWorld();
  }
  if (tcutils != null) {
    tcutils.getTelehistory().addHistory(player.getName(),player.getLocation());
  }
  Location loc=new Location(w,x,y,z);
  return player.teleport(loc);
}","public boolean teleportTo(String pstring,Integer x,Integer y,Integer z,String world){
  Player player=plugin.getServer().getPlayerExact(pstring);
  World w=null;
  if (player == null)   return false;
  if (world == null || world.equals(""String_Node_Str"")) {
    w=player.getWorld();
  }
 else {
    w=plugin.getServer().getWorld(world);
    if (w == null)     w=player.getWorld();
  }
  plugin.getTweakcraftUtilsHelper().addTeleportHistory(player);
  Location loc=new Location(w,x,y,z);
  return player.teleport(loc);
}"
44868,"public boolean onCommand(CommandSender commandSender,Command command,String s,String[] args){
  if (!(commandSender instanceof Player)) {
    commandSender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)commandSender;
  if (!player.hasPermission(""String_Node_Str"")) {
    commandSender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (args.length == 0) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
  int range=Math.min(args.length == 2 ? Integer.parseInt(args[1]) : plugin.defaultSearchRange,plugin.maximumSearchRange);
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + args[0]+ ""String_Node_Str""+ range+ ""String_Node_Str"");
  Location loc=player.getLocation().clone();
  ItemStack toSearch=null;
  String[] parts=args[0].split(""String_Node_Str"");
  try {
    Integer i=Integer.parseInt(parts[0]);
    Integer i2=parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
    toSearch=new ItemStack(i,1,i2.shortValue());
  }
 catch (  NumberFormatException e) {
    String owner=""String_Node_Str"";
    String itemName;
    Integer data;
    itemName=parts[0];
    data=parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
    Material m=Material.valueOf(itemName.toUpperCase());
    if (m != null) {
      toSearch=new ItemStack(m,1,data.shortValue());
    }
  }
  if (toSearch == null) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
  Set<Location> foundInventories=new HashSet<Location>();
  for (int x=loc.getBlockX() - range; x < loc.getBlockX() + range; x++) {
    for (int y=loc.getBlockY() - range; y < loc.getBlockY() + range; y++) {
      for (int z=loc.getBlockZ() - range; z < loc.getBlockZ() + range; z++) {
        if (y > 0 && y < loc.getWorld().getMaxHeight()) {
          Block b=loc.getWorld().getBlockAt(x,y,z);
          if (b != null) {
            BlockState blockState=b.getState();
            if (blockState instanceof InventoryHolder) {
              if (plugin.useZones && !plugin.getZonesHelper().checkPermission(player,b))               continue;
              InventoryHolder inv=(InventoryHolder)blockState;
              if (doesInventoryHaveItem(inv.getInventory(),toSearch)) {
                foundInventories.add(b.getLocation().clone());
              }
            }
          }
        }
      }
    }
  }
  if (foundInventories.size() > 0) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    if (player.getListeningPluginChannels().contains(plugin.pluginMessageChannel)) {
      ByteArrayOutputStream buf=new ByteArrayOutputStream();
      buf.write((byte)20);
      for (      Location location : foundInventories) {
        StringBuilder sb=new StringBuilder();
        sb.append(location.getBlockX()).append(""String_Node_Str"").append(location.getBlockY()).append(""String_Node_Str"").append(location.getBlockZ());
        try {
          buf.write(sb.toString().getBytes(""String_Node_Str""));
          buf.write((byte)0);
        }
 catch (        Exception ex) {
        }
      }
      player.sendPluginMessage(plugin,plugin.pluginMessageChannel,buf.toByteArray());
    }
 else {
      for (      Location location : foundInventories) {
        StringBuilder sb=new StringBuilder();
        sb.append(location.getBlockX()).append(""String_Node_Str"").append(location.getBlockY()).append(""String_Node_Str"").append(location.getBlockZ());
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + sb.toString());
      }
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return true;
}","public boolean onCommand(CommandSender commandSender,Command command,String s,String[] args){
  if (!(commandSender instanceof Player)) {
    commandSender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)commandSender;
  if (!player.hasPermission(""String_Node_Str"")) {
    commandSender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args.length == 0) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
  if (args.length == 1 && args[0].equalsIgnoreCase(""String_Node_Str"") && player.getListeningPluginChannels().contains(plugin.pluginMessageChannel)) {
    player.sendPluginMessage(plugin,plugin.pluginMessageChannel,new byte[]{20});
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
  int range=Math.min(args.length == 2 ? Integer.parseInt(args[1]) : plugin.defaultSearchRange,plugin.maximumSearchRange);
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + args[0]+ ""String_Node_Str""+ range+ ""String_Node_Str"");
  Location loc=player.getLocation().clone();
  ItemStack toSearch=null;
  String[] parts=args[0].split(""String_Node_Str"");
  try {
    Integer i=Integer.parseInt(parts[0]);
    Integer i2=parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
    toSearch=new ItemStack(i,1,i2.shortValue());
  }
 catch (  NumberFormatException e) {
    String owner=""String_Node_Str"";
    String itemName;
    Integer data;
    itemName=parts[0];
    data=parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
    try {
      Material m=Material.valueOf(itemName.toUpperCase());
      if (m != null) {
        toSearch=new ItemStack(m,1,data.shortValue());
      }
    }
 catch (    IllegalArgumentException ex) {
      toSearch=plugin.getTweakcraftUtilsHelper().searchItem(parts[0]);
    }
  }
  if (toSearch == null) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
  Set<Location> foundInventories=new HashSet<Location>();
  for (int x=loc.getBlockX() - range; x < loc.getBlockX() + range; x++) {
    for (int y=loc.getBlockY() - range; y < loc.getBlockY() + range; y++) {
      for (int z=loc.getBlockZ() - range; z < loc.getBlockZ() + range; z++) {
        if (y > 0 && y < loc.getWorld().getMaxHeight()) {
          Block b=loc.getWorld().getBlockAt(x,y,z);
          if (b != null) {
            BlockState blockState=b.getState();
            if (blockState instanceof InventoryHolder) {
              if (plugin.useZones && !plugin.getZonesHelper().checkPermission(player,b))               continue;
              InventoryHolder inv=(InventoryHolder)blockState;
              if (doesInventoryHaveItem(inv.getInventory(),toSearch)) {
                foundInventories.add(b.getLocation().clone());
              }
            }
          }
        }
      }
    }
  }
  if (foundInventories.size() > 0) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    if (player.getListeningPluginChannels().contains(plugin.pluginMessageChannel)) {
      ByteArrayOutputStream buf=new ByteArrayOutputStream();
      buf.write((byte)20);
      for (      Location location : foundInventories) {
        StringBuilder sb=new StringBuilder();
        sb.append(location.getBlockX()).append(""String_Node_Str"").append(location.getBlockY()).append(""String_Node_Str"").append(location.getBlockZ());
        try {
          buf.write(sb.toString().getBytes(""String_Node_Str""));
          buf.write((byte)0);
        }
 catch (        Exception ex) {
        }
      }
      player.sendPluginMessage(plugin,plugin.pluginMessageChannel,buf.toByteArray());
    }
 else {
      for (      Location location : foundInventories) {
        StringBuilder sb=new StringBuilder();
        sb.append(location.getBlockX()).append(""String_Node_Str"").append(location.getBlockY()).append(""String_Node_Str"").append(location.getBlockZ());
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + sb.toString());
      }
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return true;
}"
44869,"@SuppressWarnings(""String_Node_Str"") private void parseConfig(){
  if (inited) {
    SnowBalls.shapelessRecipes.clear();
    SnowBalls.shapedRecipes.clear();
    this.getServer().resetRecipes();
    try {
      this.getConfig().load(new File(this.getDataFolder(),""String_Node_Str""));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    InvalidConfigurationException e) {
      e.printStackTrace();
    }
  }
 else   inited=true;
  this.enableInfiniteLava=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.enableInfiniteLava)   log.info(""String_Node_Str"");
  this.enableMaxStack=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.enableMaxStack)   log.info(""String_Node_Str"");
  this.leavesLoot=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.leavesLoot)   log.info(""String_Node_Str"");
  this.bookshelvesdrop=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.bookshelvesdrop)   log.info(""String_Node_Str"");
  this.icedrop=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.icedrop)   log.info(""String_Node_Str"");
  this.defaultSearchRange=this.getConfig().getInt(""String_Node_Str"",20);
  this.maximumSearchRange=this.getConfig().getInt(""String_Node_Str"",100);
  log.info(""String_Node_Str"" + this.defaultSearchRange + ""String_Node_Str"");
  log.info(""String_Node_Str"" + this.maximumSearchRange + ""String_Node_Str"");
  this.useZones=zonesHelper.checkForZones();
  if (useZones)   log.info(""String_Node_Str"");
  ConfigurationSection section=this.getConfig().getConfigurationSection(""String_Node_Str"");
  if (section != null) {
    Set<String> shapelesslines=section.getKeys(false);
    for (    String s1 : shapelesslines) {
      try {
        List<Integer> result=this.getConfig().getIntegerList(""String_Node_Str"" + s1 + ""String_Node_Str"");
        ShapelessRecipe sl=new ShapelessRecipe(new ItemStack(result.get(0),result.get(2),result.get(1).shortValue()));
        List<?> ingredients=this.getConfig().getList(""String_Node_Str"" + s1 + ""String_Node_Str"",null);
        if (ingredients != null) {
          for (          Object iline : ingredients) {
            if (iline instanceof List) {
              List<Integer> l=(List<Integer>)iline;
              if (l.size() > 2)               sl.addIngredient(l.get(2),Material.getMaterial(l.get(0)),l.get(1));
 else               sl.addIngredient(Material.getMaterial(l.get(0)),l.get(1));
            }
          }
        }
        log.info(""String_Node_Str"" + s1 + ""String_Node_Str"");
        SnowBalls.shapelessRecipes.add(sl);
      }
 catch (      NullPointerException ex) {
        log.warning(""String_Node_Str"" + s1 + ""String_Node_Str"");
      }
    }
  }
  section=this.getConfig().getConfigurationSection(""String_Node_Str"");
  if (section != null) {
    Set<String> shapedrecipelines=section.getKeys(false);
    for (    String s1 : shapedrecipelines) {
      try {
        List<Integer> result=this.getConfig().getIntegerList(""String_Node_Str"" + s1 + ""String_Node_Str"");
        ShapedRecipe sr=new ShapedRecipe(new ItemStack(result.get(0),result.get(2),result.get(1).shortValue()));
        String[] shape=this.getConfig().getStringList(""String_Node_Str"" + s1 + ""String_Node_Str"").toArray(new String[0]);
        sr.shape(shape);
        Set<String> shapedRecipeIngredients=this.getConfig().getConfigurationSection(""String_Node_Str"" + s1 + ""String_Node_Str"").getKeys(false);
        for (        String charac : shapedRecipeIngredients) {
          List<Integer> l=this.getConfig().getIntegerList(""String_Node_Str"" + s1 + ""String_Node_Str""+ charac);
          Material mat=Material.getMaterial(l.get(0));
          sr.setIngredient(charac.toCharArray()[0],mat,l.get(1));
        }
        log.info(""String_Node_Str"" + s1 + ""String_Node_Str"");
        SnowBalls.shapedRecipes.add(sr);
      }
 catch (      NullPointerException ex) {
        log.warning(""String_Node_Str"" + s1 + ""String_Node_Str"");
      }
    }
  }
  if (enableMaxStack) {
    log.info(""String_Node_Str"");
    this.setMaxStack();
  }
}","@SuppressWarnings(""String_Node_Str"") private void parseConfig(){
  if (inited) {
    SnowBalls.shapelessRecipes.clear();
    SnowBalls.shapedRecipes.clear();
    this.getServer().resetRecipes();
    try {
      this.getConfig().load(new File(this.getDataFolder(),""String_Node_Str""));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    InvalidConfigurationException e) {
      e.printStackTrace();
    }
  }
 else   inited=true;
  this.enableInfiniteLava=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.enableInfiniteLava)   log.info(""String_Node_Str"");
  this.enableMaxStack=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.enableMaxStack)   log.info(""String_Node_Str"");
  this.leavesLoot=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.leavesLoot)   log.info(""String_Node_Str"");
  this.bookshelvesdrop=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.bookshelvesdrop)   log.info(""String_Node_Str"");
  this.icedrop=this.getConfig().getBoolean(""String_Node_Str"",false);
  if (this.icedrop)   log.info(""String_Node_Str"");
  this.defaultSearchRange=this.getConfig().getInt(""String_Node_Str"",20);
  this.maximumSearchRange=this.getConfig().getInt(""String_Node_Str"",100);
  log.info(""String_Node_Str"" + this.defaultSearchRange + ""String_Node_Str"");
  log.info(""String_Node_Str"" + this.maximumSearchRange + ""String_Node_Str"");
  this.useZones=zonesHelper.checkForZones();
  if (useZones)   log.info(""String_Node_Str"");
  this.useTCUtils=tcUtilsHelper.checkForTweakcraftUtils();
  if (useTCUtils)   log.info(""String_Node_Str"");
  ConfigurationSection section=this.getConfig().getConfigurationSection(""String_Node_Str"");
  if (section != null) {
    Set<String> shapelesslines=section.getKeys(false);
    for (    String s1 : shapelesslines) {
      try {
        List<Integer> result=this.getConfig().getIntegerList(""String_Node_Str"" + s1 + ""String_Node_Str"");
        ShapelessRecipe sl=new ShapelessRecipe(new ItemStack(result.get(0),result.get(2),result.get(1).shortValue()));
        List<?> ingredients=this.getConfig().getList(""String_Node_Str"" + s1 + ""String_Node_Str"",null);
        if (ingredients != null) {
          for (          Object iline : ingredients) {
            if (iline instanceof List) {
              List<Integer> l=(List<Integer>)iline;
              if (l.size() > 2)               sl.addIngredient(l.get(2),Material.getMaterial(l.get(0)),l.get(1));
 else               sl.addIngredient(Material.getMaterial(l.get(0)),l.get(1));
            }
          }
        }
        log.info(""String_Node_Str"" + s1 + ""String_Node_Str"");
        SnowBalls.shapelessRecipes.add(sl);
      }
 catch (      NullPointerException ex) {
        log.warning(""String_Node_Str"" + s1 + ""String_Node_Str"");
      }
    }
  }
  section=this.getConfig().getConfigurationSection(""String_Node_Str"");
  if (section != null) {
    Set<String> shapedrecipelines=section.getKeys(false);
    for (    String s1 : shapedrecipelines) {
      try {
        List<Integer> result=this.getConfig().getIntegerList(""String_Node_Str"" + s1 + ""String_Node_Str"");
        ShapedRecipe sr=new ShapedRecipe(new ItemStack(result.get(0),result.get(2),result.get(1).shortValue()));
        String[] shape=this.getConfig().getStringList(""String_Node_Str"" + s1 + ""String_Node_Str"").toArray(new String[0]);
        sr.shape(shape);
        Set<String> shapedRecipeIngredients=this.getConfig().getConfigurationSection(""String_Node_Str"" + s1 + ""String_Node_Str"").getKeys(false);
        for (        String charac : shapedRecipeIngredients) {
          List<Integer> l=this.getConfig().getIntegerList(""String_Node_Str"" + s1 + ""String_Node_Str""+ charac);
          Material mat=Material.getMaterial(l.get(0));
          sr.setIngredient(charac.toCharArray()[0],mat,l.get(1));
        }
        log.info(""String_Node_Str"" + s1 + ""String_Node_Str"");
        SnowBalls.shapedRecipes.add(sr);
      }
 catch (      NullPointerException ex) {
        log.warning(""String_Node_Str"" + s1 + ""String_Node_Str"");
      }
    }
  }
  if (enableMaxStack) {
    log.info(""String_Node_Str"");
    this.setMaxStack();
  }
}"
44870,"public CoupledSimplifiedPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  go.setActionCommand(""String_Node_Str"");
  go.addActionListener(this);
  dispcm.setEditable(false);
  dispin.setEditable(false);
  probzd.setEditable(false);
  ta.setEditable(false);
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  c.gridx=x;
  c.gridy=y++;
  c.gridwidth=3;
  c.anchor=GridBagConstraints.WEST;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridwidth=1;
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(ky,c);
  panel.add(ky);
  c.gridx=x;
  c.insets=GUIUtils.insetsLeft;
  label=new JLabel(ParametersPanel.stringHelp);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.insets=GUIUtils.insetsNone;
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(ts,c);
  panel.add(ts);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(sa,c);
  panel.add(sa);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(m,c);
  panel.add(m);
  c.gridy=y++;
  x=0;
  c.gridx=x;
  c.insets=top;
  gridbag.setConstraints(go,c);
  panel.add(go);
  c.gridy=y++;
  x=0;
  c.gridx=x;
  c.fill=GridBagConstraints.NONE;
  c.anchor=GridBagConstraints.WEST;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(dispcm,c);
  panel.add(dispcm);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(dispin,c);
  panel.add(dispin);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(probzd,c);
  panel.add(probzd);
  c.gridx=x + 2;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}","public CoupledSimplifiedPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  go.setActionCommand(""String_Node_Str"");
  go.addActionListener(this);
  dispcm.setEditable(false);
  dispin.setEditable(false);
  probzd.setEditable(false);
  ta.setEditable(false);
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  c.gridx=x;
  c.gridy=y++;
  c.gridwidth=3;
  c.anchor=GridBagConstraints.WEST;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridwidth=1;
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(ky,c);
  panel.add(ky);
  c.gridx=x;
  c.insets=GUIUtils.insetsLeft;
  c.gridheight=5;
  c.anchor=GridBagConstraints.NORTHWEST;
  label=new JLabel(ParametersPanel.stringHelp);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.insets=GUIUtils.insetsNone;
  c.gridheight=1;
  c.anchor=GridBagConstraints.WEST;
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(ts,c);
  panel.add(ts);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(sa,c);
  panel.add(sa);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(m,c);
  panel.add(m);
  c.gridy=y++;
  x=0;
  c.gridx=x;
  c.insets=top;
  gridbag.setConstraints(go,c);
  panel.add(go);
  c.gridy=y++;
  x=0;
  c.gridx=x;
  c.fill=GridBagConstraints.NONE;
  c.anchor=GridBagConstraints.WEST;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(dispcm,c);
  panel.add(dispcm);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x++;
  gridbag.setConstraints(dispin,c);
  panel.add(dispin);
  c.gridy=y++;
  x=0;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(probzd,c);
  panel.add(probzd);
  c.gridx=x + 2;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}"
44871,"public RigidBlockSimplifiedPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(Jibson1993);
  group.add(JibsonAndOthers1998);
  group.add(Jibson2007CA);
  group.add(Jibson2007CAM);
  group.add(Jibson2007AICA);
  group.add(Jibson2007AICAR);
  group.add(Ambraseys);
  group.add(SaygiliRathje2008CARPA);
  group.add(SaygiliRathje2008CARPAPV);
  group.add(SaygiliRathje2008CARPAPVAI);
  group.add(SaygiliRathje2009CARPAM);
  Jibson1993.setActionCommand(""String_Node_Str"");
  Jibson1993.addActionListener(this);
  JibsonAndOthers1998.setActionCommand(""String_Node_Str"");
  JibsonAndOthers1998.addActionListener(this);
  Jibson2007CA.setActionCommand(""String_Node_Str"");
  Jibson2007CA.addActionListener(this);
  Jibson2007CAM.setActionCommand(""String_Node_Str"");
  Jibson2007CAM.addActionListener(this);
  Jibson2007AICA.setActionCommand(""String_Node_Str"");
  Jibson2007AICA.addActionListener(this);
  Jibson2007AICAR.setActionCommand(""String_Node_Str"");
  Jibson2007AICAR.addActionListener(this);
  Ambraseys.setActionCommand(""String_Node_Str"");
  Ambraseys.addActionListener(this);
  SaygiliRathje2008CARPA.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPA.addActionListener(this);
  SaygiliRathje2008CARPAPV.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPV.addActionListener(this);
  SaygiliRathje2008CARPAPVAI.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPVAI.addActionListener(this);
  SaygiliRathje2009CARPAM.setActionCommand(""String_Node_Str"");
  SaygiliRathje2009CARPAM.addActionListener(this);
  fieldAc.setEditable(false);
  fieldAmax.setEditable(false);
  fieldVmax.setEditable(false);
  fieldIa.setEditable(false);
  fieldM.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  ta.setEditable(false);
  ta.setContentType(""String_Node_Str"");
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(SaygiliRathje2009CARPAM);
  sidepanel.add(SaygiliRathje2008CARPA);
  sidepanel.add(SaygiliRathje2008CARPAPV);
  sidepanel.add(SaygiliRathje2008CARPAPVAI);
  sidepanel.add(Jibson2007CA);
  sidepanel.add(Jibson2007CAM);
  sidepanel.add(Jibson2007AICA);
  sidepanel.add(Jibson2007AICAR);
  sidepanel.add(JibsonAndOthers1998);
  sidepanel.add(Jibson1993);
  sidepanel.add(Ambraseys);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=12;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=3;
  c.gridx=x++;
  c.gridy=y++;
  c.fill=GridBagConstraints.NONE;
  c.anchor=GridBagConstraints.WEST;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x + 2;
  c.insets=GUIUtils.insetsLeft;
  label=new JLabel(ParametersPanel.stringHelp);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.insets=GUIUtils.insetsNone;
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAmax,c);
  panel.add(fieldAmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldVmax,c);
  panel.add(fieldVmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldIa,c);
  panel.add(fieldIa);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=x + 2;
  c.gridy=y;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}","public RigidBlockSimplifiedPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(Jibson1993);
  group.add(JibsonAndOthers1998);
  group.add(Jibson2007CA);
  group.add(Jibson2007CAM);
  group.add(Jibson2007AICA);
  group.add(Jibson2007AICAR);
  group.add(Ambraseys);
  group.add(SaygiliRathje2008CARPA);
  group.add(SaygiliRathje2008CARPAPV);
  group.add(SaygiliRathje2008CARPAPVAI);
  group.add(SaygiliRathje2009CARPAM);
  Jibson1993.setActionCommand(""String_Node_Str"");
  Jibson1993.addActionListener(this);
  JibsonAndOthers1998.setActionCommand(""String_Node_Str"");
  JibsonAndOthers1998.addActionListener(this);
  Jibson2007CA.setActionCommand(""String_Node_Str"");
  Jibson2007CA.addActionListener(this);
  Jibson2007CAM.setActionCommand(""String_Node_Str"");
  Jibson2007CAM.addActionListener(this);
  Jibson2007AICA.setActionCommand(""String_Node_Str"");
  Jibson2007AICA.addActionListener(this);
  Jibson2007AICAR.setActionCommand(""String_Node_Str"");
  Jibson2007AICAR.addActionListener(this);
  Ambraseys.setActionCommand(""String_Node_Str"");
  Ambraseys.addActionListener(this);
  SaygiliRathje2008CARPA.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPA.addActionListener(this);
  SaygiliRathje2008CARPAPV.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPV.addActionListener(this);
  SaygiliRathje2008CARPAPVAI.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPVAI.addActionListener(this);
  SaygiliRathje2009CARPAM.setActionCommand(""String_Node_Str"");
  SaygiliRathje2009CARPAM.addActionListener(this);
  fieldAc.setEditable(false);
  fieldAmax.setEditable(false);
  fieldVmax.setEditable(false);
  fieldIa.setEditable(false);
  fieldM.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  ta.setEditable(false);
  ta.setContentType(""String_Node_Str"");
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(SaygiliRathje2009CARPAM);
  sidepanel.add(SaygiliRathje2008CARPA);
  sidepanel.add(SaygiliRathje2008CARPAPV);
  sidepanel.add(SaygiliRathje2008CARPAPVAI);
  sidepanel.add(Jibson2007CA);
  sidepanel.add(Jibson2007CAM);
  sidepanel.add(Jibson2007AICA);
  sidepanel.add(Jibson2007AICAR);
  sidepanel.add(JibsonAndOthers1998);
  sidepanel.add(Jibson1993);
  sidepanel.add(Ambraseys);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=12;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=3;
  c.gridx=x++;
  c.gridy=y++;
  c.fill=GridBagConstraints.NONE;
  c.anchor=GridBagConstraints.WEST;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x + 2;
  c.insets=GUIUtils.insetsLeft;
  c.gridheight=5;
  c.anchor=GridBagConstraints.NORTHWEST;
  label=new JLabel(ParametersPanel.stringHelp);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.insets=GUIUtils.insetsNone;
  c.gridheight=1;
  c.anchor=GridBagConstraints.WEST;
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAmax,c);
  panel.add(fieldAmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldVmax,c);
  panel.add(fieldVmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldIa,c);
  panel.add(fieldIa);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=x + 2;
  c.gridy=y;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}"
44872,"public UnifiedModelPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(UnifiedPAV);
  group.add(UnifiedPAM);
  UnifiedPAV.setActionCommand(""String_Node_Str"");
  UnifiedPAV.addActionListener(this);
  UnifiedPAM.setActionCommand(""String_Node_Str"");
  UnifiedPAM.addActionListener(this);
  fieldPGV.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  fieldResPR.setEditable(false);
  fieldAcPGA.setEditable(false);
  fieldkmaxPGA.setEditable(false);
  fieldkvelmaxPGV.setEditable(false);
  fieldkmax.setEditable(false);
  fieldkvelmax.setEditable(false);
  fieldrbdisp.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  ta.setEditable(false);
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(UnifiedPAM);
  sidepanel.add(UnifiedPAV);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=19;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=3;
  c.gridx=x++;
  c.gridy=y++;
  c.anchor=GridBagConstraints.WEST;
  c.fill=GridBagConstraints.NONE;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x + 2;
  c.insets=GUIUtils.insetsLeft;
  label=new JLabel(ParametersPanel.stringHelp);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.insets=GUIUtils.insetsNone;
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTs,c);
  panel.add(fieldTs);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGA,c);
  panel.add(fieldPGA);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGV,c);
  panel.add(fieldPGV);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTm,c);
  panel.add(fieldTm);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResPR,c);
  panel.add(fieldResPR);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmaxPGA,c);
  panel.add(fieldkmaxPGA);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmaxPGV,c);
  panel.add(fieldkvelmaxPGV);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmax,c);
  panel.add(fieldkmax);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmax,c);
  panel.add(fieldkvelmax);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=x + 2;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}","public UnifiedModelPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(UnifiedPAV);
  group.add(UnifiedPAM);
  UnifiedPAV.setActionCommand(""String_Node_Str"");
  UnifiedPAV.addActionListener(this);
  UnifiedPAM.setActionCommand(""String_Node_Str"");
  UnifiedPAM.addActionListener(this);
  fieldPGV.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  fieldResPR.setEditable(false);
  fieldAcPGA.setEditable(false);
  fieldkmaxPGA.setEditable(false);
  fieldkvelmaxPGV.setEditable(false);
  fieldkmax.setEditable(false);
  fieldkvelmax.setEditable(false);
  fieldrbdisp.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  ta.setEditable(false);
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(UnifiedPAM);
  sidepanel.add(UnifiedPAV);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=19;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=3;
  c.gridx=x++;
  c.gridy=y++;
  c.anchor=GridBagConstraints.WEST;
  c.fill=GridBagConstraints.NONE;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x + 2;
  c.insets=GUIUtils.insetsLeft;
  c.gridheight=5;
  c.anchor=GridBagConstraints.NORTHWEST;
  label=new JLabel(ParametersPanel.stringHelp);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.insets=GUIUtils.insetsNone;
  c.gridheight=1;
  c.anchor=GridBagConstraints.WEST;
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTs,c);
  panel.add(fieldTs);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGA,c);
  panel.add(fieldPGA);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGV,c);
  panel.add(fieldPGV);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTm,c);
  panel.add(fieldTm);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResPR,c);
  panel.add(fieldResPR);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmaxPGA,c);
  panel.add(fieldkmaxPGA);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmaxPGV,c);
  panel.add(fieldkvelmaxPGV);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmax,c);
  panel.add(fieldkmax);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmax,c);
  panel.add(fieldkvelmax);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=x + 2;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}"
44873,"public static String[] BrayAndTravasarou2007(final double ky,final double ts,final double sa,final double m){
  String ret[]=new String[3];
  final double p=0.2316419;
  final double b1=0.319381530;
  final double b2=-0.356563782;
  final double b3=1.781477937;
  final double b4=-1.821255978;
  final double b5=1.330274429;
  final double lnky=Math.log(ky);
  final double lnky2=lnky * lnky;
  final double ts15=ts * 1.5;
  final double lnsats15=Math.log(sa * ts15);
  final double lnsats15_2=lnsats15 * lnsats15;
  double dispcm=Math.pow(Math.E,-1.1 - 2.83 * lnky - 0.333 * lnky2 + 0.566 * lnky * lnsats15 + 3.04 * lnsats15 - 0.244 * lnsats15_2 + ts15 + 0.278 * (m - 7.0));
  double dispin=dispcm / 2.54;
  double x=-1.76 - 3.22 * lnky - 0.484 * ts * lnky + 3.52 * lnsats15;
  double zx=(1. / Math.sqrt(2 * Math.PI)) * Math.exp(-(x * x) / 2.);
  double t=1. / (1. + p * x);
  double t2=t * t;
  double t3=t2 * t;
  double t4=t3 * t;
  double t5=t4 * t;
  double px=1 - zx * (b1 * t + b2 * t2 + b3 * t3 + b4 * t4 + b5 * t5);
  double prob_zero_disp=1.0 - px;
  int incr=0;
  ret[incr++]=fmtOne.format(dispcm);
  ret[incr++]=fmtOne.format(dispin);
  ret[incr++]=fmtTwo.format(prob_zero_disp);
  return ret;
}","public static String[] BrayAndTravasarou2007(final double ky,final double ts,final double sa,final double m){
  String ret[]=new String[3];
  final double p=0.2316419;
  final double b1=0.319381530;
  final double b2=-0.356563782;
  final double b3=1.781477937;
  final double b4=-1.821255978;
  final double b5=1.330274429;
  final double lnky=Math.log(ky);
  final double lnky2=lnky * lnky;
  final double ts15=ts * 1.5;
  final double lnsats15=Math.log(sa);
  final double lnsats15_2=lnsats15 * lnsats15;
  double dispcm=Math.exp(-1.1 - 2.83 * lnky - 0.333 * lnky2 + 0.566 * lnky * lnsats15 + 3.04 * lnsats15 - 0.244 * lnsats15_2 + ts15 + 0.278 * (m - 7.0));
  double dispin=dispcm / 2.54;
  double x=-1.76 - 3.22 * lnky - 0.484 * ts * lnky + 3.52 * lnsats15;
  double zx=(1. / Math.sqrt(2 * Math.PI)) * Math.exp(-(x * x) / 2.);
  double t=1. / (1. + p * x);
  double t2=t * t;
  double t3=t2 * t;
  double t4=t3 * t;
  double t5=t4 * t;
  double px=1 - zx * (b1 * t + b2 * t2 + b3 * t3 + b4 * t4 + b5 * t5);
  double prob_zero_disp=1.0 - px;
  int incr=0;
  ret[incr++]=fmtOne.format(dispcm);
  ret[incr++]=fmtOne.format(dispin);
  ret[incr++]=fmtTwo.format(prob_zero_disp);
  return ret;
}"
44874,"public static String[] UnifiedModel(final double ac,final double h,final double vs,final double m,final double pga,final double pgv,final double r,int method){
  String ret[]=new String[11];
  int incr=0;
  double ts, tm, pr;
  ts=4.0 * h / vs;
  if (m <= 7.25)   tm=(0.411 + 0.0837 * (m - 6.0) + 0.00208 * r);
 else   tm=(0.411 + 1.25 * 0.0837 + 0.00208 * r);
  pr=ts / tm;
  pr=pr > 8.0 ? 8.0 : pr;
  ret[incr++]=fmtThree.format(ts);
  ret[incr++]=fmtThree.format(tm);
  ret[incr++]=fmtThree.format(pr);
  ret[incr++]=fmtThree.format(ac / pga);
  double kmax_pga, ln_pr, ln_pr2;
  if (pr < 0.1)   kmax_pga=1;
 else {
    ln_pr=Math.log(pr / 0.1);
    ln_pr2=ln_pr * ln_pr;
    kmax_pga=Math.exp((0.459 - 0.702 * pga) * ln_pr + (-0.228 + 0.076 * pga) * ln_pr2);
  }
  ret[incr++]=fmtThree.format(kmax_pga);
  double kvelmax_pgv;
  if (pr < 0.2)   kvelmax_pgv=1;
 else {
    ln_pr=Math.log(pr / 0.2);
    ln_pr2=ln_pr * ln_pr;
    kvelmax_pgv=Math.exp(0.24 * ln_pr + (-0.091 - 0.171 * pga) * ln_pr2);
  }
  ret[incr++]=fmtThree.format(kvelmax_pgv);
  double kmax=kmax_pga * pga;
  ret[incr++]=fmtThree.format(kmax);
  double disp=0, dflexible=0;
  if (method == METHOD_2008) {
    double kvelmax=kvelmax_pgv * pgv;
    ret[incr++]=fmtThree.format(kvelmax);
    disp=RigidBlockSimplified.SaygiliRathje2008CARPAPV_d(ac,kmax,kvelmax);
    if (ts <= 1.5)     dflexible=Math.exp(Math.log(disp) + 3.69 * ts - 1.22 * ts * ts);
 else     dflexible=Math.exp(Math.log(disp) + 2.78);
  }
 else   if (method == METHOD_2009) {
    ret[incr++]=""String_Node_Str"";
    disp=RigidBlockSimplified.SaygiliRathje2009CARPAM_d(ac,kmax,m);
    if (ts <= 0.5)     dflexible=Math.exp(Math.log(disp) + 1.42 * ts);
 else     dflexible=Math.exp(Math.log(disp) + 0.71);
  }
  ret[incr++]=fmtThree.format(disp);
  ret[incr++]=fmtThree.format(dflexible);
  ret[incr++]=fmtThree.format(dflexible / 2.54);
  return ret;
}","public static String[] UnifiedModel(final double ac,final double h,final double vs,final double m,final double pga,final double pgv,final double r,int method){
  String ret[]=new String[11];
  int incr=0;
  double ts, tm, pr;
  ts=4.0 * h / vs;
  if (m <= 7.25)   tm=(0.411 + 0.0837 * (m - 6.0) + 0.00208 * r);
 else   tm=(0.411 + 1.25 * 0.0837 + 0.00208 * r);
  pr=ts / tm;
  pr=pr > 8.0 ? 8.0 : pr;
  ret[incr++]=fmtThree.format(ts);
  ret[incr++]=fmtThree.format(tm);
  ret[incr++]=fmtThree.format(pr);
  ret[incr++]=fmtThree.format(ac / pga);
  double kmax_pga, ln_pr, ln_pr2;
  if (pr < 0.1)   kmax_pga=1;
 else {
    ln_pr=Math.log(pr / 0.1);
    ln_pr2=ln_pr * ln_pr;
    kmax_pga=Math.exp((0.459 - 0.702 * pga) * ln_pr + (-0.228 + 0.076 * pga) * ln_pr2);
  }
  ret[incr++]=fmtThree.format(kmax_pga);
  double kvelmax_pgv;
  if (pr < 0.2)   kvelmax_pgv=1;
 else {
    ln_pr=Math.log(pr / 0.2);
    ln_pr2=ln_pr * ln_pr;
    kvelmax_pgv=Math.exp(0.24 * ln_pr + (-0.091 - 0.171 * pga) * ln_pr2);
  }
  ret[incr++]=fmtThree.format(kvelmax_pgv);
  double kmax=kmax_pga * pga;
  ret[incr++]=fmtThree.format(kmax);
  double disp=0, dflexible=0;
  if (method == METHOD_2008) {
    double kvelmax=kvelmax_pgv * pgv;
    ret[incr++]=fmtThree.format(kvelmax);
    disp=RigidBlockSimplified.SaygiliRathje2008CARPAPV_d(ac,kmax,kvelmax);
    if (ts <= 0.5)     dflexible=Math.exp(Math.log(disp) + 1.42 * ts);
 else     dflexible=Math.exp(Math.log(disp) + 0.71);
  }
 else   if (method == METHOD_2009) {
    ret[incr++]=""String_Node_Str"";
    disp=RigidBlockSimplified.SaygiliRathje2009CARPAM_d(ac,kmax,m);
    if (ts <= 1.5)     dflexible=Math.exp(Math.log(disp) + 3.69 * ts - 1.22 * ts * ts);
 else     dflexible=Math.exp(Math.log(disp) + 2.78);
  }
  ret[incr++]=fmtThree.format(disp);
  ret[incr++]=fmtThree.format(dflexible);
  ret[incr++]=fmtThree.format(dflexible / 2.54);
  return ret;
}"
44875,"public RigidBlockSimplifiedPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(Jibson1993);
  group.add(JibsonAndOthers1998);
  group.add(Jibson2007CA);
  group.add(Jibson2007CAM);
  group.add(Jibson2007AICA);
  group.add(Jibson2007AICAR);
  group.add(Ambraseys);
  group.add(SaygiliRathje2008CARPA);
  group.add(SaygiliRathje2008CARPAPV);
  group.add(SaygiliRathje2008CARPAPVAI);
  group.add(SaygiliRathje2009CARPAM);
  Jibson1993.setActionCommand(""String_Node_Str"");
  Jibson1993.addActionListener(this);
  JibsonAndOthers1998.setActionCommand(""String_Node_Str"");
  JibsonAndOthers1998.addActionListener(this);
  Jibson2007CA.setActionCommand(""String_Node_Str"");
  Jibson2007CA.addActionListener(this);
  Jibson2007CAM.setActionCommand(""String_Node_Str"");
  Jibson2007CAM.addActionListener(this);
  Jibson2007AICA.setActionCommand(""String_Node_Str"");
  Jibson2007AICA.addActionListener(this);
  Jibson2007AICAR.setActionCommand(""String_Node_Str"");
  Jibson2007AICAR.addActionListener(this);
  Ambraseys.setActionCommand(""String_Node_Str"");
  Ambraseys.addActionListener(this);
  SaygiliRathje2008CARPA.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPA.addActionListener(this);
  SaygiliRathje2008CARPAPV.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPV.addActionListener(this);
  SaygiliRathje2008CARPAPVAI.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPVAI.addActionListener(this);
  SaygiliRathje2009CARPAM.setActionCommand(""String_Node_Str"");
  SaygiliRathje2009CARPAM.addActionListener(this);
  fieldAc.setEditable(false);
  fieldAmax.setEditable(false);
  fieldVmax.setEditable(false);
  fieldIa.setEditable(false);
  fieldM.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  ta.setEditable(false);
  ta.setContentType(""String_Node_Str"");
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=this;
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(SaygiliRathje2009CARPAM);
  sidepanel.add(SaygiliRathje2008CARPA);
  sidepanel.add(SaygiliRathje2008CARPAPV);
  sidepanel.add(SaygiliRathje2008CARPAPVAI);
  sidepanel.add(Jibson2007CA);
  sidepanel.add(Jibson2007CAM);
  sidepanel.add(Jibson2007AICA);
  sidepanel.add(Jibson2007AICAR);
  sidepanel.add(JibsonAndOthers1998);
  sidepanel.add(Jibson1993);
  sidepanel.add(Ambraseys);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=11;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=2;
  c.gridx=x++;
  c.gridy=y++;
  c.fill=GridBagConstraints.NONE;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAmax,c);
  panel.add(fieldAmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldVmax,c);
  panel.add(fieldVmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldIa,c);
  panel.add(fieldIa);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=0;
  c.gridy=11;
  c.insets=none;
  c.gridwidth=4;
  c.weightx=1;
  c.weighty=1;
  c.fill=GridBagConstraints.BOTH;
  gridbag.setConstraints(sta,c);
  panel.add(sta);
}","public RigidBlockSimplifiedPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(Jibson1993);
  group.add(JibsonAndOthers1998);
  group.add(Jibson2007CA);
  group.add(Jibson2007CAM);
  group.add(Jibson2007AICA);
  group.add(Jibson2007AICAR);
  group.add(Ambraseys);
  group.add(SaygiliRathje2008CARPA);
  group.add(SaygiliRathje2008CARPAPV);
  group.add(SaygiliRathje2008CARPAPVAI);
  group.add(SaygiliRathje2009CARPAM);
  Jibson1993.setActionCommand(""String_Node_Str"");
  Jibson1993.addActionListener(this);
  JibsonAndOthers1998.setActionCommand(""String_Node_Str"");
  JibsonAndOthers1998.addActionListener(this);
  Jibson2007CA.setActionCommand(""String_Node_Str"");
  Jibson2007CA.addActionListener(this);
  Jibson2007CAM.setActionCommand(""String_Node_Str"");
  Jibson2007CAM.addActionListener(this);
  Jibson2007AICA.setActionCommand(""String_Node_Str"");
  Jibson2007AICA.addActionListener(this);
  Jibson2007AICAR.setActionCommand(""String_Node_Str"");
  Jibson2007AICAR.addActionListener(this);
  Ambraseys.setActionCommand(""String_Node_Str"");
  Ambraseys.addActionListener(this);
  SaygiliRathje2008CARPA.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPA.addActionListener(this);
  SaygiliRathje2008CARPAPV.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPV.addActionListener(this);
  SaygiliRathje2008CARPAPVAI.setActionCommand(""String_Node_Str"");
  SaygiliRathje2008CARPAPVAI.addActionListener(this);
  SaygiliRathje2009CARPAM.setActionCommand(""String_Node_Str"");
  SaygiliRathje2009CARPAM.addActionListener(this);
  fieldAc.setEditable(false);
  fieldAmax.setEditable(false);
  fieldVmax.setEditable(false);
  fieldIa.setEditable(false);
  fieldM.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  ta.setEditable(false);
  ta.setContentType(""String_Node_Str"");
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(SaygiliRathje2009CARPAM);
  sidepanel.add(SaygiliRathje2008CARPA);
  sidepanel.add(SaygiliRathje2008CARPAPV);
  sidepanel.add(SaygiliRathje2008CARPAPVAI);
  sidepanel.add(Jibson2007CA);
  sidepanel.add(Jibson2007CAM);
  sidepanel.add(Jibson2007AICA);
  sidepanel.add(Jibson2007AICAR);
  sidepanel.add(JibsonAndOthers1998);
  sidepanel.add(Jibson1993);
  sidepanel.add(Ambraseys);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=11;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=2;
  c.gridx=x++;
  c.gridy=y++;
  c.fill=GridBagConstraints.NONE;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAmax,c);
  panel.add(fieldAmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldVmax,c);
  panel.add(fieldVmax);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldIa,c);
  panel.add(fieldIa);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=x + 1;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}"
44876,"public UnifiedModelPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(UnifiedPAV);
  group.add(UnifiedPAM);
  UnifiedPAV.setActionCommand(""String_Node_Str"");
  UnifiedPAV.addActionListener(this);
  UnifiedPAM.setActionCommand(""String_Node_Str"");
  UnifiedPAM.addActionListener(this);
  fieldPGV.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  fieldResPR.setEditable(false);
  fieldAcPGA.setEditable(false);
  fieldkmaxPGA.setEditable(false);
  fieldkvelmaxPGV.setEditable(false);
  fieldkmax.setEditable(false);
  fieldkvelmax.setEditable(false);
  fieldrbdisp.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  ta.setEditable(false);
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=this;
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(UnifiedPAM);
  sidepanel.add(UnifiedPAV);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=19;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=2;
  c.gridx=x++;
  c.gridy=y++;
  c.fill=GridBagConstraints.NONE;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTs,c);
  panel.add(fieldTs);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGA,c);
  panel.add(fieldPGA);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGV,c);
  panel.add(fieldPGV);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTm,c);
  panel.add(fieldTm);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResPR,c);
  panel.add(fieldResPR);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmaxPGA,c);
  panel.add(fieldkmaxPGA);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmaxPGV,c);
  panel.add(fieldkvelmaxPGV);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmax,c);
  panel.add(fieldkmax);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmax,c);
  panel.add(fieldkvelmax);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldrbdisp,c);
  panel.add(fieldrbdisp);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=0;
  c.gridy=y;
  c.insets=none;
  c.gridwidth=4;
  c.weightx=1;
  c.weighty=1;
  c.fill=GridBagConstraints.BOTH;
  gridbag.setConstraints(sta,c);
  panel.add(sta);
}","public UnifiedModelPanel(SlammerTabbedPane parent) throws Exception {
  this.parent=parent;
  group.add(UnifiedPAV);
  group.add(UnifiedPAM);
  UnifiedPAV.setActionCommand(""String_Node_Str"");
  UnifiedPAV.addActionListener(this);
  UnifiedPAM.setActionCommand(""String_Node_Str"");
  UnifiedPAM.addActionListener(this);
  fieldPGV.setEditable(false);
  button.setActionCommand(""String_Node_Str"");
  button.addActionListener(this);
  fieldResPR.setEditable(false);
  fieldAcPGA.setEditable(false);
  fieldkmaxPGA.setEditable(false);
  fieldkvelmaxPGV.setEditable(false);
  fieldkmax.setEditable(false);
  fieldkvelmax.setEditable(false);
  fieldrbdisp.setEditable(false);
  fieldResCm.setEditable(false);
  fieldResIn.setEditable(false);
  ta.setEditable(false);
  GridBagLayout gridbag=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  Insets top=new Insets(10,0,0,0);
  Insets none=new Insets(0,0,0,0);
  Border b=BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0,0,0,5),BorderFactory.createMatteBorder(0,0,0,1,Color.BLACK));
  JPanel panel=new JPanel();
  panel.setLayout(gridbag);
  int x=0;
  int y=0;
  JLabel label;
  Box sidepanel=new Box(BoxLayout.Y_AXIS);
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  sidepanel.add(label);
  sidepanel.add(UnifiedPAM);
  sidepanel.add(UnifiedPAV);
  c.gridx=x++;
  c.gridy=y++;
  c.gridheight=19;
  c.anchor=GridBagConstraints.NORTHWEST;
  gridbag.setConstraints(sidepanel,c);
  panel.add(sidepanel);
  c.gridx=x++;
  c.fill=GridBagConstraints.VERTICAL;
  label=new JLabel(""String_Node_Str"");
  label.setBorder(b);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridheight=1;
  c.gridwidth=2;
  c.gridx=x++;
  c.gridy=y++;
  c.fill=GridBagConstraints.NONE;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldAc,c);
  panel.add(fieldAc);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTs,c);
  panel.add(fieldTs);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldM,c);
  panel.add(fieldM);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGA,c);
  panel.add(fieldPGA);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldPGV,c);
  panel.add(fieldPGV);
  c.gridx=x++;
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldTm,c);
  panel.add(fieldTm);
  c.gridx=x++;
  c.gridy=y++;
  c.insets=top;
  c.gridwidth=2;
  gridbag.setConstraints(button,c);
  panel.add(button);
  c.gridy=y++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.gridwidth=1;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResPR,c);
  panel.add(fieldResPR);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmaxPGA,c);
  panel.add(fieldkmaxPGA);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmaxPGV,c);
  panel.add(fieldkvelmaxPGV);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkmax,c);
  panel.add(fieldkmax);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldkvelmax,c);
  panel.add(fieldkvelmax);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldrbdisp,c);
  panel.add(fieldrbdisp);
  c.gridy=y++;
  c.gridx=x++;
  label=new JLabel(""String_Node_Str"");
  label.setFont(GUIUtils.headerFont);
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridy=y++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResCm,c);
  panel.add(fieldResCm);
  c.gridy=y++;
  c.gridx=x++;
  c.insets=none;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  c.gridx=x--;
  gridbag.setConstraints(fieldResIn,c);
  panel.add(fieldResIn);
  c.gridx=x + 2;
  c.weightx=1;
  label=new JLabel(""String_Node_Str"");
  gridbag.setConstraints(label,c);
  panel.add(label);
  setLayout(new BorderLayout());
  add(panel,BorderLayout.NORTH);
  add(sta,BorderLayout.CENTER);
}"
44877,"public void run(){
  Analysis a;
  if (analysis == RB) {
    a=new RigidBlock();
    result=a.SlammerRigorous(ain,di,ca,scale,paramDualslope,thrust,scaleRB);
  }
 else   if (analysis == DC) {
    a=new Decoupled();
    result=a.Decoupled(ain,uwgt,height,vs,damp,refstrain,di,scale,g,vr,ca,dv3);
    _kmax=Math.abs(a._kmax);
    _vs=Math.abs(a._vs);
    _damp=Math.abs(a._damp);
    _dampf=Math.abs(a._dampf);
    _omega=Math.abs(a._omega);
  }
 else   if (analysis == CP) {
    a=new Coupled();
    result=a.Coupled(ain,uwgt,height,vs,damp,refstrain,di,scale,g,vr,ca,dv3);
    _kmax=Math.abs(a._kmax);
    _vs=Math.abs(a._vs);
    _damp=Math.abs(a._damp);
    _dampf=Math.abs(a._dampf);
    _omega=Math.abs(a._omega);
  }
 else   a=null;
  graphData=a.graphData;
  finished=true;
  pm.incr(eq + ""String_Node_Str"" + record);
}","public void run(){
  Analysis a;
  if (analysis == RB) {
    a=new RigidBlock();
    result=a.SlammerRigorous(ain,di,ca,scale,paramDualslope,thrust,scaleRB);
  }
 else   if (analysis == DC) {
    a=new Decoupled();
    result=a.Decoupled(ain,uwgt,height,vs,damp,refstrain,di,scale,g,vr,ca,dv3);
    _kmax=Math.abs(a._kmax);
    _vs=Math.abs(a._vs);
    _damp=Math.abs(a._damp);
    _dampf=Math.abs(a._dampf);
  }
 else   if (analysis == CP) {
    a=new Coupled();
    result=a.Coupled(ain,uwgt,height,vs,damp,refstrain,di,scale,g,vr,ca,dv3);
    _kmax=Math.abs(a._kmax);
    _vs=Math.abs(a._vs);
    _damp=Math.abs(a._damp);
    _dampf=Math.abs(a._dampf);
  }
 else   a=null;
  graphData=a.graphData;
  finished=true;
  pm.incr(eq + ""String_Node_Str"" + record);
}"
44878,"public Object construct(){
  try {
    clearOutput();
    paramUnit=parent.Parameters.unitMetric.isSelected();
    final double g=paramUnit ? Analysis.Gcmss : Analysis.Ginss;
    int dyn=dynamicRespParams.isSelected() ? WITH_DYN : NO_DYN;
    unitDisplacement=paramUnit ? ""String_Node_Str"" : ""String_Node_Str"";
    String h_rb=""String_Node_Str"" + ParametersPanel.stringRB + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
    String h_dc=""String_Node_Str"" + ParametersPanel.stringDC + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
    String h_cp=""String_Node_Str"" + ParametersPanel.stringCP + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
    String h_km=""String_Node_Str"";
    String h_vs=""String_Node_Str"";
    String h_damp=""String_Node_Str"";
    String h_dampf=""String_Node_Str"";
    String h_omega=""String_Node_Str"";
    if (dyn == NO_DYN)     outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
 else     outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_km,h_vs,h_damp,h_dampf,h_omega,""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
    outputTable.getTableHeader().setDefaultRenderer(new ResultsRenderer());
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMinWidth(0);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMinWidth(0);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMinWidth(0);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setPreferredWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setPreferredWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setPreferredWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMaxWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMaxWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMaxWidth(5);
    if (dyn == WITH_DYN) {
      outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMinWidth(0);
      outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setPreferredWidth(5);
      outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMaxWidth(5);
    }
    boolean paramDualslope=parent.Parameters.dualSlope.isSelected();
    Double d;
    double paramScale;
    if (parent.Parameters.scalePGA.isSelected()) {
      d=(Double)Utils.checkNum(parent.Parameters.scalePGAval.getText(),""String_Node_Str"",null,false,null,new Double(0),false,null,false);
      if (d == null) {
        parent.selectParameters();
        return null;
      }
      paramScale=d.doubleValue();
    }
 else     if (parent.Parameters.scaleOn.isSelected()) {
      d=(Double)Utils.checkNum(parent.Parameters.scaleData.getText(),""String_Node_Str"",null,false,null,null,false,null,false);
      if (d == null) {
        parent.selectParameters();
        return null;
      }
      paramScale=d.doubleValue();
    }
 else     paramScale=0;
    changeDecimal();
    boolean paramRigid=parent.Parameters.typeRigid.isSelected();
    boolean paramDecoupled=parent.Parameters.typeDecoupled.isSelected();
    boolean paramCoupled=parent.Parameters.typeCoupled.isSelected();
    graphDisp(paramRigid,paramDecoupled,paramCoupled);
    if (!paramRigid && !paramDecoupled && !paramCoupled) {
      parent.selectParameters();
      GUIUtils.popupError(""String_Node_Str"");
      return null;
    }
    Object[][] res=Utils.getDB().runQuery(""String_Node_Str"");
    if (res == null || res.length <= 1) {
      parent.selectSelectRecords();
      GUIUtils.popupError(""String_Node_Str"");
      return null;
    }
    xys=new XYSeries[res.length][3][2];
    dataVect=new ArrayList[3][3];
    String eq, record;
    DoubleList dat;
    double di;
    int num=0;
    double avg;
    double total[][]=new double[3][3];
    double scale=1, iscale, scaleRB;
    double inv, norm;
    double[][] ca;
    double[] ain=null;
    double thrust=0, uwgt=0, height=0, vs=0, damp=0, refstrain=0, vr=0;
    boolean dv3=false;
    scaleRB=paramUnit ? 1 : Analysis.CMtoIN;
    if (parent.Parameters.CAdisp.isSelected()) {
      String value;
      java.util.Vector caVect;
      TableCellEditor editor=null;
      editor=parent.Parameters.dispTable.getCellEditor();
      caVect=parent.Parameters.dispTableModel.getDataVector();
      if (editor != null)       editor.stopCellEditing();
      ca=new double[caVect.size()][2];
      for (int i=0; i < caVect.size(); i++) {
        for (int j=0; j < 2; j++) {
          value=(String)(((java.util.Vector)(caVect.get(i))).get(j));
          if (value == null || value == ""String_Node_Str"") {
            parent.selectParameters();
            GUIUtils.popupError(""String_Node_Str"");
            return null;
          }
          d=(Double)Utils.checkNum(value,""String_Node_Str"",null,false,null,null,false,null,false);
          if (d == null) {
            parent.selectParameters();
            return null;
          }
          ca[i][j]=d.doubleValue();
        }
      }
      if (caVect.size() == 0) {
        parent.selectParameters();
        GUIUtils.popupError(""String_Node_Str"");
        return null;
      }
    }
 else {
      d=(Double)Utils.checkNum(parent.Parameters.CAconstTF.getText(),""String_Node_Str"",null,false,null,new Double(0),true,null,false);
      if (d == null) {
        parent.selectParameters();
        return null;
      }
      ca=new double[1][2];
      ca[0][0]=0;
      ca[0][1]=d.doubleValue();
    }
    if (paramRigid && paramDualslope) {
      Double thrustD=(Double)Utils.checkNum(parent.Parameters.thrustAngle.getText(),""String_Node_Str"",new Double(90),true,null,new Double(0),true,null,false);
      if (thrustD == null) {
        parent.selectParameters();
        return null;
      }
 else       thrust=thrustD.doubleValue();
    }
    if (paramDecoupled || paramCoupled) {
      Double tempd;
      uwgt=100.0;
      tempd=(Double)Utils.checkNum(parent.Parameters.paramHeight.getText(),ParametersPanel.stringHeight + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       height=tempd.doubleValue();
      tempd=(Double)Utils.checkNum(parent.Parameters.paramVs.getText(),ParametersPanel.stringVs + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       vs=tempd.doubleValue();
      tempd=(Double)Utils.checkNum(parent.Parameters.paramDamp.getText(),ParametersPanel.stringDamp + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       damp=tempd.doubleValue() / 100.0;
      tempd=(Double)Utils.checkNum(parent.Parameters.paramRefStrain.getText(),ParametersPanel.stringRefStrain + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       refstrain=tempd.doubleValue();
      dv3=parent.Parameters.paramSoilModel.getSelectedIndex() == 1;
      if (paramUnit) {
        uwgt/=Analysis.M3toCM3;
        height*=Analysis.MtoCM;
        vs*=Analysis.MtoCM;
        vr*=Analysis.MtoCM;
      }
 else {
        uwgt/=Analysis.FT3toIN3;
        height*=Analysis.FTtoIN;
        vs*=Analysis.FTtoIN;
        vr*=Analysis.FTtoIN;
      }
    }
    File testFile;
    String path;
    int num_analyses=0;
    if (paramRigid) {
      num_analyses++;
      dataVect[RB][NOR]=new ArrayList<Double>(res.length - 1);
      dataVect[RB][INV]=new ArrayList<Double>(res.length - 1);
      dataVect[RB][AVG]=new ArrayList<Double>(res.length - 1);
    }
    if (paramDecoupled) {
      num_analyses++;
      dataVect[DC][NOR]=new ArrayList<Double>(res.length - 1);
      dataVect[DC][INV]=new ArrayList<Double>(res.length - 1);
      dataVect[DC][AVG]=new ArrayList<Double>(res.length - 1);
    }
    if (paramCoupled) {
      num_analyses++;
      dataVect[CP][NOR]=new ArrayList<Double>(res.length - 1);
      dataVect[CP][INV]=new ArrayList<Double>(res.length - 1);
      dataVect[CP][AVG]=new ArrayList<Double>(res.length - 1);
    }
    iscale=-1.0 * scale;
    pm.setMaximum(res.length * 2 * num_analyses);
    pm.update(0,""String_Node_Str"");
    int j, k;
    Object[] row;
    int rowcount=0;
    resultVec=new java.util.Vector<ResultThread>(res.length * 2 * ANALYSIS_TYPES);
    NUM_CORES=Runtime.getRuntime().availableProcessors();
    pool=Executors.newFixedThreadPool(NUM_CORES);
    ResultThread rt;
    int row_idx;
    long startTime=System.currentTimeMillis();
    for (int i=1; i < res.length && !pm.isCanceled(); i++) {
      row=new Object[tableCols[dyn][LEN]];
      eq=res[i][0].toString();
      row_idx=i - 1;
      record=res[i][1].toString();
      row[0]=eq;
      row[1]=record;
      path=res[i][3].toString();
      testFile=new File(path);
      if (!testFile.exists() || !testFile.canRead()) {
        row[2]=""String_Node_Str"";
        row[3]=path;
        outputTableModel.addRow(row);
        rowcount++;
        continue;
      }
      dat=new DoubleList(path,0,parent.Parameters.scaleOn.isSelected() ? paramScale : 1.0);
      if (dat.bad()) {
        row[2]=""String_Node_Str"" + dat.badEntry();
        row[3]=path;
        outputTableModel.addRow(row);
        rowcount++;
        continue;
      }
      num++;
      di=Double.parseDouble(res[i][2].toString());
      if (parent.Parameters.scalePGA.isSelected()) {
        scale=paramScale / Double.parseDouble(res[i][4].toString());
        iscale=-scale;
      }
      ain=dat.getAsArray();
      if (paramRigid) {
        rt=new ResultThread(eq,record,row_idx,rowcount,RB,NOR,ain,di,ca,scale,paramDualslope,thrust,scaleRB,pm);
        pool.execute(rt);
        resultVec.add(rt);
        rt=new ResultThread(eq,record,row_idx,rowcount,RB,INV,ain,di,ca,iscale,paramDualslope,thrust,scaleRB,pm);
        pool.execute(rt);
        resultVec.add(rt);
      }
      if (paramDecoupled) {
        rt=new ResultThread(eq,record,row_idx,rowcount,DC,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
        rt=new ResultThread(eq,record,row_idx,rowcount,DC,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
      }
      if (paramCoupled) {
        rt=new ResultThread(eq,record,row_idx,rowcount,CP,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
        rt=new ResultThread(eq,record,row_idx,rowcount,CP,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
      }
      outputTableModel.addRow(row);
      rowcount++;
    }
    pool.shutdown();
    while (!pool.awaitTermination(1,TimeUnit.SECONDS)) {
      if (pm.isCanceled()) {
        pool.shutdownNow();
        break;
      }
    }
    pm.update(""String_Node_Str"");
    ResultThread prt;
    int i_analysis;
    for (int i=0; i < resultVec.size(); i++) {
      rt=resultVec.get(i);
      if (!rt.finished())       continue;
      rt.graphData.setKey(rt.eq + ""String_Node_Str"" + rt.record+ ""String_Node_Str""+ ParametersPanel.stringRB+ ""String_Node_Str""+ polarityName[NOR]);
      xys[rt.idx][rt.analysis][rt.orientation]=rt.graphData;
      total[rt.analysis][rt.orientation]+=rt.result;
      i_analysis=1 + rt.analysis * 2;
      for (j=0; j < dataVect[rt.analysis][rt.orientation].size() && ((Double)dataVect[rt.analysis][rt.orientation].get(j)).doubleValue() < rt.result; j++)       ;
      dataVect[rt.analysis][rt.orientation].add(j,new Double(rt.result));
      outputTableModel.setValueAt(unitFmt.format(rt.result),rt.row,tableCols[dyn][i_analysis] + rt.orientation);
      if (rt.orientation == INV) {
        prt=resultVec.get(i - 1);
        avg=avg(rt.result,prt.result);
        total[rt.analysis][AVG]+=avg;
        for (j=0; j < dataVect[rt.analysis][AVG].size() && ((Double)dataVect[rt.analysis][AVG].get(j)).doubleValue() < avg; j++)         ;
        dataVect[rt.analysis][AVG].add(j,new Double(avg));
        outputTableModel.setValueAt(unitFmt.format(avg),rt.row,tableCols[dyn][i_analysis] + AVG);
        if (dyn == WITH_DYN && (rt.analysis == DC || rt.analysis == CP)) {
          outputTableModel.setValueAt(unitFmt.format(rt._kmax / g),rt.row,tableCols[dyn][I_DY] + 0);
          outputTableModel.setValueAt(unitFmt.format(rt._vs / g),rt.row,tableCols[dyn][I_DY] + 1);
          outputTableModel.setValueAt(unitFmt.format(rt._damp),rt.row,tableCols[dyn][I_DY] + 2);
          outputTableModel.setValueAt(unitFmt.format(rt._dampf),rt.row,tableCols[dyn][I_DY] + 3);
          outputTableModel.setValueAt(unitFmt.format(rt._omega),rt.row,tableCols[dyn][I_DY] + 4);
        }
      }
    }
    if (!pm.isCanceled()) {
      double mean, value, valtemp;
      int idx;
      Object[] rmean=new Object[tableCols[dyn][LEN]];
      Object[] rmedian=new Object[tableCols[dyn][LEN]];
      Object[] rsd=new Object[tableCols[dyn][LEN]];
      rmean[1]=""String_Node_Str"";
      rmedian[1]=""String_Node_Str"";
      rsd[1]=""String_Node_Str"";
      for (j=0; j < total.length; j++) {
        for (k=0; k < total[j].length; k++) {
          if (dataVect[j][k] == null || dataVect[j][k].size() == 0)           continue;
          idx=tableCols[dyn][1 + j * 2] + k;
          mean=Double.parseDouble(unitFmt.format(total[j][k] / num));
          System.out.println(idx + ""String_Node_Str"" + rmean.length+ ""String_Node_Str""+ j+ ""String_Node_Str""+ k);
          rmean[idx]=unitFmt.format(mean);
          if (num % 2 == 0) {
            double fst=(Double)dataVect[j][k].get(num / 2);
            double snd=(Double)dataVect[j][k].get(num / 2 - 1);
            rmedian[idx]=unitFmt.format(avg(fst,snd));
          }
 else           rmedian[idx]=unitFmt.format(dataVect[j][k].get(num / 2));
          value=0;
          for (int i=0; i < num; i++) {
            valtemp=mean - ((Double)dataVect[j][k].get(i)).doubleValue();
            value+=(valtemp * valtemp);
          }
          value/=num;
          value=Math.sqrt(value);
          rsd[idx]=unitFmt.format(value);
        }
      }
      outputTableModel.addRow(new Object[0]);
      outputTableModel.addRow(rmean);
      outputTableModel.addRow(rmedian);
      outputTableModel.addRow(rsd);
    }
  }
 catch (  Throwable ex) {
    Utils.catchException(ex);
  }
  return null;
}","public Object construct(){
  try {
    clearOutput();
    paramUnit=parent.Parameters.unitMetric.isSelected();
    final double g=paramUnit ? Analysis.Gcmss : Analysis.Ginss;
    int dyn=dynamicRespParams.isSelected() ? WITH_DYN : NO_DYN;
    unitDisplacement=paramUnit ? ""String_Node_Str"" : ""String_Node_Str"";
    String h_rb=""String_Node_Str"" + ParametersPanel.stringRB + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
    String h_dc=""String_Node_Str"" + ParametersPanel.stringDC + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
    String h_cp=""String_Node_Str"" + ParametersPanel.stringCP + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
    String h_km=""String_Node_Str"";
    String h_vs=""String_Node_Str"";
    String h_damp=""String_Node_Str"";
    String h_dampf=""String_Node_Str"";
    if (parent.Parameters.paramSoilModel.getSelectedIndex() == 1)     h_vs=""String_Node_Str"";
    if (dyn == NO_DYN)     outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
 else     outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_km,h_vs,h_damp,h_dampf,""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
    outputTable.getTableHeader().setDefaultRenderer(new ResultsRenderer());
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMinWidth(0);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMinWidth(0);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMinWidth(0);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setPreferredWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setPreferredWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setPreferredWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMaxWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMaxWidth(5);
    outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMaxWidth(5);
    if (dyn == WITH_DYN) {
      outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMinWidth(0);
      outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setPreferredWidth(5);
      outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMaxWidth(5);
    }
    boolean paramDualslope=parent.Parameters.dualSlope.isSelected();
    Double d;
    double paramScale;
    if (parent.Parameters.scalePGA.isSelected()) {
      d=(Double)Utils.checkNum(parent.Parameters.scalePGAval.getText(),""String_Node_Str"",null,false,null,new Double(0),false,null,false);
      if (d == null) {
        parent.selectParameters();
        return null;
      }
      paramScale=d.doubleValue();
    }
 else     if (parent.Parameters.scaleOn.isSelected()) {
      d=(Double)Utils.checkNum(parent.Parameters.scaleData.getText(),""String_Node_Str"",null,false,null,null,false,null,false);
      if (d == null) {
        parent.selectParameters();
        return null;
      }
      paramScale=d.doubleValue();
    }
 else     paramScale=0;
    changeDecimal();
    boolean paramRigid=parent.Parameters.typeRigid.isSelected();
    boolean paramDecoupled=parent.Parameters.typeDecoupled.isSelected();
    boolean paramCoupled=parent.Parameters.typeCoupled.isSelected();
    graphDisp(paramRigid,paramDecoupled,paramCoupled);
    if (!paramRigid && !paramDecoupled && !paramCoupled) {
      parent.selectParameters();
      GUIUtils.popupError(""String_Node_Str"");
      return null;
    }
    Object[][] res=Utils.getDB().runQuery(""String_Node_Str"");
    if (res == null || res.length <= 1) {
      parent.selectSelectRecords();
      GUIUtils.popupError(""String_Node_Str"");
      return null;
    }
    xys=new XYSeries[res.length][3][2];
    dataVect=new ArrayList[3][3];
    String eq, record;
    DoubleList dat;
    double di;
    int num=0;
    double avg;
    double total[][]=new double[3][3];
    double scale=1, iscale, scaleRB;
    double inv, norm;
    double[][] ca;
    double[] ain=null;
    double thrust=0, uwgt=0, height=0, vs=0, damp=0, refstrain=0, vr=0;
    boolean dv3=false;
    scaleRB=paramUnit ? 1 : Analysis.CMtoIN;
    if (parent.Parameters.CAdisp.isSelected()) {
      String value;
      java.util.Vector caVect;
      TableCellEditor editor=null;
      editor=parent.Parameters.dispTable.getCellEditor();
      caVect=parent.Parameters.dispTableModel.getDataVector();
      if (editor != null)       editor.stopCellEditing();
      ca=new double[caVect.size()][2];
      for (int i=0; i < caVect.size(); i++) {
        for (int j=0; j < 2; j++) {
          value=(String)(((java.util.Vector)(caVect.get(i))).get(j));
          if (value == null || value == ""String_Node_Str"") {
            parent.selectParameters();
            GUIUtils.popupError(""String_Node_Str"");
            return null;
          }
          d=(Double)Utils.checkNum(value,""String_Node_Str"",null,false,null,null,false,null,false);
          if (d == null) {
            parent.selectParameters();
            return null;
          }
          ca[i][j]=d.doubleValue();
        }
      }
      if (caVect.size() == 0) {
        parent.selectParameters();
        GUIUtils.popupError(""String_Node_Str"");
        return null;
      }
    }
 else {
      d=(Double)Utils.checkNum(parent.Parameters.CAconstTF.getText(),""String_Node_Str"",null,false,null,new Double(0),true,null,false);
      if (d == null) {
        parent.selectParameters();
        return null;
      }
      ca=new double[1][2];
      ca[0][0]=0;
      ca[0][1]=d.doubleValue();
    }
    if (paramRigid && paramDualslope) {
      Double thrustD=(Double)Utils.checkNum(parent.Parameters.thrustAngle.getText(),""String_Node_Str"",new Double(90),true,null,new Double(0),true,null,false);
      if (thrustD == null) {
        parent.selectParameters();
        return null;
      }
 else       thrust=thrustD.doubleValue();
    }
    if (paramDecoupled || paramCoupled) {
      Double tempd;
      uwgt=100.0;
      tempd=(Double)Utils.checkNum(parent.Parameters.paramHeight.getText(),ParametersPanel.stringHeight + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       height=tempd.doubleValue();
      tempd=(Double)Utils.checkNum(parent.Parameters.paramVs.getText(),ParametersPanel.stringVs + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       vs=tempd.doubleValue();
      tempd=(Double)Utils.checkNum(parent.Parameters.paramVr.getText(),ParametersPanel.stringVr + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       vr=tempd.doubleValue();
      tempd=(Double)Utils.checkNum(parent.Parameters.paramDamp.getText(),ParametersPanel.stringDamp + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       damp=tempd.doubleValue() / 100.0;
      tempd=(Double)Utils.checkNum(parent.Parameters.paramRefStrain.getText(),ParametersPanel.stringRefStrain + ""String_Node_Str"",null,false,null,null,false,null,false);
      if (tempd == null) {
        parent.selectParameters();
        return null;
      }
 else       refstrain=tempd.doubleValue();
      dv3=parent.Parameters.paramSoilModel.getSelectedIndex() == 1;
      if (paramUnit) {
        uwgt/=Analysis.M3toCM3;
        height*=Analysis.MtoCM;
        vs*=Analysis.MtoCM;
        vr*=Analysis.MtoCM;
      }
 else {
        uwgt/=Analysis.FT3toIN3;
        height*=Analysis.FTtoIN;
        vs*=Analysis.FTtoIN;
        vr*=Analysis.FTtoIN;
      }
    }
    File testFile;
    String path;
    int num_analyses=0;
    if (paramRigid) {
      num_analyses++;
      dataVect[RB][NOR]=new ArrayList<Double>(res.length - 1);
      dataVect[RB][INV]=new ArrayList<Double>(res.length - 1);
      dataVect[RB][AVG]=new ArrayList<Double>(res.length - 1);
    }
    if (paramDecoupled) {
      num_analyses++;
      dataVect[DC][NOR]=new ArrayList<Double>(res.length - 1);
      dataVect[DC][INV]=new ArrayList<Double>(res.length - 1);
      dataVect[DC][AVG]=new ArrayList<Double>(res.length - 1);
    }
    if (paramCoupled) {
      num_analyses++;
      dataVect[CP][NOR]=new ArrayList<Double>(res.length - 1);
      dataVect[CP][INV]=new ArrayList<Double>(res.length - 1);
      dataVect[CP][AVG]=new ArrayList<Double>(res.length - 1);
    }
    iscale=-1.0 * scale;
    pm.setMaximum(res.length * 2 * num_analyses);
    pm.update(0,""String_Node_Str"");
    int j, k;
    Object[] row;
    int rowcount=0;
    resultVec=new java.util.Vector<ResultThread>(res.length * 2 * ANALYSIS_TYPES);
    NUM_CORES=Runtime.getRuntime().availableProcessors();
    pool=Executors.newFixedThreadPool(NUM_CORES);
    ResultThread rt;
    int row_idx;
    long startTime=System.currentTimeMillis();
    for (int i=1; i < res.length && !pm.isCanceled(); i++) {
      row=new Object[tableCols[dyn][LEN]];
      eq=res[i][0].toString();
      row_idx=i - 1;
      record=res[i][1].toString();
      row[0]=eq;
      row[1]=record;
      path=res[i][3].toString();
      testFile=new File(path);
      if (!testFile.exists() || !testFile.canRead()) {
        row[2]=""String_Node_Str"";
        row[3]=path;
        outputTableModel.addRow(row);
        rowcount++;
        continue;
      }
      dat=new DoubleList(path,0,parent.Parameters.scaleOn.isSelected() ? paramScale : 1.0);
      if (dat.bad()) {
        row[2]=""String_Node_Str"" + dat.badEntry();
        row[3]=path;
        outputTableModel.addRow(row);
        rowcount++;
        continue;
      }
      num++;
      di=Double.parseDouble(res[i][2].toString());
      if (parent.Parameters.scalePGA.isSelected()) {
        scale=paramScale / Double.parseDouble(res[i][4].toString());
        iscale=-scale;
      }
      ain=dat.getAsArray();
      if (paramRigid) {
        rt=new ResultThread(eq,record,row_idx,rowcount,RB,NOR,ain,di,ca,scale,paramDualslope,thrust,scaleRB,pm);
        pool.execute(rt);
        resultVec.add(rt);
        rt=new ResultThread(eq,record,row_idx,rowcount,RB,INV,ain,di,ca,iscale,paramDualslope,thrust,scaleRB,pm);
        pool.execute(rt);
        resultVec.add(rt);
      }
      if (paramDecoupled) {
        rt=new ResultThread(eq,record,row_idx,rowcount,DC,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
        rt=new ResultThread(eq,record,row_idx,rowcount,DC,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
      }
      if (paramCoupled) {
        rt=new ResultThread(eq,record,row_idx,rowcount,CP,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
        rt=new ResultThread(eq,record,row_idx,rowcount,CP,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
        pool.execute(rt);
        resultVec.add(rt);
      }
      outputTableModel.addRow(row);
      rowcount++;
    }
    pool.shutdown();
    while (!pool.awaitTermination(1,TimeUnit.SECONDS)) {
      if (pm.isCanceled()) {
        pool.shutdownNow();
        break;
      }
    }
    pm.update(""String_Node_Str"");
    ResultThread prt;
    int i_analysis;
    for (int i=0; i < resultVec.size(); i++) {
      rt=resultVec.get(i);
      if (!rt.finished())       continue;
      rt.graphData.setKey(rt.eq + ""String_Node_Str"" + rt.record+ ""String_Node_Str""+ ParametersPanel.stringRB+ ""String_Node_Str""+ polarityName[NOR]);
      xys[rt.idx][rt.analysis][rt.orientation]=rt.graphData;
      total[rt.analysis][rt.orientation]+=rt.result;
      i_analysis=1 + rt.analysis * 2;
      for (j=0; j < dataVect[rt.analysis][rt.orientation].size() && ((Double)dataVect[rt.analysis][rt.orientation].get(j)).doubleValue() < rt.result; j++)       ;
      dataVect[rt.analysis][rt.orientation].add(j,new Double(rt.result));
      outputTableModel.setValueAt(unitFmt.format(rt.result),rt.row,tableCols[dyn][i_analysis] + rt.orientation);
      if (rt.orientation == INV) {
        prt=resultVec.get(i - 1);
        avg=avg(rt.result,prt.result);
        total[rt.analysis][AVG]+=avg;
        for (j=0; j < dataVect[rt.analysis][AVG].size() && ((Double)dataVect[rt.analysis][AVG].get(j)).doubleValue() < avg; j++)         ;
        dataVect[rt.analysis][AVG].add(j,new Double(avg));
        outputTableModel.setValueAt(unitFmt.format(avg),rt.row,tableCols[dyn][i_analysis] + AVG);
        if (dyn == WITH_DYN && (rt.analysis == DC || rt.analysis == CP)) {
          outputTableModel.setValueAt(unitFmt.format(rt._kmax / g),rt.row,tableCols[dyn][I_DY] + 0);
          outputTableModel.setValueAt(unitFmt.format(rt._vs),rt.row,tableCols[dyn][I_DY] + 1);
          outputTableModel.setValueAt(unitFmt.format(rt._damp),rt.row,tableCols[dyn][I_DY] + 2);
          outputTableModel.setValueAt(unitFmt.format(rt._dampf),rt.row,tableCols[dyn][I_DY] + 3);
        }
      }
    }
    if (!pm.isCanceled()) {
      double mean, value, valtemp;
      int idx;
      Object[] rmean=new Object[tableCols[dyn][LEN]];
      Object[] rmedian=new Object[tableCols[dyn][LEN]];
      Object[] rsd=new Object[tableCols[dyn][LEN]];
      rmean[1]=""String_Node_Str"";
      rmedian[1]=""String_Node_Str"";
      rsd[1]=""String_Node_Str"";
      for (j=0; j < total.length; j++) {
        for (k=0; k < total[j].length; k++) {
          if (dataVect[j][k] == null || dataVect[j][k].size() == 0)           continue;
          idx=tableCols[dyn][1 + j * 2] + k;
          mean=Double.parseDouble(unitFmt.format(total[j][k] / num));
          rmean[idx]=unitFmt.format(mean);
          if (num % 2 == 0) {
            double fst=(Double)dataVect[j][k].get(num / 2);
            double snd=(Double)dataVect[j][k].get(num / 2 - 1);
            rmedian[idx]=unitFmt.format(avg(fst,snd));
          }
 else           rmedian[idx]=unitFmt.format(dataVect[j][k].get(num / 2));
          value=0;
          for (int i=0; i < num; i++) {
            valtemp=mean - ((Double)dataVect[j][k].get(i)).doubleValue();
            value+=(valtemp * valtemp);
          }
          value/=num;
          value=Math.sqrt(value);
          rsd[idx]=unitFmt.format(value);
        }
      }
      outputTableModel.addRow(new Object[0]);
      outputTableModel.addRow(rmean);
      outputTableModel.addRow(rmedian);
      outputTableModel.addRow(rsd);
    }
  }
 catch (  Throwable ex) {
    Utils.catchException(ex);
  }
  return null;
}"
44879,"public void actionPerformed(java.awt.event.ActionEvent e){
  try {
    String command=e.getActionCommand();
    if (command.equals(""String_Node_Str"")) {
      final SwingWorker worker=new SwingWorker(){
        SynchronizedProgressFrame pm=new SynchronizedProgressFrame(0);
        public Object construct(){
          try {
            clearOutput();
            paramUnit=parent.Parameters.unitMetric.isSelected();
            final double g=paramUnit ? Analysis.Gcmss : Analysis.Ginss;
            int dyn=dynamicRespParams.isSelected() ? WITH_DYN : NO_DYN;
            unitDisplacement=paramUnit ? ""String_Node_Str"" : ""String_Node_Str"";
            String h_rb=""String_Node_Str"" + ParametersPanel.stringRB + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
            String h_dc=""String_Node_Str"" + ParametersPanel.stringDC + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
            String h_cp=""String_Node_Str"" + ParametersPanel.stringCP + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
            String h_km=""String_Node_Str"";
            String h_vs=""String_Node_Str"";
            String h_damp=""String_Node_Str"";
            String h_dampf=""String_Node_Str"";
            String h_omega=""String_Node_Str"";
            if (dyn == NO_DYN)             outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
 else             outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_km,h_vs,h_damp,h_dampf,h_omega,""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
            outputTable.getTableHeader().setDefaultRenderer(new ResultsRenderer());
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMinWidth(0);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMinWidth(0);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMinWidth(0);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setPreferredWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setPreferredWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setPreferredWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMaxWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMaxWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMaxWidth(5);
            if (dyn == WITH_DYN) {
              outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMinWidth(0);
              outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setPreferredWidth(5);
              outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMaxWidth(5);
            }
            boolean paramDualslope=parent.Parameters.dualSlope.isSelected();
            Double d;
            double paramScale;
            if (parent.Parameters.scalePGA.isSelected()) {
              d=(Double)Utils.checkNum(parent.Parameters.scalePGAval.getText(),""String_Node_Str"",null,false,null,new Double(0),false,null,false);
              if (d == null) {
                parent.selectParameters();
                return null;
              }
              paramScale=d.doubleValue();
            }
 else             if (parent.Parameters.scaleOn.isSelected()) {
              d=(Double)Utils.checkNum(parent.Parameters.scaleData.getText(),""String_Node_Str"",null,false,null,null,false,null,false);
              if (d == null) {
                parent.selectParameters();
                return null;
              }
              paramScale=d.doubleValue();
            }
 else             paramScale=0;
            changeDecimal();
            boolean paramRigid=parent.Parameters.typeRigid.isSelected();
            boolean paramDecoupled=parent.Parameters.typeDecoupled.isSelected();
            boolean paramCoupled=parent.Parameters.typeCoupled.isSelected();
            graphDisp(paramRigid,paramDecoupled,paramCoupled);
            if (!paramRigid && !paramDecoupled && !paramCoupled) {
              parent.selectParameters();
              GUIUtils.popupError(""String_Node_Str"");
              return null;
            }
            Object[][] res=Utils.getDB().runQuery(""String_Node_Str"");
            if (res == null || res.length <= 1) {
              parent.selectSelectRecords();
              GUIUtils.popupError(""String_Node_Str"");
              return null;
            }
            xys=new XYSeries[res.length][3][2];
            dataVect=new ArrayList[3][3];
            String eq, record;
            DoubleList dat;
            double di;
            int num=0;
            double avg;
            double total[][]=new double[3][3];
            double scale=1, iscale, scaleRB;
            double inv, norm;
            double[][] ca;
            double[] ain=null;
            double thrust=0, uwgt=0, height=0, vs=0, damp=0, refstrain=0, vr=0;
            boolean dv3=false;
            scaleRB=paramUnit ? 1 : Analysis.CMtoIN;
            if (parent.Parameters.CAdisp.isSelected()) {
              String value;
              java.util.Vector caVect;
              TableCellEditor editor=null;
              editor=parent.Parameters.dispTable.getCellEditor();
              caVect=parent.Parameters.dispTableModel.getDataVector();
              if (editor != null)               editor.stopCellEditing();
              ca=new double[caVect.size()][2];
              for (int i=0; i < caVect.size(); i++) {
                for (int j=0; j < 2; j++) {
                  value=(String)(((java.util.Vector)(caVect.get(i))).get(j));
                  if (value == null || value == ""String_Node_Str"") {
                    parent.selectParameters();
                    GUIUtils.popupError(""String_Node_Str"");
                    return null;
                  }
                  d=(Double)Utils.checkNum(value,""String_Node_Str"",null,false,null,null,false,null,false);
                  if (d == null) {
                    parent.selectParameters();
                    return null;
                  }
                  ca[i][j]=d.doubleValue();
                }
              }
              if (caVect.size() == 0) {
                parent.selectParameters();
                GUIUtils.popupError(""String_Node_Str"");
                return null;
              }
            }
 else {
              d=(Double)Utils.checkNum(parent.Parameters.CAconstTF.getText(),""String_Node_Str"",null,false,null,new Double(0),true,null,false);
              if (d == null) {
                parent.selectParameters();
                return null;
              }
              ca=new double[1][2];
              ca[0][0]=0;
              ca[0][1]=d.doubleValue();
            }
            if (paramRigid && paramDualslope) {
              Double thrustD=(Double)Utils.checkNum(parent.Parameters.thrustAngle.getText(),""String_Node_Str"",new Double(90),true,null,new Double(0),true,null,false);
              if (thrustD == null) {
                parent.selectParameters();
                return null;
              }
 else               thrust=thrustD.doubleValue();
            }
            if (paramDecoupled || paramCoupled) {
              Double tempd;
              uwgt=100.0;
              tempd=(Double)Utils.checkNum(parent.Parameters.paramHeight.getText(),ParametersPanel.stringHeight + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               height=tempd.doubleValue();
              tempd=(Double)Utils.checkNum(parent.Parameters.paramVs.getText(),ParametersPanel.stringVs + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               vs=tempd.doubleValue();
              tempd=(Double)Utils.checkNum(parent.Parameters.paramDamp.getText(),ParametersPanel.stringDamp + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               damp=tempd.doubleValue() / 100.0;
              tempd=(Double)Utils.checkNum(parent.Parameters.paramRefStrain.getText(),ParametersPanel.stringRefStrain + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               refstrain=tempd.doubleValue();
              dv3=parent.Parameters.paramSoilModel.getSelectedIndex() == 1;
              if (paramUnit) {
                uwgt/=Analysis.M3toCM3;
                height*=Analysis.MtoCM;
                vs*=Analysis.MtoCM;
                vr*=Analysis.MtoCM;
              }
 else {
                uwgt/=Analysis.FT3toIN3;
                height*=Analysis.FTtoIN;
                vs*=Analysis.FTtoIN;
                vr*=Analysis.FTtoIN;
              }
            }
            File testFile;
            String path;
            int num_analyses=0;
            if (paramRigid) {
              num_analyses++;
              dataVect[RB][NOR]=new ArrayList<Double>(res.length - 1);
              dataVect[RB][INV]=new ArrayList<Double>(res.length - 1);
              dataVect[RB][AVG]=new ArrayList<Double>(res.length - 1);
            }
            if (paramDecoupled) {
              num_analyses++;
              dataVect[DC][NOR]=new ArrayList<Double>(res.length - 1);
              dataVect[DC][INV]=new ArrayList<Double>(res.length - 1);
              dataVect[DC][AVG]=new ArrayList<Double>(res.length - 1);
            }
            if (paramCoupled) {
              num_analyses++;
              dataVect[CP][NOR]=new ArrayList<Double>(res.length - 1);
              dataVect[CP][INV]=new ArrayList<Double>(res.length - 1);
              dataVect[CP][AVG]=new ArrayList<Double>(res.length - 1);
            }
            iscale=-1.0 * scale;
            pm.setMaximum(res.length * 2 * num_analyses);
            pm.update(0,""String_Node_Str"");
            int j, k;
            Object[] row;
            int rowcount=0;
            resultVec=new java.util.Vector<ResultThread>(res.length * 2 * ANALYSIS_TYPES);
            NUM_CORES=Runtime.getRuntime().availableProcessors();
            pool=Executors.newFixedThreadPool(NUM_CORES);
            ResultThread rt;
            int row_idx;
            long startTime=System.currentTimeMillis();
            for (int i=1; i < res.length && !pm.isCanceled(); i++) {
              row=new Object[tableCols[dyn][LEN]];
              eq=res[i][0].toString();
              row_idx=i - 1;
              record=res[i][1].toString();
              row[0]=eq;
              row[1]=record;
              path=res[i][3].toString();
              testFile=new File(path);
              if (!testFile.exists() || !testFile.canRead()) {
                row[2]=""String_Node_Str"";
                row[3]=path;
                outputTableModel.addRow(row);
                rowcount++;
                continue;
              }
              dat=new DoubleList(path,0,parent.Parameters.scaleOn.isSelected() ? paramScale : 1.0);
              if (dat.bad()) {
                row[2]=""String_Node_Str"" + dat.badEntry();
                row[3]=path;
                outputTableModel.addRow(row);
                rowcount++;
                continue;
              }
              num++;
              di=Double.parseDouble(res[i][2].toString());
              if (parent.Parameters.scalePGA.isSelected()) {
                scale=paramScale / Double.parseDouble(res[i][4].toString());
                iscale=-scale;
              }
              ain=dat.getAsArray();
              if (paramRigid) {
                rt=new ResultThread(eq,record,row_idx,rowcount,RB,NOR,ain,di,ca,scale,paramDualslope,thrust,scaleRB,pm);
                pool.execute(rt);
                resultVec.add(rt);
                rt=new ResultThread(eq,record,row_idx,rowcount,RB,INV,ain,di,ca,iscale,paramDualslope,thrust,scaleRB,pm);
                pool.execute(rt);
                resultVec.add(rt);
              }
              if (paramDecoupled) {
                rt=new ResultThread(eq,record,row_idx,rowcount,DC,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
                rt=new ResultThread(eq,record,row_idx,rowcount,DC,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
              }
              if (paramCoupled) {
                rt=new ResultThread(eq,record,row_idx,rowcount,CP,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
                rt=new ResultThread(eq,record,row_idx,rowcount,CP,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
              }
              outputTableModel.addRow(row);
              rowcount++;
            }
            pool.shutdown();
            while (!pool.awaitTermination(1,TimeUnit.SECONDS)) {
              if (pm.isCanceled()) {
                pool.shutdownNow();
                break;
              }
            }
            pm.update(""String_Node_Str"");
            ResultThread prt;
            int i_analysis;
            for (int i=0; i < resultVec.size(); i++) {
              rt=resultVec.get(i);
              if (!rt.finished())               continue;
              rt.graphData.setKey(rt.eq + ""String_Node_Str"" + rt.record+ ""String_Node_Str""+ ParametersPanel.stringRB+ ""String_Node_Str""+ polarityName[NOR]);
              xys[rt.idx][rt.analysis][rt.orientation]=rt.graphData;
              total[rt.analysis][rt.orientation]+=rt.result;
              i_analysis=1 + rt.analysis * 2;
              for (j=0; j < dataVect[rt.analysis][rt.orientation].size() && ((Double)dataVect[rt.analysis][rt.orientation].get(j)).doubleValue() < rt.result; j++)               ;
              dataVect[rt.analysis][rt.orientation].add(j,new Double(rt.result));
              outputTableModel.setValueAt(unitFmt.format(rt.result),rt.row,tableCols[dyn][i_analysis] + rt.orientation);
              if (rt.orientation == INV) {
                prt=resultVec.get(i - 1);
                avg=avg(rt.result,prt.result);
                total[rt.analysis][AVG]+=avg;
                for (j=0; j < dataVect[rt.analysis][AVG].size() && ((Double)dataVect[rt.analysis][AVG].get(j)).doubleValue() < avg; j++)                 ;
                dataVect[rt.analysis][AVG].add(j,new Double(avg));
                outputTableModel.setValueAt(unitFmt.format(avg),rt.row,tableCols[dyn][i_analysis] + AVG);
                if (dyn == WITH_DYN && (rt.analysis == DC || rt.analysis == CP)) {
                  outputTableModel.setValueAt(unitFmt.format(rt._kmax / g),rt.row,tableCols[dyn][I_DY] + 0);
                  outputTableModel.setValueAt(unitFmt.format(rt._vs / g),rt.row,tableCols[dyn][I_DY] + 1);
                  outputTableModel.setValueAt(unitFmt.format(rt._damp),rt.row,tableCols[dyn][I_DY] + 2);
                  outputTableModel.setValueAt(unitFmt.format(rt._dampf),rt.row,tableCols[dyn][I_DY] + 3);
                  outputTableModel.setValueAt(unitFmt.format(rt._omega),rt.row,tableCols[dyn][I_DY] + 4);
                }
              }
            }
            if (!pm.isCanceled()) {
              double mean, value, valtemp;
              int idx;
              Object[] rmean=new Object[tableCols[dyn][LEN]];
              Object[] rmedian=new Object[tableCols[dyn][LEN]];
              Object[] rsd=new Object[tableCols[dyn][LEN]];
              rmean[1]=""String_Node_Str"";
              rmedian[1]=""String_Node_Str"";
              rsd[1]=""String_Node_Str"";
              for (j=0; j < total.length; j++) {
                for (k=0; k < total[j].length; k++) {
                  if (dataVect[j][k] == null || dataVect[j][k].size() == 0)                   continue;
                  idx=tableCols[dyn][1 + j * 2] + k;
                  mean=Double.parseDouble(unitFmt.format(total[j][k] / num));
                  System.out.println(idx + ""String_Node_Str"" + rmean.length+ ""String_Node_Str""+ j+ ""String_Node_Str""+ k);
                  rmean[idx]=unitFmt.format(mean);
                  if (num % 2 == 0) {
                    double fst=(Double)dataVect[j][k].get(num / 2);
                    double snd=(Double)dataVect[j][k].get(num / 2 - 1);
                    rmedian[idx]=unitFmt.format(avg(fst,snd));
                  }
 else                   rmedian[idx]=unitFmt.format(dataVect[j][k].get(num / 2));
                  value=0;
                  for (int i=0; i < num; i++) {
                    valtemp=mean - ((Double)dataVect[j][k].get(i)).doubleValue();
                    value+=(valtemp * valtemp);
                  }
                  value/=num;
                  value=Math.sqrt(value);
                  rsd[idx]=unitFmt.format(value);
                }
              }
              outputTableModel.addRow(new Object[0]);
              outputTableModel.addRow(rmean);
              outputTableModel.addRow(rmedian);
              outputTableModel.addRow(rsd);
            }
          }
 catch (          Throwable ex) {
            Utils.catchException(ex);
          }
          return null;
        }
        public void finished(){
          pm.dispose();
        }
      }
;
      worker.start();
    }
 else     if (command.equals(""String_Node_Str"")) {
      clearOutput();
    }
 else     if (command.equals(""String_Node_Str"")) {
      if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        FileWriter fw=new FileWriter(fc.getSelectedFile());
        String delim;
        if (outputDelSpace.isSelected())         delim=""String_Node_Str"";
 else         if (outputDelComma.isSelected())         delim=""String_Node_Str"";
 else         delim=""String_Node_Str"";
        int c=outputTableModel.getColumnCount();
        int r=outputTableModel.getRowCount();
        for (int i=0; i < c; i++) {
          if (i != 0)           fw.write(delim);
          fw.write(outputTableModel.getColumnName(i).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
        fw.write(""String_Node_Str"");
        Object o;
        for (int i=0; i < r; i++) {
          for (int j=0; j < c; j++) {
            if (j != 0)             fw.write(delim);
            o=outputTableModel.getValueAt(i,j);
            if (o == null)             o=""String_Node_Str"";
            fw.write(o.toString());
          }
          fw.write(""String_Node_Str"");
        }
        fw.close();
      }
    }
 else     if (command.equals(""String_Node_Str"")) {
      if (dataVect == null)       return;
      String name=""String_Node_Str"", title, pname;
      HistogramDataset dataset=new HistogramDataset();
      int polarity, analysis=-1;
      if (polarityAvgHist.isSelected())       polarity=AVG;
 else       if (polarityNorHist.isSelected())       polarity=NOR;
 else       if (polarityInvHist.isSelected())       polarity=INV;
 else       polarity=-1;
      for (int i=0; i < analysisHist.length; i++)       if (analysisHist[i].isSelected())       analysis=i;
      if (analysis == -1)       return;
      pname=polarityName[polarity];
      Double Bins=(Double)Utils.checkNum(outputBins.getText(),""String_Node_Str"",null,false,null,new Double(0),false,null,false);
      if (Bins == null || dataVect[analysis][polarity] == null)       return;
      name=analysisTitle[analysis];
      double series[]=new double[dataVect[analysis][polarity].size()];
      for (int j=0; j < dataVect[analysis][polarity].size(); j++)       series[j]=(((Double)dataVect[analysis][polarity].get(j)).doubleValue());
      dataset.addSeries(name,series,(int)Bins.doubleValue());
      title=""String_Node_Str"" + name + ""String_Node_Str""+ pname+ ""String_Node_Str"";
      JFreeChart hist=ChartFactory.createHistogram(title,""String_Node_Str"" + unitDisplacement,""String_Node_Str"",dataset,org.jfree.chart.plot.PlotOrientation.VERTICAL,false,true,false);
      ChartFrame frame=new ChartFrame(title,hist);
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);
    }
 else     if (command.equals(""String_Node_Str"")) {
      XYSeriesCollection xysc=new XYSeriesCollection();
      int polarity=polarityNorDisp.isSelected() ? NOR : INV;
      String pname=polarityName[polarity];
      String name=""String_Node_Str"";
      boolean first=true;
      for (int i=0; i < analysisDisp.length; i++) {
        if (analysisDisp[i].isSelected() && dataVect[i][polarity] != null) {
          if (first)           first=false;
 else           name+=""String_Node_Str"";
          name+=analysisTitle[i];
          for (int j=0; j < dataVect[i][polarity].size(); j++)           xysc.addSeries(xys[j][i][polarity]);
        }
      }
      if (first)       return;
      name+=""String_Node_Str"";
      JFreeChart chart=ChartFactory.createXYLineChart(name,""String_Node_Str"",""String_Node_Str"" + pname + ""String_Node_Str""+ unitDisplacement,xysc,org.jfree.chart.plot.PlotOrientation.VERTICAL,plotDisplacementLegend.isSelected(),true,false);
      chart.getXYPlot().getDomainAxis().setLowerMargin(0);
      chart.getXYPlot().getDomainAxis().setUpperMargin(0);
      chart.getXYPlot().getDomainAxis().setLowerBound(0);
      ChartFrame frame=new ChartFrame(name,chart);
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);
    }
  }
 catch (  Exception ex) {
    Utils.catchException(ex);
  }
}","public void actionPerformed(java.awt.event.ActionEvent e){
  try {
    String command=e.getActionCommand();
    if (command.equals(""String_Node_Str"")) {
      final SwingWorker worker=new SwingWorker(){
        SynchronizedProgressFrame pm=new SynchronizedProgressFrame(0);
        public Object construct(){
          try {
            clearOutput();
            paramUnit=parent.Parameters.unitMetric.isSelected();
            final double g=paramUnit ? Analysis.Gcmss : Analysis.Ginss;
            int dyn=dynamicRespParams.isSelected() ? WITH_DYN : NO_DYN;
            unitDisplacement=paramUnit ? ""String_Node_Str"" : ""String_Node_Str"";
            String h_rb=""String_Node_Str"" + ParametersPanel.stringRB + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
            String h_dc=""String_Node_Str"" + ParametersPanel.stringDC + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
            String h_cp=""String_Node_Str"" + ParametersPanel.stringCP + ""String_Node_Str""+ unitDisplacement+ ""String_Node_Str"";
            String h_km=""String_Node_Str"";
            String h_vs=""String_Node_Str"";
            String h_damp=""String_Node_Str"";
            String h_dampf=""String_Node_Str"";
            if (parent.Parameters.paramSoilModel.getSelectedIndex() == 1)             h_vs=""String_Node_Str"";
            if (dyn == NO_DYN)             outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
 else             outputTableModel.setColumnIdentifiers(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",h_rb + polarityName[NOR],h_rb + polarityName[INV],h_rb + polarityName[AVG],""String_Node_Str"",h_km,h_vs,h_damp,h_dampf,""String_Node_Str"",h_dc + polarityName[NOR],h_dc + polarityName[INV],h_dc + polarityName[AVG],""String_Node_Str"",h_cp + polarityName[NOR],h_cp + polarityName[INV],h_cp + polarityName[AVG]});
            outputTable.getTableHeader().setDefaultRenderer(new ResultsRenderer());
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMinWidth(0);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMinWidth(0);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMinWidth(0);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setPreferredWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setPreferredWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setPreferredWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_RB]).setMaxWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_DC]).setMaxWidth(5);
            outputTable.getColumnModel().getColumn(tableCols[dyn][N_CP]).setMaxWidth(5);
            if (dyn == WITH_DYN) {
              outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMinWidth(0);
              outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setPreferredWidth(5);
              outputTable.getColumnModel().getColumn(tableCols[dyn][N_DY]).setMaxWidth(5);
            }
            boolean paramDualslope=parent.Parameters.dualSlope.isSelected();
            Double d;
            double paramScale;
            if (parent.Parameters.scalePGA.isSelected()) {
              d=(Double)Utils.checkNum(parent.Parameters.scalePGAval.getText(),""String_Node_Str"",null,false,null,new Double(0),false,null,false);
              if (d == null) {
                parent.selectParameters();
                return null;
              }
              paramScale=d.doubleValue();
            }
 else             if (parent.Parameters.scaleOn.isSelected()) {
              d=(Double)Utils.checkNum(parent.Parameters.scaleData.getText(),""String_Node_Str"",null,false,null,null,false,null,false);
              if (d == null) {
                parent.selectParameters();
                return null;
              }
              paramScale=d.doubleValue();
            }
 else             paramScale=0;
            changeDecimal();
            boolean paramRigid=parent.Parameters.typeRigid.isSelected();
            boolean paramDecoupled=parent.Parameters.typeDecoupled.isSelected();
            boolean paramCoupled=parent.Parameters.typeCoupled.isSelected();
            graphDisp(paramRigid,paramDecoupled,paramCoupled);
            if (!paramRigid && !paramDecoupled && !paramCoupled) {
              parent.selectParameters();
              GUIUtils.popupError(""String_Node_Str"");
              return null;
            }
            Object[][] res=Utils.getDB().runQuery(""String_Node_Str"");
            if (res == null || res.length <= 1) {
              parent.selectSelectRecords();
              GUIUtils.popupError(""String_Node_Str"");
              return null;
            }
            xys=new XYSeries[res.length][3][2];
            dataVect=new ArrayList[3][3];
            String eq, record;
            DoubleList dat;
            double di;
            int num=0;
            double avg;
            double total[][]=new double[3][3];
            double scale=1, iscale, scaleRB;
            double inv, norm;
            double[][] ca;
            double[] ain=null;
            double thrust=0, uwgt=0, height=0, vs=0, damp=0, refstrain=0, vr=0;
            boolean dv3=false;
            scaleRB=paramUnit ? 1 : Analysis.CMtoIN;
            if (parent.Parameters.CAdisp.isSelected()) {
              String value;
              java.util.Vector caVect;
              TableCellEditor editor=null;
              editor=parent.Parameters.dispTable.getCellEditor();
              caVect=parent.Parameters.dispTableModel.getDataVector();
              if (editor != null)               editor.stopCellEditing();
              ca=new double[caVect.size()][2];
              for (int i=0; i < caVect.size(); i++) {
                for (int j=0; j < 2; j++) {
                  value=(String)(((java.util.Vector)(caVect.get(i))).get(j));
                  if (value == null || value == ""String_Node_Str"") {
                    parent.selectParameters();
                    GUIUtils.popupError(""String_Node_Str"");
                    return null;
                  }
                  d=(Double)Utils.checkNum(value,""String_Node_Str"",null,false,null,null,false,null,false);
                  if (d == null) {
                    parent.selectParameters();
                    return null;
                  }
                  ca[i][j]=d.doubleValue();
                }
              }
              if (caVect.size() == 0) {
                parent.selectParameters();
                GUIUtils.popupError(""String_Node_Str"");
                return null;
              }
            }
 else {
              d=(Double)Utils.checkNum(parent.Parameters.CAconstTF.getText(),""String_Node_Str"",null,false,null,new Double(0),true,null,false);
              if (d == null) {
                parent.selectParameters();
                return null;
              }
              ca=new double[1][2];
              ca[0][0]=0;
              ca[0][1]=d.doubleValue();
            }
            if (paramRigid && paramDualslope) {
              Double thrustD=(Double)Utils.checkNum(parent.Parameters.thrustAngle.getText(),""String_Node_Str"",new Double(90),true,null,new Double(0),true,null,false);
              if (thrustD == null) {
                parent.selectParameters();
                return null;
              }
 else               thrust=thrustD.doubleValue();
            }
            if (paramDecoupled || paramCoupled) {
              Double tempd;
              uwgt=100.0;
              tempd=(Double)Utils.checkNum(parent.Parameters.paramHeight.getText(),ParametersPanel.stringHeight + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               height=tempd.doubleValue();
              tempd=(Double)Utils.checkNum(parent.Parameters.paramVs.getText(),ParametersPanel.stringVs + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               vs=tempd.doubleValue();
              tempd=(Double)Utils.checkNum(parent.Parameters.paramVr.getText(),ParametersPanel.stringVr + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               vr=tempd.doubleValue();
              tempd=(Double)Utils.checkNum(parent.Parameters.paramDamp.getText(),ParametersPanel.stringDamp + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               damp=tempd.doubleValue() / 100.0;
              tempd=(Double)Utils.checkNum(parent.Parameters.paramRefStrain.getText(),ParametersPanel.stringRefStrain + ""String_Node_Str"",null,false,null,null,false,null,false);
              if (tempd == null) {
                parent.selectParameters();
                return null;
              }
 else               refstrain=tempd.doubleValue();
              dv3=parent.Parameters.paramSoilModel.getSelectedIndex() == 1;
              if (paramUnit) {
                uwgt/=Analysis.M3toCM3;
                height*=Analysis.MtoCM;
                vs*=Analysis.MtoCM;
                vr*=Analysis.MtoCM;
              }
 else {
                uwgt/=Analysis.FT3toIN3;
                height*=Analysis.FTtoIN;
                vs*=Analysis.FTtoIN;
                vr*=Analysis.FTtoIN;
              }
            }
            File testFile;
            String path;
            int num_analyses=0;
            if (paramRigid) {
              num_analyses++;
              dataVect[RB][NOR]=new ArrayList<Double>(res.length - 1);
              dataVect[RB][INV]=new ArrayList<Double>(res.length - 1);
              dataVect[RB][AVG]=new ArrayList<Double>(res.length - 1);
            }
            if (paramDecoupled) {
              num_analyses++;
              dataVect[DC][NOR]=new ArrayList<Double>(res.length - 1);
              dataVect[DC][INV]=new ArrayList<Double>(res.length - 1);
              dataVect[DC][AVG]=new ArrayList<Double>(res.length - 1);
            }
            if (paramCoupled) {
              num_analyses++;
              dataVect[CP][NOR]=new ArrayList<Double>(res.length - 1);
              dataVect[CP][INV]=new ArrayList<Double>(res.length - 1);
              dataVect[CP][AVG]=new ArrayList<Double>(res.length - 1);
            }
            iscale=-1.0 * scale;
            pm.setMaximum(res.length * 2 * num_analyses);
            pm.update(0,""String_Node_Str"");
            int j, k;
            Object[] row;
            int rowcount=0;
            resultVec=new java.util.Vector<ResultThread>(res.length * 2 * ANALYSIS_TYPES);
            NUM_CORES=Runtime.getRuntime().availableProcessors();
            pool=Executors.newFixedThreadPool(NUM_CORES);
            ResultThread rt;
            int row_idx;
            long startTime=System.currentTimeMillis();
            for (int i=1; i < res.length && !pm.isCanceled(); i++) {
              row=new Object[tableCols[dyn][LEN]];
              eq=res[i][0].toString();
              row_idx=i - 1;
              record=res[i][1].toString();
              row[0]=eq;
              row[1]=record;
              path=res[i][3].toString();
              testFile=new File(path);
              if (!testFile.exists() || !testFile.canRead()) {
                row[2]=""String_Node_Str"";
                row[3]=path;
                outputTableModel.addRow(row);
                rowcount++;
                continue;
              }
              dat=new DoubleList(path,0,parent.Parameters.scaleOn.isSelected() ? paramScale : 1.0);
              if (dat.bad()) {
                row[2]=""String_Node_Str"" + dat.badEntry();
                row[3]=path;
                outputTableModel.addRow(row);
                rowcount++;
                continue;
              }
              num++;
              di=Double.parseDouble(res[i][2].toString());
              if (parent.Parameters.scalePGA.isSelected()) {
                scale=paramScale / Double.parseDouble(res[i][4].toString());
                iscale=-scale;
              }
              ain=dat.getAsArray();
              if (paramRigid) {
                rt=new ResultThread(eq,record,row_idx,rowcount,RB,NOR,ain,di,ca,scale,paramDualslope,thrust,scaleRB,pm);
                pool.execute(rt);
                resultVec.add(rt);
                rt=new ResultThread(eq,record,row_idx,rowcount,RB,INV,ain,di,ca,iscale,paramDualslope,thrust,scaleRB,pm);
                pool.execute(rt);
                resultVec.add(rt);
              }
              if (paramDecoupled) {
                rt=new ResultThread(eq,record,row_idx,rowcount,DC,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
                rt=new ResultThread(eq,record,row_idx,rowcount,DC,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
              }
              if (paramCoupled) {
                rt=new ResultThread(eq,record,row_idx,rowcount,CP,NOR,ain,uwgt,height,vs,damp,refstrain,di,scale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
                rt=new ResultThread(eq,record,row_idx,rowcount,CP,INV,ain,uwgt,height,vs,damp,refstrain,di,iscale / Analysis.Gcmss,g,vr,ca,dv3,pm);
                pool.execute(rt);
                resultVec.add(rt);
              }
              outputTableModel.addRow(row);
              rowcount++;
            }
            pool.shutdown();
            while (!pool.awaitTermination(1,TimeUnit.SECONDS)) {
              if (pm.isCanceled()) {
                pool.shutdownNow();
                break;
              }
            }
            pm.update(""String_Node_Str"");
            ResultThread prt;
            int i_analysis;
            for (int i=0; i < resultVec.size(); i++) {
              rt=resultVec.get(i);
              if (!rt.finished())               continue;
              rt.graphData.setKey(rt.eq + ""String_Node_Str"" + rt.record+ ""String_Node_Str""+ ParametersPanel.stringRB+ ""String_Node_Str""+ polarityName[NOR]);
              xys[rt.idx][rt.analysis][rt.orientation]=rt.graphData;
              total[rt.analysis][rt.orientation]+=rt.result;
              i_analysis=1 + rt.analysis * 2;
              for (j=0; j < dataVect[rt.analysis][rt.orientation].size() && ((Double)dataVect[rt.analysis][rt.orientation].get(j)).doubleValue() < rt.result; j++)               ;
              dataVect[rt.analysis][rt.orientation].add(j,new Double(rt.result));
              outputTableModel.setValueAt(unitFmt.format(rt.result),rt.row,tableCols[dyn][i_analysis] + rt.orientation);
              if (rt.orientation == INV) {
                prt=resultVec.get(i - 1);
                avg=avg(rt.result,prt.result);
                total[rt.analysis][AVG]+=avg;
                for (j=0; j < dataVect[rt.analysis][AVG].size() && ((Double)dataVect[rt.analysis][AVG].get(j)).doubleValue() < avg; j++)                 ;
                dataVect[rt.analysis][AVG].add(j,new Double(avg));
                outputTableModel.setValueAt(unitFmt.format(avg),rt.row,tableCols[dyn][i_analysis] + AVG);
                if (dyn == WITH_DYN && (rt.analysis == DC || rt.analysis == CP)) {
                  outputTableModel.setValueAt(unitFmt.format(rt._kmax / g),rt.row,tableCols[dyn][I_DY] + 0);
                  outputTableModel.setValueAt(unitFmt.format(rt._vs),rt.row,tableCols[dyn][I_DY] + 1);
                  outputTableModel.setValueAt(unitFmt.format(rt._damp),rt.row,tableCols[dyn][I_DY] + 2);
                  outputTableModel.setValueAt(unitFmt.format(rt._dampf),rt.row,tableCols[dyn][I_DY] + 3);
                }
              }
            }
            if (!pm.isCanceled()) {
              double mean, value, valtemp;
              int idx;
              Object[] rmean=new Object[tableCols[dyn][LEN]];
              Object[] rmedian=new Object[tableCols[dyn][LEN]];
              Object[] rsd=new Object[tableCols[dyn][LEN]];
              rmean[1]=""String_Node_Str"";
              rmedian[1]=""String_Node_Str"";
              rsd[1]=""String_Node_Str"";
              for (j=0; j < total.length; j++) {
                for (k=0; k < total[j].length; k++) {
                  if (dataVect[j][k] == null || dataVect[j][k].size() == 0)                   continue;
                  idx=tableCols[dyn][1 + j * 2] + k;
                  mean=Double.parseDouble(unitFmt.format(total[j][k] / num));
                  rmean[idx]=unitFmt.format(mean);
                  if (num % 2 == 0) {
                    double fst=(Double)dataVect[j][k].get(num / 2);
                    double snd=(Double)dataVect[j][k].get(num / 2 - 1);
                    rmedian[idx]=unitFmt.format(avg(fst,snd));
                  }
 else                   rmedian[idx]=unitFmt.format(dataVect[j][k].get(num / 2));
                  value=0;
                  for (int i=0; i < num; i++) {
                    valtemp=mean - ((Double)dataVect[j][k].get(i)).doubleValue();
                    value+=(valtemp * valtemp);
                  }
                  value/=num;
                  value=Math.sqrt(value);
                  rsd[idx]=unitFmt.format(value);
                }
              }
              outputTableModel.addRow(new Object[0]);
              outputTableModel.addRow(rmean);
              outputTableModel.addRow(rmedian);
              outputTableModel.addRow(rsd);
            }
          }
 catch (          Throwable ex) {
            Utils.catchException(ex);
          }
          return null;
        }
        public void finished(){
          pm.dispose();
        }
      }
;
      worker.start();
    }
 else     if (command.equals(""String_Node_Str"")) {
      clearOutput();
    }
 else     if (command.equals(""String_Node_Str"")) {
      if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        FileWriter fw=new FileWriter(fc.getSelectedFile());
        String delim;
        if (outputDelSpace.isSelected())         delim=""String_Node_Str"";
 else         if (outputDelComma.isSelected())         delim=""String_Node_Str"";
 else         delim=""String_Node_Str"";
        int c=outputTableModel.getColumnCount();
        int r=outputTableModel.getRowCount();
        for (int i=0; i < c; i++) {
          if (i != 0)           fw.write(delim);
          fw.write(outputTableModel.getColumnName(i).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
        fw.write(""String_Node_Str"");
        Object o;
        for (int i=0; i < r; i++) {
          for (int j=0; j < c; j++) {
            if (j != 0)             fw.write(delim);
            o=outputTableModel.getValueAt(i,j);
            if (o == null)             o=""String_Node_Str"";
            fw.write(o.toString());
          }
          fw.write(""String_Node_Str"");
        }
        fw.close();
      }
    }
 else     if (command.equals(""String_Node_Str"")) {
      if (dataVect == null)       return;
      String name=""String_Node_Str"", title, pname;
      HistogramDataset dataset=new HistogramDataset();
      int polarity, analysis=-1;
      if (polarityAvgHist.isSelected())       polarity=AVG;
 else       if (polarityNorHist.isSelected())       polarity=NOR;
 else       if (polarityInvHist.isSelected())       polarity=INV;
 else       polarity=-1;
      for (int i=0; i < analysisHist.length; i++)       if (analysisHist[i].isSelected())       analysis=i;
      if (analysis == -1)       return;
      pname=polarityName[polarity];
      Double Bins=(Double)Utils.checkNum(outputBins.getText(),""String_Node_Str"",null,false,null,new Double(0),false,null,false);
      if (Bins == null || dataVect[analysis][polarity] == null)       return;
      name=analysisTitle[analysis];
      double series[]=new double[dataVect[analysis][polarity].size()];
      for (int j=0; j < dataVect[analysis][polarity].size(); j++)       series[j]=(((Double)dataVect[analysis][polarity].get(j)).doubleValue());
      dataset.addSeries(name,series,(int)Bins.doubleValue());
      title=""String_Node_Str"" + name + ""String_Node_Str""+ pname+ ""String_Node_Str"";
      JFreeChart hist=ChartFactory.createHistogram(title,""String_Node_Str"" + unitDisplacement,""String_Node_Str"",dataset,org.jfree.chart.plot.PlotOrientation.VERTICAL,false,true,false);
      ChartFrame frame=new ChartFrame(title,hist);
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);
    }
 else     if (command.equals(""String_Node_Str"")) {
      XYSeriesCollection xysc=new XYSeriesCollection();
      int polarity=polarityNorDisp.isSelected() ? NOR : INV;
      String pname=polarityName[polarity];
      String name=""String_Node_Str"";
      boolean first=true;
      for (int i=0; i < analysisDisp.length; i++) {
        if (analysisDisp[i].isSelected() && dataVect[i][polarity] != null) {
          if (first)           first=false;
 else           name+=""String_Node_Str"";
          name+=analysisTitle[i];
          for (int j=0; j < dataVect[i][polarity].size(); j++)           xysc.addSeries(xys[j][i][polarity]);
        }
      }
      if (first)       return;
      name+=""String_Node_Str"";
      JFreeChart chart=ChartFactory.createXYLineChart(name,""String_Node_Str"",""String_Node_Str"" + pname + ""String_Node_Str""+ unitDisplacement,xysc,org.jfree.chart.plot.PlotOrientation.VERTICAL,plotDisplacementLegend.isSelected(),true,false);
      chart.getXYPlot().getDomainAxis().setLowerMargin(0);
      chart.getXYPlot().getDomainAxis().setUpperMargin(0);
      chart.getXYPlot().getDomainAxis().setLowerBound(0);
      ChartFrame frame=new ChartFrame(name,chart);
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);
    }
  }
 catch (  Exception ex) {
    Utils.catchException(ex);
  }
}"
44880,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  File calFile=new File(cal_path);
  if (!calFile.exists()) {
    Intent starterIntent=new Intent(this,TSCalibration.class);
    startActivityForResult(starterIntent,0);
  }
  deleteFromPackageManger();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  File calFile=new File(cal_path);
  if (!calFile.exists()) {
    Intent starterIntent=new Intent(this,TSCalibration.class);
    startActivityForResult(starterIntent,0);
  }
 else {
    deleteFromPackageManger();
  }
}"
44881,"/** 
 * Persists RSS item to the database.
 * @param id item ID
 * @param folderId ID of containing folder
 * @param rssurl URL of RSS feed
 * @return long containing ID of inserted item
 * @throws Exception
 */
public long syncDb(long id,long folderId,String rssurl) throws Exception {
  mId=id;
  mFolderId=folderId;
  mRssUrl=rssurl;
  SAXParserFactory factory=SAXParserFactory.newInstance();
  SAXParser parser=factory.newSAXParser();
  XMLReader reader=parser.getXMLReader();
  reader.setContentHandler(this);
  reader.setErrorHandler(this);
  URL url=new URL(mRssUrl);
  URLConnection c=url.openConnection();
  c.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    BufferedReader bufReader=new BufferedReader(new InputStreamReader(c.getInputStream()),65535);
    reader.parse(new InputSource(bufReader));
  }
 catch (  NullPointerException e) {
    Log.e(TAG,Log.getStackTraceString(e));
    Log.e(TAG,""String_Node_Str"");
  }
  return mId;
}","/** 
 * Persists RSS item to the database.
 * @param id item ID
 * @param folderId ID of containing folder
 * @param rssurl URL of RSS feed
 * @return long containing ID of inserted item
 * @throws Exception
 */
public long syncDb(long id,long folderId,String rssurl) throws Exception {
  mId=id;
  mFolderId=folderId;
  mRssUrl=rssurl;
  SAXParserFactory factory=SAXParserFactory.newInstance();
  SAXParser parser=factory.newSAXParser();
  XMLReader reader=parser.getXMLReader();
  reader.setContentHandler(this);
  reader.setErrorHandler(this);
  URL url=new URL(mRssUrl);
  URLConnection c=url.openConnection();
  c.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    BufferedReader bufReader=new BufferedReader(new InputStreamReader(c.getInputStream()),65535);
    reader.parse(new InputSource(bufReader));
  }
 catch (  NullPointerException e) {
    Log.e(TAG,Log.getStackTraceString(e));
    Log.e(TAG,""String_Node_Str"" + url.toString());
  }
  return mId;
}"
44882,"/** 
 * {@inheritDoc}
 */
public void characters(char[] ch,int start,int length){
  if ((mId == -1) && (mState & STATE_IN_TITLE) != 0) {
    ContentValues values=new ContentValues();
    values.put(FeedDroid.Channels.TITLE,new String(ch,start,length));
    values.put(FeedDroid.Channels.URL,mRssUrl);
    values.put(FeedDroid.Channels.FOLDER_ID,mFolderId);
    Uri added=mResolver.insert(FeedDroid.Channels.CONTENT_URI,values);
    mId=Long.parseLong(added.getPathSegments().get(1));
    mState&=~STATE_IN_TITLE;
    return;
  }
  if ((mState & STATE_IN_ITEM) == 0)   return;
  StringBuilder str=new StringBuilder();
switch (mState) {
case STATE_IN_ITEM | STATE_IN_ITEM_TITLE:
    str.append(new String(ch,start,length).trim());
  if (mPostBuf.title == null)   mPostBuf.title=str.toString();
 else   mPostBuf.title+=str.toString();
break;
case STATE_IN_ITEM | STATE_IN_ITEM_DESC:
str.append(new String(ch,start,length).trim());
if (mPostBuf.desc == null) mPostBuf.desc=str.toString();
 else mPostBuf.desc+=str.toString();
break;
case STATE_IN_ITEM | STATE_IN_ITEM_LINK:
mPostBuf.link=new String(ch,start,length).trim();
break;
case STATE_IN_ITEM | STATE_IN_ITEM_DATE:
mPostBuf.setDate(new String(ch,start,length).trim());
break;
case STATE_IN_ITEM | STATE_IN_ITEM_AUTHOR:
mPostBuf.author=new String(ch,start,length).trim();
break;
default :
}
}","/** 
 * {@inheritDoc}
 */
public void characters(char[] ch,int start,int length){
  if ((mId == -1) && (mState & STATE_IN_TITLE) != 0) {
    ContentValues values=new ContentValues();
    values.put(FeedDroid.Channels.TITLE,new String(ch,start,length));
    values.put(FeedDroid.Channels.URL,mRssUrl);
    values.put(FeedDroid.Channels.FOLDER_ID,mFolderId);
    Uri added=mResolver.insert(FeedDroid.Channels.CONTENT_URI,values);
    mId=Long.parseLong(added.getPathSegments().get(1));
    mState&=~STATE_IN_TITLE;
    return;
  }
  if ((mState & STATE_IN_ITEM) == 0)   return;
  StringBuilder str=new StringBuilder();
switch (mState) {
case STATE_IN_ITEM | STATE_IN_ITEM_TITLE:
    str.append(new String(ch,start,length).trim());
  if (mPostBuf.title == null)   mPostBuf.title=str.toString();
 else   mPostBuf.title+=str.toString();
break;
case STATE_IN_ITEM | STATE_IN_ITEM_DESC:
str.append(new String(ch,start,length).trim());
if (mPostBuf.desc == null) mPostBuf.desc=str.toString();
 else mPostBuf.desc+=str.toString();
break;
case STATE_IN_ITEM | STATE_IN_ITEM_LINK:
mPostBuf.link=new String(ch,start,length).trim();
break;
case STATE_IN_ITEM | STATE_IN_ITEM_DATE:
mPostBuf.setDate(new String(ch,start,length).trim());
break;
case STATE_IN_ITEM | STATE_IN_ITEM_AUTHOR:
mPostBuf.author=new String(ch,start,length).trim();
if (mPostBuf.author == null) mPostBuf.author=""String_Node_Str"";
break;
default :
}
}"
44883,"/** 
 * {@inheritDoc}
 */
public void endElement(String uri,String name,String qName){
  Integer state=mStateMap.get(name);
  if (state != null) {
    mState&=~(state.intValue());
    if (state.intValue() == STATE_IN_ITEM) {
      if (mId == -1) {
        Log.d(TAG,""String_Node_Str"");
        return;
      }
      ContentValues values=new ContentValues();
      values.put(FeedDroid.Posts.CHANNEL_ID,mId);
      values.put(FeedDroid.Posts.TITLE,mPostBuf.title);
      values.put(FeedDroid.Posts.URL,mPostBuf.link);
      if (mPostBuf.author == null)       mPostBuf.author=""String_Node_Str"";
      values.put(FeedDroid.Posts.AUTHOR,mPostBuf.author);
      values.put(FeedDroid.Posts.DATE,mPostBuf.getDate());
      values.put(FeedDroid.Posts.BODY,reEncodeHtml(mPostBuf.desc));
      try {
        mResolver.insert(FeedDroid.Posts.CONTENT_URI,values);
      }
 catch (      SQLException e) {
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void endElement(String uri,String name,String qName){
  Integer state=mStateMap.get(name);
  if (state != null) {
    mState&=~(state.intValue());
    if (state.intValue() == STATE_IN_ITEM) {
      if (mId == -1) {
        Log.d(TAG,""String_Node_Str"");
        return;
      }
      ContentValues values=new ContentValues();
      values.put(FeedDroid.Posts.CHANNEL_ID,mId);
      values.put(FeedDroid.Posts.TITLE,mPostBuf.title);
      values.put(FeedDroid.Posts.URL,mPostBuf.link);
      values.put(FeedDroid.Posts.AUTHOR,mPostBuf.author);
      values.put(FeedDroid.Posts.DATE,mPostBuf.getDate());
      values.put(FeedDroid.Posts.BODY,reEncodeHtml(mPostBuf.desc));
      try {
        mResolver.insert(FeedDroid.Posts.CONTENT_URI,values);
      }
 catch (      SQLException e) {
      }
    }
  }
}"
44884,"/** 
 * Examines string and replaces XML-escaped HTML entities with their appropriate equivalents.
 * @param str String to examine
 * @return String with proper HTML elements
 */
private String reEncodeHtml(String str){
  StringBuilder builder=new StringBuilder();
  String[] sources=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] dests=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  builder.append(TextUtils.replace(str,sources,dests));
  return builder.toString();
}","/** 
 * Examines string and replaces XML-escaped HTML entities with their appropriate equivalents.
 * @param str String to examine
 * @return String with proper HTML elements
 */
private String reEncodeHtml(String str){
  StringBuilder builder=new StringBuilder();
  if (str == null)   return ""String_Node_Str"";
  String[] sources=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] dests=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  builder.append(TextUtils.replace(str,sources,dests));
  return builder.toString();
}"
44885,"/** 
 * @{inheritDoc }
 */
@Override public Uri insert(Uri url,ContentValues initialValues){
  long rowId;
  ContentValues values;
  if (initialValues != null)   values=new ContentValues(initialValues);
 else   values=new ContentValues();
  Uri uri;
switch (URL_MATCHER.match(url)) {
case CHANNELS:
    rowId=insertChannels(values);
  uri=ContentUris.withAppendedId(FeedDroid.Channels.CONTENT_URI,rowId);
break;
case POSTS:
rowId=insertPosts(values);
uri=ContentUris.withAppendedId(FeedDroid.Posts.CONTENT_URI,rowId);
break;
case FOLDERS:
rowId=insertFolders(values);
uri=ContentUris.withAppendedId(FeedDroid.Folders.CONTENT_URI,rowId);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + url);
}
if (rowId > 0) getContext().getContentResolver().notifyChange(uri,null);
 else Log.e(TAG,""String_Node_Str"" + values.getAsString(FeedDroid.Folders.NAME));
return uri;
}","/** 
 * @{inheritDoc }
 */
@Override public Uri insert(Uri url,ContentValues initialValues){
  long rowId;
  ContentValues values;
  if (initialValues != null)   values=new ContentValues(initialValues);
 else   values=new ContentValues();
  Uri uri;
switch (URL_MATCHER.match(url)) {
case CHANNELS:
    rowId=insertChannels(values);
  uri=ContentUris.withAppendedId(FeedDroid.Channels.CONTENT_URI,rowId);
break;
case POSTS:
rowId=insertPosts(values);
uri=ContentUris.withAppendedId(FeedDroid.Posts.CONTENT_URI,rowId);
break;
case FOLDERS:
rowId=insertFolders(values);
uri=ContentUris.withAppendedId(FeedDroid.Folders.CONTENT_URI,rowId);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + url);
}
if (rowId > 0) getContext().getContentResolver().notifyChange(uri,null);
return uri;
}"
44886,"/** 
 * Inserts post into the database.
 * @param values ContentValues containing post details
 * @return ID of new post
 */
private long insertPosts(ContentValues values){
  long id=-1;
  try {
    if (!checkForDuplicatePost(values.getAsString(""String_Node_Str"")))     mDb.insert(""String_Node_Str"",""String_Node_Str"",values);
  }
 catch (  SQLiteConstraintException e) {
  }
  return id;
}","/** 
 * Inserts post into the database.
 * @param values ContentValues containing post details
 * @return ID of new post
 */
private long insertPosts(ContentValues values){
  long id=-1;
  try {
    if (!checkForDuplicatePost(values.getAsString(""String_Node_Str"")))     mDb.insert(""String_Node_Str"",""String_Node_Str"",values);
  }
 catch (  SQLiteConstraintException e) {
    Log.d(TAG,""String_Node_Str"" + values.getAsString(""String_Node_Str""));
  }
  return id;
}"
44887,"/** 
 * Sends a notification of new RSS posts to the NotificationManager.
 */
private void sendNotification(){
  mNotificationMgr=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  int icon=R.drawable.rss_status_bar;
  String tickerTxt=getString(R.string.updates_available);
  String titleTxt=getString(R.string.app_name);
  Notification notification=new Notification(icon,tickerTxt,System.currentTimeMillis());
  notification.ledOffMS=0;
  notification.ledOnMS=1;
  notification.flags|=Notification.FLAG_SHOW_LIGHTS;
  notification.flags|=Notification.DEFAULT_SOUND;
  Intent appIntent=new Intent(getApplicationContext(),HomeScreenActivity.class);
  PendingIntent pending=PendingIntent.getActivity(getApplicationContext(),0,appIntent,0);
  notification.setLatestEventInfo(getApplicationContext(),titleTxt,tickerTxt,pending);
  mNotificationMgr.notify(1,notification);
  sendBroadcast(new Intent(FeedDroidWidget.FORCE_WIDGET_UPDATE));
}","/** 
 * Sends a notification of new RSS posts to the NotificationManager.
 */
private void sendNotification(){
  mNotificationMgr=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  int icon=R.drawable.rss_status_bar;
  String tickerTxt=getString(R.string.updates_available);
  String titleTxt=getString(R.string.app_name);
  Notification notification=new Notification(icon,tickerTxt,System.currentTimeMillis());
  notification.ledOffMS=0;
  notification.ledOnMS=1;
  notification.flags|=Notification.FLAG_SHOW_LIGHTS;
  notification.flags|=Notification.DEFAULT_SOUND;
  Intent appIntent=new Intent(getApplicationContext(),HomeScreenActivity.class);
  PendingIntent pending=PendingIntent.getActivity(getApplicationContext(),0,appIntent,0);
  notification.setLatestEventInfo(getApplicationContext(),titleTxt,tickerTxt,pending);
  mNotificationMgr.notify(1,notification);
}"
44888,"private boolean checkForDuplicatePost(String url){
  boolean dup=false;
  String[] projection={FeedDroid.Posts._ID};
  Cursor c=mDb.query(""String_Node_Str"",projection,""String_Node_Str"" + url,null,null,null,null);
  if (c.getCount() > 0)   dup=true;
  c.close();
  return dup;
}","private boolean checkForDuplicatePost(String url){
  boolean dup=false;
  String[] projection={FeedDroid.Posts._ID};
  Cursor c=mDb.query(""String_Node_Str"",projection,""String_Node_Str"" + url + ""String_Node_Str"",null,null,null,null);
  if (c.getCount() > 0)   dup=true;
  c.close();
  return dup;
}"
44889,"void doStart(Intent intent,int startId){
  Log.d(TAG,""String_Node_Str"");
  Cursor c=getContentResolver().query(FeedDroid.Channels.CONTENT_URI,new String[]{FeedDroid.Channels._ID,FeedDroid.Channels.URL},null,null,null);
  if (c.getCount() == 0) {
    c.close();
    return;
  }
  c.moveToFirst();
  do {
    long id=c.getLong(c.getColumnIndex(FeedDroid.Channels._ID));
    String url=c.getString(c.getColumnIndex(FeedDroid.Channels.URL));
    FeedDetails feed=new FeedDetails();
    feed.id=id;
    feed.url=url;
    new FeedUpdateTask().execute(feed);
  }
 while (c.moveToNext());
  c.close();
  if (mHasUpdates)   sendNotification();
  stopSelf();
}","void doStart(Intent intent,int startId){
  Log.d(TAG,""String_Node_Str"");
  Cursor c=getContentResolver().query(FeedDroid.Channels.CONTENT_URI,new String[]{FeedDroid.Channels._ID,FeedDroid.Channels.URL},null,null,null);
  if (c.getCount() == 0) {
    c.close();
    return;
  }
  c.moveToFirst();
  do {
    long id=c.getLong(c.getColumnIndex(FeedDroid.Channels._ID));
    String url=c.getString(c.getColumnIndex(FeedDroid.Channels.URL));
    parseChannelRss(id,url);
  }
 while (c.moveToNext());
  c.close();
  if (mHasUpdates)   sendNotification();
  stopSelf();
}"
44890,"public void updateAllChannels(){
  ArrayList<FeedDetails> feeds=new ArrayList<FeedDetails>();
  Cursor c=getContentResolver().query(FeedDroid.Channels.CONTENT_URI,new String[]{FeedDroid.Channels._ID,FeedDroid.Channels.URL},null,null,null);
  c.moveToFirst();
  do {
    long id=c.getLong(c.getColumnIndex(FeedDroid.Channels._ID));
    String url=c.getString(c.getColumnIndex(FeedDroid.Channels.URL));
    FeedDetails feed=new FeedDetails();
    feed.id=id;
    feed.url=url;
    feeds.add(feed);
  }
 while (c.moveToNext());
  c.close();
  new AllFeedsUpdateTask().execute(feeds);
}","public void updateAllChannels(){
  Cursor c=getContentResolver().query(FeedDroid.Channels.CONTENT_URI,new String[]{FeedDroid.Channels._ID,FeedDroid.Channels.URL},null,null,null);
  c.moveToFirst();
  do {
    long id=c.getLong(c.getColumnIndex(FeedDroid.Channels._ID));
    String url=c.getString(c.getColumnIndex(FeedDroid.Channels.URL));
    parseChannelRss(id,url);
  }
 while (c.moveToNext());
  c.close();
}"
44891,"public void updateChannel(long id,String url){
  FeedDetails feed=new FeedDetails();
  feed.id=id;
  feed.url=url;
  new FeedUpdateTask().execute(feed);
}","public void updateChannel(long id,String url){
  parseChannelRss(id,url);
}"
44892,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case REFRESH_ALL_ID:
    refreshAllChannels();
  return true;
case PREFS_ID:
Intent i=new Intent(this,PreferencesActivity.class);
startActivityForResult(i,SHOW_PREFERENCES);
return true;
case SEARCH_ID:
onSearchRequested();
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  Intent i;
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case REFRESH_ALL_ID:
    refreshAllChannels();
  return true;
case PREFS_ID:
i=new Intent(this,PreferencesActivity.class);
startActivityForResult(i,SHOW_PREFERENCES);
return true;
case SEARCH_ID:
Log.d(TAG,""String_Node_Str"");
onSearchRequested();
return true;
}
return super.onOptionsItemSelected(item);
}"
44893,"@Override public Void doInBackground(FeedDetails... params){
  FeedDetails feed=params[0];
  Cursor p=getContentResolver().query(FeedDroid.Posts.CONTENT_URI,new String[]{FeedDroid.Posts._ID},""String_Node_Str"" + feed.id,null,null);
  int oldPostCount=p.getCount();
  try {
    new RssParser(getContentResolver()).syncDb(feed.id,feed.url);
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",Log.getStackTraceString(e));
  }
  if (p.requery()) {
    int newPostCount=p.getCount();
    if (newPostCount > oldPostCount) {
      sendNotification();
    }
  }
  p.close();
  return null;
}","@Override public Void doInBackground(ArrayList<FeedDetails>... params){
  ArrayList<FeedDetails> feeds=params[0];
  for (  FeedDetails feed : feeds) {
    Cursor p=getContentResolver().query(FeedDroid.Posts.CONTENT_URI,new String[]{FeedDroid.Posts._ID},""String_Node_Str"" + feed.id,null,null);
    int oldPostCount=p.getCount();
    try {
      new RssParser(getContentResolver()).syncDb(feed.id,feed.url);
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",Log.getStackTraceString(e));
    }
    if (p.requery()) {
      int newPostCount=p.getCount();
      if (newPostCount > oldPostCount) {
        sendNotification();
      }
    }
    p.close();
  }
  return null;
}"
44894,"public void updateAllChannels(){
  Cursor c=getContentResolver().query(FeedDroid.Channels.CONTENT_URI,new String[]{FeedDroid.Channels._ID,FeedDroid.Channels.URL},null,null,null);
  c.moveToFirst();
  do {
    long id=c.getLong(c.getColumnIndex(FeedDroid.Channels._ID));
    String url=c.getString(c.getColumnIndex(FeedDroid.Channels.URL));
    FeedDetails feed=new FeedDetails();
    feed.id=id;
    feed.url=url;
    new FeedUpdateTask().execute(feed);
  }
 while (c.moveToNext());
  c.close();
}","public void updateAllChannels(){
  ArrayList<FeedDetails> feeds=new ArrayList<FeedDetails>();
  Cursor c=getContentResolver().query(FeedDroid.Channels.CONTENT_URI,new String[]{FeedDroid.Channels._ID,FeedDroid.Channels.URL},null,null,null);
  c.moveToFirst();
  do {
    long id=c.getLong(c.getColumnIndex(FeedDroid.Channels._ID));
    String url=c.getString(c.getColumnIndex(FeedDroid.Channels.URL));
    FeedDetails feed=new FeedDetails();
    feed.id=id;
    feed.url=url;
    feeds.add(feed);
  }
 while (c.moveToNext());
  c.close();
  new AllFeedsUpdateTask().execute(feeds);
}"
44895,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case SHOW_PREFERENCES:
    Log.d(TAG,""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + getIntent().getData());
Log.d(TAG,""String_Node_Str"" + getIntent().getAction());
mCursor=managedQuery(data.getData(),PROJECTION,null,null,null);
ListAdapter adapter=new ChannelListAdapter(this,mCursor);
setListAdapter(adapter);
boolean refreshAll=data.getBooleanExtra(""String_Node_Str"",false);
if (refreshAll) refreshAllChannels();
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null) {
switch (requestCode) {
case SHOW_PREFERENCES:
      Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + getIntent().getData());
  Log.d(TAG,""String_Node_Str"" + getIntent().getAction());
mCursor=managedQuery(data.getData(),PROJECTION,null,null,null);
ListAdapter adapter=new ChannelListAdapter(this,mCursor);
setListAdapter(adapter);
boolean refreshAll=data.getBooleanExtra(""String_Node_Str"",false);
if (refreshAll) refreshAllChannels();
break;
}
}
}"
44896,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.post_view);
  Uri uri=getIntent().getData();
  mCursor=managedQuery(uri,PROJECTION,null,null,null);
  if (mCursor == null || !mCursor.moveToFirst())   finish();
  mChannelId=mCursor.getLong(mCursor.getColumnIndex(FeedDroid.Posts.CHANNEL_ID));
  mPostId=Long.parseLong(uri.getPathSegments().get(1));
  initWithData();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.post_view);
  Uri uri=getIntent().getData();
  mCursor=managedQuery(uri,PROJECTION,null,null,null);
  if (mCursor == null || !mCursor.moveToFirst())   finish();
  mChannelId=mCursor.getLong(mCursor.getColumnIndex(FeedDroid.Posts.CHANNEL_ID));
  mPostId=Long.parseLong(uri.getPathSegments().get(1));
  mDetector=new GestureFilter(this,this);
  mDetector.setEnabled(true);
  mDetector.setMode(GestureFilter.MODE_DYNAMIC);
  mLibrary=GestureLibraries.fromRawResource(this,R.raw.gestures);
  if (!mLibrary.load()) {
    Log.e(TAG,""String_Node_Str"");
    finish();
  }
  initWithData();
}"
44897,"@Override public void onStart(){
  super.onStart();
  if (mCursor == null || !mCursor.moveToFirst())   return;
  ContentResolver resolver=getContentResolver();
}","@Override public void onStart(){
  super.onStart();
  if (mCursor == null || !mCursor.moveToFirst())   return;
  ContentResolver resolver=getContentResolver();
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",1);
  resolver.update(FeedDroid.Posts.CONTENT_URI,values,""String_Node_Str"",new String[]{Long.toString(mPostId)});
}"
44898,"public void initWithData(){
  ContentResolver resolver=getContentResolver();
  Cursor cChannel=resolver.query(ContentUris.withAppendedId(FeedDroid.Channels.CONTENT_URI,mChannelId),new String[]{FeedDroid.Channels.ICON,FeedDroid.Channels.LOGO,FeedDroid.Channels.TITLE},null,null,null);
  if (cChannel.getCount() != 1)   return;
  cChannel.moveToFirst();
  ChannelHeader head=(ChannelHeader)findViewById(R.id.postViewHead);
  head.setLogo(cChannel);
  cChannel.close();
  TextView postTitle=(TextView)findViewById(R.id.postTitle);
  postTitle.setText(mCursor.getString(mCursor.getColumnIndex(FeedDroid.Posts.TITLE)));
  WebView postText=(WebView)findViewById(R.id.postText);
  String html=""String_Node_Str"" + getBody() + ""String_Node_Str"";
  postText.loadData(html,""String_Node_Str"",""String_Node_Str"");
}","public void initWithData(){
  Log.d(TAG,""String_Node_Str"" + getBody());
  ContentResolver resolver=getContentResolver();
  Cursor cChannel=resolver.query(ContentUris.withAppendedId(FeedDroid.Channels.CONTENT_URI,mChannelId),new String[]{FeedDroid.Channels.ICON,FeedDroid.Channels.LOGO,FeedDroid.Channels.TITLE},null,null,null);
  if (cChannel.getCount() != 1)   return;
  cChannel.moveToFirst();
  ChannelHeader head=(ChannelHeader)findViewById(R.id.postViewHead);
  head.setLogo(cChannel);
  cChannel.close();
  TextView postTitle=(TextView)findViewById(R.id.postTitle);
  postTitle.setText(mCursor.getString(mCursor.getColumnIndex(FeedDroid.Posts.TITLE)));
  WebView postText=(WebView)findViewById(R.id.postText);
  String html=""String_Node_Str"" + getBody() + ""String_Node_Str"";
  postText.loadData(html,""String_Node_Str"",""String_Node_Str"");
}"
44899,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.channel_add);
  mUrl=(EditText)findViewById(R.id.url);
  Button add=(Button)findViewById(R.id.add);
  add.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      addChannel();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.channel_add);
  mUrl=(EditText)findViewById(R.id.url);
  Button add=(Button)findViewById(R.id.add);
  add.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      addChannel();
    }
  }
);
}"
44900,"@Override public void onClick(View v){
  addChannel();
}","public void onClick(View v){
  addChannel();
}"
44901,"@Override public void onClick(DialogInterface dialog,int which){
  dialog.cancel();
}","public void onClick(DialogInterface dialog,int which){
  dialog.cancel();
}"
44902,"private void removeChannel(final long channelId){
  Log.d(TAG,""String_Node_Str"" + channelId);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      ContentResolver resolver=getContentResolver();
      resolver.delete(FeedDroid.Posts.CONTENT_URI,""String_Node_Str"" + channelId,null);
      resolver.delete(FeedDroid.Channels.CONTENT_URI,""String_Node_Str"" + channelId,null);
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  builder.create().show();
}","private void removeChannel(final long channelId){
  Log.d(TAG,""String_Node_Str"" + channelId);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      ContentResolver resolver=getContentResolver();
      resolver.delete(FeedDroid.Posts.CONTENT_URI,""String_Node_Str"" + channelId,null);
      resolver.delete(FeedDroid.Channels.CONTENT_URI,""String_Node_Str"" + channelId,null);
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  builder.create().show();
}"
44903,"@Override public void onSwipe(int direction){
switch (direction) {
case GestureFilter.SWIPE_RIGHT:
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  break;
case GestureFilter.SWIPE_LEFT:
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
break;
}
}","public void onSwipe(int direction){
}"
44904,"@Override public void onDoubleTap(){
}","public void onDoubleTap(){
}"
44905,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.post_list);
  Uri uri=getIntent().getData();
  mCursor=managedQuery(uri,PROJECTION,null,null,null);
  startManagingCursor(mCursor);
  mId=Long.parseLong(uri.getPathSegments().get(1));
  ListAdapter adapter=new PostListAdapter(mCursor,this);
  setListAdapter(adapter);
  initWithData();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.post_list);
  Uri uri=getIntent().getData();
  mCursor=managedQuery(uri,PROJECTION,null,null,""String_Node_Str"");
  startManagingCursor(mCursor);
  mId=Long.parseLong(uri.getPathSegments().get(1));
  ListAdapter adapter=new PostListAdapter(mCursor,this);
  setListAdapter(adapter);
  initWithData();
}"
44906,"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
switch (KeyUtils.intrepretDirection(keyCode)) {
case KeyEvent.KEYCODE_DPAD_LEFT:
    getSiblings();
  return prevChannel();
case KeyEvent.KEYCODE_DPAD_RIGHT:
getSiblings();
return nextChannel();
case KeyEvent.KEYCODE_BACK:
finish();
}
return false;
}","@Override public boolean onKeyUp(int keyCode,KeyEvent event){
switch (KeyUtils.intrepretDirection(keyCode)) {
case KeyEvent.KEYCODE_DPAD_LEFT:
    getSiblings();
  return prevChannel();
case KeyEvent.KEYCODE_DPAD_RIGHT:
getSiblings();
return nextChannel();
}
return false;
}"
44907,"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if ((keyCode != KeyEvent.KEYCODE_DPAD_LEFT) && (keyCode != KeyEvent.KEYCODE_DPAD_RIGHT)) {
switch (KeyUtils.intrepretDirection(keyCode)) {
case KeyEvent.KEYCODE_DPAD_LEFT:
      getSiblings();
    return nextPost();
case KeyEvent.KEYCODE_DPAD_RIGHT:
  getSiblings();
return prevPost();
case KeyEvent.KEYCODE_BACK:
finish();
}
}
return false;
}","@Override public boolean onKeyUp(int keyCode,KeyEvent event){
switch (KeyUtils.intrepretDirection(keyCode)) {
case KeyEvent.KEYCODE_DPAD_LEFT:
    getSiblings();
  return nextPost();
case KeyEvent.KEYCODE_DPAD_RIGHT:
getSiblings();
return prevPost();
}
return false;
}"
44908,"private void initRemoteStubs(List<ClientMock> clients){
  List<Integer> unreachableClients=new ArrayList<Integer>();
  int i=0;
  for (  ClientMock client : clients) {
    if (client.getName().equals(this.username)) {
      this.cache.put(i,null);
      continue;
    }
 else {
      try {
        IClient clientStub=this.getStub(client);
        this.cache.put(i,clientStub);
      }
 catch (      Exception e) {
        unreachableClients.add(i);
      }
    }
  }
  while (!unreachableClients.isEmpty()) {
    Iterator<Integer> it=unreachableClients.iterator();
    while (it.hasNext()) {
      try {
        int idx=it.next();
        IClient stub=this.getStub(clients.get(idx));
        if (stub != null) {
          it.remove();
          this.cache.put(idx,stub);
        }
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"");
      }
    }
  }
}","private void initRemoteStubs(List<ClientMock> clients){
  List<Integer> unreachableClients=new ArrayList<Integer>();
  int i=0;
  for (  ClientMock client : clients) {
    if (client.getName().equals(this.username)) {
      this.cache.put(i++,null);
      continue;
    }
 else {
      try {
        IClient clientStub=this.getStub(client);
        this.cache.put(i,clientStub);
      }
 catch (      Exception e) {
        unreachableClients.add(i);
      }
    }
    i++;
  }
  while (!unreachableClients.isEmpty()) {
    Iterator<Integer> it=unreachableClients.iterator();
    while (it.hasNext()) {
      try {
        int idx=it.next();
        IClient stub=this.getStub(clients.get(idx));
        if (stub != null) {
          it.remove();
          this.cache.put(idx,stub);
        }
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"");
      }
    }
  }
}"
44909,"private void initPrevIndex(int numId){
switch (numId) {
case 0:
    this.setPrevIndex(this.client.getCache().size() - 1);
  break;
case 1:
this.setPrevIndex(0);
break;
case 2:
this.setPrevIndex(1);
break;
case 3:
this.setPrevIndex(2);
break;
}
}","private void initPrevIndex(int numId){
switch (numId) {
case 0:
    this.setPrevIndex(this.client.getClients().size() - 1);
  break;
case 1:
this.setPrevIndex(0);
break;
case 2:
this.setPrevIndex(1);
break;
case 3:
this.setPrevIndex(2);
break;
}
}"
44910,"private void refreshStub(int idx){
  try {
    this.client.getStub(this.client.getClients().get(idx));
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
}","private void refreshStub(int idx){
  try {
    IClient stub=this.client.getStub(this.client.getClients().get(idx));
    if (stub != null) {
      this.client.getCache().put(idx,stub);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
}"
44911,"public static void main(String[] args){
  if (args.length != 2) {
    System.exit(1);
  }
  try {
    String host=args[0];
    int port=Integer.parseInt(args[1]);
    IServer server=(IServer)Naming.lookup(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ Constants.REMOTE_SERVER_OBJECT_NAME);
    boolean registered=server.register(""String_Node_Str"",""String_Node_Str"");
    if (registered) {
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  if (args.length != 2) {
    System.exit(1);
  }
  try {
    String host=args[0];
    int port=Integer.parseInt(args[1]);
    IServer server=(IServer)Naming.lookup(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ Constants.REMOTE_SERVER_OBJECT_NAME);
    boolean registered=server.register(""String_Node_Str"",""String_Node_Str"");
    if (registered) {
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    boolean created=server.createGame(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"" + created);
    List<Game> games=server.fetchGames();
    System.out.println(""String_Node_Str"" + games.size());
    if (games.size() > 0) {
      System.out.println(games.get(0).getName());
      System.out.println(games.get(0).getHost());
    }
    boolean cancelGame=server.cancelGame(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"" + cancelGame);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
44912,"@Override public boolean cancelGame(String game,String name,String pass) throws RemoteException {
  return false;
}","@Override public boolean cancelGame(String game,String name,String pass) throws RemoteException {
  Game g=new Game(game,name,pass);
  return this.games.remove(g);
}"
44913,"@Override public List<Game> fetchGames() throws RemoteException {
  return null;
}","@Override public List<Game> fetchGames() throws RemoteException {
  return this.games;
}"
44914,"@Override public boolean unregister(String name,String pass) throws RemoteException {
  return false;
}","@Override public boolean unregister(String name,String pass) throws RemoteException {
  ClientMock mock=new ClientMock(name,pass);
  return this.clients.remove(mock);
}"
44915,"public static void main(String args[]){
  try {
    ReplicatedServer server=new ReplicatedServer();
    Thread console=new Thread(new ServerConsole(server));
    console.start();
    console.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","public static void main(String args[]){
  if (args == null || args.length != 1) {
    System.exit(1);
  }
  int port=Integer.parseInt(args[0]);
  ReplicatedServer server=new ReplicatedServer(port);
  Thread console=new Thread(new ServerConsole(server));
  console.start();
}"
44916,"private void startRMIRegistry(){
}","private void startRMIRegistry(int port){
  try {
    this.registry=LocateRegistry.createRegistry(port);
    this.proxy=ProxyFactory.createServerProxy(this);
    IServer stub=(IServer)UnicastRemoteObject.exportObject(proxy,0);
    this.registry.rebind(Constants.REMOTE_SERVER_OBJECT_NAME,stub);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}"
44917,"public ReplicatedServer(){
  try {
    IServer stub=(IServer)UnicastRemoteObject.exportObject(this,0);
    this.registry=LocateRegistry.createRegistry(1099);
    this.registry.rebind(Constants.REMOTE_SERVER_OBJECT_NAME,stub);
    System.out.println(""String_Node_Str"");
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}","public ReplicatedServer(int port){
  this.startRMIRegistry(port);
  this.games=new ArrayList<Game>();
  this.clients=new HashSet<ClientMock>();
}"
44918,"@Override public boolean createGame(String game,String name,String pass) throws RemoteException {
  return false;
}","@Override public boolean createGame(String game,String name,String pass) throws RemoteException {
  Game g=new Game(game,name,pass);
  return this.games.add(g);
}"
44919,"protected void shutdown(){
}","protected void shutdown(){
  try {
    UnicastRemoteObject.unexportObject(this.proxy,true);
    UnicastRemoteObject.unexportObject(this.registry,true);
  }
 catch (  NoSuchObjectException e) {
    e.printStackTrace();
  }
}"
44920,"@Override public boolean register(String name,String pass) throws RemoteException {
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ pass);
  return true;
}","@Override public boolean register(String name,String pass) throws RemoteException {
  ClientMock client=new ClientMock(name,pass);
  boolean add=this.clients.add(client);
  return add;
}"
44921,"private static void generatePrimes(int n,List<Integer> primes){
  if (n > 1) {
    generatePrimes(n - 1,primes);
    primes.add(cachedNextPrime(n,primes));
  }
 else {
    primes.add(2);
  }
}","private static void generatePrimes(int n,List<Integer> primes){
  if (n > 1) {
    generatePrimes(n - 1,primes);
    primes.add(nextPrime(n,primes));
  }
 else {
    primes.add(2);
  }
}"
44922,"public static boolean isPrime(Integer possiblePrime){
  List<Integer> primes=new ArrayList<Integer>(asList(2));
  for (int nextPrime=2; nextPrime <= possiblePrime; ) {
    nextPrime=cachedNextPrime(nextPrime,primes);
    primes.add(valueOf(nextPrime));
  }
  return primes.contains(possiblePrime);
}","public static boolean isPrime(Integer possiblePrime){
  List<Integer> primes=new ArrayList<Integer>(asList(2));
  for (int nextPrime=2; nextPrime <= possiblePrime; ) {
    nextPrime=nextPrime(nextPrime,primes);
    primes.add(valueOf(nextPrime));
  }
  return primes.contains(possiblePrime);
}"
44923,"@Override protected void initialiseSelection(){
  List<T> selectedItems=getSelectedItems();
  if (selectedItems != null && selectedItems.size() > 0) {
    selectedItems.retainAll(getItems());
    int[] indices=new int[selectedItems.size()];
    Iterator<T> iterator=selectedItems.iterator();
    int i=0;
    while (iterator.hasNext()) {
      indices[i]=getItems().indexOf(iterator.next());
      ++i;
    }
    getTableViewer().getTable().select(indices);
  }
}","@Override protected void initialiseSelection(){
  List<T> selectedItems=getSelectedItems();
  if (selectedItems != null && selectedItems.size() > 0) {
    selectedItems.retainAll(getItems());
    int[] indices=new int[selectedItems.size()];
    Iterator<T> iterator=selectedItems.iterator();
    int i=0;
    while (iterator.hasNext()) {
      indices[i]=indexOfItem(iterator.next());
      ++i;
    }
    getTableViewer().getTable().select(indices);
  }
}"
44924,"@Override protected void initialiseChecked(){
  List<T> checkedItems=getCheckedItems();
  if (checkedItems != null && checkedItems.size() > 0 && getTableViewer() instanceof ICheckable && ConfigurationUtils.isCheckSelectionInUse(getConfiguration())) {
    checkedItems.retainAll(getItems());
    Iterator<T> iterator=checkedItems.iterator();
    while (iterator.hasNext()) {
      ((ICheckable)getTableViewer()).setChecked(iterator.next(),true);
    }
  }
}","@Override protected void initialiseChecked(){
  List<T> checkedItems=getCheckedItems();
  if (checkedItems != null && checkedItems.size() > 0 && getTableViewer() instanceof ICheckable && ConfigurationUtils.isCheckSelectionInUse(getConfiguration())) {
    checkedItems.retainAll(getItems());
    Iterator<T> iterator=checkedItems.iterator();
    while (iterator.hasNext()) {
      ((ICheckable)getTableViewer()).setChecked(getItem(iterator.next()),true);
    }
  }
}"
44925,"@Override public final void setSelectedItems(List<T> checkedItems){
  if (getAdvancedListViewer() != null && isCheckSelectionInUse()) {
    getAdvancedListViewer().setCheckedItems(checkedItems);
  }
 else {
    super.setSelectedItems(checkedItems);
  }
}","@Override public final void setSelectedItems(List<T> selectedItems){
  if (getAdvancedListViewer() != null && isCheckSelectionInUse()) {
    getAdvancedListViewer().setCheckedItems(selectedItems);
  }
 else {
    super.setSelectedItems(selectedItems);
  }
}"
44926,"@Override protected void initialiseControl(Composite parent,ListViewerConfiguration listViewerConfiguration){
  super.initialiseControl(parent,listViewerConfiguration);
  if (getAdvancedListViewer() != null && isCheckSelectionInUse()) {
    getAdvancedListViewer().setCheckedItems(getAdvancedListViewer().getSelectedItems());
    getAdvancedListViewer().setSelectedItem(null);
  }
}","@Override protected void initialiseControl(Composite parent,ListViewerConfiguration listViewerConfiguration){
  super.initialiseControl(parent,listViewerConfiguration);
  if (getAdvancedListViewer() != null && isCheckSelectionInUse()) {
    getAdvancedListViewer().setCheckedItems(getAdvancedListViewer().getSelectedItems());
  }
}"
44927,"protected final SelectableMutableListViewer<T> createListViewer(Composite parent,ListViewerConfiguration listViewerConfiguration,List<T> items,List<T> selectedItems,IRunnableContext runnableContext){
  return createAdvancedListViewer(parent,listViewerConfiguration,items,selectedItems,runnableContext);
}","protected final SelectableMutableListViewer<T> createListViewer(Composite parent,ListViewerConfiguration listViewerConfiguration,List<T> items,List<T> selectedItems,IRunnableContext runnableContext){
  if (isCheckSelectionInUse())   return createAdvancedListViewer(parent,listViewerConfiguration,items,null,runnableContext);
 else   return createAdvancedListViewer(parent,listViewerConfiguration,items,selectedItems,runnableContext);
}"
44928,"@Override public final void setSelectedItem(T checkedItem){
  if (getAdvancedListViewer() != null && isCheckSelectionInUse()) {
    getAdvancedListViewer().setCheckedItem(checkedItem);
    updatePageComplete();
  }
 else {
    super.setSelectedItem(checkedItem);
  }
}","@Override public final void setSelectedItem(T selectedItem){
  if (getAdvancedListViewer() != null && isCheckSelectionInUse()) {
    getAdvancedListViewer().setCheckedItem(selectedItem);
    updatePageComplete();
  }
 else {
    super.setSelectedItem(selectedItem);
  }
}"
44929,"/** 
 * Spawns a slime creature
 */
private final void spewSlimeFrom(Dispenser d){
  Block t=getFacingBlock(d,2);
  if (isMaterialOpen(t.getType())) {
    t.getWorld().spawnCreature(t.getLocation(),CreatureType.SLIME);
    safeConsumeInventory(d,slimeType);
  }
 else {
    getServer().getLogger().info(""String_Node_Str"" + t.getType());
  }
}","/** 
 * Spawns a slime creature
 */
private final void spewSlimeFrom(Dispenser d){
  Block t=getFacingBlock(d,1);
  Location tl=getCenterLocation(t);
  if (isMaterialOpen(t.getType())) {
    tl.getWorld().spawnCreature(tl,CreatureType.SLIME);
    safeConsumeInventory(d,slimeType);
  }
 else {
    getServer().getLogger().info(""String_Node_Str"" + t.getType());
  }
}"
44930,"/** 
 * Spawns a boat entity
 */
private final void spewBoatFrom(Dispenser d){
  Block t0=getFacingBlock(d,1);
  Block t1=getFacingBlock(d,2);
  if (isMaterialOpen(t0.getType()) && isMaterialOpen(t1.getType())) {
    t1.getWorld().spawn(t1.getLocation(),Boat.class);
    safeConsumeInventory(d,boatType);
  }
 else {
    getServer().getLogger().info(""String_Node_Str"" + t1.getType());
  }
}","/** 
 * Spawns a boat entity
 */
private final void spewBoatFrom(Dispenser d){
  Block t0=getFacingBlock(d,1);
  Location tl=getCenterLocation(t0);
  if (isMaterialOpen(t0.getType())) {
    tl.getWorld().spawn(tl,Boat.class);
    safeConsumeInventory(d,boatType);
  }
 else {
    getServer().getLogger().info(""String_Node_Str"" + t0.getType());
  }
}"
44931,"/** 
 * Spawns a minecart entity
 */
private final void spewMinecartFrom(Dispenser d){
  Block t0=getFacingBlock(d,1);
  Block t1=getFacingBlock(d,2);
  if (isMaterialOpen(t0.getType()) && isMaterialOpen(t1.getType())) {
    t1.getWorld().spawn(t1.getLocation(),Minecart.class);
    safeConsumeInventory(d,cartType);
  }
 else {
    getServer().getLogger().info(""String_Node_Str"" + t1.getType());
  }
}","/** 
 * Spawns a minecart entity
 */
private final void spewMinecartFrom(Dispenser d){
  Block t0=getFacingBlock(d,1);
  Location tl=getCenterLocation(t0);
  if (isMaterialOpen(t0.getType())) {
    tl.getWorld().spawn(tl,Minecart.class);
    safeConsumeInventory(d,cartType);
  }
 else {
    getServer().getLogger().info(""String_Node_Str"" + t0.getType());
  }
}"
44932,"/** 
 * Gets the game name.
 * @param display Format the game name for the display.
 * @return The username if the game name is null, either formated or not.
 */
public String getGamename(boolean display){
  return gamename == null ? (display ? TextUtilities.formatGamename(username) : username) : (display ? TextUtilities.formatGamename(gamename) : gamename);
}","/** 
 * Gets the game name formatted into a long.
 * @return The game name in long format.
 */
public long getGamename(){
  return TextUtilities.stringToLong(gamename);
}"
44933,"/** 
 * Sets the password.
 * @param password 
 */
public void setPassword(String password){
  this.password=password;
}","/** 
 * Sets the password.
 * @param password The password string.
 */
public void setPassword(String password){
  this.password=password;
}"
44934,"/** 
 * @return 
 */
public String getPassword(){
  return password;
}","/** 
 * Gets the password.
 * @return The password.
 */
public String getPassword(boolean hashed){
  return hashed ? TextUtilities.hash(username) : password;
}"
44935,"/** 
 * @param obj
 * @return 
 */
@Override public boolean equals(Object obj){
  if (!(obj instanceof Credentials))   return false;
  return ((Credentials)obj).getUsername().equals(getUsername());
}","/** 
 * See if this credentials equals another.
 * @param obj The comparison object.
 * @return If the two objects are equal.
 */
@Override public boolean equals(Object obj){
  if (!(obj instanceof Credentials))   return false;
  return ((Credentials)obj).getUsername().equals(getUsername());
}"
44936,"/** 
 * @param passport
 * @return 
 */
public static ResponseCodes reconnectPlayer(Passport passport){
  Drone player=dronestorage.find(passport.getPlayer().getCredentials());
  if (player == null) {
    ResponseCodes code=registerPlayer(passport.getPlayer());
    if (code.equals(ResponseCodes.SUCCESS))     return ResponseCodes.RECONNECT;
    return code;
  }
  if (!(player instanceof Player)) {
    return ResponseCodes.FAILED;
  }
  if (!player.getCredentials().getPassword().equals(passport.getPlayer().getCredentials().getPassword()))   return ResponseCodes.INVALID_USER_PASS;
  ((Player)player).setPassport(passport);
  passport.setPlayer((Player)player);
  return ResponseCodes.RECONNECT;
}","/** 
 * @param passport
 * @return 
 */
public static ResponseCodes reconnectPlayer(Passport passport){
  Drone player=dronestorage.find(passport.getPlayer().getCredentials());
  if (player == null) {
    ResponseCodes code=registerPlayer(passport.getPlayer());
    if (code.equals(ResponseCodes.SUCCESS))     return ResponseCodes.RECONNECT;
    return code;
  }
  if (!(player instanceof Player)) {
    return ResponseCodes.FAILED;
  }
  if (!player.getCredentials().getPassword(true).equals(passport.getPlayer().getCredentials().getPassword(true)))   return ResponseCodes.INVALID_USER_PASS;
  ((Player)player).setPassport(passport);
  passport.setPlayer((Player)player);
  return ResponseCodes.RECONNECT;
}"
44937,"@Override public void onItemSelected(AdapterView<?> adapterView,View view,int i,long l){
  getMessageProvider().read(i);
  updateTitle();
}","@Override public void onItemSelected(AdapterView<?> adapterView,View view,int i,long l){
  SmsPojo sms=getMessageProvider().getMessageByOrdinal(i);
  getMessageProvider().read(sms);
  updateTitle();
}"
44938,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.view_message);
  dataBind();
  mGallery.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int i,    long l){
      getMessageProvider().read(i);
      updateTitle();
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
  ApplicationController app=(ApplicationController)this.getApplicationContext();
  app.attachNewSmsListener(new NewSmsEventListener(){
    @Override public void onNewSms(    NewSmsEvent newSmsEvent){
      Log.v(this.getClass().getSimpleName(),""String_Node_Str"");
      MessageProviderHelper.invalidCache();
      dataBind();
    }
  }
);
  Bundle b=getIntent().getExtras();
  long id=b.getLong(""String_Node_Str"",-1);
  int position=b.getInt(""String_Node_Str"",-1);
  if (id >= 0) {
    getMessageProvider().read(id);
    mGallery.setSelection(position,false);
    updateTitle();
  }
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.view_message);
  dataBind();
  mGallery.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int i,    long l){
      SmsPojo sms=getMessageProvider().getMessageByOrdinal(i);
      getMessageProvider().read(sms);
      updateTitle();
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
  ApplicationController app=(ApplicationController)this.getApplicationContext();
  app.attachNewSmsListener(new NewSmsEventListener(){
    @Override public void onNewSms(    NewSmsEvent newSmsEvent){
      Log.v(this.getClass().getSimpleName(),""String_Node_Str"");
      MessageProviderHelper.invalidCache();
      dataBind();
    }
  }
);
  Bundle b=getIntent().getExtras();
  long id=b.getLong(""String_Node_Str"",-1);
  int position=b.getInt(""String_Node_Str"",-1);
  if (id >= 0) {
    getMessageProvider().read(id);
    mGallery.setSelection(position,false);
    updateTitle();
  }
}"
44939,void read(long id);,void read(SmsPojo sms);
44940,"public void read(long id){
  SmsPojo smsPojo=get(id);
  if (smsPojo != null && !smsPojo.isRead()) {
    smsPojo.setRead(true);
    session.setAction(smsPojo,SmsAction.Read);
    unreadCount--;
  }
}","@Override public void read(SmsPojo sms){
  if (sms != null && !sms.isRead()) {
    sms.setRead(true);
    session.setAction(sms,SmsAction.Read);
    unreadCount--;
  }
}"
44941,"public void read(long id){
  SmsPojo smsPojo=get(id);
  if (smsPojo != null && !smsPojo.isRead()) {
    smsPojo.setRead(true);
    mUnreadCount--;
  }
}","@Override public void read(SmsPojo sms){
  if (sms != null && !sms.isRead()) {
    sms.setRead(true);
    mUnreadCount--;
  }
}"
44942,"public void read(long id){
  SmsPojo smsPojo=get(id);
  if (smsPojo != null && !smsPojo.isRead()) {
    smsPojo.setRead(true);
    mUnreadCount--;
  }
}","public void read(SmsPojo sms){
  if (sms != null && !sms.isRead()) {
    sms.setRead(true);
    mUnreadCount--;
  }
}"
44943,"private void deleteFirstMessage(){
  final IMessageProvider provider=MessageProviderHelper.getMessageProvider(this.getActivity().getContentResolver());
  mActivity.runOnUiThread(new Runnable(){
    public void run(){
      provider.delete(0);
      mAdapter.notifyDataSetChanged();
    }
  }
);
  getInstrumentation().waitForIdleSync();
}","private void deleteFirstMessage(){
  final IMessageProvider provider=MessageProviderHelper.getMessageProvider(this.getActivity(),this.getActivity(),this.getActivity().getContentResolver());
  mActivity.runOnUiThread(new Runnable(){
    public void run(){
      provider.delete(0);
      mAdapter.notifyDataSetChanged();
    }
  }
);
  getInstrumentation().waitForIdleSync();
}"
44944,"protected IMessageProvider getMessageProvider(){
  return MessageProviderHelper.getMessageProvider(this.getContentResolver());
}","protected IMessageProvider getMessageProvider(){
  return MessageProviderHelper.getMessageProvider(this,this.getContentResolver());
}"
44945,"protected IMessageProvider getMessageProvider(){
  return MessageProviderHelper.getMessageProvider(this.getContentResolver());
}","protected IMessageProvider getMessageProvider(){
  return MessageProviderHelper.getMessageProvider(this,this.getContentResolver());
}"
44946,"protected IMessageProvider getMessageProvider(){
  return MessageProviderHelper.getMessageProvider(this.getContentResolver());
}","protected IMessageProvider getMessageProvider(){
  return MessageProviderHelper.getMessageProvider(this,this.getContentResolver());
}"
44947,"public static IMessageProvider getMessageProvider(ContentResolver contentResolver){
  if (mProvider == null) {
    mProvider=new SmsMessageProvider(contentResolver);
  }
  return mProvider;
}","public static IMessageProvider getMessageProvider(Context context,ContentResolver contentResolver){
  if (mProvider == null) {
    mProvider=new SmsMessageProvider(context,contentResolver);
  }
  return mProvider;
}"
44948,"public SmsMessageEntry insertMessage(SmsMessage message){
  String senderText=message.getOriginatingAddress();
  SmsMessageSenderEntry sender=this.insertOrSelectSender(senderText);
  SmsMessageEntry res=new SmsMessageEntry(sender,message);
  this.contentResolver.insert(SenderContentProvider.CONTENT_URI,res.toContentValues());
  return res;
}","public SmsMessageEntry insertMessage(SmsMessage message){
  String senderText=message.getOriginatingAddress();
  SmsMessageSenderEntry sender=this.insertOrSelectSender(senderText);
  SmsMessageEntry res=new SmsMessageEntry(sender,message);
  this.contentResolver.insert(SmsContentProvider.CONTENT_URI,res.toContentValues());
  return res;
}"
44949,"protected SmsPojo[] ConvertMessages(Object[] pdusObj){
  SmsPojo[] messages=new SmsPojo[pdusObj.length];
  for (int i=0; i < pdusObj.length; i++) {
    SmsMessage msg=SmsMessage.createFromPdu((byte[])pdusObj[i]);
    SmsMessageEntry entry=daoMaster.insertMessage(msg);
    SmsPojo sms=new SmsPojo(daoMaster.getContentResolver(),entry);
    messages[i]=sms;
  }
  return messages;
}","protected SmsPojo[] ConvertMessages(Object[] pdusObj){
  SmsPojo[] messages=new SmsPojo[pdusObj.length];
  for (int i=0; i < pdusObj.length; i++) {
    SmsMessage msg=SmsMessage.createFromPdu((byte[])pdusObj[i]);
    SmsMessageEntry entry=daoMaster.insertMessage(msg);
    messages[i]=entry;
  }
  return messages;
}"
44950,"public void setSender(String sender) throws NotSupportedMethodException {
  throw new NotSupportedMethodException();
}","public void setSender(String sender){
}"
44951,"public List<SmsPojo> getSmsList(){
  List<SmsPojo> items=new ArrayList<SmsPojo>();
  Cursor cursor=contentResolver.query(SmsContentProvider.CONTENT_URI,null,null,null,null);
  try {
    int size=cursor.getCount();
    if (size == 0) {
      return items;
    }
    for (int i=0; i < size; i++) {
      cursor.move(i);
      SmsMessageEntry item=new SmsMessageEntry(cursor);
      items.add(item);
    }
  }
  finally {
    if (cursor != null && !cursor.isClosed()) {
      cursor.close();
    }
  }
  return items;
}","public List<SmsPojo> getSmsList(){
  List<SmsPojo> items=new ArrayList<SmsPojo>();
  Cursor cursor=contentResolver.query(SmsContentProvider.CONTENT_URI,null,null,null,null);
  try {
    int size=cursor.getCount();
    if (size == 0) {
      return items;
    }
    for (int i=0; i < size; i++) {
      cursor.moveToPosition(i);
      SmsMessageEntry item=new SmsMessageEntry(cursor);
      items.add(item);
    }
  }
  finally {
    if (cursor != null && !cursor.isClosed()) {
      cursor.close();
    }
  }
  return items;
}"
44952,"SmsMessageEntry(SmsMessageSenderEntry sender,SmsMessage message){
  this.senderId=sender.getId();
  this.message=message.getMessageBody();
  this.received=message.getTimestampMillis();
  this.read=false;
}","SmsMessageEntry(SmsMessageSenderEntry sender,SmsMessage message){
  this.senderId=sender.getId();
  this.sender=sender.getValue();
  this.message=message.getMessageBody();
  this.received=message.getTimestampMillis();
  this.read=false;
}"
44953,"public void read(int id){
  mList.get(id).setRead(true);
  mUnreadCount--;
}","public void read(int id){
  if (!mList.get(id).wasRead()) {
    mList.get(id).setRead(true);
    mUnreadCount--;
  }
}"
44954,"public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(ACTION)) {
    Bundle bundle=intent.getExtras();
    if (bundle != null) {
      Object[] pdusObj=(Object[])bundle.get(""String_Node_Str"");
      ContentResolver c=context.getContentResolver();
      SmsPojo[] messages=new SmsPojo[pdusObj.length];
      for (int i=0; i < pdusObj.length; i++) {
        SmsMessage msg=SmsMessage.createFromPdu((byte[])pdusObj[i]);
        SmsPojo sms=new SmsPojo(msg);
        messages[i]=sms;
      }
      try {
        int spamCount=new MessageProcessor().ProcessMessages(messages,c);
      }
 catch (      ApplicationException e) {
        e.printStackTrace();
      }
      NotificationManager notifier=(NotificationManager)context.getSystemService(Service.NOTIFICATION_SERVICE);
    }
  }
}","public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(ACTION)) {
    Bundle bundle=intent.getExtras();
    if (bundle != null) {
      Object[] pdusObj=(Object[])bundle.get(""String_Node_Str"");
      ContentResolver c=context.getContentResolver();
      SmsPojo[] messages=new SmsPojo[pdusObj.length];
      for (int i=0; i < pdusObj.length; i++) {
        SmsMessage msg=SmsMessage.createFromPdu((byte[])pdusObj[i]);
        SmsPojo sms=new SmsPojo(msg);
        messages[i]=sms;
      }
      int spamCount=new MessageProcessor().ProcessMessages(messages,c);
      NotificationManager notifier=(NotificationManager)context.getSystemService(Service.NOTIFICATION_SERVICE);
    }
  }
}"
44955,"public abstract Hashtable<Uri,ContentProvider> getTestContentProviders();","/** 
 * Prepares list of content providers and corresponding Uri's for context setup.
 * @return content providers and corresponding Uri's
 */
public abstract Hashtable<Uri,ContentProvider> getTestContentProviders();"
44956,"@Override public void setUp() throws Exception {
  super.setUp();
  Hashtable<Uri,ContentProvider> settings=getTestContentProviders();
  resolver=new MockContentResolver();
  final String filenamePrefix=""String_Node_Str"";
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(new ResourcefulMockContext(),getProperContext(),filenamePrefix);
  context=new IsolatedContext(resolver,targetContextWrapper);
  for (  Uri uri : settings.keySet()) {
    ContentProvider provider=settings.get(uri);
    provider.attachInfo(context,null);
    resolver.addProvider(uri.getAuthority(),provider);
  }
}","@Override public void setUp() throws Exception {
  super.setUp();
  Hashtable<Uri,ContentProvider> settings=getTestContentProviders();
  resolver=new MockContentResolver();
  final String filenamePrefix=""String_Node_Str"";
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(new ResourcefulMockContext(),getProperContext(),filenamePrefix);
  context=new IsolatedContext(resolver,targetContextWrapper);
  if (settings == null) {
    return;
  }
  for (  Uri uri : settings.keySet()) {
    ContentProvider provider=settings.get(uri);
    provider.attachInfo(context,null);
    resolver.addProvider(uri.getAuthority(),provider);
  }
}"
44957,"public static void addNewAccount(final String username,final String password){
  AccountStore.Account account=new AccountStore.Account(username);
  account.setPassword(password);
  accountStore.add(account);
  try {
    accountStore.save();
  }
 catch (  IOException ignored) {
  }
}","public static void addNewAccount(final String username,final String password){
  AccountStore.Account account=new AccountStore.Account(username);
  account.setPassword(password);
  accountStore.add(account);
  new Thread(){
    public void run(){
      try {
        accountStore.save();
      }
 catch (      IOException ignored) {
      }
    }
  }
.start();
}"
44958,"private void load(){
  scripts.clear();
  if (connected) {
    final List<ScriptDefinition> net=SRC_NETWORK.list();
    if (net != null) {
      scripts.addAll(net);
    }
  }
  scripts.addAll(SRC_PRECOMPILED.list());
  scripts.addAll(SRC_SOURCES.list());
  Collections.sort(scripts);
  final ArrayList<String> keywords=new ArrayList<String>(Category.values().length);
  for (  Category c : Category.values()) {
    String id=c.description().trim();
    if (id.length() > 0 && !keywords.contains(id)) {
      keywords.add(id);
    }
  }
  categories.populate(keywords,false);
  filter();
  table.revalidate();
}","private void load(){
  scripts.clear();
  if (connected) {
    final List<ScriptDefinition> net=SRC_NETWORK.list();
    if (net != null) {
      scripts.addAll(net);
    }
  }
  scripts.addAll(SRC_PRECOMPILED.list());
  scripts.addAll(SRC_SOURCES.list());
  Collections.sort(scripts);
  if (firstRun) {
    ArrayList<String> keywords=new ArrayList<String>(Category.values().length);
    for (    Category c : Category.values()) {
      String id=c.description().trim();
      if (id.length() > 0 && !keywords.contains(id)) {
        keywords.add(id);
      }
    }
    categories.populate(keywords,false);
    firstRun=false;
  }
  filter();
  table.revalidate();
}"
44959,"@Override public int compareTo(final ScriptDefinition def){
  final int c=getName().compareToIgnoreCase(def.getName());
  return c == 0 ? Double.compare(version,def.version) : c;
}","public int compareTo(final ScriptDefinition def){
  final int c=getName().compareToIgnoreCase(def.getName());
  return c == 0 ? Double.compare(version,def.version) : c;
}"
44960,"@Override public int loop(){
synchronized (lock) {
    if (!Web.loaded) {
      try {
        final BufferedReader br=new BufferedReader(new FileReader(Configuration.Paths.getWebDatabase()));
        String line;
        final List<GameTile> flagsArray=new ArrayList<GameTile>();
        while ((line=br.readLine()) != null) {
          final String[] d=line.split(""String_Node_Str"");
          if (d.length == 2) {
            final String[] tD=d[0].split(""String_Node_Str"");
            if (tD.length == 3) {
              try {
                final RSTile tile=new RSTile(Integer.parseInt(tD[0]),Integer.parseInt(tD[1]),Integer.parseInt(tD[2]));
                final GameTile gameTile=new GameTile(tile,Integer.parseInt(d[1]));
                if (flagsArray.contains(tile)) {
                  WebQueue.Remove(line);
                }
 else {
                  flagsArray.add(gameTile);
                }
              }
 catch (              final Exception e) {
              }
            }
 else {
              WebQueue.Remove(line);
            }
          }
 else {
            WebQueue.Remove(line);
          }
        }
        Web.map.addAll(flagsArray);
        Web.loaded=true;
      }
 catch (      final Exception e) {
        log(""String_Node_Str"");
      }
    }
    if (Web.loaded) {
      deactivate(getID());
    }
  }
  return -1;
}","@Override public int loop(){
synchronized (lock) {
    if (Web.loaded) {
      deactivate(getID());
    }
    if (!Web.loaded) {
      try {
        if (!new File(Configuration.Paths.getWebDatabase()).exists()) {
          Web.loaded=true;
          deactivate(getID());
          return -1;
        }
        final BufferedReader br=new BufferedReader(new FileReader(Configuration.Paths.getWebDatabase()));
        String line;
        final List<GameTile> flagsArray=new ArrayList<GameTile>();
        while ((line=br.readLine()) != null) {
          final String[] d=line.split(""String_Node_Str"");
          if (d.length == 2) {
            final String[] tD=d[0].split(""String_Node_Str"");
            if (tD.length == 3) {
              try {
                final RSTile tile=new RSTile(Integer.parseInt(tD[0]),Integer.parseInt(tD[1]),Integer.parseInt(tD[2]));
                final GameTile gameTile=new GameTile(tile,Integer.parseInt(d[1]));
                if (flagsArray.contains(tile)) {
                  WebQueue.Remove(line);
                }
 else {
                  flagsArray.add(gameTile);
                }
              }
 catch (              final Exception e) {
              }
            }
 else {
              WebQueue.Remove(line);
            }
          }
 else {
            WebQueue.Remove(line);
          }
        }
        Web.map.addAll(flagsArray);
        Web.loaded=true;
      }
 catch (      final Exception e) {
        log(""String_Node_Str"");
      }
    }
    if (Web.loaded) {
      deactivate(getID());
    }
  }
  return -1;
}"
44961,"public boolean cleanExit(final boolean silent){
  if (silent) {
    disableConfirmations=true;
  }
  if (!disableConfirmations) {
    disableConfirmations=true;
    for (    final Bot bot : bots) {
      if (bot.getAccountName() != null) {
        disableConfirmations=true;
        break;
      }
    }
  }
  boolean doExit=true;
  if (!disableConfirmations) {
    final String message=""String_Node_Str"";
    final int result=JOptionPane.showConfirmDialog(this,message,Messages.EXIT,JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result != JOptionPane.OK_OPTION) {
      doExit=false;
    }
  }
  WebQueue.Destroy();
  setVisible(false);
  Monitoring.pushState(Type.ENVIRONMENT,""String_Node_Str"",""String_Node_Str"",Boolean.toString(showAds));
  if (doExit) {
    menuBar.savePrefs();
    Monitoring.stop();
    System.exit(0);
  }
 else {
    setVisible(true);
  }
  return doExit;
}","public boolean cleanExit(final boolean silent){
  if (silent) {
    disableConfirmations=true;
  }
  if (!disableConfirmations) {
    disableConfirmations=true;
    for (    final Bot bot : bots) {
      if (bot.getAccountName() != null) {
        disableConfirmations=true;
        break;
      }
    }
  }
  boolean doExit=true;
  if (!disableConfirmations) {
    final String message=""String_Node_Str"";
    final int result=JOptionPane.showConfirmDialog(this,message,Messages.EXIT,JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result != JOptionPane.OK_OPTION) {
      doExit=false;
    }
  }
  try {
    WebQueue.Destroy();
  }
 catch (  NoClassDefFoundError ncdfe) {
  }
  setVisible(false);
  try {
    Monitoring.pushState(Type.ENVIRONMENT,""String_Node_Str"",""String_Node_Str"",Boolean.toString(showAds));
  }
 catch (  NoClassDefFoundError ncdfe) {
  }
  if (doExit) {
    menuBar.savePrefs();
    try {
      Monitoring.stop();
    }
 catch (    NoClassDefFoundError ncdfe) {
    }
    System.exit(0);
  }
 else {
    setVisible(true);
  }
  return doExit;
}"
44962,"public RSTile getNearestBank(final RSTile tile){
  double dist=-1.0D;
  RSTile finalTile=null;
  final RSTile[] BANKS={new RSTile(3093,3243,0),new RSTile(3209,3219,2),new RSTile(3270,3167,0),new RSTile(3253,3421,0),new RSTile(3188,3437,0),new RSTile(3094,3491,0),new RSTile(3097,3496,0),new RSTile(2946,3369,0),new RSTile(3012,3356,0)};
  for (  RSTile bank : BANKS) {
    double cdist=methods.calc.distanceBetween(tile,bank);
    if ((dist < cdist || dist == -1.0D) && (tile.getZ() == bank.getZ())) {
      dist=cdist;
      finalTile=bank;
    }
  }
  return finalTile;
}","public RSTile getNearestBank(final RSTile tile){
  double dist=-1.0D;
  RSTile finalTile=null;
  final RSTile[] BANKS={new RSTile(3093,3243,0),new RSTile(3209,3219,2),new RSTile(3270,3167,0),new RSTile(3253,3421,0),new RSTile(3188,3437,0),new RSTile(3094,3491,0),new RSTile(3097,3496,0),new RSTile(2946,3369,0),new RSTile(3012,3356,0)};
  for (  RSTile bank : BANKS) {
    double cdist=methods.calc.distanceBetween(tile,bank);
    if ((dist > cdist || dist == -1.0D) && (tile.getZ() == bank.getZ())) {
      dist=cdist;
      finalTile=bank;
    }
  }
  return finalTile;
}"
44963,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
44964,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
44965,"private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}","private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}"
44966,"private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}","private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}"
44967,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
44968,"private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}","private void init(){
  setLayout(new BorderLayout());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  bot.getScriptHandler().addScriptListener(ScriptSelector.this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
      dispose();
    }
  }
);
  table=new JTable(model);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
        final int row=table.rowAtPoint(e.getPoint());
        table.getSelectionModel().setSelectionInterval(row,row);
        showMenu(e);
      }
    }
    private void showMenu(    final MouseEvent e){
      final int row=table.rowAtPoint(e.getPoint());
      final ScriptDefinition def=model.getDefinition(row);
      final JPopupMenu contextMenu=new JPopupMenu();
      final JMenuItem visit=new JMenuItem();
      visit.setText(""String_Node_Str"");
      visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
      visit.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        final MouseEvent e){
          BotGUI.openURL(def.website);
        }
      }
);
      final JMenuItem start=new JMenuItem();
      start.setText(submit.getText());
      start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
      start.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          submit.doClick();
        }
      }
);
      start.setEnabled(submit.isEnabled());
      final JMenuItem delete=new JMenuItem();
      delete.setText(""String_Node_Str"");
      delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
      delete.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
          if (path != null && path.exists() && path.delete()) {
            log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
          }
 else {
            log.warning(""String_Node_Str"" + def.name);
          }
        }
      }
);
      if (def.website == null || def.website.isEmpty()) {
        visit.setEnabled(false);
      }
      contextMenu.add(start);
      contextMenu.add(visit);
      contextMenu.add(delete);
      contextMenu.show(table,e.getX(),e.getY());
    }
  }
);
  table.setRowHeight(20);
  table.setIntercellSpacing(new Dimension(1,1));
  table.setShowGrid(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
  setColumnWidths(table,30,175,50,100);
  final JToolBar toolBar=new JToolBar();
  toolBar.setMargin(new Insets(1,1,1,1));
  toolBar.setFloatable(false);
  search=new JTextField();
  final Color searchDefaultColor=search.getForeground(), searchAltColor=Color.GRAY;
  final String searchDefaultText=""String_Node_Str"";
  search.setText(searchDefaultText);
  search.setForeground(searchAltColor);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (search.getForeground() == searchAltColor) {
        search.setText(""String_Node_Str"");
        search.setForeground(searchDefaultColor);
      }
      table.clearSelection();
    }
    @Override public void focusLost(    final FocusEvent e){
      if (search.getText().isEmpty()) {
        search.setText(searchDefaultText);
        search.setForeground(searchAltColor);
      }
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    final KeyEvent e){
      model.search(search.getText());
      table.revalidate();
    }
  }
);
  submit=new JButton(""String_Node_Str"",new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  final JButton connect=new JButton(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CONNECT)));
  submit.setEnabled(false);
  submit.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent evt){
      final ScriptDefinition def=model.getDefinition(table.getSelectedRow());
      try {
        bot.setAccount((String)accounts.getSelectedItem());
        bot.getScriptHandler().runScript(def.source.load(def));
        bot.getScriptHandler().removeScriptListener(ScriptSelector.this);
        dispose();
      }
 catch (      final ServiceException e) {
        e.printStackTrace();
      }
    }
  }
);
  connect.setEnabled(GlobalConfiguration.SCRIPT_DRM ? true : false);
  if (connect.isEnabled()) {
    final ActionListener listenConnect=new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String icon=connected ? GlobalConfiguration.Paths.Resources.ICON_DISCONNECT : GlobalConfiguration.Paths.Resources.ICON_CONNECT;
        connect.setIcon(new ImageIcon(GlobalConfiguration.getImage(icon)));
        connect.repaint();
        connected=!connected;
        load();
      }
    }
;
    connect.addActionListener(listenConnect);
  }
  accounts=new JComboBox(AccountManager.getAccountNames());
  accounts.setMinimumSize(new Dimension(200,20));
  accounts.setPreferredSize(new Dimension(200,20));
  toolBar.add(search);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(accounts);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(connect);
  toolBar.add(Box.createHorizontalStrut(5));
  toolBar.add(submit);
  final JPanel center=new JPanel();
  center.setLayout(new BorderLayout());
  final JScrollPane pane=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  center.add(pane,BorderLayout.CENTER);
  add(center,BorderLayout.CENTER);
  add(toolBar,BorderLayout.SOUTH);
  setSize(750,400);
  setMinimumSize(getSize());
  setLocationRelativeTo(getParent());
  search.requestFocus();
}"
44969,"private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}","private void showMenu(final MouseEvent e){
  final int row=table.rowAtPoint(e.getPoint());
  final ScriptDefinition def=model.getDefinition(row);
  final JPopupMenu contextMenu=new JPopupMenu();
  final JMenuItem visit=new JMenuItem();
  visit.setText(""String_Node_Str"");
  visit.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_WEBLINK)));
  visit.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      BotGUI.openURL(def.website);
    }
  }
);
  final JMenuItem start=new JMenuItem();
  start.setText(submit.getText());
  start.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_PLAY)));
  start.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      submit.doClick();
    }
  }
);
  start.setEnabled(submit.isEnabled());
  final JMenuItem delete=new JMenuItem();
  delete.setText(""String_Node_Str"");
  delete.setIcon(new ImageIcon(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON_CLOSE)));
  delete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final File path=def.path == null || def.path.isEmpty() ? null : new File(def.path);
      if (path != null && path.exists() && path.delete()) {
        log.info(""String_Node_Str"" + def.name + ""String_Node_Str""+ def.path+ ""String_Node_Str"");
      }
 else {
        log.warning(""String_Node_Str"" + def.name);
      }
    }
  }
);
  if (def.website == null || def.website.isEmpty()) {
    visit.setEnabled(false);
  }
  contextMenu.add(start);
  contextMenu.add(visit);
  contextMenu.add(delete);
  contextMenu.show(table,e.getX(),e.getY());
}"
44970,"public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}","public ArrayList<String> getAllowedHosts(){
  final ArrayList<String> whitelist=new ArrayList<String>(32);
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  whitelist.add(""String_Node_Str"");
  return whitelist;
}"
44971,"public void actionPerformed(final ActionEvent evt){
  final String action=evt.getActionCommand();
  String menu, option;
  final int z=action.indexOf('.');
  if (z == -1) {
    menu=action;
    option=""String_Node_Str"";
  }
 else {
    menu=action.substring(0,z);
    option=action.substring(z + 1);
  }
  if (menu.equals(""String_Node_Str"")) {
    if (confirmRemoveBot()) {
      final int idx=Integer.parseInt(option);
      removeBot(bots.get(idx - botsIndex));
    }
  }
 else   if (menu.equals(Messages.FILE)) {
    if (option.equals(Messages.NEWBOT)) {
      addBot();
    }
 else     if (option.equals(Messages.CLOSEBOT)) {
      if (confirmRemoveBot()) {
        removeBot(getCurrentBot());
      }
    }
 else     if (option.equals(Messages.ADDSCRIPT)) {
      final String pretext=""String_Node_Str"";
      final String key=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",option,JOptionPane.QUESTION_MESSAGE,null,null,pretext);
      if (!(key == null || key.trim().isEmpty())) {
        ScriptDownloader.save(key);
      }
    }
 else     if (option.equals(Messages.RUNSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showScriptSelector(current);
      }
    }
 else     if (option.equals(Messages.SERVICEKEY)) {
      serviceKeyQuery(option);
    }
 else     if (option.equals(Messages.STOPSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showStopScript(current);
      }
    }
 else     if (option.equals(Messages.PAUSESCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        pauseScript(current);
      }
    }
 else     if (option.equals(Messages.SAVESCREENSHOT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        ScreenshotUtil.saveScreenshot(current,current.getMethodContext().game.isLoggedIn());
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      try {
        TrayManager.Hide();
      }
 catch (      AWTException ignored) {
        log.warning(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      cleanExit();
    }
  }
 else   if (menu.equals(Messages.EDIT)) {
    if (option.equals(""String_Node_Str"")) {
      AccountManager.getInstance().showGUI();
    }
 else     if (option.equals(""String_Node_Str"")) {
      showAds=!((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else     if (option.equals(""String_Node_Str"")) {
      Monitoring.setEnabled(!((JCheckBoxMenuItem)evt.getSource()).isSelected());
      if (!Monitoring.isEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      disableConfirmations=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else {
      final Bot current=getCurrentBot();
      if (current != null) {
        if (option.equals(""String_Node_Str"")) {
          final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
          current.overrideInput=selected;
          toolBar.setOverrideInput(selected);
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRendering=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableCanvas=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRandoms=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableAutoLogin=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
      }
    }
  }
 else   if (menu.equals(Messages.VIEW)) {
    final Bot current=getCurrentBot();
    final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    if (option.equals(""String_Node_Str"")) {
      toggleViewState(toolBar,selected);
    }
 else     if (option.equals(""String_Node_Str"")) {
      toggleViewState(textScroll,selected);
    }
 else     if (current != null) {
      if (option.equals(""String_Node_Str"")) {
        for (        final String key : BotMenuBar.DEBUG_MAP.keySet()) {
          final Class<?> el=BotMenuBar.DEBUG_MAP.get(key);
          final boolean wasSelected=menuBar.getCheckBox(key).isSelected();
          menuBar.getCheckBox(key).setSelected(selected);
          if (selected) {
            if (!wasSelected) {
              current.addListener(el);
            }
          }
 else {
            if (wasSelected) {
              current.removeListener(el);
            }
          }
        }
      }
 else {
        final Class<?> el=BotMenuBar.DEBUG_MAP.get(option);
        menuBar.getCheckBox(option).setSelected(selected);
        if (selected) {
          current.addListener(el);
        }
 else {
          menuBar.getCheckBox(""String_Node_Str"").setSelected(false);
          current.removeListener(el);
        }
      }
    }
  }
 else   if (menu.equals(Messages.HELP)) {
    if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.SITE);
    }
 else     if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.PROJECT);
    }
 else     if (option.equals(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(this,new String[]{""String_Node_Str"",""String_Node_Str"" + GlobalConfiguration.Paths.URLs.SITE + ""String_Node_Str""},""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot curr=getCurrentBot();
    menuBar.setBot(curr);
    panel.setBot(curr);
    panel.repaint();
    toolBar.setHome(curr == null);
    if (curr == null) {
      setTitle(null);
      toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      toolBar.setOverrideInput(false);
      toolBar.setInputState(Environment.INPUT_KEYBOARD | Environment.INPUT_MOUSE);
      toolBar.updateInputButton();
    }
 else {
      setTitle(curr.getAccountName());
      final Map<Integer,Script> scriptMap=curr.getScriptHandler().getRunningScripts();
      if (scriptMap.size() > 0) {
        if (scriptMap.values().iterator().next().isPaused()) {
          toolBar.setScriptButton(BotToolBar.RESUME_SCRIPT);
        }
 else {
          toolBar.setScriptButton(BotToolBar.PAUSE_SCRIPT);
        }
      }
 else {
        toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      }
      toolBar.setOverrideInput(curr.overrideInput);
      toolBar.setInputState(curr.inputFlags);
      toolBar.updateInputButton();
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    menuBar.doClick(Messages.SAVESCREENSHOT);
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      showScriptSelector(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"") || menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      pauseScript(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      final boolean override=!current.overrideInput;
      current.overrideInput=override;
      menuBar.setOverrideInput(override);
      toolBar.setOverrideInput(override);
      toolBar.updateInputButton();
    }
  }
}","public void actionPerformed(final ActionEvent evt){
  final String action=evt.getActionCommand();
  String menu, option;
  final int z=action.indexOf('.');
  if (z == -1) {
    menu=action;
    option=""String_Node_Str"";
  }
 else {
    menu=action.substring(0,z);
    option=action.substring(z + 1);
  }
  if (menu.equals(""String_Node_Str"")) {
    if (confirmRemoveBot()) {
      final int idx=Integer.parseInt(option);
      removeBot(bots.get(idx - botsIndex));
    }
  }
 else   if (menu.equals(Messages.FILE)) {
    if (option.equals(Messages.NEWBOT)) {
      addBot();
    }
 else     if (option.equals(Messages.CLOSEBOT)) {
      if (confirmRemoveBot()) {
        removeBot(getCurrentBot());
      }
    }
 else     if (option.equals(Messages.ADDSCRIPT)) {
      final String pretext=""String_Node_Str"";
      final String key=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",option,JOptionPane.QUESTION_MESSAGE,null,null,pretext);
      if (!(key == null || key.trim().isEmpty())) {
        ScriptDownloader.save(key);
      }
    }
 else     if (option.equals(Messages.RUNSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showScriptSelector(current);
      }
    }
 else     if (option.equals(Messages.SERVICEKEY)) {
      serviceKeyQuery(option);
    }
 else     if (option.equals(Messages.STOPSCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        showStopScript(current);
      }
    }
 else     if (option.equals(Messages.PAUSESCRIPT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        pauseScript(current);
      }
    }
 else     if (option.equals(Messages.SAVESCREENSHOT)) {
      final Bot current=getCurrentBot();
      if (current != null) {
        ScreenshotUtil.saveScreenshot(current,current.getMethodContext().game.isLoggedIn());
      }
    }
 else     if (option.equals(Messages.HIDEBOT)) {
      try {
        TrayManager.Hide();
      }
 catch (      AWTException ignored) {
        log.warning(""String_Node_Str"");
      }
    }
 else     if (option.equals(Messages.EXIT)) {
      cleanExit();
    }
  }
 else   if (menu.equals(Messages.EDIT)) {
    if (option.equals(""String_Node_Str"")) {
      AccountManager.getInstance().showGUI();
    }
 else     if (option.equals(""String_Node_Str"")) {
      showAds=!((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else     if (option.equals(""String_Node_Str"")) {
      Monitoring.setEnabled(!((JCheckBoxMenuItem)evt.getSource()).isSelected());
      if (!Monitoring.isEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      disableConfirmations=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    }
 else {
      final Bot current=getCurrentBot();
      if (current != null) {
        if (option.equals(""String_Node_Str"")) {
          final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
          current.overrideInput=selected;
          toolBar.setOverrideInput(selected);
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRendering=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableCanvas=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableRandoms=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
 else         if (option.equals(""String_Node_Str"")) {
          current.disableAutoLogin=((JCheckBoxMenuItem)evt.getSource()).isSelected();
        }
      }
    }
  }
 else   if (menu.equals(Messages.VIEW)) {
    final Bot current=getCurrentBot();
    final boolean selected=((JCheckBoxMenuItem)evt.getSource()).isSelected();
    if (option.equals(""String_Node_Str"")) {
      toggleViewState(toolBar,selected);
    }
 else     if (option.equals(""String_Node_Str"")) {
      toggleViewState(textScroll,selected);
    }
 else     if (current != null) {
      if (option.equals(""String_Node_Str"")) {
        for (        final String key : BotMenuBar.DEBUG_MAP.keySet()) {
          final Class<?> el=BotMenuBar.DEBUG_MAP.get(key);
          final boolean wasSelected=menuBar.getCheckBox(key).isSelected();
          menuBar.getCheckBox(key).setSelected(selected);
          if (selected) {
            if (!wasSelected) {
              current.addListener(el);
            }
          }
 else {
            if (wasSelected) {
              current.removeListener(el);
            }
          }
        }
      }
 else {
        final Class<?> el=BotMenuBar.DEBUG_MAP.get(option);
        menuBar.getCheckBox(option).setSelected(selected);
        if (selected) {
          current.addListener(el);
        }
 else {
          menuBar.getCheckBox(""String_Node_Str"").setSelected(false);
          current.removeListener(el);
        }
      }
    }
  }
 else   if (menu.equals(Messages.HELP)) {
    if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.SITE);
    }
 else     if (option.equals(""String_Node_Str"")) {
      openURL(GlobalConfiguration.Paths.URLs.PROJECT);
    }
 else     if (option.equals(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(this,new String[]{""String_Node_Str"",""String_Node_Str"" + GlobalConfiguration.Paths.URLs.SITE + ""String_Node_Str""},""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot curr=getCurrentBot();
    menuBar.setBot(curr);
    panel.setBot(curr);
    panel.repaint();
    toolBar.setHome(curr == null);
    if (curr == null) {
      setTitle(null);
      toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      toolBar.setOverrideInput(false);
      toolBar.setInputState(Environment.INPUT_KEYBOARD | Environment.INPUT_MOUSE);
      toolBar.updateInputButton();
    }
 else {
      setTitle(curr.getAccountName());
      final Map<Integer,Script> scriptMap=curr.getScriptHandler().getRunningScripts();
      if (scriptMap.size() > 0) {
        if (scriptMap.values().iterator().next().isPaused()) {
          toolBar.setScriptButton(BotToolBar.RESUME_SCRIPT);
        }
 else {
          toolBar.setScriptButton(BotToolBar.PAUSE_SCRIPT);
        }
      }
 else {
        toolBar.setScriptButton(BotToolBar.RUN_SCRIPT);
      }
      toolBar.setOverrideInput(curr.overrideInput);
      toolBar.setInputState(curr.inputFlags);
      toolBar.updateInputButton();
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    menuBar.doClick(Messages.SAVESCREENSHOT);
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      showScriptSelector(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"") || menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      pauseScript(current);
    }
  }
 else   if (menu.equals(""String_Node_Str"")) {
    final Bot current=getCurrentBot();
    if (current != null) {
      final boolean override=!current.overrideInput;
      current.overrideInput=override;
      menuBar.setOverrideInput(override);
      toolBar.setOverrideInput(override);
      toolBar.updateInputButton();
    }
  }
}"
44972,"private void constructItemIcons(){
  final HashMap<String,String> map=new HashMap<String,String>(16);
  map.put(Messages.NEWBOT,GlobalConfiguration.Paths.Resources.ICON_APPADD);
  map.put(Messages.CLOSEBOT,GlobalConfiguration.Paths.Resources.ICON_APPDELETE);
  map.put(Messages.SERVICEKEY,GlobalConfiguration.Paths.Resources.ICON_KEY);
  map.put(Messages.ADDSCRIPT,GlobalConfiguration.Paths.Resources.ICON_SCRIPT_ADD);
  map.put(Messages.RUNSCRIPT,GlobalConfiguration.Paths.Resources.ICON_PLAY);
  map.put(Messages.STOPSCRIPT,GlobalConfiguration.Paths.Resources.ICON_DELETE);
  map.put(Messages.PAUSESCRIPT,GlobalConfiguration.Paths.Resources.ICON_PAUSE);
  map.put(Messages.SAVESCREENSHOT,GlobalConfiguration.Paths.Resources.ICON_PHOTO);
  map.put(Messages.EXIT,GlobalConfiguration.Paths.Resources.ICON_CLOSE);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_REPORTKEY);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_WEBLINK);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_USEREDIT);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_INFO);
  for (  final Entry<String,String> item : map.entrySet()) {
    final JMenuItem menu=commandMenuItem.get(item.getKey());
    menu.setIcon(new ImageIcon(GlobalConfiguration.getImage(item.getValue())));
  }
}","private void constructItemIcons(){
  final HashMap<String,String> map=new HashMap<String,String>(16);
  map.put(Messages.NEWBOT,GlobalConfiguration.Paths.Resources.ICON_APPADD);
  map.put(Messages.CLOSEBOT,GlobalConfiguration.Paths.Resources.ICON_APPDELETE);
  map.put(Messages.SERVICEKEY,GlobalConfiguration.Paths.Resources.ICON_KEY);
  map.put(Messages.ADDSCRIPT,GlobalConfiguration.Paths.Resources.ICON_SCRIPT_ADD);
  map.put(Messages.RUNSCRIPT,GlobalConfiguration.Paths.Resources.ICON_PLAY);
  map.put(Messages.STOPSCRIPT,GlobalConfiguration.Paths.Resources.ICON_DELETE);
  map.put(Messages.PAUSESCRIPT,GlobalConfiguration.Paths.Resources.ICON_PAUSE);
  map.put(Messages.SAVESCREENSHOT,GlobalConfiguration.Paths.Resources.ICON_PHOTO);
  map.put(Messages.HIDEBOT,GlobalConfiguration.Paths.Resources.ICON_TRAY_DOWN);
  map.put(Messages.EXIT,GlobalConfiguration.Paths.Resources.ICON_CLOSE);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_REPORTKEY);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_WEBLINK);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_USEREDIT);
  map.put(""String_Node_Str"",GlobalConfiguration.Paths.Resources.ICON_INFO);
  for (  final Entry<String,String> item : map.entrySet()) {
    final JMenuItem menu=commandMenuItem.get(item.getKey());
    menu.setIcon(new ImageIcon(GlobalConfiguration.getImage(item.getValue())));
  }
}"
44973,"private void checkFilePath(String path,final boolean readOnly){
  path=new File(path).getAbsolutePath();
  if (isCallerScript()) {
    if (!path.startsWith(GlobalConfiguration.Paths.getScriptCacheDirectory())) {
      boolean fail=true;
      if (!GlobalConfiguration.RUNNING_FROM_JAR) {
        String check=new File(GlobalConfiguration.Paths.ROOT).getAbsolutePath();
        try {
          check=new File(check).getCanonicalPath();
        }
 catch (        final IOException ignored) {
        }
        fail=!path.startsWith(check);
      }
 else {
        final String check=new File(GlobalConfiguration.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getAbsolutePath();
        if (readOnly && path.equals(check)) {
          fail=false;
        }
      }
      for (      final String prefix : new String[]{GlobalConfiguration.Paths.getScreenshotsDirectory(),GlobalConfiguration.Paths.getScriptsDirectory(),GlobalConfiguration.Paths.getWebCache()}) {
        if (path.startsWith(prefix)) {
          fail=false;
          break;
        }
      }
      final String jre=System.getProperty(""String_Node_Str"");
      if (readOnly && jre != null && !jre.isEmpty() && path.startsWith(jre)) {
        fail=false;
      }
      if (GlobalConfiguration.getCurrentOperatingSystem() == OperatingSystem.WINDOWS) {
        final String sysroot=System.getenv(""String_Node_Str"");
        if (readOnly && sysroot != null & !sysroot.isEmpty() && path.startsWith(sysroot)) {
          fail=false;
        }
      }
      if (fail) {
        throw new SecurityException();
      }
    }
  }
  if (path.equalsIgnoreCase(new File(GlobalConfiguration.Paths.getAccountsFile()).getAbsolutePath())) {
    for (    final StackTraceElement s : Thread.currentThread().getStackTrace()) {
      final String name=s.getClassName();
      if (name.equals(AccountStore.class.getName())) {
        return;
      }
    }
    throw new SecurityException();
  }
}","private void checkFilePath(String path,final boolean readOnly){
  path=new File(path).getAbsolutePath();
  if (isCallerScript()) {
    if (!path.startsWith(GlobalConfiguration.Paths.getScriptCacheDirectory())) {
      boolean fail=true;
      if (!GlobalConfiguration.RUNNING_FROM_JAR) {
        String check=new File(GlobalConfiguration.Paths.ROOT).getAbsolutePath();
        try {
          check=new File(check).getCanonicalPath();
        }
 catch (        final IOException ignored) {
        }
        fail=!path.startsWith(check);
      }
 else {
        final String check=new File(GlobalConfiguration.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getAbsolutePath();
        if (readOnly && path.equals(check)) {
          fail=false;
        }
      }
      for (      final String prefix : new String[]{GlobalConfiguration.Paths.getScreenshotsDirectory(),GlobalConfiguration.Paths.getScriptsDirectory(),GlobalConfiguration.Paths.getWebDatabase()}) {
        if (path.startsWith(prefix)) {
          fail=false;
          break;
        }
      }
      final String jre=System.getProperty(""String_Node_Str"");
      if (readOnly && jre != null && !jre.isEmpty() && path.startsWith(jre)) {
        fail=false;
      }
      if (GlobalConfiguration.getCurrentOperatingSystem() == OperatingSystem.WINDOWS) {
        final String sysroot=System.getenv(""String_Node_Str"");
        if (readOnly && sysroot != null & !sysroot.isEmpty() && path.startsWith(sysroot)) {
          fail=false;
        }
      }
      if (fail) {
        throw new SecurityException();
      }
    }
  }
  if (path.equalsIgnoreCase(new File(GlobalConfiguration.Paths.getAccountsFile()).getAbsolutePath())) {
    for (    final StackTraceElement s : Thread.currentThread().getStackTrace()) {
      final String name=s.getClassName();
      if (name.equals(AccountStore.class.getName())) {
        return;
      }
    }
    throw new SecurityException();
  }
}"
44974,"private String downloadPage(final String url,final String referer){
  try {
    HttpURLConnection con=GlobalConfiguration.getHttpConnection(new URL(url));
    if (referer != null && !referer.isEmpty())     con.addRequestProperty(""String_Node_Str"",referer);
    final BufferedReader reader=new BufferedReader(new InputStreamReader(con.getInputStream()));
    final StringBuilder buf=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      buf.append(line);
    }
    reader.close();
    return buf.toString();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String downloadPage(final String url,final String referer){
  try {
    HttpURLConnection con=GlobalConfiguration.getHttpConnection(new URL(url));
    if (referer != null && !referer.isEmpty()) {
      con.addRequestProperty(""String_Node_Str"",referer);
    }
    final BufferedReader reader=new BufferedReader(new InputStreamReader(con.getInputStream()));
    final StringBuilder buf=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      buf.append(line);
    }
    reader.close();
    return buf.toString();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}"
44975,"public void init(URL script,File cache) throws IOException, ParseException {
  byte[] data=null;
  FileInputStream fis=null;
  try {
    HttpAgent.download(script,cache);
    fis=new FileInputStream(cache);
    data=load(fis);
  }
 catch (  IOException ioe) {
    log.severe(""String_Node_Str"");
  }
 finally {
    try {
      if (fis != null)       fis.close();
    }
 catch (    IOException ioe1) {
    }
  }
  this.script=new ModScript(data);
}","public void init(URL script,File cache) throws IOException, ParseException {
  byte[] data=null;
  FileInputStream fis=null;
  try {
    HttpAgent.download(script,cache);
    fis=new FileInputStream(cache);
    data=load(fis);
  }
 catch (  IOException ioe) {
    log.severe(""String_Node_Str"");
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    IOException ioe1) {
    }
  }
  this.script=new ModScript(data);
}"
44976,"@Override public int loop(){
  if (bank.isDepositOpen() || bank.isOpen()) {
    bank.close();
  }
  if (!activateCondition()) {
    return -1;
  }
  if (getMyPlayer().isMoving()) {
    return random(1000,2000);
  }
switch (getState()) {
case EXIT:
    RSObject portal=objects.getNearest(EXIT_PORTAL);
  if (portal != null) {
    if (!portal.isOnScreen()) {
      camera.turnTo(portal);
    }
    if (portal.doAction(""String_Node_Str"")) {
      return random(1000,1300);
    }
  }
break;
case OPEN_CHEST:
RSObject chest=objects.getNearest(ARNAV_CHEST);
if (chest != null) {
if (chest.doClick()) {
return random(1000,1300);
}
}
break;
case TALK:
if (interfaces.canContinue()) {
interfaces.clickContinue();
return random(1500,2000);
}
RSComponent okay=interfaces.getComponent(TALK_INTERFACE,3);
if (okay != null && okay.isValid()) {
okay.doClick();
}
return random(1500,2000);
case SOLVE:
RSInterface solver=interfaces.get(CHEST_INTERFACE_PARENT);
if (solver != null && solver.isValid()) {
String s=solver.getComponent(32).getText();
if (s.contains(""String_Node_Str"")) {
index=0;
}
 else if (s.contains(""String_Node_Str"")) {
index=1;
}
 else if (s.contains(""String_Node_Str"")) {
index=2;
}
 else if (s.contains(""String_Node_Str"")) {
index=3;
}
if (solved()) {
solver.getComponent(CHEST_INTERFACE_UNLOCK).doClick();
return random(600,900);
}
RSComponent container=solver.getComponent(CHEST_INTERFACE_CENTER);
for (int i=0; i < 3; i++) {
int rand=random(0,100);
if (rand < 50) {
rand=0;
}
 else if (rand >= 50) {
rand=1;
}
RSComponent target=solver.getComponent(INTERFACE_SOLVE_IDS[index][i]);
RSComponent arrow=solver.getComponent(ARROWS[i][rand]);
while (container.isValid() && target.isValid() && !container.getArea().contains(new Point(target.getCenter().x + 15,target.getCenter().y))&& arrow.isValid()&& new Timer(10000).isRunning()) {
arrow.doClick();
sleep(random(1000,1200));
}
}
}
}
return random(500,800);
}","@Override public int loop(){
  if (bank.isDepositOpen() || bank.isOpen()) {
    bank.close();
  }
  if (!activateCondition()) {
    return -1;
  }
  if (getMyPlayer().isMoving()) {
    return random(1000,2000);
  }
switch (getState()) {
case EXIT:
    RSObject portal=objects.getNearest(EXIT_PORTAL);
  if (portal != null) {
    if (!portal.isOnScreen()) {
      camera.turnTo(portal);
    }
    if (portal.doAction(""String_Node_Str"")) {
      return random(3000,3500);
    }
  }
break;
case OPEN_CHEST:
RSObject chest=objects.getNearest(ARNAV_CHEST);
if (chest != null) {
if (chest.doClick()) {
return random(1000,1300);
}
}
break;
case TALK:
if (interfaces.canContinue()) {
interfaces.clickContinue();
return random(1500,2000);
}
RSComponent okay=interfaces.getComponent(TALK_INTERFACE,3);
if (okay != null && okay.isValid()) {
okay.doClick();
}
return random(1500,2000);
case SOLVE:
RSInterface solver=interfaces.get(CHEST_INTERFACE_PARENT);
if (solver != null && solver.isValid()) {
String s=solver.getComponent(32).getText();
if (s.contains(""String_Node_Str"")) {
index=0;
}
 else if (s.contains(""String_Node_Str"")) {
index=1;
}
 else if (s.contains(""String_Node_Str"")) {
index=2;
}
 else if (s.contains(""String_Node_Str"")) {
index=3;
}
if (solved()) {
solver.getComponent(CHEST_INTERFACE_UNLOCK).doClick();
return random(600,900);
}
RSComponent container=solver.getComponent(CHEST_INTERFACE_CENTER);
for (int i=0; i < 3; i++) {
int rand=random(0,100);
if (rand < 50) {
rand=0;
}
 else if (rand >= 50) {
rand=1;
}
RSComponent target=solver.getComponent(INTERFACE_SOLVE_IDS[index][i]);
RSComponent arrow=solver.getComponent(ARROWS[i][rand]);
while (container.isValid() && target.isValid() && !container.getArea().contains(new Point(target.getCenter().x + 15,target.getCenter().y))&& arrow.isValid()&& new Timer(10000).isRunning()) {
arrow.doClick();
sleep(random(1000,1200));
}
}
}
}
return random(500,800);
}"
44977,"@Override public void onFinish(){
}","@Override public void onFinish(){
  step=-1;
  exit=false;
  reaper=null;
}"
44978,"@Override public int loop(){
  try {
    if (!activateCondition()) {
      talkedToHerald=false;
      frog=null;
      tries=0;
      return -1;
    }
    if (canContinue()) {
      if (!talkedToHerald) {
        final RSComponent heraldTalkComp=interfaces.getComponent(242,4);
        talkedToHerald=heraldTalkComp.isValid() && (heraldTalkComp.containsText(""String_Node_Str"") || heraldTalkComp.containsText(""String_Node_Str""));
      }
      if (!interfaces.clickContinue()) {
        interfaces.getComponent(65,6).doClick();
      }
      return random(600,800);
    }
    if (getMyPlayer().isMoving()) {
      return random(600,800);
    }
    if (!talkedToHerald) {
      final RSNPC herald=npcs.getNearest(""String_Node_Str"");
      if (calc.distanceTo(herald) < 5) {
        if (!calc.tileOnScreen(herald.getLocation())) {
          camera.turnTo(herald);
        }
        herald.doAction(""String_Node_Str"");
        return random(500,1000);
      }
 else {
        walking.walkTileMM(herald.getLocation());
        return random(500,700);
      }
    }
    if (frog == null) {
      frog=findFrog();
      if (frog != null) {
        log(""String_Node_Str"" + frog.getID());
      }
    }
    if (frog != null && frog.getLocation() != null && (!talkedToFrog || !canContinue())) {
      if (calc.distanceTo(frog) < 5) {
        if (!calc.tileOnScreen(frog.getLocation())) {
          camera.turnTo(frog);
        }
        if (frog.doAction(""String_Node_Str"")) {
          sleep(750,1250);
          talkedToFrog=canContinue();
        }
        return random(900,1000);
      }
 else {
        walking.walkTileMM(frog.getLocation());
        return random(500,700);
      }
    }
 else {
      tries++;
      if (tries > 200) {
        tries=0;
        talkedToHerald=false;
      }
      return random(200,400);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return random(200,400);
}","@Override public int loop(){
  try {
    if (!activateCondition()) {
      return -1;
    }
    if (canContinue()) {
      if (!talkedToHerald) {
        final RSComponent heraldTalkComp=interfaces.getComponent(242,4);
        talkedToHerald=heraldTalkComp.isValid() && (heraldTalkComp.containsText(""String_Node_Str"") || heraldTalkComp.containsText(""String_Node_Str""));
      }
      if (!interfaces.clickContinue()) {
        interfaces.getComponent(65,6).doClick();
      }
      return random(600,800);
    }
    if (getMyPlayer().isMoving()) {
      return random(600,800);
    }
    if (!talkedToHerald) {
      final RSNPC herald=npcs.getNearest(""String_Node_Str"");
      if (calc.distanceTo(herald) < 5) {
        if (!calc.tileOnScreen(herald.getLocation())) {
          camera.turnTo(herald);
        }
        herald.doAction(""String_Node_Str"");
        return random(500,1000);
      }
 else {
        walking.walkTileMM(herald.getLocation());
        return random(500,700);
      }
    }
    if (frog == null) {
      frog=findFrog();
      if (frog != null) {
        log(""String_Node_Str"" + frog.getID());
      }
    }
    if (frog != null && frog.getLocation() != null && (!talkedToFrog || !canContinue())) {
      if (calc.distanceTo(frog) < 5) {
        if (!calc.tileOnScreen(frog.getLocation())) {
          camera.turnTo(frog);
        }
        if (frog.doAction(""String_Node_Str"")) {
          sleep(750,1250);
          talkedToFrog=canContinue();
        }
        return random(900,1000);
      }
 else {
        walking.walkTileMM(frog.getLocation());
        return random(500,700);
      }
    }
 else {
      tries++;
      if (tries > 200) {
        tries=0;
        talkedToHerald=false;
      }
      return random(200,400);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return random(200,400);
}"
44979,"@Override public boolean activateCondition(){
  if ((settings.getSetting(696) != 0) && (objects.getNearest(12731) != null)) {
    tmpID=tmpStatus=-1;
    return true;
  }
  return false;
}","@Override public boolean activateCondition(){
  if ((settings.getSetting(696) != 0) && (objects.getNearest(12731) != null)) {
    return true;
  }
  return false;
}"
44980,"public static void Add(final HashMap<RSTile,TileFlags> theFlagsList){
  new Thread(){
    public void run(){
      String addedString=""String_Node_Str"";
      final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList);
      Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
      while (tileFlagsIterator.hasNext()) {
        TileFlags tileFlags=tileFlagsIterator.next().getValue();
        if (tileFlags != null) {
          addedString+=tileFlags.toString() + ""String_Node_Str"";
        }
      }
      Web.map.putAll(theFlagsList);
      cacheWriter.add(addedString);
      addedString=null;
    }
  }
.start();
}","public static void Add(final HashMap<RSTile,TileFlags> theFlagsList){
  new Thread(){
    public void run(){
      String addedString=""String_Node_Str"";
      final HashMap<RSTile,TileFlags> theFlagsList2=new HashMap<RSTile,TileFlags>();
      theFlagsList2.putAll(theFlagsList);
      final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList2);
      Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
      while (tileFlagsIterator.hasNext()) {
        TileFlags tileFlags=tileFlagsIterator.next().getValue();
        if (tileFlags != null) {
          addedString+=tileFlags.toString() + ""String_Node_Str"";
        }
      }
      Web.map.putAll(theFlagsList);
      cacheWriter.add(addedString);
      addedString=null;
      theFlagsList2.clear();
    }
  }
.start();
}"
44981,"public void run(){
  String addedString=""String_Node_Str"";
  final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList);
  Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next().getValue();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  Web.map.putAll(theFlagsList);
  cacheWriter.add(addedString);
  addedString=null;
}","public void run(){
  String addedString=""String_Node_Str"";
  final HashMap<RSTile,TileFlags> theFlagsList2=new HashMap<RSTile,TileFlags>();
  theFlagsList2.putAll(theFlagsList);
  final Map<RSTile,TileFlags> tl=Collections.unmodifiableMap(theFlagsList2);
  Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=tl.entrySet().iterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next().getValue();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  Web.map.putAll(theFlagsList);
  cacheWriter.add(addedString);
  addedString=null;
  theFlagsList2.clear();
}"
44982,"public void stopAllScripts(){
  for (  int i : scripts.keySet()) {
    stopScript(i);
  }
}","public void stopAllScripts(){
  Set<Integer> theSet=scripts.keySet();
  int[] arr=new int[theSet.size()];
  int c=0;
  for (  int i : theSet) {
    arr[c]=i;
    c++;
  }
  for (  int id : arr) {
    stopScript(id);
  }
}"
44983,"public int loop(){
  final RSTile curr_base=game.getMapBase();
  if (lb != null && lb.equals(curr_base)) {
    return -1;
  }
  sleep(5000);
  lb=curr_base;
  Node t;
  final int flags[][]=walking.getCollisionFlags(game.getPlane());
  for (int i=0; i < 104; i++) {
    for (int j=0; j < 104; j++) {
      RSTile start=new RSTile(curr_base.getX() + i,curr_base.getY() + j);
      int base_x=game.getBaseX(), base_y=game.getBaseY();
      int curr_x=start.getX() - base_x, curr_y=start.getY() - base_y;
      t=new Node(curr_x,curr_y);
      RSTile offset=walking.getCollisionOffset(game.getPlane());
      int off_x=offset.getX();
      int off_y=offset.getY();
      int x=t.x, y=t.y;
      int f_x=x - off_x, f_y=y - off_y;
      int here=flags[f_x][f_y];
      TileFlags tI=new TileFlags(start);
      if ((here & TileFlags.Flags.WALL_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_EAST);
      }
      if ((here & TileFlags.Flags.WALL_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_WEST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_WEST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_WEST);
      }
      if ((here & TileFlags.Flags.BLOCKED) != 0) {
        tI.addKey(TileFlags.Keys.BLOCKED);
      }
      if ((here & TileFlags.Flags.WATER) != 0) {
        tI.addKey(TileFlags.Keys.TILE_WATER);
      }
      if (!tI.isBlocked()) {
        tI.addKey(TileFlags.Keys.TILE_CLEAR);
      }
      if (!WebQueue.rs_map.containsKey(start) && f_y > 0 && f_x < 103) {
        WebQueue.rs_map.put(start,tI);
      }
 else {
        if (!WebQueue.rs_map.get(start).equals(tI)) {
          WebQueue.rs_map.remove(start);
        }
      }
    }
  }
  return -1;
}","public int loop(){
  final RSTile curr_base=game.getMapBase();
  if (lb != null && lb.equals(curr_base)) {
    return -1;
  }
  sleep(5000);
  lb=curr_base;
  Node t;
  log(""String_Node_Str"");
  final int flags[][]=walking.getCollisionFlags(game.getPlane());
  for (int i=0; i < 104; i++) {
    for (int j=0; j < 104; j++) {
      RSTile start=new RSTile(curr_base.getX() + i,curr_base.getY() + j);
      int base_x=game.getBaseX(), base_y=game.getBaseY();
      int curr_x=start.getX() - base_x, curr_y=start.getY() - base_y;
      t=new Node(curr_x,curr_y);
      RSTile offset=walking.getCollisionOffset(game.getPlane());
      int off_x=offset.getX();
      int off_y=offset.getY();
      int x=t.x, y=t.y;
      int f_x=x - off_x, f_y=y - off_y;
      int here=flags[f_x][f_y];
      TileFlags tI=new TileFlags(start);
      if ((here & TileFlags.Flags.WALL_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_EAST);
      }
      if ((here & TileFlags.Flags.WALL_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_WEST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_NORTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_NORTH_WEST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_EAST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_EAST);
      }
      if ((here & TileFlags.Flags.WALL_SOUTH_WEST) != 0) {
        tI.addKey(TileFlags.Keys.WALL_SOUTH_WEST);
      }
      if ((here & TileFlags.Flags.BLOCKED) != 0) {
        tI.addKey(TileFlags.Keys.BLOCKED);
      }
      if ((here & TileFlags.Flags.WATER) != 0) {
        tI.addKey(TileFlags.Keys.TILE_WATER);
      }
      if (!tI.isBlocked()) {
        tI.addKey(TileFlags.Keys.TILE_CLEAR);
      }
      if (!Web.map.containsKey(start) && f_y > 0 && f_x < 103) {
        rs_map.put(start,tI);
      }
 else {
        if (!Web.map.get(start).equals(tI)) {
          Web.map.remove(start);
        }
      }
    }
  }
  WebQueue.Add(rs_map);
  return -1;
}"
44984,"public static void Add(final List<TileFlags> tileFlagsList){
  String addedString=""String_Node_Str"";
  Iterator<TileFlags> tileFlagsIterator=tileFlagsList.listIterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  cacheWriter.add(addedString);
  Web.map.putAll(rs_map);
  rs_map.clear();
  addedString=null;
}","public static void Add(final HashMap<RSTile,TileFlags> theFlagsList){
  String addedString=""String_Node_Str"";
  Iterator<Map.Entry<RSTile,TileFlags>> tileFlagsIterator=theFlagsList.entrySet().iterator();
  while (tileFlagsIterator.hasNext()) {
    TileFlags tileFlags=tileFlagsIterator.next().getValue();
    if (tileFlags != null) {
      addedString+=tileFlags.toString() + ""String_Node_Str"";
    }
  }
  Web.map.putAll(theFlagsList);
  cacheWriter.add(addedString);
  addedString=null;
}"
44985,"public static void addHook(Hook hook){
  if (!isHookValid(hook.getHookName())) {
    hooks.put(hook.getHookName(),hook);
  }
}","public static void addHook(Hook hook){
  if (!isHookValid(hook.getHookName())) {
    Hooks.hooks.put(hook.getHookName(),hook);
  }
}"
44986,"private Field getHookField(String hookName){
  if (hookName == null || !isHookValid(hookName)) {
    return null;
  }
  Hook data=Hooks.hooks.get(hookName);
  if (data == null) {
    return null;
  }
  return getHookField(data.getClassName(),data.getFieldName());
}","private Field getHookField(String hookName){
  if (hookName == null || !isHookValid(hookName)) {
    return null;
  }
  Hook hook=Hooks.hooks.get(hookName);
  if (hook == null) {
    return null;
  }
  return getHookField(hook.getClassName(),hook.getFieldName());
}"
44987,"private boolean openBank(){
  try {
    if (!bank.isOpen()) {
      if (menu.isOpen()) {
        mouse.moveSlightly();
        sleep(random(40,60));
      }
      RSObject bankBooth=objects.getNearest(bank.BANK_BOOTHS);
      RSNPC banker=npcs.getNearest(bank.BANKERS);
      RSObject bankChest=objects.getNearest(bank.BANK_CHESTS);
      int dist=calc.distanceTo(bankBooth);
      if (banker != null && bankBooth != null && calc.distanceTo(banker) < dist) {
        if (calc.distanceBetween(banker.getLocation(),bankBooth.getLocation()) <= 1) {
          if (random(1,3) >= 2) {
            banker=null;
          }
 else {
            bankBooth=null;
          }
        }
 else {
          bankBooth=null;
        }
      }
      if (bankChest != null && calc.distanceTo(bankChest) < dist) {
        bankBooth=null;
        banker=null;
      }
      if (((bankBooth != null) && (calc.distanceTo(bankBooth) < 5) && calc.tileOnMap(bankBooth.getLocation())&& calc.canReach(bankBooth.getLocation(),true)) || ((banker != null) && (calc.distanceTo(banker) < 8) && calc.tileOnMap(banker.getLocation())&& calc.canReach(banker.getLocation(),true)) || ((bankChest != null) && (calc.distanceTo(bankChest) < 8) && calc.tileOnMap(bankChest.getLocation())&& calc.canReach(bankChest.getLocation(),true)&& !bank.isOpen())) {
        if (bankBooth != null) {
          Point loc=getLocation(bankBooth);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
 else         if (banker != null) {
          RSModel m=banker.getModel();
          if (m == null) {
            m=banker.getModel();
            if (m == null) {
              return false;
            }
          }
          Point loc=pointOnScreen(m);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(banker);
          }
        }
 else         if (bankChest != null) {
          Point loc=getLocation(bankChest);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str"") && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"") || doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
      }
 else {
        if (bankBooth != null) {
          walking.walkTo(bankBooth.getLocation());
        }
 else         if (banker != null) {
          walking.walkTo(banker.getLocation());
        }
 else         if (bankChest != null) {
          walking.walkTo(bankChest.getLocation());
        }
 else {
          return false;
        }
      }
    }
    return bank.isOpen();
  }
 catch (  Exception e) {
    return false;
  }
}","private boolean openBank(){
  try {
    if (!bank.isOpen()) {
      if (menu.isOpen()) {
        mouse.moveSlightly();
        sleep(random(40,60));
      }
      RSObject bankBooth=objects.getNearest(Bank.BANK_BOOTHS);
      RSNPC banker=npcs.getNearest(Bank.BANKERS);
      RSObject bankChest=objects.getNearest(Bank.BANK_CHESTS);
      int dist=calc.distanceTo(bankBooth);
      if (banker != null && bankBooth != null && calc.distanceTo(banker) < dist) {
        if (calc.distanceBetween(banker.getLocation(),bankBooth.getLocation()) <= 1) {
          if (random(1,3) >= 2) {
            banker=null;
          }
 else {
            bankBooth=null;
          }
        }
 else {
          bankBooth=null;
        }
      }
      if (bankChest != null && calc.distanceTo(bankChest) < dist) {
        bankBooth=null;
        banker=null;
      }
      if (((bankBooth != null) && (calc.distanceTo(bankBooth) < 5) && calc.tileOnMap(bankBooth.getLocation())&& calc.canReach(bankBooth.getLocation(),true)) || ((banker != null) && (calc.distanceTo(banker) < 8) && calc.tileOnMap(banker.getLocation())&& calc.canReach(banker.getLocation(),true)) || ((bankChest != null) && (calc.distanceTo(bankChest) < 8) && calc.tileOnMap(bankChest.getLocation())&& calc.canReach(bankChest.getLocation(),true)&& !bank.isOpen())) {
        if (bankBooth != null) {
          Point loc=getLocation(bankBooth);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
 else         if (banker != null) {
          RSModel m=banker.getModel();
          if (m == null) {
            m=banker.getModel();
            if (m == null) {
              return false;
            }
          }
          Point loc=pointOnScreen(m);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(banker);
          }
        }
 else         if (bankChest != null) {
          Point loc=getLocation(bankChest);
          for (int i=0; i < 10 && !menu.contains(""String_Node_Str"") && !menu.contains(""String_Node_Str""); i++) {
            mouseMove(loc);
            if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
              sleep(random(20,60));
              if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                sleep(random(20,60));
                if (menu.contains(""String_Node_Str"") || menu.contains(""String_Node_Str"")) {
                  break;
                }
              }
            }
          }
          if (doMenuAction(""String_Node_Str"") || doMenuAction(""String_Node_Str"")) {
            int count=0;
            while (!bank.isOpen() && ++count <= 10) {
              sleep(random(200,300));
              if (getMyPlayer().isMoving()) {
                count=0;
              }
            }
          }
 else {
            camera.turnTo(bankBooth);
          }
        }
      }
 else {
        if (bankBooth != null) {
          walking.walkTo(bankBooth.getLocation());
        }
 else         if (banker != null) {
          walking.walkTo(banker.getLocation());
        }
 else         if (bankChest != null) {
          walking.walkTo(bankChest.getLocation());
        }
 else {
          return false;
        }
      }
    }
    return bank.isOpen();
  }
 catch (  Exception e) {
    return false;
  }
}"
44988,"private Point[] genControls(Point start,Point end){
  int rand=random(1,8);
  ArrayList<Point> controls=new ArrayList<Point>();
  controls.add(start);
  if (random(1,2) == 1) {
    int x=random(0,game.getWidth());
    int y=random(0,game.getHeight());
    Point cp1=new Point(x,y);
    Point cp2=new Point(x,y);
    int loops=0;
    while (calc.distanceBetween(cp1,cp2) <= 200 && ((loops++) < 200)) {
      if (loops >= 200) {
        break;
      }
      x=random(0,game.getWidth() + 200);
      x=x - random(0,200);
      y=random(0,game.getHeight() + 200);
      y=y - random(0,200);
      cp2=new Point(x,y);
    }
    if (loops >= 200) {
      cp2=new Point(cp2.y,cp2.x);
    }
    if (random(1,2) == random(1,2)) {
      controls.add(cp1);
      controls.add(cp2);
    }
 else {
      controls.add(cp2);
      controls.add(cp1);
    }
    controls.add(end);
    return controls.toArray(new Point[controls.size()]);
  }
 else {
    Point[] controls2=genRelativeControls(start,end,4);
    return controls2;
  }
}","private Point[] genControls(Point start,Point end){
  random(1,8);
  ArrayList<Point> controls=new ArrayList<Point>();
  controls.add(start);
  if (random(1,2) == 1) {
    int x=random(0,game.getWidth());
    int y=random(0,game.getHeight());
    Point cp1=new Point(x,y);
    Point cp2=new Point(x,y);
    int loops=0;
    while (calc.distanceBetween(cp1,cp2) <= 200 && ((loops++) < 200)) {
      if (loops >= 200) {
        break;
      }
      x=random(0,game.getWidth() + 200);
      x=x - random(0,200);
      y=random(0,game.getHeight() + 200);
      y=y - random(0,200);
      cp2=new Point(x,y);
    }
    if (loops >= 200) {
      cp2=new Point(cp2.y,cp2.x);
    }
    if (random(1,2) == random(1,2)) {
      controls.add(cp1);
      controls.add(cp2);
    }
 else {
      controls.add(cp2);
      controls.add(cp1);
    }
    controls.add(end);
    return controls.toArray(new Point[controls.size()]);
  }
 else {
    Point[] controls2=genRelativeControls(start,end,4);
    return controls2;
  }
}"
44989,"@Override public boolean onStart(){
  log(""String_Node_Str"");
  sleep(100);
  if (!game.isLoggedIn() || game.isLoginScreen() || game.isWelcomeScreen()) {
    env.enableRandom(""String_Node_Str"");
  }
  Thread priceloader=new Thread(new PriceLoader());
  priceloader.start();
  createAndWaitforGUI();
  sleep(75);
  if (gui.isCanceled() == true) {
    return false;
  }
  final int pp=(int)gui.softenLocation();
switch (pp) {
case locVar.fally:
    loc=new Falador();
  break;
case locVar.edge:
loc=new Edgeville();
break;
default :
return false;
}
running=true;
inv=new InventoryListener();
invThread=new Thread(inv);
invThread.start();
while (priceloader.isAlive()) {
sleep(100);
}
if (softClayPrice == -1 || clayPrice == -1) {
log.severe(""String_Node_Str"");
return false;
}
 else {
if (nclicked == null || nmouse == null) {
log.severe(""String_Node_Str"");
log.severe(""String_Node_Str"");
return false;
}
log(""String_Node_Str"" + softClayPrice + ""String_Node_Str""+ clayPrice+ ""String_Node_Str"");
}
mouse.setSpeed(random(mouseLo,mouseHi));
mouseCheck=new MouseMovementChecker();
cameraCheck=new CameraMovementChecker();
Antiban=new antiban();
canAB=true;
lastMessageTyped=System.currentTimeMillis();
return true;
}","@Override public boolean onStart(){
  log(""String_Node_Str"");
  sleep(100);
  if (!game.isLoggedIn() || game.isLoginScreen() || game.isWelcomeScreen()) {
    env.enableRandom(""String_Node_Str"");
  }
  Thread priceloader=new Thread(new PriceLoader());
  priceloader.start();
  createAndWaitforGUI();
  sleep(75);
  if (gui.isCanceled() == true) {
    return false;
  }
  final int pp=(int)gui.softenLocation();
switch (pp) {
case locVar.fally:
    loc=new Falador();
  break;
case locVar.edge:
loc=new Edgeville();
break;
default :
return false;
}
running=true;
inv=new InventoryListener();
invThread=new Thread(inv);
invThread.start();
while (priceloader.isAlive()) {
sleep(100);
}
if (softClayPrice == -1 || clayPrice == -1) {
log.severe(""String_Node_Str"");
return false;
}
 else {
if (nclicked == null || nmouse == null) {
log.severe(""String_Node_Str"");
log.severe(""String_Node_Str"");
return false;
}
log(""String_Node_Str"" + softClayPrice + ""String_Node_Str""+ clayPrice+ ""String_Node_Str"");
}
mouse.setSpeed(random(mouseLo,mouseHi));
mouseCheck=new MouseMovementChecker();
cameraCheck=new CameraMovementChecker();
Antiban=new antiban();
canAB=true;
System.currentTimeMillis();
return true;
}"
44990,"private Point[] genRelativeControls(Point start,Point end,int numofcontrols){
  if (numofcontrols < 3 || numofcontrols > 4) {
    return null;
  }
  double dist=calc.distanceBetween(start,end);
  double angle=Math.atan2(end.y - start.y,end.x - start.x);
  ArrayList<Point> result=new ArrayList<Point>();
  result.add(start);
  int ctrlSpacing=random(70,80);
  for (int i=1; i < numofcontrols; i++) {
    ctrlSpacing=random(70,80);
    double radius=ctrlSpacing * i;
    Point cur=new Point((int)(start.x + radius * Math.cos(angle)),(int)(start.y + radius * Math.sin(angle)));
    double percent=1D - (double)(i - 1) / (double)numofcontrols;
    percent=percent > 0.5 ? percent - 0.5 : percent;
    percent+=0.25;
    int curVariance=(int)(random(115,130) * percent);
    cur.setLocation((int)(cur.y + curVariance * 2 * rand.nextDouble() - curVariance),(int)(cur.x + curVariance * 2 * rand.nextDouble() - curVariance));
    result.add(cur);
  }
  if (numofcontrols == 3) {
    result.add(result.get(result.size() - 1));
  }
  result.add(end);
  return result.toArray(new Point[result.size()]);
}","private Point[] genRelativeControls(Point start,Point end,int numofcontrols){
  if (numofcontrols < 3 || numofcontrols > 4) {
    return null;
  }
  calc.distanceBetween(start,end);
  double angle=Math.atan2(end.y - start.y,end.x - start.x);
  ArrayList<Point> result=new ArrayList<Point>();
  result.add(start);
  int ctrlSpacing=random(70,80);
  for (int i=1; i < numofcontrols; i++) {
    ctrlSpacing=random(70,80);
    double radius=ctrlSpacing * i;
    Point cur=new Point((int)(start.x + radius * Math.cos(angle)),(int)(start.y + radius * Math.sin(angle)));
    double percent=1D - (double)(i - 1) / (double)numofcontrols;
    percent=percent > 0.5 ? percent - 0.5 : percent;
    percent+=0.25;
    int curVariance=(int)(random(115,130) * percent);
    cur.setLocation((int)(cur.y + curVariance * 2 * rand.nextDouble() - curVariance),(int)(cur.x + curVariance * 2 * rand.nextDouble() - curVariance));
    result.add(cur);
  }
  if (numofcontrols == 3) {
    result.add(result.get(result.size() - 1));
  }
  result.add(end);
  return result.toArray(new Point[result.size()]);
}"
44991,"private void antiban(){
  int rand=random(1,6);
  if (rand <= 2 && !bank.isOpen()) {
    antibancamera();
  }
 else   if (rand >= 5) {
    antibanmouse();
  }
 else {
    if (random(1,3) >= random(1,3)) {
      antibanmouse();
    }
 else     if (!bank.isOpen()) {
      antibancamera();
    }
 else {
      antibanmouse();
    }
  }
}","public antiban(){
switch (numABThreads) {
case 0:
{
      break;
    }
case 1:
{
    new Thread(this).start();
    break;
  }
case 2:
{
  new Thread(this).start();
  new Thread(this).start();
  break;
}
case 3:
{
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
break;
}
case 4:
{
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
break;
}
case 5:
{
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
new Thread(this).start();
break;
}
default :
{
new Thread(this).start();
break;
}
}
}"
44992,"private boolean withdraw(final int itemID,final int count){
  if (count < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
  if (!bank.isOpen() || isPaused() || !isActive()|| !isRunning()) {
    return false;
  }
  final RSItem item=bank.getItem(itemID);
  if (item == null) {
    return false;
  }
  RSComponent comp=item.getComponent();
  if (comp == null) {
    return false;
  }
  while (comp.getRelativeX() == 0 && bank.getCurrentTab() != 0) {
    interfaces.getComponent(bank.INTERFACE_BANK,bank.INTERFACE_BANK_TAB[0]).doClick();
    sleep(random(600,1100));
  }
  if (!interfaces.scrollTo(comp,(bank.INTERFACE_BANK << 16) + bank.INTERFACE_BANK_SCROLLBAR)) {
    return false;
  }
  sleep(random(60,200));
  Rectangle area=comp.getArea();
  int randx=(int)random(area.getMinX(),area.getMaxX());
  int randy=(int)random(area.getMinY(),area.getMaxY());
  Point itemPoint=new Point(randx,randy);
  final int inventoryCount=inventory.getCount(true);
switch (count) {
case 0:
    mouseMove(itemPoint);
  doMenuAction(""String_Node_Str"");
break;
case 1:
mouseMove(itemPoint);
item.doClick(true);
break;
case 5:
case 10:
mouseMove(itemPoint);
doMenuAction(""String_Node_Str"" + count);
break;
default :
mouseMove(itemPoint);
sleep(random(100,500));
if (menu.contains(""String_Node_Str"" + count)) {
if (doMenuAction(""String_Node_Str"" + count)) {
sleep(random(100,200));
return true;
}
return false;
}
if (!area.contains(mouse.getLocation())) {
mouseMove(itemPoint);
}
if (doMenuAction(""String_Node_Str"")) {
sleep(random(1000,1300));
keyboard.sendText(Integer.toString(count),true);
}
sleep(random(100,200));
break;
}
return (inventory.getCount(true) > inventoryCount) || (inventory.getCount(true) == 28);
}","private boolean withdraw(final int itemID,final int count){
  if (count < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
  if (!bank.isOpen() || isPaused() || !isActive()|| !isRunning()) {
    return false;
  }
  final RSItem item=bank.getItem(itemID);
  if (item == null) {
    return false;
  }
  RSComponent comp=item.getComponent();
  if (comp == null) {
    return false;
  }
  while (comp.getRelativeX() == 0 && bank.getCurrentTab() != 0) {
    interfaces.getComponent(Bank.INTERFACE_BANK,Bank.INTERFACE_BANK_TAB[0]).doClick();
    sleep(random(600,1100));
  }
  if (!interfaces.scrollTo(comp,(Bank.INTERFACE_BANK << 16) + Bank.INTERFACE_BANK_SCROLLBAR)) {
    return false;
  }
  sleep(random(60,200));
  Rectangle area=comp.getArea();
  int randx=(int)random(area.getMinX(),area.getMaxX());
  int randy=(int)random(area.getMinY(),area.getMaxY());
  Point itemPoint=new Point(randx,randy);
  final int inventoryCount=inventory.getCount(true);
switch (count) {
case 0:
    mouseMove(itemPoint);
  doMenuAction(""String_Node_Str"");
break;
case 1:
mouseMove(itemPoint);
item.doClick(true);
break;
case 5:
case 10:
mouseMove(itemPoint);
doMenuAction(""String_Node_Str"" + count);
break;
default :
mouseMove(itemPoint);
sleep(random(100,500));
if (menu.contains(""String_Node_Str"" + count)) {
if (doMenuAction(""String_Node_Str"" + count)) {
sleep(random(100,200));
return true;
}
return false;
}
if (!area.contains(mouse.getLocation())) {
mouseMove(itemPoint);
}
if (doMenuAction(""String_Node_Str"")) {
sleep(random(1000,1300));
keyboard.sendText(Integer.toString(count),true);
}
sleep(random(100,200));
break;
}
return (inventory.getCount(true) > inventoryCount) || (inventory.getCount(true) == 28);
}"
44993,"public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}","@Override public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}"
44994,"public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}","@Override public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}"
44995,"public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}","@Override public boolean onStart(){
  try {
    final URL cursorURL=new URL(""String_Node_Str"");
    final URL cursor80URL=new URL(""String_Node_Str"");
    normal=ImageIO.read(cursorURL);
    clicked=ImageIO.read(cursor80URL);
  }
 catch (  MalformedURLException e) {
    log(""String_Node_Str"");
  }
catch (  IOException e) {
    log(""String_Node_Str"");
  }
  gui=new BloddyMasterFarmerGUI();
  gui.setVisible(true);
  while (guiWait) {
    sleep(100);
  }
  startTime=System.currentTimeMillis();
  startXP=skills.getCurrentExp(Skills.THIEVING);
  startLvl=skills.getCurrentLevel(Skills.THIEVING);
  mouse.setSpeed(6);
  camRotate.isActive=true;
  camRotate.start();
  camHeight.isActive=true;
  camHeight.start();
  log(""String_Node_Str"");
  return !guiExit;
}"
44996,"public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}","@Override public void onFinish(){
  mouse.moveOffScreen();
  camHeight.isActive=false;
  camRotate.isActive=false;
}"
44997,"public LoginDialog(Frame parent){
  super(parent,GlobalConfiguration.SITE_NAME + ""String_Node_Str"");
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  final Exception ignored) {
  }
  setIconImage(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON,GlobalConfiguration.Paths.ICON));
  masterPane=new JPanel();
  loginPane=new JPanel();
  usernameLabel=new JLabel();
  usernameField=new JTextField();
  passwordLabel=new JLabel();
  passwordField=new JPasswordField();
  registerLabel=new JLabel();
  loginButton=new JButton();
  infoPane=new JPanel();
  textPane=new JTextPane();
  setDefaultCloseOperation(JDialog.EXIT_ON_CLOSE);
  setResizable(false);
  setMinimumSize(new Dimension(250,200));
  setAlwaysOnTop(true);
  setLayout(new BorderLayout());
  masterPane.setMaximumSize(new Dimension(200,70));
  masterPane.setMinimumSize(new Dimension(200,70));
  masterPane.setPreferredSize(new Dimension(200,70));
  masterPane.setLayout(new BorderLayout());
  add(masterPane,BorderLayout.WEST);
  loginPane.setMaximumSize(new Dimension(170,70));
  loginPane.setMinimumSize(new Dimension(170,70));
  loginPane.setPreferredSize(new Dimension(170,70));
  loginPane.setLayout(new GridBagLayout());
  usernameLabel.setText(""String_Node_Str"");
  usernameLabel.setLabelFor(usernameField);
  usernameLabel.setHorizontalAlignment(11);
  loginPane.add(usernameLabel,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  usernameField.setColumns(12);
  loginPane.add(usernameField,new GridBagConstraints(1,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  passwordLabel.setText(""String_Node_Str"");
  passwordLabel.setLabelFor(passwordField);
  passwordLabel.setHorizontalAlignment(11);
  loginPane.add(passwordLabel,new GridBagConstraints(0,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  passwordField.setColumns(12);
  loginPane.add(passwordField,new GridBagConstraints(1,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  registerLabel.setText(""String_Node_Str"");
  registerLabel.setHorizontalTextPosition(0);
  registerLabel.setHorizontalAlignment(0);
  registerLabel.setForeground(Color.blue);
  registerLabel.setToolTipText(""String_Node_Str"");
  loginPane.add(registerLabel,new GridBagConstraints(0,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,5),0,0));
  loginButton.setText(""String_Node_Str"");
  loginPane.add(loginButton,new GridBagConstraints(1,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,0),0,0));
  masterPane.add(loginPane,BorderLayout.EAST);
  loginButton.setFocusable(false);
  infoPane.setMinimumSize(new Dimension(250,100));
  infoPane.setMaximumSize(new Dimension(250,200));
  infoPane.setPreferredSize(new Dimension(250,100));
  infoPane.setLayout(new GridBagLayout());
  add(infoPane,BorderLayout.EAST);
  textPane.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  textPane.setEditable(false);
  textPane.setMargin(new Insets(5,5,5,5));
  textPane.setPreferredSize(new Dimension(230,150));
  infoPane.add(textPane,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  loginButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      CREDENTIALS.username=usernameField.getText();
      CREDENTIALS.password=new String(passwordField.getPassword());
      LoginManager lM=new LoginManager();
      if (lM.valid()) {
        dispose();
      }
 else {
        CREDENTIALS.username=""String_Node_Str"";
        passwordField.setText(""String_Node_Str"");
        CREDENTIALS.password=""String_Node_Str"";
        displayMessage=lM.message();
      }
    }
  }
);
  passwordField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  registerLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      try {
        Process p=Runtime.getRuntime().exec(""String_Node_Str"");
      }
 catch (      Exception f) {
        f.printStackTrace();
      }
    }
  }
);
  pack();
}","public LoginDialog(Frame parent){
  super(parent,GlobalConfiguration.SITE_NAME + ""String_Node_Str"");
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  final Exception ignored) {
  }
  setIconImage(GlobalConfiguration.getImage(GlobalConfiguration.Paths.Resources.ICON,GlobalConfiguration.Paths.ICON));
  masterPane=new JPanel();
  loginPane=new JPanel();
  usernameLabel=new JLabel();
  usernameField=new JTextField();
  passwordLabel=new JLabel();
  passwordField=new JPasswordField();
  registerLabel=new JLabel();
  loginButton=new JButton();
  infoPane=new JPanel();
  textPane=new JTextPane();
  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  setResizable(false);
  setMinimumSize(new Dimension(250,200));
  setAlwaysOnTop(true);
  setLayout(new BorderLayout());
  masterPane.setMaximumSize(new Dimension(200,70));
  masterPane.setMinimumSize(new Dimension(200,70));
  masterPane.setPreferredSize(new Dimension(200,70));
  masterPane.setLayout(new BorderLayout());
  add(masterPane,BorderLayout.WEST);
  loginPane.setMaximumSize(new Dimension(170,70));
  loginPane.setMinimumSize(new Dimension(170,70));
  loginPane.setPreferredSize(new Dimension(170,70));
  loginPane.setLayout(new GridBagLayout());
  usernameLabel.setText(""String_Node_Str"");
  usernameLabel.setLabelFor(usernameField);
  usernameLabel.setHorizontalAlignment(11);
  loginPane.add(usernameLabel,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  usernameField.setColumns(12);
  loginPane.add(usernameField,new GridBagConstraints(1,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  passwordLabel.setText(""String_Node_Str"");
  passwordLabel.setLabelFor(passwordField);
  passwordLabel.setHorizontalAlignment(11);
  loginPane.add(passwordLabel,new GridBagConstraints(0,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,5),0,0));
  passwordField.setColumns(12);
  loginPane.add(passwordField,new GridBagConstraints(1,1,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  registerLabel.setText(""String_Node_Str"");
  registerLabel.setHorizontalTextPosition(0);
  registerLabel.setHorizontalAlignment(0);
  registerLabel.setForeground(Color.blue);
  registerLabel.setToolTipText(""String_Node_Str"");
  loginPane.add(registerLabel,new GridBagConstraints(0,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,5),0,0));
  loginButton.setText(""String_Node_Str"");
  loginPane.add(loginButton,new GridBagConstraints(1,2,1,1,0.0D,0.0D,10,1,new Insets(0,0,0,0),0,0));
  masterPane.add(loginPane,BorderLayout.EAST);
  loginButton.setFocusable(false);
  infoPane.setMinimumSize(new Dimension(250,100));
  infoPane.setMaximumSize(new Dimension(250,200));
  infoPane.setPreferredSize(new Dimension(250,100));
  infoPane.setLayout(new GridBagLayout());
  add(infoPane,BorderLayout.EAST);
  textPane.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  textPane.setEditable(false);
  textPane.setMargin(new Insets(5,5,5,5));
  textPane.setPreferredSize(new Dimension(230,150));
  infoPane.add(textPane,new GridBagConstraints(0,0,1,1,0.0D,0.0D,10,1,new Insets(0,0,5,0),0,0));
  loginButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      CREDENTIALS.username=usernameField.getText();
      CREDENTIALS.password=new String(passwordField.getPassword());
      LoginManager lM=new LoginManager();
      if (lM.valid()) {
        dispose();
      }
 else {
        CREDENTIALS.username=""String_Node_Str"";
        passwordField.setText(""String_Node_Str"");
        CREDENTIALS.password=""String_Node_Str"";
        displayMessage=lM.message();
      }
    }
  }
);
  passwordField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  registerLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      try {
        Process p=Runtime.getRuntime().exec(""String_Node_Str"");
      }
 catch (      Exception f) {
        f.printStackTrace();
      }
    }
  }
);
  pack();
}"
44998,"/** 
 * Generate the table of premade wolf names.
 */
private void initRandomNames(){
  try {
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(WolfManager.class.getResourceAsStream(""String_Node_Str"")));
    while (true) {
      String s1;
      if ((s1=bufferedReader.readLine()) == null) {
        break;
      }
      s1=s1.trim();
      if (s1.length() > 0) {
        wolfNames.add(s1);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (wolfNames.size() == 0) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    wolfNames.add(""String_Node_Str"");
  }
}","/** 
 * Generate the table of premade wolf names.
 */
private void initRandomNames(){
  try {
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(RandomNameUtil.class.getResourceAsStream(""String_Node_Str"")));
    while (true) {
      String s1;
      if ((s1=bufferedReader.readLine()) == null) {
        break;
      }
      s1=s1.trim();
      if (s1.length() > 0) {
        wolfNames.add(s1);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (wolfNames.size() == 0) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    wolfNames.add(""String_Node_Str"");
  }
}"
44999,"/** 
 * Generate a random name.
 * @return String
 */
public static String getRandomName(){
  Random random=new Random();
  return wolfNames.get(random.nextInt(wolfNames.size()));
}","/** 
 * Generate a random name.
 * @return String
 */
public static String getRandomName(){
  Random random=new Random();
  return wolfNames.get(random.nextInt(wolfNames.size() - 1));
}"
45000,"@Override public void onEnable(){
  pm=this.getServer().getPluginManager();
  pdfFile=this.getDescription();
  name=pdfFile.getName();
  version=pdfFile.getVersion();
  configManager.load();
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TAME,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,serverListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,serverListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  this.getCommand(""String_Node_Str"").setExecutor(new WolfCommandExecutor(this));
  log(Level.INFO,""String_Node_Str"" + version + ""String_Node_Str"");
  setupPermissions();
  setupDatabase();
}","@Override public void onEnable(){
  pm=this.getServer().getPluginManager();
  pdfFile=this.getDescription();
  name=pdfFile.getName();
  version=pdfFile.getVersion();
  configManager.load();
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TAME,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,serverListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,serverListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  this.getCommand(""String_Node_Str"").setExecutor(new WolfCommandExecutor(this));
  log(Level.INFO,""String_Node_Str"" + version + ""String_Node_Str"");
  setupPermissions();
  setupDatabase();
  wolfManager.load();
  wolfInventoryManager.load();
}"
