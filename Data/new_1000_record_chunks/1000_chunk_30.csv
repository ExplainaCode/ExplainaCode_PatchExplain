record_number,buggy_code,fixed_code
29001,"protected StatelessSessionContainer(ContainerType conType,EjbDescriptor desc,ClassLoader loader) throws Exception {
  super(conType,desc,loader);
  try {
    if (hasLocalHomeView) {
      localHomeCreateMethod=localHomeIntf.getMethod(""String_Node_Str"",NO_PARAMS);
    }
    if (hasRemoteHomeView) {
      homeCreateMethod=homeIntf.getMethod(""String_Node_Str"",NO_PARAMS);
    }
  }
 catch (  Exception ex) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,""String_Node_Str"",logParams);
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    throw ex;
  }
  ejbContainer=ejbContainerUtilImpl.getEjbContainer();
  super.createCallFlowAgent(ComponentType.SLSB);
}","protected StatelessSessionContainer(ContainerType conType,EjbDescriptor desc,ClassLoader loader) throws Exception {
  super(conType,desc,loader);
  ejbContainer=ejbContainerUtilImpl.getEjbContainer();
  super.createCallFlowAgent(ComponentType.SLSB);
}"
29002,"AbstractPoolTimerTask(Object lock){
  this.lock=lock;
}","AbstractPoolTimerTask(){
}"
29003,"PoolResizeTimerTask(Object lock){
  this.lock=lock;
}","PoolResizeTimerTask(){
}"
29004,"private void buildLookupTable(Map methodMap){
  methodInfo_=new MethodInfo[numBuckets_];
  Set occupied=new HashSet();
  for (Iterator iter=methodMap.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    Object nextObj=entry.getKey();
    Method next=null;
    if (nextObj == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (nextObj instanceof Method) {
      next=(Method)nextObj;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + nextObj.getClass() + ""String_Node_Str"");
    }
    int bucket=getBucket(next);
    if (!occupied.contains(bucket)) {
      MethodInfo methodInfo=new MethodInfo();
      methodInfo.key=next;
      methodInfo.value=entry.getValue();
      methodInfo.declaringClass=next.getDeclaringClass();
      methodInfo_[bucket]=methodInfo;
      occupied.add(bucket);
    }
 else {
      methodInfo_[bucket]=null;
    }
  }
}","private void buildLookupTable(Map methodMap){
  methodInfo_=new MethodInfo[numBuckets_];
  Set occupied=new HashSet();
  for (Iterator iter=methodMap.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    Object nextObj=entry.getKey();
    Method next=null;
    if (nextObj == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else     if (nextObj instanceof Method) {
      next=(Method)nextObj;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + nextObj.getClass() + ""String_Node_Str"");
    }
    int bucket=getBucket(next);
    if (!occupied.contains(bucket)) {
      MethodInfo methodInfo=new MethodInfo();
      methodInfo.value=entry.getValue();
      methodInfo.declaringClass=next.getDeclaringClass();
      methodInfo_[bucket]=methodInfo;
      occupied.add(bucket);
    }
 else {
      methodInfo_[bucket]=null;
    }
  }
}"
29005,"private void createThreadPools(org.glassfish.grizzly.config.dom.ThreadPool threadpoolBean,int index){
  String threadpoolId=null;
  String minThreadsValue, maxThreadsValue, timeoutValue;
  int minThreads=DEFAULT_MIN_THREAD_COUNT;
  int maxThreads=DEFAULT_MAX_THREAD_COUNT;
  int idleTimeoutInSeconds=120000;
  try {
    threadpoolId=threadpoolBean.getName();
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
    }
  }
  try {
    minThreadsValue=threadpoolBean.getMinThreadPoolSize();
    minThreads=Integer.parseInt(minThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
  try {
    maxThreadsValue=threadpoolBean.getMaxThreadPoolSize();
    maxThreads=Integer.parseInt(maxThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
  try {
    timeoutValue=threadpoolBean.getIdleThreadTimeoutSeconds();
    idleTimeoutInSeconds=Integer.parseInt(timeoutValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
  ThreadPoolFactory threadPoolFactory=new ThreadPoolFactory();
  ThreadPool threadpool=threadPoolFactory.create(minThreads,maxThreads,idleTimeoutInSeconds * 1000L,threadpoolId,_iiopUtils.getCommonClassLoader());
  threadpoolList.add(threadpool);
  idToIndexTable.put(threadpoolId,Integer.valueOf(index));
  indexToIdTable.put(Integer.valueOf(index),threadpoolId);
}","private static void createThreadPools(org.glassfish.grizzly.config.dom.ThreadPool threadpoolBean,int index){
  String threadpoolId=null;
  String minThreadsValue, maxThreadsValue, timeoutValue;
  int minThreads=DEFAULT_MIN_THREAD_COUNT;
  int maxThreads=DEFAULT_MAX_THREAD_COUNT;
  int idleTimeoutInSeconds=120000;
  try {
    threadpoolId=threadpoolBean.getName();
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
    }
  }
  try {
    minThreadsValue=threadpoolBean.getMinThreadPoolSize();
    minThreads=Integer.parseInt(minThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
  try {
    maxThreadsValue=threadpoolBean.getMaxThreadPoolSize();
    maxThreads=Integer.parseInt(maxThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
  try {
    timeoutValue=threadpoolBean.getIdleThreadTimeoutSeconds();
    idleTimeoutInSeconds=Integer.parseInt(timeoutValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
  ThreadPoolFactory threadPoolFactory=new ThreadPoolFactory();
  ThreadPool threadpool=threadPoolFactory.create(minThreads,maxThreads,idleTimeoutInSeconds * 1000L,threadpoolId,_iiopUtils.getCommonClassLoader());
  threadpoolList.add(threadpool);
  idToIndexTable.put(threadpoolId,Integer.valueOf(index));
  indexToIdTable.put(Integer.valueOf(index),threadpoolId);
}"
29006,"S1ASThreadPoolManager(){
  try {
    _iiopUtils=Globals.getDefaultHabitat().getService(IIOPUtils.class);
    Collection<org.glassfish.grizzly.config.dom.ThreadPool> tpCol=_iiopUtils.getAllThreadPools();
    org.glassfish.grizzly.config.dom.ThreadPool[] allThreadPools=tpCol.toArray(new org.glassfish.grizzly.config.dom.ThreadPool[tpCol.size()]);
    for (int i=0; i < allThreadPools.length; i++) {
      createThreadPools(allThreadPools[i],i);
    }
    defaultID=(String)indexToIdTable.get(Integer.valueOf(0));
  }
 catch (  NullPointerException npe) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
}","S1ASThreadPoolManager(){
}"
29007,"public int compareTo(Object o){
  int otherOrder=-1;
  if (o instanceof TransactionClientInterceptor) {
    otherOrder=((TransactionClientInterceptor)o).order;
  }
  if (order < otherOrder) {
    return -1;
  }
 else   if (order == otherOrder) {
    return 0;
  }
  return 1;
}","public int compareTo(TransactionClientInterceptor o){
  int otherOrder=-1;
  if (o instanceof TransactionClientInterceptor) {
    otherOrder=((TransactionClientInterceptor)o).order;
  }
  if (order < otherOrder) {
    return -1;
  }
 else   if (order == otherOrder) {
    return 0;
  }
  return 1;
}"
29008,"protected AdminAdapter(Class<? extends Privacy> privacyClass){
  super((Set)null);
  this.privacyClass=privacyClass;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected AdminAdapter(Class<? extends Privacy> privacyClass){
  super((Set)null);
  this.privacyClass=privacyClass;
}"
29009,"@Override public void postConstruct(){
  events.register(this);
  epd=new AdminEndpointDecider(config,aalogger);
  addDocRoot(env.getProps().get(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY) + ""String_Node_Str"");
  secureAdmin=domain.getSecureAdmin();
}","@Override public void postConstruct(){
  events.register(this);
  epd=new AdminEndpointDecider(config,aalogger);
  addDocRoot(env.getProps().get(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY) + ""String_Node_Str"");
}"
29010,"/** 
 */
protected boolean callEJBTimeout(RuntimeTimerState timerState,EJBTimerService timerService) throws Exception {
  boolean redeliver=false;
  if (containerState != CONTAINER_STARTED) {
    throw new EJBException(""String_Node_Str"" + containerStateToString(containerState));
  }
  EjbInvocation inv=invFactory.create();
  inv.isTimerCallback=true;
  inv.transactionAttribute=Container.TX_NOT_INITIALIZED;
  inv.securityPermissions=com.sun.ejb.Container.SEC_UNCHECKED;
  inv.method=getTimeoutMethod(timerState);
  inv.beanMethod=inv.method;
  ClassLoader originalClassLoader=null;
  try {
    prepareEjbTimeoutParams(inv,timerState,timerService);
    doTimerInvocationInit(inv,timerState.getTimedObjectPrimaryKey());
    originalClassLoader=Utility.setContextClassLoader(loader);
    preInvoke(inv);
    intercept(inv);
    if (!isBeanManagedTran && (transactionManager.getStatus() == Status.STATUS_MARKED_ROLLBACK)) {
      redeliver=true;
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
 catch (  InvocationTargetException ite) {
    redeliver=true;
    inv.exception=ite.getCause();
    _logger.log(Level.FINE,""String_Node_Str"",inv.exception);
  }
catch (  Throwable c) {
    redeliver=true;
    _logger.log(Level.FINE,""String_Node_Str"",c);
    inv.exception=c;
  }
 finally {
    if (!redeliver) {
      boolean success=postEjbTimeout(timerState,timerService);
      redeliver=!success;
    }
    postInvoke(inv);
    if ((redeliver == false) && (inv.exception != null)) {
      redeliver=true;
    }
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
  }
  return redeliver;
}","/** 
 */
protected boolean callEJBTimeout(RuntimeTimerState timerState,EJBTimerService timerService) throws Exception {
  boolean redeliver=false;
  if (containerState != CONTAINER_STARTED) {
    throw new EJBException(""String_Node_Str"" + containerStateToString(containerState));
  }
  EjbInvocation inv=invFactory.create();
  inv.isTimerCallback=true;
  inv.transactionAttribute=Container.TX_NOT_INITIALIZED;
  inv.method=getTimeoutMethod(timerState);
  inv.beanMethod=inv.method;
  ClassLoader originalClassLoader=null;
  try {
    prepareEjbTimeoutParams(inv,timerState,timerService);
    doTimerInvocationInit(inv,timerState.getTimedObjectPrimaryKey());
    originalClassLoader=Utility.setContextClassLoader(loader);
    preInvoke(inv);
    intercept(inv);
    if (!isBeanManagedTran && (transactionManager.getStatus() == Status.STATUS_MARKED_ROLLBACK)) {
      redeliver=true;
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
 catch (  InvocationTargetException ite) {
    redeliver=true;
    inv.exception=ite.getCause();
    _logger.log(Level.FINE,""String_Node_Str"",inv.exception);
  }
catch (  Throwable c) {
    redeliver=true;
    _logger.log(Level.FINE,""String_Node_Str"",c);
    inv.exception=c;
  }
 finally {
    if (!redeliver) {
      boolean success=postEjbTimeout(timerState,timerService);
      redeliver=!success;
    }
    postInvoke(inv);
    if ((redeliver == false) && (inv.exception != null)) {
      redeliver=true;
    }
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
  }
  return redeliver;
}"
29011,"/** 
 * Called by EJBHome proxy.
 */
public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    ((BaseContainer)getContainer()).onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
 else     if (invokeSpecialEJBHomeMethod(method,methodClass,args)) {
      return null;
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new RemoteException(""String_Node_Str"" + method);
    }
 else     if ((methodClass == javax.ejb.EJBHome.class) || invInfo.ejbIntfOverride) {
      return invokeEJBHomeMethod(method.getName(),args);
    }
 else     if (GenericEJBHome.class.isAssignableFrom(methodClass)) {
      if (method.getName().equals(""String_Node_Str"")) {
        EJBObjectImpl busObjectImpl=createRemoteBusinessObjectImpl();
        return busObjectImpl.getStub((String)args[0]);
      }
 else {
        EjbAsyncInvocationManager asyncManager=((EjbContainerUtilImpl)ejbContainerUtil).getEjbAsyncInvocationManager();
        Long asyncTaskID=(Long)args[0];
        RemoteAsyncResult asyncResult=null;
        if (method.getName().equals(""String_Node_Str"")) {
          asyncResult=asyncManager.remoteCancel(asyncTaskID);
        }
 else         if (method.getName().equals(""String_Node_Str"")) {
          asyncResult=asyncManager.remoteGet(asyncTaskID);
        }
 else         if (method.getName().equals(""String_Node_Str"")) {
          asyncResult=asyncManager.remoteIsDone(asyncTaskID);
        }
 else         if (method.getName().equals(""String_Node_Str"")) {
          Long timeout=(Long)args[1];
          TimeUnit unit=TimeUnit.valueOf((String)args[2]);
          asyncResult=asyncManager.remoteGetWithTimeout(asyncTaskID,timeout,unit);
        }
        return asyncResult;
      }
    }
    EJBObjectImpl ejbObjectImpl=null;
    Object returnValue=null;
    if (invInfo.startsWithCreate) {
      ejbObjectImpl=createEJBObjectImpl();
      if (ejbObjectImpl != null) {
        returnValue=ejbObjectImpl.getStub();
      }
    }
    if (!isStatelessSession_) {
      if (invInfo.targetMethod1 == null) {
        _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()});
        String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()});
        throw new RemoteException(errorMsg);
      }
      EjbInvocation inv=((BaseContainer)getContainer()).createEjbInvocation();
      inv.isRemote=true;
      inv.method=method;
      inv.isHome=true;
      inv.clientInterface=homeIntfClass_;
      inv.transactionAttribute=invInfo.txAttr;
      inv.securityPermissions=invInfo.securityPermissions;
      inv.invocationInfo=invInfo;
      if (ejbObjectImpl != null && invInfo.startsWithCreate) {
        inv.ejbObject=(EJBLocalRemoteObject)ejbObjectImpl;
      }
      BaseContainer container=(BaseContainer)getContainer();
      try {
        container.preInvoke(inv);
        if (invInfo.startsWithCreate) {
          Object ejbCreateReturnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          postCreate(container,inv,invInfo,ejbCreateReturnValue,args);
          if (inv.ejbObject != null) {
            returnValue=((EJBObjectImpl)inv.ejbObject).getStub();
          }
        }
 else         if (invInfo.startsWithFindByPrimaryKey) {
          returnValue=container.invokeFindByPrimaryKey(invInfo.targetMethod1,inv,args);
        }
 else         if (invInfo.startsWithFind) {
          Object pKeys=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          returnValue=container.postFind(inv,pKeys,null);
        }
 else {
          returnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
        }
      }
 catch (      InvocationTargetException ite) {
        inv.exception=ite.getCause();
      }
catch (      Throwable c) {
        inv.exception=c;
      }
 finally {
        container.postInvoke(inv);
      }
      if (inv.exception != null) {
        InvocationHandlerUtil.throwRemoteException(inv.exception,method.getExceptionTypes());
      }
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    ((BaseContainer)getContainer()).onLeavingContainer();
  }
}","/** 
 * Called by EJBHome proxy.
 */
public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    ((BaseContainer)getContainer()).onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
 else     if (invokeSpecialEJBHomeMethod(method,methodClass,args)) {
      return null;
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new RemoteException(""String_Node_Str"" + method);
    }
 else     if ((methodClass == javax.ejb.EJBHome.class) || invInfo.ejbIntfOverride) {
      return invokeEJBHomeMethod(method.getName(),args);
    }
 else     if (GenericEJBHome.class.isAssignableFrom(methodClass)) {
      if (method.getName().equals(""String_Node_Str"")) {
        EJBObjectImpl busObjectImpl=createRemoteBusinessObjectImpl();
        return busObjectImpl.getStub((String)args[0]);
      }
 else {
        EjbAsyncInvocationManager asyncManager=((EjbContainerUtilImpl)ejbContainerUtil).getEjbAsyncInvocationManager();
        Long asyncTaskID=(Long)args[0];
        RemoteAsyncResult asyncResult=null;
        if (method.getName().equals(""String_Node_Str"")) {
          asyncResult=asyncManager.remoteCancel(asyncTaskID);
        }
 else         if (method.getName().equals(""String_Node_Str"")) {
          asyncResult=asyncManager.remoteGet(asyncTaskID);
        }
 else         if (method.getName().equals(""String_Node_Str"")) {
          asyncResult=asyncManager.remoteIsDone(asyncTaskID);
        }
 else         if (method.getName().equals(""String_Node_Str"")) {
          Long timeout=(Long)args[1];
          TimeUnit unit=TimeUnit.valueOf((String)args[2]);
          asyncResult=asyncManager.remoteGetWithTimeout(asyncTaskID,timeout,unit);
        }
        return asyncResult;
      }
    }
    EJBObjectImpl ejbObjectImpl=null;
    Object returnValue=null;
    if (invInfo.startsWithCreate) {
      ejbObjectImpl=createEJBObjectImpl();
      if (ejbObjectImpl != null) {
        returnValue=ejbObjectImpl.getStub();
      }
    }
    if (!isStatelessSession_) {
      if (invInfo.targetMethod1 == null) {
        _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()});
        String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()});
        throw new RemoteException(errorMsg);
      }
      EjbInvocation inv=((BaseContainer)getContainer()).createEjbInvocation();
      inv.isRemote=true;
      inv.method=method;
      inv.isHome=true;
      inv.clientInterface=homeIntfClass_;
      inv.transactionAttribute=invInfo.txAttr;
      inv.invocationInfo=invInfo;
      if (ejbObjectImpl != null && invInfo.startsWithCreate) {
        inv.ejbObject=(EJBLocalRemoteObject)ejbObjectImpl;
      }
      BaseContainer container=(BaseContainer)getContainer();
      try {
        container.preInvoke(inv);
        if (invInfo.startsWithCreate) {
          Object ejbCreateReturnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          postCreate(container,inv,invInfo,ejbCreateReturnValue,args);
          if (inv.ejbObject != null) {
            returnValue=((EJBObjectImpl)inv.ejbObject).getStub();
          }
        }
 else         if (invInfo.startsWithFindByPrimaryKey) {
          returnValue=container.invokeFindByPrimaryKey(invInfo.targetMethod1,inv,args);
        }
 else         if (invInfo.startsWithFind) {
          Object pKeys=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          returnValue=container.postFind(inv,pKeys,null);
        }
 else {
          returnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
        }
      }
 catch (      InvocationTargetException ite) {
        inv.exception=ite.getCause();
      }
catch (      Throwable c) {
        inv.exception=c;
      }
 finally {
        container.postInvoke(inv);
      }
      if (inv.exception != null) {
        InvocationHandlerUtil.throwRemoteException(inv.exception,method.getExceptionTypes());
      }
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    ((BaseContainer)getContainer()).onLeavingContainer();
  }
}"
29012,"/** 
 * Called by EJBLocalHome proxy.
 */
public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    ((BaseContainer)getContainer()).onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
 else     if (methodClass == IndirectlySerializable.class) {
      return this.getSerializableObjectFactory();
    }
 else     if (handleSpecialEJBLocalHomeMethod(method,methodClass)) {
      return invokeSpecialEJBLocalHomeMethod(method,methodClass,args);
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new IllegalStateException(""String_Node_Str"" + method);
    }
    if ((methodClass == javax.ejb.EJBLocalHome.class) || invInfo.ejbIntfOverride) {
      super.remove(args[0]);
      return null;
    }
 else     if (methodClass == GenericEJBLocalHome.class) {
      EJBLocalObjectImpl localImpl=createEJBLocalBusinessObjectImpl((String)args[0]);
      return localImpl.getClientObject((String)args[0]);
    }
    EJBLocalObjectImpl localObjectImpl=null;
    Object returnValue=null;
    if (invInfo.startsWithCreate) {
      localObjectImpl=createEJBLocalObjectImpl();
      if (localObjectImpl != null) {
        returnValue=localObjectImpl.getClientObject();
      }
    }
    if (!isStatelessSession_) {
      if (invInfo.targetMethod1 == null) {
        Object[] params=new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()};
        String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params);
        throw new EJBException(errorMsg);
      }
      EjbInvocation inv=((BaseContainer)getContainer()).createEjbInvocation();
      inv.isLocal=true;
      inv.isHome=true;
      inv.method=method;
      inv.clientInterface=localHomeIntfClass_;
      inv.transactionAttribute=invInfo.txAttr;
      inv.securityPermissions=invInfo.securityPermissions;
      inv.invocationInfo=invInfo;
      if (localObjectImpl != null && invInfo.startsWithCreate) {
        inv.ejbObject=(EJBLocalRemoteObject)localObjectImpl;
      }
      try {
        container.preInvoke(inv);
        if (invInfo.startsWithCreate) {
          Object ejbCreateReturnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          postCreate(container,inv,invInfo,ejbCreateReturnValue,args);
          if (inv.ejbObject != null) {
            returnValue=((EJBLocalObjectImpl)inv.ejbObject).getClientObject();
          }
        }
 else         if (invInfo.startsWithFindByPrimaryKey) {
          returnValue=container.invokeFindByPrimaryKey(invInfo.targetMethod1,inv,args);
        }
 else         if (invInfo.startsWithFind) {
          Object pKeys=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          returnValue=container.postFind(inv,pKeys,null);
        }
 else {
          returnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
        }
      }
 catch (      InvocationTargetException ite) {
        inv.exception=ite.getCause();
      }
catch (      Throwable c) {
        inv.exception=c;
      }
 finally {
        container.postInvoke(inv);
      }
      if (inv.exception != null) {
        InvocationHandlerUtil.throwLocalException(inv.exception,method.getExceptionTypes());
      }
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    ((BaseContainer)getContainer()).onLeavingContainer();
  }
}","/** 
 * Called by EJBLocalHome proxy.
 */
public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    ((BaseContainer)getContainer()).onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
 else     if (methodClass == IndirectlySerializable.class) {
      return this.getSerializableObjectFactory();
    }
 else     if (handleSpecialEJBLocalHomeMethod(method,methodClass)) {
      return invokeSpecialEJBLocalHomeMethod(method,methodClass,args);
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new IllegalStateException(""String_Node_Str"" + method);
    }
    if ((methodClass == javax.ejb.EJBLocalHome.class) || invInfo.ejbIntfOverride) {
      super.remove(args[0]);
      return null;
    }
 else     if (methodClass == GenericEJBLocalHome.class) {
      EJBLocalObjectImpl localImpl=createEJBLocalBusinessObjectImpl((String)args[0]);
      return localImpl.getClientObject((String)args[0]);
    }
    EJBLocalObjectImpl localObjectImpl=null;
    Object returnValue=null;
    if (invInfo.startsWithCreate) {
      localObjectImpl=createEJBLocalObjectImpl();
      if (localObjectImpl != null) {
        returnValue=localObjectImpl.getClientObject();
      }
    }
    if (!isStatelessSession_) {
      if (invInfo.targetMethod1 == null) {
        Object[] params=new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()};
        String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params);
        throw new EJBException(errorMsg);
      }
      EjbInvocation inv=((BaseContainer)getContainer()).createEjbInvocation();
      inv.isLocal=true;
      inv.isHome=true;
      inv.method=method;
      inv.clientInterface=localHomeIntfClass_;
      inv.transactionAttribute=invInfo.txAttr;
      inv.invocationInfo=invInfo;
      if (localObjectImpl != null && invInfo.startsWithCreate) {
        inv.ejbObject=(EJBLocalRemoteObject)localObjectImpl;
      }
      try {
        container.preInvoke(inv);
        if (invInfo.startsWithCreate) {
          Object ejbCreateReturnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          postCreate(container,inv,invInfo,ejbCreateReturnValue,args);
          if (inv.ejbObject != null) {
            returnValue=((EJBLocalObjectImpl)inv.ejbObject).getClientObject();
          }
        }
 else         if (invInfo.startsWithFindByPrimaryKey) {
          returnValue=container.invokeFindByPrimaryKey(invInfo.targetMethod1,inv,args);
        }
 else         if (invInfo.startsWithFind) {
          Object pKeys=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
          returnValue=container.postFind(inv,pKeys,null);
        }
 else {
          returnValue=invokeTargetBeanMethod(container,invInfo.targetMethod1,inv,inv.ejb,args);
        }
      }
 catch (      InvocationTargetException ite) {
        inv.exception=ite.getCause();
      }
catch (      Throwable c) {
        inv.exception=c;
      }
 finally {
        container.postInvoke(inv);
      }
      if (inv.exception != null) {
        InvocationHandlerUtil.throwLocalException(inv.exception,method.getExceptionTypes());
      }
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    ((BaseContainer)getContainer()).onLeavingContainer();
  }
}"
29013,"Object invoke(Class clientInterface,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    container.onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
 else     if (methodClass == IndirectlySerializable.class) {
      return this.getSerializableObjectFactory();
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new IllegalStateException(""String_Node_Str"" + method);
    }
    if ((methodClass == javax.ejb.EJBLocalObject.class) || invInfo.ejbIntfOverride) {
      return invokeEJBLocalObjectMethod(method.getName(),args);
    }
 else     if (invInfo.targetMethod1 == null) {
      Object[] params=new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()};
      logger.log(Level.SEVERE,""String_Node_Str"",params);
      String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params);
      throw new EJBException(errorMsg);
    }
    Object returnValue=null;
    EjbInvocation inv=container.createEjbInvocation();
    inv.isLocal=true;
    inv.isBusinessInterface=!isLocalHomeView();
    inv.isHome=false;
    inv.ejbObject=this;
    inv.method=method;
    inv.methodParams=args;
    inv.clientInterface=clientInterface;
    inv.transactionAttribute=invInfo.txAttr;
    inv.securityPermissions=invInfo.securityPermissions;
    inv.invocationInfo=invInfo;
    inv.beanMethod=invInfo.targetMethod1;
    try {
      container.preInvoke(inv);
      returnValue=container.intercept(inv);
    }
 catch (    InvocationTargetException ite) {
      inv.exception=ite.getCause();
      inv.exceptionFromBeanMethod=inv.exception;
    }
catch (    Throwable t) {
      inv.exception=t;
    }
 finally {
      container.postInvoke(inv);
    }
    if (inv.exception != null) {
      InvocationHandlerUtil.throwLocalException(inv.exception,method.getExceptionTypes());
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    container.onLeavingContainer();
  }
}","Object invoke(Class clientInterface,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    container.onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
 else     if (methodClass == IndirectlySerializable.class) {
      return this.getSerializableObjectFactory();
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new IllegalStateException(""String_Node_Str"" + method);
    }
    if ((methodClass == javax.ejb.EJBLocalObject.class) || invInfo.ejbIntfOverride) {
      return invokeEJBLocalObjectMethod(method.getName(),args);
    }
 else     if (invInfo.targetMethod1 == null) {
      Object[] params=new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()};
      logger.log(Level.SEVERE,""String_Node_Str"",params);
      String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params);
      throw new EJBException(errorMsg);
    }
    Object returnValue=null;
    EjbInvocation inv=container.createEjbInvocation();
    inv.isLocal=true;
    inv.isBusinessInterface=!isLocalHomeView();
    inv.isHome=false;
    inv.ejbObject=this;
    inv.method=method;
    inv.methodParams=args;
    inv.clientInterface=clientInterface;
    inv.transactionAttribute=invInfo.txAttr;
    inv.invocationInfo=invInfo;
    inv.beanMethod=invInfo.targetMethod1;
    try {
      container.preInvoke(inv);
      returnValue=container.intercept(inv);
    }
 catch (    InvocationTargetException ite) {
      inv.exception=ite.getCause();
      inv.exceptionFromBeanMethod=inv.exception;
    }
catch (    Throwable t) {
      inv.exception=t;
    }
 finally {
      container.postInvoke(inv);
    }
    if (inv.exception != null) {
      InvocationHandlerUtil.throwLocalException(inv.exception,method.getExceptionTypes());
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    container.onLeavingContainer();
  }
}"
29014,"public ComponentInvocation startInvocation(){
  EjbInvocation inv=container_.createEjbInvocation();
  inv.isWebService=true;
  inv.container=container_;
  inv.transactionAttribute=Container.TX_NOT_INITIALIZED;
  inv.securityPermissions=Container.SEC_NOT_INITIALIZED;
  invManager_.preInvoke(inv);
  return inv;
}","public ComponentInvocation startInvocation(){
  EjbInvocation inv=container_.createEjbInvocation();
  inv.isWebService=true;
  inv.container=container_;
  inv.transactionAttribute=Container.TX_NOT_INITIALIZED;
  invManager_.preInvoke(inv);
  return inv;
}"
29015,"/** 
 * Actual message delivery happens in three steps : 1) beforeMessageDelivery(Message, MessageListener) This is our chance to make the message delivery itself part of the instance's global transaction. 2) onMessage(Message, MessageListener) This is where the container delegates to the actual ejb instance's onMessage method. 3) afterMessageDelivery(Message, MessageListener) Perform transaction cleanup and error handling. We use the EjbInvocation manager's thread-specific state to track the invocation across these three calls.
 */
public void beforeMessageDelivery(Method method,MessageDeliveryType deliveryType,boolean txImported,ResourceHandle resourceHandle){
  if (containerState != CONTAINER_STARTED) {
    String errorMsg=localStrings.getLocalString(""String_Node_Str"",appEJBName_ + ""String_Node_Str"",new Object[]{appEJBName_});
    throw new EJBException(errorMsg);
  }
  EjbInvocation invocation=createEjbInvocation();
  try {
    MessageBeanContextImpl context=(MessageBeanContextImpl)getContext(invocation);
    if (deliveryType == MessageDeliveryType.Timer) {
      invocation.isTimerCallback=true;
    }
    invocation.originalContextClassLoader=Utility.setContextClassLoader(getClassLoader());
    invocation.isMessageDriven=true;
    invocation.method=method;
    context.setState(BeanState.INVOKING);
    invocation.context=context;
    invocation.instance=context.getEJB();
    invocation.ejb=context.getEJB();
    invocation.container=this;
    boolean startTx=false;
    if (!txImported) {
      startTx=containerStartsTx(method);
    }
    invocation.containerStartsTx=startTx;
    this.invocationManager.preInvoke(invocation);
    if (startTx) {
      registerMessageBeanResource(resourceHandle);
    }
    preInvokeTx(invocation);
  }
 catch (  Throwable c) {
    if (containerState != CONTAINER_STARTED) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,c.toString()});
      _logger.log(Level.SEVERE,c.getClass().getName(),c);
    }
    invocation.exception=c;
  }
}","/** 
 * Actual message delivery happens in three steps : 1) beforeMessageDelivery(Message, MessageListener) This is our chance to make the message delivery itself part of the instance's global transaction. 2) onMessage(Message, MessageListener) This is where the container delegates to the actual ejb instance's onMessage method. 3) afterMessageDelivery(Message, MessageListener) Perform transaction cleanup and error handling. We use the EjbInvocation manager's thread-specific state to track the invocation across these three calls.
 */
public void beforeMessageDelivery(Method method,MessageDeliveryType deliveryType,boolean txImported,ResourceHandle resourceHandle){
  if (containerState != CONTAINER_STARTED) {
    String errorMsg=localStrings.getLocalString(""String_Node_Str"",appEJBName_ + ""String_Node_Str"",new Object[]{appEJBName_});
    throw new EJBException(errorMsg);
  }
  EjbInvocation invocation=createEjbInvocation();
  try {
    MessageBeanContextImpl context=(MessageBeanContextImpl)getContext(invocation);
    if (deliveryType == MessageDeliveryType.Timer) {
      invocation.isTimerCallback=true;
    }
    invocation.setOriginalContextClassLoader(Utility.setContextClassLoader(getClassLoader()));
    invocation.isMessageDriven=true;
    invocation.method=method;
    context.setState(BeanState.INVOKING);
    invocation.context=context;
    invocation.instance=context.getEJB();
    invocation.ejb=context.getEJB();
    invocation.container=this;
    boolean startTx=false;
    if (!txImported) {
      startTx=containerStartsTx(method);
    }
    invocation.containerStartsTx=startTx;
    this.invocationManager.preInvoke(invocation);
    if (startTx) {
      registerMessageBeanResource(resourceHandle);
    }
    preInvokeTx(invocation);
  }
 catch (  Throwable c) {
    if (containerState != CONTAINER_STARTED) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,c.toString()});
      _logger.log(Level.SEVERE,c.getClass().getName(),c);
    }
    invocation.exception=c;
  }
}"
29016,"private boolean afterMessageDeliveryInternal(ResourceHandle resourceHandle){
  boolean success=false;
  EjbInvocation invocation=null;
  invocation=(EjbInvocation)invocationManager.getCurrentInvocation();
  if (invocation == null) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,""String_Node_Str""});
  }
 else {
    try {
      if (invocation.containerStartsTx) {
        unregisterMessageBeanResource(resourceHandle);
      }
      invocationManager.postInvoke(invocation);
      postInvokeTx(invocation);
      success=true;
      ejbProbeNotifier.messageDeliveredEvent(getContainerId(),containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    }
 catch (    Throwable ce) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,ce.toString()});
      _logger.log(Level.SEVERE,ce.getClass().getName(),ce);
    }
 finally {
      releaseContext(invocation);
    }
    Utility.setContextClassLoader(invocation.originalContextClassLoader);
    if (invocation.exception != null) {
      if (isSystemUncheckedException(invocation.exception)) {
        success=false;
      }
      Level exLogLevel=isSystemUncheckedException(invocation.exception) ? Level.WARNING : Level.FINE;
      _logger.log(exLogLevel,""String_Node_Str"",new Object[]{appEJBName_,invocation.exception.toString()});
      _logger.log(exLogLevel,invocation.exception.getClass().getName(),invocation.exception);
    }
  }
  return success;
}","private boolean afterMessageDeliveryInternal(ResourceHandle resourceHandle){
  boolean success=false;
  EjbInvocation invocation=null;
  invocation=(EjbInvocation)invocationManager.getCurrentInvocation();
  if (invocation == null) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,""String_Node_Str""});
  }
 else {
    try {
      if (invocation.containerStartsTx) {
        unregisterMessageBeanResource(resourceHandle);
      }
      invocationManager.postInvoke(invocation);
      postInvokeTx(invocation);
      success=true;
      ejbProbeNotifier.messageDeliveredEvent(getContainerId(),containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    }
 catch (    Throwable ce) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,ce.toString()});
      _logger.log(Level.SEVERE,ce.getClass().getName(),ce);
    }
 finally {
      releaseContext(invocation);
    }
    Utility.setContextClassLoader(invocation.getOriginalContextClassLoader());
    if (invocation.exception != null) {
      if (isSystemUncheckedException(invocation.exception)) {
        success=false;
      }
      Level exLogLevel=isSystemUncheckedException(invocation.exception) ? Level.WARNING : Level.FINE;
      _logger.log(exLogLevel,""String_Node_Str"",new Object[]{appEJBName_,invocation.exception.toString()});
      _logger.log(exLogLevel,invocation.exception.getClass().getName(),invocation.exception);
    }
  }
  return success;
}"
29017,"private void setSourceWin32Exe() throws IOException {
  sourceWin32Exe=new File(info.libDir,SOURCE_WIN32_EXE_FILENAME);
  if (!sourceWin32Exe.isFile()) {
    InputStream in=getClass().getResourceAsStream(""String_Node_Str"" + SOURCE_WIN32_EXE_FILENAME);
    FileOutputStream out=new FileOutputStream(sourceWin32Exe);
    copyStream(in,out);
    trace(""String_Node_Str"" + sourceWin32Exe);
  }
  trace(""String_Node_Str"" + sourceWin32Exe);
}","private void setSourceWin32Exe() throws IOException {
  sourceWin32Exe=new File(info.libDir,SOURCE_WIN32_EXE_FILENAME);
  if (!sourceWin32Exe.isFile()) {
    InputStream in=WindowsService.class.getResourceAsStream(""String_Node_Str"" + SOURCE_WIN32_EXE_FILENAME);
    FileOutputStream out=new FileOutputStream(sourceWin32Exe);
    copyStream(in,out);
    trace(""String_Node_Str"" + sourceWin32Exe);
  }
  trace(""String_Node_Str"" + sourceWin32Exe);
}"
29018,"private void deleteTable(final Connection conn){
  try {
    final Statement ds=conn.createStatement();
    final String deleteTable=""String_Node_Str"" + PEFileLayout.EJB_TIMER_TABLE_NAME;
    ds.executeUpdate(deleteTable);
    ds.close();
  }
 catch (  final Exception e) {
  }
}","private void deleteTable(final Connection conn) throws Exception {
  final Statement ds=conn.createStatement();
  final String deleteTable=""String_Node_Str"" + PEFileLayout.EJB_TIMER_TABLE_NAME;
  try {
    ds.executeUpdate(deleteTable);
  }
 catch (  final Exception e) {
  }
 finally {
    ds.close();
  }
}"
29019,"private void createEjbTimerDatabaseTable(final String createStatement,final String dbDir) throws Exception {
  checkDerbyDriver();
  final String url=getDatabaseUrl(dbDir);
  final Connection conn=DriverManager.getConnection(url);
  deleteTable(conn);
  final Statement cs=conn.createStatement();
  cs.executeUpdate(createStatement);
  cs.close();
}","private void createEjbTimerDatabaseTable(final String createStatement,final String dbDir) throws Exception {
  checkDerbyDriver();
  final String url=getDatabaseUrl(dbDir);
  final Connection conn=DriverManager.getConnection(url);
  deleteTable(conn);
  final Statement cs=conn.createStatement();
  try {
    cs.executeUpdate(createStatement);
  }
  finally {
    cs.close();
  }
}"
29020,"/** 
 * This method is used to extract URI of jar entries that match a given pattern.
 * @param uri
 * @param pattern
 */
public static List<String> getJarEntries(URI uri,Pattern pattern){
  List<String> results=new ArrayList<String>();
  File file=null;
  try {
    file=new File(uri);
  }
 catch (  Exception ex) {
  }
  if (file == null || file.isDirectory()) {
    return results;
  }
  String fileName=file.getName();
  if (fileName != null && fileName.endsWith(""String_Node_Str"")) {
    JarFile jarFile=null;
    try {
      jarFile=new JarFile(new File(uri));
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=(JarEntry)entries.nextElement();
        String entryName=entry.getName();
        if (pattern.matcher(entryName).matches()) {
          results.add(entryName);
        }
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  return results;
}","/** 
 * This method is used to extract URI of jar entries that match a given pattern.
 * @param uri
 * @param pattern
 */
public static List<String> getJarEntries(URI uri,Pattern pattern){
  List<String> results=new ArrayList<String>();
  File file=null;
  try {
    file=new File(uri);
  }
 catch (  Exception ex) {
  }
  if (file == null || file.isDirectory()) {
    return results;
  }
  String fileName=file.getName();
  if (fileName != null && fileName.endsWith(""String_Node_Str"")) {
    JarFile jarFile=null;
    try {
      jarFile=new JarFile(new File(uri));
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=(JarEntry)entries.nextElement();
        String entryName=entry.getName();
        if (pattern.matcher(entryName).matches()) {
          results.add(entryName);
        }
      }
    }
 catch (    Exception ex) {
      if (logger.isLoggable(Level.WARNING)) {
        logger.log(Level.WARNING,""String_Node_Str"",fileName);
      }
      throw new RuntimeException(ex);
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  return results;
}"
29021,"private void validateManifest(final String manifestPath) throws Exception {
  final File manifest=new File(manifestPath);
  final File manifestParent=manifest.getParentFile();
  final String msg=sm.getString(""String_Node_Str"",manifest.getParentFile().getAbsolutePath());
  if (manifestParent != null && manifestParent.isDirectory()) {
    if (info.force) {
      FileUtils.whack(manifestParent);
      if (manifestParent.isDirectory()) {
        throw new IllegalArgumentException(msg);
      }
    }
 else {
      throw new IllegalArgumentException(msg);
    }
  }
  manifest.getParentFile().mkdirs();
  if (info.trace)   printOut(""String_Node_Str"" + manifestPath);
}","private void validateManifest(final String manifestPath) throws Exception {
  final File manifest=new File(manifestPath);
  final File manifestParent=manifest.getParentFile();
  final String msg=sm.getString(""String_Node_Str"",manifest.getParentFile().getAbsolutePath());
  if (manifestParent != null && manifestParent.isDirectory()) {
    if (info.force) {
      FileUtils.whack(manifestParent);
      if (manifestParent.isDirectory()) {
        throw new IllegalArgumentException(msg);
      }
    }
 else {
      throw new IllegalArgumentException(msg);
    }
  }
  if (!manifest.getParentFile().mkdirs()) {
    if (info.trace)     printOut(""String_Node_Str"" + manifest.getParentFile().getAbsolutePath());
  }
  if (info.trace)   printOut(""String_Node_Str"" + manifestPath);
}"
29022,"private void cleanupManifest() throws RuntimeException {
  final File manifest=new File(getManifestFilePath());
  if (manifest.exists()) {
    manifest.delete();
    manifest.deleteOnExit();
    if (info.trace)     printOut(""String_Node_Str"" + manifest.getAbsolutePath());
  }
  final File failedServiceNode=manifest.getParentFile();
  if (failedServiceNode.exists()) {
    failedServiceNode.delete();
    failedServiceNode.deleteOnExit();
    if (info.trace)     printOut(""String_Node_Str"" + failedServiceNode.getAbsolutePath());
  }
}","private void cleanupManifest() throws RuntimeException {
  final File manifest=new File(getManifestFilePath());
  if (manifest.exists()) {
    if (!manifest.delete())     manifest.deleteOnExit();
    if (info.trace)     printOut(""String_Node_Str"" + manifest.getAbsolutePath());
  }
  final File failedServiceNode=manifest.getParentFile();
  if (failedServiceNode.exists()) {
    if (!failedServiceNode.delete())     failedServiceNode.deleteOnExit();
    if (info.trace)     printOut(""String_Node_Str"" + failedServiceNode.getAbsolutePath());
  }
}"
29023,"private void setSourceWin32Exe() throws IOException {
  sourceWin32Exe=new File(info.libDir,SOURCE_WIN32_EXE_FILENAME);
  if (!sourceWin32Exe.isFile()) {
    InputStream in=WindowsService.class.getResourceAsStream(""String_Node_Str"" + SOURCE_WIN32_EXE_FILENAME);
    FileOutputStream out=new FileOutputStream(sourceWin32Exe);
    copyStream(in,out);
    trace(""String_Node_Str"" + sourceWin32Exe);
  }
  trace(""String_Node_Str"" + sourceWin32Exe);
}","private void setSourceWin32Exe() throws IOException {
  sourceWin32Exe=new File(info.libDir,SOURCE_WIN32_EXE_FILENAME);
  if (!sourceWin32Exe.isFile()) {
    InputStream in=null;
    FileOutputStream out=null;
    try {
      in=WindowsService.class.getResourceAsStream(""String_Node_Str"" + SOURCE_WIN32_EXE_FILENAME);
      out=new FileOutputStream(sourceWin32Exe);
      copyStream(in,out);
      trace(""String_Node_Str"" + sourceWin32Exe);
    }
  finally {
      if (in != null)       in.close();
      if (out != null)       out.close();
    }
  }
  trace(""String_Node_Str"" + sourceWin32Exe);
}"
29024,"private static void copyStream(InputStream in,OutputStream out) throws IOException {
  byte[] buf=new byte[16384];
  int len;
  while ((len=in.read(buf)) >= 0) {
    out.write(buf,0,len);
  }
  in.close();
  out.close();
}","private static void copyStream(InputStream in,OutputStream out) throws IOException {
  byte[] buf=new byte[16384];
  int len;
  while ((len=in.read(buf)) >= 0) {
    out.write(buf,0,len);
  }
}"
29025,"@Override public final void initializeInternal(){
  try {
    getTokenMap().put(DISPLAY_NAME_TN,info.serverDirs.getServerName() + ""String_Node_Str"");
    setTemplateFile(TEMPLATE_FILE_NAME);
    setSourceWin32Exe();
    targetDir=new File(getServerDirs().getServerDir(),TARGET_DIR);
    targetDir.mkdirs();
    if (!targetDir.isDirectory())     throw new RuntimeException(Strings.get(""String_Node_Str"",targetDir));
    targetWin32Exe=new File(targetDir,info.serviceName + ""String_Node_Str"");
    targetXml=new File(targetDir,info.serviceName + ""String_Node_Str"");
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}","@Override public final void initializeInternal(){
  try {
    getTokenMap().put(DISPLAY_NAME_TN,info.serverDirs.getServerName() + ""String_Node_Str"");
    setTemplateFile(TEMPLATE_FILE_NAME);
    setSourceWin32Exe();
    targetDir=new File(getServerDirs().getServerDir(),TARGET_DIR);
    if (!targetDir.isDirectory()) {
      if (!targetDir.mkdirs())       throw new RuntimeException(Strings.get(""String_Node_Str"",targetDir));
    }
    targetWin32Exe=new File(targetDir,info.serviceName + ""String_Node_Str"");
    targetXml=new File(targetDir,info.serviceName + ""String_Node_Str"");
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}"
29026,"private void handlePreExisting(File targetWin32Exe,File targetXml,boolean force){
  if (targetWin32Exe.exists() || targetXml.exists()) {
    if (force) {
      targetWin32Exe.delete();
      targetXml.delete();
      handlePreExisting(targetWin32Exe,targetXml,false);
    }
 else {
      throw new RuntimeException(Strings.get(""String_Node_Str"",new File(targetDir,getServerDirs().getServerName() + ""String_Node_Str"").toString() + ""String_Node_Str"",""String_Node_Str""));
    }
  }
}","private void handlePreExisting(File targetWin32Exe,File targetXml,boolean force){
  if (targetWin32Exe.exists() || targetXml.exists()) {
    if (force) {
      if (!targetWin32Exe.delete())       trace(""String_Node_Str"");
      if (!targetXml.delete())       trace(""String_Node_Str"");
      if (targetWin32Exe.exists() || targetXml.exists())       throw new RuntimeException(Strings.get(""String_Node_Str"",new File(targetDir,getServerDirs().getServerName() + ""String_Node_Str"").toString() + ""String_Node_Str"",""String_Node_Str""));
    }
  }
}"
29027,"private void install() throws ProcessManagerException {
  if (info.dryRun) {
    try {
      xmlFileCopy=Strings.get(""String_Node_Str"") + FileUtils.readSmallFile(targetXml);
    }
 catch (    IOException ex) {
    }
    targetXml.delete();
    targetWin32Exe.delete();
  }
 else {
    ProcessManager mgr=new ProcessManager(targetWin32Exe.getPath(),""String_Node_Str"");
    mgr.setEcho(false);
    mgr.execute();
    int ret=mgr.getExitValue();
    if (ret != 0)     throw new RuntimeException(Strings.get(""String_Node_Str"",""String_Node_Str"" + ret,mgr.getStdout(),mgr.getStderr()));
    trace(""String_Node_Str"" + mgr.getStderr());
    trace(""String_Node_Str"" + mgr.getStdout());
  }
}","private void install() throws ProcessManagerException {
  if (info.dryRun) {
    try {
      xmlFileCopy=Strings.get(""String_Node_Str"") + FileUtils.readSmallFile(targetXml);
    }
 catch (    IOException ex) {
    }
    if (!targetWin32Exe.delete())     dryRun(""String_Node_Str"" + targetWin32Exe);
    if (!targetXml.delete())     dryRun(""String_Node_Str"" + targetXml);
  }
 else {
    ProcessManager mgr=new ProcessManager(targetWin32Exe.getPath(),""String_Node_Str"");
    mgr.setEcho(false);
    mgr.execute();
    int ret=mgr.getExitValue();
    if (ret != 0)     throw new RuntimeException(Strings.get(""String_Node_Str"",""String_Node_Str"" + ret,mgr.getStdout(),mgr.getStderr()));
    trace(""String_Node_Str"" + mgr.getStderr());
    trace(""String_Node_Str"" + mgr.getStdout());
  }
}"
29028,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Server targetServer=domain.getServerNamed(target);
  if (targetServer != null) {
    config=domain.getConfigNamed(targetServer.getConfigRef());
  }
  com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
  if (cluster != null) {
    config=domain.getConfigNamed(cluster.getConfigRef());
  }
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  String defaultJmshostStr=jmsservice.getDefaultJmsHost();
  JmsHost defaultJmsHost=null;
  for (  JmsHost jmshost : jmsservice.getJmsHost()) {
    if (defaultJmshostStr.equals(jmshost.getName()))     defaultJmsHost=jmshost;
  }
  String tmpJMSResource=""String_Node_Str"";
  ActionReport subReport=report.addSubActionsReport();
  createJMSResource(defaultJmsHost,subReport,tmpJMSResource);
  if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    boolean value=pingConnectionPool(tmpJMSResource);
    if (!value) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    }
 else {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
  }
 catch (  ResourceException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  deleteJMSResource(subReport,tmpJMSResource);
  if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + tmpJMSResource + ""String_Node_Str"",tmpJMSResource));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Server targetServer=domain.getServerNamed(target);
  if (targetServer != null) {
    config=domain.getConfigNamed(targetServer.getConfigRef());
  }
  com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
  if (cluster != null) {
    config=domain.getConfigNamed(cluster.getConfigRef());
  }
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  String defaultJmshostStr=jmsservice.getDefaultJmsHost();
  JmsHost defaultJmsHost=null;
  for (  JmsHost jmshost : jmsservice.getJmsHost()) {
    if (defaultJmshostStr.equals(jmshost.getName()))     defaultJmsHost=jmshost;
  }
  String tmpJMSResource=""String_Node_Str"";
  ActionReport subReport=report.addSubActionsReport();
  createJMSResource(defaultJmsHost,subReport,tmpJMSResource);
  if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    boolean value=pingConnectionPool(tmpJMSResource + JNDINAME_APPENDER);
    if (!value) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    }
 else {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
  }
 catch (  ResourceException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  deleteJMSResource(subReport,tmpJMSResource);
  if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + tmpJMSResource + ""String_Node_Str"",tmpJMSResource));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
}"
29029,"private HandlerProcessingResult processAnnotation(AnnotationInfo ainfo,WebComponentDescriptor webCompDesc) throws AnnotationProcessorException {
  Class webCompClass=(Class)ainfo.getAnnotatedElement();
  if (!HttpServlet.class.isAssignableFrom(webCompClass)) {
    log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{webCompClass.getName(),WebServlet.class.getName(),HttpServlet.class.getName()}));
    return getDefaultFailedResult();
  }
  WebServlet webServletAn=(WebServlet)ainfo.getAnnotation();
  String webCompImpl=webCompDesc.getWebComponentImplementation();
  if (webCompImpl != null && webCompImpl.length() > 0 && (!webCompImpl.equals(webCompClass.getName()) || !webCompDesc.isServlet())) {
    String messageKey=null;
    String defaultMessage=null;
    if (webCompDesc.isServlet()) {
      messageKey=""String_Node_Str"";
      defaultMessage=""String_Node_Str"";
    }
 else {
      messageKey=""String_Node_Str"";
      defaultMessage=""String_Node_Str"";
    }
    log(Level.SEVERE,ainfo,localStrings.getLocalString(messageKey,defaultMessage,new Object[]{webCompDesc.getName(),webCompImpl,webCompClass.getName(),WebServlet.class.getName()}));
    return getDefaultFailedResult();
  }
  webCompDesc.setServlet(true);
  webCompDesc.setWebComponentImplementation(webCompClass.getName());
  if (webCompDesc.getUrlPatternsSet().size() == 0) {
    String[] urlPatterns=webServletAn.urlPatterns();
    if (urlPatterns == null || urlPatterns.length == 0) {
      urlPatterns=webServletAn.value();
    }
    boolean validUrlPatterns=true;
    if (urlPatterns != null && urlPatterns.length > 0) {
      for (      String up : urlPatterns) {
        if (!URLPattern.isValid(up)) {
          validUrlPatterns=false;
          break;
        }
        webCompDesc.addUrlPattern(up);
      }
    }
    if (!validUrlPatterns) {
      String urlPatternString=(urlPatterns != null) ? Arrays.toString(urlPatterns) : ""String_Node_Str"";
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{webCompClass,urlPatternString}));
    }
  }
  if (webCompDesc.getLoadOnStartUp() == null) {
    webCompDesc.setLoadOnStartUp(webServletAn.loadOnStartup());
  }
  WebInitParam[] initParams=webServletAn.initParams();
  if (initParams != null && initParams.length > 0) {
    for (    WebInitParam initParam : initParams) {
      webCompDesc.addInitializationParameter(new EnvironmentProperty(initParam.name(),initParam.value(),initParam.description()));
    }
  }
  if (webCompDesc.getSmallIconUri() == null) {
    webCompDesc.setSmallIconUri(webServletAn.smallIcon());
  }
  if (webCompDesc.getLargeIconUri() == null) {
    webCompDesc.setLargeIconUri(webServletAn.largeIcon());
  }
  if (webCompDesc.getDescription() == null || webCompDesc.getDescription().length() == 0) {
    webCompDesc.setDescription(webServletAn.description());
  }
  if (webCompDesc.getDisplayName() == null || webCompDesc.getDisplayName().length() == 0) {
    webCompDesc.setDisplayName(webServletAn.displayName());
  }
  if (webCompDesc.isAsyncSupported() == null) {
    webCompDesc.setAsyncSupported(webServletAn.asyncSupported());
  }
  return getDefaultProcessedResult();
}","private HandlerProcessingResult processAnnotation(AnnotationInfo ainfo,WebComponentDescriptor webCompDesc) throws AnnotationProcessorException {
  Class webCompClass=(Class)ainfo.getAnnotatedElement();
  if (!HttpServlet.class.isAssignableFrom(webCompClass)) {
    log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{webCompClass.getName(),WebServlet.class.getName(),HttpServlet.class.getName()}));
    return getDefaultFailedResult();
  }
  WebServlet webServletAn=(WebServlet)ainfo.getAnnotation();
  String servletName=getServletName(webServletAn,webCompClass);
  if (!servletName.equals(webCompDesc.getCanonicalName())) {
    return getDefaultProcessedResult();
  }
  String webCompImpl=webCompDesc.getWebComponentImplementation();
  if (webCompImpl != null && webCompImpl.length() > 0 && (!webCompImpl.equals(webCompClass.getName()) || !webCompDesc.isServlet())) {
    String messageKey=null;
    String defaultMessage=null;
    if (webCompDesc.isServlet()) {
      messageKey=""String_Node_Str"";
      defaultMessage=""String_Node_Str"";
    }
 else {
      messageKey=""String_Node_Str"";
      defaultMessage=""String_Node_Str"";
    }
    log(Level.SEVERE,ainfo,localStrings.getLocalString(messageKey,defaultMessage,new Object[]{webCompDesc.getCanonicalName(),webCompImpl,webCompClass.getName(),WebServlet.class.getName()}));
    return getDefaultFailedResult();
  }
  webCompDesc.setServlet(true);
  webCompDesc.setWebComponentImplementation(webCompClass.getName());
  if (webCompDesc.getUrlPatternsSet().size() == 0) {
    String[] urlPatterns=webServletAn.urlPatterns();
    if (urlPatterns == null || urlPatterns.length == 0) {
      urlPatterns=webServletAn.value();
    }
    boolean validUrlPatterns=true;
    if (urlPatterns != null && urlPatterns.length > 0) {
      for (      String up : urlPatterns) {
        if (!URLPattern.isValid(up)) {
          validUrlPatterns=false;
          break;
        }
        webCompDesc.addUrlPattern(up);
      }
    }
    if (!validUrlPatterns) {
      String urlPatternString=(urlPatterns != null) ? Arrays.toString(urlPatterns) : ""String_Node_Str"";
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{webCompClass,urlPatternString}));
    }
  }
  if (webCompDesc.getLoadOnStartUp() == null) {
    webCompDesc.setLoadOnStartUp(webServletAn.loadOnStartup());
  }
  WebInitParam[] initParams=webServletAn.initParams();
  if (initParams != null && initParams.length > 0) {
    for (    WebInitParam initParam : initParams) {
      webCompDesc.addInitializationParameter(new EnvironmentProperty(initParam.name(),initParam.value(),initParam.description()));
    }
  }
  if (webCompDesc.getSmallIconUri() == null) {
    webCompDesc.setSmallIconUri(webServletAn.smallIcon());
  }
  if (webCompDesc.getLargeIconUri() == null) {
    webCompDesc.setLargeIconUri(webServletAn.largeIcon());
  }
  if (webCompDesc.getDescription() == null || webCompDesc.getDescription().length() == 0) {
    webCompDesc.setDescription(webServletAn.description());
  }
  if (webCompDesc.getDisplayName() == null || webCompDesc.getDisplayName().length() == 0) {
    webCompDesc.setDisplayName(webServletAn.displayName());
  }
  if (webCompDesc.isAsyncSupported() == null) {
    webCompDesc.setAsyncSupported(webServletAn.asyncSupported());
  }
  return getDefaultProcessedResult();
}"
29030,"/** 
 * Creates a new DomainConfigEntryInfo object 
 */
public DomainConfigEntryInfo(String key,String dataType,String displayText,Validator validator){
  this.key=key;
  this.dataType=dataType;
  this.displayText=displayText;
  this.validator=validator;
}","/** 
 * Creates a new DomainConfigEntryInfo object 
 */
public DomainConfigEntryInfo(String key,String dataType,Validator validator){
  this.key=key;
  this.dataType=dataType;
  this.validator=validator;
}"
29031,"public Object run(JmsAvailability param) throws PropertyVetoException, TransactionFailure {
  param.setAvailabilityEnabled(availabilityEnabled.toString());
  if (availabilityEnabled.booleanValue()) {
    param.setMessageStoreType(JDBC);
  }
 else {
    param.setConfigStoreType(configStoreType.toLowerCase());
    param.setMessageStoreType(messageStoreType.toLowerCase());
  }
  param.setDbVendor(dbvendor);
  param.setDbUsername(dbuser);
  param.setDbPassword(jmsDbPassword);
  param.setDbUrl(dburl);
  if (props != null) {
    for (    Map.Entry e : props.entrySet()) {
      Property prop=param.createChild(Property.class);
      prop.setName((String)e.getKey());
      prop.setValue((String)e.getValue());
      param.getProperty().add(prop);
    }
  }
  return param;
}","public Object run(JmsAvailability param) throws PropertyVetoException, TransactionFailure {
  param.setAvailabilityEnabled(availabilityEnabled.toString());
  if (availabilityEnabled.booleanValue()) {
    param.setMessageStoreType(JDBC);
  }
 else {
    param.setConfigStoreType(configStoreType.toLowerCase(Locale.ENGLISH));
    param.setMessageStoreType(messageStoreType.toLowerCase(Locale.ENGLISH));
  }
  param.setDbVendor(dbvendor);
  param.setDbUsername(dbuser);
  param.setDbPassword(jmsDbPassword);
  param.setDbUrl(dburl);
  if (props != null) {
    for (    Map.Entry e : props.entrySet()) {
      Property prop=param.createChild(Property.class);
      prop.setName((String)e.getKey());
      prop.setValue((String)e.getValue());
      param.getProperty().add(prop);
    }
  }
  return param;
}"
29032,"private boolean isSupportedDbVendor(){
  if (dbvendor != null) {
    return SUPPORTED_DB_VENDORS.contains(dbvendor.toLowerCase());
  }
  return false;
}","private boolean isSupportedDbVendor(){
  if (dbvendor != null) {
    return SUPPORTED_DB_VENDORS.contains(dbvendor.toLowerCase(Locale.ENGLISH));
  }
  return false;
}"
29033,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  List instances=cluster.getInstances();
  Config config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsService=config.getExtensionByType(JmsService.class);
  if (jmsService == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!CONVENTIONAL.equalsIgnoreCase(clusterType) && !ENHANCED.equalsIgnoreCase(clusterType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !SHARED_DB.equalsIgnoreCase(configStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && configStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !FILE.equalsIgnoreCase(messageStoreType)&& !JDBC.equalsIgnoreCase(messageStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && messageStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String integrationMode=jmsService.getType();
  if (REMOTE.equalsIgnoreCase(integrationMode)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String changeIntegrationMode=null;
  if (EMBEDDED.equalsIgnoreCase(integrationMode) && ENHANCED.equalsIgnoreCase(clusterType)) {
    try {
      ConfigSupport.apply(new SingleConfigCode<JmsService>(){
        public Object run(        JmsService param) throws PropertyVetoException, TransactionFailure {
          param.setType(LOCAL);
          return param;
        }
      }
,jmsService);
      changeIntegrationMode=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    TransactionFailure tfe) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str"" + tfe.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(tfe);
      return;
    }
  }
  if (MASTER_BROKER.equalsIgnoreCase(configStoreType) && FILE.equals(messageStoreType)) {
    if (dbvendor != null || dburl != null || dbuser != null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (!MASTER_BROKER.equalsIgnoreCase(configStoreType) || ENHANCED.equalsIgnoreCase(clusterType) || JDBC.equalsIgnoreCase(messageStoreType)) {
    if (dbvendor == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (dburl == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (!isSupportedDbVendor()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && configStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    configStoreType=""String_Node_Str"";
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && messageStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    messageStoreType=""String_Node_Str"";
  }
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsAvailability jmsAvailability=config.getAvailabilityService().getExtensionByType(JmsAvailability.class);
  final Boolean availabilityEnabled=Boolean.valueOf(ENHANCED.equalsIgnoreCase(clusterType));
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsAvailability>(){
      public Object run(      JmsAvailability param) throws PropertyVetoException, TransactionFailure {
        param.setAvailabilityEnabled(availabilityEnabled.toString());
        if (availabilityEnabled.booleanValue()) {
          param.setMessageStoreType(JDBC);
        }
 else {
          param.setConfigStoreType(configStoreType.toLowerCase());
          param.setMessageStoreType(messageStoreType.toLowerCase());
        }
        param.setDbVendor(dbvendor);
        param.setDbUsername(dbuser);
        param.setDbPassword(jmsDbPassword);
        param.setDbUrl(dburl);
        if (props != null) {
          for (          Map.Entry e : props.entrySet()) {
            Property prop=param.createChild(Property.class);
            prop.setName((String)e.getKey());
            prop.setValue((String)e.getValue());
            param.getProperty().add(prop);
          }
        }
        return param;
      }
    }
,jmsAvailability);
  }
 catch (  TransactionFailure tfe) {
    report.setMessage((changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str""+ tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  String warning=null;
  if (instances.size() > 0) {
    warning=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
  }
  report.setMessage((warning == null ? ""String_Node_Str"" : warning + ""String_Node_Str"") + (changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  List instances=cluster.getInstances();
  Config config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsService=config.getExtensionByType(JmsService.class);
  if (jmsService == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!CONVENTIONAL.equalsIgnoreCase(clusterType) && !ENHANCED.equalsIgnoreCase(clusterType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !SHARED_DB.equalsIgnoreCase(configStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && configStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !FILE.equalsIgnoreCase(messageStoreType)&& !JDBC.equalsIgnoreCase(messageStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && messageStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String integrationMode=jmsService.getType();
  if (REMOTE.equalsIgnoreCase(integrationMode)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String changeIntegrationMode=null;
  if (EMBEDDED.equalsIgnoreCase(integrationMode) && ENHANCED.equalsIgnoreCase(clusterType)) {
    try {
      ConfigSupport.apply(new SingleConfigCode<JmsService>(){
        public Object run(        JmsService param) throws PropertyVetoException, TransactionFailure {
          param.setType(LOCAL);
          return param;
        }
      }
,jmsService);
      changeIntegrationMode=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    TransactionFailure tfe) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str"" + tfe.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(tfe);
      return;
    }
  }
  if (MASTER_BROKER.equalsIgnoreCase(configStoreType) && FILE.equals(messageStoreType)) {
    if (dbvendor != null || dburl != null || dbuser != null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (!MASTER_BROKER.equalsIgnoreCase(configStoreType) || ENHANCED.equalsIgnoreCase(clusterType) || JDBC.equalsIgnoreCase(messageStoreType)) {
    if (dbvendor == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (dburl == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (!isSupportedDbVendor()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && configStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    configStoreType=""String_Node_Str"";
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && messageStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    messageStoreType=""String_Node_Str"";
  }
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsAvailability jmsAvailability=config.getAvailabilityService().getExtensionByType(JmsAvailability.class);
  final Boolean availabilityEnabled=Boolean.valueOf(ENHANCED.equalsIgnoreCase(clusterType));
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsAvailability>(){
      public Object run(      JmsAvailability param) throws PropertyVetoException, TransactionFailure {
        param.setAvailabilityEnabled(availabilityEnabled.toString());
        if (availabilityEnabled.booleanValue()) {
          param.setMessageStoreType(JDBC);
        }
 else {
          param.setConfigStoreType(configStoreType.toLowerCase(Locale.ENGLISH));
          param.setMessageStoreType(messageStoreType.toLowerCase(Locale.ENGLISH));
        }
        param.setDbVendor(dbvendor);
        param.setDbUsername(dbuser);
        param.setDbPassword(jmsDbPassword);
        param.setDbUrl(dburl);
        if (props != null) {
          for (          Map.Entry e : props.entrySet()) {
            Property prop=param.createChild(Property.class);
            prop.setName((String)e.getKey());
            prop.setValue((String)e.getValue());
            param.getProperty().add(prop);
          }
        }
        return param;
      }
    }
,jmsAvailability);
  }
 catch (  TransactionFailure tfe) {
    report.setMessage((changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str""+ tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  String warning=null;
  if (instances.size() > 0) {
    warning=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
  }
  report.setMessage((warning == null ? ""String_Node_Str"" : warning + ""String_Node_Str"") + (changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
29034,"/** 
 * Returns the message along with the message from any linked exception.
 */
public String getMessage(){
  String retString=null;
  if (_message != null) {
    retString=_message;
  }
  if (linkedException != null && linkedException.getMessage() != null) {
    if (retString != null) {
      retString+=retString + ""String_Node_Str"" + linkedException.getMessage();
    }
 else {
      retString=linkedException.getMessage();
    }
  }
  return retString;
}","/** 
 * Returns the message along with the message from any linked exception.
 */
public String getMessage(){
  String retString=null;
  if (_message != null) {
    retString=_message;
  }
  Exception localLinkedException=linkedException;
  if (localLinkedException != null && localLinkedException.getMessage() != null) {
    if (retString != null) {
      retString+=retString + ""String_Node_Str"" + localLinkedException.getMessage();
    }
 else {
      retString=localLinkedException.getMessage();
    }
  }
  return retString;
}"
29035,"/** 
 * Adds a linked Exception
 * @param ex       the linked Exception
 */
public synchronized void setLinkedException(Exception ex){
  linkedException=ex;
}","/** 
 * Adds a linked Exception
 * @param ex       the linked Exception
 */
public void setLinkedException(Exception ex){
  linkedException=ex;
}"
29036,"private void handlePreExisting(boolean force){
  if (isPreExisting()) {
    if (force) {
      target.delete();
      handlePreExisting(false);
    }
 else {
      throw new RuntimeException(Strings.get(""String_Node_Str"",target,""String_Node_Str""));
    }
  }
}","private void handlePreExisting(boolean force){
  if (isPreExisting()) {
    if (force) {
      boolean result=target.delete();
      if (!result || isPreExisting()) {
        throw new RuntimeException(Strings.get(""String_Node_Str"",target,""String_Node_Str""));
      }
    }
  }
}"
29037,"public String getDomain(){
  if (domain == null) {
    Container parent=this;
    while (parent != null && !(parent instanceof StandardEngine)) {
      parent=parent.getParent();
    }
    if (parent instanceof StandardEngine) {
      domain=((StandardEngine)parent).getDomain();
    }
  }
  return domain;
}","public String getDomain(){
  if (domain == null) {
    Container parent=this;
    while (parent != null && !(parent instanceof StandardEngine)) {
      parent=parent.getParent();
    }
    if (parent != null) {
      domain=((StandardEngine)parent).getDomain();
    }
  }
  return domain;
}"
29038,"/** 
 * Switches the underlying output stream from a memory based stream to one that is backed by disk. This is the point at which we realise that too much data is being written to keep in memory, so we elect to switch to disk-based storage.
 * @exception IOException if an error occurs.
 */
protected void thresholdReached() throws IOException {
  if (prefix != null) {
    outputFile=File.createTempFile(prefix,suffix,directory);
  }
  FileOutputStream fos=new FileOutputStream(outputFile);
  memoryOutputStream.writeTo(fos);
  currentOutputStream=fos;
  memoryOutputStream=null;
}","/** 
 * Switches the underlying output stream from a memory based stream to one that is backed by disk. This is the point at which we realise that too much data is being written to keep in memory, so we elect to switch to disk-based storage.
 * @exception IOException if an error occurs.
 */
protected void thresholdReached() throws IOException {
  if (prefix != null) {
    outputFile=File.createTempFile(prefix,suffix,directory);
  }
  FileOutputStream fos=null;
  try {
    fos=new FileOutputStream(outputFile);
    memoryOutputStream.writeTo(fos);
    currentOutputStream=fos;
    memoryOutputStream=null;
  }
 catch (  IOException e) {
    if (fos != null) {
      fos.close();
    }
    throw e;
  }
}"
29039,"/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public HostRuleSet(String prefix){
  super();
  this.namespaceURI=null;
  this.prefix=prefix;
}","/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public HostRuleSet(String prefix){
  super();
  this.prefix=prefix;
}"
29040,"private static File getServiceTagRegistry(File serviceTagRegistry){
  if (!serviceTagRegistry.exists()) {
    File serviceTagLink=new File(getRegistrationHome(),SERVICE_TAG_REGISTRY_LINK_NAME);
    if (serviceTagLink.exists()) {
      BufferedReader in=null;
      try {
        in=new BufferedReader(new FileReader(serviceTagLink));
        String indirectedServiceTagRegistryName=in.readLine();
        File indirectedServiceTagRegisitryFile=new File(indirectedServiceTagRegistryName);
        if (indirectedServiceTagRegisitryFile.exists()) {
          serviceTagRegistry=indirectedServiceTagRegisitryFile;
        }
      }
 catch (      IOException e) {
      }
 finally {
        if (in != null)         try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
    }
 else {
    }
  }
  return serviceTagRegistry;
}","private static File getServiceTagRegistry(File serviceTagRegistry){
  if (!serviceTagRegistry.exists()) {
    File serviceTagLink=new File(getRegistrationHome(),SERVICE_TAG_REGISTRY_LINK_NAME);
    if (serviceTagLink.exists()) {
      BufferedReader in=null;
      try {
        in=new BufferedReader(new FileReader(serviceTagLink));
        String indirectedServiceTagRegistryName=in.readLine();
        if (indirectedServiceTagRegistryName != null) {
          File indirectedServiceTagRegisitryFile=new File(indirectedServiceTagRegistryName);
          if (indirectedServiceTagRegisitryFile.exists()) {
            serviceTagRegistry=indirectedServiceTagRegisitryFile;
          }
        }
      }
 catch (      IOException e) {
      }
 finally {
        if (in != null)         try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
    }
 else {
    }
  }
  return serviceTagRegistry;
}"
29041,"/** 
 * This methos invokes the Derby's NetworkServerControl to start/stop/ping the database.
 */
private void invokeNetworkServerControl(){
  try {
    Class networkServer=Class.forName(""String_Node_Str"");
    Method networkServerMethod=networkServer.getDeclaredMethod(""String_Node_Str"",new Class[]{String[].class});
    Object[] paramObj=null;
    if (derbyUser == null && derbyPassword == null) {
      paramObj=new Object[]{new String[]{derbyCommand,""String_Node_Str"",derbyHost,""String_Node_Str"",derbyPort}};
    }
 else {
      paramObj=new Object[]{new String[]{derbyCommand,""String_Node_Str"",derbyHost,""String_Node_Str"",derbyPort,""String_Node_Str"",derbyUser,""String_Node_Str"",derbyPassword}};
    }
    networkServerMethod.invoke(networkServer,paramObj);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    System.exit(2);
  }
}","/** 
 * This methos invokes the Derby's NetworkServerControl to start/stop/ping the database.
 */
private void invokeNetworkServerControl(){
  try {
    Class networkServer=Class.forName(""String_Node_Str"");
    Method networkServerMethod=networkServer.getDeclaredMethod(""String_Node_Str"",new Class[]{String[].class});
    Object[] paramObj=null;
    if (derbyUser == null && derbyPassword == null) {
      paramObj=new Object[]{new String[]{derbyCommand,""String_Node_Str"",derbyHost,""String_Node_Str"",derbyPort}};
    }
 else {
      paramObj=new Object[]{new String[]{derbyCommand,""String_Node_Str"",derbyHost,""String_Node_Str"",derbyPort,""String_Node_Str"",derbyUser,""String_Node_Str"",derbyPassword}};
    }
    networkServerMethod.invoke(networkServer,paramObj);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    Runtime.getRuntime().exit(2);
  }
}"
29042,"public static void addIndex(Config c,ServiceLocator habitat,String name){
  ActiveDescriptor<?> bob=ServiceLocatorUtilities.addOneDescriptor(habitat,BuilderHelper.createConstantDescriptor(c,name,Config.class));
  ConfigBeanProxy dirref[]={c.getAdminService(),c.getAvailabilityService(),c.getDiagnosticService(),c.getHttpService(),c.getJavaConfig(),c.getLogService(),c.getNetworkConfig(),c.getSecurityService(),c.getThreadPools(),c.getMonitoringService()};
  for (  ConfigBeanProxy cbp : dirref) {
    if (cbp != null) {
      ServiceLocatorUtilities.addOneDescriptor(habitat,BuilderHelper.createConstantDescriptor(cbp,name,ConfigSupport.getImpl(cbp).getProxyType()));
    }
  }
  for (  Container extension : c.getContainers()) {
    ServiceLocatorUtilities.addOneDescriptor(habitat,BuilderHelper.createConstantDescriptor(extension,name,ConfigSupport.getImpl(extension).getProxyType()));
  }
}","public static void addIndex(Config c,ServiceLocator habitat,String name){
  ServiceLocatorUtilities.addOneDescriptor(habitat,BuilderHelper.createConstantDescriptor(c,name,Config.class));
  ConfigBeanProxy dirref[]={c.getAdminService(),c.getAvailabilityService(),c.getDiagnosticService(),c.getHttpService(),c.getJavaConfig(),c.getLogService(),c.getNetworkConfig(),c.getSecurityService(),c.getThreadPools(),c.getMonitoringService()};
  for (  ConfigBeanProxy cbp : dirref) {
    if (cbp != null) {
      ServiceLocatorUtilities.addOneDescriptor(habitat,BuilderHelper.createConstantDescriptor(cbp,name,ConfigSupport.getImpl(cbp).getProxyType()));
    }
  }
  for (  Container extension : c.getContainers()) {
    ServiceLocatorUtilities.addOneDescriptor(habitat,BuilderHelper.createConstantDescriptor(extension,name,ConfigSupport.getImpl(extension).getProxyType()));
  }
}"
29043,"public boolean checkInterfaces(Class[] ifs,Type actualGenericParameter){
  for (  Class clz : ifs) {
    if (clz.getSimpleName().equals(""String_Node_Str"") || clz.getSimpleName().equals(""String_Node_Str"") || clz.getSimpleName().equals(""String_Node_Str"")) {
      continue;
    }
    if (clz.isAssignableFrom((Class)actualGenericParameter)) {
      return true;
    }
  }
  return false;
}","public boolean checkInterfaces(Class[] ifs,Type actualGenericParameter){
  for (  Class clz : ifs) {
    if (clz.getSimpleName().equals(""String_Node_Str"") || clz.getSimpleName().equals(""String_Node_Str"") || clz.getSimpleName().equals(""String_Node_Str"")) {
      continue;
    }
    if (actualGenericParameter instanceof Class && clz.isAssignableFrom((Class)actualGenericParameter)) {
      return true;
    }
  }
  return false;
}"
29044,"@Override public void postConstruct(){
  Config defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
  if (defaultConfig != null) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.INFO,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  String installRoot=System.getProperty(INSTALL_ROOT);
  if (installRoot == null) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.INFO,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    return;
  }
  Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.INFO,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  String template=getDomainXmlTemplate();
  if (template == null) {
    throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    ConfigSupport.apply(new MinDefaultConfigCode(),configs);
    defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
    createParser(template);
    createDefaultConfigAttr(defaultConfig);
    createHttpServiceConfig(defaultConfig);
    createAdminServiceConfig(defaultConfig);
    createLogServiceConfig(defaultConfig);
    createSecurityServiceConfig(defaultConfig);
    createDiagnosticServiceConfig(defaultConfig);
    createJavaConfig(defaultConfig);
    createAvailabilityService(defaultConfig);
    createNetworkConfig(defaultConfig);
    createThreadPools(defaultConfig);
    createSystemProperties(defaultConfig);
  }
 catch (  TransactionFailure ex) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.SEVERE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ex);
  }
catch (  FileNotFoundException ex) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.SEVERE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ex);
  }
catch (  XMLStreamException ex) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.SEVERE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ex);
  }
 finally {
    try {
      if (parser != null) {
        parser.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (reader != null) {
        reader.close();
      }
    }
 catch (    Exception e) {
    }
  }
}","@Override public void postConstruct(){
  Config defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
  if (defaultConfig != null) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.INFO,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  String installRoot=System.getProperty(INSTALL_ROOT);
  if (installRoot == null) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.INFO,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    return;
  }
  Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.INFO,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  String template=getDomainXmlTemplate();
  try {
    ConfigSupport.apply(new MinDefaultConfigCode(),configs);
    defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
    createParser(template);
    createDefaultConfigAttr(defaultConfig);
    createHttpServiceConfig(defaultConfig);
    createAdminServiceConfig(defaultConfig);
    createLogServiceConfig(defaultConfig);
    createSecurityServiceConfig(defaultConfig);
    createDiagnosticServiceConfig(defaultConfig);
    createJavaConfig(defaultConfig);
    createAvailabilityService(defaultConfig);
    createNetworkConfig(defaultConfig);
    createThreadPools(defaultConfig);
    createSystemProperties(defaultConfig);
  }
 catch (  TransactionFailure ex) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.SEVERE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ex);
  }
catch (  FileNotFoundException ex) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.SEVERE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ex);
  }
catch (  XMLStreamException ex) {
    Logger.getLogger(DefaultConfigUpgrade.class.getName()).log(Level.SEVERE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ex);
  }
 finally {
    try {
      if (parser != null) {
        parser.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (reader != null) {
        reader.close();
      }
    }
 catch (    Exception e) {
    }
  }
}"
29045,"public Class getClassFor(String serviceName){
  serviceName=getServiceTypeNameIfNamedComponent(serviceName);
  ConfigInjector injector=serviceLocator.getService(ConfigInjector.class,serviceName.toLowerCase());
  return getClassFromInjector(injector);
}","public Class getClassFor(String serviceName){
  serviceName=getServiceTypeNameIfNamedComponent(serviceName);
  ConfigInjector injector=serviceLocator.getService(ConfigInjector.class,serviceName.toLowerCase(Locale.getDefault()));
  return getClassFromInjector(injector);
}"
29046,"private static boolean equalsStr(String s,String t){
  if (s == t)   return true;
  if ((s != null) && (t != null)) {
    return s.equals(t);
  }
  return false;
}","private static boolean equalsStr(String s,String t){
  if (s == null && t == null)   return true;
  if ((s != null) && (t != null)) {
    return s.equals(t);
  }
  return false;
}"
29047,"private static boolean equalsStrIgnoreCase(String s,String t){
  if (s == t)   return true;
  if ((s != null) && (t != null)) {
    return s.equalsIgnoreCase(t);
  }
  return false;
}","private static boolean equalsStrIgnoreCase(String s,String t){
  if (s == null && t == null)   return true;
  if ((s != null) && (t != null)) {
    return s.equalsIgnoreCase(t);
  }
  return false;
}"
29048,"private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs){
  try {
    if (archive.exists(WEB_INF_BEANS_XML) || archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str""+ WEB_INF_BEANS_XML+ ""String_Node_Str""+ WEB_INF_CLASSES_META_INF_BEANS_XML);
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            beanClasses.add(getClassLoader().loadClass(className));
            moduleClasses.add(getClassLoader().loadClass(className));
          }
 catch (          Throwable t) {
            logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          URI uri=archive.getURI();
          File file=new File(uri.getPath() + entry);
          beansXmlUrLs.add(file.toURI().toURL());
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI());
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else           if (weblibJarArchive.exists(META_INF_SERVICES_EXTENSION)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else {
            logger.log(FINE,""String_Node_Str"" + archive.getName() + ""String_Node_Str"");
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,WEB_INF_LIB + SEPARATOR_CHAR + libJarArchive.getName());
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
    if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      collectRarInfo(archive);
    }
    if (archive.exists(META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true);
    }
    if (archive.exists(META_INF_SERVICES_EXTENSION)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.UNKNOWN;
      collectJarInfo(archive,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}","private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs){
  try {
    if (archive.exists(WEB_INF_BEANS_XML) || archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str""+ WEB_INF_BEANS_XML+ ""String_Node_Str""+ WEB_INF_CLASSES_META_INF_BEANS_XML);
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            beanClasses.add(getClassLoader().loadClass(className));
            moduleClasses.add(getClassLoader().loadClass(className));
          }
 catch (          Throwable t) {
            logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          URI uri=archive.getURI();
          File file=new File(uri.getPath() + entry);
          URL beansXmlUrl=file.toURI().toURL();
          if (!beansXmlUrLs.contains(beansXmlUrl)) {
            beansXmlUrLs.add(file.toURI().toURL());
          }
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI());
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else           if (weblibJarArchive.exists(META_INF_SERVICES_EXTENSION)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else {
            logger.log(FINE,""String_Node_Str"" + archive.getName() + ""String_Node_Str"");
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,WEB_INF_LIB + SEPARATOR_CHAR + libJarArchive.getName());
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
    if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      collectRarInfo(archive);
    }
    if (archive.exists(META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true);
    }
    if (archive.exists(META_INF_SERVICES_EXTENSION)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.UNKNOWN;
      collectJarInfo(archive,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}"
29049,"private void handleEntry(String entry,boolean isBeanArchive) throws ClassNotFoundException {
  if (legalClassName(entry)) {
    String className=filenameToClassname(entry);
    try {
      if (isBeanArchive) {
        beanClasses.add(getClassLoader().loadClass(className));
      }
      moduleClasses.add(getClassLoader().loadClass(className));
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
    }
  }
 else   if (entry.endsWith(""String_Node_Str"")) {
    URL beansXmlUrl=Thread.currentThread().getContextClassLoader().getResource(entry);
    if (beansXmlUrl != null) {
      beansXmlUrLs.add(beansXmlUrl);
    }
  }
}","private void handleEntry(String entry,boolean isBeanArchive) throws ClassNotFoundException {
  if (legalClassName(entry)) {
    String className=filenameToClassname(entry);
    try {
      if (isBeanArchive) {
        beanClasses.add(getClassLoader().loadClass(className));
      }
      moduleClasses.add(getClassLoader().loadClass(className));
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
    }
  }
 else   if (entry.endsWith(""String_Node_Str"")) {
    URL beansXmlUrl=Thread.currentThread().getContextClassLoader().getResource(entry);
    if (beansXmlUrl != null && !beansXmlUrLs.contains(beansXmlUrl)) {
      beansXmlUrLs.add(beansXmlUrl);
    }
  }
}"
29050,"public BeanDeploymentArchiveImpl(String id,List<Class<?>> wClasses,Set<URI> wUris,Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs,DeploymentContext ctx){
  this.id=id;
  this.moduleClasses=wClasses;
  this.beanClasses=new ArrayList<Class<?>>(wClasses);
  this.wUris=wUris;
  this.ejbDescImpls=new HashSet<EjbDescriptor<?>>();
  this.beanDeploymentArchives=new ArrayList<BeanDeploymentArchive>();
  this.context=ctx;
  populateEJBsForThisBDA(ejbs);
  this.moduleClassLoaderForBDA=Thread.currentThread().getContextClassLoader();
}","public BeanDeploymentArchiveImpl(String id,List<Class<?>> wClasses,List<URL> beansXmlUrls,Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs,DeploymentContext ctx){
  this.id=id;
  this.moduleClasses=wClasses;
  this.beanClasses=new ArrayList<Class<?>>(wClasses);
  this.beansXmlUrLs=beansXmlUrls;
  this.ejbDescImpls=new HashSet<EjbDescriptor<?>>();
  this.beanDeploymentArchives=new ArrayList<BeanDeploymentArchive>();
  this.context=ctx;
  populateEJBsForThisBDA(ejbs);
  this.moduleClassLoaderForBDA=Thread.currentThread().getContextClassLoader();
}"
29051,"public BeansXml getBeansXml(){
  WeldBootstrap wb=context.getTransientAppMetaData(WeldDeployer.WELD_BOOTSTRAP,WeldBootstrap.class);
  List<URL> sl=new ArrayList<URL>();
  for (  URI u : wUris) {
    try {
      sl.add(u.toURL());
    }
 catch (    MalformedURLException mfue) {
      logger.log(Level.WARNING,""String_Node_Str"" + u,mfue);
    }
  }
  return wb.parse(sl);
}","public BeansXml getBeansXml(){
  WeldBootstrap wb=context.getTransientAppMetaData(WeldDeployer.WELD_BOOTSTRAP,WeldBootstrap.class);
  return wb.parse(beansXmlUrLs);
}"
29052,"private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs){
  try {
    if (archive.exists(WEB_INF_BEANS_XML) || archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str""+ WEB_INF_BEANS_XML+ ""String_Node_Str""+ WEB_INF_CLASSES_META_INF_BEANS_XML);
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            beanClasses.add(getClassLoader().loadClass(className));
            moduleClasses.add(getClassLoader().loadClass(className));
          }
 catch (          Throwable t) {
            logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          URI uri=archive.getURI();
          File file=new File(uri.getPath() + entry);
          URI beansXmlUri=file.toURI();
          wUris.add(beansXmlUri);
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI());
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else           if (weblibJarArchive.exists(META_INF_SERVICES_EXTENSION)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else {
            logger.log(FINE,""String_Node_Str"" + archive.getName() + ""String_Node_Str"");
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,WEB_INF_LIB + SEPARATOR_CHAR + libJarArchive.getName());
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
    if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      collectRarInfo(archive);
    }
    if (archive.exists(META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true);
    }
    if (archive.exists(META_INF_SERVICES_EXTENSION)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.UNKNOWN;
      collectJarInfo(archive,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}","private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs){
  try {
    if (archive.exists(WEB_INF_BEANS_XML) || archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str""+ WEB_INF_BEANS_XML+ ""String_Node_Str""+ WEB_INF_CLASSES_META_INF_BEANS_XML);
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            beanClasses.add(getClassLoader().loadClass(className));
            moduleClasses.add(getClassLoader().loadClass(className));
          }
 catch (          Throwable t) {
            logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          URI uri=archive.getURI();
          File file=new File(uri.getPath() + entry);
          beansXmlUrLs.add(file.toURI().toURL());
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI());
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else           if (weblibJarArchive.exists(META_INF_SERVICES_EXTENSION)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else {
            logger.log(FINE,""String_Node_Str"" + archive.getName() + ""String_Node_Str"");
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,WEB_INF_LIB + SEPARATOR_CHAR + libJarArchive.getName());
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
    if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      collectRarInfo(archive);
    }
    if (archive.exists(META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true);
    }
    if (archive.exists(META_INF_SERVICES_EXTENSION)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.UNKNOWN;
      collectJarInfo(archive,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}"
29053,"private void handleEntry(String entry,boolean isBeanArchive) throws ClassNotFoundException {
  if (legalClassName(entry)) {
    String className=filenameToClassname(entry);
    try {
      if (isBeanArchive) {
        beanClasses.add(getClassLoader().loadClass(className));
      }
      moduleClasses.add(getClassLoader().loadClass(className));
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
    }
  }
 else   if (entry.endsWith(""String_Node_Str"")) {
    try {
      URL beansXmlUrl=Thread.currentThread().getContextClassLoader().getResource(entry);
      if (beansXmlUrl != null) {
        wUris.add(beansXmlUrl.toURI());
      }
    }
 catch (    URISyntaxException use) {
      logger.log(Level.WARNING,""String_Node_Str"" + entry,use);
    }
  }
}","private void handleEntry(String entry,boolean isBeanArchive) throws ClassNotFoundException {
  if (legalClassName(entry)) {
    String className=filenameToClassname(entry);
    try {
      if (isBeanArchive) {
        beanClasses.add(getClassLoader().loadClass(className));
      }
      moduleClasses.add(getClassLoader().loadClass(className));
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
    }
  }
 else   if (entry.endsWith(""String_Node_Str"")) {
    URL beansXmlUrl=Thread.currentThread().getContextClassLoader().getResource(entry);
    if (beansXmlUrl != null) {
      beansXmlUrLs.add(beansXmlUrl);
    }
  }
}"
29054,"@Override public BeanDeploymentArchive loadBeanDeploymentArchive(Class<?> beanClass){
  logger.log(FINE,""String_Node_Str"" + beanClass);
  List<BeanDeploymentArchive> beanDeploymentArchives=getBeanDeploymentArchives();
  ListIterator<BeanDeploymentArchive> lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ bda.getId());
    if (((BeanDeploymentArchiveImpl)bda).getModuleBeanClassObjects().contains(beanClass)) {
      logger.log(FINE,""String_Node_Str"" + ""String_Node_Str"" + beanClass.getName() + ""String_Node_Str""+ ""String_Node_Str""+ bda);
      logger.log(FINE,""String_Node_Str"" + bda);
      return bda;
    }
    if (bda.getBeanDeploymentArchives().size() > 0) {
      for (      BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
        Collection<Class<?>> moduleBeanClasses=((BeanDeploymentArchiveImpl)subBda).getModuleBeanClassObjects();
        logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ subBda.getId());
        boolean match=moduleBeanClasses.contains(beanClass);
        if (match) {
          logger.log(FINE,""String_Node_Str"" + ""String_Node_Str"" + beanClass.getName() + ""String_Node_Str""+ ""String_Node_Str""+ subBda);
          logger.log(FINE,""String_Node_Str"" + subBda);
          return subBda;
        }
      }
    }
  }
  logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ ""String_Node_Str"");
  List<Class<?>> beanClasses=new ArrayList<Class<?>>();
  Set<URI> beanXMLUris=new CopyOnWriteArraySet<URI>();
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  beanClasses.add(beanClass);
  WeldGFExtension gfExtension=beanClass.getAnnotation(WeldGFExtension.class);
  if (gfExtension != null)   beanClasses.addAll(java.util.Arrays.asList(gfExtension.beans()));
  BeanDeploymentArchive newBda=new BeanDeploymentArchiveImpl(beanClass.getName(),beanClasses,beanXMLUris,ejbs,context);
  logger.log(FINE,""String_Node_Str"" + newBda + ""String_Node_Str""+ ""String_Node_Str"");
  lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    bda.getBeanDeploymentArchives().add(newBda);
  }
  logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ ""String_Node_Str""+ newBda);
  return newBda;
}","@Override public BeanDeploymentArchive loadBeanDeploymentArchive(Class<?> beanClass){
  logger.log(FINE,""String_Node_Str"" + beanClass);
  List<BeanDeploymentArchive> beanDeploymentArchives=getBeanDeploymentArchives();
  ListIterator<BeanDeploymentArchive> lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ bda.getId());
    if (((BeanDeploymentArchiveImpl)bda).getModuleBeanClassObjects().contains(beanClass)) {
      logger.log(FINE,""String_Node_Str"" + ""String_Node_Str"" + beanClass.getName() + ""String_Node_Str""+ ""String_Node_Str""+ bda);
      logger.log(FINE,""String_Node_Str"" + bda);
      return bda;
    }
    if (bda.getBeanDeploymentArchives().size() > 0) {
      for (      BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
        Collection<Class<?>> moduleBeanClasses=((BeanDeploymentArchiveImpl)subBda).getModuleBeanClassObjects();
        logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ subBda.getId());
        boolean match=moduleBeanClasses.contains(beanClass);
        if (match) {
          logger.log(FINE,""String_Node_Str"" + ""String_Node_Str"" + beanClass.getName() + ""String_Node_Str""+ ""String_Node_Str""+ subBda);
          logger.log(FINE,""String_Node_Str"" + subBda);
          return subBda;
        }
      }
    }
  }
  logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ ""String_Node_Str"");
  List<Class<?>> beanClasses=new ArrayList<Class<?>>();
  List<URL> beanXMLUrls=new CopyOnWriteArrayList<URL>();
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  beanClasses.add(beanClass);
  WeldGFExtension gfExtension=beanClass.getAnnotation(WeldGFExtension.class);
  if (gfExtension != null)   beanClasses.addAll(java.util.Arrays.asList(gfExtension.beans()));
  BeanDeploymentArchive newBda=new BeanDeploymentArchiveImpl(beanClass.getName(),beanClasses,beanXMLUrls,ejbs,context);
  logger.log(FINE,""String_Node_Str"" + newBda + ""String_Node_Str""+ ""String_Node_Str"");
  lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    bda.getBeanDeploymentArchives().add(newBda);
  }
  logger.log(FINE,""String_Node_Str"" + beanClass + ""String_Node_Str""+ ""String_Node_Str""+ newBda);
  return newBda;
}"
29055,"private void bindIntermediateContexts(Map namespace,String name) throws NamingException {
  String partialName;
  if (name.startsWith(""String_Node_Str"")) {
    partialName=""String_Node_Str"";
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    partialName=""String_Node_Str"";
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    partialName=""String_Node_Str"";
  }
 else {
    throw new NamingException(""String_Node_Str"" + name);
  }
  name=name.substring((partialName + ""String_Node_Str"").length());
  StringTokenizer toks=new StringTokenizer(name,""String_Node_Str"",false);
  while (toks.hasMoreTokens()) {
    String tok=toks.nextToken();
    partialName=partialName + ""String_Node_Str"" + tok;
    if (namespace.get(partialName) == null) {
      namespace.put(partialName,new JavaURLContext(partialName,null));
    }
  }
}","private void bindIntermediateContexts(Map namespace,String name) throws NamingException {
  String partialName;
  if (name.startsWith(""String_Node_Str"")) {
    partialName=""String_Node_Str"";
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    partialName=""String_Node_Str"";
  }
 else   if (name.startsWith(""String_Node_Str"")) {
    partialName=""String_Node_Str"";
  }
 else {
    throw new NamingException(""String_Node_Str"" + name);
  }
  name=name.substring((partialName + ""String_Node_Str"").length());
  StringTokenizer toks=new StringTokenizer(name,""String_Node_Str"",false);
  StringBuilder sb=new StringBuilder();
  sb.append(partialName);
  while (toks.hasMoreTokens()) {
    String tok=toks.nextToken();
    sb.append(""String_Node_Str"").append(tok);
    partialName=sb.toString();
    if (namespace.get(partialName) == null) {
      namespace.put(partialName,new JavaURLContext(partialName,null));
    }
  }
}"
29056,"private ParameterMap populateConnectionPoolParameters(){
  String steadyPoolSize=null;
  String maxPoolSize=null;
  String poolResizeQuantity=null;
  String idleTimeoutInSecs=null;
  String maxWaitTimeInMillis=null;
  String failAllConnections=null;
  String transactionSupport=null;
  ParameterMap parameters=new ParameterMap();
  if (props != null) {
    Enumeration keys=props.keys();
    Properties tmpProps=new Properties();
    while (keys.hasMoreElements()) {
      String propKey=(String)keys.nextElement();
      if (""String_Node_Str"".equals(propKey))       steadyPoolSize=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       maxPoolSize=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       poolResizeQuantity=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       idleTimeoutInSecs=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       maxWaitTimeInMillis=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       transactionSupport=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       failAllConnections=props.getProperty(propKey);
 else {
        if (""String_Node_Str"".equals(propKey)) {
          String addressListProp=props.getProperty(propKey);
          props.setProperty(propKey,""String_Node_Str"" + addressListProp + ""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(propKey)) {
          String password=props.getProperty(propKey);
          if (isPasswordAlias(password))           props.setProperty(propKey,""String_Node_Str"" + password + ""String_Node_Str"");
        }
        tmpProps.setProperty(propKey,props.getProperty(propKey));
      }
    }
    if (tmpProps.size() > 0) {
      String propString=""String_Node_Str"";
      for (      java.util.Map.Entry<Object,Object> prop : tmpProps.entrySet()) {
        propString+=prop.getKey() + ""String_Node_Str"" + prop.getValue()+ ""String_Node_Str"";
      }
      propString=propString.substring(0,propString.length());
      parameters.set(""String_Node_Str"",propString);
    }
  }
  parameters.set(DEFAULT_OPERAND,jndiNameForConnectionPool);
  parameters.set(""String_Node_Str"",jndiName);
  if (description != null)   parameters.set(""String_Node_Str"",description);
  String raName=DEFAULT_JMS_ADAPTER;
  parameters.set(""String_Node_Str"",raName);
  parameters.set(""String_Node_Str"",resourceType);
  parameters.set(""String_Node_Str"",(maxPoolSize == null) ? ""String_Node_Str"" : maxPoolSize);
  parameters.set(""String_Node_Str"",(steadyPoolSize == null) ? ""String_Node_Str"" : steadyPoolSize);
  if (poolResizeQuantity != null) {
    parameters.set(""String_Node_Str"",poolResizeQuantity);
  }
  if (idleTimeoutInSecs != null) {
    parameters.set(""String_Node_Str"",idleTimeoutInSecs);
  }
  if (maxWaitTimeInMillis != null) {
    parameters.set(""String_Node_Str"",maxWaitTimeInMillis);
  }
  if (failAllConnections != null) {
    parameters.set(""String_Node_Str"",failAllConnections);
  }
  if (transactionSupport != null) {
    parameters.set(""String_Node_Str"",transactionSupport);
  }
  return parameters;
}","private ParameterMap populateConnectionPoolParameters(){
  String steadyPoolSize=null;
  String maxPoolSize=null;
  String poolResizeQuantity=null;
  String idleTimeoutInSecs=null;
  String maxWaitTimeInMillis=null;
  String failAllConnections=null;
  String transactionSupport=null;
  ParameterMap parameters=new ParameterMap();
  if (props != null) {
    Enumeration keys=props.keys();
    Properties tmpProps=new Properties();
    while (keys.hasMoreElements()) {
      String propKey=(String)keys.nextElement();
      if (""String_Node_Str"".equals(propKey))       steadyPoolSize=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       maxPoolSize=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       poolResizeQuantity=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       idleTimeoutInSecs=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       maxWaitTimeInMillis=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       transactionSupport=props.getProperty(propKey);
 else       if (""String_Node_Str"".equals(propKey))       failAllConnections=props.getProperty(propKey);
 else {
        if (""String_Node_Str"".equals(propKey)) {
          String addressListProp=props.getProperty(propKey);
          props.setProperty(propKey,""String_Node_Str"" + addressListProp + ""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(propKey)) {
          String password=props.getProperty(propKey);
          if (isPasswordAlias(password))           props.setProperty(propKey,""String_Node_Str"" + password + ""String_Node_Str"");
        }
        tmpProps.setProperty(propKey,props.getProperty(propKey));
      }
    }
    if (tmpProps.size() > 0) {
      StringBuilder builder=new StringBuilder();
      for (      java.util.Map.Entry<Object,Object> prop : tmpProps.entrySet()) {
        builder.append(prop.getKey()).append(""String_Node_Str"").append(prop.getValue()).append(""String_Node_Str"");
      }
      String propString=builder.toString();
      int lastColonIndex=propString.lastIndexOf(""String_Node_Str"");
      if (lastColonIndex >= 0) {
        propString=propString.substring(0,lastColonIndex);
      }
      parameters.set(""String_Node_Str"",propString);
    }
  }
  parameters.set(DEFAULT_OPERAND,jndiNameForConnectionPool);
  parameters.set(""String_Node_Str"",jndiName);
  if (description != null)   parameters.set(""String_Node_Str"",description);
  String raName=DEFAULT_JMS_ADAPTER;
  parameters.set(""String_Node_Str"",raName);
  parameters.set(""String_Node_Str"",resourceType);
  parameters.set(""String_Node_Str"",(maxPoolSize == null) ? ""String_Node_Str"" : maxPoolSize);
  parameters.set(""String_Node_Str"",(steadyPoolSize == null) ? ""String_Node_Str"" : steadyPoolSize);
  if (poolResizeQuantity != null) {
    parameters.set(""String_Node_Str"",poolResizeQuantity);
  }
  if (idleTimeoutInSecs != null) {
    parameters.set(""String_Node_Str"",idleTimeoutInSecs);
  }
  if (maxWaitTimeInMillis != null) {
    parameters.set(""String_Node_Str"",maxWaitTimeInMillis);
  }
  if (failAllConnections != null) {
    parameters.set(""String_Node_Str"",failAllConnections);
  }
  if (transactionSupport != null) {
    parameters.set(""String_Node_Str"",transactionSupport);
  }
  return parameters;
}"
29057,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  if (resourceType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (jndiName == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!(resourceType.equals(TOPIC_CF) || resourceType.equals(QUEUE_CF) || resourceType.equals(UNIFIED_CF)|| resourceType.equals(TOPIC)|| resourceType.equals(QUEUE))) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  jndiNameForConnectionPool=jndiName + JNDINAME_APPENDER;
  if (force) {
    Resource res=null;
    if (resourceType.equals(TOPIC) || resourceType.equals(QUEUE))     res=ConnectorsUtil.getResourceByName(domain.getResources(),AdminObjectResource.class,jndiName);
 else     res=ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorResource.class,jndiName);
    if (res != null) {
      ActionReport deleteReport=report.addSubActionsReport();
      ParameterMap parameters=new ParameterMap();
      parameters.set(DEFAULT_OPERAND,jndiName);
      parameters.set(""String_Node_Str"",target);
      commandRunner.getCommandInvocation(""String_Node_Str"",deleteReport).parameters(parameters).execute();
      if (ActionReport.ExitCode.FAILURE.equals(deleteReport.getActionExitCode())) {
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  populateJmsRAMap();
  if (props != null) {
    Enumeration en=props.keys();
    while (en.hasMoreElements()) {
      String key=(String)en.nextElement();
      String raKey=getMappedName(key);
      if (raKey == null)       raKey=key;
      props.put(raKey,(String)props.get(key));
      if (!raKey.equals(key))       props.remove(key);
    }
  }
  ActionReport subReport=report.addSubActionsReport();
  if (resourceType.equals(TOPIC_CF) || resourceType.equals(QUEUE_CF) || resourceType.equals(UNIFIED_CF)) {
    ConnectorConnectionPool cpool=(ConnectorConnectionPool)ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorConnectionPool.class,jndiNameForConnectionPool);
    boolean createdPool=false;
    if (cpool == null || !filterForTarget(jndiNameForConnectionPool)) {
      ParameterMap parameters=populateConnectionPoolParameters();
      commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(parameters).execute();
      createdPool=true;
      if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
    ParameterMap params=populateConnectionResourceParameters();
    commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(params).execute();
    if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      if (createdPool)       commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(populateConnectionPoolParameters()).execute();
      return;
    }
  }
 else   if (resourceType.equals(TOPIC) || resourceType.equals(QUEUE)) {
    ParameterMap aoAttrList=new ParameterMap();
    try {
      Properties properties=validateDestinationResourceProps(props,jndiName);
      String propString=""String_Node_Str"";
      for (      java.util.Map.Entry<Object,Object> prop : properties.entrySet()) {
        propString+=prop.getKey() + ""String_Node_Str"" + prop.getValue()+ ""String_Node_Str"";
      }
      propString=propString.substring(0,propString.length());
      aoAttrList.set(""String_Node_Str"",propString);
    }
 catch (    Exception e) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),e.getMessage()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    aoAttrList.set(DEFAULT_OPERAND,jndiName);
    aoAttrList.set(""String_Node_Str"",resourceType);
    aoAttrList.set(""String_Node_Str"",DEFAULT_JMS_ADAPTER);
    aoAttrList.set(""String_Node_Str"",target);
    if (enabled != null)     aoAttrList.set(""String_Node_Str"",Boolean.toString(enabled));
    commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(aoAttrList).execute();
    if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  report.setActionExitCode(ec);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  if (resourceType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (jndiName == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!(resourceType.equals(TOPIC_CF) || resourceType.equals(QUEUE_CF) || resourceType.equals(UNIFIED_CF)|| resourceType.equals(TOPIC)|| resourceType.equals(QUEUE))) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  jndiNameForConnectionPool=jndiName + JNDINAME_APPENDER;
  if (force) {
    Resource res=null;
    if (resourceType.equals(TOPIC) || resourceType.equals(QUEUE))     res=ConnectorsUtil.getResourceByName(domain.getResources(),AdminObjectResource.class,jndiName);
 else     res=ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorResource.class,jndiName);
    if (res != null) {
      ActionReport deleteReport=report.addSubActionsReport();
      ParameterMap parameters=new ParameterMap();
      parameters.set(DEFAULT_OPERAND,jndiName);
      parameters.set(""String_Node_Str"",target);
      commandRunner.getCommandInvocation(""String_Node_Str"",deleteReport).parameters(parameters).execute();
      if (ActionReport.ExitCode.FAILURE.equals(deleteReport.getActionExitCode())) {
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  populateJmsRAMap();
  if (props != null) {
    Enumeration en=props.keys();
    while (en.hasMoreElements()) {
      String key=(String)en.nextElement();
      String raKey=getMappedName(key);
      if (raKey == null)       raKey=key;
      props.put(raKey,(String)props.get(key));
      if (!raKey.equals(key))       props.remove(key);
    }
  }
  ActionReport subReport=report.addSubActionsReport();
  if (resourceType.equals(TOPIC_CF) || resourceType.equals(QUEUE_CF) || resourceType.equals(UNIFIED_CF)) {
    ConnectorConnectionPool cpool=(ConnectorConnectionPool)ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorConnectionPool.class,jndiNameForConnectionPool);
    boolean createdPool=false;
    if (cpool == null || !filterForTarget(jndiNameForConnectionPool)) {
      ParameterMap parameters=populateConnectionPoolParameters();
      commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(parameters).execute();
      createdPool=true;
      if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
    ParameterMap params=populateConnectionResourceParameters();
    commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(params).execute();
    if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      if (createdPool)       commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(populateConnectionPoolParameters()).execute();
      return;
    }
  }
 else   if (resourceType.equals(TOPIC) || resourceType.equals(QUEUE)) {
    ParameterMap aoAttrList=new ParameterMap();
    try {
      Properties properties=validateDestinationResourceProps(props,jndiName);
      StringBuilder builder=new StringBuilder();
      for (      java.util.Map.Entry<Object,Object> prop : properties.entrySet()) {
        builder.append(prop.getKey()).append(""String_Node_Str"").append(prop.getValue()).append(""String_Node_Str"");
      }
      String propString=builder.toString();
      int lastColonIndex=propString.lastIndexOf(""String_Node_Str"");
      if (lastColonIndex >= 0) {
        propString=propString.substring(0,lastColonIndex);
      }
      aoAttrList.set(""String_Node_Str"",propString);
    }
 catch (    Exception e) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),e.getMessage()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    aoAttrList.set(DEFAULT_OPERAND,jndiName);
    aoAttrList.set(""String_Node_Str"",resourceType);
    aoAttrList.set(""String_Node_Str"",DEFAULT_JMS_ADAPTER);
    aoAttrList.set(""String_Node_Str"",target);
    if (enabled != null)     aoAttrList.set(""String_Node_Str"",Boolean.toString(enabled));
    commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(aoAttrList).execute();
    if (ActionReport.ExitCode.FAILURE.equals(subReport.getActionExitCode())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  report.setActionExitCode(ec);
}"
29058,"void createJMSResource(JmsHost defaultJmsHost,ActionReport subReport,String tmpJMSResource){
  String port=null;
  String host=null;
  Server targetServer=domain.getServerNamed(target);
  if (targetServer != null && !targetServer.isDas()) {
    port=JmsRaUtil.getJMSPropertyValue(targetServer);
    host=domain.getNodeNamed(targetServer.getNodeRef()).getNodeHost();
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null && cluster.getInstances().size() != 0) {
      targetServer=cluster.getInstances().get(0);
      port=JmsRaUtil.getJMSPropertyValue(targetServer);
      host=domain.getNodeNamed(targetServer.getNodeRef()).getNodeHost();
    }
  }
  String userName=defaultJmsHost.getAdminUserName();
  String password=defaultJmsHost.getAdminPassword();
  if (host == null)   host=defaultJmsHost.getHost();
  if (port == null)   port=defaultJmsHost.getPort();
  ParameterMap aoAttrList=new ParameterMap();
  Properties properties=new Properties();
  properties.put(""String_Node_Str"",userName);
  if (isPasswordAlias(password)) {
    properties.put(""String_Node_Str"",""String_Node_Str"" + password + ""String_Node_Str"");
  }
 else   properties.put(""String_Node_Str"",password);
  properties.put(""String_Node_Str"",""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str"");
  String propString=""String_Node_Str"";
  for (  java.util.Map.Entry<Object,Object> prop : properties.entrySet()) {
    propString+=prop.getKey() + ""String_Node_Str"" + prop.getValue()+ ""String_Node_Str"";
  }
  propString=propString.substring(0,propString.length());
  aoAttrList.set(""String_Node_Str"",propString);
  aoAttrList.set(""String_Node_Str"",""String_Node_Str"");
  aoAttrList.set(""String_Node_Str"",tmpJMSResource);
  commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(aoAttrList).execute();
}","void createJMSResource(JmsHost defaultJmsHost,ActionReport subReport,String tmpJMSResource){
  String port=null;
  String host=null;
  Server targetServer=domain.getServerNamed(target);
  if (targetServer != null && !targetServer.isDas()) {
    port=JmsRaUtil.getJMSPropertyValue(targetServer);
    host=domain.getNodeNamed(targetServer.getNodeRef()).getNodeHost();
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null && cluster.getInstances().size() != 0) {
      targetServer=cluster.getInstances().get(0);
      port=JmsRaUtil.getJMSPropertyValue(targetServer);
      host=domain.getNodeNamed(targetServer.getNodeRef()).getNodeHost();
    }
  }
  String userName=defaultJmsHost.getAdminUserName();
  String password=defaultJmsHost.getAdminPassword();
  if (host == null)   host=defaultJmsHost.getHost();
  if (port == null)   port=defaultJmsHost.getPort();
  ParameterMap aoAttrList=new ParameterMap();
  Properties properties=new Properties();
  properties.put(""String_Node_Str"",userName);
  if (isPasswordAlias(password)) {
    properties.put(""String_Node_Str"",""String_Node_Str"" + password + ""String_Node_Str"");
  }
 else   properties.put(""String_Node_Str"",password);
  properties.put(""String_Node_Str"",""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str"");
  StringBuilder builder=new StringBuilder();
  for (  java.util.Map.Entry<Object,Object> prop : properties.entrySet()) {
    builder.append(prop.getKey()).append(""String_Node_Str"").append(prop.getValue()).append(""String_Node_Str"");
  }
  String propString=builder.toString();
  int lastColonIndex=propString.lastIndexOf(""String_Node_Str"");
  if (lastColonIndex >= 0) {
    propString=propString.substring(0,lastColonIndex);
  }
  aoAttrList.set(""String_Node_Str"",propString);
  aoAttrList.set(""String_Node_Str"",""String_Node_Str"");
  aoAttrList.set(""String_Node_Str"",tmpJMSResource);
  commandRunner.getCommandInvocation(""String_Node_Str"",subReport).parameters(aoAttrList).execute();
}"
29059,"public List listJMSDestinations(String tgtName,String destType) throws Exception {
  logger.log(Level.FINE,""String_Node_Str"");
  MQJMXConnectorInfo mqInfo=getMQJMXConnectorInfo(target,config,serverContext,domain,connectorRuntime);
  try {
    MBeanServerConnection mbsc=mqInfo.getMQMBeanServerConnection();
    ObjectName on=new ObjectName(DESTINATION_MANAGER_CONFIG_MBEAN_NAME);
    String[] signature=null;
    Object[] params=null;
    ObjectName[] dests=(ObjectName[])mbsc.invoke(on,""String_Node_Str"",params,signature);
    if ((dests != null) && (dests.length > 0)) {
      List<JMSDestinationInfo> jmsdi=new ArrayList<JMSDestinationInfo>();
      for (int i=0; i < dests.length; i++) {
        on=dests[i];
        String jdiType=toStringLabel(on.getKeyProperty(""String_Node_Str""));
        String jdiName=on.getKeyProperty(""String_Node_Str"");
        if ((jdiName != null) && (jdiName.length() > 1)) {
          if (jdiName.indexOf('""') == 0) {
            jdiName=jdiName.substring(1);
          }
          if (jdiName.lastIndexOf('""') == (jdiName.length() - 1)) {
            jdiName=jdiName.substring(0,jdiName.lastIndexOf('""'));
          }
        }
        JMSDestinationInfo jdi=new JMSDestinationInfo(jdiName,jdiType);
        if (destType == null) {
          jmsdi.add(jdi);
        }
 else         if (destType.equals(JMS_DEST_TYPE_TOPIC) || destType.equals(JMS_DEST_TYPE_QUEUE)) {
          if (jdiType.equalsIgnoreCase(destType)) {
            jmsdi.add(jdi);
          }
        }
      }
      return jmsdi;
    }
  }
 catch (  Exception e) {
    logAndHandleException(e,""String_Node_Str"");
  }
 finally {
    try {
      if (mqInfo != null) {
        mqInfo.closeMQMBeanServerConnection();
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
  }
  return null;
}","public List listJMSDestinations(String tgtName,String destType) throws Exception {
  logger.log(Level.FINE,""String_Node_Str"");
  MQJMXConnectorInfo mqInfo=getMQJMXConnectorInfo(target,config,serverContext,domain,connectorRuntime);
  try {
    MBeanServerConnection mbsc=mqInfo.getMQMBeanServerConnection();
    ObjectName on=new ObjectName(DESTINATION_MANAGER_CONFIG_MBEAN_NAME);
    ObjectName[] dests=(ObjectName[])mbsc.invoke(on,""String_Node_Str"",null,null);
    if ((dests != null) && (dests.length > 0)) {
      List<JMSDestinationInfo> jmsdi=new ArrayList<JMSDestinationInfo>();
      for (int i=0; i < dests.length; i++) {
        on=dests[i];
        String jdiType=toStringLabel(on.getKeyProperty(""String_Node_Str""));
        String jdiName=on.getKeyProperty(""String_Node_Str"");
        if ((jdiName != null) && (jdiName.length() > 1)) {
          if (jdiName.indexOf('""') == 0) {
            jdiName=jdiName.substring(1);
          }
          if (jdiName.lastIndexOf('""') == (jdiName.length() - 1)) {
            jdiName=jdiName.substring(0,jdiName.lastIndexOf('""'));
          }
        }
        JMSDestinationInfo jdi=new JMSDestinationInfo(jdiName,jdiType);
        if (destType == null) {
          jmsdi.add(jdi);
        }
 else         if (destType.equals(JMS_DEST_TYPE_TOPIC) || destType.equals(JMS_DEST_TYPE_QUEUE)) {
          if (jdiType.equalsIgnoreCase(destType)) {
            jmsdi.add(jdi);
          }
        }
      }
      return jmsdi;
    }
  }
 catch (  Exception e) {
    logAndHandleException(e,""String_Node_Str"");
  }
 finally {
    try {
      if (mqInfo != null) {
        mqInfo.closeMQMBeanServerConnection();
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
  }
  return null;
}"
29060,"public static void main(String[] args){
  long startTime=System.currentTimeMillis();
  AsadminMain asadminMain=new AsadminMain();
  int code=asadminMain.doMain(args);
  System.exit(code);
}","public static void main(String[] args){
  AsadminMain asadminMain=new AsadminMain();
  int code=asadminMain.doMain(args);
  System.exit(code);
}"
29061,"@Override public synchronized void onAdminCommandEvent(String name,GfSseInboundEvent event){
  try {
    if (CommandProgress.EVENT_PROGRESSSTATUS_STATE.equals(name)) {
      ProgressStatusDTO dto=event.getData(ProgressStatusDTO.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(dto);
      commandProgress=(CommandProgress)client.getProgressStatus();
      if (StringUtils.ok(commandProgress.getName()) && !StringUtils.ok(commandProgress.getLastMessage())) {
        commandProgress.progress(strings.getString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (CommandProgress.EVENT_PROGRESSSTATUS_CHANGE.equals(name)) {
      if (commandProgress == null) {
        logger.log(Level.WARNING,strings.get(""String_Node_Str"",""String_Node_Str""));
        return;
      }
      ProgressStatusEvent pse=event.getData(ProgressStatusEvent.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(pse);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,strings.get(""String_Node_Str"",""String_Node_Str""),ex);
  }
  if (commandProgress != null) {
    outMsg.setLength(0);
    boolean printIt=false;
    int percentage=Math.round(commandProgress.computeCompletePortion() * 100);
    if (percentage >= 0) {
      outMsg.append(percentage);
switch (outMsg.length()) {
case 1:
        outMsg.insert(0,""String_Node_Str"");
      break;
case 2:
    outMsg.insert(0,' ');
  break;
}
outMsg.append('%');
if (percentage > lastPercentage) {
printIt=true;
lastPercentage=percentage;
}
}
 else {
int sumSteps=commandProgress.computeSumSteps();
outMsg.append(sumSteps);
if (sumSteps > lastSumSteps) {
printIt=true;
lastSumSteps=sumSteps;
}
}
String message=commandProgress.getLastMessage();
if (message != null && message.length() > 0) {
outMsg.append(""String_Node_Str"");
outMsg.append(message);
if (!message.equals(lastMessage)) {
printIt=true;
lastMessage=message;
}
}
if (printIt) {
if (debug) {
System.out.println(outMsg);
}
 else {
if (!firstPrint) {
  System.out.print('\r');
}
 else {
  firstPrint=false;
}
System.out.print(outMsg);
System.out.print(' ');
int spaceCount=lastMsgLength - outMsg.length();
for (int i=0; i < spaceCount; i++) {
  System.out.print(' ');
}
lastMsgLength=outMsg.length();
}
}
if (commandProgress.isComplete()) {
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
}
}","@Override public synchronized void onAdminCommandEvent(String name,GfSseInboundEvent event){
  try {
    if (CommandProgress.EVENT_PROGRESSSTATUS_STATE.equals(name)) {
      ProgressStatusDTO dto=event.getData(ProgressStatusDTO.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(dto);
      commandProgress=(CommandProgress)client.getProgressStatus();
      if (StringUtils.ok(commandProgress.getName()) && !StringUtils.ok(commandProgress.getLastMessage())) {
        commandProgress.progress(strings.getString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (CommandProgress.EVENT_PROGRESSSTATUS_CHANGE.equals(name)) {
      if (commandProgress == null) {
        logger.log(Level.WARNING,strings.get(""String_Node_Str"",""String_Node_Str""));
        return;
      }
      ProgressStatusEvent pse=event.getData(ProgressStatusEvent.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(pse);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,strings.get(""String_Node_Str"",""String_Node_Str""),ex);
  }
  if (commandProgress != null) {
    outMsg.setLength(0);
    boolean printIt=false;
    int percentage=Math.round(commandProgress.computeCompletePortion() * 100);
    if (percentage >= 0) {
      outMsg.append(percentage);
switch (outMsg.length()) {
case 1:
        outMsg.insert(0,""String_Node_Str"");
      break;
case 2:
    outMsg.insert(0,' ');
  break;
default :
break;
}
outMsg.append('%');
if (percentage > lastPercentage) {
printIt=true;
lastPercentage=percentage;
}
}
 else {
int sumSteps=commandProgress.computeSumSteps();
outMsg.append(sumSteps);
if (sumSteps > lastSumSteps) {
printIt=true;
lastSumSteps=sumSteps;
}
}
String message=commandProgress.getLastMessage();
if (message != null && message.length() > 0) {
outMsg.append(""String_Node_Str"");
outMsg.append(message);
if (!message.equals(lastMessage)) {
printIt=true;
lastMessage=message;
}
}
if (printIt) {
if (debug) {
System.out.println(outMsg);
}
 else {
if (!firstPrint) {
System.out.print('\r');
}
 else {
firstPrint=false;
}
System.out.print(outMsg);
System.out.print(' ');
int spaceCount=lastMsgLength - outMsg.length();
for (int i=0; i < spaceCount; i++) {
System.out.print(' ');
}
lastMsgLength=outMsg.length();
}
}
if (commandProgress.isComplete()) {
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
}
}"
29062,"/** 
 * Copies the contents of the given error page to the response, and updates the status message with the reason string of the error page.
 * @param response The response object
 * @param errorPage The error page whose contents are to be copied
 * @param statusCode The status code
 */
private void handleHostErrorPage(Response response,ErrorPage errorPage,int statusCode) throws Exception {
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  FileReader reader=null;
  BufferedInputStream istream=null;
  IOException ioe=null;
  String message=errorPage.getReason();
  if (message != null) {
    ((HttpResponse)response).reset(statusCode,message);
  }
  try {
    ostream=response.getResponse().getOutputStream();
  }
 catch (  IllegalStateException e) {
    writer=response.getResponse().getWriter();
  }
  if (writer != null) {
    reader=new FileReader(errorPage.getLocation());
    ioe=ResponseUtil.copy(reader,writer);
    try {
      reader.close();
    }
 catch (    Throwable t) {
      ;
    }
  }
 else {
    istream=new BufferedInputStream(new FileInputStream(errorPage.getLocation()));
    ioe=ResponseUtil.copy(istream,ostream);
    try {
      istream.close();
    }
 catch (    Throwable t) {
      ;
    }
  }
  if (ioe != null) {
    throw ioe;
  }
}","/** 
 * Copies the contents of the given error page to the response, and updates the status message with the reason string of the error page.
 * @param response The response object
 * @param errorPage The error page whose contents are to be copied
 * @param statusCode The status code
 */
private void handleHostErrorPage(Response response,ErrorPage errorPage,int statusCode) throws Exception {
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  FileReader reader=null;
  BufferedInputStream istream=null;
  IOException ioe=null;
  if (!response.getResponse().isCommitted()) {
    response.resetBuffer(true);
  }
  String message=errorPage.getReason();
  if (message != null) {
    ((HttpResponse)response).reset(statusCode,message);
  }
  try {
    ostream=response.getResponse().getOutputStream();
  }
 catch (  IllegalStateException e) {
    writer=response.getResponse().getWriter();
  }
  if (writer != null) {
    reader=new FileReader(errorPage.getLocation());
    ioe=ResponseUtil.copy(reader,writer);
    try {
      reader.close();
    }
 catch (    Throwable t) {
      ;
    }
  }
 else {
    istream=new BufferedInputStream(new FileInputStream(errorPage.getLocation()));
    ioe=ResponseUtil.copy(istream,ostream);
    try {
      istream.close();
    }
 catch (    Throwable t) {
      ;
    }
  }
  if (ioe != null) {
    throw ioe;
  }
}"
29063,"static void unitTest_1() throws Exception {
  FIFOEJBObjectCache cache=new FIFOEJBObjectCache(""String_Node_Str"");
  cache.init(512,0,0,(float)1.0,null);
  int maxCount=14;
  ArrayList keys=new ArrayList();
  for (int i=0; i < maxCount; i++) {
    keys.add(""String_Node_Str"" + i);
  }
  for (int i=0; i < maxCount; i++) {
    String key=(String)keys.get(i);
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ key+ ""String_Node_Str""+ ((i % 2) == 0)+ ""String_Node_Str"");
    cache.put(key,key,((i % 2) == 0));
  }
  System.out.println(""String_Node_Str"");
  cache.print();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < maxCount; i++) {
    String key=(String)keys.get(i);
    cache.get(key,((i % 2) == 1));
  }
  System.out.println(""String_Node_Str"");
  cache.print();
  System.out.println(""String_Node_Str"");
  cache.put(""String_Node_Str"",""String_Node_Str"",true);
  cache.put(""String_Node_Str"",""String_Node_Str"",true);
  cache.get(""String_Node_Str"",true);
  cache.put(""String_Node_Str"",""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  cache.print();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < maxCount; i++) {
    String key=(String)keys.get(i);
    if (cache.remove(key) == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Object k15=cache.remove(""String_Node_Str"");
  Object k16_1=cache.remove(""String_Node_Str"");
  Object k16_2=cache.remove(""String_Node_Str"");
  Object k17=cache.remove(""String_Node_Str"");
  if (k15 == null) {
    System.out.println(""String_Node_Str"");
  }
  if (k16_1 != null) {
    System.out.println(""String_Node_Str"");
  }
  if (k16_2 == null) {
    System.out.println(""String_Node_Str"");
  }
  if (k17 == null) {
    System.out.println(""String_Node_Str"");
  }
  for (int i=0; i < maxCount; i+=2) {
    String key=(String)keys.get(i);
    cache.put(key,key,(i % 4) == 0);
  }
  cache.print();
  for (int i=0; i < maxCount; i+=2) {
    String key=(String)keys.get(i);
    cache.get(key,true);
  }
  cache.print();
  for (int i=1; i < maxCount; i+=2) {
    String key=(String)keys.get(i);
    cache.put(key,key,(i % 9) == 0);
  }
  cache.print();
}","static void unitTest_1() throws Exception {
  FIFOEJBObjectCache cache=new FIFOEJBObjectCache(""String_Node_Str"");
  cache.init(512,0,0,(float)1.0,null);
  int maxCount=14;
  ArrayList keys=new ArrayList();
  for (int i=0; i < maxCount; i++) {
    keys.add(""String_Node_Str"" + i);
  }
  for (int i=0; i < maxCount; i++) {
    String key=(String)keys.get(i);
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ key+ ""String_Node_Str""+ ((i % 2) == 0)+ ""String_Node_Str"");
    cache.put(key,key,((i % 2) == 0));
  }
  System.out.println(""String_Node_Str"");
  cache.print();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < maxCount; i++) {
    String key=(String)keys.get(i);
    cache.get(key,((i % 2) != 0));
  }
  System.out.println(""String_Node_Str"");
  cache.print();
  System.out.println(""String_Node_Str"");
  cache.put(""String_Node_Str"",""String_Node_Str"",true);
  cache.put(""String_Node_Str"",""String_Node_Str"",true);
  cache.get(""String_Node_Str"",true);
  cache.put(""String_Node_Str"",""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  cache.print();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < maxCount; i++) {
    String key=(String)keys.get(i);
    if (cache.remove(key) == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Object k15=cache.remove(""String_Node_Str"");
  Object k16_1=cache.remove(""String_Node_Str"");
  Object k16_2=cache.remove(""String_Node_Str"");
  Object k17=cache.remove(""String_Node_Str"");
  if (k15 == null) {
    System.out.println(""String_Node_Str"");
  }
  if (k16_1 != null) {
    System.out.println(""String_Node_Str"");
  }
  if (k16_2 == null) {
    System.out.println(""String_Node_Str"");
  }
  if (k17 == null) {
    System.out.println(""String_Node_Str"");
  }
  for (int i=0; i < maxCount; i+=2) {
    String key=(String)keys.get(i);
    cache.put(key,key,(i % 4) == 0);
  }
  cache.print();
  for (int i=0; i < maxCount; i+=2) {
    String key=(String)keys.get(i);
    cache.get(key,true);
  }
  cache.print();
  for (int i=1; i < maxCount; i+=2) {
    String key=(String)keys.get(i);
    cache.put(key,key,(i % 9) == 0);
  }
  cache.print();
}"
29064,"public void readInstanceLevelParams(ServerConfigLookup serverConfigLookup){
  org.glassfish.web.config.serverbeans.SessionManager smBean=serverConfigLookup.getInstanceSessionManager();
  if (smBean != null) {
    org.glassfish.web.config.serverbeans.ManagerProperties mgrBean=smBean.getManagerProperties();
    if (mgrBean != null) {
      String reapIntervalInSecondsString=mgrBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          reapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MANAGER_REAP_INTERVAL_SET,reapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MGR_REAP_INTERVAL);
        }
      }
      String maxSessionsString=mgrBean.getMaxSessions();
      if (maxSessionsString != null) {
        try {
          maxSessions=Integer.parseInt(maxSessionsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MAX_SESSIONS_SET,maxSessions);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MAX_SESSIONS);
        }
      }
      String sessionFilenameString=mgrBean.getSessionFileName();
      if (sessionFilenameString != null) {
        sessionFilename=sessionFilenameString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_FILENAME_SET,sessionFilename);
        }
      }
      sessionIdGeneratorClassname=mgrBean.getSessionIdGeneratorClassname();
      if (sessionIdGeneratorClassname != null && _logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,SESSION_ID_GENERATOR_CLASSNAME_SET,sessionIdGeneratorClassname);
      }
      List<Property> props=mgrBean.getProperty();
      if (props != null) {
        for (        Property prop : props) {
          String name=prop.getName();
          String value=prop.getValue();
        }
      }
    }
    org.glassfish.web.config.serverbeans.StoreProperties storeBean=smBean.getStoreProperties();
    if (storeBean != null) {
      String reapIntervalInSecondsString=storeBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          storeReapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,STORE_REAP_INTERVAL_SET,storeReapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      String directoryString=storeBean.getDirectory();
      if (directoryString != null) {
        directory=directoryString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,DIRECTORY_SET,directoryString);
        }
      }
    }
  }
  SessionProperties spBean=serverConfigLookup.getInstanceSessionProperties();
  if (spBean != null) {
    String timeoutSecondsString=spBean.getTimeoutInSeconds();
    if (timeoutSecondsString != null) {
      try {
        sessionMaxInactiveInterval=Integer.parseInt(timeoutSecondsString);
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_MAX_INACTIVE_INTERVAL_SET,sessionMaxInactiveInterval);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_SESSION_MAX_INACTIVE_INTERVAL);
      }
    }
  }
}","public void readInstanceLevelParams(ServerConfigLookup serverConfigLookup){
  org.glassfish.web.config.serverbeans.SessionManager smBean=serverConfigLookup.getInstanceSessionManager();
  if (smBean != null) {
    org.glassfish.web.config.serverbeans.ManagerProperties mgrBean=smBean.getManagerProperties();
    if (mgrBean != null) {
      String reapIntervalInSecondsString=mgrBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          reapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MANAGER_REAP_INTERVAL_SET,reapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MGR_REAP_INTERVAL);
        }
      }
      String maxSessionsString=mgrBean.getMaxSessions();
      if (maxSessionsString != null) {
        try {
          maxSessions=Integer.parseInt(maxSessionsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MAX_SESSIONS_SET,maxSessions);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MAX_SESSIONS);
        }
      }
      String sessionFilenameString=mgrBean.getSessionFileName();
      if (sessionFilenameString != null) {
        sessionFilename=sessionFilenameString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_FILENAME_SET,sessionFilename);
        }
      }
      sessionIdGeneratorClassname=mgrBean.getSessionIdGeneratorClassname();
      if (sessionIdGeneratorClassname != null && _logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,SESSION_ID_GENERATOR_CLASSNAME_SET,sessionIdGeneratorClassname);
      }
    }
    org.glassfish.web.config.serverbeans.StoreProperties storeBean=smBean.getStoreProperties();
    if (storeBean != null) {
      String reapIntervalInSecondsString=storeBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          storeReapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,STORE_REAP_INTERVAL_SET,storeReapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      String directoryString=storeBean.getDirectory();
      if (directoryString != null) {
        directory=directoryString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,DIRECTORY_SET,directoryString);
        }
      }
    }
  }
  SessionProperties spBean=serverConfigLookup.getInstanceSessionProperties();
  if (spBean != null) {
    String timeoutSecondsString=spBean.getTimeoutInSeconds();
    if (timeoutSecondsString != null) {
      try {
        sessionMaxInactiveInterval=Integer.parseInt(timeoutSecondsString);
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_MAX_INACTIVE_INTERVAL_SET,sessionMaxInactiveInterval);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_SESSION_MAX_INACTIVE_INTERVAL);
      }
    }
  }
}"
29065,"protected void createBeanPool(){
  ObjectFactory sessionCtxFactory=new SessionContextFactory();
  iased=ejbDescriptor.getIASEjbExtraDescriptors();
  if (iased != null) {
    beanPoolDes=iased.getBeanPool();
  }
  poolProp=new PoolProperties();
  String val=ejbDescriptor.getEjbBundleDescriptor().getEnterpriseBeansProperty(SINGLETON_BEAN_POOL_PROP);
  pool=new NonBlockingPool(getContainerId(),ejbDescriptor.getName(),sessionCtxFactory,poolProp.steadyPoolSize,poolProp.poolResizeQuantity,poolProp.maxPoolSize,poolProp.poolIdleTimeoutInSeconds,loader,Boolean.parseBoolean(val));
}","protected void createBeanPool(){
  ObjectFactory sessionCtxFactory=new SessionContextFactory();
  iased=ejbDescriptor.getIASEjbExtraDescriptors();
  if (iased != null) {
    beanPoolDes=iased.getBeanPool();
  }
  poolProp=new PoolProperties(ejbContainer,beanPoolDes);
  String val=ejbDescriptor.getEjbBundleDescriptor().getEnterpriseBeansProperty(SINGLETON_BEAN_POOL_PROP);
  pool=new NonBlockingPool(getContainerId(),ejbDescriptor.getName(),sessionCtxFactory,poolProp.steadyPoolSize,poolProp.poolResizeQuantity,poolProp.maxPoolSize,poolProp.poolIdleTimeoutInSeconds,loader,Boolean.parseBoolean(val));
}"
29066,"public PoolProperties(){
  maxPoolSize=Integer.parseInt(ejbContainer.getMaxPoolSize());
  poolIdleTimeoutInSeconds=Integer.parseInt(ejbContainer.getPoolIdleTimeoutInSeconds());
  poolResizeQuantity=Integer.parseInt(ejbContainer.getPoolResizeQuantity());
  steadyPoolSize=Integer.parseInt(ejbContainer.getSteadyPoolSize());
  if (beanPoolDes != null) {
    int temp=0;
    if ((temp=beanPoolDes.getMaxPoolSize()) != -1) {
      maxPoolSize=temp;
    }
    if ((temp=beanPoolDes.getPoolIdleTimeoutInSeconds()) != -1) {
      poolIdleTimeoutInSeconds=temp;
    }
    if ((temp=beanPoolDes.getPoolResizeQuantity()) != -1) {
      poolResizeQuantity=temp;
    }
    if ((temp=beanPoolDes.getSteadyPoolSize()) != -1) {
      steadyPoolSize=temp;
    }
  }
}","public PoolProperties(EjbContainer ejbContainer,BeanPoolDescriptor beanPoolDes){
  maxPoolSize=Integer.parseInt(ejbContainer.getMaxPoolSize());
  poolIdleTimeoutInSeconds=Integer.parseInt(ejbContainer.getPoolIdleTimeoutInSeconds());
  poolResizeQuantity=Integer.parseInt(ejbContainer.getPoolResizeQuantity());
  steadyPoolSize=Integer.parseInt(ejbContainer.getSteadyPoolSize());
  if (beanPoolDes != null) {
    int temp=0;
    if ((temp=beanPoolDes.getMaxPoolSize()) != -1) {
      maxPoolSize=temp;
    }
    if ((temp=beanPoolDes.getPoolIdleTimeoutInSeconds()) != -1) {
      poolIdleTimeoutInSeconds=temp;
    }
    if ((temp=beanPoolDes.getPoolResizeQuantity()) != -1) {
      poolResizeQuantity=temp;
    }
    if ((temp=beanPoolDes.getSteadyPoolSize()) != -1) {
      steadyPoolSize=temp;
    }
  }
}"
29067,"/** 
 * Called from EjbCMPEntityDescriptor when some classes in this object are updated.
 */
public boolean classesChanged(){
  persistentClass=null;
  stateClass=null;
  Class persClass=getPersistentClass();
  Vector fieldDescriptors=parentDesc.getFieldDescriptors();
  if (this.cmpFields != null) {
    for (Iterator iter=cmpFields.iterator(); iter.hasNext(); ) {
      FieldDescriptor next=(FieldDescriptor)iter.next();
      if (!fieldDescriptors.contains(next)) {
        iter.remove();
      }
    }
  }
  if (this.pkeyFields != null) {
    for (Iterator iter=pkeyFields.iterator(); iter.hasNext(); ) {
      FieldDescriptor next=(FieldDescriptor)iter.next();
      if (!fieldDescriptors.contains(next)) {
        iter.remove();
      }
    }
  }
  FieldDescriptor primKeyFieldDesc=parentDesc.getPrimaryKeyFieldDesc();
  if ((primKeyFieldDesc != null) && !fieldDescriptors.contains(primKeyFieldDesc)) {
    parentDesc.setPrimaryKeyFieldDesc(null);
  }
  Hashtable queriesClone=(Hashtable)queries.clone();
  queries=new Hashtable();
  initializeAllQueriedMethods();
  Iterator it=queriesClone.keySet().iterator();
  while (it.hasNext()) {
    Method oldMethod=(Method)it.next();
    Method newMethod=findEquivalentMethod(allQueriedMethods,oldMethod);
    if (newMethod != null) {
      QueryDescriptor oldQuery=(QueryDescriptor)queriesClone.get(oldMethod);
      QueryDescriptor newQuery=new QueryDescriptor(oldQuery,newMethod);
      queries.put(newMethod,newQuery);
    }
  }
  invalidate();
  return false;
}","/** 
 * Called from EjbCMPEntityDescriptor when some classes in this object are updated.
 */
public boolean classesChanged(){
  persistentClass=null;
  stateClass=null;
  Class persClass=getPersistentClass();
  Vector fieldDescriptors=parentDesc.getFieldDescriptors();
  if (this.cmpFields != null) {
    for (Iterator iter=cmpFields.iterator(); iter.hasNext(); ) {
      FieldDescriptor next=(FieldDescriptor)iter.next();
      if (!fieldDescriptors.contains(next)) {
        iter.remove();
      }
    }
  }
  if (this.pkeyFields != null) {
    for (Iterator iter=pkeyFields.iterator(); iter.hasNext(); ) {
      FieldDescriptor next=(FieldDescriptor)iter.next();
      if (!fieldDescriptors.contains(next)) {
        iter.remove();
      }
    }
  }
  FieldDescriptor primKeyFieldDesc=parentDesc.getPrimaryKeyFieldDesc();
  if ((primKeyFieldDesc != null) && !fieldDescriptors.contains(primKeyFieldDesc)) {
    parentDesc.setPrimaryKeyFieldDesc(null);
  }
  Hashtable queriesClone=(Hashtable)queries.clone();
  queries=new Hashtable();
  initializeAllQueriedMethods();
  for (  Object o : queriesClone.entrySet()) {
    Map.Entry entry=(Map.Entry)o;
    Method oldMethod=(Method)entry.getKey();
    Method newMethod=findEquivalentMethod(allQueriedMethods,oldMethod);
    if (newMethod != null) {
      QueryDescriptor oldQuery=(QueryDescriptor)entry.getValue();
      QueryDescriptor newQuery=new QueryDescriptor(oldQuery,newMethod);
      queries.put(newMethod,newQuery);
    }
  }
  invalidate();
  return false;
}"
29068,"public void setParentDescriptor(Descriptor parentDesc){
  this.parentDesc=(EjbCMPEntityDescriptor)parentDesc;
}","public void setParentDescriptor(EjbCMPEntityDescriptor parentDesc){
  this.parentDesc=parentDesc;
}"
29069,"/** 
 * Checks whether two methods that might have been loaded by different class loaders are equal.  
 * @param compareDeclaringClass if true, declaring class willbe considered as part of equality test.  
 */
private boolean methodsEqual(MethodDescriptor m1,Method m2,boolean compareDeclaringClass){
  Method m=m1.getMethod(parentDesc);
  return methodsEqual(m,m2,compareDeclaringClass);
}","/** 
 * Checks whether two methods that might have been loaded by different class loaders are equal.  
 * @param compareDeclaringClass if true, declaring class willbe considered as part of equality test.  
 */
private boolean methodsEqual(Method m1,Method m2,boolean compareDeclaringClass){
  boolean equal=false;
  do {
    String m1Name=m1.getName();
    String m2Name=m2.getName();
    if (!m1Name.equals(m2Name)) {
      break;
    }
    String m1DeclaringClass=m1.getDeclaringClass().getName();
    String m2DeclaringClass=m2.getDeclaringClass().getName();
    if (compareDeclaringClass) {
      if (!m1DeclaringClass.equals(m2DeclaringClass)) {
        break;
      }
    }
    Class[] m1ParamTypes=m1.getParameterTypes();
    Class[] m2ParamTypes=m2.getParameterTypes();
    if (m1ParamTypes.length != m2ParamTypes.length) {
      break;
    }
    equal=true;
    for (int pIndex=0; pIndex < m1ParamTypes.length; pIndex++) {
      String m1ParamClass=m1ParamTypes[pIndex].getName();
      String m2ParamClass=m2ParamTypes[pIndex].getName();
      if (!m1ParamClass.equals(m2ParamClass)) {
        equal=false;
        break;
      }
    }
  }
 while (false);
  return equal;
}"
29070,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node in the DOM tree 
 * @param nodeName name for the root element of this xml fragment
 * @param ejb the descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,String nodeName,EjbDescriptor ejb){
  Map methodToTransactions=ejb.getMethodContainerTransactions();
  MethodNode mn=new MethodNode();
  for (Iterator e=methodToTransactions.keySet().iterator(); e.hasNext(); ) {
    MethodDescriptor md=(MethodDescriptor)e.next();
    Node ctNode=super.writeDescriptor(parent,nodeName,ejb);
    ContainerTransaction ct=(ContainerTransaction)methodToTransactions.get(md);
    appendTextChild(ctNode,EjbTagNames.DESCRIPTION,ct.getDescription());
    mn.writeDescriptor(ctNode,EjbTagNames.METHOD,md,ejb.getName());
    appendTextChild(ctNode,EjbTagNames.TRANSACTION_ATTRIBUTE,ct.getTransactionAttribute());
  }
  return null;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node in the DOM tree 
 * @param nodeName name for the root element of this xml fragment
 * @param ejb the descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,String nodeName,EjbDescriptor ejb){
  Map methodToTransactions=ejb.getMethodContainerTransactions();
  MethodNode mn=new MethodNode();
  for (  Object o : methodToTransactions.entrySet()) {
    Map.Entry entry=(Map.Entry)o;
    MethodDescriptor md=(MethodDescriptor)entry.getKey();
    Node ctNode=super.writeDescriptor(parent,nodeName,ejb);
    ContainerTransaction ct=(ContainerTransaction)entry.getValue();
    appendTextChild(ctNode,EjbTagNames.DESCRIPTION,ct.getDescription());
    mn.writeDescriptor(ctNode,EjbTagNames.METHOD,md,ejb.getName());
    appendTextChild(ctNode,EjbTagNames.TRANSACTION_ATTRIBUTE,ct.getTransactionAttribute());
  }
  return null;
}"
29071,"/** 
 * write assembly-descriptor related xml information to the DOM tree
 */
private void writeAssemblyDescriptor(Node parentNode,EjbBundleDescriptorImpl bundleDescriptor){
  Node assemblyNode=parentNode.getOwnerDocument().createElement(EjbTagNames.ASSEMBLY_DESCRIPTOR);
  SecurityRoleNode roleNode=new SecurityRoleNode();
  for (Iterator e=bundleDescriptor.getRoles().iterator(); e.hasNext(); ) {
    roleNode.writeDescriptor(assemblyNode,TagNames.ROLE,(Role)e.next());
  }
  Map excludedMethodsByEjb=new HashMap();
  MethodPermissionNode mpNode=new MethodPermissionNode();
  for (  EjbDescriptor ejbDesc : bundleDescriptor.getEjbs()) {
    if (ejbDesc instanceof EjbMessageBeanDescriptor)     continue;
    Vector excludedMethods=new Vector();
    addMethodPermissions(ejbDesc,ejbDesc.getPermissionedMethodsByPermission(),excludedMethods,mpNode,assemblyNode);
    addMethodPermissions(ejbDesc,ejbDesc.getStyledPermissionedMethodsByPermission(),excludedMethods,mpNode,assemblyNode);
    if (excludedMethods.size() > 0) {
      excludedMethodsByEjb.put(ejbDesc,excludedMethods);
    }
  }
  ContainerTransactionNode ctNode=new ContainerTransactionNode();
  for (  EjbDescriptor ejbDesc : bundleDescriptor.getEjbs()) {
    ctNode.writeDescriptor(assemblyNode,EjbTagNames.CONTAINER_TRANSACTION,ejbDesc);
  }
  InterceptorBindingNode ibNode=new InterceptorBindingNode();
  for (  EjbDescriptor ejbDesc : bundleDescriptor.getEjbs()) {
    if (!ejbDesc.getInterceptorClasses().isEmpty()) {
      ibNode.writeBindings(assemblyNode,ejbDesc);
    }
  }
  writeMessageDestinations(assemblyNode,bundleDescriptor.getMessageDestinations().iterator());
  if (excludedMethodsByEjb.size() > 0) {
    Node excludeListNode=this.appendChild(assemblyNode,EjbTagNames.EXCLUDE_LIST);
    for (Iterator ejbs=excludedMethodsByEjb.keySet().iterator(); ejbs.hasNext(); ) {
      EjbDescriptor ejbDesc=(EjbDescriptor)ejbs.next();
      Vector excludedMethods=(Vector)excludedMethodsByEjb.get(ejbDesc);
      MethodPermissionDescriptor mpd=new MethodPermissionDescriptor();
      mpd.addMethodPermission(MethodPermission.getExcludedMethodPermission());
      mpd.addMethods(excludedMethods);
      mpNode.writeDescriptorInNode(excludeListNode,mpd,ejbDesc);
    }
  }
  for (  EjbApplicationExceptionInfo next : bundleDescriptor.getApplicationExceptions().values()) {
    EjbApplicationExceptionNode node=new EjbApplicationExceptionNode();
    node.writeDescriptor(assemblyNode,EjbTagNames.APPLICATION_EXCEPTION,next);
  }
  if (assemblyNode.hasChildNodes()) {
    parentNode.appendChild(assemblyNode);
  }
}","/** 
 * write assembly-descriptor related xml information to the DOM tree
 */
private void writeAssemblyDescriptor(Node parentNode,EjbBundleDescriptorImpl bundleDescriptor){
  Node assemblyNode=parentNode.getOwnerDocument().createElement(EjbTagNames.ASSEMBLY_DESCRIPTOR);
  SecurityRoleNode roleNode=new SecurityRoleNode();
  for (Iterator e=bundleDescriptor.getRoles().iterator(); e.hasNext(); ) {
    roleNode.writeDescriptor(assemblyNode,TagNames.ROLE,(Role)e.next());
  }
  Map excludedMethodsByEjb=new HashMap();
  MethodPermissionNode mpNode=new MethodPermissionNode();
  for (  EjbDescriptor ejbDesc : bundleDescriptor.getEjbs()) {
    if (ejbDesc instanceof EjbMessageBeanDescriptor)     continue;
    Vector excludedMethods=new Vector();
    addMethodPermissions(ejbDesc,ejbDesc.getPermissionedMethodsByPermission(),excludedMethods,mpNode,assemblyNode);
    addMethodPermissions(ejbDesc,ejbDesc.getStyledPermissionedMethodsByPermission(),excludedMethods,mpNode,assemblyNode);
    if (excludedMethods.size() > 0) {
      excludedMethodsByEjb.put(ejbDesc,excludedMethods);
    }
  }
  ContainerTransactionNode ctNode=new ContainerTransactionNode();
  for (  EjbDescriptor ejbDesc : bundleDescriptor.getEjbs()) {
    ctNode.writeDescriptor(assemblyNode,EjbTagNames.CONTAINER_TRANSACTION,ejbDesc);
  }
  InterceptorBindingNode ibNode=new InterceptorBindingNode();
  for (  EjbDescriptor ejbDesc : bundleDescriptor.getEjbs()) {
    if (!ejbDesc.getInterceptorClasses().isEmpty()) {
      ibNode.writeBindings(assemblyNode,ejbDesc);
    }
  }
  writeMessageDestinations(assemblyNode,bundleDescriptor.getMessageDestinations().iterator());
  if (excludedMethodsByEjb.size() > 0) {
    Node excludeListNode=this.appendChild(assemblyNode,EjbTagNames.EXCLUDE_LIST);
    for (    Object o : excludedMethodsByEjb.entrySet()) {
      Map.Entry entry=(Map.Entry)o;
      EjbDescriptor ejbDesc=(EjbDescriptor)entry.getKey();
      Vector excludedMethods=(Vector)entry.getValue();
      MethodPermissionDescriptor mpd=new MethodPermissionDescriptor();
      mpd.addMethodPermission(MethodPermission.getExcludedMethodPermission());
      mpd.addMethods(excludedMethods);
      mpNode.writeDescriptorInNode(excludeListNode,mpd,ejbDesc);
    }
  }
  for (  EjbApplicationExceptionInfo next : bundleDescriptor.getApplicationExceptions().values()) {
    EjbApplicationExceptionNode node=new EjbApplicationExceptionNode();
    node.writeDescriptor(assemblyNode,EjbTagNames.APPLICATION_EXCEPTION,next);
  }
  if (assemblyNode.hasChildNodes()) {
    parentNode.appendChild(assemblyNode);
  }
}"
29072,"private void addMethodPermissions(EjbDescriptor ejb,Map mpToMethods,Vector excludedMethods,MethodPermissionNode mpNode,Node assemblyNode){
  if (mpToMethods == null || mpToMethods.size() == 0) {
    return;
  }
  for (Iterator mpIterator=mpToMethods.keySet().iterator(); mpIterator.hasNext(); ) {
    MethodPermission mp=(MethodPermission)mpIterator.next();
    if (mp.isExcluded()) {
      Set methods=(Set)mpToMethods.get(mp);
      excludedMethods.addAll(methods);
    }
 else {
      MethodPermissionDescriptor mpd=new MethodPermissionDescriptor();
      mpd.addMethodPermission(mp);
      mpd.addMethods((Set)mpToMethods.get(mp));
      mpNode.writeDescriptor(assemblyNode,EjbTagNames.METHOD_PERMISSION,mpd,ejb);
    }
  }
}","private void addMethodPermissions(EjbDescriptor ejb,Map mpToMethods,Vector excludedMethods,MethodPermissionNode mpNode,Node assemblyNode){
  if (mpToMethods == null || mpToMethods.size() == 0) {
    return;
  }
  for (  Object o : mpToMethods.entrySet()) {
    Map.Entry entry=(Map.Entry)o;
    MethodPermission mp=(MethodPermission)entry.getKey();
    if (mp.isExcluded()) {
      Set methods=(Set)entry.getValue();
      excludedMethods.addAll(methods);
    }
 else {
      MethodPermissionDescriptor mpd=new MethodPermissionDescriptor();
      mpd.addMethodPermission(mp);
      mpd.addMethods((Set)mpToMethods.get(mp));
      mpNode.writeDescriptor(assemblyNode,EjbTagNames.METHOD_PERMISSION,mpd,ejb);
    }
  }
}"
29073,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  List instances=cluster.getInstances();
  Config config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsService=config.getExtensionByType(JmsService.class);
  if (jmsService == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!CONVENTIONAL.equalsIgnoreCase(clusterType) && !ENHANCED.equalsIgnoreCase(clusterType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !SHARED_DB.equalsIgnoreCase(configStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && configStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !FILE.equalsIgnoreCase(messageStoreType)&& !JDBC.equalsIgnoreCase(messageStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && messageStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String integrationMode=jmsService.getType();
  if (REMOTE.equalsIgnoreCase(integrationMode)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String changeIntegrationMode=null;
  if (EMBEDDED.equalsIgnoreCase(integrationMode) && ENHANCED.equalsIgnoreCase(clusterType)) {
    try {
      ConfigSupport.apply(new SingleConfigCode<JmsService>(){
        public Object run(        JmsService param) throws PropertyVetoException, TransactionFailure {
          param.setType(LOCAL);
          return param;
        }
      }
,jmsService);
      changeIntegrationMode=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    TransactionFailure tfe) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str"" + tfe.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(tfe);
      return;
    }
  }
  if (MASTER_BROKER.equalsIgnoreCase(configStoreType) && FILE.equals(messageStoreType)) {
    if (dbvendor != null || dburl != null || dbuser != null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (!MASTER_BROKER.equalsIgnoreCase(configStoreType) || ENHANCED.equalsIgnoreCase(clusterType) || JDBC.equalsIgnoreCase(messageStoreType)) {
    if (dbvendor == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (dburl == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (!isSupportedDbVendor()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && configStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    configStoreType=""String_Node_Str"";
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && messageStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    messageStoreType=""String_Node_Str"";
  }
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsAvailability jmsAvailability=config.getAvailabilityService().getExtensionByType(JmsAvailability.class);
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  final Boolean availabilityEnabled=Boolean.valueOf(ENHANCED.equalsIgnoreCase(clusterType));
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsAvailability>(){
      public Object run(      JmsAvailability param) throws PropertyVetoException, TransactionFailure {
        param.setAvailabilityEnabled(availabilityEnabled.toString());
        if (availabilityEnabled.booleanValue()) {
          param.setMessageStoreType(JDBC);
        }
 else {
          param.setConfigStoreType(configStoreType.toLowerCase());
          param.setMessageStoreType(messageStoreType.toLowerCase());
        }
        param.setDbVendor(dbvendor);
        param.setDbUsername(dbuser);
        param.setDbPassword(jmsDbPassword);
        param.setDbUrl(dburl);
        if (props != null) {
          for (          Map.Entry e : props.entrySet()) {
            Property prop=param.createChild(Property.class);
            prop.setName((String)e.getKey());
            prop.setValue((String)e.getValue());
            param.getProperty().add(prop);
          }
        }
        return param;
      }
    }
,jmsAvailability);
  }
 catch (  TransactionFailure tfe) {
    report.setMessage((changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str""+ tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  String warning=null;
  if (instances.size() > 0) {
    warning=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
  }
  report.setMessage((warning == null ? ""String_Node_Str"" : warning + ""String_Node_Str"") + (changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  List instances=cluster.getInstances();
  Config config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsService=config.getExtensionByType(JmsService.class);
  if (jmsService == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!CONVENTIONAL.equalsIgnoreCase(clusterType) && !ENHANCED.equalsIgnoreCase(clusterType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !SHARED_DB.equalsIgnoreCase(configStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && configStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && !MASTER_BROKER.equalsIgnoreCase(configStoreType) && !FILE.equalsIgnoreCase(messageStoreType)&& !JDBC.equalsIgnoreCase(messageStoreType)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (ENHANCED.equalsIgnoreCase(clusterType) && messageStoreType != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String integrationMode=jmsService.getType();
  if (REMOTE.equalsIgnoreCase(integrationMode)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String changeIntegrationMode=null;
  if (EMBEDDED.equalsIgnoreCase(integrationMode) && ENHANCED.equalsIgnoreCase(clusterType)) {
    try {
      ConfigSupport.apply(new SingleConfigCode<JmsService>(){
        public Object run(        JmsService param) throws PropertyVetoException, TransactionFailure {
          param.setType(LOCAL);
          return param;
        }
      }
,jmsService);
      changeIntegrationMode=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    TransactionFailure tfe) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str"" + tfe.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(tfe);
      return;
    }
  }
  if (MASTER_BROKER.equalsIgnoreCase(configStoreType) && FILE.equals(messageStoreType)) {
    if (dbvendor != null || dburl != null || dbuser != null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (!MASTER_BROKER.equalsIgnoreCase(configStoreType) || ENHANCED.equalsIgnoreCase(clusterType) || JDBC.equalsIgnoreCase(messageStoreType)) {
    if (dbvendor == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (dburl == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
 else     if (!isSupportedDbVendor()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && configStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    configStoreType=""String_Node_Str"";
  }
  if (CONVENTIONAL.equalsIgnoreCase(clusterType) && messageStoreType == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    messageStoreType=""String_Node_Str"";
  }
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsAvailability jmsAvailability=config.getAvailabilityService().getExtensionByType(JmsAvailability.class);
  final Boolean availabilityEnabled=Boolean.valueOf(ENHANCED.equalsIgnoreCase(clusterType));
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsAvailability>(){
      public Object run(      JmsAvailability param) throws PropertyVetoException, TransactionFailure {
        param.setAvailabilityEnabled(availabilityEnabled.toString());
        if (availabilityEnabled.booleanValue()) {
          param.setMessageStoreType(JDBC);
        }
 else {
          param.setConfigStoreType(configStoreType.toLowerCase());
          param.setMessageStoreType(messageStoreType.toLowerCase());
        }
        param.setDbVendor(dbvendor);
        param.setDbUsername(dbuser);
        param.setDbPassword(jmsDbPassword);
        param.setDbUrl(dburl);
        if (props != null) {
          for (          Map.Entry e : props.entrySet()) {
            Property prop=param.createChild(Property.class);
            prop.setName((String)e.getKey());
            prop.setValue((String)e.getValue());
            param.getProperty().add(prop);
          }
        }
        return param;
      }
    }
,jmsAvailability);
  }
 catch (  TransactionFailure tfe) {
    report.setMessage((changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName) + ""String_Node_Str""+ tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  String warning=null;
  if (instances.size() > 0) {
    warning=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
  }
  report.setMessage((warning == null ? ""String_Node_Str"" : warning + ""String_Node_Str"") + (changeIntegrationMode == null ? ""String_Node_Str"" : changeIntegrationMode + ""String_Node_Str"") + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",clusterName));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
29074,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  logger.entering(getClass().getName(),""String_Node_Str"",new Object[]{destName,destType});
  try {
    validateJMSDestName(destName);
    validateJMSDestType(destType);
  }
 catch (  IllegalArgumentException e) {
    report.setMessage(e.getMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    Object ret=deleteJMSDestination(destName,destType,target);
    return;
  }
 catch (  Exception e) {
    logger.throwing(getClass().getName(),""String_Node_Str"",e);
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  logger.entering(getClass().getName(),""String_Node_Str"",new Object[]{destName,destType});
  try {
    validateJMSDestName(destName);
    validateJMSDestType(destType);
  }
 catch (  IllegalArgumentException e) {
    report.setMessage(e.getMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    deleteJMSDestination(destName,destType,target);
    return;
  }
 catch (  Exception e) {
    logger.throwing(getClass().getName(),""String_Node_Str"",e);
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
}"
29075,"public void purgeJMSDestination(String destName,String destType,String tgtName) throws Exception {
  logger.log(Level.FINE,""String_Node_Str"");
  MQJMXConnectorInfo[] mqInfos=getMQJMXConnectorInfos(target,config,serverContext,domain,connectorRuntime);
  if (mqInfos != null && mqInfos.length > 0) {
    for (    MQJMXConnectorInfo mqInfo : mqInfos) {
      try {
        MBeanServerConnection mbsc=mqInfo.getMQMBeanServerConnection();
        if (destType.equalsIgnoreCase(""String_Node_Str"")) {
          destType=DESTINATION_TYPE_TOPIC;
        }
 else         if (destType.equalsIgnoreCase(""String_Node_Str"")) {
          destType=DESTINATION_TYPE_QUEUE;
        }
        ObjectName on=createDestinationConfig(destType,destName);
        String[] signature=null;
        Object[] params=null;
        mbsc.invoke(on,""String_Node_Str"",params,signature);
      }
 catch (      Exception e) {
        logAndHandleException(e,""String_Node_Str"");
      }
 finally {
        try {
          if (mqInfo != null) {
            mqInfo.closeMQMBeanServerConnection();
          }
        }
 catch (        Exception e) {
          handleException(e);
        }
      }
    }
  }
}","public void purgeJMSDestination(String destName,String destType,String tgtName) throws Exception {
  logger.log(Level.FINE,""String_Node_Str"");
  MQJMXConnectorInfo[] mqInfos=getMQJMXConnectorInfos(target,config,serverContext,domain,connectorRuntime);
  if (mqInfos != null && mqInfos.length > 0) {
    for (    MQJMXConnectorInfo mqInfo : mqInfos) {
      try {
        MBeanServerConnection mbsc=mqInfo.getMQMBeanServerConnection();
        if (destType.equalsIgnoreCase(""String_Node_Str"")) {
          destType=DESTINATION_TYPE_TOPIC;
        }
 else         if (destType.equalsIgnoreCase(""String_Node_Str"")) {
          destType=DESTINATION_TYPE_QUEUE;
        }
        ObjectName on=createDestinationConfig(destType,destName);
        mbsc.invoke(on,""String_Node_Str"",null,null);
      }
 catch (      Exception e) {
        logAndHandleException(e,""String_Node_Str"");
      }
 finally {
        try {
          if (mqInfo != null) {
            mqInfo.closeMQMBeanServerConnection();
          }
        }
 catch (        Exception e) {
          handleException(e);
        }
      }
    }
  }
}"
29076,"protected MQJMXConnectorInfo _getMQJMXConnectorInfo(String targetName,JmsService jmsService,Class mqRAClassName,ServerContext serverContext,Config config,Domain domain) throws ConnectorRuntimeException {
  try {
    String connectionURL=null;
    MQAddressList mqadList=new MQAddressList();
    if (getTypeForTarget(targetName) == CommandTarget.DAS) {
      connectionURL=getDefaultAddressList(jmsService).toString();
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
      logger.log(Level.FINE,""String_Node_Str"");
      String domainurl=serverContext.getServerConfigURL();
      JmsService serverJmsService=getJmsServiceOfStandaloneServerInstance(targetName,config,domain);
      mqadList.setJmsService(serverJmsService);
      mqadList.setTargetName(targetName);
      mqadList.setup(false);
      connectionURL=mqadList.toString();
    }
    logger.log(Level.FINE,""String_Node_Str"" + connectionURL);
    String adminUserName=null;
    String adminPassword=null;
    JmsHost jmsHost=mqadList.getDefaultJmsHost(jmsService);
    if (jmsHost != null) {
      adminUserName=jmsHost.getAdminUserName();
      adminPassword=JmsRaUtil.getUnAliasedPwd(jmsHost.getAdminPassword());
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    ResourceAdapter raInstance=getConfiguredRA(mqRAClassName,connectionURL,adminUserName,adminPassword);
    String jmxServiceURL=null, jmxServiceURLList=null;
    Map<String,?> jmxConnectorEnv=null;
    Method[] methds=raInstance.getClass().getMethods();
    for (int i=0; i < methds.length; i++) {
      Method m=methds[i];
      if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXSERVICEURLLIST)) {
        jmxServiceURLList=(String)m.invoke(raInstance,new Object[]{});
      }
 else       if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXCONNECTORENV)) {
        jmxConnectorEnv=(Map<String,?>)m.invoke(raInstance,new Object[]{});
      }
    }
    logger.log(Level.FINE,""String_Node_Str"" + jmxServiceURLList);
    logger.log(Level.FINE,""String_Node_Str"" + jmxConnectorEnv);
    jmxServiceURL=getFirstJMXServiceURL(jmxServiceURLList);
    MQJMXConnectorInfo mqInfo=new MQJMXConnectorInfo(targetName,ActiveJmsResourceAdapter.getBrokerInstanceName(jmsService),jmsService.getType(),jmxServiceURL,jmxConnectorEnv);
    return mqInfo;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectorRuntimeException cre=new ConnectorRuntimeException(e.getMessage());
    cre.initCause(e);
    throw cre;
  }
}","protected MQJMXConnectorInfo _getMQJMXConnectorInfo(String targetName,JmsService jmsService,Class mqRAClassName,ServerContext serverContext,Config config,Domain domain) throws ConnectorRuntimeException {
  try {
    String connectionURL=null;
    MQAddressList mqadList=new MQAddressList();
    if (getTypeForTarget(targetName) == CommandTarget.DAS) {
      connectionURL=getDefaultAddressList(jmsService).toString();
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
      logger.log(Level.FINE,""String_Node_Str"");
      JmsService serverJmsService=getJmsServiceOfStandaloneServerInstance(targetName,config,domain);
      mqadList.setJmsService(serverJmsService);
      mqadList.setTargetName(targetName);
      mqadList.setup(false);
      connectionURL=mqadList.toString();
    }
    logger.log(Level.FINE,""String_Node_Str"" + connectionURL);
    String adminUserName=null;
    String adminPassword=null;
    JmsHost jmsHost=mqadList.getDefaultJmsHost(jmsService);
    if (jmsHost != null) {
      adminUserName=jmsHost.getAdminUserName();
      adminPassword=JmsRaUtil.getUnAliasedPwd(jmsHost.getAdminPassword());
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    ResourceAdapter raInstance=getConfiguredRA(mqRAClassName,connectionURL,adminUserName,adminPassword);
    String jmxServiceURL=null, jmxServiceURLList=null;
    Map<String,?> jmxConnectorEnv=null;
    Method[] methds=raInstance.getClass().getMethods();
    for (int i=0; i < methds.length; i++) {
      Method m=methds[i];
      if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXSERVICEURLLIST)) {
        jmxServiceURLList=(String)m.invoke(raInstance,new Object[]{});
      }
 else       if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXCONNECTORENV)) {
        jmxConnectorEnv=(Map<String,?>)m.invoke(raInstance,new Object[]{});
      }
    }
    logger.log(Level.FINE,""String_Node_Str"" + jmxServiceURLList);
    logger.log(Level.FINE,""String_Node_Str"" + jmxConnectorEnv);
    jmxServiceURL=getFirstJMXServiceURL(jmxServiceURLList);
    MQJMXConnectorInfo mqInfo=new MQJMXConnectorInfo(targetName,ActiveJmsResourceAdapter.getBrokerInstanceName(jmsService),jmsService.getType(),jmxServiceURL,jmxConnectorEnv);
    return mqInfo;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectorRuntimeException cre=new ConnectorRuntimeException(e.getMessage());
    cre.initCause(e);
    throw cre;
  }
}"
29077,"/** 
 * Gets the <code>MQJMXConnector</code> object for a cluster. Since this code is executed in DAS, an admin API is used to resolve hostnames and ports of cluster instances for LOCAL type brokers while creating the connectionURL.
 */
protected MQJMXConnectorInfo _getMQJMXConnectorInfoForCluster(String target,JmsService jmsService,Class mqRAClassName,ServerContext serverContext) throws ConnectorRuntimeException {
  ResourceAdapter raInstance=null;
  MQAddressList list=null;
  try {
    if (jmsService.getType().equalsIgnoreCase(ActiveJmsResourceAdapter.REMOTE)) {
      list=getDefaultAddressList(jmsService);
    }
 else {
      list=new MQAddressList();
      CommandTarget ctarget=this.getTypeForTarget(target);
      if (ctarget == CommandTarget.CLUSTER) {
        Server[] servers=list.getServersInCluster(target);
        if (servers != null && servers.length > 0)         list.setInstanceName(servers[0].getName());
      }
 else       if (ctarget == CommandTarget.CLUSTERED_INSTANCE) {
        list.setInstanceName(target);
      }
      String domainurl=serverContext.getServerConfigURL();
      java.util.Map<String,JmsHost> hostMap=list.getResolvedLocalJmsHostsInMyCluster(true);
      if (hostMap.size() == 0) {
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        throw new ConnectorRuntimeException(msg);
      }
      for (      JmsHost host : hostMap.values()) {
        list.addMQUrl(host);
      }
    }
    String connectionUrl=list.toString();
    String adminUserName=null;
    String adminPassword=null;
    JmsHost jmsHost=list.getDefaultJmsHost(jmsService);
    if (jmsHost != null) {
      adminUserName=jmsHost.getAdminUserName();
      adminPassword=JmsRaUtil.getUnAliasedPwd(jmsHost.getAdminPassword());
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    raInstance=getConfiguredRA(mqRAClassName,connectionUrl,adminUserName,adminPassword);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectorRuntimeException cre=new ConnectorRuntimeException(e.getMessage());
    cre.initCause(e);
    throw cre;
  }
  try {
    String jmxServiceURL=null, jmxServiceURLList=null;
    Map<String,?> jmxConnectorEnv=null;
    Method[] methds=raInstance.getClass().getMethods();
    for (int i=0; i < methds.length; i++) {
      Method m=methds[i];
      if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXSERVICEURLLIST)) {
        jmxServiceURLList=(String)m.invoke(raInstance,new Object[]{});
        if (jmxServiceURLList != null && !jmxServiceURLList.trim().equals(""String_Node_Str"")) {
          jmxServiceURL=getFirstJMXServiceURL(jmxServiceURLList);
        }
      }
 else       if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXCONNECTORENV)) {
        jmxConnectorEnv=(Map<String,?>)m.invoke(raInstance,new Object[]{});
      }
    }
    MQJMXConnectorInfo mqInfo=new MQJMXConnectorInfo(target,ActiveJmsResourceAdapter.getBrokerInstanceName(jmsService),jmsService.getType(),jmxServiceURL,jmxConnectorEnv);
    return mqInfo;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectorRuntimeException cre=new ConnectorRuntimeException(e.getMessage());
    cre.initCause(e);
    throw cre;
  }
}","/** 
 * Gets the <code>MQJMXConnector</code> object for a cluster. Since this code is executed in DAS, an admin API is used to resolve hostnames and ports of cluster instances for LOCAL type brokers while creating the connectionURL.
 */
protected MQJMXConnectorInfo _getMQJMXConnectorInfoForCluster(String target,JmsService jmsService,Class mqRAClassName,ServerContext serverContext) throws ConnectorRuntimeException {
  ResourceAdapter raInstance=null;
  MQAddressList list=null;
  try {
    if (jmsService.getType().equalsIgnoreCase(ActiveJmsResourceAdapter.REMOTE)) {
      list=getDefaultAddressList(jmsService);
    }
 else {
      list=new MQAddressList();
      CommandTarget ctarget=this.getTypeForTarget(target);
      if (ctarget == CommandTarget.CLUSTER) {
        Server[] servers=list.getServersInCluster(target);
        if (servers != null && servers.length > 0)         list.setInstanceName(servers[0].getName());
      }
 else       if (ctarget == CommandTarget.CLUSTERED_INSTANCE) {
        list.setInstanceName(target);
      }
      java.util.Map<String,JmsHost> hostMap=list.getResolvedLocalJmsHostsInMyCluster(true);
      if (hostMap.size() == 0) {
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        throw new ConnectorRuntimeException(msg);
      }
      for (      JmsHost host : hostMap.values()) {
        list.addMQUrl(host);
      }
    }
    String connectionUrl=list.toString();
    String adminUserName=null;
    String adminPassword=null;
    JmsHost jmsHost=list.getDefaultJmsHost(jmsService);
    if (jmsHost != null) {
      adminUserName=jmsHost.getAdminUserName();
      adminPassword=JmsRaUtil.getUnAliasedPwd(jmsHost.getAdminPassword());
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    raInstance=getConfiguredRA(mqRAClassName,connectionUrl,adminUserName,adminPassword);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectorRuntimeException cre=new ConnectorRuntimeException(e.getMessage());
    cre.initCause(e);
    throw cre;
  }
  try {
    String jmxServiceURL=null, jmxServiceURLList=null;
    Map<String,?> jmxConnectorEnv=null;
    Method[] methds=raInstance.getClass().getMethods();
    for (int i=0; i < methds.length; i++) {
      Method m=methds[i];
      if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXSERVICEURLLIST)) {
        jmxServiceURLList=(String)m.invoke(raInstance,new Object[]{});
        if (jmxServiceURLList != null && !jmxServiceURLList.trim().equals(""String_Node_Str"")) {
          jmxServiceURL=getFirstJMXServiceURL(jmxServiceURLList);
        }
      }
 else       if (m.getName().equalsIgnoreCase(""String_Node_Str"" + JMXCONNECTORENV)) {
        jmxConnectorEnv=(Map<String,?>)m.invoke(raInstance,new Object[]{});
      }
    }
    MQJMXConnectorInfo mqInfo=new MQJMXConnectorInfo(target,ActiveJmsResourceAdapter.getBrokerInstanceName(jmsService),jmsService.getType(),jmxServiceURL,jmxConnectorEnv);
    return mqInfo;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectorRuntimeException cre=new ConnectorRuntimeException(e.getMessage());
    cre.initCause(e);
    throw cre;
  }
}"
29078,"/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public ArrayList<Job> getExpiredJobs(){
  ArrayList expiredJobs=new ArrayList();
  Iterator<Job> jobs=getJobs();
  while (jobs.hasNext()) {
    Job job=jobs.next();
    long executedTime=job.getCommandExecutionDate();
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    boolean enableJobManager=Boolean.parseBoolean(System.getProperty(""String_Node_Str""));
    if (enableJobManager) {
      managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
      jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    }
    if (currentTime - executedTime > jobsRetentionPeriod) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}","/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public ArrayList<Job> getExpiredJobs(){
  ArrayList expiredJobs=new ArrayList();
  Iterator<Job> jobs=getJobs();
  while (jobs.hasNext()) {
    Job job=jobs.next();
    long executedTime=job.getCommandExecutionDate();
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    boolean enableJobManager=Boolean.parseBoolean(System.getProperty(""String_Node_Str""));
    if (enableJobManager) {
      managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
      jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    }
    if (currentTime - executedTime > jobsRetentionPeriod && job.getState().equals(AdminCommandState.State.COMPLETED)) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}"
29079,"public CacheProperties(EntityContainer entityContainer){
  numberOfVictimsToSelect=Integer.parseInt(entityContainer.ejbContainer.getCacheResizeQuantity());
  maxCacheSize=Integer.parseInt(entityContainer.ejbContainer.getMaxCacheSize());
  cacheIdleTimeoutInSeconds=Integer.parseInt(entityContainer.ejbContainer.getCacheIdleTimeoutInSeconds());
  victimSelectionPolicy=entityContainer.ejbContainer.getVictimSelectionPolicy();
  removalTimeoutInSeconds=Integer.parseInt(entityContainer.ejbContainer.getRemovalTimeoutInSeconds());
  if (entityContainer.beanCacheDes != null) {
    int temp=0;
    if ((temp=entityContainer.beanCacheDes.getResizeQuantity()) != -1) {
      numberOfVictimsToSelect=temp;
    }
    if ((temp=entityContainer.beanCacheDes.getMaxCacheSize()) != -1) {
      maxCacheSize=temp;
    }
    if ((temp=entityContainer.beanCacheDes.getCacheIdleTimeoutInSeconds()) != -1) {
      cacheIdleTimeoutInSeconds=temp;
    }
    if ((entityContainer.beanCacheDes.getVictimSelectionPolicy()) != null) {
      victimSelectionPolicy=entityContainer.beanCacheDes.getVictimSelectionPolicy();
    }
    if ((temp=entityContainer.beanCacheDes.getRemovalTimeoutInSeconds()) != -1) {
      removalTimeoutInSeconds=temp;
    }
  }
}","public CacheProperties(EntityContainer entityContainer){
  numberOfVictimsToSelect=Integer.parseInt(entityContainer.ejbContainer.getCacheResizeQuantity());
  maxCacheSize=Integer.parseInt(entityContainer.ejbContainer.getMaxCacheSize());
  cacheIdleTimeoutInSeconds=Integer.parseInt(entityContainer.ejbContainer.getCacheIdleTimeoutInSeconds());
  if (entityContainer.beanCacheDes != null) {
    int temp=0;
    if ((temp=entityContainer.beanCacheDes.getResizeQuantity()) != -1) {
      numberOfVictimsToSelect=temp;
    }
    if ((temp=entityContainer.beanCacheDes.getMaxCacheSize()) != -1) {
      maxCacheSize=temp;
    }
    if ((temp=entityContainer.beanCacheDes.getCacheIdleTimeoutInSeconds()) != -1) {
      cacheIdleTimeoutInSeconds=temp;
    }
  }
}"
29080,"private void handlePost(HttpServletRequest req,HttpServletResponse resp,EjbRuntimeEndpointInfo endpointInfo) throws IOException, SOAPException {
  JAXRPCEndpointImpl endpoint=null;
  String messageID=null;
  SOAPMessageContext msgContext=null;
  try {
    MimeHeaders headers=wsUtil.getHeaders(req);
    if (!wsUtil.hasTextXmlContentType(headers)) {
      wsUtil.writeInvalidContentType(resp);
      return;
    }
    msgContext=rpcFactory.createSOAPMessageContext();
    SOAPMessage message=createSOAPMessage(req,headers);
    boolean wssSucceded=true;
    if (message != null) {
      msgContext.setMessage(message);
      endpoint=(JAXRPCEndpointImpl)endpointInfo.getEndpoint().getExtraAttribute(EndpointImpl.NAME);
      if (endpoint != null) {
        if (wsEngine.hasGlobalMessageListener()) {
          messageID=wsEngine.preProcessRequest(endpoint);
        }
      }
 else {
        logger.fine(""String_Node_Str"" + req.getRequestURI());
      }
      AdapterInvocationInfo aInfo=null;
      try {
        Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
        aInfo=endpointInfo2.getHandlerImplementor();
        ((EJBInvocation)aInfo.getInv()).setMessageContext(msgContext);
        msgContext.setProperty(HTTP_SERVLET_RESPONSE,resp);
        if (secServ != null) {
          wssSucceded=secServ.validateRequest(endpointInfo2.getServerAuthConfig(),(StreamingHandler)aInfo.getHandler(),msgContext);
        }
        if (messageID != null || (endpoint != null && endpoint.hasListeners())) {
          ThreadLocalInfo threadLocalInfo=new ThreadLocalInfo(messageID,req);
          wsEngine.getThreadLocal().set(threadLocalInfo);
          endpoint.processRequest(msgContext);
        }
        if (wssSucceded) {
          aInfo.getHandler().handle(msgContext);
        }
      }
  finally {
        if (aInfo != null) {
          endpointInfo.releaseImplementor(aInfo.getInv());
        }
      }
    }
 else {
      String errorMsg=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
      logger.fine(errorMsg);
      msgContext.writeSimpleErrorResponse(FAULT_CODE_CLIENT,errorMsg);
    }
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(msgContext);
    }
    SOAPMessage reply=msgContext.getMessage();
    if (secServ != null && wssSucceded) {
      Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
      secServ.secureResponse(endpointInfo2.getServerAuthConfig(),(StreamingHandler)endpointInfo2.getHandlerImplementor().getHandler(),msgContext);
    }
    if (reply.saveRequired()) {
      reply.saveChanges();
    }
    wsUtil.writeReply(resp,msgContext);
  }
 catch (  Throwable e) {
    String errorMessage=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
    logger.log(Level.WARNING,errorMessage,e);
    SOAPMessageContext errorMsgContext=rpcFactory.createSOAPMessageContext();
    errorMsgContext.writeSimpleErrorResponse(SOAPConstants.FAULT_CODE_SERVER,errorMessage);
    resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(errorMsgContext);
    }
    wsUtil.writeReply(resp,errorMsgContext);
  }
  if (messageID != null) {
    HttpResponseInfoImpl response=new HttpResponseInfoImpl(resp);
    wsEngine.postProcessResponse(messageID,response);
  }
}","private void handlePost(HttpServletRequest req,HttpServletResponse resp,EjbRuntimeEndpointInfo endpointInfo) throws IOException, SOAPException {
  JAXRPCEndpointImpl endpoint=null;
  String messageID=null;
  SOAPMessageContext msgContext=null;
  try {
    MimeHeaders headers=wsUtil.getHeaders(req);
    if (!wsUtil.hasTextXmlContentType(headers)) {
      wsUtil.writeInvalidContentType(resp);
      return;
    }
    msgContext=rpcFactory.createSOAPMessageContext();
    SOAPMessage message=createSOAPMessage(req,headers);
    boolean wssSucceded=true;
    if (message != null) {
      msgContext.setMessage(message);
      endpoint=(JAXRPCEndpointImpl)endpointInfo.getEndpoint().getExtraAttribute(EndpointImpl.NAME);
      if (endpoint != null) {
        if (wsEngine.hasGlobalMessageListener()) {
          messageID=wsEngine.preProcessRequest(endpoint);
        }
      }
 else {
        logger.fine(""String_Node_Str"" + req.getRequestURI());
      }
      AdapterInvocationInfo aInfo=null;
      if (!(endpointInfo instanceof Ejb2RuntimeEndpointInfo)) {
        throw new IllegalArgumentException(endpointInfo + ""String_Node_Str"");
      }
      try {
        Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
        aInfo=endpointInfo2.getHandlerImplementor();
        ((EJBInvocation)aInfo.getInv()).setMessageContext(msgContext);
        msgContext.setProperty(HTTP_SERVLET_RESPONSE,resp);
        if (secServ != null) {
          wssSucceded=secServ.validateRequest(endpointInfo2.getServerAuthConfig(),(StreamingHandler)aInfo.getHandler(),msgContext);
        }
        if (messageID != null || (endpoint != null && endpoint.hasListeners())) {
          ThreadLocalInfo threadLocalInfo=new ThreadLocalInfo(messageID,req);
          wsEngine.getThreadLocal().set(threadLocalInfo);
          endpoint.processRequest(msgContext);
        }
        if (wssSucceded) {
          aInfo.getHandler().handle(msgContext);
        }
      }
  finally {
        if (aInfo != null) {
          endpointInfo.releaseImplementor(aInfo.getInv());
        }
      }
    }
 else {
      String errorMsg=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
      logger.fine(errorMsg);
      msgContext.writeSimpleErrorResponse(FAULT_CODE_CLIENT,errorMsg);
    }
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(msgContext);
    }
    SOAPMessage reply=msgContext.getMessage();
    if (secServ != null && wssSucceded) {
      if (!(endpointInfo instanceof Ejb2RuntimeEndpointInfo)) {
        throw new IllegalArgumentException(endpointInfo + ""String_Node_Str"");
      }
      Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
      secServ.secureResponse(endpointInfo2.getServerAuthConfig(),(StreamingHandler)endpointInfo2.getHandlerImplementor().getHandler(),msgContext);
    }
    if (reply.saveRequired()) {
      reply.saveChanges();
    }
    wsUtil.writeReply(resp,msgContext);
  }
 catch (  Throwable e) {
    String errorMessage=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
    logger.log(Level.WARNING,errorMessage,e);
    SOAPMessageContext errorMsgContext=rpcFactory.createSOAPMessageContext();
    errorMsgContext.writeSimpleErrorResponse(SOAPConstants.FAULT_CODE_SERVER,errorMessage);
    resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(errorMsgContext);
    }
    wsUtil.writeReply(resp,errorMsgContext);
  }
  if (messageID != null) {
    HttpResponseInfoImpl response=new HttpResponseInfoImpl(resp);
    wsEngine.postProcessResponse(messageID,response);
  }
}"
29081,"/** 
 * @return a method object representing the target of a web service invocation
 */
public Method getInvMethod(Tie webServiceTie,MessageContext context) throws Exception {
  SOAPMessageContext soapMsgContext=(SOAPMessageContext)context;
  SOAPMessage message=soapMsgContext.getMessage();
  StreamingHandler streamingHandler=(StreamingHandler)webServiceTie;
  int opcode=streamingHandler.getOpcodeForRequestMessage(message);
  return streamingHandler.getMethodForOpcode(opcode);
}","/** 
 * @return a method object representing the target of a web service invocation
 */
public Method getInvMethod(Tie webServiceTie,MessageContext context) throws Exception {
  SOAPMessageContext soapMsgContext=(SOAPMessageContext)context;
  SOAPMessage message=soapMsgContext.getMessage();
  if (!(webServiceTie instanceof StreamingHandler)) {
    throw new IllegalArgumentException(webServiceTie + ""String_Node_Str"");
  }
  StreamingHandler streamingHandler=(StreamingHandler)webServiceTie;
  int opcode=streamingHandler.getOpcodeForRequestMessage(message);
  return streamingHandler.getMethodForOpcode(opcode);
}"
29082,"/** 
 * checks whether duplicate resource exists or resource is already created but not resource-ref or resource-ref already exists.
 * @param resources resources
 * @param jndiName resource-name
 * @param validateResourceRef whether to validate resource-ref
 * @param target target instance/cluster/domain
 * @param resourceTypeToValidate type of resource
 * @return ResourceStatus indicating Success or Failure
 */
public ResourceStatus validateBindableResourceForDuplicates(Resources resources,String jndiName,boolean validateResourceRef,String target,Class<? extends BindableResource> resourceTypeToValidate){
  BindableResource duplicateResource=ResourceUtil.getBindableResourceByName(resources,jndiName);
  if (duplicateResource != null) {
    String msg;
    if (validateResourceRef && (getResourceByClass(duplicateResource).equals(resourceTypeToValidate))) {
      if (target.equals(""String_Node_Str"")) {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName);
      }
 else       if (habitat.<org.glassfish.resourcebase.resources.admin.cli.ResourceUtil>getService(ResourceUtil.class).getTargetsReferringResourceRef(jndiName).contains(target)) {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName,target);
      }
 else {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName,target);
      }
    }
 else {
      msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName);
    }
    return new ResourceStatus(ResourceStatus.FAILURE,msg,true);
  }
 else {
    return new ResourceStatus(ResourceStatus.SUCCESS,""String_Node_Str"");
  }
}","/** 
 * checks whether duplicate resource exists or resource is already created but not resource-ref or resource-ref already exists.
 * @param resources resources
 * @param jndiName resource-name
 * @param validateResourceRef whether to validate resource-ref
 * @param target target instance/cluster/domain
 * @param resourceTypeToValidate type of resource
 * @return ResourceStatus indicating Success or Failure
 */
public ResourceStatus validateBindableResourceForDuplicates(Resources resources,String jndiName,boolean validateResourceRef,String target,Class<? extends BindableResource> resourceTypeToValidate){
  BindableResource duplicateResource=ResourceUtil.getBindableResourceByName(resources,jndiName);
  if (duplicateResource != null) {
    String msg;
    if (validateResourceRef && (getResourceByClass(duplicateResource).equals(resourceTypeToValidate))) {
      if (target.equals(""String_Node_Str"")) {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName);
      }
 else       if (habitat.<org.glassfish.resourcebase.resources.admin.cli.ResourceUtil>getService(org.glassfish.resourcebase.resources.admin.cli.ResourceUtil.class).getTargetsReferringResourceRef(jndiName).contains(target)) {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName,target);
      }
 else {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName,target);
      }
    }
 else {
      msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",getResourceTypeName(duplicateResource),jndiName);
    }
    return new ResourceStatus(ResourceStatus.FAILURE,msg,true);
  }
 else {
    return new ResourceStatus(ResourceStatus.SUCCESS,""String_Node_Str"");
  }
}"
29083,"@Override public <A>A get(String key,Class<A> clazz){
  if (key == null || key.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (clazz == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DataProvider provider=adminCahceUtils.getProvider(clazz);
  if (provider == null) {
    return null;
  }
  InputStream is=null;
  try {
    is=getInputStream(key);
    return (A)provider.toInstance(is,clazz);
  }
 catch (  FileNotFoundException ex) {
    return null;
  }
catch (  IOException ex) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,AdminLoggerInfo.mCannotReadCache,new Object[]{key});
    }
    return null;
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception ex) {
    }
  }
}","@Override public <A>A get(String key,Class<A> clazz){
  if (key == null || key.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (clazz == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DataProvider provider=adminCahceUtils.getProvider(clazz);
  if (provider == null) {
    return null;
  }
  InputStream is=null;
  try {
    is=getInputStream(key);
    return (A)provider.toInstance(is,clazz);
  }
 catch (  FileNotFoundException ex) {
    return null;
  }
catch (  IOException ex) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,AdminLoggerInfo.mCannotReadCache,new Object[]{key});
    }
    return null;
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}"
29084,"public static Habitat getHabitat(){
  ServletContext servletCtx=(ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext();
  Habitat habitat=(Habitat)servletCtx.getAttribute(org.glassfish.admingui.common.plugin.ConsoleClassLoader.HABITAT_ATTRIBUTE);
  return habitat;
}","public static ServiceLocator getHabitat(){
  ServletContext servletCtx=(ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext();
  ServiceLocator habitat=(ServiceLocator)servletCtx.getAttribute(org.glassfish.admingui.common.plugin.ConsoleClassLoader.HABITAT_ATTRIBUTE);
  return habitat;
}"
29085,"public GlassFishDocument(final Habitat habitat,final ExecutorService executor){
  super(habitat);
  ServiceLocatorUtilities.addOneConstant(habitat,executor,""String_Node_Str"",ExecutorService.class);
  ServiceLocatorUtilities.addOneConstant(habitat,this,null,DomDocument.class);
  final DomDocument doc=this;
  habitat.<Transactions>getService(Transactions.class).addTransactionsListener(new TransactionListener(){
    public void transactionCommited(    List<PropertyChangeEvent> changes){
      for (      ConfigurationPersistence pers : habitat.<ConfigurationPersistence>getAllServices(ConfigurationPersistence.class)) {
        try {
          if (doc.getRoot().getProxyType().equals(Domain.class)) {
            Dom domainRoot=doc.getRoot();
            domainRoot.attribute(""String_Node_Str"",Version.getBuildVersion());
          }
          pers.save(doc);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,""String_Node_Str"",new String[]{e.getMessage()});
          logger.log(Level.FINE,e.getMessage(),e);
        }
catch (        XMLStreamException e) {
          logger.log(Level.SEVERE,""String_Node_Str"",new String[]{e.getMessage()});
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
      }
    }
    public void unprocessedTransactedEvents(    List<UnprocessedChangeEvents> changes){
    }
  }
);
}","public GlassFishDocument(final ServiceLocator habitat,final ExecutorService executor){
  super(habitat);
  ServiceLocatorUtilities.addOneConstant(habitat,executor,""String_Node_Str"",ExecutorService.class);
  ServiceLocatorUtilities.addOneConstant(habitat,this,null,DomDocument.class);
  final DomDocument doc=this;
  habitat.<Transactions>getService(Transactions.class).addTransactionsListener(new TransactionListener(){
    public void transactionCommited(    List<PropertyChangeEvent> changes){
      for (      ConfigurationPersistence pers : habitat.<ConfigurationPersistence>getAllServices(ConfigurationPersistence.class)) {
        try {
          if (doc.getRoot().getProxyType().equals(Domain.class)) {
            Dom domainRoot=doc.getRoot();
            domainRoot.attribute(""String_Node_Str"",Version.getBuildVersion());
          }
          pers.save(doc);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,""String_Node_Str"",new String[]{e.getMessage()});
          logger.log(Level.FINE,e.getMessage(),e);
        }
catch (        XMLStreamException e) {
          logger.log(Level.SEVERE,""String_Node_Str"",new String[]{e.getMessage()});
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
      }
    }
    public void unprocessedTransactedEvents(    List<UnprocessedChangeEvents> changes){
    }
  }
);
}"
29086,"@Override public GlassFishConfigBean make(final ServiceLocator habitat,XMLStreamReader xmlStreamReader,GlassFishConfigBean dom,ConfigModel configModel){
  return new GlassFishConfigBean((Habitat)habitat,this,dom,configModel,xmlStreamReader);
}","@Override public GlassFishConfigBean make(final ServiceLocator habitat,XMLStreamReader xmlStreamReader,GlassFishConfigBean dom,ConfigModel configModel){
  return new GlassFishConfigBean(habitat,this,dom,configModel,xmlStreamReader);
}"
29087,"/** 
 * Creates a new GlassFish instance and add it to a Map of instances created by this runtime.
 * @param glassFishProperties
 * @return
 * @throws Exception
 */
@Override public synchronized GlassFish newGlassFish(GlassFishProperties glassFishProperties) throws GlassFishException {
  try {
    Properties cloned=new Properties();
    cloned.putAll(glassFishProperties.getProperties());
    final GlassFishProperties gfProps=new GlassFishProperties(cloned);
    setEnv(gfProps);
    final StartupContext startupContext=new StartupContext(gfProps.getProperties());
    ModulesRegistry modulesRegistry=SingleHK2Factory.getInstance().createModulesRegistry();
    Binder postProcessorBinder=new Binder(){
      @Override public void bind(      DynamicConfiguration config){
        config.bind(BuilderHelper.createConstantDescriptor(new EmbeddedInhabitantsParser()));
      }
    }
;
    ServiceLocator serviceLocator=main.createServiceLocator(modulesRegistry,startupContext,postProcessorBinder,null);
    final Habitat habitat=serviceLocator.getService(Habitat.class);
    final ModuleStartup gfKernel=main.findStartupService(modulesRegistry,serviceLocator,null,startupContext);
    GlassFishImpl gfImpl=new GlassFishImpl(gfKernel,habitat,gfProps.getProperties()){
      @Override public void dispose() throws GlassFishException {
        try {
          super.dispose();
        }
  finally {
          gfMap.remove(gfProps.getInstanceRoot());
          if (""String_Node_Str"".equalsIgnoreCase(gfProps.getProperties().getProperty(autoDelete)) && gfProps.getInstanceRoot() != null) {
            File instanceRoot=new File(gfProps.getInstanceRoot());
            if (instanceRoot.exists()) {
              Util.deleteRecursive(instanceRoot);
            }
          }
        }
      }
    }
;
    gfMap.put(gfProps.getInstanceRoot(),gfImpl);
    return gfImpl;
  }
 catch (  GlassFishException e) {
    throw e;
  }
catch (  Exception e) {
    throw new GlassFishException(e);
  }
}","/** 
 * Creates a new GlassFish instance and add it to a Map of instances created by this runtime.
 * @param glassFishProperties
 * @return
 * @throws Exception
 */
@Override public synchronized GlassFish newGlassFish(GlassFishProperties glassFishProperties) throws GlassFishException {
  try {
    Properties cloned=new Properties();
    cloned.putAll(glassFishProperties.getProperties());
    final GlassFishProperties gfProps=new GlassFishProperties(cloned);
    setEnv(gfProps);
    final StartupContext startupContext=new StartupContext(gfProps.getProperties());
    ModulesRegistry modulesRegistry=SingleHK2Factory.getInstance().createModulesRegistry();
    Binder postProcessorBinder=new Binder(){
      @Override public void bind(      DynamicConfiguration config){
        config.bind(BuilderHelper.createConstantDescriptor(new EmbeddedInhabitantsParser()));
      }
    }
;
    ServiceLocator serviceLocator=main.createServiceLocator(modulesRegistry,startupContext,postProcessorBinder,null);
    final ModuleStartup gfKernel=main.findStartupService(modulesRegistry,serviceLocator,null,startupContext);
    GlassFishImpl gfImpl=new GlassFishImpl(gfKernel,serviceLocator,gfProps.getProperties()){
      @Override public void dispose() throws GlassFishException {
        try {
          super.dispose();
        }
  finally {
          gfMap.remove(gfProps.getInstanceRoot());
          if (""String_Node_Str"".equalsIgnoreCase(gfProps.getProperties().getProperty(autoDelete)) && gfProps.getInstanceRoot() != null) {
            File instanceRoot=new File(gfProps.getInstanceRoot());
            if (instanceRoot.exists()) {
              Util.deleteRecursive(instanceRoot);
            }
          }
        }
      }
    }
;
    gfMap.put(gfProps.getInstanceRoot(),gfImpl);
    return gfImpl;
  }
 catch (  GlassFishException e) {
    throw e;
  }
catch (  Exception e) {
    throw new GlassFishException(e);
  }
}"
29088,"public CacheProperties(){
  numberOfVictimsToSelect=Integer.parseInt(ejbContainer.getCacheResizeQuantity());
  maxCacheSize=Integer.parseInt(ejbContainer.getMaxCacheSize());
  cacheIdleTimeoutInSeconds=Integer.parseInt(ejbContainer.getCacheIdleTimeoutInSeconds());
  victimSelectionPolicy=ejbContainer.getVictimSelectionPolicy();
  removalTimeoutInSeconds=Integer.parseInt(ejbContainer.getRemovalTimeoutInSeconds());
  if (beanCacheDes != null) {
    int temp=0;
    if ((temp=beanCacheDes.getResizeQuantity()) != -1) {
      numberOfVictimsToSelect=temp;
    }
    if ((temp=beanCacheDes.getMaxCacheSize()) != -1) {
      maxCacheSize=temp;
    }
    if ((temp=beanCacheDes.getCacheIdleTimeoutInSeconds()) != -1) {
      cacheIdleTimeoutInSeconds=temp;
    }
    if ((beanCacheDes.getVictimSelectionPolicy()) != null) {
      victimSelectionPolicy=beanCacheDes.getVictimSelectionPolicy();
    }
    if ((temp=beanCacheDes.getRemovalTimeoutInSeconds()) != -1) {
      removalTimeoutInSeconds=temp;
    }
  }
}","public CacheProperties(EntityContainer entityContainer){
  numberOfVictimsToSelect=Integer.parseInt(entityContainer.ejbContainer.getCacheResizeQuantity());
  maxCacheSize=Integer.parseInt(entityContainer.ejbContainer.getMaxCacheSize());
  cacheIdleTimeoutInSeconds=Integer.parseInt(entityContainer.ejbContainer.getCacheIdleTimeoutInSeconds());
  victimSelectionPolicy=entityContainer.ejbContainer.getVictimSelectionPolicy();
  removalTimeoutInSeconds=Integer.parseInt(entityContainer.ejbContainer.getRemovalTimeoutInSeconds());
  if (entityContainer.beanCacheDes != null) {
    int temp=0;
    if ((temp=entityContainer.beanCacheDes.getResizeQuantity()) != -1) {
      numberOfVictimsToSelect=temp;
    }
    if ((temp=entityContainer.beanCacheDes.getMaxCacheSize()) != -1) {
      maxCacheSize=temp;
    }
    if ((temp=entityContainer.beanCacheDes.getCacheIdleTimeoutInSeconds()) != -1) {
      cacheIdleTimeoutInSeconds=temp;
    }
    if ((entityContainer.beanCacheDes.getVictimSelectionPolicy()) != null) {
      victimSelectionPolicy=entityContainer.beanCacheDes.getVictimSelectionPolicy();
    }
    if ((temp=entityContainer.beanCacheDes.getRemovalTimeoutInSeconds()) != -1) {
      removalTimeoutInSeconds=temp;
    }
  }
}"
29089,"private void createCaches() throws Exception {
  cacheProp=new CacheProperties();
  int cacheSize=cacheProp.maxCacheSize;
  int numberOfVictimsToSelect=cacheProp.numberOfVictimsToSelect;
  float loadFactor=DEFAULT_LOAD_FACTOR;
  idleTimeout=cacheProp.cacheIdleTimeoutInSeconds * 1000L;
  createReadyStore(cacheSize,numberOfVictimsToSelect,loadFactor,idleTimeout);
  createEJBObjectStores(cacheSize,numberOfVictimsToSelect,idleTimeout);
}","private void createCaches() throws Exception {
  cacheProp=new CacheProperties(this);
  int cacheSize=cacheProp.maxCacheSize;
  int numberOfVictimsToSelect=cacheProp.numberOfVictimsToSelect;
  float loadFactor=DEFAULT_LOAD_FACTOR;
  idleTimeout=cacheProp.cacheIdleTimeoutInSeconds * 1000L;
  createReadyStore(cacheSize,numberOfVictimsToSelect,loadFactor,idleTimeout);
  createEJBObjectStores(cacheSize,numberOfVictimsToSelect,idleTimeout);
}"
29090,"/** 
 * Called from the ContainerFactory during initialization.
 */
protected void initializeHome() throws Exception {
  ObjectFactory entityCtxFactory=new EntityContextFactory(this);
  int steadyPoolSize=0;
  int resizeQuantity=10;
  int idleTimeoutInSeconds=Integer.MAX_VALUE - 1;
  poolProp=new PoolProperties();
  super.initializeHome();
  entityCtxPool=new NonBlockingPool(getContainerId(),ejbDescriptor.getName(),entityCtxFactory,poolProp.steadyPoolSize,poolProp.poolResizeQuantity,poolProp.maxPoolSize,poolProp.poolIdleTimeoutInSeconds,loader);
  registerMonitorableComponents();
}","/** 
 * Called from the ContainerFactory during initialization.
 */
protected void initializeHome() throws Exception {
  ObjectFactory entityCtxFactory=new EntityContextFactory(this);
  int steadyPoolSize=0;
  int resizeQuantity=10;
  int idleTimeoutInSeconds=Integer.MAX_VALUE - 1;
  poolProp=new PoolProperties(this);
  super.initializeHome();
  entityCtxPool=new NonBlockingPool(getContainerId(),ejbDescriptor.getName(),entityCtxFactory,poolProp.steadyPoolSize,poolProp.poolResizeQuantity,poolProp.maxPoolSize,poolProp.poolIdleTimeoutInSeconds,loader);
  registerMonitorableComponents();
}"
29091,"public PoolProperties(){
  maxPoolSize=Integer.parseInt(ejbContainer.getMaxPoolSize());
  poolIdleTimeoutInSeconds=Integer.parseInt(ejbContainer.getPoolIdleTimeoutInSeconds());
  poolResizeQuantity=Integer.parseInt(ejbContainer.getPoolResizeQuantity());
  steadyPoolSize=Integer.parseInt(ejbContainer.getSteadyPoolSize());
  if (beanPoolDes != null) {
    int temp=0;
    if ((temp=beanPoolDes.getMaxPoolSize()) != -1) {
      maxPoolSize=temp;
    }
    if ((temp=beanPoolDes.getPoolIdleTimeoutInSeconds()) != -1) {
      poolIdleTimeoutInSeconds=temp;
    }
    if ((temp=beanPoolDes.getPoolResizeQuantity()) != -1) {
      poolResizeQuantity=temp;
    }
    if ((temp=beanPoolDes.getSteadyPoolSize()) != -1) {
      steadyPoolSize=temp;
    }
  }
}","public PoolProperties(EntityContainer entityContainer){
  maxPoolSize=Integer.parseInt(entityContainer.ejbContainer.getMaxPoolSize());
  poolIdleTimeoutInSeconds=Integer.parseInt(entityContainer.ejbContainer.getPoolIdleTimeoutInSeconds());
  poolResizeQuantity=Integer.parseInt(entityContainer.ejbContainer.getPoolResizeQuantity());
  steadyPoolSize=Integer.parseInt(entityContainer.ejbContainer.getSteadyPoolSize());
  if (entityContainer.beanPoolDes != null) {
    int temp=0;
    if ((temp=entityContainer.beanPoolDes.getMaxPoolSize()) != -1) {
      maxPoolSize=temp;
    }
    if ((temp=entityContainer.beanPoolDes.getPoolIdleTimeoutInSeconds()) != -1) {
      poolIdleTimeoutInSeconds=temp;
    }
    if ((temp=entityContainer.beanPoolDes.getPoolResizeQuantity()) != -1) {
      poolResizeQuantity=temp;
    }
    if ((temp=entityContainer.beanPoolDes.getSteadyPoolSize()) != -1) {
      steadyPoolSize=temp;
    }
  }
}"
29092,"/** 
 * Cleans up the CoordinatorLogSection and returns it to the pool for re-use Note: the implementation of the cache does not ensure that when an object is re-used there are no outstanding references to that object. However, the risk involved is minimal since reUse() replaces the existing call to finalize(). The existing call to finalize also does not ensure that there are no outstanding references to the object being finalized.
 * @param
 * @return
 * @see
 */
synchronized void reUse(){
  if (unwrittenObjects != null)   unwrittenObjects.removeAllElements();
  if (unwrittenData != null)   unwrittenData.removeAllElements();
  if (writtenObjects != null)   writtenObjects.removeAllElements();
  if (writtenData != null)   writtenData.removeAllElements();
  sectionName=null;
  unwrittenEmpty=true;
  writtenEmpty=true;
  headerLength=0;
  SectionPool.putCoordinatorLogSection(this);
}","/** 
 * Cleans up the CoordinatorLogSection and returns it to the pool for re-use Note: the implementation of the cache does not ensure that when an object is re-used there are no outstanding references to that object. However, the risk involved is minimal since reUse() replaces the existing call to finalize(). The existing call to finalize also does not ensure that there are no outstanding references to the object being finalized.
 * @param
 * @return
 * @see
 */
synchronized void reUse(){
  if (unwrittenObjects != null)   unwrittenObjects.removeAllElements();
  if (unwrittenData != null)   unwrittenData.removeAllElements();
  if (writtenObjects != null)   writtenObjects.removeAllElements();
  if (writtenData != null)   writtenData.removeAllElements();
  sectionName=null;
  unwrittenEmpty=true;
  writtenEmpty=true;
  SectionPool.putCoordinatorLogSection(this);
}"
29093,"/** 
 * Opens the log file for all CoordinatorLogs in this process. <p> If the log has already been opened, the operation uses the opened LogFile.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
private static boolean openLog(String logPath){
  boolean result=false;
  String logName;
  CoordinatorLogStateHolder logStateHolder=getStateHolder(logPath);
  if (logStateHolder.log == null) {
    logStateHolder.log=new Log(logPath);
    if (!logStateHolder.log.initialise()) {
      logStateHolder.log=null;
      _logger.log(Level.SEVERE,""String_Node_Str"");
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
  }
  String serverName=null;
  if (logStateHolder.log != null && (serverName=Configuration.getServerName(logPath)) != null) {
    logStateHolder.logFile=logStateHolder.log.open(serverName,CoordinatorLogPool.getCoordinatorLog(logPath));
    if (logStateHolder.logFile == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",serverName);
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
 else     Configuration.setLogFile(logPath,logStateHolder.logFile);
  }
  result=(logStateHolder.log != null && logStateHolder.logFile != null);
  return result;
}","/** 
 * Opens the log file for all CoordinatorLogs in this process. <p> If the log has already been opened, the operation uses the opened LogFile.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
private static boolean openLog(String logPath){
  boolean result=false;
  String logName;
  CoordinatorLogStateHolder logStateHolder=getStateHolder(logPath);
  if (logStateHolder.log == null) {
    logStateHolder.log=new Log(logPath);
    if (!logStateHolder.log.initialise()) {
      logStateHolder.log=null;
      _logger.log(Level.SEVERE,""String_Node_Str"");
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
  }
  String serverName=null;
  if (logStateHolder.log != null && (serverName=Configuration.getServerName(logPath)) != null) {
    logStateHolder.logFile=logStateHolder.log.open(serverName,CoordinatorLogPool.getCoordinatorLog(logPath));
    if (logStateHolder.logFile == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",serverName);
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
 else     Configuration.setLogFile(logPath,logStateHolder.logFile);
  }
  result=(logStateHolder.logFile != null);
  return result;
}"
29094,"/** 
 * Distributes before completion operations to all registered Synchronization objects. <p> Returns a boolean to indicate success/failure.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
boolean distributeBefore(){
  boolean result=true;
  for (int i=0; i < registered.size() && result == true; i++) {
    Synchronization sync=(Synchronization)registered.elementAt(i);
    try {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
      sync.before_completion();
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
    }
 catch (    RuntimeException rex) {
      throw rex;
    }
catch (    Throwable exc) {
      if (!(exc instanceof INVALID_TRANSACTION)) {
        _logger.log(Level.WARNING,""String_Node_Str"",new java.lang.Object[]{exc.toString(),""String_Node_Str""});
      }
      result=false;
    }
  }
  return result;
}","/** 
 * Distributes before completion operations to all registered Synchronization objects. <p> Returns a boolean to indicate success/failure.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
boolean distributeBefore(){
  boolean result=true;
  for (int i=0; i < registered.size() && result == true; i++) {
    Synchronization sync=(Synchronization)registered.elementAt(i);
    try {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
      sync.before_completion();
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
    }
 catch (    RuntimeException rex) {
      throw rex;
    }
catch (    Throwable exc) {
      _logger.log(Level.WARNING,""String_Node_Str"",new java.lang.Object[]{exc.toString(),""String_Node_Str""});
      result=false;
    }
  }
  return result;
}"
29095,"public void addReadOnlyBeanRefreshEventHandler(long ejbID,ClassLoader loader,ReadOnlyBeanRefreshEventHandler handler){
  refreshHandlers.put(ejbID,new ReadOnlyBeanRefreshHandlerInfo(ejbID,loader,handler));
  _logger.log(Level.INFO,""String_Node_Str"" + ejbID + ""String_Node_Str""+ handler);
}","public void addReadOnlyBeanRefreshEventHandler(long ejbID,ClassLoader loader,ReadOnlyBeanRefreshEventHandler handler){
  refreshHandlers.put(ejbID,new ReadOnlyBeanRefreshHandlerInfo(loader,handler));
  _logger.log(Level.INFO,""String_Node_Str"" + ejbID + ""String_Node_Str""+ handler);
}"
29096,"public ReadOnlyBeanRefreshHandlerInfo(long ejbId,ClassLoader loader,ReadOnlyBeanRefreshEventHandler handler){
  this.ejbId=ejbId;
  this.loader=loader;
  this.handler=handler;
}","public ReadOnlyBeanRefreshHandlerInfo(ClassLoader loader,ReadOnlyBeanRefreshEventHandler handler){
  this.loader=loader;
  this.handler=handler;
}"
29097,"/** 
 * Copies file from source to destination
 * @param src
 * @param dest
 * @throws IOException
 */
private static void copyFile(File src,File dest) throws IOException {
  if (!dest.exists()) {
    dest.getParentFile().mkdirs();
    dest.createNewFile();
  }
  FileChannel srcChannel=null;
  FileChannel destChannel=null;
  try {
    srcChannel=new FileInputStream(src).getChannel();
    destChannel=new FileOutputStream(dest).getChannel();
    destChannel.transferFrom(srcChannel,0,srcChannel.size());
  }
  finally {
    if (srcChannel != null) {
      srcChannel.close();
    }
    if (destChannel != null) {
      destChannel.close();
    }
  }
}","/** 
 * Copies file from source to destination
 * @param src
 * @param dest
 * @throws IOException
 */
private static void copyFile(File src,File dest) throws IOException {
  if (!dest.exists()) {
    mkDirs(dest.getParentFile());
    mkFile(dest);
  }
  FileChannel srcChannel=null;
  FileChannel destChannel=null;
  try {
    srcChannel=new FileInputStream(src).getChannel();
    destChannel=new FileOutputStream(dest).getChannel();
    destChannel.transferFrom(srcChannel,0,srcChannel.size());
  }
  finally {
    if (srcChannel != null) {
      srcChannel.close();
    }
    if (destChannel != null) {
      destChannel.close();
    }
  }
}"
29098,"private void deletePublishedFiles(Set<String> publishedFiles){
  if (publishedFiles != null) {
    for (    String path : publishedFiles) {
      File f=new File(path);
      if (f.exists()) {
        f.delete();
      }
    }
  }
}","private void deletePublishedFiles(Set<String> publishedFiles){
  if (publishedFiles != null) {
    for (    String path : publishedFiles) {
      File f=new File(path);
      if (f.exists()) {
        FileUtils.deleteFile(f);
      }
    }
  }
}"
29099,"/** 
 * Processes all the web services in the module and prepares for deployment. The tasks include composing the endpoint publish url and generating WSDL in to the application repository directory. In JAX-WS, WSDL files are generated dynamically, hence skips the wsdl generation step unless explicitly requested for WSDL file publishing via DD.
 * @param app
 * @param dc
 * @throws Exception
 */
private void doWebServicesDeployment(Application app,DeploymentContext dc) throws Exception {
  Collection<WebService> webServices=new HashSet<WebService>();
  WebServicesDescriptor wsDesc=dc.getModuleMetaData(WebServicesDescriptor.class);
  if (wsDesc != null && wsDesc.getWebServices().size() > 0) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + ""String_Node_Str"" + wsDesc.getWebServices().size() + ""String_Node_Str""+ getWebServiceDescriptors(app).size());
    }
    webServices.addAll(wsDesc.getWebServices());
  }
  WebBundleDescriptor webBundleDesc=dc.getModuleMetaData(WebBundleDescriptor.class);
  if (webBundleDesc != null) {
    Collection<EjbBundleDescriptor> ejbBundleDescriptors=webBundleDesc.getExtensionsDescriptors(EjbBundleDescriptor.class);
    for (    EjbBundleDescriptor ejbBundleDescriptor : ejbBundleDescriptors) {
      Collection wsInExtnDesc=ejbBundleDescriptor.getWebServices().getWebServices();
      webServices.addAll(wsInExtnDesc);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + wsInExtnDesc);
      }
    }
  }
  if (webBundleDesc != null && webBundleDesc.getExtensionsDescriptors(EjbBundleDescriptor.class).size() == 0) {
    if (dc.getAppProps().get(""String_Node_Str"") != null && app.isVirtual()) {
      String contextRoot=((String)dc.getAppProps().get(""String_Node_Str""));
      webBundleDesc.setContextRoot(contextRoot);
    }
  }
  for (  WebService next : webServices) {
    WsUtil wsUtil=new WsUtil();
    if (wsUtil.isJAXWSbasedService(next) && (!next.hasFilePublishing())) {
      for (      WebServiceEndpoint wsep : next.getEndpoints()) {
        wsep.composeFinalWsdlUrl(wsUtil.getWebServerInfoForDAS().getWebServerRootURL(wsep.isSecure()));
      }
    }
 else {
      URL url=next.getWsdlFileUrl();
      if (url == null) {
        File f=new File(dc.getSourceDir(),next.getWsdlFileUri());
        url=f.toURL();
      }
      File genXmlDir=dc.getScratchDir(""String_Node_Str"");
      String wsdlFileDir=next.getWsdlFileUri().substring(0,next.getWsdlFileUri().lastIndexOf('/'));
      (new File(genXmlDir,wsdlFileDir)).mkdirs();
      File genWsdlFile=new File(genXmlDir,next.getWsdlFileUri());
      wsUtil.generateFinalWsdl(url,next,wsUtil.getWebServerInfoForDAS(),genWsdlFile);
    }
  }
  if (webBundleDesc != null) {
    doWebServiceDeployment(webBundleDesc);
  }
}","/** 
 * Processes all the web services in the module and prepares for deployment. The tasks include composing the endpoint publish url and generating WSDL in to the application repository directory. In JAX-WS, WSDL files are generated dynamically, hence skips the wsdl generation step unless explicitly requested for WSDL file publishing via DD.
 * @param app
 * @param dc
 * @throws Exception
 */
private void doWebServicesDeployment(Application app,DeploymentContext dc) throws Exception {
  Collection<WebService> webServices=new HashSet<WebService>();
  WebServicesDescriptor wsDesc=dc.getModuleMetaData(WebServicesDescriptor.class);
  if (wsDesc != null && wsDesc.getWebServices().size() > 0) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + ""String_Node_Str"" + wsDesc.getWebServices().size() + ""String_Node_Str""+ getWebServiceDescriptors(app).size());
    }
    webServices.addAll(wsDesc.getWebServices());
  }
  WebBundleDescriptor webBundleDesc=dc.getModuleMetaData(WebBundleDescriptor.class);
  if (webBundleDesc != null) {
    Collection<EjbBundleDescriptor> ejbBundleDescriptors=webBundleDesc.getExtensionsDescriptors(EjbBundleDescriptor.class);
    for (    EjbBundleDescriptor ejbBundleDescriptor : ejbBundleDescriptors) {
      Collection wsInExtnDesc=ejbBundleDescriptor.getWebServices().getWebServices();
      webServices.addAll(wsInExtnDesc);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + wsInExtnDesc);
      }
    }
  }
  if (webBundleDesc != null && webBundleDesc.getExtensionsDescriptors(EjbBundleDescriptor.class).size() == 0) {
    if (dc.getAppProps().get(""String_Node_Str"") != null && app.isVirtual()) {
      String contextRoot=((String)dc.getAppProps().get(""String_Node_Str""));
      webBundleDesc.setContextRoot(contextRoot);
    }
  }
  for (  WebService next : webServices) {
    WsUtil wsUtil=new WsUtil();
    if (wsUtil.isJAXWSbasedService(next) && (!next.hasFilePublishing())) {
      for (      WebServiceEndpoint wsep : next.getEndpoints()) {
        wsep.composeFinalWsdlUrl(wsUtil.getWebServerInfoForDAS().getWebServerRootURL(wsep.isSecure()));
      }
    }
 else {
      URL url=next.getWsdlFileUrl();
      if (url == null) {
        File f=new File(dc.getSourceDir(),next.getWsdlFileUri());
        url=f.toURL();
      }
      File genXmlDir=dc.getScratchDir(""String_Node_Str"");
      String wsdlFileDir=next.getWsdlFileUri().substring(0,next.getWsdlFileUri().lastIndexOf('/'));
      mkDirs(new File(genXmlDir,wsdlFileDir));
      File genWsdlFile=new File(genXmlDir,next.getWsdlFileUri());
      wsUtil.generateFinalWsdl(url,next,wsUtil.getWebServerInfoForDAS(),genWsdlFile);
    }
  }
  if (webBundleDesc != null) {
    doWebServiceDeployment(webBundleDesc);
  }
}"
29100,"protected void setupJaxWSServiceForDeployment(DeploymentContext dc,WebService ws) throws DeploymentException {
  BundleDescriptor bundle=dc.getModuleMetaData(BundleDescriptor.class);
  File moduleDir=dc.getSourceDir();
  File wsdlDir=dc.getScratchDir(""String_Node_Str"");
  wsdlDir.mkdirs();
  File stubsDir=dc.getScratchDir(""String_Node_Str"");
  stubsDir.mkdirs();
  if (!DOLUtils.warType().equals(bundle.getModuleType()) && !DOLUtils.ejbType().equals(bundle.getModuleType())) {
    return;
  }
  wsdlDir=new File(wsdlDir,bundle.getWsdlDir().replaceAll(""String_Node_Str"",""String_Node_Str"" + File.separator));
  String wsdlFileUri;
  File wsdlFile;
  try {
    checkCatalog(bundle,ws,moduleDir);
  }
 catch (  DeploymentException e) {
    logger.log(Level.SEVERE,""String_Node_Str"");
  }
  if (ws.hasWsdlFile()) {
    if (ws.getWsdlFileUri().startsWith(""String_Node_Str"")) {
      try {
        wsdlFileUri=downloadWsdlsAndSchemas(new URL(ws.getWsdlFileUri()),wsdlDir);
      }
 catch (      Exception e) {
        throw new DeploymentException(e.toString(),e);
      }
      wsdlFile=new File(wsdlDir,wsdlFileUri);
    }
 else {
      wsdlFileUri=ws.getWsdlFileUri();
      File wsdlFileAbs=new File(wsdlFileUri);
      wsdlFile=wsdlFileAbs.isAbsolute() ? wsdlFileAbs : new File(moduleDir,wsdlFileUri);
    }
    if (!wsdlFile.exists()) {
      String errorMessage=format(rb.getString(""String_Node_Str""),ws.getWsdlFileUri(),bundle.getModuleDescriptor().getArchiveUri());
      logger.severe(errorMessage);
      throw new DeploymentException(errorMessage);
    }
  }
}","protected void setupJaxWSServiceForDeployment(DeploymentContext dc,WebService ws) throws DeploymentException {
  BundleDescriptor bundle=dc.getModuleMetaData(BundleDescriptor.class);
  File moduleDir=dc.getSourceDir();
  File wsdlDir=dc.getScratchDir(""String_Node_Str"");
  mkDirs(wsdlDir);
  File stubsDir=dc.getScratchDir(""String_Node_Str"");
  mkDirs(stubsDir);
  if (!DOLUtils.warType().equals(bundle.getModuleType()) && !DOLUtils.ejbType().equals(bundle.getModuleType())) {
    return;
  }
  wsdlDir=new File(wsdlDir,bundle.getWsdlDir().replaceAll(""String_Node_Str"",""String_Node_Str"" + File.separator));
  String wsdlFileUri;
  File wsdlFile;
  try {
    checkCatalog(bundle,ws,moduleDir);
  }
 catch (  DeploymentException e) {
    logger.log(Level.SEVERE,""String_Node_Str"");
  }
  if (ws.hasWsdlFile()) {
    if (ws.getWsdlFileUri().startsWith(""String_Node_Str"")) {
      try {
        wsdlFileUri=downloadWsdlsAndSchemas(new URL(ws.getWsdlFileUri()),wsdlDir);
      }
 catch (      Exception e) {
        throw new DeploymentException(e.toString(),e);
      }
      wsdlFile=new File(wsdlDir,wsdlFileUri);
    }
 else {
      wsdlFileUri=ws.getWsdlFileUri();
      File wsdlFileAbs=new File(wsdlFileUri);
      wsdlFile=wsdlFileAbs.isAbsolute() ? wsdlFileAbs : new File(moduleDir,wsdlFileUri);
    }
    if (!wsdlFile.exists()) {
      String errorMessage=format(rb.getString(""String_Node_Str""),ws.getWsdlFileUri(),bundle.getModuleDescriptor().getArchiveUri());
      logger.severe(errorMessage);
      throw new DeploymentException(errorMessage);
    }
  }
}"
29101,"/** 
 * This method downloads the main wsdl/schema and its imports in to the directory specified and returns the name of downloaded root document.
 * @param httpUrl
 * @param wsdlDir
 * @return Returns the name of the root file downloaded with the invocation.
 * @throws Exception
 */
private String downloadWsdlsAndSchemas(URL httpUrl,File wsdlDir) throws Exception {
  wsdlDir.mkdirs();
  String fileName=httpUrl.toString().substring(httpUrl.toString().lastIndexOf(""String_Node_Str"") + 1);
  File toFile=new File(wsdlDir.getAbsolutePath() + File.separator + fileName);
  downloadFile(httpUrl,toFile);
  HashSet<Import> wsdlRelativeImports=new HashSet<Import>();
  HashSet<Import> schemaRelativeImports=new HashSet<Import>();
  HashSet<Import> wsdlIncludes=new HashSet<Import>();
  HashSet<Import> schemaIncludes=new HashSet<Import>();
  parseRelativeImports(httpUrl,wsdlRelativeImports,wsdlIncludes,schemaRelativeImports,schemaIncludes);
  wsdlRelativeImports.addAll(wsdlIncludes);
  schemaRelativeImports.addAll(schemaIncludes);
  String urlWithoutFileName=httpUrl.toString().substring(0,httpUrl.toString().lastIndexOf(""String_Node_Str""));
  for (  Import next : schemaRelativeImports) {
    String location=next.getLocation();
    location=location.replaceAll(""String_Node_Str"",""String_Node_Str"" + File.separator);
    if (location.lastIndexOf(File.separator) != -1) {
      File newDir=new File(wsdlDir.getAbsolutePath() + File.separator + location.substring(0,location.lastIndexOf(File.separator)));
      newDir.mkdirs();
    }
    downloadFile(new URL(urlWithoutFileName + ""String_Node_Str"" + next.getLocation()),new File(wsdlDir.getAbsolutePath() + File.separator + location));
  }
  for (  Import next : wsdlRelativeImports) {
    String newWsdlLocation=next.getLocation();
    newWsdlLocation=newWsdlLocation.replaceAll(""String_Node_Str"",""String_Node_Str"" + File.separator);
    File newWsdlDir;
    if (newWsdlLocation.lastIndexOf(File.separator) != -1) {
      newWsdlDir=new File(wsdlDir.getAbsolutePath() + File.separator + newWsdlLocation.substring(0,newWsdlLocation.lastIndexOf(File.separator)));
    }
 else {
      newWsdlDir=wsdlDir;
    }
    downloadWsdlsAndSchemas(new URL(urlWithoutFileName + ""String_Node_Str"" + next.getLocation()),newWsdlDir);
  }
  return fileName;
}","/** 
 * This method downloads the main wsdl/schema and its imports in to the directory specified and returns the name of downloaded root document.
 * @param httpUrl
 * @param wsdlDir
 * @return Returns the name of the root file downloaded with the invocation.
 * @throws Exception
 */
private String downloadWsdlsAndSchemas(URL httpUrl,File wsdlDir) throws Exception {
  mkDirs(wsdlDir);
  String fileName=httpUrl.toString().substring(httpUrl.toString().lastIndexOf(""String_Node_Str"") + 1);
  File toFile=new File(wsdlDir.getAbsolutePath() + File.separator + fileName);
  downloadFile(httpUrl,toFile);
  HashSet<Import> wsdlRelativeImports=new HashSet<Import>();
  HashSet<Import> schemaRelativeImports=new HashSet<Import>();
  HashSet<Import> wsdlIncludes=new HashSet<Import>();
  HashSet<Import> schemaIncludes=new HashSet<Import>();
  parseRelativeImports(httpUrl,wsdlRelativeImports,wsdlIncludes,schemaRelativeImports,schemaIncludes);
  wsdlRelativeImports.addAll(wsdlIncludes);
  schemaRelativeImports.addAll(schemaIncludes);
  String urlWithoutFileName=httpUrl.toString().substring(0,httpUrl.toString().lastIndexOf(""String_Node_Str""));
  for (  Import next : schemaRelativeImports) {
    String location=next.getLocation();
    location=location.replaceAll(""String_Node_Str"",""String_Node_Str"" + File.separator);
    if (location.lastIndexOf(File.separator) != -1) {
      File newDir=new File(wsdlDir.getAbsolutePath() + File.separator + location.substring(0,location.lastIndexOf(File.separator)));
      mkDirs(newDir);
    }
    downloadFile(new URL(urlWithoutFileName + ""String_Node_Str"" + next.getLocation()),new File(wsdlDir.getAbsolutePath() + File.separator + location));
  }
  for (  Import next : wsdlRelativeImports) {
    String newWsdlLocation=next.getLocation();
    newWsdlLocation=newWsdlLocation.replaceAll(""String_Node_Str"",""String_Node_Str"" + File.separator);
    File newWsdlDir;
    if (newWsdlLocation.lastIndexOf(File.separator) != -1) {
      newWsdlDir=new File(wsdlDir.getAbsolutePath() + File.separator + newWsdlLocation.substring(0,newWsdlLocation.lastIndexOf(File.separator)));
    }
 else {
      newWsdlDir=wsdlDir;
    }
    downloadWsdlsAndSchemas(new URL(urlWithoutFileName + ""String_Node_Str"" + next.getLocation()),newWsdlDir);
  }
  return fileName;
}"
29102,"public static void moveFile(String sourceFile,String destFile) throws IOException {
  FileUtils.copy(sourceFile,destFile);
  new File(sourceFile).delete();
}","public static void moveFile(String sourceFile,String destFile) throws IOException {
  FileUtils.copy(sourceFile,destFile);
  FileUtils.deleteFile(new File(sourceFile));
}"
29103,"private void dumpMessage(MessageTrace message,PrintWriter out) throws Exception {
  ByteArrayInputStream bais=new ByteArrayInputStream(message.getMessage(true).getBytes());
  StreamSource ss=new StreamSource(bais);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  StreamResult sr=new StreamResult(baos);
  TransformerFactory factory=TransformerFactory.newInstance();
  Transformer transformer=factory.newTransformer();
  transformer.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
  transformer.transform(ss,sr);
  out.print(""String_Node_Str"");
  String value=baos.toString();
  value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  out.write(value);
  out.print(""String_Node_Str"");
}","private void dumpMessage(MessageTrace message,PrintWriter out) throws Exception {
  ByteArrayInputStream bais=new ByteArrayInputStream(message.getMessage(true).getBytes());
  StreamSource ss=new StreamSource(bais);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  StreamResult sr=new StreamResult(baos);
  TransformerFactory factory=TransformerFactory.newInstance();
  Transformer transformer=factory.newTransformer();
  transformer.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
  transformer.transform(ss,sr);
  out.print(""String_Node_Str"");
  out.write(encodeHTML(baos.toString()));
  out.print(""String_Node_Str"");
}"
29104,"public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  res.setContentType(""String_Node_Str"");
  res.setHeader(""String_Node_Str"",""String_Node_Str"");
  PrintWriter out=res.getWriter();
  String requestURL=req.getRequestURL().toString();
  out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",Locale.getDefault().getLanguage()));
  String operationName=req.getParameter(""String_Node_Str"");
  try {
    Endpoint myEndpoint;
    if (svcEP.implementedByWebComponent()) {
      myEndpoint=WebServiceEngineImpl.getInstance().getEndpoint(req.getServletPath());
    }
 else {
      myEndpoint=WebServiceEngineImpl.getInstance().getEndpoint(req.getRequestURI());
    }
    Class clientSEI=gsiClasses.get(requestURL);
    if (clientSEI == null) {
      initializePort(req,res);
      clientSEI=gsiClasses.get(requestURL);
    }
    Object port=ports.get(requestURL);
    Method[] methods=clientSEI.getMethods();
    Method toInvoke=null;
    for (    Method m : methods) {
      if (String.valueOf(m.getName()).equals(operationName)) {
        toInvoke=m;
      }
    }
    if (toInvoke == null) {
      out.print(""String_Node_Str"");
    }
 else {
      out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{toInvoke.getName()}));
      myEndpoint.addListener(this);
      Class[] parameterTypes=toInvoke.getParameterTypes();
      Object[] parameterValues=new Object[parameterTypes.length];
      out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      for (int i=0; i < parameterTypes.length; i++) {
        out.print(""String_Node_Str"");
        String webValue=req.getParameter(""String_Node_Str"" + toInvoke.getName() + i);
        out.print(""String_Node_Str"" + parameterTypes[i].getName() + ""String_Node_Str"");
        out.print(""String_Node_Str"" + webValue + ""String_Node_Str"");
        parameterValues[i]=convertWebParam(parameterTypes[i],webValue);
        out.print(""String_Node_Str"");
      }
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + toInvoke.getReturnType().getName() + ""String_Node_Str""+ toInvoke.invoke(port,parameterValues)+ ""String_Node_Str"");
      out.print(""String_Node_Str"");
      if (request != null) {
        out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        dumpMessage(request,out);
      }
      if (toInvoke.getAnnotation(javax.jws.Oneway.class) == null && response != null) {
        out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        dumpMessage(response,out);
      }
      myEndpoint.removeListener(this);
    }
  }
 catch (  Throwable e) {
    out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{e.getMessage()}));
    throw new ServletException(e);
  }
  out.print(""String_Node_Str"");
  out.close();
}","public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  res.setContentType(""String_Node_Str"");
  res.setHeader(""String_Node_Str"",""String_Node_Str"");
  PrintWriter out=res.getWriter();
  String requestURL=req.getRequestURL().toString();
  out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",Locale.getDefault().getLanguage()));
  String operationName=req.getParameter(""String_Node_Str"");
  try {
    Endpoint myEndpoint;
    if (svcEP.implementedByWebComponent()) {
      myEndpoint=WebServiceEngineImpl.getInstance().getEndpoint(req.getServletPath());
    }
 else {
      myEndpoint=WebServiceEngineImpl.getInstance().getEndpoint(req.getRequestURI());
    }
    Class clientSEI=gsiClasses.get(requestURL);
    if (clientSEI == null) {
      initializePort(req,res);
      clientSEI=gsiClasses.get(requestURL);
    }
    Object port=ports.get(requestURL);
    Method[] methods=clientSEI.getMethods();
    Method toInvoke=null;
    for (    Method m : methods) {
      if (String.valueOf(m.getName()).equals(operationName)) {
        toInvoke=m;
      }
    }
    if (toInvoke == null) {
      out.print(""String_Node_Str"");
    }
 else {
      out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{toInvoke.getName()}));
      myEndpoint.addListener(this);
      Class[] parameterTypes=toInvoke.getParameterTypes();
      Object[] parameterValues=new Object[parameterTypes.length];
      out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      for (int i=0; i < parameterTypes.length; i++) {
        out.print(""String_Node_Str"");
        String webValue=req.getParameter(""String_Node_Str"" + toInvoke.getName() + i);
        out.print(""String_Node_Str"" + parameterTypes[i].getName() + ""String_Node_Str"");
        out.print(""String_Node_Str"" + encodeHTML(webValue) + ""String_Node_Str"");
        parameterValues[i]=convertWebParam(parameterTypes[i],webValue);
        out.print(""String_Node_Str"");
      }
      out.print(""String_Node_Str"");
      out.print(""String_Node_Str"");
      out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + toInvoke.getReturnType().getName() + ""String_Node_Str""+ encodeHTML(toInvoke.invoke(port,parameterValues).toString())+ ""String_Node_Str"");
      out.print(""String_Node_Str"");
      if (request != null) {
        out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        dumpMessage(request,out);
      }
      if (toInvoke.getAnnotation(javax.jws.Oneway.class) == null && response != null) {
        out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        dumpMessage(response,out);
      }
      myEndpoint.removeListener(this);
    }
  }
 catch (  Throwable e) {
    out.print(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{e.getMessage()}));
    throw new ServletException(e);
  }
  out.print(""String_Node_Str"");
  out.close();
}"
29105,"private Set getPropertiesForCall(int methodType,Object args[]){
  Set callProperties=null;
switch (methodType) {
case CREATE_CALL_PORT:
case CREATE_CALL_OPERATION_QNAME:
case CREATE_CALL_OPERATION_STRING:
case GET_CALLS:
    QName port=(QName)args[0];
  ServiceRefPortInfo portInfo=serviceRef.getPortInfoByPort(port);
if (portInfo != null) {
  callProperties=portInfo.getCallProperties();
}
break;
case CREATE_CALL_NO_ARGS:
callProperties=serviceRef.getCallProperties();
break;
}
return callProperties;
}","private Set getPropertiesForCall(int methodType,Object args[]){
  Set callProperties=null;
switch (methodType) {
case CREATE_CALL_PORT:
case CREATE_CALL_OPERATION_QNAME:
case CREATE_CALL_OPERATION_STRING:
case GET_CALLS:
    QName port=(QName)args[0];
  ServiceRefPortInfo portInfo=serviceRef.getPortInfoByPort(port);
if (portInfo != null) {
  callProperties=portInfo.getCallProperties();
}
break;
case CREATE_CALL_NO_ARGS:
callProperties=serviceRef.getCallProperties();
break;
default :
break;
}
return callProperties;
}"
29106,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (method.getDeclaringClass() == java.lang.Object.class) {
    return invokeJavaObjectMethod(this,method,args);
  }
  int methodType=getMethodType(method);
  checkUnsupportedMethods(methodType);
  Object returnValue=null;
  try {
    Object serviceToInvoke=serviceDelegate;
    Method methodToInvoke=method;
    int methodTypeToInvoke=methodType;
    Object[] argsForInvoke=args;
switch (methodType) {
case GET_PORT_CONTAINER_MANAGED:
      Class serviceEndpointInterfaceClass=(Class)args[0];
    String serviceEndpointInterface=serviceEndpointInterfaceClass.getName();
  ServiceRefPortInfo portInfo=serviceRef.getPortInfo(serviceEndpointInterface);
if ((portInfo != null) && portInfo.hasWsdlPort()) {
  methodToInvoke=getClientManagedPortMethod;
  methodTypeToInvoke=GET_PORT_CLIENT_MANAGED;
  argsForInvoke=new Object[]{portInfo.getWsdlPort(),args[0]};
}
 else {
}
break;
case GET_WSDL_LOCATION:
return wsdlLocation;
case CREATE_CALL_PORT:
case CREATE_CALL_OPERATION_QNAME:
case CREATE_CALL_OPERATION_STRING:
case GET_CALLS:
case GET_PORTS:
serviceToInvoke=getConfiguredServiceDelegate();
break;
}
returnValue=methodToInvoke.invoke(serviceToInvoke,argsForInvoke);
if (returnValue instanceof Stub) {
Stub stub=(Stub)returnValue;
setStubProperties(stub,methodTypeToInvoke,methodToInvoke,argsForInvoke);
}
 else if (returnValue instanceof Call) {
Call[] calls=new Call[1];
calls[0]=(Call)returnValue;
setCallProperties(calls,methodTypeToInvoke,argsForInvoke);
}
 else if (methodType == GET_CALLS) {
Call[] calls=(Call[])returnValue;
setCallProperties(calls,methodTypeToInvoke,argsForInvoke);
}
}
 catch (InvocationTargetException ite) {
throw ite.getCause();
}
return returnValue;
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  if (method.getDeclaringClass() == java.lang.Object.class) {
    return invokeJavaObjectMethod(this,method,args);
  }
  int methodType=getMethodType(method);
  checkUnsupportedMethods(methodType);
  Object returnValue=null;
  try {
    Object serviceToInvoke=serviceDelegate;
    Method methodToInvoke=method;
    int methodTypeToInvoke=methodType;
    Object[] argsForInvoke=args;
switch (methodType) {
case GET_PORT_CONTAINER_MANAGED:
      Class serviceEndpointInterfaceClass=(Class)args[0];
    String serviceEndpointInterface=serviceEndpointInterfaceClass.getName();
  ServiceRefPortInfo portInfo=serviceRef.getPortInfo(serviceEndpointInterface);
if ((portInfo != null) && portInfo.hasWsdlPort()) {
  methodToInvoke=getClientManagedPortMethod;
  methodTypeToInvoke=GET_PORT_CLIENT_MANAGED;
  argsForInvoke=new Object[]{portInfo.getWsdlPort(),args[0]};
}
 else {
}
break;
case GET_WSDL_LOCATION:
return wsdlLocation;
case CREATE_CALL_PORT:
case CREATE_CALL_OPERATION_QNAME:
case CREATE_CALL_OPERATION_STRING:
case GET_CALLS:
case GET_PORTS:
serviceToInvoke=getConfiguredServiceDelegate();
break;
default :
break;
}
returnValue=methodToInvoke.invoke(serviceToInvoke,argsForInvoke);
if (returnValue instanceof Stub) {
Stub stub=(Stub)returnValue;
setStubProperties(stub,methodTypeToInvoke,methodToInvoke,argsForInvoke);
}
 else if (returnValue instanceof Call) {
Call[] calls=new Call[1];
calls[0]=(Call)returnValue;
setCallProperties(calls,methodTypeToInvoke,argsForInvoke);
}
 else if (methodType == GET_CALLS) {
Call[] calls=(Call[])returnValue;
setCallProperties(calls,methodTypeToInvoke,argsForInvoke);
}
}
 catch (InvocationTargetException ite) {
throw ite.getCause();
}
return returnValue;
}"
29107,"private Service getConfiguredServiceDelegate() throws Exception {
synchronized (this) {
    if (configuredServiceDelegate == null) {
      Service configuredService=wsUtil.createConfiguredService(serviceRef);
      wsUtil.configureHandlerChain(serviceRef,configuredService,configuredService.getPorts(),classLoader);
      configuredServiceDelegate=configuredService;
      addMessageSecurityHandler(configuredService);
    }
  }
  return configuredServiceDelegate;
}","private Service getConfiguredServiceDelegate() throws Exception {
  if (configuredServiceDelegate == null) {
    Service configuredService=wsUtil.createConfiguredService(serviceRef);
    wsUtil.configureHandlerChain(serviceRef,configuredService,configuredService.getPorts(),classLoader);
    configuredServiceDelegate=configuredService;
    addMessageSecurityHandler(configuredService);
  }
  return configuredServiceDelegate;
}"
29108,"@SuppressWarnings(""String_Node_Str"") private LinkedList<String> asList(final Iterator<Map.Entry<String,Entry>> mapEntries){
  return new LinkedList<String>(){
{
      while (mapEntries.hasNext()) {
        Map.Entry<String,Entry> mapEntry=mapEntries.next();
        add(mapEntry.getKey() + ""String_Node_Str"" + mapEntry.getValue());
      }
    }
  }
;
}","private LinkedList<String> asList(final Iterator<Map.Entry<String,Entry>> mapEntries){
  LinkedList<String> list=new LinkedList<String>();
  while (mapEntries.hasNext()) {
    Map.Entry<String,Entry> mapEntry=mapEntries.next();
    list.add(mapEntry.getKey() + ""String_Node_Str"" + mapEntry.getValue());
  }
  return list;
}"
29109,"private void receive(InputStream in,OriginatorFinder origFinder) throws IOException {
  ContextBootstrap.debug(MessageID.PROPAGATION_STARTED,""String_Node_Str"");
  ContextAccessController accessController=ContextBootstrap.getContextAccessController();
  wireAdapter.prepareToReadFrom(in);
  SimpleMap map=getMapAndCreateIfNeeded();
  map.prepareToPropagate();
  for (String key=wireAdapter.readKey(); key != null; key=wireAdapter.readKey()) {
    try {
      Entry entry=wireAdapter.readEntry();
      if (entry == null)       break;
      entry.init(origFinder.isOriginator(key),accessController.isEveryoneAllowedToRead(key));
      if (entry != null)       map.put(key,entry);
    }
 catch (    ClassNotFoundException e) {
      ContextBootstrap.getLoggerAdapter().log(Level.ERROR,e,MessageID.ERROR_UNABLE_TO_INSTANTIATE_CONTEXT_FROM_THE_WIRE);
    }
  }
  for (  ContextLifecycle context : map.getAddedContextLifecycles()) {
    context.contextAdded();
  }
  ContextBootstrap.debug(MessageID.PROPAGATION_COMPLETED,""String_Node_Str"");
}","private void receive(InputStream in,OriginatorFinder origFinder) throws IOException {
  ContextBootstrap.debug(MessageID.PROPAGATION_STARTED,""String_Node_Str"");
  ContextAccessController accessController=ContextBootstrap.getContextAccessController();
  wireAdapter.prepareToReadFrom(in);
  SimpleMap map=getMapAndCreateIfNeeded();
  map.prepareToPropagate();
  for (String key=wireAdapter.readKey(); key != null; key=wireAdapter.readKey()) {
    try {
      Entry entry=wireAdapter.readEntry();
      if (entry == null) {
        break;
      }
 else {
        entry.init(origFinder.isOriginator(key),accessController.isEveryoneAllowedToRead(key));
        map.put(key,entry);
      }
    }
 catch (    ClassNotFoundException e) {
      ContextBootstrap.getLoggerAdapter().log(Level.ERROR,e,MessageID.ERROR_UNABLE_TO_INSTANTIATE_CONTEXT_FROM_THE_WIRE);
    }
  }
  for (  ContextLifecycle context : map.getAddedContextLifecycles()) {
    context.contextAdded();
  }
  ContextBootstrap.debug(MessageID.PROPAGATION_COMPLETED,""String_Node_Str"");
}"
29110,"/** 
 * @return The in-scope instance of ContextMapPropagator so that communication protocols can ask the ContextMapPropagator to handle the context propagation bytes on the wire.
 */
public static ContextMapPropagator getScopeAwarePropagator(){
  return new ContextMapPropagator(){
    private WireAdapter wireAdapter=ContextBootstrap.getWireAdapter();
    private SimpleMap getMapIfItExists(){
      AccessControlledMap map=mapFinder.getMapIfItExists();
      return map == null ? null : map.simpleMap;
    }
    private SimpleMap getMapAndCreateIfNeeded(){
      return mapFinder.getMapAndCreateIfNeeded().simpleMap;
    }
    @Override public void sendRequest(    OutputStream out,    PropagationMode propagationMode) throws IOException {
      sendItems(propagationModeFilter,out,propagationMode,true);
    }
    @Override public void sendResponse(    OutputStream out,    PropagationMode propagationMode) throws IOException {
      sendItems(onewayPropagationModeFilter,out,propagationMode,false);
    }
    private void sendItems(    Filter filter,    OutputStream out,    PropagationMode propagationMode,    boolean sendLocation) throws IOException {
      ContextBootstrap.debug(MessageID.PROPAGATION_STARTED,""String_Node_Str"");
      SimpleMap map=getMapIfItExists();
      if (map != null) {
        ContextBootstrap.debug(MessageID.USING_WIRE_ADAPTER,""String_Node_Str"",wireAdapter);
        wireAdapter.prepareToWriteTo(out);
        Iterator<Map.Entry<String,Entry>> items=map.iterator(filter,propagationMode);
        while (items.hasNext()) {
          Map.Entry<String,Entry> mapEntry=items.next();
          Entry entry=mapEntry.getValue();
          Object value=entry.getValue();
          if (value instanceof ContextLifecycle) {
            ((ContextLifecycle)value).contextToPropagate();
          }
        }
        items=map.iterator(filter,propagationMode);
        while (items.hasNext()) {
          Map.Entry<String,Entry> mapEntry=items.next();
          wireAdapter.write(mapEntry.getKey(),mapEntry.getValue());
        }
        wireAdapter.flush();
      }
      ContextBootstrap.debug(MessageID.PROPAGATION_COMPLETED,""String_Node_Str"");
    }
    @Override public void receiveRequest(    InputStream in) throws IOException {
      receive(in,new OriginatorFinder(){
        public boolean isOriginator(        String key){
          return IS_NOT_ORIGINATOR;
        }
      }
);
    }
    private void receive(    InputStream in,    OriginatorFinder origFinder) throws IOException {
      ContextBootstrap.debug(MessageID.PROPAGATION_STARTED,""String_Node_Str"");
      ContextAccessController accessController=ContextBootstrap.getContextAccessController();
      wireAdapter.prepareToReadFrom(in);
      SimpleMap map=getMapAndCreateIfNeeded();
      map.prepareToPropagate();
      for (String key=wireAdapter.readKey(); key != null; key=wireAdapter.readKey()) {
        try {
          Entry entry=wireAdapter.readEntry();
          if (entry == null)           break;
          entry.init(origFinder.isOriginator(key),accessController.isEveryoneAllowedToRead(key));
          if (entry != null)           map.put(key,entry);
        }
 catch (        ClassNotFoundException e) {
          ContextBootstrap.getLoggerAdapter().log(Level.ERROR,e,MessageID.ERROR_UNABLE_TO_INSTANTIATE_CONTEXT_FROM_THE_WIRE);
        }
      }
      for (      ContextLifecycle context : map.getAddedContextLifecycles()) {
        context.contextAdded();
      }
      ContextBootstrap.debug(MessageID.PROPAGATION_COMPLETED,""String_Node_Str"");
    }
    @Override public void receiveResponse(    InputStream in,    PropagationMode mode) throws IOException {
      SimpleMap map=getMapAndCreateIfNeeded();
      final Set<String> keySet=clearPropagatedEntries(mode,map);
      ContextBootstrap.debug(MessageID.CLEARED_ENTRIES,keySet);
      receive(in,new OriginatorFinder(){
        @Override public boolean isOriginator(        String key){
          return keySet.contains(key);
        }
      }
);
    }
    private Set<String> clearPropagatedEntries(    PropagationMode mode,    SimpleMap map){
      Set<String> keySet=new HashSet<String>();
      Iterator<Map.Entry<String,Entry>> iterator=map.iterator(new Filter(){
        @Override public boolean keep(        Map.Entry<String,Entry> mapEntry,        PropagationMode mode){
          EnumSet<PropagationMode> modes=mapEntry.getValue().propagationModes;
          return modes.contains(mode);
        }
      }
,mode);
      while (iterator.hasNext()) {
        keySet.add(iterator.next().getKey());
        iterator.remove();
      }
      return keySet;
    }
    /** 
 * Replaces the in-scope ContextMap entries with those in the srcContexts that have the THREAD propagation mode.
 */
    @Override public void restoreThreadContexts(    final AccessControlledMap srcContexts){
      if (ContextBootstrap.IS_DEBUG) {
        ContextBootstrap.debug(MessageID.RESTORING_CONTEXTS,asList(srcContexts.entryIterator()));
      }
      if (srcContexts == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      SimpleMap srcSimpleMap=srcContexts.simpleMap;
      if (!srcSimpleMap.map.isEmpty()) {
        SimpleMap destSimpleMap=mapFinder.getMapAndCreateIfNeeded().simpleMap;
        destSimpleMap.prepareToPropagate();
        if (destSimpleMap == srcSimpleMap) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        Iterator<Map.Entry<String,Entry>> iterator=srcSimpleMap.iterator(propagationModeFilter,PropagationMode.THREAD);
        while (iterator.hasNext()) {
          Map.Entry<String,Entry> mapEntry=iterator.next();
          destSimpleMap.put(mapEntry.getKey(),mapEntry.getValue());
        }
        for (        ContextLifecycle context : destSimpleMap.getAddedContextLifecycles()) {
          context.contextAdded();
        }
        if (ContextBootstrap.IS_DEBUG) {
          ContextBootstrap.debug(MessageID.RESTORING_CONTEXTS,asList(mapFinder.getMapIfItExists().entryIterator()));
        }
      }
    }
    @SuppressWarnings(""String_Node_Str"") private LinkedList<String> asList(    final Iterator<Map.Entry<String,Entry>> mapEntries){
      return new LinkedList<String>(){
{
          while (mapEntries.hasNext()) {
            Map.Entry<String,Entry> mapEntry=mapEntries.next();
            add(mapEntry.getKey() + ""String_Node_Str"" + mapEntry.getValue());
          }
        }
      }
;
    }
    @Override public void useWireAdapter(    WireAdapter aWireAdapter){
      wireAdapter=aWireAdapter;
    }
  }
;
}","/** 
 * @return The in-scope instance of ContextMapPropagator so that communication protocols can ask the ContextMapPropagator to handle the context propagation bytes on the wire.
 */
public static ContextMapPropagator getScopeAwarePropagator(){
  return new ContextMapPropagator(){
    private WireAdapter wireAdapter=ContextBootstrap.getWireAdapter();
    private SimpleMap getMapIfItExists(){
      AccessControlledMap map=mapFinder.getMapIfItExists();
      return map == null ? null : map.simpleMap;
    }
    private SimpleMap getMapAndCreateIfNeeded(){
      return mapFinder.getMapAndCreateIfNeeded().simpleMap;
    }
    @Override public void sendRequest(    OutputStream out,    PropagationMode propagationMode) throws IOException {
      sendItems(propagationModeFilter,out,propagationMode,true);
    }
    @Override public void sendResponse(    OutputStream out,    PropagationMode propagationMode) throws IOException {
      sendItems(onewayPropagationModeFilter,out,propagationMode,false);
    }
    private void sendItems(    Filter filter,    OutputStream out,    PropagationMode propagationMode,    boolean sendLocation) throws IOException {
      ContextBootstrap.debug(MessageID.PROPAGATION_STARTED,""String_Node_Str"");
      SimpleMap map=getMapIfItExists();
      if (map != null) {
        ContextBootstrap.debug(MessageID.USING_WIRE_ADAPTER,""String_Node_Str"",wireAdapter);
        wireAdapter.prepareToWriteTo(out);
        Iterator<Map.Entry<String,Entry>> items=map.iterator(filter,propagationMode);
        while (items.hasNext()) {
          Map.Entry<String,Entry> mapEntry=items.next();
          Entry entry=mapEntry.getValue();
          Object value=entry.getValue();
          if (value instanceof ContextLifecycle) {
            ((ContextLifecycle)value).contextToPropagate();
          }
        }
        items=map.iterator(filter,propagationMode);
        while (items.hasNext()) {
          Map.Entry<String,Entry> mapEntry=items.next();
          wireAdapter.write(mapEntry.getKey(),mapEntry.getValue());
        }
        wireAdapter.flush();
      }
      ContextBootstrap.debug(MessageID.PROPAGATION_COMPLETED,""String_Node_Str"");
    }
    @Override public void receiveRequest(    InputStream in) throws IOException {
      receive(in,new OriginatorFinder(){
        public boolean isOriginator(        String key){
          return IS_NOT_ORIGINATOR;
        }
      }
);
    }
    private void receive(    InputStream in,    OriginatorFinder origFinder) throws IOException {
      ContextBootstrap.debug(MessageID.PROPAGATION_STARTED,""String_Node_Str"");
      ContextAccessController accessController=ContextBootstrap.getContextAccessController();
      wireAdapter.prepareToReadFrom(in);
      SimpleMap map=getMapAndCreateIfNeeded();
      map.prepareToPropagate();
      for (String key=wireAdapter.readKey(); key != null; key=wireAdapter.readKey()) {
        try {
          Entry entry=wireAdapter.readEntry();
          if (entry == null) {
            break;
          }
 else {
            entry.init(origFinder.isOriginator(key),accessController.isEveryoneAllowedToRead(key));
            map.put(key,entry);
          }
        }
 catch (        ClassNotFoundException e) {
          ContextBootstrap.getLoggerAdapter().log(Level.ERROR,e,MessageID.ERROR_UNABLE_TO_INSTANTIATE_CONTEXT_FROM_THE_WIRE);
        }
      }
      for (      ContextLifecycle context : map.getAddedContextLifecycles()) {
        context.contextAdded();
      }
      ContextBootstrap.debug(MessageID.PROPAGATION_COMPLETED,""String_Node_Str"");
    }
    @Override public void receiveResponse(    InputStream in,    PropagationMode mode) throws IOException {
      SimpleMap map=getMapAndCreateIfNeeded();
      final Set<String> keySet=clearPropagatedEntries(mode,map);
      ContextBootstrap.debug(MessageID.CLEARED_ENTRIES,keySet);
      receive(in,new OriginatorFinder(){
        @Override public boolean isOriginator(        String key){
          return keySet.contains(key);
        }
      }
);
    }
    private Set<String> clearPropagatedEntries(    PropagationMode mode,    SimpleMap map){
      Set<String> keySet=new HashSet<String>();
      Iterator<Map.Entry<String,Entry>> iterator=map.iterator(new Filter(){
        @Override public boolean keep(        Map.Entry<String,Entry> mapEntry,        PropagationMode mode){
          EnumSet<PropagationMode> modes=mapEntry.getValue().propagationModes;
          return modes.contains(mode);
        }
      }
,mode);
      while (iterator.hasNext()) {
        keySet.add(iterator.next().getKey());
        iterator.remove();
      }
      return keySet;
    }
    /** 
 * Replaces the in-scope ContextMap entries with those in the srcContexts that have the THREAD propagation mode.
 */
    @Override public void restoreThreadContexts(    final AccessControlledMap srcContexts){
      if (ContextBootstrap.IS_DEBUG) {
        ContextBootstrap.debug(MessageID.RESTORING_CONTEXTS,asList(srcContexts.entryIterator()));
      }
      if (srcContexts == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      SimpleMap srcSimpleMap=srcContexts.simpleMap;
      if (!srcSimpleMap.map.isEmpty()) {
        SimpleMap destSimpleMap=mapFinder.getMapAndCreateIfNeeded().simpleMap;
        destSimpleMap.prepareToPropagate();
        if (destSimpleMap == srcSimpleMap) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        Iterator<Map.Entry<String,Entry>> iterator=srcSimpleMap.iterator(propagationModeFilter,PropagationMode.THREAD);
        while (iterator.hasNext()) {
          Map.Entry<String,Entry> mapEntry=iterator.next();
          destSimpleMap.put(mapEntry.getKey(),mapEntry.getValue());
        }
        for (        ContextLifecycle context : destSimpleMap.getAddedContextLifecycles()) {
          context.contextAdded();
        }
        if (ContextBootstrap.IS_DEBUG) {
          ContextBootstrap.debug(MessageID.RESTORING_CONTEXTS,asList(mapFinder.getMapIfItExists().entryIterator()));
        }
      }
    }
    private LinkedList<String> asList(    final Iterator<Map.Entry<String,Entry>> mapEntries){
      LinkedList<String> list=new LinkedList<String>();
      while (mapEntries.hasNext()) {
        Map.Entry<String,Entry> mapEntry=mapEntries.next();
        list.add(mapEntry.getKey() + ""String_Node_Str"" + mapEntry.getValue());
      }
      return list;
    }
    @Override public void useWireAdapter(    WireAdapter aWireAdapter){
      wireAdapter=aWireAdapter;
    }
  }
;
}"
29111,"@Override public Entry nextEntry() throws IOException {
  EnumSet<PropagationMode> propModes=toPropagationMode(ois.readInt());
  ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
  String className=readAscii();
  Entry.ContextType contextType=toContextType(className);
  ContextBootstrap.debug(MessageID.READ_CONTEXT_TYPE,contextType);
  Object value;
switch (contextType) {
case LONG:
    value=ois.readLong();
  if (key.equals(Catalog.CATALOG_META_KEY)) {
    wlsCatalog.setMeta((Long)value);
  }
break;
case STRING:
value=ois.readUTF();
break;
case ASCII_STRING:
value=readAscii();
break;
case SERIALIZABLE:
byte[] bytes=new byte[ois.readInt()];
ois.readFully(bytes);
try {
Carrier carrier=Carrier.fromBytes(bytes);
value=carrier.serializable;
if (value instanceof ViewMeta) {
try {
value=((PrivilegedWireAdapterAccessor)ContextMapHelper.getScopeAwareContextMap()).createViewCapable(key,false);
}
 catch (InsufficientCredentialException e) {
throw new AssertionError(""String_Node_Str"");
}
}
 else {
if (key.equals(Catalog.CATALOG_KEY)) {
wlsCatalog.setPosisionsFrom((Catalog)value);
}
}
}
 catch (ClassNotFoundException e) {
ContextBootstrap.debug(MessageID.READING_OPAQUE_TYPE,key,bytes.length);
value=bytes;
contextType=ContextType.OPAQUE;
}
break;
case OPAQUE:
SerializableContextFactory factory=HELPER.findContextFactory(key,className);
if (factory == null) {
error(MessageID.ERROR_NO_WORK_CONTEXT_FACTORY,key,className);
return null;
}
 else {
WLSContext ctx=factory.createInstance();
if (ctx != null) {
ctx.readContext(ois);
}
value=ctx;
}
break;
default :
throw new AssertionError(""String_Node_Str"" + contextType);
}
ContextBootstrap.debug(MessageID.READ_VALUE,value);
return contextType == ContextType.OPAQUE ? Entry.createOpaqueEntryInstance(value,propModes,className) : new Entry(value,propModes,contextType);
}","@Override public Entry nextEntry() throws IOException {
  EnumSet<PropagationMode> propModes=toPropagationMode(ois.readInt());
  ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
  String className=readAscii();
  Entry.ContextType contextType=toContextType(className);
  ContextBootstrap.debug(MessageID.READ_CONTEXT_TYPE,contextType);
  Object value;
switch (contextType) {
case LONG:
    value=ois.readLong();
  if (key.equals(Catalog.CATALOG_META_KEY)) {
    if (wlsCatalog == null)     throw new IllegalStateException(""String_Node_Str"");
    wlsCatalog.setMeta((Long)value);
  }
break;
case STRING:
value=ois.readUTF();
break;
case ASCII_STRING:
value=readAscii();
break;
case SERIALIZABLE:
byte[] bytes=new byte[ois.readInt()];
ois.readFully(bytes);
try {
Carrier carrier=Carrier.fromBytes(bytes);
value=carrier.serializable;
if (value instanceof ViewMeta) {
try {
value=((PrivilegedWireAdapterAccessor)ContextMapHelper.getScopeAwareContextMap()).createViewCapable(key,false);
}
 catch (InsufficientCredentialException e) {
throw new AssertionError(""String_Node_Str"");
}
}
 else {
if (key.equals(Catalog.CATALOG_KEY)) {
wlsCatalog.setPosisionsFrom((Catalog)value);
}
}
}
 catch (ClassNotFoundException e) {
ContextBootstrap.debug(MessageID.READING_OPAQUE_TYPE,key,bytes.length);
value=bytes;
contextType=ContextType.OPAQUE;
}
break;
case OPAQUE:
SerializableContextFactory factory=HELPER.findContextFactory(key,className);
if (factory == null) {
error(MessageID.ERROR_NO_WORK_CONTEXT_FACTORY,key,className);
return null;
}
 else {
WLSContext ctx=factory.createInstance();
if (ctx != null) {
ctx.readContext(ois);
}
value=ctx;
}
break;
default :
throw new AssertionError(""String_Node_Str"" + contextType);
}
ContextBootstrap.debug(MessageID.READ_VALUE,value);
return contextType == ContextType.OPAQUE ? Entry.createOpaqueEntryInstance(value,propModes,className) : new Entry(value,propModes,contextType);
}"
29112,"@Override protected void readHeader(ObjectInputStream ois,Catalog catalog) throws IOException {
  this.wlsCatalog=catalog;
}","@Override protected void readHeader(ObjectInputStream ois,Catalog catalog) throws IOException {
  wlsCatalog=catalog;
}"
29113,"private Object initiateInstance(Class svcClass,ServiceReferenceDescriptor desc) throws Exception {
  WsUtil wsu=new WsUtil();
  URL wsdlFile=wsu.privilegedGetServiceRefWsdl(desc);
  String genXmlDir;
  if (desc.getBundleDescriptor().getApplication() != null) {
    genXmlDir=desc.getBundleDescriptor().getApplication().getGeneratedXMLDirectory();
    if (!desc.getBundleDescriptor().getApplication().isVirtual()) {
      String subDirName=desc.getBundleDescriptor().getModuleDescriptor().getArchiveUri();
      genXmlDir+=(File.separator + subDirName.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    genXmlDir=desc.getBundleDescriptor().getModuleDescriptor().getArchiveUri();
  }
  Object obj=null;
  java.lang.reflect.Constructor cons=svcClass.getConstructor(new Class[]{java.net.URL.class,javax.xml.namespace.QName.class});
  obj=cons.newInstance(wsdlFile,desc.getServiceName());
  return obj;
}","private Object initiateInstance(Class svcClass,ServiceReferenceDescriptor desc) throws Exception {
  WsUtil wsu=new WsUtil();
  URL wsdlFile=wsu.privilegedGetServiceRefWsdl(desc);
  Object obj=null;
  java.lang.reflect.Constructor cons=svcClass.getConstructor(new Class[]{java.net.URL.class,javax.xml.namespace.QName.class});
  obj=cons.newInstance(wsdlFile,desc.getServiceName());
  return obj;
}"
29114,"public void setMessageContext(SOAPMessageContext soapMessageCtx){
  hashcode=soapMessageCtx.hashCode();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    soapMessageCtx.getMessage().writeTo(baos);
  }
 catch (  Exception e) {
    WebServiceEngineImpl.sLogger.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
  }
  soapMessage=baos.toString();
}","public void setMessageContext(SOAPMessageContext soapMessageCtx){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    soapMessageCtx.getMessage().writeTo(baos);
  }
 catch (  Exception e) {
    WebServiceEngineImpl.sLogger.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
  }
  soapMessage=baos.toString();
}"
29115,"/** 
 * Parses the ra.xml for the admin object javabean properties. The admin object to be parsed is identified by the moduleDir where ra.xml is present and the adminObject interface. Admin object interface will be unique in a given ra.xml. <p/> It throws ConnectorRuntimeException if either or both the parameters are null, if corresponding rar is not deployed, if no adminObjectInterce is found in ra.xml. If rar is deployed and admin Object interface is present but no properties are present for the corresponding adminobjectInterface, null is returned.
 * @param desc                 ConnectorDescriptor pertaining to rar.
 * @param adminObjectInterface AdminObject interface 
 * @param adminObjectClass AdminObject class
 * @return Javabean properties with the propety names and valuesof propeties. The property values will be the values mentioned in ra.xml if present. Otherwise it will be the default values obtained by introspecting the javabean. In both the case if no value is present, empty String is returned as the value.
 * @throws ConnectorRuntimeException if either of the parameters are null.If corresponding rar is not deployed i.e moduleDir is invalid. If no admin object intercface is found in ra.xml
 */
public Properties getJavaBeanProps(ConnectorDescriptor desc,String adminObjectInterface,String adminObjectClass,String rarName) throws ConnectorRuntimeException {
  if (desc == null || adminObjectInterface == null) {
    throw new ConnectorRuntimeException(""String_Node_Str"");
  }
  Set adminObjectSet=desc.getAdminObjects();
  if (adminObjectSet == null || adminObjectSet.size() == 0) {
    return null;
  }
  AdminObject adminObject=null;
  Iterator iter=adminObjectSet.iterator();
  Properties mergedVals=null;
  boolean adminObjectFound=false;
  while (iter.hasNext()) {
    adminObject=(AdminObject)iter.next();
    if (adminObjectInterface.equals(adminObject.getAdminObjectInterface()) && (adminObjectClass == null || adminObjectClass.equals(adminObject.getAdminObjectClass()))) {
      adminObjectFound=true;
      break;
    }
  }
  if (!adminObjectFound) {
    StringManager localStrings=StringManager.getManager(AdminObjectConfigParserImpl.class);
    String msg=localStrings.getString(""String_Node_Str"",adminObjectInterface);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,msg);
    }
    throw new ConnectorRuntimeException(msg);
  }
  mergedVals=getMergedValues(adminObject,mergedVals,rarName);
  return mergedVals;
}","/** 
 * Parses the ra.xml for the admin object javabean properties. The admin object to be parsed is identified by the moduleDir where ra.xml is present and the adminObject interface. Admin object interface will be unique in a given ra.xml. <p/> It throws ConnectorRuntimeException if either or both the parameters are null, if corresponding rar is not deployed, if no adminObjectInterce is found in ra.xml. If rar is deployed and admin Object interface is present but no properties are present for the corresponding adminobjectInterface, null is returned.
 * @param desc                 ConnectorDescriptor pertaining to rar.
 * @param adminObjectInterface AdminObject interface 
 * @param adminObjectClass AdminObject class
 * @return Javabean properties with the propety names and valuesof propeties. The property values will be the values mentioned in ra.xml if present. Otherwise it will be the default values obtained by introspecting the javabean. In both the case if no value is present, empty String is returned as the value.
 * @throws ConnectorRuntimeException if either of the parameters are null.If corresponding rar is not deployed i.e moduleDir is invalid. If no admin object intercface is found in ra.xml
 */
public Properties getJavaBeanProps(ConnectorDescriptor desc,String adminObjectInterface,String adminObjectClass,String rarName) throws ConnectorRuntimeException {
  if (desc == null || adminObjectInterface == null) {
    throw new ConnectorRuntimeException(""String_Node_Str"");
  }
  Set adminObjectSet=desc.getAdminObjects();
  if (adminObjectSet == null || adminObjectSet.size() == 0) {
    return null;
  }
  AdminObject adminObject=null;
  Iterator iter=adminObjectSet.iterator();
  Properties mergedVals=null;
  boolean adminObjectFound=false;
  while (iter.hasNext()) {
    adminObject=(AdminObject)iter.next();
    if (adminObjectInterface.equals(adminObject.getAdminObjectInterface()) && (adminObjectClass == null || adminObjectClass.equals(adminObject.getAdminObjectClass()))) {
      adminObjectFound=true;
      break;
    }
  }
  if (!adminObjectFound) {
    StringManager localStrings=StringManager.getManager(AdminObjectConfigParserImpl.class);
    String msg=localStrings.getString(""String_Node_Str"",adminObjectInterface);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,msg);
    }
    throw new ConnectorRuntimeException(msg);
  }
  mergedVals=getMergedValues(adminObject,rarName);
  return mergedVals;
}"
29116,"private Properties getMergedValues(AdminObject adminObject,Properties mergedVals,String raName) throws ConnectorRuntimeException {
  Set ddVals=adminObject.getConfigProperties();
  String className=adminObject.getAdminObjectClass();
  if (className != null && className.length() != 0) {
    Properties introspectedVals=configParserUtil.introspectJavaBean(className,ddVals,false,raName);
    mergedVals=configParserUtil.mergeProps(ddVals,introspectedVals);
  }
  return mergedVals;
}","private Properties getMergedValues(AdminObject adminObject,String raName) throws ConnectorRuntimeException {
  Set ddVals=adminObject.getConfigProperties();
  String className=adminObject.getAdminObjectClass();
  Properties mergedVals=null;
  if (className != null && className.length() != 0) {
    Properties introspectedVals=configParserUtil.introspectJavaBean(className,ddVals,false,raName);
    mergedVals=configParserUtil.mergeProps(ddVals,introspectedVals);
  }
  return mergedVals;
}"
29117,"private void addPool(ResourcePool pool){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + pool.getPoolInfo() + ""String_Node_Str"");
  }
synchronized (poolTable) {
    poolTable.put(pool.getPoolStatus().getPoolInfo(),pool);
  }
}","private void addPool(ResourcePool pool){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + pool.getPoolInfo() + ""String_Node_Str"");
  }
  poolTable.put(pool.getPoolStatus().getPoolInfo(),pool);
}"
29118,"/** 
 * Kill the pool with the specified pool name
 * @param poolInfo - The name of the pool to kill
 */
public void killPool(PoolInfo poolInfo){
  ResourcePool pool=poolTable.get(poolInfo);
  if (pool != null) {
    pool.cancelResizerTask();
    pool.emptyPool();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + pool + ""String_Node_Str"");
    }
synchronized (poolTable) {
      poolTable.remove(poolInfo);
    }
    if (listener != null) {
      listener.poolDestroyed(poolInfo);
    }
    ManagedConnectionFactory mcf=ConnectorRegistry.getInstance().getManagedConnectionFactory(poolInfo);
    if (mcf != null) {
      if (mcf instanceof MCFLifecycleListener) {
        ((MCFLifecycleListener)mcf).mcfDestroyed();
      }
    }
  }
}","/** 
 * Kill the pool with the specified pool name
 * @param poolInfo - The name of the pool to kill
 */
public void killPool(PoolInfo poolInfo){
  ResourcePool pool=poolTable.get(poolInfo);
  if (pool != null) {
    pool.cancelResizerTask();
    pool.emptyPool();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + pool + ""String_Node_Str"");
    }
    poolTable.remove(poolInfo);
    if (listener != null) {
      listener.poolDestroyed(poolInfo);
    }
    ManagedConnectionFactory mcf=ConnectorRegistry.getInstance().getManagedConnectionFactory(poolInfo);
    if (mcf != null) {
      if (mcf instanceof MCFLifecycleListener) {
        ((MCFLifecycleListener)mcf).mcfDestroyed();
      }
    }
  }
}"
29119,"/** 
 * Stop this Context component. destroy all the caches created and flush/clear the cached content
 * @exception LifecycleException if a shutdown error occurs
 */
public void stop() throws LifecycleException {
  disable();
  try {
    defaultHelper.destroy();
  }
 catch (  Exception e) {
  }
  Enumeration<CacheHelper> helpers=Collections.enumeration(cacheHelpers.values());
  while (helpers.hasMoreElements()) {
    CacheHelper cacheHelper=helpers.nextElement();
    try {
      cacheHelper.destroy();
    }
 catch (    Exception e) {
    }
  }
  cacheHelpers.clear();
  cacheMappings.clear();
  cacheHelpersByFilterName.clear();
  listeners.clear();
}","/** 
 * Stop this Context component. destroy all the caches created and flush/clear the cached content
 * @exception LifecycleException if a shutdown error occurs
 */
public void stop() throws LifecycleException {
  disable();
  try {
    if (defaultHelper != null) {
      defaultHelper.destroy();
    }
  }
 catch (  Exception e) {
  }
  Enumeration<CacheHelper> helpers=Collections.enumeration(cacheHelpers.values());
  while (helpers.hasMoreElements()) {
    CacheHelper cacheHelper=helpers.nextElement();
    try {
      cacheHelper.destroy();
    }
 catch (    Exception e) {
    }
  }
  cacheHelpers.clear();
  cacheMappings.clear();
  cacheHelpersByFilterName.clear();
  listeners.clear();
}"
29120,"/** 
 * cache-mapping for this servlet-name or the URLpattern
 * @param request incoming request
 * @return cache-mapping object; uses servlet name or the URL patternto lookup in the CacheManager for the mapping.
 */
private CacheMapping lookupCacheMapping(HttpServletRequest request){
  String name=(String)request.getAttribute(ATTR_CACHING_FILTER_NAME);
  return manager.getCacheMapping(name);
}","/** 
 * cache-mapping for this servlet-name or the URLpattern
 * @param request incoming request
 * @return cache-mapping object; uses servlet name or the URL patternto lookup in the CacheManager for the mapping.
 */
private CacheMapping lookupCacheMapping(HttpServletRequest request){
  String name=(String)request.getAttribute(ATTR_CACHING_FILTER_NAME);
  if (manager != null) {
    return manager.getCacheMapping(name);
  }
 else {
    return null;
  }
}"
29121,"public void readInstanceLevelParams(ServerConfigLookup serverConfigLookup){
  org.glassfish.web.config.serverbeans.SessionManager smBean=serverConfigLookup.getInstanceSessionManager();
  if (smBean != null) {
    org.glassfish.web.config.serverbeans.ManagerProperties mgrBean=smBean.getManagerProperties();
    if (mgrBean != null) {
      String reapIntervalInSecondsString=mgrBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          reapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MANAGER_REAP_INTERVAL_SET,reapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MGR_REAP_INTERVAL);
        }
      }
      String maxSessionsString=mgrBean.getMaxSessions();
      if (maxSessionsString != null) {
        try {
          maxSessions=Integer.parseInt(maxSessionsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MAX_SESSIONS_SET,maxSessions);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MAX_SESSIONS);
        }
      }
      String sessionFilenameString=mgrBean.getSessionFileName();
      if (sessionFilenameString != null) {
        sessionFilename=sessionFilenameString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_FILENAME_SET,sessionFilename);
        }
      }
      sessionIdGeneratorClassname=mgrBean.getSessionIdGeneratorClassname();
      if (sessionIdGeneratorClassname != null && _logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,SESSION_ID_GENERATOR_CLASSNAME_SET,sessionIdGeneratorClassname);
      }
      List<Property> props=mgrBean.getProperty();
      if (props != null) {
        for (        Property prop : props) {
          String name=prop.getName();
          String value=prop.getValue();
          if (name.equalsIgnoreCase(""String_Node_Str"")) {
            try {
              maxIdleBackup=Integer.parseInt(value);
            }
 catch (            NumberFormatException e) {
            }
          }
        }
      }
    }
    org.glassfish.web.config.serverbeans.StoreProperties storeBean=smBean.getStoreProperties();
    if (storeBean != null) {
      String reapIntervalInSecondsString=storeBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          storeReapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,STORE_REAP_INTERVAL_SET,storeReapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      String directoryString=storeBean.getDirectory();
      if (directoryString != null) {
        directory=directoryString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,DIRECTORY_SET,directoryString);
        }
      }
    }
  }
  SessionProperties spBean=serverConfigLookup.getInstanceSessionProperties();
  if (spBean != null) {
    String timeoutSecondsString=spBean.getTimeoutInSeconds();
    if (timeoutSecondsString != null) {
      try {
        sessionMaxInactiveInterval=Integer.parseInt(timeoutSecondsString);
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_MAX_INACTIVE_INTERVAL_SET,sessionMaxInactiveInterval);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_SESSION_MAX_INACTIVE_INTERVAL);
      }
    }
  }
}","public void readInstanceLevelParams(ServerConfigLookup serverConfigLookup){
  org.glassfish.web.config.serverbeans.SessionManager smBean=serverConfigLookup.getInstanceSessionManager();
  if (smBean != null) {
    org.glassfish.web.config.serverbeans.ManagerProperties mgrBean=smBean.getManagerProperties();
    if (mgrBean != null) {
      String reapIntervalInSecondsString=mgrBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          reapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MANAGER_REAP_INTERVAL_SET,reapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MGR_REAP_INTERVAL);
        }
      }
      String maxSessionsString=mgrBean.getMaxSessions();
      if (maxSessionsString != null) {
        try {
          maxSessions=Integer.parseInt(maxSessionsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,MAX_SESSIONS_SET,maxSessions);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
 else {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_MAX_SESSIONS);
        }
      }
      String sessionFilenameString=mgrBean.getSessionFileName();
      if (sessionFilenameString != null) {
        sessionFilename=sessionFilenameString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_FILENAME_SET,sessionFilename);
        }
      }
      sessionIdGeneratorClassname=mgrBean.getSessionIdGeneratorClassname();
      if (sessionIdGeneratorClassname != null && _logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,SESSION_ID_GENERATOR_CLASSNAME_SET,sessionIdGeneratorClassname);
      }
      List<Property> props=mgrBean.getProperty();
      if (props != null) {
        for (        Property prop : props) {
          String name=prop.getName();
          String value=prop.getValue();
        }
      }
    }
    org.glassfish.web.config.serverbeans.StoreProperties storeBean=smBean.getStoreProperties();
    if (storeBean != null) {
      String reapIntervalInSecondsString=storeBean.getReapIntervalInSeconds();
      if (reapIntervalInSecondsString != null) {
        try {
          storeReapInterval=Integer.parseInt(reapIntervalInSecondsString);
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,STORE_REAP_INTERVAL_SET,storeReapInterval);
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      String directoryString=storeBean.getDirectory();
      if (directoryString != null) {
        directory=directoryString;
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,DIRECTORY_SET,directoryString);
        }
      }
    }
  }
  SessionProperties spBean=serverConfigLookup.getInstanceSessionProperties();
  if (spBean != null) {
    String timeoutSecondsString=spBean.getTimeoutInSeconds();
    if (timeoutSecondsString != null) {
      try {
        sessionMaxInactiveInterval=Integer.parseInt(timeoutSecondsString);
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,SESSION_MAX_INACTIVE_INTERVAL_SET,sessionMaxInactiveInterval);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,NO_INSTANCE_LEVEL_VALUE_SET_SESSION_MAX_INACTIVE_INTERVAL);
      }
    }
  }
}"
29122,"public void readWebAppParams(Context ctx,SessionManager smBean){
  if (smBean != null) {
    ManagerProperties mgrBean=smBean.getManagerProperties();
    if ((mgrBean != null) && (mgrBean.sizeWebProperty() > 0)) {
      for (      WebProperty prop : mgrBean.getWebProperty()) {
        String name=prop.getAttributeValue(WebProperty.NAME);
        String value=prop.getAttributeValue(WebProperty.VALUE);
        if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            reapInterval=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            maxSessions=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            maxIdleBackup=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          relaxCacheVersionSemantics=Boolean.parseBoolean(value);
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          sessionFilename=value;
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          _persistenceFrequency=value;
        }
 else {
          if (_logger.isLoggable(Level.INFO)) {
            Object[] params={name};
            _logger.log(Level.INFO,WebContainer.PROPERTY_NOT_YET_SUPPORTED,params);
          }
        }
      }
    }
    StoreProperties storeBean=smBean.getStoreProperties();
    if ((storeBean != null) && (storeBean.sizeWebProperty() > 0)) {
      for (      WebProperty prop : storeBean.getWebProperty()) {
        String name=prop.getAttributeValue(WebProperty.NAME);
        String value=prop.getAttributeValue(WebProperty.VALUE);
        if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            storeReapInterval=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          directory=value;
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          _persistenceScope=value;
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          persistentCookieName=value;
        }
 else {
          if (_logger.isLoggable(Level.INFO)) {
            Object[] params={name};
            _logger.log(Level.INFO,WebContainer.PROPERTY_NOT_YET_SUPPORTED,params);
          }
        }
      }
    }
  }
}","public void readWebAppParams(Context ctx,SessionManager smBean){
  if (smBean != null) {
    ManagerProperties mgrBean=smBean.getManagerProperties();
    if ((mgrBean != null) && (mgrBean.sizeWebProperty() > 0)) {
      for (      WebProperty prop : mgrBean.getWebProperty()) {
        String name=prop.getAttributeValue(WebProperty.NAME);
        String value=prop.getAttributeValue(WebProperty.VALUE);
        if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            reapInterval=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            maxSessions=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          relaxCacheVersionSemantics=Boolean.parseBoolean(value);
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          sessionFilename=value;
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          _persistenceFrequency=value;
        }
 else {
          if (_logger.isLoggable(Level.INFO)) {
            Object[] params={name};
            _logger.log(Level.INFO,WebContainer.PROPERTY_NOT_YET_SUPPORTED,params);
          }
        }
      }
    }
    StoreProperties storeBean=smBean.getStoreProperties();
    if ((storeBean != null) && (storeBean.sizeWebProperty() > 0)) {
      for (      WebProperty prop : storeBean.getWebProperty()) {
        String name=prop.getAttributeValue(WebProperty.NAME);
        String value=prop.getAttributeValue(WebProperty.VALUE);
        if (name.equalsIgnoreCase(""String_Node_Str"")) {
          try {
            storeReapInterval=Integer.parseInt(value);
          }
 catch (          NumberFormatException e) {
          }
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          directory=value;
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          _persistenceScope=value;
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          persistentCookieName=value;
        }
 else {
          if (_logger.isLoggable(Level.INFO)) {
            Object[] params={name};
            _logger.log(Level.INFO,WebContainer.PROPERTY_NOT_YET_SUPPORTED,params);
          }
        }
      }
    }
  }
}"
29123,"/** 
 * Create a web module/application.
 * @param ctxPath  Context path for the web module
 * @param location Absolute pathname to the web module directory
 * @param defaultWebXmlLocation Location of default-web.xml
 */
public Context createContext(String id,String ctxPath,File location,String defaultContextXmlLocation,String defaultWebXmlLocation,boolean useDOLforDeployment,WebModuleConfig wmInfo){
  File configFile=null;
  if (ctxPath.equals(""String_Node_Str"")) {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",""String_Node_Str"");
  }
 else {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",ctxPath + ""String_Node_Str"");
  }
  if (!configFile.exists()) {
    configFile=new File(location,Constants.WEB_CONTEXT_XML);
  }
  WebModule context=new WebModule(services);
  context.setID(id);
  context.setWebContainer(webContainer);
  context.setDebug(debug);
  context.setPath(ctxPath);
  context.setDocBase(location.getAbsolutePath());
  context.setCrossContext(true);
  context.setUseNaming(isUseNaming());
  context.setHasWebXml(wmInfo.getDescriptor() != null);
  context.setWebBundleDescriptor(wmInfo.getDescriptor());
  context.setManagerChecksFrequency(1);
  context.setServerContext(serverContext);
  context.setWebModuleConfig(wmInfo);
  context.setDefaultWebXml(defaultWebXmlLocation);
  if (embeddedDirectoryListing) {
    context.setDirectoryListing(embeddedDirectoryListing);
  }
  if (configFile.exists()) {
    context.setConfigFile(configFile.getAbsolutePath());
  }
  ContextConfig config;
  if (useDOLforDeployment) {
    config=new WebModuleContextConfig();
    ((WebModuleContextConfig)config).setDescriptor(wmInfo.getDescriptor());
    ((WebModuleContextConfig)config).setServices(services);
  }
 else {
    config=new ContextConfig();
  }
  config.setDefaultContextXml(defaultContextXmlLocation);
  config.setDefaultWebXml(defaultWebXmlLocation);
  context.addLifecycleListener(config);
  context.addLifecycleListener(new WebModuleListener(webContainer,location,wmInfo.getDescriptor()));
  context.addContainerListener(new WebContainerListener(invocationManager,injectionManager));
  for (  WebModuleDecorator d : services.<WebModuleDecorator>getAllServices(WebModuleDecorator.class)) {
    d.decorate(context);
  }
  return context;
}","/** 
 * Create a web module/application.
 * @param ctxPath  Context path for the web module
 * @param location Absolute pathname to the web module directory
 * @param defaultWebXmlLocation Location of default-web.xml
 */
public Context createContext(String id,String ctxPath,File location,String defaultContextXmlLocation,String defaultWebXmlLocation,boolean useDOLforDeployment,WebModuleConfig wmInfo){
  File configFile=null;
  if (ctxPath.equals(""String_Node_Str"")) {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",""String_Node_Str"");
  }
 else {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",ctxPath + ""String_Node_Str"");
  }
  if (!configFile.exists()) {
    configFile=new File(location,Constants.WEB_CONTEXT_XML);
  }
  WebModule context=new WebModule(services);
  context.setID(id);
  context.setWebContainer(webContainer);
  context.setDebug(debug);
  context.setPath(ctxPath);
  context.setDocBase(location.getAbsolutePath());
  context.setCrossContext(true);
  context.setUseNaming(isUseNaming());
  context.setHasWebXml(wmInfo.getDescriptor() != null);
  context.setWebBundleDescriptor(wmInfo.getDescriptor());
  context.setManagerChecksFrequency(1);
  context.setServerContext(serverContext);
  context.setWebModuleConfig(wmInfo);
  context.setDefaultWebXml(defaultWebXmlLocation);
  if (embeddedDirectoryListing) {
    context.setDirectoryListing(embeddedDirectoryListing);
  }
  if (configFile.exists()) {
    context.setConfigFile(configFile.getAbsolutePath());
  }
  ContextConfig config;
  if (useDOLforDeployment) {
    config=new WebModuleContextConfig();
    ((WebModuleContextConfig)config).setDescriptor(wmInfo.getDescriptor());
    ((WebModuleContextConfig)config).setServices(services);
  }
 else {
    config=new ContextConfig();
  }
  config.setDefaultContextXml(defaultContextXmlLocation);
  config.setDefaultWebXml(defaultWebXmlLocation);
  context.addLifecycleListener(config);
  context.addLifecycleListener(new WebModuleListener(webContainer,wmInfo.getDescriptor()));
  context.addContainerListener(new WebContainerListener(invocationManager,injectionManager));
  for (  WebModuleDecorator d : services.<WebModuleDecorator>getAllServices(WebModuleDecorator.class)) {
    d.decorate(context);
  }
  return context;
}"
29124,"/** 
 * Log a message summarizing the specified request and response, according to the format specified by the <code>pattern</code> property.
 * @param request Request being processed
 * @param response Response being processed
 */
public int invoke(Request request,Response response){
  if (formatter.needTimeTaken()) {
    request.setNote(Constants.REQUEST_START_TIME_NOTE,System.currentTimeMillis());
  }
  return INVOKE_NEXT;
}","/** 
 * Log a message summarizing the specified request and response, according to the format specified by the <code>pattern</code> property.
 * @param request Request being processed
 * @param response Response being processed
 */
public int invoke(Request request,Response response){
  if (formatter != null && formatter.needTimeTaken()) {
    request.setNote(Constants.REQUEST_START_TIME_NOTE,System.currentTimeMillis());
  }
  return INVOKE_NEXT;
}"
29125,"public void postInvoke(Request request,Response response) throws IOException {
  if (!started || condition != null && null != request.getRequest().getAttribute(condition)) {
    return;
  }
synchronized (lock) {
    if (charBuffer.position() == charBuffer.limit()) {
      charBuffer.limit(charBuffer.capacity());
    }
    int pos=charBuffer.position();
    for (int i=0; i < 2; i++) {
      try {
        formatter.appendLogEntry(request,response,charBuffer);
        charBuffer.put(""String_Node_Str"");
        if (flushRealTime) {
          log();
        }
        break;
      }
 catch (      BufferOverflowException ex) {
        charBuffer.position(pos);
        log();
        if (i + 1 == 2) {
          _logger.log(Level.SEVERE,ACCESS_LOG_UNABLE_TO_WRITE,new Object[]{ex});
          return;
        }
      }
    }
  }
}","public void postInvoke(Request request,Response response) throws IOException {
  if (!started || condition != null && null != request.getRequest().getAttribute(condition)) {
    return;
  }
synchronized (lock) {
    if (charBuffer.position() == charBuffer.limit()) {
      charBuffer.limit(charBuffer.capacity());
    }
    int pos=charBuffer.position();
    for (int i=0; i < 2; i++) {
      try {
        if (formatter != null) {
          formatter.appendLogEntry(request,response,charBuffer);
          charBuffer.put(""String_Node_Str"");
          if (flushRealTime) {
            log();
          }
          break;
        }
      }
 catch (      BufferOverflowException ex) {
        charBuffer.position(pos);
        log();
        if (i + 1 == 2) {
          _logger.log(Level.SEVERE,ACCESS_LOG_UNABLE_TO_WRITE,new Object[]{ex});
          return;
        }
      }
    }
  }
}"
29126,"/** 
 * Returns true if the archive contains beans.xml as defined by packaging rules of Weld 
 */
@Override public boolean handles(ReadableArchive archive){
  boolean isWeldArchive=false;
  if (isEntryPresent(archive,WeldUtils.WEB_INF)) {
    isWeldArchive=isEntryPresent(archive,WeldUtils.WEB_INF_BEANS_XML);
    if (!isWeldArchive) {
      if (isEntryPresent(archive,WeldUtils.WEB_INF_LIB)) {
        isWeldArchive=scanLibDir(archive,WeldUtils.WEB_INF_LIB);
      }
    }
  }
  String archiveName=archive.getName();
  if (!isWeldArchive && archiveName != null && archiveName.endsWith(WeldUtils.EXPANDED_JAR_SUFFIX)) {
    isWeldArchive=isEntryPresent(archive,WeldUtils.META_INF_BEANS_XML);
  }
  if (!isWeldArchive && isEntryPresent(archive,WeldUtils.META_INF_BEANS_XML)) {
    isWeldArchive=true;
  }
  if (!isWeldArchive && archiveName != null && archiveName.endsWith(WeldUtils.EXPANDED_RAR_SUFFIX)) {
    isWeldArchive=isEntryPresent(archive,WeldUtils.META_INF_BEANS_XML);
  }
  return isWeldArchive;
}","/** 
 * Returns true if the archive contains beans.xml as defined by packaging rules of Weld 
 */
@Override public boolean handles(ReadableArchive archive){
  boolean isWeldArchive=false;
  if (isEntryPresent(archive,WeldUtils.WEB_INF)) {
    isWeldArchive=isEntryPresent(archive,WeldUtils.WEB_INF_BEANS_XML) || isEntryPresent(archive,WeldUtils.WEB_INF_CLASSES_META_INF_BEANS_XML);
    if (!isWeldArchive) {
      if (isEntryPresent(archive,WeldUtils.WEB_INF_LIB)) {
        isWeldArchive=scanLibDir(archive,WeldUtils.WEB_INF_LIB);
      }
    }
  }
  String archiveName=archive.getName();
  if (!isWeldArchive && archiveName != null && archiveName.endsWith(WeldUtils.EXPANDED_JAR_SUFFIX)) {
    isWeldArchive=isEntryPresent(archive,WeldUtils.META_INF_BEANS_XML);
  }
  if (!isWeldArchive && isEntryPresent(archive,WeldUtils.META_INF_BEANS_XML)) {
    isWeldArchive=true;
  }
  if (!isWeldArchive && archiveName != null && archiveName.endsWith(WeldUtils.EXPANDED_RAR_SUFFIX)) {
    isWeldArchive=isEntryPresent(archive,WeldUtils.META_INF_BEANS_XML);
  }
  return isWeldArchive;
}"
29127,"private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs){
  try {
    if (archive.exists(WEB_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            beanClasses.add(getClassLoader().loadClass(className));
            moduleClasses.add(getClassLoader().loadClass(className));
          }
 catch (          Throwable t) {
            logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
          }
        }
 else         if (entry.endsWith(""String_Node_Str"")) {
          URI uri=archive.getURI();
          File file=new File(uri.getPath() + entry);
          URI beansXmlUri=file.toURI();
          wUris.add(beansXmlUri);
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI());
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else           if (weblibJarArchive.exists(META_INF_SERVICES_EXTENSION)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else {
            logger.log(FINE,""String_Node_Str"" + archive.getName() + ""String_Node_Str"");
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,WEB_INF_LIB + SEPARATOR_CHAR + libJarArchive.getName());
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
    if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      collectRarInfo(archive);
    }
    if (archive.exists(META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true);
    }
    if (archive.exists(META_INF_SERVICES_EXTENSION)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.UNKNOWN;
      collectJarInfo(archive,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}","private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs){
  try {
    if (archive.exists(WEB_INF_BEANS_XML) || archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str""+ WEB_INF_BEANS_XML+ ""String_Node_Str""+ WEB_INF_CLASSES_META_INF_BEANS_XML);
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            beanClasses.add(getClassLoader().loadClass(className));
            moduleClasses.add(getClassLoader().loadClass(className));
          }
 catch (          Throwable t) {
            logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ t.toString());
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          URI uri=archive.getURI();
          File file=new File(uri.getPath() + entry);
          URI beansXmlUri=file.toURI();
          wUris.add(beansXmlUri);
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI());
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else           if (weblibJarArchive.exists(META_INF_SERVICES_EXTENSION)) {
            logger.log(FINE,""String_Node_Str"" + entry + ""String_Node_Str"");
            weblibJarsThatAreBeanArchives.add(weblibJarArchive);
          }
 else {
            logger.log(FINE,""String_Node_Str"" + archive.getName() + ""String_Node_Str"");
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,WEB_INF_LIB + SEPARATOR_CHAR + libJarArchive.getName());
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
    if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      collectRarInfo(archive);
    }
    if (archive.exists(META_INF_BEANS_XML)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true);
    }
    if (archive.exists(META_INF_SERVICES_EXTENSION)) {
      logger.log(FINE,""String_Node_Str"" + archive.getURI() + ""String_Node_Str"");
      bdaType=BDAType.UNKNOWN;
      collectJarInfo(archive,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}"
29128,"@Override public void combineConnectorResourceDefinitionDescriptors(JndiNameEnvironment env){
  for (  ConnectorResourceDefinitionDescriptor crdd : env.getConnectorResourceDefinitionDescriptors()) {
    ConnectorResourceDefinitionDescriptor desc=getConnectorResourceDefinitionDescriptor(crdd.getName());
    if (desc != null) {
      if (desc.isConflict(crdd)) {
        conflictConnectorResourceDefinition=true;
      }
    }
 else {
      addConnectorResourceDefinitionDescriptor(null);
    }
  }
}","@Override public void combineConnectorResourceDefinitionDescriptors(JndiNameEnvironment env){
  for (  ConnectorResourceDefinitionDescriptor crdd : env.getConnectorResourceDefinitionDescriptors()) {
    ConnectorResourceDefinitionDescriptor desc=getConnectorResourceDefinitionDescriptor(crdd.getName());
    if (desc != null) {
      if (desc.isConflict(crdd)) {
        conflictConnectorResourceDefinition=true;
      }
    }
 else {
      addConnectorResourceDefinitionDescriptor(crdd);
    }
  }
}"
29129,"@Override public void combineJMSDestinationDefinitionDescriptors(JndiNameEnvironment env){
  for (  JMSDestinationDefinitionDescriptor jmsddd : env.getJMSDestinationDefinitionDescriptors()) {
    JMSDestinationDefinitionDescriptor desc=getJMSDestinationDefinitionDescriptor(jmsddd.getName());
    if (desc != null) {
      if (desc.isConflict(jmsddd)) {
        conflictJMSDestinationDefinition=true;
      }
    }
 else {
      addJMSDestinationDefinitionDescriptor(null);
    }
  }
}","@Override public void combineJMSDestinationDefinitionDescriptors(JndiNameEnvironment env){
  for (  JMSDestinationDefinitionDescriptor jmsddd : env.getJMSDestinationDefinitionDescriptors()) {
    JMSDestinationDefinitionDescriptor desc=getJMSDestinationDefinitionDescriptor(jmsddd.getName());
    if (desc != null) {
      if (desc.isConflict(jmsddd)) {
        conflictJMSDestinationDefinition=true;
      }
    }
 else {
      addJMSDestinationDefinitionDescriptor(jmsddd);
    }
  }
}"
29130,"@Override public void combineJMSConnectionFactoryDefinitionDescriptors(JndiNameEnvironment env){
  for (  JMSConnectionFactoryDefinitionDescriptor jmscfdd : env.getJMSConnectionFactoryDefinitionDescriptors()) {
    JMSConnectionFactoryDefinitionDescriptor desc=getJMSConnectionFactoryDefinitionDescriptor(jmscfdd.getName());
    if (desc != null) {
      if (desc.isConflict(jmscfdd)) {
        conflictJMSConnectionFactoryDefinition=true;
      }
    }
 else {
      addJMSConnectionFactoryDefinitionDescriptor(null);
    }
  }
}","@Override public void combineJMSConnectionFactoryDefinitionDescriptors(JndiNameEnvironment env){
  for (  JMSConnectionFactoryDefinitionDescriptor jmscfdd : env.getJMSConnectionFactoryDefinitionDescriptors()) {
    JMSConnectionFactoryDefinitionDescriptor desc=getJMSConnectionFactoryDefinitionDescriptor(jmscfdd.getName());
    if (desc != null) {
      if (desc.isConflict(jmscfdd)) {
        conflictJMSConnectionFactoryDefinition=true;
      }
    }
 else {
      addJMSConnectionFactoryDefinitionDescriptor(jmscfdd);
    }
  }
}"
29131,"@Override public void combineAdministeredObjectDefinitionDescriptors(JndiNameEnvironment env){
  for (  AdministeredObjectDefinitionDescriptor aodd : env.getAdministeredObjectDefinitionDescriptors()) {
    AdministeredObjectDefinitionDescriptor desc=getAdministeredObjectDefinitionDescriptor(aodd.getName());
    if (desc != null) {
      if (desc.isConflict(aodd)) {
        conflictAdminObjectDefinition=true;
      }
    }
 else {
      addAdministeredObjectDefinitionDescriptor(desc);
    }
  }
}","@Override public void combineAdministeredObjectDefinitionDescriptors(JndiNameEnvironment env){
  for (  AdministeredObjectDefinitionDescriptor aodd : env.getAdministeredObjectDefinitionDescriptors()) {
    AdministeredObjectDefinitionDescriptor desc=getAdministeredObjectDefinitionDescriptor(aodd.getName());
    if (desc != null) {
      if (desc.isConflict(aodd)) {
        conflictAdminObjectDefinition=true;
      }
    }
 else {
      addAdministeredObjectDefinitionDescriptor(aodd);
    }
  }
}"
29132,"/** 
 * Create a web module/application.
 * @param ctxPath  Context path for the web module
 * @param location Absolute pathname to the web module directory
 * @param defaultWebXmlLocation Location of default-web.xml
 */
public Context createContext(String id,String ctxPath,File location,String defaultContextXmlLocation,String defaultWebXmlLocation,boolean useDOLforDeployment,WebModuleConfig wmInfo){
  File configFile=null;
  if (ctxPath.equals(""String_Node_Str"")) {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",""String_Node_Str"");
  }
 else {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",ctxPath + ""String_Node_Str"");
  }
  if (!configFile.exists()) {
    configFile=new File(location,Constants.WEB_CONTEXT_XML);
  }
  WebModule context=new WebModule(services);
  context.setID(id);
  context.setWebContainer(webContainer);
  context.setDebug(debug);
  context.setPath(ctxPath);
  context.setDocBase(location.getAbsolutePath());
  context.setCrossContext(true);
  context.setUseNaming(isUseNaming());
  context.setHasWebXml(wmInfo.getDescriptor() != null);
  context.setWebBundleDescriptor(wmInfo.getDescriptor());
  context.setManagerChecksFrequency(1);
  context.setServerContext(serverContext);
  context.setWebModuleConfig(wmInfo);
  context.setDefaultWebXml(defaultWebXmlLocation);
  if (embeddedDirectoryListing) {
    context.setDirectoryListing(embeddedDirectoryListing);
  }
  if (configFile.exists()) {
    context.setConfigFile(configFile.getAbsolutePath());
  }
  ContextConfig config;
  if (useDOLforDeployment) {
    config=new WebModuleContextConfig();
    ((WebModuleContextConfig)config).setDescriptor(wmInfo.getDescriptor());
    ((WebModuleContextConfig)config).setServices(services);
  }
 else {
    config=new ContextConfig();
  }
  config.setDefaultContextXml(defaultContextXmlLocation);
  config.setDefaultWebXml(defaultWebXmlLocation);
  context.addLifecycleListener(config);
  context.addLifecycleListener(new WebModuleListener(webContainer,wmInfo.getDescriptor()));
  context.addContainerListener(new WebContainerListener(invocationManager,injectionManager));
  for (  WebModuleDecorator d : services.<WebModuleDecorator>getAllServices(WebModuleDecorator.class)) {
    d.decorate(context);
  }
  return context;
}","/** 
 * Create a web module/application.
 * @param ctxPath  Context path for the web module
 * @param location Absolute pathname to the web module directory
 * @param defaultWebXmlLocation Location of default-web.xml
 */
public Context createContext(String id,String ctxPath,File location,String defaultContextXmlLocation,String defaultWebXmlLocation,boolean useDOLforDeployment,WebModuleConfig wmInfo){
  File configFile=null;
  if (ctxPath.equals(""String_Node_Str"")) {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",""String_Node_Str"");
  }
 else {
    configFile=new File(getCatalinaHome() + ""String_Node_Str"",ctxPath + ""String_Node_Str"");
  }
  if (!configFile.exists()) {
    configFile=new File(location,Constants.WEB_CONTEXT_XML);
  }
  WebModule context=new WebModule(services);
  context.setID(id);
  context.setWebContainer(webContainer);
  context.setDebug(debug);
  context.setPath(ctxPath);
  context.setDocBase(location.getAbsolutePath());
  context.setCrossContext(true);
  context.setUseNaming(isUseNaming());
  context.setHasWebXml(wmInfo.getDescriptor() != null);
  context.setWebBundleDescriptor(wmInfo.getDescriptor());
  context.setManagerChecksFrequency(1);
  context.setServerContext(serverContext);
  context.setWebModuleConfig(wmInfo);
  context.setDefaultWebXml(defaultWebXmlLocation);
  if (embeddedDirectoryListing) {
    context.setDirectoryListing(embeddedDirectoryListing);
  }
  if (configFile.exists()) {
    context.setConfigFile(configFile.getAbsolutePath());
  }
  ContextConfig config;
  if (useDOLforDeployment) {
    config=new WebModuleContextConfig(services);
    ((WebModuleContextConfig)config).setDescriptor(wmInfo.getDescriptor());
  }
 else {
    config=new ContextConfig();
  }
  config.setDefaultContextXml(defaultContextXmlLocation);
  config.setDefaultWebXml(defaultWebXmlLocation);
  context.addLifecycleListener(config);
  context.addLifecycleListener(new WebModuleListener(webContainer,wmInfo.getDescriptor()));
  context.addContainerListener(new WebContainerListener(invocationManager,injectionManager));
  for (  WebModuleDecorator d : services.<WebModuleDecorator>getAllServices(WebModuleDecorator.class)) {
    d.decorate(context);
  }
  return context;
}"
29133,"/** 
 * Customized <code>ContextConfig</code> which use the DOL for deployment.
 */
public WebModuleContextConfig(){
}","/** 
 * Customized <code>ContextConfig</code> which use the DOL for deployment.
 */
public WebModuleContextConfig(Habitat services){
synchronized (this) {
    this.services=services;
  }
}"
29134,"/** 
 * Get a boolean from the caller's package's LocalStrings.properties
 * @param indexString The string index into the localized string file
 * @return the integer value from LocalStrings or the supplied default if it doesn't exist or is bad.
 */
public boolean getBoolean(String indexString,boolean defaultValue){
  try {
    return new Boolean(getBundle().getString(indexString));
  }
 catch (  Exception e) {
    return defaultValue;
  }
}","/** 
 * Get a boolean from the caller's package's LocalStrings.properties
 * @param indexString The string index into the localized string file
 * @return the integer value from LocalStrings or the supplied default if it doesn't exist or is bad.
 */
public boolean getBoolean(String indexString,boolean defaultValue){
  try {
    return Boolean.valueOf(getBundle().getString(indexString));
  }
 catch (  Exception e) {
    return defaultValue;
  }
}"
29135,"final static public Map<Integer,String> getProcessTable(){
  return new Jps().pidMap;
}","static public Map<Integer,String> getProcessTable(){
  return new Jps().pidMap;
}"
29136,"/** 
 * return the platform-specific process-id of a JVM
 * @param mainClassName The main class - this is how we identify the right JVM.  You can pass in a fully-qualified name or just the classname. E.g. com.sun.enterprise.glassfish.bootstrap.ASMain and ASMain work the same.
 * @return the process id if possible otherwise 0
 */
final static public List<Integer> getPid(String mainClassName){
  if (mainClassName == null)   return Collections.emptyList();
  String plainName=plainClassName(mainClassName);
  Jps jps=new Jps();
  List<Integer> ints=new LinkedList<Integer>();
  Set<Map.Entry<Integer,String>> set=jps.pidMap.entrySet();
  Iterator<Map.Entry<Integer,String>> it=set.iterator();
  while (it.hasNext()) {
    Map.Entry<Integer,String> entry=it.next();
    String valueFull=entry.getValue();
    String valuePlain=plainClassName(valueFull);
    if (mainClassName.equals(valueFull) || plainName.equals(valuePlain))     ints.add(entry.getKey());
  }
  return ints;
}","/** 
 * return the platform-specific process-id of a JVM
 * @param mainClassName The main class - this is how we identify the right JVM.  You can pass in a fully-qualified name or just the classname. E.g. com.sun.enterprise.glassfish.bootstrap.ASMain and ASMain work the same.
 * @return the process id if possible otherwise 0
 */
static public List<Integer> getPid(String mainClassName){
  if (mainClassName == null)   return Collections.emptyList();
  String plainName=plainClassName(mainClassName);
  Jps jps=new Jps();
  List<Integer> ints=new LinkedList<Integer>();
  Set<Map.Entry<Integer,String>> set=jps.pidMap.entrySet();
  Iterator<Map.Entry<Integer,String>> it=set.iterator();
  while (it.hasNext()) {
    Map.Entry<Integer,String> entry=it.next();
    String valueFull=entry.getValue();
    String valuePlain=plainClassName(valueFull);
    if (mainClassName.equals(valueFull) || plainName.equals(valuePlain))     ints.add(entry.getKey());
  }
  return ints;
}"
29137,"private void waitForever() throws InterruptedException {
  process.waitFor();
}","private void waitForever() throws InterruptedException, ProcessManagerException {
  if (process == null)   throw new ProcessManagerException(Strings.get(""String_Node_Str""));
  process.waitFor();
}"
29138,"private void writeStdin() throws ProcessManagerException {
  if (stdinLines == null || stdinLines.length <= 0) {
    return;
  }
  PrintWriter pipe=null;
  try {
    pipe=new PrintWriter(new BufferedWriter(new OutputStreamWriter(process.getOutputStream())));
    for (int i=0; i < stdinLines.length; i++) {
      debug(""String_Node_Str"" + stdinLines[i] + ""String_Node_Str"");
      pipe.println(stdinLines[i]);
    }
    pipe.flush();
  }
 catch (  Exception e) {
    throw new ProcessManagerException(e);
  }
 finally {
    try {
      pipe.close();
    }
 catch (    Throwable t) {
    }
  }
}","private void writeStdin() throws ProcessManagerException {
  if (stdinLines == null || stdinLines.length <= 0) {
    return;
  }
  PrintWriter pipe=null;
  if (process == null)   throw new ProcessManagerException(Strings.get(""String_Node_Str""));
  try {
    pipe=new PrintWriter(new BufferedWriter(new OutputStreamWriter(process.getOutputStream())));
    for (int i=0; i < stdinLines.length; i++) {
      debug(""String_Node_Str"" + stdinLines[i] + ""String_Node_Str"");
      pipe.println(stdinLines[i]);
    }
    pipe.flush();
  }
 catch (  Exception e) {
    throw new ProcessManagerException(e);
  }
 finally {
    try {
      pipe.close();
    }
 catch (    Throwable t) {
    }
  }
}"
29139,"public void run(){
  try {
    process.waitFor();
  }
 catch (  Exception e) {
  }
  ProcessManager.debug(""String_Node_Str"");
}","@Override public void run(){
  try {
    process.waitFor();
  }
 catch (  Exception e) {
  }
  ProcessManager.debug(""String_Node_Str"");
}"
29140,"public final int execute() throws ProcessManagerException {
  try {
    sb_out=new StringBuffer();
    sb_err=new StringBuffer();
    Runtime rt=Runtime.getRuntime();
    process=rt.exec(cmdline);
    readStream(""String_Node_Str"",process.getErrorStream(),sb_err);
    readStream(""String_Node_Str"",process.getInputStream(),sb_out);
    writeStdin();
    await();
    try {
      exit=process.exitValue();
    }
 catch (    IllegalThreadStateException tse) {
      process.destroy();
      throw new ProcessManagerTimeoutException(tse);
    }
  }
 catch (  ProcessManagerException pme) {
    throw pme;
  }
catch (  Exception e) {
    if (process != null) {
      process.destroy();
    }
    throw new ProcessManagerException(e);
  }
 finally {
    doWaitForReaderThreads();
  }
  return exit;
}","public final int execute() throws ProcessManagerException {
  try {
    Runtime rt=Runtime.getRuntime();
    process=rt.exec(cmdline);
    readStream(""String_Node_Str"",process.getErrorStream(),sb_err);
    readStream(""String_Node_Str"",process.getInputStream(),sb_out);
    writeStdin();
    await();
    try {
      exit=process.exitValue();
    }
 catch (    IllegalThreadStateException tse) {
      process.destroy();
      throw new ProcessManagerTimeoutException(tse);
    }
  }
 catch (  ProcessManagerException pme) {
    throw pme;
  }
catch (  Exception e) {
    if (process != null) {
      process.destroy();
    }
    throw new ProcessManagerException(e);
  }
 finally {
    doWaitForReaderThreads();
  }
  return exit;
}"
29141,"private void await() throws InterruptedException {
  if (timeout <= 0) {
    waitForever();
  }
 else {
    waitAwhile();
  }
}","private void await() throws InterruptedException, ProcessManagerException {
  if (timeout <= 0) {
    waitForever();
  }
 else {
    waitAwhile();
  }
}"
29142,"public String toString(){
  return Arrays.toString(cmdline);
}","@Override public String toString(){
  return Arrays.toString(cmdline);
}"
29143,"public ProcessManager(List<String> Cmdline){
  cmdline=new String[Cmdline.size()];
  cmdline=(String[])Cmdline.toArray(cmdline);
}","public ProcessManager(List<String> Cmdline){
  cmdline=new String[Cmdline.size()];
  cmdline=(String[])Cmdline.toArray(cmdline);
  sb_out=new StringBuffer();
  sb_err=new StringBuffer();
}"
29144,"private Map<String,Map<String,Object>> gatherReferencedAttributes(AttributeReference ar){
  Map<String,Map<String,Object>> annos=new HashMap<String,Map<String,Object>>();
  try {
    Class<?> configBeanClass=Class.forName(ar.configBean());
    Method m=configBeanClass.getMethod(ar.methodName());
    for (    Annotation a : m.getAnnotations()) {
      Map<String,Object> anno=new HashMap<String,Object>();
      for (      Method am : a.annotationType().getDeclaredMethods()) {
        String methodName=am.getName();
        Object value=am.invoke(a);
        anno.put(methodName,value);
      }
      annos.put(a.annotationType().getName(),anno);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,null,ex.getLocalizedMessage());
  }
  return annos;
}","private Map<String,Map<String,Object>> gatherReferencedAttributes(AttributeReference ar){
  Map<String,Map<String,Object>> annos=new HashMap<String,Map<String,Object>>();
  try {
    Class<?> configBeanClass=Class.forName(ar.configBean());
    Method m=configBeanClass.getMethod(ar.methodName());
    for (    Annotation a : m.getAnnotations()) {
      Map<String,Object> anno=new HashMap<String,Object>();
      for (      Method am : a.annotationType().getDeclaredMethods()) {
        String methodName=am.getName();
        Object value=am.invoke(a);
        anno.put(methodName,value);
      }
      annos.put(a.annotationType().getName(),anno);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,ex.getLocalizedMessage());
  }
  return annos;
}"
29145,"/** 
 * This method will process the annotations for a field to try to determine the default value, if one has been specified.
 * @param annos
 * @return
 */
private Object getDefaultValue(Annotation[] annos){
  Object defval=null;
  if (annos != null) {
    for (    Annotation annotation : annos) {
      if (Default.class.isAssignableFrom(annotation.getClass())) {
        try {
          Default def=(Default)annotation;
          Class clazz=def.generator();
          if (def.useContext()) {
            defval=((DefaultsGenerator)context).getDefaultValue(name);
          }
 else           if (clazz != null) {
            if (DefaultsGenerator.class.isAssignableFrom(clazz)) {
              defval=((DefaultsGenerator)clazz.newInstance()).getDefaultValue(name);
            }
 else {
              Logger.getLogger(ParamMetadata.class.getName()).log(Level.SEVERE,null,""String_Node_Str"");
            }
          }
 else {
            defval=parseValue(def.value());
          }
          break;
        }
 catch (        Exception ex) {
          Logger.getLogger(ParamMetadata.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
 else       if (Attribute.class.isAssignableFrom(annotation.getClass())) {
        Attribute attr=(Attribute)annotation;
        defval=attr.defaultValue();
        break;
      }
    }
  }
  return defval;
}","/** 
 * This method will process the annotations for a field to try to determine the default value, if one has been specified.
 * @param annos
 * @return
 */
private Object getDefaultValue(Annotation[] annos){
  Object defval=null;
  if (annos != null) {
    for (    Annotation annotation : annos) {
      if (Default.class.isAssignableFrom(annotation.getClass())) {
        try {
          Default def=(Default)annotation;
          Class clazz=def.generator();
          if (def.useContext()) {
            defval=((DefaultsGenerator)context).getDefaultValue(name);
          }
 else           if (clazz != null && clazz != Void.class) {
            if (DefaultsGenerator.class.isAssignableFrom(clazz)) {
              defval=((DefaultsGenerator)clazz.newInstance()).getDefaultValue(name);
            }
 else {
              Logger.getLogger(ParamMetadata.class.getName()).log(Level.SEVERE,null,""String_Node_Str"");
            }
          }
 else {
            defval=parseValue(def.value());
          }
          break;
        }
 catch (        Exception ex) {
          Logger.getLogger(ParamMetadata.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
 else       if (Attribute.class.isAssignableFrom(annotation.getClass())) {
        Attribute attr=(Attribute)annotation;
        defval=attr.defaultValue();
        break;
      }
    }
  }
  return defval;
}"
29146,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  ServletResponse wResponse=null;
  if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {
    HttpServletRequest req=(HttpServletRequest)request;
    HttpServletResponse res=(HttpServletResponse)response;
    boolean skipNonceCheck=false;
    if (Constants.METHOD_GET.equals(req.getMethod())) {
      String path=req.getServletPath();
      if (req.getPathInfo() != null) {
        path=path + req.getPathInfo();
      }
      if (entryPoints.contains(path)) {
        skipNonceCheck=true;
      }
    }
    @SuppressWarnings(""String_Node_Str"") LruCache<String> nonceCache=(LruCache<String>)req.getSession(true).getAttribute(Constants.CSRF_NONCE_SESSION_ATTR_NAME);
    if (!skipNonceCheck) {
      String previousNonce=req.getParameter(Constants.CSRF_NONCE_REQUEST_PARAM);
      if (nonceCache != null && !nonceCache.contains(previousNonce)) {
        res.sendError(HttpServletResponse.SC_FORBIDDEN);
        return;
      }
    }
    if (nonceCache == null) {
      nonceCache=new LruCache<String>(nonceCacheSize);
      req.getSession().setAttribute(Constants.CSRF_NONCE_SESSION_ATTR_NAME,nonceCache);
    }
    String newNonce=generateNonce();
    nonceCache.add(newNonce);
    wResponse=new CsrfResponseWrapper(res,newNonce);
  }
 else {
    wResponse=response;
  }
  chain.doFilter(request,wResponse);
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  ServletResponse wResponse=null;
  if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {
    HttpServletRequest req=(HttpServletRequest)request;
    HttpServletResponse res=(HttpServletResponse)response;
    boolean skipNonceCheck=false;
    if (Constants.METHOD_GET.equals(req.getMethod())) {
      String path=req.getServletPath();
      if (req.getPathInfo() != null) {
        path=path + req.getPathInfo();
      }
      if (entryPoints.contains(path)) {
        skipNonceCheck=true;
      }
    }
    HttpSession session=req.getSession(false);
    @SuppressWarnings(""String_Node_Str"") LruCache<String> nonceCache=(session == null) ? null : (LruCache<String>)session.getAttribute(Constants.CSRF_NONCE_SESSION_ATTR_NAME);
    if (!skipNonceCheck) {
      String previousNonce=req.getParameter(Constants.CSRF_NONCE_REQUEST_PARAM);
      if (nonceCache == null || previousNonce == null || !nonceCache.contains(previousNonce)) {
        res.sendError(HttpServletResponse.SC_FORBIDDEN);
        return;
      }
    }
    if (nonceCache == null) {
      nonceCache=new LruCache<String>(nonceCacheSize);
      if (session == null) {
        session=req.getSession(true);
      }
      session.setAttribute(Constants.CSRF_NONCE_SESSION_ATTR_NAME,nonceCache);
    }
    String newNonce=generateNonce();
    nonceCache.add(newNonce);
    wResponse=new CsrfResponseWrapper(res,newNonce);
  }
 else {
    wResponse=response;
  }
  chain.doFilter(request,wResponse);
}"
29147,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  setMethodSpec((String)s.readFields().get(""String_Node_Str"",null));
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  setMethodSpec((String)s.readFields().get(""String_Node_Str"",null));
}"
29148,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
}"
29149,"/** 
 * This static method uses a system property to find and instantiate (via a public constructor) a provider specific factory implementation class. The name of the provider specific factory implementation class is obtained from the value of the system property, <P><code><Pre> javax.security.jacc.PolicyConfigurationFactory.provider. </Pre></code><P>
 * @return the singleton instance of the provider specificPolicyConfigurationFactory implementation class.
 * @throws java.lang.SecurityException when called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws java.lang.ClassNotFoundException when the class named by the system property could not be found including because the value of the system property has not be set.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the getPolicyConfigurationFactory method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException
 */
public static PolicyConfigurationFactory getPolicyConfigurationFactory() throws java.lang.ClassNotFoundException, javax.security.jacc.PolicyContextException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null)   sm.checkPermission(new java.security.SecurityPermission(""String_Node_Str""));
  if (pcFactory != null)   return pcFactory;
  String msg;
  final String classname[]={null};
  try {
    Class clazz=null;
    if (sm != null) {
      try {
        clazz=(Class)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public Object run() throws java.lang.Exception {
            classname[0]=System.getProperty(FACTORY_NAME);
            if (classname[0] == null) {
              String msg=""String_Node_Str"" + FACTORY_NAME;
              throw new ClassNotFoundException(msg);
            }
            return Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
          }
        }
);
      }
 catch (      PrivilegedActionException ex) {
        Exception e=ex.getException();
        if (e instanceof java.lang.ClassNotFoundException) {
          throw (java.lang.ClassNotFoundException)e;
        }
 else         if (e instanceof java.lang.InstantiationException) {
          throw (java.lang.InstantiationException)e;
        }
 else         if (e instanceof java.lang.IllegalAccessException) {
          throw (java.lang.IllegalAccessException)e;
        }
      }
    }
 else {
      classname[0]=System.getProperty(FACTORY_NAME);
      if (classname[0] == null) {
        msg=""String_Node_Str"" + FACTORY_NAME;
        throw new ClassNotFoundException(msg);
      }
      clazz=Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
    }
    Object factory=clazz.newInstance();
    pcFactory=(PolicyConfigurationFactory)factory;
  }
 catch (  java.lang.ClassNotFoundException cnfe) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassNotFoundException(msg,cnfe);
  }
catch (  java.lang.IllegalAccessException iae) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,iae);
  }
catch (  java.lang.InstantiationException ie) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,ie);
  }
catch (  java.lang.ClassCastException cce) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassCastException(msg);
  }
  return pcFactory;
}","/** 
 * This static method uses a system property to find and instantiate (via a public constructor) a provider specific factory implementation class. The name of the provider specific factory implementation class is obtained from the value of the system property, <P><code><Pre> javax.security.jacc.PolicyConfigurationFactory.provider. </Pre></code><P>
 * @return the singleton instance of the provider specificPolicyConfigurationFactory implementation class.
 * @throws java.lang.SecurityException when called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws java.lang.ClassNotFoundException when the class named by the system property could not be found including because the value of the system property has not be set.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the getPolicyConfigurationFactory method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException
 */
public static PolicyConfigurationFactory getPolicyConfigurationFactory() throws java.lang.ClassNotFoundException, javax.security.jacc.PolicyContextException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null)   sm.checkPermission(new java.security.SecurityPermission(""String_Node_Str""));
  if (pcFactory != null)   return pcFactory;
  String msg;
  final String classname[]={null};
  try {
    Class clazz=null;
    if (sm != null) {
      try {
        clazz=(Class)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public Object run() throws java.lang.Exception {
            classname[0]=System.getProperty(FACTORY_NAME);
            if (classname[0] == null) {
              String msg=""String_Node_Str"" + FACTORY_NAME;
              throw new ClassNotFoundException(msg);
            }
            return Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
          }
        }
);
      }
 catch (      PrivilegedActionException ex) {
        Exception e=ex.getException();
        if (e instanceof java.lang.ClassNotFoundException) {
          throw (java.lang.ClassNotFoundException)e;
        }
 else         if (e instanceof java.lang.InstantiationException) {
          throw (java.lang.InstantiationException)e;
        }
 else         if (e instanceof java.lang.IllegalAccessException) {
          throw (java.lang.IllegalAccessException)e;
        }
      }
    }
 else {
      classname[0]=System.getProperty(FACTORY_NAME);
      if (classname[0] == null) {
        msg=""String_Node_Str"" + FACTORY_NAME;
        throw new ClassNotFoundException(msg);
      }
      clazz=Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
    }
    if (clazz != null) {
      Object factory=clazz.newInstance();
      pcFactory=(PolicyConfigurationFactory)factory;
    }
  }
 catch (  java.lang.ClassNotFoundException cnfe) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassNotFoundException(msg,cnfe);
  }
catch (  java.lang.IllegalAccessException iae) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,iae);
  }
catch (  java.lang.InstantiationException ie) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,ie);
  }
catch (  java.lang.ClassCastException cce) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassCastException(msg);
  }
  return pcFactory;
}"
29150,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  this.methodSpec=HttpMethodSpec.getSpec((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  this.methodSpec=HttpMethodSpec.getSpec((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}"
29151,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  parseActions((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  parseActions((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}"
29152,"public TextLoginDialog(Callback[] callbacks){
  try {
    for (int i=0; i < callbacks.length; i++) {
      if (callbacks[i] instanceof NameCallback) {
        NameCallback nc=(NameCallback)callbacks[i];
        System.err.print(nc.getPrompt());
        if (nc.getDefaultName() != null) {
          System.err.print(""String_Node_Str"" + nc.getDefaultName() + ""String_Node_Str"");
        }
 else {
          System.err.print(""String_Node_Str"");
        }
        System.err.flush();
        username=(new BufferedReader(new InputStreamReader(System.in))).readLine();
        if ((nc.getDefaultName() != null) && ((username == null) || (username.trim().length() == 0))) {
          username=nc.getDefaultName();
        }
        nc.setName(username);
      }
 else       if (callbacks[i] instanceof PasswordCallback) {
        PasswordCallback pc=(PasswordCallback)callbacks[i];
        char[] passwd=null;
        Object consoleObj=null;
        Method readPasswordMethod=null;
        try {
          Method consoleMethod=System.class.getMethod(""String_Node_Str"");
          consoleObj=consoleMethod.invoke(null);
          readPasswordMethod=consoleObj.getClass().getMethod(""String_Node_Str"",String.class,Array.newInstance(Object.class,1).getClass());
        }
 catch (        Exception ex) {
        }
        if (consoleObj != null && readPasswordMethod != null) {
          passwd=(char[])readPasswordMethod.invoke(consoleObj,""String_Node_Str"",new Object[]{pc.getPrompt()});
        }
 else {
          System.err.print(pc.getPrompt());
          System.err.flush();
          passwd=readPassword(System.in);
        }
        if (passwd != null) {
          pc.setPassword(passwd);
          Arrays.fill(passwd,' ');
        }
      }
 else       if (callbacks[i] instanceof ChoiceCallback) {
        ChoiceCallback cc=(ChoiceCallback)callbacks[i];
        String lbl=(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        SSLUtils sslUtils=Globals.get(SSLUtils.class);
        System.out.println(lbl + ""String_Node_Str"");
        int cnt=0;
        for (cnt=0; cnt < 3; cnt++) {
          System.out.println(lbl + ""String_Node_Str"");
          char[] kp=(new BufferedReader(new InputStreamReader(System.in))).readLine().toCharArray();
          if (sslUtils.verifyMasterPassword(kp)) {
            break;
          }
 else {
            String errmessage=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
            System.err.println(errmessage);
          }
          Arrays.fill(kp,' ');
        }
        if (cnt >= 3) {
          cc.setSelectedIndex(-1);
        }
 else {
          System.err.println(cc.getPrompt());
          System.err.flush();
          String[] choices=cc.getChoices();
          for (int j=0; j < choices.length; j++) {
            System.err.print(""String_Node_Str"" + j + ""String_Node_Str"");
            System.err.println(choices[j]);
          }
          String line=(new BufferedReader(new InputStreamReader(System.in))).readLine();
          int sel=new Integer(line).intValue();
          cc.setSelectedIndex(sel);
        }
      }
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}","public TextLoginDialog(Callback[] callbacks){
  try {
    for (int i=0; i < callbacks.length; i++) {
      if (callbacks[i] instanceof NameCallback) {
        NameCallback nc=(NameCallback)callbacks[i];
        System.err.print(nc.getPrompt());
        if (nc.getDefaultName() != null) {
          System.err.print(""String_Node_Str"" + nc.getDefaultName() + ""String_Node_Str"");
        }
 else {
          System.err.print(""String_Node_Str"");
        }
        System.err.flush();
        username=(new BufferedReader(new InputStreamReader(System.in))).readLine();
        if ((nc.getDefaultName() != null) && ((username == null) || (username.trim().length() == 0))) {
          username=nc.getDefaultName();
        }
        nc.setName(username);
      }
 else       if (callbacks[i] instanceof PasswordCallback) {
        PasswordCallback pc=(PasswordCallback)callbacks[i];
        char[] passwd=null;
        Object consoleObj=null;
        Method readPasswordMethod=null;
        try {
          Method consoleMethod=System.class.getMethod(""String_Node_Str"");
          consoleObj=consoleMethod.invoke(null);
          readPasswordMethod=consoleObj.getClass().getMethod(""String_Node_Str"",String.class,Array.newInstance(Object.class,1).getClass());
        }
 catch (        Exception ex) {
        }
        if (consoleObj != null && readPasswordMethod != null) {
          passwd=(char[])readPasswordMethod.invoke(consoleObj,""String_Node_Str"",new Object[]{pc.getPrompt()});
        }
 else {
          System.err.print(pc.getPrompt());
          System.err.flush();
          passwd=readPassword(System.in);
        }
        if (passwd != null) {
          pc.setPassword(passwd);
          Arrays.fill(passwd,' ');
        }
      }
 else       if (callbacks[i] instanceof ChoiceCallback) {
        ChoiceCallback cc=(ChoiceCallback)callbacks[i];
        String lbl=(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        SSLUtils sslUtils=Globals.get(SSLUtils.class);
        System.out.println(lbl + ""String_Node_Str"");
        int cnt=0;
        for (cnt=0; cnt < 3; cnt++) {
          System.out.println(lbl + ""String_Node_Str"");
          String s=(new BufferedReader(new InputStreamReader(System.in))).readLine();
          if (s != null) {
            char[] kp=s.toCharArray();
            if (sslUtils.verifyMasterPassword(kp)) {
              break;
            }
 else {
              String errmessage=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
              System.err.println(errmessage);
            }
            Arrays.fill(kp,' ');
          }
        }
        if (cnt >= 3) {
          cc.setSelectedIndex(-1);
        }
 else {
          System.err.println(cc.getPrompt());
          System.err.flush();
          String[] choices=cc.getChoices();
          for (int j=0; j < choices.length; j++) {
            System.err.print(""String_Node_Str"" + j + ""String_Node_Str"");
            System.err.println(choices[j]);
          }
          String line=(new BufferedReader(new InputStreamReader(System.in))).readLine();
          if (line != null) {
            int sel=new Integer(line).intValue();
            cc.setSelectedIndex(sel);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}"
29153,"/** 
 * A special case login for X500Name credentials. This is invoked for certificate login because the containers extract the X.500 name from the X.509 certificate before calling into this class.
 */
public static void doX500Login(Subject s,String appModuleID) throws LoginException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"");
  }
  String user=null;
  String realm_name=null;
  try {
    X500Name x500name=(X500Name)getPublicCredentials(s,X500Name.class);
    user=x500name.getName();
    Realm realm=Realm.getInstance(CertificateRealm.AUTH_TYPE);
    if (realm instanceof CertificateRealm) {
      CertificateRealm certRealm=(CertificateRealm)realm;
      String jaasCtx=certRealm.getJAASContext();
      if (jaasCtx != null) {
        LoginContext lg=new LoginContext(jaasCtx,s,new ServerLoginCallbackHandler(user,null,appModuleID));
        lg.login();
      }
      certRealm.authenticate(s,x500name);
      realm_name=CertificateRealm.AUTH_TYPE;
      if (getAuditManager().isAuditOn()) {
        getAuditManager().authentication(user,realm_name,true);
      }
    }
 else {
      _logger.warning(""String_Node_Str"");
      setSecurityContext(user,s,realm_name);
      realm_name=realm.getName();
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + user);
    }
  }
 catch (  LoginException le) {
    if (getAuditManager().isAuditOn()) {
      getAuditManager().authentication(user,realm_name,false);
    }
    throw le;
  }
catch (  Exception ex) {
    throw (LoginException)new LoginException(ex.toString()).initCause(ex);
  }
}","/** 
 * A special case login for X500Name credentials. This is invoked for certificate login because the containers extract the X.500 name from the X.509 certificate before calling into this class.
 */
public static void doX500Login(Subject s,String appModuleID) throws LoginException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"");
  }
  String user=null;
  String realm_name=null;
  try {
    X500Name x500name=(X500Name)getPublicCredentials(s,X500Name.class);
    user=x500name.getName();
    Realm realm=Realm.getInstance(CertificateRealm.AUTH_TYPE);
    if (realm instanceof CertificateRealm) {
      CertificateRealm certRealm=(CertificateRealm)realm;
      String jaasCtx=certRealm.getJAASContext();
      if (jaasCtx != null) {
        LoginContext lg=new LoginContext(jaasCtx,s,new ServerLoginCallbackHandler(user,null,appModuleID));
        lg.login();
      }
      certRealm.authenticate(s,x500name);
      realm_name=CertificateRealm.AUTH_TYPE;
      if (getAuditManager().isAuditOn()) {
        getAuditManager().authentication(user,realm_name,true);
      }
    }
 else {
      _logger.warning(""String_Node_Str"");
      realm_name=realm.getName();
      setSecurityContext(user,s,realm_name);
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + user);
    }
  }
 catch (  LoginException le) {
    if (getAuditManager().isAuditOn()) {
      getAuditManager().authentication(user,realm_name,false);
    }
    throw le;
  }
catch (  Exception ex) {
    throw (LoginException)new LoginException(ex.toString()).initCause(ex);
  }
}"
29154,"public CustomSocketFactory(){
  SSLUtils sslUtils=Globals.getDefaultHabitat().getService(SSLUtils.class);
  SSLContext sc=null;
  try {
    sc=SSLContext.getInstance(SSL);
    sc.init(sslUtils.getKeyManagers(),sslUtils.getTrustManagers(),SharedSecureRandom.get());
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  socketFactory=sc.getSocketFactory();
}","public CustomSocketFactory(){
  SSLUtils sslUtils=Globals.getDefaultHabitat().getService(SSLUtils.class);
  SSLContext sc=null;
  try {
    sc=SSLContext.getInstance(SSL);
    sc.init(sslUtils.getKeyManagers(),sslUtils.getTrustManagers(),SharedSecureRandom.get());
    socketFactory=sc.getSocketFactory();
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}"
29155,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService securityService=config.getSecurityService();
  AuthRealm fileAuthRealm=null;
  if (authRealmName == null)   authRealmName=securityService.getDefaultRealm();
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(authRealmName)) {
      fileAuthRealm=authRealm;
      break;
    }
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",fileRealmClassName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  final String kf=keyFile;
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  boolean exists=(new File(kf)).exists();
  if (!exists) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{kf,authRealmName}));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  final String password=userpassword;
  if (password == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",userName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  secureAdmin=domain.getSecureAdmin();
  if ((SecureAdmin.Util.isEnabled(secureAdmin)) && (authRealmName.equals(adminService.getAuthRealmName()))) {
    if ((password == null) || (password.isEmpty())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<SecurityService>(){
      public Object run(      SecurityService param) throws PropertyVetoException, TransactionFailure {
        try {
          realmsManager.createRealms(config);
          refreshRealm(config.getName(),authRealmName);
          final FileRealm fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),authRealmName);
          CreateFileUser.handleAdminGroup(authRealmName,groups);
          String[] groups1=groups.toArray(new String[groups.size()]);
          try {
            fr.addUser(userName,password.toCharArray(),groups1);
          }
 catch (          BadRealmException br) {
            if (se != null && se.isDas()) {
              throw new BadRealmException(br);
            }
          }
          fr.persist();
          report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        }
 catch (        Exception e) {
          String localalizedErrorMsg=(e.getLocalizedMessage() == null) ? ""String_Node_Str"" : e.getLocalizedMessage();
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + localalizedErrorMsg);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setFailureCause(e);
        }
        return null;
      }
    }
,securityService);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService securityService=config.getSecurityService();
  AuthRealm fileAuthRealm=null;
  if (authRealmName == null)   authRealmName=securityService.getDefaultRealm();
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(authRealmName)) {
      fileAuthRealm=authRealm;
      break;
    }
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",fileRealmClassName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  final String kf=keyFile;
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  boolean exists=(new File(kf)).exists();
  if (!exists) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{kf,authRealmName}));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  final String password=userpassword;
  if (password == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",userName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  secureAdmin=domain.getSecureAdmin();
  if ((SecureAdmin.Util.isEnabled(secureAdmin)) && (authRealmName.equals(adminService.getAuthRealmName()))) {
    if (password.isEmpty()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<SecurityService>(){
      public Object run(      SecurityService param) throws PropertyVetoException, TransactionFailure {
        try {
          realmsManager.createRealms(config);
          refreshRealm(config.getName(),authRealmName);
          final FileRealm fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),authRealmName);
          CreateFileUser.handleAdminGroup(authRealmName,groups);
          String[] groups1=groups.toArray(new String[groups.size()]);
          try {
            fr.addUser(userName,password.toCharArray(),groups1);
          }
 catch (          BadRealmException br) {
            if (se != null && se.isDas()) {
              throw new BadRealmException(br);
            }
          }
          fr.persist();
          report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        }
 catch (        Exception e) {
          String localalizedErrorMsg=(e.getLocalizedMessage() == null) ? ""String_Node_Str"" : e.getLocalizedMessage();
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + localalizedErrorMsg);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setFailureCause(e);
        }
        return null;
      }
    }
,securityService);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}"
29156,"public static File writeConfigFileToTempDir(String fileName) throws IOException {
  File filePath=new File(fileName);
  if (filePath.exists()) {
    return filePath;
  }
  File localFile=null;
  if (filePath.getParentFile() != null && filePath.getParentFile().exists()) {
    localFile=filePath;
    if (!localFile.createNewFile()) {
      throw new IOException();
    }
  }
 else {
    String userHome=System.getProperty(""String_Node_Str"");
    String embeddedServerName=getCurrentEmbeddedServerName();
    File tempDir=new File(userHome + File.separator + ""String_Node_Str""+ embeddedServerName+ File.separator+ ""String_Node_Str"");
    boolean mkDirSuccess=true;
    if (!tempDir.exists()) {
      mkDirSuccess=tempDir.mkdirs();
    }
    localFile=new File(tempDir.getAbsolutePath() + File.separator + fileName);
    if (mkDirSuccess && !localFile.exists()) {
      localFile.createNewFile();
    }
  }
  FileOutputStream oStream=null;
  InputStream iStream=null;
  try {
    oStream=new FileOutputStream(localFile);
    iStream=Util.class.getResourceAsStream(""String_Node_Str"" + fileName);
    while (iStream != null && iStream.available() > 0) {
      oStream.write(iStream.read());
    }
  }
  finally {
    oStream.close();
    if (iStream != null) {
      iStream.close();
    }
  }
  return localFile;
}","public static File writeConfigFileToTempDir(String fileName) throws IOException {
  File filePath=new File(fileName);
  if (filePath.exists()) {
    return filePath;
  }
  File localFile=null;
  if (filePath.getParentFile() != null && filePath.getParentFile().exists()) {
    localFile=filePath;
    if (!localFile.createNewFile()) {
      throw new IOException();
    }
  }
 else {
    String userHome=System.getProperty(""String_Node_Str"");
    String embeddedServerName=getCurrentEmbeddedServerName();
    File tempDir=new File(userHome + File.separator + ""String_Node_Str""+ embeddedServerName+ File.separator+ ""String_Node_Str"");
    boolean mkDirSuccess=true;
    if (!tempDir.exists()) {
      mkDirSuccess=tempDir.mkdirs();
    }
    localFile=new File(tempDir.getAbsolutePath() + File.separator + fileName);
    if (mkDirSuccess && !localFile.exists()) {
      localFile.createNewFile();
    }
  }
  FileOutputStream oStream=null;
  InputStream iStream=null;
  try {
    oStream=new FileOutputStream(localFile);
    iStream=Util.class.getResourceAsStream(""String_Node_Str"" + fileName);
    while (iStream != null && iStream.available() > 0) {
      oStream.write(iStream.read());
    }
  }
  finally {
    if (oStream != null) {
      oStream.close();
    }
    if (iStream != null) {
      iStream.close();
    }
  }
  return localFile;
}"
29157,"/** 
 * Get (EJB or Web) Policy context identifiers for app.
 * @param app2iDmap maps appName (as key) to list of policy context identifiers (as value). 
 * @param appName the application name, (i.e., the lookup key).
 * @param remove boolean indicating whether the corresponding mappingsare to be removed from the app2iDmap.
 * @return a non-zero length array containing the selectedpolicy context identifiers, or null.
 */
public <T>String[] getContextsForApp(Map<String,ArrayList<String>> app2iDmap,String appName,boolean remove){
  String[] ctxIds=null;
synchronized (app2iDmap) {
    ArrayList<String> ctxList=app2iDmap.get(appName);
    if (ctxList != null && !ctxList.isEmpty()) {
      ctxIds=ctxList.toArray(new String[0]);
    }
    if (remove) {
      app2iDmap.remove(appName);
    }
  }
  return ctxIds;
}","/** 
 * Get (EJB or Web) Policy context identifiers for app.
 * @param app2iDmap maps appName (as key) to list of policy context identifiers (as value). 
 * @param appName the application name, (i.e., the lookup key).
 * @param remove boolean indicating whether the corresponding mappingsare to be removed from the app2iDmap.
 * @return a non-zero length array containing the selectedpolicy context identifiers, or null.
 */
public <T>String[] getContextsForApp(Map<String,ArrayList<String>> app2iDmap,String appName,boolean remove){
  String[] ctxIds=null;
synchronized (app2iDmap) {
    ArrayList<String> ctxList=app2iDmap.get(appName);
    if (ctxList != null && !ctxList.isEmpty()) {
      ctxIds=ctxList.toArray(new String[ctxList.size()]);
    }
    if (remove) {
      app2iDmap.remove(appName);
    }
  }
  return ctxIds;
}"
29158,"/** 
 * Choose the client alias that will be used to select the client certificate for SSL client auth.
 * @param the keytype
 * @param the certificate issuers.
 * @param the socket used for this connection. This parameter can be null,in which case the method will return the most generic alias to use.
 * @return the alias.
 */
public String chooseClientAlias(String[] keyType,Principal[] issuers,Socket socket){
  String clientAlias=null;
  if (this.alias == null) {
    if (Util.getInstance().isNotServerORACC()) {
      clientAlias=mgr.chooseClientAlias(keyType,issuers,socket);
    }
 else {
      if (Util.getInstance().isACC()) {
        ClientSecurityContext ctx=ClientSecurityContext.getCurrent();
        Subject s=ctx.getSubject();
        if (s == null) {
          doClientLogin(SecurityConstants.CERTIFICATE,Util.getInstance().getCallbackHandler());
          s=ctx.getSubject();
        }
        Iterator itr=s.getPrivateCredentials().iterator();
        while (itr.hasNext()) {
          Object o=itr.next();
          if (o instanceof X509CertificateCredential) {
            X509CertificateCredential crt=(X509CertificateCredential)o;
            clientAlias=crt.getAlias();
            break;
          }
        }
      }
    }
  }
 else {
    clientAlias=this.alias;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",clientAlias);
  }
  return clientAlias;
}","/** 
 * Choose the client alias that will be used to select the client certificate for SSL client auth.
 * @param the keytype
 * @param the certificate issuers.
 * @param the socket used for this connection. This parameter can be null,in which case the method will return the most generic alias to use.
 * @return the alias.
 */
public String chooseClientAlias(String[] keyType,Principal[] issuers,Socket socket){
  String clientAlias=null;
  if (this.alias == null) {
    if (Util.getInstance().isNotServerOrACC()) {
      clientAlias=mgr.chooseClientAlias(keyType,issuers,socket);
    }
 else {
      if (Util.getInstance().isACC()) {
        ClientSecurityContext ctx=ClientSecurityContext.getCurrent();
        Subject s=ctx.getSubject();
        if (s == null) {
          doClientLogin(SecurityConstants.CERTIFICATE,Util.getInstance().getCallbackHandler());
          s=ctx.getSubject();
        }
        Iterator itr=s.getPrivateCredentials().iterator();
        while (itr.hasNext()) {
          Object o=itr.next();
          if (o instanceof X509CertificateCredential) {
            X509CertificateCredential crt=(X509CertificateCredential)o;
            clientAlias=crt.getAlias();
            break;
          }
        }
      }
    }
  }
 else {
    clientAlias=this.alias;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",clientAlias);
  }
  return clientAlias;
}"
29159,"/** 
 * Signs a jar.
 * @param input input jar file
 * @param output output jar file
 * @param alias signing alias in the keystore
 */
public void signJar(File input,File output,String alias) throws IOException, KeyStoreException, NoSuchAlgorithmException, InvalidKeyException, UnrecoverableKeyException, SignatureException {
  JarFile jf=new JarFile(input);
  ZipOutputStream zout=null;
  try {
    Enumeration<JarEntry> jes;
    StringBuilder manifestEntries=new StringBuilder();
    byte[] manifestContent=null;
    byte[] sigFileContent=getExistingSignatureFile(jf);
    boolean signed=(sigFileContent != null);
    if (!signed) {
      jes=jf.entries();
      Manifest manifest=retrieveManifest(jf);
      StringBuilder manifestHeader=new StringBuilder();
      appendAttributes(manifestHeader,manifest,null);
      StringBuilder sigFileEntries=new StringBuilder();
      while (jes.hasMoreElements()) {
        JarEntry je=jes.nextElement();
        String name=je.getName();
        if ((je.isDirectory() && manifest.getAttributes(name) == null) || name.equals(JarFile.MANIFEST_NAME)) {
          continue;
        }
        StringBuilder me=new StringBuilder();
        StringBuilder currentLine=new StringBuilder();
        currentLine.append(""String_Node_Str"").append(name);
        appendLine(me,currentLine);
        currentLine.setLength(0);
        me.append(digestAlgorithm).append(""String_Node_Str"").append(hash(jf,je)).append(""String_Node_Str"");
        appendAttributes(me,manifest,name);
        currentLine.append(""String_Node_Str"").append(name);
        appendLine(sigFileEntries,currentLine);
        currentLine.setLength(0);
        sigFileEntries.append(digestAlgorithm).append(""String_Node_Str"").append(hash(me.toString())).append(""String_Node_Str"");
        manifestEntries.append(me);
      }
      StringBuilder sigFile=new StringBuilder(""String_Node_Str"").append(digestAlgorithm).append(""String_Node_Str"").append(hash(manifestHeader.toString())).append(""String_Node_Str"").append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
      manifestHeader.append(manifestEntries);
      sigFile.append(digestAlgorithm).append(""String_Node_Str"").append(hash(manifestHeader.toString())).append(""String_Node_Str"");
      sigFile.append(sigFileEntries);
      manifestContent=manifestHeader.toString().getBytes();
      sigFileContent=sigFile.toString().getBytes();
    }
 else {
      manifestContent=readJarEntry(jf,jf.getJarEntry(JarFile.MANIFEST_NAME));
    }
    X509Certificate[] certChain=null;
    PrivateKey privKey=null;
    KeyStore[] ks=secSupp.getKeyStores();
    for (int i=0; i < ks.length; i++) {
      privKey=secSupp.getPrivateKeyForAlias(alias,i);
      if (privKey != null) {
        Certificate[] cs=ks[i].getCertificateChain(alias);
        certChain=new X509Certificate[cs.length];
        for (int j=0; j < cs.length; j++) {
          certChain[j]=(X509Certificate)cs[j];
        }
      }
    }
    Signature sig=Signature.getInstance(digestAlgorithm + ""String_Node_Str"" + keyAlgorithm);
    sig.initSign(privKey);
    sig.update(sigFileContent);
    PKCS7 pkcs7=new PKCS7(new AlgorithmId[]{AlgorithmId.get(digestAlgorithm)},new ContentInfo(sigFileContent),certChain,new SignerInfo[]{new SignerInfo((X500Name)certChain[0].getIssuerDN(),certChain[0].getSerialNumber(),AlgorithmId.get(digestAlgorithm),AlgorithmId.get(keyAlgorithm),sig.sign())});
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    pkcs7.encodeSignedData(bout);
    zout=new ZipOutputStream(new FileOutputStream(output));
    zout.putNextEntry((signed) ? getZipEntry(jf.getJarEntry(JarFile.MANIFEST_NAME)) : new ZipEntry(JarFile.MANIFEST_NAME));
    zout.write(manifestContent);
    zout.putNextEntry(new ZipEntry(""String_Node_Str"" + alias.toUpperCase(Locale.US) + ""String_Node_Str""));
    zout.write(sigFileContent);
    zout.putNextEntry(new ZipEntry(""String_Node_Str"" + alias.toUpperCase(Locale.US) + ""String_Node_Str""+ keyAlgorithm));
    zout.write(bout.toByteArray());
    jes=jf.entries();
    while (jes.hasMoreElements()) {
      JarEntry je=jes.nextElement();
      String name=je.getName();
      if (!name.equals(JarFile.MANIFEST_NAME)) {
        zout.putNextEntry(getZipEntry(je));
        byte[] data=readJarEntry(jf,je);
        zout.write(data);
      }
    }
  }
  finally {
    jf.close();
    zout.close();
  }
}","/** 
 * Signs a jar.
 * @param input input jar file
 * @param output output jar file
 * @param alias signing alias in the keystore
 */
public void signJar(File input,File output,String alias) throws IOException, KeyStoreException, NoSuchAlgorithmException, InvalidKeyException, UnrecoverableKeyException, SignatureException {
  JarFile jf=new JarFile(input);
  ZipOutputStream zout=null;
  try {
    Enumeration<JarEntry> jes;
    StringBuilder manifestEntries=new StringBuilder();
    byte[] manifestContent=null;
    byte[] sigFileContent=getExistingSignatureFile(jf);
    boolean signed=(sigFileContent != null);
    if (!signed) {
      jes=jf.entries();
      Manifest manifest=retrieveManifest(jf);
      StringBuilder manifestHeader=new StringBuilder();
      appendAttributes(manifestHeader,manifest,null);
      StringBuilder sigFileEntries=new StringBuilder();
      while (jes.hasMoreElements()) {
        JarEntry je=jes.nextElement();
        String name=je.getName();
        if ((je.isDirectory() && manifest.getAttributes(name) == null) || name.equals(JarFile.MANIFEST_NAME)) {
          continue;
        }
        StringBuilder me=new StringBuilder();
        StringBuilder currentLine=new StringBuilder();
        currentLine.append(""String_Node_Str"").append(name);
        appendLine(me,currentLine);
        currentLine.setLength(0);
        me.append(digestAlgorithm).append(""String_Node_Str"").append(hash(jf,je)).append(""String_Node_Str"");
        appendAttributes(me,manifest,name);
        currentLine.append(""String_Node_Str"").append(name);
        appendLine(sigFileEntries,currentLine);
        currentLine.setLength(0);
        sigFileEntries.append(digestAlgorithm).append(""String_Node_Str"").append(hash(me.toString())).append(""String_Node_Str"");
        manifestEntries.append(me);
      }
      StringBuilder sigFile=new StringBuilder(""String_Node_Str"").append(digestAlgorithm).append(""String_Node_Str"").append(hash(manifestHeader.toString())).append(""String_Node_Str"").append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
      manifestHeader.append(manifestEntries);
      sigFile.append(digestAlgorithm).append(""String_Node_Str"").append(hash(manifestHeader.toString())).append(""String_Node_Str"");
      sigFile.append(sigFileEntries);
      manifestContent=manifestHeader.toString().getBytes();
      sigFileContent=sigFile.toString().getBytes();
    }
 else {
      manifestContent=readJarEntry(jf,jf.getJarEntry(JarFile.MANIFEST_NAME));
    }
    X509Certificate[] certChain=null;
    PrivateKey privKey=null;
    KeyStore[] ks=secSupp.getKeyStores();
    for (int i=0; i < ks.length; i++) {
      privKey=secSupp.getPrivateKeyForAlias(alias,i);
      if (privKey != null) {
        Certificate[] cs=ks[i].getCertificateChain(alias);
        certChain=new X509Certificate[cs.length];
        for (int j=0; j < cs.length; j++) {
          certChain[j]=(X509Certificate)cs[j];
        }
      }
    }
    Signature sig=Signature.getInstance(digestAlgorithm + ""String_Node_Str"" + keyAlgorithm);
    sig.initSign(privKey);
    sig.update(sigFileContent);
    PKCS7 pkcs7=new PKCS7(new AlgorithmId[]{AlgorithmId.get(digestAlgorithm)},new ContentInfo(sigFileContent),certChain,new SignerInfo[]{new SignerInfo((X500Name)certChain[0].getIssuerDN(),certChain[0].getSerialNumber(),AlgorithmId.get(digestAlgorithm),AlgorithmId.get(keyAlgorithm),sig.sign())});
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    pkcs7.encodeSignedData(bout);
    zout=new ZipOutputStream(new FileOutputStream(output));
    zout.putNextEntry((signed) ? getZipEntry(jf.getJarEntry(JarFile.MANIFEST_NAME)) : new ZipEntry(JarFile.MANIFEST_NAME));
    zout.write(manifestContent);
    zout.putNextEntry(new ZipEntry(""String_Node_Str"" + alias.toUpperCase(Locale.US) + ""String_Node_Str""));
    zout.write(sigFileContent);
    zout.putNextEntry(new ZipEntry(""String_Node_Str"" + alias.toUpperCase(Locale.US) + ""String_Node_Str""+ keyAlgorithm));
    zout.write(bout.toByteArray());
    jes=jf.entries();
    while (jes.hasMoreElements()) {
      JarEntry je=jes.nextElement();
      String name=je.getName();
      if (!name.equals(JarFile.MANIFEST_NAME)) {
        zout.putNextEntry(getZipEntry(je));
        byte[] data=readJarEntry(jf,je);
        zout.write(data);
      }
    }
  }
  finally {
    jf.close();
    if (zout != null) {
      zout.close();
    }
  }
}"
29160,"public static void checkPermission(String key){
  try {
    if (Util.isEmbeddedServer() || Util.getDefaultHabitat() == null || Util.getInstance().isACC() || Util.getInstance().isNotServerORACC()) {
      return;
    }
    Permission perm=new RuntimePermission(""String_Node_Str"");
    AccessController.checkPermission(perm);
  }
 catch (  AccessControlException e) {
    String message=e.getMessage();
    Permission perm=new PropertyPermission(key,""String_Node_Str"");
    if (message != null) {
      message=message.replace(e.getPermission().toString(),perm.toString());
    }
    throw new AccessControlException(message,perm);
  }
}","public static void checkPermission(String key){
  try {
    if (Util.isEmbeddedServer() || Util.getDefaultHabitat() == null || Util.getInstance().isACC() || Util.getInstance().isNotServerOrACC()) {
      return;
    }
    Permission perm=new RuntimePermission(""String_Node_Str"");
    AccessController.checkPermission(perm);
  }
 catch (  AccessControlException e) {
    String message=e.getMessage();
    Permission perm=new PropertyPermission(key,""String_Node_Str"");
    if (message != null) {
      message=message.replace(e.getPermission().toString(),perm.toString());
    }
    throw new AccessControlException(message,perm);
  }
}"
29161,"/** 
 * Notification that a new config beans has entered the configuration tree.
 * @param bean the new config bean
 */
public void onEntered(Provider<ConfigBean> bean);","/** 
 * Notification that a new config beans has entered the configuration tree.
 * @param bean the new config bean
 */
public void onEntered(ActiveDescriptor<ConfigBean> bean);"
29162,"public void setParentAndTagName(Dom parent,String tagName){
  this.parent=parent;
  this.tagName=tagName;
  if (parent != null) {
    entity=parent.leafElements(tagName);
    if (parent.type().equals(JavaConfig.class)) {
      target=parent.parent().attribute(""String_Node_Str"");
    }
 else {
      target=parent.parent().parent().attribute(""String_Node_Str"");
      profiler=""String_Node_Str"";
    }
  }
}","public void setParentAndTagName(Dom parent,String tagName){
  this.parent=parent;
  this.tagName=tagName;
  if (parent != null) {
    entity=parent.leafElements(tagName);
    if (parent.getImplementationClass().equals(JavaConfig.class)) {
      target=parent.parent().attribute(""String_Node_Str"");
    }
 else {
      target=parent.parent().parent().attribute(""String_Node_Str"");
      profiler=""String_Node_Str"";
    }
  }
}"
29163,"@Override public void onEntered(final Provider<ConfigBean> provider){
  final ConfigBean cb=asConfigBean(provider);
  if (cb != null) {
    add(cb);
  }
}","@Override public void onEntered(final ActiveDescriptor<ConfigBean> provider){
  final ConfigBean cb=asConfigBean(provider);
  if (cb != null) {
    add(cb);
  }
}"
29164,"public TaggedComponent createSSLTaggedComponent(IORInfo iorInfo,Object sInfos){
  List<com.sun.corba.ee.spi.folb.SocketInfo> socketInfos=(List<com.sun.corba.ee.spi.folb.SocketInfo>)sInfos;
  orbHelper=Lookups.getGlassFishORBHelper();
  TaggedComponent result=null;
  org.omg.CORBA.ORB orb=orbHelper.getORB();
  int sslMutualAuthPort=-1;
  try {
    sslMutualAuthPort=((com.sun.corba.ee.spi.legacy.interceptor.IORInfoExt)iorInfo).getServerPort(""String_Node_Str"");
  }
 catch (  com.sun.corba.ee.spi.legacy.interceptor.UnknownType ute) {
    _logger.log(Level.FINE,""String_Node_Str"",ute);
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + sslMutualAuthPort);
  }
  CSIV2TaggedComponentInfo ctc=new CSIV2TaggedComponentInfo(orb,sslMutualAuthPort);
  EjbDescriptor desc=ctc.getEjbDescriptor(iorInfo);
  if (desc != null) {
    result=ctc.createSecurityTaggedComponent(socketInfos,desc);
  }
  return result;
}","public TaggedComponent createSSLTaggedComponent(IORInfo iorInfo,Object sInfos){
  List<com.sun.corba.ee.spi.folb.SocketInfo> socketInfos=(List<com.sun.corba.ee.spi.folb.SocketInfo>)sInfos;
  orbHelper=Lookups.getGlassFishORBHelper();
  TaggedComponent result=null;
  org.omg.CORBA.ORB orb=orbHelper.getORB();
  int sslMutualAuthPort=-1;
  try {
    if (iorInfo instanceof com.sun.corba.ee.spi.legacy.interceptor.IORInfoExt) {
      sslMutualAuthPort=((com.sun.corba.ee.spi.legacy.interceptor.IORInfoExt)iorInfo).getServerPort(""String_Node_Str"");
    }
  }
 catch (  com.sun.corba.ee.spi.legacy.interceptor.UnknownType ute) {
    _logger.log(Level.FINE,""String_Node_Str"",ute);
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + sslMutualAuthPort);
  }
  CSIV2TaggedComponentInfo ctc=new CSIV2TaggedComponentInfo(orb,sslMutualAuthPort);
  EjbDescriptor desc=ctc.getEjbDescriptor(iorInfo);
  if (desc != null) {
    result=ctc.createSecurityTaggedComponent(socketInfos,desc);
  }
  return result;
}"
29165,"public void receive_reply(ClientRequestInfo ri){
  ServiceContext sc=null;
  int status=-1;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_reply_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri);
    return;
  }
catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return;
  }
  Any a=orb.create_any();
  try {
    a=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(a);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  if ((sasdiscr != MTCompleteEstablishContext.value) && (sasdiscr != MTContextError.value)) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int st=mapreplyStatus(ri.reply_status());
  setreplyStatus(st,ri.effective_target());
}","public void receive_reply(ClientRequestInfo ri){
  ServiceContext sc=null;
  int status=-1;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_reply_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri);
    return;
  }
catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return;
  }
  Any a;
  try {
    a=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(a);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  if ((sasdiscr != MTCompleteEstablishContext.value) && (sasdiscr != MTContextError.value)) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int st=mapreplyStatus(ri.reply_status());
  setreplyStatus(st,ri.effective_target());
}"
29166,"public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {
  Counter cntr=(Counter)counterForCalls.get();
  if (cntr == null) {
    cntr=new Counter();
    counterForCalls.set(cntr);
  }
  if (cntr.count == 0) {
    SecurityContextUtil.unsetSecurityContext(isLocal());
  }
  cntr.increment();
  Socket s=null;
  Connection c=((RequestInfoExt)ri).connection();
  ServerConnectionContext scc=null;
  if (c != null) {
    s=c.getSocket();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + c);
      _logger.log(Level.FINE,""String_Node_Str"" + s);
    }
    scc=new ServerConnectionContext(s);
  }
 else {
    scc=new ServerConnectionContext();
  }
  setServerConnectionContext(scc);
}","public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {
  Counter cntr=(Counter)counterForCalls.get();
  if (cntr == null) {
    cntr=new Counter();
    counterForCalls.set(cntr);
  }
  if (cntr.count == 0) {
    SecurityContextUtil.unsetSecurityContext(isLocal());
  }
  cntr.increment();
  Socket s=null;
  Connection c=null;
  if (ri instanceof RequestInfoExt) {
    c=((RequestInfoExt)ri).connection();
  }
  ServerConnectionContext scc=null;
  if (c != null) {
    s=c.getSocket();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + c);
      _logger.log(Level.FINE,""String_Node_Str"" + s);
    }
    scc=new ServerConnectionContext(s);
  }
 else {
    scc=new ServerConnectionContext();
  }
  setServerConnectionContext(scc);
}"
29167,"public void receive_request(ServerRequestInfo ri) throws ForwardRequest {
  SecurityContext seccontext=null;
  ServiceContext sc=null;
  int status=0;
  boolean raise_no_perm=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_request_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri,sc,orb);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri,sc,orb);
    return;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  Any SasAny=orb.create_any();
  try {
    SasAny=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(SasAny);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (sasdiscr == MTMessageInContext.value) {
    sasctxbody=createContextError(SvcContextUtils.MessageInContextMinor);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (sasdiscr != MTEstablishContext.value) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  EstablishContext ec=sasctxbody.establish_msg();
  seccontext=new SecurityContext();
  seccontext.subject=new Subject();
  try {
    if (ec.client_authentication_token.length != 0) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createAuthCred(seccontext,ec.client_authentication_token,orb);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    if (ec.identity_token != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createIdCred(seccontext,ec.identity_token);
    }
  }
 catch (  SecurityException secex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",secex);
    sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  status=secContextUtil.setSecurityContext(seccontext,ri.object_id(),ri.operation(),getServerSocket());
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + status);
  }
  if (status == SecurityContextUtil.STATUS_FAILED) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    sasctxbody=createContextError(status);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  sasctxbody=createCompleteEstablishContext(status);
  sc=createSvcContext(sasctxbody,orb);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  ri.add_reply_service_context(sc,NO_REPLACE);
}","public void receive_request(ServerRequestInfo ri) throws ForwardRequest {
  SecurityContext seccontext=null;
  ServiceContext sc=null;
  int status=0;
  boolean raise_no_perm=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_request_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri,sc,orb);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri,sc,orb);
    return;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  Any SasAny;
  try {
    SasAny=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(SasAny);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (sasdiscr == MTMessageInContext.value) {
    sasctxbody=createContextError(SvcContextUtils.MessageInContextMinor);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (sasdiscr != MTEstablishContext.value) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  EstablishContext ec=sasctxbody.establish_msg();
  seccontext=new SecurityContext();
  seccontext.subject=new Subject();
  try {
    if (ec.client_authentication_token.length != 0) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createAuthCred(seccontext,ec.client_authentication_token,orb);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    if (ec.identity_token != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createIdCred(seccontext,ec.identity_token);
    }
  }
 catch (  SecurityException secex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",secex);
    sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  status=secContextUtil.setSecurityContext(seccontext,ri.object_id(),ri.operation(),getServerSocket());
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + status);
  }
  if (status == SecurityContextUtil.STATUS_FAILED) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    sasctxbody=createContextError(status);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  sasctxbody=createCompleteEstablishContext(status);
  sc=createSvcContext(sasctxbody,orb);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  ri.add_reply_service_context(sc,NO_REPLACE);
}"
29168,"public Object resolveInjectionPoint(java.lang.reflect.Member member,Application app) throws javax.naming.NamingException {
  Object result=null;
  Field field=null;
  Method method=null;
  Annotation[] annotations;
  if (member instanceof Field) {
    field=(Field)member;
    annotations=field.getDeclaredAnnotations();
  }
 else   if (member instanceof Method) {
    method=(Method)member;
    annotations=method.getDeclaredAnnotations();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Annotation envAnnotation=getEnvAnnotation(annotations);
  if (envAnnotation == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + member);
  }
  String envAnnotationName=null;
  try {
    Method m=envAnnotation.annotationType().getDeclaredMethod(""String_Node_Str"");
    envAnnotationName=(String)m.invoke(envAnnotation);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + envAnnotation.toString(),e);
  }
  String envDependencyName=envAnnotationName;
  Class declaringClass=member.getDeclaringClass();
  if ((envAnnotationName == null) || envAnnotationName.equals(""String_Node_Str"")) {
    if (field != null) {
      envDependencyName=declaringClass.getName() + ""String_Node_Str"" + field.getName();
    }
 else {
      envDependencyName=declaringClass.getName() + ""String_Node_Str"" + getInjectionMethodPropertyName(method);
    }
  }
  if (envAnnotationName.startsWith(""String_Node_Str"")) {
    javax.naming.Context ic=namingManager.getInitialContext();
    result=ic.lookup(envAnnotationName);
  }
 else {
    BundleDescriptor matchingBundle=null;
    for (    BundleDescriptor bundle : app.getBundleDescriptors()) {
      if ((bundle instanceof EjbBundleDescriptor) || (bundle instanceof WebBundleDescriptor)) {
        JndiNameEnvironment jndiEnv=(JndiNameEnvironment)bundle;
        for (        InjectionCapable next : jndiEnv.getInjectableResourcesByClass(declaringClass.getName())) {
          if (next.getComponentEnvName().equals(envDependencyName)) {
            matchingBundle=bundle;
            break;
          }
        }
      }
      if (matchingBundle != null) {
        break;
      }
    }
    if (matchingBundle == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + member + ""String_Node_Str""+ app.getAppName());
    }
    String componentId=compEnvManager.getComponentEnvId((JndiNameEnvironment)matchingBundle);
    String lookupName=envDependencyName.startsWith(""String_Node_Str"") ? envDependencyName : ""String_Node_Str"" + envDependencyName;
    result=namingManager.lookup(componentId,lookupName);
  }
  return result;
}","public Object resolveInjectionPoint(java.lang.reflect.Member member,Application app) throws javax.naming.NamingException {
  if (member == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (app == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Object result=null;
  Field field=null;
  Method method=null;
  Annotation[] annotations;
  if (member instanceof Field) {
    field=(Field)member;
    annotations=field.getDeclaredAnnotations();
  }
 else   if (member instanceof Method) {
    method=(Method)member;
    annotations=method.getDeclaredAnnotations();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Annotation envAnnotation=getEnvAnnotation(annotations);
  if (envAnnotation == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + member);
  }
  String envAnnotationName=null;
  try {
    Method m=envAnnotation.annotationType().getDeclaredMethod(""String_Node_Str"");
    envAnnotationName=(String)m.invoke(envAnnotation);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + envAnnotation.toString(),e);
  }
  String envDependencyName=envAnnotationName;
  Class declaringClass=member.getDeclaringClass();
  if ((envAnnotationName == null) || envAnnotationName.equals(""String_Node_Str"")) {
    if (field != null) {
      envDependencyName=declaringClass.getName() + ""String_Node_Str"" + field.getName();
    }
 else {
      envDependencyName=declaringClass.getName() + ""String_Node_Str"" + getInjectionMethodPropertyName(method);
    }
  }
  if (envAnnotationName != null && envAnnotationName.startsWith(""String_Node_Str"")) {
    javax.naming.Context ic=namingManager.getInitialContext();
    result=ic.lookup(envAnnotationName);
  }
 else {
    BundleDescriptor matchingBundle=null;
    for (    BundleDescriptor bundle : app.getBundleDescriptors()) {
      if ((bundle instanceof EjbBundleDescriptor) || (bundle instanceof WebBundleDescriptor)) {
        JndiNameEnvironment jndiEnv=(JndiNameEnvironment)bundle;
        for (        InjectionCapable next : jndiEnv.getInjectableResourcesByClass(declaringClass.getName())) {
          if (next.getComponentEnvName().equals(envDependencyName)) {
            matchingBundle=bundle;
            break;
          }
        }
      }
      if (matchingBundle != null) {
        break;
      }
    }
    if (matchingBundle == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + member + ""String_Node_Str""+ app.getAppName());
    }
    String componentId=compEnvManager.getComponentEnvId((JndiNameEnvironment)matchingBundle);
    String lookupName=envDependencyName.startsWith(""String_Node_Str"") ? envDependencyName : ""String_Node_Str"" + envDependencyName;
    result=namingManager.lookup(componentId,lookupName);
  }
  return result;
}"
29169,"private String getInjectionMethodPropertyName(Method method){
  String methodName=method.getName();
  String propertyName=methodName;
  if ((methodName.length() > 3) && methodName.startsWith(""String_Node_Str"")) {
    propertyName=methodName.substring(3,4).toLowerCase() + methodName.substring(4);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + method.getName());
  }
  return propertyName;
}","private String getInjectionMethodPropertyName(Method method){
  String methodName=method.getName();
  String propertyName;
  if ((methodName.length() > 3) && methodName.startsWith(""String_Node_Str"")) {
    propertyName=methodName.substring(3,4).toLowerCase(Locale.ENGLISH) + methodName.substring(4);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + method.getName());
  }
  return propertyName;
}"
29170,"@Override public URL getResource(String name){
  ClassLoader cl=getClassLoader();
  if (cl != null) {
    return cl.getResource(name);
  }
 else {
    return getClass().getResource(name);
  }
}","@Override public URL getResource(String name){
  ClassLoader cl=getClassLoader();
  if (cl != null) {
    return cl.getResource(name);
  }
 else {
    return this.getClass().getResource(name);
  }
}"
29171,"/** 
 * Specific stages of the Weld bootstrapping process will execute across different stages of the deployment process.  Weld deployment will happen when the load phase of the  deployment process is complete.  When all modules have been loaded, a deployment  graph is produced defining the accessiblity relationships between  <code>BeanDeploymentArchive</code>s.
 */
public void event(Event event){
  if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_LOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      DeploymentImpl deploymentImpl=appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
      List<BeanDeploymentArchive> archives=deploymentImpl.getBeanDeploymentArchives();
      for (      BeanDeploymentArchive archive : archives) {
        ResourceLoaderImpl loader=new ResourceLoaderImpl(((BeanDeploymentArchiveImpl)archive).getModuleClassLoaderForBDA());
        archive.getServices().add(ResourceLoader.class,loader);
      }
      deploymentImpl.buildDeploymentGraph();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine(deploymentImpl.toString());
      }
      ClassLoader oldTCL=Thread.currentThread().getContextClassLoader();
      try {
        bootstrap.startContainer(Environments.SERVLET,deploymentImpl);
        bootstrap.startInitialization();
        fireProcessInjectionTargetEvents(bootstrap,deploymentImpl);
        bootstrap.deployBeans();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
 finally {
        Thread.currentThread().setContextClassLoader(oldTCL);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STARTED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.validateBeans();
        bootstrap.endInitialization();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STOPPED) || event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_UNLOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    Application app=appInfo.getMetaData(Application.class);
    if (app != null) {
      for (      BundleDescriptor next : app.getBundleDescriptors()) {
        if (next instanceof EjbBundleDescriptor || next instanceof WebBundleDescriptor) {
          bundleToBeanDeploymentArchive.remove(next);
        }
      }
      appToBootstrap.remove(app);
    }
    String shutdown=appInfo.getTransientAppMetaData(WELD_SHUTDOWN,String.class);
    if (Boolean.valueOf(shutdown) == Boolean.TRUE) {
      return;
    }
    WeldBootstrap bootstrap=appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.shutdown();
      }
 catch (      Exception e) {
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
      appInfo.addTransientAppMetaData(WELD_SHUTDOWN,""String_Node_Str"");
    }
    DeploymentImpl deploymentImpl=appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
    if (deploymentImpl != null) {
      deploymentImpl.cleanup();
    }
  }
}","/** 
 * Specific stages of the Weld bootstrapping process will execute across different stages of the deployment process.  Weld deployment will happen when the load phase of the  deployment process is complete.  When all modules have been loaded, a deployment  graph is produced defining the accessiblity relationships between  <code>BeanDeploymentArchive</code>s.
 */
public void event(Event event){
  if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_LOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      DeploymentImpl deploymentImpl=appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
      List<BeanDeploymentArchive> archives=deploymentImpl.getBeanDeploymentArchives();
      for (      BeanDeploymentArchive archive : archives) {
        ResourceLoaderImpl loader=new ResourceLoaderImpl(((BeanDeploymentArchiveImpl)archive).getModuleClassLoaderForBDA());
        archive.getServices().add(ResourceLoader.class,loader);
      }
      deploymentImpl.buildDeploymentGraph();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine(deploymentImpl.toString());
      }
      ClassLoader oldTCL=Thread.currentThread().getContextClassLoader();
      try {
        bootstrap.startContainer(Environments.SERVLET,deploymentImpl);
        bootstrap.startInitialization();
        fireProcessInjectionTargetEvents(bootstrap,deploymentImpl);
        bootstrap.deployBeans();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
 finally {
        Thread.currentThread().setContextClassLoader(oldTCL);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STARTED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.validateBeans();
        bootstrap.endInitialization();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STOPPED) || event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_UNLOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    Application app=appInfo.getMetaData(Application.class);
    if (app != null) {
      for (      BundleDescriptor next : app.getBundleDescriptors()) {
        if (next instanceof EjbBundleDescriptor || next instanceof WebBundleDescriptor) {
          bundleToBeanDeploymentArchive.remove(next);
        }
      }
      appToBootstrap.remove(app);
    }
    String shutdown=appInfo.getTransientAppMetaData(WELD_SHUTDOWN,String.class);
    if (Boolean.valueOf(shutdown).equals(Boolean.TRUE)) {
      return;
    }
    WeldBootstrap bootstrap=appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.shutdown();
      }
 catch (      Exception e) {
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
      appInfo.addTransientAppMetaData(WELD_SHUTDOWN,""String_Node_Str"");
    }
    DeploymentImpl deploymentImpl=appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
    if (deploymentImpl != null) {
      deploymentImpl.cleanup();
    }
  }
}"
29172,"protected GFAuthConfig(AuthConfigProvider provider,String layer,String appContext,CallbackHandler handler,String type){
  this.provider=provider;
  this.layer=layer;
  this.appContext=appContext;
  this.type=type;
  if (handler == null) {
    handler=AuthMessagePolicy.getDefaultCallbackHandler();
    this.newHandler=true;
  }
  this.handler=handler;
}","protected GFAuthConfig(AuthConfigProvider provider,String layer,String appContext,CallbackHandler handler,String type){
  this.provider=provider;
  this.layer=layer;
  this.appContext=appContext;
  this.type=type;
  if (handler == null) {
    handler=AuthMessagePolicy.getDefaultCallbackHandler();
  }
  this.handler=handler;
}"
29173,"@Test public void testRegistrationWithNonStringPropertyAndPreviousRegistration(){
  logger.info(""String_Node_Str"");
  Security.setProperty(DEFAULT_FACTORY_SECURITY_PROPERTY,testFactoryClassName);
  String className=_AuthConfigProvider.class.getName();
  HashMap properties=null;
  String layer=""String_Node_Str"";
  String appContext=""String_Node_Str"";
  String description=null;
  String regId=null;
  regId=AuthConfigFactory.getFactory().registerConfigProvider(className,properties,layer,appContext,description);
  assertNotNull(""String_Node_Str"",regId);
  AuthConfigProvider previousAcp=null;
  previousAcp=AuthConfigFactory.getFactory().getConfigProvider(layer,appContext,null);
  assertNotNull(""String_Node_Str"",previousAcp);
  properties=new HashMap();
  ArrayList list=new ArrayList();
  list.add(""String_Node_Str"");
  properties.put(""String_Node_Str"",list);
  layer=""String_Node_Str"";
  appContext=""String_Node_Str"";
  description=null;
  regId=null;
  try {
    regId=AuthConfigFactory.getFactory().registerConfigProvider(className,properties,layer,appContext,description);
  }
 catch (  IllegalArgumentException iae) {
    assertNull(""String_Node_Str"",regId);
  }
  AuthConfigProvider acp=null;
  acp=AuthConfigFactory.getFactory().getConfigProvider(layer,appContext,null);
  assertTrue(""String_Node_Str"",previousAcp == acp);
}","@Test public void testRegistrationWithNonStringPropertyAndPreviousRegistration(){
  logger.info(""String_Node_Str"");
  Security.setProperty(DEFAULT_FACTORY_SECURITY_PROPERTY,testFactoryClassName);
  String className=_AuthConfigProvider.class.getName();
  HashMap properties=null;
  String layer=""String_Node_Str"";
  String appContext=""String_Node_Str"";
  String description=null;
  String regId=null;
  regId=AuthConfigFactory.getFactory().registerConfigProvider(className,properties,layer,appContext,description);
  assertNotNull(""String_Node_Str"",regId);
  AuthConfigProvider previousAcp=null;
  previousAcp=AuthConfigFactory.getFactory().getConfigProvider(layer,appContext,null);
  assertNotNull(""String_Node_Str"",previousAcp);
  String previousRegId=regId;
  properties=new HashMap();
  ArrayList list=new ArrayList();
  list.add(""String_Node_Str"");
  properties.put(""String_Node_Str"",list);
  layer=""String_Node_Str"";
  appContext=""String_Node_Str"";
  description=null;
  regId=null;
  try {
    regId=AuthConfigFactory.getFactory().registerConfigProvider(className,properties,layer,appContext,description);
  }
 catch (  IllegalArgumentException iae) {
    assertNull(""String_Node_Str"",regId);
  }
  AuthConfigProvider acp=null;
  acp=AuthConfigFactory.getFactory().getConfigProvider(layer,appContext,null);
  assertTrue(""String_Node_Str"",previousAcp == acp);
  assertTrue(""String_Node_Str"",AuthConfigFactory.getFactory().removeRegistration(previousRegId));
}"
29174,"public void receive_request(ServerRequestInfo ri) throws ForwardRequest {
  SecurityContext seccontext=null;
  ServiceContext sc=null;
  int status=0;
  boolean raise_no_perm=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_request_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri,sc,orb);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri,sc,orb);
    return;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  Any SasAny;
  try {
    SasAny=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(SasAny);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (sasdiscr == MTMessageInContext.value) {
    sasctxbody=createContextError(SvcContextUtils.MessageInContextMinor);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (sasdiscr != MTEstablishContext.value) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  EstablishContext ec=sasctxbody.establish_msg();
  seccontext=new SecurityContext();
  seccontext.subject=new Subject();
  try {
    if (ec.client_authentication_token.length != 0) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createAuthCred(seccontext,ec.client_authentication_token,orb);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    if (ec.identity_token != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createIdCred(seccontext,ec.identity_token);
    }
  }
 catch (  SecurityException secex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",secex);
    sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  status=secContextUtil.setSecurityContext(seccontext,ri.object_id(),ri.operation(),getServerSocket());
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + status);
  }
  if (status == SecurityContextUtil.STATUS_FAILED) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    sasctxbody=createContextError(status);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  sasctxbody=createCompleteEstablishContext(status);
  sc=createSvcContext(sasctxbody,orb);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  ri.add_reply_service_context(sc,NO_REPLACE);
}","public void receive_request(ServerRequestInfo ri) throws ForwardRequest {
  SecurityContext seccontext=null;
  ServiceContext sc=null;
  int status=0;
  boolean raise_no_perm=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_request_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri,orb);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri,orb);
    return;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  Any SasAny;
  try {
    SasAny=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(SasAny);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (sasdiscr == MTMessageInContext.value) {
    sasctxbody=createContextError(SvcContextUtils.MessageInContextMinor);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (sasdiscr != MTEstablishContext.value) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  EstablishContext ec=sasctxbody.establish_msg();
  seccontext=new SecurityContext();
  seccontext.subject=new Subject();
  try {
    if (ec.client_authentication_token.length != 0) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createAuthCred(seccontext,ec.client_authentication_token,orb);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    if (ec.identity_token != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createIdCred(seccontext,ec.identity_token);
    }
  }
 catch (  SecurityException secex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",secex);
    sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  status=secContextUtil.setSecurityContext(seccontext,ri.object_id(),ri.operation(),getServerSocket());
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + status);
  }
  if (status == SecurityContextUtil.STATUS_FAILED) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    sasctxbody=createContextError(status);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  sasctxbody=createCompleteEstablishContext(status);
  sc=createSvcContext(sasctxbody,orb);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  ri.add_reply_service_context(sc,NO_REPLACE);
}"
29175,"private void handle_null_service_context(ServerRequestInfo ri,ServiceContext sc,ORB orb){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ri.operation());
  }
  int secStatus=secContextUtil.setSecurityContext(null,ri.object_id(),ri.operation(),getServerSocket());
  if (secStatus == SecurityContextUtil.STATUS_FAILED) {
    SASContextBody sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    throw new NO_PERMISSION();
  }
}","private void handle_null_service_context(ServerRequestInfo ri,ORB orb){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ri.operation());
  }
  ServiceContext sc=null;
  int secStatus=secContextUtil.setSecurityContext(null,ri.object_id(),ri.operation(),getServerSocket());
  if (secStatus == SecurityContextUtil.STATUS_FAILED) {
    SASContextBody sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    throw new NO_PERMISSION();
  }
}"
29176,"public ServerRequestInterceptor createServerRequestInterceptor(ORBInitInfo info,Codec codec){
  ServerRequestInterceptor ret=null;
  try {
    if (!penv.getProcessType().isServer()) {
      return null;
    }
    if (altSecFactory != null || (interceptorFactory != null && createAlternateSecurityInterceptorFactory())) {
      ret=altSecFactory.getServerRequestInterceptor(codec);
    }
 else {
      ret=getServerInterceptorInstance(codec);
    }
    com.sun.corba.ee.spi.legacy.interceptor.ORBInitInfoExt infoExt=(com.sun.corba.ee.spi.legacy.interceptor.ORBInitInfoExt)info;
    IORInterceptor secIOR=getSecIORInterceptorInstance(codec,infoExt.getORB());
    info.add_ior_interceptor(secIOR);
  }
 catch (  DuplicateName ex) {
    _logger.log(Level.SEVERE,null,ex);
    throw new RuntimeException(ex);
  }
  return ret;
}","public ServerRequestInterceptor createServerRequestInterceptor(ORBInitInfo info,Codec codec){
  ServerRequestInterceptor ret=null;
  try {
    if (!penv.getProcessType().isServer()) {
      return null;
    }
    if (altSecFactory != null || (interceptorFactory != null && createAlternateSecurityInterceptorFactory())) {
      ret=altSecFactory.getServerRequestInterceptor(codec);
    }
 else {
      ret=getServerInterceptorInstance(codec);
    }
    if (info instanceof com.sun.corba.ee.spi.legacy.interceptor.ORBInitInfoExt) {
      com.sun.corba.ee.spi.legacy.interceptor.ORBInitInfoExt infoExt=(com.sun.corba.ee.spi.legacy.interceptor.ORBInitInfoExt)info;
      IORInterceptor secIOR=getSecIORInterceptorInstance(codec,infoExt.getORB());
      info.add_ior_interceptor(secIOR);
    }
  }
 catch (  DuplicateName ex) {
    _logger.log(Level.SEVERE,null,ex);
    throw new RuntimeException(ex);
  }
  return ret;
}"
29177,"/** 
 * Creates the file and initialized MeteredStream and passes it on to Superclass (java.util.logging.StreamHandler).
 */
private void openFile(File file) throws IOException {
  File parent=file.getParentFile();
  if (!parent.exists() && parent.mkdirs()) {
    throw new IOException(LOCAL_STRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",parent.getAbsolutePath()));
  }
  FileOutputStream fout=new FileOutputStream(file,true);
  BufferedOutputStream bout=new BufferedOutputStream(fout);
  meter=new MeteredStream(bout,file.length());
  setOutputStream(meter);
}","/** 
 * Creates the file and initialized MeteredStream and passes it on to Superclass (java.util.logging.StreamHandler).
 */
private void openFile(File file) throws IOException {
  File parent=file.getParentFile();
  if (!parent.exists() && !parent.mkdirs()) {
    throw new IOException(LOCAL_STRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",parent.getAbsolutePath()));
  }
  FileOutputStream fout=new FileOutputStream(file,true);
  BufferedOutputStream bout=new BufferedOutputStream(fout);
  meter=new MeteredStream(bout,file.length());
  setOutputStream(meter);
}"
29178,"/** 
 * Disassociate the listener from all the provider registrations whose layer and appContext values are matched by the corresponding arguments to this method.
 * @param listener the RegistrationListener to be detached.
 * @param layer a String identifying the message layer or null.
 * @param appContext a String value identifying the application contextor null.
 * @return an array of String values where each value identifies aprovider registration from which the listener was removed. This method never returns null; it returns an empty array if the listener was not removed from any registrations.
 * @exception SecurityException if the caller does not havepermission to detach the listener from the factory.
 */
@Override public String[] detachListener(RegistrationListener listener,String layer,String appContext){
  ArrayList<String> list=new ArrayList<String>();
  String regisID=getRegistrationID(layer,appContext);
  wLock.lock();
  try {
    Set<String> targets=id2RegisListenersMap.keySet();
    for (    String targetID : targets) {
      if (regIdImplies(regisID,targetID)) {
        List<RegistrationListener> listeners=id2RegisListenersMap.get(targetID);
        if (listeners != null && listeners.remove(listener)) {
          list.add(targetID);
        }
      }
    }
  }
  finally {
    wLock.unlock();
  }
  return list.toArray(new String[0]);
}","/** 
 * Disassociate the listener from all the provider registrations whose layer and appContext values are matched by the corresponding arguments to this method.
 * @param listener the RegistrationListener to be detached.
 * @param layer a String identifying the message layer or null.
 * @param appContext a String value identifying the application contextor null.
 * @return an array of String values where each value identifies aprovider registration from which the listener was removed. This method never returns null; it returns an empty array if the listener was not removed from any registrations.
 * @exception SecurityException if the caller does not havepermission to detach the listener from the factory.
 */
@Override public String[] detachListener(RegistrationListener listener,String layer,String appContext){
  ArrayList<String> list=new ArrayList<String>();
  String regisID=getRegistrationID(layer,appContext);
  wLock.lock();
  try {
    Set<String> targets=id2RegisListenersMap.keySet();
    for (    String targetID : targets) {
      if (regIdImplies(regisID,targetID)) {
        List<RegistrationListener> listeners=id2RegisListenersMap.get(targetID);
        if (listeners != null && listeners.remove(listener)) {
          list.add(targetID);
        }
      }
    }
  }
  finally {
    wLock.unlock();
  }
  return list.toArray(new String[list.size()]);
}"
29179,"protected void _loadFactory(){
  try {
    id2ProviderMap=new HashMap<String,AuthConfigProvider>();
    id2RegisContextMap=new HashMap<String,RegistrationContext>();
    id2RegisListenersMap=new HashMap<String,List<RegistrationListener>>();
    provider2IdsMap=new HashMap<AuthConfigProvider,List<String>>();
    List<EntryInfo> entryList=getRegStore().getPersistedEntries();
    for (    EntryInfo info : entryList) {
      if (info.isConstructorEntry()) {
        _constructProvider(info.getClassName(),info.getProperties(),this);
      }
 else {
        boolean first=true;
        AuthConfigProvider p=null;
        List<RegistrationContext> contexts=(info.getRegContexts());
        for (        RegistrationContext ctx : contexts) {
          if (first) {
            p=_constructProvider(info.getClassName(),info.getProperties(),null);
          }
          _loadRegistration(p,ctx.getMessageLayer(),ctx.getAppContext(),ctx.getDescription());
        }
      }
    }
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","protected void _loadFactory(){
  try {
    initializeMaps();
    List<EntryInfo> entryList=getRegStore().getPersistedEntries();
    for (    EntryInfo info : entryList) {
      if (info.isConstructorEntry()) {
        _constructProvider(info.getClassName(),info.getProperties(),this);
      }
 else {
        boolean first=true;
        AuthConfigProvider p=null;
        List<RegistrationContext> contexts=(info.getRegContexts());
        for (        RegistrationContext ctx : contexts) {
          if (first) {
            p=_constructProvider(info.getClassName(),info.getProperties(),null);
          }
          _loadRegistration(p,ctx.getMessageLayer(),ctx.getAppContext(),ctx.getDescription());
        }
      }
    }
  }
 catch (  Exception e) {
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}"
29180,"private static void notifyListeners(Map<String,List<RegistrationListener>> map){
  Set<String> regisIDSet=map.keySet();
  for (  String regisID : regisIDSet) {
    List<RegistrationListener> listeners=map.get(regisID);
    if (listeners != null && listeners.size() > 0) {
      String[] dIds=decomposeRegisID(regisID);
      for (      RegistrationListener listener : listeners) {
        listener.notify(dIds[0],dIds[1]);
      }
    }
  }
}","private static void notifyListeners(Map<String,List<RegistrationListener>> map){
  Set<Map.Entry<String,List<RegistrationListener>>> entrySet=map.entrySet();
  for (  Map.Entry<String,List<RegistrationListener>> entry : entrySet) {
    List<RegistrationListener> listeners=map.get(entry.getKey());
    if (listeners != null && listeners.size() > 0) {
      String[] dIds=decomposeRegisID(entry.getKey());
      for (      RegistrationListener listener : listeners) {
        listener.notify(dIds[0],dIds[1]);
      }
    }
  }
}"
29181,"private RegistrationContext getRegistrationContext(String id){
  final String layer=getLayer();
  final String appContext;
  if (id.toLowerCase().equals(DEFAULT_JAAS_APP_NAME)) {
    appContext=ALL_APPS;
  }
 else {
    appContext=id;
  }
  return new RegistrationContext(){
    final String description=""String_Node_Str"" + appContext;
    public String getMessageLayer(){
      return layer;
    }
    public String getAppContext(){
      return appContext;
    }
    public String getDescription(){
      return description;
    }
    public boolean isPersistent(){
      return false;
    }
  }
;
}","private RegistrationContext getRegistrationContext(String id){
  final String layer=getLayer();
  final String appContext;
  if (id.toLowerCase(Locale.getDefault()).equals(DEFAULT_JAAS_APP_NAME)) {
    appContext=ALL_APPS;
  }
 else {
    appContext=id;
  }
  return new RegistrationContext(){
    final String description=""String_Node_Str"" + appContext;
    public String getMessageLayer(){
      return layer;
    }
    public String getAppContext(){
      return appContext;
    }
    public String getDescription(){
      return description;
    }
    public boolean isPersistent(){
      return false;
    }
  }
;
}"
29182,"public final void preDeregister() throws Exception {
  mServer.removeNotificationListener(mObjectName,this);
}","@Override public final void preDeregister() throws Exception {
  if (mServer != null) {
    mServer.removeNotificationListener(mObjectName,this);
  }
}"
29183,"public final void postDeregister(){
}","@Override public final void postDeregister(){
}"
29184,"public void setEmitMBeanStatus(final boolean emit){
  mEmitMBeanStatus=emit;
}","@Override public void setEmitMBeanStatus(final boolean emit){
  mEmitMBeanStatus=emit;
}"
29185,"public synchronized Set<ObjectName> getChildrenOf(final ObjectName parent){
  final Set<ObjectName> children=mParentChildren.get(parent);
  if (children == null) {
    return Collections.emptySet();
  }
  return new HashSet<ObjectName>(children);
}","@Override public synchronized Set<ObjectName> getChildrenOf(final ObjectName parent){
  final Set<ObjectName> children=mParentChildren.get(parent);
  if (children == null) {
    return Collections.emptySet();
  }
  return new HashSet<ObjectName>(children);
}"
29186,"/** 
 * Must be 'synchronized' because we're working on two different Maps.
 */
private synchronized ObjectName removeChild(final ObjectName child){
  final ObjectName parent=mChildParent.remove(child);
  if (parent != null) {
    final Set<ObjectName> children=mParentChildren.get(parent);
    if (children != null) {
      children.remove(child);
      if (children.size() == 0) {
        mParentChildren.remove(parent);
      }
    }
  }
  return parent;
}","/** 
 * Must be 'synchronized' because we're working on two different Maps.
 */
private synchronized ObjectName removeChild(final ObjectName child){
  final ObjectName parent=mChildParent.remove(child);
  if (parent != null) {
    final Set<ObjectName> children=mParentChildren.get(parent);
    if (children != null) {
      children.remove(child);
      if (children.isEmpty()) {
        mParentChildren.remove(parent);
      }
    }
  }
  return parent;
}"
29187,"public boolean getEmitMBeanStatus(){
  return mEmitMBeanStatus;
}","@Override public boolean getEmitMBeanStatus(){
  return mEmitMBeanStatus;
}"
29188,"public ObjectName getParentOf(final ObjectName child){
  return mChildParent.get(child);
}","@Override public ObjectName getParentOf(final ObjectName child){
  return mChildParent.get(child);
}"
29189,"public final void postRegister(final Boolean registrationSucceeded){
  if (registrationSucceeded.booleanValue()) {
    try {
      mServer.addNotificationListener(JMXUtil.getMBeanServerDelegateObjectName(),this,null,null);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  final ObjectName pattern=Util.newObjectNamePattern(mDomain,""String_Node_Str"");
  final Set<ObjectName> names=JMXUtil.queryNames(mServer,pattern,null);
  for (  final ObjectName o : names) {
    addChild(o);
  }
}","@Override public final void postRegister(final Boolean registrationSucceeded){
  if (mServer == null) {
    return;
  }
  if (registrationSucceeded.booleanValue()) {
    try {
      mServer.addNotificationListener(JMXUtil.getMBeanServerDelegateObjectName(),this,null,null);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  final ObjectName pattern=Util.newObjectNamePattern(mDomain,""String_Node_Str"");
  final Set<ObjectName> names=JMXUtil.queryNames(mServer,pattern,null);
  for (  final ObjectName o : names) {
    addChild(o);
  }
}"
29190,"private void addChild(final ObjectName child){
  ObjectName parent=null;
  try {
    parent=(ObjectName)mServer.getAttribute(child,AMX.ATTR_PARENT);
  }
 catch (  final Exception e) {
  }
  if (parent != null) {
synchronized (this) {
      mChildParent.put(child,parent);
      Set<ObjectName> children=mParentChildren.get(parent);
      if (children == null) {
        children=new HashSet<ObjectName>();
        mParentChildren.put(parent,children);
      }
      children.add(child);
    }
  }
}","private void addChild(final ObjectName child){
  if (mServer == null) {
    return;
  }
  ObjectName parent=null;
  try {
    parent=(ObjectName)mServer.getAttribute(child,AMX.ATTR_PARENT);
  }
 catch (  final Exception e) {
  }
  if (parent != null) {
synchronized (this) {
      mChildParent.put(child,parent);
      Set<ObjectName> children=mParentChildren.get(parent);
      if (children == null) {
        children=new HashSet<ObjectName>();
        mParentChildren.put(parent,children);
      }
      children.add(child);
    }
  }
}"
29191,"public ObjectName preRegister(final MBeanServer server,final ObjectName nameIn) throws Exception {
  mServer=server;
  mObjectName=nameIn;
  return (nameIn);
}","@Override public ObjectName preRegister(final MBeanServer server,final ObjectName nameIn) throws Exception {
  mServer=server;
  mObjectName=nameIn;
  return (nameIn);
}"
29192,"public void handleNotification(final Notification notifIn,final Object handback){
  if (notifIn instanceof MBeanServerNotification) {
    final MBeanServerNotification notif=(MBeanServerNotification)notifIn;
    final String type=notif.getType();
    final ObjectName objectName=notif.getMBeanName();
    if (isRelevantMBean(objectName)) {
      if (type.equals(MBeanServerNotification.REGISTRATION_NOTIFICATION)) {
        if (mEmitMBeanStatus) {
          System.out.println(""String_Node_Str"" + objectName);
        }
        addChild(objectName);
      }
 else       if (type.equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {
        if (mEmitMBeanStatus) {
          System.out.println(""String_Node_Str"" + objectName);
        }
        removeChild(objectName);
      }
    }
  }
}","@Override public void handleNotification(final Notification notifIn,final Object handback){
  if (notifIn instanceof MBeanServerNotification) {
    final MBeanServerNotification notif=(MBeanServerNotification)notifIn;
    final String type=notif.getType();
    final ObjectName objectName=notif.getMBeanName();
    if (isRelevantMBean(objectName)) {
      if (type.equals(MBeanServerNotification.REGISTRATION_NOTIFICATION)) {
        if (mEmitMBeanStatus) {
          System.out.println(""String_Node_Str"" + objectName);
        }
        addChild(objectName);
      }
 else       if (type.equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {
        if (mEmitMBeanStatus) {
          System.out.println(""String_Node_Str"" + objectName);
        }
        removeChild(objectName);
      }
    }
  }
}"
29193,"/** 
 * Logout the user. <p> This method removes the <code>PrincipalImpl</code> that was added by the <code>commit</code> method. <p>
 * @exception LoginException if the logout fails.
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 */
public boolean logout() throws LoginException {
  subject.getPrincipals().remove(userPrincipal);
  succeeded=false;
  succeeded=commitSucceeded;
  username=null;
  if (password != null) {
    for (int i=0; i < password.length; i++) {
      password[i]=' ';
    }
    password=null;
  }
  userPrincipal=null;
  return true;
}","/** 
 * Logout the user. <p> This method removes the <code>PrincipalImpl</code> that was added by the <code>commit</code> method. <p>
 * @exception LoginException if the logout fails.
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 */
public boolean logout() throws LoginException {
  subject.getPrincipals().remove(userPrincipal);
  succeeded=commitSucceeded;
  username=null;
  if (password != null) {
    for (int i=0; i < password.length; i++) {
      password[i]=' ';
    }
    password=null;
  }
  userPrincipal=null;
  return true;
}"
29194,"/** 
 * A Simple rotate method to close the old file and start the new one when the limit is reached.
 */
public void rotate(){
  final GFFileHandler thisInstance=this;
  java.security.AccessController.doPrivileged(new java.security.PrivilegedAction(){
    public Object run(){
synchronized (thisInstance.rotationRequested) {
        if (thisInstance.meter != null && thisInstance.meter.written <= 0) {
          return null;
        }
        thisInstance.flush();
        thisInstance.close();
        try {
          if (!absoluteFile.exists()) {
            File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
            creatingDeletedLogFile.createNewFile();
            absoluteFile=creatingDeletedLogFile;
          }
          File oldFile=absoluteFile;
          StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
          logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
          File rotatedFile=new File(renamedFileName.toString());
          boolean renameSuccess=oldFile.renameTo(rotatedFile);
          if (!renameSuccess) {
            FileUtils.copy(absoluteFile,rotatedFile);
            File freshServerLogFile=getLogFileName();
            FileOutputStream fo=new FileOutputStream(freshServerLogFile);
            fo.close();
          }
          FileOutputStream oldFileFO=new FileOutputStream(oldFile);
          oldFileFO.close();
          openFile(getLogFileName());
          absoluteFile=getLogFileName();
          if (dayBasedFileRotation) {
            LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
          }
 else {
            LogRotationTimer.getInstance().restartTimer();
          }
          cleanUpHistoryLogFiles();
        }
 catch (        IOException ix) {
          new ErrorManager().error(""String_Node_Str"",ix,ErrorManager.GENERIC_FAILURE);
        }
        return null;
      }
    }
  }
);
}","/** 
 * A Simple rotate method to close the old file and start the new one when the limit is reached.
 */
public void rotate(){
  final GFFileHandler thisInstance=this;
  java.security.AccessController.doPrivileged(new java.security.PrivilegedAction(){
    public Object run(){
synchronized (thisInstance.rotationLock) {
        if (thisInstance.meter != null && thisInstance.meter.written <= 0) {
          return null;
        }
        thisInstance.flush();
        thisInstance.close();
        try {
          if (!absoluteFile.exists()) {
            File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
            if (creatingDeletedLogFile.createNewFile()) {
              absoluteFile=creatingDeletedLogFile;
            }
          }
 else {
            File oldFile=absoluteFile;
            StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
            logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
            File rotatedFile=new File(renamedFileName.toString());
            boolean renameSuccess=oldFile.renameTo(rotatedFile);
            if (!renameSuccess) {
              FileUtils.copy(absoluteFile,rotatedFile);
              File freshServerLogFile=getLogFileName();
              FileOutputStream fo=new FileOutputStream(freshServerLogFile);
              fo.close();
            }
            FileOutputStream oldFileFO=new FileOutputStream(oldFile);
            oldFileFO.close();
            openFile(getLogFileName());
            absoluteFile=getLogFileName();
            if (dayBasedFileRotation) {
              LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
            }
 else {
              LogRotationTimer.getInstance().restartTimer();
            }
            cleanUpHistoryLogFiles();
          }
        }
 catch (        IOException ix) {
          new ErrorManager().error(""String_Node_Str"",ix,ErrorManager.GENERIC_FAILURE);
        }
        return null;
      }
    }
  }
);
}"
29195,"/** 
 * Creates the file and initialized MeteredStream and passes it on to Superclass (java.util.logging.StreamHandler).
 */
private void openFile(File file) throws IOException {
  File parent=file.getParentFile();
  if (!parent.exists()) {
    parent.mkdirs();
  }
  FileOutputStream fout=new FileOutputStream(file,true);
  BufferedOutputStream bout=new BufferedOutputStream(fout);
  meter=new MeteredStream(bout,file.length());
  setOutputStream(meter);
}","/** 
 * Creates the file and initialized MeteredStream and passes it on to Superclass (java.util.logging.StreamHandler).
 */
private void openFile(File file) throws IOException {
  File parent=file.getParentFile();
  if (!parent.exists() && parent.mkdirs()) {
    FileOutputStream fout=new FileOutputStream(file,true);
    BufferedOutputStream bout=new BufferedOutputStream(fout);
    meter=new MeteredStream(bout,file.length());
    setOutputStream(meter);
  }
 else {
    throw new IOException(LOCAL_STRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",parent.getAbsolutePath()));
  }
}"
29196,"/** 
 * 5005 Retrieves the LogRecord from our Queue and store them in the file
 */
public void log(){
  LogRecord record;
  try {
    record=pendingRecords.take();
    super.publish(record);
  }
 catch (  InterruptedException e) {
    return;
  }
  Vector<LogRecord> v=new Vector<LogRecord>();
  int msgs=pendingRecords.drainTo(v,flushFrequency);
  for (int j=0; j < msgs; j++) {
    super.publish(v.get(j));
  }
  flush();
  if ((rotationRequested.get()) || ((limitForFileRotation > 0) && (meter.written >= limitForFileRotation))) {
synchronized (rotationRequested) {
      rotate();
      rotationRequested.set(false);
    }
  }
}","/** 
 * 5005 Retrieves the LogRecord from our Queue and store them in the file
 */
public void log(){
  LogRecord record;
  try {
    record=pendingRecords.take();
    super.publish(record);
  }
 catch (  InterruptedException e) {
    return;
  }
  Vector<LogRecord> v=new Vector<LogRecord>();
  int msgs=pendingRecords.drainTo(v,flushFrequency);
  for (int j=0; j < msgs; j++) {
    super.publish(v.get(j));
  }
  flush();
  if ((rotationRequested.get()) || ((limitForFileRotation > 0) && (meter.written >= limitForFileRotation))) {
synchronized (rotationLock) {
      rotate();
      rotationRequested.set(false);
    }
  }
}"
29197,"public Object run(){
synchronized (thisInstance.rotationRequested) {
    if (thisInstance.meter != null && thisInstance.meter.written <= 0) {
      return null;
    }
    thisInstance.flush();
    thisInstance.close();
    try {
      if (!absoluteFile.exists()) {
        File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
        creatingDeletedLogFile.createNewFile();
        absoluteFile=creatingDeletedLogFile;
      }
      File oldFile=absoluteFile;
      StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
      logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
      File rotatedFile=new File(renamedFileName.toString());
      boolean renameSuccess=oldFile.renameTo(rotatedFile);
      if (!renameSuccess) {
        FileUtils.copy(absoluteFile,rotatedFile);
        File freshServerLogFile=getLogFileName();
        FileOutputStream fo=new FileOutputStream(freshServerLogFile);
        fo.close();
      }
      FileOutputStream oldFileFO=new FileOutputStream(oldFile);
      oldFileFO.close();
      openFile(getLogFileName());
      absoluteFile=getLogFileName();
      if (dayBasedFileRotation) {
        LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
      }
 else {
        LogRotationTimer.getInstance().restartTimer();
      }
      cleanUpHistoryLogFiles();
    }
 catch (    IOException ix) {
      new ErrorManager().error(""String_Node_Str"",ix,ErrorManager.GENERIC_FAILURE);
    }
    return null;
  }
}","public Object run(){
synchronized (thisInstance.rotationLock) {
    if (thisInstance.meter != null && thisInstance.meter.written <= 0) {
      return null;
    }
    thisInstance.flush();
    thisInstance.close();
    try {
      if (!absoluteFile.exists()) {
        File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
        if (creatingDeletedLogFile.createNewFile()) {
          absoluteFile=creatingDeletedLogFile;
        }
      }
 else {
        File oldFile=absoluteFile;
        StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
        logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
        File rotatedFile=new File(renamedFileName.toString());
        boolean renameSuccess=oldFile.renameTo(rotatedFile);
        if (!renameSuccess) {
          FileUtils.copy(absoluteFile,rotatedFile);
          File freshServerLogFile=getLogFileName();
          FileOutputStream fo=new FileOutputStream(freshServerLogFile);
          fo.close();
        }
        FileOutputStream oldFileFO=new FileOutputStream(oldFile);
        oldFileFO.close();
        openFile(getLogFileName());
        absoluteFile=getLogFileName();
        if (dayBasedFileRotation) {
          LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
        }
 else {
          LogRotationTimer.getInstance().restartTimer();
        }
        cleanUpHistoryLogFiles();
      }
    }
 catch (    IOException ix) {
      new ErrorManager().error(""String_Node_Str"",ix,ErrorManager.GENERIC_FAILURE);
    }
    return null;
  }
}"
29198,"/** 
 * cleanup the history log file based on attributes set under logging.properties file"". <p/> If it is defined with valid number, we only keep that number of history logfiles; If ""max_history_files"" is defined without value, then default that number to be 10; If ""max_history_files"" is defined with value 0, any number of history files are kept.
 */
public void cleanUpHistoryLogFiles(){
  if (maxHistoryFiles == 0)   return;
  File dir=absoluteFile.getParentFile();
  if (dir == null)   return;
  File[] fset=dir.listFiles();
  ArrayList candidates=new ArrayList();
  for (int i=0; fset != null && i < fset.length; i++) {
    if (!logFileName.equals(fset[i].getName()) && fset[i].isFile() && fset[i].getName().startsWith(logFileName)) {
      candidates.add(fset[i].getAbsolutePath());
    }
  }
  if (candidates.size() <= maxHistoryFiles)   return;
  Object[] pathes=candidates.toArray();
  java.util.Arrays.sort(pathes);
  try {
    for (int i=0; i < pathes.length - maxHistoryFiles; i++) {
      File logFile=new File((String)pathes[i]);
      boolean delFile=logFile.delete();
      if (!delFile) {
        throw new IOException(""String_Node_Str"" + logFile.getAbsolutePath());
      }
    }
  }
 catch (  Exception e) {
    new ErrorManager().error(""String_Node_Str"",e,ErrorManager.GENERIC_FAILURE);
  }
}","/** 
 * cleanup the history log file based on attributes set under logging.properties file"". <p/> If it is defined with valid number, we only keep that number of history logfiles; If ""max_history_files"" is defined without value, then default that number to be 10; If ""max_history_files"" is defined with value 0, any number of history files are kept.
 */
public void cleanUpHistoryLogFiles(){
  if (maxHistoryFiles == 0)   return;
synchronized (rotationLock) {
    File dir=absoluteFile.getParentFile();
    if (dir == null)     return;
    File[] fset=dir.listFiles();
    ArrayList candidates=new ArrayList();
    for (int i=0; fset != null && i < fset.length; i++) {
      if (!logFileName.equals(fset[i].getName()) && fset[i].isFile() && fset[i].getName().startsWith(logFileName)) {
        candidates.add(fset[i].getAbsolutePath());
      }
    }
    if (candidates.size() <= maxHistoryFiles)     return;
    Object[] pathes=candidates.toArray();
    java.util.Arrays.sort(pathes);
    try {
      for (int i=0; i < pathes.length - maxHistoryFiles; i++) {
        File logFile=new File((String)pathes[i]);
        boolean delFile=logFile.delete();
        if (!delFile) {
          throw new IOException(""String_Node_Str"" + logFile.getAbsolutePath());
        }
      }
    }
 catch (    Exception e) {
      new ErrorManager().error(""String_Node_Str"",e,ErrorManager.GENERIC_FAILURE);
    }
  }
}"
29199,"/** 
 * This method is invoked from LogManager.reInitializeLoggers() to change the location of the file.
 */
void changeFileName(File file){
  if (file.equals(absoluteFile)) {
    return;
  }
synchronized (this) {
    super.flush();
    super.close();
    try {
      openFile(file);
      absoluteFile=file;
    }
 catch (    IOException ix) {
      new ErrorManager().error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",ix,ErrorManager.OPEN_FAILURE);
      try {
        openFile(absoluteFile);
      }
 catch (      Exception e) {
        new ErrorManager().error(""String_Node_Str"",e,ErrorManager.OPEN_FAILURE);
      }
    }
  }
}","/** 
 * This method is invoked from LogManager.reInitializeLoggers() to change the location of the file.
 */
void changeFileName(File file){
  if (file.equals(absoluteFile)) {
    return;
  }
synchronized (rotationLock) {
    super.flush();
    super.close();
    try {
      openFile(file);
      absoluteFile=file;
    }
 catch (    IOException ix) {
      new ErrorManager().error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",ix,ErrorManager.OPEN_FAILURE);
      try {
        openFile(absoluteFile);
      }
 catch (      Exception e) {
        new ErrorManager().error(""String_Node_Str"",e,ErrorManager.OPEN_FAILURE);
      }
    }
  }
}"
29200,"public void postConstruct(){
  LogManager manager=LogManager.getLogManager();
  String cname=getClass().getName();
  if (manager != null) {
    logFileProperty=manager.getProperty(cname + ""String_Node_Str"");
  }
  if (logFileProperty == null || logFileProperty.trim().equals(""String_Node_Str"")) {
    logFileProperty=env.getInstanceRoot().getAbsolutePath() + File.separator + LOGS_DIR+ File.separator+ logFileName;
  }
  String filename=TranslatedConfigView.getTranslatedValue(logFileProperty).toString();
  File serverLog=new File(filename);
  absoluteServerLogName=filename;
  if (!serverLog.isAbsolute()) {
    serverLog=new File(env.getDomainRoot(),filename);
    absoluteServerLogName=env.getDomainRoot() + File.separator + filename;
  }
  changeFileName(serverLog);
  FileInputStream fs=null;
  String strLine=""String_Node_Str"";
  int odlFormatter=0;
  int uflFormatter=0;
  int otherFormatter=0;
  boolean mustRotate=false;
  try {
    fs=new FileInputStream(serverLog);
    BufferedReader br=new BufferedReader(new InputStreamReader(fs));
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (!strLine.equals(""String_Node_Str"")) {
        if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'[') > 4) {
          odlFormatter++;
        }
 else         if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'|') > 4) {
          uflFormatter++;
        }
 else {
          otherFormatter++;
        }
        if (odlFormatter > 0 && uflFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (uflFormatter > 0 && otherFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (otherFormatter > 0 && odlFormatter > 0) {
          mustRotate=true;
          break;
        }
        if (odlFormatter > 2 || uflFormatter > 2 || odlFormatter > 2) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (odlFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
 else   if (uflFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
  pump=new Thread(){
    public void run(){
      try {
        while (!done.isSignalled()) {
          log();
        }
      }
 catch (      RuntimeException e) {
      }
    }
  }
;
  pump.setDaemon(true);
  pump.start();
  LogRecord lr=new LogRecord(Level.INFO,LogFacade.GF_VERSION_INFO);
  lr.setParameters(new Object[]{Version.getFullVersion()});
  lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
  EarlyLogHandler.earlyMessages.add(lr);
  lr=new LogRecord(Level.INFO,LogFacade.LOG_FORMATTER_INFO);
  lr.setParameters(new Object[]{manager.getProperty(cname + ""String_Node_Str"")});
  lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
  EarlyLogHandler.earlyMessages.add(lr);
  String rotationOnDateChange=manager.getProperty(cname + ""String_Node_Str"");
  if (rotationOnDateChange != null && !(""String_Node_Str"").equals(rotationOnDateChange.trim()) && Boolean.parseBoolean(rotationOnDateChange)) {
    dayBasedFileRotation=true;
    Long rotationTimeLimitValue=0L;
    int MILLIS_IN_DAY=1000 * 60 * 60* 24;
    Date date=new Date();
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    long systime=System.currentTimeMillis();
    String nextDate=dateFormat.format(date.getTime() + MILLIS_IN_DAY);
    Date nextDay=null;
    try {
      nextDay=dateFormat.parse(nextDate);
    }
 catch (    ParseException e) {
      nextDay=new Date();
      lr=new LogRecord(Level.WARNING,LogFacade.DATE_PARSING_FAILED);
      lr.setParameters(new Object[]{nextDate});
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(lr);
    }
    long nextsystime=nextDay.getTime();
    rotationTimeLimitValue=nextsystime - systime;
    Task rotationTask=new Task(){
      public Object run(){
        rotate();
        return null;
      }
    }
;
    LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue / 60000));
  }
 else {
    Long rotationTimeLimitValue=0L;
    String propValue=null;
    try {
      propValue=manager.getProperty(cname + ""String_Node_Str"");
      if (propValue != null) {
        rotationTimeLimitValue=Long.parseLong(propValue);
      }
    }
 catch (    NumberFormatException e) {
      lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
      lr.setParameters(new Object[]{propValue,""String_Node_Str""});
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(lr);
    }
    if (rotationTimeLimitValue != 0) {
      Task rotationTask=new Task(){
        public Object run(){
          rotate();
          return null;
        }
      }
;
      LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue));
    }
  }
  Integer rotationLimitAttrValue=0;
  String propValue=null;
  try {
    propValue=manager.getProperty(cname + ""String_Node_Str"");
    if (propValue != null) {
      rotationLimitAttrValue=Integer.parseInt(propValue);
    }
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
    lr.setParameters(new Object[]{propValue,""String_Node_Str""});
    lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
    EarlyLogHandler.earlyMessages.add(lr);
  }
  setLimitForRotation(rotationLimitAttrValue);
  gffileHandlerFormatter=manager.getProperty(cname + ""String_Node_Str"");
  if (mustRotate) {
    rotate();
  }
 else   if (!currentgffileHandlerFormatter.equals(""String_Node_Str"") && gffileHandlerFormatter != null && !gffileHandlerFormatter.equals(currentgffileHandlerFormatter)) {
    rotate();
  }
  propValue=manager.getProperty(cname + ""String_Node_Str"");
  if (propValue != null) {
    try {
      flushFrequency=Integer.parseInt(propValue);
    }
 catch (    NumberFormatException e) {
      lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
      lr.setParameters(new Object[]{propValue,""String_Node_Str""});
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(lr);
    }
  }
  if (flushFrequency <= 0)   flushFrequency=1;
  String formatterName=manager.getProperty(cname + ""String_Node_Str"");
  if (formatterName == null || UniformLogFormatter.class.getName().equals(formatterName)) {
    UniformLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new UniformLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new UniformLogFormatter();
      setFormatter(formatterClass);
    }
    if (formatterClass != null) {
      recordBeginMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=manager.getProperty(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=manager.getProperty(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatterClass.setRecordBeginMarker(recordBeginMarker);
      formatterClass.setRecordEndMarker(recordEndMarker);
      formatterClass.setRecordDateFormat(recordDateFormat);
      formatterClass.setRecordFieldSeparator(recordFieldSeparator);
    }
  }
 else   if (ODLLogFormatter.class.getName().equals(formatterName)) {
    ODLLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new ODLLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new ODLLogFormatter();
      setFormatter(formatterClass);
    }
    String includeFields=manager.getProperty(LogManagerService.INCLUDE_FIELDS_PROPERTY);
    formatterClass.setIncludeFields(includeFields);
  }
 else {
    try {
      setFormatter((Formatter)this.getClass().getClassLoader().loadClass(formatterName).newInstance());
    }
 catch (    Exception e) {
      lr=new LogRecord(Level.WARNING,LogFacade.INVALID_FORMATTER_CLASS_NAME);
      lr.setParameters(new Object[]{formatterName});
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      lr.setThrown(e);
      EarlyLogHandler.earlyMessages.add(lr);
    }
  }
  propValue=manager.getProperty(cname + ""String_Node_Str"");
  try {
    if (propValue != null) {
      maxHistoryFiles=Integer.parseInt(propValue);
    }
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
    lr.setParameters(new Object[]{propValue,""String_Node_Str""});
    lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
    EarlyLogHandler.earlyMessages.add(lr);
  }
  if (maxHistoryFiles < 0)   maxHistoryFiles=10;
}","public void postConstruct(){
  LogManager manager=LogManager.getLogManager();
  String cname=getClass().getName();
  logFileProperty=manager.getProperty(cname + ""String_Node_Str"");
  if (logFileProperty == null || logFileProperty.trim().equals(""String_Node_Str"")) {
    logFileProperty=env.getInstanceRoot().getAbsolutePath() + File.separator + LOGS_DIR+ File.separator+ logFileName;
  }
  String filename=TranslatedConfigView.getTranslatedValue(logFileProperty).toString();
  File serverLog=new File(filename);
  absoluteServerLogName=filename;
  if (!serverLog.isAbsolute()) {
    serverLog=new File(env.getDomainRoot(),filename);
    absoluteServerLogName=env.getDomainRoot() + File.separator + filename;
  }
  changeFileName(serverLog);
  BufferedReader br=null;
  String strLine=""String_Node_Str"";
  int odlFormatter=0;
  int uflFormatter=0;
  int otherFormatter=0;
  boolean mustRotate=false;
  try {
    br=new BufferedReader(new FileReader(serverLog));
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (!strLine.equals(""String_Node_Str"")) {
        if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'[') > 4) {
          odlFormatter++;
        }
 else         if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'|') > 4) {
          uflFormatter++;
        }
 else {
          otherFormatter++;
        }
        if (odlFormatter > 0 && uflFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (uflFormatter > 0 && otherFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (otherFormatter > 0 && odlFormatter > 0) {
          mustRotate=true;
          break;
        }
        if (odlFormatter > 2 || uflFormatter > 2 || odlFormatter > 2) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    ErrorManager em=getErrorManager();
    if (em != null) {
      em.error(e.getMessage(),e,ErrorManager.GENERIC_FAILURE);
    }
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      Exception e) {
      }
    }
  }
  if (odlFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
 else   if (uflFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
  pump=new Thread(){
    public void run(){
      try {
        while (!done.isSignalled()) {
          log();
        }
      }
 catch (      RuntimeException e) {
      }
    }
  }
;
  pump.setDaemon(true);
  pump.start();
  LogRecord lr=new LogRecord(Level.INFO,LogFacade.GF_VERSION_INFO);
  lr.setParameters(new Object[]{Version.getFullVersion()});
  lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
  EarlyLogHandler.earlyMessages.add(lr);
  String propValue=null;
  propValue=manager.getProperty(cname + ""String_Node_Str"");
  boolean rotationOnDateChange=false;
  if (propValue != null) {
    rotationOnDateChange=Boolean.parseBoolean(propValue);
  }
  if (rotationOnDateChange) {
    dayBasedFileRotation=true;
    Long rotationTimeLimitValue=0L;
    int MILLIS_IN_DAY=1000 * 60 * 60* 24;
    Date date=new Date();
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    long systime=System.currentTimeMillis();
    String nextDate=dateFormat.format(date.getTime() + MILLIS_IN_DAY);
    Date nextDay=null;
    try {
      nextDay=dateFormat.parse(nextDate);
    }
 catch (    ParseException e) {
      nextDay=new Date();
      lr=new LogRecord(Level.WARNING,LogFacade.DATE_PARSING_FAILED);
      lr.setParameters(new Object[]{nextDate});
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(lr);
    }
    long nextsystime=nextDay.getTime();
    rotationTimeLimitValue=nextsystime - systime;
    Task rotationTask=new Task(){
      public Object run(){
        rotate();
        return null;
      }
    }
;
    LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue / 60000));
  }
 else {
    Long rotationTimeLimitValue=0L;
    try {
      propValue=manager.getProperty(cname + ""String_Node_Str"");
      if (propValue != null) {
        rotationTimeLimitValue=Long.parseLong(propValue);
      }
    }
 catch (    NumberFormatException e) {
      lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
      lr.setParameters(new Object[]{propValue,""String_Node_Str""});
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(lr);
    }
    if (rotationTimeLimitValue != 0) {
      Task rotationTask=new Task(){
        public Object run(){
          rotate();
          return null;
        }
      }
;
      LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue));
    }
  }
  Integer rotationLimitAttrValue=0;
  try {
    propValue=manager.getProperty(cname + ""String_Node_Str"");
    if (propValue != null) {
      rotationLimitAttrValue=Integer.parseInt(propValue);
    }
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
    lr.setParameters(new Object[]{propValue,""String_Node_Str""});
    lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
    EarlyLogHandler.earlyMessages.add(lr);
  }
  setLimitForRotation(rotationLimitAttrValue);
  gffileHandlerFormatter=manager.getProperty(cname + ""String_Node_Str"");
  if (mustRotate) {
    rotate();
  }
 else   if (!currentgffileHandlerFormatter.equals(""String_Node_Str"") && gffileHandlerFormatter != null && !gffileHandlerFormatter.equals(currentgffileHandlerFormatter)) {
    rotate();
  }
  propValue=manager.getProperty(cname + ""String_Node_Str"");
  if (propValue != null) {
    try {
      flushFrequency=Integer.parseInt(propValue);
    }
 catch (    NumberFormatException e) {
      lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
      lr.setParameters(new Object[]{propValue,""String_Node_Str""});
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(lr);
    }
  }
  if (flushFrequency <= 0)   flushFrequency=1;
  String formatterName=manager.getProperty(cname + ""String_Node_Str"");
  formatterName=(formatterName == null) ? UniformLogFormatter.class.getName() : formatterName;
  lr=new LogRecord(Level.INFO,LogFacade.LOG_FORMATTER_INFO);
  lr.setParameters(new Object[]{formatterName});
  lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
  EarlyLogHandler.earlyMessages.add(lr);
  if (UniformLogFormatter.class.getName().equals(formatterName)) {
    UniformLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new UniformLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new UniformLogFormatter();
      setFormatter(formatterClass);
    }
    if (formatterClass != null) {
      recordBeginMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=manager.getProperty(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=manager.getProperty(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatterClass.setRecordBeginMarker(recordBeginMarker);
      formatterClass.setRecordEndMarker(recordEndMarker);
      formatterClass.setRecordDateFormat(recordDateFormat);
      formatterClass.setRecordFieldSeparator(recordFieldSeparator);
    }
  }
 else   if (ODLLogFormatter.class.getName().equals(formatterName)) {
    ODLLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new ODLLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new ODLLogFormatter();
      setFormatter(formatterClass);
    }
    String includeFields=manager.getProperty(LogManagerService.INCLUDE_FIELDS_PROPERTY);
    formatterClass.setIncludeFields(includeFields);
  }
 else {
    try {
      setFormatter((Formatter)this.getClass().getClassLoader().loadClass(formatterName).newInstance());
    }
 catch (    Exception e) {
      lr=new LogRecord(Level.WARNING,LogFacade.INVALID_FORMATTER_CLASS_NAME);
      lr.setParameters(new Object[]{formatterName});
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      lr.setThrown(e);
      EarlyLogHandler.earlyMessages.add(lr);
    }
  }
  propValue=manager.getProperty(cname + ""String_Node_Str"");
  try {
    if (propValue != null) {
      maxHistoryFiles=Integer.parseInt(propValue);
    }
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
    lr.setParameters(new Object[]{propValue,""String_Node_Str""});
    lr.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
    EarlyLogHandler.earlyMessages.add(lr);
  }
  if (maxHistoryFiles < 0)   maxHistoryFiles=10;
}"
29201,"public RestConfigChangeListener(ServiceLocator habitat,Reloader reload,ResourceConfig rc,ServerContext sc){
  this.r=reload;
  this.sc=sc;
  RestConfig target=ResourceUtil.getRestConfig(habitat);
  if (target != null) {
    ((ObservableBean)ConfigSupport.getImpl(target)).addListener(this);
  }
}","public RestConfigChangeListener(ServiceLocator habitat,Reloader reload,ResourceConfig rc,ServerContext sc){
  this.sc=sc;
  RestConfig target=ResourceUtil.getRestConfig(habitat);
  if (target != null) {
    ((ObservableBean)ConfigSupport.getImpl(target)).addListener(this);
  }
}"
29202,"@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] events){
  ClassLoader originalContextClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader apiClassLoader=sc.getCommonClassLoader();
    Thread.currentThread().setContextClassLoader(apiClassLoader);
  }
  finally {
    Thread.currentThread().setContextClassLoader(originalContextClassLoader);
  }
  return null;
}","@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] events){
  ClassLoader originalContextClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader apiClassLoader=sc.getCommonClassLoader();
    Thread.currentThread().setContextClassLoader(apiClassLoader);
    Logger.getLogger(getClass().getName()).log(Level.WARNING,""String_Node_Str"");
  }
  finally {
    Thread.currentThread().setContextClassLoader(originalContextClassLoader);
  }
  return null;
}"
29203,"private boolean checkCache(Permission p,Epoch e){
  rLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      return checkLoadedCache(p,e);
    }
  }
  finally {
    rLock.unlock();
  }
  wLock.lock();
  if (loading) {
    wLock.unlock();
    return false;
  }
 else   if (cache != null) {
    rLock.lock();
    wLock.unlock();
    try {
      return checkLoadedCache(p,e);
    }
  finally {
      rLock.unlock();
    }
  }
 else {
    cache=null;
    loading=true;
    wLock.unlock();
  }
  Permissions nextCache=new Permissions();
  boolean setPc=false;
  String oldpcID=null;
  try {
    oldpcID=PolicyContext.getContextID();
    if (this.pcID == null || !this.pcID.equals(oldpcID)) {
      setPc=true;
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
  PermissionCollection pc=null;
  try {
    if (setPc) {
      setPolicyContextID(this.pcID);
    }
    pc=policy.getPermissions(this.codesource);
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    if (setPc) {
      try {
        setPolicyContextID(oldpcID);
      }
 catch (      Exception ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
        return false;
      }
    }
  }
  resolvePermissions(pc,p);
  Enumeration granted=pc.elements();
  while (granted.hasMoreElements()) {
    Permission i=(Permission)granted.nextElement();
    if (i.equals(allPermission)) {
      nextCache.add(i);
    }
 else {
      boolean classMatch=true;
      if (this.classes != null) {
        classMatch=false;
        Class iClazz=i.getClass();
        for (int j=0; j < this.classes.length; j++) {
          if (this.classes[j].equals(iClazz)) {
            classMatch=true;
            break;
          }
        }
      }
      if (classMatch) {
        if (this.name != null) {
          String iName=i.getName();
          if (iName != null && this.name.equals(iName)) {
            nextCache.add(i);
          }
        }
 else {
          nextCache.add(i);
        }
      }
    }
  }
  wLock.lock();
  cache=nextCache;
  loading=false;
  try {
    rLock.lock();
    wLock.unlock();
    return checkLoadedCache(p,e);
  }
  finally {
    rLock.unlock();
  }
}","private boolean checkCache(Permission p,Epoch e){
  rLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      return checkLoadedCache(p,e);
    }
  }
  finally {
    rLock.unlock();
  }
  wLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      rLock.lock();
      wLock.unlock();
      wLock=null;
      try {
        return checkLoadedCache(p,e);
      }
  finally {
        rLock.unlock();
      }
    }
 else {
      cache=null;
      loading=true;
    }
  }
  finally {
    if (wLock != null)     wLock.unlock();
    rLock.unlock();
  }
  Permissions nextCache=new Permissions();
  boolean setPc=false;
  String oldpcID=null;
  try {
    oldpcID=PolicyContext.getContextID();
    if (this.pcID == null || !this.pcID.equals(oldpcID)) {
      setPc=true;
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
  PermissionCollection pc=null;
  try {
    if (setPc) {
      setPolicyContextID(this.pcID);
    }
    pc=policy.getPermissions(this.codesource);
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    if (setPc) {
      try {
        setPolicyContextID(oldpcID);
      }
 catch (      Exception ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
        return false;
      }
    }
  }
  resolvePermissions(pc,p);
  Enumeration granted=pc.elements();
  while (granted.hasMoreElements()) {
    Permission i=(Permission)granted.nextElement();
    if (i.equals(allPermission)) {
      nextCache.add(i);
    }
 else {
      boolean classMatch=true;
      if (this.classes != null) {
        classMatch=false;
        Class iClazz=i.getClass();
        for (int j=0; j < this.classes.length; j++) {
          if (this.classes[j].equals(iClazz)) {
            classMatch=true;
            break;
          }
        }
      }
      if (classMatch) {
        if (this.name != null) {
          String iName=i.getName();
          if (iName != null && this.name.equals(iName)) {
            nextCache.add(i);
          }
        }
 else {
          nextCache.add(i);
        }
      }
    }
  }
  wLock.lock();
  try {
    cache=nextCache;
    loading=false;
    try {
      rLock.lock();
      wLock.unlock();
      wLock=null;
      return checkLoadedCache(p,e);
    }
  finally {
      rLock.unlock();
    }
  }
  finally {
    if (wLock != null)     wLock.unlock();
  }
}"
29204,"private void processPasswordValidation(PasswordValidationCallback pwdCallback){
  if (SecurityServicesUtil.getInstance().isACC()) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    pwdCallback.setResult(true);
    return;
  }
  String username=pwdCallback.getUsername();
  char[] passwd=pwdCallback.getPassword();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  try {
    String realmName=null;
    if (handlerContext != null) {
      realmName=handlerContext.getRealmName();
    }
    Subject s=LoginContextDriver.jmacLogin(pwdCallback.getSubject(),username,passwd,realmName);
    GFServerConfigProvider.setValidateRequestSubject(s);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",username);
    }
    passwd=null;
    pwdCallback.setResult(true);
  }
 catch (  LoginException le) {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"",username);
    }
    pwdCallback.setResult(false);
  }
}","private void processPasswordValidation(PasswordValidationCallback pwdCallback){
  if (SecurityServicesUtil.getInstance().isACC()) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    pwdCallback.setResult(true);
    return;
  }
  String username=pwdCallback.getUsername();
  char[] passwd=pwdCallback.getPassword();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  try {
    String realmName=null;
    if (handlerContext != null) {
      realmName=handlerContext.getRealmName();
    }
    Subject s=LoginContextDriver.jmacLogin(pwdCallback.getSubject(),username,passwd,realmName);
    GFServerConfigProvider.setValidateRequestSubject(s);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",username);
    }
    if (passwd != null) {
      for (int i=0; i < passwd.length; i++)       passwd[i]=' ';
    }
    pwdCallback.setResult(true);
  }
 catch (  LoginException le) {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"",username);
    }
    pwdCallback.setResult(false);
  }
}"
29205,"public void receive_request(ServerRequestInfo ri) throws ForwardRequest {
  SecurityContext seccontext=null;
  ServiceContext sc=null;
  int status=0;
  boolean raise_no_perm=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_request_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri,sc,orb);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri,sc,orb);
    return;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  Any SasAny=orb.create_any();
  try {
    SasAny=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(SasAny);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (sasdiscr == MTMessageInContext.value) {
    sasctxbody=createContextError(SvcContextUtils.MessageInContextMinor);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (sasdiscr != MTEstablishContext.value) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  EstablishContext ec=sasctxbody.establish_msg();
  seccontext=new SecurityContext();
  seccontext.subject=new Subject();
  try {
    if (ec.client_authentication_token.length != 0) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createAuthCred(seccontext,ec.client_authentication_token,orb);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    if (ec.identity_token != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createIdCred(seccontext,ec.identity_token);
    }
  }
 catch (  SecurityException secex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",secex);
    sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  status=secContextUtil.setSecurityContext(seccontext,ri.object_id(),ri.operation(),getServerSocket());
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + status);
  }
  if (status == SecurityContextUtil.STATUS_FAILED) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    sasctxbody=createContextError(status);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  sasctxbody=createCompleteEstablishContext(status);
  sc=createSvcContext(sasctxbody,orb);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  ri.add_reply_service_context(sc,NO_REPLACE);
}","public void receive_request(ServerRequestInfo ri) throws ForwardRequest {
  SecurityContext seccontext=null;
  ServiceContext sc=null;
  int status=0;
  boolean raise_no_perm=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_request_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri,orb);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri,orb);
    return;
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  Any SasAny;
  try {
    SasAny=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(SasAny);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (sasdiscr == MTMessageInContext.value) {
    sasctxbody=createContextError(SvcContextUtils.MessageInContextMinor);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (sasdiscr != MTEstablishContext.value) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  EstablishContext ec=sasctxbody.establish_msg();
  seccontext=new SecurityContext();
  seccontext.subject=new Subject();
  try {
    if (ec.client_authentication_token.length != 0) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createAuthCred(seccontext,ec.client_authentication_token,orb);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    if (ec.identity_token != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      createIdCred(seccontext,ec.identity_token);
    }
  }
 catch (  SecurityException secex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",secex);
    sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  status=secContextUtil.setSecurityContext(seccontext,ri.object_id(),ri.operation(),getServerSocket());
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + status);
  }
  if (status == SecurityContextUtil.STATUS_FAILED) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    sasctxbody=createContextError(status);
    sc=createSvcContext(sasctxbody,orb);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    ri.add_reply_service_context(sc,NO_REPLACE);
    throw new NO_PERMISSION();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  sasctxbody=createCompleteEstablishContext(status);
  sc=createSvcContext(sasctxbody,orb);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  ri.add_reply_service_context(sc,NO_REPLACE);
}"
29206,"private void handle_null_service_context(ServerRequestInfo ri,ServiceContext sc,ORB orb){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ri.operation());
  }
  int secStatus=secContextUtil.setSecurityContext(null,ri.object_id(),ri.operation(),getServerSocket());
  if (secStatus == SecurityContextUtil.STATUS_FAILED) {
    SASContextBody sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    throw new NO_PERMISSION();
  }
}","private void handle_null_service_context(ServerRequestInfo ri,ORB orb){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ri.operation());
  }
  int secStatus=secContextUtil.setSecurityContext(null,ri.object_id(),ri.operation(),getServerSocket());
  if (secStatus == SecurityContextUtil.STATUS_FAILED) {
    SASContextBody sasctxbody=createContextError(INVALID_MECHANISM_MAJOR,INVALID_MECHANISM_MINOR);
    ServiceContext sc=createSvcContext(sasctxbody,orb);
    ri.add_reply_service_context(sc,NO_REPLACE);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    throw new NO_PERMISSION();
  }
}"
29207,"public static String getSecurityMechanismString(CSIV2TaggedComponentInfo tCI,CompoundSecMech[] list,String name){
  StringBuffer b=new StringBuffer();
  b.append(""String_Node_Str"" + name == null ? ""String_Node_Str"" : name);
  try {
    for (int i=0; list != null && i < list.length; i++) {
      CompoundSecMech m=list[i];
      b.append(""String_Node_Str"" + i + ""String_Node_Str"");
      Enumeration<Integer> keys=assocOptions.keys();
      while (keys.hasMoreElements()) {
        Integer j=keys.nextElement();
        if (isSet(m.target_requires,j.intValue())) {
          b.append(""String_Node_Str"" + assocOptions.get(j));
        }
      }
      TLS_SEC_TRANS ssl=tCI.getSSLInformation(m);
      if (ssl != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        TransportAddress[] aList=ssl.addresses;
        for (int j=0; j < aList.length; j++) {
          TransportAddress a=aList[j];
          b.append(""String_Node_Str"" + j + ""String_Node_Str""+ a.host_name+ ""String_Node_Str""+ a.port);
        }
      }
      AS_ContextSec asContext=m.as_context_mech;
      if (asContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        try {
          if (asContext.client_authentication_mech.length > 0) {
            Oid oid=new Oid(asContext.client_authentication_mech);
            b.append(""String_Node_Str"" + oid);
          }
 else {
            b.append(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          b.append(""String_Node_Str"" + e.getMessage());
        }
 finally {
          b.append(""String_Node_Str"" + new String(asContext.target_name));
        }
      }
      SAS_ContextSec sasContext=m.sas_context_mech;
      if (sasContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"" + Arrays.toString(sasContext.privilege_authorities));
        byte[][] nameTypes=sasContext.supported_naming_mechanisms;
        for (int j=0; j < nameTypes.length; j++) {
          try {
            if (nameTypes[j].length > 0) {
              Oid oid=new Oid(nameTypes[j]);
              b.append(""String_Node_Str"" + j + ""String_Node_Str""+ oid);
            }
 else {
              b.append(""String_Node_Str"" + j + ""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            b.append(""String_Node_Str"" + j + ""String_Node_Str""+ e.getMessage());
          }
        }
        b.append(""String_Node_Str"");
        long map=sasContext.supported_identity_types;
        keys=identityTokenTypes.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.supported_identity_types,j.intValue())) {
            b.append(""String_Node_Str"" + identityTokenTypes.get(j));
            map=map - j.intValue();
          }
        }
        if (map > 0) {
          b.append(""String_Node_Str"" + map);
        }
      }
    }
    b.append(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    return (""String_Node_Str"" + traceIORsProperty);
  }
  return b.toString();
}","public static String getSecurityMechanismString(CSIV2TaggedComponentInfo tCI,CompoundSecMech[] list,String name){
  StringBuffer b=new StringBuffer();
  b.append(""String_Node_Str"" + (name == null ? ""String_Node_Str"" : name));
  try {
    for (int i=0; list != null && i < list.length; i++) {
      CompoundSecMech m=list[i];
      b.append(""String_Node_Str"" + i + ""String_Node_Str"");
      Enumeration<Integer> keys=assocOptions.keys();
      while (keys.hasMoreElements()) {
        Integer j=keys.nextElement();
        if (isSet(m.target_requires,j.intValue())) {
          b.append(""String_Node_Str"" + assocOptions.get(j));
        }
      }
      TLS_SEC_TRANS ssl=tCI.getSSLInformation(m);
      if (ssl != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        TransportAddress[] aList=ssl.addresses;
        for (int j=0; j < aList.length; j++) {
          TransportAddress a=aList[j];
          b.append(""String_Node_Str"" + j + ""String_Node_Str""+ a.host_name+ ""String_Node_Str""+ a.port);
        }
      }
      AS_ContextSec asContext=m.as_context_mech;
      if (asContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        try {
          if (asContext.client_authentication_mech.length > 0) {
            Oid oid=new Oid(asContext.client_authentication_mech);
            b.append(""String_Node_Str"" + oid);
          }
 else {
            b.append(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          b.append(""String_Node_Str"" + e.getMessage());
        }
 finally {
          b.append(""String_Node_Str"" + new String(asContext.target_name));
        }
      }
      SAS_ContextSec sasContext=m.sas_context_mech;
      if (sasContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"" + Arrays.toString(sasContext.privilege_authorities));
        byte[][] nameTypes=sasContext.supported_naming_mechanisms;
        for (int j=0; j < nameTypes.length; j++) {
          try {
            if (nameTypes[j].length > 0) {
              Oid oid=new Oid(nameTypes[j]);
              b.append(""String_Node_Str"" + j + ""String_Node_Str""+ oid);
            }
 else {
              b.append(""String_Node_Str"" + j + ""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            b.append(""String_Node_Str"" + j + ""String_Node_Str""+ e.getMessage());
          }
        }
        b.append(""String_Node_Str"");
        long map=sasContext.supported_identity_types;
        keys=identityTokenTypes.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.supported_identity_types,j.intValue())) {
            b.append(""String_Node_Str"" + identityTokenTypes.get(j));
            map=map - j.intValue();
          }
        }
        if (map > 0) {
          b.append(""String_Node_Str"" + map);
        }
      }
    }
    b.append(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    return (""String_Node_Str"" + traceIORsProperty);
  }
  return b.toString();
}"
29208,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  setMethodSpec((String)s.readFields().get(""String_Node_Str"",null));
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  setMethodSpec((String)s.readFields().get(""String_Node_Str"",null));
}"
29209,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
}"
29210,"/** 
 * This static method uses a system property to find and instantiate (via a public constructor) a provider specific factory implementation class. The name of the provider specific factory implementation class is obtained from the value of the system property, <P><code><Pre> javax.security.jacc.PolicyConfigurationFactory.provider. </Pre></code><P>
 * @return the singleton instance of the provider specificPolicyConfigurationFactory implementation class.
 * @throws java.lang.SecurityException when called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws java.lang.ClassNotFoundException when the class named by the system property could not be found including because the value of the system property has not be set.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the getPolicyConfigurationFactory method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException
 */
public static PolicyConfigurationFactory getPolicyConfigurationFactory() throws java.lang.ClassNotFoundException, javax.security.jacc.PolicyContextException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null)   sm.checkPermission(new java.security.SecurityPermission(""String_Node_Str""));
  if (pcFactory != null)   return pcFactory;
  String msg;
  final String classname[]={null};
  try {
    Class clazz=null;
    if (sm != null) {
      try {
        clazz=(Class)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public Object run() throws java.lang.Exception {
            classname[0]=System.getProperty(FACTORY_NAME);
            if (classname[0] == null) {
              String msg=""String_Node_Str"" + FACTORY_NAME;
              throw new ClassNotFoundException(msg);
            }
            return Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
          }
        }
);
      }
 catch (      PrivilegedActionException ex) {
        Exception e=ex.getException();
        if (e instanceof java.lang.ClassNotFoundException) {
          throw (java.lang.ClassNotFoundException)e;
        }
 else         if (e instanceof java.lang.InstantiationException) {
          throw (java.lang.InstantiationException)e;
        }
 else         if (e instanceof java.lang.IllegalAccessException) {
          throw (java.lang.IllegalAccessException)e;
        }
      }
    }
 else {
      classname[0]=System.getProperty(FACTORY_NAME);
      if (classname[0] == null) {
        msg=""String_Node_Str"" + FACTORY_NAME;
        throw new ClassNotFoundException(msg);
      }
      clazz=Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
    }
    Object factory=clazz.newInstance();
    pcFactory=(PolicyConfigurationFactory)factory;
  }
 catch (  java.lang.ClassNotFoundException cnfe) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassNotFoundException(msg,cnfe);
  }
catch (  java.lang.IllegalAccessException iae) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,iae);
  }
catch (  java.lang.InstantiationException ie) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,ie);
  }
catch (  java.lang.ClassCastException cce) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassCastException(msg);
  }
  return pcFactory;
}","/** 
 * This static method uses a system property to find and instantiate (via a public constructor) a provider specific factory implementation class. The name of the provider specific factory implementation class is obtained from the value of the system property, <P><code><Pre> javax.security.jacc.PolicyConfigurationFactory.provider. </Pre></code><P>
 * @return the singleton instance of the provider specificPolicyConfigurationFactory implementation class.
 * @throws java.lang.SecurityException when called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws java.lang.ClassNotFoundException when the class named by the system property could not be found including because the value of the system property has not be set.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the getPolicyConfigurationFactory method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException
 */
public static PolicyConfigurationFactory getPolicyConfigurationFactory() throws java.lang.ClassNotFoundException, javax.security.jacc.PolicyContextException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null)   sm.checkPermission(new java.security.SecurityPermission(""String_Node_Str""));
  if (pcFactory != null)   return pcFactory;
  String msg;
  final String classname[]={null};
  try {
    Class clazz=null;
    if (sm != null) {
      try {
        clazz=(Class)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public Object run() throws java.lang.Exception {
            classname[0]=System.getProperty(FACTORY_NAME);
            if (classname[0] == null) {
              String msg=""String_Node_Str"" + FACTORY_NAME;
              throw new ClassNotFoundException(msg);
            }
            return Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
          }
        }
);
      }
 catch (      PrivilegedActionException ex) {
        Exception e=ex.getException();
        if (e instanceof java.lang.ClassNotFoundException) {
          throw (java.lang.ClassNotFoundException)e;
        }
 else         if (e instanceof java.lang.InstantiationException) {
          throw (java.lang.InstantiationException)e;
        }
 else         if (e instanceof java.lang.IllegalAccessException) {
          throw (java.lang.IllegalAccessException)e;
        }
      }
    }
 else {
      classname[0]=System.getProperty(FACTORY_NAME);
      if (classname[0] == null) {
        msg=""String_Node_Str"" + FACTORY_NAME;
        throw new ClassNotFoundException(msg);
      }
      clazz=Class.forName(classname[0],true,Thread.currentThread().getContextClassLoader());
    }
    if (clazz != null) {
      Object factory=clazz.newInstance();
      pcFactory=(PolicyConfigurationFactory)factory;
    }
  }
 catch (  java.lang.ClassNotFoundException cnfe) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassNotFoundException(msg,cnfe);
  }
catch (  java.lang.IllegalAccessException iae) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,iae);
  }
catch (  java.lang.InstantiationException ie) {
    msg=""String_Node_Str"" + classname[0];
    throw new PolicyContextException(msg,ie);
  }
catch (  java.lang.ClassCastException cce) {
    msg=""String_Node_Str"" + classname[0];
    throw new ClassCastException(msg);
  }
  return pcFactory;
}"
29211,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  this.methodSpec=HttpMethodSpec.getSpec((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  this.methodSpec=HttpMethodSpec.getSpec((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}"
29212,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
}"
29213,"/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  parseActions((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}","/** 
 * readObject reads the serialized fields from the input stream and uses them to restore the permission.  This method need not be implemented if establishing the  values of the serialized fields (as is done by defaultReadObject)  is sufficient to initialize the permission.
 */
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  parseActions((String)s.readFields().get(""String_Node_Str"",null));
  this.urlPatternSpec=new URLPatternSpec(super.getName());
}"
29214,"/** 
 * Logout the user. <p> This method removes the <code>PrincipalImpl</code> that was added by the <code>commit</code> method. <p>
 * @exception LoginException if the logout fails.
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 */
public boolean logout() throws LoginException {
  subject.getPrincipals().remove(userPrincipal);
  succeeded=false;
  succeeded=commitSucceeded;
  username=null;
  if (password != null) {
    for (int i=0; i < password.length; i++) {
      password[i]=' ';
    }
    password=null;
  }
  userPrincipal=null;
  return true;
}","/** 
 * Logout the user. <p> This method removes the <code>PrincipalImpl</code> that was added by the <code>commit</code> method. <p>
 * @exception LoginException if the logout fails.
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 */
public boolean logout() throws LoginException {
  subject.getPrincipals().remove(userPrincipal);
  succeeded=commitSucceeded;
  username=null;
  if (password != null) {
    for (int i=0; i < password.length; i++) {
      password[i]=' ';
    }
    password=null;
  }
  userPrincipal=null;
  return true;
}"
29215,"private void processPasswordValidation(PasswordValidationCallback pwdCallback){
  if (SecurityServicesUtil.getInstance().isACC()) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    pwdCallback.setResult(true);
    return;
  }
  String username=pwdCallback.getUsername();
  char[] passwd=pwdCallback.getPassword();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  try {
    String realmName=null;
    if (handlerContext != null) {
      realmName=handlerContext.getRealmName();
    }
    Subject s=LoginContextDriver.jmacLogin(pwdCallback.getSubject(),username,passwd,realmName);
    GFServerConfigProvider.setValidateRequestSubject(s);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",username);
    }
    passwd=null;
    pwdCallback.setResult(true);
  }
 catch (  LoginException le) {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"",username);
    }
    pwdCallback.setResult(false);
  }
}","private void processPasswordValidation(PasswordValidationCallback pwdCallback){
  if (SecurityServicesUtil.getInstance().isACC()) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    pwdCallback.setResult(true);
    return;
  }
  String username=pwdCallback.getUsername();
  char[] passwd=pwdCallback.getPassword();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  try {
    String realmName=null;
    if (handlerContext != null) {
      realmName=handlerContext.getRealmName();
    }
    Subject s=LoginContextDriver.jmacLogin(pwdCallback.getSubject(),username,passwd,realmName);
    GFServerConfigProvider.setValidateRequestSubject(s);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",username);
    }
    if (passwd != null) {
      for (int i=0; i < passwd.length; i++)       passwd[i]=' ';
    }
    pwdCallback.setResult(true);
  }
 catch (  LoginException le) {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"",username);
    }
    pwdCallback.setResult(false);
  }
}"
29216,"public Collection<? extends Sniffer> getSniffers(final ArchiveHandler handler,Collection<? extends Sniffer> sniffers,DeploymentContext context){
  if (sniffers == null) {
    if (handler instanceof CompositeHandler) {
      ((CompositeHandler)handler).initCompositeMetaData(context);
      context.getAppProps().setProperty(ServerTags.IS_COMPOSITE,""String_Node_Str"");
    }
    sniffers=snifferManager.getSniffers(context);
  }
  context.addTransientAppMetaData(DeploymentProperties.SNIFFERS,sniffers);
  snifferManager.validateSniffers(sniffers,context);
  return sniffers;
}","public Collection<? extends Sniffer> getSniffers(final ArchiveHandler handler,Collection<? extends Sniffer> sniffers,DeploymentContext context){
  if (handler == null) {
    return Collections.EMPTY_LIST;
  }
  if (sniffers == null) {
    if (handler instanceof CompositeHandler) {
      ((CompositeHandler)handler).initCompositeMetaData(context);
      context.getAppProps().setProperty(ServerTags.IS_COMPOSITE,""String_Node_Str"");
    }
    sniffers=snifferManager.getSniffers(context);
  }
  context.addTransientAppMetaData(DeploymentProperties.SNIFFERS,sniffers);
  snifferManager.validateSniffers(sniffers,context);
  return sniffers;
}"
29217,"static String getMessageId(LogRecord lr){
  String msg=lr.getMessage();
  if (msg != null & !msg.isEmpty()) {
    ResourceBundle rb=lr.getResourceBundle();
    if (rb != null) {
      if (rb.containsKey(msg)) {
        String msgBody=lr.getResourceBundle().getString(msg);
        if (msgBody != null && !msgBody.isEmpty()) {
          return msg;
        }
      }
    }
  }
  return null;
}","static String getMessageId(LogRecord lr){
  String msg=lr.getMessage();
  if (msg != null && !msg.isEmpty()) {
    ResourceBundle rb=lr.getResourceBundle();
    if (rb != null) {
      if (rb.containsKey(msg)) {
        String msgBody=lr.getResourceBundle().getString(msg);
        if (msgBody != null && !msgBody.isEmpty()) {
          return msg;
        }
      }
    }
  }
  return null;
}"
29218,"@Override public int compare(ColumnInfo o1,ColumnInfo o2){
  return Integer.compare(o1.order,o2.order);
}","@Override public int compare(ColumnInfo o1,ColumnInfo o2){
  return Integer.valueOf(o1.order).compareTo(Integer.valueOf(o2.order));
}"
29219,"@Override public void execute(final AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  if (parentBean == null) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",resolver.getClass().toString(),parentType,targetType);
    report.failure(logger,msg);
    return;
  }
  if (outputOpts != null) {
    longOpt=true;
  }
  List<ColumnInfo> cols=null;
  ColumnFormatter colfm=null;
  if (longOpt) {
    cols=getColumnInfo(targetType);
    if (!isOutputOptsValid(cols,outputOpts)) {
      String collist=arrayToString(getColumnHeadings(cols));
      String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",collist);
      report.failure(logger,msg);
      return;
    }
    cols=filterColumns(cols,outputOpts);
    Collections.sort(cols,new Comparator<ColumnInfo>(){
      @Override public int compare(      ColumnInfo o1,      ColumnInfo o2){
        return Integer.compare(o1.order,o2.order);
      }
    }
);
    colfm=headerOpt ? new ColumnFormatter(getColumnHeadings(cols)) : new ColumnFormatter();
  }
  List<Map> list=new ArrayList<Map>();
  Properties props=report.getExtraProperties();
  if (props == null) {
    props=new Properties();
    report.setExtraProperties(props);
  }
  try {
    List<ConfigBeanProxy> children=(List<ConfigBeanProxy>)targetMethod.invoke(parentBean);
    for (    ConfigBeanProxy child : children) {
      Map<String,String> map=new HashMap<String,String>();
      if (longOpt) {
        String data[]=getColumnData(child,cols);
        colfm.addRow(data);
        for (int i=0; i < data.length; i++) {
          map.put(cols.get(i).xmlName,data[i]);
        }
      }
 else {
        Dom childDom=Dom.unwrap(child);
        String key=childDom.getKey();
        if (key == null) {
          String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetType);
          report.failure(logger,msg);
          return;
        }
        report.addSubActionsReport().setMessage(key);
        map.put(""String_Node_Str"",key);
      }
      list.add(map);
    }
    if (longOpt) {
      report.appendMessage(colfm.toString());
    }
    if (!list.isEmpty()) {
      props.put(elementName(Dom.unwrap(parentBean).document,parentType,targetType),list);
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetMethod.toString(),e.toString());
    report.failure(logger,msg,e);
  }
}","@Override public void execute(final AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  if (parentBean == null) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",resolver.getClass().toString(),parentType,targetType);
    report.failure(logger,msg);
    return;
  }
  List<ColumnInfo> cols=null;
  ColumnFormatter colfm=null;
  if (longOpt) {
    cols=getColumnInfo(targetType);
    if (!isOutputOptsValid(cols,outputOpts)) {
      String collist=arrayToString(getColumnHeadings(cols));
      String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",collist);
      report.failure(logger,msg);
      return;
    }
    cols=filterColumns(cols,outputOpts);
    Collections.sort(cols,new Comparator<ColumnInfo>(){
      @Override public int compare(      ColumnInfo o1,      ColumnInfo o2){
        return Integer.valueOf(o1.order).compareTo(Integer.valueOf(o2.order));
      }
    }
);
    colfm=headerOpt ? new ColumnFormatter(getColumnHeadings(cols)) : new ColumnFormatter();
  }
  List<Map> list=new ArrayList<Map>();
  Properties props=report.getExtraProperties();
  if (props == null) {
    props=new Properties();
    report.setExtraProperties(props);
  }
  try {
    List<ConfigBeanProxy> children=(List<ConfigBeanProxy>)targetMethod.invoke(parentBean);
    for (    ConfigBeanProxy child : children) {
      Map<String,String> map=new HashMap<String,String>();
      if (longOpt) {
        String data[]=getColumnData(child,cols);
        colfm.addRow(data);
        for (int i=0; i < data.length; i++) {
          map.put(cols.get(i).xmlName,data[i]);
        }
      }
 else {
        Dom childDom=Dom.unwrap(child);
        String key=childDom.getKey();
        if (key == null) {
          String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetType);
          report.failure(logger,msg);
          return;
        }
        report.addSubActionsReport().setMessage(key);
        map.put(""String_Node_Str"",key);
      }
      list.add(map);
    }
    if (longOpt) {
      report.appendMessage(colfm.toString());
    }
    if (!list.isEmpty()) {
      props.put(elementName(Dom.unwrap(parentBean).document,parentType,targetType),list);
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetMethod.toString(),e.toString());
    report.failure(logger,msg,e);
  }
}"
29220,"@Override public Collection<? extends AccessCheck> getAccessChecks(){
  final Collection<AccessCheck> checks=new ArrayList<AccessCheck>();
  checks.add(new AccessCheck(AccessRequired.Util.resourceNameFromConfigBeanProxy(parentBean),""String_Node_Str""));
  return checks;
}","@Override public Collection<? extends AccessCheck> getAccessChecks(){
  final Collection<AccessCheck> checks=new ArrayList<AccessCheck>();
  checks.add(new AccessCheck(AccessRequired.Util.resourceNameFromConfigBeanProxy(parentBean),""String_Node_Str""));
  if (longOpt) {
    try {
      List<ConfigBeanProxy> children=(List<ConfigBeanProxy>)targetMethod.invoke(parentBean);
      for (      ConfigBeanProxy child : children) {
        checks.add(new AccessCheck(AccessRequired.Util.resourceNameFromConfigBeanProxy(child),""String_Node_Str""));
      }
    }
 catch (    Exception ex) {
      String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",commandName,ex.getMessage());
      logger.severe(msg);
      throw new RuntimeException(msg,ex);
    }
  }
  return checks;
}"
29221,"@Override public void postConstruct(){
  super.postConstruct();
  listing=targetMethod.getAnnotation(Listing.class);
  resolverType=listing.resolver();
  try {
    cmdModel=new GenericCommandModel(targetType,false,null,listing.i18n(),new LocalStringManagerImpl(targetType),habitat.<DomDocument>getService(DomDocument.class),commandName,false,listing.resolver(),GenericListCommand.class);
    targetModel=habitat.<DomDocument>getService(DomDocument.class).buildModel(targetType);
    if (logger.isLoggable(level)) {
      for (      String paramName : cmdModel.getParametersNames()) {
        CommandModel.ParamModel param=cmdModel.getModelFor(paramName);
        logger.log(Level.FINE,""String_Node_Str"",param.getName());
      }
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",commandName,e.getMessage());
    logger.severe(msg);
    throw new RuntimeException(msg,e);
  }
}","@Override public void postConstruct(){
  super.postConstruct();
  listing=targetMethod.getAnnotation(Listing.class);
  resolverType=listing.resolver();
  try {
    cmdModel=new GenericCommandModel(targetType,false,null,listing.i18n(),new LocalStringManagerImpl(targetType),habitat.<DomDocument>getService(DomDocument.class),commandName,false,listing.resolver(),GenericListCommand.class);
    targetModel=habitat.<DomDocument>getService(DomDocument.class).buildModel(targetType);
    if (logger.isLoggable(level)) {
      for (      String paramName : cmdModel.getParametersNames()) {
        CommandModel.ParamModel param=cmdModel.getModelFor(paramName);
        logger.log(Level.FINE,""String_Node_Str"",param.getName());
      }
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",commandName,e.getMessage());
    logger.severe(msg);
    throw new RuntimeException(msg,e);
  }
  if (outputOpts != null) {
    longOpt=true;
  }
}"
29222,"private List<String> getHostAndPort(HttpRequest request) throws IOException {
  boolean isWebServerRequest=false;
  Enumeration headerNames=((HttpServletRequest)request.getRequest()).getHeaderNames();
  String[] hostPort=null;
  boolean isHeaderPresent=false;
  while (headerNames.hasMoreElements()) {
    String headerName=(String)headerNames.nextElement();
    String hostVal;
    if (headerName.equalsIgnoreCase(""String_Node_Str"")) {
      hostVal=((HttpServletRequest)request.getRequest()).getHeader(headerName);
      isHeaderPresent=true;
      hostPort=hostVal.split(""String_Node_Str"");
    }
  }
  if (hostPort == null) {
    throw new ProtocolException(rb.getString(""String_Node_Str""));
  }
  boolean isHostPortNullOrEmpty=((hostPort.length <= 1) || (hostPort[1] == null || hostPort[1].trim().isEmpty()));
  if (!isHeaderPresent) {
    isWebServerRequest=false;
  }
 else   if (isHostPortNullOrEmpty) {
    isWebServerRequest=true;
  }
 else {
    boolean breakFromLoop=false;
    for (    NetworkListener nwListener : nwListeners.getNetworkListener()) {
      String nwAddress=nwListener.getAddress();
      InetAddress[] localHostAdresses=new InetAddress[10];
      if (nwAddress == null || nwAddress.equals(""String_Node_Str"")) {
        nwAddress=NetUtils.getCanonicalHostName();
        if (!nwAddress.equals(hostPort[0])) {
          localHostAdresses=NetUtils.getHostAddresses();
          InetAddress hostAddress=InetAddress.getByName(hostPort[0]);
          for (          InetAddress inetAdress : localHostAdresses) {
            if (inetAdress.equals(hostAddress)) {
              String nwPort=nwListener.getPort();
              if (!nwPort.equals(hostPort[1])) {
                isWebServerRequest=true;
              }
 else {
                isWebServerRequest=false;
                breakFromLoop=true;
                break;
              }
            }
          }
        }
 else {
          String nwPort=nwListener.getPort();
          if (!nwPort.equals(hostPort[1])) {
            isWebServerRequest=true;
          }
 else {
            isWebServerRequest=false;
            breakFromLoop=true;
          }
        }
      }
      if (breakFromLoop && !isWebServerRequest) {
        break;
      }
    }
  }
  String serverHost=request.getRequest().getServerName();
  int redirectPort=request.getConnector().getRedirectPort();
  if (isWebServerRequest) {
    serverHost=hostPort[0];
    if (isHostPortNullOrEmpty) {
      redirectPort=-1;
    }
 else {
      redirectPort=Integer.parseInt(hostPort[1]);
    }
  }
  List<String> hostAndPort=new ArrayList<String>();
  hostAndPort.add(serverHost);
  hostAndPort.add(String.valueOf(redirectPort));
  return hostAndPort;
}","private List<String> getHostAndPort(HttpRequest request) throws IOException {
  boolean isWebServerRequest=false;
  Enumeration headerNames=((HttpServletRequest)request.getRequest()).getHeaderNames();
  String[] hostPort=null;
  boolean isHeaderPresent=false;
  while (headerNames.hasMoreElements()) {
    String headerName=(String)headerNames.nextElement();
    String hostVal;
    if (headerName.equalsIgnoreCase(""String_Node_Str"")) {
      hostVal=((HttpServletRequest)request.getRequest()).getHeader(headerName);
      isHeaderPresent=true;
      hostPort=hostVal.split(""String_Node_Str"");
    }
  }
  if (hostPort == null) {
    throw new ProtocolException(rb.getString(""String_Node_Str""));
  }
  boolean isHostPortNullOrEmpty=((hostPort.length <= 1) || (hostPort[1] == null || hostPort[1].trim().isEmpty()));
  if (!isHeaderPresent) {
    isWebServerRequest=false;
  }
 else   if (isHostPortNullOrEmpty) {
    isWebServerRequest=true;
  }
 else {
    boolean breakFromLoop=false;
    for (    NetworkListener nwListener : nwListeners.getNetworkListener()) {
      String nwAddress=nwListener.getAddress();
      InetAddress[] localHostAdresses;
      if (nwAddress == null || nwAddress.equals(""String_Node_Str"")) {
        nwAddress=NetUtils.getCanonicalHostName();
        if (!nwAddress.equals(hostPort[0])) {
          localHostAdresses=NetUtils.getHostAddresses();
          InetAddress hostAddress=InetAddress.getByName(hostPort[0]);
          for (          InetAddress inetAdress : localHostAdresses) {
            if (inetAdress.equals(hostAddress)) {
              String nwPort=nwListener.getPort();
              if (!nwPort.equals(hostPort[1])) {
                isWebServerRequest=true;
              }
 else {
                isWebServerRequest=false;
                breakFromLoop=true;
                break;
              }
            }
          }
        }
 else {
          String nwPort=nwListener.getPort();
          if (!nwPort.equals(hostPort[1])) {
            isWebServerRequest=true;
          }
 else {
            isWebServerRequest=false;
            breakFromLoop=true;
          }
        }
      }
      if (breakFromLoop && !isWebServerRequest) {
        break;
      }
    }
  }
  String serverHost=request.getRequest().getServerName();
  int redirectPort=request.getConnector().getRedirectPort();
  if (isWebServerRequest) {
    serverHost=hostPort[0];
    if (isHostPortNullOrEmpty) {
      redirectPort=-1;
    }
 else {
      redirectPort=Integer.parseInt(hostPort[1]);
    }
  }
  List<String> hostAndPort=new ArrayList<String>();
  hostAndPort.add(serverHost);
  hostAndPort.add(String.valueOf(redirectPort));
  return hostAndPort;
}"
29223,"/** 
 * Checks whether or not authentication is needed. Returns an int, one of AUTHENTICATE_NOT_NEEDED, AUTHENTICATE_NEEDED, or AUTHENTICATED_NOT_AUTHORIZED
 * @param request Request we are processing
 * @param response Response we are creating
 * @param constraints Security constraint we are enforcing
 * @param disableProxyCaching whether or not to disable proxy caching forprotected resources.
 * @param securePagesWithPragma true if we add headers whichare incompatible with downloading office documents in IE under SSL but which fix a caching problem in Mozilla.
 * @param ssoEnabled true if sso is enabled
 * @exception IOException if an input/output error occurs
 */
public int preAuthenticateCheck(HttpRequest request,HttpResponse response,SecurityConstraint[] constraints,boolean disableProxyCaching,boolean securePagesWithPragma,boolean ssoEnabled) throws IOException {
  boolean isGranted=false;
  try {
    HttpServletRequest hsr=(HttpServletRequest)request.getRequest();
    if (hsr.getUserPrincipal() == null) {
      SecurityContext.setUnauthenticatedContext();
    }
    if (helper != null && helper.getServerAuthConfig() != null) {
      return Realm.AUTHENTICATE_NEEDED;
    }
    isGranted=invokeWebSecurityManager(request,response,constraints);
  }
 catch (  IOException iex) {
    throw iex;
  }
catch (  Throwable ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
  if (isGranted) {
    HashMap sharedState;
    boolean delegateSessionMgmt=false;
    if (((HttpServletRequest)request).getUserPrincipal() != null) {
      disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
      if (ssoEnabled) {
        HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
        WebSecurityManager webSecMgr=getWebSecurityManager(true);
        if (!webSecMgr.permitAll(hreq)) {
          hreq.getSession(true);
        }
      }
    }
    return Realm.AUTHENTICATE_NOT_NEEDED;
  }
 else   if (((HttpServletRequest)request).getUserPrincipal() != null) {
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_FORBIDDEN);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
 else {
    disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
    return Realm.AUTHENTICATE_NEEDED;
  }
}","/** 
 * Checks whether or not authentication is needed. Returns an int, one of AUTHENTICATE_NOT_NEEDED, AUTHENTICATE_NEEDED, or AUTHENTICATED_NOT_AUTHORIZED
 * @param request Request we are processing
 * @param response Response we are creating
 * @param constraints Security constraint we are enforcing
 * @param disableProxyCaching whether or not to disable proxy caching forprotected resources.
 * @param securePagesWithPragma true if we add headers whichare incompatible with downloading office documents in IE under SSL but which fix a caching problem in Mozilla.
 * @param ssoEnabled true if sso is enabled
 * @exception IOException if an input/output error occurs
 */
public int preAuthenticateCheck(HttpRequest request,HttpResponse response,SecurityConstraint[] constraints,boolean disableProxyCaching,boolean securePagesWithPragma,boolean ssoEnabled) throws IOException {
  boolean isGranted=false;
  try {
    HttpServletRequest hsr=(HttpServletRequest)request.getRequest();
    if (hsr.getUserPrincipal() == null) {
      SecurityContext.setUnauthenticatedContext();
    }
    if (helper != null && helper.getServerAuthConfig() != null) {
      return Realm.AUTHENTICATE_NEEDED;
    }
    isGranted=invokeWebSecurityManager(request,response,constraints);
  }
 catch (  IOException iex) {
    throw iex;
  }
catch (  Throwable ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
  if (isGranted) {
    boolean delegateSessionMgmt=false;
    if (((HttpServletRequest)request).getUserPrincipal() != null) {
      disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
      if (ssoEnabled) {
        HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
        WebSecurityManager webSecMgr=getWebSecurityManager(true);
        if (!webSecMgr.permitAll(hreq)) {
          hreq.getSession(true);
        }
      }
    }
    return Realm.AUTHENTICATE_NOT_NEEDED;
  }
 else   if (((HttpServletRequest)request).getUserPrincipal() != null) {
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_FORBIDDEN);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
 else {
    disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
    return Realm.AUTHENTICATE_NEEDED;
  }
}"
29224,"public static WebTarget targetWithQueryParams(WebTarget target,MultivaluedMap<String,Object> paramMap){
  for (  Map.Entry<String,List<Object>> param : paramMap.entrySet()) {
    target=target.queryParam(param.getKey(),param.getValue());
  }
  return target;
}","public static WebTarget targetWithQueryParams(WebTarget target,Map<String,Object> paramMap){
  for (  Map.Entry<String,Object> param : paramMap.entrySet()) {
    target=target.queryParam(param.getKey(),param.getValue());
  }
  return target;
}"
29225,"public static Response getRequestFromServlet(HttpServletRequest request,String endpoint,Map<String,Object> attrs){
  String token=(String)request.getSession().getAttribute(AdminConsoleAuthModule.REST_TOKEN);
  WebTarget target=targetWithQueryParams(JERSEY_CLIENT.target(endpoint),buildMultivalueMap(attrs));
  Response cr=target.request().cookie(new Cookie(REST_TOKEN_COOKIE,token)).get(Response.class);
  return cr;
}","public static Response getRequestFromServlet(HttpServletRequest request,String endpoint,Map<String,Object> attrs){
  String token=(String)request.getSession().getAttribute(AdminConsoleAuthModule.REST_TOKEN);
  WebTarget target=targetWithQueryParams(JERSEY_CLIENT.target(endpoint),attrs);
  Response cr=target.request().cookie(new Cookie(REST_TOKEN_COOKIE,token)).get(Response.class);
  return cr;
}"
29226,"public static RestResponse delete(String address,Map<String,Object> payload){
  WebTarget target=getJerseyClient().target(address);
  Response cr=targetWithQueryParams(target,buildMultivalueMap(payload)).request(RESPONSE_TYPE).cookie(new Cookie(REST_TOKEN_COOKIE,getRestToken())).delete(Response.class);
  return RestResponse.getRestResponse(cr);
}","public static RestResponse delete(String address,Map<String,Object> payload){
  WebTarget target=getJerseyClient().target(address);
  Response cr=targetWithQueryParams(target,payload).request(RESPONSE_TYPE).cookie(new Cookie(REST_TOKEN_COOKIE,getRestToken())).delete(Response.class);
  return RestResponse.getRestResponse(cr);
}"
29227,"public static RestResponse get(String address,Map<String,Object> payload){
  if (address.startsWith(""String_Node_Str"")) {
    address=FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(""String_Node_Str"") + address;
  }
  WebTarget target=targetWithQueryParams(getJerseyClient().target(address),buildMultivalueMap(payload));
  Response resp=target.request(RESPONSE_TYPE).cookie(new Cookie(REST_TOKEN_COOKIE,getRestToken())).get(Response.class);
  return RestResponse.getRestResponse(resp);
}","public static RestResponse get(String address,Map<String,Object> payload){
  if (address.startsWith(""String_Node_Str"")) {
    address=FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(""String_Node_Str"") + address;
  }
  WebTarget target=targetWithQueryParams(getJerseyClient().target(address),payload);
  Response resp=target.request(RESPONSE_TYPE).cookie(new Cookie(REST_TOKEN_COOKIE,getRestToken())).get(Response.class);
  return RestResponse.getRestResponse(resp);
}"
29228,"public static void getRestRequestFromServlet(HttpServletRequest request,String endpoint,Map<String,Object> attrs,boolean quiet,boolean throwException){
  String token=(String)request.getSession().getAttribute(AdminConsoleAuthModule.REST_TOKEN);
  WebTarget target=targetWithQueryParams(JERSEY_CLIENT.target(endpoint),buildMultivalueMap(attrs));
  Response cr=target.request(RESPONSE_TYPE).cookie(new Cookie(REST_TOKEN_COOKIE,token)).get(Response.class);
  RestResponse rr=RestResponse.getRestResponse(cr);
  parseResponse(rr,null,endpoint,attrs,quiet,throwException);
}","public static void getRestRequestFromServlet(HttpServletRequest request,String endpoint,Map<String,Object> attrs,boolean quiet,boolean throwException){
  String token=(String)request.getSession().getAttribute(AdminConsoleAuthModule.REST_TOKEN);
  WebTarget target=targetWithQueryParams(JERSEY_CLIENT.target(endpoint),attrs);
  Response cr=target.request(RESPONSE_TYPE).cookie(new Cookie(REST_TOKEN_COOKIE,token)).get(Response.class);
  RestResponse rr=RestResponse.getRestResponse(cr);
  parseResponse(rr,null,endpoint,attrs,quiet,throwException);
}"
29229,"@Override public void deployResource(Object resource) throws Exception {
  final MailSessionDescriptor desc=(MailSessionDescriptor)resource;
  String resourceName=ConnectorsUtil.deriveResourceName(desc.getResourceId(),desc.getName(),desc.getResourceType());
  if (desc != null) {
    MailResource mailResource=new MyMailResource(desc,resourceName);
    getDeployer(mailResource).deployResource(mailResource);
    _logger.log(Level.FINE,""String_Node_Str"" + desc.getName() + ""String_Node_Str"");
  }
 else {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
}","@Override public void deployResource(Object resource) throws Exception {
  final MailSessionDescriptor desc=(MailSessionDescriptor)resource;
  String resourceName=ConnectorsUtil.deriveResourceName(desc.getResourceId(),desc.getName(),desc.getResourceType());
  MailResource mailResource=new MyMailResource(desc,resourceName);
  getDeployer(mailResource).deployResource(mailResource);
  _logger.log(Level.FINE,""String_Node_Str"" + desc.getName() + ""String_Node_Str"");
}"
29230,"public Object prepareInvocation(boolean doPreInvoke) throws Exception {
  ComponentInvocation inv=null;
  AdapterInvocationInfo adapterInvInfo=new AdapterInvocationInfo();
  if (adapter == null) {
synchronized (this) {
      if (adapter == null) {
        try {
          EjbDescriptor ejbDesc=endpoint.getEjbComponentImpl();
          Iterator<ResourceReferenceDescriptor> it=ejbDesc.getResourceReferenceDescriptors().iterator();
          while (it.hasNext()) {
            ResourceReferenceDescriptor r=it.next();
            if (r.isWebServiceContext()) {
              Iterator<InjectionTarget> iter=r.getInjectionTargets().iterator();
              boolean matchingClassFound=false;
              while (iter.hasNext()) {
                InjectionTarget target=iter.next();
                if (ejbDesc.getEjbClassName().equals(target.getClassName())) {
                  matchingClassFound=true;
                  break;
                }
              }
              if (!matchingClassFound) {
                continue;
              }
              try {
                javax.naming.InitialContext ic=new javax.naming.InitialContext();
                wsCtxt=(WebServiceContextImpl)ic.lookup(""String_Node_Str"" + r.getName());
              }
 catch (              Throwable t) {
                logger.fine(""String_Node_Str"" + t.getCause());
              }
            }
          }
          if (wsCtxt == null) {
            wsCtxt=new WebServiceContextImpl();
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
          logger.severe(""String_Node_Str"" + endpoint.getName() + ""String_Node_Str""+ t.getMessage());
          return null;
        }
      }
    }
  }
  if (doPreInvoke) {
    inv=container.startInvocation();
    adapterInvInfo.setInv(inv);
  }
  if (!handlersConfigured && doPreInvoke) {
synchronized (this) {
      if (!handlersConfigured) {
        try {
          WsUtil wsu=new WsUtil();
          String implClassName=endpoint.getEjbComponentImpl().getEjbClassName();
          Class clazz=container.getEndpointClassLoader().loadClass(implClassName);
          String givenBinding=endpoint.getProtocolBinding();
          SDDocumentSource primaryWsdl=null;
          Collection docs=null;
          if (endpoint.getWebService().hasWsdlFile()) {
            WebServiceContractImpl wscImpl=WebServiceContractImpl.getInstance();
            ApplicationRegistry appRegistry=wscImpl.getApplicationRegistry();
            ApplicationInfo appInfo=appRegistry.get(endpoint.getBundleDescriptor().getApplication().getRegistrationName());
            URI deployedDir=appInfo.getSource().getURI();
            URL pkgedWsdl;
            if (deployedDir != null) {
              if (endpoint.getBundleDescriptor().getApplication().isVirtual()) {
                pkgedWsdl=deployedDir.resolve(endpoint.getWebService().getWsdlFileUri()).toURL();
              }
 else {
                String moduleUri1=endpoint.getBundleDescriptor().getModuleDescriptor().getArchiveUri();
                String moduleUri=FileUtils.makeFriendlyFilenameExtension(moduleUri1);
                pkgedWsdl=deployedDir.resolve(moduleUri + ""String_Node_Str"" + endpoint.getWebService().getWsdlFileUri()).toURL();
              }
            }
 else {
              pkgedWsdl=endpoint.getWebService().getWsdlFileUrl();
            }
            if (pkgedWsdl != null) {
              primaryWsdl=SDDocumentSource.create(pkgedWsdl);
              docs=wsu.getWsdlsAndSchemas(pkgedWsdl);
            }
          }
          JAXWSContainer container=new JAXWSContainer(null,endpoint);
          java.net.URL catalogURL=clazz.getResource('/' + endpoint.getBundleDescriptor().getDeploymentDescriptorDir() + File.separator+ ""String_Node_Str"");
          boolean mtomEnabled=wsu.getMtom(endpoint);
          WSBinding binding=null;
          ArrayList<WebServiceFeature> wsFeatures=new ArrayList<WebServiceFeature>();
          if (mtomEnabled) {
            int mtomThreshold=endpoint.getMtomThreshold() != null ? new Integer(endpoint.getMtomThreshold()) : 0;
            MTOMFeature mtom=new MTOMFeature(true,mtomThreshold);
            wsFeatures.add(mtom);
          }
          Addressing addressing=endpoint.getAddressing();
          if (endpoint.getAddressing() != null) {
            AddressingFeature addressingFeature=new AddressingFeature(addressing.isEnabled(),addressing.isRequired(),getResponse(addressing.getResponses()));
            wsFeatures.add(addressingFeature);
          }
          if (wsFeatures.size() > 0) {
            binding=BindingID.parse(givenBinding).createBinding(wsFeatures.toArray(new WebServiceFeature[wsFeatures.size()]));
          }
 else {
            binding=BindingID.parse(givenBinding).createBinding();
          }
          wsu.configureJAXWSServiceHandlers(endpoint,endpoint.getProtocolBinding(),binding);
          Invoker invoker=new InstanceResolverImpl(clazz).createInvoker();
          WSEndpoint wsep=WSEndpoint.create(clazz,false,new EjbInvokerImpl(clazz,invoker,webServiceEndpointServant,wsCtxt),endpoint.getServiceName(),endpoint.getWsdlPort(),container,binding,primaryWsdl,docs,catalogURL);
          String uri=endpoint.getEndpointAddressUri();
          String urlPattern=uri.startsWith(""String_Node_Str"") ? uri : ""String_Node_Str"" + uri;
          if (adapterList == null) {
            adapterList=new ServletAdapterList();
          }
          adapter=adapterList.createAdapter(endpoint.getName(),urlPattern,wsep);
          handlersConfigured=true;
        }
 catch (        Throwable t) {
          logger.log(Level.SEVERE,""String_Node_Str"" + endpoint.getName() + ""String_Node_Str"",t);
          adapter=null;
        }
      }
    }
  }
synchronized (this) {
    addWSContextInfo(wsCtxt);
    if (inv != null) {
      EJBInvocation ejbInv=(EJBInvocation)inv;
      ejbInv.setWebServiceContext(wsCtxt);
    }
  }
  adapterInvInfo.setAdapter(adapter);
  return adapterInvInfo;
}","public Object prepareInvocation(boolean doPreInvoke) throws Exception {
  ComponentInvocation inv=null;
  AdapterInvocationInfo adapterInvInfo=new AdapterInvocationInfo();
  if (adapter == null) {
synchronized (this) {
      if (adapter == null) {
        try {
          EjbDescriptor ejbDesc=endpoint.getEjbComponentImpl();
          Iterator<ResourceReferenceDescriptor> it=ejbDesc.getResourceReferenceDescriptors().iterator();
          while (it.hasNext()) {
            ResourceReferenceDescriptor r=it.next();
            if (r.isWebServiceContext()) {
              Iterator<InjectionTarget> iter=r.getInjectionTargets().iterator();
              boolean matchingClassFound=false;
              while (iter.hasNext()) {
                InjectionTarget target=iter.next();
                if (ejbDesc.getEjbClassName().equals(target.getClassName())) {
                  matchingClassFound=true;
                  break;
                }
              }
              if (!matchingClassFound) {
                continue;
              }
              try {
                javax.naming.InitialContext ic=new javax.naming.InitialContext();
                wsCtxt=(WebServiceContextImpl)ic.lookup(""String_Node_Str"" + r.getName());
              }
 catch (              Throwable t) {
                logger.fine(""String_Node_Str"" + t.getCause());
              }
            }
          }
          if (wsCtxt == null) {
            wsCtxt=new WebServiceContextImpl();
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
          logger.severe(""String_Node_Str"" + endpoint.getName() + ""String_Node_Str""+ t.getMessage());
          return null;
        }
      }
    }
  }
  if (doPreInvoke) {
    inv=container.startInvocation();
    adapterInvInfo.setInv(inv);
  }
synchronized (this) {
    if (!handlersConfigured && doPreInvoke) {
      try {
        WsUtil wsu=new WsUtil();
        String implClassName=endpoint.getEjbComponentImpl().getEjbClassName();
        Class clazz=container.getEndpointClassLoader().loadClass(implClassName);
        String givenBinding=endpoint.getProtocolBinding();
        SDDocumentSource primaryWsdl=null;
        Collection docs=null;
        if (endpoint.getWebService().hasWsdlFile()) {
          WebServiceContractImpl wscImpl=WebServiceContractImpl.getInstance();
          ApplicationRegistry appRegistry=wscImpl.getApplicationRegistry();
          ApplicationInfo appInfo=appRegistry.get(endpoint.getBundleDescriptor().getApplication().getRegistrationName());
          URI deployedDir=appInfo.getSource().getURI();
          URL pkgedWsdl;
          if (deployedDir != null) {
            if (endpoint.getBundleDescriptor().getApplication().isVirtual()) {
              pkgedWsdl=deployedDir.resolve(endpoint.getWebService().getWsdlFileUri()).toURL();
            }
 else {
              String moduleUri1=endpoint.getBundleDescriptor().getModuleDescriptor().getArchiveUri();
              String moduleUri=FileUtils.makeFriendlyFilenameExtension(moduleUri1);
              pkgedWsdl=deployedDir.resolve(moduleUri + ""String_Node_Str"" + endpoint.getWebService().getWsdlFileUri()).toURL();
            }
          }
 else {
            pkgedWsdl=endpoint.getWebService().getWsdlFileUrl();
          }
          if (pkgedWsdl != null) {
            primaryWsdl=SDDocumentSource.create(pkgedWsdl);
            docs=wsu.getWsdlsAndSchemas(pkgedWsdl);
          }
        }
        JAXWSContainer container=new JAXWSContainer(null,endpoint);
        java.net.URL catalogURL=clazz.getResource('/' + endpoint.getBundleDescriptor().getDeploymentDescriptorDir() + File.separator+ ""String_Node_Str"");
        boolean mtomEnabled=wsu.getMtom(endpoint);
        WSBinding binding=null;
        ArrayList<WebServiceFeature> wsFeatures=new ArrayList<WebServiceFeature>();
        if (mtomEnabled) {
          int mtomThreshold=endpoint.getMtomThreshold() != null ? new Integer(endpoint.getMtomThreshold()) : 0;
          MTOMFeature mtom=new MTOMFeature(true,mtomThreshold);
          wsFeatures.add(mtom);
        }
        Addressing addressing=endpoint.getAddressing();
        if (endpoint.getAddressing() != null) {
          AddressingFeature addressingFeature=new AddressingFeature(addressing.isEnabled(),addressing.isRequired(),getResponse(addressing.getResponses()));
          wsFeatures.add(addressingFeature);
        }
        if (wsFeatures.size() > 0) {
          binding=BindingID.parse(givenBinding).createBinding(wsFeatures.toArray(new WebServiceFeature[wsFeatures.size()]));
        }
 else {
          binding=BindingID.parse(givenBinding).createBinding();
        }
        wsu.configureJAXWSServiceHandlers(endpoint,endpoint.getProtocolBinding(),binding);
        Invoker invoker=new InstanceResolverImpl(clazz).createInvoker();
        WSEndpoint wsep=WSEndpoint.create(clazz,false,new EjbInvokerImpl(clazz,invoker,webServiceEndpointServant,wsCtxt),endpoint.getServiceName(),endpoint.getWsdlPort(),container,binding,primaryWsdl,docs,catalogURL);
        String uri=endpoint.getEndpointAddressUri();
        String urlPattern=uri.startsWith(""String_Node_Str"") ? uri : ""String_Node_Str"" + uri;
        if (adapterList == null) {
          adapterList=new ServletAdapterList();
        }
        adapter=adapterList.createAdapter(endpoint.getName(),urlPattern,wsep);
        handlersConfigured=true;
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,""String_Node_Str"" + endpoint.getName() + ""String_Node_Str"",t);
        adapter=null;
      }
    }
  }
synchronized (this) {
    addWSContextInfo(wsCtxt);
    if (inv != null && inv instanceof EJBInvocation) {
      EJBInvocation ejbInv=(EJBInvocation)inv;
      ejbInv.setWebServiceContext(wsCtxt);
    }
  }
  adapterInvInfo.setAdapter(adapter);
  return adapterInvInfo;
}"
29231,"/** 
 * Force initialization of the endpoint runtime information as well as the handlers injection
 */
public void initRuntimeInfo(ServletAdapterList list) throws Exception {
  AdapterInvocationInfo aInfo=null;
  try {
    this.adapterList=list;
    aInfo=(AdapterInvocationInfo)prepareInvocation(true);
  }
  finally {
    if (aInfo != null) {
      releaseImplementor(aInfo.getInv());
    }
  }
}","/** 
 * Force initialization of the endpoint runtime information as well as the handlers injection
 */
public synchronized void initRuntimeInfo(ServletAdapterList list) throws Exception {
  AdapterInvocationInfo aInfo=null;
  try {
    this.adapterList=list;
    aInfo=(AdapterInvocationInfo)prepareInvocation(true);
  }
  finally {
    if (aInfo != null) {
      releaseImplementor(aInfo.getInv());
    }
  }
}"
29232,"private void handlePost(HttpServletRequest req,HttpServletResponse resp,EjbRuntimeEndpointInfo endpointInfo) throws IOException, SOAPException {
  JAXRPCEndpointImpl endpoint=null;
  String messageID=null;
  SOAPMessageContext msgContext=null;
  try {
    MimeHeaders headers=wsUtil.getHeaders(req);
    if (!wsUtil.hasTextXmlContentType(headers)) {
      wsUtil.writeInvalidContentType(resp);
      return;
    }
    msgContext=rpcFactory.createSOAPMessageContext();
    SOAPMessage message=createSOAPMessage(req,headers);
    boolean wssSucceded=true;
    if (message != null) {
      msgContext.setMessage(message);
      endpoint=(JAXRPCEndpointImpl)endpointInfo.getEndpoint().getExtraAttribute(EndpointImpl.NAME);
      if (endpoint != null) {
        if (wsEngine.hasGlobalMessageListener()) {
          messageID=wsEngine.preProcessRequest(endpoint);
        }
      }
 else {
        logger.fine(""String_Node_Str"" + req.getRequestURI());
      }
      AdapterInvocationInfo aInfo=null;
      try {
        Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
        aInfo=endpointInfo2.getHandlerImplementor();
        ((EJBInvocation)aInfo.getInv()).setMessageContext(msgContext);
        msgContext.setProperty(HTTP_SERVLET_RESPONSE,resp);
        if (secServ != null) {
          wssSucceded=secServ.validateRequest(endpointInfo2.getServerAuthConfig(),(StreamingHandler)aInfo.getHandler(),msgContext);
        }
        if (messageID != null || (endpoint != null && endpoint.hasListeners())) {
          ThreadLocalInfo threadLocalInfo=new ThreadLocalInfo(messageID,req);
          wsEngine.getThreadLocal().set(threadLocalInfo);
          endpoint.processRequest(msgContext);
        }
        if (wssSucceded) {
          aInfo.getHandler().handle(msgContext);
        }
      }
  finally {
        endpointInfo.releaseImplementor(aInfo.getInv());
      }
    }
 else {
      String errorMsg=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
      logger.fine(errorMsg);
      msgContext.writeSimpleErrorResponse(FAULT_CODE_CLIENT,errorMsg);
    }
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(msgContext);
    }
    SOAPMessage reply=msgContext.getMessage();
    if (secServ != null && wssSucceded) {
      Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
      secServ.secureResponse(endpointInfo2.getServerAuthConfig(),(StreamingHandler)endpointInfo2.getHandlerImplementor().getHandler(),msgContext);
    }
    if (reply.saveRequired()) {
      reply.saveChanges();
    }
    wsUtil.writeReply(resp,msgContext);
  }
 catch (  Throwable e) {
    String errorMessage=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
    logger.log(Level.WARNING,errorMessage,e);
    SOAPMessageContext errorMsgContext=rpcFactory.createSOAPMessageContext();
    errorMsgContext.writeSimpleErrorResponse(SOAPConstants.FAULT_CODE_SERVER,errorMessage);
    resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(errorMsgContext);
    }
    wsUtil.writeReply(resp,errorMsgContext);
  }
  if (messageID != null) {
    HttpResponseInfoImpl response=new HttpResponseInfoImpl(resp);
    wsEngine.postProcessResponse(messageID,response);
  }
}","private void handlePost(HttpServletRequest req,HttpServletResponse resp,EjbRuntimeEndpointInfo endpointInfo) throws IOException, SOAPException {
  JAXRPCEndpointImpl endpoint=null;
  String messageID=null;
  SOAPMessageContext msgContext=null;
  try {
    MimeHeaders headers=wsUtil.getHeaders(req);
    if (!wsUtil.hasTextXmlContentType(headers)) {
      wsUtil.writeInvalidContentType(resp);
      return;
    }
    msgContext=rpcFactory.createSOAPMessageContext();
    SOAPMessage message=createSOAPMessage(req,headers);
    boolean wssSucceded=true;
    if (message != null) {
      msgContext.setMessage(message);
      endpoint=(JAXRPCEndpointImpl)endpointInfo.getEndpoint().getExtraAttribute(EndpointImpl.NAME);
      if (endpoint != null) {
        if (wsEngine.hasGlobalMessageListener()) {
          messageID=wsEngine.preProcessRequest(endpoint);
        }
      }
 else {
        logger.fine(""String_Node_Str"" + req.getRequestURI());
      }
      AdapterInvocationInfo aInfo=null;
      try {
        Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
        aInfo=endpointInfo2.getHandlerImplementor();
        ((EJBInvocation)aInfo.getInv()).setMessageContext(msgContext);
        msgContext.setProperty(HTTP_SERVLET_RESPONSE,resp);
        if (secServ != null) {
          wssSucceded=secServ.validateRequest(endpointInfo2.getServerAuthConfig(),(StreamingHandler)aInfo.getHandler(),msgContext);
        }
        if (messageID != null || (endpoint != null && endpoint.hasListeners())) {
          ThreadLocalInfo threadLocalInfo=new ThreadLocalInfo(messageID,req);
          wsEngine.getThreadLocal().set(threadLocalInfo);
          endpoint.processRequest(msgContext);
        }
        if (wssSucceded) {
          aInfo.getHandler().handle(msgContext);
        }
      }
  finally {
        if (aInfo != null) {
          endpointInfo.releaseImplementor(aInfo.getInv());
        }
      }
    }
 else {
      String errorMsg=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
      logger.fine(errorMsg);
      msgContext.writeSimpleErrorResponse(FAULT_CODE_CLIENT,errorMsg);
    }
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(msgContext);
    }
    SOAPMessage reply=msgContext.getMessage();
    if (secServ != null && wssSucceded) {
      Ejb2RuntimeEndpointInfo endpointInfo2=(Ejb2RuntimeEndpointInfo)endpointInfo;
      secServ.secureResponse(endpointInfo2.getServerAuthConfig(),(StreamingHandler)endpointInfo2.getHandlerImplementor().getHandler(),msgContext);
    }
    if (reply.saveRequired()) {
      reply.saveChanges();
    }
    wsUtil.writeReply(resp,msgContext);
  }
 catch (  Throwable e) {
    String errorMessage=""String_Node_Str"" + endpointInfo.getEndpoint().getEndpointName() + ""String_Node_Str""+ endpointInfo.getEndpointAddressUri();
    logger.log(Level.WARNING,errorMessage,e);
    SOAPMessageContext errorMsgContext=rpcFactory.createSOAPMessageContext();
    errorMsgContext.writeSimpleErrorResponse(SOAPConstants.FAULT_CODE_SERVER,errorMessage);
    resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    if (messageID != null || endpoint != null) {
      endpoint.processResponse(errorMsgContext);
    }
    wsUtil.writeReply(resp,errorMsgContext);
  }
  if (messageID != null) {
    HttpResponseInfoImpl response=new HttpResponseInfoImpl(resp);
    wsEngine.postProcessResponse(messageID,response);
  }
}"
29233,"public JAXWSServiceDelegate(ServiceReferenceDescriptor descriptor,Service delegate,ClassLoader loader) throws Exception {
  super((new WsUtil()).privilegedGetServiceRefWsdl(descriptor),descriptor.getServiceName());
  serviceRef=descriptor;
  serviceDelegate=delegate;
  classLoader=loader;
  if (serviceRef.hasWsdlFile()) {
    wsdlLocation=(new WsUtil()).privilegedGetServiceRefWsdl(serviceRef);
    fullWsdl=true;
  }
}","public JAXWSServiceDelegate(ServiceReferenceDescriptor descriptor,Service delegate,ClassLoader loader) throws Exception {
  super((new WsUtil()).privilegedGetServiceRefWsdl(descriptor),descriptor.getServiceName());
  serviceRef=descriptor;
  serviceDelegate=delegate;
  if (serviceRef.hasWsdlFile()) {
    wsdlLocation=(new WsUtil()).privilegedGetServiceRefWsdl(serviceRef);
    fullWsdl=true;
  }
}"
29234,"/** 
 * Return a connection from the properties configured
 * @return a connection
 */
private Connection getConnection() throws LoginException {
  final String dsJndi=this.getProperty(PARAM_DATASOURCE_JNDI);
  final String dbUser=this.getProperty(PARAM_DB_USER);
  final String dbPassword=this.getProperty(PARAM_DB_PASSWORD);
  try {
    String nonTxJndiName=dsJndi + ""String_Node_Str"";
    final DataSource dataSource=(DataSource)cr.lookupNonTxResource(dsJndi,false);
    Connection connection=null;
    if (dbUser != null && dbPassword != null) {
      connection=dataSource.getConnection(dbUser,dbPassword);
    }
 else {
      connection=dataSource.getConnection();
    }
    return connection;
  }
 catch (  Exception ex) {
    String msg=sm.getString(""String_Node_Str"",dsJndi,dbUser);
    LoginException loginEx=new LoginException(msg);
    loginEx.initCause(ex);
    throw loginEx;
  }
}","/** 
 * Return a connection from the properties configured
 * @return a connection
 */
private Connection getConnection() throws LoginException {
  final String dsJndi=this.getProperty(PARAM_DATASOURCE_JNDI);
  final String dbUser=this.getProperty(PARAM_DB_USER);
  final String dbPassword=this.getProperty(PARAM_DB_PASSWORD);
  try {
    final DataSource dataSource=(DataSource)cr.lookupNonTxResource(dsJndi,false);
    Connection connection=null;
    if (dbUser != null && dbPassword != null) {
      connection=dataSource.getConnection(dbUser,dbPassword);
    }
 else {
      connection=dataSource.getConnection();
    }
    return connection;
  }
 catch (  Exception ex) {
    String msg=sm.getString(""String_Node_Str"",dsJndi,dbUser);
    LoginException loginEx=new LoginException(msg);
    loginEx.initCause(ex);
    throw loginEx;
  }
}"
29235,"public String toString(){
  StringBuffer sb=new StringBuffer();
switch (authenticateSource) {
case SOURCE_AUTH_NONE:
    sb.append(""String_Node_Str"");
  break;
case SOURCE_AUTH_SENDER:
sb.append(""String_Node_Str"");
break;
case SOURCE_AUTH_CONTENT:
sb.append(""String_Node_Str"");
break;
}
if (authenticateRecipient) {
sb.append(""String_Node_Str"" + ""String_Node_Str"" + recipientBeforeContent);
}
 else {
sb.append(""String_Node_Str"");
}
return sb.toString();
}","public String toString(){
  StringBuffer sb=new StringBuffer();
switch (authenticateSource) {
case SOURCE_AUTH_NONE:
    sb.append(""String_Node_Str"");
  break;
case SOURCE_AUTH_SENDER:
sb.append(""String_Node_Str"");
break;
case SOURCE_AUTH_CONTENT:
sb.append(""String_Node_Str"");
break;
default :
break;
}
if (authenticateRecipient) {
sb.append(""String_Node_Str"" + ""String_Node_Str"" + recipientBeforeContent);
}
 else {
sb.append(""String_Node_Str"");
}
return sb.toString();
}"
29236,"public static HashMap parseConstraints(WebBundleDescriptor wbd){
  if (logger.isLoggable(Level.FINE)) {
    logger.entering(""String_Node_Str"",""String_Node_Str"");
  }
  Set<Role> roleSet=wbd.getRoles();
  HashMap<String,MapValue> qpMap=new HashMap();
  qpMap.put(""String_Node_Str"",new MapValue(""String_Node_Str""));
  Enumeration<SecurityConstraint> esc=wbd.getSecurityConstraints();
  while (esc.hasMoreElements()) {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    SecurityConstraint sc=esc.nextElement();
    AuthorizationConstraint ac=sc.getAuthorizationConstraint();
    UserDataConstraint udc=sc.getUserDataConstraint();
    for (    WebResourceCollection wrc : sc.getWebResourceCollections()) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"");
      }
      for (      String url : wrc.getUrlPatterns()) {
        if (url != null) {
          url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,""String_Node_Str"" + url);
        }
        MapValue mValue=qpMap.get(url);
        if (mValue == null) {
          mValue=new MapValue(url);
          for (          Map.Entry<String,MapValue> qpVal : qpMap.entrySet()) {
            String otherUrl=qpVal.getKey();
            int otherUrlType=patternType(otherUrl);
switch (patternType(url)) {
case PT_PREFIX:
              if ((otherUrlType == PT_PREFIX || otherUrlType == PT_EXACT) && implies(url,otherUrl))               mValue.addQualifier(otherUrl);
 else               if (otherUrlType == PT_PREFIX && implies(otherUrl,url))               qpVal.getValue().addQualifier(url);
 else               if (otherUrlType == PT_EXTENSION || otherUrlType == PT_DEFAULT)               qpVal.getValue().addQualifier(url);
            break;
case PT_EXTENSION:
          if (otherUrlType == PT_PREFIX || (otherUrlType == PT_EXACT && implies(url,otherUrl)))           mValue.addQualifier(otherUrl);
 else           if (otherUrlType == PT_DEFAULT)           qpVal.getValue().addQualifier(url);
        break;
case PT_DEFAULT:
      if (otherUrlType != PT_DEFAULT)       mValue.addQualifier(otherUrl);
    break;
case PT_EXACT:
  if ((otherUrlType == PT_PREFIX || otherUrlType == PT_EXTENSION) && implies(otherUrl,url))   qpVal.getValue().addQualifier(url);
 else   if (otherUrlType == PT_DEFAULT)   qpVal.getValue().addQualifier(url);
break;
}
}
qpMap.put(url,mValue);
}
String[] methodNames=wrc.getHttpMethodsAsArray();
BitSet methods=MethodValue.methodArrayToSet(methodNames);
BitSet omittedMethods=null;
if (methods.isEmpty()) {
String[] omittedNames=wrc.getHttpMethodOmissionsAsArray();
omittedMethods=MethodValue.methodArrayToSet(omittedNames);
}
mValue.setMethodOutcomes(roleSet,ac,udc,methods,omittedMethods);
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""String_Node_Str"" + url);
}
}
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""String_Node_Str"");
}
}
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""String_Node_Str"");
}
}
if (logger.isLoggable(Level.FINE)) {
logger.exiting(""String_Node_Str"",""String_Node_Str"");
}
return qpMap;
}","public static HashMap parseConstraints(WebBundleDescriptor wbd){
  if (logger.isLoggable(Level.FINE)) {
    logger.entering(""String_Node_Str"",""String_Node_Str"");
  }
  Set<Role> roleSet=wbd.getRoles();
  HashMap<String,MapValue> qpMap=new HashMap();
  qpMap.put(""String_Node_Str"",new MapValue(""String_Node_Str""));
  Enumeration<SecurityConstraint> esc=wbd.getSecurityConstraints();
  while (esc.hasMoreElements()) {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    SecurityConstraint sc=esc.nextElement();
    AuthorizationConstraint ac=sc.getAuthorizationConstraint();
    UserDataConstraint udc=sc.getUserDataConstraint();
    for (    WebResourceCollection wrc : sc.getWebResourceCollections()) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"");
      }
      for (      String url : wrc.getUrlPatterns()) {
        if (url != null) {
          url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,""String_Node_Str"" + url);
        }
        MapValue mValue=qpMap.get(url);
        if (mValue == null) {
          mValue=new MapValue(url);
          for (          Map.Entry<String,MapValue> qpVal : qpMap.entrySet()) {
            String otherUrl=qpVal.getKey();
            int otherUrlType=patternType(otherUrl);
switch (patternType(url)) {
case PT_PREFIX:
              if ((otherUrlType == PT_PREFIX || otherUrlType == PT_EXACT) && implies(url,otherUrl))               mValue.addQualifier(otherUrl);
 else               if (otherUrlType == PT_PREFIX && implies(otherUrl,url))               qpVal.getValue().addQualifier(url);
 else               if (otherUrlType == PT_EXTENSION || otherUrlType == PT_DEFAULT)               qpVal.getValue().addQualifier(url);
            break;
case PT_EXTENSION:
          if (otherUrlType == PT_PREFIX || (otherUrlType == PT_EXACT && implies(url,otherUrl)))           mValue.addQualifier(otherUrl);
 else           if (otherUrlType == PT_DEFAULT)           qpVal.getValue().addQualifier(url);
        break;
case PT_DEFAULT:
      if (otherUrlType != PT_DEFAULT)       mValue.addQualifier(otherUrl);
    break;
case PT_EXACT:
  if ((otherUrlType == PT_PREFIX || otherUrlType == PT_EXTENSION) && implies(otherUrl,url))   qpVal.getValue().addQualifier(url);
 else   if (otherUrlType == PT_DEFAULT)   qpVal.getValue().addQualifier(url);
break;
default :
break;
}
}
qpMap.put(url,mValue);
}
String[] methodNames=wrc.getHttpMethodsAsArray();
BitSet methods=MethodValue.methodArrayToSet(methodNames);
BitSet omittedMethods=null;
if (methods.isEmpty()) {
String[] omittedNames=wrc.getHttpMethodOmissionsAsArray();
omittedMethods=MethodValue.methodArrayToSet(omittedNames);
}
mValue.setMethodOutcomes(roleSet,ac,udc,methods,omittedMethods);
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""String_Node_Str"" + url);
}
}
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""String_Node_Str"");
}
}
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""String_Node_Str"");
}
}
if (logger.isLoggable(Level.FINE)) {
logger.exiting(""String_Node_Str"",""String_Node_Str"");
}
return qpMap;
}"
29237,"boolean isTransportConstrained(){
  if (excluded || (connectSet != 0 && !bitIsSet(connectSet,ConnectTypeNone))) {
    return true;
  }
  return false;
}","boolean isTransportConstrained(){
  if (excluded || (connectSet != 0 && !bitIsSet(connectSet,connectTypeNone))) {
    return true;
  }
  return false;
}"
29238,"static void handleConnections(Permissions collection,MapValue m,String name){
  BitSet allConnectMethods=null;
  boolean allConnectAtOther=m.otherConstraint.isConnectAllowed(ConstraintValue.ConnectTypeNone);
  for (int i=0; i < ConstraintValue.connectKeys.length; i++) {
    String actions=null;
    String transport=ConstraintValue.connectKeys[i];
    BitSet connectMethods=m.getConnectMap(1 << i);
    if (i == 0) {
      allConnectMethods=connectMethods;
    }
 else {
      connectMethods.andNot(allConnectMethods);
    }
    if (m.otherConstraint.isConnectAllowed(1 << i)) {
      if (i != 0 && allConnectAtOther) {
        if (connectMethods.isEmpty()) {
          continue;
        }
        actions=MethodValue.getActions(connectMethods);
      }
 else {
        BitSet methods=m.getMethodSet();
        methods.andNot(connectMethods);
        if (!methods.isEmpty()) {
          actions=""String_Node_Str"" + MethodValue.getActions(methods);
        }
      }
    }
 else     if (!connectMethods.isEmpty()) {
      actions=MethodValue.getActions(connectMethods);
    }
 else {
      continue;
    }
    actions=(actions == null) ? ""String_Node_Str"" : actions;
    String combinedActions=actions + ""String_Node_Str"" + transport;
    collection.add(new WebUserDataPermission(name,combinedActions));
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"" + transport + ""String_Node_Str""+ actions);
    }
  }
}","static void handleConnections(Permissions collection,MapValue m,String name){
  BitSet allConnectMethods=null;
  boolean allConnectAtOther=m.otherConstraint.isConnectAllowed(ConstraintValue.connectTypeNone);
  for (int i=0; i < ConstraintValue.connectKeys.length; i++) {
    String actions=null;
    String transport=ConstraintValue.connectKeys[i];
    BitSet connectMethods=m.getConnectMap(1 << i);
    if (i == 0) {
      allConnectMethods=connectMethods;
    }
 else {
      connectMethods.andNot(allConnectMethods);
    }
    if (m.otherConstraint.isConnectAllowed(1 << i)) {
      if (i != 0 && allConnectAtOther) {
        if (connectMethods.isEmpty()) {
          continue;
        }
        actions=MethodValue.getActions(connectMethods);
      }
 else {
        BitSet methods=m.getMethodSet();
        methods.andNot(connectMethods);
        if (!methods.isEmpty()) {
          actions=""String_Node_Str"" + MethodValue.getActions(methods);
        }
      }
    }
 else     if (!connectMethods.isEmpty()) {
      actions=MethodValue.getActions(connectMethods);
    }
 else {
      continue;
    }
    actions=(actions == null) ? ""String_Node_Str"" : actions;
    String combinedActions=actions + ""String_Node_Str"" + transport;
    collection.add(new WebUserDataPermission(name,combinedActions));
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"" + transport + ""String_Node_Str""+ actions);
    }
  }
}"
29239,"boolean isConnectAllowed(int cType){
  if (!excluded && (connectSet == 0 || bitIsSet(connectSet,ConnectTypeNone) || bitIsSet(connectSet,cType))) {
    return true;
  }
  return false;
}","boolean isConnectAllowed(int cType){
  if (!excluded && (connectSet == 0 || bitIsSet(connectSet,connectTypeNone) || bitIsSet(connectSet,cType))) {
    return true;
  }
  return false;
}"
29240,"void addConnectType(String guarantee){
  int b=ConnectTypeNone;
  if (guarantee != null) {
    Integer bit=connectHash.get(guarantee);
    if (bit == null)     throw new IllegalArgumentException(""String_Node_Str"");
    b=bit.intValue();
  }
  connectSet|=b;
}","void addConnectType(String guarantee){
  int b=connectTypeNone;
  if (guarantee != null) {
    Integer bit=connectHash.get(guarantee);
    if (bit == null)     throw new IllegalArgumentException(""String_Node_Str"");
    b=bit.intValue();
  }
  connectSet|=b;
}"
29241,"@Override public Object run(){
  return new Boolean(Boolean.getBoolean(IIOP_CLIENT_PER_THREAD_FLAG));
}","@Override public Object run(){
  return Boolean.valueOf(Boolean.getBoolean(IIOP_CLIENT_PER_THREAD_FLAG));
}"
29242,"@Override public List getSocketInfo(IOR ior,List previous){
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
    }
    List result=new ArrayList();
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPAddress primary=iiopProfileTemplate.getPrimaryAddress();
    String host=primary.getHost().toLowerCase();
    String type=null;
    int port=0;
    ConnectionContext ctx=new ConnectionContext();
    SocketInfo socketInfo=selector.getSSLPort(ior,ctx);
    selector.setClientConnectionContext(ctx);
    if (socketInfo == null) {
      type=SocketInfo.IIOP_CLEAR_TEXT;
      port=primary.getPort();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
      }
    }
 else {
      type=socketInfo.getType();
      port=socketInfo.getPort();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + ctx);
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + type+ ""String_Node_Str""+ host+ ""String_Node_Str""+ port);
    }
    if (socketInfo != null) {
      result.add(socketInfo);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + ""String_Node_Str""+ socketInfo.getType()+ ""String_Node_Str""+ socketInfo.getHost()+ ""String_Node_Str""+ socketInfo.getPort());
      }
      return result;
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
    }
    if (!previous.isEmpty()) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + previous);
      }
      return previous;
    }
    SocketInfo primarySocketInfo=createSocketInfo(""String_Node_Str"",type,host,port);
    result.add(primarySocketInfo);
    Iterator iterator=iiopProfileTemplate.iteratorById(org.omg.IOP.TAG_ALTERNATE_IIOP_ADDRESS.value);
    while (iterator.hasNext()) {
      AlternateIIOPAddressComponent alternate=(AlternateIIOPAddressComponent)iterator.next();
      host=alternate.getAddress().getHost().toLowerCase();
      port=alternate.getAddress().getPort();
      result.add(createSocketInfo(""String_Node_Str"",SocketInfo.IIOP_CLEAR_TEXT,host,port));
    }
synchronized (this) {
      List existing=(List)primaryToAddresses.get(primarySocketInfo);
      if (existing == null) {
        primaryToAddresses.put(primarySocketInfo,result);
        result.remove(0);
        java.util.Collections.shuffle(result);
        result.add(0,primarySocketInfo);
        primaryToRandomizedAddresses.put(primarySocketInfo,result);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + result);
        }
        return result;
      }
 else {
        if (result.equals(existing)) {
          result=(List)primaryToRandomizedAddresses.get(primarySocketInfo);
          if (_logger.isLoggable(Level.FINE)) {
            _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + result);
          }
          return result;
        }
 else {
          _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + ""String_Node_Str""+ primarySocketInfo+ ""String_Node_Str""+ result+ ""String_Node_Str""+ existing);
          return result;
        }
      }
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
    RuntimeException rte=new RuntimeException(ex);
    rte.initCause(ex);
    throw rte;
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
    }
  }
}","@Override public List getSocketInfo(IOR ior,List previous){
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
    }
    List result=new ArrayList();
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPAddress primary=iiopProfileTemplate.getPrimaryAddress();
    Locale loc=Locale.getDefault();
    String host=primary.getHost().toLowerCase(loc);
    String type=null;
    int port=0;
    ConnectionContext ctx=new ConnectionContext();
    SocketInfo socketInfo=selector.getSSLPort(ior,ctx);
    selector.setClientConnectionContext(ctx);
    if (socketInfo == null) {
      type=SocketInfo.IIOP_CLEAR_TEXT;
      port=primary.getPort();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
      }
    }
 else {
      type=socketInfo.getType();
      port=socketInfo.getPort();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + ctx);
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + type+ ""String_Node_Str""+ host+ ""String_Node_Str""+ port);
    }
    if (socketInfo != null) {
      result.add(socketInfo);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + ""String_Node_Str""+ socketInfo.getType()+ ""String_Node_Str""+ socketInfo.getHost()+ ""String_Node_Str""+ socketInfo.getPort());
      }
      return result;
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
    }
    if (!previous.isEmpty()) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + previous);
      }
      return previous;
    }
    SocketInfo primarySocketInfo=createSocketInfo(""String_Node_Str"",type,host,port);
    result.add(primarySocketInfo);
    Iterator iterator=iiopProfileTemplate.iteratorById(org.omg.IOP.TAG_ALTERNATE_IIOP_ADDRESS.value);
    while (iterator.hasNext()) {
      AlternateIIOPAddressComponent alternate=(AlternateIIOPAddressComponent)iterator.next();
      host=alternate.getAddress().getHost().toLowerCase(loc);
      port=alternate.getAddress().getPort();
      result.add(createSocketInfo(""String_Node_Str"",SocketInfo.IIOP_CLEAR_TEXT,host,port));
    }
synchronized (this) {
      List existing=(List)primaryToAddresses.get(primarySocketInfo);
      if (existing == null) {
        primaryToAddresses.put(primarySocketInfo,result);
        result.remove(0);
        java.util.Collections.shuffle(result);
        result.add(0,primarySocketInfo);
        primaryToRandomizedAddresses.put(primarySocketInfo,result);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + result);
        }
        return result;
      }
 else {
        if (result.equals(existing)) {
          result=(List)primaryToRandomizedAddresses.get(primarySocketInfo);
          if (_logger.isLoggable(Level.FINE)) {
            _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + result);
          }
          return result;
        }
 else {
          _logger.log(Level.FINE,baseMsg + ""String_Node_Str"" + ""String_Node_Str""+ primarySocketInfo+ ""String_Node_Str""+ result+ ""String_Node_Str""+ existing);
          return result;
        }
      }
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
    RuntimeException rte=new RuntimeException(ex);
    rte.initCause(ex);
    throw rte;
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,baseMsg + ""String_Node_Str"");
    }
  }
}"
29243,"/** 
 * Checks whether or not authentication is needed. Returns an int, one of AUTHENTICATE_NOT_NEEDED, AUTHENTICATE_NEEDED, or AUTHENTICATED_NOT_AUTHORIZED
 * @param request Request we are processing
 * @param response Response we are creating
 * @param constraints Security constraint we are enforcing
 * @param disableProxyCaching whether or not to disable proxy caching forprotected resources.
 * @param securePagesWithPragma true if we add headers whichare incompatible with downloading office documents in IE under SSL but which fix a caching problem in Mozilla.
 * @param ssoEnabled true if sso is enabled
 * @exception IOException if an input/output error occurs
 */
public int preAuthenticateCheck(HttpRequest request,HttpResponse response,SecurityConstraint[] constraints,boolean disableProxyCaching,boolean securePagesWithPragma,boolean ssoEnabled) throws IOException {
  boolean isGranted=false;
  try {
    HttpServletRequest hsr=(HttpServletRequest)request.getRequest();
    if (hsr.getUserPrincipal() == null) {
      SecurityContext.setUnauthenticatedContext();
    }
    if (helper != null && helper.getServerAuthConfig() != null) {
      return Realm.AUTHENTICATE_NEEDED;
    }
    isGranted=invokeWebSecurityManager(request,response,constraints);
  }
 catch (  IOException iex) {
    throw iex;
  }
catch (  Throwable ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
  if (isGranted) {
    HashMap sharedState=null;
    boolean delegateSessionMgmt=false;
    if (((HttpServletRequest)request).getUserPrincipal() != null) {
      disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
      if (ssoEnabled) {
        HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
        WebSecurityManager webSecMgr=getWebSecurityManager(true);
        if (!webSecMgr.permitAll(hreq)) {
          hreq.getSession(true);
        }
      }
    }
    return Realm.AUTHENTICATE_NOT_NEEDED;
  }
 else   if (((HttpServletRequest)request).getUserPrincipal() != null) {
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_FORBIDDEN);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
 else {
    disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
    return Realm.AUTHENTICATE_NEEDED;
  }
}","/** 
 * Checks whether or not authentication is needed. Returns an int, one of AUTHENTICATE_NOT_NEEDED, AUTHENTICATE_NEEDED, or AUTHENTICATED_NOT_AUTHORIZED
 * @param request Request we are processing
 * @param response Response we are creating
 * @param constraints Security constraint we are enforcing
 * @param disableProxyCaching whether or not to disable proxy caching forprotected resources.
 * @param securePagesWithPragma true if we add headers whichare incompatible with downloading office documents in IE under SSL but which fix a caching problem in Mozilla.
 * @param ssoEnabled true if sso is enabled
 * @exception IOException if an input/output error occurs
 */
public int preAuthenticateCheck(HttpRequest request,HttpResponse response,SecurityConstraint[] constraints,boolean disableProxyCaching,boolean securePagesWithPragma,boolean ssoEnabled) throws IOException {
  boolean isGranted=false;
  try {
    HttpServletRequest hsr=(HttpServletRequest)request.getRequest();
    if (hsr.getUserPrincipal() == null) {
      SecurityContext.setUnauthenticatedContext();
    }
    if (helper != null && helper.getServerAuthConfig() != null) {
      return Realm.AUTHENTICATE_NEEDED;
    }
    isGranted=invokeWebSecurityManager(request,response,constraints);
  }
 catch (  IOException iex) {
    throw iex;
  }
catch (  Throwable ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
  if (isGranted) {
    HashMap sharedState;
    boolean delegateSessionMgmt=false;
    if (((HttpServletRequest)request).getUserPrincipal() != null) {
      disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
      if (ssoEnabled) {
        HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
        WebSecurityManager webSecMgr=getWebSecurityManager(true);
        if (!webSecMgr.permitAll(hreq)) {
          hreq.getSession(true);
        }
      }
    }
    return Realm.AUTHENTICATE_NOT_NEEDED;
  }
 else   if (((HttpServletRequest)request).getUserPrincipal() != null) {
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_FORBIDDEN);
    response.setDetailMessage(rb.getString(""String_Node_Str""));
    return Realm.AUTHENTICATED_NOT_AUTHORIZED;
  }
 else {
    disableProxyCaching(request,response,disableProxyCaching,securePagesWithPragma);
    return Realm.AUTHENTICATE_NEEDED;
  }
}"
29244,"/** 
 * utility method for deleting a directory and all its content
 */
private boolean deleteDir(File directory) throws IOException {
  if (!directory.isDirectory()) {
    throw new FileNotFoundException(directory.getPath());
  }
  boolean allDeletesSucceeded=true;
  File[] entries=directory.listFiles();
  for (int i=0; i < entries.length; i++) {
    if (entries[i].isDirectory()) {
      allDeletesSucceeded&=deleteDir(entries[i]);
    }
 else {
      if (!entries[i].equals(StaleFileManager.Util.markerFile(archive))) {
        final boolean fileDeleteOK=FileUtils.deleteFile(entries[i]);
        if (fileDeleteOK) {
          staleFileManager.recordDeletedEntry(entries[i]);
        }
        allDeletesSucceeded&=fileDeleteOK;
      }
    }
  }
  return (allDeletesSucceeded && FileUtils.deleteFile(directory));
}","/** 
 * utility method for deleting a directory and all its content
 */
private boolean deleteDir(File directory) throws IOException {
  if (!directory.isDirectory()) {
    throw new FileNotFoundException(directory.getPath());
  }
  boolean allDeletesSucceeded=true;
  if (FileUtils.safeIsRealDirectory(directory)) {
    File[] entries=directory.listFiles();
    for (int i=0; i < entries.length; i++) {
      if (entries[i].isDirectory()) {
        allDeletesSucceeded&=deleteDir(entries[i]);
      }
 else {
        if (!entries[i].equals(StaleFileManager.Util.markerFile(archive))) {
          final boolean fileDeleteOK=FileUtils.deleteFile(entries[i]);
          if (fileDeleteOK) {
            staleFileManager.recordDeletedEntry(entries[i]);
          }
          allDeletesSucceeded&=fileDeleteOK;
        }
      }
    }
  }
  return (allDeletesSucceeded && FileUtils.deleteFile(directory));
}"
29245,"/** 
 * Cleans up the CoordinatorLogSection and returns it to the pool for re-use Note: the implementation of the cache does not ensure that when an object is re-used there are no outstanding references to that object. However, the risk involved is minimal since reUse() replaces the existing call to finalize(). The existing call to finalize also does not ensure that there are no outstanding references to the object being finalized.
 * @param
 * @return
 * @see
 */
synchronized void reUse(){
  if (unwrittenObjects != null)   unwrittenObjects.removeAllElements();
  if (unwrittenData != null)   unwrittenData.removeAllElements();
  if (writtenObjects != null)   writtenObjects.removeAllElements();
  if (writtenData != null)   writtenData.removeAllElements();
  sectionName=null;
  unwrittenEmpty=true;
  writtenEmpty=true;
  headerLength=0;
  SectionPool.putCoordinatorLogSection(this);
}","/** 
 * Cleans up the CoordinatorLogSection and returns it to the pool for re-use Note: the implementation of the cache does not ensure that when an object is re-used there are no outstanding references to that object. However, the risk involved is minimal since reUse() replaces the existing call to finalize(). The existing call to finalize also does not ensure that there are no outstanding references to the object being finalized.
 * @param
 * @return
 * @see
 */
synchronized void reUse(){
  if (unwrittenObjects != null)   unwrittenObjects.removeAllElements();
  if (unwrittenData != null)   unwrittenData.removeAllElements();
  if (writtenObjects != null)   writtenObjects.removeAllElements();
  if (writtenData != null)   writtenData.removeAllElements();
  sectionName=null;
  unwrittenEmpty=true;
  writtenEmpty=true;
  SectionPool.putCoordinatorLogSection(this);
}"
29246,"/** 
 * Opens the log file for all CoordinatorLogs in this process. <p> If the log has already been opened, the operation uses the opened LogFile.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
private static boolean openLog(String logPath){
  boolean result=false;
  String logName;
  CoordinatorLogStateHolder logStateHolder=getStateHolder(logPath);
  if (logStateHolder.log == null) {
    logStateHolder.log=new Log(logPath);
    if (!logStateHolder.log.initialise()) {
      logStateHolder.log=null;
      _logger.log(Level.SEVERE,""String_Node_Str"");
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
  }
  String serverName=null;
  if (logStateHolder.log != null && (serverName=Configuration.getServerName(logPath)) != null) {
    logStateHolder.logFile=logStateHolder.log.open(serverName,CoordinatorLogPool.getCoordinatorLog(logPath));
    if (logStateHolder.logFile == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",serverName);
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
 else     Configuration.setLogFile(logPath,logStateHolder.logFile);
  }
  result=(logStateHolder.log != null && logStateHolder.logFile != null);
  return result;
}","/** 
 * Opens the log file for all CoordinatorLogs in this process. <p> If the log has already been opened, the operation uses the opened LogFile.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
private static boolean openLog(String logPath){
  boolean result=false;
  String logName;
  CoordinatorLogStateHolder logStateHolder=getStateHolder(logPath);
  if (logStateHolder.log == null) {
    logStateHolder.log=new Log(logPath);
    if (!logStateHolder.log.initialise()) {
      logStateHolder.log=null;
      _logger.log(Level.SEVERE,""String_Node_Str"");
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
  }
  String serverName=null;
  if (logStateHolder.log != null && (serverName=Configuration.getServerName(logPath)) != null) {
    logStateHolder.logFile=logStateHolder.log.open(serverName,CoordinatorLogPool.getCoordinatorLog(logPath));
    if (logStateHolder.logFile == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",serverName);
      String msg=LogFormatter.getLocalizedMessage(_logger,""String_Node_Str"");
      throw new org.omg.CORBA.INTERNAL(msg);
    }
 else     Configuration.setLogFile(logPath,logStateHolder.logFile);
  }
  result=(logStateHolder.logFile != null);
  return result;
}"
29247,"/** 
 * Distributes before completion operations to all registered Synchronization objects. <p> Returns a boolean to indicate success/failure.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
boolean distributeBefore(){
  boolean result=true;
  for (int i=0; i < registered.size() && result == true; i++) {
    Synchronization sync=(Synchronization)registered.elementAt(i);
    try {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
      sync.before_completion();
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
    }
 catch (    RuntimeException rex) {
      throw rex;
    }
catch (    Throwable exc) {
      if (!(exc instanceof INVALID_TRANSACTION)) {
        _logger.log(Level.WARNING,""String_Node_Str"",new java.lang.Object[]{exc.toString(),""String_Node_Str""});
      }
      result=false;
    }
  }
  return result;
}","/** 
 * Distributes before completion operations to all registered Synchronization objects. <p> Returns a boolean to indicate success/failure.
 * @param
 * @return  Indicates success of the operation.
 * @see
 */
boolean distributeBefore(){
  boolean result=true;
  for (int i=0; i < registered.size() && result == true; i++) {
    Synchronization sync=(Synchronization)registered.elementAt(i);
    try {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
      sync.before_completion();
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sync);
      }
    }
 catch (    RuntimeException rex) {
      throw rex;
    }
catch (    Throwable exc) {
      _logger.log(Level.WARNING,""String_Node_Str"",new java.lang.Object[]{exc.toString(),""String_Node_Str""});
      result=false;
    }
  }
  return result;
}"
29248,"/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
@Override public void execute(AdminCommandContext context){
  try {
    Collection<Interceptor> interceptors=habitat.getAllServices(Interceptor.class);
    if (interceptors != null) {
      for (      Interceptor interceptor : interceptors) {
        interceptor.intercept(this,initialContext);
      }
    }
    deployment.validateDeploymentTarget(target,name,isredeploy);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.TARGET_VALIDATED);
    }
    ActionReport.MessagePart part=report.getTopMessagePart();
    part.addProperty(DeploymentProperties.NAME,name);
    ApplicationConfigInfo savedAppConfig=new ApplicationConfigInfo(apps.getModule(Application.class,name));
    Properties undeployProps=handleRedeploy(name,report);
    if (enabled == null) {
      enabled=Boolean.TRUE;
    }
    if (!keepreposdir.booleanValue()) {
      final File reposDir=new File(env.getApplicationRepositoryPath(),VersioningUtils.getRepositoryName(name));
      if (reposDir.exists()) {
        for (int i=0; i < domain.getApplications().getApplications().size(); i++) {
          File existrepos=new File(new URI(domain.getApplications().getApplications().get(i).getLocation()));
          String appname=domain.getApplications().getApplications().get(i).getName();
          if (!appname.equals(name) && existrepos.getAbsoluteFile().equals(reposDir.getAbsoluteFile())) {
            report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,appname));
            return;
          }
 else {
            final FileArchive arch=DeploymentUtils.openAsFileArchive(reposDir,archiveFactory);
            arch.delete();
          }
        }
      }
    }
    if (!DeploymentUtils.isDomainTarget(target) && enabled) {
      try {
        versioningService.handleDisable(name,target,report);
      }
 catch (      VersioningSyntaxException e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
    File source=new File(archive.getURI().getSchemeSpecificPart());
    boolean isDirectoryDeployed=true;
    if (!source.isDirectory()) {
      isDirectoryDeployed=false;
      expansionDir=new File(domain.getApplicationRoot(),VersioningUtils.getRepositoryName(name));
      path=expansionDir;
    }
 else {
      String versionFromSameDir=versioningService.getVersionFromSameDir(source);
      if (!force && versionFromSameDir != null) {
        report.failure(logger,VersioningUtils.LOCALSTRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",source.getPath(),versionFromSameDir));
        return;
      }
    }
    deploymentContext=deployment.getBuilder(logger,this,report).source(archive).archiveHandler(archiveHandler).build(initialContext);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CONTEXT_CREATED);
      deploymentContext.addModuleMetaData(tracing);
    }
    if (undeployProps != null) {
      deploymentContext.getAppProps().putAll(undeployProps);
    }
    if (properties != null || property != null) {
      if (properties == null) {
        properties=new Properties();
      }
      if (property != null) {
        properties.putAll(property);
      }
    }
    if (properties != null) {
      deploymentContext.getAppProps().putAll(properties);
      validateDeploymentProperties(properties,deploymentContext);
    }
    deploymentContext.clean();
    Properties appProps=deploymentContext.getAppProps();
    String appLocation=DeploymentUtils.relativizeWithinDomainIfPossible(deploymentContext.getSource().getURI());
    appProps.setProperty(ServerTags.LOCATION,appLocation);
    appProps.setProperty(ServerTags.OBJECT_TYPE,""String_Node_Str"");
    if (contextroot != null) {
      appProps.setProperty(ServerTags.CONTEXT_ROOT,contextroot);
    }
    appProps.setProperty(ServerTags.DIRECTORY_DEPLOYED,String.valueOf(isDirectoryDeployed));
    savedAppConfig.store(appProps);
    deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_TARGETS,previousTargets);
    deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_VIRTUAL_SERVERS,previousVirtualServers);
    deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_ENABLED_ATTRIBUTES,previousEnabledAttributes);
    Transaction t=deployment.prepareAppConfigChanges(deploymentContext);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.DEPLOY);
    }
    ApplicationInfo appInfo;
    appInfo=deployment.deploy(deploymentContext);
    final Artifacts downloadableArtifacts=DeploymentUtils.downloadableArtifacts(deploymentContext);
    final Artifacts generatedArtifacts=DeploymentUtils.generatedArtifacts(deploymentContext);
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      try {
        moveAppFilesToPermanentLocation(deploymentContext,logger);
        recordFileLocations(appProps);
        downloadableArtifacts.record(appProps);
        generatedArtifacts.record(appProps);
        deployment.registerAppInDomainXML(appInfo,deploymentContext,t);
        if (tracing != null) {
          tracing.addMark(DeploymentTracing.Mark.REGISTRATION);
        }
        if (retrieve != null) {
          retrieveArtifacts(context,downloadableArtifacts.getArtifacts(),retrieve,false);
        }
        suppInfo.setDeploymentContext(deploymentContext);
        ActionReport.ExitCode worstExitCode=ExitCode.SUCCESS;
        for (        ActionReport subReport : report.getSubActionsReport()) {
          ActionReport.ExitCode actionExitCode=subReport.getActionExitCode();
          if (actionExitCode.isWorse(worstExitCode)) {
            worstExitCode=actionExitCode;
          }
        }
        report.setActionExitCode(worstExitCode);
        report.setResultType(String.class,name);
      }
 catch (      Exception e) {
        deployment.undeploy(name,deploymentContext);
        deploymentContext.clean();
        throw e;
      }
    }
  }
 catch (  Throwable e) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(e.getMessage());
    report.setFailureCause(e);
  }
 finally {
    events.unregister(this);
    try {
      archive.close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()),e);
    }
    if (tracing != null) {
      tracing.print(System.out);
      TracingUtilities.dump(""String_Node_Str"",System.out);
    }
    if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
      report.setResultType(String.class,name);
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name));
      logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,timing.elapsed()));
    }
 else     if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      String errorMessage=report.getMessage();
      Throwable cause=report.getFailureCause();
      if (cause != null) {
        String causeMessage=cause.getMessage();
        if (causeMessage != null && !causeMessage.equals(errorMessage)) {
          errorMessage=errorMessage + ""String_Node_Str"" + cause.getMessage();
        }
        logger.log(Level.SEVERE,errorMessage,cause.getCause());
      }
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",errorMessage));
      report.setFailureCause(null);
      if (expansionDir != null) {
        final FileArchive arch;
        try {
          arch=DeploymentUtils.openAsFileArchive(expansionDir,archiveFactory);
          arch.delete();
        }
 catch (        IOException ex) {
          final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",expansionDir.getAbsolutePath());
          report.failure(logger,msg,ex);
        }
      }
    }
    if (deploymentContext != null) {
      deploymentContext.postDeployClean(true);
    }
  }
}","/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
@Override public void execute(AdminCommandContext context){
  try {
    Collection<Interceptor> interceptors=habitat.getAllServices(Interceptor.class);
    if (interceptors != null) {
      for (      Interceptor interceptor : interceptors) {
        interceptor.intercept(this,initialContext);
      }
    }
    deployment.validateDeploymentTarget(target,name,isredeploy);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.TARGET_VALIDATED);
    }
    ActionReport.MessagePart part=report.getTopMessagePart();
    part.addProperty(DeploymentProperties.NAME,name);
    ApplicationConfigInfo savedAppConfig=new ApplicationConfigInfo(apps.getModule(Application.class,name));
    Properties undeployProps=handleRedeploy(name,report);
    if (enabled == null) {
      enabled=Boolean.TRUE;
    }
    if (!keepreposdir.booleanValue()) {
      final File reposDir=new File(env.getApplicationRepositoryPath(),VersioningUtils.getRepositoryName(name));
      if (reposDir.exists()) {
        for (int i=0; i < domain.getApplications().getApplications().size(); i++) {
          File existrepos=new File(new URI(domain.getApplications().getApplications().get(i).getLocation()));
          String appname=domain.getApplications().getApplications().get(i).getName();
          if (!appname.equals(name) && existrepos.getAbsoluteFile().equals(reposDir.getAbsoluteFile())) {
            report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,appname));
            return;
          }
        }
        final FileArchive arch=DeploymentUtils.openAsFileArchive(reposDir,archiveFactory);
        arch.delete();
      }
    }
    if (!DeploymentUtils.isDomainTarget(target) && enabled) {
      try {
        versioningService.handleDisable(name,target,report);
      }
 catch (      VersioningSyntaxException e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
    File source=new File(archive.getURI().getSchemeSpecificPart());
    boolean isDirectoryDeployed=true;
    if (!source.isDirectory()) {
      isDirectoryDeployed=false;
      expansionDir=new File(domain.getApplicationRoot(),VersioningUtils.getRepositoryName(name));
      path=expansionDir;
    }
 else {
      String versionFromSameDir=versioningService.getVersionFromSameDir(source);
      if (!force && versionFromSameDir != null) {
        report.failure(logger,VersioningUtils.LOCALSTRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",source.getPath(),versionFromSameDir));
        return;
      }
    }
    deploymentContext=deployment.getBuilder(logger,this,report).source(archive).archiveHandler(archiveHandler).build(initialContext);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CONTEXT_CREATED);
      deploymentContext.addModuleMetaData(tracing);
    }
    if (undeployProps != null) {
      deploymentContext.getAppProps().putAll(undeployProps);
    }
    if (properties != null || property != null) {
      if (properties == null) {
        properties=new Properties();
      }
      if (property != null) {
        properties.putAll(property);
      }
    }
    if (properties != null) {
      deploymentContext.getAppProps().putAll(properties);
      validateDeploymentProperties(properties,deploymentContext);
    }
    deploymentContext.clean();
    Properties appProps=deploymentContext.getAppProps();
    String appLocation=DeploymentUtils.relativizeWithinDomainIfPossible(deploymentContext.getSource().getURI());
    appProps.setProperty(ServerTags.LOCATION,appLocation);
    appProps.setProperty(ServerTags.OBJECT_TYPE,""String_Node_Str"");
    if (contextroot != null) {
      appProps.setProperty(ServerTags.CONTEXT_ROOT,contextroot);
    }
    appProps.setProperty(ServerTags.DIRECTORY_DEPLOYED,String.valueOf(isDirectoryDeployed));
    savedAppConfig.store(appProps);
    deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_TARGETS,previousTargets);
    deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_VIRTUAL_SERVERS,previousVirtualServers);
    deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_ENABLED_ATTRIBUTES,previousEnabledAttributes);
    Transaction t=deployment.prepareAppConfigChanges(deploymentContext);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.DEPLOY);
    }
    ApplicationInfo appInfo;
    appInfo=deployment.deploy(deploymentContext);
    final Artifacts downloadableArtifacts=DeploymentUtils.downloadableArtifacts(deploymentContext);
    final Artifacts generatedArtifacts=DeploymentUtils.generatedArtifacts(deploymentContext);
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      try {
        moveAppFilesToPermanentLocation(deploymentContext,logger);
        recordFileLocations(appProps);
        downloadableArtifacts.record(appProps);
        generatedArtifacts.record(appProps);
        deployment.registerAppInDomainXML(appInfo,deploymentContext,t);
        if (tracing != null) {
          tracing.addMark(DeploymentTracing.Mark.REGISTRATION);
        }
        if (retrieve != null) {
          retrieveArtifacts(context,downloadableArtifacts.getArtifacts(),retrieve,false);
        }
        suppInfo.setDeploymentContext(deploymentContext);
        ActionReport.ExitCode worstExitCode=ExitCode.SUCCESS;
        for (        ActionReport subReport : report.getSubActionsReport()) {
          ActionReport.ExitCode actionExitCode=subReport.getActionExitCode();
          if (actionExitCode.isWorse(worstExitCode)) {
            worstExitCode=actionExitCode;
          }
        }
        report.setActionExitCode(worstExitCode);
        report.setResultType(String.class,name);
      }
 catch (      Exception e) {
        deployment.undeploy(name,deploymentContext);
        deploymentContext.clean();
        throw e;
      }
    }
  }
 catch (  Throwable e) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(e.getMessage());
    report.setFailureCause(e);
  }
 finally {
    events.unregister(this);
    try {
      archive.close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()),e);
    }
    if (tracing != null) {
      tracing.print(System.out);
      TracingUtilities.dump(""String_Node_Str"",System.out);
    }
    if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
      report.setResultType(String.class,name);
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name));
      logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,timing.elapsed()));
    }
 else     if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      String errorMessage=report.getMessage();
      Throwable cause=report.getFailureCause();
      if (cause != null) {
        String causeMessage=cause.getMessage();
        if (causeMessage != null && !causeMessage.equals(errorMessage)) {
          errorMessage=errorMessage + ""String_Node_Str"" + cause.getMessage();
        }
        logger.log(Level.SEVERE,errorMessage,cause.getCause());
      }
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",errorMessage));
      report.setFailureCause(null);
      if (expansionDir != null) {
        final FileArchive arch;
        try {
          arch=DeploymentUtils.openAsFileArchive(expansionDir,archiveFactory);
          arch.delete();
        }
 catch (        IOException ex) {
          final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",expansionDir.getAbsolutePath());
          report.failure(logger,msg,ex);
        }
      }
    }
    if (deploymentContext != null) {
      deploymentContext.postDeployClean(true);
    }
  }
}"
29249,"private void preventNullStatus(String name,String id){
  if (status == null) {
    status=new CommandProgressImpl(name,id);
  }
  map.put(id,status);
}","private synchronized void preventNullStatus(String name,String id){
  if (status == null) {
    status=new CommandProgressImpl(name,id);
  }
  map.put(id,status);
}"
29250,"public ProgressStatus getProgressStatus(){
  return status;
}","public synchronized ProgressStatus getProgressStatus(){
  return status;
}"
29251,"/** 
 * This method will try to execute the command repeatedly, for example, retrying with updated credentials (typically from the interactive user), etc., until the command succeeds or there are no more ways to retry that might succeed.
 */
private Response doRestCommand(ParameterMap options,String pathSufix,String method,boolean isForMetadata,MediaType... acceptedResponseTypes) throws CommandException {
  Metrix.event(""String_Node_Str"");
  boolean shouldTryCommandAgain;
  boolean shouldSendCredentials=secure;
  boolean askedUserForCredentials=false;
  boolean shouldUseSecure=secure;
  boolean usedCallerProvidedCredentials=secure;
  URI uri=createURI(shouldUseSecure,pathSufix);
  do {
    Metrix.event(""String_Node_Str"");
    WebTarget target=client.target(uri);
    Metrix.event(""String_Node_Str"");
    target.configuration().setProperty(ClientProperties.HOSTNAME_VERIFIER,new BasicHostnameVerifier(host)).setProperty(ClientProperties.SSL_CONTEXT,getSslContext());
    shouldTryCommandAgain=false;
    try {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",uri.toString());
        logger.log(Level.FINER,""String_Node_Str"",new Object[]{user,ok(password) ? ""String_Node_Str"" : ""String_Node_Str""});
      }
      final AuthenticationInfo authInfo=authenticationInfo();
      if (authInfo != null && shouldSendCredentials) {
        HttpBasicAuthFilter besicAuth=new HttpBasicAuthFilter(authInfo.getUser(),authInfo.getPassword() == null ? ""String_Node_Str"" : authInfo.getPassword());
        target.configuration().register(besicAuth);
      }
      Metrix.event(""String_Node_Str"");
      Builder request=target.request(acceptedResponseTypes);
      Metrix.event(""String_Node_Str"");
      if (authToken != null) {
        request=request.header(SecureAdmin.Util.ADMIN_ONE_TIME_AUTH_TOKEN_HEADER_NAME,(isForMetadata ? AuthTokenManager.markTokenForReuse(authToken) : authToken));
      }
      if (commandModel != null && isCommandModelFromCache() && commandModel instanceof CachedCommandModel) {
        request=request.header(COMMAND_MODEL_MATCH_HEADER,((CachedCommandModel)commandModel).getETag());
        if (logger.isLoggable(Level.FINER)) {
          logger.log(Level.FINER,""String_Node_Str"",((CachedCommandModel)commandModel).getETag());
        }
      }
      for (      Header h : requestHeaders) {
        request=request.header(h.getName(),h.getValue());
      }
      request=addAdditionalHeaders(request);
      if (logger.isLoggable(Level.FINER)) {
        request=request.header(""String_Node_Str"",""String_Node_Str"");
      }
      Invocation invoc=null;
      Metrix.event(""String_Node_Str"");
      if (""String_Node_Str"".equals(method)) {
        if (outboundPayload != null && outboundPayload.size() > 0) {
          FormDataMultiPart mp=new FormDataMultiPart();
          for (          Map.Entry<String,List<String>> entry : options.entrySet()) {
            String key=entry.getKey();
            for (            String val : entry.getValue()) {
              mp.field(key,val);
            }
          }
          outboundPayload.addToMultipart(mp,logger);
          Entity<FormDataMultiPart> entity=Entity.<FormDataMultiPart>entity(mp,mp.getMediaType());
          invoc=request.build(method,entity);
        }
 else {
          Entity<ParameterMap> entity=Entity.<ParameterMap>entity(options,MediaType.APPLICATION_FORM_URLENCODED_TYPE);
          invoc=request.build(method,entity);
        }
      }
 else {
        invoc=request.build(method);
      }
      Metrix.event(""String_Node_Str"");
      Response response=invoc.invoke();
      Metrix.event(""String_Node_Str"");
      String redirection=checkConnect(response,uri.getHost(),uri.getPort());
      if (ok(redirection)) {
        if (logger.isLoggable(Level.FINER)) {
          logger.log(Level.FINER,""String_Node_Str"",redirection);
        }
        uri=new URI(redirection);
        shouldTryCommandAgain=true;
        shouldUseSecure=""String_Node_Str"".equals(uri.getScheme());
        secure=true;
        shouldSendCredentials=shouldUseSecure;
        continue;
      }
      processHeaders(response);
      logger.finer(""String_Node_Str"");
      return response;
    }
 catch (    AuthenticationException authEx) {
      logger.log(Level.FINER,""String_Node_Str"");
      if (!usedCallerProvidedCredentials) {
        logger.log(Level.FINER,""String_Node_Str"");
        usedCallerProvidedCredentials=true;
        shouldSendCredentials=true;
        shouldTryCommandAgain=true;
        continue;
      }
      logger.log(Level.FINER,""String_Node_Str"");
      if (askedUserForCredentials) {
        logger.log(Level.FINER,""String_Node_Str"");
        throw authEx;
      }
      logger.log(Level.FINER,""String_Node_Str"");
      if (!updateAuthentication()) {
        logger.log(Level.FINER,""String_Node_Str"");
        throw authEx;
      }
      logger.log(Level.FINER,""String_Node_Str"");
      askedUserForCredentials=true;
      shouldSendCredentials=true;
      shouldTryCommandAgain=true;
      continue;
    }
catch (    ConnectException ce) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",ce);
      }
      String msg=strings.get(""String_Node_Str"",host,port + ""String_Node_Str"");
      throw new CommandException(msg,ce);
    }
catch (    UnknownHostException he) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",he);
      }
      String msg=strings.get(""String_Node_Str"",host);
      throw new CommandException(msg,he);
    }
catch (    SocketException se) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",se);
      }
      try {
        boolean serverAppearsSecure=NetUtils.isSecurePort(host,port);
        if (serverAppearsSecure && !shouldUseSecure) {
          if (retryUsingSecureConnection(host,port)) {
            shouldUseSecure=true;
            shouldSendCredentials=true;
            usedCallerProvidedCredentials=true;
            shouldTryCommandAgain=true;
            continue;
          }
        }
        throw new CommandException(se);
      }
 catch (      IOException io) {
        throw new CommandException(io);
      }
    }
catch (    SSLException se) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",se);
      }
      try {
        boolean serverAppearsSecure=NetUtils.isSecurePort(host,port);
        if (!serverAppearsSecure && secure) {
          logger.severe(strings.get(""String_Node_Str"",host,port + ""String_Node_Str""));
        }
        throw new CommandException(se);
      }
 catch (      IOException io) {
        throw new CommandException(io);
      }
    }
catch (    SocketTimeoutException e) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",e);
      }
      throw new CommandException(strings.get(""String_Node_Str"",(float)readTimeout / 1000),e);
    }
catch (    IOException e) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",e);
      }
      throw new CommandException(strings.get(""String_Node_Str"",e.getMessage()),e);
    }
catch (    CommandException e) {
      throw e;
    }
catch (    Exception e) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",e);
      }
      ByteArrayOutputStream buf=new ByteArrayOutputStream();
      e.printStackTrace(new PrintStream(buf));
      logger.finer(buf.toString());
      throw new CommandException(e);
    }
  }
 while (shouldTryCommandAgain);
  outboundPayload=null;
  return null;
}","/** 
 * This method will try to execute the command repeatedly, for example, retrying with updated credentials (typically from the interactive user), etc., until the command succeeds or there are no more ways to retry that might succeed.
 */
private Response doRestCommand(ParameterMap options,String pathSufix,String method,boolean isForMetadata,MediaType... acceptedResponseTypes) throws CommandException {
  Metrix.event(""String_Node_Str"");
  boolean shouldTryCommandAgain;
  boolean shouldSendCredentials=secure;
  boolean askedUserForCredentials=false;
  boolean shouldUseSecure=secure;
  boolean usedCallerProvidedCredentials=secure;
  URI uri=createURI(shouldUseSecure,pathSufix);
  do {
    Metrix.event(""String_Node_Str"");
    WebTarget target=client.target(uri);
    Metrix.event(""String_Node_Str"");
    target.configuration().setProperty(ClientProperties.HOSTNAME_VERIFIER,new BasicHostnameVerifier(host)).setProperty(ClientProperties.SSL_CONTEXT,getSslContext());
    shouldTryCommandAgain=false;
    try {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",uri.toString());
        logger.log(Level.FINER,""String_Node_Str"",new Object[]{user,ok(password) ? ""String_Node_Str"" : ""String_Node_Str""});
      }
      final AuthenticationInfo authInfo=authenticationInfo();
      if (authInfo != null && shouldSendCredentials) {
        HttpBasicAuthFilter besicAuth=new HttpBasicAuthFilter(authInfo.getUser(),authInfo.getPassword() == null ? ""String_Node_Str"" : authInfo.getPassword());
        target.configuration().register(besicAuth);
      }
      Metrix.event(""String_Node_Str"");
      Builder request=target.request(acceptedResponseTypes);
      Metrix.event(""String_Node_Str"");
      if (authToken != null) {
        request=request.header(SecureAdmin.Util.ADMIN_ONE_TIME_AUTH_TOKEN_HEADER_NAME,(isForMetadata ? AuthTokenManager.markTokenForReuse(authToken) : authToken));
      }
      if (commandModel != null && isCommandModelFromCache() && commandModel instanceof CachedCommandModel) {
        request=request.header(COMMAND_MODEL_MATCH_HEADER,((CachedCommandModel)commandModel).getETag());
        if (logger.isLoggable(Level.FINER)) {
          logger.log(Level.FINER,""String_Node_Str"",((CachedCommandModel)commandModel).getETag());
        }
      }
      for (      Header h : requestHeaders) {
        request=request.header(h.getName(),h.getValue());
      }
      request=addAdditionalHeaders(request);
      if (logger.isLoggable(Level.FINER)) {
        request=request.header(""String_Node_Str"",""String_Node_Str"");
      }
      Invocation invoc=null;
      Metrix.event(""String_Node_Str"");
      if (""String_Node_Str"".equals(method)) {
        if (outboundPayload != null && outboundPayload.size() > 0) {
          FormDataMultiPart mp=new FormDataMultiPart();
          for (          Map.Entry<String,List<String>> entry : options.entrySet()) {
            String key=entry.getKey();
            for (            String val : entry.getValue()) {
              mp.field(key,val);
            }
          }
          outboundPayload.addToMultipart(mp,logger);
          Entity<FormDataMultiPart> entity=Entity.<FormDataMultiPart>entity(mp,mp.getMediaType());
          invoc=request.build(method,entity);
        }
 else {
          Entity<ParameterMap> entity=Entity.<ParameterMap>entity(options,MediaType.APPLICATION_FORM_URLENCODED_TYPE);
          invoc=request.build(method,entity);
        }
      }
 else {
        invoc=request.build(method);
      }
      Metrix.event(""String_Node_Str"");
      Response response;
      try {
        response=invoc.invoke();
      }
 catch (      ClientException ex) {
        if (ex.getCause() != null && ex.getCause() instanceof Exception) {
          throw (Exception)ex.getCause();
        }
 else {
          throw ex;
        }
      }
      Metrix.event(""String_Node_Str"");
      String redirection=checkConnect(response,uri.getHost(),uri.getPort());
      if (ok(redirection)) {
        if (logger.isLoggable(Level.FINER)) {
          logger.log(Level.FINER,""String_Node_Str"",redirection);
        }
        uri=new URI(redirection);
        shouldTryCommandAgain=true;
        shouldUseSecure=""String_Node_Str"".equals(uri.getScheme());
        secure=true;
        shouldSendCredentials=shouldUseSecure;
        continue;
      }
      processHeaders(response);
      logger.finer(""String_Node_Str"");
      return response;
    }
 catch (    AuthenticationException authEx) {
      logger.log(Level.FINER,""String_Node_Str"");
      if (!usedCallerProvidedCredentials) {
        logger.log(Level.FINER,""String_Node_Str"");
        usedCallerProvidedCredentials=true;
        shouldSendCredentials=true;
        shouldTryCommandAgain=true;
        continue;
      }
      logger.log(Level.FINER,""String_Node_Str"");
      if (askedUserForCredentials) {
        logger.log(Level.FINER,""String_Node_Str"");
        throw authEx;
      }
      logger.log(Level.FINER,""String_Node_Str"");
      if (!updateAuthentication()) {
        logger.log(Level.FINER,""String_Node_Str"");
        throw authEx;
      }
      logger.log(Level.FINER,""String_Node_Str"");
      askedUserForCredentials=true;
      shouldSendCredentials=true;
      shouldTryCommandAgain=true;
      continue;
    }
catch (    ConnectException ce) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",ce);
      }
      String msg=strings.get(""String_Node_Str"",host,port + ""String_Node_Str"");
      throw new CommandException(msg,ce);
    }
catch (    UnknownHostException he) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",he);
      }
      String msg=strings.get(""String_Node_Str"",host);
      throw new CommandException(msg,he);
    }
catch (    SocketException se) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",se);
      }
      try {
        boolean serverAppearsSecure=NetUtils.isSecurePort(host,port);
        if (serverAppearsSecure && !shouldUseSecure) {
          if (retryUsingSecureConnection(host,port)) {
            shouldUseSecure=true;
            shouldSendCredentials=true;
            usedCallerProvidedCredentials=true;
            shouldTryCommandAgain=true;
            continue;
          }
        }
        throw new CommandException(se);
      }
 catch (      IOException io) {
        throw new CommandException(io);
      }
    }
catch (    SSLException se) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",se);
      }
      try {
        boolean serverAppearsSecure=NetUtils.isSecurePort(host,port);
        if (!serverAppearsSecure && secure) {
          logger.severe(strings.get(""String_Node_Str"",host,port + ""String_Node_Str""));
        }
        throw new CommandException(se);
      }
 catch (      IOException io) {
        throw new CommandException(io);
      }
    }
catch (    SocketTimeoutException e) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",e);
      }
      throw new CommandException(strings.get(""String_Node_Str"",(float)readTimeout / 1000),e);
    }
catch (    IOException e) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",e);
      }
      throw new CommandException(strings.get(""String_Node_Str"",e.getMessage()),e);
    }
catch (    CommandException e) {
      throw e;
    }
catch (    Exception e) {
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",e);
      }
      ByteArrayOutputStream buf=new ByteArrayOutputStream();
      e.printStackTrace(new PrintStream(buf));
      logger.finer(buf.toString());
      throw new CommandException(e);
    }
  }
 while (shouldTryCommandAgain);
  outboundPayload=null;
  return null;
}"
29252,"public static ProgressStatusDTO readProgressStatus(JsonParser jp) throws IOException {
  ChildProgressStatusDTO child=readChildProgressStatus(jp);
  if (child == null) {
    return null;
  }
 else {
    return child.getProgressStatus();
  }
}","public static ProgressStatusDTO readProgressStatus(JsonParser jp) throws IOException {
  ChildProgressStatusDTO child=readChildProgressStatus(jp);
  return child.getProgressStatus();
}"
29253,"public GfSseInboundEvent readEvent() throws IOException {
  GfSseInboundEvent inboundEvent=new GfSseInboundEvent(messageBodyWorkers,annotations,mediaType,headers);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  State currentState=State.START;
  String fieldName=null;
  try {
    int data=0;
    while ((data=inputStream.read()) != -1) {
switch (currentState) {
case START:
        if (data == ':') {
          currentState=State.COMMENT;
        }
 else         if (data != '\n') {
          baos.write(data);
          currentState=State.FIELD_NAME;
        }
 else         if (data == '\n') {
          if (!inboundEvent.isEmpty()) {
            return inboundEvent;
          }
          inboundEvent=new GfSseInboundEvent(messageBodyWorkers,annotations,mediaType,headers);
        }
      break;
case COMMENT:
    if (data == '\n') {
      currentState=State.START;
    }
  break;
case FIELD_NAME:
if (data == ':') {
  fieldName=baos.toString();
  baos.reset();
  currentState=State.FIELD_VALUE_FIRST;
}
 else if (data == '\n') {
  processField(inboundEvent,baos.toString(),""String_Node_Str"".getBytes());
  baos.reset();
  currentState=State.START;
}
 else {
  baos.write(data);
}
break;
case FIELD_VALUE_FIRST:
if (data != ' ') {
baos.write(data);
}
if (data == '\n') {
processField(inboundEvent,fieldName,baos.toByteArray());
baos.reset();
currentState=State.START;
break;
}
currentState=State.FIELD_VALUE;
break;
case FIELD_VALUE:
if (data == '\n') {
processField(inboundEvent,fieldName,baos.toByteArray());
baos.reset();
currentState=State.START;
}
 else {
baos.write(data);
}
break;
}
}
if (data == -1) {
closed=true;
}
return null;
}
 catch (IOException e) {
closed=true;
throw e;
}
}","public GfSseInboundEvent readEvent() throws IOException {
  GfSseInboundEvent inboundEvent=new GfSseInboundEvent(messageBodyWorkers,annotations,mediaType,headers);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  State currentState=State.START;
  String fieldName=null;
  try {
    int data=0;
    while ((data=inputStream.read()) != -1) {
switch (currentState) {
case START:
        if (data == ':') {
          currentState=State.COMMENT;
        }
 else         if (data != '\n') {
          baos.write(data);
          currentState=State.FIELD_NAME;
        }
 else         if (data == '\n') {
          if (!inboundEvent.isEmpty()) {
            return inboundEvent;
          }
          inboundEvent=new GfSseInboundEvent(messageBodyWorkers,annotations,mediaType,headers);
        }
      break;
case COMMENT:
    if (data == '\n') {
      currentState=State.START;
    }
  break;
case FIELD_NAME:
if (data == ':') {
  fieldName=baos.toString();
  baos.reset();
  currentState=State.FIELD_VALUE_FIRST;
}
 else if (data == '\n') {
  processField(inboundEvent,baos.toString(),""String_Node_Str"".getBytes());
  baos.reset();
  currentState=State.START;
}
 else {
  baos.write(data);
}
break;
case FIELD_VALUE_FIRST:
if (data != ' ') {
baos.write(data);
}
if (data == '\n') {
processField(inboundEvent,fieldName,baos.toByteArray());
baos.reset();
currentState=State.START;
break;
}
currentState=State.FIELD_VALUE;
break;
case FIELD_VALUE:
if (data == '\n') {
processField(inboundEvent,fieldName,baos.toByteArray());
baos.reset();
currentState=State.START;
}
 else {
baos.write(data);
}
break;
default :
}
}
if (data == -1) {
closed=true;
}
return null;
}
 catch (IOException e) {
closed=true;
throw e;
}
}"
29254,"private void processField(GfSseInboundEvent inboundEvent,String name,byte[] value){
  if (name.equals(""String_Node_Str"")) {
    inboundEvent.setName(new String(value));
  }
 else   if (name.equals(""String_Node_Str"")) {
    inboundEvent.addData(value);
    inboundEvent.addData(new byte[]{'\n'});
  }
 else   if (name.equals(""String_Node_Str"")) {
    String s=new String(value);
    try {
      Integer.parseInt(new String(value));
    }
 catch (    NumberFormatException nfe) {
      s=""String_Node_Str"";
    }
    inboundEvent.setId(s);
  }
 else   if (name.equals(""String_Node_Str"")) {
  }
 else {
  }
}","private void processField(GfSseInboundEvent inboundEvent,String name,byte[] value){
  if (name.equals(""String_Node_Str"")) {
    inboundEvent.setName(new String(value));
  }
 else   if (name.equals(""String_Node_Str"")) {
    inboundEvent.addData(value);
    inboundEvent.addData(new byte[]{'\n'});
  }
 else   if (name.equals(""String_Node_Str"")) {
    String s=new String(value);
    if (s == null) {
      s=""String_Node_Str"";
    }
 else {
      s=s.trim();
      if (!s.matches(""String_Node_Str"")) {
        s=""String_Node_Str"";
      }
    }
    inboundEvent.setId(s);
  }
 else   if (name.equals(""String_Node_Str"")) {
  }
 else {
  }
}"
29255,"private Response executeSseCommand(CommandName commandName,Payload.Inbound inbound,ParameterMap params,String modelETag,Cookie jSessionId) throws WebApplicationException {
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  CommandModel model=getCommandModel(commandName);
  checkCommandModelETag(model,modelETag);
  final CommandRunner.CommandInvocation commandInvocation=getCommandRunner().getCommandInvocation(commandName.getScope(),commandName.getName(),new PropsFileActionReporter());
  if (inbound != null) {
    commandInvocation.inbound(inbound);
  }
  commandInvocation.outbound(new RestPayloadImpl.Outbound(false)).subject(getSubject()).managedJob().parameters(params);
  final EventChannel ec=new EventChannel();
  AdminCommandListener listener=new AdminCommandListener(){
    @Override public void onAdminCommandEvent(    String name,    Object event){
      if (name == null || name.startsWith(""String_Node_Str"")) {
        return;
      }
      if (event == null) {
        return;
      }
      OutboundEvent outEvent=new OutboundEvent.Builder().name(name).mediaType(MediaType.APPLICATION_JSON_TYPE).data(event.getClass(),event).build();
      try {
        ec.write(outEvent);
      }
 catch (      IOException ex) {
        logger.log(Level.WARNING,strings.getLocalString(""String_Node_Str"",""String_Node_Str"",event.getClass().getName()),ex);
      }
    }
  }
;
  commandInvocation.listener(""String_Node_Str"",listener);
  ResponseBuilder rb=Response.status(HttpURLConnection.HTTP_OK);
  if (isSingleInstanceCommand(model)) {
    rb.cookie(getJSessionCookie(jSessionId));
  }
  rb.entity(ec);
  executeCommandInvocationAsync(commandInvocation,ec,listener);
  return rb.build();
}","private Response executeSseCommand(CommandName commandName,Payload.Inbound inbound,ParameterMap params,String modelETag,Cookie jSessionId) throws WebApplicationException {
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  CommandModel model=getCommandModel(commandName);
  checkCommandModelETag(model,modelETag);
  final CommandRunner.CommandInvocation commandInvocation=getCommandRunner().getCommandInvocation(commandName.getScope(),commandName.getName(),new PropsFileActionReporter());
  if (inbound != null) {
    commandInvocation.inbound(inbound);
  }
  commandInvocation.outbound(new RestPayloadImpl.Outbound(false)).subject(getSubject()).managedJob().parameters(params);
  final EventChannel ec=new EventChannel();
  AdminCommandListener listener=new AdminCommandListener(){
    @Override public void onAdminCommandEvent(    String name,    Object event){
      if (name == null || name.startsWith(""String_Node_Str"")) {
        return;
      }
      if (event == null) {
        return;
      }
      if (ec.isClosed()) {
        return;
      }
      OutboundEvent outEvent=new OutboundEvent.Builder().name(name).mediaType(MediaType.APPLICATION_JSON_TYPE).data(event.getClass(),event).build();
      try {
        ec.write(outEvent);
      }
 catch (      Exception ex) {
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,strings.getLocalString(""String_Node_Str"",""String_Node_Str"",event.getClass().getName()),ex);
        }
      }
    }
  }
;
  commandInvocation.listener(""String_Node_Str"",listener);
  ResponseBuilder rb=Response.status(HttpURLConnection.HTTP_OK);
  if (isSingleInstanceCommand(model)) {
    rb.cookie(getJSessionCookie(jSessionId));
  }
  rb.entity(ec);
  executeCommandInvocationAsync(commandInvocation,ec,listener);
  return rb.build();
}"
29256,"@Override public void onAdminCommandEvent(String name,Object event){
  if (name == null || name.startsWith(""String_Node_Str"")) {
    return;
  }
  if (event == null) {
    return;
  }
  OutboundEvent outEvent=new OutboundEvent.Builder().name(name).mediaType(MediaType.APPLICATION_JSON_TYPE).data(event.getClass(),event).build();
  try {
    ec.write(outEvent);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,strings.getLocalString(""String_Node_Str"",""String_Node_Str"",event.getClass().getName()),ex);
  }
}","@Override public void onAdminCommandEvent(String name,Object event){
  if (name == null || name.startsWith(""String_Node_Str"")) {
    return;
  }
  if (event == null) {
    return;
  }
  if (ec.isClosed()) {
    return;
  }
  OutboundEvent outEvent=new OutboundEvent.Builder().name(name).mediaType(MediaType.APPLICATION_JSON_TYPE).data(event.getClass(),event).build();
  try {
    ec.write(outEvent);
  }
 catch (  Exception ex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,strings.getLocalString(""String_Node_Str"",""String_Node_Str"",event.getClass().getName()),ex);
    }
  }
}"
29257,"public void postConstruct(){
  LogManager manager=LogManager.getLogManager();
  String cname=getClass().getName();
  if (manager != null) {
    logFileProperty=manager.getProperty(cname + ""String_Node_Str"");
  }
  if (logFileProperty == null || logFileProperty.trim().equals(""String_Node_Str"")) {
    logFileProperty=env.getInstanceRoot().getAbsolutePath() + File.separator + LOGS_DIR+ File.separator+ logFileName;
  }
  String filename=TranslatedConfigView.getTranslatedValue(logFileProperty).toString();
  File serverLog=new File(filename);
  absoluteServerLogName=filename;
  if (!serverLog.isAbsolute()) {
    serverLog=new File(env.getDomainRoot(),filename);
    absoluteServerLogName=env.getDomainRoot() + File.separator + filename;
  }
  changeFileName(serverLog);
  FileInputStream fs=null;
  String strLine=""String_Node_Str"";
  int odlFormatter=0;
  int uflFormatter=0;
  int otherFormatter=0;
  boolean mustRotate=false;
  try {
    fs=new FileInputStream(serverLog);
    BufferedReader br=new BufferedReader(new InputStreamReader(fs));
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (!strLine.equals(""String_Node_Str"")) {
        if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'[') > 4) {
          odlFormatter++;
        }
 else         if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'|') > 4) {
          uflFormatter++;
        }
 else {
          otherFormatter++;
        }
        if (odlFormatter > 0 && uflFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (uflFormatter > 0 && otherFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (otherFormatter > 0 && odlFormatter > 0) {
          mustRotate=true;
          break;
        }
        if (odlFormatter > 2 || uflFormatter > 2 || odlFormatter > 2) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (odlFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
 else   if (uflFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
  pump=new Thread(){
    public void run(){
      try {
        while (!done.isSignalled()) {
          log();
        }
      }
 catch (      RuntimeException e) {
      }
    }
  }
;
  pump.setDaemon(true);
  pump.start();
  LogRecord lr=new LogRecord(Level.INFO,""String_Node_Str"" + Version.getFullVersion());
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(getClass().getName());
  EarlyLogHandler.earlyMessages.add(lr);
  lr=new LogRecord(Level.INFO,""String_Node_Str"" + manager.getProperty(cname + ""String_Node_Str""));
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(getClass().getName());
  EarlyLogHandler.earlyMessages.add(lr);
  String rotationOnDateChange=manager.getProperty(cname + ""String_Node_Str"");
  if (rotationOnDateChange != null && !(""String_Node_Str"").equals(rotationOnDateChange.trim()) && Boolean.parseBoolean(rotationOnDateChange)) {
    dayBasedFileRotation=true;
    Long rotationTimeLimitValue=0L;
    int MILLIS_IN_DAY=1000 * 60 * 60* 24;
    Date date=new Date();
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    long systime=System.currentTimeMillis();
    String nextDate=dateFormat.format(date.getTime() + MILLIS_IN_DAY);
    Date nextDay=null;
    try {
      nextDay=dateFormat.parse(nextDate);
    }
 catch (    ParseException e) {
      nextDay=new Date();
      lr=new LogRecord(Level.WARNING,""String_Node_Str"");
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
    long nextsystime=nextDay.getTime();
    rotationTimeLimitValue=nextsystime - systime;
    Task rotationTask=new Task(){
      public Object run(){
        rotate();
        return null;
      }
    }
;
    LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue / 60000));
    setLimitForRotation(0);
  }
 else {
    Long rotationTimeLimitValue=0L;
    try {
      rotationTimeLimitValue=Long.parseLong(manager.getProperty(cname + ""String_Node_Str""));
    }
 catch (    NumberFormatException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"");
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
    if (rotationTimeLimitValue != 0) {
      Task rotationTask=new Task(){
        public Object run(){
          rotate();
          return null;
        }
      }
;
      LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue));
      setLimitForRotation(0);
    }
 else {
      Integer rotationLimitAttrValue=0;
      try {
        rotationLimitAttrValue=Integer.parseInt(manager.getProperty(cname + ""String_Node_Str""));
      }
 catch (      NumberFormatException e) {
        lr=new LogRecord(Level.WARNING,""String_Node_Str"");
        lr.setThreadID((int)Thread.currentThread().getId());
        lr.setLoggerName(getClass().getName());
        EarlyLogHandler.earlyMessages.add(lr);
      }
      setLimitForRotation(rotationLimitAttrValue);
    }
  }
  gffileHandlerFormatter=manager.getProperty(cname + ""String_Node_Str"");
  if (mustRotate) {
    rotate();
  }
 else   if (!currentgffileHandlerFormatter.equals(""String_Node_Str"") && gffileHandlerFormatter != null && !gffileHandlerFormatter.equals(currentgffileHandlerFormatter)) {
    rotate();
  }
  String ff=manager.getProperty(cname + ""String_Node_Str"");
  if (ff != null)   try {
    flushFrequency=Integer.parseInt(manager.getProperty(cname + ""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,""String_Node_Str"");
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(getClass().getName());
    EarlyLogHandler.earlyMessages.add(lr);
  }
  if (flushFrequency <= 0)   flushFrequency=1;
  String formatterName=manager.getProperty(cname + ""String_Node_Str"");
  if (formatterName == null || UniformLogFormatter.class.getName().equals(formatterName)) {
    UniformLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new UniformLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new UniformLogFormatter();
      setFormatter(formatterClass);
    }
    if (formatterClass != null) {
      recordBeginMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=manager.getProperty(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=manager.getProperty(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatterClass.setRecordBeginMarker(recordBeginMarker);
      formatterClass.setRecordEndMarker(recordEndMarker);
      formatterClass.setRecordDateFormat(recordDateFormat);
      formatterClass.setRecordFieldSeparator(recordFieldSeparator);
    }
  }
 else   if (formatterName == null || ODLLogFormatter.class.getName().equals(formatterName)) {
    ODLLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new ODLLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new ODLLogFormatter();
      setFormatter(formatterClass);
    }
  }
 else {
    try {
      setFormatter((Formatter)this.getClass().getClassLoader().loadClass(formatterName).newInstance());
    }
 catch (    InstantiationException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"" + formatterName);
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
catch (    IllegalAccessException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"" + formatterName);
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
catch (    ClassNotFoundException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"" + formatterName);
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
  }
  try {
    maxHistoryFiles=Integer.parseInt(manager.getProperty(cname + ""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,""String_Node_Str"");
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(getClass().getName());
    EarlyLogHandler.earlyMessages.add(lr);
  }
  if (maxHistoryFiles < 0)   maxHistoryFiles=10;
}","public void postConstruct(){
  LogManager manager=LogManager.getLogManager();
  String cname=getClass().getName();
  if (manager != null) {
    logFileProperty=manager.getProperty(cname + ""String_Node_Str"");
  }
  if (logFileProperty == null || logFileProperty.trim().equals(""String_Node_Str"")) {
    logFileProperty=env.getInstanceRoot().getAbsolutePath() + File.separator + LOGS_DIR+ File.separator+ logFileName;
  }
  String filename=TranslatedConfigView.getTranslatedValue(logFileProperty).toString();
  File serverLog=new File(filename);
  absoluteServerLogName=filename;
  if (!serverLog.isAbsolute()) {
    serverLog=new File(env.getDomainRoot(),filename);
    absoluteServerLogName=env.getDomainRoot() + File.separator + filename;
  }
  changeFileName(serverLog);
  FileInputStream fs=null;
  String strLine=""String_Node_Str"";
  int odlFormatter=0;
  int uflFormatter=0;
  int otherFormatter=0;
  boolean mustRotate=false;
  try {
    fs=new FileInputStream(serverLog);
    BufferedReader br=new BufferedReader(new InputStreamReader(fs));
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (!strLine.equals(""String_Node_Str"")) {
        if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'[') > 4) {
          odlFormatter++;
        }
 else         if (strLine.startsWith(""String_Node_Str"") && strLine.endsWith(""String_Node_Str"") && countOccurrences(strLine,'|') > 4) {
          uflFormatter++;
        }
 else {
          otherFormatter++;
        }
        if (odlFormatter > 0 && uflFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (uflFormatter > 0 && otherFormatter > 0) {
          mustRotate=true;
          break;
        }
 else         if (otherFormatter > 0 && odlFormatter > 0) {
          mustRotate=true;
          break;
        }
        if (odlFormatter > 2 || uflFormatter > 2 || odlFormatter > 2) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (odlFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
 else   if (uflFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
  pump=new Thread(){
    public void run(){
      try {
        while (!done.isSignalled()) {
          log();
        }
      }
 catch (      RuntimeException e) {
      }
    }
  }
;
  pump.setDaemon(true);
  pump.start();
  LogRecord lr=new LogRecord(Level.INFO,""String_Node_Str"" + Version.getFullVersion());
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(getClass().getName());
  EarlyLogHandler.earlyMessages.add(lr);
  lr=new LogRecord(Level.INFO,""String_Node_Str"" + manager.getProperty(cname + ""String_Node_Str""));
  lr.setThreadID((int)Thread.currentThread().getId());
  lr.setLoggerName(getClass().getName());
  EarlyLogHandler.earlyMessages.add(lr);
  String rotationOnDateChange=manager.getProperty(cname + ""String_Node_Str"");
  if (rotationOnDateChange != null && !(""String_Node_Str"").equals(rotationOnDateChange.trim()) && Boolean.parseBoolean(rotationOnDateChange)) {
    dayBasedFileRotation=true;
    Long rotationTimeLimitValue=0L;
    int MILLIS_IN_DAY=1000 * 60 * 60* 24;
    Date date=new Date();
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    long systime=System.currentTimeMillis();
    String nextDate=dateFormat.format(date.getTime() + MILLIS_IN_DAY);
    Date nextDay=null;
    try {
      nextDay=dateFormat.parse(nextDate);
    }
 catch (    ParseException e) {
      nextDay=new Date();
      lr=new LogRecord(Level.WARNING,""String_Node_Str"");
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
    long nextsystime=nextDay.getTime();
    rotationTimeLimitValue=nextsystime - systime;
    Task rotationTask=new Task(){
      public Object run(){
        rotate();
        return null;
      }
    }
;
    LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue / 60000));
    setLimitForRotation(0);
  }
 else {
    Long rotationTimeLimitValue=0L;
    try {
      rotationTimeLimitValue=Long.parseLong(manager.getProperty(cname + ""String_Node_Str""));
    }
 catch (    NumberFormatException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"");
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
    if (rotationTimeLimitValue != 0) {
      Task rotationTask=new Task(){
        public Object run(){
          rotate();
          return null;
        }
      }
;
      LogRotationTimer.getInstance().startTimer(new LogRotationTimerTask(rotationTask,rotationTimeLimitValue));
      setLimitForRotation(0);
    }
 else {
      Integer rotationLimitAttrValue=0;
      try {
        rotationLimitAttrValue=Integer.parseInt(manager.getProperty(cname + ""String_Node_Str""));
      }
 catch (      NumberFormatException e) {
        lr=new LogRecord(Level.WARNING,""String_Node_Str"");
        lr.setThreadID((int)Thread.currentThread().getId());
        lr.setLoggerName(getClass().getName());
        EarlyLogHandler.earlyMessages.add(lr);
      }
      setLimitForRotation(rotationLimitAttrValue);
    }
  }
  gffileHandlerFormatter=manager.getProperty(cname + ""String_Node_Str"");
  if (mustRotate) {
    rotate();
  }
 else   if (!currentgffileHandlerFormatter.equals(""String_Node_Str"") && gffileHandlerFormatter != null && !gffileHandlerFormatter.equals(currentgffileHandlerFormatter)) {
    rotate();
  }
  String ff=manager.getProperty(cname + ""String_Node_Str"");
  if (ff != null)   try {
    flushFrequency=Integer.parseInt(manager.getProperty(cname + ""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,""String_Node_Str"");
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(getClass().getName());
    EarlyLogHandler.earlyMessages.add(lr);
  }
  if (flushFrequency <= 0)   flushFrequency=1;
  String formatterName=manager.getProperty(cname + ""String_Node_Str"");
  if (formatterName == null || UniformLogFormatter.class.getName().equals(formatterName)) {
    UniformLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new UniformLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new UniformLogFormatter();
      setFormatter(formatterClass);
    }
    if (formatterClass != null) {
      recordBeginMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=manager.getProperty(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=manager.getProperty(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=manager.getProperty(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatterClass.setRecordBeginMarker(recordBeginMarker);
      formatterClass.setRecordEndMarker(recordEndMarker);
      formatterClass.setRecordDateFormat(recordDateFormat);
      formatterClass.setRecordFieldSeparator(recordFieldSeparator);
    }
  }
 else   if (ODLLogFormatter.class.getName().equals(formatterName)) {
    ODLLogFormatter formatterClass=null;
    if (agent != null) {
      formatterClass=new ODLLogFormatter(new AgentFormatterDelegate(agent));
      setFormatter(formatterClass);
    }
 else {
      formatterClass=new ODLLogFormatter();
      setFormatter(formatterClass);
    }
  }
 else {
    try {
      setFormatter((Formatter)this.getClass().getClassLoader().loadClass(formatterName).newInstance());
    }
 catch (    InstantiationException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"" + formatterName);
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
catch (    IllegalAccessException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"" + formatterName);
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
catch (    ClassNotFoundException e) {
      lr=new LogRecord(Level.SEVERE,""String_Node_Str"" + formatterName);
      lr.setThreadID((int)Thread.currentThread().getId());
      lr.setLoggerName(getClass().getName());
      EarlyLogHandler.earlyMessages.add(lr);
    }
  }
  try {
    maxHistoryFiles=Integer.parseInt(manager.getProperty(cname + ""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    lr=new LogRecord(Level.WARNING,""String_Node_Str"");
    lr.setThreadID((int)Thread.currentThread().getId());
    lr.setLoggerName(getClass().getName());
    EarlyLogHandler.earlyMessages.add(lr);
  }
  if (maxHistoryFiles < 0)   maxHistoryFiles=10;
}"
29258,"/** 
 * Initialize the loggers
 */
public void postConstruct(){
  if (System.getProperty(""String_Node_Str"") != null) {
    System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
    return;
  }
  final LogManager logMgr=LogManager.getLogManager();
  File logging=null;
  try {
    logging=getLoggingFile();
    System.setProperty(""String_Node_Str"",logging.getAbsolutePath());
    String rootFolder=env.getProps().get(com.sun.enterprise.util.SystemPropertyConstants.INSTALL_ROOT_PROPERTY);
    String templateDir=rootFolder + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    File src=new File(templateDir,ServerEnvironmentImpl.kLoggingPropertiesFileName);
    File dest=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
    System.out.println(""String_Node_Str"" + rootFolder);
    System.out.println(""String_Node_Str"" + templateDir);
    System.out.println(""String_Node_Str"" + src);
    System.out.println(""String_Node_Str"" + dest);
    if (!logging.exists()) {
      Logger.getAnonymousLogger().log(Level.WARNING,logging.getAbsolutePath() + ""String_Node_Str"");
      FileUtils.copy(src,dest);
      logging=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
    }
    logMgr.readConfiguration();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  FormatterDelegate agentDelegate=null;
  if (agent != null) {
    agentDelegate=new AgentFormatterDelegate(agent);
  }
  String formatterClassname=null;
  try {
    Map<String,String> props=getLoggingProperties();
    formatterClassname=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    consoleHandlerFormatterDetail=formatterClassname;
    Class formatterClass=LogManagerService.class.getClassLoader().loadClass(formatterClassname);
    if (formatterClass.getName().equals(""String_Node_Str"")) {
      UniformLogFormatter formatter=(UniformLogFormatter)formatterClass.newInstance();
      String cname=""String_Node_Str"";
      recordBeginMarker=props.get(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=props.get(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=props.get(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=props.get(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatter.setRecordBeginMarker(recordBeginMarker);
      formatter.setRecordEndMarker(recordEndMarker);
      formatter.setRecordDateFormat(recordDateFormat);
      formatter.setRecordFieldSeparator(recordFieldSeparator);
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
 else     if (formatterClass.getName().equals(""String_Node_Str"")) {
      ODLLogFormatter formatter=(ODLLogFormatter)formatterClass.newInstance();
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
    serverLogFileDetail=props.get(SERVER_LOG_FILE_PROPERTY);
    handlerDetail=props.get(HANDLER_PROPERTY);
    consoleHandlerFormatterDetail=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    gffileHandlerFormatterDetail=props.get(GFFILEHANDLER_FORMATTER_PROPERTY);
    rotationOnTimeLimitInMinutesDetail=props.get(ROTATIONTIMELIMITINMINUTES_PROPERTY);
    flushFrequencyDetail=props.get(FLUSHFREQUENCY_PROPERTY);
    filterHandlerDetails=props.get(FILEHANDLER_LIMIT_PROPERTY);
    logToConsoleDetail=props.get(LOGTOCONSOLE_PROPERTY);
    rotationInTimeLimitInBytesDetail=props.get(ROTATIONLIMITINBYTES_PROPERTY);
    useSystemLoggingDetail=props.get(USESYSTEMLOGGING_PROPERTY);
    fileHandlerCountDetail=props.get(FILEHANDLER_COUNT_PROPERTY);
    retainErrorsStaticticsDetail=props.get(RETAINERRORSSTATICTICS_PROPERTY);
    log4jVersionDetail=props.get(LOG4J_VERSION_PROPERTY);
    maxHistoryFilesDetail=props.get(MAXHISTORY_FILES_PROPERTY);
    rotationOnDateChangeDetail=props.get(ROTATIONONDATECHANGE_PROPERTY);
    fileHandlerPatternDetail=props.get(FILEHANDLER_PATTERN_PROPERTY);
    fileHandlerFormatterDetail=props.get(FILEHANDLER_FORMATTER_PROPERTY);
    logFormatDateFormatDetail=props.get(LOGFORMAT_DATEFORMAT_PROPERTY);
  }
 catch (  java.io.IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  ClassNotFoundException exc) {
    logger.log(Level.SEVERE,""String_Node_Str"",formatterClassname);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Collection<Handler> handlers=habitat.getAllServices(Handler.class);
  if (handlers != null && handlers.size() > 0) {
synchronized (java.util.logging.Logger.class) {
synchronized (logMgr) {
        Enumeration<String> loggerNames=logMgr.getLoggerNames();
        while (loggerNames.hasMoreElements()) {
          String loggerName=loggerNames.nextElement();
          logMgr.getLogger(loggerName);
          for (          Handler handler : logger.getHandlers()) {
            if (handler.getFormatter() instanceof UniformLogFormatter) {
              ((UniformLogFormatter)handler.getFormatter()).setDelegate(agentDelegate);
            }
          }
        }
        for (        Handler handler : handlers) {
          addHandler(handler);
        }
      }
    }
  }
  try {
    Map<String,String> map=getLoggingProperties();
    String filterClassName=map.get(LoggingXMLNames.xmltoPropsMap.get(""String_Node_Str""));
    if (filterClassName != null) {
      Filter filterClass=habitat.getService(Filter.class,filterClassName);
      Logger rootLogger=Logger.global.getParent();
      if (rootLogger != null) {
        rootLogger.setFilter(filterClass);
      }
    }
  }
 catch (  java.io.IOException ex) {
  }
  Logger _ologger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  LoggingOutputStream los=new LoggingOutputStream(_ologger,Level.INFO);
  LoggingOutputStream.LoggingPrintStream pout=los.new LoggingPrintStream(los);
  System.setOut(pout);
  Logger _elogger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  los=new LoggingOutputStream(_elogger,Level.SEVERE);
  LoggingOutputStream.LoggingPrintStream perr=los.new LoggingPrintStream(los);
  System.setErr(perr);
  if (logging != null) {
    fileMonitoring.monitors(logging,new FileMonitoring.FileChangeListener(){
      public void changed(      File changedFile){
synchronized (gfHandlers) {
          try {
            Map<String,String> props=getLoggingProperties();
            loggerReference=new Vector<Logger>();
            if (props == null)             return;
            Set<String> keys=props.keySet();
            for (            String a : keys) {
              if (a.endsWith(""String_Node_Str"")) {
                String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
                Level l=Level.parse(props.get(a));
                Logger appLogger=logMgr.getLogger(n);
                if (appLogger != null) {
                  appLogger.setLevel(l);
                  loggerReference.add(appLogger);
                }
 else                 if (gfHandlers.containsKey(n)) {
                  Handler h=(Handler)gfHandlers.get(n);
                  h.setLevel(l);
                }
 else                 if (n.equals(""String_Node_Str"")) {
                  Logger logger=Logger.global.getParent();
                  Handler[] h=logger.getHandlers();
                  for (int i=0; i < h.length; i++) {
                    String name=h[i].toString();
                    if (name.contains(""String_Node_Str""))                     h[i].setLevel(l);
                  }
                }
              }
 else               if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
                if (!props.get(a).equals(serverLogFileDetail)) {
                  PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,props.get(a));
                  UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
                  List<UnprocessedChangeEvents> b=new ArrayList();
                  b.add(ucel);
                  ucl.unprocessedTransactedEvents(b);
                }
              }
 else               if (a.equals(HANDLER_PROPERTY)) {
                if (!props.get(a).equals(handlerDetail)) {
                  generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
                }
              }
 else               if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(consoleHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(gffileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
                if (!props.get(a).equals(rotationOnTimeLimitInMinutesDetail)) {
                  generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
                }
              }
 else               if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
                if (!props.get(a).equals(flushFrequencyDetail)) {
                  generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
                if (!props.get(a).equals(filterHandlerDetails)) {
                  generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
                }
              }
 else               if (a.equals(LOGTOCONSOLE_PROPERTY)) {
                if (!props.get(a).equals(logToConsoleDetail)) {
                  generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
                }
              }
 else               if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
                if (!props.get(a).equals(rotationInTimeLimitInBytesDetail)) {
                  generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
                }
              }
 else               if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
                if (!props.get(a).equals(useSystemLoggingDetail)) {
                  generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerCountDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
                }
              }
 else               if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
                if (!props.get(a).equals(retainErrorsStaticticsDetail)) {
                  generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
                }
              }
 else               if (a.equals(LOG4J_VERSION_PROPERTY)) {
                if (!props.get(a).equals(log4jVersionDetail)) {
                  generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
                }
              }
 else               if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
                if (!props.get(a).equals(maxHistoryFilesDetail)) {
                  generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
                }
              }
 else               if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
                if (!props.get(a).equals(rotationOnDateChangeDetail)) {
                  generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerPatternDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
                if (!props.get(a).equals(logFormatDateFormatDetail)) {
                  generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
                }
              }
            }
            logger.log(Level.INFO,""String_Node_Str"");
          }
 catch (          Exception e) {
            logger.log(Level.SEVERE,""String_Node_Str"",e);
          }
        }
      }
      public void deleted(      File deletedFile){
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
);
  }
  List<EarlyLogger.LevelAndMessage> catchUp=EarlyLogger.getEarlyMessages();
  if (!catchUp.isEmpty()) {
    for (    EarlyLogger.LevelAndMessage levelAndMessage : catchUp) {
      logger.log(levelAndMessage.level,levelAndMessage.msg);
    }
    catchUp.clear();
  }
  ArrayBlockingQueue<LogRecord> catchEarlyMessage=EarlyLogHandler.earlyMessages;
  while (!catchEarlyMessage.isEmpty()) {
    LogRecord logRecord=catchEarlyMessage.poll();
    if (logRecord != null) {
      logger.log(logRecord);
    }
  }
}","/** 
 * Initialize the loggers
 */
public void postConstruct(){
  if (System.getProperty(""String_Node_Str"") != null) {
    System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
    return;
  }
  final LogManager logMgr=LogManager.getLogManager();
  File logging=null;
  try {
    logging=getLoggingFile();
    System.setProperty(""String_Node_Str"",logging.getAbsolutePath());
    String rootFolder=env.getProps().get(com.sun.enterprise.util.SystemPropertyConstants.INSTALL_ROOT_PROPERTY);
    String templateDir=rootFolder + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    File src=new File(templateDir,ServerEnvironmentImpl.kLoggingPropertiesFileName);
    File dest=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
    System.out.println(""String_Node_Str"" + rootFolder);
    System.out.println(""String_Node_Str"" + templateDir);
    System.out.println(""String_Node_Str"" + src);
    System.out.println(""String_Node_Str"" + dest);
    if (!logging.exists()) {
      Logger.getAnonymousLogger().log(Level.WARNING,logging.getAbsolutePath() + ""String_Node_Str"");
      FileUtils.copy(src,dest);
      logging=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
    }
    logMgr.readConfiguration();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  FormatterDelegate agentDelegate=null;
  if (agent != null) {
    agentDelegate=new AgentFormatterDelegate(agent);
  }
  String formatterClassname=null;
  try {
    Map<String,String> props=getLoggingProperties();
    formatterClassname=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    consoleHandlerFormatterDetail=formatterClassname;
    Class formatterClass=LogManagerService.class.getClassLoader().loadClass(formatterClassname);
    if (formatterClass.getName().equals(""String_Node_Str"")) {
      UniformLogFormatter formatter=(UniformLogFormatter)formatterClass.newInstance();
      String cname=""String_Node_Str"";
      recordBeginMarker=props.get(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=props.get(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=props.get(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=props.get(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatter.setRecordBeginMarker(recordBeginMarker);
      formatter.setRecordEndMarker(recordEndMarker);
      formatter.setRecordDateFormat(recordDateFormat);
      formatter.setRecordFieldSeparator(recordFieldSeparator);
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
 else     if (formatterClass.getName().equals(""String_Node_Str"")) {
      ODLLogFormatter formatter=(ODLLogFormatter)formatterClass.newInstance();
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
    serverLogFileDetail=props.get(SERVER_LOG_FILE_PROPERTY);
    handlerDetail=props.get(HANDLER_PROPERTY);
    consoleHandlerFormatterDetail=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    gffileHandlerFormatterDetail=props.get(GFFILEHANDLER_FORMATTER_PROPERTY);
    rotationOnTimeLimitInMinutesDetail=props.get(ROTATIONTIMELIMITINMINUTES_PROPERTY);
    flushFrequencyDetail=props.get(FLUSHFREQUENCY_PROPERTY);
    filterHandlerDetails=props.get(FILEHANDLER_LIMIT_PROPERTY);
    logToConsoleDetail=props.get(LOGTOCONSOLE_PROPERTY);
    rotationInTimeLimitInBytesDetail=props.get(ROTATIONLIMITINBYTES_PROPERTY);
    useSystemLoggingDetail=props.get(USESYSTEMLOGGING_PROPERTY);
    fileHandlerCountDetail=props.get(FILEHANDLER_COUNT_PROPERTY);
    retainErrorsStaticticsDetail=props.get(RETAINERRORSSTATICTICS_PROPERTY);
    log4jVersionDetail=props.get(LOG4J_VERSION_PROPERTY);
    maxHistoryFilesDetail=props.get(MAXHISTORY_FILES_PROPERTY);
    rotationOnDateChangeDetail=props.get(ROTATIONONDATECHANGE_PROPERTY);
    fileHandlerPatternDetail=props.get(FILEHANDLER_PATTERN_PROPERTY);
    fileHandlerFormatterDetail=props.get(FILEHANDLER_FORMATTER_PROPERTY);
    logFormatDateFormatDetail=props.get(LOGFORMAT_DATEFORMAT_PROPERTY);
  }
 catch (  java.io.IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  ClassNotFoundException exc) {
    logger.log(Level.SEVERE,""String_Node_Str"",formatterClassname);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Collection<Handler> handlers=habitat.getAllServices(Handler.class);
  if (handlers != null && handlers.size() > 0) {
synchronized (java.util.logging.Logger.class) {
synchronized (logMgr) {
        Enumeration<String> loggerNames=logMgr.getLoggerNames();
        while (loggerNames.hasMoreElements()) {
          String loggerName=loggerNames.nextElement();
          logMgr.getLogger(loggerName);
          for (          Handler handler : logger.getHandlers()) {
            if (handler.getFormatter() instanceof UniformLogFormatter) {
              ((UniformLogFormatter)handler.getFormatter()).setDelegate(agentDelegate);
            }
          }
        }
        for (        Handler handler : handlers) {
          addHandler(handler);
        }
      }
    }
  }
  try {
    Map<String,String> map=getLoggingProperties();
    String filterClassName=map.get(LoggingXMLNames.xmltoPropsMap.get(""String_Node_Str""));
    if (filterClassName != null) {
      Filter filterClass=habitat.getService(Filter.class,filterClassName);
      Logger rootLogger=Logger.global.getParent();
      if (rootLogger != null) {
        rootLogger.setFilter(filterClass);
      }
    }
  }
 catch (  java.io.IOException ex) {
  }
  Logger _ologger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  LoggingOutputStream los=new LoggingOutputStream(_ologger,Level.INFO);
  LoggingOutputStream.LoggingPrintStream pout=los.new LoggingPrintStream(los);
  System.setOut(pout);
  Logger _elogger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  los=new LoggingOutputStream(_elogger,Level.SEVERE);
  LoggingOutputStream.LoggingPrintStream perr=los.new LoggingPrintStream(los);
  System.setErr(perr);
  if (logging != null) {
    fileMonitoring.monitors(logging,new FileMonitoring.FileChangeListener(){
      public void changed(      File changedFile){
synchronized (gfHandlers) {
          try {
            Map<String,String> props=getLoggingProperties();
            loggerReference=new Vector<Logger>();
            if (props == null)             return;
            for (            Map.Entry<String,String> entry : props.entrySet()) {
              String a=entry.getKey();
              String val=entry.getValue();
              if (a.endsWith(""String_Node_Str"")) {
                String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
                Level l=Level.parse(val);
                Logger appLogger=logMgr.getLogger(n);
                if (appLogger != null) {
                  appLogger.setLevel(l);
                  loggerReference.add(appLogger);
                }
 else                 if (gfHandlers.containsKey(n)) {
                  Handler h=(Handler)gfHandlers.get(n);
                  h.setLevel(l);
                }
 else                 if (n.equals(""String_Node_Str"")) {
                  Logger logger=Logger.global.getParent();
                  Handler[] h=logger.getHandlers();
                  for (int i=0; i < h.length; i++) {
                    String name=h[i].toString();
                    if (name.contains(""String_Node_Str""))                     h[i].setLevel(l);
                  }
                }
              }
 else               if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
                if (!val.equals(serverLogFileDetail)) {
                  PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,val);
                  UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
                  List<UnprocessedChangeEvents> b=new ArrayList();
                  b.add(ucel);
                  ucl.unprocessedTransactedEvents(b);
                }
              }
 else               if (a.equals(HANDLER_PROPERTY)) {
                if (!val.equals(handlerDetail)) {
                  generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
                }
              }
 else               if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
                if (!val.equals(consoleHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
                if (!val.equals(gffileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
                if (!val.equals(rotationOnTimeLimitInMinutesDetail)) {
                  generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
                }
              }
 else               if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
                if (!val.equals(flushFrequencyDetail)) {
                  generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
                if (!val.equals(filterHandlerDetails)) {
                  generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
                }
              }
 else               if (a.equals(LOGTOCONSOLE_PROPERTY)) {
                if (!val.equals(logToConsoleDetail)) {
                  generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
                }
              }
 else               if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
                if (!val.equals(rotationInTimeLimitInBytesDetail)) {
                  generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
                }
              }
 else               if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
                if (!val.equals(useSystemLoggingDetail)) {
                  generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
                if (!val.equals(fileHandlerCountDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
                }
              }
 else               if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
                if (!val.equals(retainErrorsStaticticsDetail)) {
                  generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
                }
              }
 else               if (a.equals(LOG4J_VERSION_PROPERTY)) {
                if (!val.equals(log4jVersionDetail)) {
                  generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
                }
              }
 else               if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
                if (!val.equals(maxHistoryFilesDetail)) {
                  generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
                }
              }
 else               if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
                if (!val.equals(rotationOnDateChangeDetail)) {
                  generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
                if (!val.equals(fileHandlerPatternDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
                if (!val.equals(fileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
                if (!val.equals(logFormatDateFormatDetail)) {
                  generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
                }
              }
            }
            logger.log(Level.INFO,""String_Node_Str"");
          }
 catch (          Exception e) {
            logger.log(Level.SEVERE,""String_Node_Str"",e);
          }
        }
      }
      public void deleted(      File deletedFile){
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
);
  }
  List<EarlyLogger.LevelAndMessage> catchUp=EarlyLogger.getEarlyMessages();
  if (!catchUp.isEmpty()) {
    for (    EarlyLogger.LevelAndMessage levelAndMessage : catchUp) {
      logger.log(levelAndMessage.level,levelAndMessage.msg);
    }
    catchUp.clear();
  }
  ArrayBlockingQueue<LogRecord> catchEarlyMessage=EarlyLogHandler.earlyMessages;
  while (!catchEarlyMessage.isEmpty()) {
    LogRecord logRecord=catchEarlyMessage.poll();
    if (logRecord != null) {
      logger.log(logRecord);
    }
  }
}"
29259,"public void changed(File changedFile){
synchronized (gfHandlers) {
    try {
      Map<String,String> props=getLoggingProperties();
      loggerReference=new Vector<Logger>();
      if (props == null)       return;
      Set<String> keys=props.keySet();
      for (      String a : keys) {
        if (a.endsWith(""String_Node_Str"")) {
          String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
          Level l=Level.parse(props.get(a));
          Logger appLogger=logMgr.getLogger(n);
          if (appLogger != null) {
            appLogger.setLevel(l);
            loggerReference.add(appLogger);
          }
 else           if (gfHandlers.containsKey(n)) {
            Handler h=(Handler)gfHandlers.get(n);
            h.setLevel(l);
          }
 else           if (n.equals(""String_Node_Str"")) {
            Logger logger=Logger.global.getParent();
            Handler[] h=logger.getHandlers();
            for (int i=0; i < h.length; i++) {
              String name=h[i].toString();
              if (name.contains(""String_Node_Str""))               h[i].setLevel(l);
            }
          }
        }
 else         if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
          if (!props.get(a).equals(serverLogFileDetail)) {
            PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,props.get(a));
            UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
            List<UnprocessedChangeEvents> b=new ArrayList();
            b.add(ucel);
            ucl.unprocessedTransactedEvents(b);
          }
        }
 else         if (a.equals(HANDLER_PROPERTY)) {
          if (!props.get(a).equals(handlerDetail)) {
            generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
          }
        }
 else         if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(consoleHandlerFormatterDetail)) {
            generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(gffileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
          if (!props.get(a).equals(rotationOnTimeLimitInMinutesDetail)) {
            generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
          }
        }
 else         if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
          if (!props.get(a).equals(flushFrequencyDetail)) {
            generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
          if (!props.get(a).equals(filterHandlerDetails)) {
            generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
          }
        }
 else         if (a.equals(LOGTOCONSOLE_PROPERTY)) {
          if (!props.get(a).equals(logToConsoleDetail)) {
            generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
          }
        }
 else         if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
          if (!props.get(a).equals(rotationInTimeLimitInBytesDetail)) {
            generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
          }
        }
 else         if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
          if (!props.get(a).equals(useSystemLoggingDetail)) {
            generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerCountDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
          }
        }
 else         if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
          if (!props.get(a).equals(retainErrorsStaticticsDetail)) {
            generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
          }
        }
 else         if (a.equals(LOG4J_VERSION_PROPERTY)) {
          if (!props.get(a).equals(log4jVersionDetail)) {
            generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
          }
        }
 else         if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
          if (!props.get(a).equals(maxHistoryFilesDetail)) {
            generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
          }
        }
 else         if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
          if (!props.get(a).equals(rotationOnDateChangeDetail)) {
            generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerPatternDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
          if (!props.get(a).equals(logFormatDateFormatDetail)) {
            generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
          }
        }
      }
      logger.log(Level.INFO,""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
}","public void changed(File changedFile){
synchronized (gfHandlers) {
    try {
      Map<String,String> props=getLoggingProperties();
      loggerReference=new Vector<Logger>();
      if (props == null)       return;
      for (      Map.Entry<String,String> entry : props.entrySet()) {
        String a=entry.getKey();
        String val=entry.getValue();
        if (a.endsWith(""String_Node_Str"")) {
          String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
          Level l=Level.parse(val);
          Logger appLogger=logMgr.getLogger(n);
          if (appLogger != null) {
            appLogger.setLevel(l);
            loggerReference.add(appLogger);
          }
 else           if (gfHandlers.containsKey(n)) {
            Handler h=(Handler)gfHandlers.get(n);
            h.setLevel(l);
          }
 else           if (n.equals(""String_Node_Str"")) {
            Logger logger=Logger.global.getParent();
            Handler[] h=logger.getHandlers();
            for (int i=0; i < h.length; i++) {
              String name=h[i].toString();
              if (name.contains(""String_Node_Str""))               h[i].setLevel(l);
            }
          }
        }
 else         if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
          if (!val.equals(serverLogFileDetail)) {
            PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,val);
            UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
            List<UnprocessedChangeEvents> b=new ArrayList();
            b.add(ucel);
            ucl.unprocessedTransactedEvents(b);
          }
        }
 else         if (a.equals(HANDLER_PROPERTY)) {
          if (!val.equals(handlerDetail)) {
            generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
          }
        }
 else         if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
          if (!val.equals(consoleHandlerFormatterDetail)) {
            generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
          if (!val.equals(gffileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
          if (!val.equals(rotationOnTimeLimitInMinutesDetail)) {
            generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
          }
        }
 else         if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
          if (!val.equals(flushFrequencyDetail)) {
            generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
          if (!val.equals(filterHandlerDetails)) {
            generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
          }
        }
 else         if (a.equals(LOGTOCONSOLE_PROPERTY)) {
          if (!val.equals(logToConsoleDetail)) {
            generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
          }
        }
 else         if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
          if (!val.equals(rotationInTimeLimitInBytesDetail)) {
            generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
          }
        }
 else         if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
          if (!val.equals(useSystemLoggingDetail)) {
            generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
          if (!val.equals(fileHandlerCountDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
          }
        }
 else         if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
          if (!val.equals(retainErrorsStaticticsDetail)) {
            generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
          }
        }
 else         if (a.equals(LOG4J_VERSION_PROPERTY)) {
          if (!val.equals(log4jVersionDetail)) {
            generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
          }
        }
 else         if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
          if (!val.equals(maxHistoryFilesDetail)) {
            generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
          }
        }
 else         if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
          if (!val.equals(rotationOnDateChangeDetail)) {
            generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
          if (!val.equals(fileHandlerPatternDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
          if (!val.equals(fileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
          if (!val.equals(logFormatDateFormatDetail)) {
            generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
          }
        }
      }
      logger.log(Level.INFO,""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
}"
29260,"private void retrieveFile(String zipFileName,AdminCommandContext context,File tempDirectory,Properties props,ActionReport report){
  Payload.Outbound outboundPayload=context.getOutboundPayload();
  boolean retrieveFiles=false;
  if (outboundPayload == null) {
    outboundPayload=PayloadImpl.Outbound.newInstance();
    retrieveFiles=true;
  }
  try {
    List<File> files=new ArrayList<File>(Arrays.asList(tempDirectory.listFiles()));
    for (int i=0; i < files.size(); i++) {
      File file=files.get(i);
      if (file.isDirectory()) {
        files.addAll(Arrays.asList(file.listFiles()));
        continue;
      }
      if (file.getAbsolutePath().contains(""String_Node_Str"")) {
        continue;
      }
      outboundPayload.attachFile(""String_Node_Str"",tempDirectory.toURI().relativize(file.toURI()),""String_Node_Str"",props,file);
    }
    if (retrieveFiles) {
      File targetLocalFile=new File(retrieveFilePath);
      if (targetLocalFile.exists()) {
        throw new Exception(""String_Node_Str"");
      }
      if (!targetLocalFile.getParentFile().exists()) {
        throw new Exception(""String_Node_Str"");
      }
      FileOutputStream targetStream=new FileOutputStream(targetLocalFile);
      outboundPayload.writeTo(targetStream);
      targetStream.flush();
      targetStream.close();
    }
  }
 catch (  Exception ex) {
    final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",retrieveFilePath);
    logger.log(Level.SEVERE,errorMsg,ex);
    report.setMessage(errorMsg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
}","private void retrieveFile(String zipFileName,AdminCommandContext context,File tempDirectory,Properties props,ActionReport report){
  Payload.Outbound outboundPayload=context.getOutboundPayload();
  boolean retrieveFiles=false;
  if (outboundPayload == null) {
    outboundPayload=PayloadImpl.Outbound.newInstance();
    retrieveFiles=true;
  }
  try {
    List<File> files=new ArrayList<File>(Arrays.asList(tempDirectory.listFiles()));
    for (int i=0; i < files.size(); i++) {
      File file=files.get(i);
      if (file.isDirectory()) {
        files.addAll(Arrays.asList(file.listFiles()));
        continue;
      }
      if (file.getAbsolutePath().contains(""String_Node_Str"")) {
        continue;
      }
      outboundPayload.attachFile(""String_Node_Str"",tempDirectory.toURI().relativize(file.toURI()),""String_Node_Str"",props,file);
    }
    if (retrieveFiles) {
      File targetLocalFile=new File(retrieveFilePath);
      if (targetLocalFile.exists()) {
        throw new Exception(""String_Node_Str"");
      }
      if (!targetLocalFile.getParentFile().exists()) {
        throw new Exception(""String_Node_Str"");
      }
      FileOutputStream targetStream=null;
      try {
        targetStream=new FileOutputStream(targetLocalFile);
        outboundPayload.writeTo(targetStream);
        targetStream.flush();
      }
  finally {
        if (targetStream != null)         targetStream.close();
      }
    }
  }
 catch (  Exception ex) {
    final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",retrieveFilePath);
    logger.log(Level.SEVERE,errorMsg,ex);
    report.setMessage(errorMsg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
}"
29261,"/** 
 * This method opens the server.log file and moves the stream to the specified filePosition.
 */
protected BufferedReader getLogFileReader(long fromFilePosition){
  try {
    FileInputStream file=new FileInputStream(getLogFileName());
    file.skip(fromFilePosition);
    BufferedReader reader=new BufferedReader(new InputStreamReader(file));
    return reader;
  }
 catch (  Exception ex) {
    Logger.getAnonymousLogger().log(Level.INFO,""String_Node_Str"",ex);
  }
  return null;
}","/** 
 * This method opens the server.log file and moves the stream to the specified filePosition.
 */
protected BufferedReader getLogFileReader(long fromFilePosition){
  FileInputStream file=null;
  try {
    file=new FileInputStream(getLogFileName());
    file.skip(fromFilePosition);
    BufferedReader reader=new BufferedReader(new InputStreamReader(file));
    return reader;
  }
 catch (  Exception ex) {
    if (file != null)     try {
      file.close();
    }
 catch (    Exception ex2) {
    }
    Logger.getAnonymousLogger().log(Level.INFO,""String_Node_Str"",ex);
  }
  return null;
}"
29262,"public File downloadGivenInstanceLogFile(ServiceLocator habitat,Server targetServer,Domain domain,Logger logger,String instanceName,String domainRoot,String logFileName,String instanceLogFileName) throws IOException {
  File instanceLogFile=null;
  SSHLauncher sshL=getSSHL(habitat);
  String sNode=targetServer.getNodeRef();
  Nodes nodes=domain.getNodes();
  Node node=nodes.getNode(sNode);
  if (node.getType().equals(""String_Node_Str"")) {
    sshL.init(node,logger);
    SFTPClient sftpClient=sshL.getSFTPClient();
    File logFileDirectoryOnServer=makingDirectory(domainRoot + File.separator + ""String_Node_Str""+ File.separator+ instanceName);
    boolean noFileFound=true;
    String loggingDir=getLoggingDirectoryForNode(instanceLogFileName,node,sNode,instanceName);
    try {
      Vector instanceLogFileNames=sftpClient.ls(loggingDir);
      for (int i=0; i < instanceLogFileNames.size(); i++) {
        SFTPv3DirectoryEntry file=(SFTPv3DirectoryEntry)instanceLogFileNames.get(i);
        String fileName=file.filename;
        if (!file.attributes.isDirectory() && !fileName.equals(""String_Node_Str"") && !fileName.equals(""String_Node_Str"")&& fileName.contains(""String_Node_Str"")&& !fileName.contains(""String_Node_Str"")) {
          noFileFound=false;
          break;
        }
      }
    }
 catch (    Exception e) {
      noFileFound=true;
    }
    if (noFileFound) {
      loggingDir=getLoggingDirectoryForNodeWhenNoFilesFound(instanceLogFileName,node,sNode,instanceName);
    }
    String loggingFile=loggingDir + File.separator + logFileName;
    if (!sftpClient.exists(loggingFile)) {
      loggingFile=loggingDir + File.separator + ""String_Node_Str"";
    }
 else     if (!sftpClient.exists(loggingFile)) {
      loggingFile=instanceLogFileName;
    }
    long instanceLogFileSize=0;
    instanceLogFile=new File(logFileDirectoryOnServer.getAbsolutePath() + File.separator + loggingFile.substring(loggingFile.lastIndexOf(File.separator),loggingFile.length()));
    if (instanceLogFile.exists())     instanceLogFileSize=instanceLogFile.length();
    SFTPv3FileAttributes sftPv3FileAttributes=sftpClient._stat(loggingFile);
    long fileSizeOnNode=sftPv3FileAttributes.size;
    if (instanceLogFileSize != fileSizeOnNode) {
      BufferedInputStream in=null;
      FileOutputStream file=null;
      BufferedOutputStream out=null;
      InputStream inputStream=sftpClient.read(loggingFile);
      in=new BufferedInputStream(inputStream);
      file=new FileOutputStream(instanceLogFile);
      out=new BufferedOutputStream(file);
      int i;
      while ((i=in.read()) != -1) {
        out.write(i);
      }
      out.flush();
    }
    sftpClient.close();
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    File logFileDirectoryOnServer=makingDirectory(domainRoot + File.separator + ""String_Node_Str""+ File.separator+ instanceName);
    String loggingDir=getLoggingDirectoryForNode(instanceLogFileName,node,sNode,instanceName);
    try {
      DcomInfo info=new DcomInfo(node);
      WindowsRemoteFileSystem wrfs=new WindowsRemoteFileSystem(info.getHost(),info.getUser(),info.getPassword());
      if (logFileName == null || logFileName.equals(""String_Node_Str"")) {
        logFileName=""String_Node_Str"";
      }
      WindowsRemoteFile wrf=new WindowsRemoteFile(wrfs,loggingDir + File.separator + logFileName);
      instanceLogFile=new File(logFileDirectoryOnServer + File.separator + logFileName);
      wrf.copyTo(instanceLogFile);
    }
 catch (    WindowsException ex) {
      throw new IOException(""String_Node_Str"");
    }
  }
  return instanceLogFile;
}","public File downloadGivenInstanceLogFile(ServiceLocator habitat,Server targetServer,Domain domain,Logger logger,String instanceName,String domainRoot,String logFileName,String instanceLogFileName) throws IOException {
  File instanceLogFile=null;
  SSHLauncher sshL=getSSHL(habitat);
  String sNode=targetServer.getNodeRef();
  Nodes nodes=domain.getNodes();
  Node node=nodes.getNode(sNode);
  if (node.getType().equals(""String_Node_Str"")) {
    sshL.init(node,logger);
    SFTPClient sftpClient=sshL.getSFTPClient();
    File logFileDirectoryOnServer=makingDirectory(domainRoot + File.separator + ""String_Node_Str""+ File.separator+ instanceName);
    boolean noFileFound=true;
    String loggingDir=getLoggingDirectoryForNode(instanceLogFileName,node,sNode,instanceName);
    try {
      Vector instanceLogFileNames=sftpClient.ls(loggingDir);
      for (int i=0; i < instanceLogFileNames.size(); i++) {
        SFTPv3DirectoryEntry file=(SFTPv3DirectoryEntry)instanceLogFileNames.get(i);
        String fileName=file.filename;
        if (!file.attributes.isDirectory() && !fileName.equals(""String_Node_Str"") && !fileName.equals(""String_Node_Str"")&& fileName.contains(""String_Node_Str"")&& !fileName.contains(""String_Node_Str"")) {
          noFileFound=false;
          break;
        }
      }
    }
 catch (    Exception e) {
      noFileFound=true;
    }
    if (noFileFound) {
      loggingDir=getLoggingDirectoryForNodeWhenNoFilesFound(instanceLogFileName,node,sNode,instanceName);
    }
    String loggingFile=loggingDir + File.separator + logFileName;
    if (!sftpClient.exists(loggingFile)) {
      loggingFile=loggingDir + File.separator + ""String_Node_Str"";
    }
 else     if (!sftpClient.exists(loggingFile)) {
      loggingFile=instanceLogFileName;
    }
    long instanceLogFileSize=0;
    instanceLogFile=new File(logFileDirectoryOnServer.getAbsolutePath() + File.separator + loggingFile.substring(loggingFile.lastIndexOf(File.separator),loggingFile.length()));
    if (instanceLogFile.exists())     instanceLogFileSize=instanceLogFile.length();
    SFTPv3FileAttributes sftPv3FileAttributes=sftpClient._stat(loggingFile);
    long fileSizeOnNode=sftPv3FileAttributes.size;
    if (instanceLogFileSize != fileSizeOnNode) {
      BufferedInputStream in=null;
      FileOutputStream file=null;
      BufferedOutputStream out=null;
      try {
        InputStream inputStream=sftpClient.read(loggingFile);
        in=new BufferedInputStream(inputStream);
        file=new FileOutputStream(instanceLogFile);
        out=new BufferedOutputStream(file);
        int i;
        while ((i=in.read()) != -1) {
          out.write(i);
        }
        out.flush();
      }
  finally {
        if (out != null)         try {
          out.close();
        }
 catch (        IOException ex) {
        }
        if (in != null)         try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    sftpClient.close();
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    File logFileDirectoryOnServer=makingDirectory(domainRoot + File.separator + ""String_Node_Str""+ File.separator+ instanceName);
    String loggingDir=getLoggingDirectoryForNode(instanceLogFileName,node,sNode,instanceName);
    try {
      DcomInfo info=new DcomInfo(node);
      WindowsRemoteFileSystem wrfs=new WindowsRemoteFileSystem(info.getHost(),info.getUser(),info.getPassword());
      if (logFileName == null || logFileName.equals(""String_Node_Str"")) {
        logFileName=""String_Node_Str"";
      }
      WindowsRemoteFile wrf=new WindowsRemoteFile(wrfs,loggingDir + File.separator + logFileName);
      instanceLogFile=new File(logFileDirectoryOnServer + File.separator + logFileName);
      wrf.copyTo(instanceLogFile);
    }
 catch (    WindowsException ex) {
      throw new IOException(""String_Node_Str"");
    }
  }
  return instanceLogFile;
}"
29263,"/** 
 * Rename the existing log file to something else. Then open the old log file name up once again. Intended to be called by a JMX agent.
 * @param newFileName The file name to move the log file entry to
 * @return true if a file was rotated with no error
 */
public synchronized boolean rotate(String newFileName){
  if (currentLogFile != null) {
    File holder=currentLogFile;
    close();
    try {
      holder.renameTo(new File(newFileName));
    }
 catch (    Throwable e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    currentDate=new Date();
    fileDateFormatter=new ThreadLocal<SimpleDateFormat>(){
      @Override protected SimpleDateFormat initialValue(){
        return new SimpleDateFormat(""String_Node_Str"");
      }
    }
;
    dateStamp=dateFormatter.get().format(currentDate);
    open();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Rename the existing log file to something else. Then open the old log file name up once again. Intended to be called by a JMX agent.
 * @param newFileName The file name to move the log file entry to
 * @return true if a file was rotated with no error
 */
public synchronized boolean rotate(String newFileName){
  if (currentLogFile != null) {
    File holder=currentLogFile;
    close();
    try {
      if (!holder.renameTo(new File(newFileName))) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str"",newFileName));
      }
    }
 catch (    Throwable e) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",newFileName),e);
    }
    currentDate=new Date();
    fileDateFormatter=new ThreadLocal<SimpleDateFormat>(){
      @Override protected SimpleDateFormat initialValue(){
        return new SimpleDateFormat(""String_Node_Str"");
      }
    }
;
    dateStamp=dateFormatter.get().format(currentDate);
    open();
    return true;
  }
 else {
    return false;
  }
}"
29264,"/** 
 * Create, configure, and return an Engine that will process all HTTP requests received from one of the associated Connectors, based on the specified properties. Do not create the JAAS default realm since all children will have their own.
 */
@Override public Engine createEngine(){
  StandardEngine engine=new StandardEngine();
  engine.setDebug(debug);
  engine.setLogger(logger);
  engine.setRealm(null);
  return (engine);
}","/** 
 * Create, configure, and return an Engine that will process all HTTP requests received from one of the associated Connectors, based on the specified properties. Do not create the JAAS default realm since all children will have their own.
 */
@Override public Engine createEngine(){
  StandardEngine engine=new StandardEngine();
  engine.setDebug(debug);
  engine.setLogger(super.getLogger());
  engine.setRealm(null);
  return (engine);
}"
29265,"/** 
 * Create a customized version of the Tomcat's 5 Coyote Connector. This connector is required in order to support PE Web Programmatic login functionality.
 * @param address InetAddress to bind to, or <code>null</code> if theconnector is supposed to bind to all addresses on this server
 * @param port Port number to listen to
 * @param protocol the http protocol to use.
 */
@Override public Connector createConnector(String address,int port,String protocol){
  if (address != null) {
    int index=address.indexOf('/');
    if (index != -1) {
      address=address.substring(index + 1);
    }
  }
  _logger.log(Level.FINE,""String_Node_Str"" + ((address == null) ? ""String_Node_Str"" : address) + ""String_Node_Str""+ port+ ""String_Node_Str""+ protocol+ ""String_Node_Str"");
  WebConnector connector=new WebConnector(webContainer);
  if (address != null) {
    connector.setAddress(address);
  }
  connector.setPort(port);
  if (protocol.equals(""String_Node_Str"")) {
    connector.setProtocolHandlerClassName(""String_Node_Str"");
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    connector.setProtocolHandlerClassName(""String_Node_Str"");
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    connector.setScheme(""String_Node_Str"");
    connector.setSecure(true);
  }
  return (connector);
}","/** 
 * Create a customized version of the Tomcat's 5 Coyote Connector. This connector is required in order to support PE Web Programmatic login functionality.
 * @param address InetAddress to bind to, or <code>null</code> if theconnector is supposed to bind to all addresses on this server
 * @param port Port number to listen to
 * @param protocol the http protocol to use.
 */
@Override public Connector createConnector(String address,int port,String protocol){
  if (address != null) {
    int index=address.indexOf('/');
    if (index != -1) {
      address=address.substring(index + 1);
    }
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,CREATE_CONNECTOR,new Object[]{(address == null) ? ""String_Node_Str"" : address,port,protocol});
  }
  WebConnector connector=new WebConnector(webContainer);
  if (address != null) {
    connector.setAddress(address);
  }
  connector.setPort(port);
  if (protocol.equals(""String_Node_Str"")) {
    connector.setProtocolHandlerClassName(""String_Node_Str"");
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    connector.setProtocolHandlerClassName(""String_Node_Str"");
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    connector.setScheme(""String_Node_Str"");
    connector.setSecure(true);
  }
  return (connector);
}"
29266,"/** 
 * Util method to load classes that might get compiled after this class is compiled.
 */
private ContainerListener loadListener(String className){
  try {
    Class clazz=Class.forName(className);
    return (ContainerListener)clazz.newInstance();
  }
 catch (  Throwable ex) {
    String msg=rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,className);
    _logger.log(Level.SEVERE,msg,ex);
  }
  return null;
}","/** 
 * Util method to load classes that might get compiled after this class is compiled.
 */
private ContainerListener loadListener(String className){
  try {
    Class clazz=Class.forName(className);
    return (ContainerListener)clazz.newInstance();
  }
 catch (  Throwable ex) {
    String msg=logger.getResourceBundle().getString(UNABLE_TO_INSTANTIATE_CONTAINER_LISTENER);
    msg=MessageFormat.format(msg,className);
    logger.log(Level.SEVERE,msg,ex);
  }
  return null;
}"
29267,"public boolean enableModifAccessToInstances(){
  return false;
}","@Override public boolean enableModifAccessToInstances(){
  return false;
}"
29268,"protected Map<String,Boolean> getFeatures(){
  return new HashMap<String,Boolean>(){
{
    }
  }
;
}","protected Map<String,Boolean> getFeatures(){
  if (features == null) {
    features=new HashMap<String,Boolean>();
  }
  return features;
}"
29269,"protected Map<String,MediaType> getMimeMappings(){
  return new HashMap<String,MediaType>(){
{
      put(""String_Node_Str"",MediaType.APPLICATION_XML_TYPE);
      put(""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE);
      put(""String_Node_Str"",MediaType.TEXT_HTML_TYPE);
      put(""String_Node_Str"",new MediaType(""String_Node_Str"",""String_Node_Str""));
    }
  }
;
}","protected Map<String,MediaType> getMimeMappings(){
  if (mappings == null) {
    mappings=new HashMap<String,MediaType>();
    mappings.put(""String_Node_Str"",MediaType.APPLICATION_XML_TYPE);
    mappings.put(""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE);
    mappings.put(""String_Node_Str"",MediaType.TEXT_HTML_TYPE);
    mappings.put(""String_Node_Str"",new MediaType(""String_Node_Str"",""String_Node_Str""));
  }
  return mappings;
}"
29270,"public ResourceConfig getResourceConfig(Set<Class<?>> classes,final ServerContext sc,final Habitat habitat,final Class<? extends Factory<Ref<Subject>>> subjectReferenceFactory) throws EndpointRegistrationException {
  final Reloader r=new Reloader();
  ResourceConfig rc=new ResourceConfig(classes);
  UriConnegFilter.enableFor(rc,getMimeMappings(),null);
  rc.addClasses(CsrfProtectionFilter.class);
  rc.addSingletons(r);
  rc.addClasses(ReloadResource.class);
  rc.addBinders(getJsonBinder(),new MultiPartBinder(),new AbstractBinder(){
    @Override protected void configure(){
      AbstractActiveDescriptor<Reloader> descriptor=BuilderHelper.createConstantDescriptor(r);
      descriptor.addContractType(Reloader.class);
      bind(descriptor);
      AbstractActiveDescriptor<ServerContext> scDescriptor=BuilderHelper.createConstantDescriptor(sc);
      scDescriptor.addContractType(ServerContext.class);
      bind(scDescriptor);
      AbstractActiveDescriptor<Habitat> hDescriptor=BuilderHelper.createConstantDescriptor(habitat);
      hDescriptor.addContractType(Habitat.class);
      bind(hDescriptor);
      RestSessionManager rsm=habitat.getService(RestSessionManager.class);
      AbstractActiveDescriptor<RestSessionManager> rmDescriptor=BuilderHelper.createConstantDescriptor(rsm);
      bind(rmDescriptor);
      bindFactory(subjectReferenceFactory).to(new TypeLiteral<Ref<Subject>>(){
      }
).in(PerLookup.class);
      bindFactory(ReferencingFactory.<Subject>referenceFactory()).to(new TypeLiteral<Ref<Subject>>(){
      }
).in(RequestScoped.class);
    }
  }
);
  rc.setProperty(MessageProperties.LEGACY_WORKERS_ORDERING,true);
  new RestConfigChangeListener(habitat,r,rc,sc);
  return rc;
}","@Override public ResourceConfig getResourceConfig(Set<Class<?>> classes,final ServerContext sc,final Habitat habitat,final Class<? extends Factory<Ref<Subject>>> subjectReferenceFactory) throws EndpointRegistrationException {
  final Reloader r=new Reloader();
  ResourceConfig rc=new ResourceConfig(classes);
  UriConnegFilter.enableFor(rc,getMimeMappings(),null);
  rc.addClasses(CsrfProtectionFilter.class);
  rc.addSingletons(r);
  rc.addClasses(ReloadResource.class);
  rc.addBinders(getJsonBinder(),new MultiPartBinder(),new AbstractBinder(){
    @Override protected void configure(){
      AbstractActiveDescriptor<Reloader> descriptor=BuilderHelper.createConstantDescriptor(r);
      descriptor.addContractType(Reloader.class);
      bind(descriptor);
      AbstractActiveDescriptor<ServerContext> scDescriptor=BuilderHelper.createConstantDescriptor(sc);
      scDescriptor.addContractType(ServerContext.class);
      bind(scDescriptor);
      AbstractActiveDescriptor<Habitat> hDescriptor=BuilderHelper.createConstantDescriptor(habitat);
      hDescriptor.addContractType(Habitat.class);
      bind(hDescriptor);
      RestSessionManager rsm=habitat.getService(RestSessionManager.class);
      AbstractActiveDescriptor<RestSessionManager> rmDescriptor=BuilderHelper.createConstantDescriptor(rsm);
      bind(rmDescriptor);
      bindFactory(subjectReferenceFactory).to(new TypeLiteral<Ref<Subject>>(){
      }
).in(PerLookup.class);
      bindFactory(ReferencingFactory.<Subject>referenceFactory()).to(new TypeLiteral<Ref<Subject>>(){
      }
).in(RequestScoped.class);
    }
  }
);
  rc.setProperty(MessageProperties.LEGACY_WORKERS_ORDERING,true);
  new RestConfigChangeListener(habitat,r,rc,sc);
  return rc;
}"
29271,"@Override public Map<String,MediaType> getMimeMappings(){
  return new HashMap<String,MediaType>(){
{
      put(""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE);
      put(""String_Node_Str"",MediaType.TEXT_PLAIN_TYPE);
      put(""String_Node_Str"",new MediaType(""String_Node_Str"",null));
      put(""String_Node_Str"",new MediaType(""String_Node_Str"",""String_Node_Str""));
    }
  }
;
}","@Override public Map<String,MediaType> getMimeMappings(){
  if (mappings == null) {
    mappings=new HashMap<String,MediaType>();
    mappings.put(""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE);
    mappings.put(""String_Node_Str"",MediaType.TEXT_PLAIN_TYPE);
    mappings.put(""String_Node_Str"",new MediaType(""String_Node_Str"",null));
    mappings.put(""String_Node_Str"",new MediaType(""String_Node_Str"",""String_Node_Str""));
  }
  ;
  return mappings;
}"
29272,"@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){
  Messager messager=processingEnv.getMessager();
  try {
    Map<String,List<String>> classes=new HashMap<String,List<String>>();
    for (    TypeElement te : elements) {
      for (      Element e : env.getElementsAnnotatedWith(te)) {
        final RestModelExtension annotation=e.getAnnotation(RestModelExtension.class);
        final String parent=annotation.parent();
        List<String> list=classes.get(parent);
        if (list == null) {
          list=new ArrayList<String>();
          classes.put(parent,list);
        }
        list.add(e.toString());
      }
    }
    if (!classes.isEmpty()) {
      final Filer filer=processingEnv.getFiler();
      FileObject fo=filer.createResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",""String_Node_Str"");
      BufferedWriter bw=new BufferedWriter(fo.openWriter());
      for (      Map.Entry<String,List<String>> entry : classes.entrySet()) {
        final String key=entry.getKey();
        for (        String ext : entry.getValue()) {
          bw.write(key + ""String_Node_Str"" + ext+ ""String_Node_Str"");
        }
      }
      bw.close();
    }
  }
 catch (  IOException ex) {
    messager.printMessage(Kind.ERROR,ex.getLocalizedMessage());
  }
  return true;
}","@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){
  Messager messager=processingEnv.getMessager();
  BufferedWriter bw=null;
  try {
    Map<String,List<String>> classes=new HashMap<String,List<String>>();
    for (    TypeElement te : elements) {
      for (      Element e : env.getElementsAnnotatedWith(te)) {
        final RestModelExtension annotation=e.getAnnotation(RestModelExtension.class);
        final String parent=annotation.parent();
        List<String> list=classes.get(parent);
        if (list == null) {
          list=new ArrayList<String>();
          classes.put(parent,list);
        }
        list.add(e.toString());
      }
    }
    if (!classes.isEmpty()) {
      final Filer filer=processingEnv.getFiler();
      FileObject fo=filer.createResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",""String_Node_Str"");
      bw=new BufferedWriter(fo.openWriter());
      for (      Map.Entry<String,List<String>> entry : classes.entrySet()) {
        final String key=entry.getKey();
        for (        String ext : entry.getValue()) {
          bw.write(key + ""String_Node_Str"" + ext+ ""String_Node_Str"");
        }
      }
      bw.close();
    }
  }
 catch (  IOException ex) {
    messager.printMessage(Kind.ERROR,ex.getLocalizedMessage());
    if (bw != null) {
      try {
        bw.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return true;
}"
29273,"@Override public List<RestModel> readFrom(Class<List<RestModel>> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    List<RestModel> list=new ArrayList<RestModel>();
    BufferedReader in=new BufferedReader(new InputStreamReader(entityStream));
    StringBuilder sb=new StringBuilder();
    String line=in.readLine();
    while (line != null) {
      sb.append(line);
      line=in.readLine();
    }
    JSONArray array=new JSONArray(sb.toString());
    Class<?> modelType=null;
    if (ParameterizedType.class.isAssignableFrom(genericType.getClass())) {
      final ParameterizedType pt=(ParameterizedType)genericType;
      modelType=(Class)pt.getActualTypeArguments()[0];
    }
    for (int i=0; i < array.length(); i++) {
      JSONObject o=array.getJSONObject(i);
      RestModel model=(RestModel)CompositeUtil.instance().unmarshallClass(modelType,o);
      Set<ConstraintViolation<RestModel>> cv=CompositeUtil.instance().validateRestModel(model);
      if (!cv.isEmpty()) {
        final Response response=Response.status(Status.BAD_REQUEST).entity(CompositeUtil.instance().getValidationFailureMessages(cv,model)).build();
        throw new WebApplicationException(response);
      }
      list.add(model);
    }
    return list;
  }
 catch (  Exception e) {
    throw new WebApplicationException(e);
  }
}","@Override public List<RestModel> readFrom(Class<List<RestModel>> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    List<RestModel> list=new ArrayList<RestModel>();
    BufferedReader in=new BufferedReader(new InputStreamReader(entityStream));
    StringBuilder sb=new StringBuilder();
    String line=in.readLine();
    while (line != null) {
      sb.append(line);
      line=in.readLine();
    }
    JSONArray array=new JSONArray(sb.toString());
    Class<?> modelType=null;
    if (genericType instanceof ParameterizedType) {
      final ParameterizedType pt=(ParameterizedType)genericType;
      modelType=(Class)pt.getActualTypeArguments()[0];
    }
    for (int i=0; i < array.length(); i++) {
      JSONObject o=array.getJSONObject(i);
      RestModel model=(RestModel)CompositeUtil.instance().unmarshallClass(modelType,o);
      Set<ConstraintViolation<RestModel>> cv=CompositeUtil.instance().validateRestModel(model);
      if (!cv.isEmpty()) {
        final Response response=Response.status(Status.BAD_REQUEST).entity(CompositeUtil.instance().getValidationFailureMessages(cv,model)).build();
        throw new WebApplicationException(response);
      }
      list.add(model);
    }
    return list;
  }
 catch (  Exception e) {
    throw new WebApplicationException(e);
  }
}"
29274,"/** 
 * This method takes a Type argument that represents a generic class (e.g., <code>List&lt;String&gt;) and returns the <code>Class</code> for the first generic type.  If the <code>Class</code> is not a generic type, <code>null</code> is returned. The primary intended usage for this is in the <code>MessageBodyReader</code>s to help return a more accurate result from <code>isReadable</code>, though it may also be helpful in other, more general situations.
 * @param genericType
 * @return
 */
public static Class<?> getFirstGenericType(Type genericType){
  if (ParameterizedType.class.isAssignableFrom(genericType.getClass())) {
    ParameterizedType pt=(ParameterizedType)genericType;
    Type[] typeArgs=pt.getActualTypeArguments();
    if ((typeArgs != null) && (typeArgs.length >= 1)) {
      final Type type=typeArgs[0];
      if (ParameterizedType.class.isAssignableFrom(type.getClass())) {
        return (Class<?>)((ParameterizedType)type).getRawType();
      }
 else {
        return (Class<?>)type;
      }
    }
  }
  return null;
}","/** 
 * This method takes a Type argument that represents a generic class (e.g., <code>List&lt;String&gt;) and returns the <code>Class</code> for the first generic type.  If the <code>Class</code> is not a generic type, <code>null</code> is returned. The primary intended usage for this is in the <code>MessageBodyReader</code>s to help return a more accurate result from <code>isReadable</code>, though it may also be helpful in other, more general situations.
 * @param genericType
 * @return
 */
public static Class<?> getFirstGenericType(Type genericType){
  if (genericType instanceof ParameterizedType) {
    ParameterizedType pt=(ParameterizedType)genericType;
    Type[] typeArgs=pt.getActualTypeArguments();
    if ((typeArgs != null) && (typeArgs.length >= 1)) {
      final Type type=typeArgs[0];
      if (ParameterizedType.class.isAssignableFrom(type.getClass())) {
        return (Class<?>)((ParameterizedType)type).getRawType();
      }
 else {
        return (Class<?>)type;
      }
    }
  }
  return null;
}"
29275,"private void setClusterInfo(ActionReport aggregateReporter,List<String> list){
  List<HashMap> data=new ArrayList<HashMap>(targets.size());
  int i;
  for (i=0; i < targets.size(); i++) {
    data.add(new HashMap<String,String>());
  }
  HashMap<String,String> clusterInfo=new HashMap<String,String>();
  int instanceCount=0;
  for (  Server server : targets) {
    String instanceName=server.getName();
    Map<String,String> instanceMap=data.get(instanceCount);
    String key=null;
    for (    String str : list) {
      if (str.contains(instanceName) && str.contains(""String_Node_Str"")) {
        ArrayList<String> kv=getKeyValuePair(str,instanceName);
        key=(String)kv.get(0);
        instanceMap.put((String)kv.get(0),kv.get(1));
      }
      if (key != null) {
        String desc=key.substring(0,key.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
        if (str.contains(desc)) {
          ArrayList<String> kv=getKeyValuePair(str,instanceName);
          clusterInfo.put((String)kv.get(0),kv.get(1));
        }
        String lastSampleTime=key.substring(0,key.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
        if (str.contains(lastSampleTime)) {
          ArrayList<String> kv=getKeyValuePair(str,instanceName);
          clusterInfo.put(instanceName + ""String_Node_Str"" + (String)kv.get(0),kv.get(1));
          key=null;
        }
      }
    }
    instanceCount++;
  }
  List<Server> allServers=targetService.getAllInstances();
  String instanceListStr=""String_Node_Str"";
  i=0;
  for (  Server server : allServers) {
    if (server.isRunning()) {
      if (i == 0)       instanceListStr=server.getName();
 else       instanceListStr=instanceListStr + ""String_Node_Str"" + server.getName();
      i++;
    }
  }
  aggregateReporter.appendMessage(""String_Node_Str"" + i + ""String_Node_Str""+ instanceListStr+ ""String_Node_Str""+ targetName+ ""String_Node_Str"");
  boolean noData=true;
  HashMap<String,String> h=data.get(0);
  Iterator it=h.keySet().iterator();
  while (it.hasNext()) {
    int total=0, max=0, min=0, index=0;
    float avg=0;
    int[] values=new int[data.size()];
    boolean flag=false;
    String s=(String)it.next();
    for (    HashMap hm : data) {
      String tmp=(String)hm.get(s);
      if (tmp == null) {
        flag=true;
        break;
      }
      if (tmp != null) {
        int count=Integer.parseInt(tmp);
        values[index++]=count;
        total=total + count;
      }
    }
    if (!flag) {
      noData=false;
      Arrays.sort(values);
      min=values[0];
      max=values[values.length - 1];
      avg=(float)total / (float)data.size();
      String descKey=s.substring(0,s.length() - 5) + ""String_Node_Str"";
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ total+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ avg+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ max+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ min+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + descKey+ ""String_Node_Str""+ clusterInfo.get(descKey)+ ""String_Node_Str"");
      String lastSampleTimeKey=s.substring(0,s.length() - 5) + ""String_Node_Str"";
      long sampletime=getLastSampleTime(clusterInfo,lastSampleTimeKey,data.size());
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + lastSampleTimeKey+ ""String_Node_Str""+ sampletime+ ""String_Node_Str"");
    }
  }
  if (noData) {
    aggregateReporter.appendMessage(""String_Node_Str"");
  }
}","private void setClusterInfo(ActionReport aggregateReporter,List<String> list){
  List<HashMap> data=new ArrayList<HashMap>(targets.size());
  int i;
  for (i=0; i < targets.size(); i++) {
    data.add(new HashMap<String,String>());
  }
  HashMap<String,String> clusterInfo=new HashMap<String,String>();
  int instanceCount=0;
  for (  Server server : targets) {
    String instanceName=server.getName();
    Map<String,String> instanceMap=data.get(instanceCount);
    String key=null;
    for (    String str : list) {
      if (str.contains(instanceName) && str.contains(""String_Node_Str"")) {
        ArrayList<String> kv=getKeyValuePair(str,instanceName);
        key=(String)kv.get(0);
        instanceMap.put((String)kv.get(0),kv.get(1));
      }
      if (key != null) {
        String desc=key.substring(0,key.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
        if (str.contains(desc)) {
          ArrayList<String> kv=getKeyValuePair(str,instanceName);
          clusterInfo.put((String)kv.get(0),kv.get(1));
        }
        String lastSampleTime=key.substring(0,key.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
        if (str.contains(lastSampleTime)) {
          ArrayList<String> kv=getKeyValuePair(str,instanceName);
          clusterInfo.put(instanceName + ""String_Node_Str"" + (String)kv.get(0),kv.get(1));
          key=null;
        }
      }
    }
    instanceCount++;
  }
  List<Server> allServers=targetService.getAllInstances();
  String instanceListStr=""String_Node_Str"";
  i=0;
  for (  Server server : allServers) {
    if (server.isRunning()) {
      if (i == 0)       instanceListStr=server.getName();
 else       instanceListStr=instanceListStr + ""String_Node_Str"" + server.getName();
      i++;
    }
  }
  aggregateReporter.appendMessage(""String_Node_Str"" + i + ""String_Node_Str""+ instanceListStr+ ""String_Node_Str""+ targetName+ ""String_Node_Str"");
  boolean noData=true;
  HashMap<String,String> h=data.get(0);
  Iterator it=h.keySet().iterator();
  while (it.hasNext()) {
    int total=0, max=0, min=0, index=0;
    float avg=0;
    int[] values=new int[data.size()];
    boolean flag=false;
    String s=(String)it.next();
    for (    HashMap hm : data) {
      String tmp=(String)hm.get(s);
      if (tmp == null) {
        flag=true;
        break;
      }
 else {
        int count=Integer.parseInt(tmp);
        values[index++]=count;
        total=total + count;
      }
    }
    if (!flag) {
      noData=false;
      Arrays.sort(values);
      min=values[0];
      max=values[values.length - 1];
      avg=(float)total / (float)data.size();
      String descKey=s.substring(0,s.length() - 5) + ""String_Node_Str"";
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ total+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ avg+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ max+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + s+ ""String_Node_Str""+ min+ ""String_Node_Str"");
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + descKey+ ""String_Node_Str""+ clusterInfo.get(descKey)+ ""String_Node_Str"");
      String lastSampleTimeKey=s.substring(0,s.length() - 5) + ""String_Node_Str"";
      long sampletime=getLastSampleTime(clusterInfo,lastSampleTimeKey,data.size());
      aggregateReporter.appendMessage(targetName + ""String_Node_Str"" + lastSampleTimeKey+ ""String_Node_Str""+ sampletime+ ""String_Node_Str"");
    }
  }
  if (noData) {
    aggregateReporter.appendMessage(""String_Node_Str"");
  }
}"
29276,"public String readLine() throws IOException {
  if (ib == null) {
    throw new IllegalStateException(sm.getString(""String_Node_Str""));
  }
  if (lineBuffer == null) {
    lineBuffer=new char[MAX_LINE_LENGTH];
  }
  String result=null;
  int pos=0;
  int end=-1;
  int skip=-1;
  StringBuilder aggregator=null;
  while (end < 0) {
    mark(MAX_LINE_LENGTH);
    while ((pos < MAX_LINE_LENGTH) && (end < 0)) {
      int nRead=read(lineBuffer,pos,MAX_LINE_LENGTH - pos);
      if (nRead < 0) {
        if (pos == 0 && aggregator == null) {
          return null;
        }
        end=pos;
        skip=pos;
      }
      for (int i=pos; (i < (pos + nRead)) && (end < 0); i++) {
        if (lineBuffer[i] == LINE_SEP[0]) {
          end=i;
          skip=i + 1;
          char nextchar;
          if (i == (pos + nRead - 1)) {
            nextchar=(char)read();
          }
 else {
            nextchar=lineBuffer[i + 1];
          }
          if (nextchar == LINE_SEP[1]) {
            skip++;
          }
        }
 else         if (lineBuffer[i] == LINE_SEP[1]) {
          end=i;
          skip=i + 1;
        }
      }
      if (nRead > 0) {
        pos+=nRead;
      }
    }
    if (end < 0) {
      if (aggregator == null) {
        aggregator=new StringBuilder();
      }
      aggregator.append(lineBuffer);
      pos=0;
    }
 else {
      reset();
      skip(skip);
    }
  }
  if (aggregator == null) {
    result=new String(lineBuffer,0,end);
  }
 else {
    aggregator.append(lineBuffer,0,end);
    result=aggregator.toString();
  }
  return result;
}","public String readLine() throws IOException {
  if (ib == null) {
    throw new IllegalStateException(sm.getString(""String_Node_Str""));
  }
  if (lineBuffer == null) {
    lineBuffer=new char[MAX_LINE_LENGTH];
  }
  String result=null;
  int pos=0;
  int end=-1;
  int skip=-1;
  StringBuilder aggregator=null;
  while (end < 0) {
    mark(MAX_LINE_LENGTH);
    while ((pos < MAX_LINE_LENGTH) && (end < 0)) {
      int nRead=read(lineBuffer,pos,MAX_LINE_LENGTH - pos);
      if (nRead < 0) {
        if (pos == 0 && aggregator == null) {
          return null;
        }
        end=pos;
        skip=pos;
      }
      for (int i=pos; (i < (pos + nRead)) && (end < 0); i++) {
        if (lineBuffer[i] == LINE_SEP[0]) {
          end=i;
          skip=i + 1;
          char nextchar;
          if (i == (pos + nRead - 1)) {
            nextchar=(char)read();
          }
 else {
            nextchar=lineBuffer[i + 1];
          }
          if (nextchar == LINE_SEP[1]) {
            skip++;
          }
        }
 else         if (lineBuffer[i] == LINE_SEP[1]) {
          end=i;
          skip=i + 1;
        }
      }
      if (nRead > 0) {
        pos+=nRead;
      }
    }
    if (end < 0) {
      if (aggregator == null) {
        aggregator=new StringBuilder();
      }
      aggregator.append(lineBuffer);
      pos=0;
    }
 else {
      reset();
      if (skip(skip) != skip && log.isLoggable(Level.WARNING)) {
        log.warning(sm.getString(""String_Node_Str"",skip));
      }
    }
  }
  if (aggregator == null) {
    result=new String(lineBuffer,0,end);
  }
 else {
    aggregator.append(lineBuffer,0,end);
    result=aggregator.toString();
  }
  return result;
}"
29277,"/** 
 * Closes the input stream.
 * @param pCloseUnderlying Whether to close the underlying stream(hard close)
 * @throws IOException An I/O error occurred.
 */
public void close(boolean pCloseUnderlying) throws IOException {
  if (closed) {
    return;
  }
  if (pCloseUnderlying) {
    closed=true;
    input.close();
  }
 else {
    for (; ; ) {
      int av=available();
      if (av == 0) {
        av=makeAvailable();
        if (av == 0) {
          break;
        }
      }
      skip(av);
    }
  }
  closed=true;
}","/** 
 * Closes the input stream.
 * @param pCloseUnderlying Whether to close the underlying stream(hard close)
 * @throws IOException An I/O error occurred.
 */
public void close(boolean pCloseUnderlying) throws IOException {
  if (closed) {
    return;
  }
  if (pCloseUnderlying) {
    closed=true;
    input.close();
  }
 else {
    for (; ; ) {
      int av=available();
      if (av == 0) {
        av=makeAvailable();
        if (av == 0) {
          break;
        }
      }
      if (skip(av) != av && log.isLoggable(Level.WARNING)) {
        log.warning(sm.getString(""String_Node_Str"",av));
      }
    }
  }
  closed=true;
}"
29278,"/** 
 * Returns the contents of the file as an array of bytes.  If the contents of the file were not yet cached in memory, they will be loaded from the disk storage and cached.
 * @return The contents of the file as an array of bytes.
 */
public byte[] get(){
  if (isInMemory()) {
    if (cachedContent == null) {
      cachedContent=dfos.getData();
    }
    return cachedContent;
  }
  byte[] fileData=new byte[(int)getSize()];
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(dfos.getFile());
    fis.read(fileData);
  }
 catch (  IOException e) {
    fileData=null;
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return fileData;
}","/** 
 * Returns the contents of the file as an array of bytes.  If the contents of the file were not yet cached in memory, they will be loaded from the disk storage and cached.
 * @return The contents of the file as an array of bytes.
 */
public byte[] get(){
  if (isInMemory()) {
    if (cachedContent == null) {
      cachedContent=dfos.getData();
    }
    return cachedContent;
  }
  byte[] fileData=new byte[(int)getSize()];
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(dfos.getFile());
    if (fis.read(fileData) != (int)getSize())     if (log.isLoggable(Level.INFO))     log.log(Level.INFO,sm.getString(""String_Node_Str""));
  }
 catch (  IOException e) {
    fileData=null;
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return fileData;
}"
29279,"/** 
 * Return the xsl template inputstream (if possible)
 */
protected InputStream findXsltInputStream(DirContext directory) throws IOException, ServletException {
  if (localXsltFile != null) {
    try {
      Object obj=directory.lookup(localXsltFile);
      if (obj != null && obj instanceof Resource) {
        InputStream is=((Resource)obj).streamContent();
        if (is != null)         return is;
      }
    }
 catch (    Throwable e) {
      ;
      if (debug > 10)       log(""String_Node_Str"" + localXsltFile + ""String_Node_Str"",e);
      return null;
    }
  }
  if (globalXsltFile != null) {
    FileInputStream fis=null;
    try {
      File f=new File(globalXsltFile);
      if (f.exists()) {
        fis=new FileInputStream(f);
        byte b[]=new byte[(int)f.length()];
        fis.read(b);
        return new ByteArrayInputStream(b);
      }
    }
  finally {
      if (fis != null)       fis.close();
    }
  }
  return null;
}","/** 
 * Return the xsl template inputstream (if possible)
 */
protected InputStream findXsltInputStream(DirContext directory) throws IOException, ServletException {
  if (localXsltFile != null) {
    try {
      Object obj=directory.lookup(localXsltFile);
      if (obj != null && obj instanceof Resource) {
        InputStream is=((Resource)obj).streamContent();
        if (is != null)         return is;
      }
    }
 catch (    Throwable e) {
      ;
      if (debug > 10)       log(""String_Node_Str"" + localXsltFile + ""String_Node_Str"",e);
      return null;
    }
  }
  if (globalXsltFile != null) {
    FileInputStream fis=null;
    try {
      File f=new File(globalXsltFile);
      if (f.exists()) {
        fis=new FileInputStream(f);
        byte b[]=new byte[(int)f.length()];
        if ((fis.read(b) < 0) && (debug > 0))         log(""String_Node_Str"" + globalXsltFile + ""String_Node_Str"");
        return new ByteArrayInputStream(b);
      }
    }
  finally {
      if (fis != null)       fis.close();
    }
  }
  return null;
}"
29280,"/** 
 * Lock the DAS from accepting any commands annotated with a SHARED or EXCLUSIVE CommandLock.  This method will result in the acquisition of an EXCLUSIVE lock.  This method will not return until the lock is acquired, it times out or an error occurs. 
 * @param timeout         lock timeout in seconds
 * @param lockOwner       the user who acquired the lock
 * @param message         message to return when a command is blocked
 * @return                  status regarding acquisition of the lock
 */
public synchronized SuspendStatus suspendCommands(long timeout,String lockOwner,String message){
  BlockingQueue<AdminCommandLock.SuspendStatus> suspendStatusQ=new ArrayBlockingQueue<AdminCommandLock.SuspendStatus>(1);
  if (suspendCommandsLockThread != null && suspendCommandsLockThread.isAlive()) {
    return SuspendStatus.ILLEGALSTATE;
  }
  suspendCommandsTimedOut=false;
  suspendCommandsLockThread=new SuspendCommandsLockThread(timeout,suspendStatusQ,lockOwner,message);
  try {
    suspendCommandsLockThread.setName(""String_Node_Str"");
    suspendCommandsLockThread.setDaemon(true);
  }
 catch (  IllegalThreadStateException e) {
    return SuspendStatus.ERROR;
  }
catch (  SecurityException e) {
    return SuspendStatus.ERROR;
  }
  suspendCommandsLockThread.start();
  SuspendStatus suspendStatus=queueTake(suspendStatusQ);
  return suspendStatus;
}","/** 
 * Lock the DAS from accepting any commands annotated with a SHARED or EXCLUSIVE CommandLock.  This method will result in the acquisition of an EXCLUSIVE lock.  This method will not return until the lock is acquired, it times out or an error occurs. 
 * @param timeout         lock timeout in seconds
 * @param lockOwner       the user who acquired the lock
 * @param message         message to return when a command is blocked
 * @return                  status regarding acquisition of the lock
 */
public synchronized SuspendStatus suspendCommands(long timeout,String lockOwner,String message){
  BlockingQueue<AdminCommandLock.SuspendStatus> suspendStatusQ=new ArrayBlockingQueue<AdminCommandLock.SuspendStatus>(1);
  if (suspendCommandsLockThread != null && suspendCommandsLockThread.isAlive()) {
    return SuspendStatus.ILLEGALSTATE;
  }
  suspendCommandsLockThread=new SuspendCommandsLockThread(timeout,suspendStatusQ,lockOwner,message);
  try {
    suspendCommandsLockThread.setName(""String_Node_Str"");
    suspendCommandsLockThread.setDaemon(true);
  }
 catch (  IllegalThreadStateException e) {
    return SuspendStatus.ERROR;
  }
catch (  SecurityException e) {
    return SuspendStatus.ERROR;
  }
  suspendCommandsLockThread.start();
  SuspendStatus suspendStatus=queueTake(suspendStatusQ);
  return suspendStatus;
}"
29281,"public void setCommandRun(String fullcommand){
  FullCommand=fullcommand;
}","public void setCommandRun(String fullcommand){
  fullCommand=fullcommand;
}"
29282,"public String getCommandRun(){
  return FullCommand;
}","public String getCommandRun(){
  return fullCommand;
}"
29283,"@Override public int getTotalStepCount(){
  return totalStepCount;
}","@Override public synchronized int getTotalStepCount(){
  return totalStepCount;
}"
29284,"public int getCurrentStepCount(){
  return this.currentStepCount;
}","public synchronized int getCurrentStepCount(){
  return this.currentStepCount;
}"
29285,"public ClassLoader getClassLoader(){
  if (classLoader == null) {
    URL[] urls=new URL[1];
    try {
      urls[0]=directory.getAbsoluteFile().toURL();
      classLoader=new URLClassLoader(urls);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return classLoader;
}","public ClassLoader getClassLoader(){
  if (classLoader == null) {
    final URL[] urls=new URL[1];
    try {
      if (directory == null)       throw new IllegalStateException(""String_Node_Str"");
      urls[0]=directory.getAbsoluteFile().toURL();
      classLoader=new PrivilegedAction<URLClassLoader>(){
        @Override public URLClassLoader run(){
          return new URLClassLoader(urls);
        }
      }
.run();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return classLoader;
}"
29286,"public ClassLoader getClassLoader(){
  if (classLoader == null) {
    URL[] urls=new URL[1];
    try {
      urls[0]=jarFile.getAbsoluteFile().toURL();
      classLoader=new URLClassLoader(urls);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return classLoader;
}","public ClassLoader getClassLoader(){
  if (classLoader == null) {
    final URL[] urls=new URL[1];
    try {
      if (jarFile == null)       throw new IllegalStateException(""String_Node_Str"");
      urls[0]=jarFile.getAbsoluteFile().toURL();
      classLoader=new PrivilegedAction<URLClassLoader>(){
        @Override public URLClassLoader run(){
          return new URLClassLoader(urls);
        }
      }
.run();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return classLoader;
}"
29287,"static SetterData createLockMode(LockModeType lockMode){
  SetterData data=new SetterData();
  data.type=SetterType.LOCK_MODE;
  data.lockMode=lockMode;
  return data;
}","static SetterData createLockMode(LockModeType lockMode){
  SetterData data=new SetterData(SetterType.LOCK_MODE);
  data.lockMode=lockMode;
  return data;
}"
29288,"static SetterData createFirstResult(int firstResult){
  SetterData data=new SetterData();
  data.type=SetterType.FIRST_RESULT;
  data.int1=firstResult;
  return data;
}","static SetterData createFirstResult(int firstResult){
  SetterData data=new SetterData(SetterType.FIRST_RESULT);
  data.int1=firstResult;
  return data;
}"
29289,"static SetterData createParameter(int position,Calendar value,TemporalType temporalType){
  SetterData data=new SetterData();
  data.type=SetterType.PARAM_POSITION_CAL_TEMPORAL;
  data.int1=position;
  data.calendar=value;
  data.temporalType=temporalType;
  return data;
}","static SetterData createParameter(int position,Calendar value,TemporalType temporalType){
  SetterData data=new SetterData(SetterType.PARAM_POSITION_CAL_TEMPORAL);
  data.int1=position;
  data.calendar=value;
  data.temporalType=temporalType;
  return data;
}"
29290,"static SetterData createFlushMode(FlushModeType flushMode){
  SetterData data=new SetterData();
  data.type=SetterType.FLUSH_MODE;
  data.flushMode=flushMode;
  return data;
}","static SetterData createFlushMode(FlushModeType flushMode){
  SetterData data=new SetterData(SetterType.FLUSH_MODE);
  data.flushMode=flushMode;
  return data;
}"
29291,"static SetterData createHint(String hintName,Object value){
  SetterData data=new SetterData();
  data.type=SetterType.HINT;
  data.string1=hintName;
  data.object1=value;
  return data;
}","static SetterData createHint(String hintName,Object value){
  SetterData data=new SetterData(SetterType.HINT);
  data.string1=hintName;
  data.object1=value;
  return data;
}"
29292,"static SetterData createMaxResults(int maxResults){
  SetterData data=new SetterData();
  data.type=SetterType.MAX_RESULTS;
  data.int1=maxResults;
  return data;
}","static SetterData createMaxResults(int maxResults){
  SetterData data=new SetterData(SetterType.MAX_RESULTS);
  data.int1=maxResults;
  return data;
}"
29293,"void reset(){
  newReplica=null;
  hashKey=null;
  oldReplica=null;
}","void reset(){
  newReplica=null;
  oldReplica=null;
}"
29294,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + newReplica + '\''+ ""String_Node_Str""+ hashKey+ ""String_Node_Str""+ oldReplica+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + newReplica + '\''+ ""String_Node_Str""+ oldReplica+ '\''+ '}';
}"
29295,"@Override public Container createContainer(EjbDescriptor ejbDescriptor,ClassLoader loader,DeploymentContext deployContext) throws Exception {
  EjbSessionDescriptor sd=(EjbSessionDescriptor)ejbDescriptor;
  AbstractSingletonContainer container;
  if (sd.hasContainerManagedConcurrency()) {
    container=new CMCSingletonContainer(ejbDescriptor,loader);
  }
 else {
    container=new BMCSingletonContainer(ejbDescriptor,loader);
  }
  initContainer(container,ejbDescriptor);
  return container;
}","@Override public Container createContainer(EjbDescriptor ejbDescriptor,ClassLoader loader,DeploymentContext deployContext) throws Exception {
}"
29296,"public Container createContainer(EjbDescriptor ejbDescriptor,ClassLoader loader,DeploymentContext deployContext) throws Exception {
  EntityContainer container=null;
  if (((EjbEntityDescriptor)ejbDescriptor).getIASEjbExtraDescriptors().isIsReadOnlyBean()) {
    container=new ReadOnlyBeanContainer(ejbDescriptor,loader);
  }
 else {
    String commitOption=null;
    IASEjbExtraDescriptors iased=((EjbEntityDescriptor)ejbDescriptor).getIASEjbExtraDescriptors();
    if (iased != null) {
      commitOption=iased.getCommitOption();
    }
    if (commitOption == null) {
      commitOption=ejbContainerDesc.getCommitOption();
    }
    if (commitOption.equals(""String_Node_Str"")) {
      _logger.log(Level.WARNING,""String_Node_Str"",new Object[]{ejbDescriptor.getName()});
      container=new EntityContainer(ejbDescriptor,loader);
    }
 else     if (commitOption.equals(""String_Node_Str"")) {
      _logger.log(Level.FINE,""String_Node_Str"" + ejbDescriptor.getName());
      container=new CommitCEntityContainer(ejbDescriptor,loader);
    }
 else {
      _logger.log(Level.FINE,""String_Node_Str"" + ejbDescriptor.getName());
      container=new EntityContainer(ejbDescriptor,loader);
    }
  }
  initContainer(container,ejbDescriptor);
  return container;
}","public Container createContainer(EjbDescriptor ejbDescriptor,ClassLoader loader,DeploymentContext deployContext) throws Exception {
}"
29297,"public <T>T get(String key) throws InsufficientCredentialException {
  Entry entry=simpleMap.getEntry(key);
  if (entry == null) {
    if (contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ)) {
      return null;
    }
  }
 else {
    if (entry != null && (entry.allowAllToRead || contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ))) {
      return (T)entry.getValue();
    }
  }
  throw new InsufficientCredentialException();
}","public <T>T get(String key) throws InsufficientCredentialException {
  Entry entry=simpleMap.getEntry(key);
  if (entry == null) {
    if (contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ)) {
      return null;
    }
  }
 else {
    if (entry.allowAllToRead || contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ)) {
      return (T)entry.getValue();
    }
  }
  throw new InsufficientCredentialException();
}"
29298,"public void updateCatalogMetadata(byte[] contents){
  short offset=findOffset(contents);
  short position=positions.get(positions.size() - 2);
  contents[offset++]=(byte)(position >>> 8);
  contents[offset++]=(byte)position;
  short end=positions.get(positions.size() - 1);
  contents[offset++]=(byte)(end >>> 8);
  contents[offset++]=(byte)end;
}","public void updateCatalogMetadata(byte[] contents){
  short offset=findOffset(contents);
  short position=positions.get(positions.size() - 2);
  contents[offset++]=(byte)(position >>> 8);
  contents[offset++]=(byte)position;
  short end=positions.get(positions.size() - 1);
  contents[offset++]=(byte)(end >>> 8);
  contents[offset]=(byte)end;
}"
29299,"public boolean skipToNextItem(ObjectInputStream ois) throws IOException {
  if (end > 0) {
    if (itemNumber < positions.size()) {
      int startPosition=positions.get(itemNumber);
      int endPosition=itemNumber + 1 < positions.size() ? positions.get(itemNumber + 1) : -1;
      ContextBootstrap.debug(MessageID.ATTEMPT_TO_SKIP_TO_NEXT_ITEM,itemNumber + 1,startPosition,endPosition);
      ois.reset();
      ois.skipBytes(startPosition);
      return true;
    }
 else {
      ContextBootstrap.debug(MessageID.ERROR_NO_MORE_ITEMS);
      return false;
    }
  }
 else {
    ContextBootstrap.debug(MessageID.NO_CATALOG);
    return false;
  }
}","public boolean skipToNextItem(ObjectInputStream ois) throws IOException {
  if (end > 0) {
    if (itemNumber < positions.size()) {
      int startPosition=positions.get(itemNumber);
      int endPosition=itemNumber + 1 < positions.size() ? positions.get(itemNumber + 1) : -1;
      ContextBootstrap.debug(MessageID.ATTEMPT_TO_SKIP_TO_NEXT_ITEM,itemNumber + 1,startPosition,endPosition);
      ois.reset();
      for (int skipped=0; skipped < startPosition; skipped+=ois.skipBytes(startPosition - skipped))       ;
      return true;
    }
 else {
      ContextBootstrap.debug(MessageID.ERROR_NO_MORE_ITEMS);
      return false;
    }
  }
 else {
    ContextBootstrap.debug(MessageID.NO_CATALOG);
    return false;
  }
}"
29300,"@Override public Entry nextEntry() throws IOException, ClassNotFoundException {
  String className=null;
  Entry.ContextType contextType=Entry.ContextType.fromOrdinal(ois.readByte());
  ContextBootstrap.debug(MessageID.READ_CONTEXT_TYPE,contextType);
  Object value=null;
switch (contextType) {
case BOOLEAN:
    value=ois.readBoolean();
  break;
case BYTE:
value=ois.readByte();
break;
case SHORT:
value=ois.readShort();
break;
case INT:
value=ois.readInt();
break;
case LONG:
value=ois.readLong();
break;
case STRING:
value=ois.readUTF();
break;
case ASCII_STRING:
value=readAscii();
break;
case VIEW_CAPABLE:
try {
PrivilegedWireAdapterAccessor priviledgedCM=(PrivilegedWireAdapterAccessor)ContextMapHelper.getScopeAwareContextMap();
priviledgedCM.createViewCapable(key,false);
Entry entry=priviledgedCM.getAccessControlledMap(false).getEntry(key);
ContextBootstrap.debug(MessageID.READ_VALUE,value);
EnumSet<PropagationMode> propModes=readPropModes();
ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
return entry;
}
 catch (InsufficientCredentialException e) {
throw new AssertionError(""String_Node_Str"");
}
case SERIALIZABLE:
value=WLSContext.HELPER.readFromBytes(readBytes(ois));
break;
case BIGDECIMAL:
case BIGINTEGER:
case ATOMICINTEGER:
case ATOMICLONG:
value=ois.readObject();
break;
case CHAR:
value=ois.readChar();
break;
case DOUBLE:
value=ois.readDouble();
break;
case FLOAT:
value=ois.readFloat();
break;
case OPAQUE:
boolean hasClassName=ois.readBoolean();
className=hasClassName ? readAscii() : null;
byte[] bytes=readBytes(ois);
SerializableContextFactory factory=WireAdapter.HELPER.findContextFactory(key,className);
value=factory == null ? bytes : WLSContext.HELPER.readFromBytes(factory.createInstance(),bytes);
break;
}
ContextBootstrap.debug(MessageID.READ_VALUE,value);
EnumSet<PropagationMode> propModes=readPropModes();
ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
return className == null ? new Entry(value,propModes,contextType) : Entry.createOpaqueEntryInstance(value,propModes,className);
}","@Override public Entry nextEntry() throws IOException, ClassNotFoundException {
  String className=null;
  Entry.ContextType contextType=Entry.ContextType.fromOrdinal(ois.readByte());
  ContextBootstrap.debug(MessageID.READ_CONTEXT_TYPE,contextType);
  Object value=null;
switch (contextType) {
case BOOLEAN:
    value=ois.readBoolean();
  break;
case BYTE:
value=ois.readByte();
break;
case SHORT:
value=ois.readShort();
break;
case INT:
value=ois.readInt();
break;
case LONG:
value=ois.readLong();
break;
case STRING:
value=ois.readUTF();
break;
case ASCII_STRING:
value=readAscii();
break;
case VIEW_CAPABLE:
try {
PrivilegedWireAdapterAccessor priviledgedCM=(PrivilegedWireAdapterAccessor)ContextMapHelper.getScopeAwareContextMap();
priviledgedCM.createViewCapable(key,false);
Entry entry=priviledgedCM.getAccessControlledMap(false).getEntry(key);
ContextBootstrap.debug(MessageID.READ_VALUE,""String_Node_Str"");
EnumSet<PropagationMode> propModes=readPropModes();
ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
return entry;
}
 catch (InsufficientCredentialException e) {
throw new AssertionError(""String_Node_Str"");
}
case SERIALIZABLE:
value=WLSContext.HELPER.readFromBytes(readBytes(ois));
break;
case BIGDECIMAL:
case BIGINTEGER:
case ATOMICINTEGER:
case ATOMICLONG:
value=ois.readObject();
break;
case CHAR:
value=ois.readChar();
break;
case DOUBLE:
value=ois.readDouble();
break;
case FLOAT:
value=ois.readFloat();
break;
case OPAQUE:
boolean hasClassName=ois.readBoolean();
className=hasClassName ? readAscii() : null;
byte[] bytes=readBytes(ois);
SerializableContextFactory factory=WireAdapter.HELPER.findContextFactory(key,className);
value=factory == null ? bytes : WLSContext.HELPER.readFromBytes(factory.createInstance(),bytes);
break;
default :
break;
}
ContextBootstrap.debug(MessageID.READ_VALUE,value);
EnumSet<PropagationMode> propModes=readPropModes();
ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
return className == null ? new Entry(value,propModes,contextType) : Entry.createOpaqueEntryInstance(value,propModes,className);
}"
29301,"protected void read(boolean mandatory,ObjectInputStream ois,Catalog catalog) throws IOException {
  if (mandatory) {
    ois.reset();
    ois.skip(catalog.getStart());
    readAscii();
  }
  catalog.read(ois);
}","protected void read(boolean mandatory,ObjectInputStream ois,Catalog catalog) throws IOException {
  if (mandatory) {
    ois.reset();
    int skipAmount=catalog.getStart();
    for (int skipped=0; skipped < skipAmount; skipped+=ois.skip(skipAmount - skipped))     ;
    readAscii();
  }
  catalog.read(ois);
}"
29302,"@Override public Entry nextEntry() throws IOException {
  EnumSet<PropagationMode> propModes=toPropagationMode(ois.readInt());
  ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
  String className=readAscii();
  Entry.ContextType contextType=toContextType(className);
  ContextBootstrap.debug(MessageID.READ_CONTEXT_TYPE,contextType);
  Object value;
switch (contextType) {
case LONG:
    value=ois.readLong();
  if (key.equals(Catalog.CATALOG_META_KEY)) {
    wlsCatalog.setMeta((Long)value);
  }
break;
case STRING:
value=ois.readUTF();
break;
case ASCII_STRING:
value=readAscii();
break;
case SERIALIZABLE:
byte[] bytes=new byte[ois.readInt()];
ois.readFully(bytes);
try {
Carrier carrier=Carrier.fromBytes(bytes);
value=carrier.serializable;
if (value instanceof ViewMeta) {
try {
value=((PrivilegedWireAdapterAccessor)ContextMapHelper.getScopeAwareContextMap()).createViewCapable(key,false);
}
 catch (InsufficientCredentialException e) {
throw new AssertionError(""String_Node_Str"");
}
}
 else {
if (key.equals(Catalog.CATALOG_KEY)) {
wlsCatalog.setPosisionsFrom((Catalog)value);
}
}
}
 catch (ClassNotFoundException e) {
ContextBootstrap.debug(MessageID.READING_OPAQUE_TYPE,key,bytes.length);
value=bytes;
contextType=ContextType.OPAQUE;
}
break;
case OPAQUE:
SerializableContextFactory factory=HELPER.findContextFactory(key,className);
if (factory == null) {
error(MessageID.ERROR_NO_WORK_CONTEXT_FACTORY,key,className);
return null;
}
 else {
value=factory.createInstance();
if (value instanceof WLSContext) {
((WLSContext)value).readContext(ois);
}
}
break;
default :
throw new AssertionError(""String_Node_Str"" + contextType);
}
ContextBootstrap.debug(MessageID.READ_VALUE,value);
return contextType == ContextType.OPAQUE ? Entry.createOpaqueEntryInstance(value,propModes,className) : new Entry(value,propModes,contextType);
}","@Override public Entry nextEntry() throws IOException {
  EnumSet<PropagationMode> propModes=toPropagationMode(ois.readInt());
  ContextBootstrap.debug(MessageID.READ_PROP_MODES,propModes);
  String className=readAscii();
  Entry.ContextType contextType=toContextType(className);
  ContextBootstrap.debug(MessageID.READ_CONTEXT_TYPE,contextType);
  Object value;
switch (contextType) {
case LONG:
    value=ois.readLong();
  if (key.equals(Catalog.CATALOG_META_KEY)) {
    wlsCatalog.setMeta((Long)value);
  }
break;
case STRING:
value=ois.readUTF();
break;
case ASCII_STRING:
value=readAscii();
break;
case SERIALIZABLE:
byte[] bytes=new byte[ois.readInt()];
ois.readFully(bytes);
try {
Carrier carrier=Carrier.fromBytes(bytes);
value=carrier.serializable;
if (value instanceof ViewMeta) {
try {
value=((PrivilegedWireAdapterAccessor)ContextMapHelper.getScopeAwareContextMap()).createViewCapable(key,false);
}
 catch (InsufficientCredentialException e) {
throw new AssertionError(""String_Node_Str"");
}
}
 else {
if (key.equals(Catalog.CATALOG_KEY)) {
wlsCatalog.setPosisionsFrom((Catalog)value);
}
}
}
 catch (ClassNotFoundException e) {
ContextBootstrap.debug(MessageID.READING_OPAQUE_TYPE,key,bytes.length);
value=bytes;
contextType=ContextType.OPAQUE;
}
break;
case OPAQUE:
SerializableContextFactory factory=HELPER.findContextFactory(key,className);
if (factory == null) {
error(MessageID.ERROR_NO_WORK_CONTEXT_FACTORY,key,className);
return null;
}
 else {
WLSContext ctx=factory.createInstance();
if (ctx != null) {
ctx.readContext(ois);
}
value=ctx;
}
break;
default :
throw new AssertionError(""String_Node_Str"" + contextType);
}
ContextBootstrap.debug(MessageID.READ_VALUE,value);
return contextType == ContextType.OPAQUE ? Entry.createOpaqueEntryInstance(value,propModes,className) : new Entry(value,propModes,contextType);
}"
29303,"@Override protected void read(boolean mandatory,ObjectInputStream ois,Catalog catalog) throws IOException {
  if (mandatory) {
    ois.reset();
    ois.skip(catalog.getStart());
    nextKey();
    Entry catalogEntry=nextEntry();
    catalog.setPosisionsFrom((Catalog)catalogEntry.getValue());
    catalog.upItemNumber(-1);
  }
}","@Override protected void read(boolean mandatory,ObjectInputStream ois,Catalog catalog) throws IOException {
  if (mandatory) {
    ois.reset();
    int amountToSkip=catalog.getStart();
    for (int skipped=0; skipped < amountToSkip; skipped+=ois.skip(amountToSkip - skipped))     ;
    nextKey();
    Entry catalogEntry=nextEntry();
    catalog.setPosisionsFrom((Catalog)catalogEntry.getValue());
    catalog.upItemNumber(-1);
  }
}"
29304,"public Collection<Sniffer> getSniffers(DeploymentContext context,List<URI> uris,Types types){
  Collection<Sniffer> regularSniffers=getSniffers();
  List<Sniffer> appSniffers=this.getApplicableSniffers(uris,types,regularSniffers,true);
  for (  Sniffer sniffer : regularSniffers) {
    if (!appSniffers.contains(sniffer) && sniffer.handles(context)) {
      appSniffers.add(sniffer);
    }
  }
  return appSniffers;
}","public Collection<Sniffer> getSniffers(DeploymentContext context,List<URI> uris,Types types){
  Collection<Sniffer> regularSniffers=getSniffers();
  ArchiveType archiveType=habitat.getService(ArchiveType.class,context.getArchiveHandler().getArchiveType());
  List<Sniffer> appSniffers=this.getApplicableSniffers(uris,types,regularSniffers,true,archiveType);
  for (  Sniffer sniffer : regularSniffers) {
    if (!appSniffers.contains(sniffer) && sniffer.handles(context)) {
      appSniffers.add(sniffer);
    }
  }
  return appSniffers;
}"
29305,"private <T extends Sniffer>List<T> getApplicableSniffers(List<URI> uris,Types types,Collection<T> sniffers,boolean checkPath){
  if (sniffers == null || sniffers.isEmpty()) {
    return Collections.emptyList();
  }
  List<T> result=new ArrayList<T>();
  for (  T sniffer : sniffers) {
    Class<? extends Annotation>[] annotations=sniffer.getAnnotationTypes();
    if (annotations == null)     continue;
    for (    Class<? extends Annotation> annotationType : annotations) {
      if (types != null) {
        Type type=types.getBy(annotationType.getName());
        if (type instanceof AnnotationType) {
          Collection<AnnotatedElement> elements=((AnnotationType)type).allAnnotatedTypes();
          for (          AnnotatedElement element : elements) {
            if (checkPath) {
              Type t=(element instanceof Member ? ((Member)element).getDeclaringType() : (Type)element);
              if (t.wasDefinedIn(uris)) {
                result.add(sniffer);
                break;
              }
            }
 else {
              result.add(sniffer);
              break;
            }
          }
        }
      }
    }
  }
  return result;
}","private <T extends Sniffer>List<T> getApplicableSniffers(List<URI> uris,Types types,Collection<T> sniffers,boolean checkPath,ArchiveType archiveType){
  if (sniffers == null || sniffers.isEmpty()) {
    return Collections.emptyList();
  }
  List<T> result=new ArrayList<T>();
  for (  T sniffer : sniffers) {
    if (archiveType != null && !sniffer.supportsArchiveType(archiveType)) {
      continue;
    }
    Class<? extends Annotation>[] annotations=sniffer.getAnnotationTypes();
    if (annotations == null)     continue;
    for (    Class<? extends Annotation> annotationType : annotations) {
      if (types != null) {
        Type type=types.getBy(annotationType.getName());
        if (type instanceof AnnotationType) {
          Collection<AnnotatedElement> elements=((AnnotationType)type).allAnnotatedTypes();
          for (          AnnotatedElement element : elements) {
            if (checkPath) {
              Type t=(element instanceof Member ? ((Member)element).getDeclaringType() : (Type)element);
              if (t.wasDefinedIn(uris)) {
                result.add(sniffer);
                break;
              }
            }
 else {
              result.add(sniffer);
              break;
            }
          }
        }
      }
    }
  }
  return result;
}"
29306,"@Override public Set<Annotation> getQualifiers(){
  Set<Annotation> qualifiers=new HashSet<Annotation>();
  qualifiers.add(new AnnotationLiteral<Default>(){
  }
);
  qualifiers.add(new AnnotationLiteral<Any>(){
  }
);
  return qualifiers;
}","@Override public Set<Annotation> getQualifiers(){
  Set<Annotation> qualifiers=new HashSet<Annotation>();
  qualifiers.add(new StaticAnnotation<Default>());
  qualifiers.add(new StaticAnnotation<Any>());
  return qualifiers;
}"
29307,"/** 
 * <p> This method is responsible for copying the data from the given <code>InputStream</code> to the <code>ServletResponse</code>'s <code>OutputStream</code>.  The <code>InputStream</code> should be the from the   {@link DownloadServlet#ContentSource}.</p>
 */
protected void writeContent(DownloadServlet.ContentSource source,DownloadServlet.Context context){
  InputStream in=source.getInputStream(context);
  ServletResponse resp=context.getServletResponse();
  if (in == null) {
    String jspPage=(String)context.getAttribute(""String_Node_Str"");
    if (jspPage != null && (jspPage.equals(""String_Node_Str""))) {
      try {
        ((HttpServletResponse)resp).sendError(404,""String_Node_Str"");
      }
 catch (      IOException ex) {
      }
    }
    return;
  }
  try {
    javax.servlet.ServletOutputStream out=resp.getOutputStream();
    InputStream stream=new BufferedInputStream(in);
    writeHeader(source,context);
    byte[] buf=new byte[512];
    int read=stream.read(buf,0,512);
    while (read != -1) {
      out.write(buf,0,read);
      read=stream.read(buf,0,512);
    }
    stream.close();
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * <p> This method is responsible for copying the data from the given <code>InputStream</code> to the <code>ServletResponse</code>'s <code>OutputStream</code>.  The <code>InputStream</code> should be the from the   {@link DownloadServlet#ContentSource}.</p>
 */
protected void writeContent(DownloadServlet.ContentSource source,DownloadServlet.Context context){
  InputStream in=source.getInputStream(context);
  ServletResponse resp=context.getServletResponse();
  if (in == null) {
    String jspPage=(String)context.getAttribute(""String_Node_Str"");
    if (jspPage != null && (jspPage.equals(""String_Node_Str""))) {
      try {
        ((HttpServletResponse)resp).sendError(404,""String_Node_Str"");
      }
 catch (      IOException ex) {
      }
    }
    return;
  }
  InputStream stream=null;
  try {
    javax.servlet.ServletOutputStream out=resp.getOutputStream();
    stream=new BufferedInputStream(in);
    writeHeader(source,context);
    byte[] buf=new byte[512];
    int read=stream.read(buf,0,512);
    while (read != -1) {
      out.write(buf,0,read);
      read=stream.read(buf,0,512);
    }
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}"
29308,"/** 
 * <p> This method is responsible for generating the content and returning an InputStream to that content.  It is also responsible for setting any attribute values in the  {@link DownloadServlet#Context}, such as   {@link DownloadServlet#EXTENSION} or{@link DownloadServlet#CONTENT_TYPE}.</p>
 */
public InputStream getInputStream(DownloadServlet.Context ctx){
  ctx.setAttribute(DownloadServlet.EXTENSION,""String_Node_Str"");
  HttpServletRequest request=(HttpServletRequest)ctx.getServletRequest();
  String lbName=request.getParameter(""String_Node_Str"");
  String restUrl=request.getParameter(""String_Node_Str"");
  InputStream tmpFile=null;
  try {
    String endpoint=restUrl + ""String_Node_Str"" + lbName+ ""String_Node_Str"";
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    Map attrsMap=new HashMap();
    String tempDir=System.getProperty(""String_Node_Str"");
    String lbFileName=""String_Node_Str"" + lbName + ""String_Node_Str""+ dateFormat.format(date);
    String slbFile=tempDir + System.getProperty(""String_Node_Str"") + lbFileName;
    File lbFile=new File(slbFile);
    attrsMap.put(""String_Node_Str"",slbFile);
    RestUtil.postRestRequestFromServlet(request,endpoint,attrsMap,true,true);
    tmpFile=new FileInputStream(lbFile);
    lbFile.delete();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  ctx.setAttribute(""String_Node_Str"",tmpFile);
  return tmpFile;
}","/** 
 * <p> This method is responsible for generating the content and returning an InputStream to that content.  It is also responsible for setting any attribute values in the  {@link DownloadServlet#Context}, such as   {@link DownloadServlet#EXTENSION} or{@link DownloadServlet#CONTENT_TYPE}.</p>
 */
public InputStream getInputStream(DownloadServlet.Context ctx){
  ctx.setAttribute(DownloadServlet.EXTENSION,""String_Node_Str"");
  HttpServletRequest request=(HttpServletRequest)ctx.getServletRequest();
  String lbName=request.getParameter(""String_Node_Str"");
  String restUrl=request.getParameter(""String_Node_Str"");
  InputStream tmpFile=null;
  try {
    String endpoint=restUrl + ""String_Node_Str"" + lbName+ ""String_Node_Str"";
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    Map attrsMap=new HashMap();
    String tempDir=System.getProperty(""String_Node_Str"");
    String lbFileName=""String_Node_Str"" + lbName + ""String_Node_Str""+ dateFormat.format(date);
    String slbFile=tempDir + System.getProperty(""String_Node_Str"") + lbFileName;
    File lbFile=new File(slbFile);
    attrsMap.put(""String_Node_Str"",slbFile);
    RestUtil.postRestRequestFromServlet(request,endpoint,attrsMap,true,true);
    tmpFile=new FileInputStream(lbFile);
    boolean success=lbFile.delete();
    if (!success) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  ctx.setAttribute(""String_Node_Str"",tmpFile);
  return tmpFile;
}"
29309,"@Override public void service(Request req,Response res){
  logger.log(Level.FINER,""String_Node_Str"",req.getRequestURI());
  try {
    res.setCharacterEncoding(Constants.ENCODING);
    if (latch.await(20L,TimeUnit.SECONDS)) {
      if (serverEnvironment.isInstance()) {
        if (!Method.GET.equals(req.getMethod()) && !enableModifAccessToInstances()) {
          reportError(req,res,HttpURLConnection.HTTP_FORBIDDEN,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
          return;
        }
      }
      AdminAccessController.Access access=null;
      if (adminAuthenticator != null) {
        final Subject subject=adminAuthenticator.loginAsAdmin(req);
        req.setAttribute(Constants.REQ_ATTR_SUBJECT,subject);
      }
      if (access == null || access.isOK()) {
        String context=getContextRoot();
        logger.log(Level.FINE,""String_Node_Str"",context);
        if ((context != null) && (!""String_Node_Str"".equals(context)) && (adapter == null)) {
          adapter=exposeContext(getResourceClasses(),sc,habitat);
          logger.log(Level.INFO,""String_Node_Str"",context);
        }
        adapter.service(req,res);
      }
    }
 else {
      reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
  }
 catch (  InterruptedException e) {
    reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
catch (  IOException e) {
    reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage()));
  }
catch (  LoginException e) {
    reportError(req,res,HttpURLConnection.HTTP_UNAUTHORIZED,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
catch (  Exception e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,msg);
    logger.log(Level.INFO,msg,e);
  }
}","@Override public void service(Request req,Response res){
  logger.log(Level.FINER,""String_Node_Str"",req.getRequestURI());
  try {
    res.setCharacterEncoding(Constants.ENCODING);
    if (latch.await(20L,TimeUnit.SECONDS)) {
      if (serverEnvironment.isInstance()) {
        if (!Method.GET.equals(req.getMethod()) && !enableModifAccessToInstances()) {
          reportError(req,res,HttpURLConnection.HTTP_FORBIDDEN,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
          return;
        }
      }
      AdminAccessController.Access access=null;
      if (adminAuthenticator != null) {
        final Subject subject=adminAuthenticator.loginAsAdmin(req);
        if (subject == null) {
          int status=HttpURLConnection.HTTP_UNAUTHORIZED;
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
          res.setHeader(HEADER_AUTHENTICATE,""String_Node_Str"");
          reportError(req,res,status,msg);
          return;
        }
        req.setAttribute(Constants.REQ_ATTR_SUBJECT,subject);
      }
      if (access == null || access.isOK()) {
        String context=getContextRoot();
        logger.log(Level.FINE,""String_Node_Str"",context);
        if ((context != null) && (!""String_Node_Str"".equals(context)) && (adapter == null)) {
          adapter=exposeContext(getResourceClasses(),sc,habitat);
          logger.log(Level.INFO,""String_Node_Str"",context);
        }
        adapter.service(req,res);
      }
    }
 else {
      reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
  }
 catch (  InterruptedException e) {
    reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
catch (  IOException e) {
    reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage()));
  }
catch (  LoginException e) {
    reportError(req,res,HttpURLConnection.HTTP_UNAUTHORIZED,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
catch (  Exception e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    reportError(req,res,HttpURLConnection.HTTP_UNAVAILABLE,msg);
    logger.log(Level.INFO,msg,e);
  }
}"
29310,"@Override public void postConstruct(){
  LOG.info(""String_Node_Str"");
  List<ActiveDescriptor<?>> descriptor=habitat.getDescriptors(BuilderHelper.createContractFilter(ConfigInjector.class.getName()));
  Class<?> clz=null;
  for (  ActiveDescriptor desc : descriptor) {
    if (desc.getName() == null) {
      continue;
    }
    ConfigInjector injector=habitat.getService(ConfigInjector.class,desc.getName());
    if (injector != null) {
      String clzName=injector.getClass().getName().substring(0,injector.getClass().getName().length() - 8);
      if (clzName == null) {
        continue;
      }
      try {
        clz=injector.getClass().getClassLoader().loadClass(clzName);
        if (clz == null) {
          LOG.log(Level.FINE,""String_Node_Str"" + clzName);
          continue;
        }
      }
 catch (      Throwable e) {
        if (clz == null) {
          LOG.log(Level.FINE,""String_Node_Str"",e);
        }
        LOG.log(Level.FINE,""String_Node_Str"" + clz.getName(),e);
        continue;
      }
    }
    if (clz.isAnnotationPresent(ActivateOnStartup.class)) {
      LOG.info(""String_Node_Str"" + clz.getName());
      applyConfig(clz);
    }
  }
  LOG.info(""String_Node_Str"");
}","@Override public void postConstruct(){
  LOG.info(""String_Node_Str"");
  List<ActiveDescriptor<?>> descriptor=habitat.getDescriptors(BuilderHelper.createContractFilter(ConfigInjector.class.getName()));
  Class<?> clz=null;
  for (  ActiveDescriptor desc : descriptor) {
    if (desc.getName() == null) {
      continue;
    }
    ConfigInjector injector=habitat.getService(ConfigInjector.class,desc.getName());
    if (injector != null) {
      String clzName=injector.getClass().getName().substring(0,injector.getClass().getName().length() - 8);
      if (clzName == null) {
        continue;
      }
      try {
        clz=injector.getClass().getClassLoader().loadClass(clzName);
        if (clz == null) {
          LOG.log(Level.FINE,""String_Node_Str"" + clzName);
        }
      }
 catch (      Throwable e) {
        LOG.log(Level.FINE,""String_Node_Str"",e);
      }
      continue;
    }
    if (clz.isAnnotationPresent(ActivateOnStartup.class)) {
      LOG.info(""String_Node_Str"" + clz.getName());
      applyConfig(clz);
    }
  }
  LOG.info(""String_Node_Str"");
}"
29311,"private InjectionResolver<Param> getInjector(AdminCommand command,ParameterMap parameters,MultiMap<String,File> map){
  CommandModel model;
  try {
    CommandModelProvider c=CommandModelProvider.class.cast(command);
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  return new MapInjectionResolver(model,parameters,map);
}","private InjectionResolver<Param> getInjector(AdminCommand command,ParameterMap parameters,MultiMap<String,File> map){
  CommandModel model=command instanceof CommandModelProvider ? ((CommandModelProvider)command).getModel() : new CommandModelImpl(command.getClass());
  return new MapInjectionResolver(model,parameters,map);
}"
29312,"@Override public void postConstruct(){
  LOG.info(""String_Node_Str"");
  List<ActiveDescriptor<?>> descriptor=habitat.getDescriptors(BuilderHelper.createContractFilter(ConfigInjector.class.getName()));
  Class<?> clz=null;
  for (  ActiveDescriptor desc : descriptor) {
    String name=desc.getName();
    if (desc.getName() == null) {
      continue;
    }
    ConfigInjector injector=habitat.getService(ConfigInjector.class,name);
    if (injector != null) {
      String clzName=injector.getClass().getName().substring(0,injector.getClass().getName().length() - 8);
      try {
        clz=injector.getClass().getClassLoader().loadClass(clzName);
        if (clz == null) {
          LOG.log(Level.INFO,""String_Node_Str"" + clzName);
        }
      }
 catch (      Throwable e) {
        LOG.log(Level.INFO,""String_Node_Str"" + clz.getName(),e);
      }
    }
    if (clz.isAnnotationPresent(ActivateOnStartup.class)) {
      LOG.info(""String_Node_Str"" + clz.getName());
      applyConfig(clz);
    }
  }
  LOG.info(""String_Node_Str"");
}","@Override public void postConstruct(){
  LOG.info(""String_Node_Str"");
  List<ActiveDescriptor<?>> descriptor=habitat.getDescriptors(BuilderHelper.createContractFilter(ConfigInjector.class.getName()));
  Class<?> clz=null;
  for (  ActiveDescriptor desc : descriptor) {
    String name=desc.getName();
    if (desc.getName() == null) {
      continue;
    }
    ConfigInjector injector=habitat.getService(ConfigInjector.class,name);
    if (injector != null) {
      String clzName=injector.getClass().getName().substring(0,injector.getClass().getName().length() - 8);
      if (clzName == null) {
        continue;
      }
      try {
        clz=injector.getClass().getClassLoader().loadClass(clzName);
        if (clz == null) {
          LOG.log(Level.FINE,""String_Node_Str"" + clzName);
          return;
        }
      }
 catch (      Throwable e) {
        if (clz == null) {
          LOG.log(Level.FINE,""String_Node_Str"",e);
          continue;
        }
        LOG.log(Level.FINE,""String_Node_Str"" + clz.getName(),e);
      }
    }
    if (clz.isAnnotationPresent(ActivateOnStartup.class)) {
      LOG.info(""String_Node_Str"" + clz.getName());
      applyConfig(clz);
    }
  }
  LOG.info(""String_Node_Str"");
}"
29313,"/** 
 * Handle the HTTP status code (and corresponding message) generated while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the error report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 */
protected void status(Request request,Response response){
  Context context=request.getContext();
  if (context == null)   return;
  if (!response.isError()) {
    return;
  }
  int statusCode=((HttpResponse)response).getStatus();
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    setErrorPageContentType(response,errorPage.getLocation(),context);
    dispatchToErrorPage(request,response,errorPage,null,null,statusCode);
  }
 else   if (statusCode >= 400 && statusCode < 600 && context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),null,null,statusCode);
  }
 else {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
    if (errorPage != null) {
      try {
        setErrorPageContentType(response,errorPage.getLocation(),context);
        handleHostErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log(""String_Node_Str"" + errorPage,e);
      }
    }
  }
}","/** 
 * Handle the HTTP status code (and corresponding message) generated while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the error report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 */
protected void status(Request request,Response response){
  Context context=request.getContext();
  if (context == null)   return;
  if (!response.isError()) {
    return;
  }
  int statusCode=((HttpResponse)response).getStatus();
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    if (errorPage.getLocation() != null) {
      File file=new File(context.getDocBase(),errorPage.getLocation());
      if (!file.exists()) {
        log.warning(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
      }
    }
    setErrorPageContentType(response,errorPage.getLocation(),context);
    dispatchToErrorPage(request,response,errorPage,null,null,statusCode);
  }
 else   if (statusCode >= 400 && statusCode < 600 && context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),null,null,statusCode);
  }
 else {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
    if (errorPage != null) {
      if (errorPage.getLocation() != null) {
        File file=new File(context.getDocBase(),errorPage.getLocation());
        if (!file.exists()) {
          log.warning(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
        }
      }
      try {
        setErrorPageContentType(response,errorPage.getLocation(),context);
        handleHostErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log(""String_Node_Str"" + errorPage,e);
      }
    }
  }
}"
29314,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  if (securityMapName == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Collection<ConnectorConnectionPool> ccPools=domain.getResources().getResources(ConnectorConnectionPool.class);
  if (!doesPoolNameExist(poolName,ccPools)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!doesMapNameExist(poolName,securityMapName,ccPools)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",securityMapName,poolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  List<SecurityMap> maps=getAllSecurityMapsForPool(poolName,ccPools);
  if (addPrincipals != null && removePrincipals != null) {
    for (    String ap : addPrincipals) {
      for (      String rp : removePrincipals) {
        if (rp.equals(ap)) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ap));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          return;
        }
      }
    }
  }
  if (addUserGroups != null && removeUserGroups != null) {
    for (    String aug : addUserGroups) {
      for (      String rug : removeUserGroups) {
        if (rug.equals(aug)) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",aug));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          return;
        }
      }
    }
  }
  if (addPrincipals != null) {
    for (    String principal : addPrincipals) {
      if (isPrincipalExisting(principal,maps)) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",principal,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  if (addUserGroups != null) {
    for (    String userGroup : addUserGroups) {
      if (isUserGroupExisting(userGroup,maps)) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userGroup,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  SecurityMap map=getSecurityMap(securityMapName,poolName,ccPools);
  final List<String> existingPrincipals=new ArrayList(map.getPrincipal());
  final List<String> existingUserGroups=new ArrayList(map.getUserGroup());
  if (existingPrincipals.isEmpty() && addPrincipals != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (existingUserGroups.isEmpty() && addUserGroups != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (removePrincipals != null) {
    boolean principalExists=true;
    String principal=null;
    if (existingPrincipals != null) {
      for (      String p : removePrincipals) {
        if (!existingPrincipals.contains(p)) {
          principalExists=false;
          principal=p;
          break;
        }
      }
    }
 else {
      principalExists=false;
    }
    if (!principalExists) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",principal,poolName));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (removeUserGroups != null) {
    boolean userGroupExists=true;
    String userGroup=null;
    if (existingUserGroups != null) {
      for (      String ug : removeUserGroups) {
        if (!existingUserGroups.contains(ug)) {
          userGroupExists=false;
          userGroup=ug;
          break;
        }
      }
    }
 else {
      userGroupExists=false;
    }
    if (!userGroupExists) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userGroup,poolName));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (addPrincipals == null && addUserGroups == null) {
    boolean principalsEmpty=false;
    boolean userGroupsEmpty=false;
    if (removePrincipals == null && existingPrincipals.isEmpty()) {
      principalsEmpty=true;
    }
    if (removeUserGroups == null && existingUserGroups.isEmpty()) {
      userGroupsEmpty=true;
    }
    if ((removePrincipals != null) && (removePrincipals.size() == existingPrincipals.size())) {
      principalsEmpty=true;
    }
    if ((removeUserGroups != null) && (removeUserGroups.size() == existingUserGroups.size())) {
      userGroupsEmpty=true;
    }
    if (userGroupsEmpty && principalsEmpty) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (addPrincipals != null) {
    for (    String principal : addPrincipals) {
      if (!existingPrincipals.contains(principal)) {
        existingPrincipals.add(principal);
      }
 else {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",principal,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  if (removePrincipals != null) {
    for (    String principal : removePrincipals) {
      existingPrincipals.remove(principal);
    }
  }
  if (addUserGroups != null) {
    for (    String userGroup : addUserGroups) {
      if (!existingUserGroups.contains(userGroup)) {
        existingUserGroups.add(userGroup);
      }
 else {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userGroup,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  if (removeUserGroups != null) {
    for (    String userGroup : removeUserGroups) {
      existingUserGroups.remove(userGroup);
    }
  }
  BackendPrincipal backendPrincipal=map.getBackendPrincipal();
  try {
    ConfigSupport.apply(new ConfigCode(){
      public Object run(      ConfigBeanProxy... params) throws PropertyVetoException, TransactionFailure {
        SecurityMap sm=(SecurityMap)params[0];
        BackendPrincipal bp=(BackendPrincipal)params[1];
        if (existingPrincipals != null) {
          sm.getPrincipal().clear();
          for (          String principal : existingPrincipals) {
            sm.getPrincipal().add(principal);
          }
        }
        if (existingUserGroups != null) {
          sm.getUserGroup().clear();
          for (          String userGroup : existingUserGroups) {
            sm.getUserGroup().add(userGroup);
          }
        }
        if (mappedusername != null && !mappedusername.isEmpty()) {
          bp.setUserName(mappedusername);
        }
        if (mappedpassword != null && !mappedpassword.isEmpty()) {
          bp.setPassword(mappedpassword);
        }
        return sm;
      }
    }
,map,backendPrincipal);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  TransactionFailure tfe) {
    Object params[]={securityMapName,poolName};
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params) + ""String_Node_Str"" + tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  if (securityMapName == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Collection<ConnectorConnectionPool> ccPools=domain.getResources().getResources(ConnectorConnectionPool.class);
  if (!doesPoolNameExist(poolName,ccPools)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!doesMapNameExist(poolName,securityMapName,ccPools)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",securityMapName,poolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  List<SecurityMap> maps=getAllSecurityMapsForPool(poolName,ccPools);
  if (addPrincipals != null && removePrincipals != null) {
    for (    String ap : addPrincipals) {
      for (      String rp : removePrincipals) {
        if (rp.equals(ap)) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ap));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          return;
        }
      }
    }
  }
  if (addUserGroups != null && removeUserGroups != null) {
    for (    String aug : addUserGroups) {
      for (      String rug : removeUserGroups) {
        if (rug.equals(aug)) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",aug));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          return;
        }
      }
    }
  }
  if (addPrincipals != null) {
    for (    String principal : addPrincipals) {
      if (isPrincipalExisting(principal,maps)) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",principal,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  if (addUserGroups != null) {
    for (    String userGroup : addUserGroups) {
      if (isUserGroupExisting(userGroup,maps)) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userGroup,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  SecurityMap map=getSecurityMap(securityMapName,poolName,ccPools);
  final List<String> existingPrincipals=new ArrayList(map.getPrincipal());
  final List<String> existingUserGroups=new ArrayList(map.getUserGroup());
  if (existingPrincipals.isEmpty() && addPrincipals != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (existingUserGroups.isEmpty() && addUserGroups != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (removePrincipals != null) {
    boolean principalExists=true;
    String principal=null;
    for (    String p : removePrincipals) {
      if (!existingPrincipals.contains(p)) {
        principalExists=false;
        principal=p;
        break;
      }
    }
    if (!principalExists) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",principal,poolName));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (removeUserGroups != null) {
    boolean userGroupExists=true;
    String userGroup=null;
    for (    String ug : removeUserGroups) {
      if (!existingUserGroups.contains(ug)) {
        userGroupExists=false;
        userGroup=ug;
        break;
      }
    }
    if (!userGroupExists) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userGroup,poolName));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (addPrincipals == null && addUserGroups == null) {
    boolean principalsEmpty=false;
    boolean userGroupsEmpty=false;
    if (removePrincipals == null && existingPrincipals.isEmpty()) {
      principalsEmpty=true;
    }
    if (removeUserGroups == null && existingUserGroups.isEmpty()) {
      userGroupsEmpty=true;
    }
    if ((removePrincipals != null) && (removePrincipals.size() == existingPrincipals.size())) {
      principalsEmpty=true;
    }
    if ((removeUserGroups != null) && (removeUserGroups.size() == existingUserGroups.size())) {
      userGroupsEmpty=true;
    }
    if (userGroupsEmpty && principalsEmpty) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (addPrincipals != null) {
    for (    String principal : addPrincipals) {
      if (!existingPrincipals.contains(principal)) {
        existingPrincipals.add(principal);
      }
 else {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",principal,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  if (removePrincipals != null) {
    for (    String principal : removePrincipals) {
      existingPrincipals.remove(principal);
    }
  }
  if (addUserGroups != null) {
    for (    String userGroup : addUserGroups) {
      if (!existingUserGroups.contains(userGroup)) {
        existingUserGroups.add(userGroup);
      }
 else {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userGroup,poolName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  if (removeUserGroups != null) {
    for (    String userGroup : removeUserGroups) {
      existingUserGroups.remove(userGroup);
    }
  }
  BackendPrincipal backendPrincipal=map.getBackendPrincipal();
  try {
    ConfigSupport.apply(new ConfigCode(){
      public Object run(      ConfigBeanProxy... params) throws PropertyVetoException, TransactionFailure {
        SecurityMap sm=(SecurityMap)params[0];
        BackendPrincipal bp=(BackendPrincipal)params[1];
        if (existingPrincipals != null) {
          sm.getPrincipal().clear();
          for (          String principal : existingPrincipals) {
            sm.getPrincipal().add(principal);
          }
        }
        if (existingUserGroups != null) {
          sm.getUserGroup().clear();
          for (          String userGroup : existingUserGroups) {
            sm.getUserGroup().add(userGroup);
          }
        }
        if (mappedusername != null && !mappedusername.isEmpty()) {
          bp.setUserName(mappedusername);
        }
        if (mappedpassword != null && !mappedpassword.isEmpty()) {
          bp.setPassword(mappedpassword);
        }
        return sm;
      }
    }
,map,backendPrincipal);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  TransactionFailure tfe) {
    Object params[]={securityMapName,poolName};
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params) + ""String_Node_Str"" + tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
}"
29315,"public ValidationResult(final Failures failures){
  mNumTested=failures.getNumTested();
  mNumFailures=failures.getNumFailures();
  mDetails=failures.toString();
  mProblems=failures.getFailures();
}","private ValidationResult(final Failures failures){
  mNumTested=failures.getNumTested();
  mNumFailures=failures.getNumFailures();
  mDetails=failures.toString();
  mProblems=failures.getFailures();
}"
29316,"public boolean hasProblems(){
  return mProblems.size() != 0;
}","public boolean hasProblems(){
  return !mProblems.isEmpty();
}"
29317,"/** 
 * ""best effort""<p> Attributes that cannot be sent to generic clients are not allowed. More than OpenTypes are allowed eg messy stuff like JSR 77 Stats and Statistics.
 */
private static void checkLegalForRemote(final Object value) throws IllegalClassException {
  if (value == null) {
    return;
  }
  final Class<?> clazz=value.getClass();
  if (isAcceptableRemoteType(clazz)) {
    return;
  }
  if (clazz.isSynthetic() || clazz.isLocalClass() || clazz.isAnonymousClass()|| clazz.isMemberClass()) {
    throw new IllegalClassException(clazz);
  }
  if (clazz.isArray()) {
    if (!isAcceptableRemoteType(clazz.getComponentType())) {
      final Object[] a=(Object[])value;
      for (      final Object o : a) {
        checkLegalForRemote(o);
      }
    }
  }
 else   if (Collection.class.isAssignableFrom(clazz)) {
    final Collection<?> items=(Collection)value;
    for (    final Object o : items) {
      checkLegalForRemote(o);
    }
  }
 else   if (Map.class.isAssignableFrom(clazz)) {
    final Map<?,?> items=(Map)value;
    for (    final Object key : items.keySet()) {
      checkLegalForRemote(key);
      checkLegalForRemote(items.get(key));
    }
  }
 else {
    throw new IllegalClassException(clazz);
  }
}","/** 
 * ""best effort""<p> Attributes that cannot be sent to generic clients are not allowed. More than OpenTypes are allowed eg messy stuff like JSR 77 Stats and Statistics.
 */
private static void checkLegalForRemote(final Object value) throws IllegalClassException {
  if (value == null) {
    return;
  }
  final Class<?> clazz=value.getClass();
  if (isAcceptableRemoteType(clazz)) {
    return;
  }
  if (clazz.isSynthetic() || clazz.isLocalClass() || clazz.isAnonymousClass()|| clazz.isMemberClass()) {
    throw new IllegalClassException(clazz);
  }
  if (clazz.isArray()) {
    if (!isAcceptableRemoteType(clazz.getComponentType())) {
      final Object[] a=(Object[])value;
      for (      final Object o : a) {
        checkLegalForRemote(o);
      }
    }
  }
 else   if (Collection.class.isAssignableFrom(clazz)) {
    final Collection<?> items=(Collection)value;
    for (    final Object o : items) {
      checkLegalForRemote(o);
    }
  }
 else   if (Map.class.isAssignableFrom(clazz)) {
    final Map<?,?> items=(Map)value;
    for (    final Map.Entry me : items.entrySet()) {
      checkLegalForRemote(me.getKey());
      checkLegalForRemote(me.getValue());
    }
  }
 else {
    throw new IllegalClassException(clazz);
  }
}"
29318,"private void validateObjectName(final AMXProxy proxy) throws ValidationFailureException {
  final ObjectName objectName=proxy.objectName();
  final String type=objectName.getKeyProperty(""String_Node_Str"");
  if (type == null || type.length() == 0) {
    fail(objectName,""String_Node_Str"");
  }
  if (!TYPE_PATTERN.matcher(type).matches()) {
    fail(objectName,""String_Node_Str"" + type + ""String_Node_Str""+ TYPE_PATTERN.pattern());
  }
  final String nameProp=objectName.getKeyProperty(""String_Node_Str"");
  if (nameProp != null) {
    if (nameProp.length() == 0) {
      fail(objectName,""String_Node_Str"");
    }
    if (!NAME_PATTERN.matcher(nameProp).matches()) {
      fail(objectName,""String_Node_Str"" + nameProp + ""String_Node_Str""+ NAME_PATTERN.pattern());
    }
  }
 else {
    final String name=proxy.getName();
    if (!proxy.extra().singleton()) {
      fail(objectName,""String_Node_Str"");
    }
  }
  if (proxy.parent() != null) {
    if (!proxy.parentPath().equals(proxy.parent().path())) {
      fail(objectName,""String_Node_Str"" + proxy.parentPath() + ""String_Node_Str""+ proxy.parent().objectName());
    }
  }
}","private void validateObjectName(final AMXProxy proxy) throws ValidationFailureException {
  final ObjectName objectName=proxy.objectName();
  final String type=objectName.getKeyProperty(""String_Node_Str"");
  if (type == null || type.length() == 0) {
    fail(objectName,""String_Node_Str"");
  }
  if (!TYPE_PATTERN.matcher(type).matches()) {
    fail(objectName,""String_Node_Str"" + type + ""String_Node_Str""+ TYPE_PATTERN.pattern());
  }
  final String nameProp=objectName.getKeyProperty(""String_Node_Str"");
  if (nameProp != null) {
    if (nameProp.length() == 0) {
      fail(objectName,""String_Node_Str"");
    }
    if (!NAME_PATTERN.matcher(nameProp).matches()) {
      fail(objectName,""String_Node_Str"" + nameProp + ""String_Node_Str""+ NAME_PATTERN.pattern());
    }
  }
 else {
    if (!proxy.extra().singleton()) {
      fail(objectName,""String_Node_Str"");
    }
  }
  if (proxy.parent() != null) {
    if (!proxy.parentPath().equals(proxy.parent().path())) {
      fail(objectName,""String_Node_Str"" + proxy.parentPath() + ""String_Node_Str""+ proxy.parent().objectName());
    }
  }
}"
29319,"private void validateAMXConfig(final AMXProxy proxy,final ProblemList problems) throws InstanceNotFoundException {
  if (!AMXConfigProxy.class.isAssignableFrom(proxy.extra().genericInterface())) {
    return;
  }
  final AMXConfigProxy config=proxy.as(AMXConfigProxy.class);
  if (!config.type().equals(""String_Node_Str"")) {
    if (!AMXConfigProxy.class.isAssignableFrom(config.parent().extra().genericInterface())) {
      problems.add(""String_Node_Str"" + config.objectName() + ""String_Node_Str""+ config.getParent());
    }
  }
  final Map<String,String> defaultValues=config.getDefaultValues(false);
  final Map<String,String> defaultValuesAMX=config.getDefaultValues(true);
  if (defaultValues.keySet().size() != defaultValuesAMX.keySet().size()) {
    problems.add(""String_Node_Str"" + defaultValues.keySet().size() + ""String_Node_Str""+ defaultValuesAMX.keySet().size());
  }
  for (  final String key : defaultValues.keySet()) {
    final Object value=defaultValues.get(key);
    if (value == null) {
      problems.add(""String_Node_Str"" + key);
    }
 else     if (!(value instanceof String)) {
      problems.add(""String_Node_Str"" + key);
    }
  }
  final String[] subTypes=config.extra().subTypes();
  if (subTypes != null) {
    for (    final String subType : subTypes) {
      final Map<String,String> subTypeDefaults=config.getDefaultValues(subType,false);
    }
  }
}","private void validateAMXConfig(final AMXProxy proxy,final ProblemList problems) throws InstanceNotFoundException {
  if (!AMXConfigProxy.class.isAssignableFrom(proxy.extra().genericInterface())) {
    return;
  }
  final AMXConfigProxy config=proxy.as(AMXConfigProxy.class);
  if (!config.type().equals(""String_Node_Str"")) {
    if (!AMXConfigProxy.class.isAssignableFrom(config.parent().extra().genericInterface())) {
      problems.add(""String_Node_Str"" + config.objectName() + ""String_Node_Str""+ config.getParent());
    }
  }
  final Map<String,String> defaultValues=config.getDefaultValues(false);
  final Map<String,String> defaultValuesAMX=config.getDefaultValues(true);
  if (defaultValues.keySet().size() != defaultValuesAMX.keySet().size()) {
    problems.add(""String_Node_Str"" + defaultValues.keySet().size() + ""String_Node_Str""+ defaultValuesAMX.keySet().size());
  }
  for (  final Map.Entry<String,String> me : defaultValues.entrySet()) {
    final Object value=me.getValue();
    if (value == null) {
      problems.add(""String_Node_Str"" + me.getKey());
    }
 else     if (!(value instanceof String)) {
      problems.add(""String_Node_Str"" + me.getKey());
    }
  }
  final String[] subTypes=config.extra().subTypes();
  if (subTypes != null) {
    for (    final String subType : subTypes) {
      config.getDefaultValues(subType,false);
    }
  }
}"
29320,"private void _validate(final AMXProxy proxy,final ProblemList problems) throws InstanceNotFoundException {
  progress(""String_Node_Str"",proxy.objectName());
  final ObjectName objectName=proxy.objectName();
  try {
    validateObjectName(proxy);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    validateMetadata(proxy,problems);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    validateRequiredAttributes(proxy);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    final String name=proxy.getName();
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  try {
    final ObjectName parent=proxy.getParent();
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  try {
    final ObjectName[] children=proxy.getChildren();
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  final Pathnames paths=mDomainRoot.getPathnames();
  if (paths == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    final String path=proxy.path();
    final ObjectName actualObjectName=proxy.objectName();
    final ObjectName o=paths.resolvePath(path);
    if (o == null) {
      if (proxy.valid()) {
        problems.add(""String_Node_Str"" + path + ""String_Node_Str""+ actualObjectName);
      }
    }
 else     if (!actualObjectName.equals(o)) {
      problems.add(""String_Node_Str"" + path + ""String_Node_Str""+ actualObjectName);
    }
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  final Set<String> attributeNames=proxy.extra().attributeNames();
  for (  final String attrName : attributeNames) {
    try {
      final Object result=proxy.extra().getAttribute(attrName);
      checkLegalForRemote(result);
    }
 catch (    final Exception t) {
      if (attrName.equals(ATTR_NAME) || attrName.equals(ATTR_PARENT) || attrName.equals(ATTR_CHILDREN)) {
        problems.add(""String_Node_Str"" + attrName + ""String_Node_Str"",t);
      }
 else {
        logWarning(""String_Node_Str"" + attrName + ""String_Node_Str""+ proxy.objectName(),ExceptionUtil.getRootCause(t));
      }
    }
  }
  List<String> tempProblems=null;
  try {
    validateChildren(proxy);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    final AMXProxy parent=proxy.parent();
    if (parent == null && !proxy.type().equals(Util.deduceType(DomainRoot.class))) {
      final ObjectName parentObjectName=proxy.getParent();
      final boolean exists=mMBeanServer.isRegistered(proxy.objectName());
      problems.add(""String_Node_Str"" + proxy.objectName() + ""String_Node_Str""+ exists+ ""String_Node_Str""+ parentObjectName);
    }
    final String nameProp=proxy.nameProp();
    final boolean valid=proxy.valid();
    final String path=proxy.path();
    final Extra extra=proxy.extra();
    final String interfaceName=extra.interfaceName();
    final MBeanInfo mbeanInfo=extra.mbeanInfo();
    final String group=extra.group();
    final Class<? extends AMXProxy> genericInterface=extra.genericInterface();
    final boolean invariantMBeanInfo=extra.isInvariantMBeanInfo();
    final boolean supportsAdoption=extra.supportsAdoption();
    final String[] subTypes=extra.subTypes();
    final Set<AMXProxy> childrenSet=proxy.childrenSet();
    final Map<String,Map<String,AMXProxy>> childrenMaps=proxy.childrenMaps();
    final Map<String,Object> attributesMap=proxy.attributesMap();
    final Set<String> attrNames=proxy.attributeNames();
    if (!attrNames.equals(attributesMap.keySet())) {
      final Set<String> keys=new HashSet<String>(attributesMap.keySet());
      keys.removeAll(attrNames);
      if (keys.size() != 0) {
        throw new Exception(""String_Node_Str"" + keys);
      }
      if (mLogInaccessibleAttributes) {
        final Set<String> missing=new HashSet<String>(attrNames);
        missing.removeAll(attributesMap.keySet());
        logInfo(""String_Node_Str"" + missing + ""String_Node_Str""+ proxy.objectName(),null);
      }
    }
    for (    final AMXProxy child : childrenSet) {
      if (child.extra().singleton()) {
        final String childType=child.type();
        if (!child.objectName().equals(proxy.child(childType).objectName())) {
          throw new Exception(""String_Node_Str"" + childType + ""String_Node_Str"");
        }
      }
    }
    for (    final String type : childrenMaps.keySet()) {
      final Map<String,AMXProxy> m=proxy.childrenMap(type);
      if (m.keySet().size() == 0) {
        throw new Exception(""String_Node_Str"" + type + ""String_Node_Str"");
      }
    }
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  try {
    validateAMXConfig(proxy,problems);
  }
 catch (  final Exception t) {
    if (proxy.valid()) {
      problems.add(""String_Node_Str"",t);
    }
  }
}","private void _validate(final AMXProxy proxy,final ProblemList problems) throws InstanceNotFoundException {
  progress(""String_Node_Str"",proxy.objectName());
  try {
    validateObjectName(proxy);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    validateMetadata(proxy,problems);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    validateRequiredAttributes(proxy);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    final String name=proxy.getName();
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  try {
    final ObjectName parent=proxy.getParent();
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  try {
    final ObjectName[] children=proxy.getChildren();
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  final Pathnames paths=mDomainRoot.getPathnames();
  if (paths == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    final String path=proxy.path();
    final ObjectName actualObjectName=proxy.objectName();
    final ObjectName o=paths.resolvePath(path);
    if (o == null) {
      if (proxy.valid()) {
        problems.add(""String_Node_Str"" + path + ""String_Node_Str""+ actualObjectName);
      }
    }
 else     if (!actualObjectName.equals(o)) {
      problems.add(""String_Node_Str"" + path + ""String_Node_Str""+ actualObjectName);
    }
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  final Set<String> attributeNames=proxy.extra().attributeNames();
  for (  final String attrName : attributeNames) {
    try {
      final Object result=proxy.extra().getAttribute(attrName);
      checkLegalForRemote(result);
    }
 catch (    final Exception t) {
      if (attrName.equals(ATTR_NAME) || attrName.equals(ATTR_PARENT) || attrName.equals(ATTR_CHILDREN)) {
        problems.add(""String_Node_Str"" + attrName + ""String_Node_Str"",t);
      }
 else {
        logWarning(""String_Node_Str"" + attrName + ""String_Node_Str""+ proxy.objectName(),ExceptionUtil.getRootCause(t));
      }
    }
  }
  try {
    validateChildren(proxy);
  }
 catch (  final Exception t) {
    problems.add(t);
  }
  try {
    final AMXProxy parent=proxy.parent();
    if (parent == null && !proxy.type().equals(Util.deduceType(DomainRoot.class))) {
      final ObjectName parentObjectName=proxy.getParent();
      final boolean exists=mMBeanServer.isRegistered(proxy.objectName());
      problems.add(""String_Node_Str"" + proxy.objectName() + ""String_Node_Str""+ exists+ ""String_Node_Str""+ parentObjectName);
    }
    final Set<AMXProxy> childrenSet=proxy.childrenSet();
    final Map<String,Map<String,AMXProxy>> childrenMaps=proxy.childrenMaps();
    final Map<String,Object> attributesMap=proxy.attributesMap();
    final Set<String> attrNames=proxy.attributeNames();
    if (!attrNames.equals(attributesMap.keySet())) {
      final Set<String> keys=new HashSet<String>(attributesMap.keySet());
      keys.removeAll(attrNames);
      if (!keys.isEmpty()) {
        throw new Exception(""String_Node_Str"" + keys);
      }
      if (mLogInaccessibleAttributes) {
        final Set<String> missing=new HashSet<String>(attrNames);
        missing.removeAll(attributesMap.keySet());
        logInfo(""String_Node_Str"" + missing + ""String_Node_Str""+ proxy.objectName(),null);
      }
    }
    for (    final AMXProxy child : childrenSet) {
      if (child.extra().singleton()) {
        final String childType=child.type();
        if (!child.objectName().equals(proxy.child(childType).objectName())) {
          throw new Exception(""String_Node_Str"" + childType + ""String_Node_Str"");
        }
      }
    }
    for (    final String type : childrenMaps.keySet()) {
      final Map<String,AMXProxy> m=proxy.childrenMap(type);
      if (m.keySet().isEmpty()) {
        throw new Exception(""String_Node_Str"" + type + ""String_Node_Str"");
      }
    }
  }
 catch (  final Exception t) {
    problems.add(""String_Node_Str"",t);
  }
  try {
    validateAMXConfig(proxy,problems);
  }
 catch (  final Exception t) {
    if (proxy.valid()) {
      problems.add(""String_Node_Str"",t);
    }
  }
}"
29321,"private void validateMetadata(final AMXProxy proxy,final ProblemList problems) throws InstanceNotFoundException {
  final MBeanInfo mbeanInfo=proxy.extra().mbeanInfo();
  final Descriptor d=mbeanInfo.getDescriptor();
  final Set<String> LEGAL_AMX_DESCRIPTORS=SetUtil.newStringSet(DESC_GENERIC_INTERFACE_NAME,DESC_IS_SINGLETON,DESC_IS_GLOBAL_SINGLETON,DESC_GROUP,DESC_SUPPORTS_ADOPTION,DESC_SUB_TYPES);
  for (  final String fieldName : d.getFieldNames()) {
    if (fieldName.startsWith(DESC_PREFIX) && !LEGAL_AMX_DESCRIPTORS.contains(fieldName)) {
      problems.add(""String_Node_Str"" + fieldName + ""String_Node_Str""+ d.getFieldValue(fieldName));
    }
  }
  final MetadataValidator val=new MetadataValidator(d,problems);
  val.validateMetadataBoolean(DESC_IS_SINGLETON);
  val.validateMetadataBoolean(DESC_SUPPORTS_ADOPTION);
  val.validateMetadataBoolean(DESC_STD_IMMUTABLE_INFO);
  val.validateMetadataString(DESC_STD_INTERFACE_NAME);
  val.validateMetadataString(DESC_GENERIC_INTERFACE_NAME);
  val.validateMetadataString(DESC_GROUP);
  val.validate(DESC_SUB_TYPES,String[].class);
  for (  final MBeanAttributeInfo attrInfo : mbeanInfo.getAttributes()) {
    checkLegalAttributeType(attrInfo.getType(),attrInfo.getName(),problems);
    new MetadataValidator(attrInfo.getDescriptor(),problems);
  }
  for (  final MBeanOperationInfo opInfo : mbeanInfo.getOperations()) {
    checkLegalReturnType(opInfo.getReturnType(),opInfo.getName(),problems);
    new MetadataValidator(opInfo.getDescriptor(),problems);
  }
  for (  final MBeanConstructorInfo cosntructorInfo : mbeanInfo.getConstructors()) {
    new MetadataValidator(cosntructorInfo.getDescriptor(),problems);
  }
  for (  final MBeanNotificationInfo notifInfo : mbeanInfo.getNotifications()) {
    new MetadataValidator(notifInfo.getDescriptor(),problems);
  }
  if (proxy.extra().globalSingleton()) {
    final ObjectName objectName=proxy.objectName();
    final ObjectName pattern=Util.newObjectNamePattern(objectName.getDomain(),Util.makeTypeProp(Util.getTypeProp(objectName)));
    try {
      final long start=System.currentTimeMillis();
      final Set<ObjectName> instances=mMBeanServer.queryNames(pattern,null);
      final long elapsed=System.currentTimeMillis() - start;
      if (instances.size() > 1) {
        problems.add(""String_Node_Str"" + objectName + ""String_Node_Str""+ CollectionUtil.toString(instances,""String_Node_Str""));
      }
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
  }
}","private void validateMetadata(final AMXProxy proxy,final ProblemList problems) throws InstanceNotFoundException {
  final MBeanInfo mbeanInfo=proxy.extra().mbeanInfo();
  final Descriptor d=mbeanInfo.getDescriptor();
  final Set<String> LEGAL_AMX_DESCRIPTORS=SetUtil.newStringSet(DESC_GENERIC_INTERFACE_NAME,DESC_IS_SINGLETON,DESC_IS_GLOBAL_SINGLETON,DESC_GROUP,DESC_SUPPORTS_ADOPTION,DESC_SUB_TYPES);
  for (  final String fieldName : d.getFieldNames()) {
    if (fieldName.startsWith(DESC_PREFIX) && !LEGAL_AMX_DESCRIPTORS.contains(fieldName)) {
      problems.add(""String_Node_Str"" + fieldName + ""String_Node_Str""+ d.getFieldValue(fieldName));
    }
  }
  final MetadataValidator val=new MetadataValidator(d,problems);
  val.validateMetadataBoolean(DESC_IS_SINGLETON);
  val.validateMetadataBoolean(DESC_SUPPORTS_ADOPTION);
  val.validateMetadataBoolean(DESC_STD_IMMUTABLE_INFO);
  val.validateMetadataString(DESC_STD_INTERFACE_NAME);
  val.validateMetadataString(DESC_GENERIC_INTERFACE_NAME);
  val.validateMetadataString(DESC_GROUP);
  val.validate(DESC_SUB_TYPES,String[].class);
  for (  final MBeanAttributeInfo attrInfo : mbeanInfo.getAttributes()) {
    checkLegalAttributeType(attrInfo.getType(),attrInfo.getName(),problems);
    new MetadataValidator(attrInfo.getDescriptor(),problems);
  }
  for (  final MBeanOperationInfo opInfo : mbeanInfo.getOperations()) {
    checkLegalReturnType(opInfo.getReturnType(),opInfo.getName(),problems);
    new MetadataValidator(opInfo.getDescriptor(),problems);
  }
  for (  final MBeanConstructorInfo cosntructorInfo : mbeanInfo.getConstructors()) {
    new MetadataValidator(cosntructorInfo.getDescriptor(),problems);
  }
  for (  final MBeanNotificationInfo notifInfo : mbeanInfo.getNotifications()) {
    new MetadataValidator(notifInfo.getDescriptor(),problems);
  }
  if (proxy.extra().globalSingleton()) {
    final ObjectName objectName=proxy.objectName();
    final ObjectName pattern=Util.newObjectNamePattern(objectName.getDomain(),Util.makeTypeProp(Util.getTypeProp(objectName)));
    try {
      final Set<ObjectName> instances=mMBeanServer.queryNames(pattern,null);
      if (instances.size() > 1) {
        problems.add(""String_Node_Str"" + objectName + ""String_Node_Str""+ CollectionUtil.toString(instances,""String_Node_Str""));
      }
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
  }
}"
29322,"/** 
 * verify that the children/parent relationship exists 
 */
private void validateChildren(final AMXProxy proxy) throws ValidationFailureException {
  final Set<String> attrNames=proxy.attributeNames();
  if (!attrNames.contains(ATTR_CHILDREN)) {
    try {
      final ObjectName[] children=proxy.getChildren();
      fail(proxy,""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
 else {
    try {
      final ObjectName[] children=proxy.getChildren();
      if (children == null) {
        fail(proxy,""String_Node_Str"");
      }
      final Set<ObjectName> childrenSet=SetUtil.newSet(children);
      if (childrenSet.size() != children.length) {
        fail(proxy,""String_Node_Str"");
      }
      if (childrenSet.contains(null)) {
        fail(proxy,""String_Node_Str"");
      }
      for (      final ObjectName childObjectName : children) {
        if (childObjectName == null) {
          fail(proxy,""String_Node_Str"");
        }
        final AMXProxy child=mProxyFactory.getProxy(childObjectName);
        if (!proxy.objectName().equals(child.parent().objectName())) {
          fail(proxy,""String_Node_Str"" + child.parent().objectName() + ""String_Node_Str""+ proxy.objectName());
        }
      }
      final Set<String> caseSensitiveTypes=new HashSet<String>();
      final Set<String> caseInsensitiveTypes=new HashSet<String>();
      for (      final ObjectName o : children) {
        caseSensitiveTypes.add(Util.getTypeProp(o));
        caseInsensitiveTypes.add(Util.getTypeProp(o).toLowerCase());
      }
      if (caseSensitiveTypes.size() != caseInsensitiveTypes.size()) {
        fail(proxy,""String_Node_Str"");
      }
      final Set<ObjectName> tracked=getMBeanTracker().getChildrenOf(proxy.objectName());
      if (childrenSet.size() != children.length) {
        final Set<ObjectName> childrenSetNow=SetUtil.newSet(proxy.getChildren());
        if (!tracked.equals(childrenSetNow)) {
          fail(proxy,""String_Node_Str"" + CollectionUtil.toString(tracked,""String_Node_Str"") + ""String_Node_Str""+ CollectionUtil.toString(childrenSetNow,""String_Node_Str"")+ ""String_Node_Str"");
        }
      }
    }
 catch (    final Exception e) {
      if (!instanceNotFound(e)) {
        fail(proxy,""String_Node_Str"");
      }
    }
    try {
      final Map<String,Map<String,AMXProxy>> maps=proxy.childrenMaps();
      for (      final String type : maps.keySet()) {
        final Map<String,AMXProxy> siblings=maps.get(type);
        if (siblings.keySet().size() > 1) {
          final Iterator<AMXProxy> iter=siblings.values().iterator();
          final MBeanInfo mbeanInfo=iter.next().extra().mbeanInfo();
          while (iter.hasNext()) {
            final AMXProxy next=iter.next();
            if (!mbeanInfo.equals(next.extra().mbeanInfo())) {
              fail(proxy,""String_Node_Str"" + type + ""String_Node_Str""+ siblings.values());
            }
          }
        }
      }
    }
 catch (    final Exception e) {
      if (!instanceNotFound(e)) {
        logWarning(""String_Node_Str"",e);
        fail(proxy,""String_Node_Str"" + e.getMessage());
      }
    }
  }
}","/** 
 * verify that the children/parent relationship exists 
 */
private void validateChildren(final AMXProxy proxy) throws ValidationFailureException {
  final Set<String> attrNames=proxy.attributeNames();
  if (!attrNames.contains(ATTR_CHILDREN)) {
    try {
      fail(proxy,""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
 else {
    try {
      final ObjectName[] children=proxy.getChildren();
      if (children == null) {
        fail(proxy,""String_Node_Str"");
      }
      final Set<ObjectName> childrenSet=SetUtil.newSet(children);
      if (childrenSet.size() != children.length) {
        fail(proxy,""String_Node_Str"");
      }
      if (childrenSet.contains(null)) {
        fail(proxy,""String_Node_Str"");
      }
      for (      final ObjectName childObjectName : children) {
        if (childObjectName == null) {
          fail(proxy,""String_Node_Str"");
        }
        final AMXProxy child=mProxyFactory.getProxy(childObjectName);
        if (!proxy.objectName().equals(child.parent().objectName())) {
          fail(proxy,""String_Node_Str"" + child.parent().objectName() + ""String_Node_Str""+ proxy.objectName());
        }
      }
      final Set<String> caseSensitiveTypes=new HashSet<String>();
      final Set<String> caseInsensitiveTypes=new HashSet<String>();
      for (      final ObjectName o : children) {
        caseSensitiveTypes.add(Util.getTypeProp(o));
        caseInsensitiveTypes.add(Util.getTypeProp(o).toLowerCase(Locale.ENGLISH));
      }
      if (caseSensitiveTypes.size() != caseInsensitiveTypes.size()) {
        fail(proxy,""String_Node_Str"");
      }
      final Set<ObjectName> tracked=getMBeanTracker().getChildrenOf(proxy.objectName());
      if (childrenSet.size() != children.length) {
        final Set<ObjectName> childrenSetNow=SetUtil.newSet(proxy.getChildren());
        if (!tracked.equals(childrenSetNow)) {
          fail(proxy,""String_Node_Str"" + CollectionUtil.toString(tracked,""String_Node_Str"") + ""String_Node_Str""+ CollectionUtil.toString(childrenSetNow,""String_Node_Str"")+ ""String_Node_Str"");
        }
      }
    }
 catch (    final Exception e) {
      if (!instanceNotFound(e)) {
        fail(proxy,""String_Node_Str"");
      }
    }
    try {
      final Map<String,Map<String,AMXProxy>> maps=proxy.childrenMaps();
      for (      final Map.Entry<String,Map<String,AMXProxy>> me : maps.entrySet()) {
        final Map<String,AMXProxy> siblings=me.getValue();
        if (siblings.keySet().size() > 1) {
          final Iterator<AMXProxy> iter=siblings.values().iterator();
          final MBeanInfo mbeanInfo=iter.next().extra().mbeanInfo();
          while (iter.hasNext()) {
            final AMXProxy next=iter.next();
            if (!mbeanInfo.equals(next.extra().mbeanInfo())) {
              fail(proxy,""String_Node_Str"" + me.getKey() + ""String_Node_Str""+ siblings.values());
            }
          }
        }
      }
    }
 catch (    final Exception e) {
      if (!instanceNotFound(e)) {
        logWarning(""String_Node_Str"",e);
        fail(proxy,""String_Node_Str"" + e.getMessage());
      }
    }
  }
}"
29323,"public String toString(){
  return details();
}","@Override public String toString(){
  return details();
}"
29324,"/** 
 * Filter the AMX dynamic proxies to those that implement the specified interface, and return a new Map with the matching items.  The 'desired' interface can be any AMX-defined class, including the mixin ones.
 * @param candidates the Map to be filtered
 * @param desired the interface to filter by
 */
public static <T extends AMXProxy>Map<String,T> filterAMX(final Map<String,T> candidates,final Class<?> desired){
  final Map<String,T> result=new HashMap<String,T>();
  for (  final String key : candidates.keySet()) {
    final T amx=candidates.get(key);
    if (desired.isAssignableFrom(amx.getClass())) {
      result.put(key,amx);
    }
  }
  return result;
}","/** 
 * Filter the AMX dynamic proxies to those that implement the specified interface, and return a new Map with the matching items.  The 'desired' interface can be any AMX-defined class, including the mixin ones.
 * @param candidates the Map to be filtered
 * @param desired the interface to filter by
 */
public static <T extends AMXProxy>Map<String,T> filterAMX(final Map<String,T> candidates,final Class<?> desired){
  final Map<String,T> result=new HashMap<String,T>();
  for (  final Map.Entry<String,T> e : candidates.entrySet()) {
    final T amx=e.getValue();
    if (desired.isAssignableFrom(amx.getClass())) {
      result.put(e.getKey(),amx);
    }
  }
  return result;
}"
29325,"/** 
 * Extract all properties other than type=<type>,name=<name>.
 * @param objectName
 */
public static String getAdditionalProps(final ObjectName objectName){
  final java.util.Hashtable allProps=objectName.getKeyPropertyList();
  allProps.remove(TYPE_KEY);
  allProps.remove(NAME_KEY);
  String props=""String_Node_Str"";
  for (  final Object key : allProps.keySet()) {
    final String prop=makeProp((String)key,(String)allProps.get(key));
    props=concatenateProps(props,prop);
  }
  return props;
}","/** 
 * Extract all properties other than type=<type>,name=<name>.
 * @param objectName
 */
public static String getAdditionalProps(final ObjectName objectName){
  final java.util.Hashtable<String,String> allProps=objectName.getKeyPropertyList();
  allProps.remove(TYPE_KEY);
  allProps.remove(NAME_KEY);
  String props=""String_Node_Str"";
  for (  final Map.Entry<String,String> e : allProps.entrySet()) {
    final String prop=makeProp(e.getKey(),e.getValue());
    props=concatenateProps(props,prop);
  }
  return props;
}"
29326,"/** 
 * @return a Map of ObjectNames from a Map whose values are AMX.
 */
public static Map<String,ObjectName> toObjectNameMap(final Map<String,? extends AMXProxy> amxMap){
  final Map<String,ObjectName> m=new HashMap<String,ObjectName>();
  for (  final String key : amxMap.keySet()) {
    final AMXProxy value=amxMap.get(key);
    m.put(key,value.objectName());
  }
  return (Collections.checkedMap(m,String.class,ObjectName.class));
}","/** 
 * @return a Map of ObjectNames from a Map whose values are AMX.
 */
public static Map<String,ObjectName> toObjectNameMap(final Map<String,? extends AMXProxy> amxMap){
  final Map<String,ObjectName> m=new HashMap<String,ObjectName>();
  for (  final Map.Entry<String,? extends AMXProxy> e : amxMap.entrySet()) {
    final AMXProxy value=e.getValue();
    m.put(e.getKey(),value.objectName());
  }
  return (Collections.checkedMap(m,String.class,ObjectName.class));
}"
29327,"private static String domConvertName(final String nameIn){
  String name=nameIn;
  for (  final String p : PROPERTY_PREFIX) {
    if (name.startsWith(p)) {
      name=name.substring(p.length());
      break;
    }
  }
  final StringBuilder buf=new StringBuilder(name.length() + 5);
  for (  final String t : TOKENIZER.split(name)) {
    if (buf.length() > 0) {
      buf.append('-');
    }
    buf.append(t.toLowerCase());
  }
  return buf.toString();
}","private static String domConvertName(final String nameIn){
  String name=nameIn;
  for (  final String p : PROPERTY_PREFIX) {
    if (name.startsWith(p)) {
      name=name.substring(p.length());
      break;
    }
  }
  final StringBuilder buf=new StringBuilder(name.length() + 5);
  for (  final String t : TOKENIZER.split(name)) {
    if (buf.length() > 0) {
      buf.append('-');
    }
    buf.append(t.toLowerCase(Locale.ENGLISH));
  }
  return buf.toString();
}"
29328,"/** 
 */
private ConfigBean getActualParent(final ConfigBean configBean){
  ConfigBean parent=asConfigBean(configBean.parent());
  if (parent != null) {
    final ObjectName parentObjectName=mRegistry.getObjectName(parent);
  }
 else {
    if (!configBean.getProxyType().getName().endsWith(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"" + configBean.getProxyType().getName() + ""String_Node_Str"");
    }
  }
  return parent;
}","/** 
 */
private ConfigBean getActualParent(final ConfigBean configBean){
  ConfigBean parent=asConfigBean(configBean.parent());
  if (parent == null) {
    if (!configBean.getProxyType().getName().endsWith(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"" + configBean.getProxyType().getName() + ""String_Node_Str"");
    }
  }
  return parent;
}"
29329,"private void issueAttributeChange(final ConfigBean cb,final String xmlAttrName,final Object oldValue,final Object newValue,final long whenChanged){
  final ObjectName objectName=mRegistry.getObjectName(cb);
  if (objectName == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + cb.getProxyType().getName());
  }
  boolean changed=false;
  if (oldValue != null) {
    changed=!oldValue.equals(newValue);
  }
 else   if (newValue != null) {
    changed=!newValue.equals(oldValue);
  }
  if (changed) {
    final Object impl=mRegistry.getImpl(cb);
    if (!(impl instanceof AMXConfigImpl)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    final AMXConfigImpl amx=(AMXConfigImpl)impl;
    final String message=cb.getProxyType().getName() + ""String_Node_Str"" + xmlAttrName+ ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ newValue;
    amx.issueAttributeChangeForXmlAttrName(xmlAttrName,message,oldValue,newValue,whenChanged);
  }
}","private void issueAttributeChange(final ConfigBean cb,final String xmlAttrName,final Object oldValue,final Object newValue,final long whenChanged){
  final ObjectName objectName=mRegistry.getObjectName(cb);
  if (objectName == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + cb.getProxyType().getName());
  }
  boolean changed=false;
  if (oldValue != null) {
    changed=!oldValue.equals(newValue);
  }
 else   if (newValue != null) {
    changed=true;
  }
  if (changed) {
    final Object impl=mRegistry.getImpl(cb);
    if (!(impl instanceof AMXConfigImpl)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    final AMXConfigImpl amx=(AMXConfigImpl)impl;
    final String message=cb.getProxyType().getName() + ""String_Node_Str"" + xmlAttrName+ ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ newValue;
    amx.issueAttributeChangeForXmlAttrName(xmlAttrName,message,oldValue,newValue,whenChanged);
  }
}"
29330,"private void sortAndDispatch(final List<PropertyChangeEvent> events,final long whenChanged){
  final List<ConfigBean> newConfigBeans=new ArrayList<ConfigBean>();
  final List<PropertyChangeEvent> remainingEvents=new ArrayList<PropertyChangeEvent>();
  for (  final PropertyChangeEvent event : events) {
    final Object oldValue=event.getOldValue();
    final Object newValue=event.getNewValue();
    final Object source=event.getSource();
    final String propertyName=event.getPropertyName();
    if (oldValue == null && newValue instanceof ConfigBeanProxy) {
      final ConfigBeanProxy cbp=(ConfigBeanProxy)newValue;
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap(cbp));
      final Class<? extends ConfigBeanProxy> proxyClass=cb.getProxyType();
      final boolean doWait=amxIsRunning();
      if (handleConfigBean(cb,doWait)) {
        newConfigBeans.add(cb);
      }
    }
 else     if (newValue == null && oldValue instanceof ConfigBeanProxy && amxIsRunning()) {
      final ConfigBeanProxy cbp=(ConfigBeanProxy)oldValue;
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap(cbp));
      configBeanRemoved(cb);
    }
 else {
      remainingEvents.add(event);
    }
  }
  if (amxIsRunning()) {
    for (    final PropertyChangeEvent event : remainingEvents) {
      final Object oldValue=event.getOldValue();
      final Object newValue=event.getNewValue();
      final Object source=event.getSource();
      final String propertyName=event.getPropertyName();
      if (source instanceof ConfigBeanProxy) {
        final ConfigBeanProxy cbp=(ConfigBeanProxy)source;
        final ConfigBean cb=asConfigBean(ConfigBean.unwrap(cbp));
        if (mRegistry.getObjectName(cb) == null) {
          if (!newConfigBeans.contains(cb)) {
            if (handleConfigBean(cb,false)) {
              newConfigBeans.add(cb);
            }
          }
        }
 else {
          issueAttributeChange(cb,propertyName,oldValue,newValue,whenChanged);
        }
      }
 else {
        debug(""String_Node_Str"");
      }
    }
  }
}","private void sortAndDispatch(final List<PropertyChangeEvent> events,final long whenChanged){
  final List<ConfigBean> newConfigBeans=new ArrayList<ConfigBean>();
  final List<PropertyChangeEvent> remainingEvents=new ArrayList<PropertyChangeEvent>();
  for (  final PropertyChangeEvent event : events) {
    final Object oldValue=event.getOldValue();
    final Object newValue=event.getNewValue();
    if (oldValue == null && newValue instanceof ConfigBeanProxy) {
      final ConfigBeanProxy cbp=(ConfigBeanProxy)newValue;
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap(cbp));
      final boolean doWait=amxIsRunning();
      if (handleConfigBean(cb,doWait)) {
        newConfigBeans.add(cb);
      }
    }
 else     if (newValue == null && oldValue instanceof ConfigBeanProxy && amxIsRunning()) {
      final ConfigBeanProxy cbp=(ConfigBeanProxy)oldValue;
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap(cbp));
      configBeanRemoved(cb);
    }
 else {
      remainingEvents.add(event);
    }
  }
  if (amxIsRunning()) {
    for (    final PropertyChangeEvent event : remainingEvents) {
      final Object oldValue=event.getOldValue();
      final Object newValue=event.getNewValue();
      final Object source=event.getSource();
      final String propertyName=event.getPropertyName();
      if (source instanceof ConfigBeanProxy) {
        final ConfigBeanProxy cbp=(ConfigBeanProxy)source;
        final ConfigBean cb=asConfigBean(ConfigBean.unwrap(cbp));
        if (mRegistry.getObjectName(cb) == null) {
          if (!newConfigBeans.contains(cb)) {
            if (handleConfigBean(cb,false)) {
              newConfigBeans.add(cb);
            }
          }
        }
 else {
          issueAttributeChange(cb,propertyName,oldValue,newValue,whenChanged);
        }
      }
 else {
        debug(""String_Node_Str"");
      }
    }
  }
}"
29331,"protected void doRun() throws Exception {
  PendingConfigBeanJob job=mPending.take();
  while ((!mQuit) && job != null) {
    final ObjectName objectName=registerOne(job);
    job=mPending.peek();
    if (job != null) {
      job=mPending.take();
    }
  }
  mInitalQueueLatch.countDown();
  while (!mQuit) {
    job=mPending.take();
    registerOne(job);
  }
}","protected void doRun() throws Exception {
  PendingConfigBeanJob job=mPending.take();
  while ((!mQuit) && job != null) {
    registerOne(job);
    job=mPending.peek();
    if (job != null) {
      job=mPending.take();
    }
  }
  mInitalQueueLatch.countDown();
  while (!mQuit) {
    job=mPending.take();
    registerOne(job);
  }
}"
29332,"private ObjectName createAndRegister(final ConfigBean cb,final ObjectName objectNameIn){
  ObjectName objectName=objectNameIn;
  final String type=objectNameIn.getKeyProperty(AMX.TYPE_KEY);
  ObjectName parentObjectName=getActualParentObjectName(cb);
  if (parentObjectName == null) {
    parentObjectName=AMXGlassfish.DEFAULT.domainRoot();
  }
  final AMXConfigImpl impl=new AMXConfigImpl(parentObjectName,cb);
  try {
    final ObjectInstance instance=mServer.registerMBean(impl,objectNameIn);
    objectName=instance.getObjectName();
    mRegistry.add(cb,objectName,impl);
  }
 catch (  final JMException e) {
    debug(ExceptionUtil.toString(e));
    objectName=null;
  }
  return objectName;
}","private ObjectName createAndRegister(final ConfigBean cb,final ObjectName objectNameIn){
  ObjectName objectName;
  ObjectName parentObjectName=getActualParentObjectName(cb);
  if (parentObjectName == null) {
    parentObjectName=AMXGlassfish.DEFAULT.domainRoot();
  }
  final AMXConfigImpl impl=new AMXConfigImpl(parentObjectName,cb);
  try {
    final ObjectInstance instance=mServer.registerMBean(impl,objectNameIn);
    objectName=instance.getObjectName();
    mRegistry.add(cb,objectName,impl);
  }
 catch (  final JMException e) {
    debug(ExceptionUtil.toString(e));
    objectName=null;
  }
  return objectName;
}"
29333,"public synchronized void unloadAMXMBeans(){
  final AMXProxy domainConfigProxy=getDomainConfigProxy();
  if (domainConfigProxy != null) {
    ImplUtil.unregisterAMXMBeans(domainConfigProxy);
  }
  mLoader.stop();
  mLoader=null;
}","public synchronized void unloadAMXMBeans(){
  final AMXProxy domainConfigProxy=getDomainConfigProxy();
  if (domainConfigProxy != null) {
    ImplUtil.unregisterAMXMBeans(domainConfigProxy);
  }
  if (mLoader != null) {
    mLoader.stop();
  }
  mLoader=null;
}"
29334,"/** 
 * Get an Attribute value, first by looking for a getter method of the correct name and signature, then by looking for a delegate, and finally by calling getAttributeManually(), which a subclass is expected to override.
 * @param name	name of the Attribute
 * @return value of the Attribute
 */
public final Object getAttribute(final String name) throws AttributeNotFoundException {
  Object result=null;
  if (name == null) {
    throw new AttributeNotFoundException(""String_Node_Str"" + name + ""String_Node_Str""+ getObjectName());
  }
  try {
    result=getAttributeInternal(name);
  }
 catch (  AttributeNotFoundException e) {
    throw e;
  }
catch (  Exception e) {
    throw new AttributeNotFoundException(name);
  }
  return (result);
}","/** 
 * Get an Attribute value, first by looking for a getter method of the correct name and signature, then by looking for a delegate, and finally by calling getAttributeManually(), which a subclass is expected to override.
 * @param name	name of the Attribute
 * @return value of the Attribute
 */
public final Object getAttribute(final String name) throws AttributeNotFoundException {
  Object result=null;
  if (name == null) {
    throw new AttributeNotFoundException(""String_Node_Str"" + getObjectName());
  }
  try {
    result=getAttributeInternal(name);
  }
 catch (  AttributeNotFoundException e) {
    throw e;
  }
catch (  Exception e) {
    throw new AttributeNotFoundException(name);
  }
  return (result);
}"
29335,"protected void postRegisterHook(final Boolean registrationSucceeded){
  if (registrationSucceeded.booleanValue()) {
  }
}","protected void postRegisterHook(final Boolean registrationSucceeded){
}"
29336,"protected static String toString(Object o){
  if (o == null) {
    return (""String_Node_Str"" + o);
  }
  return (SmartStringifier.toString(o));
}","protected static String toString(Object o){
  if (o == null) {
    return (""String_Node_Str"");
  }
  return (SmartStringifier.toString(o));
}"
29337,"public int compareTo(final ParentChildren rhs){
  int cmp=mParent.type().compareTo(rhs.mParent.type());
  if (cmp == 0) {
    cmp=mParent.nameProp().compareTo(rhs.mParent.nameProp());
  }
  if (cmp == 0) {
    cmp=mChildren.size() - rhs.mChildren.size();
  }
  return cmp;
}","@Override public int compareTo(final ParentChildren rhs){
  int cmp=mParent.type().compareTo(rhs.mParent.type());
  if (cmp == 0) {
    cmp=mParent.nameProp().compareTo(rhs.mParent.nameProp());
  }
  if (cmp == 0) {
    cmp=mChildren.size() - rhs.mChildren.size();
  }
  return cmp;
}"
29338,"/** 
 * Constructs a coordinator
 * @param work     A work object as submitted by the resource adapter
 * @param timeout  timeout for the work instance
 * @param ec       ExecutionContext object.
 * @param queue    WorkQueue of the threadpool, to which the workwill be submitted
 * @param listener WorkListener object from the resource adapter.
 */
public WorkCoordinator(javax.resource.spi.work.Work work,long timeout,ExecutionContext ec,WorkQueue queue,WorkListener listener,WorkManagementProbeProvider probeProvider,ConnectorRuntime runtime,String raName,WorkContextHandlerImpl handler){
  this.work=work;
  this.timeout=timeout;
  this.ec=ec;
  this.queue=queue;
  this.listener=listener;
synchronized (WorkCoordinator.class) {
    this.id=increaseSeed();
  }
  this.runtime=runtime;
  this.lock=new Object();
  this.probeProvider=probeProvider;
  this.raName=raName;
  this.contextHandler=handler;
}","/** 
 * Constructs a coordinator
 * @param work     A work object as submitted by the resource adapter
 * @param timeout  timeout for the work instance
 * @param ec       ExecutionContext object.
 * @param queue    WorkQueue of the threadpool, to which the workwill be submitted
 * @param listener WorkListener object from the resource adapter.
 */
public WorkCoordinator(javax.resource.spi.work.Work work,long timeout,ExecutionContext ec,WorkQueue queue,WorkListener listener,WorkManagementProbeProvider probeProvider,ConnectorRuntime runtime,String raName,WorkContextHandlerImpl handler){
  this.work=work;
  this.timeout=timeout;
  this.ec=ec;
  this.queue=queue;
  this.listener=listener;
  this.id=increaseSeed();
  this.runtime=runtime;
  this.lock=new Object();
  this.probeProvider=probeProvider;
  this.raName=raName;
  this.contextHandler=handler;
}"
29339,"public static int increaseSeed(){
  return ++seed;
}","public static synchronized int increaseSeed(){
  return ++seed;
}"
29340,"/** 
 * {@inheritDoc}
 */
public MessageEndpoint createEndpoint(XAResource xaResource,long timeout) throws UnavailableException {
synchronized (this) {
    if (myState == BLOCKED) {
      try {
        wait(timeout);
      }
 catch (      Exception e) {
      }
 finally {
        myState=UNBLOCKED;
      }
    }
  }
  if (!started_) {
    logger.log(Level.WARNING,""String_Node_Str"");
    throw new UnavailableException(""String_Node_Str"");
  }
  MessageEndpoint endpoint=null;
  try {
    ResourceHandle resourceHandle=allocator_.createResource(xaResource);
    MessageBeanListener listener=messageBeanPM_.createMessageBeanListener(resourceHandle);
    String moduleID=getDescriptor().getApplication().getModuleID();
    Class endpointClass=null;
    ClassLoader loader=null;
    try {
      BundleDescriptor moduleDesc=getDescriptor().getEjbBundleDescriptor();
      loader=moduleDesc.getClassLoader();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
    if (loader == null) {
      loader=Thread.currentThread().getContextClassLoader();
    }
    endpointClass=loader.loadClass(MESSAGE_ENDPOINT);
    String msgListenerType=getDescriptor().getMessageListenerType();
    if (msgListenerType == null || ""String_Node_Str"".equals(msgListenerType))     msgListenerType=""String_Node_Str"";
    Class listenerClass=loader.loadClass(msgListenerType);
    MessageEndpointInvocationHandler handler=new MessageEndpointInvocationHandler(listener,messageBeanPM_);
    endpoint=(MessageEndpoint)Proxy.newProxyInstance(loader,new Class[]{endpointClass,listenerClass},handler);
  }
 catch (  Exception ex) {
    throw (UnavailableException)(new UnavailableException()).initCause(ex);
  }
  return endpoint;
}","/** 
 * {@inheritDoc}
 */
public MessageEndpoint createEndpoint(XAResource xaResource,long timeout) throws UnavailableException {
synchronized (this) {
    while (myState == BLOCKED) {
      try {
        wait(timeout);
      }
 catch (      Exception e) {
      }
 finally {
        myState=UNBLOCKED;
      }
    }
  }
  if (!started_) {
    logger.log(Level.WARNING,""String_Node_Str"");
    throw new UnavailableException(""String_Node_Str"");
  }
  MessageEndpoint endpoint=null;
  try {
    ResourceHandle resourceHandle=allocator_.createResource(xaResource);
    MessageBeanListener listener=messageBeanPM_.createMessageBeanListener(resourceHandle);
    String moduleID=getDescriptor().getApplication().getModuleID();
    Class endpointClass=null;
    ClassLoader loader=null;
    try {
      BundleDescriptor moduleDesc=getDescriptor().getEjbBundleDescriptor();
      loader=moduleDesc.getClassLoader();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
    if (loader == null) {
      loader=Thread.currentThread().getContextClassLoader();
    }
    endpointClass=loader.loadClass(MESSAGE_ENDPOINT);
    String msgListenerType=getDescriptor().getMessageListenerType();
    if (msgListenerType == null || ""String_Node_Str"".equals(msgListenerType))     msgListenerType=""String_Node_Str"";
    Class listenerClass=loader.loadClass(msgListenerType);
    MessageEndpointInvocationHandler handler=new MessageEndpointInvocationHandler(listener,messageBeanPM_);
    endpoint=(MessageEndpoint)Proxy.newProxyInstance(loader,new Class[]{endpointClass,listenerClass},handler);
  }
 catch (  Exception ex) {
    throw (UnavailableException)(new UnavailableException()).initCause(ex);
  }
  return endpoint;
}"
29341,"/** 
 * Marks the completion of MDB deployment. Unblocks the createEndPoint method call.
 * @throws Exception
 */
public void start() throws Exception {
  logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  started_=true;
  myState=UNBLOCKED;
synchronized (this) {
    notifyAll();
  }
}","/** 
 * Marks the completion of MDB deployment. Unblocks the createEndPoint method call.
 * @throws Exception
 */
public void start() throws Exception {
  logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  started_=true;
synchronized (this) {
    myState=UNBLOCKED;
    notifyAll();
  }
}"
29342,"/** 
 * This is the same implementation in com.sun.ejb.container.InvocationHandlerUtil Need to abstract out at some point.
 */
private Object invokeJavaObjectMethod(InvocationHandler handler,Method method,Object[] args) throws RuntimeException {
  Object returnValue=null;
switch (method.getName().charAt(0)) {
case 'e':
    Object other=Proxy.isProxyClass(args[0].getClass()) ? Proxy.getInvocationHandler(args[0]) : args[0];
  returnValue=new Boolean(handler.equals(other));
break;
case 'h':
returnValue=new Integer(handler.hashCode());
break;
case 't':
returnValue=handler.toString();
break;
default :
throw new RuntimeException(method.getName());
}
return returnValue;
}","/** 
 * This is the same implementation in com.sun.ejb.container.InvocationHandlerUtil Need to abstract out at some point.
 */
private Object invokeJavaObjectMethod(InvocationHandler handler,Method method,Object[] args) throws RuntimeException {
  Object returnValue=null;
switch (method.getName().charAt(0)) {
case 'e':
    Object other=Proxy.isProxyClass(args[0].getClass()) ? Proxy.getInvocationHandler(args[0]) : args[0];
  returnValue=Boolean.valueOf(handler.equals(other));
break;
case 'h':
returnValue=Integer.valueOf(handler.hashCode());
break;
case 't':
returnValue=handler.toString();
break;
default :
throw new RuntimeException(method.getName());
}
return returnValue;
}"
29343,"/** 
 * check whether the jndi Name has connector related suffix and return if any.
 * @param name jndi name
 * @return suffix, if found
 */
public static String getValidSuffix(String name){
  if (name != null) {
    for (    String validSuffix : JNDI_SUFFIX_VALUES) {
      if (name.endsWith(validSuffix)) {
        return validSuffix;
      }
    }
  }
  return null;
}","/** 
 * check whether the jndi Name has connector related suffix and return if any.
 * @param name jndi name
 * @return suffix, if found
 */
public static String getValidSuffix(String name){
  if (name != null) {
    for (    String validSuffix : ConnectorConstants.JNDI_SUFFIX_VALUES) {
      if (name.endsWith(validSuffix)) {
        return validSuffix;
      }
    }
  }
  return null;
}"
29344,"/** 
 * If the suffix is one of the valid context return true. Return false, if that is not the case.
 * @param suffix __nontx / __pm
 * @return boolean whether the suffix is valid or not
 */
public static boolean isValidJndiSuffix(String suffix){
  if (suffix != null) {
    for (    String validSuffix : JNDI_SUFFIX_VALUES) {
      if (validSuffix.equals(suffix)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * If the suffix is one of the valid context return true. Return false, if that is not the case.
 * @param suffix __nontx / __pm
 * @return boolean whether the suffix is valid or not
 */
public static boolean isValidJndiSuffix(String suffix){
  if (suffix != null) {
    for (    String validSuffix : ConnectorConstants.JNDI_SUFFIX_VALUES) {
      if (validSuffix.equals(suffix)) {
        return true;
      }
    }
  }
  return false;
}"
29345,"protected void installDeploymentFactory(File installedDM) throws IOException {
  if (sLogger.isLoggable(Level.FINE)) {
    sLogger.fine(""String_Node_Str"" + installedDM.getAbsolutePath());
  }
  JarFile jarFile=null;
  Manifest m=null;
  try {
    jarFile=new JarFile(installedDM);
    m=jarFile.getManifest();
  }
  finally {
    jarFile.close();
    jarFile=null;
  }
  String className=m.getMainAttributes().getValue(J2EE_DEPLOYMENT_MANAGER);
  URL[] urls=new URL[]{installedDM.toURI().toURL()};
  URLClassLoader urlClassLoader=new java.net.URLClassLoader(urls,getClass().getClassLoader());
  Class factory=null;
  try {
    factory=urlClassLoader.loadClass(className);
  }
 catch (  ClassNotFoundException cnfe) {
    sLogger.log(Level.SEVERE,""String_Node_Str"",new Object[]{""String_Node_Str""});
    throw new IllegalArgumentException(className + ""String_Node_Str"" + installedDM.getName());
  }
  Object df=null;
  try {
    df=factory.newInstance();
  }
 catch (  Exception ie) {
    sLogger.log(Level.SEVERE,""String_Node_Str"",new Object[]{className});
    sLogger.log(Level.SEVERE,""String_Node_Str"",ie);
    throw new IllegalArgumentException(""String_Node_Str"" + installedDM.getName());
  }
  if (df instanceof DeploymentFactory) {
    DeploymentFactoryManager.getInstance().registerDeploymentFactory((DeploymentFactory)df);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
  }
}","protected void installDeploymentFactory(final File installedDM) throws IOException {
  if (sLogger.isLoggable(Level.FINE)) {
    sLogger.fine(""String_Node_Str"" + installedDM.getAbsolutePath());
  }
  Manifest m=null;
  JarFile jarFile=new JarFile(installedDM);
  try {
    m=jarFile.getManifest();
  }
  finally {
    jarFile.close();
  }
  String className=m.getMainAttributes().getValue(J2EE_DEPLOYMENT_MANAGER);
  final URL[] urls=new URL[]{installedDM.toURI().toURL()};
  URLClassLoader urlClassLoader;
  urlClassLoader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
    public URLClassLoader run(){
      return new java.net.URLClassLoader(urls,getClass().getClassLoader());
    }
  }
);
  Class factory=null;
  try {
    factory=urlClassLoader.loadClass(className);
  }
 catch (  ClassNotFoundException cnfe) {
    sLogger.log(Level.SEVERE,""String_Node_Str"",new Object[]{""String_Node_Str""});
    throw new IllegalArgumentException(className + ""String_Node_Str"" + installedDM.getName());
  }
  Object df=null;
  try {
    df=factory.newInstance();
  }
 catch (  Exception ie) {
    sLogger.log(Level.SEVERE,""String_Node_Str"",new Object[]{className});
    sLogger.log(Level.SEVERE,""String_Node_Str"",ie);
    throw new IllegalArgumentException(""String_Node_Str"" + installedDM.getName());
  }
  if (df instanceof DeploymentFactory) {
    DeploymentFactoryManager.getInstance().registerDeploymentFactory((DeploymentFactory)df);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
  }
}"
29346,"public static DeploymentFactoryInstaller getInstaller(){
  if (dfInstaller == null) {
    dfInstaller=new DeploymentFactoryInstaller();
    dfInstaller.initialize();
  }
  return dfInstaller;
}","public static DeploymentFactoryInstaller getInstaller(){
  if (dfInstaller == null) {
    DeploymentFactoryInstaller tmpInstaller=new DeploymentFactoryInstaller();
    tmpInstaller.initialize();
    dfInstaller=tmpInstaller;
  }
  return dfInstaller;
}"
29347,"/** 
 * Tests whether this factory can create a DeploymentManager object based on the specificed URI.  This does not indicate whether such an attempt will be successful, only whether the factory can handle the uri.
 * @param uri The uri to check
 * @return <tt>true</tt> if the factory can handle the uri.
 */
public boolean handlesURI(String uri){
  if (sLogger.isLoggable(Level.FINE)) {
    sLogger.fine(""String_Node_Str"" + uri + ""String_Node_Str"");
  }
  if (uri != null) {
    try {
      return (parseURIForHostInfo(uri) != null);
    }
 catch (    Exception ex) {
      sLogger.log(Level.SEVERE,""String_Node_Str"",new Object[]{uri});
    }
  }
  return false;
}","/** 
 * Tests whether this factory can create a DeploymentManager object based on the specificed URI.  This does not indicate whether such an attempt will be successful, only whether the factory can handle the uri.
 * @param uri The uri to check
 * @return <tt>true</tt> if the factory can handle the uri.
 */
public boolean handlesURI(String uri){
  if (sLogger.isLoggable(Level.FINE)) {
    sLogger.fine(""String_Node_Str"" + uri + ""String_Node_Str"");
  }
  if (uri != null) {
    try {
      parseURIForHostInfo(uri);
      return true;
    }
 catch (    Exception ex) {
      sLogger.log(Level.SEVERE,""String_Node_Str"",new Object[]{uri});
    }
  }
  return false;
}"
29348,"/** 
 * This method performs an exec and starts the application client running in another process.
 * @throws ClientExecuteException when the configurationis incomplete.
 */
public void execute() throws ClientExecuteException {
  if (targetModuleID == null) {
    throw new ClientExecuteException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  TargetImpl target=(TargetImpl)targetModuleID.getTarget();
  String moduleID;
  if (targetModuleID.getParentTargetModuleID() != null) {
    moduleID=targetModuleID.getParentTargetModuleID().getModuleID();
  }
 else {
    moduleID=targetModuleID.getModuleID();
  }
  try {
    String location=target.exportClientStubs(moduleID,System.getProperty(""String_Node_Str""));
    String j2eeHome=System.getProperty(""String_Node_Str"");
    String appClientBinary=j2eeHome + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"";
    String command=appClientBinary + ""String_Node_Str"" + location;
    Process p=Runtime.getRuntime().exec(command);
  }
 catch (  Exception e) {
    Logger.getAnonymousLogger().log(Level.WARNING,""String_Node_Str"",e);
    throw new ClientExecuteException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{e.getMessage()}));
  }
}","/** 
 * This method performs an exec and starts the application client running in another process.
 * @throws ClientExecuteException when the configurationis incomplete.
 */
public void execute() throws ClientExecuteException {
  if (targetModuleID == null) {
    throw new ClientExecuteException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  TargetImpl target=(TargetImpl)targetModuleID.getTarget();
  String moduleID;
  if (targetModuleID.getParentTargetModuleID() != null) {
    moduleID=targetModuleID.getParentTargetModuleID().getModuleID();
  }
 else {
    moduleID=targetModuleID.getModuleID();
  }
  try {
    String location=target.exportClientStubs(moduleID,System.getProperty(""String_Node_Str""));
    String j2eeHome=System.getProperty(""String_Node_Str"");
    String appClientBinary=j2eeHome + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"";
    String command=appClientBinary + ""String_Node_Str"" + location;
    Runtime.getRuntime().exec(command);
  }
 catch (  Exception e) {
    Logger.getAnonymousLogger().log(Level.WARNING,""String_Node_Str"",e);
    throw new ClientExecuteException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{e.getMessage()}));
  }
}"
29349,"private File writeMemoryMappedArchiveToTempFile(MemoryMappedArchive mma,String fileSuffix) throws IOException {
  File tempFile=File.createTempFile(""String_Node_Str"",fileSuffix);
  BufferedOutputStream bos=null;
  BufferedInputStream bis=null;
  int chunkSize=32 * 1024;
  long remaining=mma.getArchiveSize();
  try {
    bos=new BufferedOutputStream(new FileOutputStream(tempFile));
    bis=new BufferedInputStream(new ByteArrayInputStream(mma.getByteArray()));
    while (remaining != 0) {
      int actual=(remaining < chunkSize) ? (int)remaining : chunkSize;
      byte[] bytes=new byte[actual];
      try {
        bis.read(bytes);
        bos.write(bytes);
      }
 catch (      EOFException eof) {
        break;
      }
      remaining-=actual;
    }
  }
  finally {
    if (bos != null) {
      bos.flush();
      bos.close();
    }
    if (bis != null) {
      bis.close();
    }
  }
  return tempFile;
}","private File writeMemoryMappedArchiveToTempFile(MemoryMappedArchive mma,String fileSuffix) throws IOException {
  File tempFile=File.createTempFile(""String_Node_Str"",fileSuffix);
  BufferedOutputStream bos=null;
  BufferedInputStream bis=null;
  int chunkSize=32 * 1024;
  long remaining=mma.getArchiveSize();
  try {
    bos=new BufferedOutputStream(new FileOutputStream(tempFile));
    bis=new BufferedInputStream(new ByteArrayInputStream(mma.getByteArray()));
    while (remaining != 0) {
      int actual=(remaining < chunkSize) ? (int)remaining : chunkSize;
      byte[] bytes=new byte[actual];
      try {
        for (int totalCount=0, count=0; count != -1 && totalCount < actual; totalCount+=(count=bis.read(bytes,totalCount,actual - totalCount)))         ;
        bos.write(bytes);
      }
 catch (      EOFException eof) {
        break;
      }
      remaining-=actual;
    }
  }
  finally {
    if (bos != null) {
      try {
        bos.flush();
      }
  finally {
        bos.close();
      }
    }
    if (bis != null) {
      bis.close();
    }
  }
  return tempFile;
}"
29350,"/** 
 * This method populates the Application object from a ReadableArchive
 * @param archive the archive for the application
 */
public Application processDeploymentMetaData(ReadableArchive archive) throws Exception {
  FileArchive expandedArchive=null;
  File tmpFile=null;
  ExtendedDeploymentContext context=null;
  Logger logger=Logger.getAnonymousLogger();
  ClassLoader cl=null;
  try {
    String archiveName=Util.getURIName(archive.getURI());
    ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive);
    if (archiveHandler == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",archiveName));
    }
    DeployCommandParameters parameters=new DeployCommandParameters(new File(archive.getURI()));
    ActionReport report=new HTMLActionReporter();
    context=new DeploymentContextImpl(report,logger,archive,parameters,env);
    context.setArchiveHandler(archiveHandler);
    String appName=archiveHandler.getDefaultApplicationName(archive,context);
    parameters.name=appName;
    if (archive instanceof InputJarArchive) {
      tmpFile=File.createTempFile(archiveName,""String_Node_Str"");
      String path=tmpFile.getAbsolutePath();
      if (!tmpFile.delete()) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{path});
      }
      File tmpDir=new File(path);
      tmpDir.deleteOnExit();
      tmpDir.mkdirs();
      expandedArchive=(FileArchive)archiveFactory.createArchive(tmpDir);
      archiveHandler.expand(archive,expandedArchive,context);
      context.setSource(expandedArchive);
    }
    context.setPhase(DeploymentContextImpl.Phase.PREPARE);
    ClassLoaderHierarchy clh=clhProvider.get();
    context.createDeploymentClassLoader(clh,archiveHandler);
    cl=context.getClassLoader();
    deployment.getDeployableTypes(context);
    deployment.getSniffers(archiveHandler,null,context);
    return processDOL(context);
  }
  finally {
    if (cl != null && cl instanceof PreDestroy) {
      try {
        PreDestroy.class.cast(cl).preDestroy();
      }
 catch (      Exception e) {
      }
    }
    if (context != null) {
      context.postDeployClean(true);
    }
    if (expandedArchive != null) {
      try {
        expandedArchive.close();
      }
 catch (      Exception e) {
      }
    }
    if (tmpFile != null && tmpFile.exists()) {
      try {
        FileUtils.whack(tmpFile);
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * This method populates the Application object from a ReadableArchive
 * @param archive the archive for the application
 */
public Application processDeploymentMetaData(ReadableArchive archive) throws Exception {
  FileArchive expandedArchive=null;
  File tmpFile=null;
  ExtendedDeploymentContext context=null;
  Logger logger=Logger.getAnonymousLogger();
  ClassLoader cl=null;
  try {
    String archiveName=Util.getURIName(archive.getURI());
    ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive);
    if (archiveHandler == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",archiveName));
    }
    DeployCommandParameters parameters=new DeployCommandParameters(new File(archive.getURI()));
    ActionReport report=new HTMLActionReporter();
    context=new DeploymentContextImpl(report,logger,archive,parameters,env);
    context.setArchiveHandler(archiveHandler);
    String appName=archiveHandler.getDefaultApplicationName(archive,context);
    parameters.name=appName;
    if (archive instanceof InputJarArchive) {
      tmpFile=File.createTempFile(archiveName,""String_Node_Str"");
      String path=tmpFile.getAbsolutePath();
      if (!tmpFile.delete()) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{path});
      }
      File tmpDir=new File(path);
      tmpDir.deleteOnExit();
      if (!tmpDir.exists() && !tmpDir.mkdirs()) {
        throw new IOException(""String_Node_Str"" + tmpDir.getAbsolutePath());
      }
      expandedArchive=(FileArchive)archiveFactory.createArchive(tmpDir);
      archiveHandler.expand(archive,expandedArchive,context);
      context.setSource(expandedArchive);
    }
    context.setPhase(DeploymentContextImpl.Phase.PREPARE);
    ClassLoaderHierarchy clh=clhProvider.get();
    context.createDeploymentClassLoader(clh,archiveHandler);
    cl=context.getClassLoader();
    deployment.getDeployableTypes(context);
    deployment.getSniffers(archiveHandler,null,context);
    return processDOL(context);
  }
  finally {
    if (cl != null && cl instanceof PreDestroy) {
      try {
        PreDestroy.class.cast(cl).preDestroy();
      }
 catch (      Exception e) {
      }
    }
    if (context != null) {
      context.postDeployClean(true);
    }
    if (expandedArchive != null) {
      try {
        expandedArchive.close();
      }
 catch (      Exception e) {
      }
    }
    if (tmpFile != null && tmpFile.exists()) {
      try {
        FileUtils.whack(tmpFile);
      }
 catch (      Exception e) {
      }
    }
  }
}"
29351,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  String applicationName=modulename;
  if (appname != null) {
    applicationName=appname;
  }
  try {
    VersioningUtils.checkIdentifier(applicationName);
  }
 catch (  VersioningSyntaxException ex) {
    report.setMessage(ex.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!deployment.isRegistered(applicationName)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Application application=applications.getApplication(applicationName);
  if (application.isLifecycleModule() || application.isOSGiModule()) {
    if (!terse) {
      part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  ApplicationInfo appInfo=appRegistry.get(applicationName);
  if (appInfo == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    return;
  }
  com.sun.enterprise.deployment.Application app=appInfo.getMetaData(com.sun.enterprise.deployment.Application.class);
  Map<String,String> subComponents;
  Map<String,String> subComponentsMap=new HashMap<String,String>();
  if (appname == null) {
    subComponents=getAppLevelComponents(app,type,subComponentsMap);
  }
 else {
    BundleDescriptor bundleDesc=app.getModuleByUri(modulename);
    if (bundleDesc == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appname,modulename));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    subComponents=getModuleLevelComponents(bundleDesc,type,subComponentsMap);
  }
  if (type != null) {
    if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",type));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  List<String> subModuleInfos=new ArrayList<String>();
  if (!app.isVirtual()) {
    subModuleInfos=getSubModulesForEar(app);
  }
  int[] longestValue=new int[2];
  for (  String key : subComponents.keySet()) {
    if (key.length() > longestValue[0]) {
      longestValue[0]=key.length();
    }
    String value=subComponents.get(key);
    if (value.length() > longestValue[1]) {
      longestValue[1]=value.length();
    }
  }
  StringBuilder formattedLineBuf=new StringBuilder();
  for (int j=0; j < 2; j++) {
    longestValue[j]+=2;
    formattedLineBuf.append(""String_Node_Str"").append(longestValue[j]).append(""String_Node_Str"");
  }
  String formattedLine=formattedLineBuf.toString();
  if (!terse && subComponents.isEmpty()) {
    part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int i=0;
  for (  String key : subComponents.keySet()) {
    ActionReport.MessagePart childPart=part.addChild();
    childPart.setMessage(String.format(formattedLine,new Object[]{key,subComponents.get(key)}));
    if (appname == null && !app.isVirtual()) {
      if (subModuleInfos.get(i) != null) {
        childPart.addProperty(""String_Node_Str"",subModuleInfos.get(i));
      }
    }
    if (resources) {
      Module module=application.getModule(key);
      if (module != null) {
        ActionReport subReport=report.addSubActionsReport();
        CommandRunner.CommandInvocation inv=commandRunner.getCommandInvocation(""String_Node_Str"",subReport);
        final ParameterMap parameters=new ParameterMap();
        parameters.add(""String_Node_Str"",application.getName());
        parameters.add(""String_Node_Str"",module.getName());
        inv.parameters(parameters).execute();
        ActionReport.MessagePart subPart=subReport.getTopMessagePart();
        for (        ActionReport.MessagePart cp : subPart.getChildren()) {
          ActionReport.MessagePart resourcesChildPart=childPart.addChild();
          resourcesChildPart.setMessage(""String_Node_Str"" + cp.getMessage());
        }
      }
    }
    i++;
  }
  Set<String> keys=subComponentsMap.keySet();
  for (  String key : keys) {
    part.addProperty(key,subComponentsMap.get(key));
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  String applicationName=modulename;
  if (appname != null) {
    applicationName=appname;
  }
  try {
    VersioningUtils.checkIdentifier(applicationName);
  }
 catch (  VersioningSyntaxException ex) {
    report.setMessage(ex.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!deployment.isRegistered(applicationName)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Application application=applications.getApplication(applicationName);
  if (application.isLifecycleModule() || application.isOSGiModule()) {
    if (!terse) {
      part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  ApplicationInfo appInfo=appRegistry.get(applicationName);
  if (appInfo == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    return;
  }
  com.sun.enterprise.deployment.Application app=appInfo.getMetaData(com.sun.enterprise.deployment.Application.class);
  Map<String,String> subComponents;
  Map<String,String> subComponentsMap=new HashMap<String,String>();
  if (appname == null) {
    subComponents=getAppLevelComponents(app,type,subComponentsMap);
  }
 else {
    BundleDescriptor bundleDesc=app.getModuleByUri(modulename);
    if (bundleDesc == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appname,modulename));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    subComponents=getModuleLevelComponents(bundleDesc,type,subComponentsMap);
  }
  if (type != null) {
    if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",type));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  List<String> subModuleInfos=new ArrayList<String>();
  if (!app.isVirtual()) {
    subModuleInfos=getSubModulesForEar(app);
  }
  int[] longestValue=new int[2];
  for (  Map.Entry<String,String> entry : subComponents.entrySet()) {
    String key=entry.getKey();
    if (key.length() > longestValue[0]) {
      longestValue[0]=key.length();
    }
    String value=entry.getValue();
    if (value.length() > longestValue[1]) {
      longestValue[1]=value.length();
    }
  }
  StringBuilder formattedLineBuf=new StringBuilder();
  for (int j=0; j < 2; j++) {
    longestValue[j]+=2;
    formattedLineBuf.append(""String_Node_Str"").append(longestValue[j]).append(""String_Node_Str"");
  }
  String formattedLine=formattedLineBuf.toString();
  if (!terse && subComponents.isEmpty()) {
    part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int i=0;
  for (  String key : subComponents.keySet()) {
    ActionReport.MessagePart childPart=part.addChild();
    childPart.setMessage(String.format(formattedLine,new Object[]{key,subComponents.get(key)}));
    if (appname == null && !app.isVirtual()) {
      if (subModuleInfos.get(i) != null) {
        childPart.addProperty(""String_Node_Str"",subModuleInfos.get(i));
      }
    }
    if (resources) {
      Module module=application.getModule(key);
      if (module != null) {
        ActionReport subReport=report.addSubActionsReport();
        CommandRunner.CommandInvocation inv=commandRunner.getCommandInvocation(""String_Node_Str"",subReport);
        final ParameterMap parameters=new ParameterMap();
        parameters.add(""String_Node_Str"",application.getName());
        parameters.add(""String_Node_Str"",module.getName());
        inv.parameters(parameters).execute();
        ActionReport.MessagePart subPart=subReport.getTopMessagePart();
        for (        ActionReport.MessagePart cp : subPart.getChildren()) {
          ActionReport.MessagePart resourcesChildPart=childPart.addChild();
          resourcesChildPart.setMessage(""String_Node_Str"" + cp.getMessage());
        }
      }
    }
    i++;
  }
  Set<String> keys=subComponentsMap.keySet();
  for (  String key : keys) {
    part.addProperty(key,subComponentsMap.get(key));
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
29352,"/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  List<String> matchedVersions=null;
  if (enabled) {
    try {
      VersioningUtils.checkIdentifier(name);
      matchedVersions=new ArrayList<String>(1);
      matchedVersions.add(name);
    }
 catch (    VersioningWildcardException ex) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
catch (    VersioningSyntaxException ex) {
      report.setMessage(ex.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    if (!deployment.isRegistered(name)) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
 else {
    try {
      matchedVersions=versioningService.getMatchedVersions(name,null);
    }
 catch (    VersioningException e) {
      report.failure(logger,e.getMessage());
      return;
    }
    if (matchedVersions.isEmpty()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,target));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  ActionReport.MessagePart part=report.getTopMessagePart();
  boolean isVersionExpression=VersioningUtils.isVersionExpression(name);
  Iterator it=matchedVersions.iterator();
  while (it.hasNext()) {
    String appName=(String)it.next();
    Application app=applications.getApplication(appName);
    ApplicationRef applicationRef=domain.getApplicationRefInTarget(appName,target);
    if (applicationRef != null) {
      if (isVersionExpression) {
        ActionReport.MessagePart childPart=part.addChild();
        childPart.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
      }
 else {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,target));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
 else {
      Transaction t=new Transaction();
      if (app.isLifecycleModule()) {
        handleLifecycleModule(context,t);
        return;
      }
      ReadableArchive archive;
      File file=null;
      DeployCommandParameters commandParams=null;
      Properties contextProps=new Properties();
      Map<String,Properties> modulePropsMap=null;
      ApplicationConfigInfo savedAppConfig=null;
      try {
        commandParams=app.getDeployParameters(null);
        commandParams.origin=Origin.create_application_ref;
        commandParams.command=Command.create_application_ref;
        commandParams.target=target;
        commandParams.virtualservers=virtualservers;
        commandParams.enabled=enabled;
        if (lbenabled != null) {
          commandParams.lbenabled=lbenabled;
        }
        if (app.containsSnifferType(ServerTags.OSGI)) {
          commandParams.type=DeploymentProperties.OSGI;
        }
        contextProps=app.getDeployProperties();
        modulePropsMap=app.getModulePropertiesMap();
        savedAppConfig=new ApplicationConfigInfo(app);
        URI uri=new URI(app.getLocation());
        file=new File(uri);
        if (!file.exists()) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getAbsolutePath()));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          return;
        }
        archive=archiveFactory.openArchive(file);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"" + file.getAbsolutePath(),e);
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
      try {
        final ExtendedDeploymentContext deploymentContext=deployment.getBuilder(logger,commandParams,report).source(archive).build();
        Properties appProps=deploymentContext.getAppProps();
        appProps.putAll(contextProps);
        String location=DeploymentUtils.relativizeWithinDomainIfPossible(new URI(app.getLocation()));
        appProps.setProperty(ServerTags.LOCATION,location);
        String appLocation=appProps.getProperty(Application.APP_LOCATION_PROP_NAME);
        appProps.setProperty(Application.APP_LOCATION_PROP_NAME,DeploymentUtils.relativizeWithinDomainIfPossible(new URI(appLocation)));
        String planLocation=appProps.getProperty(Application.DEPLOYMENT_PLAN_LOCATION_PROP_NAME);
        if (planLocation != null) {
          appProps.setProperty(Application.DEPLOYMENT_PLAN_LOCATION_PROP_NAME,DeploymentUtils.relativizeWithinDomainIfPossible(new URI(planLocation)));
        }
        savedAppConfig.store(appProps);
        if (modulePropsMap != null) {
          deploymentContext.setModulePropsMap(modulePropsMap);
        }
        if (enabled) {
          versioningService.handleDisable(appName,target,deploymentContext.getActionReport());
        }
        if (domain.isCurrentInstanceMatchingTarget(target,appName,server.getName(),null)) {
          deployment.deploy(deployment.getSniffersFromApp(app),deploymentContext);
        }
 else {
          events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,deploymentContext),false);
        }
        if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
          try {
            deployment.registerAppInDomainXML(null,deploymentContext,t,true);
          }
 catch (          TransactionFailure e) {
            logger.warning(""String_Node_Str"" + appName);
          }
        }
        if (!isVersionExpression && DeploymentUtils.isDASTarget(target)) {
          return;
        }
        final ParameterMap paramMap=deployment.prepareInstanceDeployParamMap(deploymentContext);
        final List<String> targets=new ArrayList<String>(Arrays.asList(commandParams.target.split(""String_Node_Str"")));
        ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,paramMap,habitat);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
 finally {
        try {
          archive.close();
        }
 catch (        IOException e) {
          logger.log(Level.INFO,""String_Node_Str"" + file.getAbsolutePath(),e);
        }
      }
    }
  }
}","/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  List<String> matchedVersions=null;
  if (enabled) {
    try {
      VersioningUtils.checkIdentifier(name);
      matchedVersions=new ArrayList<String>(1);
      matchedVersions.add(name);
    }
 catch (    VersioningWildcardException ex) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
catch (    VersioningSyntaxException ex) {
      report.setMessage(ex.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    if (!deployment.isRegistered(name)) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
 else {
    try {
      matchedVersions=versioningService.getMatchedVersions(name,null);
    }
 catch (    VersioningException e) {
      report.failure(logger,e.getMessage());
      return;
    }
    if (matchedVersions.isEmpty()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,target));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  ActionReport.MessagePart part=report.getTopMessagePart();
  boolean isVersionExpression=VersioningUtils.isVersionExpression(name);
  Iterator it=matchedVersions.iterator();
  while (it.hasNext()) {
    String appName=(String)it.next();
    Application app=applications.getApplication(appName);
    ApplicationRef applicationRef=domain.getApplicationRefInTarget(appName,target);
    if (applicationRef != null) {
      if (isVersionExpression) {
        ActionReport.MessagePart childPart=part.addChild();
        childPart.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
      }
 else {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,target));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
 else {
      Transaction t=new Transaction();
      if (app.isLifecycleModule()) {
        handleLifecycleModule(context,t);
        return;
      }
      ReadableArchive archive;
      File file=null;
      DeployCommandParameters commandParams=null;
      Properties contextProps;
      Map<String,Properties> modulePropsMap=null;
      ApplicationConfigInfo savedAppConfig=null;
      try {
        commandParams=app.getDeployParameters(null);
        commandParams.origin=Origin.create_application_ref;
        commandParams.command=Command.create_application_ref;
        commandParams.target=target;
        commandParams.virtualservers=virtualservers;
        commandParams.enabled=enabled;
        if (lbenabled != null) {
          commandParams.lbenabled=lbenabled;
        }
        if (app.containsSnifferType(ServerTags.OSGI)) {
          commandParams.type=DeploymentProperties.OSGI;
        }
        contextProps=app.getDeployProperties();
        modulePropsMap=app.getModulePropertiesMap();
        savedAppConfig=new ApplicationConfigInfo(app);
        URI uri=new URI(app.getLocation());
        file=new File(uri);
        if (!file.exists()) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getAbsolutePath()));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          return;
        }
        archive=archiveFactory.openArchive(file);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"" + file.getAbsolutePath(),e);
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
      try {
        final ExtendedDeploymentContext deploymentContext=deployment.getBuilder(logger,commandParams,report).source(archive).build();
        Properties appProps=deploymentContext.getAppProps();
        appProps.putAll(contextProps);
        String location=DeploymentUtils.relativizeWithinDomainIfPossible(new URI(app.getLocation()));
        appProps.setProperty(ServerTags.LOCATION,location);
        String appLocation=appProps.getProperty(Application.APP_LOCATION_PROP_NAME);
        appProps.setProperty(Application.APP_LOCATION_PROP_NAME,DeploymentUtils.relativizeWithinDomainIfPossible(new URI(appLocation)));
        String planLocation=appProps.getProperty(Application.DEPLOYMENT_PLAN_LOCATION_PROP_NAME);
        if (planLocation != null) {
          appProps.setProperty(Application.DEPLOYMENT_PLAN_LOCATION_PROP_NAME,DeploymentUtils.relativizeWithinDomainIfPossible(new URI(planLocation)));
        }
        savedAppConfig.store(appProps);
        if (modulePropsMap != null) {
          deploymentContext.setModulePropsMap(modulePropsMap);
        }
        if (enabled) {
          versioningService.handleDisable(appName,target,deploymentContext.getActionReport());
        }
        if (domain.isCurrentInstanceMatchingTarget(target,appName,server.getName(),null)) {
          deployment.deploy(deployment.getSniffersFromApp(app),deploymentContext);
        }
 else {
          events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,deploymentContext),false);
        }
        if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
          try {
            deployment.registerAppInDomainXML(null,deploymentContext,t,true);
          }
 catch (          TransactionFailure e) {
            logger.warning(""String_Node_Str"" + appName);
          }
        }
        if (!isVersionExpression && DeploymentUtils.isDASTarget(target)) {
          return;
        }
        final ParameterMap paramMap=deployment.prepareInstanceDeployParamMap(deploymentContext);
        final List<String> targets=new ArrayList<String>(Arrays.asList(commandParams.target.split(""String_Node_Str"")));
        ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,paramMap,habitat);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
 finally {
        try {
          archive.close();
        }
 catch (        IOException e) {
          logger.log(Level.INFO,""String_Node_Str"" + file.getAbsolutePath(),e);
        }
      }
    }
  }
}"
29353,"private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.exists() && !baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      if (!outputFile.exists() && !outputFile.mkdirs()) {
        throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
      }
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
}","private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.exists() && !baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      if (!outputFile.exists() && !outputFile.mkdirs()) {
        throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
      }
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
  zipFile.close();
}"
29354,"private void expandCustomizationJar(File tenantDir) throws IOException {
  tenantDir.mkdirs();
  if (customizations == null) {
    return;
  }
  ReadableArchive cusArchive=null;
  WritableArchive expandedArchive=null;
  try {
    expandedArchive=archiveFactory.createArchive(tenantDir);
    cusArchive=archiveFactory.openArchive(customizations);
    DeploymentUtils.expand(cusArchive,expandedArchive);
  }
  finally {
    try {
      if (cusArchive != null) {
        cusArchive.close();
      }
      if (expandedArchive != null) {
        expandedArchive.close();
      }
    }
 catch (    IOException e) {
    }
  }
}","private void expandCustomizationJar(File tenantDir) throws IOException {
  if (!tenantDir.exists() && !tenantDir.mkdirs()) {
  }
  if (customizations == null) {
    return;
  }
  ReadableArchive cusArchive=null;
  WritableArchive expandedArchive=null;
  try {
    expandedArchive=archiveFactory.createArchive(tenantDir);
    cusArchive=archiveFactory.openArchive(customizations);
    DeploymentUtils.expand(cusArchive,expandedArchive);
  }
  finally {
    try {
      if (cusArchive != null) {
        cusArchive.close();
      }
      if (expandedArchive != null) {
        expandedArchive.close();
      }
    }
 catch (    IOException e) {
    }
  }
}"
29355,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  try {
    logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName());
    final ExtendedDeploymentContext dc=suppInfo.deploymentContext();
    final InterceptorNotifier notifier=new InterceptorNotifier(habitat,dc);
    try {
      notifier.ensureAfterReported(ExtendedDeploymentContext.Phase.REPLICATION);
      logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
  }
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  try {
    logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName());
    final ExtendedDeploymentContext dc;
    if (suppInfo == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      dc=suppInfo.deploymentContext();
    }
    final InterceptorNotifier notifier=new InterceptorNotifier(habitat,dc);
    try {
      notifier.ensureAfterReported(ExtendedDeploymentContext.Phase.REPLICATION);
      logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
  }
}"
29356,"public void execute(AdminCommandContext context){
  ActionReport.MessagePart part=report.getTopMessagePart();
  Iterator it=matchedVersions.iterator();
  while (it.hasNext()) {
    String appName=(String)it.next();
    String status=""String_Node_Str"";
    if (!DeploymentUtils.isDomainTarget(target)) {
      ApplicationRef ref=domain.getApplicationRefInTarget(appName,target);
      if (ref == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
    if (domain.isAppEnabledInTarget(appName,target)) {
      status=""String_Node_Str"";
    }
    ActionReport.MessagePart childPart=part.addChild();
    String message=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,status);
    childPart.setMessage(message);
    childPart.addProperty(DeploymentProperties.STATE,status);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","public void execute(AdminCommandContext context){
  ActionReport.MessagePart part;
  if (report == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else {
    part=report.getTopMessagePart();
  }
  Iterator it=matchedVersions.iterator();
  while (it.hasNext()) {
    String appName=(String)it.next();
    String status=""String_Node_Str"";
    if (!DeploymentUtils.isDomainTarget(target)) {
      ApplicationRef ref=domain.getApplicationRefInTarget(appName,target);
      if (ref == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
    if (domain.isAppEnabledInTarget(appName,target)) {
      status=""String_Node_Str"";
    }
    ActionReport.MessagePart childPart=part.addChild();
    String message=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,status);
    childPart.setMessage(message);
    childPart.addProperty(DeploymentProperties.STATE,status);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
29357,"public void execute(AdminCommandContext context){
  Iterator it=matchedVersions.iterator();
  while (it.hasNext()) {
    String appName=(String)it.next();
    if (target == null) {
      target=deployment.getDefaultTarget(appName,origin,_classicstyle);
    }
    ApplicationInfo info=deployment.get(appName);
    Application application=apps.getModule(Application.class,appName);
    if (application == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    deployment.validateUndeploymentTarget(target,appName);
    if (!DeploymentUtils.isDomainTarget(target)) {
      ApplicationRef ref=domain.getApplicationRefInTarget(appName,target);
      if (ref == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
    ReadableArchive source=null;
    if (info == null) {
      URI uri=null;
      try {
        uri=new URI(application.getLocation());
      }
 catch (      URISyntaxException e) {
        logger.severe(""String_Node_Str"" + e.getMessage());
      }
      if (uri != null) {
        File location=new File(uri);
        if (location.exists()) {
          try {
            source=archiveFactory.openArchive(location);
          }
 catch (          IOException e) {
            logger.log(Level.INFO,e.getMessage(),e);
          }
        }
 else {
          logger.warning(""String_Node_Str"" + location + ""String_Node_Str"");
        }
      }
    }
 else {
      source=info.getSource();
    }
    if (source == null) {
      logger.fine(""String_Node_Str"");
      try {
        deployment.unregisterAppFromDomainXML(appName,target);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName + ""String_Node_Str"");
      }
      return;
    }
    File sourceFile=new File(source.getURI());
    if (!source.exists()) {
      logger.log(Level.WARNING,""String_Node_Str"" + sourceFile.getPath());
      try {
        deployment.unregisterAppFromDomainXML(appName,target);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName + ""String_Node_Str"");
      }
      return;
    }
    this.name=appName;
    ExtendedDeploymentContext deploymentContext=null;
    try {
      deploymentContext=deployment.getBuilder(logger,this,report).source(source).build();
    }
 catch (    IOException e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    final InterceptorNotifier notifier=new InterceptorNotifier(habitat,deploymentContext);
    final DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
    suppInfo.setDeploymentContext(deploymentContext);
    report.setResultType(DeployCommandSupplementalInfo.class,suppInfo);
    final Properties appProps=deploymentContext.getAppProps();
    appProps.putAll(application.getDeployProperties());
    if (properties != null) {
      appProps.putAll(properties);
    }
    deploymentContext.setModulePropsMap(application.getModulePropertiesMap());
    events.send(new Event<DeploymentContext>(Deployment.UNDEPLOYMENT_VALIDATION,deploymentContext),false);
    if (report.getActionExitCode() == ActionReport.ExitCode.FAILURE) {
      return;
    }
    if (env.isDas() && !DeploymentUtils.isDASTarget(target)) {
      ActionReport subReport=report.addSubActionsReport();
      CommandRunner.CommandInvocation inv=commandRunner.getCommandInvocation(""String_Node_Str"",subReport);
      try {
        final ParameterMapExtractor extractor=new ParameterMapExtractor(this);
        final ParameterMap parameters=extractor.extract(Collections.EMPTY_LIST);
        parameters.set(""String_Node_Str"",appName);
        parameters.add(DeploymentProperties.IS_UNDEPLOY,Boolean.TRUE.toString());
        inv.parameters(parameters).execute();
        if (subReport.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
          return;
        }
        if (DeploymentUtils.isDomainTarget(target)) {
          List<String> targets=domain.getAllReferencedTargetsForApplication(appName);
          parameters.remove(""String_Node_Str"");
          notifier.ensureBeforeReported(ExtendedDeploymentContext.Phase.REPLICATION);
          ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,parameters,habitat);
        }
      }
 catch (      Exception e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
    final Artifacts generatedArtifacts=DeploymentUtils.generatedArtifacts(application);
    generatedArtifacts.record(deploymentContext);
    if (info != null) {
      deployment.undeploy(appName,deploymentContext);
    }
    boolean isDirectoryDeployed=false;
    if (application != null) {
      isDirectoryDeployed=Boolean.valueOf(application.getDirectoryDeployed());
    }
    if (!report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      try {
        deployment.unregisterAppFromDomainXML(appName,target);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName + ""String_Node_Str"");
      }
      deploymentContext.clean();
      if ((!keepreposdir) && !isDirectoryDeployed && source.exists()) {
        source.delete();
      }
    }
  }
}","public void execute(AdminCommandContext context){
  Iterator it=matchedVersions.iterator();
  while (it.hasNext()) {
    String appName=(String)it.next();
    if (target == null) {
      target=deployment.getDefaultTarget(appName,origin,_classicstyle);
    }
    ApplicationInfo info=deployment.get(appName);
    Application application=apps.getModule(Application.class,appName);
    if (application == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    deployment.validateUndeploymentTarget(target,appName);
    if (!DeploymentUtils.isDomainTarget(target)) {
      ApplicationRef ref=domain.getApplicationRefInTarget(appName,target);
      if (ref == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
    ReadableArchive source=null;
    if (info == null) {
      URI uri=null;
      try {
        uri=new URI(application.getLocation());
      }
 catch (      URISyntaxException e) {
        logger.severe(""String_Node_Str"" + e.getMessage());
      }
      if (uri != null) {
        File location=new File(uri);
        if (location.exists()) {
          try {
            source=archiveFactory.openArchive(location);
          }
 catch (          IOException e) {
            logger.log(Level.INFO,e.getMessage(),e);
          }
        }
 else {
          logger.warning(""String_Node_Str"" + location + ""String_Node_Str"");
        }
      }
    }
 else {
      source=info.getSource();
    }
    if (source == null) {
      logger.fine(""String_Node_Str"");
      try {
        deployment.unregisterAppFromDomainXML(appName,target);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName + ""String_Node_Str"");
      }
      return;
    }
    File sourceFile=new File(source.getURI());
    if (!source.exists()) {
      logger.log(Level.WARNING,""String_Node_Str"" + sourceFile.getPath());
      try {
        deployment.unregisterAppFromDomainXML(appName,target);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName + ""String_Node_Str"");
      }
      return;
    }
    this.name=appName;
    ExtendedDeploymentContext deploymentContext=null;
    try {
      deploymentContext=deployment.getBuilder(logger,this,report).source(source).build();
    }
 catch (    IOException e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    final InterceptorNotifier notifier=new InterceptorNotifier(habitat,deploymentContext);
    final DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
    suppInfo.setDeploymentContext(deploymentContext);
    report.setResultType(DeployCommandSupplementalInfo.class,suppInfo);
    final Properties appProps=deploymentContext.getAppProps();
    appProps.putAll(application.getDeployProperties());
    if (properties != null) {
      appProps.putAll(properties);
    }
    deploymentContext.setModulePropsMap(application.getModulePropertiesMap());
    events.send(new Event<DeploymentContext>(Deployment.UNDEPLOYMENT_VALIDATION,deploymentContext),false);
    if (report.getActionExitCode() == ActionReport.ExitCode.FAILURE) {
      return;
    }
    if (env.isDas() && !DeploymentUtils.isDASTarget(target)) {
      ActionReport subReport=report.addSubActionsReport();
      CommandRunner.CommandInvocation inv=commandRunner.getCommandInvocation(""String_Node_Str"",subReport);
      try {
        final ParameterMapExtractor extractor=new ParameterMapExtractor(this);
        final ParameterMap parameters=extractor.extract(Collections.EMPTY_LIST);
        parameters.set(""String_Node_Str"",appName);
        parameters.add(DeploymentProperties.IS_UNDEPLOY,Boolean.TRUE.toString());
        inv.parameters(parameters).execute();
        if (subReport.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
          return;
        }
        if (DeploymentUtils.isDomainTarget(target)) {
          List<String> targets=domain.getAllReferencedTargetsForApplication(appName);
          parameters.remove(""String_Node_Str"");
          notifier.ensureBeforeReported(ExtendedDeploymentContext.Phase.REPLICATION);
          ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,parameters,habitat);
        }
      }
 catch (      Exception e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
    final Artifacts generatedArtifacts=DeploymentUtils.generatedArtifacts(application);
    generatedArtifacts.record(deploymentContext);
    if (info != null) {
      deployment.undeploy(appName,deploymentContext);
    }
    boolean isDirectoryDeployed=Boolean.valueOf(application.getDirectoryDeployed());
    if (!report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      try {
        deployment.unregisterAppFromDomainXML(appName,target);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName + ""String_Node_Str"");
      }
      deploymentContext.clean();
      if ((!keepreposdir) && !isDirectoryDeployed && source.exists()) {
        source.delete();
      }
    }
  }
}"
29358,"/** 
 * create or obtain an embedded archive within this abstraction.
 * @param name name of the embedded archive.
 */
@Override public WritableArchive createSubArchive(String name) throws IOException {
  String subEntryName=getFileSubArchivePath(name);
  File subEntry=new File(subEntryName);
  if (!subEntry.exists()) {
    subEntry.mkdirs();
    logger.log(DEBUG_LEVEL,""String_Node_Str"",subEntry.getAbsolutePath());
  }
 else {
    logger.log(DEBUG_LEVEL,""String_Node_Str"",subEntry.getAbsolutePath());
    staleFileManager().recordValidEntry(subEntry);
  }
  final WritableArchive result=archiveFactory.createArchive(subEntry);
  if (result instanceof AbstractReadableArchive) {
    ((AbstractReadableArchive)result).setParentArchive(this);
  }
  return result;
}","/** 
 * create or obtain an embedded archive within this abstraction.
 * @param name name of the embedded archive.
 */
@Override public WritableArchive createSubArchive(String name) throws IOException {
  String subEntryName=getFileSubArchivePath(name);
  File subEntry=new File(subEntryName);
  if (!subEntry.exists()) {
    if (!subEntry.exists() && !subEntry.mkdirs()) {
      throw new IOException(""String_Node_Str"" + subEntry.getAbsolutePath());
    }
    logger.log(DEBUG_LEVEL,""String_Node_Str"",subEntry.getAbsolutePath());
  }
 else {
    logger.log(DEBUG_LEVEL,""String_Node_Str"",subEntry.getAbsolutePath());
    staleFileManager().recordValidEntry(subEntry);
  }
  final WritableArchive result=archiveFactory.createArchive(subEntry);
  if (result instanceof AbstractReadableArchive) {
    ((AbstractReadableArchive)result).setParentArchive(this);
  }
  return result;
}"
29359,"/** 
 * creates a new abstract archive with the given path
 * @param uri path to create the archive
 */
@Override public void create(URI uri) throws IOException {
  this.uri=uri;
  archive=new File(uri);
  staleFileManager=StaleFileManager.Util.getInstance(archive);
  archive.mkdirs();
}","/** 
 * creates a new abstract archive with the given path
 * @param uri path to create the archive
 */
@Override public void create(URI uri) throws IOException {
  this.uri=uri;
  archive=new File(uri);
  staleFileManager=StaleFileManager.Util.getInstance(archive);
  if (!archive.exists() && !archive.mkdirs()) {
    throw new IOException(""String_Node_Str"" + archive.getAbsolutePath());
  }
}"
29360,"/** 
 * @returns an @see java.io.OutputStream for a new entry in thiscurrent abstract archive.
 * @param name the entry name
 */
@Override public OutputStream putNextEntry(String name) throws java.io.IOException {
  name=name.replace('/',File.separatorChar);
  File newFile=new File(archive,name);
  if (newFile.exists()) {
    if (!deleteEntry(name,false)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{name,uri.toASCIIString()});
    }
  }
  if (name.lastIndexOf(File.separatorChar) != -1) {
    String dirs=name.substring(0,name.lastIndexOf(File.separatorChar));
    (new File(archive,dirs)).mkdirs();
  }
  staleFileManager().recordValidEntry(newFile);
  os=new BufferedOutputStream(new FileOutputStream(newFile));
  return os;
}","/** 
 * @returns an @see java.io.OutputStream for a new entry in thiscurrent abstract archive.
 * @param name the entry name
 */
@Override public OutputStream putNextEntry(String name) throws java.io.IOException {
  name=name.replace('/',File.separatorChar);
  File newFile=new File(archive,name);
  if (newFile.exists()) {
    if (!deleteEntry(name,false)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{name,uri.toASCIIString()});
    }
  }
  if (name.lastIndexOf(File.separatorChar) != -1) {
    String dirs=name.substring(0,name.lastIndexOf(File.separatorChar));
    File dirsFile=new File(archive,dirs);
    if (!dirsFile.exists() && !dirsFile.mkdirs()) {
      throw new IOException(""String_Node_Str"" + dirsFile.getAbsolutePath());
    }
  }
  staleFileManager().recordValidEntry(newFile);
  os=new BufferedOutputStream(new FileOutputStream(newFile));
  return os;
}"
29361,"private void addManifest(final Collection<Artifacts.FullAndPartURIs> artifacts) throws IOException {
  final File mfFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream mfOS=new BufferedOutputStream(new FileOutputStream(mfFile));
  final Manifest mf=new Manifest();
  mf.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,""String_Node_Str"");
  mf.write(mfOS);
  mfOS.close();
  artifacts.add(new Artifacts.FullAndPartURIs(mfFile.toURI(),JarFile.MANIFEST_NAME,true));
}","private void addManifest(final Collection<Artifacts.FullAndPartURIs> artifacts) throws IOException {
  final File mfFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream mfOS=new BufferedOutputStream(new FileOutputStream(mfFile));
  try {
    final Manifest mf=new Manifest();
    mf.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,""String_Node_Str"");
    mf.write(mfOS);
  }
  finally {
    mfOS.close();
  }
  artifacts.add(new Artifacts.FullAndPartURIs(mfFile.toURI(),JarFile.MANIFEST_NAME,true));
}"
29362,"private File initTenantDir(){
  if (tenant == null || originalAppName == null) {
    return null;
  }
  File f=getRootTenantDirForApp(originalAppName);
  f=new File(f,tenant);
  f.mkdirs();
  return f;
}","private File initTenantDir(){
  if (tenant == null || originalAppName == null) {
    return null;
  }
  File f=getRootTenantDirForApp(originalAppName);
  f=new File(f,tenant);
  if (!f.exists() && !f.mkdirs()) {
    if (logger.isLoggable(Level.FINEST)) {
      logger.log(Level.FINEST,""String_Node_Str"" + f.getAbsolutePath());
    }
  }
  return f;
}"
29363,"public DeploymentProperties(Map map){
  super();
  if (map == null) {
    return;
  }
  Properties props=new Properties();
  for (Iterator itr=map.keySet().iterator(); itr.hasNext(); ) {
    String mapKey=(String)itr.next();
    String mapValue=(String)map.get(mapKey);
    String propsKey=(String)keyMap.get(mapKey);
    if (mapValue != null) {
      if (propsKey != null) {
        props.put(propsKey,mapValue);
      }
 else {
        props.put(mapKey,mapValue);
      }
    }
  }
  putAll(props);
}","public DeploymentProperties(Map map){
  super();
  if (map == null) {
    return;
  }
  Properties props=new Properties();
  for (Iterator<Map.Entry> itr=map.entrySet().iterator(); itr.hasNext(); ) {
    Map.Entry entry=itr.next();
    String mapKey=(String)entry.getKey();
    String mapValue=(String)entry.getValue();
    String propsKey=(String)keyMap.get(mapKey);
    if (mapValue != null) {
      if (propsKey != null) {
        props.put(propsKey,mapValue);
      }
 else {
        props.put(mapKey,mapValue);
      }
    }
  }
  putAll(props);
}"
29364,"public static Map propsToMap(Properties dProps){
  Map map=new HashMap();
  if (dProps == null) {
    return map;
  }
  for (Iterator itr=dProps.keySet().iterator(); itr.hasNext(); ) {
    String propsKey=(String)itr.next();
    String propsValue=(String)dProps.get(propsKey);
    String mapKey=(String)keyMap.get(propsKey);
    if (propsValue != null) {
      if (mapKey != null) {
        map.put(mapKey,propsValue);
      }
 else {
        map.put(propsKey,propsValue);
      }
    }
  }
  return map;
}","public static Map propsToMap(Properties dProps){
  Map map=new HashMap();
  if (dProps == null) {
    return map;
  }
  for (Iterator<Map.Entry<Object,Object>> itr=dProps.entrySet().iterator(); itr.hasNext(); ) {
    Map.Entry<Object,Object> entry=itr.next();
    String propsKey=(String)entry.getKey();
    String propsValue=(String)entry.getValue();
    String mapKey=(String)keyMap.get(propsKey);
    if (propsValue != null) {
      if (mapKey != null) {
        map.put(mapKey,propsValue);
      }
 else {
        map.put(propsKey,propsValue);
      }
    }
  }
  return map;
}"
29365,"public static void explodeModule(Archive source,File directory,boolean preserveManifest) throws IOException, DeploymentException {
  File explodedManifest=null;
  File preservedManifestFromArchive=null;
  FileArchive target=new FileArchive();
  target.create(directory.toURI());
  explodeJar(new File(source.getURI()),directory);
  if (preserveManifest) {
    explodedManifest=new File(directory,java.util.jar.JarFile.MANIFEST_NAME);
    if (explodedManifest.exists()) {
      preservedManifestFromArchive=new File(directory,PRESERVED_MANIFEST_NAME);
      if (!explodedManifest.renameTo(preservedManifestFromArchive)) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
  }
  for (Enumeration itr=source.entries(); itr.hasMoreElements(); ) {
    String fileName=(String)itr.nextElement();
    if (fileName.toLowerCase().endsWith(""String_Node_Str"") && (!fileName.replace('\\','/').toUpperCase().startsWith(WEB_INF_PREFIX))) {
      try {
        File f=new File(directory,fileName);
        ZipFile zip=new ZipFile(f,directory);
        zip.explode();
      }
 catch (      ZipFileException e) {
        IOException ioe=new IOException(e.getMessage());
        ioe.initCause(e);
        throw ioe;
      }
    }
  }
  if (preservedManifestFromArchive != null) {
    if (explodedManifest.exists()) {
      if (!explodedManifest.delete()) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
    if (!preservedManifestFromArchive.renameTo(explodedManifest)) {
      throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{preservedManifestFromArchive.getAbsolutePath(),explodedManifest.getAbsolutePath()}));
    }
  }
  source.close();
  target.close();
}","public static void explodeModule(Archive source,File directory,boolean preserveManifest) throws IOException, DeploymentException {
  File explodedManifest=null;
  File preservedManifestFromArchive=null;
  FileArchive target=new FileArchive();
  target.create(directory.toURI());
  explodeJar(new File(source.getURI()),directory);
  if (preserveManifest) {
    explodedManifest=new File(directory,java.util.jar.JarFile.MANIFEST_NAME);
    if (explodedManifest.exists()) {
      preservedManifestFromArchive=new File(directory,PRESERVED_MANIFEST_NAME);
      if (!explodedManifest.renameTo(preservedManifestFromArchive)) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
  }
  for (Enumeration itr=source.entries(); itr.hasMoreElements(); ) {
    String fileName=(String)itr.nextElement();
    if (fileName.toLowerCase().endsWith(""String_Node_Str"") && (!fileName.replace('\\','/').toUpperCase(Locale.getDefault()).startsWith(WEB_INF_PREFIX))) {
      try {
        File f=new File(directory,fileName);
        ZipFile zip=new ZipFile(f,directory);
        zip.explode();
      }
 catch (      ZipFileException e) {
        IOException ioe=new IOException(e.getMessage());
        ioe.initCause(e);
        throw ioe;
      }
    }
  }
  if (preservedManifestFromArchive != null) {
    if (explodedManifest.exists()) {
      if (!explodedManifest.delete()) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
    if (!preservedManifestFromArchive.renameTo(explodedManifest)) {
      throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{preservedManifestFromArchive.getAbsolutePath(),explodedManifest.getAbsolutePath()}));
    }
  }
  source.close();
  target.close();
}"
29366,"public static void explodeJar(File source,File destination) throws IOException {
  JarFile jarFile=null;
  String fileSystemName=null;
  try {
    jarFile=new JarFile(source);
    Enumeration<JarEntry> e=jarFile.entries();
    while (e.hasMoreElements()) {
      JarEntry entry=e.nextElement();
      fileSystemName=entry.getName().replace('/',File.separatorChar);
      File out=new File(destination,fileSystemName);
      if (entry.isDirectory()) {
        out.mkdirs();
      }
 else {
        if (!out.getParentFile().exists()) {
          out.getParentFile().mkdirs();
        }
        InputStream is=new BufferedInputStream(jarFile.getInputStream(entry));
        FileOutputStream fos=FileUtils.openFileOutputStream(out);
        FileUtils.copy(is,fos,entry.getSize());
      }
    }
  }
 catch (  Throwable e) {
    String msg0=localStrings.getString(""String_Node_Str"",new Object[]{source.getAbsolutePath()});
    String msg=localStrings.getString(""String_Node_Str"",new Object[]{fileSystemName,destination.getAbsolutePath()});
    IOException ioe=new IOException(msg0);
    ioe.initCause(e);
    logger.log(Level.SEVERE,msg,ioe);
    throw ioe;
  }
 finally {
    if (jarFile != null) {
      jarFile.close();
    }
  }
}","public static void explodeJar(File source,File destination) throws IOException {
  JarFile jarFile=null;
  String fileSystemName=null;
  try {
    jarFile=new JarFile(source);
    Enumeration<JarEntry> e=jarFile.entries();
    while (e.hasMoreElements()) {
      JarEntry entry=e.nextElement();
      fileSystemName=entry.getName().replace('/',File.separatorChar);
      File out=new File(destination,fileSystemName);
      if (entry.isDirectory()) {
        if (!out.exists() && !out.mkdirs()) {
          throw new IOException(""String_Node_Str"" + out.getAbsolutePath());
        }
      }
 else {
        if (!out.getParentFile().exists()) {
          out.getParentFile().mkdirs();
        }
        InputStream is=new BufferedInputStream(jarFile.getInputStream(entry));
        FileOutputStream fos=FileUtils.openFileOutputStream(out);
        FileUtils.copy(is,fos,entry.getSize());
      }
    }
  }
 catch (  Throwable e) {
    String msg0=localStrings.getString(""String_Node_Str"",new Object[]{source.getAbsolutePath()});
    String msg=localStrings.getString(""String_Node_Str"",new Object[]{fileSystemName,destination.getAbsolutePath()});
    IOException ioe=new IOException(msg0);
    ioe.initCause(e);
    logger.log(Level.SEVERE,msg,ioe);
    throw ioe;
  }
 finally {
    if (jarFile != null) {
      jarFile.close();
    }
  }
}"
29367,"private ConfigChangeHandler(PropertyChangeEvent[] events){
  this.events=events;
}","private ConfigChangeHandler(){
}"
29368,"private static void extractJar(File jarFile,String destDir) throws IOException {
  java.util.jar.JarFile jar=new java.util.jar.JarFile(jarFile);
  java.util.Enumeration enum1=jar.entries();
  while (enum1.hasMoreElements()) {
    java.util.jar.JarEntry file=(java.util.jar.JarEntry)enum1.nextElement();
    java.io.File f=new java.io.File(destDir + java.io.File.separator + file.getName());
    if (file.isDirectory()) {
      f.mkdir();
      continue;
    }
    InputStream is=null;
    FileOutputStream fos=null;
    try {
      is=jar.getInputStream(file);
      fos=new FileOutputStream(f);
      while (is.available() > 0) {
        fos.write(is.read());
      }
    }
  finally {
      try {
        if (fos != null) {
          fos.close();
        }
      }
 catch (      Exception e) {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"" + f.getName() + ""String_Node_Str"",e);
        }
      }
      try {
        if (is != null) {
          is.close();
        }
      }
 catch (      Exception e) {
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"" + file.getName() + ""String_Node_Str"",e);
        }
      }
    }
  }
}","private static void extractJar(File jarFile,String destDir) throws IOException {
  java.util.jar.JarFile jar=new java.util.jar.JarFile(jarFile);
  java.util.Enumeration enum1=jar.entries();
  try {
    while (enum1.hasMoreElements()) {
      java.util.jar.JarEntry file=(java.util.jar.JarEntry)enum1.nextElement();
      java.io.File f=new java.io.File(destDir + java.io.File.separator + file.getName());
      if (file.isDirectory()) {
        f.mkdir();
        continue;
      }
      InputStream is=null;
      FileOutputStream fos=null;
      try {
        is=jar.getInputStream(file);
        fos=new FileOutputStream(f);
        while (is.available() > 0) {
          fos.write(is.read());
        }
      }
  finally {
        try {
          if (fos != null) {
            fos.close();
          }
        }
 catch (        Exception e) {
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,""String_Node_Str"" + f.getName() + ""String_Node_Str"",e);
          }
        }
        try {
          if (is != null) {
            is.close();
          }
        }
 catch (        Exception e) {
          if (_logger.isLoggable(Level.FINEST)) {
            _logger.log(Level.FINEST,""String_Node_Str"" + file.getName() + ""String_Node_Str"",e);
          }
        }
      }
    }
  }
  finally {
    try {
      jar.close();
    }
 catch (    Exception e) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"" + jar.getName() + ""String_Node_Str"",e);
      }
    }
  }
}"
29369,"/** 
 * check whether the jndi Name has connector related suffix and return if any.
 * @param name jndi name
 * @return suffix, if found
 */
public static String getValidSuffix(String name){
  if (name != null) {
    for (    String validSuffix : ConnectorConstants.JNDI_SUFFIX_VALUES) {
      if (name.endsWith(validSuffix)) {
        return validSuffix;
      }
    }
  }
  return null;
}","/** 
 * check whether the jndi Name has connector related suffix and return if any.
 * @param name jndi name
 * @return suffix, if found
 */
public static String getValidSuffix(String name){
  if (name != null) {
    for (    String validSuffix : JNDI_SUFFIX_VALUES) {
      if (name.endsWith(validSuffix)) {
        return validSuffix;
      }
    }
  }
  return null;
}"
29370,"/** 
 * If the suffix is one of the valid context return true. Return false, if that is not the case.
 * @param suffix __nontx / __pm
 * @return boolean whether the suffix is valid or not
 */
public static boolean isValidJndiSuffix(String suffix){
  if (suffix != null) {
    for (    String validSuffix : ConnectorConstants.JNDI_SUFFIX_VALUES) {
      if (validSuffix.equals(suffix)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * If the suffix is one of the valid context return true. Return false, if that is not the case.
 * @param suffix __nontx / __pm
 * @return boolean whether the suffix is valid or not
 */
public static boolean isValidJndiSuffix(String suffix){
  if (suffix != null) {
    for (    String validSuffix : JNDI_SUFFIX_VALUES) {
      if (validSuffix.equals(suffix)) {
        return true;
      }
    }
  }
  return false;
}"
29371,"@Test public void multipleListeners() throws TransactionFailure {
  final Domain domain=getHabitat().getService(Domain.class);
  final ConfigListener configListener1=new ConfigListener(){
    @Override public UnprocessedChangeEvents changed(    PropertyChangeEvent[] propertyChangeEvents){
      listenersInvoked++;
      return null;
    }
  }
;
  final ConfigListener configListener2=new ConfigListener(){
    @Override public UnprocessedChangeEvents changed(    PropertyChangeEvent[] propertyChangeEvents){
      listenersInvoked++;
      return null;
    }
  }
;
  Transactions transactions=getHabitat().getService(Transactions.class);
  try {
    transactions.addListenerForType(SystemProperty.class,configListener1);
    transactions.addListenerForType(SystemProperty.class,configListener2);
    assertTrue(domain != null);
    ConfigSupport.apply(new SingleConfigCode<Domain>(){
      public Object run(      Domain domain) throws PropertyVetoException, TransactionFailure {
        SystemProperty prop=domain.createChild(SystemProperty.class);
        domain.getSystemProperty().add(prop);
        prop.setName(""String_Node_Str"");
        prop.setValue(""String_Node_Str"");
        return prop;
      }
    }
,domain);
    transactions.waitForDrain();
    assertTrue(listenersInvoked == 2);
  }
  finally {
    assertTrue(transactions.removeListenerForType(SystemProperty.class,configListener1));
    assertTrue(transactions.removeListenerForType(SystemProperty.class,configListener2));
  }
}","@Test public void multipleListeners() throws TransactionFailure {
  final Domain domain=getHabitat().getService(Domain.class);
  final ConfigListener configListener1=new ConfigListener(){
    @Override public UnprocessedChangeEvents changed(    PropertyChangeEvent[] propertyChangeEvents){
      listenersInvoked.incrementAndGet();
      return null;
    }
  }
;
  final ConfigListener configListener2=new ConfigListener(){
    @Override public UnprocessedChangeEvents changed(    PropertyChangeEvent[] propertyChangeEvents){
      listenersInvoked.incrementAndGet();
      return null;
    }
  }
;
  Transactions transactions=getHabitat().getService(Transactions.class);
  try {
    transactions.addListenerForType(SystemProperty.class,configListener1);
    transactions.addListenerForType(SystemProperty.class,configListener2);
    assertTrue(domain != null);
    ConfigSupport.apply(new SingleConfigCode<Domain>(){
      @Override public Object run(      Domain domain) throws PropertyVetoException, TransactionFailure {
        SystemProperty prop=domain.createChild(SystemProperty.class);
        domain.getSystemProperty().add(prop);
        prop.setName(""String_Node_Str"");
        prop.setValue(""String_Node_Str"");
        return prop;
      }
    }
,domain);
    transactions.waitForDrain();
    assertTrue(listenersInvoked.intValue() == 2);
  }
  finally {
    assertTrue(transactions.removeListenerForType(SystemProperty.class,configListener1));
    assertTrue(transactions.removeListenerForType(SystemProperty.class,configListener2));
  }
}"
29372,"public Object run(Domain domain) throws PropertyVetoException, TransactionFailure {
  SystemProperty prop=domain.createChild(SystemProperty.class);
  domain.getSystemProperty().add(prop);
  prop.setName(""String_Node_Str"");
  prop.setValue(""String_Node_Str"");
  return prop;
}","@Override public Object run(Domain domain) throws PropertyVetoException, TransactionFailure {
  SystemProperty prop=domain.createChild(SystemProperty.class);
  domain.getSystemProperty().add(prop);
  prop.setName(""String_Node_Str"");
  prop.setValue(""String_Node_Str"");
  return prop;
}"
29373,"@Test public void addElementTest() throws TransactionFailure {
  final Domain domain=getHabitat().getService(Domain.class);
  final ConfigListener configListener=new ConfigListener(){
    @Override public UnprocessedChangeEvents changed(    PropertyChangeEvent[] propertyChangeEvents){
      events=Arrays.asList(propertyChangeEvents);
      return null;
    }
  }
;
  Transactions transactions=getHabitat().getService(Transactions.class);
  try {
    transactions.addListenerForType(SystemProperty.class,configListener);
    assertTrue(domain != null);
    ConfigSupport.apply(new SingleConfigCode<Domain>(){
      public Object run(      Domain domain) throws PropertyVetoException, TransactionFailure {
        SystemProperty prop=domain.createChild(SystemProperty.class);
        domain.getSystemProperty().add(prop);
        prop.setName(""String_Node_Str"");
        prop.setValue(""String_Node_Str"");
        return prop;
      }
    }
,domain);
    transactions.waitForDrain();
    assertTrue(events != null);
    logger.fine(""String_Node_Str"" + events.size());
    assertTrue(events.size() == 3);
    for (    PropertyChangeEvent event : events) {
      logger.fine(event.toString());
    }
    events=null;
    for (    SystemProperty prop : domain.getSystemProperty()) {
      if (prop.getName().equals(""String_Node_Str"")) {
        ConfigSupport.apply(new SingleConfigCode<SystemProperty>(){
          @Override public Object run(          SystemProperty param) throws PropertyVetoException, TransactionFailure {
            param.setValue(""String_Node_Str"");
            return null;
          }
        }
,prop);
        break;
      }
    }
    assertTrue(events != null);
    logger.fine(""String_Node_Str"" + events.size());
    assertTrue(events.size() == 1);
    for (    PropertyChangeEvent event : events) {
      logger.fine(event.toString());
    }
    events=null;
    assertNotNull(ConfigSupport.apply(new SingleConfigCode<Domain>(){
      public Object run(      Domain domain) throws PropertyVetoException, TransactionFailure {
        for (        SystemProperty prop : domain.getSystemProperty()) {
          if (prop.getName().equals(""String_Node_Str"")) {
            domain.getSystemProperty().remove(prop);
            return prop;
          }
        }
        return null;
      }
    }
,domain));
    transactions.waitForDrain();
    assertTrue(events != null);
    logger.fine(""String_Node_Str"" + events.size());
    assertTrue(events.size() == 1);
    for (    PropertyChangeEvent event : events) {
      logger.fine(event.toString());
    }
  }
  finally {
    assertTrue(transactions.removeListenerForType(SystemProperty.class,configListener));
  }
}","@Test public void addElementTest() throws TransactionFailure {
  final Domain domain=getHabitat().getService(Domain.class);
  final ConfigListener configListener=new ConfigListener(){
    @Override public UnprocessedChangeEvents changed(    PropertyChangeEvent[] propertyChangeEvents){
      events=Arrays.asList(propertyChangeEvents);
      return null;
    }
  }
;
  Transactions transactions=getHabitat().getService(Transactions.class);
  try {
    transactions.addListenerForType(SystemProperty.class,configListener);
    assertTrue(domain != null);
    ConfigSupport.apply(new SingleConfigCode<Domain>(){
      @Override public Object run(      Domain domain) throws PropertyVetoException, TransactionFailure {
        SystemProperty prop=domain.createChild(SystemProperty.class);
        domain.getSystemProperty().add(prop);
        prop.setName(""String_Node_Str"");
        prop.setValue(""String_Node_Str"");
        return prop;
      }
    }
,domain);
    transactions.waitForDrain();
    assertTrue(events != null);
    logger.log(Level.FINE,""String_Node_Str"",events.size());
    assertTrue(events.size() == 3);
    for (    PropertyChangeEvent event : events) {
      logger.fine(event.toString());
    }
    events=null;
    for (    SystemProperty prop : domain.getSystemProperty()) {
      if (prop.getName().equals(""String_Node_Str"")) {
        ConfigSupport.apply(new SingleConfigCode<SystemProperty>(){
          @Override public Object run(          SystemProperty param) throws PropertyVetoException, TransactionFailure {
            param.setValue(""String_Node_Str"");
            return null;
          }
        }
,prop);
        break;
      }
    }
    assertTrue(events != null);
    logger.log(Level.FINE,""String_Node_Str"",events.size());
    assertTrue(events.size() == 1);
    for (    PropertyChangeEvent event : events) {
      logger.fine(event.toString());
    }
    events=null;
    assertNotNull(ConfigSupport.apply(new SingleConfigCode<Domain>(){
      @Override public Object run(      Domain domain) throws PropertyVetoException, TransactionFailure {
        for (        SystemProperty prop : domain.getSystemProperty()) {
          if (prop.getName().equals(""String_Node_Str"")) {
            domain.getSystemProperty().remove(prop);
            return prop;
          }
        }
        return null;
      }
    }
,domain));
    transactions.waitForDrain();
    assertTrue(events != null);
    logger.log(Level.FINE,""String_Node_Str"",events.size());
    assertTrue(events.size() == 1);
    for (    PropertyChangeEvent event : events) {
      logger.fine(event.toString());
    }
  }
  finally {
    assertTrue(transactions.removeListenerForType(SystemProperty.class,configListener));
  }
}"
29374,"@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] propertyChangeEvents){
  listenersInvoked++;
  return null;
}","@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] propertyChangeEvents){
  listenersInvoked.incrementAndGet();
  return null;
}"
29375,"/** 
 * Constructs a coordinator
 * @param work     A work object as submitted by the resource adapter
 * @param timeout  timeout for the work instance
 * @param ec       ExecutionContext object.
 * @param queue    WorkQueue of the threadpool, to which the workwill be submitted
 * @param listener WorkListener object from the resource adapter.
 */
public WorkCoordinator(javax.resource.spi.work.Work work,long timeout,ExecutionContext ec,WorkQueue queue,WorkListener listener,WorkManagementProbeProvider probeProvider,ConnectorRuntime runtime,String raName,WorkContextHandlerImpl handler){
  this.work=work;
  this.timeout=timeout;
  this.ec=ec;
  this.queue=queue;
  this.listener=listener;
synchronized (WorkCoordinator.class) {
    this.id=++seed;
  }
  this.runtime=runtime;
  this.lock=new Object();
  this.probeProvider=probeProvider;
  this.raName=raName;
  this.contextHandler=handler;
}","/** 
 * Constructs a coordinator
 * @param work     A work object as submitted by the resource adapter
 * @param timeout  timeout for the work instance
 * @param ec       ExecutionContext object.
 * @param queue    WorkQueue of the threadpool, to which the workwill be submitted
 * @param listener WorkListener object from the resource adapter.
 */
public WorkCoordinator(javax.resource.spi.work.Work work,long timeout,ExecutionContext ec,WorkQueue queue,WorkListener listener,WorkManagementProbeProvider probeProvider,ConnectorRuntime runtime,String raName,WorkContextHandlerImpl handler){
  this.work=work;
  this.timeout=timeout;
  this.ec=ec;
  this.queue=queue;
  this.listener=listener;
synchronized (WorkCoordinator.class) {
    this.id=increaseSeed();
  }
  this.runtime=runtime;
  this.lock=new Object();
  this.probeProvider=probeProvider;
  this.raName=raName;
  this.contextHandler=handler;
}"
29376,"/** 
 * Lock the thread upto the end of execution or start of work execution.
 */
public void lock(){
  if (!lockRequired()) {
    return;
  }
  try {
synchronized (lock) {
      if (checkStateBeforeLocking()) {
        if (timeout != -1) {
          lock.wait(timeout);
        }
 else {
          lock.wait();
        }
      }
    }
    if (getState() < STARTED) {
      workTimedOut();
    }
    if (lockRequired()) {
synchronized (lock) {
        if (checkStateBeforeLocking()) {
          lock.wait();
        }
      }
    }
  }
 catch (  Exception e) {
    setException(e);
  }
}","/** 
 * Lock the thread upto the end of execution or start of work execution.
 */
public void lock(){
  if (!lockRequired()) {
    return;
  }
  try {
synchronized (lock) {
      while (checkStateBeforeLocking()) {
        if (timeout != -1) {
          lock.wait(timeout);
        }
 else {
          lock.wait();
        }
      }
    }
    if (getState() < STARTED) {
      workTimedOut();
    }
    if (lockRequired()) {
synchronized (lock) {
        if (checkStateBeforeLocking()) {
          lock.wait();
        }
      }
    }
  }
 catch (  Exception e) {
    setException(e);
  }
}"
29377,"/** 
 * Unlocks the thread.
 */
private void unLock(){
  try {
synchronized (lock) {
      lock.notify();
    }
  }
 catch (  Exception e) {
    setException(e);
  }
}","/** 
 * Unlocks the thread.
 */
private void unLock(){
  try {
synchronized (lock) {
      lock.notifyAll();
    }
  }
 catch (  Exception e) {
    setException(e);
  }
}"
29378,"/** 
 * @see java.io.Externalizable
 */
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  moduleName=in.readUTF();
  wm=WorkManagerFactoryImpl.retrieveWorkManager(moduleName);
  _logger=LogDomains.getLogger(WorkManagerProxy.class,LogDomains.RSR_LOGGER);
}","/** 
 * @see java.io.Externalizable
 */
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  moduleName=in.readUTF();
  wm=WorkManagerFactoryImpl.retrieveWorkManager(moduleName);
}"
29379,"protected static Logger getLogger(){
  if (logger == null) {
    logger=LogDomains.getLogger(ConnectionManagerImpl.class,LogDomains.RSR_LOGGER);
  }
  return logger;
}","protected static Logger getLogger(){
  if (logger == null) {
synchronized (ConnectionManagerImpl.class) {
      if (logger == null) {
        logger=LogDomains.getLogger(ConnectionManagerImpl.class,LogDomains.RSR_LOGGER);
      }
    }
  }
  return logger;
}"
29380,"private static StringManager getLocalStrings(){
  if (localStrings == null) {
    localStrings=StringManager.getManager(ConnectionManagerImpl.class);
  }
  return localStrings;
}","private static StringManager getLocalStrings(){
  if (localStrings == null) {
synchronized (ConnectionManagerImpl.class) {
      if (localStrings == null) {
        localStrings=StringManager.getManager(ConnectionManagerImpl.class);
      }
    }
  }
  return localStrings;
}"
29381,"/** 
 * Get a sql connection from the DataSource specified by the jdbcJndiName. This API is intended to be used in the DAS. The motivation for having this API is to provide the CMP backend a means of acquiring a connection during the codegen phase. If a user is trying to deploy an app on a remote server, without this API, a resource reference has to be present both in the DAS and the server instance. This makes the deployment more complex for the user since a resource needs to be forcibly created in the DAS Too. This API will mitigate this need.
 * @param resourceInfo the jndi name of the resource being used to get Connection fromThis resource can either be a pmf resource or a jdbc resource
 * @return a java.sql.Connection
 * @throws java.sql.SQLException in case of errors
 */
public Connection getConnection(ResourceInfo resourceInfo) throws SQLException {
  java.sql.Connection con=null;
  try {
    PoolInfo poolInfo=getPoolNameFromResourceJndiName(resourceInfo);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + poolInfo);
    }
    if (poolInfo == null) {
      throw new SQLException(""String_Node_Str"" + poolInfo + ""String_Node_Str"");
    }
    con=(java.sql.Connection)getUnpooledConnection(poolInfo,null,true);
    if (con == null) {
      String i18nMsg=localStrings.getString(""String_Node_Str"");
      throw new SQLException(i18nMsg);
    }
  }
 catch (  ResourceException re) {
    SQLException sqle=new SQLException(re.getMessage());
    sqle.initCause(re);
    _logger.log(Level.WARNING,""String_Node_Str"",re.getMessage());
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + re);
    }
    throw sqle;
  }
catch (  Exception ex) {
    SQLException sqle=new SQLException(ex.getMessage());
    sqle.initCause(ex);
    _logger.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + ex);
    }
    throw sqle;
  }
  return con;
}","/** 
 * Get a sql connection from the DataSource specified by the jdbcJndiName. This API is intended to be used in the DAS. The motivation for having this API is to provide the CMP backend a means of acquiring a connection during the codegen phase. If a user is trying to deploy an app on a remote server, without this API, a resource reference has to be present both in the DAS and the server instance. This makes the deployment more complex for the user since a resource needs to be forcibly created in the DAS Too. This API will mitigate this need.
 * @param resourceInfo the jndi name of the resource being used to get Connection fromThis resource can either be a pmf resource or a jdbc resource
 * @return a java.sql.Connection
 * @throws java.sql.SQLException in case of errors
 */
public Connection getConnection(ResourceInfo resourceInfo) throws SQLException {
  java.sql.Connection con=null;
  try {
    PoolInfo poolInfo=getPoolNameFromResourceJndiName(resourceInfo);
    if (poolInfo == null) {
      throw new SQLException(""String_Node_Str"");
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + poolInfo);
    }
    con=(java.sql.Connection)getUnpooledConnection(poolInfo,null,true);
    if (con == null) {
      String i18nMsg=localStrings.getString(""String_Node_Str"");
      throw new SQLException(i18nMsg);
    }
  }
 catch (  ResourceException re) {
    SQLException sqle=new SQLException(re.getMessage());
    sqle.initCause(re);
    _logger.log(Level.WARNING,""String_Node_Str"",re.getMessage());
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + re);
    }
    throw sqle;
  }
catch (  Exception ex) {
    SQLException sqle=new SQLException(ex.getMessage());
    sqle.initCause(ex);
    _logger.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + ex);
    }
    throw sqle;
  }
  return con;
}"
29382,"public static void main(String[] args){
  Map m=ConnectionDefinitionUtils.getConnectionDefinitionPropertiesAndDefaults(""String_Node_Str"",""String_Node_Str"");
  Set<String> keys=m.keySet();
  for (  String element : keys) {
    System.out.println(element + ""String_Node_Str"" + m.get(element));
  }
}","public static void main(String[] args){
  Map m=ConnectionDefinitionUtils.getConnectionDefinitionPropertiesAndDefaults(""String_Node_Str"",""String_Node_Str"");
  Set<Map.Entry> elements=m.entrySet();
  for (  Map.Entry element : elements) {
    System.out.println(element.getKey() + ""String_Node_Str"" + element.getValue());
  }
}"
29383,"/** 
 * Initializes this singleton with the given parent class loader if not already created.
 * @param parent parent class loader
 * @return the instance
 */
public static ConnectorClassLoader getInstance(final ClassLoader parent){
  if (classLoader == null) {
synchronized (ConnectorClassLoader.class) {
      classLoader=AccessController.doPrivileged(new PrivilegedAction<ConnectorClassLoader>(){
        public ConnectorClassLoader run(){
          return new ConnectorClassLoader(parent);
        }
      }
);
    }
  }
  return classLoader;
}","/** 
 * Initializes this singleton with the given parent class loader if not already created.
 * @param parent parent class loader
 * @return the instance
 */
public static ConnectorClassLoader getInstance(final ClassLoader parent){
  if (classLoader == null) {
synchronized (ConnectorClassLoader.class) {
      if (classLoader == null) {
        classLoader=AccessController.doPrivileged(new PrivilegedAction<ConnectorClassLoader>(){
          public ConnectorClassLoader run(){
            return new ConnectorClassLoader(parent);
          }
        }
);
      }
    }
  }
  return classLoader;
}"
29384,"public static final ConnectorTimerProxy getProxy(){
synchronized (ConnectorTimerProxy.class) {
    if (connectorTimer == null) {
      connectorTimer=new ConnectorTimerProxy(true);
    }
  }
  return connectorTimer;
}","public static final ConnectorTimerProxy getProxy(){
  if (connectorTimer == null) {
synchronized (ConnectorTimerProxy.class) {
      if (connectorTimer == null) {
        connectorTimer=new ConnectorTimerProxy(true);
      }
    }
  }
  return connectorTimer;
}"
29385,"private byte[] getZipEntryContents(ZipEntry ze,ZipInputStream zis) throws IOException {
  int size=(int)ze.getSize();
  byte[] b=null;
  if (size != -1) {
    b=new byte[(int)size];
    int rb=0;
    int chunk=0;
    while (((int)size - rb) > 0) {
      chunk=zis.read(b,rb,(int)size - rb);
      if (chunk == -1) {
        break;
      }
      rb+=chunk;
    }
  }
 else {
    ArrayList al=new ArrayList();
    int c=0;
    while ((c=zis.read()) != -1) {
      al.add(Byte.valueOf((byte)c));
    }
    Byte[] btArr=(Byte[])al.toArray(new Byte[]{});
    b=new byte[btArr.length];
    if (_logger.isLoggable(Level.FINER)) {
      _logger.finer(""String_Node_Str"" + btArr.length);
    }
    for (int i=0; i < btArr.length; i++) {
      b[i]=btArr[i].byteValue();
    }
  }
  return b;
}","private byte[] getZipEntryContents(ZipEntry ze,ZipInputStream zis) throws IOException {
  int size=(int)ze.getSize();
  byte[] b=null;
  if (size != -1) {
    b=new byte[(int)size];
    int rb=0;
    int chunk=0;
    while (((int)size - rb) > 0) {
      chunk=zis.read(b,rb,(int)size - rb);
      if (chunk == -1) {
        break;
      }
      rb+=chunk;
    }
  }
 else {
    ArrayList al=new ArrayList();
    int c=0;
    while ((c=zis.read()) != -1) {
      al.add(Byte.valueOf((byte)c));
    }
    Byte[] btArr=(Byte[])al.toArray(new Byte[al.size()]);
    b=new byte[btArr.length];
    if (_logger.isLoggable(Level.FINER)) {
      _logger.finer(""String_Node_Str"" + btArr.length);
    }
    for (int i=0; i < btArr.length; i++) {
      b[i]=btArr[i].byteValue();
    }
  }
  return b;
}"
29386,"public static ResourcesUtil createInstance(){
  if (resourcesUtil == null) {
    resourcesUtil=new ResourcesUtil();
  }
  return resourcesUtil;
}","public static ResourcesUtil createInstance(){
  if (resourcesUtil == null) {
synchronized (ResourcesUtil.class) {
      if (resourcesUtil == null) {
        resourcesUtil=new ResourcesUtil();
      }
    }
  }
  return resourcesUtil;
}"
29387,"public static ConnectorRuntime getRuntime(){
  try {
    if (runtime == null) {
      runtime=ConnectorRuntime.getRuntime();
    }
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.log(Level.FINEST,""String_Node_Str"" + ""String_Node_Str"",e);
    }
    runtime=getHabitat().getComponent(ConnectorRuntime.class);
  }
  return runtime;
}","public static ConnectorRuntime getRuntime(){
  try {
    if (runtime == null) {
synchronized (ConnectorNamingUtils.class) {
        if (runtime == null) {
          runtime=ConnectorRuntime.getRuntime();
        }
      }
    }
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.log(Level.FINEST,""String_Node_Str"" + ""String_Node_Str"",e);
    }
    runtime=getHabitat().getComponent(ConnectorRuntime.class);
  }
  return runtime;
}"
29388,"/** 
 * return resource in free list. If none is found, try to scale up the pool/purge pool and <br> return a new resource. returns null if the pool new resources cannot be created. <br>
 * @param alloc ResourceAllocator
 * @return ResourceHandle resource from pool
 * @throws PoolingException if unable to create a new resource
 */
protected ResourceHandle getResourceFromPool(ResourceAllocator alloc,ResourceSpec spec) throws PoolingException {
  ResourceHandle result=null;
  ResourceHandle h;
  ArrayList<ResourceHandle> freeResources=new ArrayList<ResourceHandle>();
  try {
    while ((h=ds.getResource()) != null) {
      if (h.hasConnectionErrorOccurred()) {
        ds.removeResource(h);
        continue;
      }
      if (matchConnection(h,alloc)) {
        boolean isValid=isConnectionValid(h,alloc);
        if (h.hasConnectionErrorOccurred() || !isValid) {
          if (failAllConnections) {
            h=createSingleResourceAndAdjustPool(alloc,spec);
            break;
          }
 else {
            ds.removeResource(h);
            continue;
          }
        }
        if (h.isShareable() == alloc.shareableWithinComponent()) {
          result=h;
          break;
        }
 else {
          freeResources.add(h);
        }
      }
 else {
        freeResources.add(h);
      }
    }
  }
  finally {
    for (    ResourceHandle freeResource : freeResources) {
      ds.returnResource(freeResource);
    }
    freeResources.clear();
  }
  if (result != null) {
    setResourceStateToBusy(result);
  }
 else {
    result=resizePoolAndGetNewResource(alloc);
  }
  return result;
}","/** 
 * return resource in free list. If none is found, try to scale up the pool/purge pool and <br> return a new resource. returns null if the pool new resources cannot be created. <br>
 * @param alloc ResourceAllocator
 * @return ResourceHandle resource from pool
 * @throws PoolingException if unable to create a new resource
 */
protected ResourceHandle getResourceFromPool(ResourceAllocator alloc,ResourceSpec spec) throws PoolingException {
  ResourceHandle result=null;
  ResourceHandle h;
  ArrayList<ResourceHandle> freeResources=new ArrayList<ResourceHandle>();
  try {
    while ((h=ds.getResource()) != null) {
      if (h.hasConnectionErrorOccurred()) {
        ds.removeResource(h);
        continue;
      }
      if (matchConnection(h,alloc)) {
        boolean isValid=isConnectionValid(h,alloc);
        if (h.hasConnectionErrorOccurred() || !isValid) {
          if (failAllConnections) {
            createSingleResourceAndAdjustPool(alloc,spec);
            break;
          }
 else {
            ds.removeResource(h);
            continue;
          }
        }
        if (h.isShareable() == alloc.shareableWithinComponent()) {
          result=h;
          break;
        }
 else {
          freeResources.add(h);
        }
      }
 else {
        freeResources.add(h);
      }
    }
  }
  finally {
    for (    ResourceHandle freeResource : freeResources) {
      ds.returnResource(freeResource);
    }
    freeResources.clear();
  }
  if (result != null) {
    setResourceStateToBusy(result);
  }
 else {
    result=resizePoolAndGetNewResource(alloc);
  }
  return result;
}"
29389,"private String getAppName(long resourceHandleId){
  if (!runtime.isJdbcPoolMonitoringEnabled() && !runtime.isConnectorPoolMonitoringEnabled()) {
    return null;
  }
  String appName=resourceAppAssociationMap.get(resourceHandleId);
  if (appName == null) {
    try {
      if (ic == null) {
        ic=new InitialContext();
      }
      appName=(String)ic.lookup(""String_Node_Str"");
      resourceAppAssociationMap.put(resourceHandleId,appName);
    }
 catch (    NamingException ex) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  return appName;
}","private String getAppName(long resourceHandleId){
  if (!runtime.isJdbcPoolMonitoringEnabled() && !runtime.isConnectorPoolMonitoringEnabled()) {
    return null;
  }
  String appName=resourceAppAssociationMap.get(resourceHandleId);
  if (appName == null) {
    try {
      if (ic == null) {
synchronized (ConnectionPoolEmitterImpl.class) {
          if (ic == null) {
            ic=new InitialContext();
          }
        }
      }
      appName=(String)ic.lookup(""String_Node_Str"");
      resourceAppAssociationMap.put(resourceHandleId,appName);
    }
 catch (    NamingException ex) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  return appName;
}"
29390,"/** 
 * Constructor
 * @param poolInfo connection pool on whose behalf this emitter emits pool relatedprobe events
 * @param provider
 */
public ConnectionPoolEmitterImpl(PoolInfo poolInfo,ConnectionPoolProbeProvider provider){
  this.poolInfo=poolInfo;
  this.poolName=poolInfo.getName();
  this.appName=poolInfo.getApplicationName();
  this.moduleName=poolInfo.getModuleName();
  this.poolProbeProvider=provider;
  this.ccPoolAppStatsProviders=new ArrayList<ConnectorConnPoolAppStatsProvider>();
  this.appStatsMap=new HashMap<PoolInfo,Map<String,ConnectionPoolAppEmitterImpl>>();
  this.resourceAppAssociationMap=new HashMap<Long,String>();
  runtime=ConnectorRuntime.getRuntime();
  if (ic == null) {
    try {
      ic=new InitialContext();
    }
 catch (    NamingException e) {
    }
  }
}","/** 
 * Constructor
 * @param poolInfo connection pool on whose behalf this emitter emits pool relatedprobe events
 * @param provider
 */
public ConnectionPoolEmitterImpl(PoolInfo poolInfo,ConnectionPoolProbeProvider provider){
  this.poolInfo=poolInfo;
  this.poolName=poolInfo.getName();
  this.appName=poolInfo.getApplicationName();
  this.moduleName=poolInfo.getModuleName();
  this.poolProbeProvider=provider;
  this.ccPoolAppStatsProviders=new ArrayList<ConnectorConnPoolAppStatsProvider>();
  this.appStatsMap=new HashMap<PoolInfo,Map<String,ConnectionPoolAppEmitterImpl>>();
  this.resourceAppAssociationMap=new HashMap<Long,String>();
  runtime=ConnectorRuntime.getRuntime();
  if (ic == null) {
synchronized (ConnectionPoolEmitterImpl.class) {
      if (ic == null) {
        try {
          ic=new InitialContext();
        }
 catch (        NamingException e) {
        }
      }
    }
  }
}"
29391,"/** 
 * Notification of a change on a configuration object
 * @param type            type of change : ADD mean the changedInstance was added to the parentREMOVE means the changedInstance was removed from the parent, CHANGE means the changedInstance has mutated.
 * @param changedType     type of the configuration object
 * @param changedInstance changed instance.
 */
public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> changedType,T changedInstance){
  NotProcessed np=null;
switch (type) {
case CHANGE:
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + changedType.getName() + ""String_Node_Str""+ changedInstance);
    }
  np=handleChangeEvent(changedInstance);
break;
}
return np;
}","/** 
 * Notification of a change on a configuration object
 * @param type            type of change : ADD mean the changedInstance was added to the parentREMOVE means the changedInstance was removed from the parent, CHANGE means the changedInstance has mutated.
 * @param changedType     type of the configuration object
 * @param changedInstance changed instance.
 */
public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> changedType,T changedInstance){
  NotProcessed np=null;
switch (type) {
case CHANGE:
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + changedType.getName() + ""String_Node_Str""+ changedInstance);
    }
  np=handleChangeEvent(changedInstance);
break;
default :
}
return np;
}"
29392,"private PropertyChangeHandler(PropertyChangeEvent[] events){
  this.events=events;
}","private PropertyChangeHandler(PropertyChangeEvent[] events){
}"
29393,"private void waitForCompletion(long steps,ResourcePool oldPool,long totalWaitTime) throws InterruptedException {
  debug(""String_Node_Str"");
  try {
synchronized (oldPool.getPoolWaitQueue()) {
      oldPool.getPoolWaitQueue().wait(totalWaitTime / steps);
    }
  }
 catch (  InterruptedException ie) {
  }
  debug(""String_Node_Str"");
}","private void waitForCompletion(long steps,ResourcePool oldPool,long totalWaitTime) throws InterruptedException {
  debug(""String_Node_Str"");
  try {
    Object poolWaitQueue=oldPool.getPoolWaitQueue();
synchronized (poolWaitQueue) {
      long waitTime=totalWaitTime / steps;
      if (waitTime > 0) {
        poolWaitQueue.wait(waitTime);
      }
    }
  }
 catch (  InterruptedException ie) {
  }
  debug(""String_Node_Str"");
}"
29394,"public static JdbcResourcesUtil createInstance(){
  if (jdbcResourcesUtil == null) {
    jdbcResourcesUtil=new JdbcResourcesUtil();
  }
  return jdbcResourcesUtil;
}","public static JdbcResourcesUtil createInstance(){
  if (jdbcResourcesUtil == null) {
synchronized (JdbcResourcesUtil.class) {
      if (jdbcResourcesUtil == null) {
        jdbcResourcesUtil=new JdbcResourcesUtil();
      }
    }
  }
  return jdbcResourcesUtil;
}"
29395,"public void updateDocumentNode(Resource originalResource,Resource modifiedResource){
  Node resourceNode=resourceMap.remove(originalResource);
  while (resourceNode.hasChildNodes()) {
    resourceNode.removeChild(resourceNode.getFirstChild());
  }
  HashMap<String,String> attrs=modifiedResource.getAttributes();
  for (  String key : attrs.keySet()) {
    ((Element)resourceNode).setAttribute(key,attrs.get(key));
  }
  Properties props=modifiedResource.getProperties();
  for (  String key : props.stringPropertyNames()) {
    String val=props.getProperty(key);
    org.w3c.dom.Element prop=document.createElement(""String_Node_Str"");
    prop.setAttribute(""String_Node_Str"",key);
    prop.setAttribute(""String_Node_Str"",val);
    resourceNode.appendChild(prop);
  }
  resourceMap.put(modifiedResource,resourceNode);
}","public void updateDocumentNode(Resource originalResource,Resource modifiedResource){
  Node resourceNode=resourceMap.remove(originalResource);
  while (resourceNode.hasChildNodes()) {
    resourceNode.removeChild(resourceNode.getFirstChild());
  }
  HashMap<String,String> attrs=modifiedResource.getAttributes();
  Iterator entries=attrs.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry thisEntry=(Map.Entry)entries.next();
    ((Element)resourceNode).setAttribute((String)thisEntry.getKey(),(String)thisEntry.getValue());
  }
  Properties props=modifiedResource.getProperties();
  for (  String key : props.stringPropertyNames()) {
    String val=props.getProperty(key);
    org.w3c.dom.Element prop=document.createElement(""String_Node_Str"");
    prop.setAttribute(""String_Node_Str"",key);
    prop.setAttribute(""String_Node_Str"",val);
    resourceNode.appendChild(prop);
  }
  resourceMap.put(modifiedResource,resourceNode);
}"
29396,"public JavaEEResource makeClone(org.glassfish.resources.api.ResourceInfo resourceInfo){
  JavaEEResource clone=doClone(resourceInfo);
  Set entrySet=properties_.entrySet();
  for (Iterator iter=entrySet.iterator(); iter.hasNext(); ) {
    Map.Entry next=(Map.Entry)iter.next();
    ResourceProperty nextProp=(ResourceProperty)next.getValue();
    ResourceProperty propClone=new ResourcePropertyImpl((String)next.getKey());
    propClone.setValue(next.getValue());
    clone.addProperty(propClone);
  }
  clone.setEnabled(isEnabled());
  clone.setDescription(getDescription());
  return clone;
}","public JavaEEResource makeClone(org.glassfish.resources.api.ResourceInfo resourceInfo){
  JavaEEResource clone=doClone(resourceInfo);
  Set entrySet=properties_.entrySet();
  for (Iterator iter=entrySet.iterator(); iter.hasNext(); ) {
    Map.Entry next=(Map.Entry)iter.next();
    ResourceProperty propClone=new ResourcePropertyImpl((String)next.getKey());
    propClone.setValue(next.getValue());
    clone.addProperty(propClone);
  }
  clone.setEnabled(isEnabled());
  clone.setDescription(getDescription());
  return clone;
}"
29397,"private ConfigChangeHandler(PropertyChangeEvent[] events){
  this.events=events;
}","private ConfigChangeHandler(){
}"
29398,"@Override public long getArchiveSize() throws SecurityException {
  if (cachedArchiveSize != null) {
    return Integer.valueOf(cachedArchiveSize);
  }
  try {
    URLConnection cnx=archiveURL.openConnection();
    return (cachedArchiveSize=cnx.getContentLength());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public long getArchiveSize() throws SecurityException {
  if (cachedArchiveSize != -2) {
    return cachedArchiveSize;
  }
  try {
    URLConnection cnx=archiveURL.openConnection();
    return (cachedArchiveSize=cnx.getContentLength());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
29399,"@Override public boolean exists(){
  if (exists != null) {
    return exists.booleanValue();
  }
  InputStream is=null;
  try {
    is=archiveURL.openStream();
    exists=Boolean.TRUE;
    is.close();
  }
 catch (  Exception e) {
    exists=Boolean.FALSE;
  }
 finally {
    return exists.booleanValue();
  }
}","@Override public boolean exists(){
  if (exists != null) {
    return exists.booleanValue();
  }
  InputStream is=null;
  exists=Boolean.FALSE;
  try {
    is=archiveURL.openStream();
    exists=Boolean.TRUE;
    is.close();
  }
  finally {
    return exists.booleanValue();
  }
}"
29400,"/** 
 * Generates content for the top-level generated client JAR from the  app clients in this app. <p> Higher-level logic will actually create the client JAR, because the need for a client JAR can be triggered by other deployers (EJB for generated stubs and web services), not only app clients.
 * @param dc
 * @param appScratchDir
 * @param facadeFileName
 * @param appClientGroupList
 * @throws IOException 
 */
private void generateAndRecordEARFacadeContents(final DeploymentContext dc,final String appClientGroupList) throws IOException {
  final ClientArtifactsManager clientArtifactsManager=ClientArtifactsManager.get(dc);
  final Manifest manifest=new Manifest();
  Attributes mainAttrs=manifest.getMainAttributes();
  mainAttrs.put(Attributes.Name.MANIFEST_VERSION,""String_Node_Str"");
  mainAttrs.put(Attributes.Name.MAIN_CLASS,GLASSFISH_APPCLIENT_GROUP_FACADE_CLASS_NAME);
  mainAttrs.put(GLASSFISH_APPCLIENT_GROUP,appClientGroupList);
  final File manifestFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream manifestOutputStream=new BufferedOutputStream(new FileOutputStream(manifestFile));
  manifest.write(manifestOutputStream);
  manifestOutputStream.close();
  clientArtifactsManager.add(manifestFile,JarFile.MANIFEST_NAME,true);
  writeMainClass(clientArtifactsManager);
}","/** 
 * Generates content for the top-level generated client JAR from the  app clients in this app. <p> Higher-level logic will actually create the client JAR, because the need for a client JAR can be triggered by other deployers (EJB for generated stubs and web services), not only app clients.
 * @param dc
 * @param appScratchDir
 * @param facadeFileName
 * @param appClientGroupList
 * @throws IOException 
 */
private void generateAndRecordEARFacadeContents(final DeploymentContext dc,final String appClientGroupList) throws IOException {
  final ClientArtifactsManager clientArtifactsManager=ClientArtifactsManager.get(dc);
  final Manifest manifest=new Manifest();
  Attributes mainAttrs=manifest.getMainAttributes();
  mainAttrs.put(Attributes.Name.MANIFEST_VERSION,""String_Node_Str"");
  mainAttrs.put(Attributes.Name.MAIN_CLASS,GLASSFISH_APPCLIENT_GROUP_FACADE_CLASS_NAME);
  mainAttrs.put(GLASSFISH_APPCLIENT_GROUP,appClientGroupList);
  final File manifestFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream manifestOutputStream=new BufferedOutputStream(new FileOutputStream(manifestFile));
  try {
    manifest.write(manifestOutputStream);
  }
  finally {
    manifestOutputStream.close();
  }
  clientArtifactsManager.add(manifestFile,JarFile.MANIFEST_NAME,true);
  writeMainClass(clientArtifactsManager);
}"
29401,"private String getGFClientModuleClassPath(final File gfClientJAR) throws IOException {
  final JarFile jf=new JarFile(gfClientJAR);
  final Manifest mf=jf.getManifest();
  Attributes mainAttrs=mf.getMainAttributes();
  return mainAttrs.getValue(Attributes.Name.CLASS_PATH);
}","private String getGFClientModuleClassPath(final File gfClientJAR) throws IOException {
  final JarFile jf=new JarFile(gfClientJAR);
  try {
    final Manifest mf=jf.getManifest();
    Attributes mainAttrs=mf.getMainAttributes();
    return mainAttrs.getValue(Attributes.Name.CLASS_PATH);
  }
  finally {
    jf.close();
  }
}"
29402,"MainClassLaunchable(final ServiceLocator habitat,final Class mainClass){
  super();
  this.mainClass=mainClass;
  this.habitat=habitat;
}","MainClassLaunchable(final ServiceLocator habitat,final Class mainClass){
  super();
  this.mainClass=mainClass;
}"
29403,"/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  final String APP_LEVEL=""String_Node_Str"";
  final String EJBBUNDLE_LEVEL=""String_Node_Str"";
  final String EJB_LEVEL=""String_Node_Str"";
  final String APPCLIENTBUNDLE_LEVEL=""String_Node_Str"";
  final String APPCLIENT_LEVEL=""String_Node_Str"";
  final String WEBBUNDLE_LEVEL=""String_Node_Str"";
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=application.getConnectorResourceDefinitionDescriptors();
    if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,APP_LEVEL + application.getName())) {
      return false;
    }
    appLevel.add(APP_LEVEL + commonResourceBundleDescriptor.getName());
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  if (application != null) {
    Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
    Vector appClientLevel=new Vector();
    for (    ApplicationClientDescriptor acd : appClientDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      appClientLevel.add(APPCLIENTBUNDLE_LEVEL + acd.getName());
    }
    validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  }
  if (application != null) {
    Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
    Vector cdLevel=new Vector();
    for (    ConnectorDescriptor cd : connectorDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=cd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      cdLevel.add(APPCLIENT_LEVEL + cd.getName());
    }
    validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  }
  if (application != null) {
    Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
    Vector ebdLevel=new Vector();
    Vector edLevel=new Vector();
    for (    EjbBundleDescriptor ebd : ejbBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=ebd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      ebdLevel.add(EJBBUNDLE_LEVEL + ebd.getName());
      Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
      for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
        EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
        mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
        if (isExistingMailSession(mailSessionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
        if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        connectorResourceDefinitionDescriptors=ejbDescriptor.getConnectorResourceDefinitionDescriptors();
        if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        edLevel.add(EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName());
      }
    }
    validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
    validNameSpaceDetails.put(EJB_KEYS,edLevel);
  }
  if (application != null) {
    Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
    Vector wbdLevel=new Vector();
    for (    WebBundleDescriptor wbd : webBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=wbd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      wbdLevel.add(WEBBUNDLE_LEVEL + wbd.getName());
    }
    validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  }
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}","/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  final String APP_LEVEL=""String_Node_Str"";
  final String EJBBUNDLE_LEVEL=""String_Node_Str"";
  final String EJB_LEVEL=""String_Node_Str"";
  final String APPCLIENTBUNDLE_LEVEL=""String_Node_Str"";
  final String APPCLIENT_LEVEL=""String_Node_Str"";
  final String WEBBUNDLE_LEVEL=""String_Node_Str"";
  Set<EnvironmentProperty> environmentProperties=application.getEnvironmentProperties();
  for (  EnvironmentProperty environmentProperty : environmentProperties) {
    String jndiName=environmentProperty.getName();
    if (environmentProperty.hasLookupName()) {
      jndiName=environmentProperty.getLookupName();
    }
 else     if (environmentProperty.getMappedName().length() > 0) {
      jndiName=environmentProperty.getMappedName();
    }
    if (jndiName.startsWith(JNDI_COMP) || jndiName.startsWith(JNDI_MODULE)) {
      inValidJndiName=jndiName;
      return false;
    }
  }
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=application.getConnectorResourceDefinitionDescriptors();
    if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,APP_LEVEL + application.getName())) {
      return false;
    }
    appLevel.add(APP_LEVEL + commonResourceBundleDescriptor.getName());
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  if (application != null) {
    Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
    Vector appClientLevel=new Vector();
    for (    ApplicationClientDescriptor acd : appClientDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      appClientLevel.add(APPCLIENTBUNDLE_LEVEL + acd.getName());
    }
    validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  }
  if (application != null) {
    Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
    Vector cdLevel=new Vector();
    for (    ConnectorDescriptor cd : connectorDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=cd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      cdLevel.add(APPCLIENT_LEVEL + cd.getName());
    }
    validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  }
  if (application != null) {
    Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
    Vector ebdLevel=new Vector();
    Vector edLevel=new Vector();
    for (    EjbBundleDescriptor ebd : ejbBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=ebd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      ebdLevel.add(EJBBUNDLE_LEVEL + ebd.getName());
      Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
      for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
        EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
        mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
        if (isExistingMailSession(mailSessionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
        if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        connectorResourceDefinitionDescriptors=ejbDescriptor.getConnectorResourceDefinitionDescriptors();
        if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        edLevel.add(EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName());
      }
    }
    validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
    validNameSpaceDetails.put(EJB_KEYS,edLevel);
  }
  if (application != null) {
    Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
    Vector wbdLevel=new Vector();
    for (    WebBundleDescriptor wbd : webBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=wbd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      wbdLevel.add(WEBBUNDLE_LEVEL + wbd.getName());
    }
    validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  }
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}"
29404,"/** 
 * We need to dynamically load the AMX module.  HOW?  we can't depend on the amx-impl module. For now though, assume that a well-known MBean is available through other means via the amx-impl module.
 */
public synchronized ObjectName bootAMX(){
  if (mDomainRootObjectName == null) {
    final AMXStartupServiceMBean loader=getLoader();
    final ObjectName startupON=AMXStartupServiceMBean.OBJECT_NAME;
    if (!mMBeanServer.isRegistered(startupON)) {
      throw new IllegalStateException(""String_Node_Str"" + startupON);
    }
    try {
      mDomainRootObjectName=(ObjectName)mMBeanServer.invoke(startupON,""String_Node_Str"",null,null);
    }
 catch (    final JMException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
  return mDomainRootObjectName;
}","/** 
 * We need to dynamically load the AMX module.  HOW?  we can't depend on the amx-impl module. For now though, assume that a well-known MBean is available through other means via the amx-impl module.
 */
public synchronized ObjectName bootAMX(){
  if (mDomainRootObjectName == null) {
    getLoader();
    final ObjectName startupON=AMXStartupServiceMBean.OBJECT_NAME;
    if (!mMBeanServer.isRegistered(startupON)) {
      throw new IllegalStateException(""String_Node_Str"" + startupON);
    }
    try {
      mDomainRootObjectName=(ObjectName)mMBeanServer.invoke(startupON,""String_Node_Str"",null,null);
    }
 catch (    final JMException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
  return mDomainRootObjectName;
}"
29405,"public BootAMXListener(final JMXConnectorServer server,final BootAMXMBean booter){
  mServer=server;
  mBooter=booter;
}","public BootAMXListener(final BootAMXMBean booter){
  mBooter=booter;
}"
29406,"public void handleNotification(final Notification notif,final Object handback){
  if (notif instanceof JMXConnectionNotification) {
    final JMXConnectionNotification n=(JMXConnectionNotification)notif;
    if (n.getType().equals(JMXConnectionNotification.OPENED)) {
      LOGGER.log(Level.INFO,JMX_BOOTING_AMX_LISTENER,handback);
      mBooter.bootAMX();
      try {
        mServer.removeNotificationListener(this);
        LOGGER.fine(""String_Node_Str"");
      }
 catch (      final ListenerNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void handleNotification(final Notification notif,final Object handback){
  if (notif instanceof JMXConnectionNotification) {
    final JMXConnectionNotification n=(JMXConnectionNotification)notif;
    if (n.getType().equals(JMXConnectionNotification.OPENED)) {
      LOGGER.log(Level.INFO,JMX_BOOTING_AMX_LISTENER,handback);
      mBooter.bootAMX();
      if (mServer != null) {
        try {
          mServer.removeNotificationListener(this);
          LOGGER.fine(""String_Node_Str"");
        }
 catch (        final ListenerNotFoundException e) {
          e.printStackTrace();
        }
      }
    }
  }
}"
29407,"ConnectorStarter(final MBeanServer mbeanServer,final String host,final int port,final String authRealmName,final boolean securityEnabled,final ServiceLocator habitat,final BootAMXListener bootListener,final Ssl sslConfig){
  mMBeanServer=mbeanServer;
  mHostName=host;
  mPort=port;
  mAuthRealmName=authRealmName;
  mSecurityEnabled=securityEnabled;
  mHabitat=habitat;
  mBootListener=bootListener;
  ssl=sslConfig;
}","ConnectorStarter(final MBeanServer mbeanServer,final String host,final int port,final boolean securityEnabled,final ServiceLocator habitat,final BootAMXListener bootListener){
  mMBeanServer=mbeanServer;
  mHostName=host;
  mPort=port;
  mSecurityEnabled=securityEnabled;
  mHabitat=habitat;
  mBootListener=bootListener;
}"
29408,"JMXMPConnectorStarter(final MBeanServer mbeanServer,final String address,final int port,final String authRealmName,final boolean securityEnabled,final ServiceLocator habitat,final BootAMXListener bootListener,final Ssl sslConfig){
  super(mbeanServer,address,port,authRealmName,securityEnabled,habitat,bootListener,sslConfig);
}","JMXMPConnectorStarter(final MBeanServer mbeanServer,final String address,final int port,final boolean securityEnabled,final ServiceLocator habitat,final BootAMXListener bootListener){
  super(mbeanServer,address,port,securityEnabled,habitat,bootListener);
}"
29409,"private JMXConnectorServer startConnector(final JmxConnector connConfig) throws IOException {
  JMX_LOGGER.fine(""String_Node_Str"" + toString(connConfig));
  final String protocol=connConfig.getProtocol();
  final String address=connConfig.getAddress();
  final int port=Integer.parseInt(connConfig.getPort());
  final String authRealmName=connConfig.getAuthRealmName();
  final boolean securityEnabled=Boolean.parseBoolean(connConfig.getSecurityEnabled());
  final Ssl ssl=connConfig.getSsl();
  JMXConnectorServer server=null;
  final BootAMXListener listener=mNeedBootListeners ? new BootAMXListener(server,mAMXBooterNew) : null;
  if (protocol.equals(""String_Node_Str"")) {
    starter=new RMIConnectorStarter(mMBeanServer,address,port,protocol,authRealmName,securityEnabled,habitat,listener,ssl);
    server=((RMIConnectorStarter)starter).start();
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    starter=new JMXMPConnectorStarter(mMBeanServer,address,port,authRealmName,securityEnabled,habitat,listener,ssl);
    server=((JMXMPConnectorStarter)starter).start();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + protocol);
  }
  final JMXServiceURL url=server.getAddress();
  JMX_LOGGER.log(Level.INFO,JMX_STARTED_SERVICE,url);
  try {
    connObjectName=new ObjectName(JMX_CONNECTOR_SERVER_PREFIX + ""String_Node_Str"" + protocol+ ""String_Node_Str""+ connConfig.getName());
    ObjectName connObjectName1=mMBeanServer.registerMBean(server,connObjectName).getObjectName();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return server;
}","private JMXConnectorServer startConnector(final JmxConnector connConfig) throws IOException {
  JMX_LOGGER.fine(""String_Node_Str"" + toString(connConfig));
  final String protocol=connConfig.getProtocol();
  final String address=connConfig.getAddress();
  final int port=Integer.parseInt(connConfig.getPort());
  final boolean securityEnabled=Boolean.parseBoolean(connConfig.getSecurityEnabled());
  final Ssl ssl=connConfig.getSsl();
  JMXConnectorServer server=null;
  final BootAMXListener listener=mNeedBootListeners ? new BootAMXListener(mAMXBooterNew) : null;
  if (protocol.equals(""String_Node_Str"")) {
    starter=new RMIConnectorStarter(mMBeanServer,address,port,protocol,securityEnabled,habitat,listener,ssl);
    server=((RMIConnectorStarter)starter).start();
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    starter=new JMXMPConnectorStarter(mMBeanServer,address,port,securityEnabled,habitat,listener);
    server=((JMXMPConnectorStarter)starter).start();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + protocol);
  }
  if (listener != null) {
    listener.setServer(server);
  }
  final JMXServiceURL url=server.getAddress();
  JMX_LOGGER.log(Level.INFO,JMX_STARTED_SERVICE,url);
  try {
    connObjectName=new ObjectName(JMX_CONNECTOR_SERVER_PREFIX + ""String_Node_Str"" + protocol+ ""String_Node_Str""+ connConfig.getName());
    mMBeanServer.registerMBean(server,connObjectName).getObjectName();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return server;
}"
29410,"private PendingConfigBeanJob add(final ConfigBean cb,final CountDownLatch latch){
  ConfigBean ancestor=cb;
  ConfigBean parent;
  while ((parent=asConfigBean(ancestor.parent())) != null) {
    ancestor=parent;
  }
  PendingConfigBeanJob job=null;
  if (ancestor != null && ancestor.getProxyType().getName().endsWith(""String_Node_Str"")) {
    job=addJob(new PendingConfigBeanJob(cb,latch));
  }
 else {
    Util.getLogger().info(""String_Node_Str"" + cb.getProxyType().getName());
    if (latch != null) {
      latch.countDown();
    }
  }
  return job;
}","private PendingConfigBeanJob add(final ConfigBean cb,final CountDownLatch latch){
  ConfigBean ancestor=cb;
  ConfigBean parent;
  while ((parent=asConfigBean(ancestor.parent())) != null) {
    ancestor=parent;
  }
  PendingConfigBeanJob job=null;
  if (ancestor.getProxyType().getName().endsWith(""String_Node_Str"")) {
    job=addJob(new PendingConfigBeanJob(cb,latch));
  }
 else {
    Util.getLogger().log(Level.INFO,""String_Node_Str"",cb.getProxyType().getName());
    if (latch != null) {
      latch.countDown();
    }
  }
  return job;
}"
29411,"public void unprocessedTransactedEvents(List<UnprocessedChangeEvents> changes){
}","@Override public void unprocessedTransactedEvents(List<UnprocessedChangeEvents> changes){
}"
29412,"/** 
 * This is a workaround for the fact that the onEntered() is not being called in all cases, namely during deployment before AMX has loaded.  See disableTransactionListener() above.
 */
public synchronized void transactionCommited(final List<PropertyChangeEvent> events){
  for (  final PropertyChangeEvent event : events) {
    final Object oldValue=event.getOldValue();
    final Object newValue=event.getNewValue();
    final Object source=event.getSource();
    final String propertyName=event.getPropertyName();
    if (oldValue == null && newValue instanceof ConfigBeanProxy) {
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap((ConfigBeanProxy)newValue));
      add(cb);
    }
 else     if (newValue == null && (oldValue instanceof ConfigBeanProxy)) {
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap((ConfigBeanProxy)oldValue));
      remove(cb);
    }
 else {
    }
  }
}","/** 
 * This is a workaround for the fact that the onEntered() is not being called in all cases, namely during deployment before AMX has loaded.  See disableTransactionListener() above.
 */
@Override public synchronized void transactionCommited(final List<PropertyChangeEvent> events){
  for (  final PropertyChangeEvent event : events) {
    final Object oldValue=event.getOldValue();
    final Object newValue=event.getNewValue();
    if (oldValue == null && newValue instanceof ConfigBeanProxy) {
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap((ConfigBeanProxy)newValue));
      add(cb);
    }
 else     if (newValue == null && (oldValue instanceof ConfigBeanProxy)) {
      final ConfigBean cb=asConfigBean(ConfigBean.unwrap((ConfigBeanProxy)oldValue));
      remove(cb);
    }
  }
}"
29413,"public void onEntered(final Provider<ConfigBean> provider){
  final ConfigBean cb=asConfigBean(provider);
  if (cb != null) {
    add(cb);
  }
}","@Override public void onEntered(final Provider<ConfigBean> provider){
  final ConfigBean cb=asConfigBean(provider);
  if (cb != null) {
    add(cb);
  }
}"
29414,"public void postConstruct(){
  transactions.addTransactionsListener(this);
}","@Override public void postConstruct(){
  transactions.addTransactionsListener(this);
}"
29415,"/** 
 * Method to validate jndi name for app namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForApp(Vector myVector,String jndiName){
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.get(j);
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(0,firstElement.indexOf(""String_Node_Str""));
    }
    for (int i=j; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(0,otherElements.indexOf(""String_Node_Str""));
      }
      if (!firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
      }
    }
  }
  return true;
}","/** 
 * Method to validate jndi name for app namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForApp(Vector myVector,String jndiName){
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.get(j);
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(0,firstElement.indexOf(""String_Node_Str""));
    }
    for (int i=j + 1; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(0,otherElements.indexOf(""String_Node_Str""));
      }
      if (firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
      }
    }
  }
  return true;
}"
29416,"/** 
 * Method to compare existing descriptor with other descriptors. If both descriptor is equal then deployment should be failed. scope is nothing but app level,connector level, ejb level etc., which is used later to compare same jndi name is defined at different scope or not.
 * @param name
 * @param descriptor
 * @param scope
 * @return
 */
private boolean isExistsDescriptor(String name,Descriptor descriptor,String scope){
  if (descriptor != null) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(name);
    if (commonResourceValidator != null) {
      Descriptor existingDescriptor=commonResourceValidator.getDescriptor();
      if (descriptor instanceof MailSessionDescriptor && existingDescriptor instanceof MailSessionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof DataSourceDefinitionDescriptor && existingDescriptor instanceof DataSourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
      Vector vectorScope=commonResourceValidator.getScope();
      if (vectorScope != null) {
        vectorScope.add(scope);
      }
      commonResourceValidator.setScope(vectorScope);
      allResourceDescriptors.put(name,commonResourceValidator);
    }
 else {
      Vector<String> vectorScope=new Vector<String>();
      vectorScope.add(scope);
      allResourceDescriptors.put(name,new CommonResourceValidator(descriptor,name,vectorScope));
    }
  }
  return false;
}","/** 
 * Method to compare existing descriptor with other descriptors. If both descriptor is equal then deployment should be failed. scope is nothing but app level,connector level, ejb level etc., which is used later to compare same jndi name is defined at different scope or not.
 * @param name
 * @param descriptor
 * @param scope
 * @return
 */
private boolean isExistsDescriptor(String name,Descriptor descriptor,String scope){
  if (descriptor != null) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(name);
    if (commonResourceValidator != null) {
      Descriptor existingDescriptor=commonResourceValidator.getDescriptor();
      if (descriptor instanceof MailSessionDescriptor && existingDescriptor instanceof MailSessionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof DataSourceDefinitionDescriptor && existingDescriptor instanceof DataSourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof ConnectorResourceDefinitionDescriptor && existingDescriptor instanceof ConnectorResourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
      Vector vectorScope=commonResourceValidator.getScope();
      if (vectorScope != null) {
        vectorScope.add(scope);
      }
      commonResourceValidator.setScope(vectorScope);
      allResourceDescriptors.put(name,commonResourceValidator);
    }
 else {
      Vector<String> vectorScope=new Vector<String>();
      vectorScope.add(scope);
      allResourceDescriptors.put(name,new CommonResourceValidator(descriptor,name,vectorScope));
    }
  }
  return false;
}"
29417,"/** 
 * Method to validate jndi name for module namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForModule(Vector myVector,String jndiName){
  if (!compareVectorForApp(myVector,jndiName)) {
    return false;
  }
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.firstElement();
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(firstElement.indexOf(""String_Node_Str"") + 1,firstElement.length());
    }
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(0,firstElement.indexOf(""String_Node_Str""));
    }
    for (int i=j; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(otherElements.indexOf(""String_Node_Str"") + 1,otherElements.length());
      }
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(0,otherElements.indexOf(""String_Node_Str""));
      }
      if (!firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
      }
    }
  }
  return true;
}","/** 
 * Method to validate jndi name for module namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForModule(Vector myVector,String jndiName){
  if (!compareVectorForApp(myVector,jndiName)) {
    return false;
  }
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.firstElement();
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(firstElement.indexOf(""String_Node_Str"") + 1,firstElement.length());
    }
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(0,firstElement.indexOf(""String_Node_Str""));
    }
    for (int i=j + 1; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(otherElements.indexOf(""String_Node_Str"") + 1,otherElements.length());
      }
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(0,otherElements.indexOf(""String_Node_Str""));
      }
      if (firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
      }
    }
  }
  return true;
}"
29418,"/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  final String APP_LEVEL=""String_Node_Str"";
  final String EJBBUNDLE_LEVEL=""String_Node_Str"";
  final String EJB_LEVEL=""String_Node_Str"";
  final String APPCLIENTBUNDLE_LEVEL=""String_Node_Str"";
  final String APPCLIENT_LEVEL=""String_Node_Str"";
  final String WEBBUNDLE_LEVEL=""String_Node_Str"";
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    appLevel.add(APP_LEVEL + commonResourceBundleDescriptor.getName());
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  if (application != null) {
    Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
    Vector appClientLevel=new Vector();
    for (    ApplicationClientDescriptor acd : appClientDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      appClientLevel.add(APPCLIENTBUNDLE_LEVEL + acd.getName());
    }
    validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  }
  if (application != null) {
    Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
    Vector cdLevel=new Vector();
    for (    ConnectorDescriptor cd : connectorDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      cdLevel.add(APPCLIENT_LEVEL + cd.getName());
    }
    validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  }
  if (application != null) {
    Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
    Vector ebdLevel=new Vector();
    Vector edLevel=new Vector();
    for (    EjbBundleDescriptor ebd : ejbBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      ebdLevel.add(EJBBUNDLE_LEVEL + ebd.getName());
      Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
      for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
        EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
        mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
        if (isExistingMailSession(mailSessionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
        if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        edLevel.add(EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName());
      }
    }
    validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
    validNameSpaceDetails.put(EJB_KEYS,edLevel);
  }
  if (application != null) {
    Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
    Vector wbdLevel=new Vector();
    for (    WebBundleDescriptor wbd : webBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      wbdLevel.add(WEBBUNDLE_LEVEL + wbd.getName());
    }
    validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  }
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}","/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  final String APP_LEVEL=""String_Node_Str"";
  final String EJBBUNDLE_LEVEL=""String_Node_Str"";
  final String EJB_LEVEL=""String_Node_Str"";
  final String APPCLIENTBUNDLE_LEVEL=""String_Node_Str"";
  final String APPCLIENT_LEVEL=""String_Node_Str"";
  final String WEBBUNDLE_LEVEL=""String_Node_Str"";
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=application.getConnectorResourceDefinitionDescriptors();
    if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,APP_LEVEL + application.getName())) {
      return false;
    }
    appLevel.add(APP_LEVEL + commonResourceBundleDescriptor.getName());
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  if (application != null) {
    Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
    Vector appClientLevel=new Vector();
    for (    ApplicationClientDescriptor acd : appClientDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
        return false;
      }
      appClientLevel.add(APPCLIENTBUNDLE_LEVEL + acd.getName());
    }
    validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  }
  if (application != null) {
    Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
    Vector cdLevel=new Vector();
    for (    ConnectorDescriptor cd : connectorDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=cd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
        return false;
      }
      cdLevel.add(APPCLIENT_LEVEL + cd.getName());
    }
    validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  }
  if (application != null) {
    Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
    Vector ebdLevel=new Vector();
    Vector edLevel=new Vector();
    for (    EjbBundleDescriptor ebd : ejbBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=ebd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
        return false;
      }
      ebdLevel.add(EJBBUNDLE_LEVEL + ebd.getName());
      Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
      for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
        EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
        mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
        if (isExistingMailSession(mailSessionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
        if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        connectorResourceDefinitionDescriptors=ejbDescriptor.getConnectorResourceDefinitionDescriptors();
        if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
          return false;
        }
        edLevel.add(EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName());
      }
    }
    validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
    validNameSpaceDetails.put(EJB_KEYS,edLevel);
  }
  if (application != null) {
    Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
    Vector wbdLevel=new Vector();
    for (    WebBundleDescriptor wbd : webBundleDescs) {
      Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      Set<ConnectorResourceDefinitionDescriptor> connectorResourceDefinitionDescriptors=wbd.getConnectorResourceDefinitionDescriptors();
      if (isExistingConnectorResourceDefinitionDescriptor(connectorResourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
        return false;
      }
      wbdLevel.add(WEBBUNDLE_LEVEL + wbd.getName());
    }
    validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  }
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}"
29419,"/** 
 * Method to validate jndi name for comp namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForComp(Vector myVector,String jndiName){
  if (!compareVectorForModule(myVector,jndiName)) {
    return false;
  }
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.firstElement();
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(firstElement.lastIndexOf(""String_Node_Str"") + 1,firstElement.length());
    }
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(firstElement.lastIndexOf(""String_Node_Str"") + 1,firstElement.length());
    }
    for (int i=j; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(otherElements.lastIndexOf(""String_Node_Str"") + 1,otherElements.length());
      }
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(otherElements.lastIndexOf(""String_Node_Str"") + 1,otherElements.length());
      }
      if (!firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
        return false;
      }
    }
  }
  return true;
}","/** 
 * Method to validate jndi name for comp namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForComp(Vector myVector,String jndiName){
  if (!compareVectorForModule(myVector,jndiName)) {
    return false;
  }
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.firstElement();
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(firstElement.lastIndexOf(""String_Node_Str"") + 1,firstElement.length());
    }
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(firstElement.lastIndexOf(""String_Node_Str"") + 1,firstElement.length());
    }
    for (int i=j + 1; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(otherElements.lastIndexOf(""String_Node_Str"") + 1,otherElements.length());
      }
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(otherElements.lastIndexOf(""String_Node_Str"") + 1,otherElements.length());
      }
      if (firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
        return false;
      }
    }
  }
  return true;
}"
29420,"/** 
 * Compare descriptor at given scope is valid and unique.
 * @return
 */
private boolean compareDescriptors(){
  final String JNDI_COMP=""String_Node_Str"";
  final String JNDI_MODULE=""String_Node_Str"";
  final String JNDI_APP=""String_Node_Str"";
  Vector appVectorName=validNameSpaceDetails.get(APP_KEYS);
  Vector ebdVectorName=validNameSpaceDetails.get(EJBBUNDLE_KEYS);
  for (  String key : allResourceDescriptors.keySet()) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(key);
    Vector scopeVector=commonResourceValidator.getScope();
    String jndiName=commonResourceValidator.getJndiName();
    if (jndiName.contains(JNDI_COMP)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
        for (int j=0; j < ebdVectorName.size(); j++) {
          if (scope.equals(ebdVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (jndiName.contains(JNDI_MODULE)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (scopeVector.size() > 1) {
      if (jndiName.contains(JNDI_COMP)) {
        if (!compareVectorForComp(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_MODULE)) {
        if (!compareVectorForModule(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_APP)) {
        if (!compareVectorForApp(scopeVector,jndiName)) {
          return false;
        }
      }
 else {
        try {
          InitialContext ic=new InitialContext();
          Object lookup=ic.lookup(jndiName);
          if (lookup != null) {
            return false;
          }
        }
 catch (        NamingException e) {
          inValidJndiName=jndiName;
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
        }
      }
    }
  }
  return true;
}","/** 
 * Compare descriptor at given scope is valid and unique.
 * @return
 */
private boolean compareDescriptors(){
  Vector appVectorName=validNameSpaceDetails.get(APP_KEYS);
  Vector ebdVectorName=validNameSpaceDetails.get(EJBBUNDLE_KEYS);
  for (  String key : allResourceDescriptors.keySet()) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(key);
    Vector scopeVector=commonResourceValidator.getScope();
    String jndiName=commonResourceValidator.getJndiName();
    if (jndiName.contains(JNDI_COMP)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
        for (int j=0; j < ebdVectorName.size(); j++) {
          if (scope.equals(ebdVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (jndiName.contains(JNDI_MODULE)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (scopeVector.size() > 1) {
      if (jndiName.contains(JNDI_COMP)) {
        if (!compareVectorForComp(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_MODULE)) {
        if (!compareVectorForModule(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_APP)) {
        if (!compareVectorForApp(scopeVector,jndiName)) {
          return false;
        }
      }
 else {
        try {
          InitialContext ic=new InitialContext();
          Object lookup=ic.lookup(jndiName);
          if (lookup != null) {
            return false;
          }
        }
 catch (        NamingException e) {
          inValidJndiName=jndiName;
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
        }
      }
    }
  }
  return true;
}"
29421,"@Override void processArtifact(final Set<URI> artifactURIsProcessed,final Collection<FullAndPartURIs> downloadsForThisArtifact,final Collection<FullAndPartURIs> downloadsForReferencedArtifacts) throws IOException {
  final URI fileURI=physicalFile().toURI();
  final URI uriWithinEAR=canonicalURIWithinEAR();
  if (artifactURIsProcessed.contains(uriWithinEAR)) {
    return;
  }
  final URI uriWithinAnchor=earDirUserURI(dc()).resolve(uriWithinEAR);
  Artifacts.FullAndPartURIs fileDependency=new FullAndPartURIs(fileURI,uriWithinAnchor);
  downloadsForReferencedArtifacts.add(fileDependency);
  signedJARManager.addJAR(uriWithinAnchor,fileURI);
  recordArtifactAsProcessed(artifactURIsProcessed,downloadsForThisArtifact);
  Manifest jarManifest;
  try {
    final JarFile dependentJar=new JarFile(physicalFile());
    jarManifest=dependentJar.getManifest();
    dependentJar.close();
    if (jarManifest == null) {
      logger.log(Level.WARNING,""String_Node_Str"",fileURI.toASCIIString());
      return;
    }
  }
 catch (  IOException ex) {
    return;
  }
  final Attributes mainAttrs=jarManifest.getMainAttributes();
  if (mainAttrs == null) {
    logger.log(Level.WARNING,""String_Node_Str"",fileURI.toASCIIString());
    return;
  }
  final String jarClassPath=mainAttrs.getValue(Attributes.Name.CLASS_PATH);
  if (jarClassPath != null) {
    for (    String elt : jarClassPath.split(""String_Node_Str"")) {
      if (elt.trim().length() > 0) {
        final URI eltURI=URI.create(elt);
        final Artifact classPathArtifact=newArtifact(this,eltURI);
        if (classPathArtifact != null) {
          classPathArtifact.processArtifact(artifactURIsProcessed,downloadsForReferencedArtifacts,downloadsForReferencedArtifacts);
        }
      }
    }
  }
}","@Override void processArtifact(final Set<URI> artifactURIsProcessed,final Collection<FullAndPartURIs> downloadsForThisArtifact,final Collection<FullAndPartURIs> downloadsForReferencedArtifacts) throws IOException {
  final URI fileURI=physicalFile().toURI();
  final URI uriWithinEAR=canonicalURIWithinEAR();
  if (artifactURIsProcessed.contains(uriWithinEAR)) {
    return;
  }
  final URI uriWithinAnchor=earDirUserURI(dc()).resolve(uriWithinEAR);
  Artifacts.FullAndPartURIs fileDependency=new FullAndPartURIs(fileURI,uriWithinAnchor);
  downloadsForReferencedArtifacts.add(fileDependency);
  signedJARManager.addJAR(uriWithinAnchor,fileURI);
  recordArtifactAsProcessed(artifactURIsProcessed,downloadsForThisArtifact);
  Manifest jarManifest;
  try {
    final JarFile dependentJar=new JarFile(physicalFile());
    try {
      jarManifest=dependentJar.getManifest();
    }
  finally {
      dependentJar.close();
    }
    if (jarManifest == null) {
      logger.log(Level.WARNING,""String_Node_Str"",fileURI.toASCIIString());
      return;
    }
  }
 catch (  IOException ex) {
    return;
  }
  final Attributes mainAttrs=jarManifest.getMainAttributes();
  if (mainAttrs == null) {
    logger.log(Level.WARNING,""String_Node_Str"",fileURI.toASCIIString());
    return;
  }
  final String jarClassPath=mainAttrs.getValue(Attributes.Name.CLASS_PATH);
  if (jarClassPath != null) {
    for (    String elt : jarClassPath.split(""String_Node_Str"")) {
      if (elt.trim().length() > 0) {
        final URI eltURI=URI.create(elt);
        final Artifact classPathArtifact=newArtifact(this,eltURI);
        if (classPathArtifact != null) {
          classPathArtifact.processArtifact(artifactURIsProcessed,downloadsForReferencedArtifacts,downloadsForReferencedArtifacts);
        }
      }
    }
  }
}"
29422,"/** 
 * Set an attribute as read only.
 */
void setAttributeReadOnly(String name){
synchronized (attributes) {
    if (attributes.containsKey(name))     readOnlyAttributes.put(name,name);
  }
}","/** 
 * Set an attribute as read only.
 */
void setAttributeReadOnly(String name){
synchronized (attributesLock) {
    if (attributes.containsKey(name))     readOnlyAttributes.put(name,name);
  }
}"
29423,"/** 
 * Clear all application-created attributes.
 */
void clearAttributes(){
  ArrayList<String> list=new ArrayList<String>();
synchronized (attributes) {
    Iterator<String> iter=attributes.keySet().iterator();
    while (iter.hasNext()) {
      list.add(iter.next());
    }
  }
  Iterator<String> keys=list.iterator();
  while (keys.hasNext()) {
    String key=keys.next();
    removeAttribute(key);
  }
}","/** 
 * Clear all application-created attributes.
 */
void clearAttributes(){
  ArrayList<String> list=new ArrayList<String>();
synchronized (attributesLock) {
    Iterator<String> iter=attributes.keySet().iterator();
    while (iter.hasNext()) {
      list.add(iter.next());
    }
  }
  Iterator<String> keys=list.iterator();
  while (keys.hasNext()) {
    String key=keys.next();
    removeAttribute(key);
  }
}"
29424,"/** 
 * Bind the specified value with the specified context attribute name, replacing any existing value for that name.
 * @param name Attribute name to be bound
 * @param value New attribute value to be bound
 */
@Override public void setAttribute(String name,Object value){
  if (name == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  if (value == null) {
    removeAttribute(name);
    return;
  }
  Object oldValue=null;
  boolean replaced=false;
synchronized (attributes) {
    if (readOnlyAttributes.containsKey(name))     return;
    oldValue=attributes.get(name);
    if (oldValue != null)     replaced=true;
    attributes.put(name,value);
  }
  if (name.equals(Globals.CLASS_PATH_ATTR) || name.equals(Globals.JSP_TLD_URI_TO_LOCATION_MAP)) {
    setAttributeReadOnly(name);
  }
  List<EventListener> listeners=context.getApplicationEventListeners();
  if (listeners.isEmpty()) {
    return;
  }
  ServletContextAttributeEvent event=null;
  if (replaced) {
    event=new ServletContextAttributeEvent(context.getServletContext(),name,oldValue);
  }
 else {
    event=new ServletContextAttributeEvent(context.getServletContext(),name,value);
  }
  Iterator<EventListener> iter=listeners.iterator();
  while (iter.hasNext()) {
    EventListener eventListener=iter.next();
    if (!(eventListener instanceof ServletContextAttributeListener)) {
      continue;
    }
    ServletContextAttributeListener listener=(ServletContextAttributeListener)eventListener;
    try {
      if (replaced) {
        context.fireContainerEvent(ContainerEvent.BEFORE_CONTEXT_ATTRIBUTE_REPLACED,listener);
        listener.attributeReplaced(event);
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REPLACED,listener);
      }
 else {
        context.fireContainerEvent(ContainerEvent.BEFORE_CONTEXT_ATTRIBUTE_ADDED,listener);
        listener.attributeAdded(event);
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_ADDED,listener);
      }
    }
 catch (    Throwable t) {
      if (replaced) {
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REPLACED,listener);
      }
 else {
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_ADDED,listener);
      }
      log(sm.getString(""String_Node_Str""),t);
    }
  }
}","/** 
 * Bind the specified value with the specified context attribute name, replacing any existing value for that name.
 * @param name Attribute name to be bound
 * @param value New attribute value to be bound
 */
@Override public void setAttribute(String name,Object value){
  if (name == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  if (value == null) {
    removeAttribute(name);
    return;
  }
  Object oldValue=null;
  boolean replaced=false;
synchronized (attributesLock) {
    if (readOnlyAttributes.containsKey(name))     return;
    oldValue=attributes.get(name);
    if (oldValue != null)     replaced=true;
    attributes.put(name,value);
  }
  if (name.equals(Globals.CLASS_PATH_ATTR) || name.equals(Globals.JSP_TLD_URI_TO_LOCATION_MAP)) {
    setAttributeReadOnly(name);
  }
  List<EventListener> listeners=context.getApplicationEventListeners();
  if (listeners.isEmpty()) {
    return;
  }
  ServletContextAttributeEvent event=null;
  if (replaced) {
    event=new ServletContextAttributeEvent(context.getServletContext(),name,oldValue);
  }
 else {
    event=new ServletContextAttributeEvent(context.getServletContext(),name,value);
  }
  Iterator<EventListener> iter=listeners.iterator();
  while (iter.hasNext()) {
    EventListener eventListener=iter.next();
    if (!(eventListener instanceof ServletContextAttributeListener)) {
      continue;
    }
    ServletContextAttributeListener listener=(ServletContextAttributeListener)eventListener;
    try {
      if (replaced) {
        context.fireContainerEvent(ContainerEvent.BEFORE_CONTEXT_ATTRIBUTE_REPLACED,listener);
        listener.attributeReplaced(event);
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REPLACED,listener);
      }
 else {
        context.fireContainerEvent(ContainerEvent.BEFORE_CONTEXT_ATTRIBUTE_ADDED,listener);
        listener.attributeAdded(event);
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_ADDED,listener);
      }
    }
 catch (    Throwable t) {
      if (replaced) {
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REPLACED,listener);
      }
 else {
        context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_ADDED,listener);
      }
      log(sm.getString(""String_Node_Str""),t);
    }
  }
}"
29425,"/** 
 * Remove the context attribute with the specified name, if any.
 * @param name Name of the context attribute to be removed
 */
@Override public void removeAttribute(String name){
  Object value=null;
  boolean found=false;
synchronized (attributes) {
    if (readOnlyAttributes.containsKey(name))     return;
    found=attributes.containsKey(name);
    if (found) {
      value=attributes.get(name);
      attributes.remove(name);
    }
 else {
      return;
    }
  }
  List<EventListener> listeners=context.getApplicationEventListeners();
  if (listeners.isEmpty()) {
    return;
  }
  ServletContextAttributeEvent event=new ServletContextAttributeEvent(context.getServletContext(),name,value);
  Iterator<EventListener> iter=listeners.iterator();
  while (iter.hasNext()) {
    EventListener eventListener=iter.next();
    if (!(eventListener instanceof ServletContextAttributeListener)) {
      continue;
    }
    ServletContextAttributeListener listener=(ServletContextAttributeListener)eventListener;
    try {
      context.fireContainerEvent(ContainerEvent.BEFORE_CONTEXT_ATTRIBUTE_REMOVED,listener);
      listener.attributeRemoved(event);
      context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REMOVED,listener);
    }
 catch (    Throwable t) {
      context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REMOVED,listener);
      log(sm.getString(""String_Node_Str""),t);
    }
  }
}","/** 
 * Remove the context attribute with the specified name, if any.
 * @param name Name of the context attribute to be removed
 */
@Override public void removeAttribute(String name){
  Object value=null;
  boolean found=false;
synchronized (attributesLock) {
    if (readOnlyAttributes.containsKey(name))     return;
    value=attributes.remove(name);
    if (value == null)     return;
  }
  List<EventListener> listeners=context.getApplicationEventListeners();
  if (listeners.isEmpty()) {
    return;
  }
  ServletContextAttributeEvent event=new ServletContextAttributeEvent(context.getServletContext(),name,value);
  Iterator<EventListener> iter=listeners.iterator();
  while (iter.hasNext()) {
    EventListener eventListener=iter.next();
    if (!(eventListener instanceof ServletContextAttributeListener)) {
      continue;
    }
    ServletContextAttributeListener listener=(ServletContextAttributeListener)eventListener;
    try {
      context.fireContainerEvent(ContainerEvent.BEFORE_CONTEXT_ATTRIBUTE_REMOVED,listener);
      listener.attributeRemoved(event);
      context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REMOVED,listener);
    }
 catch (    Throwable t) {
      context.fireContainerEvent(ContainerEvent.AFTER_CONTEXT_ATTRIBUTE_REMOVED,listener);
      log(sm.getString(""String_Node_Str""),t);
    }
  }
}"
29426,"public static void testServiceTags() throws RegistrationException {
  Properties data=getServiceTagProps();
  ServiceTag st=new ServiceTag(data);
  RepositoryManager rm=new RepositoryManager(getRepositoryFile());
  System.out.println(""String_Node_Str"");
  rm.write(System.out);
  try {
    rm.add(st);
    System.out.println(""String_Node_Str"");
    List<ServiceTag> list=rm.getServiceTags();
    System.out.println(""String_Node_Str"");
    for (    ServiceTag x : list) {
      System.out.println(x.toString());
    }
    try {
      rm.add(st);
    }
 catch (    RegistrationException e) {
      System.err.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    rm.write(System.out);
    System.out.println(""String_Node_Str"" + st.getSvcTag().getInstanceURN());
    rm.remove(st);
    System.out.println(""String_Node_Str"");
    rm.write(System.out);
    try {
      rm.remove(st);
      System.out.println(""String_Node_Str"");
    }
 catch (    RegistrationException e) {
      System.err.println(""String_Node_Str"");
    }
    rm.add(st);
    System.out.println(""String_Node_Str"");
    rm.setRegistrationStatus(st,ServiceTag.RegistrationStatus.NOT_REGISTERED);
    rm.write(System.out);
    System.out.println(""String_Node_Str"");
    rm.setRegistrationStatus(st,ServiceTag.RegistrationStatus.NOT_REGISTERED);
    rm.write(System.out);
    System.out.println(""String_Node_Str"");
    rm.setStatus(st,ServiceTag.Status.TRANSFERRED);
    rm.write(System.out);
    System.out.println(""String_Node_Str"");
    rm.setStatus(st,ServiceTag.Status.NOT_TRANSFERRED);
    rm.write(System.out);
    rm=new RepositoryManager(getRepositoryFile());
    System.out.println(""String_Node_Str"");
    rm.setRegistrationReminder(RegistrationService.RegistrationReminder.REMIND_LATER);
    rm.write(System.out);
    System.out.println(rm.getRegistrationStatus());
    testTransferManager(getRepositoryFile());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public static void testServiceTags() throws RegistrationException {
  Properties data=getServiceTagProps();
  ServiceTag st=new ServiceTag(data);
  RepositoryManager rm=new RepositoryManager(getRepositoryFile());
  System.out.println(""String_Node_Str"");
  rm.write(System.out);
  try {
    rm.add(st);
    System.out.println(""String_Node_Str"");
    List<ServiceTag> list=rm.getServiceTags();
    System.out.println(""String_Node_Str"");
    for (    ServiceTag x : list) {
      System.out.println(x.toString());
    }
    try {
      rm.add(st);
    }
 catch (    RegistrationException e) {
      System.err.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    rm.write(System.out);
    System.out.println(""String_Node_Str"" + st.getSvcTag().getInstanceURN());
    rm.remove(st);
    System.out.println(""String_Node_Str"");
    rm.write(System.out);
    try {
      rm.remove(st);
      System.out.println(""String_Node_Str"");
    }
 catch (    RegistrationException e) {
      System.err.println(""String_Node_Str"");
    }
    rm.add(st);
    System.out.println(""String_Node_Str"");
    rm.setRegistrationStatus(st,ServiceTag.RegistrationStatus.NOT_REGISTERED);
    rm.write(System.out);
    System.out.println(""String_Node_Str"");
    rm.setRegistrationStatus(st,ServiceTag.RegistrationStatus.NOT_REGISTERED);
    rm.write(System.out);
    System.out.println(""String_Node_Str"");
    rm.setStatus(st,ServiceTag.Status.TRANSFERRED);
    rm.write(System.out);
    System.out.println(""String_Node_Str"");
    rm.setStatus(st,ServiceTag.Status.NOT_TRANSFERRED);
    rm.write(System.out);
    rm=new RepositoryManager(getRepositoryFile());
    System.out.println(""String_Node_Str"");
    rm.setRegistrationReminder(RegistrationService.RegistrationReminder.REMIND_LATER);
    rm.write(System.out);
    System.out.println(rm.getRegistrationStatus());
    testTransferManager(getRepositoryFile());
    testRMRegistration();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}"
29427,"/** 
 * <p>Execute the passed command on targeted remote instances. The list of remote instances is usually retrieved from the passed parameters (with a ""target"" parameter for instance) or from the configuration. <p>Each remote execution must return a different ActionReport so the user or framework can get feedback on the success or failure or such executions.
 * @param commandName the command to execute
 * @param context the original command context
 * @param parameters the parameters passed to the original local command
 * @return an array of @{link org.glassfish.api.ActionReport} for each remoteexecution status. 
 */
@Override public ActionReport.ExitCode execute(String commandName,AdminCommand command,AdminCommandContext context,ParameterMap parameters){
  CommandModel model;
  try {
    CommandModelProvider c=(CommandModelProvider)command;
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  org.glassfish.api.admin.ExecuteOn clAnnotation=model.getClusteringAttributes();
  List<RuntimeType> runtimeTypes=new ArrayList<RuntimeType>();
@ExecuteOn final class DefaultExecuteOn {
  }
  if (clAnnotation == null) {
    clAnnotation=DefaultExecuteOn.class.getAnnotation(ExecuteOn.class);
  }
  if (clAnnotation.value().length == 0) {
    runtimeTypes.add(RuntimeType.DAS);
    runtimeTypes.add(RuntimeType.INSTANCE);
  }
 else {
    runtimeTypes.addAll(Arrays.asList(clAnnotation.value()));
  }
  String targetName=parameters.getOne(""String_Node_Str"");
  if (targetName == null)   targetName=""String_Node_Str"";
  if ((runtimeTypes.contains(RuntimeType.ALL)) || ((!CommandTarget.DAS.isValid(habitat,targetName)) && (!CommandTarget.DOMAIN.isValid(habitat,targetName)))) {
    if (targetService.isCluster(targetName) && !runtimeTypes.contains(RuntimeType.ALL)) {
      String dynRecfg=targetService.getClusterConfig(targetName).getDynamicReconfigurationEnabled();
      if (Boolean.FALSE.equals(Boolean.valueOf(dynRecfg))) {
        ActionReport aReport=context.getActionReport().addSubActionsReport();
        aReport.setActionExitCode(ActionReport.ExitCode.WARNING);
        aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",targetName));
        for (        Server s : targetService.getInstances(targetName)) {
          instanceState.setState(s.getName(),InstanceState.StateType.RESTART_REQUIRED,false);
          instanceState.addFailedCommandToInstance(s.getName(),commandName,parameters);
        }
        return ActionReport.ExitCode.WARNING;
      }
    }
    List<Server> instancesForReplication=new ArrayList<Server>();
    if (runtimeTypes.contains(RuntimeType.ALL)) {
      List<Server> allInstances=targetService.getAllInstances();
      Set<String> clusterNoReplication=new HashSet<String>();
      for (      Server s : allInstances) {
        String dynRecfg=s.getConfig().getDynamicReconfigurationEnabled();
        if (Boolean.TRUE.equals(Boolean.valueOf(dynRecfg))) {
          instancesForReplication.add(s);
        }
 else {
          clusterNoReplication.add(s.getCluster().getName());
          instanceState.setState(s.getName(),InstanceState.StateType.RESTART_REQUIRED,false);
          instanceState.addFailedCommandToInstance(s.getName(),commandName,parameters);
        }
      }
      if (!clusterNoReplication.isEmpty()) {
        ActionReport aReport=context.getActionReport().addSubActionsReport();
        aReport.setActionExitCode(ActionReport.ExitCode.WARNING);
        aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",clusterNoReplication));
      }
    }
 else {
      instancesForReplication=targetService.getInstances(targetName);
    }
    if (instancesForReplication.isEmpty()) {
      ActionReport aReport=context.getActionReport().addSubActionsReport();
      aReport.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
      return ActionReport.ExitCode.SUCCESS;
    }
    return (ClusterOperationUtil.replicateCommand(commandName,clAnnotation.ifFailure(),clAnnotation.ifOffline(),clAnnotation.ifNeverStarted(),instancesForReplication,context,parameters,habitat));
  }
  return ActionReport.ExitCode.SUCCESS;
}","/** 
 * <p>Execute the passed command on targeted remote instances. The list of remote instances is usually retrieved from the passed parameters (with a ""target"" parameter for instance) or from the configuration. <p>Each remote execution must return a different ActionReport so the user or framework can get feedback on the success or failure or such executions.
 * @param commandName the command to execute
 * @param context the original command context
 * @param parameters the parameters passed to the original local command
 * @return an array of @{link org.glassfish.api.ActionReport} for each remoteexecution status. 
 */
@Override public ActionReport.ExitCode execute(String commandName,AdminCommand command,AdminCommandContext context,ParameterMap parameters){
  CommandModel model=command instanceof CommandModelProvider ? ((CommandModelProvider)command).getModel() : new CommandModelImpl(command.getClass());
  org.glassfish.api.admin.ExecuteOn clAnnotation=model.getClusteringAttributes();
  List<RuntimeType> runtimeTypes=new ArrayList<RuntimeType>();
@ExecuteOn final class DefaultExecuteOn {
  }
  if (clAnnotation == null) {
    clAnnotation=DefaultExecuteOn.class.getAnnotation(ExecuteOn.class);
  }
  if (clAnnotation.value().length == 0) {
    runtimeTypes.add(RuntimeType.DAS);
    runtimeTypes.add(RuntimeType.INSTANCE);
  }
 else {
    runtimeTypes.addAll(Arrays.asList(clAnnotation.value()));
  }
  String targetName=parameters.getOne(""String_Node_Str"");
  if (targetName == null)   targetName=""String_Node_Str"";
  if ((runtimeTypes.contains(RuntimeType.ALL)) || ((!CommandTarget.DAS.isValid(habitat,targetName)) && (!CommandTarget.DOMAIN.isValid(habitat,targetName)))) {
    if (targetService.isCluster(targetName) && !runtimeTypes.contains(RuntimeType.ALL)) {
      String dynRecfg=targetService.getClusterConfig(targetName).getDynamicReconfigurationEnabled();
      if (Boolean.FALSE.equals(Boolean.valueOf(dynRecfg))) {
        ActionReport aReport=context.getActionReport().addSubActionsReport();
        aReport.setActionExitCode(ActionReport.ExitCode.WARNING);
        aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",targetName));
        for (        Server s : targetService.getInstances(targetName)) {
          instanceState.setState(s.getName(),InstanceState.StateType.RESTART_REQUIRED,false);
          instanceState.addFailedCommandToInstance(s.getName(),commandName,parameters);
        }
        return ActionReport.ExitCode.WARNING;
      }
    }
    List<Server> instancesForReplication=new ArrayList<Server>();
    if (runtimeTypes.contains(RuntimeType.ALL)) {
      List<Server> allInstances=targetService.getAllInstances();
      Set<String> clusterNoReplication=new HashSet<String>();
      for (      Server s : allInstances) {
        String dynRecfg=s.getConfig().getDynamicReconfigurationEnabled();
        if (Boolean.TRUE.equals(Boolean.valueOf(dynRecfg))) {
          instancesForReplication.add(s);
        }
 else {
          clusterNoReplication.add(s.getCluster().getName());
          instanceState.setState(s.getName(),InstanceState.StateType.RESTART_REQUIRED,false);
          instanceState.addFailedCommandToInstance(s.getName(),commandName,parameters);
        }
      }
      if (!clusterNoReplication.isEmpty()) {
        ActionReport aReport=context.getActionReport().addSubActionsReport();
        aReport.setActionExitCode(ActionReport.ExitCode.WARNING);
        aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",clusterNoReplication));
      }
    }
 else {
      instancesForReplication=targetService.getInstances(targetName);
    }
    if (instancesForReplication.isEmpty()) {
      ActionReport aReport=context.getActionReport().addSubActionsReport();
      aReport.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
      return ActionReport.ExitCode.SUCCESS;
    }
    return (ClusterOperationUtil.replicateCommand(commandName,clAnnotation.ifFailure(),clAnnotation.ifOffline(),clAnnotation.ifNeverStarted(),instancesForReplication,context,parameters,habitat));
  }
  return ActionReport.ExitCode.SUCCESS;
}"
29428,"/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException           if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException           if there ino <code>PasswordCredential</code> objectsatisfying this request
 * @throws ResourceAllocationException if there is an error in allocating thephysical connection
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  javax.sql.ConnectionPoolDataSource dataSource=getDataSource();
  javax.sql.PooledConnection cpConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  try {
    if (isEqual(pc,getUser(),getPassword())) {
      cpConn=dataSource.getPooledConnection();
    }
 else {
      cpConn=dataSource.getPooledConnection(pc.getUserName(),new String(pc.getPassword()));
    }
  }
 catch (  java.sql.SQLException sqle) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",sqle);
    }
    StringManager sm=StringManager.getManager(DataSourceObjectBuilder.class);
    String msg=sm.getString(""String_Node_Str"",sqle.getMessage());
    ResourceAllocationException rae=new ResourceAllocationException(msg,sqle);
    throw rae;
  }
  try {
    mc=constructManagedConnection(cpConn,null,pc,this);
    mc.initializeConnectionType(ManagedConnection.ISPOOLEDCONNECTION);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (cpConn != null) {
        try {
          cpConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + cpConn);
        }
      }
    }
  }
  return mc;
}","/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException           if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException           if there ino <code>PasswordCredential</code> objectsatisfying this request
 * @throws ResourceAllocationException if there is an error in allocating thephysical connection
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  javax.sql.ConnectionPoolDataSource dataSource=getDataSource();
  javax.sql.PooledConnection cpConn=null;
  ManagedConnectionImpl mc=null;
  try {
    if (isEqual(pc,getUser(),getPassword())) {
      cpConn=dataSource.getPooledConnection();
    }
 else {
      cpConn=dataSource.getPooledConnection(pc.getUserName(),new String(pc.getPassword()));
    }
  }
 catch (  java.sql.SQLException sqle) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",sqle);
    }
    StringManager sm=StringManager.getManager(DataSourceObjectBuilder.class);
    String msg=sm.getString(""String_Node_Str"",sqle.getMessage());
    ResourceAllocationException rae=new ResourceAllocationException(msg,sqle);
    throw rae;
  }
  try {
    mc=constructManagedConnection(cpConn,null,pc,this);
    mc.initializeConnectionType(ManagedConnectionImpl.ISPOOLEDCONNECTION);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (cpConn != null) {
        try {
          cpConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + cpConn);
        }
      }
    }
  }
  return mc;
}"
29429,"/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException if there ino <code>PasswordCredential</code> objectsatisfying this request
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  if (dsObjBuilder == null) {
    dsObjBuilder=new DataSourceObjectBuilder(spec);
  }
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  try {
    Class.forName(spec.getDetail(DataSourceSpec.CLASSNAME));
  }
 catch (  ClassNotFoundException cnfe) {
    _logger.log(Level.SEVERE,""String_Node_Str"",cnfe);
    throw new ResourceException(""String_Node_Str"" + spec.getDetail(DataSourceSpec.CLASSNAME));
  }
  java.sql.Connection dsConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  Properties driverProps=new Properties();
  Hashtable properties=dsObjBuilder.parseDriverProperties(spec,false);
  Set<Map.Entry<String,Vector>> entries=(Set<Map.Entry<String,Vector>>)properties.entrySet();
  for (  Map.Entry<String,Vector> entry : entries) {
    String value=""String_Node_Str"";
    String key=(String)entry.getKey();
    Vector values=(Vector)entry.getValue();
    if (!values.isEmpty() && values.size() == 1) {
      value=(String)values.firstElement();
    }
 else     if (values.size() > 1) {
      logFine(""String_Node_Str"" + key);
    }
    String prop=getParsedKey(key);
    driverProps.put(prop,value);
    if (prop.equalsIgnoreCase(""String_Node_Str"")) {
      if (spec.getDetail(DataSourceSpec.URL) == null) {
        setConnectionURL(value);
      }
    }
  }
  try {
    if (cxRequestInfo != null) {
      driverProps.setProperty(""String_Node_Str"",pc.getUserName());
      driverProps.setProperty(""String_Node_Str"",new String(pc.getPassword()));
    }
 else {
      String user=spec.getDetail(DataSourceSpec.USERNAME);
      String password=spec.getDetail(DataSourceSpec.PASSWORD);
      if (user != null) {
        driverProps.setProperty(""String_Node_Str"",user);
      }
      if (password != null) {
        driverProps.setProperty(""String_Node_Str"",password);
      }
    }
    dsConn=DriverManager.getConnection(spec.getDetail(DataSourceSpec.URL),driverProps);
  }
 catch (  java.sql.SQLException sqle) {
    _logger.log(Level.SEVERE,""String_Node_Str"",sqle);
    throw new javax.resource.spi.ResourceAllocationException(""String_Node_Str"" + sqle.getMessage());
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}","/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException if there ino <code>PasswordCredential</code> objectsatisfying this request
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  if (dsObjBuilder == null) {
    dsObjBuilder=new DataSourceObjectBuilder(spec);
  }
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  try {
    Class.forName(spec.getDetail(DataSourceSpec.CLASSNAME));
  }
 catch (  ClassNotFoundException cnfe) {
    _logger.log(Level.SEVERE,""String_Node_Str"",cnfe);
    throw new ResourceException(""String_Node_Str"" + spec.getDetail(DataSourceSpec.CLASSNAME));
  }
  java.sql.Connection dsConn=null;
  ManagedConnectionImpl mc=null;
  Properties driverProps=new Properties();
  Hashtable properties=dsObjBuilder.parseDriverProperties(spec,false);
  Set<Map.Entry<String,Vector>> entries=(Set<Map.Entry<String,Vector>>)properties.entrySet();
  for (  Map.Entry<String,Vector> entry : entries) {
    String value=""String_Node_Str"";
    String key=(String)entry.getKey();
    Vector values=(Vector)entry.getValue();
    if (!values.isEmpty() && values.size() == 1) {
      value=(String)values.firstElement();
    }
 else     if (values.size() > 1) {
      logFine(""String_Node_Str"" + key);
    }
    String prop=getParsedKey(key);
    driverProps.put(prop,value);
    if (prop.equalsIgnoreCase(""String_Node_Str"")) {
      if (spec.getDetail(DataSourceSpec.URL) == null) {
        setConnectionURL(value);
      }
    }
  }
  try {
    if (cxRequestInfo != null) {
      driverProps.setProperty(""String_Node_Str"",pc.getUserName());
      driverProps.setProperty(""String_Node_Str"",new String(pc.getPassword()));
    }
 else {
      String user=spec.getDetail(DataSourceSpec.USERNAME);
      String password=spec.getDetail(DataSourceSpec.PASSWORD);
      if (user != null) {
        driverProps.setProperty(""String_Node_Str"",user);
      }
      if (password != null) {
        driverProps.setProperty(""String_Node_Str"",password);
      }
    }
    dsConn=DriverManager.getConnection(spec.getDetail(DataSourceSpec.URL),driverProps);
  }
 catch (  java.sql.SQLException sqle) {
    _logger.log(Level.SEVERE,""String_Node_Str"",sqle);
    throw new javax.resource.spi.ResourceAllocationException(""String_Node_Str"" + sqle.getMessage());
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}"
29430,"/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException           if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException           if there ino <code>PasswordCredential</code> objectsatisfying this request
 * @throws ResourceAllocationException if there is an error in allocating thephysical connection
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  javax.sql.DataSource dataSource=getDataSource();
  java.sql.Connection dsConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  try {
    if (isEqual(pc,getUser(),getPassword())) {
      dsConn=dataSource.getConnection();
    }
 else {
      dsConn=dataSource.getConnection(pc.getUserName(),new String(pc.getPassword()));
    }
  }
 catch (  java.sql.SQLException sqle) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",sqle.getMessage());
    }
    StringManager localStrings=StringManager.getManager(DataSourceObjectBuilder.class);
    String msg=localStrings.getString(""String_Node_Str"",sqle.getMessage());
    ResourceAllocationException rae=new ResourceAllocationException(msg);
    rae.initCause(sqle);
    throw rae;
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + ""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}","/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException           if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException           if there ino <code>PasswordCredential</code> objectsatisfying this request
 * @throws ResourceAllocationException if there is an error in allocating thephysical connection
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  javax.sql.DataSource dataSource=getDataSource();
  java.sql.Connection dsConn=null;
  ManagedConnectionImpl mc=null;
  try {
    if (isEqual(pc,getUser(),getPassword())) {
      dsConn=dataSource.getConnection();
    }
 else {
      dsConn=dataSource.getConnection(pc.getUserName(),new String(pc.getPassword()));
    }
  }
 catch (  java.sql.SQLException sqle) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",sqle.getMessage());
    }
    StringManager localStrings=StringManager.getManager(DataSourceObjectBuilder.class);
    String msg=localStrings.getString(""String_Node_Str"",sqle.getMessage());
    ResourceAllocationException rae=new ResourceAllocationException(msg);
    rae.initCause(sqle);
    throw rae;
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + ""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}"
29431,"/** 
 * To get an instance of ConnectionHolder.<br> Will return a ConnectionHolder with or without wrapper<br>
 * @param conObject         Connection
 * @param mcObject          ManagedConnection
 * @param criObject         Connection Request Info
 * @param statementWrapping Whether to wrap statement objects or not.
 * @return ConnectionHolder
 */
public abstract ConnectionHolder getConnection(Connection conObject,ManagedConnection mcObject,javax.resource.spi.ConnectionRequestInfo criObject,boolean statementWrapping,SQLTraceDelegator sqlTraceDelegator);","/** 
 * To get an instance of ConnectionHolder.<br> Will return a ConnectionHolder with or without wrapper<br>
 * @param conObject         Connection
 * @param mcObject          ManagedConnection
 * @param criObject         Connection Request Info
 * @param statementWrapping Whether to wrap statement objects or not.
 * @return ConnectionHolder
 */
public abstract ConnectionHolder getConnection(Connection conObject,ManagedConnectionImpl mcObject,javax.resource.spi.ConnectionRequestInfo criObject,boolean statementWrapping,SQLTraceDelegator sqlTraceDelegator);"
29432,"/** 
 * Returns a DataSource instance.
 * @param mcfObject Managed Connection Factory
 * @param cmObject  Connection Manager
 * @return DataSource
 */
public abstract javax.sql.DataSource getDataSourceInstance(ManagedConnectionFactory mcfObject,javax.resource.spi.ConnectionManager cmObject);","/** 
 * Returns a DataSource instance.
 * @param mcfObject Managed Connection Factory
 * @param cmObject  Connection Manager
 * @return DataSource
 */
public abstract javax.sql.DataSource getDataSourceInstance(ManagedConnectionFactoryImpl mcfObject,javax.resource.spi.ConnectionManager cmObject);"
29433,"/** 
 * Constructor for <code>LocalTransactionImpl</code>.
 * @param mc <code>ManagedConnection</code> that returnsthis <code>LocalTransactionImpl</code> object as a result of <code>getLocalTransaction</code>
 */
public LocalTransactionImpl(ManagedConnection mc){
  this.mc=mc;
}","/** 
 * Constructor for <code>LocalTransactionImpl</code>.
 * @param mc <code>ManagedConnection</code> that returnsthis <code>LocalTransactionImpl</code> object as a result of <code>getLocalTransaction</code>
 */
public LocalTransactionImpl(ManagedConnectionImpl mc){
  this.mc=mc;
}"
29434,"public final void unregisterMBean(final ObjectName objectName) throws InstanceNotFoundException, MBeanRegistrationException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).unregisterMBean(objectName);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr))       getDelegateMBeanServer().unregisterMBean(objectName);
 else       getInstanceConnection(svr).unregisterMBean(objectName);
    }
  }
 catch (  IOException io) {
    throw new MBeanRegistrationException(io);
  }
}","public final void unregisterMBean(final ObjectName objectName) throws InstanceNotFoundException, MBeanRegistrationException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).unregisterMBean(objectName);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr))       getDelegateMBeanServer().unregisterMBean(objectName);
 else       getInstanceConnection(svr).unregisterMBean(objectName);
    }
  }
 catch (  IOException io) {
    throw new MBeanRegistrationException(io);
  }
}"
29435,"public Object invoke(final ObjectName objectName,final String operationName,final Object[] params,final String[] signature) throws ReflectionException, InstanceNotFoundException, MBeanException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  Object returnValue=null;
  try {
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr)) {
        returnValue=getDelegateMBeanServer().invoke(objectName,operationName,params,signature);
      }
 else {
        returnValue=getInstanceConnection(svr).invoke(objectName,operationName,params,signature);
      }
    }
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
  return returnValue;
}","public Object invoke(final ObjectName objectName,final String operationName,final Object[] params,final String[] signature) throws ReflectionException, InstanceNotFoundException, MBeanException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  Object returnValue=null;
  try {
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr)) {
        returnValue=getDelegateMBeanServer().invoke(objectName,operationName,params,signature);
      }
 else {
        returnValue=getInstanceConnection(svr).invoke(objectName,operationName,params,signature);
      }
    }
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
  return returnValue;
}"
29436,"public AttributeList setAttributes(final ObjectName objectName,final AttributeList attributeList) throws InstanceNotFoundException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  AttributeList ret=null;
  try {
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).setAttributes(objectName,attributeList);
    for (    String svr : result.getInstances()) {
      if ((result.getInstances().get(0).equals(""String_Node_Str"")))       ret=getDelegateMBeanServer().setAttributes(objectName,attributeList);
 else       ret=getInstanceConnection(svr).setAttributes(objectName,attributeList);
    }
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
  return ret;
}","public AttributeList setAttributes(final ObjectName objectName,final AttributeList attributeList) throws InstanceNotFoundException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  AttributeList ret=null;
  try {
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).setAttributes(objectName,attributeList);
    for (    String svr : result.getInstances()) {
      if ((result.getInstances().get(0).equals(""String_Node_Str"")))       ret=getDelegateMBeanServer().setAttributes(objectName,attributeList);
 else       ret=getInstanceConnection(svr).setAttributes(objectName,attributeList);
    }
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
  return ret;
}"
29437,"private ReplicationInfo getTargets(final ObjectName objectName) throws InstanceNotFoundException {
  ReplicationInfo result=new ReplicationInfo();
  List<String> instances=result.getInstances();
  if (objectName == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  String oName=objectName.toString();
  if (MbeanService.getInstance() == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null && (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str""))) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (isConfig(oName)) {
    String configName=getName(oName);
    if (configName != null && configName.indexOf(""String_Node_Str"") > 0) {
      String targetName=configName.substring(0,configName.indexOf(""String_Node_Str""));
      if ((!""String_Node_Str"".equals(targetName)) && (!""String_Node_Str"".equals(targetName))) {
        result.addAllInstances(MbeanService.getInstance().getInstances(configName));
      }
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isCluster(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addAllInstances(MbeanService.getInstance().getInstances(targetName));
    }
  }
  if (isServer(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addInstance(targetName);
      if (!(""String_Node_Str"".equals(targetName)))       result.setTargetIsAnInstance(true);
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isJSR77(oName,objectName)) {
    if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
 else     if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(""String_Node_Str"");
        result.addInstance(targetInstance);
      }
    }
 else {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(targetInstance);
      }
    }
  }
  if (isMonitoring(oName)) {
    String targetName=getName(oName);
    result.addInstance(targetName);
    if (!(""String_Node_Str"".equals(targetName)))     result.setTargetIsAnInstance(true);
  }
  if (""String_Node_Str"".equals(oName) || ""String_Node_Str"".equals(oName)) {
    result.addInstance(""String_Node_Str"");
    result.addAllInstances(MbeanService.getInstance().getAllInstances());
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null) {
    if (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (oName.startsWith(""String_Node_Str"") || oName.startsWith(""String_Node_Str"")) {
    result.addInstance(""String_Node_Str"");
  }
  if ((MbeanService.getInstance().isDas())) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  return result;
}","private DynamicInterceptor.ReplicationInfo getTargets(final ObjectName objectName) throws InstanceNotFoundException {
  DynamicInterceptor.ReplicationInfo result=new DynamicInterceptor.ReplicationInfo();
  if (objectName == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  String oName=objectName.toString();
  if (MbeanService.getInstance() == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null && (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str""))) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (isConfig(oName)) {
    String configName=getName(oName);
    if (configName != null && configName.indexOf(""String_Node_Str"") > 0) {
      String targetName=configName.substring(0,configName.indexOf(""String_Node_Str""));
      if ((!""String_Node_Str"".equals(targetName)) && (!""String_Node_Str"".equals(targetName))) {
        result.addAllInstances(MbeanService.getInstance().getInstances(configName));
      }
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isCluster(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addAllInstances(MbeanService.getInstance().getInstances(targetName));
    }
  }
  if (isServer(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addInstance(targetName);
      if (!(""String_Node_Str"".equals(targetName)))       result.setTargetIsAnInstance(true);
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isJSR77(oName,objectName)) {
    if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
 else     if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(""String_Node_Str"");
        result.addInstance(targetInstance);
      }
    }
 else {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(targetInstance);
      }
    }
  }
  if (isMonitoring(oName)) {
    String targetName=getName(oName);
    result.addInstance(targetName);
    if (!(""String_Node_Str"".equals(targetName)))     result.setTargetIsAnInstance(true);
  }
  if (""String_Node_Str"".equals(oName) || ""String_Node_Str"".equals(oName)) {
    result.addInstance(""String_Node_Str"");
    result.addAllInstances(MbeanService.getInstance().getAllInstances());
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null) {
    if (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (oName.startsWith(""String_Node_Str"") || oName.startsWith(""String_Node_Str"")) {
    result.addInstance(""String_Node_Str"");
  }
  if ((MbeanService.getInstance().isDas())) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  return result;
}"
29438,"public void setAttribute(final ObjectName objectName,final Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, MBeanException, ReflectionException, InvalidAttributeValueException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).setAttribute(objectName,attribute);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr))       getDelegateMBeanServer().setAttribute(objectName,attribute);
 else       getInstanceConnection(svr).setAttribute(objectName,attribute);
    }
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}","public void setAttribute(final ObjectName objectName,final Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, MBeanException, ReflectionException, InvalidAttributeValueException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).setAttribute(objectName,attribute);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr))       getDelegateMBeanServer().setAttribute(objectName,attribute);
 else       getInstanceConnection(svr).setAttribute(objectName,attribute);
    }
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}"
29439,"public final Object getAttribute(final ObjectName objectName,final String attributeName) throws InstanceNotFoundException, AttributeNotFoundException, MBeanException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  if (!result.isTargetAnInstance())   return getDelegateMBeanServer().getAttribute(objectName,attributeName);
  try {
    return getInstanceConnection(result.getInstances().get(0)).getAttribute(objectName,attributeName);
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}","public final Object getAttribute(final ObjectName objectName,final String attributeName) throws InstanceNotFoundException, AttributeNotFoundException, MBeanException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  if (!result.isTargetAnInstance())   return getDelegateMBeanServer().getAttribute(objectName,attributeName);
  try {
    return getInstanceConnection(result.getInstances().get(0)).getAttribute(objectName,attributeName);
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}"
29440,"public final ObjectInstance createMBean(final String str,final ObjectName objectName,final ObjectName objectName2,final Object[] obj,final String[] str4) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
  try {
    ReplicationInfo result=getInstance(objectName);
    ObjectInstance ret=null;
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).createMBean(str,objectName,objectName2,obj,str4);
    for (    String svr : result.getInstances())     if (svr.equals(""String_Node_Str""))     ret=getDelegateMBeanServer().createMBean(str,objectName,objectName2,obj,str4);
 else     ret=getInstanceConnection(svr).createMBean(str,objectName,objectName2,obj,str4);
    return ret;
  }
 catch (  Exception ioex) {
    throw new MBeanException(ioex);
  }
}","public final ObjectInstance createMBean(final String str,final ObjectName objectName,final ObjectName objectName2,final Object[] obj,final String[] str4) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
  try {
    DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
    ObjectInstance ret=null;
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).createMBean(str,objectName,objectName2,obj,str4);
    for (    String svr : result.getInstances())     if (svr.equals(""String_Node_Str""))     ret=getDelegateMBeanServer().createMBean(str,objectName,objectName2,obj,str4);
 else     ret=getInstanceConnection(svr).createMBean(str,objectName,objectName2,obj,str4);
    return ret;
  }
 catch (  Exception ioex) {
    throw new MBeanException(ioex);
  }
}"
29441,"public final AttributeList getAttributes(final ObjectName objectName,final String[] attrNames) throws InstanceNotFoundException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).getAttributes(objectName,attrNames);
 else     return getDelegateMBeanServer().getAttributes(objectName,attrNames);
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}","public final AttributeList getAttributes(final ObjectName objectName,final String[] attrNames) throws InstanceNotFoundException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).getAttributes(objectName,attrNames);
 else     return getDelegateMBeanServer().getAttributes(objectName,attrNames);
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}"
29442,"public final void addNotificationListener(final ObjectName objectName,final ObjectName objectName1,final NotificationFilter notificationFilter,final Object obj) throws InstanceNotFoundException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).addNotificationListener(objectName,objectName1,notificationFilter,obj);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr))       getDelegateMBeanServer().addNotificationListener(objectName,objectName1,notificationFilter,obj);
 else       getInstanceConnection(svr).addNotificationListener(objectName,objectName1,notificationFilter,obj);
    }
  }
 catch (  IOException ioex) {
    throw new InstanceNotFoundException(ioex.getLocalizedMessage());
  }
}","public final void addNotificationListener(final ObjectName objectName,final ObjectName objectName1,final NotificationFilter notificationFilter,final Object obj) throws InstanceNotFoundException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).addNotificationListener(objectName,objectName1,notificationFilter,obj);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (""String_Node_Str"".equals(svr))       getDelegateMBeanServer().addNotificationListener(objectName,objectName1,notificationFilter,obj);
 else       getInstanceConnection(svr).addNotificationListener(objectName,objectName1,notificationFilter,obj);
    }
  }
 catch (  IOException ioex) {
    throw new InstanceNotFoundException(ioex.getLocalizedMessage());
  }
}"
29443,"private ReplicationInfo getInstance(final ObjectName o) throws InstanceNotFoundException {
  return getTargets(o);
}","private DynamicInterceptor.ReplicationInfo getInstance(final ObjectName o) throws InstanceNotFoundException {
  return getTargets(o);
}"
29444,"public final void removeNotificationListener(final ObjectName objectName,final ObjectName objectName1,final NotificationFilter notificationFilter,final Object obj) throws InstanceNotFoundException, ListenerNotFoundException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).removeNotificationListener(objectName,objectName1,notificationFilter,obj);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (svr.equals(""String_Node_Str""))       getDelegateMBeanServer().removeNotificationListener(objectName,objectName1,notificationFilter,obj);
 else       getInstanceConnection(svr).removeNotificationListener(objectName,objectName1,notificationFilter,obj);
    }
  }
 catch (  IOException ioex) {
    throw new InstanceNotFoundException(ioex.getLocalizedMessage());
  }
}","public final void removeNotificationListener(final ObjectName objectName,final ObjectName objectName1,final NotificationFilter notificationFilter,final Object obj) throws InstanceNotFoundException, ListenerNotFoundException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance()) {
      getInstanceConnection(result.getInstances().get(0)).removeNotificationListener(objectName,objectName1,notificationFilter,obj);
      return;
    }
    for (    String svr : result.getInstances()) {
      if (svr.equals(""String_Node_Str""))       getDelegateMBeanServer().removeNotificationListener(objectName,objectName1,notificationFilter,obj);
 else       getInstanceConnection(svr).removeNotificationListener(objectName,objectName1,notificationFilter,obj);
    }
  }
 catch (  IOException ioex) {
    throw new InstanceNotFoundException(ioex.getLocalizedMessage());
  }
}"
29445,"public final MBeanInfo getMBeanInfo(final ObjectName objectName) throws InstanceNotFoundException, IntrospectionException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).getMBeanInfo(objectName);
 else     return getDelegateMBeanServer().getMBeanInfo(objectName);
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}","public final MBeanInfo getMBeanInfo(final ObjectName objectName) throws InstanceNotFoundException, IntrospectionException, ReflectionException {
  if (objectName == null)   throw new InstanceNotFoundException();
  DynamicInterceptor.ReplicationInfo result=getInstance(objectName);
  try {
    if (result.isTargetAnInstance())     return getInstanceConnection(result.getInstances().get(0)).getMBeanInfo(objectName);
 else     return getDelegateMBeanServer().getMBeanInfo(objectName);
  }
 catch (  IOException ioex) {
    throw new ReflectionException(ioex);
  }
}"
29446,"/** 
 * Get list of all supplemental commands, map it to various commands and cache this list
 */
private Map<String,List<ServiceHandle<?>>> getSupplementalCommandsList(){
  if (supplementalCommandsMap != null)   return supplementalCommandsMap;
synchronized (this) {
    if (supplementalCommandsMap != null)     return supplementalCommandsMap;
    supplementalCommandsMap=new ConcurrentHashMap<String,List<ServiceHandle<?>>>();
    List<ServiceHandle<?>> supplementals=habitat.getAllServiceHandles(Supplemental.class);
    for (    ServiceHandle<?> handle : supplementals) {
      ActiveDescriptor<?> inh=handle.getActiveDescriptor();
      String commandName=getOne(""String_Node_Str"",inh.getMetadata());
      if (supplementalCommandsMap.containsKey(commandName)) {
        supplementalCommandsMap.get(commandName).add(handle);
      }
 else {
        ArrayList<ServiceHandle<?>> inhList=new ArrayList<ServiceHandle<?>>();
        inhList.add(handle);
        supplementalCommandsMap.put(commandName,inhList);
      }
    }
  }
  return supplementalCommandsMap;
}","/** 
 * Get list of all supplemental commands, map it to various commands and cache this list
 */
private synchronized Map<String,List<ServiceHandle<?>>> getSupplementalCommandsList(){
  if (supplementalCommandsMap != null)   return supplementalCommandsMap;
  supplementalCommandsMap=new ConcurrentHashMap<String,List<ServiceHandle<?>>>();
  List<ServiceHandle<?>> supplementals=habitat.getAllServiceHandles(Supplemental.class);
  for (  ServiceHandle<?> handle : supplementals) {
    ActiveDescriptor<?> inh=handle.getActiveDescriptor();
    String commandName=getOne(""String_Node_Str"",inh.getMetadata());
    if (supplementalCommandsMap.containsKey(commandName)) {
      supplementalCommandsMap.get(commandName).add(handle);
    }
 else {
      ArrayList<ServiceHandle<?>> inhList=new ArrayList<ServiceHandle<?>>();
      inhList.add(handle);
      supplementalCommandsMap.put(commandName,inhList);
    }
  }
  return supplementalCommandsMap;
}"
29447,"public List<Map.Entry> applyOverrideRules(List<Map.Entry> nodes){
  HashMap<String,Map.Entry> store=new HashMap<String,Map.Entry>();
  for (int i=0; i < nodes.size(); i++) {
    Map.Entry<Dom,String> currentNode=nodes.get(i);
    Map.Entry<Dom,String> storedNode=store.get(currentNode.getValue());
    if (storedNode == null) {
      store.put(currentNode.getValue(),currentNode);
      continue;
    }
    int storedNodePrecedenceLevel=getPrecedenceLevel(storedNode.getKey());
    int currNodePrecedenceLevel=getPrecedenceLevel(currentNode.getKey());
    if (storedNodePrecedenceLevel < currNodePrecedenceLevel)     store.put(currentNode.getValue(),currentNode);
  }
  List<Map.Entry> finalList=new ArrayList<Map.Entry>();
  for (  String key : store.keySet()) {
    finalList.add(store.get(key));
  }
  store.clear();
  return finalList;
}","public List<Map.Entry> applyOverrideRules(List<Map.Entry> nodes){
  HashMap<String,Map.Entry> store=new HashMap<String,Map.Entry>();
  for (int i=0; i < nodes.size(); i++) {
    Map.Entry<Dom,String> currentNode=nodes.get(i);
    Map.Entry<Dom,String> storedNode=store.get(currentNode.getValue());
    if (storedNode == null) {
      store.put(currentNode.getValue(),currentNode);
      continue;
    }
    int storedNodePrecedenceLevel=getPrecedenceLevel(storedNode.getKey());
    int currNodePrecedenceLevel=getPrecedenceLevel(currentNode.getKey());
    if (storedNodePrecedenceLevel < currNodePrecedenceLevel)     store.put(currentNode.getValue(),currentNode);
  }
  List<Map.Entry> finalList=new ArrayList<Map.Entry>();
  finalList.addAll(store.values());
  store.clear();
  return finalList;
}"
29448,"private ReplicationInfo getTargets(final ObjectName objectName) throws InstanceNotFoundException {
  ReplicationInfo result=new ReplicationInfo();
  List<String> instances=result.getInstances();
  if (objectName == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  String oName=objectName.toString();
  if (MbeanService.getInstance() == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null && (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str""))) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (isConfig(oName)) {
    String configName=getName(oName);
    if (configName != null && configName.indexOf(""String_Node_Str"") > 0) {
      String targetName=configName.substring(0,configName.indexOf(""String_Node_Str""));
      if ((!""String_Node_Str"".equals(targetName)) && (!""String_Node_Str"".equals(targetName))) {
        result.addAllInstances(MbeanService.getInstance().getInstances(configName));
      }
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isCluster(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addAllInstances(MbeanService.getInstance().getInstances(targetName));
    }
  }
  if (isServer(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addInstance(targetName);
      if (!(""String_Node_Str"".equals(targetName)))       result.setTargetIsAnInstance(true);
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isJSR77(oName,objectName)) {
    if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
 else     if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(""String_Node_Str"");
        result.addInstance(targetInstance);
      }
    }
 else {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(targetInstance);
      }
    }
  }
  if (isMonitoring(oName)) {
    String targetName=getName(oName);
    result.addInstance(targetName);
    if (!(""String_Node_Str"".equals(targetName)))     result.setTargetIsAnInstance(true);
  }
  if (""String_Node_Str"".equals(oName) || ""String_Node_Str"".equals(oName)) {
    result.addInstance(""String_Node_Str"");
    result.addAllInstances(MbeanService.getInstance().getAllInstances());
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null) {
    if (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (oName.startsWith(""String_Node_Str"") || oName.startsWith(""String_Node_Str"")) {
    result.addInstance(""String_Node_Str"");
  }
  if ((MbeanService.getInstance().isDas())) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  return result;
}","private ReplicationInfo getTargets(final ObjectName objectName) throws InstanceNotFoundException {
  ReplicationInfo result=new ReplicationInfo();
  if (objectName == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  String oName=objectName.toString();
  if (MbeanService.getInstance() == null) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null && (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str""))) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  if (isConfig(oName)) {
    String configName=getName(oName);
    if (configName != null && configName.indexOf(""String_Node_Str"") > 0) {
      String targetName=configName.substring(0,configName.indexOf(""String_Node_Str""));
      if ((!""String_Node_Str"".equals(targetName)) && (!""String_Node_Str"".equals(targetName))) {
        result.addAllInstances(MbeanService.getInstance().getInstances(configName));
      }
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isCluster(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addAllInstances(MbeanService.getInstance().getInstances(targetName));
    }
  }
  if (isServer(oName)) {
    String targetName=getName(oName);
    if (targetName != null) {
      result.addInstance(targetName);
      if (!(""String_Node_Str"".equals(targetName)))       result.setTargetIsAnInstance(true);
    }
 else {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (isJSR77(oName,objectName)) {
    if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
 else     if (objectName.getKeyProperty(""String_Node_Str"") != null && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(""String_Node_Str"");
        result.addInstance(targetInstance);
      }
    }
 else {
      String targetInstance=objectName.getKeyProperty(""String_Node_Str"");
      if (MbeanService.getInstance().isValidServer(targetInstance)) {
        result.addInstance(targetInstance);
      }
    }
  }
  if (isMonitoring(oName)) {
    String targetName=getName(oName);
    result.addInstance(targetName);
    if (!(""String_Node_Str"".equals(targetName)))     result.setTargetIsAnInstance(true);
  }
  if (""String_Node_Str"".equals(oName) || ""String_Node_Str"".equals(oName)) {
    result.addInstance(""String_Node_Str"");
    result.addAllInstances(MbeanService.getInstance().getAllInstances());
  }
  if (objectName.getKeyProperty(""String_Node_Str"") != null) {
    if (objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"") || objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")|| objectName.getKeyProperty(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      result.addInstance(""String_Node_Str"");
    }
  }
  if (oName.startsWith(""String_Node_Str"") || oName.startsWith(""String_Node_Str"")) {
    result.addInstance(""String_Node_Str"");
  }
  if ((MbeanService.getInstance().isDas())) {
    result.addInstance(""String_Node_Str"");
    return result;
  }
  return result;
}"
29449,"private InjectionResolver<Param> getInjector(AdminCommand command,ParameterMap parameters,MultiMap<String,File> map){
  CommandModel model;
  try {
    CommandModelProvider c=CommandModelProvider.class.cast(command);
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  return new MapInjectionResolver(model,parameters,map);
}","private InjectionResolver<Param> getInjector(AdminCommand command,ParameterMap parameters,MultiMap<String,File> map){
  CommandModel model=command instanceof CommandModelProvider ? CommandModelProvider.class.cast(command).getModel() : new CommandModelImpl(command.getClass());
  return new MapInjectionResolver(model,parameters,map);
}"
29450,"/** 
 * Get list of all supplemental commands, map it to various commands and cache this list
 */
private Map<String,List<ServiceHandle<?>>> getSupplementalCommandsList(){
  if (supplementalCommandsMap != null)   return supplementalCommandsMap;
synchronized (this) {
    if (supplementalCommandsMap != null)     return supplementalCommandsMap;
    supplementalCommandsMap=new ConcurrentHashMap<String,List<ServiceHandle<?>>>();
    List<ServiceHandle<?>> supplementals=habitat.getAllServiceHandles(Supplemental.class);
    for (    ServiceHandle<?> handle : supplementals) {
      ActiveDescriptor<?> inh=handle.getActiveDescriptor();
      String commandName=getOne(""String_Node_Str"",inh.getMetadata());
      if (supplementalCommandsMap.containsKey(commandName)) {
        supplementalCommandsMap.get(commandName).add(handle);
      }
 else {
        ArrayList<ServiceHandle<?>> inhList=new ArrayList<ServiceHandle<?>>();
        inhList.add(handle);
        supplementalCommandsMap.put(commandName,inhList);
      }
    }
  }
  return supplementalCommandsMap;
}","/** 
 * Get list of all supplemental commands, map it to various commands and cache this list
 */
private synchronized Map<String,List<ServiceHandle<?>>> getSupplementalCommandsList(){
  if (supplementalCommandsMap != null)   return supplementalCommandsMap;
  supplementalCommandsMap=new ConcurrentHashMap<String,List<ServiceHandle<?>>>();
  List<ServiceHandle<?>> supplementals=habitat.getAllServiceHandles(Supplemental.class);
  for (  ServiceHandle<?> handle : supplementals) {
    ActiveDescriptor<?> inh=handle.getActiveDescriptor();
    String commandName=getOne(""String_Node_Str"",inh.getMetadata());
    if (supplementalCommandsMap.containsKey(commandName)) {
      supplementalCommandsMap.get(commandName).add(handle);
    }
 else {
      ArrayList<ServiceHandle<?>> inhList=new ArrayList<ServiceHandle<?>>();
      inhList.add(handle);
      supplementalCommandsMap.put(commandName,inhList);
    }
  }
  return supplementalCommandsMap;
}"
29451,"public List<Map.Entry> applyOverrideRules(List<Map.Entry> nodes){
  HashMap<String,Map.Entry> store=new HashMap<String,Map.Entry>();
  for (int i=0; i < nodes.size(); i++) {
    Map.Entry<Dom,String> currentNode=nodes.get(i);
    Map.Entry<Dom,String> storedNode=store.get(currentNode.getValue());
    if (storedNode == null) {
      store.put(currentNode.getValue(),currentNode);
      continue;
    }
    int storedNodePrecedenceLevel=getPrecedenceLevel(storedNode.getKey());
    int currNodePrecedenceLevel=getPrecedenceLevel(currentNode.getKey());
    if (storedNodePrecedenceLevel < currNodePrecedenceLevel)     store.put(currentNode.getValue(),currentNode);
  }
  List<Map.Entry> finalList=new ArrayList<Map.Entry>();
  for (  String key : store.keySet()) {
    finalList.add(store.get(key));
  }
  store.clear();
  return finalList;
}","public List<Map.Entry> applyOverrideRules(List<Map.Entry> nodes){
  HashMap<String,Map.Entry> store=new HashMap<String,Map.Entry>();
  for (int i=0; i < nodes.size(); i++) {
    Map.Entry<Dom,String> currentNode=nodes.get(i);
    Map.Entry<Dom,String> storedNode=store.get(currentNode.getValue());
    if (storedNode == null) {
      store.put(currentNode.getValue(),currentNode);
      continue;
    }
    int storedNodePrecedenceLevel=getPrecedenceLevel(storedNode.getKey());
    int currNodePrecedenceLevel=getPrecedenceLevel(currentNode.getKey());
    if (storedNodePrecedenceLevel < currNodePrecedenceLevel)     store.put(currentNode.getValue(),currentNode);
  }
  List<Map.Entry> finalList=new ArrayList<Map.Entry>();
  finalList.addAll(store.entrySet());
  store.clear();
  return finalList;
}"
29452,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Properties p=System.getProperties();
  System.out.println(""String_Node_Str"");
  LocalServiceRegistry reg=LocalServiceRegistry.getLocalRegistry();
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  System.out.println(""String_Node_Str"");
}"
29453,"public void showServiceTagAttributes(){
  Properties data=System.getProperties();
  showAttribute(ServiceTag.PRODUCT_NAME);
  showAttribute(ServiceTag.PRODUCT_VERSION);
  showAttribute(ServiceTag.PRODUCT_URN);
  showAttribute(ServiceTag.PRODUCT_PARENT);
  showAttribute(ServiceTag.PRODUCT_PARENT_URN);
  showAttribute(ServiceTag.PRODUCT_DEFINED_INST_ID);
  showAttribute(ServiceTag.CONTAINER);
  showAttribute(ServiceTag.SOURCE);
  showAttribute(ServiceTag.INSTANCE_URN);
  showAttribute(ServiceTag.STATUS);
  showAttribute(ServiceTag.REGISTRATION_STATUS);
  showAttribute(ServiceTag.SERVICE_TAG);
}","public void showServiceTagAttributes(){
  showAttribute(ServiceTag.PRODUCT_NAME);
  showAttribute(ServiceTag.PRODUCT_VERSION);
  showAttribute(ServiceTag.PRODUCT_URN);
  showAttribute(ServiceTag.PRODUCT_PARENT);
  showAttribute(ServiceTag.PRODUCT_PARENT_URN);
  showAttribute(ServiceTag.PRODUCT_DEFINED_INST_ID);
  showAttribute(ServiceTag.CONTAINER);
  showAttribute(ServiceTag.SOURCE);
  showAttribute(ServiceTag.INSTANCE_URN);
  showAttribute(ServiceTag.STATUS);
  showAttribute(ServiceTag.REGISTRATION_STATUS);
  showAttribute(ServiceTag.SERVICE_TAG);
}"
29454,"/** 
 * Restart of the application server : All running services are stopped. LookupManager is flushed. Client code that started us should notice the special return value and restart us.
 */
protected final void doExecute(AdminCommandContext context){
  try {
    if (registry == null)     throw new NullPointerException(new LocalStringsImpl(getClass()).get(""String_Node_Str"",""String_Node_Str""));
    init(context);
    if (!verbose) {
      reincarnate();
    }
    GlassFish gfKernel=glassfishProvider.get();
    if (gfKernel != null) {
      gfKernel.stop();
    }
  }
 catch (  Exception e) {
    context.getLogger().severe(strings.get(""String_Node_Str"",e));
  }
  int ret=RESTART_NORMAL;
  if (debug != null)   ret=debug ? RESTART_DEBUG_ON : RESTART_DEBUG_OFF;
  System.exit(ret);
}","/** 
 * Restart of the application server : All running services are stopped. LookupManager is flushed. Client code that started us should notice the special return value and restart us.
 */
protected final void doExecute(AdminCommandContext context){
  try {
    if (registry == null)     throw new NullPointerException(new LocalStringsImpl(getClass()).get(""String_Node_Str"",""String_Node_Str""));
    init(context);
    GlassFish gfKernel=glassfishProvider.get();
    while (gfKernel == null) {
      Thread.sleep(1000);
      gfKernel=glassfishProvider.get();
    }
    if (!verbose) {
      reincarnate();
    }
    gfKernel.stop();
  }
 catch (  Exception e) {
    context.getLogger().severe(strings.get(""String_Node_Str"",e));
  }
  int ret=RESTART_NORMAL;
  if (debug != null)   ret=debug ? RESTART_DEBUG_ON : RESTART_DEBUG_OFF;
  System.exit(ret);
}"
29455,"/** 
 * Shutdown of the server :  All running services are stopped.  LookupManager is flushed.
 */
protected final void doExecute(ServiceLocator habitat,ServerEnvironment env,Logger logger,boolean force){
  try {
    logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    GlassFish gfKernel=habitat.getService(GlassFish.class);
    if (gfKernel != null) {
      gfKernel.stop();
    }
  }
 catch (  Throwable t) {
  }
  if (force)   System.exit(0);
 else   deletePidFile(env);
}","/** 
 * Shutdown of the server :  All running services are stopped.  LookupManager is flushed.
 */
protected final void doExecute(ServiceLocator habitat,ServerEnvironment env,Logger logger,boolean force){
  try {
    logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    GlassFish gfKernel=habitat.getService(GlassFish.class);
    while (gfKernel == null) {
      Thread.sleep(1000);
      gfKernel=habitat.getService(GlassFish.class);
    }
    if (gfKernel != null) {
      gfKernel.stop();
    }
  }
 catch (  Throwable t) {
  }
  if (force)   System.exit(0);
 else   deletePidFile(env);
}"
29456,"/** 
 * Gets the property name of the method passed. It strips the first three  charaters (size of ""set"") of the method name and converts the first  character (for the string after stripping) to upper case and returns  that string.
 */
private String getPropName(Method method){
  if (method == null) {
    return null;
  }
  String methodName=method.getName();
  int length=""String_Node_Str"".length();
  String retValue=methodName.substring(length,length + 1).toUpperCase() + methodName.substring(length + 1);
  return retValue;
}","/** 
 * Gets the property name of the method passed. It strips the first three  charaters (size of ""set"") of the method name and converts the first  character (for the string after stripping) to upper case and returns  that string.
 */
private String getPropName(Method method){
  if (method == null) {
    return null;
  }
  String methodName=method.getName();
  int length=""String_Node_Str"".length();
  String retValue=methodName.substring(length,length + 1).toUpperCase(Locale.getDefault()) + methodName.substring(length + 1);
  return retValue;
}"
29457,"public static final ConnectorTimerProxy getProxy(){
  if (connectorTimer == null) {
synchronized (ConnectorTimerProxy.class) {
      if (connectorTimer == null) {
        connectorTimer=new ConnectorTimerProxy(true);
      }
    }
  }
  return connectorTimer;
}","public static final ConnectorTimerProxy getProxy(){
synchronized (ConnectorTimerProxy.class) {
    if (connectorTimer == null) {
      connectorTimer=new ConnectorTimerProxy(true);
    }
  }
  return connectorTimer;
}"
29458,"/** 
 * Handle any exception occured during scheduling timer.  In case of unchecked exceptions, the timer is recreated to be used  by the subsequent requests for scheduling.
 * @param ex exception that was caught
 */
private void handleTimerException(Exception ex){
  _logger.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
  _logger.info(""String_Node_Str"");
  timer=null;
  timer=getTimer();
}","/** 
 * Handle any exception occured during scheduling timer.  In case of unchecked exceptions, the timer is recreated to be used  by the subsequent requests for scheduling.
 * @param ex exception that was caught
 */
private void handleTimerException(Exception ex){
  _logger.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
  _logger.info(""String_Node_Str"");
  timerException=true;
  timer=getTimer();
}"
29459,"private Timer getTimer(){
synchronized (getTimerLock) {
    if (timer == null) {
      ClassLoader loader=null;
      try {
        loader=Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(ConnectorRuntime.getRuntime().getConnectorClassLoader());
        timer=new Timer(""String_Node_Str"",true);
      }
  finally {
        Thread.currentThread().setContextClassLoader(loader);
      }
    }
  }
  return timer;
}","private Timer getTimer(){
synchronized (getTimerLock) {
    if (timer == null || timerException) {
      ClassLoader loader=null;
      try {
        loader=Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(ConnectorRuntime.getRuntime().getConnectorClassLoader());
        timer=new Timer(""String_Node_Str"",true);
      }
  finally {
        Thread.currentThread().setContextClassLoader(loader);
        timerException=false;
      }
    }
  }
  return timer;
}"
29460,"protected void performLazyEnlistment() throws SQLException {
  try {
    this.lazyEnlistCm_.lazyEnlist(mc);
  }
 catch (  ResourceException re) {
    String msg=sm.getString(""String_Node_Str"",re.getMessage() + ""String_Node_Str"");
    SQLException sqle=new SQLException(msg);
    sqle.initCause(re);
    throw sqle;
  }
}","protected void performLazyEnlistment() throws SQLException {
  try {
    if (lazyEnlistCm_ != null) {
      lazyEnlistCm_.lazyEnlist(mc);
    }
  }
 catch (  ResourceException re) {
    String msg=sm.getString(""String_Node_Str"",re.getMessage() + ""String_Node_Str"");
    SQLException sqle=new SQLException(msg);
    sqle.initCause(re);
    throw sqle;
  }
}"
29461,"protected void performLazyAssociation() throws SQLException {
  if (mc == null) {
    try {
      this.lazyAssocCm_.associateConnection(this,mcf_,cxReqInfo_);
    }
 catch (    ResourceException re) {
      String msg=sm.getString(""String_Node_Str"",re.getMessage() + ""String_Node_Str"");
      SQLException sqle=new SQLException(msg);
      sqle.initCause(re);
      throw sqle;
    }
  }
}","protected void performLazyAssociation() throws SQLException {
  if (mc == null) {
    try {
      if (lazyAssocCm_ != null) {
        lazyAssocCm_.associateConnection(this,mcf_,cxReqInfo_);
      }
    }
 catch (    ResourceException re) {
      String msg=sm.getString(""String_Node_Str"",re.getMessage() + ""String_Node_Str"");
      SQLException sqle=new SQLException(msg);
      sqle.initCause(re);
      throw sqle;
    }
  }
}"
29462,"private void registerDSDReferredByApplication(String appName,DataSourceDefinitionDescriptor dsd){
  if (!dsd.isDeployed()) {
    DataSourceDefinitionProxy proxy=dataSourceDefinitionProxyProvider.get();
    ResourceNamingService resourceNamingService=resourceNamingServiceProvider.get();
    proxy.setDescriptor(dsd);
    String moduleName=null;
    if (dsd.getName().startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      dsd.setResourceId(appName);
    }
    if (dsd.getName().startsWith(ConnectorConstants.JAVA_GLOBAL_SCOPE_PREFIX) || dsd.getName().startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      ResourceInfo resourceInfo=new ResourceInfo(dsd.getName(),appName,moduleName);
      try {
        resourceNamingService.publishObject(resourceInfo,proxy,true);
        dsd.setDeployed(true);
      }
 catch (      NamingException e) {
        Object params[]=new Object[]{appName,dsd.getName(),e};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
      }
    }
  }
}","private void registerDSDReferredByApplication(String appName,DataSourceDefinitionDescriptor dsd){
  if (!dsd.isDeployed()) {
    DataSourceDefinitionProxy proxy=dataSourceDefinitionProxyProvider.get();
    ResourceNamingService resourceNamingService=resourceNamingServiceProvider.get();
    proxy.setDescriptor(dsd);
    String dsdName=dsd.getName();
    if (dsdName.startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      dsd.setResourceId(appName);
    }
    if (dsdName.startsWith(ConnectorConstants.JAVA_GLOBAL_SCOPE_PREFIX) || dsdName.startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      ResourceInfo resourceInfo=new ResourceInfo(dsdName,appName,null);
      try {
        resourceNamingService.publishObject(resourceInfo,proxy,true);
        dsd.setDeployed(true);
      }
 catch (      NamingException e) {
        Object params[]=new Object[]{appName,dsdName,e};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
      }
    }
  }
}"
29463,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumPotentialConnLeakCount(){
  return numPotentialConnLeak.getStatistic();
}","/** 
 * When a connection leak is observed, the monitoring statistics are displayed to the server.log. This method helps in segregating the statistics based on LOW/HIGH monitoring levels and displaying them.
 * @param poolName
 * @param stackTrace
 */
@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumPotentialConnLeakCount(){
  return numPotentialConnLeak.getStatistic();
}"
29464,"/** 
 * Gets the Pool name that this JDBC resource points to. In case of a PMF resource gets the pool name of the pool pointed to by jdbc resource being pointed to by the PMF resource
 * @param resourceInfo the jndi name of the resource being used to get Connection fromThis resource can either be a pmf resource or a jdbc resource
 * @return poolName of the pool that this resource directly/indirectly points to
 */
public PoolInfo getPoolNameFromResourceJndiName(ResourceInfo resourceInfo){
  PoolInfo poolInfo=null;
  JdbcResource jdbcResource=null;
  ResourceInfo actualResourceInfo=resourceInfo;
  String jndiName=resourceInfo.getName();
  actualResourceInfo=new ResourceInfo(jndiName,resourceInfo.getApplicationName(),resourceInfo.getModuleName());
  ConnectorRuntime runtime=ConnectorRuntime.getRuntime();
  jdbcResource=(JdbcResource)ConnectorsUtil.getResourceByName(runtime.getResources(actualResourceInfo),JdbcResource.class,actualResourceInfo.getName());
  if (jdbcResource == null) {
    String suffix=ConnectorsUtil.getValidSuffix(jndiName);
    if (suffix != null) {
      jndiName=jndiName.substring(0,jndiName.lastIndexOf(suffix));
      actualResourceInfo=new ResourceInfo(jndiName,resourceInfo.getApplicationName(),resourceInfo.getModuleName());
    }
  }
  jdbcResource=(JdbcResource)ConnectorsUtil.getResourceByName(runtime.getResources(actualResourceInfo),JdbcResource.class,actualResourceInfo.getName());
  if (jdbcResource != null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + jdbcResource.getJndiName());
      logger.fine(""String_Node_Str"" + jdbcResource.getPoolName());
    }
  }
  if (jdbcResource != null) {
    poolInfo=new PoolInfo(jdbcResource.getPoolName(),actualResourceInfo.getApplicationName(),actualResourceInfo.getModuleName());
  }
  return poolInfo;
}","/** 
 * Gets the Pool name that this JDBC resource points to. In case of a PMF resource gets the pool name of the pool pointed to by jdbc resource being pointed to by the PMF resource
 * @param resourceInfo the jndi name of the resource being used to get Connection fromThis resource can either be a pmf resource or a jdbc resource
 * @return poolName of the pool that this resource directly/indirectly points to
 */
public PoolInfo getPoolNameFromResourceJndiName(ResourceInfo resourceInfo){
  PoolInfo poolInfo=null;
  JdbcResource jdbcResource=null;
  String jndiName=resourceInfo.getName();
  ResourceInfo actualResourceInfo=new ResourceInfo(jndiName,resourceInfo.getApplicationName(),resourceInfo.getModuleName());
  ConnectorRuntime runtime=ConnectorRuntime.getRuntime();
  jdbcResource=(JdbcResource)ConnectorsUtil.getResourceByName(runtime.getResources(actualResourceInfo),JdbcResource.class,actualResourceInfo.getName());
  if (jdbcResource == null) {
    String suffix=ConnectorsUtil.getValidSuffix(jndiName);
    if (suffix != null) {
      jndiName=jndiName.substring(0,jndiName.lastIndexOf(suffix));
      actualResourceInfo=new ResourceInfo(jndiName,resourceInfo.getApplicationName(),resourceInfo.getModuleName());
    }
  }
  jdbcResource=(JdbcResource)ConnectorsUtil.getResourceByName(runtime.getResources(actualResourceInfo),JdbcResource.class,actualResourceInfo.getName());
  if (jdbcResource != null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + jdbcResource.getJndiName());
      logger.fine(""String_Node_Str"" + jdbcResource.getPoolName());
    }
  }
  if (jdbcResource != null) {
    poolInfo=new PoolInfo(jdbcResource.getPoolName(),actualResourceInfo.getApplicationName(),actualResourceInfo.getModuleName());
  }
  return poolInfo;
}"
29465,"private void doInclude(ServletRequest request,ServletResponse response) throws ServletException, IOException {
  State state=new State(request,response,DispatcherType.INCLUDE);
  wrapResponse(state);
  if (name != null) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.setAttribute(Globals.NAMED_DISPATCHER_ATTR,name);
    if (servletPath != null)     wrequest.setServletPath(servletPath);
    wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,getCombinedPath());
    try {
      invoke(state.outerRequest,state.outerResponse,state);
    }
  finally {
      wrequest.recycle();
      unwrapRequest(state);
      unwrapResponse(state);
    }
  }
 else {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.initSpecialAttributes(requestURI,context.getPath(),servletPath,pathInfo,queryString);
    wrequest.setQueryParams(queryString);
    wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,getCombinedPath());
    try {
      invoke(state.outerRequest,state.outerResponse,state);
    }
  finally {
      wrequest.recycle();
      unwrapRequest(state);
      unwrapResponse(state);
    }
  }
}","private void doInclude(ServletRequest request,ServletResponse response) throws ServletException, IOException {
  State state=new State(request,response,DispatcherType.INCLUDE);
  wrapResponse(state);
  if (name != null) {
    ApplicationHttpRequest wrequest=(ApplicationHttpRequest)wrapRequest(state);
    wrequest.setAttribute(Globals.NAMED_DISPATCHER_ATTR,name);
    if (servletPath != null)     wrequest.setServletPath(servletPath);
    wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,getCombinedPath());
    try {
      invoke(state.outerRequest,state.outerResponse,state);
    }
  finally {
      recycleRequestWrapper(state);
      unwrapRequest(state);
      unwrapResponse(state);
    }
  }
 else {
    ApplicationHttpRequest wrequest=(ApplicationHttpRequest)wrapRequest(state);
    wrequest.initSpecialAttributes(requestURI,context.getPath(),servletPath,pathInfo,queryString);
    wrequest.setQueryParams(queryString);
    wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,getCombinedPath());
    try {
      invoke(state.outerRequest,state.outerResponse,state);
    }
  finally {
      recycleRequestWrapper(state);
      unwrapRequest(state);
      unwrapResponse(state);
    }
  }
}"
29466,"/** 
 * Ask the resource represented by this RequestDispatcher to process the associated request, and create (or append to) the associated response. <p> <strong>IMPLEMENTATION NOTE</strong>: This implementation assumes that no filters are applied to a forwarded or included resource, because they were already done for the original request.
 * @param request The servlet request we are processing
 * @param response The servlet response we are creating
 * @param crossContext true if the request dispatch is crossing contextboundaries, false otherwise
 * @param state the state of this ApplicationDispatcher
 * @throws IOException if an input/output error occurs
 * @throws ServletException if a servlet error occurs
 */
private void doInvoke(ServletRequest request,ServletResponse response,boolean crossContext,State state) throws IOException, ServletException {
  ClassLoader oldCCL=null;
  if (crossContext) {
    oldCCL=Thread.currentThread().getContextClassLoader();
    ClassLoader contextClassLoader=context.getLoader().getClassLoader();
    Thread.currentThread().setContextClassLoader(contextClassLoader);
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  Servlet servlet=null;
  IOException ioException=null;
  ServletException servletException=null;
  RuntimeException runtimeException=null;
  boolean unavailable=false;
  if (wrapper.isUnavailable()) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()));
    if (hresponse == null) {
      ;
    }
 else {
      long available=wrapper.getAvailable();
      if ((available > 0L) && (available < Long.MAX_VALUE))       hresponse.setDateHeader(""String_Node_Str"",available);
      hresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString(""String_Node_Str"",wrapper.getName()));
    }
    unavailable=true;
  }
  try {
    if (!unavailable) {
      servlet=wrapper.allocate();
    }
  }
 catch (  ServletException e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),StandardWrapper.getRootCause(e));
    servletException=e;
    servlet=null;
  }
catch (  Throwable e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=new ServletException(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servlet=null;
  }
  ApplicationFilterFactory factory=ApplicationFilterFactory.getInstance();
  ApplicationFilterChain filterChain=factory.createFilterChain(request,wrapper,servlet);
  InstanceSupport support=((StandardWrapper)wrapper).getInstanceSupport();
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  try {
    String jspFile=wrapper.getJspFile();
    if (jspFile != null) {
      request.setAttribute(Globals.JSP_FILE_ATTR,jspFile);
    }
    support.fireInstanceEvent(InstanceEvent.EventType.BEFORE_DISPATCH_EVENT,servlet,request,response);
    if (servlet != null) {
      if (reqFacHelper != null) {
        reqFacHelper.incrementDispatchDepth();
        if (reqFacHelper.isMaxDispatchDepthReached()) {
          throw new ServletException(sm.getString(""String_Node_Str"",new Object[]{Integer.valueOf(Request.getMaxDispatchDepth())}));
        }
      }
      if (filterChain != null) {
        filterChain.setWrapper((StandardWrapper)wrapper);
        filterChain.doFilter(request,response);
      }
 else {
        ((StandardWrapper)wrapper).service(request,response,servlet);
      }
    }
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
  }
 catch (  ClientAbortException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    ioException=e;
  }
catch (  IOException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    ioException=e;
  }
catch (  UnavailableException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=e;
    wrapper.unavailable(e);
  }
catch (  ServletException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    Throwable rootCause=StandardWrapper.getRootCause(e);
    if (!(rootCause instanceof ClientAbortException)) {
      log(sm.getString(""String_Node_Str"",wrapper.getName()),rootCause);
    }
    servletException=e;
  }
catch (  RuntimeException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    runtimeException=e;
  }
 finally {
    if (reqFacHelper != null) {
      reqFacHelper.decrementDispatchDepth();
    }
  }
  try {
    if (filterChain != null)     filterChain.release();
  }
 catch (  Throwable e) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",wrapper.getName()),e);
  }
  try {
    if (servlet != null) {
      wrapper.deallocate(servlet);
    }
  }
 catch (  ServletException e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=e;
  }
catch (  Throwable e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=new ServletException(sm.getString(""String_Node_Str"",wrapper.getName()),e);
  }
  if (oldCCL != null)   Thread.currentThread().setContextClassLoader(oldCCL);
  if (ioException != null)   throw ioException;
  if (servletException != null)   throw servletException;
  if (runtimeException != null)   throw runtimeException;
}","/** 
 * Ask the resource represented by this RequestDispatcher to process the associated request, and create (or append to) the associated response. <p> <strong>IMPLEMENTATION NOTE</strong>: This implementation assumes that no filters are applied to a forwarded or included resource, because they were already done for the original request.
 * @param request The servlet request we are processing
 * @param response The servlet response we are creating
 * @param crossContext true if the request dispatch is crossing contextboundaries, false otherwise
 * @param state the state of this ApplicationDispatcher
 * @throws IOException if an input/output error occurs
 * @throws ServletException if a servlet error occurs
 */
private void doInvoke(ServletRequest request,ServletResponse response,boolean crossContext,State state) throws IOException, ServletException {
  ClassLoader oldCCL=null;
  if (crossContext) {
    oldCCL=Thread.currentThread().getContextClassLoader();
    ClassLoader contextClassLoader=context.getLoader().getClassLoader();
    Thread.currentThread().setContextClassLoader(contextClassLoader);
  }
  HttpServletResponse hresponse=state.hresponse;
  Servlet servlet=null;
  IOException ioException=null;
  ServletException servletException=null;
  RuntimeException runtimeException=null;
  boolean unavailable=false;
  if (wrapper.isUnavailable()) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()));
    if (hresponse == null) {
      ;
    }
 else {
      long available=wrapper.getAvailable();
      if ((available > 0L) && (available < Long.MAX_VALUE))       hresponse.setDateHeader(""String_Node_Str"",available);
      hresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString(""String_Node_Str"",wrapper.getName()));
    }
    unavailable=true;
  }
  try {
    if (!unavailable) {
      servlet=wrapper.allocate();
    }
  }
 catch (  ServletException e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),StandardWrapper.getRootCause(e));
    servletException=e;
    servlet=null;
  }
catch (  Throwable e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=new ServletException(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servlet=null;
  }
  ApplicationFilterFactory factory=ApplicationFilterFactory.getInstance();
  ApplicationFilterChain filterChain=factory.createFilterChain(request,wrapper,servlet);
  InstanceSupport support=((StandardWrapper)wrapper).getInstanceSupport();
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  try {
    String jspFile=wrapper.getJspFile();
    if (jspFile != null) {
      request.setAttribute(Globals.JSP_FILE_ATTR,jspFile);
    }
    support.fireInstanceEvent(InstanceEvent.EventType.BEFORE_DISPATCH_EVENT,servlet,request,response);
    if (servlet != null) {
      if (reqFacHelper != null) {
        reqFacHelper.incrementDispatchDepth();
        if (reqFacHelper.isMaxDispatchDepthReached()) {
          throw new ServletException(sm.getString(""String_Node_Str"",new Object[]{Integer.valueOf(Request.getMaxDispatchDepth())}));
        }
      }
      if (filterChain != null) {
        filterChain.setWrapper((StandardWrapper)wrapper);
        filterChain.doFilter(request,response);
      }
 else {
        ((StandardWrapper)wrapper).service(request,response,servlet);
      }
    }
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
  }
 catch (  ClientAbortException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    ioException=e;
  }
catch (  IOException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    ioException=e;
  }
catch (  UnavailableException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=e;
    wrapper.unavailable(e);
  }
catch (  ServletException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    Throwable rootCause=StandardWrapper.getRootCause(e);
    if (!(rootCause instanceof ClientAbortException)) {
      log(sm.getString(""String_Node_Str"",wrapper.getName()),rootCause);
    }
    servletException=e;
  }
catch (  RuntimeException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    runtimeException=e;
  }
 finally {
    if (reqFacHelper != null) {
      reqFacHelper.decrementDispatchDepth();
    }
  }
  try {
    if (filterChain != null)     filterChain.release();
  }
 catch (  Throwable e) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",wrapper.getName()),e);
  }
  try {
    if (servlet != null) {
      wrapper.deallocate(servlet);
    }
  }
 catch (  ServletException e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=e;
  }
catch (  Throwable e) {
    log(sm.getString(""String_Node_Str"",wrapper.getName()),e);
    servletException=new ServletException(sm.getString(""String_Node_Str"",wrapper.getName()),e);
  }
  if (oldCCL != null)   Thread.currentThread().setContextClassLoader(oldCCL);
  if (ioException != null)   throw ioException;
  if (servletException != null)   throw servletException;
  if (runtimeException != null)   throw runtimeException;
}"
29467,"private void doDispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (DispatcherType.ASYNC != dispatcherType) {
    if (response.isCommitted()) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"");
      throw new IllegalStateException(sm.getString(""String_Node_Str""));
    }
    try {
      response.resetBuffer();
    }
 catch (    IllegalStateException e) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + e);
      throw e;
    }
  }
  if (DispatcherType.INCLUDE != dispatcherType) {
    DispatchTargetsInfo dtInfo=(DispatchTargetsInfo)request.getAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR);
    if (dtInfo == null) {
      dtInfo=new DispatchTargetsInfo();
      request.setAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR,dtInfo);
    }
    if (servletPath == null && pathInfo == null) {
      dtInfo.addDispatchTarget(wrapper.getServletName(),true);
    }
 else {
      dtInfo.addDispatchTarget(getCombinedPath(),false);
    }
  }
  State state=new State(request,response,dispatcherType);
  HttpServletRequest hrequest=null;
  if (request instanceof HttpServletRequest) {
    hrequest=(HttpServletRequest)request;
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  if ((hrequest == null) || (hresponse == null)) {
    wrapRequest(state);
    processRequest(request,response,state);
    unwrapRequest(state);
  }
 else   if ((servletPath == null) && (pathInfo == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.setRequestURI(hrequest.getRequestURI());
    wrequest.setContextPath(hrequest.getContextPath());
    wrequest.setServletPath(hrequest.getServletPath());
    wrequest.setPathInfo(hrequest.getPathInfo());
    wrequest.setQueryString(hrequest.getQueryString());
    processRequest(request,response,state);
    wrequest.recycle();
    unwrapRequest(state);
  }
 else {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    if ((DispatcherType.FORWARD == dispatcherType && hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) || (DispatcherType.ASYNC == dispatcherType && hrequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI) == null)) {
      wrequest.initSpecialAttributes(hrequest.getRequestURI(),hrequest.getContextPath(),hrequest.getServletPath(),hrequest.getPathInfo(),hrequest.getQueryString());
    }
    String targetContextPath=context.getPath();
    RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(wrequest);
    String originContextPath=null;
    if (reqFacHelper != null) {
      originContextPath=reqFacHelper.getContextPath(false);
    }
 else {
      originContextPath=wrequest.getContextPath();
    }
    if (originContextPath != null && originContextPath.equals(targetContextPath)) {
      targetContextPath=hrequest.getContextPath();
    }
    wrequest.setContextPath(targetContextPath);
    wrequest.setRequestURI(requestURI);
    wrequest.setServletPath(servletPath);
    wrequest.setPathInfo(pathInfo);
    if (queryString != null) {
      wrequest.setQueryString(queryString);
      wrequest.setQueryParams(queryString);
    }
    processRequest(request,response,state);
    wrequest.recycle();
    unwrapRequest(state);
  }
}","private void doDispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (DispatcherType.ASYNC != dispatcherType) {
    if (response.isCommitted()) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"");
      throw new IllegalStateException(sm.getString(""String_Node_Str""));
    }
    try {
      response.resetBuffer();
    }
 catch (    IllegalStateException e) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + e);
      throw e;
    }
  }
  if (DispatcherType.INCLUDE != dispatcherType) {
    DispatchTargetsInfo dtInfo=(DispatchTargetsInfo)request.getAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR);
    if (dtInfo == null) {
      dtInfo=new DispatchTargetsInfo();
      request.setAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR,dtInfo);
    }
    if (servletPath == null && pathInfo == null) {
      dtInfo.addDispatchTarget(wrapper.getServletName(),true);
    }
 else {
      dtInfo.addDispatchTarget(getCombinedPath(),false);
    }
  }
  State state=new State(request,response,dispatcherType);
  ServletRequest sr=wrapRequest(state);
  wrapResponse(state);
  HttpServletRequest hrequest=state.hrequest;
  HttpServletResponse hresponse=state.hresponse;
  if ((hrequest == null) || (hresponse == null)) {
    processRequest(request,response,state);
  }
 else   if ((servletPath == null) && (pathInfo == null)) {
    ApplicationHttpRequest wrequest=(ApplicationHttpRequest)sr;
    wrequest.setRequestURI(hrequest.getRequestURI());
    wrequest.setContextPath(hrequest.getContextPath());
    wrequest.setServletPath(hrequest.getServletPath());
    wrequest.setPathInfo(hrequest.getPathInfo());
    wrequest.setQueryString(hrequest.getQueryString());
    processRequest(request,response,state);
  }
 else {
    ApplicationHttpRequest wrequest=(ApplicationHttpRequest)sr;
    if ((DispatcherType.FORWARD == dispatcherType && hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) || (DispatcherType.ASYNC == dispatcherType && hrequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI) == null)) {
      wrequest.initSpecialAttributes(hrequest.getRequestURI(),hrequest.getContextPath(),hrequest.getServletPath(),hrequest.getPathInfo(),hrequest.getQueryString());
    }
    String targetContextPath=context.getPath();
    RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(wrequest);
    String originContextPath=null;
    if (reqFacHelper != null) {
      originContextPath=reqFacHelper.getContextPath(false);
    }
 else {
      originContextPath=wrequest.getContextPath();
    }
    if (originContextPath != null && originContextPath.equals(targetContextPath)) {
      targetContextPath=hrequest.getContextPath();
    }
    wrequest.setContextPath(targetContextPath);
    wrequest.setRequestURI(requestURI);
    wrequest.setServletPath(servletPath);
    wrequest.setPathInfo(pathInfo);
    if (queryString != null) {
      wrequest.setQueryString(queryString);
      wrequest.setQueryParams(queryString);
    }
    processRequest(request,response,state);
  }
  recycleRequestWrapper(state);
  unwrapRequest(state);
  unwrapResponse(state);
}"
29468,"/** 
 * Create and return a response wrapper that has been inserted in the appropriate spot in the response chain.
 */
private ServletResponse wrapResponse(State state){
  ServletResponse previous=null;
  ServletResponse current=state.outerResponse;
  while (current != null) {
    if (!(current instanceof ServletResponseWrapper))     break;
    if (current instanceof ApplicationHttpResponse)     break;
    if (current instanceof ApplicationResponse)     break;
    if (current instanceof org.apache.catalina.Response)     break;
    previous=current;
    current=((ServletResponseWrapper)current).getResponse();
  }
  ServletResponse wrapper=null;
  if ((current instanceof ApplicationHttpResponse) || (current instanceof HttpResponse) || (current instanceof HttpServletResponse))   wrapper=new ApplicationHttpResponse((HttpServletResponse)current,DispatcherType.INCLUDE == state.dispatcherType);
 else   wrapper=new ApplicationResponse(current,DispatcherType.INCLUDE == state.dispatcherType);
  if (previous == null)   state.outerResponse=wrapper;
 else   ((ServletResponseWrapper)previous).setResponse(wrapper);
  state.wrapResponse=wrapper;
  return (wrapper);
}","/** 
 * Create and return a response wrapper that has been inserted in the appropriate spot in the response chain.
 */
private ServletResponse wrapResponse(State state){
  ServletResponse previous=null;
  ServletResponse current=state.outerResponse;
  while (current != null) {
    if (state.hresponse == null && (current instanceof HttpServletResponse)) {
      state.hresponse=(HttpServletResponse)current;
      if (DispatcherType.INCLUDE != state.dispatcherType)       return null;
    }
    if (!(current instanceof ServletResponseWrapper))     break;
    if (current instanceof ApplicationHttpResponse)     break;
    if (current instanceof ApplicationResponse)     break;
    previous=current;
    current=((ServletResponseWrapper)current).getResponse();
  }
  ServletResponse wrapper=null;
  if ((current instanceof ApplicationHttpResponse) || (current instanceof HttpResponse) || (current instanceof HttpServletResponse))   wrapper=new ApplicationHttpResponse((HttpServletResponse)current,DispatcherType.INCLUDE == state.dispatcherType);
 else   wrapper=new ApplicationResponse(current,DispatcherType.INCLUDE == state.dispatcherType);
  if (previous == null)   state.outerResponse=wrapper;
 else   ((ServletResponseWrapper)previous).setResponse(wrapper);
  state.wrapResponse=wrapper;
  return (wrapper);
}"
29469,"/** 
 * Create and return a request wrapper that has been inserted in the appropriate spot in the request chain.
 */
private ApplicationHttpRequest wrapRequest(State state){
  ServletRequest previous=null;
  ServletRequest current=state.outerRequest;
  while (current != null) {
    if (""String_Node_Str"".equals(current.getClass().getName())) {
      break;
    }
    if (!(current instanceof ServletRequestWrapper)) {
      break;
    }
    if (current instanceof ApplicationHttpRequest) {
      break;
    }
    previous=current;
    current=((ServletRequestWrapper)current).getRequest();
  }
  HttpServletRequest hcurrent=(HttpServletRequest)current;
  boolean crossContext=!(context.getPath().equals(hcurrent.getContextPath()));
  crossContextFlag=Boolean.valueOf(crossContext);
  ApplicationHttpRequest wrapper=new ApplicationHttpRequest(hcurrent,context,crossContext,state.dispatcherType);
  if (previous == null) {
    state.outerRequest=wrapper;
  }
 else {
    ((ServletRequestWrapper)previous).setRequest(wrapper);
  }
  state.wrapRequest=wrapper;
  return wrapper;
}","/** 
 * Create and return a request wrapper that has been inserted in the appropriate spot in the request chain.
 */
private ServletRequest wrapRequest(State state){
  ServletRequest previous=null;
  ServletRequest current=state.outerRequest;
  while (current != null) {
    if (state.hrequest == null && (current instanceof HttpServletRequest)) {
      state.hrequest=(HttpServletRequest)current;
    }
    if (""String_Node_Str"".equals(current.getClass().getName())) {
      break;
    }
    if (!(current instanceof ServletRequestWrapper)) {
      break;
    }
    if (current instanceof ApplicationHttpRequest) {
      break;
    }
    if (current instanceof ApplicationRequest) {
      break;
    }
    previous=current;
    current=((ServletRequestWrapper)current).getRequest();
  }
  ServletRequest wrapper=null;
  if ((current instanceof ApplicationHttpRequest) || (current instanceof Request) || (current instanceof HttpServletRequest)) {
    HttpServletRequest hcurrent=(HttpServletRequest)current;
    boolean crossContext=false;
    if ((state.outerRequest instanceof ApplicationHttpRequest) || (state.outerRequest instanceof Request) || (state.outerRequest instanceof HttpServletRequest)) {
      HttpServletRequest houterRequest=(HttpServletRequest)state.outerRequest;
      Object contextPath=houterRequest.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH);
      if (contextPath == null) {
        contextPath=houterRequest.getContextPath();
      }
      crossContext=!(context.getPath().equals(contextPath));
    }
    crossContextFlag=Boolean.valueOf(crossContext);
    wrapper=new ApplicationHttpRequest(hcurrent,context,crossContext,state.dispatcherType);
  }
 else {
    wrapper=new ApplicationRequest(current);
  }
  if (previous == null) {
    state.outerRequest=wrapper;
  }
 else {
    ((ServletRequestWrapper)previous).setRequest(wrapper);
  }
  state.wrapRequest=wrapper;
  return wrapper;
}"
29470,"/** 
 * Get a target bundle descriptor based on an input bundle descriptor and a relative uri from the perspective of the input bundle descriptor.
 * @param origin            bundle descriptor within this application
 * @param relativeTargetUri relative uri from the given bundle descriptorto another bundle within the application.
 * @return target BundleDescriptor or null if not found.
 */
public BundleDescriptor getRelativeBundle(BundleDescriptor origin,String relativeTargetUri){
  String targetBundleUri=getTargetUri(origin,relativeTargetUri);
  BundleDescriptor targetBundle=null;
  if (targetBundleUri != null) {
    Descriptor module=getModuleByUri(targetBundleUri);
    targetBundle=(module instanceof BundleDescriptor) ? (BundleDescriptor)module : null;
  }
  return targetBundle;
}","/** 
 * Get a target bundle descriptor based on an input bundle descriptor and a relative uri from the perspective of the input bundle descriptor.
 * @param origin            bundle descriptor within this application
 * @param relativeTargetUri relative uri from the given bundle descriptorto another bundle within the application.
 * @return target BundleDescriptor or null if not found.
 */
public BundleDescriptor getRelativeBundle(BundleDescriptor origin,String relativeTargetUri){
  String targetBundleUri=getTargetUri(origin,relativeTargetUri);
  BundleDescriptor targetBundle=null;
  if (targetBundleUri != null) {
    targetBundle=getModuleByUri(targetBundleUri);
  }
  return targetBundle;
}"
29471,"/** 
 * Internal method. This method is used to find referenced PU with a given name. It does not accept null or empty unit name.
 * @param unitName
 * @return
 */
private PersistenceUnitDescriptor findReferencedPU0(String unitName){
  int separatorIndex=unitName.lastIndexOf(PERSISTENCE_UNIT_NAME_SEPARATOR);
  if (separatorIndex != -1) {
    String unqualifiedUnitName=unitName.substring(separatorIndex + 1);
    String path=unitName.substring(0,separatorIndex);
    String puRoot=getTargetUri(this,path);
    final PersistenceUnitsDescriptor pus=getApplication().getExtensionsDescriptors(PersistenceUnitsDescriptor.class,puRoot);
    if (pus != null) {
      for (      PersistenceUnitDescriptor pu : pus.getPersistenceUnitDescriptors()) {
        if (pu.getName().equals(unqualifiedUnitName)) {
          return pu;
        }
      }
    }
  }
 else {
    Map<String,PersistenceUnitDescriptor> visiblePUs=getVisiblePUs();
    PersistenceUnitDescriptor result=visiblePUs.get(unitName);
    if (result != null)     return result;
    int sameNamedEarScopedPUCount=0;
    for (    String s : visiblePUs.keySet()) {
      int idx=s.lastIndexOf(PERSISTENCE_UNIT_NAME_SEPARATOR);
      if (idx != -1 && s.substring(idx + 1).matches(unitName)) {
        result=visiblePUs.get(s);
        sameNamedEarScopedPUCount++;
      }
    }
    if (sameNamedEarScopedPUCount == 1) {
      return result;
    }
  }
  return null;
}","/** 
 * Internal method. This method is used to find referenced PU with a given name. It does not accept null or empty unit name.
 * @param unitName
 * @return
 */
private PersistenceUnitDescriptor findReferencedPU0(String unitName){
  int separatorIndex=unitName.lastIndexOf(PERSISTENCE_UNIT_NAME_SEPARATOR);
  if (separatorIndex != -1) {
    String unqualifiedUnitName=unitName.substring(separatorIndex + 1);
    String path=unitName.substring(0,separatorIndex);
    String puRoot=getTargetUri(this,path);
    final PersistenceUnitsDescriptor pus=getApplication().getExtensionsDescriptors(PersistenceUnitsDescriptor.class,puRoot);
    if (pus != null) {
      for (      PersistenceUnitDescriptor pu : pus.getPersistenceUnitDescriptors()) {
        if (pu.getName().equals(unqualifiedUnitName)) {
          return pu;
        }
      }
    }
  }
 else {
    Map<String,PersistenceUnitDescriptor> visiblePUs=getVisiblePUs();
    PersistenceUnitDescriptor result=visiblePUs.get(unitName);
    if (result != null)     return result;
    int sameNamedEarScopedPUCount=0;
    Set<Map.Entry<String,PersistenceUnitDescriptor>> entrySet=visiblePUs.entrySet();
    Iterator<Map.Entry<String,PersistenceUnitDescriptor>> entryIt=entrySet.iterator();
    while (entryIt.hasNext()) {
      Map.Entry<String,PersistenceUnitDescriptor> entry=entryIt.next();
      String s=entry.getKey();
      int idx=s.lastIndexOf(PERSISTENCE_UNIT_NAME_SEPARATOR);
      if (idx != -1 && s.substring(idx + 1).matches(unitName)) {
        result=entry.getValue();
        sameNamedEarScopedPUCount++;
      }
    }
    if (sameNamedEarScopedPUCount == 1) {
      return result;
    }
  }
  return null;
}"
29472,"/** 
 * get value for licenseRequired
 */
public String getLicenseRequiredValue(){
  if (licenseRequired.booleanValue() == true)   return new String(""String_Node_Str"");
 else   return new String(""String_Node_Str"");
}","/** 
 * get value for licenseRequired
 */
public String getLicenseRequiredValue(){
  if (licenseRequired.booleanValue() == true)   return ""String_Node_Str"";
 else   return ""String_Node_Str"";
}"
29473,"/** 
 * set value for licenseRequired
 */
public void setLicenseRequired(String licenseRequired){
  if (licenseRequired.equals(""String_Node_Str""))   this.licenseRequired=Boolean.TRUE;
 else   if (licenseRequired.equals(""String_Node_Str""))   this.licenseRequired=Boolean.FALSE;
 else   this.licenseRequired=Boolean.FALSE;
}","/** 
 * set value for licenseRequired
 */
public void setLicenseRequired(String licenseRequired){
  if (licenseRequired.equals(""String_Node_Str""))   this.licenseRequired=Boolean.TRUE;
 else   if (licenseRequired.equals(""String_Node_Str""))   this.licenseRequired=Boolean.FALSE;
}"
29474,"/** 
 * Load all configuration information from the mail resource node in server.xml for the JavaMail Session object within J2EE.
 */
private void loadMailResources(MailResourceIntf mailResource) throws Exception {
  if (mailResource == null) {
    _logger.log(Level.FINE,""String_Node_Str"" + mailResource);
    return;
  }
  jndiName=mailResource.getName();
  description=mailResource.getDescription();
  enabled=mailResource.isEnabled();
  storeProtocol=mailResource.getStoreProtocol();
  storeProtocolClass=mailResource.getStoreProtocolClass();
  transportProtocol=mailResource.getTransportProtocol();
  transportProtocolClass=mailResource.getTransportProtocolClass();
  mailHost=mailResource.getMailHost();
  username=mailResource.getUsername();
  mailFrom=mailResource.getMailFrom();
  debug=mailResource.isDebug();
  String storeProtocolClassName=MAIL_PREFIX + storeProtocol + MAIL_SUFFIX_CLASS;
  String transportProtocolClassName=MAIL_PREFIX + transportProtocol + MAIL_SUFFIX_CLASS;
  mailProperties.put(MAIL_STORE_PROTOCOL,storeProtocol);
  mailProperties.put(MAIL_TRANSPORT_PROTOCOL,transportProtocol);
  mailProperties.put(storeProtocolClassName,storeProtocolClass);
  mailProperties.put(transportProtocolClassName,transportProtocolClass);
  mailProperties.put(MAIL_FROM,mailFrom);
  mailProperties.put(MAIL_DEBUG,(debug ? ""String_Node_Str"" : ""String_Node_Str""));
  Set properties=mailResource.getProperties();
  ResourceProperty property=null;
  String name=null;
  String value=null;
  String protRelatedHostName=MAIL_PREFIX + storeProtocol + MAIL_SUFFIX_HOST;
  String protRelatedUserName=MAIL_PREFIX + storeProtocol + MAIL_SUFFIX_USER;
  for (Iterator it=properties.iterator(); it.hasNext(); ) {
    property=(ResourceProperty)it.next();
    name=property.getName();
    value=(String)property.getValue();
    if (name.startsWith(PROP_NAME_PREFIX_LEGACY)) {
      name=name.replace(PROP_NAME_DELIM_LEGACY,MAIL_DELIM);
    }
    if (name.startsWith(MAIL_PREFIX)) {
      if (name.equals(protRelatedHostName)) {
        mailHost=value;
      }
 else       if (name.equals(protRelatedUserName)) {
        username=value;
      }
      mailProperties.put(name,value);
    }
  }
  mailProperties.put(MAIL_HOST,mailHost);
  mailProperties.put(MAIL_USER,username);
}","/** 
 * Load all configuration information from the mail resource node in server.xml for the JavaMail Session object within J2EE.
 */
private void loadMailResources(MailResourceIntf mailResource) throws Exception {
  if (mailResource == null) {
    _logger.log(Level.FINE,""String_Node_Str"");
    return;
  }
  jndiName=mailResource.getName();
  description=mailResource.getDescription();
  enabled=mailResource.isEnabled();
  storeProtocol=mailResource.getStoreProtocol();
  storeProtocolClass=mailResource.getStoreProtocolClass();
  transportProtocol=mailResource.getTransportProtocol();
  transportProtocolClass=mailResource.getTransportProtocolClass();
  mailHost=mailResource.getMailHost();
  username=mailResource.getUsername();
  mailFrom=mailResource.getMailFrom();
  debug=mailResource.isDebug();
  String storeProtocolClassName=MAIL_PREFIX + storeProtocol + MAIL_SUFFIX_CLASS;
  String transportProtocolClassName=MAIL_PREFIX + transportProtocol + MAIL_SUFFIX_CLASS;
  mailProperties.put(MAIL_STORE_PROTOCOL,storeProtocol);
  mailProperties.put(MAIL_TRANSPORT_PROTOCOL,transportProtocol);
  mailProperties.put(storeProtocolClassName,storeProtocolClass);
  mailProperties.put(transportProtocolClassName,transportProtocolClass);
  mailProperties.put(MAIL_FROM,mailFrom);
  mailProperties.put(MAIL_DEBUG,(debug ? ""String_Node_Str"" : ""String_Node_Str""));
  Set properties=mailResource.getProperties();
  ResourceProperty property=null;
  String name=null;
  String value=null;
  String protRelatedHostName=MAIL_PREFIX + storeProtocol + MAIL_SUFFIX_HOST;
  String protRelatedUserName=MAIL_PREFIX + storeProtocol + MAIL_SUFFIX_USER;
  for (Iterator it=properties.iterator(); it.hasNext(); ) {
    property=(ResourceProperty)it.next();
    name=property.getName();
    value=(String)property.getValue();
    if (name.startsWith(PROP_NAME_PREFIX_LEGACY)) {
      name=name.replace(PROP_NAME_DELIM_LEGACY,MAIL_DELIM);
    }
    if (name.startsWith(MAIL_PREFIX)) {
      if (name.equals(protRelatedHostName)) {
        mailHost=value;
      }
 else       if (name.equals(protRelatedUserName)) {
        username=value;
      }
      mailProperties.put(name,value);
    }
  }
  mailProperties.put(MAIL_HOST,mailHost);
  mailProperties.put(MAIL_USER,username);
}"
29475,"public String getAppJndiName(){
  String modName=enclosingBundle.getModuleDescriptor().getModuleName();
  StringBuffer javaAppPrefix=new StringBuffer(""String_Node_Str"");
  javaAppPrefix.append(modName);
  javaAppPrefix.append(""String_Node_Str"");
  String componentName=isNamed() ? name : ""String_Node_Str"" + beanClassName;
  javaAppPrefix.append(componentName);
  return javaAppPrefix.toString();
}","public String getAppJndiName(){
  if (enclosingBundle == null)   return null;
  String modName=enclosingBundle.getModuleDescriptor().getModuleName();
  StringBuffer javaAppPrefix=new StringBuffer(""String_Node_Str"");
  javaAppPrefix.append(modName);
  javaAppPrefix.append(""String_Node_Str"");
  String componentName=isNamed() ? name : ""String_Node_Str"" + beanClassName;
  javaAppPrefix.append(componentName);
  return javaAppPrefix.toString();
}"
29476,"public String getGlobalJndiName(){
  String appName=null;
  Application app=enclosingBundle.getApplication();
  if (!app.isVirtual()) {
    appName=enclosingBundle.getApplication().getAppName();
  }
  String modName=enclosingBundle.getModuleDescriptor().getModuleName();
  StringBuffer javaGlobalPrefix=new StringBuffer(""String_Node_Str"");
  if (appName != null) {
    javaGlobalPrefix.append(appName);
    javaGlobalPrefix.append(""String_Node_Str"");
  }
  javaGlobalPrefix.append(modName);
  javaGlobalPrefix.append(""String_Node_Str"");
  String componentName=isNamed() ? name : ""String_Node_Str"" + beanClassName;
  javaGlobalPrefix.append(componentName);
  return javaGlobalPrefix.toString();
}","public String getGlobalJndiName(){
  String appName=null;
  if (enclosingBundle == null)   return null;
  Application app=enclosingBundle.getApplication();
  if (!app.isVirtual()) {
    appName=enclosingBundle.getApplication().getAppName();
  }
  String modName=enclosingBundle.getModuleDescriptor().getModuleName();
  StringBuffer javaGlobalPrefix=new StringBuffer(""String_Node_Str"");
  if (appName != null) {
    javaGlobalPrefix.append(appName);
    javaGlobalPrefix.append(""String_Node_Str"");
  }
  javaGlobalPrefix.append(modName);
  javaGlobalPrefix.append(""String_Node_Str"");
  String componentName=isNamed() ? name : ""String_Node_Str"" + beanClassName;
  javaGlobalPrefix.append(componentName);
  return javaGlobalPrefix.toString();
}"
29477,"private boolean stringArrayEquals(String[] s1,String[] s2){
  if (s1 == null && s2 == null) {
    return true;
  }
  if (s1 == null && s2 != null) {
    return false;
  }
  if (s2 == null && s1 != null) {
    return false;
  }
  if (s1.length == s2.length) {
    for (int i=0; i < s1.length; i++) {
      if (!s1[i].equals(s2[i])) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","private boolean stringArrayEquals(String[] s1,String[] s2){
  if (s1 == null && s2 == null) {
    return true;
  }
  if (s1 == null || s2 == null) {
    return false;
  }
  if (s1.length == s2.length) {
    for (int i=0; i < s1.length; i++) {
      if (!s1[i].equals(s2[i])) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}"
29478,"/** 
 * Performs a conversion from the style1 style2 and style3 (no interface symbol) to method descriptors of style3 with an interface symbol.
 */
public Vector doStyleConversion(EjbDescriptor ejbDescriptor,Collection allMethods){
  Vector v=new Vector();
  if (getStyle() == 1) {
    for (Iterator itr=allMethods.iterator(); itr.hasNext(); ) {
      MethodDescriptor next=(MethodDescriptor)itr.next();
      if (this.getEjbName() != null && this.getEjbName().length() > 0) {
        next.setEjbName(ejbDescriptor.getName());
      }
      if (!next.isExact()) {
      }
      if (this.getDescription() != null && this.getDescription().length() > 0) {
        next.setDescription(this.getDescription());
      }
      if (getEjbClassSymbol() == null) {
        v.addElement(next);
      }
 else       if (this.getEjbClassSymbol().equals(next.getEjbClassSymbol())) {
        v.addElement(next);
      }
    }
  }
 else   if (this.getParameterClassNames() == null) {
    v.addAll(this.getMethodDescriptorsOfName(this.getName(),allMethods));
  }
 else {
    if (getEjbClassSymbol() == null) {
      v.addAll(this.getMethodDescriptorsOfNameAndParameters(this.getName(),this.getParameterClassNames(),allMethods));
    }
 else {
      v.addElement(this);
    }
  }
  return v;
}","/** 
 * Performs a conversion from the style1 style2 and style3 (no interface symbol) to method descriptors of style3 with an interface symbol.
 */
public Vector doStyleConversion(EjbDescriptor ejbDescriptor,Collection allMethods){
  Vector v=new Vector();
  if (getStyle() == 1) {
    for (Iterator itr=allMethods.iterator(); itr.hasNext(); ) {
      MethodDescriptor next=(MethodDescriptor)itr.next();
      if (this.getEjbName() != null && this.getEjbName().length() > 0) {
        next.setEjbName(ejbDescriptor.getName());
      }
      if (this.getDescription() != null && this.getDescription().length() > 0) {
        next.setDescription(this.getDescription());
      }
      if (getEjbClassSymbol() == null) {
        v.addElement(next);
      }
 else       if (this.getEjbClassSymbol().equals(next.getEjbClassSymbol())) {
        v.addElement(next);
      }
    }
  }
 else   if (this.getParameterClassNames() == null) {
    v.addAll(this.getMethodDescriptorsOfName(this.getName(),allMethods));
  }
 else {
    if (getEjbClassSymbol() == null) {
      v.addAll(this.getMethodDescriptorsOfNameAndParameters(this.getName(),this.getParameterClassNames(),allMethods));
    }
 else {
      v.addElement(this);
    }
  }
  return v;
}"
29479,"public static String fixParamClassName(String param){
  if (param.charAt(0) == '[') {
    int dimensions=param.lastIndexOf('[') + 1;
    char code=param.charAt(dimensions);
    String newparam=null;
switch (code) {
case 'B':
      newparam=""String_Node_Str"";
    break;
case 'C':
  newparam=""String_Node_Str"";
break;
case 'D':
newparam=""String_Node_Str"";
break;
case 'F':
newparam=""String_Node_Str"";
break;
case 'I':
newparam=""String_Node_Str"";
break;
case 'J':
newparam=""String_Node_Str"";
break;
case 'S':
newparam=""String_Node_Str"";
break;
case 'Z':
newparam=""String_Node_Str"";
break;
case 'L':
newparam=param.substring(dimensions + 1);
}
for (int j=0; j < dimensions; j++) newparam+=""String_Node_Str"";
return newparam;
}
 else {
return param;
}
}","public static String fixParamClassName(String param){
  if (param.charAt(0) == '[') {
    int dimensions=param.lastIndexOf('[') + 1;
    char code=param.charAt(dimensions);
    String newparam=null;
switch (code) {
case 'B':
      newparam=""String_Node_Str"";
    break;
case 'C':
  newparam=""String_Node_Str"";
break;
case 'D':
newparam=""String_Node_Str"";
break;
case 'F':
newparam=""String_Node_Str"";
break;
case 'I':
newparam=""String_Node_Str"";
break;
case 'J':
newparam=""String_Node_Str"";
break;
case 'S':
newparam=""String_Node_Str"";
break;
case 'Z':
newparam=""String_Node_Str"";
break;
case 'L':
newparam=param.substring(dimensions + 1);
break;
default :
newparam=null;
}
StringBuffer buf=new StringBuffer();
buf.append(newparam);
for (int j=0; j < dimensions; j++) buf.append(""String_Node_Str"");
newparam=buf.toString();
return newparam;
}
 else {
return param;
}
}"
29480,"/** 
 * @return an ecluded method permission. Methods associated with such a method permission cannot be invoked by anyone.
 */
public static MethodPermission getExcludedMethodPermission(){
  if (excluded == null) {
    excluded=new MethodPermission();
    excluded.isExcluded=true;
  }
  return excluded;
}","/** 
 * @return an ecluded method permission. Methods associated with such a method permission cannot be invoked by anyone.
 */
public static synchronized MethodPermission getExcludedMethodPermission(){
  if (excluded == null) {
    excluded=new MethodPermission();
    excluded.isExcluded=true;
  }
  return excluded;
}"
29481,"/** 
 * @return an unchecked method permission. Methods associated with such a method permission can be invoked by anyone
 */
public static MethodPermission getUncheckedMethodPermission(){
  if (unchecked == null) {
    unchecked=new MethodPermission();
    unchecked.isUnchecked=true;
  }
  return unchecked;
}","/** 
 * @return an unchecked method permission. Methods associated with such a method permission can be invoked by anyone
 */
public static synchronized MethodPermission getUncheckedMethodPermission(){
  if (unchecked == null) {
    unchecked=new MethodPermission();
    unchecked.isUnchecked=true;
  }
  return unchecked;
}"
29482,"public static NamedReferencePair createEjbPair(EjbDescriptor referant,EjbDescriptor referee){
  return new NamedReferencePair((Descriptor)referant,referee,EJB);
}","public static NamedReferencePair createEjbPair(EjbDescriptor referant,EjbDescriptor referee){
  if (referant instanceof Descriptor)   return new NamedReferencePair((Descriptor)referant,referee,EJB);
 else   return null;
}"
29483,"/** 
 * @return the default version of the deployment descriptorloaded by this descriptor
 */
public String getDefaultSpecVersion(){
  return new String(""String_Node_Str"");
}","/** 
 * @return the default version of the deployment descriptorloaded by this descriptor
 */
public String getDefaultSpecVersion(){
  return ""String_Node_Str"";
}"
29484,"public HandlerChainContainer[] getHandlerChainContainers(boolean serviceSideHandlerChain,Class declaringClass){
  if (serviceSideHandlerChain) {
    return null;
  }
 else {
    List<ServiceReferenceDescriptor> result=new ArrayList<ServiceReferenceDescriptor>();
    result.addAll(getDescriptor().getServiceReferenceDescriptors());
    return (result.toArray(new HandlerChainContainer[0]));
  }
}","public HandlerChainContainer[] getHandlerChainContainers(boolean serviceSideHandlerChain,Class declaringClass){
  if (serviceSideHandlerChain) {
    return null;
  }
 else {
    List<ServiceReferenceDescriptor> result=new ArrayList<ServiceReferenceDescriptor>();
    result.addAll(getDescriptor().getServiceReferenceDescriptors());
    return (result.toArray(new HandlerChainContainer[result.size()]));
  }
}"
29485,"private void processParameters(Method method){
  Type[] paramTypes=method.getGenericParameterTypes();
  Annotation[][] paramAnnos=method.getParameterAnnotations();
  int paramCount=paramTypes.length;
  for (int i=0; i < paramCount; i++) {
    boolean processed=false;
    boolean isPathParam=false;
    Type paramType=paramTypes[i];
    for (    Annotation annotation : paramAnnos[i]) {
      if (PathParam.class.isAssignableFrom(annotation.getClass())) {
        isPathParam=true;
      }
      if (QueryParam.class.isAssignableFrom(annotation.getClass())) {
        queryParameters.add(new ParamMetadata(context,(Class<?>)paramType,((QueryParam)annotation).value(),paramAnnos[i]));
        processed=true;
      }
    }
    if (!processed && !isPathParam) {
      requestPayload=Util.getFirstGenericType(paramType);
    }
  }
}","private void processParameters(Method method){
  Type[] paramTypes=method.getGenericParameterTypes();
  Annotation[][] paramAnnos=method.getParameterAnnotations();
  int paramCount=paramTypes.length;
  for (int i=0; i < paramCount; i++) {
    boolean processed=false;
    boolean isPathParam=false;
    Type paramType=paramTypes[i];
    for (    Annotation annotation : paramAnnos[i]) {
      if (PathParam.class.isAssignableFrom(annotation.getClass())) {
        isPathParam=true;
      }
      if (QueryParam.class.isAssignableFrom(annotation.getClass())) {
        queryParameters.add(new ParamMetadata(context,(Class<?>)paramType,((QueryParam)annotation).value(),paramAnnos[i]));
        processed=true;
      }
    }
    if (!processed && !isPathParam) {
      requestPayload=Util.isGenericType(paramType) ? Util.getFirstGenericType(paramType) : (Class<?>)paramType;
    }
  }
}"
29486,"private void hasValidMapping(WebBundleDescriptor descriptor,String filterName){
  Enumeration filtermapperEnum=descriptor.getServletFilterMappingDescriptors().elements();
  if (filtermapperEnum.hasMoreElements()) {
    ServletFilterMappingDescriptor filterMapper=null;
    boolean mappingFound=false;
    do {
      filterMapper=(ServletFilterMappingDescriptor)filtermapperEnum.nextElement();
      String filterMapping=filterMapper.getName();
      mappingFound=filterName.equals(filterMapping);
    }
 while (!mappingFound && filtermapperEnum.hasMoreElements());
    if (mappingFound) {
      List<String> urlPatterns=filterMapper.getURLPatterns();
      for (      String url : urlPatterns) {
        if (!((url.startsWith(""String_Node_Str"")) || ((url.startsWith(""String_Node_Str"")) && (url.endsWith(""String_Node_Str""))) || (url.startsWith(""String_Node_Str"")))) {
          addErrorDetails(result,compName);
          result.failed(smh.getLocalString(getClass().getName() + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",new Object[]{filterName,url}));
        }
      }
      List<String> servletsInFilter=filterMapper.getServletNames();
      final String ALL_SERVLETS_NAME=""String_Node_Str"";
      servletsInFilter.remove(ALL_SERVLETS_NAME);
      List<String> servletsInWAR=new ArrayList<String>();
      if (servletsInFilter.size() > 0) {
        Set servletDescriptor=descriptor.getServletDescriptors();
        Iterator itr=servletDescriptor.iterator();
        while (itr.hasNext()) {
          WebComponentDescriptor servlet=(WebComponentDescriptor)itr.next();
          servletsInWAR.add(servlet.getCanonicalName());
        }
        if (!(servletsInWAR != null && servletsInWAR.containsAll(servletsInFilter))) {
          addErrorDetails(result,compName);
          result.failed(smh.getLocalString(getClass().getName() + ""String_Node_Str"",""String_Node_Str"",new Object[]{filterName}));
        }
      }
    }
  }
}","private void hasValidMapping(WebBundleDescriptor descriptor,String filterName){
  Enumeration filtermapperEnum=descriptor.getServletFilterMappingDescriptors().elements();
  if (filtermapperEnum.hasMoreElements()) {
    ServletFilterMappingDescriptor filterMapper=null;
    boolean mappingFound=false;
    do {
      filterMapper=(ServletFilterMappingDescriptor)filtermapperEnum.nextElement();
      String filterMapping=filterMapper.getName();
      mappingFound=filterName.equals(filterMapping);
    }
 while (!mappingFound && filtermapperEnum.hasMoreElements());
    if (mappingFound) {
      List<String> urlPatterns=filterMapper.getUrlPatterns();
      for (      String url : urlPatterns) {
        if (!((url.startsWith(""String_Node_Str"")) || ((url.startsWith(""String_Node_Str"")) && (url.endsWith(""String_Node_Str""))) || (url.startsWith(""String_Node_Str"")))) {
          addErrorDetails(result,compName);
          result.failed(smh.getLocalString(getClass().getName() + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",new Object[]{filterName,url}));
        }
      }
      List<String> servletsInFilter=filterMapper.getServletNames();
      final String ALL_SERVLETS_NAME=""String_Node_Str"";
      servletsInFilter.remove(ALL_SERVLETS_NAME);
      List<String> servletsInWAR=new ArrayList<String>();
      if (servletsInFilter.size() > 0) {
        Set servletDescriptor=descriptor.getServletDescriptors();
        Iterator itr=servletDescriptor.iterator();
        while (itr.hasNext()) {
          WebComponentDescriptor servlet=(WebComponentDescriptor)itr.next();
          servletsInWAR.add(servlet.getCanonicalName());
        }
        if (!(servletsInWAR != null && servletsInWAR.containsAll(servletsInFilter))) {
          addErrorDetails(result,compName);
          result.failed(smh.getLocalString(getClass().getName() + ""String_Node_Str"",""String_Node_Str"",new Object[]{filterName}));
        }
      }
    }
  }
}"
29487,"private void checkServletFilterMappings(WebBundleDescriptor descriptor,Result result,ComponentNameConstructor compName){
  for (Iterator iter=descriptor.getServletFilterMappings().iterator(); iter.hasNext(); ) {
    ServletFilterMapping filterMapping=(ServletFilterMapping)iter.next();
    if (filterMapping.getURLPatterns().size() > 0) {
      for (      String url : filterMapping.getURLPatterns())       checkUrlPatternAndSetResult(url,descriptor,result,compName);
    }
  }
}","private void checkServletFilterMappings(WebBundleDescriptor descriptor,Result result,ComponentNameConstructor compName){
  for (Iterator iter=descriptor.getServletFilterMappings().iterator(); iter.hasNext(); ) {
    ServletFilterMapping filterMapping=(ServletFilterMapping)iter.next();
    if (filterMapping.getUrlPatterns().size() > 0) {
      for (      String url : filterMapping.getUrlPatterns())       checkUrlPatternAndSetResult(url,descriptor,result,compName);
    }
  }
}"
29488,"/** 
 * Configures this web module with the filter mappings specified in the deployment descriptor.
 * @param sfm The filter mappings of this web module as specified in thedeployment descriptor
 */
@SuppressWarnings({""String_Node_Str""}) void addFilterMap(ServletFilterMapping sfm){
  FilterMaps filterMaps=new FilterMaps();
  filterMaps.setFilterName(sfm.getName());
  filterMaps.setDispatcherTypes(sfm.getDispatchers());
  List<String> servletNames=sfm.getServletNames();
  if (servletNames != null) {
    for (    String servletName : servletNames) {
      filterMaps.addServletName(servletName);
    }
  }
  List<String> urlPatterns=sfm.getURLPatterns();
  if (urlPatterns != null) {
    for (    String urlPattern : urlPatterns) {
      filterMaps.addURLPattern(urlPattern);
    }
  }
  addFilterMaps(filterMaps);
}","/** 
 * Configures this web module with the filter mappings specified in the deployment descriptor.
 * @param sfm The filter mappings of this web module as specified in thedeployment descriptor
 */
@SuppressWarnings({""String_Node_Str""}) void addFilterMap(ServletFilterMapping sfm){
  FilterMaps filterMaps=new FilterMaps();
  filterMaps.setFilterName(sfm.getName());
  filterMaps.setDispatcherTypes(sfm.getDispatchers());
  List<String> servletNames=sfm.getServletNames();
  if (servletNames != null) {
    for (    String servletName : servletNames) {
      filterMaps.addServletName(servletName);
    }
  }
  List<String> urlPatterns=sfm.getUrlPatterns();
  if (urlPatterns != null) {
    for (    String urlPattern : urlPatterns) {
      filterMaps.addURLPattern(urlPattern);
    }
  }
  addFilterMaps(filterMaps);
}"
29489,"private HandlerProcessingResult processAnnotation(AnnotationInfo ainfo,WebBundleDescriptor webBundleDesc) throws AnnotationProcessorException {
  Class filterClass=(Class)ainfo.getAnnotatedElement();
  if (!javax.servlet.Filter.class.isAssignableFrom(filterClass)) {
    log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{filterClass.getName(),WebFilter.class.getName(),javax.servlet.Filter.class.getName()}));
    return getDefaultFailedResult();
  }
  WebFilter webFilterAn=(WebFilter)ainfo.getAnnotation();
  String filterName=webFilterAn.filterName();
  if (filterName == null || filterName.length() == 0) {
    filterName=filterClass.getName();
  }
  ServletFilterDescriptor servletFilterDesc=null;
  for (  ServletFilter sfDesc : webBundleDesc.getServletFilters()) {
    if (filterName.equals(sfDesc.getName())) {
      servletFilterDesc=(ServletFilterDescriptor)sfDesc;
      break;
    }
  }
  if (servletFilterDesc == null) {
    servletFilterDesc=new ServletFilterDescriptor();
    servletFilterDesc.setName(filterName);
    webBundleDesc.addServletFilter(servletFilterDesc);
  }
 else {
    String filterImpl=servletFilterDesc.getClassName();
    if (filterImpl != null && filterImpl.length() > 0 && !filterImpl.equals(filterClass.getName())) {
      log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{filterName,filterImpl,filterClass.getName(),WebFilter.class.getName()}));
      return getDefaultFailedResult();
    }
  }
  servletFilterDesc.setClassName(filterClass.getName());
  if (servletFilterDesc.getDescription() == null || servletFilterDesc.getDescription().length() == 0) {
    servletFilterDesc.setDescription(webFilterAn.description());
  }
  if (servletFilterDesc.hasSetDisplayName()) {
    servletFilterDesc.setDisplayName(webFilterAn.displayName());
  }
  if (servletFilterDesc.getInitializationParameters().size() == 0) {
    WebInitParam[] initParams=webFilterAn.initParams();
    if (initParams != null && initParams.length > 0) {
      for (      WebInitParam initParam : initParams) {
        servletFilterDesc.addInitializationParameter(new EnvironmentProperty(initParam.name(),initParam.value(),initParam.description()));
      }
    }
  }
  if (servletFilterDesc.getSmallIconUri() == null) {
    servletFilterDesc.setSmallIconUri(webFilterAn.smallIcon());
  }
  if (servletFilterDesc.getLargeIconUri() == null) {
    servletFilterDesc.setLargeIconUri(webFilterAn.largeIcon());
  }
  if (servletFilterDesc.isAsyncSupported() == null) {
    servletFilterDesc.setAsyncSupported(webFilterAn.asyncSupported());
  }
  ServletFilterMapping servletFilterMappingDesc=null;
  boolean hasUrlPattern=false;
  boolean hasServletName=false;
  for (  ServletFilterMapping sfm : webBundleDesc.getServletFilterMappings()) {
    if (filterName.equals(sfm.getName())) {
      servletFilterMappingDesc=sfm;
      hasUrlPattern=hasUrlPattern || (sfm.getURLPatterns().size() > 0);
      hasServletName=hasServletName || (sfm.getServletNames().size() > 0);
    }
  }
  if (servletFilterMappingDesc == null) {
    servletFilterMappingDesc=new ServletFilterMappingDescriptor();
    servletFilterMappingDesc.setName(filterName);
    webBundleDesc.addServletFilterMapping(servletFilterMappingDesc);
  }
  if (!hasUrlPattern) {
    String[] urlPatterns=webFilterAn.urlPatterns();
    if (urlPatterns == null || urlPatterns.length == 0) {
      urlPatterns=webFilterAn.value();
    }
    boolean validUrlPatterns=true;
    if (urlPatterns != null && urlPatterns.length > 0) {
      for (      String up : urlPatterns) {
        if (!URLPattern.isValid(up)) {
          validUrlPatterns=false;
          break;
        }
        servletFilterMappingDesc.addURLPattern(up);
      }
    }
    if (!validUrlPatterns) {
      String urlPatternString=(urlPatterns != null) ? Arrays.toString(urlPatterns) : ""String_Node_Str"";
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",urlPatternString));
    }
  }
  if (!hasServletName) {
    String[] servletNames=webFilterAn.servletNames();
    if (servletNames != null && servletNames.length > 0) {
      for (      String sn : servletNames) {
        servletFilterMappingDesc.addServletName(sn);
      }
    }
  }
  if (servletFilterMappingDesc.getDispatchers().size() == 0) {
    DispatcherType[] dispatcherTypes=webFilterAn.dispatcherTypes();
    if (dispatcherTypes != null && dispatcherTypes.length > 0) {
      for (      DispatcherType dType : dispatcherTypes) {
        servletFilterMappingDesc.addDispatcher(dType.name());
      }
    }
  }
  return getDefaultProcessedResult();
}","private HandlerProcessingResult processAnnotation(AnnotationInfo ainfo,WebBundleDescriptor webBundleDesc) throws AnnotationProcessorException {
  Class filterClass=(Class)ainfo.getAnnotatedElement();
  if (!javax.servlet.Filter.class.isAssignableFrom(filterClass)) {
    log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{filterClass.getName(),WebFilter.class.getName(),javax.servlet.Filter.class.getName()}));
    return getDefaultFailedResult();
  }
  WebFilter webFilterAn=(WebFilter)ainfo.getAnnotation();
  String filterName=webFilterAn.filterName();
  if (filterName == null || filterName.length() == 0) {
    filterName=filterClass.getName();
  }
  ServletFilterDescriptor servletFilterDesc=null;
  for (  ServletFilter sfDesc : webBundleDesc.getServletFilters()) {
    if (filterName.equals(sfDesc.getName())) {
      servletFilterDesc=(ServletFilterDescriptor)sfDesc;
      break;
    }
  }
  if (servletFilterDesc == null) {
    servletFilterDesc=new ServletFilterDescriptor();
    servletFilterDesc.setName(filterName);
    webBundleDesc.addServletFilter(servletFilterDesc);
  }
 else {
    String filterImpl=servletFilterDesc.getClassName();
    if (filterImpl != null && filterImpl.length() > 0 && !filterImpl.equals(filterClass.getName())) {
      log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{filterName,filterImpl,filterClass.getName(),WebFilter.class.getName()}));
      return getDefaultFailedResult();
    }
  }
  servletFilterDesc.setClassName(filterClass.getName());
  if (servletFilterDesc.getDescription() == null || servletFilterDesc.getDescription().length() == 0) {
    servletFilterDesc.setDescription(webFilterAn.description());
  }
  if (servletFilterDesc.hasSetDisplayName()) {
    servletFilterDesc.setDisplayName(webFilterAn.displayName());
  }
  if (servletFilterDesc.getInitializationParameters().size() == 0) {
    WebInitParam[] initParams=webFilterAn.initParams();
    if (initParams != null && initParams.length > 0) {
      for (      WebInitParam initParam : initParams) {
        servletFilterDesc.addInitializationParameter(new EnvironmentProperty(initParam.name(),initParam.value(),initParam.description()));
      }
    }
  }
  if (servletFilterDesc.getSmallIconUri() == null) {
    servletFilterDesc.setSmallIconUri(webFilterAn.smallIcon());
  }
  if (servletFilterDesc.getLargeIconUri() == null) {
    servletFilterDesc.setLargeIconUri(webFilterAn.largeIcon());
  }
  if (servletFilterDesc.isAsyncSupported() == null) {
    servletFilterDesc.setAsyncSupported(webFilterAn.asyncSupported());
  }
  ServletFilterMapping servletFilterMappingDesc=null;
  boolean hasUrlPattern=false;
  boolean hasServletName=false;
  for (  ServletFilterMapping sfm : webBundleDesc.getServletFilterMappings()) {
    if (filterName.equals(sfm.getName())) {
      servletFilterMappingDesc=sfm;
      hasUrlPattern=hasUrlPattern || (sfm.getUrlPatterns().size() > 0);
      hasServletName=hasServletName || (sfm.getServletNames().size() > 0);
    }
  }
  if (servletFilterMappingDesc == null) {
    servletFilterMappingDesc=new ServletFilterMappingDescriptor();
    servletFilterMappingDesc.setName(filterName);
    webBundleDesc.addServletFilterMapping(servletFilterMappingDesc);
  }
  if (!hasUrlPattern) {
    String[] urlPatterns=webFilterAn.urlPatterns();
    if (urlPatterns == null || urlPatterns.length == 0) {
      urlPatterns=webFilterAn.value();
    }
    boolean validUrlPatterns=true;
    if (urlPatterns != null && urlPatterns.length > 0) {
      for (      String up : urlPatterns) {
        if (!URLPattern.isValid(up)) {
          validUrlPatterns=false;
          break;
        }
        servletFilterMappingDesc.addURLPattern(up);
      }
    }
    if (!validUrlPatterns) {
      String urlPatternString=(urlPatterns != null) ? Arrays.toString(urlPatterns) : ""String_Node_Str"";
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",urlPatternString));
    }
  }
  if (!hasServletName) {
    String[] servletNames=webFilterAn.servletNames();
    if (servletNames != null && servletNames.length > 0) {
      for (      String sn : servletNames) {
        servletFilterMappingDesc.addServletName(sn);
      }
    }
  }
  if (servletFilterMappingDesc.getDispatchers().size() == 0) {
    DispatcherType[] dispatcherTypes=webFilterAn.dispatcherTypes();
    if (dispatcherTypes != null && dispatcherTypes.length > 0) {
      for (      DispatcherType dType : dispatcherTypes) {
        servletFilterMappingDesc.addDispatcher(dType.name());
      }
    }
  }
  return getDefaultProcessedResult();
}"
29490,"public int hashCode(){
  int result=17;
  result=37 * result + getName().hashCode();
  result=37 * result + getServletNames().hashCode();
  result=37 * result + getURLPatterns().hashCode();
  return result;
}","public int hashCode(){
  int result=17;
  result=37 * result + getName().hashCode();
  result=37 * result + getServletNames().hashCode();
  result=37 * result + getUrlPatterns().hashCode();
  return result;
}"
29491,"/** 
 * compare equals 
 */
public boolean equals(Object obj){
  if (obj instanceof ServletFilterMapping) {
    ServletFilterMapping o=(ServletFilterMapping)obj;
    Set<DispatcherType> otherDispatchers=o.getDispatchers();
    boolean sameDispatchers=((dispatchers == null && (otherDispatchers == null || otherDispatchers.size() == 0)) || (dispatchers != null && dispatchers.equals(otherDispatchers)));
    if (this.getName().equals(o.getName()) && this.getServletNames().equals(o.getServletNames()) && this.getURLPatterns().equals(o.getURLPatterns())&& sameDispatchers) {
      return true;
    }
  }
  return false;
}","/** 
 * compare equals 
 */
public boolean equals(Object obj){
  if (obj instanceof ServletFilterMapping) {
    ServletFilterMapping o=(ServletFilterMapping)obj;
    Set<DispatcherType> otherDispatchers=o.getDispatchers();
    boolean sameDispatchers=((dispatchers == null && (otherDispatchers == null || otherDispatchers.size() == 0)) || (dispatchers != null && dispatchers.equals(otherDispatchers)));
    if (this.getName().equals(o.getName()) && this.getServletNames().equals(o.getServletNames()) && this.getUrlPatterns().equals(o.getUrlPatterns())&& sameDispatchers) {
      return true;
    }
  }
  return false;
}"
29492,"public void addURLPattern(String urlPattern){
  getURLPatterns().add(urlPattern);
}","public void addURLPattern(String urlPattern){
  getUrlPatterns().add(urlPattern);
}"
29493,"protected void combineServletFilterMappings(WebBundleDescriptor webBundleDescriptor){
  Map<String,ServletFilterMappingInfo> map=new HashMap<String,ServletFilterMappingInfo>();
  for (  ServletFilterMapping sfMapping : getServletFilterMappings()) {
    ServletFilterMappingInfo sfmInfo=map.get(sfMapping.getName());
    if (sfmInfo == null) {
      sfmInfo=new ServletFilterMappingInfo();
      sfmInfo.servletFilterMapping=sfMapping;
      map.put(sfMapping.getName(),sfmInfo);
    }
    if (!sfmInfo.hasMapping) {
      sfmInfo.hasMapping=(sfMapping.getServletNames().size() > 0 || sfMapping.getURLPatterns().size() > 0);
    }
    if (!sfmInfo.hasDispatcher) {
      sfmInfo.hasDispatcher=(sfMapping.getDispatchers().size() > 0);
    }
  }
  for (  ServletFilterMapping sfMapping : webBundleDescriptor.getServletFilterMappings()) {
    ServletFilterMappingInfo sfmInfo=map.get(sfMapping.getName());
    if (sfmInfo != null) {
      if (!sfmInfo.hasMapping) {
        sfmInfo.servletFilterMapping.getServletNames().addAll(sfMapping.getServletNames());
        sfmInfo.servletFilterMapping.getURLPatterns().addAll(sfMapping.getURLPatterns());
      }
      if (!sfmInfo.hasDispatcher) {
        sfmInfo.servletFilterMapping.getDispatchers().addAll(sfMapping.getDispatchers());
      }
    }
 else {
      addServletFilterMapping(sfMapping);
    }
  }
}","protected void combineServletFilterMappings(WebBundleDescriptor webBundleDescriptor){
  Map<String,ServletFilterMappingInfo> map=new HashMap<String,ServletFilterMappingInfo>();
  for (  ServletFilterMapping sfMapping : getServletFilterMappings()) {
    ServletFilterMappingInfo sfmInfo=map.get(sfMapping.getName());
    if (sfmInfo == null) {
      sfmInfo=new ServletFilterMappingInfo();
      sfmInfo.servletFilterMapping=sfMapping;
      map.put(sfMapping.getName(),sfmInfo);
    }
    if (!sfmInfo.hasMapping) {
      sfmInfo.hasMapping=(sfMapping.getServletNames().size() > 0 || sfMapping.getUrlPatterns().size() > 0);
    }
    if (!sfmInfo.hasDispatcher) {
      sfmInfo.hasDispatcher=(sfMapping.getDispatchers().size() > 0);
    }
  }
  for (  ServletFilterMapping sfMapping : webBundleDescriptor.getServletFilterMappings()) {
    ServletFilterMappingInfo sfmInfo=map.get(sfMapping.getName());
    if (sfmInfo != null) {
      if (!sfmInfo.hasMapping) {
        sfmInfo.servletFilterMapping.getServletNames().addAll(sfMapping.getServletNames());
        sfmInfo.servletFilterMapping.getUrlPatterns().addAll(sfMapping.getUrlPatterns());
      }
      if (!sfmInfo.hasDispatcher) {
        sfmInfo.servletFilterMapping.getDispatchers().addAll(sfMapping.getDispatchers());
      }
    }
 else {
      addServletFilterMapping(sfMapping);
    }
  }
}"
29494,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node in the DOM tree 
 * @param nodeName node name for the root element of this xml fragment
 * @param descriptor the descriptor to write
 * @return the DOM tree top node
 */
@Override public Node writeDescriptor(Node parent,String nodeName,ServletFilterMappingDescriptor descriptor){
  Node myNode=appendChild(parent,nodeName);
  appendTextChild(myNode,WebTagNames.FILTER_NAME,descriptor.getName());
  for (  String servletName : descriptor.getServletNames()) {
    appendTextChild(myNode,WebTagNames.SERVLET_NAME,servletName);
  }
  for (  String urlPattern : descriptor.getURLPatterns()) {
    appendTextChild(myNode,WebTagNames.URL_PATTERN,urlPattern);
  }
  for (  DispatcherType dispatcherType : descriptor.getDispatchers()) {
    appendTextChild(myNode,WebTagNames.DISPATCHER,dispatcherType.name());
  }
  return myNode;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node in the DOM tree 
 * @param nodeName node name for the root element of this xml fragment
 * @param descriptor the descriptor to write
 * @return the DOM tree top node
 */
@Override public Node writeDescriptor(Node parent,String nodeName,ServletFilterMappingDescriptor descriptor){
  Node myNode=appendChild(parent,nodeName);
  appendTextChild(myNode,WebTagNames.FILTER_NAME,descriptor.getName());
  for (  String servletName : descriptor.getServletNames()) {
    appendTextChild(myNode,WebTagNames.SERVLET_NAME,servletName);
  }
  for (  String urlPattern : descriptor.getUrlPatterns()) {
    appendTextChild(myNode,WebTagNames.URL_PATTERN,urlPattern);
  }
  for (  DispatcherType dispatcherType : descriptor.getDispatchers()) {
    appendTextChild(myNode,WebTagNames.DISPATCHER,dispatcherType.name());
  }
  return myNode;
}"
29495,"/** 
 * @return the descriptor instance to associate with this XMLNode
 */
@Override public CookieProperties getDescriptor(){
  if (descriptor == null) {
    descriptor=new CookieProperties();
  }
  return descriptor;
}","/** 
 * @return the descriptor instance to associate with this XMLNode
 */
@Override public CookieProperties getDescriptor(){
  if (descriptor == null) {
    descriptor=new CookieProperties();
  }
  return (CookieProperties)descriptor;
}"
29496,"public static void compile(File inWebDir,File outWebDir,WebBundleDescriptor wbd,String classpath,ServerContext serverContext) throws DeploymentException {
  JspC jspc=new JspC();
  if (classpath != null && classpath.length() > 0) {
    jspc.setClassPath(classpath);
  }
  String appName=wbd.getApplication().getName();
  String sysClassPath=ASClassLoaderUtil.getModuleClassPath(serverContext.getDefaultServices(),appName,null);
  jspc.setSystemClassPath(sysClassPath);
  verify(inWebDir,outWebDir);
  configureJspc(jspc,wbd);
  jspc.setOutputDir(outWebDir.getAbsolutePath());
  jspc.setUriroot(inWebDir.getAbsolutePath());
  jspc.setCompile(true);
  logger.info(startMessage);
  try {
    jspc.execute();
  }
 catch (  Exception je) {
    throw new DeploymentException(""String_Node_Str"" + je,je);
  }
 finally {
    String[] files=outWebDir.list();
    if (files == null || files.length <= 0) {
      if (!outWebDir.delete()) {
      }
    }
    logger.info(finishMessage);
  }
}","public static void compile(File inWebDir,File outWebDir,WebBundleDescriptor wbd,String classpath,ServerContext serverContext) throws DeploymentException {
  JspC jspc=new JspC();
  if (classpath != null && classpath.length() > 0) {
    jspc.setClassPath(classpath);
  }
  String appName=wbd.getApplication().getName();
  String sysClassPath=ASClassLoaderUtil.getModuleClassPath(serverContext.getDefaultServices(),appName,null);
  jspc.setSystemClassPath(sysClassPath);
  verify(inWebDir,outWebDir);
  configureJspc(jspc,wbd);
  jspc.setOutputDir(outWebDir.getAbsolutePath());
  jspc.setUriroot(inWebDir.getAbsolutePath());
  jspc.setCompile(true);
  logger.info(startMessage);
  try {
    jspc.execute();
  }
 catch (  Exception je) {
    throw new DeploymentException(""String_Node_Str"" + je,je);
  }
 finally {
    String[] files=outWebDir.list();
    if (files == null || files.length <= 0) {
      if (!outWebDir.delete()) {
        logger.fine(""String_Node_Str"" + outWebDir);
      }
    }
    logger.info(finishMessage);
  }
}"
29497,"private static void verify(File inWebDir,File outWebDir) throws DeploymentException {
  if (!FileUtils.safeIsDirectory(inWebDir)) {
    throw new DeploymentException(""String_Node_Str"" + inWebDir);
  }
  if (!FileUtils.safeIsDirectory(outWebDir)) {
    if (!outWebDir.mkdirs()) {
    }
    if (!FileUtils.safeIsDirectory(outWebDir)) {
      throw new DeploymentException(""String_Node_Str"" + outWebDir);
    }
  }
}","private static void verify(File inWebDir,File outWebDir) throws DeploymentException {
  if (!FileUtils.safeIsDirectory(inWebDir)) {
    throw new DeploymentException(""String_Node_Str"" + inWebDir);
  }
  if (!FileUtils.safeIsDirectory(outWebDir)) {
    if (!outWebDir.mkdirs()) {
      logger.fine(""String_Node_Str"" + outWebDir);
    }
    if (!FileUtils.safeIsDirectory(outWebDir)) {
      throw new DeploymentException(""String_Node_Str"" + outWebDir);
    }
  }
}"
29498,"public RestConfigChangeListener(ServiceLocator habitat,Reloader reload,ResourceConfig rc,ServerContext sc){
  this.r=reload;
  this.rc=rc;
  this.sc=sc;
  this.habitat=habitat;
  RestConfig target=ResourceUtil.getRestConfig(habitat);
  if (target != null) {
    ((ObservableBean)ConfigSupport.getImpl(target)).addListener(this);
  }
}","public RestConfigChangeListener(ServiceLocator habitat,Reloader reload,ResourceConfig rc,ServerContext sc){
  this.r=reload;
  this.sc=sc;
  RestConfig target=ResourceUtil.getRestConfig(habitat);
  if (target != null) {
    ((ObservableBean)ConfigSupport.getImpl(target)).addListener(this);
  }
}"
29499,"public UnprocessedChangeEvents changed(PropertyChangeEvent[] events){
  ClassLoader originalContextClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader apiClassLoader=sc.getCommonClassLoader();
    Thread.currentThread().setContextClassLoader(apiClassLoader);
    r.reload();
  }
  finally {
    Thread.currentThread().setContextClassLoader(originalContextClassLoader);
  }
  return null;
}","@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] events){
  ClassLoader originalContextClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader apiClassLoader=sc.getCommonClassLoader();
    Thread.currentThread().setContextClassLoader(apiClassLoader);
    r.reload();
  }
  finally {
    Thread.currentThread().setContextClassLoader(originalContextClassLoader);
  }
  return null;
}"
29500,"/** 
 * Locate and process all <code>RestModelExtension</code> metadata files
 * @param similarClass
 */
private void loadModelExtensionMetadata(Class<?> similarClass){
  try {
    Enumeration<URL> urls=similarClass.getClassLoader().getResources(""String_Node_Str"");
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));
      while (reader.ready()) {
        final String line=reader.readLine();
        if ((line == null) || line.isEmpty()) {
          continue;
        }
        if (line.charAt(0) != '#') {
          if (!line.contains(""String_Node_Str"")) {
            Logger.getLogger(CompositeUtil.class.getName()).log(Level.INFO,""String_Node_Str"",new String[]{""String_Node_Str"",line});
          }
          String[] entry=line.split(""String_Node_Str"");
          String base=entry[0];
          String ext=entry[1];
          List<String> list=modelExtensions.get(base);
          if (list == null) {
            list=new ArrayList<String>();
            modelExtensions.put(base,list);
          }
          list.add(ext);
        }
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,null,ex);
  }
}","/** 
 * Locate and process all <code>RestModelExtension</code> metadata files
 * @param similarClass
 */
private void loadModelExtensionMetadata(Class<?> similarClass){
  BufferedReader reader=null;
  try {
    Enumeration<URL> urls=similarClass.getClassLoader().getResources(""String_Node_Str"");
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      reader=new BufferedReader(new InputStreamReader(url.openStream()));
      while (reader.ready()) {
        final String line=reader.readLine();
        if ((line == null) || line.isEmpty()) {
          continue;
        }
        if (line.charAt(0) != '#') {
          if (!line.contains(""String_Node_Str"")) {
            Logger.getLogger(CompositeUtil.class.getName()).log(Level.INFO,""String_Node_Str"",new String[]{""String_Node_Str"",line});
          }
          String[] entry=line.split(""String_Node_Str"");
          String base=entry[0];
          String ext=entry[1];
          List<String> list=modelExtensions.get(base);
          if (list == null) {
            list=new ArrayList<String>();
            modelExtensions.put(base,list);
          }
          list.add(ext);
        }
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}"
29501,"public ParameterMap addToParameterMap(ParameterMap parameters,String basePath,Class<?> configBean,Object source){
  String name;
  Map<String,String> currentValues=Util.getCurrentValues(basePath,Globals.getDefaultHabitat());
  for (  Method cbMethod : configBean.getMethods()) {
    name=cbMethod.getName();
    if (name.startsWith(""String_Node_Str"")) {
      String getterName=""String_Node_Str"" + name.substring(3,4).toUpperCase() + name.substring(4);
      try {
        Method getter=source.getClass().getMethod(getterName);
        final String key=ResourceUtil.convertToXMLName(name.substring(3));
        Object value=null;
        try {
          value=getter.invoke(source);
        }
 catch (        Exception ex) {
          Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,null,ex);
        }
        if (value != null) {
          String currentValue=currentValues.get(basePath + key);
          if ((currentValue == null) || ""String_Node_Str"".equals(value) || (!currentValue.equals(value))) {
            parameters.add(""String_Node_Str"",basePath + ""String_Node_Str"" + key+ ""String_Node_Str""+ value);
          }
        }
      }
 catch (      NoSuchMethodException ex) {
        Logger.getLogger(CompositeUtil.class.getName()).log(Level.FINE,null,ex);
      }
    }
  }
  return parameters;
}","public ParameterMap addToParameterMap(ParameterMap parameters,String basePath,Class<?> configBean,Object source){
  String name;
  Map<String,String> currentValues=Util.getCurrentValues(basePath,Globals.getDefaultHabitat());
  for (  Method cbMethod : configBean.getMethods()) {
    name=cbMethod.getName();
    if (name.startsWith(""String_Node_Str"")) {
      String getterName=""String_Node_Str"" + name.substring(3,4).toUpperCase(Locale.getDefault()) + name.substring(4);
      try {
        Method getter=source.getClass().getMethod(getterName);
        final String key=ResourceUtil.convertToXMLName(name.substring(3));
        Object value=null;
        try {
          value=getter.invoke(source);
        }
 catch (        Exception ex) {
          Logger.getLogger(CompositeUtil.class.getName()).log(Level.SEVERE,null,ex);
        }
        if (value != null) {
          String currentValue=currentValues.get(basePath + key);
          if ((currentValue == null) || ""String_Node_Str"".equals(value) || (!currentValue.equals(value))) {
            parameters.add(""String_Node_Str"",basePath + ""String_Node_Str"" + key+ ""String_Node_Str""+ value);
          }
        }
      }
 catch (      NoSuchMethodException ex) {
        Logger.getLogger(CompositeUtil.class.getName()).log(Level.FINE,null,ex);
      }
    }
  }
  return parameters;
}"
29502,"private String getPropertyName(String name){
  return name.substring(0,1).toLowerCase() + name.substring(1);
}","private String getPropertyName(String name){
  return name.substring(0,1).toLowerCase(Locale.getDefault()) + name.substring(1);
}"
29503,"/** 
 * Convert the given <code>RestModel</code> encoded as JSON to a live Java Object.
 * @param modelClass The target <code>RestModel</code> type
 * @param json The json encoding of the object
 * @return
 */
public <T>T unmarshallClass(Class<T> modelClass,JSONObject json){
  try {
    T model=getModel(modelClass);
    for (    Method setter : getSetters(modelClass)) {
      String name=setter.getName();
      String attribute=name.substring(3,4).toLowerCase() + name.substring(4);
      Type param0=setter.getGenericParameterTypes()[0];
      if (json.has(attribute)) {
        java.lang.Object o=json.get(attribute);
        if (JSONArray.class.isAssignableFrom(o.getClass())) {
          JSONArray array=(JSONArray)o;
          List values=new ArrayList();
          Type type=Object.class;
          if (ParameterizedType.class.isAssignableFrom(param0.getClass())) {
            type=((ParameterizedType)param0).getActualTypeArguments()[0];
          }
          for (int i=0; i < array.length(); i++) {
            Object element=array.get(i);
            if (JSONObject.class.isAssignableFrom(element.getClass())) {
              values.add(unmarshallClass((Class)type,(JSONObject)element));
            }
 else {
              values.add(element);
            }
          }
          setter.invoke(model,values);
        }
 else         if (JSONObject.class.isAssignableFrom(o.getClass())) {
          setter.invoke(model,unmarshallClass(param0.getClass(),(JSONObject)o));
        }
 else {
          setter.invoke(model,o);
        }
      }
    }
    return model;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Convert the given <code>RestModel</code> encoded as JSON to a live Java Object.
 * @param modelClass The target <code>RestModel</code> type
 * @param json The json encoding of the object
 * @return
 */
public <T>T unmarshallClass(Class<T> modelClass,JSONObject json){
  try {
    T model=getModel(modelClass);
    for (    Method setter : getSetters(modelClass)) {
      String name=setter.getName();
      String attribute=name.substring(3,4).toLowerCase(Locale.getDefault()) + name.substring(4);
      Type param0=setter.getGenericParameterTypes()[0];
      if (json.has(attribute)) {
        java.lang.Object o=json.get(attribute);
        if (JSONArray.class.isAssignableFrom(o.getClass())) {
          JSONArray array=(JSONArray)o;
          List values=new ArrayList();
          Type type=Object.class;
          if (ParameterizedType.class.isAssignableFrom(param0.getClass())) {
            type=((ParameterizedType)param0).getActualTypeArguments()[0];
          }
          for (int i=0; i < array.length(); i++) {
            Object element=array.get(i);
            if (JSONObject.class.isAssignableFrom(element.getClass())) {
              values.add(unmarshallClass((Class)type,(JSONObject)element));
            }
 else {
              values.add(element);
            }
          }
          setter.invoke(model,values);
        }
 else         if (JSONObject.class.isAssignableFrom(o.getClass())) {
          setter.invoke(model,unmarshallClass(param0.getClass(),(JSONObject)o));
        }
 else {
          setter.invoke(model,o);
        }
      }
    }
    return model;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
29504,"private Class<?> defineClass(Class<?> similarClass,String className,byte[] classBytes) throws Exception {
  byte[] byteContent=classBytes;
  ProtectionDomain pd=similarClass.getProtectionDomain();
  java.lang.reflect.Method jm=null;
  for (  java.lang.reflect.Method jm2 : ClassLoader.class.getDeclaredMethods()) {
    if (jm2.getName().equals(""String_Node_Str"") && jm2.getParameterTypes().length == 5) {
      jm=jm2;
      break;
    }
  }
  if (jm == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final java.lang.reflect.Method clM=jm;
  try {
    java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction(){
      public java.lang.Object run() throws Exception {
        if (!clM.isAccessible()) {
          clM.setAccessible(true);
        }
        return null;
      }
    }
);
    Logger.getLogger(CompositeUtil.class.getName()).log(Level.FINE,""String_Node_Str"",className);
    final ClassLoader classLoader=similarClass.getClassLoader();
    try {
      Class<?> newClass=(Class<?>)clM.invoke(classLoader,className,byteContent,0,byteContent.length,pd);
    }
 catch (    Exception e) {
    }
    try {
      return classLoader.loadClass(className);
    }
 catch (    ClassNotFoundException cnfEx) {
      throw new RuntimeException(cnfEx);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}","private Class<?> defineClass(Class<?> similarClass,String className,byte[] classBytes) throws Exception {
  byte[] byteContent=classBytes;
  ProtectionDomain pd=similarClass.getProtectionDomain();
  java.lang.reflect.Method jm=null;
  for (  java.lang.reflect.Method jm2 : ClassLoader.class.getDeclaredMethods()) {
    if (jm2.getName().equals(""String_Node_Str"") && jm2.getParameterTypes().length == 5) {
      jm=jm2;
      break;
    }
  }
  if (jm == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final java.lang.reflect.Method clM=jm;
  try {
    java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction(){
      @Override public java.lang.Object run() throws Exception {
        if (!clM.isAccessible()) {
          clM.setAccessible(true);
        }
        return null;
      }
    }
);
    Logger.getLogger(CompositeUtil.class.getName()).log(Level.FINE,""String_Node_Str"",className);
    final ClassLoader classLoader=similarClass.getClassLoader();
    try {
      clM.invoke(classLoader,className,byteContent,0,byteContent.length,pd);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    try {
      return classLoader.loadClass(className);
    }
 catch (    ClassNotFoundException cnfEx) {
      throw new RuntimeException(cnfEx);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}"
29505,"/** 
 * This method will analyze the getters of the given class to determine its properties.  Currently, for simplicity's sake, only getters are checked.
 * @param clazz
 * @return
 * @throws JSONException
 */
private JSONObject getProperties(Class<?> clazz) throws JSONException {
  Map<String,ParamMetadata> map=new HashMap<String,ParamMetadata>();
  JSONObject props=new JSONObject();
  if (clazz.isInterface()) {
    Object model=CompositeUtil.instance().getModel(clazz);
    clazz=model.getClass();
  }
  for (  Class<?> ifaces : clazz.getInterfaces()) {
    for (    Method m : ifaces.getDeclaredMethods()) {
      String methodName=m.getName();
      if (methodName.startsWith(""String_Node_Str"")) {
        String propertyName=methodName.substring(3,4).toLowerCase() + methodName.substring(4);
        map.put(propertyName,new ParamMetadata(context,m.getReturnType(),propertyName,m.getAnnotations()));
      }
    }
  }
  for (  Map.Entry<String,ParamMetadata> entry : map.entrySet()) {
    props.put(entry.getKey(),entry.getValue().toJson());
  }
  return props;
}","/** 
 * This method will analyze the getters of the given class to determine its properties.  Currently, for simplicity's sake, only getters are checked.
 * @param clazz
 * @return
 * @throws JSONException
 */
private JSONObject getProperties(Class<?> clazz) throws JSONException {
  Map<String,ParamMetadata> map=new HashMap<String,ParamMetadata>();
  JSONObject props=new JSONObject();
  if (clazz.isInterface()) {
    Object model=CompositeUtil.instance().getModel(clazz);
    clazz=model.getClass();
  }
  for (  Class<?> ifaces : clazz.getInterfaces()) {
    for (    Method m : ifaces.getDeclaredMethods()) {
      String methodName=m.getName();
      if (methodName.startsWith(""String_Node_Str"")) {
        String propertyName=methodName.substring(3,4).toLowerCase(Locale.getDefault()) + methodName.substring(4);
        map.put(propertyName,new ParamMetadata(context,m.getReturnType(),propertyName,m.getAnnotations()));
      }
    }
  }
  for (  Map.Entry<String,ParamMetadata> entry : map.entrySet()) {
    props.put(entry.getKey(),entry.getValue().toJson());
  }
  return props;
}"
29506,"/** 
 * @param className Name of class to be generated
 * @param generationDir Absolute location where it needs to be generated
 * @param baseClassName
 * @param resourcePath
 */
public TextClassWriter(ServiceLocator habitat,File generationDir,String className,String baseClassName,String resourcePath) throws IOException {
  this.habitat=habitat;
  File file=new File(generationDir,className + ""String_Node_Str"");
  boolean success=file.createNewFile();
  if (!success) {
    file=new File(generationDir,className + Long.toString(System.currentTimeMillis()) + ""String_Node_Str"");
    file.createNewFile();
  }
  FileWriter fstream=new FileWriter(file);
  writer=new BufferedWriter(fstream);
  writeCopyRightHeader();
  writePackageHeader();
  writeImportStatements();
  if (resourcePath != null) {
    writer.write(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"" + className + ""String_Node_Str""+ baseClassName+ ""String_Node_Str"");
}","/** 
 * @param className Name of class to be generated
 * @param generationDir Absolute location where it needs to be generated
 * @param baseClassName
 * @param resourcePath
 */
public TextClassWriter(ServiceLocator habitat,File generationDir,String className,String baseClassName,String resourcePath) throws IOException {
  this.habitat=habitat;
  File file=new File(generationDir,className + ""String_Node_Str"");
  boolean success=file.createNewFile();
  if (!success) {
    file=new File(generationDir,className + Long.toString(System.currentTimeMillis()) + ""String_Node_Str"");
    if (!file.createNewFile()) {
      throw new IOException(""String_Node_Str"" + file.getAbsolutePath());
    }
  }
  FileWriter fstream=new FileWriter(file);
  writer=new BufferedWriter(fstream);
  writeCopyRightHeader();
  writePackageHeader();
  writeImportStatements();
  if (resourcePath != null) {
    writer.write(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"" + className + ""String_Node_Str""+ baseClassName+ ""String_Node_Str"");
}"
29507,"private void createJar(String fileName,String ext){
  JarOutputStream target=null;
  try {
    File jarDir=Util.createTempDirectory();
    File jarFile=new File(jarDir,fileName);
    jarFile.createNewFile();
    jarFile.deleteOnExit();
    target=new JarOutputStream(new FileOutputStream(jarFile));
    addFiles(baseDirectory,target,ext);
    target.close();
    artifacts.put(jarFile.getName(),jarFile.toURI());
  }
 catch (  Exception ex) {
    Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (target != null) {
        target.close();
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","private void createJar(String fileName,String ext){
  JarOutputStream target=null;
  try {
    File jarDir=Util.createTempDirectory();
    File jarFile=new File(jarDir,fileName);
    if (!jarFile.createNewFile()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    jarFile.deleteOnExit();
    target=new JarOutputStream(new FileOutputStream(jarFile));
    addFiles(baseDirectory,target,ext);
    target.close();
    artifacts.put(jarFile.getName(),jarFile.toURI());
  }
 catch (  Exception ex) {
    Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (target != null) {
        target.close();
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}"
29508,"@Override public void done(){
  File classFile=new File(packageDir,className.toLowerCase(Locale.getDefault()) + ""String_Node_Str"");
  BufferedWriter writer=null;
  try {
    try {
      classFile.createNewFile();
      classFile.deleteOnExit();
      writer=new BufferedWriter(new FileWriter(classFile));
      writer.append(source.toString());
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}","@Override public void done(){
  File classFile=new File(packageDir,className.toLowerCase(Locale.getDefault()) + ""String_Node_Str"");
  BufferedWriter writer=null;
  try {
    try {
      if (!classFile.createNewFile()) {
        throw new RuntimeException(""String_Node_Str"");
      }
      classFile.deleteOnExit();
      writer=new BufferedWriter(new FileWriter(classFile));
      writer.append(source.toString());
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}"
29509,"@Override public Map<String,URI> getArtifact(){
  ZipOutputStream zip=null;
  Map<String,URI> artifacts=new HashMap<String,URI>();
  try {
    String ZIP_BASE_DIR=""String_Node_Str"".replace(""String_Node_Str"",Version.getVersionNumber());
    String ZIP_GF_PACKAGE_DIR=ZIP_BASE_DIR + ""String_Node_Str"";
    String ZIP_REST_PACKAGE_DIR=ZIP_GF_PACKAGE_DIR + ""String_Node_Str"";
    File zipDir=Util.createTempDirectory();
    File zipFile=new File(zipDir,ARTIFACT_NAME + ""String_Node_Str"" + versionString+ ""String_Node_Str"");
    zipFile.createNewFile();
    zipFile.deleteOnExit();
    zip=new ZipOutputStream(new FileOutputStream(zipFile));
    add(ZIP_GF_PACKAGE_DIR,""String_Node_Str"",new ByteArrayInputStream(""String_Node_Str"".getBytes()),zip);
    add(ZIP_BASE_DIR,""String_Node_Str"",new ByteArrayInputStream(getFileContents(""String_Node_Str"").getBytes()),zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    for (    File file : baseDirectory.listFiles()) {
      add(ZIP_REST_PACKAGE_DIR,file,zip);
    }
    artifacts.put(zipFile.getName(),zipFile.toURI());
    Util.deleteDirectory(baseDirectory);
  }
 catch (  Exception ex) {
    Logger.getLogger(PythonClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    if (zip != null) {
      try {
        zip.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(PythonClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
  return artifacts;
}","@Override public Map<String,URI> getArtifact(){
  ZipOutputStream zip=null;
  Map<String,URI> artifacts=new HashMap<String,URI>();
  try {
    String ZIP_BASE_DIR=""String_Node_Str"".replace(""String_Node_Str"",Version.getVersionNumber());
    String ZIP_GF_PACKAGE_DIR=ZIP_BASE_DIR + ""String_Node_Str"";
    String ZIP_REST_PACKAGE_DIR=ZIP_GF_PACKAGE_DIR + ""String_Node_Str"";
    File zipDir=Util.createTempDirectory();
    File zipFile=new File(zipDir,ARTIFACT_NAME + ""String_Node_Str"" + versionString+ ""String_Node_Str"");
    if (!zipFile.createNewFile()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    zipFile.deleteOnExit();
    zip=new ZipOutputStream(new FileOutputStream(zipFile));
    add(ZIP_GF_PACKAGE_DIR,""String_Node_Str"",new ByteArrayInputStream(""String_Node_Str"".getBytes()),zip);
    add(ZIP_BASE_DIR,""String_Node_Str"",new ByteArrayInputStream(getFileContents(""String_Node_Str"").getBytes()),zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    addFileFromClasspath(ZIP_REST_PACKAGE_DIR,""String_Node_Str"",zip);
    for (    File file : baseDirectory.listFiles()) {
      add(ZIP_REST_PACKAGE_DIR,file,zip);
    }
    artifacts.put(zipFile.getName(),zipFile.toURI());
    Util.deleteDirectory(baseDirectory);
  }
 catch (  Exception ex) {
    Logger.getLogger(PythonClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    if (zip != null) {
      try {
        zip.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(PythonClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
  return artifacts;
}"
29510,"protected JSONObject getJsonForRestModel(RestModel model){
  JSONObject result=new JSONObject();
  for (  Method m : model.getClass().getDeclaredMethods()) {
    if (m.getName().startsWith(""String_Node_Str"")) {
      String propName=m.getName().substring(3);
      propName=propName.substring(0,1).toLowerCase() + propName.substring(1);
      try {
        result.put(propName,getJsonObject(m.invoke(model)));
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}","protected JSONObject getJsonForRestModel(RestModel model){
  JSONObject result=new JSONObject();
  for (  Method m : model.getClass().getDeclaredMethods()) {
    if (m.getName().startsWith(""String_Node_Str"")) {
      String propName=m.getName().substring(3);
      propName=propName.substring(0,1).toLowerCase(Locale.getDefault()) + propName.substring(1);
      try {
        result.put(propName,getJsonObject(m.invoke(model)));
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}"
29511,"private CommandModel getCommandModel(CommandName commandName) throws WebApplicationException {
  CommandRunner cr=getCommandRunner();
  CommandModel model=cr.getModel(commandName.getScope(),commandName.getName(),logger);
  if (model == null) {
    RestActionReporter ar=new RestActionReporter();
    AdminCommand cmd=cr.getCommand(commandName.getScope(),commandName.getName(),ar,logger);
    if (ar.hasFailures()) {
      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity(ar.getCombinedMessage()).build());
    }
 else {
      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).build());
    }
  }
  return model;
}","private CommandModel getCommandModel(CommandName commandName) throws WebApplicationException {
  CommandRunner cr=getCommandRunner();
  CommandModel model=cr.getModel(commandName.getScope(),commandName.getName(),logger);
  if (model == null) {
    RestActionReporter ar=new RestActionReporter();
    if (ar.hasFailures()) {
      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity(ar.getCombinedMessage()).build());
    }
 else {
      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).build());
    }
  }
  return model;
}"
29512,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(EventChannel.SERVER_SENT_EVENTS) public Response execCommandMultInSseOut(@PathParam(""String_Node_Str"") String command,@HeaderParam(RemoteAdminCommand.COMMAND_MODEL_MATCH_HEADER) String modelETag,@CookieParam(SESSION_COOKIE_NAME) Cookie jSessionId,FormDataMultiPart mp){
  CommandName commandName=new CommandName(normalizeCommandName(command));
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  ParameterMap data=new ParameterMap();
  Payload.Inbound inbound=RestPayloadImpl.Inbound.parseFromFormDataMultipart(mp,data);
  return executeSseCommand(commandName,null,data,modelETag,jSessionId);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(EventChannel.SERVER_SENT_EVENTS) public Response execCommandMultInSseOut(@PathParam(""String_Node_Str"") String command,@HeaderParam(RemoteAdminCommand.COMMAND_MODEL_MATCH_HEADER) String modelETag,@CookieParam(SESSION_COOKIE_NAME) Cookie jSessionId,FormDataMultiPart mp){
  CommandName commandName=new CommandName(normalizeCommandName(command));
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  ParameterMap data=new ParameterMap();
  return executeSseCommand(commandName,null,data,modelETag,jSessionId);
}"
29513,"public static File createTempDirectory(){
  File baseTempDir=new File(System.getProperty(JAVA_IO_TMPDIR));
  File tempDir=new File(baseTempDir,Long.toString(System.currentTimeMillis()));
  tempDir.mkdirs();
  tempDir.deleteOnExit();
  return tempDir;
}","public static File createTempDirectory(){
  File baseTempDir=new File(System.getProperty(JAVA_IO_TMPDIR));
  File tempDir=new File(baseTempDir,Long.toString(System.currentTimeMillis()));
  if (!tempDir.mkdirs()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  tempDir.deleteOnExit();
  return tempDir;
}"
29514,"/** 
 * <p> This method uploads a file temp directory</p> <p> Input value: ""file"" -- Type: <code>com.sun.webui.jsf.model.UploadedFile</code></p> <p> Output value: ""uploadDir"" -- Type: <code>java.lang.String</code></p>
 * @param handlerCtx	The HandlerContext.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=UploadedFile.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class),@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void uploadFileToTempDir(HandlerContext handlerCtx){
  Logger logger=GuiUtil.getLogger();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
  }
  UploadedFile uploadedFile=(UploadedFile)handlerCtx.getInputValue(""String_Node_Str"");
  File tmpFile=null;
  String uploadTmpFile=""String_Node_Str"";
  if (uploadedFile != null) {
    String name=uploadedFile.getOriginalName();
    logger.info(""String_Node_Str"" + name);
    int lastIndex=name.lastIndexOf(""String_Node_Str"");
    if (lastIndex != -1) {
      name=name.substring(lastIndex + 1,name.length());
    }
    int index=name.indexOf(""String_Node_Str"");
    if (index <= 0) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ index);
      String mesg=GuiUtil.getMessage(""String_Node_Str"");
      GuiUtil.handleError(handlerCtx,mesg);
      return;
    }
    String suffix=name.substring(index);
    String prefix=name.substring(0,index);
    handlerCtx.setOutputValue(""String_Node_Str"",prefix);
    try {
      if (prefix.length() <= 2) {
        prefix=prefix + new Random().nextInt(100000);
      }
      tmpFile=File.createTempFile(prefix,suffix);
      tmpFile.deleteOnExit();
      logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      uploadedFile.write(tmpFile);
      logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      uploadTmpFile=tmpFile.getCanonicalPath();
    }
 catch (    IOException ioex) {
      try {
        uploadTmpFile=tmpFile.getAbsolutePath();
      }
 catch (      Exception ex) {
      }
    }
catch (    Exception ex) {
      GuiUtil.handleException(handlerCtx,ex);
    }
  }
  logger.fine(GuiUtil.getCommonMessage(""String_Node_Str"") + uploadTmpFile);
  handlerCtx.setOutputValue(""String_Node_Str"",uploadTmpFile);
}","/** 
 * <p> This method uploads a file temp directory</p> <p> Input value: ""file"" -- Type: <code>com.sun.webui.jsf.model.UploadedFile</code></p> <p> Output value: ""uploadDir"" -- Type: <code>java.lang.String</code></p>
 * @param handlerCtx	The HandlerContext.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=UploadedFile.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class),@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void uploadFileToTempDir(HandlerContext handlerCtx){
  Logger logger=GuiUtil.getLogger();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
  }
  UploadedFile uploadedFile=(UploadedFile)handlerCtx.getInputValue(""String_Node_Str"");
  File tmpFile=null;
  String uploadTmpFile=""String_Node_Str"";
  if (uploadedFile != null) {
    String name=uploadedFile.getOriginalName();
    logger.info(""String_Node_Str"" + name);
    int lastIndex=name.lastIndexOf(""String_Node_Str"");
    if (lastIndex != -1) {
      name=name.substring(lastIndex + 1,name.length());
    }
    int index=name.indexOf(""String_Node_Str"");
    if (index <= 0) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ index);
      String mesg=GuiUtil.getMessage(""String_Node_Str"");
      GuiUtil.handleError(handlerCtx,mesg);
      return;
    }
    String suffix=name.substring(index);
    String prefix=name.substring(0,index);
    handlerCtx.setOutputValue(""String_Node_Str"",prefix);
    try {
      if (prefix.length() <= 2) {
        prefix=prefix + new Random().nextInt(100000);
      }
      tmpFile=File.createTempFile(prefix,suffix);
      tmpFile.deleteOnExit();
      logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      uploadedFile.write(tmpFile);
      logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      uploadTmpFile=tmpFile.getCanonicalPath();
    }
 catch (    IOException ioex) {
      try {
        if (tmpFile != null) {
          uploadTmpFile=tmpFile.getAbsolutePath();
        }
      }
 catch (      Exception ex) {
      }
    }
catch (    Exception ex) {
      GuiUtil.handleException(handlerCtx,ex);
    }
  }
  logger.fine(GuiUtil.getCommonMessage(""String_Node_Str"") + uploadTmpFile);
  handlerCtx.setOutputValue(""String_Node_Str"",uploadTmpFile);
}"
29515,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Option[].class)}) public static void convertListToOptionArray(HandlerContext handlerCtx){
  List<String> list=(List)handlerCtx.getInputValue(""String_Node_Str"");
  if (list == null || list.isEmpty()) {
    handlerCtx.setOutputValue(""String_Node_Str"",new Option[0]);
    return;
  }
  handlerCtx.setOutputValue(""String_Node_Str"",SunOptionUtil.getOptionsArray(list.toArray(new String[0])));
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Option[].class)}) public static void convertListToOptionArray(HandlerContext handlerCtx){
  List<String> list=(List)handlerCtx.getInputValue(""String_Node_Str"");
  if (list == null || list.isEmpty()) {
    handlerCtx.setOutputValue(""String_Node_Str"",new Option[0]);
    return;
  }
  handlerCtx.setOutputValue(""String_Node_Str"",SunOptionUtil.getOptionsArray(list.toArray(new String[list.size()])));
}"
29516,"private void createThreadPools(org.glassfish.grizzly.config.dom.ThreadPool threadpoolBean,int index){
  String threadpoolId=null;
  String minThreadsValue, maxThreadsValue, timeoutValue;
  int minThreads=DEFAULT_MIN_THREAD_COUNT;
  int maxThreads=DEFAULT_MAX_THREAD_COUNT;
  int idleTimeoutInSeconds=120000;
  try {
    threadpoolId=threadpoolBean.getName();
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
    }
  }
  try {
    minThreadsValue=threadpoolBean.getMinThreadPoolSize();
    minThreads=Integer.parseInt(minThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
  try {
    maxThreadsValue=threadpoolBean.getMaxThreadPoolSize();
    maxThreads=Integer.parseInt(maxThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
  try {
    timeoutValue=threadpoolBean.getIdleThreadTimeoutSeconds();
    idleTimeoutInSeconds=Integer.parseInt(timeoutValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
  ThreadPoolFactory threadPoolFactory=new ThreadPoolFactory();
  ThreadPool threadpool=threadPoolFactory.create(minThreads,maxThreads,idleTimeoutInSeconds * 1000,threadpoolId,_iiopUtils.getCommonClassLoader());
  threadpoolList.add(threadpool);
  idToIndexTable.put(threadpoolId,new Integer(index));
  indexToIdTable.put(new Integer(index),threadpoolId);
}","private void createThreadPools(org.glassfish.grizzly.config.dom.ThreadPool threadpoolBean,int index){
  String threadpoolId=null;
  String minThreadsValue, maxThreadsValue, timeoutValue;
  int minThreads=DEFAULT_MIN_THREAD_COUNT;
  int maxThreads=DEFAULT_MAX_THREAD_COUNT;
  int idleTimeoutInSeconds=120000;
  try {
    threadpoolId=threadpoolBean.getName();
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
    }
  }
  try {
    minThreadsValue=threadpoolBean.getMinThreadPoolSize();
    minThreads=Integer.parseInt(minThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + minThreads);
    }
  }
  try {
    maxThreadsValue=threadpoolBean.getMaxThreadPoolSize();
    maxThreads=Integer.parseInt(maxThreadsValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + maxThreads);
    }
  }
  try {
    timeoutValue=threadpoolBean.getIdleThreadTimeoutSeconds();
    idleTimeoutInSeconds=Integer.parseInt(timeoutValue);
  }
 catch (  NullPointerException npe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",npe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
catch (  NumberFormatException nfe) {
    if (_logger.isLoggable(Level.WARNING)) {
      _logger.log(Level.WARNING,""String_Node_Str"",nfe);
      _logger.log(Level.WARNING,""String_Node_Str"" + idleTimeoutInSeconds);
    }
  }
  ThreadPoolFactory threadPoolFactory=new ThreadPoolFactory();
  ThreadPool threadpool=threadPoolFactory.create(minThreads,maxThreads,idleTimeoutInSeconds * 1000L,threadpoolId,_iiopUtils.getCommonClassLoader());
  threadpoolList.add(threadpool);
  idToIndexTable.put(threadpoolId,Integer.valueOf(index));
  indexToIdTable.put(Integer.valueOf(index),threadpoolId);
}"
29517,"S1ASThreadPoolManager(){
  try {
    _iiopUtils=Globals.getDefaultHabitat().getByType(IIOPUtils.class);
    Collection<org.glassfish.grizzly.config.dom.ThreadPool> tpCol=_iiopUtils.getAllThreadPools();
    org.glassfish.grizzly.config.dom.ThreadPool[] allThreadPools=tpCol.toArray(new org.glassfish.grizzly.config.dom.ThreadPool[tpCol.size()]);
    for (int i=0; i < allThreadPools.length; i++) {
      createThreadPools(allThreadPools[i],i);
    }
    defaultID=(String)indexToIdTable.get(new Integer(0));
  }
 catch (  NullPointerException npe) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
}","S1ASThreadPoolManager(){
  try {
    _iiopUtils=Globals.getDefaultHabitat().getByType(IIOPUtils.class);
    Collection<org.glassfish.grizzly.config.dom.ThreadPool> tpCol=_iiopUtils.getAllThreadPools();
    org.glassfish.grizzly.config.dom.ThreadPool[] allThreadPools=tpCol.toArray(new org.glassfish.grizzly.config.dom.ThreadPool[tpCol.size()]);
    for (int i=0; i < allThreadPools.length; i++) {
      createThreadPools(allThreadPools[i],i);
    }
    defaultID=(String)indexToIdTable.get(Integer.valueOf(0));
  }
 catch (  NullPointerException npe) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
}"
29518,"private void copyLogFilesForLocalhost(String sourceDir,String targetDir,ActionReport report,String instanceName) throws IOException {
  File logsDir=new File(sourceDir);
  File allLogFileNames[]=logsDir.listFiles();
  if (allLogFileNames == null) {
    throw new IOException(""String_Node_Str"");
  }
  for (  File logFile : allLogFileNames) {
    if (logFile.isFile()) {
      File toFile=new File(targetDir,logFile.getName());
      FileInputStream from=null;
      FileOutputStream to=null;
      try {
        from=new FileInputStream(logFile);
        to=new FileOutputStream(toFile);
        byte[] buffer=new byte[4096];
        int bytesRead;
        while ((bytesRead=from.read(buffer)) != -1)         to.write(buffer,0,bytesRead);
      }
 catch (      Exception ex) {
        final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName);
        logger.log(Level.SEVERE,errorMsg,ex);
        report.setMessage(errorMsg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
 finally {
        from.close();
        to.close();
      }
      if (!toFile.exists()) {
        final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName);
        report.setMessage(errorMsg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
}","private void copyLogFilesForLocalhost(String sourceDir,String targetDir,ActionReport report,String instanceName) throws IOException {
  File logsDir=new File(sourceDir);
  File allLogFileNames[]=logsDir.listFiles();
  if (allLogFileNames == null) {
    throw new IOException(""String_Node_Str"");
  }
  for (  File logFile : allLogFileNames) {
    if (logFile.isFile()) {
      File toFile=new File(targetDir,logFile.getName());
      FileInputStream from=null;
      FileOutputStream to=null;
      try {
        from=new FileInputStream(logFile);
        to=new FileOutputStream(toFile);
        byte[] buffer=new byte[4096];
        int bytesRead;
        while ((bytesRead=from.read(buffer)) != -1)         to.write(buffer,0,bytesRead);
      }
 catch (      Exception ex) {
        final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName);
        logger.log(Level.SEVERE,errorMsg,ex);
        report.setMessage(errorMsg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
 finally {
        if (from != null)         try {
          from.close();
        }
 catch (        Exception ex) {
        }
        if (to != null)         try {
          to.close();
        }
 catch (        Exception ex) {
        }
      }
      if (!toFile.exists()) {
        final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName);
        report.setMessage(errorMsg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
}"
29519,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void getStats(HandlerContext handlerCtx){
  String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String statType=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String type=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Locale locale=GuiUtil.getLocale();
  DateFormat df=DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.DEFAULT,locale);
  NumberFormat nf=NumberFormat.getNumberInstance(locale);
  List result=new ArrayList();
  try {
    if ((type == null || statType == null) || type.equals(statType)) {
      if (RestUtil.doesProxyExist(endpoint)) {
        Map<String,Object> stats=getMonitoringStatInfo(endpoint);
        if (statType != null && statType.equals(""String_Node_Str"")) {
          Map<String,Object> jerseyStats=new HashMap<String,Object>();
          for (          Map.Entry<String,Object> e : stats.entrySet()) {
            Map<String,Object> jerseyStat=(Map<String,Object>)e.getValue();
            if (jerseyStat != null) {
              jerseyStats.putAll(jerseyStat);
            }
          }
          stats=jerseyStats;
        }
        for (        Map.Entry<String,Object> e : stats.entrySet()) {
          if (!(e.getValue().getClass().equals(HashMap.class))) {
            continue;
          }
          Map<String,Object> monAttrs=(Map<String,Object>)e.getValue();
          Map<String,String> statMap=new HashMap();
          String val=""String_Node_Str"";
          String details=""String_Node_Str"";
          String desc=""String_Node_Str"";
          String start=""String_Node_Str"";
          String last=""String_Node_Str"";
          String unit=""String_Node_Str"";
          String mname=null;
          String runtimes=null;
          String queuesize=null;
          String thresholds=""String_Node_Str"";
          if (!monAttrs.isEmpty()) {
            if (monAttrs.containsKey(""String_Node_Str"")) {
              mname=(String)monAttrs.get(""String_Node_Str"");
            }
 else             if (monAttrs.containsKey(""String_Node_Str"")) {
              mname=(String)monAttrs.get(""String_Node_Str"");
            }
            unit=(String)monAttrs.get(""String_Node_Str"");
            desc=(String)monAttrs.get(""String_Node_Str"");
            Long lastTime=(Long)monAttrs.get(""String_Node_Str"");
            if (lastTime != -1) {
              last=df.format(new Date(lastTime));
            }
            Long startTime=(Long)monAttrs.get(""String_Node_Str"");
            if (startTime != -1) {
              start=df.format(new Date(startTime));
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              val=monAttrs.get(""String_Node_Str"") + ""String_Node_Str"" + unit;
            }
 else             if (monAttrs.containsKey(""String_Node_Str"")) {
              if (unit != null) {
                if (unit.equals(""String_Node_Str"")) {
                  if (mname.equals(""String_Node_Str"")) {
                    String str=(String)monAttrs.get(""String_Node_Str"");
                    val=formatStringForDisplay(str);
                  }
 else {
                    val=(String)monAttrs.get(""String_Node_Str"");
                  }
                }
 else                 if (unit.equals(""String_Node_Str"")) {
                  String str=(String)monAttrs.get(""String_Node_Str"");
                  String formatStr=formatActiveIdsForDisplay(str);
                  if (!formatStr.isEmpty() && !formatStr.equals(""String_Node_Str"")) {
                    val=formatStr;
                  }
                }
 else {
                  Long currentVal=(Long)monAttrs.get(""String_Node_Str"");
                  val=currentVal + unit;
                }
              }
            }
 else             if (monAttrs.containsKey(""String_Node_Str"")) {
              val=(String)monAttrs.get(""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              runtimes=(String)monAttrs.get(""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              queuesize=(String)monAttrs.get(""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.get(""String_Node_Str"") != null) {
              val=monAttrs.get(""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.get(""String_Node_Str"") != null) {
              thresholds=monAttrs.get(""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.containsKey(""String_Node_Str"")) {
              details=details + monAttrs.get(""String_Node_Str"");
            }
            statMap.put(""String_Node_Str"",mname);
            statMap.put(""String_Node_Str"",start);
            statMap.put(""String_Node_Str"",last);
            statMap.put(""String_Node_Str"",desc);
            statMap.put(""String_Node_Str"",(val == null) ? ""String_Node_Str"" : val);
            statMap.put(""String_Node_Str"",(details == null) ? ""String_Node_Str"" : details);
            statMap.put(""String_Node_Str"",(thresholds == null) ? ""String_Node_Str"" : thresholds);
            statMap.put(""String_Node_Str"",(queuesize == null) ? ""String_Node_Str"" : queuesize);
            statMap.put(""String_Node_Str"",(runtimes == null) ? ""String_Node_Str"" : runtimes);
            result.add(statMap);
          }
        }
      }
    }
    handlerCtx.setOutputValue(""String_Node_Str"",result);
    handlerCtx.setOutputValue(""String_Node_Str"",(result.size() == 0) ? false : true);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void getStats(HandlerContext handlerCtx){
  String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String statType=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String type=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Locale locale=GuiUtil.getLocale();
  DateFormat df=DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.DEFAULT,locale);
  List result=new ArrayList();
  try {
    if ((type == null || statType == null) || type.equals(statType)) {
      if (RestUtil.doesProxyExist(endpoint)) {
        Map<String,Object> stats=getMonitoringStatInfo(endpoint);
        if (statType != null && statType.equals(""String_Node_Str"")) {
          Map<String,Object> jerseyStats=new HashMap<String,Object>();
          for (          Map.Entry<String,Object> e : stats.entrySet()) {
            Map<String,Object> jerseyStat=(Map<String,Object>)e.getValue();
            if (jerseyStat != null) {
              jerseyStats.putAll(jerseyStat);
            }
          }
          stats=jerseyStats;
        }
        for (        Map.Entry<String,Object> e : stats.entrySet()) {
          if (!(e.getValue().getClass().equals(HashMap.class))) {
            continue;
          }
          Map<String,Object> monAttrs=(Map<String,Object>)e.getValue();
          Map<String,String> statMap=new HashMap();
          String val=""String_Node_Str"";
          String details=""String_Node_Str"";
          String desc=""String_Node_Str"";
          String start=""String_Node_Str"";
          String last=""String_Node_Str"";
          String unit=""String_Node_Str"";
          String mname=null;
          String runtimes=null;
          String queuesize=null;
          String thresholds=""String_Node_Str"";
          if (!monAttrs.isEmpty()) {
            if (monAttrs.containsKey(""String_Node_Str"")) {
              mname=(String)monAttrs.get(""String_Node_Str"");
            }
 else             if (monAttrs.containsKey(""String_Node_Str"")) {
              mname=(String)monAttrs.get(""String_Node_Str"");
            }
            unit=(String)monAttrs.get(""String_Node_Str"");
            desc=(String)monAttrs.get(""String_Node_Str"");
            Long lastTime=(Long)monAttrs.get(""String_Node_Str"");
            if (lastTime != -1) {
              last=df.format(new Date(lastTime));
            }
            Long startTime=(Long)monAttrs.get(""String_Node_Str"");
            if (startTime != -1) {
              start=df.format(new Date(startTime));
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              val=monAttrs.get(""String_Node_Str"") + ""String_Node_Str"" + unit;
            }
 else             if (monAttrs.containsKey(""String_Node_Str"")) {
              if (unit != null) {
                if (unit.equals(""String_Node_Str"")) {
                  if (mname.equals(""String_Node_Str"")) {
                    String str=(String)monAttrs.get(""String_Node_Str"");
                    val=formatStringForDisplay(str);
                  }
 else {
                    val=(String)monAttrs.get(""String_Node_Str"");
                  }
                }
 else                 if (unit.equals(""String_Node_Str"")) {
                  String str=(String)monAttrs.get(""String_Node_Str"");
                  String formatStr=formatActiveIdsForDisplay(str);
                  if (!formatStr.isEmpty() && !formatStr.equals(""String_Node_Str"")) {
                    val=formatStr;
                  }
                }
 else {
                  Long currentVal=(Long)monAttrs.get(""String_Node_Str"");
                  val=currentVal + unit;
                }
              }
            }
 else             if (monAttrs.containsKey(""String_Node_Str"")) {
              val=(String)monAttrs.get(""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=(GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              details=details + (GuiUtil.getMessage(""String_Node_Str"") + ""String_Node_Str"" + monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ unit+ ""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              runtimes=(String)monAttrs.get(""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"")) {
              queuesize=(String)monAttrs.get(""String_Node_Str"");
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.get(""String_Node_Str"") != null) {
              val=monAttrs.get(""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.get(""String_Node_Str"") != null) {
              thresholds=monAttrs.get(""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ monAttrs.get(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
            }
            if (monAttrs.containsKey(""String_Node_Str"") && monAttrs.containsKey(""String_Node_Str"")) {
              details=details + monAttrs.get(""String_Node_Str"");
            }
            statMap.put(""String_Node_Str"",mname);
            statMap.put(""String_Node_Str"",start);
            statMap.put(""String_Node_Str"",last);
            statMap.put(""String_Node_Str"",desc);
            statMap.put(""String_Node_Str"",(val == null) ? ""String_Node_Str"" : val);
            statMap.put(""String_Node_Str"",details);
            statMap.put(""String_Node_Str"",thresholds);
            statMap.put(""String_Node_Str"",(queuesize == null) ? ""String_Node_Str"" : queuesize);
            statMap.put(""String_Node_Str"",(runtimes == null) ? ""String_Node_Str"" : runtimes);
            result.add(statMap);
          }
        }
      }
    }
    handlerCtx.setOutputValue(""String_Node_Str"",result);
    handlerCtx.setOutputValue(""String_Node_Str"",(result.size() == 0) ? false : true);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}"
29520,"/** 
 * <p> This method creates a HashMap to represent the JSON Object.</p>
 */
private static Map<String,Object> readObject(JsonChars json){
  json.pushContextEnd('}');
  Map<String,Object> map=new HashMap<String,Object>(10);
  Object tmp=null;
  Object key=null;
  Object value=null;
  while (!json.isAtContextEnd()) {
    key=replaceSpecial(jsonToJava(json));
    if (json.isAtContextEnd()) {
      break;
    }
    if (!(key instanceof String)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (jsonToJava(json) != COLON) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    value=replaceSpecial(jsonToJava(json));
    tmp=jsonToJava(json);
    if ((tmp != COMMA) && !json.isAtContextEnd()) {
      throw new IllegalArgumentException(""String_Node_Str"" + tmp + ""String_Node_Str""+ json.getContext(30)+ ""String_Node_Str"");
    }
    map.put((String)key,value);
  }
  json.popContextEnd();
  return map;
}","/** 
 * <p> This method creates a HashMap to represent the JSON Object.</p>
 */
private static Map<String,Object> readObject(JsonChars json){
  json.pushContextEnd('}');
  Map<String,Object> map=new HashMap<String,Object>(10);
  Object tmp=null;
  Object key=null;
  Object value=null;
  while (!json.isAtContextEnd()) {
    key=replaceSpecial(jsonToJava(json));
    if (json.isAtContextEnd()) {
      break;
    }
    if (!(key instanceof String)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!(jsonToJava(json).equals(COLON))) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    value=replaceSpecial(jsonToJava(json));
    tmp=jsonToJava(json);
    if ((!(tmp.equals(COMMA))) && !json.isAtContextEnd()) {
      throw new IllegalArgumentException(""String_Node_Str"" + tmp + ""String_Node_Str""+ json.getContext(30)+ ""String_Node_Str"");
    }
    map.put((String)key,value);
  }
  json.popContextEnd();
  return map;
}"
29521,"/** 
 * <p> This function will process a JSON string and convert it into an array.</p>
 */
private static List<Object> readArray(JsonChars json){
  json.pushContextEnd(']');
  List<Object> list=new ArrayList<Object>(10);
  Object tmp=null;
  Object value=null;
  while (!json.isAtContextEnd()) {
    value=replaceSpecial(jsonToJava(json));
    if (!json.isAtContextEnd()) {
      tmp=jsonToJava(json);
      if ((tmp != COMMA) && !json.isAtContextEnd()) {
        throw new IllegalArgumentException(""String_Node_Str"" + tmp + ""String_Node_Str"");
      }
    }
    if ((value == null) || (value != ABORT_PROCESSING)) {
      list.add(value);
    }
  }
  json.popContextEnd();
  return list;
}","/** 
 * <p> This function will process a JSON string and convert it into an array.</p>
 */
private static List<Object> readArray(JsonChars json){
  json.pushContextEnd(']');
  List<Object> list=new ArrayList<Object>(10);
  Object tmp=null;
  Object value=null;
  while (!json.isAtContextEnd()) {
    value=replaceSpecial(jsonToJava(json));
    if (!json.isAtContextEnd()) {
      tmp=jsonToJava(json);
      if ((!(tmp.equals(COMMA))) && !json.isAtContextEnd()) {
        throw new IllegalArgumentException(""String_Node_Str"" + tmp + ""String_Node_Str"");
      }
    }
    if ((value == null) || (!(value.equals(ABORT_PROCESSING)))) {
      list.add(value);
    }
  }
  json.popContextEnd();
  return list;
}"
29522,"/** 
 * <p> This method abstracts the physical response to return a consistent data structure.</p>
 */
@Override public Map<String,Object> getResponse(){
  Map<String,Object> result=new HashMap<String,Object>(5);
  result.put(""String_Node_Str"",getResponseCode());
  result.put(""String_Node_Str"",getResponseBody());
  String contentType=response.getHeader(""String_Node_Str"");
  if (contentType != null) {
    String responseBody=getResponseBody();
    contentType=contentType.toLowerCase(GuiUtil.guiLocale);
    if (contentType.startsWith(""String_Node_Str"")) {
      InputStream input=null;
      try {
        XMLInputFactory inputFactory=XMLInputFactory.newInstance();
        inputFactory.setProperty(XMLInputFactory.IS_VALIDATING,false);
        input=new ByteArrayInputStream(responseBody.trim().getBytes(""String_Node_Str""));
        XMLStreamReader parser=inputFactory.createXMLStreamReader(input);
        while (parser.hasNext()) {
          int event=parser.next();
switch (event) {
case XMLStreamConstants.START_ELEMENT:
{
              if (""String_Node_Str"".equals(parser.getLocalName())) {
                result.put(""String_Node_Str"",processXmlMap(parser));
              }
              break;
            }
default :
          break;
      }
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(RestResponse.class.getName()).log(Level.SEVERE,null,ex);
    throw new RuntimeException(ex);
  }
 finally {
    try {
      input.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(RestResponse.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}
 else if (contentType.startsWith(""String_Node_Str"")) {
  result.put(""String_Node_Str"",JSONUtil.jsonToJava(responseBody));
}
 else {
  System.out.println(""String_Node_Str"" + contentType + ""String_Node_Str"");
}
}
return result;
}","/** 
 * <p> This method abstracts the physical response to return a consistent data structure.</p>
 */
@Override public Map<String,Object> getResponse(){
  Map<String,Object> result=new HashMap<String,Object>(5);
  result.put(""String_Node_Str"",getResponseCode());
  result.put(""String_Node_Str"",getResponseBody());
  String contentType=response.getHeader(""String_Node_Str"");
  if (contentType != null) {
    String responseBody=getResponseBody();
    contentType=contentType.toLowerCase(GuiUtil.guiLocale);
    if (contentType.startsWith(""String_Node_Str"")) {
      InputStream input=null;
      try {
        XMLInputFactory inputFactory=XMLInputFactory.newInstance();
        inputFactory.setProperty(XMLInputFactory.IS_VALIDATING,false);
        input=new ByteArrayInputStream(responseBody.trim().getBytes(""String_Node_Str""));
        XMLStreamReader parser=inputFactory.createXMLStreamReader(input);
        while (parser.hasNext()) {
          int event=parser.next();
switch (event) {
case XMLStreamConstants.START_ELEMENT:
{
              if (""String_Node_Str"".equals(parser.getLocalName())) {
                result.put(""String_Node_Str"",processXmlMap(parser));
              }
              break;
            }
default :
          break;
      }
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(RestResponse.class.getName()).log(Level.SEVERE,null,ex);
    throw new RuntimeException(ex);
  }
 finally {
    try {
      if (input != null) {
        input.close();
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(RestResponse.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}
 else if (contentType.startsWith(""String_Node_Str"")) {
  result.put(""String_Node_Str"",JSONUtil.jsonToJava(responseBody));
}
 else {
  System.out.println(""String_Node_Str"" + contentType + ""String_Node_Str"");
}
}
return result;
}"
29523,"public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      int status=response.getResponseCode();
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message) || message == null) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message) || message == null) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}","public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message) || message == null) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message) || message == null) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}"
29524,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=false)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void sendRequestToCollectionResource(HandlerContext handlerCtx){
  Map<String,Object> attrs=(Map<String,Object>)handlerCtx.getInputValue(""String_Node_Str"");
  String endpoint=fixEndpoint((String)handlerCtx.getInputValue(""String_Node_Str""));
  Response resp=RestUtil.getJerseyClient().target(endpoint).request(RestUtil.RESPONSE_TYPE).cookie(new Cookie(RestUtil.REST_TOKEN_COOKIE,RestUtil.getRestToken())).get(Response.class);
  if (!isSuccess(resp.getStatus())) {
    throw new RuntimeException(resp.readEntity(String.class));
  }
  List list=resp.readEntity(List.class);
  handlerCtx.setOutputValue(""String_Node_Str"",list);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=false)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void sendRequestToCollectionResource(HandlerContext handlerCtx){
  String endpoint=fixEndpoint((String)handlerCtx.getInputValue(""String_Node_Str""));
  Response resp=RestUtil.getJerseyClient().target(endpoint).request(RestUtil.RESPONSE_TYPE).cookie(new Cookie(RestUtil.REST_TOKEN_COOKIE,RestUtil.getRestToken())).get(Response.class);
  if (!isSuccess(resp.getStatus())) {
    throw new RuntimeException(resp.readEntity(String.class));
  }
  List list=resp.readEntity(List.class);
  handlerCtx.setOutputValue(""String_Node_Str"",list);
}"
29525,"/** 
 * Get naming context full name.
 */
public String getNamingContextName(){
  if (namingContextName == null) {
    Container parent=getParent();
    if (parent == null) {
      namingContextName=getName();
    }
 else {
      Stack<String> stk=new Stack<String>();
      StringBuilder buff=new StringBuilder();
      while (parent != null) {
        stk.push(parent.getName());
        parent=parent.getParent();
      }
      while (!stk.empty()) {
        buff.append(""String_Node_Str"").append(stk.pop());
      }
      buff.append(getName());
      namingContextName=buff.toString();
    }
    namingContextName+=instanceIDCounter++;
  }
  return namingContextName;
}","/** 
 * Get naming context full name.
 */
public String getNamingContextName(){
  if (namingContextName == null) {
    Container parent=getParent();
    if (parent == null) {
      namingContextName=getName();
    }
 else {
      Stack<String> stk=new Stack<String>();
      StringBuilder buff=new StringBuilder();
      while (parent != null) {
        stk.push(parent.getName());
        parent=parent.getParent();
      }
      while (!stk.empty()) {
        buff.append(""String_Node_Str"").append(stk.pop());
      }
      buff.append(getName());
      namingContextName=buff.toString();
    }
    namingContextName+=instanceIDCounter.getAndIncrement();
  }
  return namingContextName;
}"
29526,"public void stop(Logger logger){
  if (getDeployer() != null) {
    Inhabitant i=((Habitat)registry.habitat).getInhabitantByType(getDeployer().getClass());
    if (i != null) {
      i.release();
    }
  }
  if (getContainer() != null) {
    Inhabitant i=((Habitat)registry.habitat).getInhabitantByType(getContainer().getClass());
    if (i != null) {
      i.release();
    }
  }
  registry.removeContainer(this);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + getContainer().getName() + ""String_Node_Str"");
  }
}","public void stop(Logger logger){
  if (getDeployer() != null) {
    ServiceHandle<?> i=registry.habitat.getServiceHandle(getDeployer().getClass());
    if (i != null) {
      i.destroy();
    }
  }
  if (getContainer() != null) {
    ServiceHandle<?> i=registry.habitat.getServiceHandle(getContainer().getClass());
    if (i != null) {
      i.destroy();
    }
  }
  registry.removeContainer(this);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + getContainer().getName() + ""String_Node_Str"");
  }
}"
29527,"/** 
 * convert an xml attribute name to variable name representing it.
 * @param attributeName the attribute name in ""-"" separated form as appears in the domain.xml
 * @return the class instance variable which represent that attributeName
 */
private static String convertAttributeToPropertyName(String attributeName){
  StringTokenizer tokenizer=new StringTokenizer(attributeName,""String_Node_Str"",false);
  StringBuilder propertyName=new StringBuilder();
  boolean isFirst=true;
  while (tokenizer.hasMoreTokens()) {
    String part=tokenizer.nextToken();
    if (!isFirst) {
      part=part.replaceFirst(part.substring(0,1),part.substring(0,1).toUpperCase());
    }
    isFirst=false;
    propertyName.append(part);
  }
  return propertyName.toString();
}","/** 
 * convert an xml attribute name to variable name representing it.
 * @param attributeName the attribute name in ""-"" separated form as appears in the domain.xml
 * @return the class instance variable which represent that attributeName
 */
private static String convertAttributeToPropertyName(String attributeName){
  StringTokenizer tokenizer=new StringTokenizer(attributeName,""String_Node_Str"",false);
  StringBuilder propertyName=new StringBuilder();
  boolean isFirst=true;
  while (tokenizer.hasMoreTokens()) {
    String part=tokenizer.nextToken();
    if (!isFirst) {
      Locale loc=Locale.getDefault();
      part=part.replaceFirst(part.substring(0,1),part.substring(0,1).toUpperCase(loc));
    }
    isFirst=false;
    propertyName.append(part);
  }
  return propertyName.toString();
}"
29528,"/** 
 * convert a configuration element name to representing class name
 * @param name the configuration element name we want to convert to class name
 * @return the class name which the configuration element represent.
 */
public static String convertConfigElementNameToClassName(String name){
  StringTokenizer tokenizer=new StringTokenizer(name,""String_Node_Str"",false);
  StringBuilder className=new StringBuilder();
  while (tokenizer.hasMoreTokens()) {
    String part=tokenizer.nextToken();
    part=part.replaceFirst(part.substring(0,1),part.substring(0,1).toUpperCase());
    className.append(part);
  }
  return className.toString();
}","/** 
 * convert a configuration element name to representing class name
 * @param name the configuration element name we want to convert to class name
 * @return the class name which the configuration element represent.
 */
public static String convertConfigElementNameToClassName(String name){
  StringTokenizer tokenizer=new StringTokenizer(name,""String_Node_Str"",false);
  StringBuilder className=new StringBuilder();
  while (tokenizer.hasMoreTokens()) {
    String part=tokenizer.nextToken();
    Locale loc=Locale.getDefault();
    part=part.replaceFirst(part.substring(0,1),part.substring(0,1).toUpperCase(loc));
    className.append(part);
  }
  return className.toString();
}"
29529,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  if (serviceName == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (target != null) {
    Config newConfig=getConfigForName(target,habitat,domain);
    if (newConfig != null) {
      config=newConfig;
    }
    if (config == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (serviceName != null) {
    String className=ConfigModularityUtils.convertConfigElementNameToClassName(serviceName);
    Class configBeanType=ConfigModularityUtils.getClassFor(serviceName,habitat);
    if (configBeanType == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",DEFAULT_FORMAT,className,serviceName);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    try {
      String serviceDefaultConfig=getActiveConfigFor(configBeanType,habitat);
      if (serviceDefaultConfig != null) {
        report.setMessage(serviceDefaultConfig);
        report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      }
    }
 catch (    Exception e) {
      String msg=localStrings.getLocalString(""String_Node_Str"",DEFAULT_FORMAT,serviceName,target,e.getMessage());
      LOG.log(Level.INFO,msg,e);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      report.setFailureCause(e);
    }
  }
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  if (serviceName == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (target != null) {
    Config newConfig=getConfigForName(target,habitat,domain);
    if (newConfig != null) {
      config=newConfig;
    }
    if (config == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  String className=ConfigModularityUtils.convertConfigElementNameToClassName(serviceName);
  Class configBeanType=ConfigModularityUtils.getClassFor(serviceName,habitat);
  if (configBeanType == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",DEFAULT_FORMAT,className,serviceName);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  try {
    String serviceDefaultConfig=getActiveConfigFor(configBeanType,habitat);
    if (serviceDefaultConfig != null) {
      report.setMessage(serviceDefaultConfig);
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",DEFAULT_FORMAT,serviceName,target,e.getMessage());
    LOG.log(Level.INFO,msg,e);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    report.setFailureCause(e);
  }
}"
29530,"private JSONArray getProperties(Class<?> clazz){
  Map<String,ParamMetadata> map=new HashMap<String,ParamMetadata>();
  JSONArray props=new JSONArray();
  for (  Class<?> ifaces : clazz.getInterfaces()) {
    for (    Method m : ifaces.getDeclaredMethods()) {
    }
  }
  return props;
}","private JSONArray getProperties(Class<?> clazz){
  JSONArray props=new JSONArray();
  for (  Class<?> ifaces : clazz.getInterfaces()) {
    for (    Method m : ifaces.getDeclaredMethods()) {
    }
  }
  return props;
}"
29531,"protected void registerTimerMonitorableComponent(){
  if (isTimedObject()) {
    String invokerId=EjbMonitoringUtils.getInvokerId(containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    try {
      ProbeProviderFactory probeFactory=ejbContainerUtilImpl.getProbeProviderFactory();
      timerProbeNotifier=probeFactory.getProbeProvider(EjbTimedObjectProbeProvider.class,invokerId);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + timerProbeNotifier.getClass().getName());
      }
    }
 catch (    Exception ex) {
      timerProbeNotifier=new EjbTimedObjectProbeProvider();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
    }
    timerProbeListener=new EjbTimedObjectStatsProvider(containerInfo.appName,containerInfo.modName,containerInfo.ejbName,getContainerId());
    timerProbeListener.register();
  }
  _logger.log(Level.FINE,""String_Node_Str"");
}","protected void registerTimerMonitorableComponent(){
  if (isTimedObject()) {
    String invokerId=EjbMonitoringUtils.getInvokerId(containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    try {
      ProbeProviderFactory probeFactory=ejbContainerUtilImpl.getProbeProviderFactory();
      timerProbeNotifier=probeFactory.getProbeProvider(EjbTimedObjectProbeProvider.class,invokerId);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + timerProbeNotifier.getClass().getName());
      }
    }
 catch (    Exception ex) {
      timerProbeNotifier=new EjbTimedObjectProbeProvider();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
    }
    timerProbeListener=new EjbTimedObjectStatsProvider(containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    timerProbeListener.register();
  }
  _logger.log(Level.FINE,""String_Node_Str"");
}"
29532,"public EjbTimedObjectStatsProvider(String appName,String moduleName,String beanName,long beanId){
  this.appName=appName;
  this.moduleName=moduleName;
  this.beanName=beanName;
  this.beanId=beanId;
}","public EjbTimedObjectStatsProvider(String appName,String moduleName,String beanName){
  this.appName=appName;
  this.moduleName=moduleName;
  this.beanName=beanName;
}"
29533,"public void registerTenantWithAppInDomainXML(final String appName,final ExtendedDeploymentContext context) throws TransactionFailure {
  final Transaction t=new Transaction();
  try {
    final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
    final AppTenant appTenant_w=writeableTenantForApp(appName,t);
    appTenant_w.setContextRoot(context.getAppProps().getProperty(ServerTags.CONTEXT_ROOT));
    appTenant_w.setTenant(context.getTenant());
    t.commit();
  }
 catch (  TransactionFailure ex) {
    t.rollback();
    throw ex;
  }
catch (  Throwable ex) {
    t.rollback();
    throw new TransactionFailure(ex.getLocalizedMessage(),ex);
  }
}","public void registerTenantWithAppInDomainXML(final String appName,final ExtendedDeploymentContext context) throws TransactionFailure {
  final Transaction t=new Transaction();
  try {
    final AppTenant appTenant_w=writeableTenantForApp(appName,t);
    appTenant_w.setContextRoot(context.getAppProps().getProperty(ServerTags.CONTEXT_ROOT));
    appTenant_w.setTenant(context.getTenant());
    t.commit();
  }
 catch (  TransactionFailure ex) {
    t.rollback();
    throw ex;
  }
catch (  Throwable ex) {
    t.rollback();
    throw new TransactionFailure(ex.getLocalizedMessage(),ex);
  }
}"
29534,"private void loadApplicationForTenants(Application app,ApplicationRef appRef,ActionReport report,Logger logger){
  if (app.getAppTenants() == null) {
    return;
  }
  for (  AppTenant tenant : app.getAppTenants().getAppTenant()) {
    DeployCommandParameters commandParams=app.getDeployParameters(appRef);
    commandParams.contextroot=tenant.getContextRoot();
    commandParams.target=server.getName();
    commandParams.name=DeploymentUtils.getInternalNameForTenant(app.getName(),tenant.getTenant());
    commandParams.enabled=Boolean.TRUE;
    commandParams.origin=DeployCommandParameters.Origin.load;
    ActionReport subReport=report.addSubActionsReport();
    ReadableArchive archive=null;
    try {
      URI uri=new URI(app.getLocation());
      File file=new File(uri);
      if (file.exists()) {
        archive=archiveFactoryProvider.get().openArchive(file);
        ExtendedDeploymentContext deploymentContext=deployment.getBuilder(logger,commandParams,subReport).source(archive).build();
        deploymentContext.getAppProps().putAll(app.getDeployProperties());
        deploymentContext.getAppProps().putAll(tenant.getDeployProperties());
        deploymentContext.setModulePropsMap(app.getModulePropertiesMap());
        deploymentContext.setTenant(tenant.getTenant(),app.getName());
        deployment.deploy(deployment.getSniffersFromApp(app),deploymentContext);
      }
 else {
        logger.log(Level.SEVERE,""String_Node_Str"" + new Object[]{app.getLocation()});
      }
    }
 catch (    Throwable e) {
      subReport.setActionExitCode(ActionReport.ExitCode.FAILURE);
      subReport.setMessage(e.getMessage());
      subReport.setFailureCause(e);
    }
 finally {
      try {
        if (archive != null) {
          archive.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
}","private void loadApplicationForTenants(Application app,ApplicationRef appRef,ActionReport report,Logger logger){
  if (app.getAppTenants() == null) {
    return;
  }
  for (  AppTenant tenant : app.getAppTenants().getAppTenant()) {
    DeployCommandParameters commandParams=app.getDeployParameters(appRef);
    commandParams.contextroot=tenant.getContextRoot();
    commandParams.target=server.getName();
    commandParams.name=DeploymentUtils.getInternalNameForTenant(app.getName(),tenant.getTenant());
    commandParams.enabled=Boolean.TRUE;
    commandParams.origin=DeployCommandParameters.Origin.load;
    ActionReport subReport=report.addSubActionsReport();
    ReadableArchive archive=null;
    try {
      URI uri=new URI(app.getLocation());
      File file=new File(uri);
      if (file.exists()) {
        archive=archiveFactoryProvider.get().openArchive(file);
        ExtendedDeploymentContext deploymentContext=deployment.getBuilder(logger,commandParams,subReport).source(archive).build();
        deploymentContext.getAppProps().putAll(app.getDeployProperties());
        deploymentContext.getAppProps().putAll(tenant.getDeployProperties());
        deploymentContext.setModulePropsMap(app.getModulePropertiesMap());
        deploymentContext.setTenant(tenant.getTenant(),app.getName());
        deployment.deploy(deployment.getSniffersFromApp(app),deploymentContext);
      }
 else {
        logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{app.getLocation()});
      }
    }
 catch (    Throwable e) {
      subReport.setActionExitCode(ActionReport.ExitCode.FAILURE);
      subReport.setMessage(e.getMessage());
      subReport.setFailureCause(e);
    }
 finally {
      try {
        if (archive != null) {
          archive.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
}"
29535,"public void setClassLoader(ClassLoader cloader){
  this.cloader=cloader;
}","public synchronized void setClassLoader(ClassLoader cloader){
  this.cloader=cloader;
}"
29536,"private boolean setFromMasterPasswordFile(){
  try {
    File mp=env.getMasterPasswordFile();
    if (!mp.isFile()) {
      logger.fine(""String_Node_Str"" + mp.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
    PasswordAdapter p=new PasswordAdapter(mp.getAbsolutePath(),FIXED_KEY.toCharArray());
    this.masterPassword=p.getPasswordForAlias(FIXED_KEY).toCharArray();
    if (masterPassword == null) {
      return false;
    }
    return true;
  }
 catch (  Exception ex) {
    logger.fine(""String_Node_Str"" + ex.getMessage());
    return false;
  }
}","private boolean setFromMasterPasswordFile(){
  try {
    File mp=env.getMasterPasswordFile();
    if (!mp.isFile()) {
      logger.fine(""String_Node_Str"" + mp.getAbsolutePath() + ""String_Node_Str"");
      return false;
    }
    PasswordAdapter p=new PasswordAdapter(mp.getAbsolutePath(),FIXED_KEY.toCharArray());
    String mpstr=p.getPasswordForAlias(FIXED_KEY);
    if (mpstr == null) {
      return false;
    }
    masterPassword=mpstr.toCharArray();
    return true;
  }
 catch (  Exception ex) {
    logger.fine(""String_Node_Str"" + ex.getMessage());
    return false;
  }
}"
29537,"/** 
 * Obtains the real password from the domain specific keystore given an alias
 * @param host host that we are connecting to
 * @param alias password alias of form ${ALIAS=xxx}
 * @return real password of ssh user, null if not found
 */
String expandPasswordAlias(String host,String alias,boolean verifyConn){
  String expandedPassword=null;
  boolean connStatus=false;
  try {
    File domainsDirFile=DomainDirs.getDefaultDomainsDir();
    File[] files=domainsDirFile.listFiles(new FileFilter(){
      public boolean accept(      File f){
        return f.isDirectory();
      }
    }
);
    for (    File f : files) {
      System.setProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY,f.getAbsolutePath());
      try {
        final MasterPassword masterPasswordHelper=Globals.getDefaultHabitat().getService(MasterPassword.class,""String_Node_Str"");
        final PasswordAdapter pa=masterPasswordHelper.getMasterPasswordAdapter();
        final boolean exists=pa.aliasExists(alias);
        if (exists) {
          String mPass=getMasterPassword(f.getName());
          masterPasswordHelper.setMasterPassword(mPass.toCharArray());
          expandedPassword=masterPasswordHelper.getMasterPasswordAdapter().getPasswordForAlias(alias);
        }
      }
 catch (      Exception e) {
        if (logger.isLoggable(Level.FINER)) {
          logger.finer(StringUtils.cat(""String_Node_Str"",alias,e.getMessage()));
        }
        logger.warning(Strings.get(""String_Node_Str"",f.getName()));
        continue;
      }
      if (expandedPassword != null) {
        SSHLauncher sshL=new SSHLauncher();
        if (host != null) {
          sshpassword=expandedPassword;
          sshL.init(getRemoteUser(),host,getRemotePort(),sshpassword,null,null,logger);
          connStatus=sshL.checkPasswordAuth();
          if (!connStatus) {
            logger.warning(Strings.get(""String_Node_Str"",f.getName()));
          }
        }
 else {
          sshkeypassphrase=expandedPassword;
          if (verifyConn) {
            sshL.init(getRemoteUser(),hosts[0],getRemotePort(),sshpassword,getSshKeyFile(),sshkeypassphrase,logger);
            connStatus=sshL.checkConnection();
            if (!connStatus) {
              logger.warning(Strings.get(""String_Node_Str"",f.getName()));
            }
          }
        }
        if (connStatus) {
          break;
        }
      }
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(ioe.getMessage());
    }
  }
  return expandedPassword;
}","/** 
 * Obtains the real password from the domain specific keystore given an alias
 * @param host host that we are connecting to
 * @param alias password alias of form ${ALIAS=xxx}
 * @return real password of ssh user, null if not found
 */
String expandPasswordAlias(String host,String alias,boolean verifyConn){
  String expandedPassword=null;
  boolean connStatus=false;
  try {
    File domainsDirFile=DomainDirs.getDefaultDomainsDir();
    File[] files=domainsDirFile.listFiles(new FileFilter(){
      public boolean accept(      File f){
        return f.isDirectory();
      }
    }
);
    for (    File f : files) {
      System.setProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY,f.getAbsolutePath());
      try {
        final PasswordAdapter pa=new PasswordAdapter(null);
        final boolean exists=pa.aliasExists(alias);
        if (exists) {
          String mPass=getMasterPassword(f.getName());
          expandedPassword=new PasswordAdapter(mPass.toCharArray()).getPasswordForAlias(alias);
        }
      }
 catch (      Exception e) {
        if (logger.isLoggable(Level.FINER)) {
          logger.finer(StringUtils.cat(""String_Node_Str"",alias,e.getMessage()));
        }
        logger.warning(Strings.get(""String_Node_Str"",f.getName()));
        continue;
      }
      if (expandedPassword != null) {
        SSHLauncher sshL=new SSHLauncher();
        if (host != null) {
          sshpassword=expandedPassword;
          sshL.init(getRemoteUser(),host,getRemotePort(),sshpassword,null,null,logger);
          connStatus=sshL.checkPasswordAuth();
          if (!connStatus) {
            logger.warning(Strings.get(""String_Node_Str"",f.getName()));
          }
        }
 else {
          sshkeypassphrase=expandedPassword;
          if (verifyConn) {
            sshL.init(getRemoteUser(),hosts[0],getRemotePort(),sshpassword,getSshKeyFile(),sshkeypassphrase,logger);
            connStatus=sshL.checkConnection();
            if (!connStatus) {
              logger.warning(Strings.get(""String_Node_Str"",f.getName()));
            }
          }
        }
        if (connStatus) {
          break;
        }
      }
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(ioe.getMessage());
    }
  }
  return expandedPassword;
}"
29538,"public char[] getMasterPassword(){
  if (_masterPassword == null) {
    return null;
  }
  return Arrays.copyOf(_masterPassword,_masterPassword.length);
}","public char[] getMasterPassword(){
  return idm == null ? null : idm.getMasterPassword();
}"
29539,"public PasswordAdapter getMasterPasswordAdapter() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {
  PasswordAdapter passwordAdapter=new PasswordAdapter(_masterPassword);
  return passwordAdapter;
}","@Override public PasswordAdapter getMasterPasswordAdapter() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {
  char pw[]=idm == null ? null : idm.getMasterPassword();
  return new PasswordAdapter(pw);
}"
29540,"public void postConstruct(){
  boolean success;
  boolean readStdin=sc.getArguments().containsKey(STDIN_OPTION_TO_ASMAIN);
  if (readStdin) {
    success=setFromStdin();
  }
 else {
    success=setFromMasterPasswordFile();
    if (!success) {
      success=setFromAsMainArguments();
    }
  }
  if (!success) {
    masterPassword=""String_Node_Str"".toCharArray();
  }
  if (masterPasswordHelper != null)   masterPasswordHelper.setMasterPassword(masterPassword);
  if (jmxMasterPasswordHelper != null)   jmxMasterPasswordHelper.setMasterPassword(masterPassword);
  Arrays.fill(masterPassword,' ');
  masterPassword=null;
}","public void postConstruct(){
  boolean success;
  boolean readStdin=sc.getArguments().containsKey(STDIN_OPTION_TO_ASMAIN);
  if (readStdin) {
    success=setFromStdin();
  }
 else {
    success=setFromMasterPasswordFile();
    if (!success) {
      success=setFromAsMainArguments();
    }
  }
  if (!success) {
    masterPassword=""String_Node_Str"".toCharArray();
  }
}"
29541,"char[] getMasterPassword(){
  if (_masterPassword == null) {
    return null;
  }
  return Arrays.copyOf(_masterPassword,_masterPassword.length);
}","public char[] getMasterPassword(){
  return idm == null ? null : idm.getMasterPassword();
}"
29542,"public PasswordAdapter getMasterPasswordAdapter() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {
  PasswordAdapter passwordAdapter=new PasswordAdapter(_masterPassword);
  return passwordAdapter;
}","@Override public PasswordAdapter getMasterPasswordAdapter() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {
  char pw[]=idm == null ? null : idm.getMasterPassword();
  return new PasswordAdapter(pw);
}"
29543,"/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,commonResourceBundleDescriptor.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      appLevel.add(commonResourceBundleDescriptor.getName());
    }
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
  Vector appClientLevel=new Vector();
  for (  ApplicationClientDescriptor acd : appClientDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,acd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,acd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      appClientLevel.add(acd.getName());
    }
  }
  validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
  Vector cdLevel=new Vector();
  for (  ConnectorDescriptor cd : connectorDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,cd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,cd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      cdLevel.add(cd.getName());
    }
  }
  validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
  Vector ebdLevel=new Vector();
  Vector edLevel=new Vector();
  for (  EjbBundleDescriptor ebd : ejbBundleDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,ebd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,ebd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      ebdLevel.add(ebd.getName());
    }
    Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
    for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
      EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
      mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName())) {
        return false;
      }
      dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName())) {
        return false;
      }
      if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
        edLevel.add(ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName());
      }
    }
  }
  validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
  validNameSpaceDetails.put(EJB_KEYS,edLevel);
  Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
  Vector wbdLevel=new Vector();
  for (  WebBundleDescriptor wbd : webBundleDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,wbd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,wbd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      wbdLevel.add(wbd.getName());
    }
  }
  validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}","/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  final String APP_LEVEL=""String_Node_Str"";
  final String EJBBUNDLE_LEVEL=""String_Node_Str"";
  final String EJB_LEVEL=""String_Node_Str"";
  final String APPCLIENTBUNDLE_LEVEL=""String_Node_Str"";
  final String APPCLIENT_LEVEL=""String_Node_Str"";
  final String WEBBUNDLE_LEVEL=""String_Node_Str"";
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APP_LEVEL + commonResourceBundleDescriptor.getName())) {
      return false;
    }
    appLevel.add(APP_LEVEL + commonResourceBundleDescriptor.getName());
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
  Vector appClientLevel=new Vector();
  for (  ApplicationClientDescriptor acd : appClientDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENTBUNDLE_LEVEL + acd.getName())) {
      return false;
    }
    appClientLevel.add(APPCLIENTBUNDLE_LEVEL + acd.getName());
  }
  validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
  Vector cdLevel=new Vector();
  for (  ConnectorDescriptor cd : connectorDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,APPCLIENT_LEVEL + cd.getName())) {
      return false;
    }
    cdLevel.add(APPCLIENT_LEVEL + cd.getName());
  }
  validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
  Vector ebdLevel=new Vector();
  Vector edLevel=new Vector();
  for (  EjbBundleDescriptor ebd : ejbBundleDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJBBUNDLE_LEVEL + ebd.getName())) {
      return false;
    }
    ebdLevel.add(EJBBUNDLE_LEVEL + ebd.getName());
    Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
    for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
      EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
      mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
        return false;
      }
      dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName())) {
        return false;
      }
      edLevel.add(EJB_LEVEL + ebd.getName() + ""String_Node_Str""+ ejbDescriptor.getName());
    }
  }
  validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
  validNameSpaceDetails.put(EJB_KEYS,edLevel);
  Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
  Vector wbdLevel=new Vector();
  for (  WebBundleDescriptor wbd : webBundleDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,WEBBUNDLE_LEVEL + wbd.getName())) {
      return false;
    }
    wbdLevel.add(WEBBUNDLE_LEVEL + wbd.getName());
  }
  validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}"
29544,"private void checkJspGroupProperties(WebBundleDescriptor descriptor,Result result,ComponentNameConstructor compName){
  JspConfigDescriptor jspC=((WebBundleDescriptorImpl)descriptor).getJspConfigDescriptor();
  if (jspC == null)   return;
  for (  JspPropertyGroupDescriptor desc : jspC.getJspPropertyGroups()) {
    for (    String urlPattern : desc.getUrlPatterns()) {
      checkUrlPatternAndSetResult(urlPattern,descriptor,result,compName);
    }
  }
}","private void checkJspGroupProperties(WebBundleDescriptor descriptor,Result result,ComponentNameConstructor compName){
  JspConfigDescriptorImpl jspC=((WebBundleDescriptorImpl)descriptor).getJspConfigDescriptor();
  if (jspC == null)   return;
  for (  JspPropertyGroupDescriptor desc : jspC.getJspPropertyGroups()) {
    for (    String urlPattern : desc.getUrlPatterns()) {
      checkUrlPatternAndSetResult(urlPattern,descriptor,result,compName);
    }
  }
}"
29545,"private void setErrorPageContentType(Response response,String location,Context context){
  if (response.getContentType() == null && location != null) {
    String str=location.substring(location.lastIndexOf('.') + 1);
    str=context.findMimeMapping(str.toLowerCase());
    if (str != null)     ((ServletResponse)response).setContentType(str);
  }
}","private void setErrorPageContentType(Response response,String location,Context context){
  if (response.getContentType() == null && location != null) {
    String str=location.substring(location.lastIndexOf('.') + 1);
    str=context.findMimeMapping(str.toLowerCase(Locale.ENGLISH));
    if (str != null)     ((ServletResponse)response).setContentType(str);
  }
}"
29546,"/** 
 * Configure <code>jsp-config</code> element contained in the deployment descriptor
 */
protected static void configureJspConfig(WebModule webModule,WebBundleDescriptorImpl wmd){
  webModule.setJspConfigDescriptor(wmd.getJspConfigDescriptor());
  JspConfigDescriptor jspConfig=wmd.getJspConfigDescriptor();
  if (jspConfig != null) {
    for (    JspPropertyGroupDescriptor jspGroup : jspConfig.getJspPropertyGroups()) {
      for (      String urlPattern : jspGroup.getUrlPatterns()) {
        webModule.addJspMapping(urlPattern);
      }
    }
  }
}","/** 
 * Configure <code>jsp-config</code> element contained in the deployment descriptor
 */
protected static void configureJspConfig(WebModule webModule,WebBundleDescriptorImpl wmd){
  webModule.setJspConfigDescriptor(wmd.getJspConfigDescriptor());
  JspConfigDescriptorImpl jspConfig=wmd.getJspConfigDescriptor();
  if (jspConfig != null) {
    for (    JspPropertyGroupDescriptor jspGroup : jspConfig.getJspPropertyGroups()) {
      for (      String urlPattern : jspGroup.getUrlPatterns()) {
        webModule.addJspMapping(urlPattern);
      }
    }
  }
}"
29547,"/** 
 * Return a String array of my static transport types.
 */
public static final String[] getTransportGuaranteeChoices(){
  return transportGuaranteeChoices;
}","/** 
 * Return a String array of my static transport types.
 */
private static final String[] getTransportGuaranteeChoices(){
  return transportGuaranteeChoices;
}"
29548,"public void setJspConfigDescriptor(JspConfigDescriptor jspC){
  jspConfigDescriptor=jspC;
}","public void setJspConfigDescriptor(JspConfigDescriptorImpl jspC){
  jspConfigDescriptor=jspC;
}"
29549,"/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  for (  MimeMapping mimeMap : webBundleDescriptor.getMimeMappingsSet()) {
    addMimeMapping(mimeMap);
  }
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptor jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptor();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(otherIsDistributable);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}","/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  for (  MimeMapping mimeMap : webBundleDescriptor.getMimeMappingsSet()) {
    addMimeMapping(mimeMap);
  }
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(otherIsDistributable);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}"
29550,"public JspConfigDescriptor getJspConfigDescriptor(){
  return jspConfigDescriptor;
}","public JspConfigDescriptorImpl getJspConfigDescriptor(){
  return jspConfigDescriptor;
}"
29551,"@Override public void combineConnectorResourceDefinitionDescriptors(JndiNameEnvironment env){
  for (  ConnectorResourceDefinitionDescriptor crdd : env.getConnectorResourceDefinitionDescriptors()) {
    ConnectorResourceDefinitionDescriptor desc=getConnectorResourceDefinitionDescriptor(crdd.getName());
    if (desc != null) {
      if (desc.isConflict(crdd)) {
        conflictConnectorResourceDefinition=true;
      }
    }
 else {
      addConnectorResourceDefinitionDescriptor(desc);
    }
  }
}","@Override public void combineConnectorResourceDefinitionDescriptors(JndiNameEnvironment env){
  for (  ConnectorResourceDefinitionDescriptor crdd : env.getConnectorResourceDefinitionDescriptors()) {
    ConnectorResourceDefinitionDescriptor desc=getConnectorResourceDefinitionDescriptor(crdd.getName());
    if (desc != null) {
      if (desc.isConflict(crdd)) {
        conflictConnectorResourceDefinition=true;
      }
    }
 else {
      addConnectorResourceDefinitionDescriptor(null);
    }
  }
}"
29552,"/** 
 * @return the descriptor instance to associate with this XMLNode
 */
@Override public JspConfigDescriptor getDescriptor(){
  if (descriptor == null) {
    descriptor=new JspConfigDescriptor();
  }
  return descriptor;
}","/** 
 * @return the descriptor instance to associate with this XMLNode
 */
@Override public JspConfigDescriptorImpl getDescriptor(){
  if (descriptor == null) {
    descriptor=new JspConfigDescriptorImpl();
  }
  return descriptor;
}"
29553,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node in the DOM tree 
 * @param node name for the root element of this xml fragment      
 * @param the descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,String nodeName,JspConfigDescriptor descriptor){
  Node myNode=appendChild(parent,nodeName);
  TagLibNode lNode=new TagLibNode();
  for (  TaglibDescriptor desc : descriptor.getTaglibs()) {
    lNode.writeDescriptor(myNode,WebTagNames.TAGLIB,(TagLibConfigurationDescriptor)desc);
  }
  JspGroupNode jspGroup=new JspGroupNode();
  for (  JspPropertyGroupDescriptor desc : descriptor.getJspPropertyGroups()) {
    jspGroup.writeDescriptor(myNode,WebTagNames.JSP_GROUP,(JspGroupDescriptor)desc);
  }
  return myNode;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node in the DOM tree 
 * @param node name for the root element of this xml fragment      
 * @param the descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,String nodeName,JspConfigDescriptorImpl descriptor){
  Node myNode=appendChild(parent,nodeName);
  TagLibNode lNode=new TagLibNode();
  for (  TaglibDescriptor desc : descriptor.getTaglibs()) {
    lNode.writeDescriptor(myNode,WebTagNames.TAGLIB,(TagLibConfigurationDescriptor)desc);
  }
  JspGroupNode jspGroup=new JspGroupNode();
  for (  JspPropertyGroupDescriptor desc : descriptor.getJspPropertyGroups()) {
    jspGroup.writeDescriptor(myNode,WebTagNames.JSP_GROUP,(JspGroupDescriptor)desc);
  }
  return myNode;
}"
29554,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param webBundleDesc descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,T webBundleDesc){
  Node jarNode=super.writeDescriptor(parent,webBundleDesc);
  if (webBundleDesc.isDistributable()) {
    appendChild(jarNode,WebTagNames.DISTRIBUTABLE);
  }
  addInitParam(jarNode,WebTagNames.CONTEXT_PARAM,webBundleDesc.getContextParametersSet());
  FilterNode filterNode=new FilterNode();
  for (Enumeration filters=webBundleDesc.getServletFilters().elements(); filters.hasMoreElements(); ) {
    filterNode.writeDescriptor(jarNode,WebTagNames.FILTER,(ServletFilterDescriptor)filters.nextElement());
  }
  FilterMappingNode filterMappingNode=new FilterMappingNode();
  for (Enumeration mappings=webBundleDesc.getServletFilterMappings().elements(); mappings.hasMoreElements(); ) {
    filterMappingNode.writeDescriptor(jarNode,WebTagNames.FILTER_MAPPING,(ServletFilterMappingDescriptor)mappings.nextElement());
  }
  Vector appListeners=webBundleDesc.getAppListenerDescriptors();
  if (appListeners != null && !appListeners.isEmpty()) {
    ListenerNode listenerNode=new ListenerNode();
    for (Enumeration e=appListeners.elements(); e.hasMoreElements(); ) {
      listenerNode.writeDescriptor(jarNode,WebTagNames.LISTENER,(AppListenerDescriptorImpl)e.nextElement());
    }
  }
  Set servlets=webBundleDesc.getWebComponentDescriptors();
  if (servlets != null && !servlets.isEmpty()) {
    ServletNode servletNode=new ServletNode();
    for (Iterator e=servlets.iterator(); e.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)e.next();
      servletNode.writeDescriptor(jarNode,aServlet);
    }
    for (Iterator servletsIterator=servlets.iterator(); servletsIterator.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)servletsIterator.next();
      for (Iterator patterns=aServlet.getUrlPatternsSet().iterator(); patterns.hasNext(); ) {
        String pattern=(String)patterns.next();
        Node mappingNode=appendChild(jarNode,WebTagNames.SERVLET_MAPPING);
        appendTextChild(mappingNode,WebTagNames.SERVLET_NAME,aServlet.getCanonicalName());
        if (webBundleDesc.getSpecVersion().equals(""String_Node_Str"")) {
          if (!pattern.startsWith(""String_Node_Str"") && !pattern.startsWith(""String_Node_Str"")) {
            pattern=""String_Node_Str"" + pattern;
          }
        }
        appendTextChild(mappingNode,WebTagNames.URL_PATTERN,pattern);
      }
    }
  }
  MimeMappingNode mimeNode=new MimeMappingNode();
  for (Enumeration e=webBundleDesc.getMimeMappings(); e.hasMoreElements(); ) {
    MimeMappingDescriptor mimeMapping=(MimeMappingDescriptor)e.nextElement();
    mimeNode.writeDescriptor(jarNode,WebTagNames.MIME_MAPPING,mimeMapping);
  }
  Enumeration welcomeFiles=webBundleDesc.getWelcomeFiles();
  if (welcomeFiles.hasMoreElements()) {
    Node welcomeList=appendChild(jarNode,WebTagNames.WELCOME_FILE_LIST);
    while (welcomeFiles.hasMoreElements()) {
      appendTextChild(welcomeList,WebTagNames.WELCOME_FILE,(String)welcomeFiles.nextElement());
    }
  }
  Enumeration errorPages=webBundleDesc.getErrorPageDescriptors();
  if (errorPages.hasMoreElements()) {
    ErrorPageNode errorPageNode=new ErrorPageNode();
    while (errorPages.hasMoreElements()) {
      errorPageNode.writeDescriptor(jarNode,WebTagNames.ERROR_PAGE,(ErrorPageDescriptor)errorPages.nextElement());
    }
  }
  JspConfigDescriptor jspConf=webBundleDesc.getJspConfigDescriptor();
  if (jspConf != null) {
    JspConfigNode ln=new JspConfigNode();
    ln.writeDescriptor(jarNode,WebTagNames.JSPCONFIG,jspConf);
  }
  Enumeration securityConstraints=webBundleDesc.getSecurityConstraints();
  if (securityConstraints.hasMoreElements()) {
    SecurityConstraintNode scNode=new SecurityConstraintNode();
    while (securityConstraints.hasMoreElements()) {
      SecurityConstraintImpl sc=(SecurityConstraintImpl)securityConstraints.nextElement();
      scNode.writeDescriptor(jarNode,WebTagNames.SECURITY_CONSTRAINT,sc);
    }
  }
  LoginConfigurationImpl lci=(LoginConfigurationImpl)webBundleDesc.getLoginConfiguration();
  if (lci != null) {
    LoginConfigNode lcn=new LoginConfigNode();
    lcn.writeDescriptor(jarNode,WebTagNames.LOGIN_CONFIG,lci);
  }
  Enumeration roles=webBundleDesc.getSecurityRoles();
  if (roles.hasMoreElements()) {
    SecurityRoleNode srNode=new SecurityRoleNode();
    while (roles.hasMoreElements()) {
      SecurityRoleDescriptor role=(SecurityRoleDescriptor)roles.nextElement();
      srNode.writeDescriptor(jarNode,WebTagNames.ROLE,role);
    }
  }
  writeEnvEntryDescriptors(jarNode,webBundleDesc.getEnvironmentProperties().iterator());
  writeEjbReferenceDescriptors(jarNode,webBundleDesc.getEjbReferenceDescriptors().iterator());
  writeServiceReferenceDescriptors(jarNode,webBundleDesc.getServiceReferenceDescriptors().iterator());
  writeResourceRefDescriptors(jarNode,webBundleDesc.getResourceReferenceDescriptors().iterator());
  writeResourceEnvRefDescriptors(jarNode,webBundleDesc.getResourceEnvReferenceDescriptors().iterator());
  writeMessageDestinationRefDescriptors(jarNode,webBundleDesc.getMessageDestinationReferenceDescriptors().iterator());
  writeEntityManagerReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerReferenceDescriptors().iterator());
  writeEntityManagerFactoryReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerFactoryReferenceDescriptors().iterator());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.POST_CONSTRUCT,webBundleDesc.getPostConstructDescriptors());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.PRE_DESTROY,webBundleDesc.getPreDestroyDescriptors());
  writeDataSourceDefinitionDescriptors(jarNode,webBundleDesc.getDataSourceDefinitionDescriptors().iterator());
  writeConnectorResourceDefinitionDescriptors(jarNode,webBundleDesc.getConnectorResourceDefinitionDescriptors().iterator());
  writeMailSessionDescriptors(jarNode,webBundleDesc.getMailSessionDescriptors().iterator());
  writeMessageDestinations(jarNode,webBundleDesc.getMessageDestinations().iterator());
  LocaleEncodingMappingListDescriptor lemDesc=webBundleDesc.getLocaleEncodingMappingListDescriptor();
  if (lemDesc != null) {
    LocaleEncodingMappingListNode ln=new LocaleEncodingMappingListNode();
    ln.writeDescriptor(jarNode,WebTagNames.LOCALE_ENCODING_MAPPING_LIST,lemDesc);
  }
  if (webBundleDesc.getSessionConfig() != null) {
    SessionConfigNode scNode=new SessionConfigNode();
    scNode.writeDescriptor(jarNode,WebTagNames.SESSION_CONFIG,(SessionConfigDescriptor)webBundleDesc.getSessionConfig());
  }
  return jarNode;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param webBundleDesc descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,T webBundleDesc){
  Node jarNode=super.writeDescriptor(parent,webBundleDesc);
  if (webBundleDesc.isDistributable()) {
    appendChild(jarNode,WebTagNames.DISTRIBUTABLE);
  }
  addInitParam(jarNode,WebTagNames.CONTEXT_PARAM,webBundleDesc.getContextParametersSet());
  FilterNode filterNode=new FilterNode();
  for (Enumeration filters=webBundleDesc.getServletFilters().elements(); filters.hasMoreElements(); ) {
    filterNode.writeDescriptor(jarNode,WebTagNames.FILTER,(ServletFilterDescriptor)filters.nextElement());
  }
  FilterMappingNode filterMappingNode=new FilterMappingNode();
  for (Enumeration mappings=webBundleDesc.getServletFilterMappings().elements(); mappings.hasMoreElements(); ) {
    filterMappingNode.writeDescriptor(jarNode,WebTagNames.FILTER_MAPPING,(ServletFilterMappingDescriptor)mappings.nextElement());
  }
  Vector appListeners=webBundleDesc.getAppListenerDescriptors();
  if (appListeners != null && !appListeners.isEmpty()) {
    ListenerNode listenerNode=new ListenerNode();
    for (Enumeration e=appListeners.elements(); e.hasMoreElements(); ) {
      listenerNode.writeDescriptor(jarNode,WebTagNames.LISTENER,(AppListenerDescriptorImpl)e.nextElement());
    }
  }
  Set servlets=webBundleDesc.getWebComponentDescriptors();
  if (servlets != null && !servlets.isEmpty()) {
    ServletNode servletNode=new ServletNode();
    for (Iterator e=servlets.iterator(); e.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)e.next();
      servletNode.writeDescriptor(jarNode,aServlet);
    }
    for (Iterator servletsIterator=servlets.iterator(); servletsIterator.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)servletsIterator.next();
      for (Iterator patterns=aServlet.getUrlPatternsSet().iterator(); patterns.hasNext(); ) {
        String pattern=(String)patterns.next();
        Node mappingNode=appendChild(jarNode,WebTagNames.SERVLET_MAPPING);
        appendTextChild(mappingNode,WebTagNames.SERVLET_NAME,aServlet.getCanonicalName());
        if (webBundleDesc.getSpecVersion().equals(""String_Node_Str"")) {
          if (!pattern.startsWith(""String_Node_Str"") && !pattern.startsWith(""String_Node_Str"")) {
            pattern=""String_Node_Str"" + pattern;
          }
        }
        appendTextChild(mappingNode,WebTagNames.URL_PATTERN,pattern);
      }
    }
  }
  MimeMappingNode mimeNode=new MimeMappingNode();
  for (Enumeration e=webBundleDesc.getMimeMappings(); e.hasMoreElements(); ) {
    MimeMappingDescriptor mimeMapping=(MimeMappingDescriptor)e.nextElement();
    mimeNode.writeDescriptor(jarNode,WebTagNames.MIME_MAPPING,mimeMapping);
  }
  Enumeration welcomeFiles=webBundleDesc.getWelcomeFiles();
  if (welcomeFiles.hasMoreElements()) {
    Node welcomeList=appendChild(jarNode,WebTagNames.WELCOME_FILE_LIST);
    while (welcomeFiles.hasMoreElements()) {
      appendTextChild(welcomeList,WebTagNames.WELCOME_FILE,(String)welcomeFiles.nextElement());
    }
  }
  Enumeration errorPages=webBundleDesc.getErrorPageDescriptors();
  if (errorPages.hasMoreElements()) {
    ErrorPageNode errorPageNode=new ErrorPageNode();
    while (errorPages.hasMoreElements()) {
      errorPageNode.writeDescriptor(jarNode,WebTagNames.ERROR_PAGE,(ErrorPageDescriptor)errorPages.nextElement());
    }
  }
  JspConfigDescriptorImpl jspConf=webBundleDesc.getJspConfigDescriptor();
  if (jspConf != null) {
    JspConfigNode ln=new JspConfigNode();
    ln.writeDescriptor(jarNode,WebTagNames.JSPCONFIG,jspConf);
  }
  Enumeration securityConstraints=webBundleDesc.getSecurityConstraints();
  if (securityConstraints.hasMoreElements()) {
    SecurityConstraintNode scNode=new SecurityConstraintNode();
    while (securityConstraints.hasMoreElements()) {
      SecurityConstraintImpl sc=(SecurityConstraintImpl)securityConstraints.nextElement();
      scNode.writeDescriptor(jarNode,WebTagNames.SECURITY_CONSTRAINT,sc);
    }
  }
  LoginConfigurationImpl lci=(LoginConfigurationImpl)webBundleDesc.getLoginConfiguration();
  if (lci != null) {
    LoginConfigNode lcn=new LoginConfigNode();
    lcn.writeDescriptor(jarNode,WebTagNames.LOGIN_CONFIG,lci);
  }
  Enumeration roles=webBundleDesc.getSecurityRoles();
  if (roles.hasMoreElements()) {
    SecurityRoleNode srNode=new SecurityRoleNode();
    while (roles.hasMoreElements()) {
      SecurityRoleDescriptor role=(SecurityRoleDescriptor)roles.nextElement();
      srNode.writeDescriptor(jarNode,WebTagNames.ROLE,role);
    }
  }
  writeEnvEntryDescriptors(jarNode,webBundleDesc.getEnvironmentProperties().iterator());
  writeEjbReferenceDescriptors(jarNode,webBundleDesc.getEjbReferenceDescriptors().iterator());
  writeServiceReferenceDescriptors(jarNode,webBundleDesc.getServiceReferenceDescriptors().iterator());
  writeResourceRefDescriptors(jarNode,webBundleDesc.getResourceReferenceDescriptors().iterator());
  writeResourceEnvRefDescriptors(jarNode,webBundleDesc.getResourceEnvReferenceDescriptors().iterator());
  writeMessageDestinationRefDescriptors(jarNode,webBundleDesc.getMessageDestinationReferenceDescriptors().iterator());
  writeEntityManagerReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerReferenceDescriptors().iterator());
  writeEntityManagerFactoryReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerFactoryReferenceDescriptors().iterator());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.POST_CONSTRUCT,webBundleDesc.getPostConstructDescriptors());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.PRE_DESTROY,webBundleDesc.getPreDestroyDescriptors());
  writeDataSourceDefinitionDescriptors(jarNode,webBundleDesc.getDataSourceDefinitionDescriptors().iterator());
  writeConnectorResourceDefinitionDescriptors(jarNode,webBundleDesc.getConnectorResourceDefinitionDescriptors().iterator());
  writeMailSessionDescriptors(jarNode,webBundleDesc.getMailSessionDescriptors().iterator());
  writeMessageDestinations(jarNode,webBundleDesc.getMessageDestinations().iterator());
  LocaleEncodingMappingListDescriptor lemDesc=webBundleDesc.getLocaleEncodingMappingListDescriptor();
  if (lemDesc != null) {
    LocaleEncodingMappingListNode ln=new LocaleEncodingMappingListNode();
    ln.writeDescriptor(jarNode,WebTagNames.LOCALE_ENCODING_MAPPING_LIST,lemDesc);
  }
  if (webBundleDesc.getSessionConfig() != null) {
    SessionConfigNode scNode=new SessionConfigNode();
    scNode.writeDescriptor(jarNode,WebTagNames.SESSION_CONFIG,(SessionConfigDescriptor)webBundleDesc.getSessionConfig());
  }
  return jarNode;
}"
29555,"/** 
 * Adds  a new DOL descriptor instance to the descriptor instance associated with  this XMLNode
 * @param newDescriptor the new descriptor
 */
public void addDescriptor(Object newDescriptor){
  if (newDescriptor instanceof EjbReference) {
    descriptor.addEjbReferenceDescriptor((EjbReference)newDescriptor);
  }
 else   if (newDescriptor instanceof EnvironmentProperty) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    descriptor.addEnvironmentProperty((EnvironmentProperty)newDescriptor);
  }
 else   if (newDescriptor instanceof WebComponentDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    descriptor.addWebComponentDescriptor((WebComponentDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof TagLibConfigurationDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getJspConfigDescriptor() == null) {
      descriptor.setJspConfigDescriptor(new JspConfigDescriptor());
    }
    descriptor.getJspConfigDescriptor().addTagLib((TagLibConfigurationDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof JspConfigDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getJspConfigDescriptor() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setJspConfigDescriptor((JspConfigDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof LoginConfiguration) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getLoginConfiguration() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setLoginConfiguration((LoginConfiguration)newDescriptor);
  }
 else   if (newDescriptor instanceof SessionConfig) {
    if (descriptor.getSessionConfig() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setSessionConfig((SessionConfig)newDescriptor);
  }
 else {
    super.addDescriptor(newDescriptor);
  }
}","/** 
 * Adds  a new DOL descriptor instance to the descriptor instance associated with  this XMLNode
 * @param newDescriptor the new descriptor
 */
public void addDescriptor(Object newDescriptor){
  if (newDescriptor instanceof EjbReference) {
    descriptor.addEjbReferenceDescriptor((EjbReference)newDescriptor);
  }
 else   if (newDescriptor instanceof EnvironmentProperty) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    descriptor.addEnvironmentProperty((EnvironmentProperty)newDescriptor);
  }
 else   if (newDescriptor instanceof WebComponentDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    descriptor.addWebComponentDescriptor((WebComponentDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof TagLibConfigurationDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getJspConfigDescriptor() == null) {
      descriptor.setJspConfigDescriptor(new JspConfigDescriptorImpl());
    }
    descriptor.getJspConfigDescriptor().addTagLib((TagLibConfigurationDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof JspConfigDescriptorImpl) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getJspConfigDescriptor() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setJspConfigDescriptor((JspConfigDescriptorImpl)newDescriptor);
  }
 else   if (newDescriptor instanceof LoginConfiguration) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getLoginConfiguration() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setLoginConfiguration((LoginConfiguration)newDescriptor);
  }
 else   if (newDescriptor instanceof SessionConfig) {
    if (descriptor.getSessionConfig() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setSessionConfig((SessionConfig)newDescriptor);
  }
 else {
    super.addDescriptor(newDescriptor);
  }
}"
29556,"/** 
 * Handle the HTTP status code (and corresponding message) generated while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the error report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 */
protected void status(Request request,Response response){
  Context context=request.getContext();
  if (context == null)   return;
  if (!response.isError()) {
    return;
  }
  int statusCode=((HttpResponse)response).getStatus();
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    dispatchToErrorPage(request,response,errorPage,null,null,statusCode);
  }
 else   if (statusCode >= 400 && statusCode < 600 && context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),null,null,statusCode);
  }
 else {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
    if (errorPage != null) {
      try {
        handleHostErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log(""String_Node_Str"" + errorPage,e);
      }
    }
  }
}","/** 
 * Handle the HTTP status code (and corresponding message) generated while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the error report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 */
protected void status(Request request,Response response){
  Context context=request.getContext();
  if (context == null)   return;
  if (!response.isError()) {
    return;
  }
  int statusCode=((HttpResponse)response).getStatus();
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    setErrorPageContentType(response,errorPage.getLocation(),context);
    dispatchToErrorPage(request,response,errorPage,null,null,statusCode);
  }
 else   if (statusCode >= 400 && statusCode < 600 && context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),null,null,statusCode);
  }
 else {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
    if (errorPage != null) {
      try {
        setErrorPageContentType(response,errorPage.getLocation(),context);
        handleHostErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log(""String_Node_Str"" + errorPage,e);
      }
    }
  }
}"
29557,"/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    appLevel.add(commonResourceBundleDescriptor.getName());
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,commonResourceBundleDescriptor.getName())) {
      return false;
    }
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
  Vector appClientLevel=new Vector();
  for (  ApplicationClientDescriptor acd : appClientDescs) {
    appClientLevel.add(acd.getName());
    Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,acd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,acd.getName())) {
      return false;
    }
  }
  validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
  Vector cdLevel=new Vector();
  for (  ConnectorDescriptor cd : connectorDescs) {
    cdLevel.add(cd.getName());
    Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,cd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,cd.getName())) {
      return false;
    }
  }
  validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
  Vector ebdLevel=new Vector();
  Vector edLevel=new Vector();
  for (  EjbBundleDescriptor ebd : ejbBundleDescs) {
    ebdLevel.add(ebd.getName());
    Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,ebd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,ebd.getName())) {
      return false;
    }
    Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
    for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
      EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
      edLevel.add(ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName());
      mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName())) {
        return false;
      }
      dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName())) {
        return false;
      }
    }
  }
  validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
  validNameSpaceDetails.put(EJB_KEYS,edLevel);
  Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
  Vector wbdLevel=new Vector();
  for (  WebBundleDescriptor wbd : webBundleDescs) {
    wbdLevel.add(wbd.getName());
    Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,wbd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,wbd.getName())) {
      return false;
    }
  }
  validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}","/** 
 * Method to read complete application and all defined descriptor for given app. Method is used to identify scope and validation for all defined jndi names at different namespace.
 * @param application
 * @return
 */
public boolean validateResourceDescriptor(Application application){
  CommonResourceBundleDescriptor commonResourceBundleDescriptor=(CommonResourceBundleDescriptor)application;
  Vector appLevel=new Vector();
  if (commonResourceBundleDescriptor != null) {
    Set<MailSessionDescriptor> mailSessionDescriptors=commonResourceBundleDescriptor.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,commonResourceBundleDescriptor.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=commonResourceBundleDescriptor.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,commonResourceBundleDescriptor.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      appLevel.add(commonResourceBundleDescriptor.getName());
    }
    validNameSpaceDetails.put(APP_KEYS,appLevel);
  }
  Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
  Vector appClientLevel=new Vector();
  for (  ApplicationClientDescriptor acd : appClientDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=acd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,acd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=acd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,acd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      appClientLevel.add(acd.getName());
    }
  }
  validNameSpaceDetails.put(APPCLIENT_KEYS,appClientLevel);
  Set<ConnectorDescriptor> connectorDescs=application.getBundleDescriptors(ConnectorDescriptor.class);
  Vector cdLevel=new Vector();
  for (  ConnectorDescriptor cd : connectorDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=cd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,cd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=cd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,cd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      cdLevel.add(cd.getName());
    }
  }
  validNameSpaceDetails.put(CONNECTOR_KEYS,cdLevel);
  Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
  Vector ebdLevel=new Vector();
  Vector edLevel=new Vector();
  for (  EjbBundleDescriptor ebd : ejbBundleDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=ebd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,ebd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=ebd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,ebd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      ebdLevel.add(ebd.getName());
    }
    Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
    for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
      EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
      mailSessionDescriptors=ejbDescriptor.getMailSessionDescriptors();
      if (isExistingMailSession(mailSessionDescriptors,ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName())) {
        return false;
      }
      dataSourceDefinitionDescriptors=ejbDescriptor.getDataSourceDefinitionDescriptors();
      if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName())) {
        return false;
      }
      if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
        edLevel.add(ebd.getName() + ""String_Node_Str"" + ejbDescriptor.getName());
      }
    }
  }
  validNameSpaceDetails.put(EJBBUNDLE_KEYS,ebdLevel);
  validNameSpaceDetails.put(EJB_KEYS,edLevel);
  Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
  Vector wbdLevel=new Vector();
  for (  WebBundleDescriptor wbd : webBundleDescs) {
    Set<MailSessionDescriptor> mailSessionDescriptors=wbd.getMailSessionDescriptors();
    if (isExistingMailSession(mailSessionDescriptors,wbd.getName())) {
      return false;
    }
    Set<DataSourceDefinitionDescriptor> dataSourceDefinitionDescriptors=wbd.getDataSourceDefinitionDescriptors();
    if (isExistingDataSourceDefinition(dataSourceDefinitionDescriptors,wbd.getName())) {
      return false;
    }
    if (mailSessionDescriptors.size() > 0 || dataSourceDefinitionDescriptors.size() > 0) {
      wbdLevel.add(wbd.getName());
    }
  }
  validNameSpaceDetails.put(WEBBUNDLE_KEYS,wbdLevel);
  if (allUniqueResource) {
    return compareDescriptors();
  }
  return allUniqueResource;
}"
29558,"public List<EngineInfo> setupContainerInfos(final ArchiveHandler handler,Collection<? extends Sniffer> sniffers,DeploymentContext context) throws Exception {
}","public List<EngineInfo> setupContainerInfos(final ArchiveHandler handler,Collection<? extends Sniffer> sniffers,DeploymentContext context) throws Exception {
  final ActionReport report=context.getActionReport();
  DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
  Map<Deployer,EngineInfo> containerInfosByDeployers=new LinkedHashMap<Deployer,EngineInfo>();
  for (  Sniffer sniffer : sniffers) {
    if (sniffer.getContainersNames() == null || sniffer.getContainersNames().length == 0) {
      report.failure(logger,""String_Node_Str"" + sniffer.getModuleType(),null);
      return null;
    }
    final String containerName=sniffer.getContainersNames()[0];
    if (tracing != null) {
      tracing.addContainerMark(DeploymentTracing.ContainerMark.SNIFFER_DONE,containerName);
    }
    EngineInfo engineInfo=containerRegistry.getContainer(containerName);
    if (engineInfo == null) {
      Collection<EngineInfo> containersInfo=null;
synchronized (containerRegistry) {
        if (containerRegistry.getContainer(containerName) == null) {
          if (tracing != null) {
            tracing.addContainerMark(DeploymentTracing.ContainerMark.BEFORE_CONTAINER_SETUP,containerName);
          }
          containersInfo=setupContainer(sniffer,logger,context);
          if (tracing != null) {
            tracing.addContainerMark(DeploymentTracing.ContainerMark.AFTER_CONTAINER_SETUP,containerName);
          }
          if (containersInfo == null || containersInfo.size() == 0) {
            String msg=""String_Node_Str"" + sniffer.getModuleType();
            report.failure(logger,msg,null);
            throw new Exception(msg);
          }
        }
      }
      if (containersInfo != null && !startContainers(containersInfo,logger,context)) {
        final String msg=""String_Node_Str"" + containerName;
        report.failure(logger,msg,null);
        throw new Exception(msg);
      }
    }
    engineInfo=containerRegistry.getContainer(sniffer.getContainersNames()[0]);
    if (tracing != null) {
      tracing.addContainerMark(DeploymentTracing.ContainerMark.GOT_CONTAINER,containerName);
    }
    if (engineInfo == null) {
      final String msg=""String_Node_Str"" + containerName;
      report.failure(logger,msg,null);
      throw new Exception(msg);
    }
    Deployer deployer=getDeployer(engineInfo);
    if (deployer == null) {
      if (!startContainers(Collections.singleton(engineInfo),logger,context)) {
        final String msg=""String_Node_Str"" + containerName;
        report.failure(logger,msg,null);
        throw new Exception(msg);
      }
      deployer=getDeployer(engineInfo);
      if (deployer == null) {
        report.failure(logger,""String_Node_Str"" + engineInfo.getContainer().getClass() + ""String_Node_Str"");
        return null;
      }
    }
    if (tracing != null) {
      tracing.addContainerMark(DeploymentTracing.ContainerMark.GOT_DEPLOYER,containerName);
    }
    containerInfosByDeployers.put(deployer,engineInfo);
  }
  List<ApplicationMetaDataProvider> providers=new LinkedList<ApplicationMetaDataProvider>();
  providers.addAll(habitat.getAllByContract(ApplicationMetaDataProvider.class));
  List<EngineInfo> sortedEngineInfos=new ArrayList<EngineInfo>();
  Map<Class,ApplicationMetaDataProvider> typeByProvider=new HashMap<Class,ApplicationMetaDataProvider>();
  for (  ApplicationMetaDataProvider provider : habitat.getAllByContract(ApplicationMetaDataProvider.class)) {
    if (provider.getMetaData() != null) {
      for (      Class provided : provider.getMetaData().provides()) {
        typeByProvider.put(provided,provider);
      }
    }
  }
  for (  ApplicationMetaDataProvider provider : habitat.getAllByContract(ApplicationMetaDataProvider.class)) {
    if (provider.getMetaData() != null) {
      for (      Class dependency : provider.getMetaData().requires()) {
        if (!typeByProvider.containsKey(dependency)) {
          logger.warning(""String_Node_Str"" + provider + ""String_Node_Str""+ dependency+ ""String_Node_Str"");
        }
      }
    }
  }
  Map<Class,Deployer> typeByDeployer=new HashMap<Class,Deployer>();
  for (  Deployer deployer : containerInfosByDeployers.keySet()) {
    if (deployer.getMetaData() != null) {
      for (      Class provided : deployer.getMetaData().provides()) {
        typeByDeployer.put(provided,deployer);
      }
    }
  }
  for (  Deployer deployer : containerInfosByDeployers.keySet()) {
    if (deployer.getMetaData() != null) {
      for (      Class dependency : deployer.getMetaData().requires()) {
        if (!typeByDeployer.containsKey(dependency) && !typeByProvider.containsKey(dependency)) {
          Service s=deployer.getClass().getAnnotation(Service.class);
          String serviceName;
          if (s != null && s.name() != null && s.name().length() > 0) {
            serviceName=s.name();
          }
 else {
            serviceName=deployer.getClass().getSimpleName();
          }
          report.failure(logger,serviceName + ""String_Node_Str"" + dependency+ ""String_Node_Str"",null);
          return null;
        }
      }
    }
  }
  List<Deployer> orderedDeployers=new ArrayList<Deployer>();
  for (  Deployer deployer : containerInfosByDeployers.keySet()) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + deployer.getClass());
    }
    loadDeployer(orderedDeployers,deployer,typeByDeployer,typeByProvider,context);
  }
  for (  Deployer deployer : orderedDeployers) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + deployer.getClass());
    }
    final MetaData metadata=deployer.getMetaData();
    try {
      if (metadata != null) {
        if (metadata.provides() == null || metadata.provides().length == 0) {
          deployer.loadMetaData(null,context);
        }
 else {
          for (          Class<?> provide : metadata.provides()) {
            if (context.getModuleMetaData(provide) == null) {
              context.addModuleMetaData(deployer.loadMetaData(provide,context));
            }
 else {
              deployer.loadMetaData(null,context);
            }
          }
        }
      }
 else {
        deployer.loadMetaData(null,context);
      }
    }
 catch (    Exception e) {
      report.failure(logger,""String_Node_Str"" + deployer.getClass() + ""String_Node_Str"",e);
      throw e;
    }
    sortedEngineInfos.add(containerInfosByDeployers.get(deployer));
  }
  return sortedEngineInfos;
}"
29559,"/** 
 * Get the Permissions for a CodeSource.  If this instance of WebappClassLoader is for a web application context, add read FilePermission or JndiPermissions for the base directory (if unpacked), the context URL, and jar file resources.
 * @param codeSource where the code was loaded from
 * @return PermissionCollection for CodeSource
 */
@Override protected PermissionCollection getPermissions(CodeSource codeSource){
  String codeUrl=codeSource.getLocation().toString();
  PermissionCollection pc;
  if ((pc=loaderPC.get(codeUrl)) == null) {
    pc=super.getPermissions(codeSource);
    if (pc != null) {
      Iterator<Permission> perms=permissionList.iterator();
      while (perms.hasNext()) {
        Permission p=perms.next();
        pc.add(p);
      }
      loaderPC.put(codeUrl,pc);
    }
  }
  return (pc);
}","/** 
 * Get the Permissions for a CodeSource.  If this instance of WebappClassLoader is for a web application context, add read FilePermission or JndiPermissions for the base directory (if unpacked), the context URL, and jar file resources.
 * @param codeSource where the code was loaded from
 * @return PermissionCollection for CodeSource
 */
@Override protected PermissionCollection getPermissions(CodeSource codeSource){
  String codeUrl=codeSource.getLocation().toString();
  PermissionCollection pc;
  if ((pc=loaderPC.get(codeUrl)) == null) {
    pc=super.getPermissions(codeSource);
    if (pc != null) {
      Iterator<Permission> perms=permissionList.iterator();
      while (perms.hasNext()) {
        Permission p=perms.next();
        pc.add(p);
      }
      PermissionCollection tmpPc=loaderPC.putIfAbsent(codeUrl,pc);
      if (tmpPc != null) {
        pc=tmpPc;
      }
    }
  }
  return (pc);
}"
29560,"public ServletRegistration.Dynamic addServletFacade(String servletName,String className){
  if (servletName == null || className == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  DynamicServletRegistrationImpl regis=(DynamicServletRegistrationImpl)servletRegisMap.get(servletName);
  if (regis == null) {
    StandardWrapper wrapper=new StandardWrapper();
    wrapper.setName(servletName);
    wrapper.setServletClassName(className);
    regis=(DynamicServletRegistrationImpl)createDynamicServletRegistrationImpl((StandardWrapper)wrapper);
    servletRegisMap.put(servletName,regis);
    servlets.put(servletName,className);
  }
  return regis;
}","public ServletRegistration.Dynamic addServletFacade(String servletName,String className){
  if (servletName == null || className == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  DynamicServletRegistrationImpl regis=(DynamicServletRegistrationImpl)servletRegisMap.get(servletName);
  if (regis == null) {
    StandardWrapper wrapper=new StandardWrapper();
    wrapper.setName(servletName);
    wrapper.setServletClassName(className);
    regis=(DynamicServletRegistrationImpl)createDynamicServletRegistrationImpl(wrapper);
    DynamicServletRegistrationImpl tmpRegis=(DynamicServletRegistrationImpl)servletRegisMap.putIfAbsent(servletName,regis);
    if (tmpRegis != null) {
      regis=tmpRegis;
    }
    servlets.put(servletName,className);
  }
  return regis;
}"
29561,"/** 
 * Retrieve the Singleton DeploymentFactoryManager
 * @return DeploymentFactoryManager instance
 */
public static DeploymentFactoryManager getInstance(){
  if (deploymentFactoryManager == null) {
    deploymentFactoryManager=new DeploymentFactoryManager();
  }
  return deploymentFactoryManager;
}","/** 
 * Retrieve the Singleton DeploymentFactoryManager
 * @return DeploymentFactoryManager instance
 */
public static DeploymentFactoryManager getInstance(){
  return deploymentFactoryManager;
}"
29562,"@Override public boolean handles(ReadableArchive archive) throws IOException {
  return DeploymentUtils.isCAR(archive);
}","@Override public boolean handles(ReadableArchive archive) throws IOException {
  try {
    if (archive.exists(APPLICATION_CLIENT_XML) || archive.exists(SUN_APPLICATION_CLIENT_XML) || archive.exists(GF_APPLICATION_CLIENT_XML)) {
      return true;
    }
    Manifest manifest=archive.getManifest();
    if (manifest != null && manifest.getMainAttributes().containsKey(Attributes.Name.MAIN_CLASS)) {
      return true;
    }
  }
 catch (  IOException ioe) {
  }
  return false;
}"
29563,"/** 
 * {@inheritDoc}
 */
public boolean handles(ReadableArchive archive) throws IOException {
  boolean handles=DeploymentUtils.isRAR(archive);
  if (!handles && (archive instanceof FileArchive)) {
    GenericAnnotationDetector detector=new GenericAnnotationDetector(connectorAnnotations);
    handles=detector.hasAnnotationInArchive(archive);
  }
  return handles;
}","/** 
 * {@inheritDoc}
 */
public boolean handles(ReadableArchive archive) throws IOException {
  boolean handles=false;
  try {
    if (Util.getURIName(archive.getURI()).endsWith(RAR_EXTENSION)) {
      return true;
    }
    handles=archive.exists(RA_XML);
  }
 catch (  IOException ioe) {
  }
  if (!handles && (archive instanceof FileArchive)) {
    GenericAnnotationDetector detector=new GenericAnnotationDetector(connectorAnnotations);
    handles=detector.hasAnnotationInArchive(archive);
  }
  return handles;
}"
29564,"/** 
 * check whether the archive is a JavaEE archive
 * @param archive archive to be tested
 * @param habitat
 * @return whether the archive is a JavaEE archive
 */
public static boolean isJavaEE(ReadableArchive archive,BaseServiceLocator habitat){
  if (DeploymentUtils.isEAR(archive) || DeploymentUtils.isWebArchive(archive) || DeploymentUtils.isCAR(archive)|| DeploymentUtils.isRAR(archive,habitat)|| DeploymentUtils.isEjbJar(archive,habitat)) {
    return true;
  }
  return false;
}","/** 
 * check whether the archive is a JavaEE archive
 * @param archive archive to be tested
 * @param context deployment context
 * @param habitat
 * @return whether the archive is a JavaEE archive
 */
public static boolean isJavaEE(ReadableArchive archive,DeploymentContext context,BaseServiceLocator habitat){
  if (DeploymentUtils.isArchiveOfType(archive,DOLUtils.earType(),context,habitat) || DeploymentUtils.isArchiveOfType(archive,DOLUtils.warType(),context,habitat) || DeploymentUtils.isArchiveOfType(archive,DOLUtils.carType(),context,habitat)|| DeploymentUtils.isArchiveOfType(archive,DOLUtils.rarType(),context,habitat)|| DeploymentUtils.isArchiveOfType(archive,DOLUtils.ejbType(),context,habitat)) {
    return true;
  }
  return false;
}"
29565,"@Override public boolean handles(ReadableArchive archive) throws IOException {
  return DeploymentUtils.isEAR(archive);
}","@Override public boolean handles(ReadableArchive archive) throws IOException {
  boolean isEar=false;
  try {
    if (Util.getURIName(archive.getURI()).endsWith(EAR_EXTENSION)) {
      return true;
    }
    isEar=archive.exists(APPLICATION_XML) || archive.exists(SUN_APPLICATION_XML) || archive.exists(GF_APPLICATION_XML);
    if (!isEar) {
      isEar=isEARFromIntrospecting(archive);
    }
  }
 catch (  IOException ioe) {
  }
  return isEar;
}"
29566,"/** 
 * Returns true if the passed file or directory is recognized by this instance.
 * @param location the file or directory to explore
 * @return true if this sniffer handles this application type
 */
@Override public boolean handles(ReadableArchive location){
  return DeploymentUtils.isEAR(location);
}","/** 
 * Returns true if the passed file or directory is recognized by this instance.
 * @param location the file or directory to explore
 * @return true if this sniffer handles this application type
 */
@Override public boolean handles(ReadableArchive location){
  return DeploymentUtils.isArchiveOfType(location,earType,locator);
}"
29567,"@Override public boolean handles(ReadableArchive archive){
  return DeploymentUtils.isEjbJar(archive,baseServiceLocator);
}","@Override public boolean handles(ReadableArchive archive){
  try {
    if (archive.exists(EJB_JAR_XML) || archive.exists(SUN_EJB_JAR_XML) || archive.exists(GF_EJB_JAR_XML)) {
      return true;
    }
    GenericAnnotationDetector detector=new GenericAnnotationDetector(sniffer.getAnnotationTypes());
    return detector.hasAnnotationInArchive(archive);
  }
 catch (  IOException ioe) {
  }
  return false;
}"
29568,"/** 
 * Returns true if the passed file or directory is recognized by this instance.
 * @param location the file or directory to explore
 * @return true if this sniffer handles this application type
 */
public boolean handles(ReadableArchive location){
  boolean result=super.handles(location);
  if (result == false) {
    try {
      result=location.exists(""String_Node_Str"") || location.exists(""String_Node_Str"");
    }
 catch (    IOException ioe) {
    }
  }
  if (result == false) {
    try {
      result=location.exists(""String_Node_Str"");
    }
 catch (    IOException ioEx) {
    }
  }
  return result;
}","/** 
 * Returns true if the passed file or directory is recognized by this instance.
 * @param location the file or directory to explore
 * @return true if this sniffer handles this application type
 */
@Override public boolean handles(ReadableArchive location){
  boolean result=super.handles(location);
  if (result == false) {
    try {
      result=location.exists(""String_Node_Str"") || location.exists(""String_Node_Str"");
    }
 catch (    IOException ioe) {
    }
  }
  if (result == false) {
    try {
      result=location.exists(""String_Node_Str"");
    }
 catch (    IOException ioEx) {
    }
  }
  return result;
}"
29569,"@Override protected boolean postHandles(ReadableArchive abstractArchive) throws IOException {
  AnnotationDetector detector=new AnnotationDetector(new EjbComponentAnnotationScanner());
  return (!DeploymentUtils.isWebArchive(abstractArchive)) && detector.hasAnnotationInArchiveWithNoScanning(abstractArchive);
}","@Override protected boolean postHandles(ReadableArchive abstractArchive) throws IOException {
  AnnotationDetector detector=new AnnotationDetector(new EjbComponentAnnotationScanner());
  return (!DeploymentUtils.isArchiveOfType(abstractArchive,DOLUtils.warType(),locator)) && detector.hasAnnotationInArchiveWithNoScanning(abstractArchive);
}"
29570,"/** 
 * Returns true if the passed file or directory is recognized by this instance.
 * @param archive the file or directory to explore
 * @return true if this sniffer handles this application type
 */
@Override public boolean handles(ReadableArchive archive){
  return DeploymentUtils.hasResourcesXML(archive);
}","/** 
 * Returns true if the passed file or directory is recognized by this instance.
 * @param archive the file or directory to explore
 * @return true if this sniffer handles this application type
 */
@Override public boolean handles(ReadableArchive archive){
  return ResourceUtil.hasResourcesXML(archive,locator);
}"
29571,"@Override public boolean stop(ApplicationContext stopContext){
  if (stopContext instanceof DeploymentContext) {
    DeploymentContext deployContext=(DeploymentContext)stopContext;
    Properties props=null;
    boolean keepSessions=isKeepState(deployContext,false);
    if (keepSessions) {
      props=new Properties();
    }
    container.unloadWebModule(getDescriptor().getContextRoot(),null,wmInfo.getVirtualServers(),props);
    if (keepSessions) {
      Properties actionReportProps=getActionReportProperties(deployContext);
      if (actionReportProps != null) {
        actionReportProps.putAll(props);
      }
    }
  }
  stopCoherenceWeb();
  return true;
}","@Override public boolean stop(ApplicationContext stopContext){
  if (stopContext instanceof DeploymentContext) {
    DeploymentContext deployContext=(DeploymentContext)stopContext;
    Properties props=null;
    boolean keepSessions=isKeepState(deployContext,false);
    if (keepSessions) {
      props=new Properties();
    }
    container.unloadWebModule(getDescriptor().getContextRoot(),getDescriptor().getApplication().getRegistrationName(),wmInfo.getVirtualServers(),props);
    if (keepSessions) {
      Properties actionReportProps=getActionReportProperties(deployContext);
      if (actionReportProps != null) {
        actionReportProps.putAll(props);
      }
    }
  }
  stopCoherenceWeb();
  return true;
}"
29572,"/** 
 * Undeploy a web application.
 * @param contextRoot    the context's name to undeploy
 * @param appName        the J2EE appname used at deployment time
 * @param virtualServers List of current virtual-server object.
 * @param dummy          true if the web module to be undeployed is a dummy webmodule, that is, a web module created off of a virtual server's docroot
 */
public void unloadWebModule(String contextRoot,String appName,String virtualServers,boolean dummy,Properties props){
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"" + contextRoot + ""String_Node_Str""+ appName);
  }
  if (contextRoot.length() != 0 && !contextRoot.startsWith(""String_Node_Str"")) {
    contextRoot=""String_Node_Str"" + contextRoot;
  }
 else   if (""String_Node_Str"".equals(contextRoot)) {
    contextRoot=""String_Node_Str"";
  }
  List<String> hostList=StringUtils.parseStringList(virtualServers,""String_Node_Str"");
  boolean unloadFromAll=hostList == null || hostList.isEmpty();
  boolean hasBeenUndeployed=false;
  VirtualServer host=null;
  WebModule context=null;
  Container[] hostArray=getEngine().findChildren();
  for (  Container aHostArray : hostArray) {
    host=(VirtualServer)aHostArray;
    if (unloadFromAll || hostList.contains(host.getName()) || verifyAlias(hostList,host)) {
      context=(WebModule)host.findChild(contextRoot);
      if (context != null) {
        context.saveSessions(props);
        host.removeChild(context);
        webStatsProviderBootstrap.unregisterApplicationStatsProviders(context.getMonitoringNodeName(),host.getName());
        try {
          if (!isShutdown) {
            context.destroy();
          }
        }
 catch (        Exception ex) {
          String msg=rb.getString(""String_Node_Str"");
          msg=MessageFormat.format(msg,contextRoot,host.getName());
          _logger.log(Level.WARNING,msg,ex);
        }
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"" + contextRoot + ""String_Node_Str""+ host);
        }
        hasBeenUndeployed=true;
        host.fireContainerEvent(Deployer.REMOVE_EVENT,context);
        if (context.hasAdHocPaths() || context.hasAdHocSubtrees()) {
          WebModule wm=createAdHocWebModule(context.getID(),host,contextRoot,context.getJ2EEApplication());
          wm.addAdHocPaths(context.getAdHocPaths());
          wm.addAdHocSubtrees(context.getAdHocSubtrees());
        }
        if (!dummy && !isShutdown) {
          WebModuleConfig wmInfo=host.createSystemDefaultWebModuleIfNecessary(habitat.getComponent(WebArchivist.class));
          if (wmInfo != null) {
            loadStandaloneWebModule(host,wmInfo);
          }
        }
      }
    }
  }
  if (!hasBeenUndeployed) {
    _logger.log(Level.SEVERE,""String_Node_Str"",contextRoot);
  }
}","/** 
 * Undeploy a web application.
 * @param contextRoot    the context's name to undeploy
 * @param appName        the J2EE appname used at deployment time
 * @param virtualServers List of current virtual-server object.
 * @param dummy          true if the web module to be undeployed is a dummy webmodule, that is, a web module created off of a virtual server's docroot
 */
public void unloadWebModule(String contextRoot,String appName,String virtualServers,boolean dummy,Properties props){
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"" + contextRoot + ""String_Node_Str""+ appName);
  }
  if (contextRoot.length() != 0 && !contextRoot.startsWith(""String_Node_Str"")) {
    contextRoot=""String_Node_Str"" + contextRoot;
  }
 else   if (""String_Node_Str"".equals(contextRoot)) {
    contextRoot=""String_Node_Str"";
  }
  List<String> hostList=StringUtils.parseStringList(virtualServers,""String_Node_Str"");
  boolean unloadFromAll=hostList == null || hostList.isEmpty();
  boolean hasBeenUndeployed=false;
  VirtualServer host=null;
  WebModule context=null;
  Container[] hostArray=getEngine().findChildren();
  for (  Container aHostArray : hostArray) {
    host=(VirtualServer)aHostArray;
    if (unloadFromAll || hostList.contains(host.getName()) || verifyAlias(hostList,host)) {
      context=(WebModule)host.findChild(contextRoot);
      if (context != null && context.getWebBundleDescriptor().getApplication().getRegistrationName().equals(appName)) {
        context.saveSessions(props);
        host.removeChild(context);
        webStatsProviderBootstrap.unregisterApplicationStatsProviders(context.getMonitoringNodeName(),host.getName());
        try {
          if (!isShutdown) {
            context.destroy();
          }
        }
 catch (        Exception ex) {
          String msg=rb.getString(""String_Node_Str"");
          msg=MessageFormat.format(msg,contextRoot,host.getName());
          _logger.log(Level.WARNING,msg,ex);
        }
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"" + contextRoot + ""String_Node_Str""+ host);
        }
        hasBeenUndeployed=true;
        host.fireContainerEvent(Deployer.REMOVE_EVENT,context);
        if (context.hasAdHocPaths() || context.hasAdHocSubtrees()) {
          WebModule wm=createAdHocWebModule(context.getID(),host,contextRoot,context.getJ2EEApplication());
          wm.addAdHocPaths(context.getAdHocPaths());
          wm.addAdHocSubtrees(context.getAdHocSubtrees());
        }
        if (!dummy && !isShutdown) {
          WebModuleConfig wmInfo=host.createSystemDefaultWebModuleIfNecessary(habitat.getComponent(WebArchivist.class));
          if (wmInfo != null) {
            loadStandaloneWebModule(host,wmInfo);
          }
        }
      }
    }
  }
  if (!hasBeenUndeployed) {
    _logger.log(Level.SEVERE,""String_Node_Str"",contextRoot);
  }
}"
29573,"/** 
 * Delete virtual-server.
 * @param httpService element which contains the configuration info.
 */
public void deleteHost(HttpService httpService) throws LifecycleException {
  VirtualServer virtualServer;
  Container[] virtualServers=getEngine().findChildren();
  for (int i=0; i < virtualServers.length; i++) {
    for (    com.sun.enterprise.config.serverbeans.VirtualServer vse : httpService.getVirtualServer()) {
      if (virtualServers[i].getName().equals(vse.getId())) {
        virtualServers[i]=null;
        break;
      }
    }
  }
  for (  Container virtualServer1 : virtualServers) {
    virtualServer=(VirtualServer)virtualServer1;
    if (virtualServer != null) {
      if (virtualServer.getID().equals(org.glassfish.api.web.Constants.ADMIN_VS)) {
        throw new LifecycleException(""String_Node_Str"");
      }
      Container[] webModules=virtualServer.findChildren();
      for (      Container webModule : webModules) {
        unloadWebModule(webModule.getName(),webModule.getName(),virtualServer.getID(),null);
      }
      try {
        virtualServer.destroy();
      }
 catch (      Exception e) {
        String msg=rb.getString(""String_Node_Str"");
        msg=MessageFormat.format(msg,virtualServer.getID());
        _logger.log(Level.WARNING,msg,e);
      }
    }
  }
}","/** 
 * Delete virtual-server.
 * @param httpService element which contains the configuration info.
 */
public void deleteHost(HttpService httpService) throws LifecycleException {
  VirtualServer virtualServer;
  Container[] virtualServers=getEngine().findChildren();
  for (int i=0; i < virtualServers.length; i++) {
    for (    com.sun.enterprise.config.serverbeans.VirtualServer vse : httpService.getVirtualServer()) {
      if (virtualServers[i].getName().equals(vse.getId())) {
        virtualServers[i]=null;
        break;
      }
    }
  }
  for (  Container virtualServer1 : virtualServers) {
    virtualServer=(VirtualServer)virtualServer1;
    if (virtualServer != null) {
      if (virtualServer.getID().equals(org.glassfish.api.web.Constants.ADMIN_VS)) {
        throw new LifecycleException(""String_Node_Str"");
      }
      Container[] webModules=virtualServer.findChildren();
      for (      Container webModule : webModules) {
        String appName=webModule.getName();
        if (webModule instanceof WebModule) {
          appName=((WebModule)webModule).getWebBundleDescriptor().getApplication().getRegistrationName();
        }
        unloadWebModule(webModule.getName(),appName,virtualServer.getID(),null);
      }
      try {
        virtualServer.destroy();
      }
 catch (      Exception e) {
        String msg=rb.getString(""String_Node_Str"");
        msg=MessageFormat.format(msg,virtualServer.getID());
        _logger.log(Level.WARNING,msg,e);
      }
    }
  }
}"
29574,"/** 
 * Return a Habitat used just for reading man pages from the modules in the modules directory.
 */
private static synchronized Habitat getManHabitat(){
  if (manHabitat != null)   return manHabitat;
  ModulesRegistry registry=new StaticModulesRegistry(getModuleClassLoader());
  manHabitat=new Habitat();
  return manHabitat;
}","/** 
 * Return a Habitat used just for reading man pages from the modules in the modules directory.
 */
private static synchronized Habitat getManHabitat(){
  if (manHabitat != null)   return manHabitat;
  manHabitat=new Habitat();
  return manHabitat;
}"
29575,"private void createActiveResourceAdapter(String rarModuleName) throws ConnectorRuntimeException {
  ConnectorRuntime cr=connectorRuntimeProvider.get();
  ConnectorRegistry creg=ConnectorRegistry.getInstance();
  if (creg.isRegistered(rarModuleName))   return;
  if (ConnectorAdminServiceUtils.isEmbeddedConnectorModule(rarModuleName)) {
    cr.createActiveResourceAdapterForEmbeddedRar(rarModuleName);
  }
 else {
    String moduleDir;
    if (ConnectorsUtil.belongsToSystemRA(rarModuleName)) {
      moduleDir=ConnectorsUtil.getSystemModuleLocation(rarModuleName);
    }
 else {
      moduleDir=ConfigBeansUtilities.getLocation(rarModuleName);
    }
    ClassLoader loader=cr.createConnectorClassLoader(moduleDir,null,rarModuleName);
    cr.createActiveResourceAdapter(moduleDir,rarModuleName,loader);
  }
}","private void createActiveResourceAdapter(String rarModuleName) throws ConnectorRuntimeException {
  ConnectorRuntime cr=connectorRuntimeProvider.get();
  ConnectorRegistry creg=ConnectorRegistry.getInstance();
  if (creg.isRegistered(rarModuleName))   return;
  if (ConnectorAdminServiceUtils.isEmbeddedConnectorModule(rarModuleName)) {
    cr.createActiveResourceAdapterForEmbeddedRar(rarModuleName);
  }
 else {
    String moduleDir;
    if (ConnectorsUtil.belongsToSystemRA(rarModuleName)) {
      moduleDir=ConnectorsUtil.getSystemModuleLocation(rarModuleName);
    }
 else {
      moduleDir=configBeansUtilities.getLocation(rarModuleName);
    }
    ClassLoader loader=cr.createConnectorClassLoader(moduleDir,null,rarModuleName);
    cr.createActiveResourceAdapter(moduleDir,rarModuleName,loader);
  }
}"
29576,"public static String getLocation(String moduleName) throws ConnectorRuntimeException {
  String location=null;
  if (ConnectorsUtil.belongsToSystemRA(moduleName)) {
    location=ConnectorsUtil.getSystemModuleLocation(moduleName);
  }
 else {
    location=ConfigBeansUtilities.getLocation(moduleName);
    if (location == null) {
      String rarName=getRarNameFromApplication(moduleName);
      String appName=getApplicationNameOfEmbeddedRar(moduleName);
      if (appName != null && rarName != null) {
        location=ConfigBeansUtilities.getLocation(appName);
        if (location != null) {
          location=location + File.separator + rarName+ ""String_Node_Str"";
        }
 else {
          throw new ConnectorRuntimeException(""String_Node_Str"" + moduleName);
        }
      }
    }
  }
  return location;
}","public static String getLocation(String moduleName) throws ConnectorRuntimeException {
  String location=null;
  if (ConnectorsUtil.belongsToSystemRA(moduleName)) {
    location=ConnectorsUtil.getSystemModuleLocation(moduleName);
  }
 else {
    location=internalGetLocation(moduleName);
    if (location == null) {
      String rarName=getRarNameFromApplication(moduleName);
      String appName=getApplicationNameOfEmbeddedRar(moduleName);
      if (appName != null && rarName != null) {
        location=internalGetLocation(appName);
        if (location != null) {
          location=location + File.separator + rarName+ ""String_Node_Str"";
        }
 else {
          throw new ConnectorRuntimeException(""String_Node_Str"" + moduleName);
        }
      }
    }
  }
  return location;
}"
29577,"public static boolean isStandAloneRA(String moduleName){
  return ConfigBeansUtilities.getModule(moduleName) != null;
}","public static boolean isStandAloneRA(String moduleName){
  ConfigBeansUtilities cbu=getConfigBeansUtilities();
  ApplicationName an=null;
  if (cbu != null) {
    an=cbu.getModule(moduleName);
  }
  return (an != null);
}"
29578,"private void deleteResourceRef(String jndiName,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=ConfigBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (server.isResourceRefExists(jndiName)) {
      server.deleteResourceRef(jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (cluster.isResourceRefExists(jndiName)) {
        cluster.deleteResourceRef(jndiName);
        Target tgt=habitat.getComponent(Target.class);
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (svr.isResourceRefExists(jndiName)) {
            svr.deleteResourceRef(jndiName);
          }
        }
      }
    }
  }
}","private void deleteResourceRef(String jndiName,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=configBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (server.isResourceRefExists(jndiName)) {
      server.deleteResourceRef(jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (cluster.isResourceRefExists(jndiName)) {
        cluster.deleteResourceRef(jndiName);
        Target tgt=habitat.getComponent(Target.class);
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (svr.isResourceRefExists(jndiName)) {
            svr.deleteResourceRef(jndiName);
          }
        }
      }
    }
  }
}"
29579,"private void createActiveResourceAdapter(String rarModuleName) throws ConnectorRuntimeException {
  ConnectorRuntime cr=ConnectorRuntime.getRuntime();
  ConnectorRegistry creg=ConnectorRegistry.getInstance();
  if (creg.isRegistered(rarModuleName))   return;
  if (ConnectorAdminServiceUtils.isEmbeddedConnectorModule(rarModuleName)) {
    cr.createActiveResourceAdapterForEmbeddedRar(rarModuleName);
  }
 else {
    String moduleDir;
    if (ConnectorsUtil.belongsToSystemRA(rarModuleName)) {
      moduleDir=ConnectorsUtil.getSystemModuleLocation(rarModuleName);
    }
 else {
      moduleDir=ConfigBeansUtilities.getLocation(rarModuleName);
    }
    ClassLoader loader=cr.createConnectorClassLoader(moduleDir,null,rarModuleName);
    cr.createActiveResourceAdapter(moduleDir,rarModuleName,loader);
  }
}","private void createActiveResourceAdapter(String rarModuleName) throws ConnectorRuntimeException {
  ConnectorRuntime cr=ConnectorRuntime.getRuntime();
  ConnectorRegistry creg=ConnectorRegistry.getInstance();
  if (creg.isRegistered(rarModuleName))   return;
  if (ConnectorAdminServiceUtils.isEmbeddedConnectorModule(rarModuleName)) {
    cr.createActiveResourceAdapterForEmbeddedRar(rarModuleName);
  }
 else {
    String moduleDir;
    if (ConnectorsUtil.belongsToSystemRA(rarModuleName)) {
      moduleDir=ConnectorsUtil.getSystemModuleLocation(rarModuleName);
    }
 else {
      moduleDir=configBeansUtilities.getLocation(rarModuleName);
    }
    ClassLoader loader=cr.createConnectorClassLoader(moduleDir,null,rarModuleName);
    cr.createActiveResourceAdapter(moduleDir,rarModuleName,loader);
  }
}"
29580,"public void deleteResourceRef(String jndiName,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=ConfigBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (server.isResourceRefExists(jndiName)) {
      server.deleteResourceRef(jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (cluster.isResourceRefExists(jndiName)) {
        cluster.deleteResourceRef(jndiName);
        Target tgt=targetProvider.get();
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (svr.isResourceRefExists(jndiName)) {
            svr.deleteResourceRef(jndiName);
          }
        }
      }
    }
  }
}","public void deleteResourceRef(String jndiName,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=configBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (server.isResourceRefExists(jndiName)) {
      server.deleteResourceRef(jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (cluster.isResourceRefExists(jndiName)) {
        cluster.deleteResourceRef(jndiName);
        Target tgt=targetProvider.get();
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (svr.isResourceRefExists(jndiName)) {
            svr.deleteResourceRef(jndiName);
          }
        }
      }
    }
  }
}"
29581,"public void createResourceRef(String jndiName,String enabled,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=ConfigBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (!server.isResourceRefExists(jndiName)) {
      server.createResourceRef(enabled,jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (!cluster.isResourceRefExists(jndiName)) {
        cluster.createResourceRef(enabled,jndiName);
        Target tgt=targetProvider.get();
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (!svr.isResourceRefExists(jndiName)) {
            svr.createResourceRef(enabled,jndiName);
          }
        }
      }
    }
  }
}","public void createResourceRef(String jndiName,String enabled,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=configBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (!server.isResourceRefExists(jndiName)) {
      server.createResourceRef(enabled,jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (!cluster.isResourceRefExists(jndiName)) {
        cluster.createResourceRef(enabled,jndiName);
        Target tgt=targetProvider.get();
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (!svr.isResourceRefExists(jndiName)) {
            svr.createResourceRef(enabled,jndiName);
          }
        }
      }
    }
  }
}"
29582,"public boolean resourceExists(String jndiName,String target){
  boolean exists=false;
  if (target.equals(DOMAIN)) {
    exists=true;
  }
 else   if (ConfigBeansUtilities.getServerNamed(target) != null) {
    Server server=configBeanUtilities.getServerNamed(target);
    exists=server.isResourceRefExists(jndiName);
  }
 else   if (domain.getClusterNamed(target) != null) {
    Cluster cluster=domain.getClusterNamed(target);
    exists=cluster.isResourceRefExists(jndiName);
  }
 else {
    for (    Config config : domain.getConfigs().getConfig()) {
      if (config.getName().equals(target)) {
        exists=true;
        break;
      }
    }
  }
  return exists;
}","public boolean resourceExists(String jndiName,String target){
  boolean exists=false;
  if (target.equals(DOMAIN)) {
    exists=true;
  }
 else   if (configBeansUtilities.getServerNamed(target) != null) {
    Server server=configBeansUtilities.getServerNamed(target);
    exists=server.isResourceRefExists(jndiName);
  }
 else   if (domain.getClusterNamed(target) != null) {
    Cluster cluster=domain.getClusterNamed(target);
    exists=cluster.isResourceRefExists(jndiName);
  }
 else {
    for (    Config config : domain.getConfigs().getConfig()) {
      if (config.getName().equals(target)) {
        exists=true;
        break;
      }
    }
  }
  return exists;
}"
29583,"public boolean start(ApplicationContext startupContext) throws Exception {
  DeploymentContext dc=(DeploymentContext)startupContext;
  final DeployCommandParameters deployParams=dc.getCommandParameters(DeployCommandParameters.class);
  if (deployParams.origin == OpsParams.Origin.deploy || deployParams.origin == OpsParams.Origin.deploy_instance) {
    ResourcesDeployer.deployResources(applicationName,true);
  }
 else   if (deployParams.origin == OpsParams.Origin.load || deployParams.origin == OpsParams.Origin.create_application_ref) {
    asrManager.deployResources(applicationName);
  }
  return true;
}","public boolean start(ApplicationContext startupContext) throws Exception {
  DeploymentContext dc=(DeploymentContext)startupContext;
  final DeployCommandParameters deployParams=dc.getCommandParameters(DeployCommandParameters.class);
  if (deployParams.origin == OpsParams.Origin.deploy || deployParams.origin == OpsParams.Origin.deploy_instance) {
    resourcesDeployer.deployResources(applicationName,true);
  }
 else   if (deployParams.origin == OpsParams.Origin.load || deployParams.origin == OpsParams.Origin.create_application_ref) {
    asrManager.deployResources(applicationName);
  }
  return true;
}"
29584,"private static void createAppScopedResources(Application app,List<org.glassfish.resources.api.Resource> resources,DeploymentContext dc,boolean embedded) throws ResourceException {
  try {
    if (resources != null) {
      Application application=dc.getTransientAppMetaData(Application.APPLICATION,Application.class);
      Resources asc=dc.getTransientAppMetaData(APP_META_DATA_RESOURCES,Resources.class);
      if (asc == null) {
        asc=application.createChild(Resources.class);
        application.setResources(asc);
        dc.addTransientAppMetaData(APP_META_DATA_RESOURCES,asc);
        ApplicationInfo appInfo=appRegistry.get(app.getName());
        if (appInfo != null) {
          appInfo.addTransientAppMetaData(app.getName() + ""String_Node_Str"",asc);
        }
      }
      createConfig(asc,resources,embedded);
      String appName=app.getName();
      preserveResources(asc,appName,appName);
    }
  }
 catch (  Exception e) {
    Object params[]=new Object[]{app.getName(),e};
    _logger.log(Level.SEVERE,""String_Node_Str"",params);
    throw new ResourceException(e);
  }
}","private void createAppScopedResources(Application app,List<org.glassfish.resources.api.Resource> resources,DeploymentContext dc,boolean embedded) throws ResourceException {
  try {
    if (resources != null) {
      Application application=dc.getTransientAppMetaData(Application.APPLICATION,Application.class);
      Resources asc=dc.getTransientAppMetaData(APP_META_DATA_RESOURCES,Resources.class);
      if (asc == null) {
        asc=application.createChild(Resources.class);
        application.setResources(asc);
        dc.addTransientAppMetaData(APP_META_DATA_RESOURCES,asc);
        ApplicationInfo appInfo=appRegistry.get(app.getName());
        if (appInfo != null) {
          appInfo.addTransientAppMetaData(app.getName() + ""String_Node_Str"",asc);
        }
      }
      createConfig(asc,resources,embedded);
      String appName=app.getName();
      preserveResources(asc,appName,appName);
    }
  }
 catch (  Exception e) {
    Object params[]=new Object[]{app.getName(),e};
    _logger.log(Level.SEVERE,""String_Node_Str"",params);
    throw new ResourceException(e);
  }
}"
29585,"/** 
 * Given a <i>resource</i> instance, appropriate deployer will be provided
 * @param resource resource instance
 * @return ResourceDeployer
 */
private static ResourceDeployer getResourceDeployer(Object resource){
  return resourceManagerFactoryProvider.get().getResourceDeployer(resource);
}","/** 
 * Given a <i>resource</i> instance, appropriate deployer will be provided
 * @param resource resource instance
 * @return ResourceDeployer
 */
private ResourceDeployer getResourceDeployer(Object resource){
  return resourceManagerFactoryProvider.get().getResourceDeployer(resource);
}"
29586,"public static void deployResources(String applicationName,String moduleName,Collection<com.sun.enterprise.config.serverbeans.Resource> resources,boolean postDeployPhase) throws Exception {
  for (  Resource resource : resources) {
    if (resource instanceof BindableResource) {
      BindableResource bindableResource=(BindableResource)resource;
      ResourceInfo resourceInfo=new ResourceInfo(bindableResource.getJndiName(),applicationName,moduleName);
      if (getResourceDeployer(bindableResource).canDeploy(postDeployPhase,resources,bindableResource)) {
        resourcesBinder.deployResource(resourceInfo,bindableResource);
      }
    }
 else {
      if (getResourceDeployer(resource).canDeploy(postDeployPhase,resources,resource)) {
        getResourceDeployer(resource).deployResource(resource,applicationName,moduleName);
      }
    }
  }
}","public void deployResources(String applicationName,String moduleName,Collection<com.sun.enterprise.config.serverbeans.Resource> resources,boolean postDeployPhase) throws Exception {
  for (  Resource resource : resources) {
    if (resource instanceof BindableResource) {
      BindableResource bindableResource=(BindableResource)resource;
      ResourceInfo resourceInfo=new ResourceInfo(bindableResource.getJndiName(),applicationName,moduleName);
      if (getResourceDeployer(bindableResource).canDeploy(postDeployPhase,resources,bindableResource)) {
        resourcesBinder.deployResource(resourceInfo,bindableResource);
      }
    }
 else {
      if (getResourceDeployer(resource).canDeploy(postDeployPhase,resources,resource)) {
        getResourceDeployer(resource).deployResource(resource,applicationName,moduleName);
      }
    }
  }
}"
29587,"public static void deployResourcesFromConfiguration(String appName,boolean embedded) throws Exception {
  Application application=applications.getApplication(appName);
  ApplicationInfo appInfo=appRegistry.get(appName);
  if (application != null && appInfo != null) {
    Resources appScopedResources=application.getResources();
    if (appScopedResources != null) {
      deployResources(appName,null,appScopedResources.getResources(),embedded);
    }
    List<Module> modules=application.getModule();
    if (modules != null) {
      for (      Module module : modules) {
        Resources moduleScopedResources=module.getResources();
        String moduleName=module.getName();
        if (moduleScopedResources != null) {
          deployResources(appName,moduleName,moduleScopedResources.getResources(),embedded);
        }
      }
    }
  }
}","public void deployResourcesFromConfiguration(String appName,boolean embedded) throws Exception {
  Application application=applications.getApplication(appName);
  ApplicationInfo appInfo=appRegistry.get(appName);
  if (application != null && appInfo != null) {
    Resources appScopedResources=application.getResources();
    if (appScopedResources != null) {
      deployResources(appName,null,appScopedResources.getResources(),embedded);
    }
    List<Module> modules=application.getModule();
    if (modules != null) {
      for (      Module module : modules) {
        Resources moduleScopedResources=module.getResources();
        String moduleName=module.getName();
        if (moduleScopedResources != null) {
          deployResources(appName,moduleName,moduleScopedResources.getResources(),embedded);
        }
      }
    }
  }
}"
29588,"public static void createResources(DeploymentContext dc,boolean embedded,boolean deployResources) throws ResourceException {
  String appName=getAppNameFromDeployCmdParams(dc);
  Application app=dc.getTransientAppMetaData(Application.APPLICATION,Application.class);
  Map<String,Map<String,List>> resourcesList=(Map<String,Map<String,List>>)dc.getTransientAppMetadata().get(APP_SCOPED_RESOURCES_MAP);
  if (resourcesList != null) {
    Map<String,List> appLevelResources=resourcesList.get(appName);
    if (appLevelResources != null) {
      List<org.glassfish.resources.api.Resource> connectorResources=appLevelResources.get(CONNECTOR_RESOURCES);
      createAppScopedResources(app,connectorResources,dc,embedded);
      List<org.glassfish.resources.api.Resource> nonConnectorResources=appLevelResources.get(NON_CONNECTOR_RESOURCES);
      createAppScopedResources(app,nonConnectorResources,dc,embedded);
    }
    List<Module> modules=app.getModule();
    if (modules != null) {
      for (      Module module : modules) {
        String actualModuleName=ResourceUtil.getActualModuleNameWithExtension(module.getName());
        if (!appName.equals(actualModuleName)) {
          Map<String,List> moduleResources=resourcesList.get(actualModuleName);
          if (moduleResources != null) {
            List<org.glassfish.resources.api.Resource> connectorResources=moduleResources.get(CONNECTOR_RESOURCES);
            createModuleScopedResources(app,module,connectorResources,dc,embedded);
            List<org.glassfish.resources.api.Resource> nonConnectorResources=moduleResources.get(NON_CONNECTOR_RESOURCES);
            createModuleScopedResources(app,module,nonConnectorResources,dc,embedded);
          }
        }
      }
    }
  }
}","public void createResources(DeploymentContext dc,boolean embedded,boolean deployResources) throws ResourceException {
  String appName=getAppNameFromDeployCmdParams(dc);
  Application app=dc.getTransientAppMetaData(Application.APPLICATION,Application.class);
  Map<String,Map<String,List>> resourcesList=(Map<String,Map<String,List>>)dc.getTransientAppMetadata().get(APP_SCOPED_RESOURCES_MAP);
  if (resourcesList != null) {
    Map<String,List> appLevelResources=resourcesList.get(appName);
    if (appLevelResources != null) {
      List<org.glassfish.resources.api.Resource> connectorResources=appLevelResources.get(CONNECTOR_RESOURCES);
      createAppScopedResources(app,connectorResources,dc,embedded);
      List<org.glassfish.resources.api.Resource> nonConnectorResources=appLevelResources.get(NON_CONNECTOR_RESOURCES);
      createAppScopedResources(app,nonConnectorResources,dc,embedded);
    }
    List<Module> modules=app.getModule();
    if (modules != null) {
      for (      Module module : modules) {
        String actualModuleName=ResourceUtil.getActualModuleNameWithExtension(module.getName());
        if (!appName.equals(actualModuleName)) {
          Map<String,List> moduleResources=resourcesList.get(actualModuleName);
          if (moduleResources != null) {
            List<org.glassfish.resources.api.Resource> connectorResources=moduleResources.get(CONNECTOR_RESOURCES);
            createModuleScopedResources(app,module,connectorResources,dc,embedded);
            List<org.glassfish.resources.api.Resource> nonConnectorResources=moduleResources.get(NON_CONNECTOR_RESOURCES);
            createModuleScopedResources(app,module,nonConnectorResources,dc,embedded);
          }
        }
      }
    }
  }
}"
29589,"/** 
 * During ""load()"" event (eg: app/app-ref enable, server start), populate resource-config in app-info so that it can be used for constructing connector-classloader for the application.
 * @param dc DeploymentContext
 */
public static void populateResourceConfigInAppInfo(DeploymentContext dc){
  String appName=getAppNameFromDeployCmdParams(dc);
  Application application=applications.getApplication(appName);
  ApplicationInfo appInfo=appRegistry.get(appName);
  if (application != null && appInfo != null) {
    Resources appScopedResources=application.getResources();
    if (appScopedResources != null) {
      appInfo.addTransientAppMetaData(Application.APPLICATION,application);
      appInfo.addTransientAppMetaData(application.getName() + ""String_Node_Str"",appScopedResources);
    }
    List<Module> modules=application.getModule();
    if (modules != null) {
      for (      Module module : modules) {
        Resources moduleScopedResources=module.getResources();
        if (moduleScopedResources != null) {
          appInfo.addTransientAppMetaData(module.getName() + ""String_Node_Str"",moduleScopedResources);
        }
      }
    }
  }
}","/** 
 * During ""load()"" event (eg: app/app-ref enable, server start), populate resource-config in app-info so that it can be used for constructing connector-classloader for the application.
 * @param dc DeploymentContext
 */
public void populateResourceConfigInAppInfo(DeploymentContext dc){
  String appName=getAppNameFromDeployCmdParams(dc);
  Application application=applications.getApplication(appName);
  ApplicationInfo appInfo=appRegistry.get(appName);
  if (application != null && appInfo != null) {
    Resources appScopedResources=application.getResources();
    if (appScopedResources != null) {
      appInfo.addTransientAppMetaData(Application.APPLICATION,application);
      appInfo.addTransientAppMetaData(application.getName() + ""String_Node_Str"",appScopedResources);
    }
    List<Module> modules=application.getModule();
    if (modules != null) {
      for (      Module module : modules) {
        Resources moduleScopedResources=module.getResources();
        if (moduleScopedResources != null) {
          appInfo.addTransientAppMetaData(module.getName() + ""String_Node_Str"",moduleScopedResources);
        }
      }
    }
  }
}"
29590,"private static void createModuleScopedResources(Application app,Module module,List<org.glassfish.resources.api.Resource> resources,DeploymentContext dc,boolean embedded) throws ResourceException {
  try {
    if (resources != null) {
      Resources msc=dc.getTransientAppMetaData(module.getName() + ""String_Node_Str"",Resources.class);
      if (msc == null) {
        msc=module.createChild(Resources.class);
        module.setResources(msc);
        dc.addTransientAppMetaData(module.getName() + ""String_Node_Str"",msc);
        ApplicationInfo appInfo=appRegistry.get(app.getName());
        if (appInfo != null) {
          appInfo.addTransientAppMetaData(module.getName() + ""String_Node_Str"",msc);
        }
      }
      createConfig(msc,resources,embedded);
      preserveResources(msc,app.getName(),module.getName());
    }
  }
 catch (  Exception e) {
    Object params[]=new Object[]{module.getName(),app.getName(),e};
    _logger.log(Level.SEVERE,""String_Node_Str"",params);
    throw new ResourceException(e);
  }
}","private void createModuleScopedResources(Application app,Module module,List<org.glassfish.resources.api.Resource> resources,DeploymentContext dc,boolean embedded) throws ResourceException {
  try {
    if (resources != null) {
      Resources msc=dc.getTransientAppMetaData(module.getName() + ""String_Node_Str"",Resources.class);
      if (msc == null) {
        msc=module.createChild(Resources.class);
        module.setResources(msc);
        dc.addTransientAppMetaData(module.getName() + ""String_Node_Str"",msc);
        ApplicationInfo appInfo=appRegistry.get(app.getName());
        if (appInfo != null) {
          appInfo.addTransientAppMetaData(module.getName() + ""String_Node_Str"",msc);
        }
      }
      createConfig(msc,resources,embedded);
      preserveResources(msc,app.getName(),module.getName());
    }
  }
 catch (  Exception e) {
    Object params[]=new Object[]{module.getName(),app.getName(),e};
    _logger.log(Level.SEVERE,""String_Node_Str"",params);
    throw new ResourceException(e);
  }
}"
29591,"protected WebModuleConfig getDefaultWebModule(Domain domain,WebArchivist webArchivist,ApplicationRegistry appRegistry){
  WebModuleConfig wmInfo=null;
  String wmID=getDefaultWebModuleID();
  if (wmID != null) {
    Applications appsBean=domain.getApplications();
    wmInfo=findWebModuleInJ2eeApp(appsBean,wmID,appRegistry);
    if (wmInfo == null) {
      String contextRoot=ConfigBeansUtilities.getContextRoot(wmID);
      String location=ConfigBeansUtilities.getLocation(wmID);
      if (contextRoot != null && location != null) {
        File docroot=new File(location);
        WebBundleDescriptor wbd=webArchivist.getDefaultWebXmlBundleDescriptor();
        wmInfo=new WebModuleConfig();
        wbd.setName(Constants.DEFAULT_WEB_MODULE_NAME);
        wbd.setContextRoot(contextRoot);
        wmInfo.setLocation(docroot);
        wmInfo.setDescriptor(wbd);
        wmInfo.setParentLoader(EmbeddedWebContainer.class.getClassLoader());
        WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
          @Override public WebappClassLoader run(){
            return new WebappClassLoader(EmbeddedWebContainer.class.getClassLoader());
          }
        }
);
        wmInfo.setAppClassLoader(cloader);
      }
    }
    if (wmInfo == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{wmID,getID()});
    }
  }
  return wmInfo;
}","protected WebModuleConfig getDefaultWebModule(Domain domain,WebArchivist webArchivist,ApplicationRegistry appRegistry){
  WebModuleConfig wmInfo=null;
  String wmID=getDefaultWebModuleID();
  if (wmID != null) {
    Applications appsBean=domain.getApplications();
    wmInfo=findWebModuleInJ2eeApp(appsBean,wmID,appRegistry);
    if (wmInfo == null) {
      ConfigBeansUtilities cbu=getConfigBeansUtilities();
      String contextRoot=null;
      String location=null;
      if (cbu != null) {
        contextRoot=cbu.getContextRoot(wmID);
        location=cbu.getLocation(wmID);
      }
      if (contextRoot != null && location != null) {
        File docroot=new File(location);
        WebBundleDescriptor wbd=webArchivist.getDefaultWebXmlBundleDescriptor();
        wmInfo=new WebModuleConfig();
        wbd.setName(Constants.DEFAULT_WEB_MODULE_NAME);
        wbd.setContextRoot(contextRoot);
        wmInfo.setLocation(docroot);
        wmInfo.setDescriptor(wbd);
        wmInfo.setParentLoader(EmbeddedWebContainer.class.getClassLoader());
        WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
          @Override public WebappClassLoader run(){
            return new WebappClassLoader(EmbeddedWebContainer.class.getClassLoader());
          }
        }
);
        wmInfo.setAppClassLoader(cloader);
      }
    }
    if (wmInfo == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{wmID,getID()});
    }
  }
  return wmInfo;
}"
29592,"/** 
 * Gets the context root of the web module that the user/configuration has designated as the default-web-module for this virtual server. The default-web-module for a virtual server is specified via the 'default-web-module' attribute of the 'virtual-server' element in server.xml. This is an optional attribute and if the configuration does not specify another web module (standalone or part of a j2ee-application) that is configured at a context-root="""", then a default web module will be created and loaded. The value for this attribute is either ""${standalone-web-module-name}"" or ""${j2ee-app-name}:${web-module-uri}"".
 * @return null if the default-web-module has not been specified orif the web module specified either could not be found or is disabled or does not specify this virtual server (if it specifies a value for the virtual-servers attribute) or if there was an error loading its deployment descriptors.
 */
protected String getDefaultContextPath(Domain domain,ApplicationRegistry appRegistry){
  String contextRoot=null;
  String wmID=getDefaultWebModuleID();
  if (wmID != null) {
    Applications appsBean=domain.getApplications();
    WebModuleConfig wmInfo=findWebModuleInJ2eeApp(appsBean,wmID,appRegistry);
    if (wmInfo == null) {
      contextRoot=ConfigBeansUtilities.getContextRoot(wmID);
    }
 else {
      contextRoot=wmInfo.getContextPath();
    }
    if (contextRoot == null) {
      Object[] params={wmID,getID()};
      _logger.log(Level.SEVERE,""String_Node_Str"",params);
    }
  }
  return contextRoot;
}","/** 
 * Gets the context root of the web module that the user/configuration has designated as the default-web-module for this virtual server. The default-web-module for a virtual server is specified via the 'default-web-module' attribute of the 'virtual-server' element in server.xml. This is an optional attribute and if the configuration does not specify another web module (standalone or part of a j2ee-application) that is configured at a context-root="""", then a default web module will be created and loaded. The value for this attribute is either ""${standalone-web-module-name}"" or ""${j2ee-app-name}:${web-module-uri}"".
 * @return null if the default-web-module has not been specified orif the web module specified either could not be found or is disabled or does not specify this virtual server (if it specifies a value for the virtual-servers attribute) or if there was an error loading its deployment descriptors.
 */
protected String getDefaultContextPath(Domain domain,ApplicationRegistry appRegistry){
  String contextRoot=null;
  String wmID=getDefaultWebModuleID();
  if (wmID != null) {
    Applications appsBean=domain.getApplications();
    WebModuleConfig wmInfo=findWebModuleInJ2eeApp(appsBean,wmID,appRegistry);
    if (wmInfo == null) {
      ConfigBeansUtilities cbu=getConfigBeansUtilities();
      if (cbu == null) {
        contextRoot=null;
      }
 else {
        contextRoot=cbu.getContextRoot(wmID);
      }
    }
 else {
      contextRoot=wmInfo.getContextPath();
    }
    if (contextRoot == null) {
      Object[] params={wmID,getID()};
      _logger.log(Level.SEVERE,""String_Node_Str"",params);
    }
  }
  return contextRoot;
}"
29593,"public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  try {
    PropsFileActionReporter reporter=(PropsFileActionReporter)report;
    reporter.useMainChildrenAttribute(true);
  }
 catch (  ClassCastException e) {
  }
  if (monitor) {
    listMonitorElements(context);
    return;
  }
  TreeNode[] parentNodes=getAliasedParent(domain,pattern);
  Map<Dom,String> dottedNames=new HashMap<Dom,String>();
  for (  TreeNode parentNode : parentNodes) {
    dottedNames.putAll(getAllDottedNodes(parentNode.node));
  }
  String prefix=""String_Node_Str"";
  if (!pattern.startsWith(parentNodes[0].relativeName)) {
    prefix=pattern.substring(0,pattern.indexOf(parentNodes[0].relativeName));
  }
  pattern=parentNodes[0].relativeName;
  Map<Dom,String> matchingNodes=getMatchingNodes(dottedNames,pattern);
  if (matchingNodes.isEmpty() && pattern.lastIndexOf('.') != -1) {
    matchingNodes=getMatchingNodes(dottedNames,pattern.substring(0,pattern.lastIndexOf(""String_Node_Str"")));
  }
  List<Map.Entry> matchingNodesSorted=sortNodesByDottedName(matchingNodes);
  for (  Map.Entry<Dom,String> node : matchingNodesSorted) {
    ActionReport.MessagePart part=report.getTopMessagePart().addChild();
    part.setChildrenType(""String_Node_Str"");
    if (parentNodes[0].name.isEmpty()) {
      part.setMessage(node.getValue());
    }
 else {
      part.setMessage(parentNodes[0].name + ""String_Node_Str"" + node.getValue());
    }
  }
}","public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  try {
    PropsFileActionReporter reporter=(PropsFileActionReporter)report;
    reporter.useMainChildrenAttribute(true);
  }
 catch (  ClassCastException e) {
  }
  if (monitor) {
    listMonitorElements(context);
    return;
  }
  TreeNode[] parentNodes=getAliasedParent(domain,pattern);
  Map<Dom,String> dottedNames=new HashMap<Dom,String>();
  for (  TreeNode parentNode : parentNodes) {
    dottedNames.putAll(getAllDottedNodes(parentNode.node));
  }
  pattern=parentNodes[0].relativeName;
  Map<Dom,String> matchingNodes=getMatchingNodes(dottedNames,pattern);
  if (matchingNodes.isEmpty() && pattern.lastIndexOf('.') != -1) {
    matchingNodes=getMatchingNodes(dottedNames,pattern.substring(0,pattern.lastIndexOf(""String_Node_Str"")));
  }
  List<Map.Entry> matchingNodesSorted=sortNodesByDottedName(matchingNodes);
  for (  Map.Entry<Dom,String> node : matchingNodesSorted) {
    ActionReport.MessagePart part=report.getTopMessagePart().addChild();
    part.setChildrenType(""String_Node_Str"");
    if (parentNodes[0].name.isEmpty()) {
      part.setMessage(node.getValue());
    }
 else {
      part.setMessage(parentNodes[0].name + ""String_Node_Str"" + node.getValue());
    }
  }
}"
29594,"/** 
 * Pick out all methods in the listener with the correct annotation, look up the referenced Probe and return a list of all such pairs. Validate that the methods really do matchup properly.
 * @throws RuntimeException if there is any serious problem.
 * @param listenerClass
 * @return
 */
private List<MethodProbe> handleListenerAnnotations(Class listenerClass,String invokerId){
  List<MethodProbe> mp=new LinkedList<MethodProbe>();
  for (  Method method : listenerClass.getMethods()) {
    ProbeListener probeAnn=method.getAnnotation(ProbeListener.class);
    if (probeAnn == null)     continue;
    String probeString=probeAnn.value();
    if ((probeString != null) && (invokerId != null)) {
      String[] strArr=probeString.split(""String_Node_Str"");
      probeString=strArr[0] + ""String_Node_Str"" + strArr[1]+ ""String_Node_Str""+ strArr[2]+ invokerId+ ""String_Node_Str""+ strArr[3];
    }
    FlashlightProbe probe=probeRegistry.getProbe(probeString);
    if (probe == null) {
      String errStr=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",probeString);
      throw new RuntimeException(errStr);
    }
    mp.add(new MethodProbe(method,probe));
  }
  return mp;
}","/** 
 * Pick out all methods in the listener with the correct annotation, look up the referenced Probe and return a list of all such pairs. Validate that the methods really do matchup properly.
 * @throws RuntimeException if there is any serious problem.
 * @param listenerClass
 * @return
 */
private List<MethodProbe> handleListenerAnnotations(Class listenerClass,String invokerId){
  List<MethodProbe> mp=new LinkedList<MethodProbe>();
  for (  Method method : listenerClass.getMethods()) {
    ProbeListener probeAnn=method.getAnnotation(ProbeListener.class);
    if (probeAnn == null)     continue;
    String probeString=probeAnn.value();
    if (probeString == null)     continue;
    if (invokerId != null) {
      String[] strArr=probeString.split(""String_Node_Str"");
      probeString=strArr[0] + ""String_Node_Str"" + strArr[1]+ ""String_Node_Str""+ strArr[2]+ invokerId+ ""String_Node_Str""+ strArr[3];
    }
    FlashlightProbe probe=probeRegistry.getProbe(probeString);
    if (probe == null) {
      String errStr=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",probeString);
      throw new RuntimeException(errStr);
    }
    mp.add(new MethodProbe(method,probe));
  }
  return mp;
}"
29595,"/** 
 * Deletes the underlying storage for a file item, including deleting any associated temporary disk file. Although this storage will be deleted automatically when the <code>FileItem</code> instance is garbage collected, this method can be used to ensure that this is done at an earlier time, thus preserving system resources.
 */
public void delete(){
  cachedContent=null;
  File outputFile=getStoreLocation();
  if (outputFile != null && outputFile.exists()) {
    outputFile.delete();
  }
}","/** 
 * Deletes the underlying storage for a file item, including deleting any associated temporary disk file. Although this storage will be deleted automatically when the <code>FileItem</code> instance is garbage collected, this method can be used to ensure that this is done at an earlier time, thus preserving system resources.
 */
public void delete(){
  cachedContent=null;
  File outputFile=getStoreLocation();
  if (outputFile != null && outputFile.exists()) {
    deleteFile(outputFile);
  }
}"
29596,"/** 
 * Reads the state of this object during deserialization.
 * @param in The stream from which the state should be read.
 * @throws IOException if an error occurs.
 * @throws ClassNotFoundException if class cannot be found.
 */
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  OutputStream output=getOutputStream();
  if (cachedContent != null) {
    output.write(cachedContent);
  }
 else {
    FileInputStream input=new FileInputStream(dfosFile);
    Streams.copy(input,output,false);
    dfosFile.delete();
    dfosFile=null;
  }
  output.close();
  cachedContent=null;
}","/** 
 * Reads the state of this object during deserialization.
 * @param in The stream from which the state should be read.
 * @throws IOException if an error occurs.
 * @throws ClassNotFoundException if class cannot be found.
 */
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  OutputStream output=getOutputStream();
  if (cachedContent != null) {
    output.write(cachedContent);
  }
 else {
    FileInputStream input=new FileInputStream(dfosFile);
    Streams.copy(input,output,false);
    deleteFile(dfosFile);
    dfosFile=null;
  }
  output.close();
  cachedContent=null;
}"
29597,"/** 
 * Removes the file contents from the temporary storage.
 */
protected void finalize(){
  File outputFile=dfos.getFile();
  if (outputFile != null && outputFile.exists()) {
    outputFile.delete();
  }
}","/** 
 * Removes the file contents from the temporary storage.
 */
protected void finalize(){
  File outputFile=dfos.getFile();
  if (outputFile != null && outputFile.exists()) {
    deleteFile(outputFile);
  }
}"
29598,"/** 
 * Remove the Session with the specified session identifier from this Store, if present.  If no such Session is present, this method takes no action.
 * @param id Session identifier of the Session to be removed
 * @exception IOException if an input/output error occurs
 */
public void remove(String id) throws IOException {
  File file=file(id);
  if (file == null) {
    return;
  }
  if (debug >= 1) {
    log(sm.getString(getStoreName() + ""String_Node_Str"",id,file.getAbsolutePath()));
  }
  sessions.remove(id);
  file.delete();
}","/** 
 * Remove the Session with the specified session identifier from this Store, if present.  If no such Session is present, this method takes no action.
 * @param id Session identifier of the Session to be removed
 * @exception IOException if an input/output error occurs
 */
public void remove(String id) throws IOException {
  File file=file(id);
  if (file == null) {
    return;
  }
  if (debug >= 1) {
    log(sm.getString(getStoreName() + ""String_Node_Str"",id,file.getAbsolutePath()));
  }
  sessions.remove(id);
  if (!file.delete() && log.isLoggable(Level.FINE)) {
    log.fine(""String_Node_Str"" + file);
  }
}"
29599,"/** 
 * Set the Response with which this Request is associated.
 * @param response The new associated response
 */
@Override public void setResponse(org.apache.catalina.Response response){
  this.response=response;
  sessionTracker.setResponse((Response)response);
}","/** 
 * Set the Response with which this Request is associated.
 * @param response The new associated response
 */
@Override public void setResponse(org.apache.catalina.Response response){
  this.response=response;
  if (response instanceof Response) {
    sessionTracker.setResponse((Response)response);
  }
}"
29600,"/** 
 * Set the Request with which this Response is associated.
 * @param request The new associated request
 */
public void setRequest(org.apache.catalina.Request request){
  this.request=(Request)request;
}","/** 
 * Set the Request with which this Response is associated.
 * @param request The new associated request
 */
public void setRequest(org.apache.catalina.Request request){
  if (request instanceof Request) {
    this.request=(Request)request;
  }
}"
29601,"/** 
 * Process a ""start"" event for this Context - in background
 */
protected synchronized void start() throws LifecycleException {
  if (log.isLoggable(Level.FINEST)) {
    log.finest(sm.getString(""String_Node_Str""));
  }
  context.setConfigured(false);
  Container container=context.getParent();
  if (!context.getOverride()) {
    if (container instanceof Host) {
      xmlValidation=context.getXmlValidation();
      if (!xmlValidation) {
        xmlValidation=((Host)container).getXmlValidation();
      }
      xmlNamespaceAware=context.getXmlNamespaceAware();
      if (!xmlNamespaceAware) {
        xmlNamespaceAware=((Host)container).getXmlNamespaceAware();
      }
      container=container.getParent();
    }
  }
  defaultConfig();
  applicationConfig();
  validateSecurityRoles();
  authenticatorConfig();
  managerConfig();
  if ((log.isLoggable(Level.FINEST)) && (context instanceof ContainerBase)) {
    log.finest(""String_Node_Str"");
    Pipeline pipeline=((ContainerBase)context).getPipeline();
    GlassFishValve valves[]=null;
    if (pipeline != null)     valves=pipeline.getValves();
    if (valves != null) {
      for (int i=0; i < valves.length; i++) {
        log.finest(""String_Node_Str"" + valves[i].getInfo());
      }
    }
    log.finest(""String_Node_Str"");
  }
  context.setConfigured(true);
}","/** 
 * Process a ""start"" event for this Context - in background
 */
protected synchronized void start() throws LifecycleException {
  if (log.isLoggable(Level.FINEST)) {
    log.finest(sm.getString(""String_Node_Str""));
  }
  context.setConfigured(false);
  Container container=context.getParent();
  if (!context.getOverride()) {
    if (container instanceof Host) {
      xmlValidation=context.getXmlValidation();
      if (!xmlValidation) {
        xmlValidation=((Host)container).getXmlValidation();
      }
      xmlNamespaceAware=context.getXmlNamespaceAware();
      if (!xmlNamespaceAware) {
        xmlNamespaceAware=((Host)container).getXmlNamespaceAware();
      }
    }
  }
  defaultConfig();
  applicationConfig();
  validateSecurityRoles();
  authenticatorConfig();
  managerConfig();
  if ((log.isLoggable(Level.FINEST)) && (context instanceof ContainerBase)) {
    log.finest(""String_Node_Str"");
    Pipeline pipeline=((ContainerBase)context).getPipeline();
    GlassFishValve valves[]=null;
    if (pipeline != null)     valves=pipeline.getValves();
    if (valves != null) {
      for (int i=0; i < valves.length; i++) {
        log.finest(""String_Node_Str"" + valves[i].getInfo());
      }
    }
    log.finest(""String_Node_Str"");
  }
  context.setConfigured(true);
}"
29602,"/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public NamingRuleSet(String prefix){
  super();
  this.namespaceURI=null;
  this.prefix=prefix;
}","/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public NamingRuleSet(String prefix){
  super();
  this.prefix=prefix;
}"
29603,"@Override public void run(){
  try {
    executeCommand(params);
    aReport.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    if (StringUtils.ok(getCommandOutput()))     aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),getCommandOutput()));
    Map<String,String> attributes=this.getAttributes();
    for (    Map.Entry<String,String> ae : attributes.entrySet()) {
      String key=ae.getKey();
      if (key.endsWith(""String_Node_Str""))       continue;
      if (!key.endsWith(""String_Node_Str"")) {
        aReport.getTopMessagePart().addProperty(key,ae.getValue());
        continue;
      }
      String keyWithoutSuffix=key.substring(0,key.lastIndexOf(""String_Node_Str""));
      aReport.getTopMessagePart().addProperty(keyWithoutSuffix,attributes.get(keyWithoutSuffix + ""String_Node_Str""));
    }
  }
 catch (  CommandException cmdEx) {
    ActionReport.ExitCode finalResult;
    if (cmdEx.getCause() instanceof java.net.ConnectException) {
      finalResult=FailurePolicy.applyFailurePolicy(offlinePolicy,ActionReport.ExitCode.FAILURE);
      if (!finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
    }
 else {
      finalResult=FailurePolicy.applyFailurePolicy(failPolicy,ActionReport.ExitCode.FAILURE);
      if (finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
    }
    aReport.setActionExitCode(finalResult);
  }
  result.setInstanceCommand(this);
}","@Override public void run(){
  try {
    executeCommand(params);
    aReport.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    if (StringUtils.ok(getCommandOutput()))     aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),getCommandOutput()));
    Map<String,String> attributes=this.getAttributes();
    for (    Map.Entry<String,String> ae : attributes.entrySet()) {
      String key=ae.getKey();
      if (key.endsWith(""String_Node_Str""))       continue;
      if (!key.endsWith(""String_Node_Str"")) {
        if (ae.getValue() != null) {
          aReport.getTopMessagePart().addProperty(key,ae.getValue());
        }
        continue;
      }
      String keyWithoutSuffix=key.substring(0,key.lastIndexOf(""String_Node_Str""));
      aReport.getTopMessagePart().addProperty(keyWithoutSuffix,attributes.get(keyWithoutSuffix + ""String_Node_Str""));
    }
  }
 catch (  CommandException cmdEx) {
    ActionReport.ExitCode finalResult;
    if (cmdEx.getCause() instanceof java.net.ConnectException) {
      finalResult=FailurePolicy.applyFailurePolicy(offlinePolicy,ActionReport.ExitCode.FAILURE);
      if (!finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
    }
 else {
      finalResult=FailurePolicy.applyFailurePolicy(failPolicy,ActionReport.ExitCode.FAILURE);
      if (finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
    }
    aReport.setActionExitCode(finalResult);
  }
  result.setInstanceCommand(this);
}"
29604,"public void moduleUpdated(Module module){
}","@Override public void moduleUpdated(Module module){
}"
29605,"/** 
 * An application that has probes can be registered.
 * @param appName application-name
 * @param appDir directory where application bits are present.
 * @param cl classloader that is used to load application files.
 */
public synchronized void registerProbes(String appName,File appDir,ClassLoader cl){
  if (appName == null)   return;
  if (cl == null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + appName);
    }
    return;
  }
  if (!appList.contains(appName)) {
    appList.add(appName);
    addProvider(appDir,cl);
  }
}","/** 
 * An application that has probes can be registered.
 * @param appName application-name
 * @param appDir directory where application bits are present.
 * @param cl classloader that is used to load application files.
 */
public synchronized void registerProbes(String appName,File appDir,ClassLoader cl){
  if (appName == null)   return;
  if (cl == null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",appName);
    }
    return;
  }
  if (!appList.contains(appName)) {
    appList.add(appName);
    addProvider(appDir,cl);
  }
}"
29606,"public synchronized void moduleStopped(Module module){
  if (module == null)   return;
  String str=module.getName();
}","@Override public synchronized void moduleStopped(Module module){
}"
29607,"private void addProvider(File appDir,ClassLoader classLoader){
  File manifestFile=new File(appDir,""String_Node_Str"" + File.separator + ""String_Node_Str"");
  String appDirPath=""String_Node_Str"";
  Manifest mf=null;
  if (manifestFile != null) {
    try {
      appDirPath=appDir.getCanonicalPath();
      FileInputStream fis=new FileInputStream(manifestFile);
      mf=new Manifest(fis);
    }
 catch (    IOException ex) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + ""String_Node_Str"" + File.separator + ""String_Node_Str""+ ""String_Node_Str""+ appDirPath);
        logger.fine(ex.getLocalizedMessage());
      }
      return;
    }
    if (mf != null) {
      processManifest(mf,classLoader);
    }
  }
  handleFutureStatsProviders();
}","private void addProvider(File appDir,ClassLoader classLoader){
  File manifestFile=new File(appDir,""String_Node_Str"" + File.separator + ""String_Node_Str"");
  String appDirPath=""String_Node_Str"";
  Manifest mf;
  if (manifestFile != null) {
    try {
      appDirPath=appDir.getCanonicalPath();
      FileInputStream fis=new FileInputStream(manifestFile);
      mf=new Manifest(fis);
    }
 catch (    IOException ex) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{File.separator,appDirPath});
        logger.fine(ex.getLocalizedMessage());
      }
      return;
    }
    if (mf != null) {
      processManifest(mf,classLoader);
    }
  }
  handleFutureStatsProviders();
}"
29608,"public void moduleInstalled(Module module){
}","@Override public void moduleInstalled(Module module){
}"
29609,"public UnprocessedChangeEvents changed(PropertyChangeEvent[] propertyChangeEvents){
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + spmd);
  StatsProviderRegistry spr=(spmd == null) ? null : spmd.getStatsProviderRegistry();
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + spr);
  for (  PropertyChangeEvent event : propertyChangeEvents) {
    if (event == null)     continue;
    String propName=event.getPropertyName();
    Object oldVal=event.getOldValue();
    Object newVal=event.getNewValue();
    if (newVal == null || newVal.equals(oldVal))     continue;
    if (!ok(propName))     continue;
    if (event.getSource() instanceof ModuleMonitoringLevels) {
      String newEnabled=newVal.toString().toUpperCase();
      String oldEnabled=(oldVal == null) ? ""String_Node_Str"" : oldVal.toString().toUpperCase();
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"",new Object[]{propName,newEnabled,oldEnabled});
      if ((!newEnabled.equals(oldEnabled)) && (spr != null)) {
        handleLevelChange(propName,newEnabled);
      }
    }
 else     if (event.getSource() instanceof ContainerMonitoring) {
      ContainerMonitoring cm=(ContainerMonitoring)event.getSource();
      String newEnabled=newVal.toString().toUpperCase();
      String oldEnabled=(oldVal == null) ? ""String_Node_Str"" : oldVal.toString().toUpperCase();
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"",new Object[]{propName,newEnabled,oldEnabled});
      if ((!newEnabled.equals(oldEnabled)) && (spr != null)) {
        handleLevelChange(cm.getName(),newEnabled);
      }
    }
 else     if (event.getSource() instanceof MonitoringService) {
      boolean newEnabled=Boolean.parseBoolean(newVal.toString());
      boolean oldEnabled=(oldVal == null) ? !newEnabled : Boolean.parseBoolean(oldVal.toString());
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"",new Object[]{propName,newEnabled,oldEnabled});
      if (newEnabled != oldEnabled) {
        handleServiceChange(spr,propName,newEnabled);
      }
    }
  }
  return null;
}","public UnprocessedChangeEvents changed(PropertyChangeEvent[] propertyChangeEvents){
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + spmd);
  StatsProviderRegistry spr=(spmd == null) ? null : spmd.getStatsProviderRegistry();
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + spr);
  for (  PropertyChangeEvent event : propertyChangeEvents) {
    if (event == null)     continue;
    String propName=event.getPropertyName();
    Object oldVal=event.getOldValue();
    Object newVal=event.getNewValue();
    if (newVal == null || newVal.equals(oldVal))     continue;
    if (!ok(propName))     continue;
    if (event.getSource() instanceof ModuleMonitoringLevels) {
      String newEnabled=newVal.toString().toUpperCase(Locale.ENGLISH);
      String oldEnabled=(oldVal == null) ? ""String_Node_Str"" : oldVal.toString().toUpperCase(Locale.ENGLISH);
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"",new Object[]{propName,newEnabled,oldEnabled});
      if ((!newEnabled.equals(oldEnabled)) && (spr != null)) {
        handleLevelChange(propName,newEnabled);
      }
    }
 else     if (event.getSource() instanceof ContainerMonitoring) {
      ContainerMonitoring cm=(ContainerMonitoring)event.getSource();
      String newEnabled=newVal.toString().toUpperCase(Locale.ENGLISH);
      String oldEnabled=(oldVal == null) ? ""String_Node_Str"" : oldVal.toString().toUpperCase(Locale.ENGLISH);
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"",new Object[]{propName,newEnabled,oldEnabled});
      if ((!newEnabled.equals(oldEnabled)) && (spr != null)) {
        handleLevelChange(cm.getName(),newEnabled);
      }
    }
 else     if (event.getSource() instanceof MonitoringService) {
      boolean newEnabled=Boolean.parseBoolean(newVal.toString());
      boolean oldEnabled=(oldVal == null) ? !newEnabled : Boolean.parseBoolean(oldVal.toString());
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"",new Object[]{propName,newEnabled,oldEnabled});
      if (newEnabled != oldEnabled) {
        handleServiceChange(spr,propName,newEnabled);
      }
    }
  }
  return null;
}"
29610,"private List<String> createTreeForStatsProvider(TreeNode parentNode,Object statsProvider){
  List<String> childNodeNames=new ArrayList();
  for (  Method m : statsProvider.getClass().getMethods()) {
    ManagedAttribute ma=m.getAnnotation(ManagedAttribute.class);
    Reset resetMeth=m.getAnnotation(Reset.class);
    if (resetMeth != null) {
      StatsProviderRegistryElement spre=this.statsProviderRegistry.getStatsProviderRegistryElement(statsProvider);
      spre.setResetMethod(m);
    }
    if (ma != null) {
      String methodName=m.getName();
      String id=ma.id();
      if ((id == null) || id.isEmpty()) {
        String methodNameLower=methodName.toLowerCase();
        if (methodNameLower.startsWith(""String_Node_Str"") && methodNameLower.length() > 3) {
          id=methodNameLower.substring(3);
        }
      }
      TreeNode attrNode=TreeNodeFactory.createMethodInvoker(id,statsProvider,id,m);
      parentNode.addChild(attrNode);
      childNodeNames.add(attrNode.getName());
    }
  }
  return childNodeNames;
}","private List<String> createTreeForStatsProvider(TreeNode parentNode,Object statsProvider){
  List<String> childNodeNames=new ArrayList();
  for (  Method m : statsProvider.getClass().getMethods()) {
    ManagedAttribute ma=m.getAnnotation(ManagedAttribute.class);
    Reset resetMeth=m.getAnnotation(Reset.class);
    if (resetMeth != null) {
      StatsProviderRegistryElement spre=this.statsProviderRegistry.getStatsProviderRegistryElement(statsProvider);
      spre.setResetMethod(m);
    }
    if (ma != null) {
      String methodName=m.getName();
      String id=ma.id();
      if ((id == null) || id.isEmpty()) {
        String methodNameLower=methodName.toLowerCase(Locale.ENGLISH);
        if (methodNameLower.startsWith(""String_Node_Str"") && methodNameLower.length() > 3) {
          id=methodNameLower.substring(3);
        }
      }
      TreeNode attrNode=TreeNodeFactory.createMethodInvoker(id,statsProvider,id,m);
      parentNode.addChild(attrNode);
      childNodeNames.add(attrNode.getName());
    }
  }
  return childNodeNames;
}"
29611,"private TreeNode constructServerPP(){
  TreeNode srvrNode=mrdr.get(instanceName);
  if (srvrNode != null) {
    return srvrNode;
  }
  Server srvr=null;
  List<Server> ls=domain.getServers().getServer();
  for (  Server sr : ls) {
    if (instanceName.equals(sr.getName())) {
      srvr=sr;
      break;
    }
  }
  srvrNode=TreeNodeFactory.createTreeNode(instanceName,null,instanceName);
  srvrNode.setEnabled(false);
  mrdr.add(instanceName,srvrNode);
  return srvrNode;
}","private TreeNode constructServerPP(){
  TreeNode srvrNode=mrdr.get(instanceName);
  if (srvrNode != null) {
    return srvrNode;
  }
  srvrNode=TreeNodeFactory.createTreeNode(instanceName,null,instanceName);
  srvrNode.setEnabled(false);
  mrdr.add(instanceName,srvrNode);
  return srvrNode;
}"
29612,"public StatsProviderRegistryElement(StatsProviderInfo spInfo){
  this.configStr=spInfo.getConfigElement();
  this.pp=spInfo.getPluginPoint();
  this.subTreePath=spInfo.getSubTreeRoot();
  this.invokerId=spInfo.getInvokerId();
  this.statsProvider=spInfo.getStatsProvider();
  this.mbeanName=spInfo.getSubTreeRoot();
  String configLevelStr=spInfo.getConfigLevel();
  configLevel=StatsProviderRegistry.configLevelsMap.get(configLevelStr.toUpperCase());
}","public StatsProviderRegistryElement(StatsProviderInfo spInfo){
  this.configStr=spInfo.getConfigElement();
  this.pp=spInfo.getPluginPoint();
  this.subTreePath=spInfo.getSubTreeRoot();
  this.invokerId=spInfo.getInvokerId();
  this.statsProvider=spInfo.getStatsProvider();
  this.mbeanName=spInfo.getSubTreeRoot();
  String configLevelStr=spInfo.getConfigLevel();
  configLevel=StatsProviderRegistry.configLevelsMap.get(configLevelStr.toUpperCase(Locale.ENGLISH));
}"
29613,"public StatsProviderRegistry(MonitoringRuntimeDataRegistry mrdr){
  this.mrdr=mrdr;
  for (int i=0; i < defaultConfigLevels.length; i++) {
    configLevelsMap.put(defaultConfigLevels[i].toUpperCase(),i);
  }
}","public StatsProviderRegistry(MonitoringRuntimeDataRegistry mrdr){
  for (int i=0; i < defaultConfigLevels.length; i++) {
    configLevelsMap.put(defaultConfigLevels[i].toUpperCase(Locale.ENGLISH),i);
  }
}"
29614,"public boolean isEnableAllowed(String userConfigLevelStr){
  Integer userConfigLevel=StatsProviderRegistry.configLevelsMap.get(userConfigLevelStr.toUpperCase());
  if ((userConfigLevel != null) && (userConfigLevel >= configLevel))   return true;
  return false;
}","public boolean isEnableAllowed(String userConfigLevelStr){
  Integer userConfigLevel=StatsProviderRegistry.configLevelsMap.get(userConfigLevelStr.toUpperCase(Locale.ENGLISH));
  if ((userConfigLevel != null) && (userConfigLevel >= configLevel))   return true;
  return false;
}"
29615,"public long getMax(){
  return max.get();
}","@Override public long getMax(){
  return max.get();
}"
29616,"public void addDataPoint(long value){
  if (min.get() == DEFAULT_MIN_BOUND) {
    min.set(value);
  }
  if (value < min.get()) {
    min.set(value);
  }
 else   if (value > max.get()) {
    max.set(value);
  }
  sum.addAndGet(value);
  times.incrementAndGet();
  lastSampleTime.set(getSampleTime());
}","@Override public void addDataPoint(long value){
  if (min.get() == DEFAULT_MIN_BOUND) {
    min.set(value);
  }
  if (value < min.get()) {
    min.set(value);
  }
 else   if (value > max.get()) {
    max.set(value);
  }
  sum.addAndGet(value);
  times.incrementAndGet();
  lastSampleTime.set(getSampleTime());
}"
29617,"public void setReset(){
  times.set(0);
  sum.set(0);
}","@Override public void setReset(){
  times.set(0);
  sum.set(0);
}"
29618,"public double getAverage(){
  double total=sum.doubleValue();
  double count=times.doubleValue();
  double avg=total / count;
  return (Double.isNaN(avg) ? 0 : avg);
}","@Override public double getAverage(){
  double total=sum.doubleValue();
  double count=times.doubleValue();
  double avg=total / count;
  return (Double.isNaN(avg) ? 0 : avg);
}"
29619,"public String getDescription(){
  return this.DESCRIPTION;
}","@Override public String getDescription(){
  return this.DESCRIPTION;
}"
29620,"public long getHighWaterMark(){
  return getMax();
}","@Override public long getHighWaterMark(){
  return getMax();
}"
29621,"public long getSize(){
  return times.get();
}","@Override public long getSize(){
  return times.get();
}"
29622,"public long getMin(){
  return min.get();
}","@Override public long getMin(){
  return min.get();
}"
29623,"public long getLastSampleTime(){
  return this.lastSampleTime.longValue();
}","@Override public long getLastSampleTime(){
  return this.lastSampleTime.longValue();
}"
29624,"public String toString(){
  return ""String_Node_Str"" + getClass().getName() + NEWLINE+ ""String_Node_Str""+ getName()+ NEWLINE+ ""String_Node_Str""+ getDescription()+ NEWLINE+ ""String_Node_Str""+ getUnit()+ NEWLINE+ ""String_Node_Str""+ getStartTime();
}","@Override public String toString(){
  return ""String_Node_Str"" + getClass().getName() + NEWLINE+ ""String_Node_Str""+ getName()+ NEWLINE+ ""String_Node_Str""+ getDescription()+ NEWLINE+ ""String_Node_Str""+ getUnit()+ NEWLINE+ ""String_Node_Str""+ getStartTime();
}"
29625,"public long getLowWaterMark(){
  return getMin();
}","@Override public long getLowWaterMark(){
  return getMin();
}"
29626,"public long getTotal(){
  return sum.get();
}","@Override public long getTotal(){
  return sum.get();
}"
29627,"public long getCurrent(){
  Double d=new Double(getAverage());
  return d.longValue();
}","@Override public long getCurrent(){
  return Double.valueOf(getAverage()).longValue();
}"
29628,"public long getStartTime(){
  return this.startTime;
}","@Override public long getStartTime(){
  return this.startTime;
}"
29629,"public String getUnit(){
  return this.UNIT;
}","@Override public String getUnit(){
  return this.UNIT;
}"
29630,"/** 
 * Open the new log file for the date specified by <code>date</code>.
 */
private void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  if (!dir.mkdirs()) {
  }
  try {
    String pathname=dir.getAbsolutePath() + File.separator + prefix+ date+ suffix;
    writer=new PrintWriter(new FileWriter(pathname,true),true);
  }
 catch (  IOException e) {
    writer=null;
  }
}","/** 
 * Open the new log file for the date specified by <code>date</code>.
 */
private void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  if (!dir.mkdirs() && !dir.exists()) {
    writer=null;
    return;
  }
  try {
    String pathname=dir.getAbsolutePath() + File.separator + prefix+ date+ suffix;
    writer=new PrintWriter(new FileWriter(pathname,true),true);
  }
 catch (  IOException e) {
    writer=null;
  }
}"
29631,"public ClientJarWriter(final ExtendedDeploymentContext deploymentContext){
  this.deploymentContext=deploymentContext;
  name=deploymentContext.getCommandParameters(DeployCommandParameters.class).name();
  logger=deploymentContext.getLogger();
}","public ClientJarWriter(final ExtendedDeploymentContext deploymentContext){
  this.deploymentContext=deploymentContext;
  name=VersioningUtils.getUntaggedName(deploymentContext.getCommandParameters(DeployCommandParameters.class).name());
  logger=deploymentContext.getLogger();
}"
29632,"public void run(){
  try {
    executeCommand(params);
    aReport.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    if (StringUtils.ok(getCommandOutput()))     aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),getCommandOutput()));
    Map<String,String> attributes=this.getAttributes();
    for (    String key : attributes.keySet()) {
      if (key.endsWith(""String_Node_Str""))       continue;
      if (!key.endsWith(""String_Node_Str"")) {
        if (attributes.get(key) != null)         aReport.getTopMessagePart().addProperty(key,attributes.get(key));
        continue;
      }
      String keyWithoutSuffix=key.substring(0,key.lastIndexOf(""String_Node_Str""));
      aReport.getTopMessagePart().addProperty(keyWithoutSuffix,attributes.get(keyWithoutSuffix + ""String_Node_Str""));
    }
  }
 catch (  CommandException cmdEx) {
    ActionReport.ExitCode finalResult;
    if (cmdEx.getCause() instanceof java.net.ConnectException) {
      finalResult=FailurePolicy.applyFailurePolicy(offlinePolicy,ActionReport.ExitCode.FAILURE);
      if (!finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
    }
 else {
      finalResult=FailurePolicy.applyFailurePolicy(failPolicy,ActionReport.ExitCode.FAILURE);
      if (finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
    }
    aReport.setActionExitCode(finalResult);
  }
  result.setInstanceCommand(this);
}","@Override public void run(){
  try {
    executeCommand(params);
    aReport.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    if (StringUtils.ok(getCommandOutput()))     aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),getCommandOutput()));
    Map<String,String> attributes=this.getAttributes();
    for (    Map.Entry<String,String> ae : attributes.entrySet()) {
      String key=ae.getKey();
      if (key.endsWith(""String_Node_Str""))       continue;
      if (!key.endsWith(""String_Node_Str"")) {
        aReport.getTopMessagePart().addProperty(key,ae.getValue());
        continue;
      }
      String keyWithoutSuffix=key.substring(0,key.lastIndexOf(""String_Node_Str""));
      aReport.getTopMessagePart().addProperty(keyWithoutSuffix,attributes.get(keyWithoutSuffix + ""String_Node_Str""));
    }
  }
 catch (  CommandException cmdEx) {
    ActionReport.ExitCode finalResult;
    if (cmdEx.getCause() instanceof java.net.ConnectException) {
      finalResult=FailurePolicy.applyFailurePolicy(offlinePolicy,ActionReport.ExitCode.FAILURE);
      if (!finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",getServer().getName(),commandName));
    }
 else {
      finalResult=FailurePolicy.applyFailurePolicy(failPolicy,ActionReport.ExitCode.FAILURE);
      if (finalResult.equals(ActionReport.ExitCode.FAILURE))       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
 else       aReport.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",commandName,getServer().getName(),cmdEx.getMessage()));
    }
    aReport.setActionExitCode(finalResult);
  }
  result.setInstanceCommand(this);
}"
29633,"static public InstanceStateFileProcessor createNew(HashMap<String,InstanceState> st,File xmlFileObject) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(xmlFileObject));
  writer.write(""String_Node_Str"");
  writer.newLine();
  writer.write(""String_Node_Str"");
  writer.newLine();
  writer.write(""String_Node_Str"");
  writer.newLine();
  for (  String s : st.keySet()) {
    writer.write(""String_Node_Str"" + s + ""String_Node_Str""+ InstanceState.StateType.NO_RESPONSE.getDescription()+ ""String_Node_Str"");
    writer.newLine();
  }
  writer.write(""String_Node_Str"");
  writer.newLine();
  writer.flush();
  writer.close();
  return new InstanceStateFileProcessor(st,xmlFileObject);
}","static public InstanceStateFileProcessor createNew(HashMap<String,InstanceState> st,File xmlFileObject) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(xmlFileObject));
    writer.write(""String_Node_Str"");
    writer.newLine();
    writer.write(""String_Node_Str"");
    writer.newLine();
    writer.write(""String_Node_Str"");
    writer.newLine();
    for (    String s : st.keySet()) {
      writer.write(""String_Node_Str"" + s + ""String_Node_Str""+ InstanceState.StateType.NO_RESPONSE.getDescription()+ ""String_Node_Str"");
      writer.newLine();
    }
    writer.write(""String_Node_Str"");
    writer.newLine();
    writer.flush();
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
  return new InstanceStateFileProcessor(st,xmlFileObject);
}"
29634,"private void configureSSLSocket(SSLServerSocket sslSocket,SSLConfigurator sslConfigHolder){
  if (sslConfigHolder.getEnabledCipherSuites() != null) {
    if (enabledCipherSuites == null) {
synchronized (cipherSuitesSync) {
        if (enabledCipherSuites == null) {
          enabledCipherSuites=configureEnabledCiphers(sslSocket,sslConfigHolder.getEnabledCipherSuites());
        }
      }
    }
    sslSocket.setEnabledCipherSuites(enabledCipherSuites);
  }
  if (sslConfigHolder.getEnabledProtocols() != null) {
    if (enabledProtocols == null) {
synchronized (protocolsSync) {
        if (enabledProtocols == null) {
          enabledProtocols=configureEnabledProtocols(sslSocket,sslConfigHolder.getEnabledProtocols());
        }
      }
    }
    sslSocket.setEnabledProtocols(enabledProtocols);
  }
  sslSocket.setUseClientMode(sslConfigHolder.isClientMode());
}","private void configureSSLSocket(SSLServerSocket sslSocket,SSLConfigurator sslConfigHolder){
  if (sslConfigHolder.getEnabledCipherSuites() != null) {
    if (enabledCipherSuitesLock == null) {
synchronized (cipherSuitesSync) {
        if (enabledCipherSuitesLock == null) {
          enabledCipherSuitesLock=new Object();
          enabledCipherSuites=configureEnabledCiphers(sslSocket,sslConfigHolder.getEnabledCipherSuites());
        }
      }
    }
    sslSocket.setEnabledCipherSuites(enabledCipherSuites);
  }
  if (sslConfigHolder.getEnabledProtocols() != null) {
    if (enabledProtocolsLock == null) {
synchronized (protocolsSync) {
        if (enabledProtocolsLock == null) {
          enabledProtocolsLock=new Object();
          enabledProtocols=configureEnabledProtocols(sslSocket,sslConfigHolder.getEnabledProtocols());
        }
      }
    }
    sslSocket.setEnabledProtocols(enabledProtocols);
  }
  sslSocket.setUseClientMode(sslConfigHolder.isClientMode());
}"
29635,"/** 
 * Loads any currently active sessions that were previously unloaded to file
 * @exception ClassNotFoundException if a serialized class cannot befound during the reload
 * @exception IOException if a read error occurs
 */
private void doLoadFromFile() throws ClassNotFoundException, IOException {
  if (log.isLoggable(Level.FINE)) {
    log.fine(""String_Node_Str"");
  }
  File file=file();
  if (file == null || !file.exists() || file.length() == 0) {
    return;
  }
  if (log.isLoggable(Level.FINE)) {
    log.fine(sm.getString(""String_Node_Str"",pathname));
  }
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(file.getAbsolutePath());
    readSessions(fis);
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    IOException f) {
    }
    if (!file.delete() && log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"" + file);
    }
  }
}","/** 
 * Loads any currently active sessions that were previously unloaded to file
 * @exception ClassNotFoundException if a serialized class cannot befound during the reload
 * @exception IOException if a read error occurs
 */
private void doLoadFromFile() throws ClassNotFoundException, IOException {
  if (log.isLoggable(Level.FINE)) {
    log.fine(""String_Node_Str"");
  }
  File file=file();
  if (file == null || !file.exists() || file.length() == 0) {
    return;
  }
  if (log.isLoggable(Level.FINE)) {
    log.fine(sm.getString(""String_Node_Str"",pathname));
  }
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(file.getAbsolutePath());
    readSessions(fis);
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    IOException f) {
    }
    deleteFile(file);
  }
}"
29636,"public void clearStore(){
  File file=file();
  if (file != null && file.exists()) {
    file.delete();
  }
}","public void clearStore(){
  File file=file();
  if (file != null && file.exists()) {
    deleteFile(file);
  }
}"
29637,"/** 
 * Delete the specified directory, including all of its contents and sub-directories recursively.
 * @param dir File object representing the directory to be deleted
 * @param logFailure <code>true</code> if failure to delete the resourceshould be logged
 */
public static boolean deleteDir(File dir,boolean logFailure){
  String files[]=dir.list();
  if (files == null) {
    files=new String[0];
  }
  for (int i=0; i < files.length; i++) {
    File file=new File(dir,files[i]);
    if (file.isDirectory()) {
      deleteDir(file,logFailure);
    }
 else {
      file.delete();
    }
  }
  boolean result;
  if (dir.exists()) {
    result=dir.delete();
  }
 else {
    result=true;
  }
  if (logFailure && !result) {
    log.severe(sm.getString(""String_Node_Str"",dir.getAbsolutePath()));
  }
  return result;
}","/** 
 * Delete the specified directory, including all of its contents and sub-directories recursively.
 * @param dir File object representing the directory to be deleted
 * @param logFailure <code>true</code> if failure to delete the resourceshould be logged
 */
public static boolean deleteDir(File dir,boolean logFailure){
  String files[]=dir.list();
  if (files == null) {
    files=new String[0];
  }
  for (int i=0; i < files.length; i++) {
    File file=new File(dir,files[i]);
    if (file.isDirectory()) {
      deleteDir(file,logFailure);
    }
 else {
      if (!file.delete() && logFailure) {
        log.severe(sm.getString(""String_Node_Str"",file.getAbsolutePath()));
      }
    }
  }
  boolean result;
  if (dir.exists()) {
    result=dir.delete();
  }
 else {
    result=true;
  }
  if (logFailure && !result) {
    log.severe(sm.getString(""String_Node_Str"",dir.getAbsolutePath()));
  }
  return result;
}"
29638,"private boolean addAccessChecksFromAnno(final AccessRequired.Typed arTyped,final AdminCommand command,final List<AccessCheckWork> accessChecks,final boolean isTaggable){
  final Class<?> type=arTyped.type();
  return false;
}","private boolean addAccessChecksFromAnno(final AccessRequired.Typed arTyped,final AdminCommand command,final List<AccessCheckWork> accessChecks,final boolean isTaggable){
  return false;
}"
29639,"protected String getCanonicalHost(){
  if (canonicalHostCache == null) {
    try {
      InetAddress address=InetAddress.getByName(host);
      canonicalHostCache=address.getCanonicalHostName();
    }
 catch (    UnknownHostException ex) {
      canonicalHostCache=host;
      if (canonicalHostCache != null) {
        canonicalHostCache=canonicalHostCache.trim().toLowerCase();
      }
    }
  }
  return canonicalHostCache;
}","protected String getCanonicalHost(){
  if (canonicalHostCache == null) {
    try {
      InetAddress address=InetAddress.getByName(host);
      canonicalHostCache=address.getCanonicalHostName();
    }
 catch (    UnknownHostException ex) {
      canonicalHostCache=host;
      if (canonicalHostCache != null) {
        canonicalHostCache=canonicalHostCache.trim().toLowerCase(Locale.ENGLISH);
      }
    }
  }
  return canonicalHostCache;
}"
29640,"@Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){
  if (callbackHandler instanceof AdminCallbackHandler) {
    BaseServiceLocator sl=((AdminCallbackHandler)callbackHandler).getServiceLocator();
    findServices(sl);
  }
  this.subject=subject;
  this.callbackHandler=callbackHandler;
  this.sharedState=sharedState;
  this.options=options;
  authRealm=(String)options.get(""String_Node_Str"");
}","@Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){
  if (callbackHandler instanceof AdminCallbackHandler) {
    BaseServiceLocator sl=((AdminCallbackHandler)callbackHandler).getServiceLocator();
    findServices(sl);
  }
  this.subject=subject;
  this.callbackHandler=callbackHandler;
  authRealm=(String)options.get(""String_Node_Str"");
}"
29641,"public static String getFriendlyClassname(String type){
  String result=type;
  if (type.startsWith(""String_Node_Str"")) {
    int depth=0;
    while (type.charAt(depth) == (int)'[') {
      ++depth;
    }
    result=type.substring(depth,type.length());
    if (result.startsWith(""String_Node_Str"") && result.endsWith(""String_Node_Str"")) {
      result=result.substring(1,result.length() - 1);
    }
 else     if (result.length() == 1) {
switch (result.charAt(0)) {
case 'Z':
        result=""String_Node_Str"";
      break;
case 'B':
    result=""String_Node_Str"";
  break;
case 'C':
result=""String_Node_Str"";
break;
case 'S':
result=""String_Node_Str"";
break;
case 'I':
result=""String_Node_Str"";
break;
case 'J':
result=""String_Node_Str"";
break;
case 'F':
result=""String_Node_Str"";
break;
case 'D':
result=""String_Node_Str"";
break;
}
}
for (int i=0; i < depth; ++i) {
result=result + ""String_Node_Str"";
}
}
if (result.startsWith(javaLang)) {
result=result.substring(javaLang.length(),result.length());
}
return (result);
}","public static String getFriendlyClassname(String type){
  String result=type;
  if (type.startsWith(""String_Node_Str"")) {
    int depth=0;
    while (type.charAt(depth) == (int)'[') {
      ++depth;
    }
    result=type.substring(depth,type.length());
    if (result.startsWith(""String_Node_Str"") && result.endsWith(""String_Node_Str"")) {
      result=result.substring(1,result.length() - 1);
    }
 else     if (result.length() == 1) {
switch (result.charAt(0)) {
case 'Z':
        result=""String_Node_Str"";
      break;
case 'B':
    result=""String_Node_Str"";
  break;
case 'C':
result=""String_Node_Str"";
break;
case 'S':
result=""String_Node_Str"";
break;
case 'I':
result=""String_Node_Str"";
break;
case 'J':
result=""String_Node_Str"";
break;
case 'F':
result=""String_Node_Str"";
break;
case 'D':
result=""String_Node_Str"";
break;
default :
result=""String_Node_Str"";
break;
}
}
StringBuilder resultBuf=new StringBuilder(result);
for (int i=0; i < depth; ++i) {
resultBuf.append(""String_Node_Str"");
}
result=resultBuf.toString();
}
if (result.startsWith(javaLang)) {
result=result.substring(javaLang.length(),result.length());
}
return (result);
}"
29642,"public static Class getArrayElementClass(final Class arrayClass){
  final String arrayClassName=arrayClass.getName();
  if (!classnameIsArray(arrayClassName)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String name=arrayClassName;
  name=name.substring(1,name.length());
  if (!name.startsWith(""String_Node_Str"")) {
    if (name.startsWith(""String_Node_Str"")) {
      name=name.substring(1,name.length() - 1);
    }
 else     if (name.length() == 1) {
      name=PrimitiveLetterToClassName(name.charAt(0));
    }
  }
 else {
  }
  Class theClass=null;
  try {
    theClass=getClassFromName(name);
  }
 catch (  ClassNotFoundException e) {
    assert(false);
  }
  return (theClass);
}","public static Class getArrayElementClass(final Class arrayClass){
  final String arrayClassName=arrayClass.getName();
  if (!classnameIsArray(arrayClassName)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String name=arrayClassName;
  name=name.substring(1,name.length());
  if (!name.startsWith(""String_Node_Str"")) {
    if (name.startsWith(""String_Node_Str"")) {
      name=name.substring(1,name.length() - 1);
    }
 else     if (name.length() == 1) {
      name=primitiveLetterToClassName(name.charAt(0));
    }
  }
 else {
  }
  Class theClass=null;
  try {
    theClass=getClassFromName(name);
  }
 catch (  ClassNotFoundException e) {
    assert(false);
  }
  return (theClass);
}"
29643,"public static Class getClassFromName(final String classname) throws ClassNotFoundException {
  Class theClass=null;
  if (classname.startsWith(""String_Node_Str"")) {
    theClass=Class.forName(classname);
  }
 else {
    final int numMappings=Array.getLength(sPrimitiveNameToObjectClass);
    for (int i=0; i < numMappings; ++i) {
      if (sPrimitiveNameToObjectClass[i].mName.equals(classname)) {
        theClass=sPrimitiveNameToObjectClass[i].mClass;
        break;
      }
    }
    if (theClass == null) {
      theClass=theClass.forName(classname);
    }
  }
  return (theClass);
}","public static Class getClassFromName(final String classname) throws ClassNotFoundException {
  Class theClass=null;
  if (classname.startsWith(""String_Node_Str"")) {
    theClass=Class.forName(classname);
  }
 else {
    final int numMappings=Array.getLength(sPrimitiveNameToObjectClass);
    for (int i=0; i < numMappings; ++i) {
      if (sPrimitiveNameToObjectClass[i].mName.equals(classname)) {
        theClass=sPrimitiveNameToObjectClass[i].mClass;
        break;
      }
    }
    if (theClass == null) {
      theClass=Class.forName(classname);
    }
  }
  return (theClass);
}"
29644,"public Thread newThread(Runnable runnableObj){
  Thread t=new Thread(runnableObj);
  t.setDaemon(true);
  return t;
}","@Override public Thread newThread(Runnable runnableObj){
  Thread t=new Thread(runnableObj);
  t.setDaemon(true);
  return t;
}"
29645,"/** 
 * Open the new log file for the date specified by <code>date</code>.
 */
private void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  dir.mkdirs();
  try {
    String pathname=dir.getAbsolutePath() + File.separator + prefix+ date+ suffix;
    writer=new PrintWriter(new FileWriter(pathname,true),true);
  }
 catch (  IOException e) {
    writer=null;
  }
}","/** 
 * Open the new log file for the date specified by <code>date</code>.
 */
private void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  if (!dir.mkdirs()) {
  }
  try {
    String pathname=dir.getAbsolutePath() + File.separator + prefix+ date+ suffix;
    writer=new PrintWriter(new FileWriter(pathname,true),true);
  }
 catch (  IOException e) {
    writer=null;
  }
}"
29646,"/** 
 * Return a File object representing the pathname to our session persistence directory, if any.  The directory will be created if it does not already exist.
 */
private File directory(){
  if (this.directory == null) {
    return (null);
  }
  if (this.directoryFile != null) {
    return (this.directoryFile);
  }
  File file=new File(this.directory);
  if (!file.isAbsolute()) {
    Container container=manager.getContainer();
    if (container instanceof Context) {
      ServletContext servletContext=((Context)container).getServletContext();
      File work=(File)servletContext.getAttribute(ServletContext.TEMPDIR);
      file=new File(work,this.directory);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (!file.exists() || !file.isDirectory()) {
    file.delete();
    file.mkdirs();
  }
  this.directoryFile=file;
  return (file);
}","/** 
 * Return a File object representing the pathname to our session persistence directory, if any.  The directory will be created if it does not already exist.
 */
private File directory() throws IOException {
  if (this.directory == null) {
    return (null);
  }
  if (this.directoryFile != null) {
    return (this.directoryFile);
  }
  File file=new File(this.directory);
  if (!file.isAbsolute()) {
    Container container=manager.getContainer();
    if (container instanceof Context) {
      ServletContext servletContext=((Context)container).getServletContext();
      File work=(File)servletContext.getAttribute(ServletContext.TEMPDIR);
      file=new File(work,this.directory);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (!file.exists() || !file.isDirectory()) {
    if (!file.delete() && file.exists()) {
      throw new IOException(sm.getString(""String_Node_Str"",file));
    }
    if (!file.mkdirs() && !file.isDirectory()) {
      throw new IOException(sm.getString(""String_Node_Str"",file));
    }
  }
  this.directoryFile=file;
  return (file);
}"
29647,"/** 
 * Return a File object representing the pathname to our session persistence file, if any.
 * @param id The ID of the Session to be retrieved. This isused in the file naming.
 */
private File file(String id){
  if (this.directory == null) {
    return (null);
  }
  String filename=id + FILE_EXT;
  File file=new File(directory(),filename);
  return (file);
}","/** 
 * Return a File object representing the pathname to our session persistence file, if any.
 * @param id The ID of the Session to be retrieved. This isused in the file naming.
 */
private File file(String id) throws IOException {
  if (this.directory == null) {
    return (null);
  }
  String filename=id + FILE_EXT;
  File file=new File(directory(),filename);
  return (file);
}"
29648,"@Override protected Set<Class<?>> getResourceClasses(){
  final Set<Class<?>> r=new HashSet<Class<?>>();
  r.add(CommandResource.class);
  r.add(ParameterMapFormReader.class);
  r.add(ActionReportXmlProvider.class);
  r.add(ActionReportJsonProvider.class);
  r.add(ActionReportDtoJsonProvider.class);
  r.add(CommandModelHtmlProvider.class);
  r.add(CommandModelTxtProvider.class);
  r.add(CommandModelStaxProvider.class);
  r.add(ParameterMapFormReader.class);
  r.add(JsonParameterMapProvider.class);
  PayloadPartProvider inst=new PayloadPartProvider();
  r.add(PayloadPartProvider.class);
  return r;
}","@Override protected Set<Class<?>> getResourceClasses(){
  final Set<Class<?>> r=new HashSet<Class<?>>();
  r.add(CommandResource.class);
  r.add(ParameterMapFormReader.class);
  r.add(ActionReportXmlProvider.class);
  r.add(ActionReportJsonProvider.class);
  r.add(ActionReportDtoJsonProvider.class);
  r.add(CommandModelHtmlProvider.class);
  r.add(CommandModelTxtProvider.class);
  r.add(CommandModelStaxProvider.class);
  r.add(ParameterMapFormReader.class);
  r.add(JsonParameterMapProvider.class);
  r.add(PayloadPartProvider.class);
  return r;
}"
29649,"/** 
 * Default constructor
 */
public JdbcAdminServiceImpl(){
  super();
  jdbcAdminService=this;
  ccPoolAdmService=(ConnectorConnectionPoolAdminServiceImpl)ConnectorAdminServicesFactory.getService(ConnectorConstants.CCP);
}","/** 
 * Default constructor
 */
public JdbcAdminServiceImpl(){
  super();
  ccPoolAdmService=(ConnectorConnectionPoolAdminServiceImpl)ConnectorAdminServicesFactory.getService(ConnectorConstants.CCP);
}"
29650,"/** 
 * Return the MBean Names of all the defined resource links for this application
 */
public String[] getResourceLinks(){
  ContextResourceLink[] links=getNamingResources().findResourceLinks();
  List<String> results=new ArrayList<String>();
  for (  ContextResourceLink link : links) {
    try {
      ObjectName oname=MBeanUtils.createObjectName(this.getEngineName(),link);
      results.add(oname.toString());
    }
 catch (    MalformedObjectNameException e) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + link);
      iae.initCause(e);
      throw iae;
    }
  }
  return results.toArray(new String[results.size()]);
}","/** 
 * Return the MBean Names of all the defined resource links for this application
 */
public String[] getResourceLinks(){
  ContextResourceLink[] links=getNamingResources().findResourceLinks();
  List<String> results=new ArrayList<String>();
  for (  ContextResourceLink link : links) {
    try {
      ObjectName oname=createObjectName(link);
      results.add(oname.toString());
    }
 catch (    MalformedObjectNameException e) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + link);
      iae.initCause(e);
      throw iae;
    }
  }
  return results.toArray(new String[results.size()]);
}"
29651,"/** 
 * Add a resource reference for this web application.
 * @param resourceName New resource reference name
 */
public String addResource(String resourceName,String type) throws MalformedObjectNameException {
  NamingResources nresources=getNamingResources();
  if (nresources == null) {
    return null;
  }
  ContextResource resource=nresources.findResource(resourceName);
  if (resource != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + resourceName + ""String_Node_Str"");
  }
  resource=new ContextResource();
  resource.setName(resourceName);
  resource.setType(type);
  nresources.addResource(resource);
  MBeanUtils.createObjectName(domain,resource);
  return (oname.toString());
}","/** 
 * Add a resource reference for this web application.
 * @param resourceName New resource reference name
 */
public String addResource(String resourceName,String type) throws MalformedObjectNameException {
  NamingResources nresources=getNamingResources();
  if (nresources == null) {
    return null;
  }
  ContextResource resource=nresources.findResource(resourceName);
  if (resource != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + resourceName + ""String_Node_Str"");
  }
  resource=new ContextResource();
  resource.setName(resourceName);
  resource.setType(type);
  nresources.addResource(resource);
  return createObjectName(resource).toString();
}"
29652,"/** 
 * Add a resource link for this web application.
 * @param resourceLinkName New resource link name
 */
public String addResourceLink(String resourceLinkName,String global,String name,String type) throws MalformedObjectNameException {
  NamingResources nresources=getNamingResources();
  if (nresources == null) {
    return null;
  }
  ContextResourceLink resourceLink=nresources.findResourceLink(resourceLinkName);
  if (resourceLink != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + resourceLinkName + ""String_Node_Str"");
  }
  resourceLink=new ContextResourceLink();
  resourceLink.setGlobal(global);
  resourceLink.setName(resourceLinkName);
  resourceLink.setType(type);
  nresources.addResourceLink(resourceLink);
  ObjectName oname=MBeanUtils.createObjectName(domain,resourceLink);
  return (oname.toString());
}","/** 
 * Add a resource link for this web application.
 * @param resourceLinkName New resource link name
 */
public String addResourceLink(String resourceLinkName,String global,String name,String type) throws MalformedObjectNameException {
  NamingResources nresources=getNamingResources();
  if (nresources == null) {
    return null;
  }
  ContextResourceLink resourceLink=nresources.findResourceLink(resourceLinkName);
  if (resourceLink != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + resourceLinkName + ""String_Node_Str"");
  }
  resourceLink=new ContextResourceLink();
  resourceLink.setGlobal(global);
  resourceLink.setName(resourceLinkName);
  resourceLink.setType(type);
  nresources.addResourceLink(resourceLink);
  return createObjectName(resourceLink).toString();
}"
29653,"@Override public ObjectName createObjectName(String hostDomain,ObjectName parentName) throws MalformedObjectNameException {
  String onameStr;
  StandardHost hst=(StandardHost)getParent();
  String hostName=getParent().getName();
  String name=""String_Node_Str"" + ((hostName == null) ? ""String_Node_Str"" : hostName) + ((""String_Node_Str"".equals(encodedPath)) ? ""String_Node_Str"" : encodedPath);
  String suffix=""String_Node_Str"" + getJ2EEApplication() + ""String_Node_Str""+ getJ2EEServer();
  onameStr=""String_Node_Str"" + name + suffix;
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"" + onameStr + ""String_Node_Str""+ oname);
  if (getDomain() == null)   domain=hst.getDomain();
  return new ObjectName(getDomain() + ""String_Node_Str"" + onameStr);
}","/** 
 * Create an <code>ObjectName</code> for <code>ContextResourceLink</code> object.
 * @param resourceLink The ContextResourceLink to be named
 * @exception MalformedObjectNameException if a name cannot be created
 */
public ObjectName createObjectName(ContextResourceLink resourceLink) throws MalformedObjectNameException {
  ObjectName name=null;
  String encodedResourceLinkName=urlEncoder.encode(resourceLink.getName());
  Object container=resourceLink.getNamingResources().getContainer();
  if (container instanceof Server) {
    name=new ObjectName(domain + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ encodedResourceLinkName);
  }
 else   if (container instanceof Context) {
    String path=((Context)container).getPath();
    if (path.length() < 1)     path=""String_Node_Str"";
    Host host=(Host)((Context)container).getParent();
    name=new ObjectName(domain + ""String_Node_Str"" + ""String_Node_Str""+ path+ ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ encodedResourceLinkName);
  }
  return (name);
}"
29654,"/** 
 * Return the MBean Names of all the defined resource references for this application.
 */
public String[] getResourceNames(){
  ContextResource[] resources=getNamingResources().findResources();
  List<String> results=new ArrayList<String>();
  for (  ContextResource resource : resources) {
    try {
      ObjectName oname=MBeanUtils.createObjectName(this.getEngineName(),resource);
      results.add(oname.toString());
    }
 catch (    MalformedObjectNameException e) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + resource);
      iae.initCause(e);
      throw iae;
    }
  }
  return results.toArray(new String[results.size()]);
}","/** 
 * Return the MBean Names of all the defined resource references for this application.
 */
public String[] getResourceNames(){
  ContextResource[] resources=getNamingResources().findResources();
  List<String> results=new ArrayList<String>();
  for (  ContextResource resource : resources) {
    try {
      ObjectName oname=createObjectName(resource);
      results.add(oname.toString());
    }
 catch (    MalformedObjectNameException e) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + resource);
      iae.initCause(e);
      throw iae;
    }
  }
  return results.toArray(new String[results.size()]);
}"
29655,"/** 
 * Return the MBean Names of the set of defined environment entries for this web application
 */
public String[] getEnvironments(){
  ContextEnvironment[] envs=getNamingResources().findEnvironments();
  List<String> results=new ArrayList<String>();
  for (  ContextEnvironment env : envs) {
    try {
      ObjectName oname=MBeanUtils.createObjectName(this.getEngineName(),env);
      results.add(oname.toString());
    }
 catch (    MalformedObjectNameException e) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + env);
      iae.initCause(e);
      throw iae;
    }
  }
  return results.toArray(new String[results.size()]);
}","/** 
 * Return the MBean Names of the set of defined environment entries for this web application
 */
public String[] getEnvironments(){
  ContextEnvironment[] envs=getNamingResources().findEnvironments();
  List<String> results=new ArrayList<String>();
  for (  ContextEnvironment env : envs) {
    try {
      ObjectName oname=createObjectName(env);
      results.add(oname.toString());
    }
 catch (    MalformedObjectNameException e) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + env);
      iae.initCause(e);
      throw iae;
    }
  }
  return results.toArray(new String[results.size()]);
}"
29656,"/** 
 * Add an environment entry for this web application.
 * @param envName New environment entry name
 */
public String addEnvironment(String envName,String type) throws MalformedObjectNameException {
  NamingResources nresources=getNamingResources();
  if (nresources == null) {
    return null;
  }
  ContextEnvironment env=nresources.findEnvironment(envName);
  if (env != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + envName + ""String_Node_Str"");
  }
  env=new ContextEnvironment();
  env.setName(envName);
  env.setType(type);
  nresources.addEnvironment(env);
  ObjectName oname=MBeanUtils.createObjectName(domain,env);
  return (oname.toString());
}","/** 
 * Add an environment entry for this web application.
 * @param envName New environment entry name
 */
public String addEnvironment(String envName,String type) throws MalformedObjectNameException {
  NamingResources nresources=getNamingResources();
  if (nresources == null) {
    return null;
  }
  ContextEnvironment env=nresources.findEnvironment(envName);
  if (env != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + envName + ""String_Node_Str"");
  }
  env=new ContextEnvironment();
  env.setName(envName);
  env.setType(type);
  nresources.addEnvironment(env);
  return createObjectName(env).toString();
}"
29657,"public <T>T get(String key) throws InsufficientCredentialException {
  Entry entry=simpleMap.getEntry(key);
  if (entry == null) {
    if (contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ)) {
      return null;
    }
  }
 else {
    if (entry != null && (entry.allowAllToRead || contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ))) {
      return entry.getValue();
    }
  }
  throw new InsufficientCredentialException();
}","public <T>T get(String key) throws InsufficientCredentialException {
  Entry entry=simpleMap.getEntry(key);
  if (entry == null) {
    if (contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ)) {
      return null;
    }
  }
 else {
    if (entry != null && (entry.allowAllToRead || contextAccessController.isAccessAllowed(key,ContextAccessLevel.READ))) {
      return (T)entry.getValue();
    }
  }
  throw new InsufficientCredentialException();
}"
29658,"@SuppressWarnings(""String_Node_Str"") public <T>T put(String key,Entry entry){
  validate(key,entry);
  T value=entry.getValue();
  Entry oldEntry=map.put(key,entry);
  if (oldEntry != null && (oldEntry.getValue() instanceof ContextLifecycle)) {
    ((ContextLifecycle)oldEntry.value).contextChanged(value);
  }
  if (entry.getValue() instanceof ContextLifecycle) {
    ContextLifecycle ctx=(ContextLifecycle)entry.getValue();
    if (addedContexts == null) {
      ctx.contextAdded();
    }
 else {
      addedContexts.add(ctx);
    }
  }
  if (logger.isLoggable(Level.DEBUG)) {
    logger.log(Level.DEBUG,MessageID.PUT,key,value,oldEntry == null ? null : oldEntry.value);
  }
  return (T)(oldEntry == null ? null : oldEntry.value);
}","@SuppressWarnings(""String_Node_Str"") public <T>T put(String key,Entry entry){
  validate(key,entry);
  T value=(T)entry.getValue();
  Entry oldEntry=map.put(key,entry);
  if (oldEntry != null && (oldEntry.getValue() instanceof ContextLifecycle)) {
    ((ContextLifecycle)oldEntry.value).contextChanged(value);
  }
  if (entry.getValue() instanceof ContextLifecycle) {
    ContextLifecycle ctx=(ContextLifecycle)entry.getValue();
    if (addedContexts == null) {
      ctx.contextAdded();
    }
 else {
      addedContexts.add(ctx);
    }
  }
  if (logger.isLoggable(Level.DEBUG)) {
    logger.log(Level.DEBUG,MessageID.PUT,key,value,oldEntry == null ? null : oldEntry.value);
  }
  return (T)(oldEntry == null ? null : oldEntry.value);
}"
29659,"public <T>T get(String key){
  return extractResult(key,getEntry(key),""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") public <T>T get(String key){
  return (T)extractResult(key,getEntry(key),""String_Node_Str"");
}"
29660,"@Override public <T>T put(String name,Character context,EnumSet<PropagationMode> propagationModes) throws InsufficientCredentialException {
  return mapFinder.getMapAndCreateIfNeeded().put(name,new Entry(context,propagationModes,Entry.ContextType.BYTE));
}","@Override public <T>T put(String name,Character context,EnumSet<PropagationMode> propagationModes) throws InsufficientCredentialException {
  return (T)mapFinder.getMapAndCreateIfNeeded().put(name,new Entry(context,propagationModes,Entry.ContextType.BYTE));
}"
29661,"public <T>T putSerializable(String name,Serializable context,EnumSet<PropagationMode> propagationModes,boolean allowAllToRead){
  return sMap.put(newKey(name),new Entry(context,propagationModes,ContextType.SERIALIZABLE).init(true,allowAllToRead));
}","public <T>T putSerializable(String name,Serializable context,EnumSet<PropagationMode> propagationModes,boolean allowAllToRead){
  return (T)sMap.put(newKey(name),new Entry(context,propagationModes,ContextType.SERIALIZABLE).init(true,allowAllToRead));
}"
29662,"@Override public <T>T get(String name){
  return sMap.get(makeKey(name));
}","@Override public <T>T get(String name){
  return (T)sMap.get(makeKey(name));
}"
29663,"@Override public <T>T put(String name,Character context,EnumSet<PropagationMode> propagationModes){
  return sMap.put(newKey(name),new Entry(context,propagationModes,ContextType.CHAR).init(true,allowAllToRead(name)));
}","@Override public <T>T put(String name,Character context,EnumSet<PropagationMode> propagationModes){
  return (T)sMap.put(newKey(name),new Entry(context,propagationModes,ContextType.CHAR).init(true,allowAllToRead(name)));
}"
29664,"@Override public <T>T remove(String name){
  names.remove(name);
  return sMap.remove(makeKey(name));
}","@Override public <T>T remove(String name){
  names.remove(name);
  return (T)sMap.remove(makeKey(name));
}"
29665,"public ThreadPoolStatsImpl(ThreadPool threadPool) throws NoSuchWorkQueueException {
  this.threadPool=threadPool;
  this.threadPoolName=threadPool.getName();
  getWorkQueueForThreadPool();
  initializeStats();
}","public ThreadPoolStatsImpl(ThreadPool threadPool) throws NoSuchWorkQueueException {
  this.threadPool=threadPool;
  getWorkQueueForThreadPool();
  initializeStats();
}"
29666,"@Override public void init() throws Exception {
  if (this.getParent() == null) {
    ObjectName parentName=getParentName();
    ContextConfig config=new ContextConfig();
    this.addLifecycleListener(config);
  }
  if (initialized) {
    return;
  }
  super.init();
  lifecycle.fireLifecycleEvent(INIT_EVENT,null);
  if (this.getObjectName() != null) {
    Notification notification=new Notification(""String_Node_Str"",this,sequenceNumber++);
    sendNotification(notification);
  }
}","@Override public void init() throws Exception {
  if (this.getParent() == null) {
    ContextConfig config=new ContextConfig();
    this.addLifecycleListener(config);
  }
  if (initialized) {
    return;
  }
  super.init();
  lifecycle.fireLifecycleEvent(INIT_EVENT,null);
  if (this.getObjectName() != null) {
    Notification notification=new Notification(""String_Node_Str"",this,sequenceNumber++);
    sendNotification(notification);
  }
}"
29667,"public boolean touchStore(){
  if (cookieStoreFile.lastModified() + CACHE_WRITE_DELTA > System.currentTimeMillis()) {
    return false;
  }
  boolean ignore=cookieStoreFile.setLastModified(System.currentTimeMillis());
  return true;
}","public boolean touchStore(){
  if (cookieStoreFile.lastModified() + CACHE_WRITE_DELTA > System.currentTimeMillis()) {
    return false;
  }
  return (cookieStoreFile.setLastModified(System.currentTimeMillis()));
}"
29668,"/** 
 * Copy directory.
 */
private boolean copyDir(DirContext srcDir,File destDir){
  try {
    NamingEnumeration<NameClassPair> enumeration=srcDir.list(""String_Node_Str"");
    while (enumeration.hasMoreElements()) {
      NameClassPair ncPair=enumeration.nextElement();
      String name=ncPair.getName();
      Object object=srcDir.lookup(name);
      File currentFile=new File(destDir,name);
      if (object instanceof Resource) {
        InputStream is=((Resource)object).streamContent();
        OutputStream os=new FileOutputStream(currentFile);
        if (!copy(is,os))         return false;
      }
 else       if (object instanceof InputStream) {
        OutputStream os=new FileOutputStream(currentFile);
        if (!copy((InputStream)object,os))         return false;
      }
 else       if (object instanceof DirContext) {
        currentFile.mkdir();
        copyDir((DirContext)object,currentFile);
      }
    }
  }
 catch (  NamingException e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
  return true;
}","/** 
 * Copy directory.
 */
private boolean copyDir(DirContext srcDir,File destDir){
  try {
    NamingEnumeration<NameClassPair> enumeration=srcDir.list(""String_Node_Str"");
    while (enumeration.hasMoreElements()) {
      NameClassPair ncPair=enumeration.nextElement();
      String name=ncPair.getName();
      Object object=srcDir.lookup(name);
      File currentFile=new File(destDir,name);
      if (object instanceof Resource) {
        InputStream is=((Resource)object).streamContent();
        OutputStream os=new FileOutputStream(currentFile);
        if (!copy(is,os))         return false;
      }
 else       if (object instanceof InputStream) {
        OutputStream os=new FileOutputStream(currentFile);
        if (!copy((InputStream)object,os))         return false;
      }
 else       if (object instanceof DirContext) {
        if (!currentFile.isDirectory() && !currentFile.mkdir())         return false;
        if (!copyDir((DirContext)object,currentFile))         return false;
      }
    }
  }
 catch (  NamingException e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
  return true;
}"
29669,"/** 
 * Configure the repositories for our class loader, based on the associated Context.
 */
private void setRepositories(){
  if (!(container instanceof Context))   return;
  ServletContext servletContext=((Context)container).getServletContext();
  if (servletContext == null)   return;
  File workDir=(File)servletContext.getAttribute(ServletContext.TEMPDIR);
  if (workDir == null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + servletContext);
    }
  }
  if (log.isLoggable(Level.FINEST) && workDir != null)   log.finest(sm.getString(""String_Node_Str"",workDir.getAbsolutePath()));
  DirContext resources=container.getResources();
  String classesPath=""String_Node_Str"";
  DirContext classes=null;
  try {
    Object object=resources.lookup(classesPath);
    if (object instanceof DirContext) {
      classes=(DirContext)object;
    }
  }
 catch (  NamingException e) {
  }
  if (classes != null) {
    File classRepository=null;
    String absoluteClassesPath=servletContext.getRealPath(classesPath);
    if (absoluteClassesPath != null) {
      classRepository=new File(absoluteClassesPath);
    }
 else {
      classRepository=new File(workDir,classesPath);
      classRepository.mkdirs();
      copyDir(classes,classRepository);
    }
    if (log.isLoggable(Level.FINEST))     log.finest(sm.getString(""String_Node_Str"",classesPath,classRepository.getAbsolutePath()));
  }
  String libPath=""String_Node_Str"";
  classLoader.setJarPath(libPath);
  DirContext libDir=null;
  try {
    Object object=resources.lookup(libPath);
    if (object instanceof DirContext)     libDir=(DirContext)object;
  }
 catch (  NamingException e) {
  }
  if (libDir != null) {
    boolean copyJars=false;
    String absoluteLibPath=servletContext.getRealPath(libPath);
    File destDir=null;
    if (absoluteLibPath != null) {
      destDir=new File(absoluteLibPath);
    }
 else {
      copyJars=true;
      destDir=new File(workDir,libPath);
      destDir.mkdirs();
    }
    if (!copyJars) {
      return;
    }
    try {
      NamingEnumeration<Binding> enumeration=resources.listBindings(libPath);
      while (enumeration.hasMoreElements()) {
        Binding binding=enumeration.nextElement();
        String filename=libPath + ""String_Node_Str"" + binding.getName();
        if (!filename.endsWith(""String_Node_Str"") && !filename.endsWith(""String_Node_Str""))         continue;
        if (binding.getName() != null && binding.getName().startsWith(""String_Node_Str"") && ignoreHiddenJarFiles) {
          continue;
        }
        File destFile=new File(destDir,binding.getName());
        if (log.isLoggable(Level.FINEST)) {
          log.finest(sm.getString(""String_Node_Str"",filename,destFile.getAbsolutePath()));
        }
        Object obj=binding.getObject();
        if (!(obj instanceof Resource))         continue;
        Resource jarResource=(Resource)obj;
        if (!copy(jarResource.streamContent(),new FileOutputStream(destFile))) {
          continue;
        }
      }
    }
 catch (    NamingException e) {
    }
catch (    IOException e) {
      log(""String_Node_Str"",e);
    }
  }
}","/** 
 * Configure the repositories for our class loader, based on the associated Context.
 */
private void setRepositories() throws IOException {
  if (!(container instanceof Context))   return;
  ServletContext servletContext=((Context)container).getServletContext();
  if (servletContext == null)   return;
  File workDir=(File)servletContext.getAttribute(ServletContext.TEMPDIR);
  if (workDir == null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + servletContext);
    }
  }
  if (log.isLoggable(Level.FINEST) && workDir != null)   log.finest(sm.getString(""String_Node_Str"",workDir.getAbsolutePath()));
  DirContext resources=container.getResources();
  String classesPath=""String_Node_Str"";
  DirContext classes=null;
  try {
    Object object=resources.lookup(classesPath);
    if (object instanceof DirContext) {
      classes=(DirContext)object;
    }
  }
 catch (  NamingException e) {
  }
  if (classes != null) {
    File classRepository=null;
    String absoluteClassesPath=servletContext.getRealPath(classesPath);
    if (absoluteClassesPath != null) {
      classRepository=new File(absoluteClassesPath);
    }
 else {
      classRepository=new File(workDir,classesPath);
      if (!classRepository.mkdirs() && !classRepository.isDirectory()) {
        throw new IOException(sm.getString(""String_Node_Str""));
      }
      if (!copyDir(classes,classRepository)) {
        throw new IOException(sm.getString(""String_Node_Str""));
      }
    }
    if (log.isLoggable(Level.FINEST))     log.finest(sm.getString(""String_Node_Str"",classesPath,classRepository.getAbsolutePath()));
  }
  String libPath=""String_Node_Str"";
  classLoader.setJarPath(libPath);
  DirContext libDir=null;
  try {
    Object object=resources.lookup(libPath);
    if (object instanceof DirContext)     libDir=(DirContext)object;
  }
 catch (  NamingException e) {
  }
  if (libDir != null) {
    boolean copyJars=false;
    String absoluteLibPath=servletContext.getRealPath(libPath);
    File destDir=null;
    if (absoluteLibPath != null) {
      destDir=new File(absoluteLibPath);
    }
 else {
      copyJars=true;
      destDir=new File(workDir,libPath);
      if (!destDir.exists() && !destDir.mkdirs()) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str"",destDir.getAbsolutePath()));
      }
    }
    if (!copyJars) {
      return;
    }
    try {
      NamingEnumeration<Binding> enumeration=resources.listBindings(libPath);
      while (enumeration.hasMoreElements()) {
        Binding binding=enumeration.nextElement();
        String filename=libPath + ""String_Node_Str"" + binding.getName();
        if (!filename.endsWith(""String_Node_Str"") && !filename.endsWith(""String_Node_Str""))         continue;
        if (binding.getName() != null && binding.getName().startsWith(""String_Node_Str"") && ignoreHiddenJarFiles) {
          continue;
        }
        File destFile=new File(destDir,binding.getName());
        if (log.isLoggable(Level.FINEST)) {
          log.finest(sm.getString(""String_Node_Str"",filename,destFile.getAbsolutePath()));
        }
        Object obj=binding.getObject();
        if (!(obj instanceof Resource))         continue;
        Resource jarResource=(Resource)obj;
        if (!copy(jarResource.streamContent(),new FileOutputStream(destFile))) {
          continue;
        }
      }
    }
 catch (    NamingException e) {
    }
catch (    IOException e) {
      log(""String_Node_Str"",e);
    }
  }
}"
29670,"/** 
 * Open the new log file for the date specified by <code>dateStamp</code>.
 */
private synchronized void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  dir.mkdirs();
  try {
    String pathname;
    if (rotatable) {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ dateStamp+ suffix;
    }
 else {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ suffix;
    }
    writer=new PrintWriter(new FileWriter(pathname,true),true);
  }
 catch (  IOException e) {
    writer=null;
  }
}","/** 
 * Open the new log file for the date specified by <code>dateStamp</code>.
 */
private synchronized void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  if (!dir.mkdirs() && !dir.isDirectory()) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",dir));
  }
  try {
    String pathname;
    if (rotatable) {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ dateStamp+ suffix;
    }
 else {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ suffix;
    }
    writer=new PrintWriter(new FileWriter(pathname,true),true);
  }
 catch (  IOException e) {
    writer=null;
  }
}"
29671,"/** 
 * Open the new log file for the date specified by <code>dateStamp</code>.
 */
private synchronized void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  dir.mkdirs();
  try {
    String pathname;
    if (rotatable) {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ dateStamp+ suffix;
    }
 else {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ suffix;
    }
    currentLogFile=new File(pathname);
    writer=new PrintWriter(new FileWriter(pathname,true),true);
    if (currentLogFile.length() == 0) {
      writer.println(""String_Node_Str"" + pattern);
      writer.println(""String_Node_Str"");
      writer.println(""String_Node_Str"" + ServerInfo.getServerInfo());
    }
  }
 catch (  IOException e) {
    writer=null;
    currentLogFile=null;
  }
}","/** 
 * Open the new log file for the date specified by <code>dateStamp</code>.
 */
private synchronized void open(){
  File dir=new File(directory);
  if (!dir.isAbsolute())   dir=new File(System.getProperty(""String_Node_Str""),directory);
  if (!dir.mkdirs() && !dir.isDirectory()) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",dir));
  }
  try {
    String pathname;
    if (rotatable) {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ dateStamp+ suffix;
    }
 else {
      pathname=dir.getAbsolutePath() + File.separator + prefix+ suffix;
    }
    currentLogFile=new File(pathname);
    writer=new PrintWriter(new FileWriter(pathname,true),true);
    if (currentLogFile.length() == 0) {
      writer.println(""String_Node_Str"" + pattern);
      writer.println(""String_Node_Str"");
      writer.println(""String_Node_Str"" + ServerInfo.getServerInfo());
    }
  }
 catch (  IOException e) {
    writer=null;
    currentLogFile=null;
  }
}"
29672,"private void deleteAdminObjectResource(AdminObjectResource adminObject,ResourceInfo resourceInfo) throws ConnectorRuntimeException {
  if (ResourcesUtil.createInstance().isEnabled(adminObject,resourceInfo)) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
    }
    runtime.deleteAdminObject(resourceInfo);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
    }
  }
 else {
    _logger.log(Level.FINEST,""String_Node_Str"",new Object[]{adminObject.getJndiName(),ConnectorConstants.RES_TYPE_AOR});
  }
}","private void deleteAdminObjectResource(AdminObjectResource adminObject,ResourceInfo resourceInfo) throws ConnectorRuntimeException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
  }
  runtime.deleteAdminObject(resourceInfo);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
  }
}"
29673,"private void createAdminObjectResource(AdminObjectResource aor,ResourceInfo resourceInfo) throws ConnectorRuntimeException {
  if (ResourcesUtil.createInstance().isEnabled(aor,resourceInfo)) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
    }
    runtime.addAdminObject(null,aor.getResAdapter(),resourceInfo,aor.getResType(),aor.getClassName(),transformProps(aor.getProperty()));
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
    }
  }
 else {
    _logger.log(Level.INFO,""String_Node_Str"",new Object[]{aor.getJndiName(),ConnectorConstants.RES_TYPE_AOR});
  }
}","private void createAdminObjectResource(AdminObjectResource aor,ResourceInfo resourceInfo) throws ConnectorRuntimeException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
  }
  runtime.addAdminObject(null,aor.getResAdapter(),resourceInfo,aor.getResType(),aor.getClassName(),transformProps(aor.getProperty()));
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
  }
}"
29674,"private void createConnectorResource(ConnectorResource connectorResource,ResourceInfo resourceInfo,PoolInfo poolInfo) throws ConnectorRuntimeException {
  if (ResourcesUtil.createInstance().isEnabled(connectorResource,resourceInfo)) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
    }
    runtime.createConnectorResource(resourceInfo,poolInfo,null);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
    }
  }
 else {
    _logger.log(Level.INFO,""String_Node_Str"",new Object[]{connectorResource.getJndiName(),ConnectorConstants.RES_TYPE_CR});
  }
}","private void createConnectorResource(ConnectorResource connectorResource,ResourceInfo resourceInfo,PoolInfo poolInfo) throws ConnectorRuntimeException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
  }
  runtime.createConnectorResource(resourceInfo,poolInfo,null);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"",resourceInfo);
  }
}"
29675,"private void deleteConnectorResource(ConnectorResource connectorResource,ResourceInfo resourceInfo) throws Exception {
  if (ResourcesUtil.createInstance().isEnabled(connectorResource,resourceInfo)) {
    runtime.deleteConnectorResource(resourceInfo);
    checkAndDeletePool(connectorResource);
  }
 else {
    _logger.log(Level.FINEST,""String_Node_Str"",new Object[]{connectorResource.getJndiName(),ConnectorConstants.RES_TYPE_CR});
  }
}","private void deleteConnectorResource(ConnectorResource connectorResource,ResourceInfo resourceInfo) throws Exception {
  runtime.deleteConnectorResource(resourceInfo);
  checkAndDeletePool(connectorResource);
}"
29676,"/** 
 * Find the specified class in our local repositories, if possible.  If not found, throw <code>ClassNotFoundException</code>.
 * @param name Name of the class to be loaded
 * @exception ClassNotFoundException if the class was not found
 */
@Override protected Class<?> findClass(String name) throws ClassNotFoundException {
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
  if (securityManager != null && packageDefinitionEnabled) {
    int i=name.lastIndexOf('.');
    if (i >= 0) {
      try {
        if (logger.isLoggable(Level.FINER))         logger.finer(""String_Node_Str"");
        securityManager.checkPackageDefinition(name.substring(0,i));
      }
 catch (      Exception se) {
        if (logger.isLoggable(Level.FINER))         logger.log(Level.FINER,""String_Node_Str"",se);
        throw new ClassNotFoundException(name,se);
      }
    }
  }
  Class<?> clazz=null;
  try {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
    try {
      ResourceEntry entry=findClassInternal(name);
      CodeSource codeSource=new CodeSource(entry.codeBase,entry.certificates);
synchronized (this) {
        if (entry.loadedClass == null) {
          byte[] binaryContent=entry.binaryContent;
          if (!byteCodePreprocessors.isEmpty()) {
            String resourceName=name.replace('.','/') + ""String_Node_Str"";
            for (            BytecodePreprocessor preprocessor : byteCodePreprocessors) {
              binaryContent=preprocessor.preprocess(resourceName,binaryContent);
            }
          }
          clazz=defineClass(name,binaryContent,0,binaryContent.length,codeSource);
          entry.loadedClass=clazz;
          entry.binaryContent=null;
          entry.source=null;
          entry.codeBase=null;
          entry.manifest=null;
          entry.certificates=null;
        }
 else {
          clazz=entry.loadedClass;
        }
      }
    }
 catch (    ClassNotFoundException cnfe) {
      if (!hasExternalRepositories) {
        throw cnfe;
      }
    }
catch (    UnsupportedClassVersionError ucve) {
      throw new UnsupportedClassVersionError(getString(""String_Node_Str"",name,getJavaVersion()));
    }
catch (    AccessControlException ace) {
      if (logger.isLoggable(Level.WARNING)) {
        logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str""+ ace.getMessage(),ace);
      }
      throw new ClassNotFoundException(name,ace);
    }
catch (    RuntimeException rex) {
      throw rex;
    }
catch (    Error err) {
      throw err;
    }
catch (    Throwable t) {
      throw new RuntimeException(getString(""String_Node_Str"",name,t.toString()),t);
    }
    if ((clazz == null) && hasExternalRepositories) {
      try {
        clazz=super.findClass(name);
      }
 catch (      AccessControlException ace) {
        if (logger.isLoggable(Level.WARNING)) {
          logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str""+ ace.getMessage(),ace);
        }
        throw new ClassNotFoundException(name,ace);
      }
catch (      RuntimeException e) {
        if (logger.isLoggable(Level.FINER))         logger.log(Level.FINER,""String_Node_Str"",e);
        throw e;
      }
    }
    if (clazz == null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"");
      throw new ClassNotFoundException(name);
    }
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"");
    throw e;
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + clazz);
  if (logger.isLoggable(Level.FINER) && clazz != null) {
    ClassLoader cl;
    if (securityManager != null) {
      cl=AccessController.doPrivileged(new PrivilegedGetClassLoader(clazz));
    }
 else {
      cl=clazz.getClassLoader();
    }
    logger.finer(""String_Node_Str"" + cl);
  }
  return (clazz);
}","/** 
 * Find the specified class in our local repositories, if possible.  If not found, throw <code>ClassNotFoundException</code>.
 * @param name Name of the class to be loaded
 * @exception ClassNotFoundException if the class was not found
 */
@Override protected Class<?> findClass(String name) throws ClassNotFoundException {
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
  if (securityManager != null && packageDefinitionEnabled) {
    int i=name.lastIndexOf('.');
    if (i >= 0) {
      try {
        if (logger.isLoggable(Level.FINER))         logger.finer(""String_Node_Str"");
        securityManager.checkPackageDefinition(name.substring(0,i));
      }
 catch (      Exception se) {
        if (logger.isLoggable(Level.FINER))         logger.log(Level.FINER,""String_Node_Str"",se);
        throw new ClassNotFoundException(name,se);
      }
    }
  }
  Class<?> clazz=null;
  try {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
    try {
      ResourceEntry entry=findClassInternal(name);
      CodeSource codeSource=new CodeSource(entry.codeBase,entry.certificates);
synchronized (this) {
        if (entry.loadedClass == null) {
          byte[] binaryContent=entry.binaryContent;
          if (!byteCodePreprocessors.isEmpty()) {
            String resourceName=name.replace('.','/') + ""String_Node_Str"";
            for (            BytecodePreprocessor preprocessor : byteCodePreprocessors) {
              binaryContent=preprocessor.preprocess(resourceName,binaryContent);
            }
          }
          clazz=defineClass(name,binaryContent,0,binaryContent.length,codeSource);
          entry.loadedClass=clazz;
          entry.binaryContent=null;
          entry.source=null;
          entry.codeBase=null;
          entry.manifest=null;
          entry.certificates=null;
        }
 else {
          clazz=entry.loadedClass;
        }
      }
    }
 catch (    ClassNotFoundException cnfe) {
      if (!hasExternalRepositories) {
        throw cnfe;
      }
    }
catch (    UnsupportedClassVersionError ucve) {
      throw new UnsupportedClassVersionError(getString(""String_Node_Str"",name,getJavaVersion()));
    }
catch (    AccessControlException ace) {
      if (logger.isLoggable(Level.WARNING)) {
        logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str""+ ace.getMessage(),ace);
      }
      throw new ClassNotFoundException(name,ace);
    }
catch (    RuntimeException rex) {
      throw rex;
    }
catch (    Error err) {
      throw err;
    }
catch (    Throwable t) {
      throw new RuntimeException(getString(""String_Node_Str"",name,t.toString()),t);
    }
    if ((clazz == null) && hasExternalRepositories) {
      try {
        clazz=super.findClass(name);
      }
 catch (      AccessControlException ace) {
        if (logger.isLoggable(Level.WARNING)) {
          logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str""+ ace.getMessage(),ace);
        }
        throw new ClassNotFoundException(name,ace);
      }
catch (      RuntimeException e) {
        if (logger.isLoggable(Level.FINER))         logger.log(Level.FINER,""String_Node_Str"",e);
        throw e;
      }
    }
    if (clazz == null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"");
      throw new ClassNotFoundException(name);
    }
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"");
    throw e;
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + clazz);
  if (logger.isLoggable(Level.FINER)) {
    ClassLoader cl;
    if (securityManager != null) {
      cl=AccessController.doPrivileged(new PrivilegedGetClassLoader(clazz));
    }
 else {
      cl=clazz.getClassLoader();
    }
    logger.finer(""String_Node_Str"" + cl);
  }
  return (clazz);
}"
29677,"/** 
 * This method setups the in/outDir and classpath and invoke JSPCompiler.
 * @param dc - DeploymentContext to get command parameters andsource directory and compile jsp directory.
 * @throws DeploymentException if JSPCompiler is unsuccessful.
 */
void runJSPC(final DeploymentContext dc) throws DeploymentException {
  final WebBundleDescriptor wbd=dc.getModuleMetaData(WebBundleDescriptor.class);
  try {
    final File outDir=dc.getScratchDir(env.kCompileJspDirName);
    final File inDir=dc.getSourceDir();
    com.sun.enterprise.deployment.runtime.web.ClassLoader clBean=wbd.getSunDescriptor().getClassLoader();
    StringBuilder classpath=new StringBuilder(super.getCommonClassPath());
    classpath.append(File.pathSeparatorChar);
    classpath.append(ASClassLoaderUtil.getModuleClassPath(sc.getDefaultServices(),wbd.getApplication().getName(),dc.getCommandParameters(DeployCommandParameters.class).libraries));
    JSPCompiler.compile(inDir,outDir,wbd,classpath.toString(),sc);
  }
 catch (  DeploymentException de) {
    String msg=rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,wbd.getApplication().getName());
    logger.log(Level.SEVERE,msg,de);
    throw de;
  }
}","/** 
 * This method setups the in/outDir and classpath and invoke JSPCompiler.
 * @param dc - DeploymentContext to get command parameters andsource directory and compile jsp directory.
 * @throws DeploymentException if JSPCompiler is unsuccessful.
 */
void runJSPC(final DeploymentContext dc) throws DeploymentException {
  final WebBundleDescriptor wbd=dc.getModuleMetaData(WebBundleDescriptor.class);
  try {
    final File outDir=dc.getScratchDir(env.kCompileJspDirName);
    final File inDir=dc.getSourceDir();
    StringBuilder classpath=new StringBuilder(super.getCommonClassPath());
    classpath.append(File.pathSeparatorChar);
    classpath.append(ASClassLoaderUtil.getModuleClassPath(sc.getDefaultServices(),wbd.getApplication().getName(),dc.getCommandParameters(DeployCommandParameters.class).libraries));
    JSPCompiler.compile(inDir,outDir,wbd,classpath.toString(),sc);
  }
 catch (  DeploymentException de) {
    String msg=rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,wbd.getApplication().getName());
    logger.log(Level.SEVERE,msg,de);
    throw de;
  }
}"
29678,"private BackingStore<String,? extends Storeable> getStoreableBackingStore(){
  ReplicationManagerBase<? extends Storeable> mgr=(ReplicationManagerBase<? extends Storeable>)this.getManager();
  return getStoreableReplicationManager().getBackingStore();
}","private BackingStore<String,? extends Storeable> getStoreableBackingStore(){
  return getStoreableReplicationManager().getBackingStore();
}"
29679,"protected void configureLoaderAttributes(WebappClassLoader cloader,WebXmlParser webXmlParser,File base){
  boolean delegate=webXmlParser.isDelegate();
  cloader.setDelegate(delegate);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + webXmlParser.getBase() + ""String_Node_Str""+ delegate);
  }
  String extraClassPath=webXmlParser.getExtraClassPath();
  if (extraClassPath != null) {
    String[] pathElements=extraClassPath.split(""String_Node_Str"");
    if (pathElements != null) {
      for (      String path : pathElements) {
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        if (logger.isLoggable(Level.FINE)) {
          logger.fine(""String_Node_Str"" + webXmlParser.getBase() + ""String_Node_Str""+ path+ ""String_Node_Str"");
        }
        try {
          URL url=new URL(path);
          cloader.addRepository(path);
        }
 catch (        MalformedURLException mue1) {
          File file=new File(path);
          if (!file.isAbsolute()) {
            file=new File(base.getPath(),path);
          }
          try {
            URL url=file.toURI().toURL();
            cloader.addRepository(url.toString());
          }
 catch (          MalformedURLException mue2) {
            String msg=rb.getString(""String_Node_Str"");
            Object[] params={path};
            msg=MessageFormat.format(msg,params);
            logger.log(Level.SEVERE,msg,mue2);
          }
        }
      }
    }
  }
}","protected void configureLoaderAttributes(WebappClassLoader cloader,WebXmlParser webXmlParser,File base){
  boolean delegate=webXmlParser.isDelegate();
  cloader.setDelegate(delegate);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + base + ""String_Node_Str""+ delegate);
  }
  String extraClassPath=webXmlParser.getExtraClassPath();
  if (extraClassPath != null) {
    String[] pathElements=extraClassPath.split(""String_Node_Str"");
    if (pathElements != null) {
      for (      String path : pathElements) {
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        if (logger.isLoggable(Level.FINE)) {
          logger.fine(""String_Node_Str"" + base + ""String_Node_Str""+ path+ ""String_Node_Str"");
        }
        try {
          URL url=new URL(path);
          cloader.addRepository(path);
        }
 catch (        MalformedURLException mue1) {
          File file=new File(path);
          if (!file.isAbsolute()) {
            file=new File(base.getPath(),path);
          }
          try {
            URL url=file.toURI().toURL();
            cloader.addRepository(url.toString());
          }
 catch (          MalformedURLException mue2) {
            String msg=rb.getString(""String_Node_Str"");
            Object[] params={path};
            msg=MessageFormat.format(msg,params);
            logger.log(Level.SEVERE,msg,mue2);
          }
        }
      }
    }
  }
}"
29680,"/** 
 * Loads any currently active sessions that were previously unloaded to file
 * @exception ClassNotFoundException if a serialized class cannot befound during the reload
 * @exception IOException if a read error occurs
 */
private void doLoadFromFile() throws ClassNotFoundException, IOException {
  if (log.isLoggable(Level.FINE)) {
    log.fine(""String_Node_Str"");
  }
  File file=file();
  if (file == null || !file.exists() || file.length() == 0) {
    return;
  }
  if (log.isLoggable(Level.FINE)) {
    log.fine(sm.getString(""String_Node_Str"",pathname));
  }
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(file.getAbsolutePath());
    readSessions(fis);
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    IOException f) {
    }
    file.delete();
  }
}","/** 
 * Loads any currently active sessions that were previously unloaded to file
 * @exception ClassNotFoundException if a serialized class cannot befound during the reload
 * @exception IOException if a read error occurs
 */
private void doLoadFromFile() throws ClassNotFoundException, IOException {
  if (log.isLoggable(Level.FINE)) {
    log.fine(""String_Node_Str"");
  }
  File file=file();
  if (file == null || !file.exists() || file.length() == 0) {
    return;
  }
  if (log.isLoggable(Level.FINE)) {
    log.fine(sm.getString(""String_Node_Str"",pathname));
  }
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(file.getAbsolutePath());
    readSessions(fis);
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"");
    }
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    IOException f) {
    }
    if (!file.delete() && log.isLoggable(Level.FINE)) {
      log.fine(""String_Node_Str"" + file);
    }
  }
}"
29681,"public void stopServer(){
  if (server == null) {
    Digester digester=createStopDigester();
    digester.setClassLoader(Thread.currentThread().getContextClassLoader());
    File file=configFile();
    try {
      InputSource is=new InputSource(""String_Node_Str"" + file.getAbsolutePath());
      FileInputStream fis=new FileInputStream(file);
      is.setByteStream(fis);
      digester.push(this);
      digester.parse(is);
      fis.close();
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
      System.exit(1);
    }
  }
  try {
    Socket socket=new Socket(""String_Node_Str"",server.getPort());
    OutputStream stream=socket.getOutputStream();
    String shutdown=server.getShutdown();
    for (int i=0; i < shutdown.length(); i++)     stream.write(shutdown.charAt(i));
    stream.flush();
    stream.close();
    socket.close();
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    System.exit(1);
  }
}","public void stopServer(){
  if (server == null) {
    Digester digester=createStopDigester();
    digester.setClassLoader(Thread.currentThread().getContextClassLoader());
    File file=configFile();
    FileInputStream fis=null;
    try {
      InputSource is=new InputSource(""String_Node_Str"" + file.getAbsolutePath());
      fis=new FileInputStream(file);
      is.setByteStream(fis);
      digester.push(this);
      digester.parse(is);
      fis.close();
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
      System.exit(1);
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ioe) {
      }
    }
  }
  try {
    Socket socket=new Socket(""String_Node_Str"",server.getPort());
    OutputStream stream=socket.getOutputStream();
    String shutdown=server.getShutdown();
    for (int i=0; i < shutdown.length(); i++)     stream.write(shutdown.charAt(i));
    stream.flush();
    stream.close();
    socket.close();
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    System.exit(1);
  }
}"
29682,"/** 
 * Register context.
 */
private void registerContext(StandardContext context) throws Exception {
  if (context == null) {
    throw new Exception(""String_Node_Str"" + context);
  }
  ObjectName objectName=context.getJmxName();
  if (objectName == null) {
    return;
  }
  String name=objectName.getKeyProperty(""String_Node_Str"");
  String hostName=null;
  String contextName=null;
  if (name.startsWith(""String_Node_Str"")) {
    name=name.substring(2);
  }
  int slash=name.indexOf(""String_Node_Str"");
  if (slash != -1) {
    hostName=name.substring(0,slash);
    contextName=name.substring(slash);
    contextName=RequestUtil.urlDecode(contextName,""String_Node_Str"");
  }
 else {
    return;
  }
  if (contextName.equals(""String_Node_Str"")) {
    contextName=""String_Node_Str"";
  }
  String msg=rb.getString(""String_Node_Str"");
  msg=MessageFormat.format(msg,contextName);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(msg);
  }
  javax.naming.Context resources=context.findStaticResources();
  String[] welcomeFiles=context.getWelcomeFiles();
  mapper.addContext(hostName,contextName,context,welcomeFiles,resources,context.getAlternateDocBases());
}","/** 
 * Register context.
 */
private void registerContext(StandardContext context) throws Exception {
  ObjectName objectName=context.getJmxName();
  if (objectName == null) {
    return;
  }
  String name=objectName.getKeyProperty(""String_Node_Str"");
  String hostName=null;
  String contextName=null;
  if (name.startsWith(""String_Node_Str"")) {
    name=name.substring(2);
  }
  int slash=name.indexOf(""String_Node_Str"");
  if (slash != -1) {
    hostName=name.substring(0,slash);
    contextName=name.substring(slash);
    contextName=RequestUtil.urlDecode(contextName,""String_Node_Str"");
  }
 else {
    return;
  }
  if (contextName.equals(""String_Node_Str"")) {
    contextName=""String_Node_Str"";
  }
  String msg=rb.getString(""String_Node_Str"");
  msg=MessageFormat.format(msg,contextName);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(msg);
  }
  javax.naming.Context resources=context.findStaticResources();
  String[] welcomeFiles=context.getWelcomeFiles();
  mapper.addContext(hostName,contextName,context,welcomeFiles,resources,context.getAlternateDocBases());
}"
29683,"/** 
 * Register wrapper.
 */
private void registerWrapper(StandardWrapper wrapper) throws Exception {
  if (wrapper == null) {
    throw new Exception(""String_Node_Str"" + wrapper);
  }
  ObjectName objectName=wrapper.getJmxName();
  if (objectName == null) {
    return;
  }
  String wrapperName=objectName.getKeyProperty(""String_Node_Str"");
  String name=objectName.getKeyProperty(""String_Node_Str"");
  String hostName=null;
  String contextName=null;
  if (name.startsWith(""String_Node_Str"")) {
    name=name.substring(2);
  }
  int slash=name.indexOf(""String_Node_Str"");
  if (slash != -1) {
    hostName=name.substring(0,slash);
    contextName=name.substring(slash);
    contextName=RequestUtil.urlDecode(contextName,""String_Node_Str"");
  }
 else {
    return;
  }
  if (contextName.equals(""String_Node_Str"")) {
    contextName=""String_Node_Str"";
  }
  String msg=rb.getString(""String_Node_Str"");
  msg=MessageFormat.format(msg,wrapperName,contextName);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(msg);
  }
  String[] mappings=wrapper.findMappings();
  for (int i=0; i < mappings.length; i++) {
    boolean jspWildCard=(wrapperName.equals(""String_Node_Str"") && mappings[i].endsWith(""String_Node_Str""));
    mapper.addWrapper(hostName,contextName,mappings[i],wrapper,jspWildCard,wrapperName,true);
  }
}","/** 
 * Register wrapper.
 */
private void registerWrapper(StandardWrapper wrapper) throws Exception {
  ObjectName objectName=wrapper.getJmxName();
  if (objectName == null) {
    return;
  }
  String wrapperName=objectName.getKeyProperty(""String_Node_Str"");
  String name=objectName.getKeyProperty(""String_Node_Str"");
  String hostName=null;
  String contextName=null;
  if (name.startsWith(""String_Node_Str"")) {
    name=name.substring(2);
  }
  int slash=name.indexOf(""String_Node_Str"");
  if (slash != -1) {
    hostName=name.substring(0,slash);
    contextName=name.substring(slash);
    contextName=RequestUtil.urlDecode(contextName,""String_Node_Str"");
  }
 else {
    return;
  }
  if (contextName.equals(""String_Node_Str"")) {
    contextName=""String_Node_Str"";
  }
  String msg=rb.getString(""String_Node_Str"");
  msg=MessageFormat.format(msg,wrapperName,contextName);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(msg);
  }
  String[] mappings=wrapper.findMappings();
  for (int i=0; i < mappings.length; i++) {
    boolean jspWildCard=(wrapperName.equals(""String_Node_Str"") && mappings[i].endsWith(""String_Node_Str""));
    mapper.addWrapper(hostName,contextName,mappings[i],wrapper,jspWildCard,wrapperName,true);
  }
}"
29684,"/** 
 * Register host.
 */
public void registerHost(StandardHost host) throws Exception {
  if (host == null) {
    throw new Exception(""String_Node_Str"" + host);
  }
  if (host.getJmxName() == null) {
    return;
  }
  String name=host.getName();
  String[] nlNames=host.getNetworkListenerNames();
  boolean nameMatch=false;
  if (nlNames != null) {
    for (    String nlName : nlNames) {
      if (nlName.equals(this.networkListenerName)) {
        nameMatch=true;
        break;
      }
    }
  }
  if (!nameMatch) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + networkListenerName + ""String_Node_Str""+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    return;
  }
  virtualServerListenerNames.put(host.getJmxName(),nlNames);
  String[] aliases=host.findAliases();
  mapper.addHost(name,aliases,host);
}","/** 
 * Register host.
 */
public void registerHost(StandardHost host) throws Exception {
  if (host.getJmxName() == null) {
    return;
  }
  String name=host.getName();
  String[] nlNames=host.getNetworkListenerNames();
  boolean nameMatch=false;
  if (nlNames != null) {
    for (    String nlName : nlNames) {
      if (nlName.equals(this.networkListenerName)) {
        nameMatch=true;
        break;
      }
    }
  }
  if (!nameMatch) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + networkListenerName + ""String_Node_Str""+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    return;
  }
  virtualServerListenerNames.put(host.getJmxName(),nlNames);
  String[] aliases=host.findAliases();
  mapper.addHost(name,aliases,host);
}"
29685,"public void handleNotification(Notification notification,java.lang.Object handback){
  if (notification.getType().equals(""String_Node_Str"")) {
    ContainerBase container=((ContainerBase)notification.getSource());
    if (container instanceof StandardHost) {
      try {
        registerHost((StandardHost)container);
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),e);
      }
    }
 else     if (container instanceof StandardContext) {
      try {
        registerContext((StandardContext)container);
      }
 catch (      Throwable t) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),t);
      }
    }
 else     if (container instanceof StandardWrapper) {
      try {
        registerWrapper((StandardWrapper)container);
      }
 catch (      Throwable t) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),t);
      }
    }
  }
 else   if (notification.getType().equals(""String_Node_Str"")) {
    ContainerBase container=((ContainerBase)notification.getSource());
    if (container instanceof StandardHost) {
      try {
        unregisterHost(container.getJmxName());
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + container.getObjectName(),e);
      }
    }
 else     if (container instanceof StandardContext) {
      try {
        unregisterContext(container.getJmxName());
      }
 catch (      Throwable t) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),t);
      }
    }
 else     if (container instanceof StandardWrapper) {
      ObjectName objectName=container.getJmxName();
      String j2eeType=objectName.getKeyProperty(""String_Node_Str"");
      if (Boolean.parseBoolean(objectName.getKeyProperty(""String_Node_Str"")) && j2eeType.equals(""String_Node_Str"")) {
        try {
          unregisterOSGiWrapper(objectName);
        }
 catch (        Throwable t) {
          throw new RuntimeException(""String_Node_Str"" + objectName,t);
        }
      }
    }
  }
}","public void handleNotification(Notification notification,java.lang.Object handback){
  if (notification.getType().equals(""String_Node_Str"")) {
    ContainerBase container=((ContainerBase)notification.getSource());
    if (container instanceof StandardHost) {
      try {
        registerHost((StandardHost)container);
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),e);
      }
    }
 else     if (container instanceof StandardContext) {
      try {
        registerContext((StandardContext)container);
      }
 catch (      Throwable t) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),t);
      }
    }
 else     if (container instanceof StandardWrapper) {
      try {
        registerWrapper((StandardWrapper)container);
      }
 catch (      Throwable t) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),t);
      }
    }
  }
 else   if (notification.getType().equals(""String_Node_Str"")) {
    ContainerBase container=((ContainerBase)notification.getSource());
    if (container instanceof StandardHost) {
      try {
        unregisterHost(container.getJmxName());
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + container.getObjectName(),e);
      }
    }
 else     if (container instanceof StandardContext) {
      try {
        unregisterContext(container.getJmxName());
      }
 catch (      Throwable t) {
        throw new RuntimeException(""String_Node_Str"" + container.getObjectName(),t);
      }
    }
 else     if (container instanceof StandardWrapper) {
      ObjectName objectName=container.getJmxName();
      if (Boolean.parseBoolean(objectName.getKeyProperty(""String_Node_Str"")) && objectName.getKeyProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
        try {
          unregisterOSGiWrapper(objectName);
        }
 catch (        Throwable t) {
          throw new RuntimeException(""String_Node_Str"" + objectName,t);
        }
      }
    }
  }
}"
29686,"@Override public void start() throws LifecycleException {
  super.start();
  if (this.domain != null) {
    if (!""String_Node_Str"".equals(getName())) {
      mapper.removeContext(getDefaultHost(),""String_Node_Str"");
      mapper.removeHost(getDefaultHost());
    }
    mapperListener.setDomain(domain);
    mapperListener.setNetworkListenerName(this.getName());
    mapperListener.setDefaultHost(getDefaultHost());
    mapperListener.setInstanceName(getInstanceName());
    mapperListener.init();
    getService().getBroadcaster().addNotificationListener(mapperListener,mapperListener,null);
    Notification notification=new Notification(""String_Node_Str"",this.getObjectName(),0);
    getService().getBroadcaster().sendNotification(notification);
    try {
      ObjectName mapperOname=createObjectName(this.domain,""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str""),ex);
    }
  }
  if (grizzlyMonitor != null) {
    grizzlyMonitor.initConfig();
    grizzlyMonitor.registerMonitoringLevelEvents();
  }
}","@Override public void start() throws LifecycleException {
  super.start();
  if (this.domain != null) {
    if (!""String_Node_Str"".equals(getName())) {
      mapper.removeContext(getDefaultHost(),""String_Node_Str"");
      mapper.removeHost(getDefaultHost());
    }
    mapperListener.setDomain(domain);
    mapperListener.setNetworkListenerName(this.getName());
    mapperListener.setDefaultHost(getDefaultHost());
    mapperListener.setInstanceName(getInstanceName());
    mapperListener.init();
    getService().getBroadcaster().addNotificationListener(mapperListener,mapperListener,null);
    Notification notification=new Notification(""String_Node_Str"",this.getObjectName(),0);
    getService().getBroadcaster().sendNotification(notification);
  }
  if (grizzlyMonitor != null) {
    grizzlyMonitor.initConfig();
    grizzlyMonitor.registerMonitoringLevelEvents();
  }
}"
29687,"@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  ASURLClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
    @Override public ASURLClassLoader run(){
      return new ASURLClassLoader(parent);
    }
  }
);
  try {
    cloader.addURL(context.getSource().getURI().toURL());
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  return cloader;
}","@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  ASURLClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
    @Override public ASURLClassLoader run(){
      return new ASURLClassLoader(parent);
    }
  }
);
  try {
    cloader.addURL(context.getSource().getURI().toURL());
    for (    URL url : getManifestLibraries(context)) {
      cloader.addURL(url);
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  return cloader;
}"
29688,"/** 
 * Starts this web module.
 */
@Override public synchronized void start() throws LifecycleException {
  List<Object> orderingList=null;
  boolean hasOthers=false;
  Map<String,String> webFragmentMap=Collections.emptyMap();
  if (webBundleDescriptor != null) {
    AbsoluteOrderingDescriptor aod=webBundleDescriptor.getAbsoluteOrderingDescriptor();
    if (aod != null) {
      orderingList=aod.getOrdering();
      hasOthers=aod.hasOthers();
    }
    webFragmentMap=webBundleDescriptor.getJarNameToWebFragmentNameMap();
  }
  Iterable<ServletContainerInitializer> allInitializers=ServletContainerInitializerUtil.getServletContainerInitializers(webFragmentMap,orderingList,hasOthers,wmInfo.getAppClassLoader());
  setServletContainerInitializerInterestList(allInitializers);
  DeploymentContext dc=getWebModuleConfig().getDeploymentContext();
  if (dc != null) {
    directoryDeployed=Boolean.valueOf(dc.getAppProps().getProperty(ServerTags.DIRECTORY_DEPLOYED));
  }
  showArchivedRealPathEnabled=getWebBundleDescriptor().isShowArchivedRealPathEnabled();
  super.start();
  configureValves();
  configureCatalinaProperties();
  webModuleStartedEvent();
  if (directoryListing) {
    setDirectoryListing(directoryListing);
  }
  hasStarted=true;
}","/** 
 * Starts this web module.
 */
@Override public synchronized void start() throws LifecycleException {
  List<Object> orderingList=null;
  boolean hasOthers=false;
  Map<String,String> webFragmentMap=Collections.emptyMap();
  if (webBundleDescriptor != null) {
    AbsoluteOrderingDescriptor aod=webBundleDescriptor.getAbsoluteOrderingDescriptor();
    if (aod != null) {
      orderingList=aod.getOrdering();
      hasOthers=aod.hasOthers();
    }
    webFragmentMap=webBundleDescriptor.getJarNameToWebFragmentNameMap();
  }
  Iterable<ServletContainerInitializer> allInitializers=ServletContainerInitializerUtil.getServletContainerInitializers(webFragmentMap,orderingList,hasOthers,wmInfo.getAppClassLoader());
  setServletContainerInitializerInterestList(allInitializers);
  DeploymentContext dc=getWebModuleConfig().getDeploymentContext();
  if (dc != null) {
    directoryDeployed=Boolean.valueOf(dc.getAppProps().getProperty(ServerTags.DIRECTORY_DEPLOYED));
  }
  if (webBundleDescriptor != null) {
    showArchivedRealPathEnabled=webBundleDescriptor.isShowArchivedRealPathEnabled();
  }
  super.start();
  configureValves();
  configureCatalinaProperties();
  webModuleStartedEvent();
  if (directoryListing) {
    setDirectoryListing(directoryListing);
  }
  hasStarted=true;
}"
29689,"/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException if there ino <code>PasswordCredential</code> objectsatisfying this request
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  if (dsObjBuilder == null) {
    dsObjBuilder=new DataSourceObjectBuilder(spec);
  }
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  try {
    Class.forName(spec.getDetail(DataSourceSpec.CLASSNAME));
  }
 catch (  ClassNotFoundException cnfe) {
    _logger.log(Level.SEVERE,""String_Node_Str"",cnfe);
    throw new ResourceException(""String_Node_Str"" + spec.getDetail(DataSourceSpec.CLASSNAME));
  }
  java.sql.Connection dsConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  Properties driverProps=new Properties();
  Hashtable properties=dsObjBuilder.parseDriverProperties(spec,false);
  Set<Map.Entry<String,Vector>> entries=(Set<Map.Entry<String,Vector>>)properties.entrySet();
  for (  Map.Entry<String,Vector> entry : entries) {
    String value=new String();
    String key=(String)entry.getKey();
    Vector values=(Vector)entry.getValue();
    if (!values.isEmpty() && values.size() == 1) {
      value=(String)values.firstElement();
    }
 else     if (values.size() > 1) {
      logFine(""String_Node_Str"" + key);
    }
    String prop=getParsedKey(key);
    driverProps.put(prop,value);
    if (prop.equalsIgnoreCase(""String_Node_Str"")) {
      if (spec.getDetail(DataSourceSpec.URL) == null) {
        setConnectionURL(value);
      }
    }
  }
  try {
    if (cxRequestInfo != null) {
      driverProps.setProperty(""String_Node_Str"",pc.getUserName());
      driverProps.setProperty(""String_Node_Str"",new String(pc.getPassword()));
    }
 else {
      String user=spec.getDetail(DataSourceSpec.USERNAME);
      String password=spec.getDetail(DataSourceSpec.PASSWORD);
      if (user != null) {
        driverProps.setProperty(""String_Node_Str"",user);
      }
      if (password != null) {
        driverProps.setProperty(""String_Node_Str"",password);
      }
    }
    dsConn=DriverManager.getConnection(spec.getDetail(DataSourceSpec.URL),driverProps);
  }
 catch (  java.sql.SQLException sqle) {
    _logger.log(Level.SEVERE,""String_Node_Str"",sqle);
    throw new javax.resource.spi.ResourceAllocationException(""String_Node_Str"" + sqle.getMessage());
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}","/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException if there ino <code>PasswordCredential</code> objectsatisfying this request
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  if (dsObjBuilder == null) {
    dsObjBuilder=new DataSourceObjectBuilder(spec);
  }
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  try {
    Class.forName(spec.getDetail(DataSourceSpec.CLASSNAME));
  }
 catch (  ClassNotFoundException cnfe) {
    _logger.log(Level.SEVERE,""String_Node_Str"",cnfe);
    throw new ResourceException(""String_Node_Str"" + spec.getDetail(DataSourceSpec.CLASSNAME));
  }
  java.sql.Connection dsConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  Properties driverProps=new Properties();
  Hashtable properties=dsObjBuilder.parseDriverProperties(spec,false);
  Set<Map.Entry<String,Vector>> entries=(Set<Map.Entry<String,Vector>>)properties.entrySet();
  for (  Map.Entry<String,Vector> entry : entries) {
    String value=""String_Node_Str"";
    String key=(String)entry.getKey();
    Vector values=(Vector)entry.getValue();
    if (!values.isEmpty() && values.size() == 1) {
      value=(String)values.firstElement();
    }
 else     if (values.size() > 1) {
      logFine(""String_Node_Str"" + key);
    }
    String prop=getParsedKey(key);
    driverProps.put(prop,value);
    if (prop.equalsIgnoreCase(""String_Node_Str"")) {
      if (spec.getDetail(DataSourceSpec.URL) == null) {
        setConnectionURL(value);
      }
    }
  }
  try {
    if (cxRequestInfo != null) {
      driverProps.setProperty(""String_Node_Str"",pc.getUserName());
      driverProps.setProperty(""String_Node_Str"",new String(pc.getPassword()));
    }
 else {
      String user=spec.getDetail(DataSourceSpec.USERNAME);
      String password=spec.getDetail(DataSourceSpec.PASSWORD);
      if (user != null) {
        driverProps.setProperty(""String_Node_Str"",user);
      }
      if (password != null) {
        driverProps.setProperty(""String_Node_Str"",password);
      }
    }
    dsConn=DriverManager.getConnection(spec.getDetail(DataSourceSpec.URL),driverProps);
  }
 catch (  java.sql.SQLException sqle) {
    _logger.log(Level.SEVERE,""String_Node_Str"",sqle);
    throw new javax.resource.spi.ResourceAllocationException(""String_Node_Str"" + sqle.getMessage());
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}"
29690,"/** 
 * @return the descriptor instance to associate with this XMLNode
 */
public Object getDescriptor(){
  return descriptor;
}","/** 
 * @return the descriptor instance to associate with this XMLNode
 */
public EjbReference getDescriptor(){
  return descriptor;
}"
29691,"private static void initMapping(){
  descriptorClasses=new HashMap();
  register(new XMLElement(RuntimeTagNames.PROPERTY),WebProperty.class);
  register(new XMLElement(RuntimeTagNames.COOKIE_PROPERTIES),CookieProperties.class);
  register(new XMLElement(RuntimeTagNames.LOCALE_CHARSET_MAP),LocaleCharsetMap.class);
  register(new XMLElement(RuntimeTagNames.LOCALE_CHARSET_INFO),LocaleCharsetInfo.class);
  register(new XMLElement(RuntimeTagNames.MANAGER_PROPERTIES),ManagerProperties.class);
  register(new XMLElement(RuntimeTagNames.SERVLET),Servlet.class);
  register(new XMLElement(RuntimeTagNames.SESSION_CONFIG),SessionConfig.class);
  register(new XMLElement(RuntimeTagNames.SESSION_MANAGER),SessionManager.class);
  register(new XMLElement(RuntimeTagNames.JSP_CONFIG),JspConfig.class);
  register(new XMLElement(RuntimeTagNames.CACHE_MAPPING),CacheMapping.class);
  register(new XMLElement(RuntimeTagNames.CACHE_HELPER),CacheHelper.class);
  register(new XMLElement(RuntimeTagNames.CACHE),Cache.class);
  register(new XMLElement(RuntimeTagNames.CLASS_LOADER),ClassLoader.class);
  register(new XMLElement(RuntimeTagNames.STORE_PROPERTIES),StoreProperties.class);
  register(new XMLElement(RuntimeTagNames.SESSION_PROPERTIES),SessionProperties.class);
  register(new XMLElement(RuntimeTagNames.DEFAULT_HELPER),DefaultHelper.class);
  register(new XMLElement(RuntimeTagNames.EJB_REF),EjbRef.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_REF),ResourceRef.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_ENV_REF),ResourceEnvRef.class);
  register(new XMLElement(RuntimeTagNames.DEFAULT_RESOURCE_PRINCIPAL),DefaultResourcePrincipal.class);
  register(new XMLElement(RuntimeTagNames.CONSTRAINT_FIELD),ConstraintField.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_DESCRIPTION),ResourceRef.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_ENV_DESCRIPTION),ResourceEnvRef.class);
  register(new XMLElement(RuntimeTagNames.EJB_REFERENCE_DESCRIPTION),EjbRef.class);
  register(new XMLElement(RuntimeTagNames.PRINCIPAL),Principal.class);
  register(new XMLElement(RuntimeTagNames.BACKEND_PRINCIPAL),Principal.class);
  register(new XMLElement(RuntimeTagNames.MAP_ELEMENT),MapElement.class);
  register(new XMLElement(RuntimeTagNames.ROLE_MAP),RoleMap.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_ADAPTER),ResourceAdapter.class);
}","private static void initMapping(){
  descriptorClasses=new HashMap();
  register(new XMLElement(RuntimeTagNames.PROPERTY),WebProperty.class);
  register(new XMLElement(RuntimeTagNames.COOKIE_PROPERTIES),CookieProperties.class);
  register(new XMLElement(RuntimeTagNames.LOCALE_CHARSET_MAP),LocaleCharsetMap.class);
  register(new XMLElement(RuntimeTagNames.LOCALE_CHARSET_INFO),LocaleCharsetInfo.class);
  register(new XMLElement(RuntimeTagNames.MANAGER_PROPERTIES),ManagerProperties.class);
  register(new XMLElement(RuntimeTagNames.SERVLET),Servlet.class);
  register(new XMLElement(RuntimeTagNames.SESSION_CONFIG),SessionConfig.class);
  register(new XMLElement(RuntimeTagNames.SESSION_MANAGER),SessionManager.class);
  register(new XMLElement(RuntimeTagNames.JSP_CONFIG),JspConfig.class);
  register(new XMLElement(RuntimeTagNames.CACHE_MAPPING),CacheMapping.class);
  register(new XMLElement(RuntimeTagNames.CACHE_HELPER),CacheHelper.class);
  register(new XMLElement(RuntimeTagNames.CACHE),Cache.class);
  register(new XMLElement(RuntimeTagNames.CLASS_LOADER),ClassLoader.class);
  register(new XMLElement(RuntimeTagNames.STORE_PROPERTIES),StoreProperties.class);
  register(new XMLElement(RuntimeTagNames.SESSION_PROPERTIES),SessionProperties.class);
  register(new XMLElement(RuntimeTagNames.DEFAULT_HELPER),DefaultHelper.class);
  register(new XMLElement(RuntimeTagNames.EJB_REF),EjbReference.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_REF),ResourceReferenceDescriptor.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_ENV_REF),ResourceEnvReferenceDescriptor.class);
  register(new XMLElement(RuntimeTagNames.DEFAULT_RESOURCE_PRINCIPAL),DefaultResourcePrincipal.class);
  register(new XMLElement(RuntimeTagNames.CONSTRAINT_FIELD),ConstraintField.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_DESCRIPTION),ResourceReferenceDescriptor.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_ENV_DESCRIPTION),ResourceEnvReferenceDescriptor.class);
  register(new XMLElement(RuntimeTagNames.EJB_REFERENCE_DESCRIPTION),EjbReference.class);
  register(new XMLElement(RuntimeTagNames.PRINCIPAL),Principal.class);
  register(new XMLElement(RuntimeTagNames.BACKEND_PRINCIPAL),Principal.class);
  register(new XMLElement(RuntimeTagNames.MAP_ELEMENT),MapElement.class);
  register(new XMLElement(RuntimeTagNames.ROLE_MAP),RoleMap.class);
  register(new XMLElement(RuntimeTagNames.RESOURCE_ADAPTER),ResourceAdapter.class);
}"
29692,"private void checkAgainstBeanConstraints(AdminCommand component,String cname){
  if (beanValidator == null) {
    ClassLoader cl=System.getSecurityManager() == null ? Thread.currentThread().getContextClassLoader() : AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
      @Override public ClassLoader run(){
        return Thread.currentThread().getContextClassLoader();
      }
    }
);
    try {
      Thread.currentThread().setContextClassLoader(null);
      ValidatorFactory validatorFactory=Validation.buildDefaultValidatorFactory();
      ValidatorContext validatorContext=validatorFactory.usingContext();
      validatorContext.messageInterpolator(new MessageInterpolatorImpl());
      beanValidator=validatorContext.getValidator();
    }
  finally {
      Thread.currentThread().setContextClassLoader(cl);
    }
  }
  Set<ConstraintViolation<AdminCommand>> constraintViolations=beanValidator.validate(component);
  if (constraintViolations == null || constraintViolations.isEmpty())   return;
  StringBuilder msg=new StringBuilder(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cname));
  boolean addc=false;
  String violationMsg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
  for (  ConstraintViolation cv : constraintViolations) {
    if (addc)     msg.append(""String_Node_Str"");
    msg.append(MessageFormat.format(violationMsg,cv.getMessage(),cv.getPropertyPath()));
    addc=true;
  }
  throw new UnacceptableValueException(msg.toString());
}","private void checkAgainstBeanConstraints(AdminCommand component,String cname){
  initBeanValidator();
  Set<ConstraintViolation<AdminCommand>> constraintViolations=beanValidator.validate(component);
  if (constraintViolations == null || constraintViolations.isEmpty()) {
    return;
  }
  StringBuilder msg=new StringBuilder(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cname));
  boolean addc=false;
  String violationMsg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
  for (  ConstraintViolation cv : constraintViolations) {
    if (addc) {
      msg.append(""String_Node_Str"");
    }
    msg.append(MessageFormat.format(violationMsg,cv.getMessage(),cv.getPropertyPath()));
    addc=true;
  }
  throw new UnacceptableValueException(msg.toString());
}"
29693,"public NameCommandClassPair(String name,Class<? extends AdminCommand> clazz){
  this.name=name;
  this.clazz=clazz;
  hash=79 * hash + (this.name != null ? this.name.hashCode() : 0);
  hash=79 * hash + (this.clazz != null ? this.clazz.hashCode() : 0);
}","public NameCommandClassPair(String name,Class<? extends AdminCommand> clazz){
  this.name=name;
  this.clazz=clazz;
  hash=3;
  hash=67 * hash + (this.name != null ? this.name.hashCode() : 0);
  hash=67 * hash + (this.clazz != null ? this.clazz.hashCode() : 0);
}"
29694,"@Override public void execute(AdminCommand command){
  CommandRunnerImpl.this.doCommand(this,command,subject);
  ActionReport r=report;
}","@Override public void execute(AdminCommand command){
  CommandRunnerImpl.this.doCommand(this,command,subject);
}"
29695,"/** 
 * @return a sub archive giving the name 
 */
public ReadableArchive getSubArchive(String name) throws java.io.IOException {
  if (jarFile == null) {
    return null;
  }
  DeploymentPlanArchive dpArchive=new DeploymentPlanArchive();
  dpArchive.jarFile=new JarFile(new File(uri));
  try {
    dpArchive.uri=new URI(""String_Node_Str"",uri.getSchemeSpecificPart() + File.separator + name,null);
  }
 catch (  URISyntaxException e) {
  }
  dpArchive.subArchiveUri=name;
  dpArchive.elements=elements;
  return dpArchive;
}","/** 
 * @return a sub archive giving the name 
 */
public ReadableArchive getSubArchive(String name) throws java.io.IOException {
  if (jarFile == null) {
    return null;
  }
  DeploymentPlanArchive dpArchive=new DeploymentPlanArchive();
  dpArchive.jarFile=new JarFile(new File(uri));
  try {
    if (uri != null) {
      dpArchive.uri=new URI(""String_Node_Str"",uri.getSchemeSpecificPart() + File.separator + name,null);
    }
  }
 catch (  URISyntaxException e) {
  }
  dpArchive.subArchiveUri=name;
  dpArchive.elements=elements;
  return dpArchive;
}"
29696,"public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){
  this.className=name;
}","public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){
}"
29697,"/** 
 * copy all contents of a jar file to a new jar file except for all the deployment descriptors files
 * @param in  jar file
 * @param out jar file
 * @param ignoreList vector of entry name to not copy from to source jar file
 */
protected void copyJarElements(ReadableArchive in,WritableArchive out,Vector ignoreList) throws IOException {
  Enumeration entries=in.entries();
  if (entries != null) {
    for (; entries.hasMoreElements(); ) {
      String anEntry=(String)entries.nextElement();
      if (ignoreList == null || !ignoreList.contains(anEntry)) {
        InputStream is=in.getEntry(anEntry);
        OutputStream os=out.putNextEntry(anEntry);
        ArchivistUtils.copyWithoutClose(is,os);
        is.close();
        out.closeEntry();
      }
    }
  }
}","/** 
 * copy all contents of a jar file to a new jar file except for all the deployment descriptors files
 * @param in  jar file
 * @param out jar file
 * @param ignoreList vector of entry name to not copy from to source jar file
 */
protected void copyJarElements(ReadableArchive in,WritableArchive out,Vector ignoreList) throws IOException {
  Enumeration entries=in.entries();
  if (entries != null) {
    for (; entries.hasMoreElements(); ) {
      String anEntry=(String)entries.nextElement();
      if (ignoreList == null || !ignoreList.contains(anEntry)) {
        InputStream is=in.getEntry(anEntry);
        if (is != null) {
          OutputStream os=out.putNextEntry(anEntry);
          ArchivistUtils.copyWithoutClose(is,os);
          is.close();
        }
        out.closeEntry();
      }
    }
  }
}"
29698,"/** 
 * write the necessary attributes for the root node of this DDs document
 */
protected void addBundleNodeAttributes(Element bundleNode,RootDeploymentDescriptor descriptor){
  String schemaLocation;
  if (descriptor instanceof ConnectorDescriptor) {
    bundleNode.setAttributeNS(""String_Node_Str"",""String_Node_Str"",TagNames.J2EE_NAMESPACE);
    schemaLocation=TagNames.J2EE_NAMESPACE + ""String_Node_Str"" + getSchemaURL();
  }
 else {
    bundleNode.setAttributeNS(""String_Node_Str"",""String_Node_Str"",TagNames.JAVAEE_NAMESPACE);
    schemaLocation=TagNames.JAVAEE_NAMESPACE + ""String_Node_Str"" + getSchemaURL();
  }
  bundleNode.setAttributeNS(""String_Node_Str"",""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE);
  addNamespaceDeclaration(bundleNode,descriptor);
  String clientSchemaLocation=descriptor.getSchemaLocation();
  if (clientSchemaLocation != null) {
    schemaLocation=schemaLocation + ""String_Node_Str"" + clientSchemaLocation;
  }
  bundleNode.setAttributeNS(W3C_XML_SCHEMA_INSTANCE,SCHEMA_LOCATION_TAG,schemaLocation);
  bundleNode.setAttribute(TagNames.VERSION,getSpecVersion());
  if (descriptor instanceof BundleDescriptor && !(descriptor instanceof Application)) {
    BundleDescriptor bundleDesc=(BundleDescriptor)descriptor;
    if (!bundleDesc.isDDWithNoAnnotationAllowed() && !(bundleDesc.getManagedBeans().size() > 0)) {
      bundleNode.setAttribute(TagNames.METADATA_COMPLETE,""String_Node_Str"");
    }
  }
}","/** 
 * write the necessary attributes for the root node of this DDs document
 */
protected void addBundleNodeAttributes(Element bundleNode,RootDeploymentDescriptor descriptor){
  String schemaLocation;
  bundleNode.setAttributeNS(""String_Node_Str"",""String_Node_Str"",TagNames.JAVAEE_NAMESPACE);
  schemaLocation=TagNames.JAVAEE_NAMESPACE + ""String_Node_Str"" + getSchemaURL();
  bundleNode.setAttributeNS(""String_Node_Str"",""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE);
  addNamespaceDeclaration(bundleNode,descriptor);
  String clientSchemaLocation=descriptor.getSchemaLocation();
  if (clientSchemaLocation != null) {
    schemaLocation=schemaLocation + ""String_Node_Str"" + clientSchemaLocation;
  }
  bundleNode.setAttributeNS(W3C_XML_SCHEMA_INSTANCE,SCHEMA_LOCATION_TAG,schemaLocation);
  bundleNode.setAttribute(TagNames.VERSION,getSpecVersion());
  if (descriptor instanceof BundleDescriptor && !(descriptor instanceof Application)) {
    BundleDescriptor bundleDesc=(BundleDescriptor)descriptor;
    if (!bundleDesc.isDDWithNoAnnotationAllowed() && !(bundleDesc.getManagedBeans().size() > 0)) {
      bundleNode.setAttribute(TagNames.METADATA_COMPLETE,""String_Node_Str"");
    }
  }
}"
29699,"/** 
 * @return the schema URL
 */
protected String getSchemaURL(){
  return TagNames.J2EE_NAMESPACE + ""String_Node_Str"" + getSystemID();
}","/** 
 * @return the schema URL
 */
protected String getSchemaURL(){
  return TagNames.JAVAEE_NAMESPACE + ""String_Node_Str"" + getSystemID();
}"
29700,"private <T extends Sniffer>List<T> getApplicableSniffers(List<URI> uris,Types types,Collection<T> sniffers,boolean checkPath){
  if (sniffers == null || sniffers.isEmpty()) {
    return Collections.emptyList();
  }
  List<T> result=new ArrayList<T>();
  for (  T sniffer : sniffers) {
    Class<? extends Annotation>[] annotations=sniffer.getAnnotationTypes();
    if (annotations == null)     continue;
    for (    Class<? extends Annotation> annotationType : annotations) {
      Type type=types.getBy(annotationType.getName());
      if (type instanceof AnnotationType) {
        Collection<AnnotatedElement> elements=((AnnotationType)type).allAnnotatedTypes();
        for (        AnnotatedElement element : elements) {
          if (checkPath) {
            Type t=(element instanceof Member ? ((Member)element).getDeclaringType() : (Type)element);
            if (t.wasDefinedIn(uris)) {
              result.add(sniffer);
              break;
            }
          }
 else {
            result.add(sniffer);
            break;
          }
        }
      }
    }
  }
  return result;
}","private <T extends Sniffer>List<T> getApplicableSniffers(List<URI> uris,Types types,Collection<T> sniffers,boolean checkPath){
  if (sniffers == null || sniffers.isEmpty()) {
    return Collections.emptyList();
  }
  List<T> result=new ArrayList<T>();
  for (  T sniffer : sniffers) {
    Class<? extends Annotation>[] annotations=sniffer.getAnnotationTypes();
    if (annotations == null)     continue;
    for (    Class<? extends Annotation> annotationType : annotations) {
      if (types != null) {
        Type type=types.getBy(annotationType.getName());
        if (type instanceof AnnotationType) {
          Collection<AnnotatedElement> elements=((AnnotationType)type).allAnnotatedTypes();
          for (          AnnotatedElement element : elements) {
            if (checkPath) {
              Type t=(element instanceof Member ? ((Member)element).getDeclaringType() : (Type)element);
              if (t.wasDefinedIn(uris)) {
                result.add(sniffer);
                break;
              }
            }
 else {
              result.add(sniffer);
              break;
            }
          }
        }
      }
    }
  }
  return result;
}"
29701,"public Object create(Context ctx) throws NamingException {
  Object result=null;
  if (ejbRefMgr == null) {
synchronized (this) {
      if (ejbRefMgr == null) {
        ejbRefMgr=habitat.getByContract(EjbNamingReferenceManager.class);
        cacheable=new Boolean(ejbRefMgr.isEjbReferenceCacheable(ejbRef));
      }
    }
  }
  if (ejbRefMgr != null) {
    if ((cacheable != null) && (cacheable.booleanValue() == true)) {
      if (cachedResult != null) {
        result=cachedResult;
      }
 else {
        result=cachedResult=ejbRefMgr.resolveEjbReference(ejbRef,ctx);
      }
    }
 else {
      result=ejbRefMgr.resolveEjbReference(ejbRef,ctx);
    }
  }
  if (result == null) {
    throw new NameNotFoundException(""String_Node_Str"" + ejbRef.getName() + ""String_Node_Str""+ ejbRef);
  }
  return result;
}","public Object create(Context ctx) throws NamingException {
  Object result=null;
  if (ejbRefMgr == null) {
synchronized (this) {
      if (ejbRefMgr == null) {
        ejbRefMgr=habitat.getByContract(EjbNamingReferenceManager.class);
        cacheable=ejbRefMgr.isEjbReferenceCacheable(ejbRef);
      }
    }
  }
  if (ejbRefMgr != null) {
    if ((cacheable != null) && (cacheable.booleanValue() == true)) {
      if (cachedResult != null) {
        result=cachedResult;
      }
 else {
        result=cachedResult=ejbRefMgr.resolveEjbReference(ejbRef,ctx);
      }
    }
 else {
      result=ejbRefMgr.resolveEjbReference(ejbRef,ctx);
    }
  }
  if (result == null) {
    throw new NameNotFoundException(""String_Node_Str"" + ejbRef.getName() + ""String_Node_Str""+ ejbRef);
  }
  return result;
}"
29702,"public boolean touchStore(){
  if (cookieStoreFile.lastModified() + CACHE_WRITE_DELTA > System.currentTimeMillis()) {
    return false;
  }
  cookieStoreFile.setLastModified(System.currentTimeMillis());
  return true;
}","public boolean touchStore(){
  if (cookieStoreFile.lastModified() + CACHE_WRITE_DELTA > System.currentTimeMillis()) {
    return false;
  }
  boolean ignore=cookieStoreFile.setLastModified(System.currentTimeMillis());
  return true;
}"
29703,"private void addCookieHeaders(final URLConnection urlConnection){
  long modifiedTime=sessionCache.lastModified();
  if (modifiedTime == 0) {
    return;
  }
  ((CookieManager)CookieHandler.getDefault()).getCookieStore().removeAll();
  cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
  try {
    ((ClientCookieStore)cookieManager.getCookieStore()).load();
  }
 catch (  IOException e) {
    logger.log(Level.FINE,""String_Node_Str"",e.toString());
    return;
  }
  if (isSessionCookieExpired(cookieManager,modifiedTime)) {
    logger.fine(""String_Node_Str"");
    if (!sessionCache.delete()) {
      logger.fine(""String_Node_Str"");
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean hasCookies=false;
  for (  HttpCookie cookie : cookieManager.getCookieStore().getCookies()) {
    hasCookies=true;
    sb.append(""String_Node_Str"").append(cookie.toString());
  }
  if (hasCookies) {
    urlConnection.setRequestProperty(COOKIE_HEADER,sb.toString());
  }
}","private void addCookieHeaders(final URLConnection urlConnection){
  long modifiedTime=sessionCache.lastModified();
  if (modifiedTime == 0) {
    return;
  }
  ((CookieManager)CookieHandler.getDefault()).getCookieStore().removeAll();
  cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
  try {
    ((ClientCookieStore)cookieManager.getCookieStore()).load();
  }
 catch (  IOException e) {
    logger.log(Level.FINE,""String_Node_Str"",e.toString());
    return;
  }
  if (isSessionCookieExpired(cookieManager,modifiedTime)) {
    logger.fine(""String_Node_Str"");
    if (!sessionCache.delete()) {
      logger.fine(""String_Node_Str"");
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean hasCookies=false;
  for (  HttpCookie cookie : cookieManager.getCookieStore().getCookies()) {
    hasCookies=true;
    sb.append(""String_Node_Str"").append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue());
  }
  if (hasCookies) {
    urlConnection.setRequestProperty(COOKIE_HEADER,sb.toString());
  }
}"
29704,"/** 
 * Register wrapper.
 */
private void registerWrapper(StandardWrapper wrapper) throws Exception {
  ObjectName objectName=wrapper.getJmxName();
  if (wrapper == null) {
    throw new Exception(""String_Node_Str"" + objectName);
  }
  String wrapperName=objectName.getKeyProperty(""String_Node_Str"");
  String name=objectName.getKeyProperty(""String_Node_Str"");
  String hostName=null;
  String contextName=null;
  if (name.startsWith(""String_Node_Str"")) {
    name=name.substring(2);
  }
  int slash=name.indexOf(""String_Node_Str"");
  if (slash != -1) {
    hostName=name.substring(0,slash);
    contextName=name.substring(slash);
    contextName=RequestUtil.urlDecode(contextName,""String_Node_Str"");
  }
 else {
    return;
  }
  if (contextName.equals(""String_Node_Str"")) {
    contextName=""String_Node_Str"";
  }
  String msg=rb.getString(""String_Node_Str"");
  msg=MessageFormat.format(msg,wrapperName,contextName);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(msg);
  }
  String[] mappings=wrapper.findMappings();
  for (int i=0; i < mappings.length; i++) {
    boolean jspWildCard=(wrapperName.equals(""String_Node_Str"") && mappings[i].endsWith(""String_Node_Str""));
    mapper.addWrapper(hostName,contextName,mappings[i],wrapper,jspWildCard,wrapperName,true);
  }
}","/** 
 * Register wrapper.
 */
private void registerWrapper(StandardWrapper wrapper) throws Exception {
  if (wrapper == null) {
    throw new Exception(""String_Node_Str"" + wrapper);
  }
  ObjectName objectName=wrapper.getJmxName();
  if (objectName == null) {
    return;
  }
  String wrapperName=objectName.getKeyProperty(""String_Node_Str"");
  String name=objectName.getKeyProperty(""String_Node_Str"");
  String hostName=null;
  String contextName=null;
  if (name.startsWith(""String_Node_Str"")) {
    name=name.substring(2);
  }
  int slash=name.indexOf(""String_Node_Str"");
  if (slash != -1) {
    hostName=name.substring(0,slash);
    contextName=name.substring(slash);
    contextName=RequestUtil.urlDecode(contextName,""String_Node_Str"");
  }
 else {
    return;
  }
  if (contextName.equals(""String_Node_Str"")) {
    contextName=""String_Node_Str"";
  }
  String msg=rb.getString(""String_Node_Str"");
  msg=MessageFormat.format(msg,wrapperName,contextName);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(msg);
  }
  String[] mappings=wrapper.findMappings();
  for (int i=0; i < mappings.length; i++) {
    boolean jspWildCard=(wrapperName.equals(""String_Node_Str"") && mappings[i].endsWith(""String_Node_Str""));
    mapper.addWrapper(hostName,contextName,mappings[i],wrapper,jspWildCard,wrapperName,true);
  }
}"
29705,"protected static void setDefaultValue(MethodVisitor method,String className,String fieldName,Class<?> fieldClass,String defaultValue){
  final String type=getInternalTypeString(fieldClass);
  Object value=defaultValue;
  if (fieldClass.isPrimitive()) {
switch (Primitive.getPrimitive(type)) {
case SHORT:
      value=Short.valueOf(defaultValue);
    break;
case LONG:
  value=Long.valueOf(defaultValue);
break;
case INT:
value=Integer.valueOf(defaultValue);
break;
case FLOAT:
value=Float.valueOf(defaultValue);
break;
case DOUBLE:
value=Double.valueOf(defaultValue);
break;
case BYTE:
value=Byte.valueOf(defaultValue);
break;
case BOOLEAN:
value=Boolean.valueOf(defaultValue);
break;
}
method.visitVarInsn(ALOAD,0);
method.visitLdcInsn(value);
method.visitFieldInsn(PUTFIELD,getInternalName(className),fieldName,type);
}
 else {
if (!fieldClass.equals(String.class)) {
method.visitVarInsn(ALOAD,0);
final String internalName=getInternalName(fieldClass.getName());
method.visitTypeInsn(NEW,internalName);
method.visitInsn(DUP);
method.visitLdcInsn(defaultValue);
method.visitMethodInsn(INVOKESPECIAL,internalName,""String_Node_Str"",""String_Node_Str"");
method.visitFieldInsn(PUTFIELD,getInternalName(className),fieldName,type);
}
 else {
method.visitVarInsn(ALOAD,0);
method.visitLdcInsn(value);
method.visitFieldInsn(PUTFIELD,getInternalName(className),fieldName,type);
}
}
}","protected static void setDefaultValue(MethodVisitor method,String className,String fieldName,Class<?> fieldClass,String defaultValue){
  final String type=getInternalTypeString(fieldClass);
  Object value=defaultValue;
  fieldName=getPropertyName(fieldName);
  if (fieldClass.isPrimitive()) {
switch (Primitive.getPrimitive(type)) {
case SHORT:
      value=Short.valueOf(defaultValue);
    break;
case LONG:
  value=Long.valueOf(defaultValue);
break;
case INT:
value=Integer.valueOf(defaultValue);
break;
case FLOAT:
value=Float.valueOf(defaultValue);
break;
case DOUBLE:
value=Double.valueOf(defaultValue);
break;
case BYTE:
value=Byte.valueOf(defaultValue);
break;
case BOOLEAN:
value=Boolean.valueOf(defaultValue);
break;
}
method.visitVarInsn(ALOAD,0);
method.visitLdcInsn(value);
method.visitFieldInsn(PUTFIELD,getInternalName(className),fieldName,type);
}
 else {
if (!fieldClass.equals(String.class)) {
method.visitVarInsn(ALOAD,0);
final String internalName=getInternalName(fieldClass.getName());
method.visitTypeInsn(NEW,internalName);
method.visitInsn(DUP);
method.visitLdcInsn(defaultValue);
method.visitMethodInsn(INVOKESPECIAL,internalName,""String_Node_Str"",""String_Node_Str"");
method.visitFieldInsn(PUTFIELD,getInternalName(className),fieldName,type);
}
 else {
method.visitVarInsn(ALOAD,0);
method.visitLdcInsn(value);
method.visitFieldInsn(PUTFIELD,getInternalName(className),fieldName,type);
}
}
}"
29706,"/** 
 * Create getters and setters for the given field
 */
protected static void createGettersAndSetters(ClassWriter cw,Class c,String className,String name,Class<?> type){
  String internalType=getInternalTypeString(type);
  className=getInternalName(className);
  MethodVisitor getter=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"" + name,""String_Node_Str"" + internalType,null,null);
  getter.visitCode();
  getter.visitVarInsn(ALOAD,0);
  getter.visitFieldInsn(GETFIELD,className,name,internalType);
  getter.visitInsn(type.isPrimitive() ? Primitive.getPrimitive(internalType).getReturnOpcode() : ARETURN);
  getter.visitMaxs(0,0);
  getter.visitEnd();
  MethodVisitor setter=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"" + name,""String_Node_Str"" + internalType + ""String_Node_Str"",null,null);
  setter.visitCode();
  setter.visitVarInsn(ALOAD,0);
  setter.visitVarInsn(type.isPrimitive() ? Primitive.getPrimitive(internalType).getSetOpCode() : ALOAD,1);
  setter.visitFieldInsn(PUTFIELD,className,name,internalType);
  setter.visitInsn(RETURN);
  setter.visitMaxs(0,0);
  setter.visitEnd();
}","/** 
 * Create getters and setters for the given field
 */
protected static void createGettersAndSetters(ClassWriter cw,Class c,String className,String name,Class<?> type){
  String internalType=getInternalTypeString(type);
  className=getInternalName(className);
  MethodVisitor getter=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"" + name,""String_Node_Str"" + internalType,null,null);
  getter.visitCode();
  getter.visitVarInsn(ALOAD,0);
  getter.visitFieldInsn(GETFIELD,className,getPropertyName(name),internalType);
  getter.visitInsn(type.isPrimitive() ? Primitive.getPrimitive(internalType).getReturnOpcode() : ARETURN);
  getter.visitMaxs(0,0);
  getter.visitEnd();
  MethodVisitor setter=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"" + name,""String_Node_Str"" + internalType + ""String_Node_Str"",null,null);
  setter.visitCode();
  setter.visitVarInsn(ALOAD,0);
  setter.visitVarInsn(type.isPrimitive() ? Primitive.getPrimitive(internalType).getSetOpCode() : ALOAD,1);
  setter.visitFieldInsn(PUTFIELD,className,getPropertyName(name),internalType);
  setter.visitInsn(RETURN);
  setter.visitMaxs(0,0);
  setter.visitEnd();
}"
29707,"/** 
 * Add the field to the class, adding the @XmlAttribute annotation for marshalling purposes.
 */
protected static void createField(ClassWriter cw,String name,Class<?> type){
  String internalType=getInternalTypeString(type);
  FieldVisitor field=cw.visitField(ACC_PRIVATE,name,internalType,null,null);
  field.visitAnnotation(""String_Node_Str"",true).visitEnd();
  field.visitEnd();
}","/** 
 * Add the field to the class, adding the @XmlAttribute annotation for marshalling purposes.
 */
protected static void createField(ClassWriter cw,String name,Class<?> type){
  String internalType=getInternalTypeString(type);
  FieldVisitor field=cw.visitField(ACC_PRIVATE,getPropertyName(name),internalType,null,null);
  field.visitAnnotation(""String_Node_Str"",true).visitEnd();
  field.visitEnd();
}"
29708,"private String getPropertyName(String name){
  return name.substring(0,1).toLowerCase() + name.substring(1);
}","private static String getPropertyName(String name){
  return name.substring(0,1).toLowerCase() + name.substring(1);
}"
29709,"/** 
 * {@inheritDoc}
 */
public void loadXAResourcesAndItsConnections(List xaresList,List connList){
  ConnectorRuntime crt=connectorRuntimeProvider.get();
  Collection<JdbcResource> jdbcResources=getAllJdbcResources();
  if (jdbcResources == null || jdbcResources.size() == 0) {
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"");
    }
    return;
  }
  List<JdbcConnectionPool> jdbcPools=new ArrayList<JdbcConnectionPool>();
  for (  Resource resource : jdbcResources) {
    JdbcResource jdbcResource=(JdbcResource)resource;
    if (getResourcesUtil().isEnabled(jdbcResource)) {
      ResourceInfo resourceInfo=ConnectorsUtil.getResourceInfo(jdbcResource);
      JdbcConnectionPool pool=ResourcesUtil.createInstance().getJdbcConnectionPoolOfResource(resourceInfo);
      if (pool != null && ""String_Node_Str"".equals(pool.getResType())) {
        jdbcPools.add(pool);
      }
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine(""String_Node_Str"" + ""String_Node_Str"" + (jdbcResource.getPoolName()));
      }
    }
  }
  loadAllJdbcResources();
  Properties XAResourceWrappers=new Properties();
  XAResourceWrappers.put(""String_Node_Str"",""String_Node_Str"");
  if (txService == null) {
    txService=config.getExtensionByType(txService.getClass());
  }
  List<Property> properties=txService.getProperty();
  if (properties != null) {
    for (    Property property : properties) {
      String name=property.getName();
      String value=property.getValue();
      if (name.equals(""String_Node_Str"")) {
        if (""String_Node_Str"".equals(value)) {
          XAResourceWrappers.remove(""String_Node_Str"");
        }
      }
 else       if (name.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str"")) {
          XAResourceWrappers.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  for (  JdbcConnectionPool jdbcConnectionPool : jdbcPools) {
    if (jdbcConnectionPool.getResType() == null || jdbcConnectionPool.getName() == null || !jdbcConnectionPool.getResType().equals(""String_Node_Str"")) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.finest(""String_Node_Str"" + jdbcConnectionPool.getName());
      }
      continue;
    }
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"" + jdbcConnectionPool.getName());
    }
    PoolInfo poolInfo=ConnectorsUtil.getPoolInfo(jdbcConnectionPool);
    try {
      String[] dbUserPassword=getdbUserPasswordOfJdbcConnectionPool(jdbcConnectionPool);
      String dbUser=dbUserPassword[0];
      String dbPassword=dbUserPassword[1];
      if (dbPassword == null) {
        dbPassword=""String_Node_Str"";
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"",poolInfo);
        }
      }
      if (dbUser == null) {
        dbUser=""String_Node_Str"";
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"",poolInfo);
        }
      }
      ManagedConnectionFactory fac=crt.obtainManagedConnectionFactory(poolInfo);
      Subject subject=new Subject();
      PasswordCredential pc=new PasswordCredential(dbUser,dbPassword.toCharArray());
      pc.setManagedConnectionFactory(fac);
      Principal prin=new ResourcePrincipal(dbUser,dbPassword);
      subject.getPrincipals().add(prin);
      subject.getPrivateCredentials().add(pc);
      ManagedConnection mc=fac.createManagedConnection(subject,null);
      connList.add(mc);
      try {
        XAResource xares=mc.getXAResource();
        if (xares != null) {
          String datasourceClassname=jdbcConnectionPool.getDatasourceClassname();
          String wrapperclass=(String)XAResourceWrappers.get(datasourceClassname);
          if (wrapperclass != null) {
            XAResourceWrapper xaresWrapper=null;
            xaresWrapper=(XAResourceWrapper)crt.getConnectorClassLoader().loadClass(wrapperclass).newInstance();
            xaresWrapper.init(mc,subject);
            if (_logger.isLoggable(Level.FINEST)) {
              _logger.finest(""String_Node_Str"" + poolInfo + ""String_Node_Str""+ xaresWrapper);
            }
            xaresList.add(xaresWrapper);
          }
 else {
            if (_logger.isLoggable(Level.FINEST)) {
              _logger.finest(""String_Node_Str"" + poolInfo + ""String_Node_Str""+ xares);
            }
            xaresList.add(xares);
          }
        }
      }
 catch (      ResourceException ex) {
        _logger.log(Level.WARNING,""String_Node_Str"",poolInfo);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"",ex);
        }
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.WARNING,""String_Node_Str"",poolInfo);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void loadXAResourcesAndItsConnections(List xaresList,List connList){
  ConnectorRuntime crt=connectorRuntimeProvider.get();
  Collection<JdbcResource> jdbcResources=getAllJdbcResources();
  if (jdbcResources == null || jdbcResources.size() == 0) {
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"");
    }
    return;
  }
  List<JdbcConnectionPool> jdbcPools=new ArrayList<JdbcConnectionPool>();
  for (  Resource resource : jdbcResources) {
    JdbcResource jdbcResource=(JdbcResource)resource;
    if (getResourcesUtil().isEnabled(jdbcResource)) {
      ResourceInfo resourceInfo=ConnectorsUtil.getResourceInfo(jdbcResource);
      JdbcConnectionPool pool=ResourcesUtil.createInstance().getJdbcConnectionPoolOfResource(resourceInfo);
      if (pool != null && ""String_Node_Str"".equals(pool.getResType())) {
        jdbcPools.add(pool);
      }
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine(""String_Node_Str"" + ""String_Node_Str"" + (jdbcResource.getPoolName()));
      }
    }
  }
  loadAllJdbcResources();
  Properties XAResourceWrappers=new Properties();
  XAResourceWrappers.put(""String_Node_Str"",""String_Node_Str"");
  txService=config.getExtensionByType(txService.getClass());
  List<Property> properties=txService.getProperty();
  if (properties != null) {
    for (    Property property : properties) {
      String name=property.getName();
      String value=property.getValue();
      if (name.equals(""String_Node_Str"")) {
        if (""String_Node_Str"".equals(value)) {
          XAResourceWrappers.remove(""String_Node_Str"");
        }
      }
 else       if (name.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str"")) {
          XAResourceWrappers.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  for (  JdbcConnectionPool jdbcConnectionPool : jdbcPools) {
    if (jdbcConnectionPool.getResType() == null || jdbcConnectionPool.getName() == null || !jdbcConnectionPool.getResType().equals(""String_Node_Str"")) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.finest(""String_Node_Str"" + jdbcConnectionPool.getName());
      }
      continue;
    }
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"" + jdbcConnectionPool.getName());
    }
    PoolInfo poolInfo=ConnectorsUtil.getPoolInfo(jdbcConnectionPool);
    try {
      String[] dbUserPassword=getdbUserPasswordOfJdbcConnectionPool(jdbcConnectionPool);
      String dbUser=dbUserPassword[0];
      String dbPassword=dbUserPassword[1];
      if (dbPassword == null) {
        dbPassword=""String_Node_Str"";
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"",poolInfo);
        }
      }
      if (dbUser == null) {
        dbUser=""String_Node_Str"";
        if (_logger.isLoggable(Level.FINEST)) {
          _logger.log(Level.FINEST,""String_Node_Str"",poolInfo);
        }
      }
      ManagedConnectionFactory fac=crt.obtainManagedConnectionFactory(poolInfo);
      Subject subject=new Subject();
      PasswordCredential pc=new PasswordCredential(dbUser,dbPassword.toCharArray());
      pc.setManagedConnectionFactory(fac);
      Principal prin=new ResourcePrincipal(dbUser,dbPassword);
      subject.getPrincipals().add(prin);
      subject.getPrivateCredentials().add(pc);
      ManagedConnection mc=fac.createManagedConnection(subject,null);
      connList.add(mc);
      try {
        XAResource xares=mc.getXAResource();
        if (xares != null) {
          String datasourceClassname=jdbcConnectionPool.getDatasourceClassname();
          String wrapperclass=(String)XAResourceWrappers.get(datasourceClassname);
          if (wrapperclass != null) {
            XAResourceWrapper xaresWrapper=null;
            xaresWrapper=(XAResourceWrapper)crt.getConnectorClassLoader().loadClass(wrapperclass).newInstance();
            xaresWrapper.init(mc,subject);
            if (_logger.isLoggable(Level.FINEST)) {
              _logger.finest(""String_Node_Str"" + poolInfo + ""String_Node_Str""+ xaresWrapper);
            }
            xaresList.add(xaresWrapper);
          }
 else {
            if (_logger.isLoggable(Level.FINEST)) {
              _logger.finest(""String_Node_Str"" + poolInfo + ""String_Node_Str""+ xares);
            }
            xaresList.add(xares);
          }
        }
      }
 catch (      ResourceException ex) {
        _logger.log(Level.WARNING,""String_Node_Str"",poolInfo);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"",ex);
        }
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.WARNING,""String_Node_Str"",poolInfo);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
  }
}"
29710,"public static <P extends ConfigBeanProxy>boolean checkIfConfigExists(Config c,Class<P> configBeanType){
  P configExtension=null;
  for (  Container extension : c.getContainers()) {
    try {
      configExtension=configBeanType.cast(extension);
      return true;
    }
 catch (    Exception e) {
    }
  }
  return false;
}","public static <P extends ConfigBeanProxy>boolean checkIfConfigExists(Config c,Class<P> configBeanType){
  for (  Container extension : c.getContainers()) {
    try {
      configBeanType.cast(extension);
      return true;
    }
 catch (    Exception e) {
    }
  }
  return false;
}"
29711,"public static <T extends ConfigExtension>T getExtensionByType(Config c,Class<T> type) throws ClassNotFoundException, TransactionFailure {
  T configExtension=null;
  for (  Container extension : c.getContainers()) {
    try {
      configExtension=type.cast(extension);
      return configExtension;
    }
 catch (    Exception e) {
    }
  }
  if (configExtension == null) {
    ConfigSnippetLoader loader=new ConfigSnippetLoader(c,type);
    return loader.createConfigBeanForType(type);
  }
  return null;
}","public static <T extends ConfigExtension>T getExtensionByType(Config c,Class<T> type) throws ClassNotFoundException, TransactionFailure {
  T configExtension=null;
  for (  Container extension : c.getContainers()) {
    try {
      configExtension=type.cast(extension);
      return configExtension;
    }
 catch (    Exception e) {
    }
  }
  ConfigSnippetLoader loader=new ConfigSnippetLoader(c,type);
  return loader.createConfigBeanForType(type);
}"
29712,"@Override public <U extends ConfigExtension>U createConfigBeanForType(Class<U> configExtensionType) throws TransactionFailure {
  if (isConfigSnippetPresent(configExtensionType)) {
    final ConfigExtension configBeanFromSnippet=addConfigBeanFor(configExtensionType,configLoader);
  }
 else {
    final Class<U> parentElem=configExtensionType;
    ConfigSupport.apply(new SingleConfigCode<Config>(){
      @Override public Object run(      Config parent) throws PropertyVetoException, TransactionFailure {
        U child=parent.createChild(parentElem);
        Dom.unwrap(child).addDefaultChildren();
        parent.getContainers().add((Container)child);
        return child;
      }
    }
,configLoader);
  }
  Method m=getMatchingGetterMethod(configLoader,configExtensionType);
  if (m != null) {
    try {
      return (U)m.invoke(configLoader);
    }
 catch (    Exception ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",ex);
      return null;
    }
  }
 else {
    return configLoader.getExtensionByType(configExtensionType);
  }
}","@Override public <U extends ConfigExtension>U createConfigBeanForType(Class<U> configExtensionType) throws TransactionFailure {
  if (isConfigSnippetPresent(configExtensionType)) {
    addConfigBeanFor(configExtensionType,configLoader);
  }
 else {
    final Class<U> parentElem=configExtensionType;
    ConfigSupport.apply(new SingleConfigCode<Config>(){
      @Override public Object run(      Config parent) throws PropertyVetoException, TransactionFailure {
        U child=parent.createChild(parentElem);
        Dom.unwrap(child).addDefaultChildren();
        parent.getContainers().add((Container)child);
        return child;
      }
    }
,configLoader);
  }
  Method m=getMatchingGetterMethod(configLoader,configExtensionType);
  if (m != null) {
    try {
      return (U)m.invoke(configLoader);
    }
 catch (    Exception ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",ex);
      return null;
    }
  }
 else {
    return configLoader.getExtensionByType(configExtensionType);
  }
}"
29713,"public void run(org.jvnet.hk2.config.ConfigParser parser){
  if (snippetUrl != null) {
    try {
      DomDocument newElement=parser.parse(snippetUrl,doc,Dom.unwrap(loader));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void run(org.jvnet.hk2.config.ConfigParser parser){
  if (snippetUrl != null) {
    try {
      parser.parse(snippetUrl,doc,Dom.unwrap(loader));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}"
29714,"/** 
 * Get the availability-enabled for the bean from sun-ejb-jar.xml. return defaultValue if not found
 */
public boolean getAvailabilityEnabledFromEjbDescriptor(boolean inheritedValue){
  _logger.finest(""String_Node_Str"");
  IASEjbExtraDescriptors extraDescriptors=_ejbDescriptor.getIASEjbExtraDescriptors();
  if (extraDescriptors == null) {
    return inheritedValue;
  }
  String availabilityEnabledString=extraDescriptors.getAttributeValue(IASEjbExtraDescriptors.AVAILABILITY_ENABLED);
  Boolean bool=this.toBoolean(availabilityEnabledString);
  if (bool == null) {
    return inheritedValue;
  }
 else {
    return bool.booleanValue();
  }
}","/** 
 * Get the availability-enabled for the bean from sun-ejb-jar.xml. return defaultValue if not found
 */
public boolean getAvailabilityEnabledFromEjbDescriptor(boolean inheritedValue){
  _logger.finest(""String_Node_Str"");
  IASEjbExtraDescriptors extraDescriptors=_ejbDescriptor.getIASEjbExtraDescriptors();
  if (extraDescriptors == null) {
    return inheritedValue;
  }
  String availabilityEnabledString=extraDescriptors.getAttributeValue(IASEjbExtraDescriptors.AVAILABILITY_ENABLED);
  if (availabilityEnabledString == null) {
    return inheritedValue;
  }
 else {
    return toBoolean(availabilityEnabledString);
  }
}"
29715,"/** 
 * convert the input value to the appropriate Boolean value if input value is null, return null
 */
protected Boolean toBoolean(String value){
  if (value == null)   return null;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return Boolean.TRUE;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return Boolean.TRUE;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return Boolean.TRUE;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return Boolean.TRUE;
  return Boolean.FALSE;
}","/** 
 * convert the input value to the appropriate boolean value
 */
private boolean toBoolean(String value){
  if (value.equalsIgnoreCase(""String_Node_Str""))   return true;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return true;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return true;
  if (value.equalsIgnoreCase(""String_Node_Str""))   return true;
  return false;
}"
29716,"/** 
 * Get the availability-enabled for the ejb container from domain.xml. return inherited global availability-enabled if not found
 */
public boolean getEjbContainerAvailabilityEnabledFromConfig(boolean inheritedValue){
  _logger.finest(""String_Node_Str"");
  EjbContainerAvailability eas=this.getEjbContainerAvailability();
  if (eas == null) {
    _logger.fine(""String_Node_Str"");
    return inheritedValue;
  }
  String easString=eas.getAvailabilityEnabled();
  Boolean bool=this.toBoolean(easString);
  if (bool == null) {
    return inheritedValue;
  }
 else {
    return bool.booleanValue();
  }
}","/** 
 * Get the availability-enabled for the ejb container from domain.xml. return inherited global availability-enabled if not found
 */
public boolean getEjbContainerAvailabilityEnabledFromConfig(boolean inheritedValue){
  _logger.finest(""String_Node_Str"");
  EjbContainerAvailability eas=this.getEjbContainerAvailability();
  if (eas == null) {
    _logger.fine(""String_Node_Str"");
    return inheritedValue;
  }
  String easString=eas.getAvailabilityEnabled();
  if (easString == null) {
    return inheritedValue;
  }
 else {
    return toBoolean(easString);
  }
}"
29717,"/** 
 * This method creates an Application object from reading the  standard deployment descriptor.
 * @param archive the archive for the application
 */
public Application createApplicationFromStandardDD(ReadableArchive archive,String archiveType) throws IOException, SAXParseException {
  Archivist archivist=archivistFactory.getArchivist(archiveType,null);
  String xmlValidationLevel=dasConfig.getDeployXmlValidation();
  archivist.setXMLValidationLevel(xmlValidationLevel);
  if (xmlValidationLevel.equals(""String_Node_Str"")) {
    archivist.setXMLValidation(false);
  }
  RootDeploymentDescriptor desc=archivist.readStandardDeploymentDescriptor(archive);
  Application application=null;
  if (desc instanceof Application) {
    application=(Application)desc;
  }
 else   if (desc instanceof BundleDescriptor) {
    BundleDescriptor aBundle=(BundleDescriptor)desc;
    ModuleDescriptor newModule=archivist.createModuleDescriptor(aBundle);
    newModule.setArchiveUri(archive.getURI().getSchemeSpecificPart());
    String moduleName=newModule.getModuleName();
    application=Application.createVirtualApplication(moduleName,newModule);
  }
  return application;
}","/** 
 * This method creates an Application object from reading the  standard deployment descriptor.
 * @param archive the archive for the application
 */
public Application createApplicationFromStandardDD(ReadableArchive archive,String archiveType) throws IOException, SAXParseException {
  Archivist archivist=archivistFactory.getArchivist(archiveType,null);
  String xmlValidationLevel=dasConfig.getDeployXmlValidation();
  archivist.setXMLValidationLevel(xmlValidationLevel);
  if (xmlValidationLevel.equals(""String_Node_Str"")) {
    archivist.setXMLValidation(false);
  }
  BundleDescriptor desc=archivist.readStandardDeploymentDescriptor(archive);
  Application application=null;
  if (desc instanceof Application) {
    application=(Application)desc;
  }
 else {
    ModuleDescriptor newModule=archivist.createModuleDescriptor(desc);
    newModule.setArchiveUri(archive.getURI().getSchemeSpecificPart());
    String moduleName=newModule.getModuleName();
    application=Application.createVirtualApplication(moduleName,newModule);
  }
  return application;
}"
29718,"public WLSWebServicesDeploymentDescriptorFile(RootDeploymentDescriptor desc){
  descriptorPath=(((WebServicesDescriptor)desc).getBundleDescriptor().getModuleType().equals(DOLUtils.warType())) ? WLDescriptorConstants.WL_WEB_WEBSERVICES_JAR_ENTRY : WLDescriptorConstants.WL_EJB_WEBSERVICES_JAR_ENTRY;
}","public WLSWebServicesDeploymentDescriptorFile(RootDeploymentDescriptor desc){
  if (desc instanceof WebServicesDescriptor) {
    descriptorPath=(((WebServicesDescriptor)desc).getBundleDescriptor().getModuleType().equals(DOLUtils.warType())) ? WLDescriptorConstants.WL_WEB_WEBSERVICES_JAR_ENTRY : WLDescriptorConstants.WL_EJB_WEBSERVICES_JAR_ENTRY;
  }
}"
29719,"/** 
 * This method populates the Application object from a ReadableArchive
 * @param archive the archive for the application
 */
public Application processDeploymentMetaData(ReadableArchive archive) throws Exception {
  FileArchive expandedArchive=null;
  File tmpFile=null;
  ExtendedDeploymentContext context=null;
  Logger logger=Logger.getAnonymousLogger();
  ClassLoader cl=null;
  try {
    String archiveName=Util.getURIName(archive.getURI());
    ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive);
    if (archiveHandler == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",archiveName));
    }
    DeployCommandParameters parameters=new DeployCommandParameters(new File(archive.getURI()));
    ActionReport report=new HTMLActionReporter();
    context=new DeploymentContextImpl(report,logger,archive,parameters,env);
    context.setArchiveHandler(archiveHandler);
    String appName=archiveHandler.getDefaultApplicationName(archive,context);
    parameters.name=appName;
    if (archive instanceof InputJarArchive) {
      tmpFile=File.createTempFile(archiveName,""String_Node_Str"");
      String path=tmpFile.getAbsolutePath();
      if (!tmpFile.delete()) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{path});
      }
      File tmpDir=new File(path);
      tmpDir.deleteOnExit();
      tmpDir.mkdirs();
      expandedArchive=(FileArchive)archiveFactory.createArchive(tmpDir);
      archiveHandler.expand(archive,expandedArchive,context);
      context.setSource(expandedArchive);
    }
    context.setPhase(DeploymentContextImpl.Phase.PREPARE);
    ClassLoaderHierarchy clh=clhProvider.get();
    context.createDeploymentClassLoader(clh,archiveHandler);
    cl=context.getClassLoader();
    deployment.getDeployableTypes(context);
    deployment.getSniffers(archiveHandler,null,context);
    return processDOL(context);
  }
  finally {
    if (cl != null) {
      try {
        PreDestroy.class.cast(cl).preDestroy();
      }
 catch (      Exception e) {
      }
    }
    if (context != null) {
      context.postDeployClean(true);
    }
    if (expandedArchive != null) {
      try {
        expandedArchive.close();
      }
 catch (      Exception e) {
      }
    }
    if (tmpFile != null && tmpFile.exists()) {
      try {
        FileUtils.whack(tmpFile);
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * This method populates the Application object from a ReadableArchive
 * @param archive the archive for the application
 */
public Application processDeploymentMetaData(ReadableArchive archive) throws Exception {
  FileArchive expandedArchive=null;
  File tmpFile=null;
  ExtendedDeploymentContext context=null;
  Logger logger=Logger.getAnonymousLogger();
  ClassLoader cl=null;
  try {
    String archiveName=Util.getURIName(archive.getURI());
    ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive);
    if (archiveHandler == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",archiveName));
    }
    DeployCommandParameters parameters=new DeployCommandParameters(new File(archive.getURI()));
    ActionReport report=new HTMLActionReporter();
    context=new DeploymentContextImpl(report,logger,archive,parameters,env);
    context.setArchiveHandler(archiveHandler);
    String appName=archiveHandler.getDefaultApplicationName(archive,context);
    parameters.name=appName;
    if (archive instanceof InputJarArchive) {
      tmpFile=File.createTempFile(archiveName,""String_Node_Str"");
      String path=tmpFile.getAbsolutePath();
      if (!tmpFile.delete()) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{path});
      }
      File tmpDir=new File(path);
      tmpDir.deleteOnExit();
      tmpDir.mkdirs();
      expandedArchive=(FileArchive)archiveFactory.createArchive(tmpDir);
      archiveHandler.expand(archive,expandedArchive,context);
      context.setSource(expandedArchive);
    }
    context.setPhase(DeploymentContextImpl.Phase.PREPARE);
    ClassLoaderHierarchy clh=clhProvider.get();
    context.createDeploymentClassLoader(clh,archiveHandler);
    cl=context.getClassLoader();
    deployment.getDeployableTypes(context);
    deployment.getSniffers(archiveHandler,null,context);
    return processDOL(context);
  }
  finally {
    if (cl != null && cl instanceof PreDestroy) {
      try {
        PreDestroy.class.cast(cl).preDestroy();
      }
 catch (      Exception e) {
      }
    }
    if (context != null) {
      context.postDeployClean(true);
    }
    if (expandedArchive != null) {
      try {
        expandedArchive.close();
      }
 catch (      Exception e) {
      }
    }
    if (tmpFile != null && tmpFile.exists()) {
      try {
        FileUtils.whack(tmpFile);
      }
 catch (      Exception e) {
      }
    }
  }
}"
29720,"private boolean isRARCL(ClassLoader loader){
  DelegatingClassLoader connectorCL=(DelegatingClassLoader)this.getParent();
  return connectorCL.getDelegates().contains(loader);
}","private boolean isRARCL(ClassLoader loader){
  DelegatingClassLoader connectorCL=(DelegatingClassLoader)this.getParent();
  if (!(loader instanceof DelegatingClassLoader.ClassFinder)) {
    return false;
  }
  return connectorCL.getDelegates().contains((DelegatingClassLoader.ClassFinder)loader);
}"
29721,"public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){
  this.className=name;
  this.signature=signature;
}","public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){
  this.className=name;
}"
29722,"public ConnectionDefDescriptor getConnectionDefinitionByCFType(String type,boolean useDefault){
  Iterator it=this.outboundRA.getConnectionDefs().iterator();
  while (it.hasNext()) {
    ConnectionDefDescriptor desc=(ConnectionDefDescriptor)it.next();
    if (type == null) {
      if (useDefault && this.outboundRA.getConnectionDefs().size() == 1)       return desc;
 else       return null;
    }
    if (desc.getConnectionFactoryIntf().equals(type))     return desc;
  }
  return null;
}","public ConnectionDefDescriptor getConnectionDefinitionByCFType(String type,boolean useDefault){
  if (this.outboundRA == null) {
    return null;
  }
  Iterator it=this.outboundRA.getConnectionDefs().iterator();
  while (it.hasNext()) {
    ConnectionDefDescriptor desc=(ConnectionDefDescriptor)it.next();
    if (type == null) {
      if (useDefault && this.outboundRA.getConnectionDefs().size() == 1)       return desc;
 else       return null;
    }
    if (desc.getConnectionFactoryIntf().equals(type))     return desc;
  }
  return null;
}"
29723,"public int getNumOfSupportedCFs(){
  return outboundRA.getConnectionDefs().size();
}","public int getNumOfSupportedCFs(){
  if (outboundRA == null) {
    return 0;
  }
  return outboundRA.getConnectionDefs().size();
}"
29724,"private void setAvailabilityProperties() throws ConnectorRuntimeException {
  if (!isClustered())   return;
  try {
    Domain domain=Globals.get(Domain.class);
    ServerContext serverContext=Globals.get(ServerContext.class);
    Server server=domain.getServerNamed(serverContext.getInstanceName());
    JmsService jmsService=server.getConfig().getExtensionByType(JmsService.class);
    if (jmsService.getType().equals(REMOTE)) {
      return;
    }
    AvailabilityService as=server.getConfig().getAvailabilityService();
    if (as == null) {
      logFine(""String_Node_Str"");
      return;
    }
    boolean useMasterBroker=true;
    if (as != null && as.getExtensionByType(JmsAvailability.class) != null && !MASTERBROKER.equalsIgnoreCase(as.getExtensionByType(JmsAvailability.class).getConfigStoreType()))     useMasterBroker=false;
    boolean isJmsAvailabilityEnabled=this.isJMSAvailabilityOn(as);
    logFine(""String_Node_Str"");
    if (!useMasterBroker || isJmsAvailabilityEnabled) {
      ConnectorDescriptor cd=getDescriptor();
      String clusterName=getMQClusterName();
      ConnectorConfigProperty envProp1=new ConnectorConfigProperty(CLUSTERID,clusterName,""String_Node_Str"",""String_Node_Str"");
      setProperty(cd,envProp1);
      if (brokerInstanceName == null) {
        brokerInstanceName=getBrokerInstanceName(jmsService);
      }
      ConnectorConfigProperty envProp2=new ConnectorConfigProperty(BROKERID,brokerInstanceName,""String_Node_Str"",""String_Node_Str"");
      setProperty(cd,envProp2);
      if (isJmsAvailabilityEnabled) {
        ConnectorConfigProperty envProp3=new ConnectorConfigProperty(HAREQUIRED,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        setProperty(cd,envProp3);
        ConnectorConfigProperty envProp4=new ConnectorConfigProperty(BROKERENABLEHA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        setProperty(cd,envProp4);
        String nodeHostName=domain.getNodeNamed(server.getNodeRef()).getNodeHost();
        if (nodeHostName != null) {
          ConnectorConfigProperty envProp5=new ConnectorConfigProperty(BROKERBINDADDRESS,nodeHostName,""String_Node_Str"",""String_Node_Str"");
          setProperty(cd,envProp5);
        }
        loadDBProperties(as.getExtensionByType(JmsAvailability.class),ClusterMode.ENHANCED);
      }
 else {
        JmsAvailability jmsAvailability=as.getExtensionByType(JmsAvailability.class);
        if (""String_Node_Str"".equals(jmsAvailability.getMessageStoreType()))         loadDBProperties(jmsAvailability,ClusterMode.ENHANCED);
        loadDBProperties(jmsAvailability,ClusterMode.CONVENTIONAL_OF_PEER_BROKERS);
      }
    }
 else {
      if (""String_Node_Str"".equals(as.getExtensionByType(JmsAvailability.class).getMessageStoreType()))       loadDBProperties(as.getExtensionByType(JmsAvailability.class),ClusterMode.CONVENTIONAL_WITH_MASTER_BROKER);
    }
  }
 catch (  Exception e) {
    ConnectorRuntimeException crex=new ConnectorRuntimeException(e.getMessage());
    throw (ConnectorRuntimeException)crex.initCause(e);
  }
}","private void setAvailabilityProperties() throws ConnectorRuntimeException {
  if (!isClustered())   return;
  try {
    Domain domain=Globals.get(Domain.class);
    ServerContext serverContext=Globals.get(ServerContext.class);
    Server server=domain.getServerNamed(serverContext.getInstanceName());
    JmsService jmsService=server.getConfig().getExtensionByType(JmsService.class);
    if (jmsService.getType().equals(REMOTE)) {
      return;
    }
    AvailabilityService as=server.getConfig().getAvailabilityService();
    if (as == null) {
      logFine(""String_Node_Str"");
      return;
    }
    boolean useMasterBroker=true;
    if (as.getExtensionByType(JmsAvailability.class) != null && !MASTERBROKER.equalsIgnoreCase(as.getExtensionByType(JmsAvailability.class).getConfigStoreType()))     useMasterBroker=false;
    boolean isJmsAvailabilityEnabled=this.isJMSAvailabilityOn(as);
    logFine(""String_Node_Str"");
    if (!useMasterBroker || isJmsAvailabilityEnabled) {
      ConnectorDescriptor cd=getDescriptor();
      String clusterName=getMQClusterName();
      ConnectorConfigProperty envProp1=new ConnectorConfigProperty(CLUSTERID,clusterName,""String_Node_Str"",""String_Node_Str"");
      setProperty(cd,envProp1);
      if (brokerInstanceName == null) {
        brokerInstanceName=getBrokerInstanceName(jmsService);
      }
      ConnectorConfigProperty envProp2=new ConnectorConfigProperty(BROKERID,brokerInstanceName,""String_Node_Str"",""String_Node_Str"");
      setProperty(cd,envProp2);
      if (isJmsAvailabilityEnabled) {
        ConnectorConfigProperty envProp3=new ConnectorConfigProperty(HAREQUIRED,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        setProperty(cd,envProp3);
        ConnectorConfigProperty envProp4=new ConnectorConfigProperty(BROKERENABLEHA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        setProperty(cd,envProp4);
        String nodeHostName=domain.getNodeNamed(server.getNodeRef()).getNodeHost();
        if (nodeHostName != null) {
          ConnectorConfigProperty envProp5=new ConnectorConfigProperty(BROKERBINDADDRESS,nodeHostName,""String_Node_Str"",""String_Node_Str"");
          setProperty(cd,envProp5);
        }
        loadDBProperties(as.getExtensionByType(JmsAvailability.class),ClusterMode.ENHANCED);
      }
 else {
        JmsAvailability jmsAvailability=as.getExtensionByType(JmsAvailability.class);
        if (""String_Node_Str"".equals(jmsAvailability.getMessageStoreType()))         loadDBProperties(jmsAvailability,ClusterMode.ENHANCED);
        loadDBProperties(jmsAvailability,ClusterMode.CONVENTIONAL_OF_PEER_BROKERS);
      }
    }
 else {
      if (""String_Node_Str"".equals(as.getExtensionByType(JmsAvailability.class).getMessageStoreType()))       loadDBProperties(as.getExtensionByType(JmsAvailability.class),ClusterMode.CONVENTIONAL_WITH_MASTER_BROKER);
    }
  }
 catch (  Exception e) {
    ConnectorRuntimeException crex=new ConnectorRuntimeException(e.getMessage());
    throw (ConnectorRuntimeException)crex.initCause(e);
  }
}"
29725,"/** 
 * Deploy WAR files.
 */
protected void deployWARs(File appBase,String[] files){
  for (int i=0; i < files.length; i++) {
    if (files[i].equalsIgnoreCase(""String_Node_Str""))     continue;
    if (files[i].equalsIgnoreCase(""String_Node_Str""))     continue;
    if (deployed.contains(files[i]))     continue;
    File dir=new File(appBase,files[i]);
    if (files[i].toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"") && dir.isFile() && !invalidWars.contains(files[i])) {
      deployed.add(files[i]);
      String contextPath=""String_Node_Str"" + files[i];
      int period=contextPath.lastIndexOf(""String_Node_Str"");
      if (period >= 0)       contextPath=contextPath.substring(0,period);
      if (!validateContextPath(appBase,contextPath)) {
        log.severe(sm.getString(""String_Node_Str"",files[i]));
        invalidWars.add(files[i]);
        continue;
      }
      if (contextPath.equals(""String_Node_Str""))       contextPath=""String_Node_Str"";
      if (host.findChild(contextPath) != null)       continue;
      JarFile jar=null;
      JarEntry entry=null;
      InputStream istream=null;
      BufferedOutputStream ostream=null;
      File xml=new File(configBase,files[i].substring(0,files[i].lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"");
      if (!xml.exists()) {
        try {
          jar=new JarFile(dir);
          entry=jar.getJarEntry(""String_Node_Str"");
          if (entry != null) {
            istream=jar.getInputStream(entry);
            ostream=new BufferedOutputStream(new FileOutputStream(xml),1024);
            byte buffer[]=new byte[1024];
            while (true) {
              int n=istream.read(buffer);
              if (n < 0) {
                break;
              }
              ostream.write(buffer,0,n);
            }
            ostream.flush();
            ostream.close();
            ostream=null;
            istream.close();
            istream=null;
            entry=null;
            jar.close();
            jar=null;
            deployDescriptors(configBase(),configBase.list());
            return;
          }
        }
 catch (        Exception e) {
          if (ostream != null) {
            try {
              ostream.close();
            }
 catch (            Throwable t) {
              ;
            }
            ostream=null;
          }
          if (istream != null) {
            try {
              istream.close();
            }
 catch (            Throwable t) {
              ;
            }
            istream=null;
          }
          entry=null;
          if (jar != null) {
            try {
              jar.close();
            }
 catch (            Throwable t) {
              ;
            }
            jar=null;
          }
        }
      }
      if (isUnpackWARs()) {
        if (log.isLoggable(Level.FINE)) {
          log.fine(sm.getString(""String_Node_Str"",files[i]));
        }
        URL url=null;
        String path=null;
        try {
          url=new URL(""String_Node_Str"" + dir.getCanonicalPath() + ""String_Node_Str"");
          path=ExpandWar.expand(host,url);
        }
 catch (        IOException e) {
          log.warning(sm.getString(""String_Node_Str"",files[i]));
          continue;
        }
catch (        Throwable t) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",files[i]),t);
          continue;
        }
        try {
          if (path != null) {
            url=new URL(""String_Node_Str"" + path);
            ((Deployer)host).install(contextPath,url);
          }
        }
 catch (        Throwable t) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",files[i]),t);
        }
      }
 else {
        if (log.isLoggable(Level.INFO)) {
          log.info(sm.getString(""String_Node_Str"",files[i]));
        }
        try {
          URL url=new URL(""String_Node_Str"",null,dir.getCanonicalPath());
          url=new URL(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
          ((Deployer)host).install(contextPath,url);
        }
 catch (        Throwable t) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",files[i]),t);
        }
      }
    }
  }
}","/** 
 * Deploy WAR files.
 */
protected void deployWARs(File appBase,String[] files){
  for (int i=0; i < files.length; i++) {
    if (files[i].equalsIgnoreCase(""String_Node_Str""))     continue;
    if (files[i].equalsIgnoreCase(""String_Node_Str""))     continue;
    if (deployed.contains(files[i]))     continue;
    File dir=new File(appBase,files[i]);
    if (files[i].toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"") && dir.isFile() && !invalidWars.contains(files[i])) {
      deployed.add(files[i]);
      String contextPath=""String_Node_Str"" + files[i];
      int period=contextPath.lastIndexOf(""String_Node_Str"");
      if (period >= 0)       contextPath=contextPath.substring(0,period);
      if (!validateContextPath(appBase,contextPath)) {
        log.severe(sm.getString(""String_Node_Str"",files[i]));
        invalidWars.add(files[i]);
        continue;
      }
      if (contextPath.equals(""String_Node_Str""))       contextPath=""String_Node_Str"";
      if (host.findChild(contextPath) != null)       continue;
      JarFile jar=null;
      JarEntry entry=null;
      InputStream istream=null;
      BufferedOutputStream ostream=null;
      File xml=new File(configBase,files[i].substring(0,files[i].lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"");
      if (!xml.exists()) {
        try {
          jar=new JarFile(dir);
          entry=jar.getJarEntry(""String_Node_Str"");
          if (entry != null) {
            istream=jar.getInputStream(entry);
            ostream=new BufferedOutputStream(new FileOutputStream(xml),1024);
            byte buffer[]=new byte[1024];
            while (true) {
              int n=istream.read(buffer);
              if (n < 0) {
                break;
              }
              ostream.write(buffer,0,n);
            }
            ostream.flush();
            ostream.close();
            ostream=null;
            istream.close();
            istream=null;
            entry=null;
            jar.close();
            jar=null;
            deployDescriptors(configBase(),configBase.list());
            return;
          }
        }
 catch (        IOException e) {
        }
 finally {
          if (ostream != null) {
            try {
              ostream.close();
            }
 catch (            Throwable t) {
              ;
            }
            ostream=null;
          }
          if (istream != null) {
            try {
              istream.close();
            }
 catch (            Throwable t) {
              ;
            }
            istream=null;
          }
          entry=null;
          if (jar != null) {
            try {
              jar.close();
            }
 catch (            Throwable t) {
              ;
            }
            jar=null;
          }
        }
      }
      if (isUnpackWARs()) {
        if (log.isLoggable(Level.FINE)) {
          log.fine(sm.getString(""String_Node_Str"",files[i]));
        }
        URL url=null;
        String path=null;
        try {
          url=new URL(""String_Node_Str"" + dir.getCanonicalPath() + ""String_Node_Str"");
          path=ExpandWar.expand(host,url);
        }
 catch (        IOException e) {
          log.warning(sm.getString(""String_Node_Str"",files[i]));
          continue;
        }
catch (        Throwable t) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",files[i]),t);
          continue;
        }
        try {
          if (path != null) {
            url=new URL(""String_Node_Str"" + path);
            ((Deployer)host).install(contextPath,url);
          }
        }
 catch (        Throwable t) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",files[i]),t);
        }
      }
 else {
        if (log.isLoggable(Level.INFO)) {
          log.info(sm.getString(""String_Node_Str"",files[i]));
        }
        try {
          URL url=new URL(""String_Node_Str"",null,dir.getCanonicalPath());
          url=new URL(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
          ((Deployer)host).install(contextPath,url);
        }
 catch (        Throwable t) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",files[i]),t);
        }
      }
    }
  }
}"
29726,"private int changeAdminPasswordLocally(String domainDir,String domainName) throws CommandException {
  if (!isLocalHost(programOpts.getHost())) {
    throw new CommandException(strings.get(""String_Node_Str""));
  }
  GFLauncher launcher=null;
  try {
    launcher=GFLauncherFactory.getInstance(RuntimeType.DAS);
    GFLauncherInfo info=launcher.getInfo();
    info.setDomainName(domainName);
    info.setDomainParentDir(domainDir);
    launcher.setup();
    if (launcher.isSecureAdminEnabled()) {
      String newPassword=(String)passwords.get(newpwName);
      if ((newPassword == null) || (newPassword.isEmpty())) {
        throw new CommandException(strings.get(""String_Node_Str""));
      }
    }
    String adminKeyFile=launcher.getAdminRealmKeyFile();
    if (adminKeyFile != null) {
      FileRealmHelper helper=new FileRealmHelper(adminKeyFile);
      String[] groups=helper.authenticate(programOpts.getUser(),((String)passwords.get(oldpwName)).toCharArray());
      if (groups == null) {
        throw new CommandException(strings.get(""String_Node_Str"",programOpts.getUser()));
      }
      helper.updateUser(programOpts.getUser(),programOpts.getUser(),((String)passwords.get(newpwName)).toCharArray(),null);
      helper.persist();
      return SUCCESS;
    }
 else {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
  }
 catch (  MiniXmlParserException ex) {
    throw new CommandException(ex);
  }
catch (  GFLauncherException ex) {
    throw new CommandException(ex);
  }
catch (  IOException ex) {
    throw new CommandException(ex);
  }
}","private int changeAdminPasswordLocally(String domainDir,String domainName) throws CommandException {
  if (!isLocalHost(programOpts.getHost())) {
    throw new CommandException(strings.get(""String_Node_Str""));
  }
  GFLauncher launcher=null;
  try {
    launcher=GFLauncherFactory.getInstance(RuntimeType.DAS);
    GFLauncherInfo info=launcher.getInfo();
    info.setDomainName(domainName);
    info.setDomainParentDir(domainDir);
    launcher.setup();
    if (launcher.isSecureAdminEnabled()) {
      if ((newpassword == null) || (newpassword.isEmpty())) {
        throw new CommandException(strings.get(""String_Node_Str""));
      }
    }
    String adminKeyFile=launcher.getAdminRealmKeyFile();
    if (adminKeyFile != null) {
      FileRealmHelper helper=new FileRealmHelper(adminKeyFile);
      String[] groups=helper.authenticate(programOpts.getUser(),password.toCharArray());
      if (groups == null) {
        throw new CommandException(strings.get(""String_Node_Str"",programOpts.getUser()));
      }
      helper.updateUser(programOpts.getUser(),programOpts.getUser(),newpassword.toCharArray(),null);
      helper.persist();
      return SUCCESS;
    }
 else {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
  }
 catch (  MiniXmlParserException ex) {
    throw new CommandException(ex);
  }
catch (  GFLauncherException ex) {
    throw new CommandException(ex);
  }
catch (  IOException ex) {
    throw new CommandException(ex);
  }
}"
29727,"/** 
 * Require the user to actually type the passwords unless they are in the file specified by the --passwordfile option.
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  setDomainName(userArgDomainName);
  super.validate();
  if (programOpts.getUser() == null) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val))       programOpts.setUser(val);
 else       programOpts.setUser(SystemPropertyConstants.DEFAULT_ADMIN_USER);
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  try {
    String password=getPasswords();
    programOpts.setPassword(password,ProgramOptions.PasswordLocation.USER);
  }
 catch (  CommandValidationException cve) {
    throw new CommandException(cve);
  }
  params=new ParameterMap();
  params.set(""String_Node_Str"",programOpts.getUser());
  params.set(oldpwName,passwords.get(oldpwName));
  params.set(newpwName,passwords.get(newpwName));
}","/** 
 * Require the user to actually type the passwords unless they are in the file specified by the --passwordfile option.
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  setDomainName(userArgDomainName);
  super.validate();
  if (programOpts.getUser() == null) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val))       programOpts.setUser(val);
 else       programOpts.setUser(SystemPropertyConstants.DEFAULT_ADMIN_USER);
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  if (password == null) {
    password=getPassword(""String_Node_Str"",strings.get(""String_Node_Str""),false);
    if (password == null) {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  if (newpassword == null) {
    newpassword=getPassword(""String_Node_Str"",strings.get(""String_Node_Str""),true);
    if (newpassword == null) {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  params=new ParameterMap();
  params.set(""String_Node_Str"",programOpts.getUser());
  params.set(""String_Node_Str"",password);
  params.set(""String_Node_Str"",newpassword);
}"
29728,"@Override protected int executeCommand() throws CommandException {
  try {
    HostAndPort adminAddress=getAdminAddress();
    if (isRunning(adminAddress.getHost(),adminAddress.getPort()))     throw new CommandException(strings.get(""String_Node_Str"",getDomainName(),getDomainRootDir()));
    DomainConfig domainConfig=new DomainConfig(getDomainName(),getDomainsDir().getAbsolutePath());
    PEDomainsManager manager=new PEDomainsManager();
    String mp=super.readFromMasterPasswordFile();
    if (mp == null) {
      mp=passwords.get(""String_Node_Str"");
      if (mp == null) {
        mp=super.readPassword(strings.get(""String_Node_Str""));
      }
    }
    if (mp == null)     throw new CommandException(strings.get(""String_Node_Str""));
    if (!super.verifyMasterPassword(mp))     throw new CommandException(strings.get(""String_Node_Str""));
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.description=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    String nmp=super.getPassword(nmpo,null,true);
    if (nmp == null)     throw new CommandException(strings.get(""String_Node_Str""));
    domainConfig.put(DomainConfig.K_MASTER_PASSWORD,mp);
    domainConfig.put(DomainConfig.K_NEW_MASTER_PASSWORD,nmp);
    domainConfig.put(DomainConfig.K_SAVE_MASTER_PASSWORD,savemp);
    manager.changeMasterPassword(domainConfig);
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}","@Override protected int executeCommand() throws CommandException {
  try {
    HostAndPort adminAddress=getAdminAddress();
    if (isRunning(adminAddress.getHost(),adminAddress.getPort()))     throw new CommandException(strings.get(""String_Node_Str"",getDomainName(),getDomainRootDir()));
    DomainConfig domainConfig=new DomainConfig(getDomainName(),getDomainsDir().getAbsolutePath());
    PEDomainsManager manager=new PEDomainsManager();
    String mp=super.readFromMasterPasswordFile();
    if (mp == null) {
      mp=passwords.get(""String_Node_Str"");
      if (mp == null) {
        mp=super.readPassword(strings.get(""String_Node_Str""));
      }
    }
    if (mp == null)     throw new CommandException(strings.get(""String_Node_Str""));
    if (!super.verifyMasterPassword(mp))     throw new CommandException(strings.get(""String_Node_Str""));
    String nmp=getPassword(""String_Node_Str"",strings.get(""String_Node_Str""),true);
    if (nmp == null)     throw new CommandException(strings.get(""String_Node_Str""));
    domainConfig.put(DomainConfig.K_MASTER_PASSWORD,mp);
    domainConfig.put(DomainConfig.K_NEW_MASTER_PASSWORD,nmp);
    domainConfig.put(DomainConfig.K_SAVE_MASTER_PASSWORD,savemp);
    manager.changeMasterPassword(domainConfig);
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}"
29729,"private void doDispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (DispatcherType.ASYNC != dispatcherType) {
    if (response.isCommitted()) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"");
      throw new IllegalStateException(sm.getString(""String_Node_Str""));
    }
    try {
      response.resetBuffer();
    }
 catch (    IllegalStateException e) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + e);
      throw e;
    }
  }
  if (DispatcherType.INCLUDE != dispatcherType) {
    DispatchTargetsInfo dtInfo=(DispatchTargetsInfo)request.getAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR);
    if (dtInfo == null) {
      dtInfo=new DispatchTargetsInfo();
      request.setAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR,dtInfo);
    }
    if (servletPath == null && pathInfo == null) {
      dtInfo.addDispatchTarget(wrapper.getServletName(),true);
    }
 else {
      dtInfo.addDispatchTarget(getCombinedPath(),false);
    }
  }
  State state=new State(request,response,dispatcherType);
  HttpServletRequest hrequest=null;
  if (request instanceof HttpServletRequest) {
    hrequest=(HttpServletRequest)request;
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  if ((hrequest == null) || (hresponse == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    processRequest(request,response,state);
    unwrapRequest(state);
  }
 else   if ((servletPath == null) && (pathInfo == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.setRequestURI(hrequest.getRequestURI());
    wrequest.setContextPath(hrequest.getContextPath());
    wrequest.setServletPath(hrequest.getServletPath());
    wrequest.setPathInfo(hrequest.getPathInfo());
    wrequest.setQueryString(hrequest.getQueryString());
    processRequest(request,response,state);
    wrequest.recycle();
    unwrapRequest(state);
  }
 else {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    if ((DispatcherType.FORWARD == dispatcherType && hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) || (DispatcherType.ASYNC == dispatcherType && hrequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI) == null)) {
      wrequest.initSpecialAttributes(hrequest.getRequestURI(),hrequest.getContextPath(),hrequest.getServletPath(),hrequest.getPathInfo(),hrequest.getQueryString());
    }
    String targetContextPath=context.getPath();
    RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(wrequest);
    String originContextPath=null;
    if (reqFacHelper != null) {
      originContextPath=reqFacHelper.getContextPath(false);
    }
 else {
      originContextPath=wrequest.getContextPath();
    }
    if (originContextPath != null && originContextPath.equals(targetContextPath)) {
      targetContextPath=hrequest.getContextPath();
    }
    wrequest.setContextPath(targetContextPath);
    wrequest.setRequestURI(requestURI);
    wrequest.setServletPath(servletPath);
    wrequest.setPathInfo(pathInfo);
    if (queryString != null) {
      wrequest.setQueryString(queryString);
      wrequest.setQueryParams(queryString);
    }
    processRequest(request,response,state);
    wrequest.recycle();
    unwrapRequest(state);
  }
}","private void doDispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (DispatcherType.ASYNC != dispatcherType) {
    if (response.isCommitted()) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"");
      throw new IllegalStateException(sm.getString(""String_Node_Str""));
    }
    try {
      response.resetBuffer();
    }
 catch (    IllegalStateException e) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + e);
      throw e;
    }
  }
  if (DispatcherType.INCLUDE != dispatcherType) {
    DispatchTargetsInfo dtInfo=(DispatchTargetsInfo)request.getAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR);
    if (dtInfo == null) {
      dtInfo=new DispatchTargetsInfo();
      request.setAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR,dtInfo);
    }
    if (servletPath == null && pathInfo == null) {
      dtInfo.addDispatchTarget(wrapper.getServletName(),true);
    }
 else {
      dtInfo.addDispatchTarget(getCombinedPath(),false);
    }
  }
  State state=new State(request,response,dispatcherType);
  HttpServletRequest hrequest=null;
  if (request instanceof HttpServletRequest) {
    hrequest=(HttpServletRequest)request;
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  if ((hrequest == null) || (hresponse == null)) {
    processRequest(request,response,state);
    unwrapRequest(state);
  }
 else   if ((servletPath == null) && (pathInfo == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.setRequestURI(hrequest.getRequestURI());
    wrequest.setContextPath(hrequest.getContextPath());
    wrequest.setServletPath(hrequest.getServletPath());
    wrequest.setPathInfo(hrequest.getPathInfo());
    wrequest.setQueryString(hrequest.getQueryString());
    processRequest(request,response,state);
    wrequest.recycle();
    unwrapRequest(state);
  }
 else {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    if ((DispatcherType.FORWARD == dispatcherType && hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) || (DispatcherType.ASYNC == dispatcherType && hrequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI) == null)) {
      wrequest.initSpecialAttributes(hrequest.getRequestURI(),hrequest.getContextPath(),hrequest.getServletPath(),hrequest.getPathInfo(),hrequest.getQueryString());
    }
    String targetContextPath=context.getPath();
    RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(wrequest);
    String originContextPath=null;
    if (reqFacHelper != null) {
      originContextPath=reqFacHelper.getContextPath(false);
    }
 else {
      originContextPath=wrequest.getContextPath();
    }
    if (originContextPath != null && originContextPath.equals(targetContextPath)) {
      targetContextPath=hrequest.getContextPath();
    }
    wrequest.setContextPath(targetContextPath);
    wrequest.setRequestURI(requestURI);
    wrequest.setServletPath(servletPath);
    wrequest.setPathInfo(pathInfo);
    if (queryString != null) {
      wrequest.setQueryString(queryString);
      wrequest.setQueryParams(queryString);
    }
    processRequest(request,response,state);
    wrequest.recycle();
    unwrapRequest(state);
  }
}"
29730,"/** 
 * Set the work directory for this Context.
 * @param workDir The new work directory
 */
public void setWorkDir(String workDir){
synchronized (this) {
    this.workDir=workDir;
  }
  if (started) {
    postWorkDirectory();
  }
}","/** 
 * Set the work directory for this Context.
 * @param workDir The new work directory
 */
public void setWorkDir(String workDir){
synchronized (this) {
    this.workDir=workDir;
    if (started) {
      postWorkDirectory();
    }
  }
}"
29731,"/** 
 * Cast to a StandardContext right away, as it will be needed later.
 * @see org.apache.catalina.Contained#setContainer(org.apache.catalina.Container)
 */
public void setContainer(Container container){
  super.setContainer(container);
  context=(StandardContext)container;
}","/** 
 * Cast to a StandardContext right away, as it will be needed later.
 * @see org.apache.catalina.Contained#setContainer(org.apache.catalina.Container)
 */
public void setContainer(Container container){
  super.setContainer(container);
  if (container instanceof StandardContext) {
    context=(StandardContext)container;
  }
}"
29732,"public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  oname=name;
  mserver=server;
  domain=name.getDomain();
  type=name.getKeyProperty(""String_Node_Str"");
  if (type == null) {
    type=name.getKeyProperty(""String_Node_Str"");
  }
  String j2eeApp=name.getKeyProperty(""String_Node_Str"");
  String j2eeServer=name.getKeyProperty(""String_Node_Str"");
  if (j2eeApp == null) {
    j2eeApp=""String_Node_Str"";
  }
  if (j2eeServer == null) {
    j2eeServer=""String_Node_Str"";
  }
  suffix=""String_Node_Str"" + j2eeApp + ""String_Node_Str""+ j2eeServer;
  return name;
}","public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  oname=name;
  domain=name.getDomain();
  type=name.getKeyProperty(""String_Node_Str"");
  if (type == null) {
    type=name.getKeyProperty(""String_Node_Str"");
  }
  String j2eeApp=name.getKeyProperty(""String_Node_Str"");
  String j2eeServer=name.getKeyProperty(""String_Node_Str"");
  if (j2eeApp == null) {
    j2eeApp=""String_Node_Str"";
  }
  if (j2eeServer == null) {
    j2eeServer=""String_Node_Str"";
  }
  suffix=""String_Node_Str"" + j2eeApp + ""String_Node_Str""+ j2eeServer;
  return name;
}"
29733,"/** 
 * Delegate a request to add a child Context to our associated Host.
 * @param child The child Context to be added
 */
public void addChild(Container child){
  Context context=(Context)child;
  String contextPath=context.getPath();
  if (contextPath == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
 else   if (!contextPath.equals(""String_Node_Str"") && !contextPath.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(sm.getString(""String_Node_Str"",contextPath));
  if (host.findChild(contextPath) != null)   throw new IllegalStateException(sm.getString(""String_Node_Str"",contextPath));
  if (this.overrideDocBase != null)   context.setDocBase(this.overrideDocBase);
  if (this.overrideConfigFile != null)   context.setConfigFile(this.overrideConfigFile);
  host.fireContainerEvent(PRE_INSTALL_EVENT,context);
  host.addChild(child);
  host.fireContainerEvent(INSTALL_EVENT,context);
}","/** 
 * Delegate a request to add a child Context to our associated Host.
 * @param child The child Context to be added
 */
public void addChild(Container child){
  Context context=null;
  String contextPath=null;
  if (child instanceof Context) {
    context=(Context)child;
    contextPath=context.getPath();
  }
  if (contextPath == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
 else   if (!contextPath.equals(""String_Node_Str"") && !contextPath.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(sm.getString(""String_Node_Str"",contextPath));
  if (host.findChild(contextPath) != null)   throw new IllegalStateException(sm.getString(""String_Node_Str"",contextPath));
  if (this.overrideDocBase != null)   context.setDocBase(this.overrideDocBase);
  if (this.overrideConfigFile != null)   context.setConfigFile(this.overrideConfigFile);
  host.fireContainerEvent(PRE_INSTALL_EVENT,context);
  host.addChild(child);
  host.fireContainerEvent(INSTALL_EVENT,context);
}"
29734,"/** 
 * Set the <code>Container</code> that handles requests for all <code>Connectors</code> associated with this Service.
 * @param container The new Container
 */
public void setContainer(Container container){
  Container oldContainer=this.container;
  if ((oldContainer != null) && (oldContainer instanceof Engine))   ((Engine)oldContainer).setService(null);
  this.container=container;
  if ((this.container != null) && (this.container instanceof Engine))   ((Engine)this.container).setService(this);
  if (started && (this.container != null) && (this.container instanceof Lifecycle)) {
    try {
      ((Lifecycle)this.container).start();
    }
 catch (    LifecycleException e) {
    }
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++)     connectors[i].setContainer(this.container);
  }
  if (started && (oldContainer != null) && (oldContainer instanceof Lifecycle)) {
    try {
      ((Lifecycle)oldContainer).stop();
    }
 catch (    LifecycleException e) {
    }
  }
  support.firePropertyChange(""String_Node_Str"",oldContainer,this.container);
}","/** 
 * Set the <code>Container</code> that handles requests for all <code>Connectors</code> associated with this Service.
 * @param container The new Container
 */
public void setContainer(Container container){
  Container oldContainer=this.container;
  if ((oldContainer != null) && (oldContainer instanceof Engine))   ((Engine)oldContainer).setService(null);
  this.container=container;
  if (this.container instanceof Engine)   ((Engine)this.container).setService(this);
  if (started && (this.container != null) && (this.container instanceof Lifecycle)) {
    try {
      ((Lifecycle)this.container).start();
    }
 catch (    LifecycleException e) {
    }
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++)     connectors[i].setContainer(this.container);
  }
  if (started && (oldContainer != null) && (oldContainer instanceof Lifecycle)) {
    try {
      ((Lifecycle)oldContainer).stop();
    }
 catch (    LifecycleException e) {
    }
  }
  support.firePropertyChange(""String_Node_Str"",oldContainer,this.container);
}"
29735,"/** 
 * Set the Container with which this Logger has been associated.
 * @param container The associated Container
 */
public void setContainer(Container container){
  if ((this.container != null) && (this.container instanceof Context))   ((Context)this.container).removePropertyChangeListener(this);
  Container oldContainer=this.container;
  this.container=container;
  support.firePropertyChange(""String_Node_Str"",oldContainer,this.container);
  if ((this.container != null) && (this.container instanceof Context)) {
    setReloadable(((Context)this.container).getReloadable());
    ((Context)this.container).addPropertyChangeListener(this);
  }
}","/** 
 * Set the Container with which this Logger has been associated.
 * @param container The associated Container
 */
public void setContainer(Container container){
  if ((this.container != null) && (this.container instanceof Context))   ((Context)this.container).removePropertyChangeListener(this);
  Container oldContainer=this.container;
  this.container=container;
  support.firePropertyChange(""String_Node_Str"",oldContainer,this.container);
  if (this.container instanceof Context) {
    setReloadable(((Context)this.container).getReloadable());
    ((Context)this.container).addPropertyChangeListener(this);
  }
}"
29736,"/** 
 * Check if sendfile can be used.
 */
protected boolean checkSendfile(HttpServletRequest request,HttpServletResponse response,CacheEntry entry,long length,Range range){
  if ((sendfileSize > 0) && (entry.resource != null) && ((length > sendfileSize) || (entry.resource.getContent() == null))&& (entry.attributes.getCanonicalPath() != null)&& (Boolean.TRUE == request.getAttribute(""String_Node_Str""))&& (request.getClass().getName().equals(""String_Node_Str""))&& (response.getClass().getName().equals(""String_Node_Str""))) {
    request.setAttribute(""String_Node_Str"",entry.attributes.getCanonicalPath());
    if (range == null) {
      request.setAttribute(""String_Node_Str"",Long.valueOf(0L));
      request.setAttribute(""String_Node_Str"",Long.valueOf(length));
    }
 else {
      request.setAttribute(""String_Node_Str"",Long.valueOf(range.start));
      request.setAttribute(""String_Node_Str"",Long.valueOf(range.end + 1));
    }
    request.setAttribute(""String_Node_Str"",this);
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Check if sendfile can be used.
 */
protected boolean checkSendfile(HttpServletRequest request,HttpServletResponse response,CacheEntry entry,long length,Range range){
  if ((sendfileSize > 0) && (entry.resource != null) && ((length > sendfileSize) || (entry.resource.getContent() == null))&& (entry.attributes.getCanonicalPath() != null)&& (Boolean.TRUE.equals(request.getAttribute(""String_Node_Str"")))&& (request.getClass().getName().equals(""String_Node_Str""))&& (response.getClass().getName().equals(""String_Node_Str""))) {
    request.setAttribute(""String_Node_Str"",entry.attributes.getCanonicalPath());
    if (range == null) {
      request.setAttribute(""String_Node_Str"",Long.valueOf(0L));
      request.setAttribute(""String_Node_Str"",Long.valueOf(length));
    }
 else {
      request.setAttribute(""String_Node_Str"",Long.valueOf(range.start));
      request.setAttribute(""String_Node_Str"",Long.valueOf(range.end + 1));
    }
    request.setAttribute(""String_Node_Str"",this);
    return true;
  }
 else {
    return false;
  }
}"
29737,"public SSIMediator(SSIExternalResolver ssiExternalResolver,long lastModifiedDate,int debug){
  this.ssiExternalResolver=ssiExternalResolver;
  this.lastModifiedDate=lastModifiedDate;
  this.debug=debug;
  setConfigTimeFmt(DEFAULT_CONFIG_TIME_FMT,true);
}","public SSIMediator(SSIExternalResolver ssiExternalResolver,long lastModifiedDate,int debug){
  this.ssiExternalResolver=ssiExternalResolver;
  this.lastModifiedDate=lastModifiedDate;
  setConfigTimeFmt(DEFAULT_CONFIG_TIME_FMT,true);
}"
29738,"/** 
 * Process the application configuration file, if it exists.
 */
protected void applicationConfig() throws LifecycleException {
  String altDDName=null;
  InputStream stream=null;
  ServletContext servletContext=context.getServletContext();
  if (servletContext != null) {
    altDDName=(String)servletContext.getAttribute(Globals.ALT_DD_ATTR);
    if (altDDName != null) {
      try {
        stream=new FileInputStream(altDDName);
      }
 catch (      FileNotFoundException e) {
        throw new LifecycleException(sm.getString(""String_Node_Str"",altDDName));
      }
    }
 else {
      stream=servletContext.getResourceAsStream(Constants.ApplicationWebXml);
    }
  }
  if (stream == null) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str"") + ""String_Node_Str"" + context);
    }
    return;
  }
  long t1=System.currentTimeMillis();
  URL url=null;
synchronized (webDigester) {
    try {
      if (altDDName != null) {
        url=new File(altDDName).toURL();
      }
 else {
        url=servletContext.getResource(Constants.ApplicationWebXml);
      }
      if (url != null) {
        InputSource is=new InputSource(url.toExternalForm());
        is.setByteStream(stream);
        webDigester.clear();
        webDigester.setDebug(getDebug());
        if (context instanceof StandardContext) {
          ((StandardContext)context).setReplaceWelcomeFiles(true);
        }
        webDigester.setUseContextClassLoader(false);
        webDigester.push(context);
        webDigester.parse(is);
      }
 else {
        if (log.isLoggable(Level.INFO)) {
          log.info(""String_Node_Str"" + context);
        }
      }
    }
 catch (    SAXParseException e) {
      throw new LifecycleException(sm.getString(""String_Node_Str"",e.getLineNumber(),e.getColumnNumber()),e);
    }
catch (    Exception e) {
      throw new LifecycleException(sm.getString(""String_Node_Str""),e);
    }
 finally {
      try {
        if (stream != null) {
          stream.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str""),e);
      }
      webDigester.push(null);
    }
  }
  webRuleSet.recycle();
  long t2=System.currentTimeMillis();
  if (context instanceof StandardContext) {
    ((StandardContext)context).setStartupTime(t2 - t1);
  }
}","/** 
 * Process the application configuration file, if it exists.
 */
protected void applicationConfig() throws LifecycleException {
  String altDDName=null;
  InputStream stream=null;
  ServletContext servletContext=context.getServletContext();
  if (servletContext != null) {
    altDDName=(String)servletContext.getAttribute(Globals.ALT_DD_ATTR);
    if (altDDName != null) {
      try {
        stream=new FileInputStream(altDDName);
      }
 catch (      FileNotFoundException e) {
        throw new LifecycleException(sm.getString(""String_Node_Str"",altDDName));
      }
    }
 else {
      stream=servletContext.getResourceAsStream(Constants.ApplicationWebXml);
    }
  }
  if (stream == null) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str"") + ""String_Node_Str"" + context);
    }
    return;
  }
  long t1=System.currentTimeMillis();
  URL url=null;
synchronized (webDigester) {
    try {
      if (altDDName != null) {
        url=new File(altDDName).toURL();
      }
 else {
        url=servletContext.getResource(Constants.ApplicationWebXml);
      }
      if (url != null) {
        InputSource is=new InputSource(url.toExternalForm());
        is.setByteStream(stream);
        webDigester.clear();
        webDigester.setDebug(getDebug());
        if (context instanceof StandardContext) {
          ((StandardContext)context).setReplaceWelcomeFiles(true);
        }
        webDigester.setUseContextClassLoader(false);
        webDigester.push(context);
        webDigester.parse(is);
      }
 else {
        if (log.isLoggable(Level.INFO)) {
          log.info(""String_Node_Str"" + context);
        }
      }
    }
 catch (    SAXParseException e) {
      throw new LifecycleException(sm.getString(""String_Node_Str"",e.getLineNumber(),e.getColumnNumber()),e);
    }
catch (    Exception e) {
      throw new LifecycleException(sm.getString(""String_Node_Str""),e);
    }
 finally {
      try {
        stream.close();
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str""),e);
      }
      webDigester.push(null);
    }
  }
  webRuleSet.recycle();
  long t2=System.currentTimeMillis();
  if (context instanceof StandardContext) {
    ((StandardContext)context).setStartupTime(t2 - t1);
  }
}"
29739,"/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public ContextRuleSet(String prefix,boolean create){
  super();
  this.namespaceURI=null;
  this.prefix=prefix;
  this.create=create;
}","/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public ContextRuleSet(String prefix,boolean create){
  super();
  this.prefix=prefix;
  this.create=create;
}"
29740,"/** 
 * Resolve the requested external entity.
 * @param publicId The public identifier of the entity being referenced
 * @param systemId The system identifier of the entity being referenced
 * @exception SAXException if a parsing exception occurs
 */
public InputSource resolveEntity(String publicId,String systemId) throws SAXException {
  if (publicId != null) {
    this.publicId=publicId;
    digester.setPublicId(publicId);
  }
  String entityURL=null;
  if (publicId != null) {
    entityURL=entityValidator.get(publicId);
  }
  String key=null;
  if (entityURL == null && systemId != null) {
    key=systemId.substring(systemId.lastIndexOf('/') + 1);
    entityURL=entityValidator.get(key);
  }
  if (entityURL == null) {
    if (forceLocalSchema) {
      URI u;
      try {
        u=new URI(systemId);
      }
 catch (      URISyntaxException e) {
        throw new SAXException(e);
      }
      String scheme=u.getScheme();
      if (scheme != null && (scheme.equals(""String_Node_Str"") || scheme.equals(""String_Node_Str""))) {
        return (null);
      }
 else {
        throw new SAXException(""String_Node_Str"" + key);
      }
    }
 else {
      return (null);
    }
  }
  try {
    return (new InputSource(entityURL));
  }
 catch (  Exception e) {
    throw new SAXException(e);
  }
}","/** 
 * Resolve the requested external entity.
 * @param publicId The public identifier of the entity being referenced
 * @param systemId The system identifier of the entity being referenced
 * @exception SAXException if a parsing exception occurs
 */
public InputSource resolveEntity(String publicId,String systemId) throws SAXException {
  if (publicId != null) {
    digester.setPublicId(publicId);
  }
  String entityURL=null;
  if (publicId != null) {
    entityURL=entityValidator.get(publicId);
  }
  String key=null;
  if (entityURL == null && systemId != null) {
    key=systemId.substring(systemId.lastIndexOf('/') + 1);
    entityURL=entityValidator.get(key);
  }
  if (entityURL == null) {
    if (forceLocalSchema) {
      URI u;
      try {
        u=new URI(systemId);
      }
 catch (      URISyntaxException e) {
        throw new SAXException(e);
      }
      String scheme=u.getScheme();
      if (scheme != null && (scheme.equals(""String_Node_Str"") || scheme.equals(""String_Node_Str""))) {
        return (null);
      }
 else {
        throw new SAXException(""String_Node_Str"" + key);
      }
    }
 else {
      return (null);
    }
  }
  try {
    return (new InputSource(entityURL));
  }
 catch (  Exception e) {
    throw new SAXException(e);
  }
}"
29741,"public void postInvoke(Request request,Response response) throws IOException, ServletException {
  Context context=request.getContext();
  if (context == null) {
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,sm.getString(""String_Node_Str""));
    return;
  }
  Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  Manager manager=context.getManager();
  String newsessionId=null;
  if (request instanceof org.apache.catalina.connector.Request) {
    Session sess;
    try {
      sess=((org.apache.catalina.connector.Request)request).getSessionInternal();
    }
 catch (    Exception ex) {
      sess=null;
    }
    if (sess != null) {
      newsessionId=sess.getIdInternal();
    }
  }
 else {
    HttpSession hsess;
    try {
      hsess=hreq.getSession();
    }
 catch (    Exception ex) {
      hsess=null;
    }
    if (hsess != null) {
      newsessionId=hsess.getId();
    }
  }
  log(""String_Node_Str"" + newsessionId);
  if (newsessionId != null) {
    if (manager instanceof PersistentManager) {
      Session session=manager.findSession(newsessionId);
      Store store=((PersistentManager)manager).getStore();
      if (store != null && session != null && session.isValid() && !isSessionStale(session,System.currentTimeMillis())) {
        store.save(session);
        ((PersistentManager)manager).removeSuper(session);
        session.recycle();
      }
 else {
        log(""String_Node_Str"" + store + ""String_Node_Str""+ session+ ""String_Node_Str""+ session.isValid()+ ""String_Node_Str""+ isSessionStale(session,System.currentTimeMillis()));
      }
    }
 else {
      log(""String_Node_Str"" + manager);
    }
  }
}","public void postInvoke(Request request,Response response) throws IOException, ServletException {
  Context context=request.getContext();
  if (context == null) {
    ((HttpServletResponse)response.getResponse()).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,sm.getString(""String_Node_Str""));
    return;
  }
  Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  Manager manager=context.getManager();
  String newsessionId=null;
  if (request instanceof org.apache.catalina.connector.Request) {
    Session sess;
    try {
      sess=((org.apache.catalina.connector.Request)request).getSessionInternal();
    }
 catch (    Exception ex) {
      sess=null;
    }
    if (sess != null) {
      newsessionId=sess.getIdInternal();
    }
  }
 else {
    HttpSession hsess;
    try {
      hsess=hreq.getSession();
    }
 catch (    Exception ex) {
      hsess=null;
    }
    if (hsess != null) {
      newsessionId=hsess.getId();
    }
  }
  log(""String_Node_Str"" + newsessionId);
  if (newsessionId != null) {
    if (manager instanceof PersistentManager) {
      Session session=manager.findSession(newsessionId);
      Store store=((PersistentManager)manager).getStore();
      if (store != null && session != null && session.isValid() && !isSessionStale(session,System.currentTimeMillis())) {
        store.save(session);
        ((PersistentManager)manager).removeSuper(session);
        session.recycle();
      }
 else       if (session != null) {
        log(""String_Node_Str"" + store + ""String_Node_Str""+ session+ ""String_Node_Str""+ session.isValid()+ ""String_Node_Str""+ isSessionStale(session,System.currentTimeMillis()));
      }
    }
 else {
      log(""String_Node_Str"" + manager);
    }
  }
}"
29742,"/** 
 * Process the end of this element.
 */
public void end() throws Exception {
  Object parameters[]=null;
  if (paramCount > 0) {
    parameters=(Object[])digester.popParams();
    if (digester.log.isLoggable(Level.FINEST)) {
      for (int i=0, size=parameters.length; i < size; i++) {
        digester.log.finest(""String_Node_Str"" + i + ""String_Node_Str""+ parameters[i]);
      }
    }
    if (paramCount == 1 && parameters[0] == null) {
      return;
    }
  }
 else   if (paramTypes != null && paramTypes.length != 0) {
    if (bodyText == null) {
      return;
    }
    parameters=new Object[1];
    parameters[0]=bodyText;
    if (paramTypes.length == 0) {
      paramTypes=new Class[1];
      paramTypes[0]=""String_Node_Str"".getClass();
    }
  }
  Object paramValues[]=new Object[paramTypes.length];
  for (int i=0; i < paramTypes.length; i++) {
    if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
      paramValues[i]=IntrospectionUtils.convert((String)parameters[i],paramTypes[i]);
    }
 else {
      paramValues[i]=parameters[i];
    }
  }
  Object target;
  if (targetOffset >= 0) {
    target=digester.peek(targetOffset);
  }
 else {
    target=digester.peek(digester.getCount() + targetOffset);
  }
  if (target == null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(digester.match);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(targetOffset);
    sb.append(""String_Node_Str"");
    sb.append(digester.getCount());
    sb.append(""String_Node_Str"");
    throw new org.xml.sax.SAXException(sb.toString());
  }
  if (digester.log.isLoggable(Level.FINE)) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(digester.match);
    sb.append(""String_Node_Str"");
    sb.append(target.getClass().getName());
    sb.append(""String_Node_Str"");
    sb.append(methodName);
    sb.append(""String_Node_Str"");
    for (int i=0; i < paramValues.length; i++) {
      if (i > 0) {
        sb.append(""String_Node_Str"");
      }
      if (paramValues[i] == null) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(paramValues[i].toString());
      }
      sb.append(""String_Node_Str"");
      if (paramTypes[i] == null) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(paramTypes[i].getName());
      }
    }
    sb.append(""String_Node_Str"");
    digester.log.fine(sb.toString());
  }
  Object result=IntrospectionUtils.callMethodN(target,methodName,paramValues,paramTypes);
  processMethodCallResult(result);
}","/** 
 * Process the end of this element.
 */
public void end() throws Exception {
  Object parameters[]=null;
  if (paramCount > 0) {
    parameters=(Object[])digester.popParams();
    if (digester.log.isLoggable(Level.FINEST)) {
      for (int i=0, size=parameters.length; i < size; i++) {
        digester.log.finest(""String_Node_Str"" + i + ""String_Node_Str""+ parameters[i]);
      }
    }
    if (paramCount == 1 && parameters[0] == null) {
      return;
    }
  }
 else   if (paramTypes != null && paramTypes.length != 0) {
    if (bodyText == null) {
      return;
    }
    parameters=new Object[1];
    parameters[0]=bodyText;
    if (paramTypes.length == 0) {
      paramTypes=new Class[1];
      paramTypes[0]=""String_Node_Str"".getClass();
    }
  }
  Object paramValues[]=null;
  if (paramTypes != null) {
    paramValues=new Object[paramTypes.length];
    for (int i=0; i < paramTypes.length; i++) {
      if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
        paramValues[i]=IntrospectionUtils.convert((String)parameters[i],paramTypes[i]);
      }
 else {
        paramValues[i]=parameters[i];
      }
    }
  }
  Object target;
  if (targetOffset >= 0) {
    target=digester.peek(targetOffset);
  }
 else {
    target=digester.peek(digester.getCount() + targetOffset);
  }
  if (target == null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(digester.match);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(targetOffset);
    sb.append(""String_Node_Str"");
    sb.append(digester.getCount());
    sb.append(""String_Node_Str"");
    throw new org.xml.sax.SAXException(sb.toString());
  }
  if (digester.log.isLoggable(Level.FINE)) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(digester.match);
    sb.append(""String_Node_Str"");
    sb.append(target.getClass().getName());
    sb.append(""String_Node_Str"");
    sb.append(methodName);
    sb.append(""String_Node_Str"");
    for (int i=0; paramValues != null && i < paramValues.length; i++) {
      if (i > 0) {
        sb.append(""String_Node_Str"");
      }
      if (paramValues[i] == null) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(paramValues[i].toString());
      }
      sb.append(""String_Node_Str"");
      if (paramTypes[i] == null) {
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(paramTypes[i].getName());
      }
    }
    sb.append(""String_Node_Str"");
    digester.log.fine(sb.toString());
  }
  Object result=IntrospectionUtils.callMethodN(target,methodName,paramValues,paramTypes);
  processMethodCallResult(result);
}"
29743,"/** 
 * Invoke a particular method on this MBean, and return any returned value. <p><strong>IMPLEMENTATION NOTE</strong> - This implementation will attempt to invoke this method on the MBean itself, or (if not available) on the managed resource object associated with this MBean.</p>
 * @param name Name of the operation to be invoked
 * @param params Array containing the method parameters of this operation
 * @param signature Array containing the class names representingthe signature of this operation
 * @exception MBeanException if the initializer of an objectthrows an exception
 * @exception ReflectioNException if a Java reflection exceptionoccurs when invoking a method
 */
public Object invoke(String name,Object params[],String signature[]) throws MBeanException, ReflectionException {
  if ((resource instanceof DynamicMBean) && !(resource instanceof BaseModelMBean)) {
    return ((DynamicMBean)resource).invoke(name,params,signature);
  }
  if (name == null)   throw new RuntimeOperationsException(new IllegalArgumentException(""String_Node_Str""),""String_Node_Str"");
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"" + name);
  Method method=invokeAttMap.get(name);
  if (method == null) {
    if (params == null)     params=new Object[0];
    if (signature == null)     signature=new String[0];
    if (params.length != signature.length)     throw new RuntimeOperationsException(new IllegalArgumentException(""String_Node_Str""),""String_Node_Str"");
    ModelMBeanOperationInfo opInfo=info.getOperation(name);
    if (opInfo == null)     throw new MBeanException(new ServiceNotFoundException(""String_Node_Str"" + name),""String_Node_Str"" + name);
    Class types[]=new Class[signature.length];
    for (int i=0; i < signature.length; i++) {
      types[i]=getAttributeClass(signature[i]);
    }
    Object object=null;
    Exception exception=null;
    try {
      object=this;
      method=object.getClass().getMethod(name,types);
    }
 catch (    NoSuchMethodException e) {
      exception=e;
      ;
    }
    try {
      if ((method == null) && (resource != null)) {
        object=resource;
        method=object.getClass().getMethod(name,types);
      }
    }
 catch (    NoSuchMethodException e) {
      exception=e;
    }
    if (method == null) {
      throw new ReflectionException(exception,""String_Node_Str"" + name + ""String_Node_Str"");
    }
    invokeAttMap.put(name,method);
  }
  Object result=null;
  try {
    if (method.getDeclaringClass().isAssignableFrom(this.getClass())) {
      result=method.invoke(this,params);
    }
 else {
      result=method.invoke(resource,params);
    }
  }
 catch (  InvocationTargetException e) {
    Throwable t=e.getTargetException();
    log.log(Level.SEVERE,""String_Node_Str"" + name,t);
    if (t == null)     t=e;
    if (t instanceof RuntimeException)     throw new RuntimeOperationsException((RuntimeException)t,""String_Node_Str"" + name);
 else     if (t instanceof Error)     throw new RuntimeErrorException((Error)t,""String_Node_Str"" + name);
 else     throw new MBeanException((Exception)t,""String_Node_Str"" + name);
  }
catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + name,e);
    throw new MBeanException(e,""String_Node_Str"" + name);
  }
  return (result);
}","/** 
 * Invoke a particular method on this MBean, and return any returned value. <p><strong>IMPLEMENTATION NOTE</strong> - This implementation will attempt to invoke this method on the MBean itself, or (if not available) on the managed resource object associated with this MBean.</p>
 * @param name Name of the operation to be invoked
 * @param params Array containing the method parameters of this operation
 * @param signature Array containing the class names representingthe signature of this operation
 * @exception MBeanException if the initializer of an objectthrows an exception
 * @exception ReflectioNException if a Java reflection exceptionoccurs when invoking a method
 */
public Object invoke(String name,Object params[],String signature[]) throws MBeanException, ReflectionException {
  if ((resource instanceof DynamicMBean) && !(resource instanceof BaseModelMBean)) {
    return ((DynamicMBean)resource).invoke(name,params,signature);
  }
  if (name == null)   throw new RuntimeOperationsException(new IllegalArgumentException(""String_Node_Str""),""String_Node_Str"");
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"" + name);
  Method method=invokeAttMap.get(name);
  if (method == null) {
    if (params == null)     params=new Object[0];
    if (signature == null)     signature=new String[0];
    if (params.length != signature.length)     throw new RuntimeOperationsException(new IllegalArgumentException(""String_Node_Str""),""String_Node_Str"");
    ModelMBeanOperationInfo opInfo=info.getOperation(name);
    if (opInfo == null)     throw new MBeanException(new ServiceNotFoundException(""String_Node_Str"" + name),""String_Node_Str"" + name);
    Class types[]=new Class[signature.length];
    for (int i=0; i < signature.length; i++) {
      types[i]=getAttributeClass(signature[i]);
    }
    Object object=null;
    Exception exception=null;
    try {
      object=this;
      method=object.getClass().getMethod(name,types);
    }
 catch (    NoSuchMethodException e) {
      exception=e;
      ;
    }
    try {
      if ((method == null) && (resource != null)) {
        object=resource;
        method=object.getClass().getMethod(name,types);
      }
    }
 catch (    NoSuchMethodException e) {
      exception=e;
    }
    if (method == null) {
      throw new ReflectionException(exception,""String_Node_Str"" + name + ""String_Node_Str"");
    }
    invokeAttMap.put(name,method);
  }
  Object result=null;
  try {
    if (method.getDeclaringClass().isAssignableFrom(this.getClass())) {
      result=method.invoke(this,params);
    }
 else {
      result=method.invoke(resource,params);
    }
  }
 catch (  InvocationTargetException e) {
    Throwable t=e.getTargetException();
    log.log(Level.SEVERE,""String_Node_Str"" + name,t);
    if (t == null)     t=e;
    if (t instanceof RuntimeException)     throw new RuntimeOperationsException((RuntimeException)t,""String_Node_Str"" + name);
 else     if (t instanceof Error)     throw new RuntimeErrorException((Error)t,""String_Node_Str"" + name);
 else     if (t instanceof Exception)     throw new MBeanException((Exception)t,""String_Node_Str"" + name);
  }
catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + name,e);
    throw new MBeanException(e,""String_Node_Str"" + name);
  }
  return (result);
}"
29744,"static public URI getStaticURI(){
  if (uri == null) {
    try {
      uri=new URI(COOKIE_URI);
    }
 catch (    URISyntaxException e) {
    }
  }
  return uri;
}","public URI getStaticURI(){
  if (uri == null) {
    try {
      uri=new URI(COOKIE_URI);
    }
 catch (    URISyntaxException e) {
    }
  }
  return uri;
}"
29745,"private void addCookieHeaders(final URLConnection urlConnection){
  long modifiedTime=sessionCache.lastModified();
  if (modifiedTime == 0) {
    return;
  }
  ((CookieManager)CookieHandler.getDefault()).getCookieStore().removeAll();
  cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
  try {
    ((ClientCookieStore)cookieManager.getCookieStore()).load();
  }
 catch (  IOException e) {
    logger.fine(""String_Node_Str"" + e.toString());
    return;
  }
  if (isSessionCookieExpired(cookieManager,modifiedTime)) {
    logger.fine(""String_Node_Str"");
    sessionCache.delete();
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean hasCookies=false;
  for (  HttpCookie cookie : cookieManager.getCookieStore().getCookies()) {
    hasCookies=true;
    sb.append(""String_Node_Str"").append(cookie.toString());
  }
  if (hasCookies) {
    urlConnection.setRequestProperty(COOKIE_HEADER,sb.toString());
  }
}","private void addCookieHeaders(final URLConnection urlConnection){
  long modifiedTime=sessionCache.lastModified();
  if (modifiedTime == 0) {
    return;
  }
  ((CookieManager)CookieHandler.getDefault()).getCookieStore().removeAll();
  cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
  try {
    ((ClientCookieStore)cookieManager.getCookieStore()).load();
  }
 catch (  IOException e) {
    logger.fine(""String_Node_Str"" + e.toString());
    return;
  }
  if (isSessionCookieExpired(cookieManager,modifiedTime)) {
    logger.fine(""String_Node_Str"");
    if (!sessionCache.delete()) {
      logger.fine(""String_Node_Str"");
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean hasCookies=false;
  for (  HttpCookie cookie : cookieManager.getCookieStore().getCookies()) {
    hasCookies=true;
    sb.append(""String_Node_Str"").append(cookie.toString());
  }
  if (hasCookies) {
    urlConnection.setRequestProperty(COOKIE_HEADER,sb.toString());
  }
}"
29746,"/** 
 * Set the appropriate context attribute for our work directory.
 */
private void postWorkDirectory(){
  String workDir=getWorkDir();
  if (workDir == null || workDir.length() == 0) {
    String hostName=null;
    String engineName=null;
    String hostWorkDir=null;
    Container parentHost=getParent();
    if (parentHost != null) {
      hostName=parentHost.getName();
      if (parentHost instanceof StandardHost) {
        hostWorkDir=((StandardHost)parentHost).getWorkDir();
      }
      Container parentEngine=parentHost.getParent();
      if (parentEngine != null) {
        engineName=parentEngine.getName();
      }
    }
    if ((hostName == null) || (hostName.length() < 1))     hostName=""String_Node_Str"";
    if ((engineName == null) || (engineName.length() < 1))     engineName=""String_Node_Str"";
    String temp=getPath();
    if (temp.startsWith(""String_Node_Str""))     temp=temp.substring(1);
    temp=temp.replace('/','_');
    temp=temp.replace('\\','_');
    if (temp.length() < 1)     temp=""String_Node_Str"";
    if (hostWorkDir != null) {
      workDir=hostWorkDir + File.separator + temp;
    }
 else {
      workDir=""String_Node_Str"" + File.separator + engineName+ File.separator+ hostName+ File.separator+ temp;
    }
    setWorkDir(workDir);
  }
  File dir=new File(workDir);
  if (!dir.isAbsolute()) {
    File catalinaHome=engineBase();
    String catalinaHomePath=null;
    try {
      catalinaHomePath=catalinaHome.getCanonicalPath();
      dir=new File(catalinaHomePath,workDir);
    }
 catch (    IOException e) {
    }
  }
  dir.mkdirs();
  getServletContext().setAttribute(ServletContext.TEMPDIR,dir);
  context.setAttributeReadOnly(ServletContext.TEMPDIR);
}","/** 
 * Set the appropriate context attribute for our work directory.
 */
private void postWorkDirectory(){
  String workDir=getWorkDir();
  if (workDir == null || workDir.length() == 0) {
    String hostName=null;
    String engineName=null;
    String hostWorkDir=null;
    Container parentHost=getParent();
    if (parentHost != null) {
      hostName=parentHost.getName();
      if (parentHost instanceof StandardHost) {
        hostWorkDir=((StandardHost)parentHost).getWorkDir();
      }
      Container parentEngine=parentHost.getParent();
      if (parentEngine != null) {
        engineName=parentEngine.getName();
      }
    }
    if ((hostName == null) || (hostName.length() < 1))     hostName=""String_Node_Str"";
    if ((engineName == null) || (engineName.length() < 1))     engineName=""String_Node_Str"";
    String temp=getPath();
    if (temp.startsWith(""String_Node_Str""))     temp=temp.substring(1);
    temp=temp.replace('/','_');
    temp=temp.replace('\\','_');
    if (temp.length() < 1)     temp=""String_Node_Str"";
    if (hostWorkDir != null) {
      workDir=hostWorkDir + File.separator + temp;
    }
 else {
      workDir=""String_Node_Str"" + File.separator + engineName+ File.separator+ hostName+ File.separator+ temp;
    }
    setWorkDir(workDir);
  }
  File dir=new File(workDir);
  if (!dir.isAbsolute()) {
    File catalinaHome=engineBase();
    String catalinaHomePath=null;
    try {
      catalinaHomePath=catalinaHome.getCanonicalPath();
      dir=new File(catalinaHomePath,workDir);
    }
 catch (    IOException e) {
    }
  }
  if (!dir.exists() && !dir.mkdirs()) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",dir.getAbsolutePath()));
  }
  getServletContext().setAttribute(ServletContext.TEMPDIR,dir);
  context.setAttributeReadOnly(ServletContext.TEMPDIR);
}"
29747,"/** 
 * Remove an existing web application, attached to the specified context path.  If this application is successfully removed, a ContainerEvent of type <code>REMOVE_EVENT</code> will be sent to all registered listeners, with the removed <code>Context</code> as an argument. Deletes the web application war file and/or directory if they exist in the Host's appBase.
 * @param contextPath The context path of the application to be removed
 * @param undeploy boolean flag to remove web application from server
 * @exception IllegalArgumentException if the specified context pathis malformed (it must be """" or start with a slash)
 * @exception IllegalArgumentException if the specified context path doesnot identify a currently installed web application
 * @exception IOException if an input/output error occurs duringremoval
 */
public void remove(String contextPath,boolean undeploy) throws IOException {
  if (contextPath == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  if (!contextPath.equals(""String_Node_Str"") && !contextPath.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(sm.getString(""String_Node_Str"",contextPath));
  Context context=findDeployedApp(contextPath);
  if (context == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str"",contextPath));
  host.log(sm.getString(""String_Node_Str"",contextPath));
  try {
    File workDir=(File)context.getServletContext().getAttribute(ServletContext.TEMPDIR);
    String configFile=context.getConfigFile();
    host.removeChild(context);
    if (undeploy) {
      boolean isAppBase=false;
      File appBase=new File(host.getAppBase());
      if (!appBase.isAbsolute())       appBase=new File(System.getProperty(""String_Node_Str""),host.getAppBase());
      File contextFile=new File(context.getDocBase());
      File baseDir=contextFile.getParentFile();
      if ((baseDir == null) || (appBase.getCanonicalPath().equals(baseDir.getCanonicalPath()))) {
        isAppBase=true;
      }
      boolean isWAR=false;
      if (contextFile.getName().toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"")) {
        isWAR=true;
      }
      if (isAppBase && host.getAutoDeploy()) {
        String filename=contextFile.getName();
        if (isWAR) {
          filename=filename.substring(0,filename.length() - 4);
        }
        if (contextPath.length() == 0 && filename.equals(""String_Node_Str"") || filename.equals(contextPath.substring(1))) {
          if (!isWAR) {
            long contextLastModified=contextFile.lastModified();
            if (contextFile.isDirectory()) {
              deleteDir(contextFile);
            }
            if (host.isUnpackWARs()) {
              File contextWAR=new File(context.getDocBase() + ""String_Node_Str"");
              if (contextWAR.exists()) {
                if (contextLastModified > contextWAR.lastModified()) {
                  contextWAR.delete();
                }
              }
            }
          }
 else {
            contextFile.delete();
          }
        }
        if (host.isDeployXML() && (configFile != null)) {
          File docBaseXml=new File(configFile);
          docBaseXml.delete();
        }
      }
      if (workDir == null && context instanceof StandardContext && ((StandardContext)context).getWorkDir() != null) {
        workDir=new File(((StandardContext)context).getWorkPath());
      }
      if (workDir != null && workDir.exists()) {
        deleteDir(workDir);
      }
    }
    host.fireContainerEvent(REMOVE_EVENT,context);
  }
 catch (  Exception e) {
    host.log(sm.getString(""String_Node_Str"",contextPath),e);
    throw new IOException(e.toString());
  }
}","/** 
 * Remove an existing web application, attached to the specified context path.  If this application is successfully removed, a ContainerEvent of type <code>REMOVE_EVENT</code> will be sent to all registered listeners, with the removed <code>Context</code> as an argument. Deletes the web application war file and/or directory if they exist in the Host's appBase.
 * @param contextPath The context path of the application to be removed
 * @param undeploy boolean flag to remove web application from server
 * @exception IllegalArgumentException if the specified context pathis malformed (it must be """" or start with a slash)
 * @exception IllegalArgumentException if the specified context path doesnot identify a currently installed web application
 * @exception IOException if an input/output error occurs duringremoval
 */
public void remove(String contextPath,boolean undeploy) throws IOException {
  if (contextPath == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  if (!contextPath.equals(""String_Node_Str"") && !contextPath.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(sm.getString(""String_Node_Str"",contextPath));
  Context context=findDeployedApp(contextPath);
  if (context == null)   throw new IllegalArgumentException(sm.getString(""String_Node_Str"",contextPath));
  host.log(sm.getString(""String_Node_Str"",contextPath));
  try {
    File workDir=(File)context.getServletContext().getAttribute(ServletContext.TEMPDIR);
    String configFile=context.getConfigFile();
    host.removeChild(context);
    if (undeploy) {
      boolean isAppBase=false;
      File appBase=new File(host.getAppBase());
      if (!appBase.isAbsolute())       appBase=new File(System.getProperty(""String_Node_Str""),host.getAppBase());
      File contextFile=new File(context.getDocBase());
      File baseDir=contextFile.getParentFile();
      if ((baseDir == null) || (appBase.getCanonicalPath().equals(baseDir.getCanonicalPath()))) {
        isAppBase=true;
      }
      boolean isWAR=false;
      if (contextFile.getName().toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"")) {
        isWAR=true;
      }
      if (isAppBase && host.getAutoDeploy()) {
        String filename=contextFile.getName();
        if (isWAR) {
          filename=filename.substring(0,filename.length() - 4);
        }
        if (contextPath.length() == 0 && filename.equals(""String_Node_Str"") || filename.equals(contextPath.substring(1))) {
          if (!isWAR) {
            long contextLastModified=contextFile.lastModified();
            if (contextFile.isDirectory()) {
              deleteDir(contextFile);
            }
            if (host.isUnpackWARs()) {
              File contextWAR=new File(context.getDocBase() + ""String_Node_Str"");
              if (contextWAR.exists()) {
                if (contextLastModified > contextWAR.lastModified()) {
                  deleteFile(contextWAR);
                }
              }
            }
          }
 else {
            deleteFile(contextFile);
          }
        }
        if (host.isDeployXML() && (configFile != null)) {
          File docBaseXml=new File(configFile);
          deleteFile(docBaseXml);
        }
      }
      if (workDir == null && context instanceof StandardContext && ((StandardContext)context).getWorkDir() != null) {
        workDir=new File(((StandardContext)context).getWorkPath());
      }
      if (workDir != null && workDir.exists()) {
        deleteDir(workDir);
      }
    }
    host.fireContainerEvent(REMOVE_EVENT,context);
  }
 catch (  Exception e) {
    host.log(sm.getString(""String_Node_Str"",contextPath),e);
    throw new IOException(e.toString());
  }
}"
29748,"/** 
 * Delete the specified directory, including all of its contents and subdirectories recursively.
 * @param dir File object representing the directory to be deleted
 */
protected void deleteDir(File dir){
  String files[]=dir.list();
  if (files == null) {
    files=new String[0];
  }
  for (int i=0; i < files.length; i++) {
    File file=new File(dir,files[i]);
    if (file.isDirectory()) {
      deleteDir(file);
    }
 else {
      file.delete();
    }
  }
  dir.delete();
}","/** 
 * Delete the specified directory, including all of its contents and subdirectories recursively.
 * @param dir File object representing the directory to be deleted
 */
protected void deleteDir(File dir){
  String files[]=dir.list();
  if (files == null) {
    files=new String[0];
  }
  for (int i=0; i < files.length; i++) {
    File file=new File(dir,files[i]);
    if (file.isDirectory()) {
      deleteDir(file);
    }
 else {
      deleteFile(file);
    }
  }
  deleteFile(dir);
}"
29749,"public void removeValues(String[] values){
  this.values.remove(Arrays.asList(values));
}","public void removeValues(String[] values){
  this.values.removeAll(Arrays.asList(values));
}"
29750,"/** 
 * This method checks if the request has a Cookie header and if the instance name serving the request is the same as the jvmRoute information
 * @param req Request to examine the Cookie header
 * @return true if the Cookie header is set and the jvmRoute information is correct
 */
public boolean hasCookieHeaders(Request req){
  for (  String header : req.getHeaders(""String_Node_Str"")) {
    if (header.contains(SESSION_COOKIE_NAME) && (header.substring(header.lastIndexOf(""String_Node_Str"") + 1).equals(server.getName()))) {
      return true;
    }
  }
  return false;
}","/** 
 * This method checks if the request has a Cookie header and if the instance name serving the request is the same as the jvmRoute information
 * @param req Request to examine the Cookie header
 * @return true if the Cookie header is set and the jvmRoute information is correct
 */
public boolean hasCookieHeaders(Request req){
  for (  String header : req.getHeaders(""String_Node_Str"")) {
    int index=header.lastIndexOf('""');
    if (header.contains(SESSION_COOKIE_NAME) && (header.substring((index + 1),header.indexOf(';') - 1).equals(server.getName()))) {
      return true;
    }
  }
  return false;
}"
29751,"/** 
 * Set the work directory for this Context.
 * @param workDir The new work directory
 */
public void setWorkDir(String workDir){
  this.workDir=workDir;
  if (started) {
    postWorkDirectory();
  }
}","/** 
 * Set the work directory for this Context.
 * @param workDir The new work directory
 */
public void setWorkDir(String workDir){
synchronized (this) {
    this.workDir=workDir;
  }
  if (started) {
    postWorkDirectory();
  }
}"
29752,"/** 
 * Set the document root for this Context.  This can be an absolute pathname, a relative pathname, or a URL.
 * @param docBase The new document root
 */
@Override public void setDocBase(String docBase){
  this.docBase=docBase;
}","/** 
 * Set the document root for this Context.  This can be an absolute pathname, a relative pathname, or a URL.
 * @param docBase The new document root
 */
@Override public void setDocBase(String docBase){
synchronized (this) {
    this.docBase=docBase;
  }
}"
29753,"/** 
 * Sets a new pipeline
 */
public void restrictedSetPipeline(Pipeline pl){
  pl.setBasic(new StandardContextValve());
  pipeline=pl;
  hasCustomPipeline=true;
}","/** 
 * Sets a new pipeline
 */
public void restrictedSetPipeline(Pipeline pl){
synchronized (this) {
    pl.setBasic(new StandardContextValve());
    pipeline=pl;
    hasCustomPipeline=true;
  }
}"
29754,"/** 
 * Returns true if the internal naming support is used.
 */
public boolean isUseNaming(){
  return useNaming;
}","/** 
 * Returns true if the internal naming support is used.
 */
public boolean isUseNaming(){
synchronized (this) {
    return useNaming;
  }
}"
29755,"private Wrapper preInvoke(Request request,Response response){
  HttpRequest hreq=(HttpRequest)request;
  if (request.getCheckRestrictedResources()) {
    DataChunk requestPathDC=hreq.getRequestPathMB();
    if ((requestPathDC.startsWithIgnoreCase(""String_Node_Str"",0)) || (requestPathDC.equalsIgnoreCase(""String_Node_Str"")) || (requestPathDC.startsWithIgnoreCase(""String_Node_Str"",0))|| (requestPathDC.equalsIgnoreCase(""String_Node_Str""))) {
      notFound((HttpServletResponse)response.getResponse());
      return null;
    }
  }
  boolean reloaded=false;
  while (((StandardContext)container).getPaused()) {
    reloaded=true;
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  if (reloaded && context.getLoader() != null && context.getLoader().getClassLoader() != null) {
    Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
  }
  Wrapper wrapper=request.getWrapper();
  if (wrapper == null) {
    notFound((HttpServletResponse)response.getResponse());
    return null;
  }
 else   if (wrapper.isUnavailable()) {
    wrapper=(Wrapper)container.findChild(wrapper.getName());
    if (wrapper == null) {
      notFound((HttpServletResponse)response.getResponse());
      return null;
    }
  }
  return wrapper;
}","/** 
 * Log a message on the Logger associated with our Container (if any)
 * @param message Message to be loggedprivate void log(String message) { org.apache.catalina.Logger logger = null; String containerName = null; if (container != null) { logger = container.getLogger(); containerName = container.getName(); } if (logger != null) { logger.log(""StandardContextValve["" + container.getName() + ""]: "" + message); } else { if (log.isLoggable(Level.INFO)) { log.info(""StandardContextValve["" + containerName + ""]: "" + message); } } } / Log a message on the Logger associated with our Container (if any)
 * @param message Message to be logged
 * @param t Associated exceptionprivate void log(String message, Throwable t) { org.apache.catalina.Logger logger = null; String containerName = null; if (container != null) { logger = container.getLogger(); containerName = container.getName(); } if (logger != null) { logger.log(""StandardContextValve["" + container.getName() + ""]: "" + message, t, org.apache.catalina.Logger.WARNING); } else { log.log(Level.WARNING, ""StandardContextValve["" + containerName + ""]: "" + message, t); } }
 */
private Wrapper preInvoke(Request request,Response response){
  HttpRequest hreq=(HttpRequest)request;
  if (request.getCheckRestrictedResources()) {
    DataChunk requestPathDC=hreq.getRequestPathMB();
    if ((requestPathDC.startsWithIgnoreCase(""String_Node_Str"",0)) || (requestPathDC.equalsIgnoreCase(""String_Node_Str"")) || (requestPathDC.startsWithIgnoreCase(""String_Node_Str"",0))|| (requestPathDC.equalsIgnoreCase(""String_Node_Str""))) {
      notFound((HttpServletResponse)response.getResponse());
      return null;
    }
  }
  boolean reloaded=false;
  while (((StandardContext)container).getPaused()) {
    reloaded=true;
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  if (reloaded && context.getLoader() != null && context.getLoader().getClassLoader() != null) {
    Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
  }
  Wrapper wrapper=request.getWrapper();
  if (wrapper == null) {
    notFound((HttpServletResponse)response.getResponse());
    return null;
  }
 else   if (wrapper.isUnavailable()) {
    wrapper=(Wrapper)container.findChild(wrapper.getName());
    if (wrapper == null) {
      notFound((HttpServletResponse)response.getResponse());
      return null;
    }
  }
  return wrapper;
}"
29756,"/** 
 * <p>Set the Valve instance that has been distinguished as the basic Valve for this Pipeline (if any).  Prior to setting the basic Valve, the Valve's <code>setContainer()</code> will be called, if it implements <code>Contained</code>, with the owning Container as an argument.  The method may throw an <code>IllegalArgumentException</code> if this Valve chooses not to be associated with this Container, or <code>IllegalStateException</code> if it is already associated with a different Container.</p>
 * @param valve Valve to be distinguished as the basic Valve
 */
public void setBasic(GlassFishValve valve){
  GlassFishValve oldBasic=this.basic;
  if (oldBasic == valve) {
    return;
  }
  if (oldBasic != null) {
    if (started && (oldBasic instanceof Lifecycle)) {
      try {
        ((Lifecycle)oldBasic).stop();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
    if (oldBasic instanceof Contained) {
      try {
        ((Contained)oldBasic).setContainer(null);
      }
 catch (      Throwable t) {
      }
    }
  }
  if (valve == null) {
    return;
  }
  if (valve instanceof Contained) {
    ((Contained)valve).setContainer(this.container);
  }
  if (started && (valve instanceof Lifecycle)) {
    try {
      ((Lifecycle)valve).start();
    }
 catch (    LifecycleException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
      return;
    }
  }
  this.basic=valve;
}","/** 
 * <p>Set the Valve instance that has been distinguished as the basic Valve for this Pipeline (if any).  Prior to setting the basic Valve, the Valve's <code>setContainer()</code> will be called, if it implements <code>Contained</code>, with the owning Container as an argument.  The method may throw an <code>IllegalArgumentException</code> if this Valve chooses not to be associated with this Container, or <code>IllegalStateException</code> if it is already associated with a different Container.</p>
 * @param valve Valve to be distinguished as the basic Valve
 */
public void setBasic(GlassFishValve valve){
  GlassFishValve oldBasic=null;
synchronized (this) {
    oldBasic=this.basic;
  }
  if (oldBasic == valve) {
    return;
  }
  if (oldBasic != null) {
synchronized (this) {
      if (started && (oldBasic instanceof Lifecycle)) {
        try {
          ((Lifecycle)oldBasic).stop();
        }
 catch (        LifecycleException e) {
          log.log(Level.SEVERE,""String_Node_Str"",e);
        }
      }
    }
    if (oldBasic instanceof Contained) {
      try {
        ((Contained)oldBasic).setContainer(null);
      }
 catch (      Throwable t) {
      }
    }
  }
  if (valve == null) {
    return;
  }
  if (valve instanceof Contained) {
    ((Contained)valve).setContainer(this.container);
  }
  if (started && (valve instanceof Lifecycle)) {
    try {
      ((Lifecycle)valve).start();
    }
 catch (    LifecycleException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
      return;
    }
  }
  this.basic=valve;
}"
29757,"/** 
 * Start this component, initializing our associated class loader.
 * @exception LifecycleException if a lifecycle error occurs
 */
public void start() throws LifecycleException {
  if (!initialized)   init();
  if (started)   throw new LifecycleException(sm.getString(""String_Node_Str""));
  if (log.isLoggable(Level.FINEST))   log.finest(sm.getString(""String_Node_Str""));
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container.getResources() == null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + container);
    }
    return;
  }
  initStreamHandlerFactory();
  try {
    ClassLoader cl=createClassLoader();
    if (cl instanceof WebappClassLoader) {
      classLoader=(WebappClassLoader)cl;
    }
 else {
      classLoader=new WebappClassLoader(cl);
    }
    classLoader.setResources(container.getResources());
    classLoader.setDebug(this.debug);
    classLoader.setDelegate(this.delegate);
    for (int i=0; i < repositories.length; i++) {
      classLoader.addRepository(repositories[i]);
    }
    if (overridablePackages != null) {
      for (int i=0; i < overridablePackages.size(); i++) {
        classLoader.addOverridablePackage(overridablePackages.get(i));
      }
      overridablePackages=null;
    }
    setRepositories();
    setClassPath();
    setPermissions();
    DirContextURLStreamHandler.bind(classLoader,this.container.getResources());
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new LifecycleException(""String_Node_Str"",t);
  }
}","/** 
 * Start this component, initializing our associated class loader.
 * @exception LifecycleException if a lifecycle error occurs
 */
public void start() throws LifecycleException {
  if (!initialized)   init();
  if (started)   throw new LifecycleException(sm.getString(""String_Node_Str""));
  if (log.isLoggable(Level.FINEST))   log.finest(sm.getString(""String_Node_Str""));
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container.getResources() == null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + container);
    }
    return;
  }
  initStreamHandlerFactory();
  try {
    final ClassLoader cl=createClassLoader();
    if (cl instanceof WebappClassLoader) {
      classLoader=(WebappClassLoader)cl;
    }
 else {
      classLoader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
        @Override public WebappClassLoader run(){
          return new WebappClassLoader(cl);
        }
      }
);
    }
    classLoader.setResources(container.getResources());
    classLoader.setDebug(this.debug);
    classLoader.setDelegate(this.delegate);
    for (int i=0; i < repositories.length; i++) {
      classLoader.addRepository(repositories[i]);
    }
    if (overridablePackages != null) {
      for (int i=0; i < overridablePackages.size(); i++) {
        classLoader.addOverridablePackage(overridablePackages.get(i));
      }
      overridablePackages=null;
    }
    setRepositories();
    setClassPath();
    setPermissions();
    DirContextURLStreamHandler.bind(classLoader,this.container.getResources());
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new LifecycleException(""String_Node_Str"",t);
  }
}"
29758,"/** 
 * Create and return a new class loader, based on the configuration defaults and the specified directory paths:
 * @param unpacked Array of pathnames to unpacked directories that shouldbe added to the repositories of the class loader, or <code>null</code>  for no unpacked directories to be considered
 * @param packed Array of pathnames to directories containing JAR filesthat should be added to the repositories of the class loader,  or <code>null</code> for no directories of JAR files to be considered
 * @param urls Array of URLs to remote repositories, designing either JAR resources or uncompressed directories that should be added to  the repositories of the class loader, or <code>null</code> for no  directories of JAR files to be considered
 * @param parent Parent class loader for the new class loader, or<code>null</code> for the system class loader.
 * @exception Exception if an error occurs constructing the class loader
 */
public static ClassLoader createClassLoader(File unpacked[],File packed[],URL urls[],ClassLoader parent) throws Exception {
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"");
  Set<URL> set=new LinkedHashSet<URL>();
  if (unpacked != null) {
    for (int i=0; i < unpacked.length; i++) {
      File file=unpacked[i];
      if (!file.exists() || !file.canRead())       continue;
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + file.getAbsolutePath());
      URL url=new URL(""String_Node_Str"",null,file.getCanonicalPath() + File.separator);
      set.add(url);
    }
  }
  if (packed != null) {
    for (int i=0; i < packed.length; i++) {
      File directory=packed[i];
      if (!directory.isDirectory() || !directory.exists() || !directory.canRead())       continue;
      String filenames[]=directory.list();
      for (int j=0; j < filenames.length; j++) {
        String filename=filenames[j].toLowerCase(Locale.ENGLISH);
        if (!filename.endsWith(""String_Node_Str""))         continue;
        File file=new File(directory,filenames[j]);
        if (log.isLoggable(Level.FINE))         log.fine(""String_Node_Str"" + file.getAbsolutePath());
        URL url=new URL(""String_Node_Str"",null,file.getCanonicalPath());
        set.add(url);
      }
    }
  }
  if (urls != null) {
    for (int i=0; i < urls.length; i++) {
      set.add(urls[i]);
    }
  }
  URL array[]=set.toArray(new URL[set.size()]);
  StandardClassLoader classLoader=null;
  if (parent == null)   classLoader=new StandardClassLoader(array);
 else   classLoader=new StandardClassLoader(array,parent);
  classLoader.setDelegate(true);
  return (classLoader);
}","/** 
 * Create and return a new class loader, based on the configuration defaults and the specified directory paths:
 * @param unpacked Array of pathnames to unpacked directories that shouldbe added to the repositories of the class loader, or <code>null</code>  for no unpacked directories to be considered
 * @param packed Array of pathnames to directories containing JAR filesthat should be added to the repositories of the class loader,  or <code>null</code> for no directories of JAR files to be considered
 * @param urls Array of URLs to remote repositories, designing either JAR resources or uncompressed directories that should be added to  the repositories of the class loader, or <code>null</code> for no  directories of JAR files to be considered
 * @param parent Parent class loader for the new class loader, or<code>null</code> for the system class loader.
 * @exception Exception if an error occurs constructing the class loader
 */
public static ClassLoader createClassLoader(File unpacked[],File packed[],URL urls[],ClassLoader parent) throws Exception {
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"");
  Set<URL> set=new LinkedHashSet<URL>();
  if (unpacked != null) {
    for (int i=0; i < unpacked.length; i++) {
      File file=unpacked[i];
      if (!file.exists() || !file.canRead())       continue;
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + file.getAbsolutePath());
      URL url=new URL(""String_Node_Str"",null,file.getCanonicalPath() + File.separator);
      set.add(url);
    }
  }
  if (packed != null) {
    for (int i=0; i < packed.length; i++) {
      File directory=packed[i];
      if (!directory.isDirectory() || !directory.exists() || !directory.canRead())       continue;
      String filenames[]=directory.list();
      for (int j=0; j < filenames.length; j++) {
        String filename=filenames[j].toLowerCase(Locale.ENGLISH);
        if (!filename.endsWith(""String_Node_Str""))         continue;
        File file=new File(directory,filenames[j]);
        if (log.isLoggable(Level.FINE))         log.fine(""String_Node_Str"" + file.getAbsolutePath());
        URL url=new URL(""String_Node_Str"",null,file.getCanonicalPath());
        set.add(url);
      }
    }
  }
  if (urls != null) {
    for (int i=0; i < urls.length; i++) {
      set.add(urls[i]);
    }
  }
  final URL array[]=set.toArray(new URL[set.size()]);
  final ClassLoader parentCL=parent;
  StandardClassLoader classLoader=null;
  if (parentCL == null) {
    classLoader=AccessController.doPrivileged(new PrivilegedAction<StandardClassLoader>(){
      @Override public StandardClassLoader run(){
        return new StandardClassLoader(array);
      }
    }
);
  }
 else {
    classLoader=AccessController.doPrivileged(new PrivilegedAction<StandardClassLoader>(){
      @Override public StandardClassLoader run(){
        return new StandardClassLoader(array,parentCL);
      }
    }
);
  }
  classLoader.setDelegate(true);
  return (classLoader);
}"
29759,"public static String getURL(String urlstr){
  try {
    URL u=new URL(urlstr);
    URLConnection urlc=u.openConnection();
    BufferedReader ir=new BufferedReader(new InputStreamReader(urlc.getInputStream(),""String_Node_Str""));
    StringWriter ow=new StringWriter();
    String line;
    while ((line=ir.readLine()) != null) {
      ow.write(line);
      ow.write(""String_Node_Str"");
    }
    ir.close();
    ow.close();
    return ow.getBuffer().toString();
  }
 catch (  IOException ex) {
    System.out.println(""String_Node_Str"" + urlstr + ""String_Node_Str""+ ex.getMessage());
    return ""String_Node_Str"";
  }
}","public static String getURL(String urlstr){
  StringWriter ow=null;
  BufferedReader ir=null;
  try {
    URL u=new URL(urlstr);
    URLConnection urlc=u.openConnection();
    ir=new BufferedReader(new InputStreamReader(urlc.getInputStream(),""String_Node_Str""));
    try {
      ow=new StringWriter();
      String line;
      while ((line=ir.readLine()) != null) {
        ow.write(line);
        ow.write(""String_Node_Str"");
      }
      return ow.getBuffer().toString();
    }
  finally {
      if (ow != null) {
        ow.close();
      }
    }
  }
 catch (  IOException ex) {
    System.out.println(""String_Node_Str"" + urlstr + ""String_Node_Str""+ ex.getMessage());
    return ""String_Node_Str"";
  }
 finally {
    if (ir != null) {
      try {
        ir.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(NucleusTestUtils.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}"
29760,"public static NadminReturn nadminWithOutput(final int timeout,final String... args){
  File cmd=new File(nucleusRoot,isWindows() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!cmd.canExecute()) {
    cmd=new File(nucleusRoot,isWindows() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  List<String> command=new ArrayList<String>();
  command.add(cmd.toString());
  command.add(""String_Node_Str"");
  command.addAll(Arrays.asList(args));
  ProcessManager pm=new ProcessManager(command);
  pm.setTimeoutMsec(timeout);
  pm.setEcho(false);
  int exit;
  String myErr=""String_Node_Str"";
  try {
    exit=pm.execute();
  }
 catch (  ProcessManagerTimeoutException tex) {
    myErr=""String_Node_Str"" + timeout + ""String_Node_Str"";
    exit=1;
  }
catch (  ProcessManagerException ex) {
    exit=1;
  }
  NadminReturn ret=new NadminReturn();
  ret.out=pm.getStdout();
  ret.err=pm.getStderr() + myErr;
  ret.outAndErr=ret.out + ret.err;
  ret.returnValue=exit == 0 && validResults(ret.out,String.format(""String_Node_Str"",args[0]));
  write(ret.out);
  write(ret.err);
  return ret;
}","public static NadminReturn nadminWithOutput(final int timeout,final String... args){
  File cmd=new File(nucleusRoot,isWindows() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!cmd.canExecute()) {
    cmd=new File(nucleusRoot,isWindows() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  List<String> command=new ArrayList<String>();
  command.add(cmd.toString());
  command.add(""String_Node_Str"");
  command.addAll(Arrays.asList(args));
  ProcessManager pm=new ProcessManager(command);
  pm.setTimeoutMsec(timeout);
  pm.setEcho(false);
  int exit;
  String myErr=""String_Node_Str"";
  try {
    exit=pm.execute();
  }
 catch (  ProcessManagerTimeoutException tex) {
    myErr=""String_Node_Str"" + timeout + ""String_Node_Str"";
    exit=1;
  }
catch (  ProcessManagerException ex) {
    exit=1;
  }
  NadminReturn ret=new NadminReturn(exit,pm.getStdout(),pm.getStderr() + myErr,args[0]);
  write(ret.outAndErr);
  return ret;
}"
29761,"private static boolean isWindows(){
  return System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"");
}","private static boolean isWindows(){
  return System.getProperty(""String_Node_Str"").toLowerCase(Locale.ENGLISH).contains(""String_Node_Str"");
}"
29762,"/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  try {
    DomainsManager manager=new PEDomainsManager();
    DomainConfig config=new DomainConfig(domainName,domainDir);
    manager.validateDomain(config,false);
    verifyPortBase();
  }
 catch (  DomainException e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  adminUser=programOpts.getUser();
  if (!ok(adminUser)) {
    adminUser=SystemPropertyConstants.DEFAULT_ADMIN_USER;
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else   if (noPassword) {
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else {
    boolean haveAdminPwd=false;
  }
  if (saveMasterPassword)   useMasterPassword=true;
  if (masterPassword == null)   masterPassword=DEFAULT_MASTER_PASSWORD;
  try {
    if (adminPort != null) {
      verifyPortIsValid(adminPort);
    }
    if (instancePort != null) {
      verifyPortIsValid(instancePort);
    }
    createTheDomain(domainDir,domainProperties);
  }
 catch (  CommandException ce) {
    logger.info(ce.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),ce);
  }
catch (  Exception e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  return 0;
}","/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  try {
    DomainsManager manager=new PEDomainsManager();
    DomainConfig config=new DomainConfig(domainName,domainDir);
    manager.validateDomain(config,false);
    verifyPortBase();
  }
 catch (  DomainException e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  adminUser=programOpts.getUser();
  if (!ok(adminUser)) {
    adminUser=SystemPropertyConstants.DEFAULT_ADMIN_USER;
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else   if (noPassword) {
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else {
    adminPassword=getAdminPassword();
    boolean haveAdminPwd=true;
  }
  if (saveMasterPassword)   useMasterPassword=true;
  if (masterPassword == null)   masterPassword=DEFAULT_MASTER_PASSWORD;
  try {
    if (adminPort != null) {
      verifyPortIsValid(adminPort);
    }
    if (instancePort != null) {
      verifyPortIsValid(instancePort);
    }
    createTheDomain(domainDir,domainProperties);
  }
 catch (  CommandException ce) {
    logger.info(ce.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),ce);
  }
catch (  Exception e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  return 0;
}"
29763,"/** 
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  if (domainDir == null) {
    domainDir=getSystemProperty(SystemPropertyConstants.DOMAINS_ROOT_PROPERTY);
  }
  if (domainDir == null) {
    throw new CommandValidationException(strings.get(""String_Node_Str"",domainDir));
  }
  if (programOpts.getUser() == null && !noPassword) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val)) {
        programOpts.setUser(val);
        if (adminPassword == null) {
          ParamModelData po=new ParamModelData(ADMIN_PASSWORD,String.class,false,null);
          po.description=strings.get(""String_Node_Str"");
          po.param._password=true;
          adminPassword=getPassword(po,SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD,true);
        }
      }
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  if (programOpts.getUser() != null) {
    try {
      FileRealmHelper.validateUserName(programOpts.getUser());
    }
 catch (    IllegalArgumentException ise) {
      throw new CommandValidationException(strings.get(""String_Node_Str"",programOpts.getUser()));
    }
  }
}","/** 
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  if (domainDir == null) {
    domainDir=getSystemProperty(SystemPropertyConstants.DOMAINS_ROOT_PROPERTY);
  }
  if (domainDir == null) {
    throw new CommandValidationException(strings.get(""String_Node_Str"",domainDir));
  }
  if (programOpts.getUser() == null && !noPassword) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val)) {
        programOpts.setUser(val);
        if (adminPassword == null) {
          adminPassword=getAdminPassword();
        }
      }
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  if (programOpts.getUser() != null) {
    try {
      FileRealmHelper.validateUserName(programOpts.getUser());
    }
 catch (    IllegalArgumentException ise) {
      throw new CommandValidationException(strings.get(""String_Node_Str"",programOpts.getUser()));
    }
  }
}"
29764,"@Override protected void read(InputStream input) throws XMLStreamException {
  parser=getXMLInputFactory().createXMLStreamReader(input);
  skipRoot(""String_Node_Str"");
  int event=0;
  while (parser.hasNext() && (event=parser.next()) != END_DOCUMENT) {
    if (event == START_ELEMENT) {
      String name=parser.getLocalName();
      if (""String_Node_Str"".equals(name)) {
        delegate=!Boolean.parseBoolean(parser.getElementText());
        break;
      }
 else       if (!""String_Node_Str"".equals(name)) {
        skipSubTree(name);
      }
    }
  }
}","/** 
 * This method will parse the input stream and set the XMLStreamReader object for latter use.
 * @param input InputStream
 * @exception XMLStreamException ;
 */
@Override protected void read(InputStream input) throws XMLStreamException {
  parser=getXMLInputFactory().createXMLStreamReader(input);
  int event=0;
  while (parser.hasNext() && (event=parser.next()) != END_DOCUMENT) {
    if (event == START_ELEMENT) {
      String name=parser.getLocalName();
      if (""String_Node_Str"".equals(name)) {
        String path=null;
        Boolean crs=null;
        int count=parser.getAttributeCount();
        for (int i=0; i < count; i++) {
          String attrName=parser.getAttributeName(i).getLocalPart();
          if (""String_Node_Str"".equals(attrName)) {
            crs=Boolean.valueOf(parser.getAttributeValue(i));
          }
 else           if (""String_Node_Str"".equals(attrName)) {
            path=parser.getAttributeValue(i);
          }
        }
        if (path == null) {
          clearReferencesStatic=crs;
          break;
        }
      }
 else {
        skipSubTree(name);
      }
    }
  }
}"
29765,"@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    FileDirContext r=new FileDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=null;
    if ((new File(base,GLASSFISH_WEB_XML)).exists()) {
      webXmlParser=new GlassFishWebXmlParser(base.getAbsolutePath());
    }
 else     if ((new File(base,SUN_WEB_XML)).exists()) {
      webXmlParser=new SunWebXmlParser(base.getAbsolutePath());
    }
 else     if ((new File(base,WEBLOGIC_XML)).exists()) {
      webXmlParser=new WeblogicXmlParser(base.getAbsolutePath());
    }
 else {
      webXmlParser=new GlassFishWebXmlParser(base.getAbsolutePath());
    }
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
  }
 catch (  MalformedURLException malex) {
    logger.log(Level.SEVERE,malex.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,malex.getMessage(),malex);
    }
  }
catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
  }
catch (  FileNotFoundException fnfe) {
    logger.log(Level.SEVERE,fnfe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,fnfe.getMessage(),fnfe);
    }
  }
  cloader.start();
  return cloader;
}","@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    FileDirContext r=new FileDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=null;
    if ((new File(base,GLASSFISH_WEB_XML)).exists()) {
      webXmlParser=new GlassFishWebXmlParser(base.getAbsolutePath());
    }
 else     if ((new File(base,SUN_WEB_XML)).exists()) {
      webXmlParser=new SunWebXmlParser(base.getAbsolutePath());
    }
 else     if ((new File(base,WEBLOGIC_XML)).exists()) {
      webXmlParser=new WeblogicXmlParser(base.getAbsolutePath());
    }
 else {
      webXmlParser=new GlassFishWebXmlParser(base.getAbsolutePath());
    }
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
  }
 catch (  MalformedURLException malex) {
    logger.log(Level.SEVERE,malex.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,malex.getMessage(),malex);
    }
  }
catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
  }
catch (  FileNotFoundException fnfe) {
    logger.log(Level.SEVERE,fnfe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,fnfe.getMessage(),fnfe);
    }
  }
  cloader.start();
  return cloader;
}"
29766,"WebXmlParser(String baseStr) throws XMLStreamException, FileNotFoundException {
  this.baseStr=baseStr;
  InputStream input=null;
  File f=new File(baseStr,getXmlFileName());
  if (f.exists()) {
    input=new FileInputStream(f);
    try {
      read(input);
    }
  finally {
      if (parser != null) {
        try {
          parser.close();
        }
 catch (        Exception ex) {
        }
      }
      if (input != null) {
        try {
          input.close();
        }
 catch (        Exception ex) {
        }
      }
    }
  }
}","WebXmlParser(String baseStr) throws XMLStreamException, FileNotFoundException {
  init(new File(baseStr,getXmlFileName()));
}"
29767,"/** 
 * Release all object references, and initialize instance variables, in preparation for reuse of this object.
 */
@Override public void recycle(){
  if (isAsyncStarted()) {
    return;
  }
  context=null;
  servletContext=null;
  contextPath=null;
  servletPath=null;
  pathInfo=null;
  wrapper=null;
  dispatcherTypeAttr=null;
  requestDispatcherPath=null;
  authType=null;
  requestURI=null;
  inputBuffer.recycle();
  usingInputStream=false;
  usingReader=false;
  userPrincipal=null;
  subject=null;
  sessionParsed=false;
  parametersProcessed=false;
  cookiesParsed=false;
  locales.clear();
  localesParsed=false;
  secure=false;
  remoteAddr=null;
  remoteHost=null;
  remotePort=-1;
  localPort=-1;
  localAddr=null;
  localName=null;
  multipart=null;
  jrouteId=null;
  attributes.clear();
  notes.clear();
  cookies.clear();
  unsuccessfulSessionFind=false;
  if (session != null) {
    session.endAccess();
  }
  session=null;
  requestedSessionCookie=false;
  requestedSessionId=null;
  requestedSessionCookiePath=null;
  requestedSessionURL=false;
  uriParamsCC.recycle();
  sessionTracker.reset();
  dispatchDepth=0;
  parameterMap.setLocked(false);
  parameterMap.clear();
  mappingData.recycle();
  if (enforceScope) {
    if (facade != null) {
      facade.clear();
      facade=null;
    }
    if (defaultContextMaskingFacade != null) {
      defaultContextMaskingFacade.clear();
      defaultContextMaskingFacade=null;
    }
    if (inputStream != null) {
      inputStream.clear();
      inputStream=null;
    }
    if (reader != null) {
      reader.clear();
      reader=null;
    }
  }
  if (asyncContext != null) {
    asyncContext.clear();
    asyncContext=null;
  }
  isAsyncSupported=true;
  asyncStarted.set(false);
  isAsyncComplete=false;
  asyncStartedThread=null;
}","/** 
 * Release all object references, and initialize instance variables, in preparation for reuse of this object.
 */
@Override public void recycle(){
  if (isAsyncStarted()) {
    return;
  }
  context=null;
  servletContext=null;
  contextPath=null;
  servletPath=null;
  pathInfo=null;
  wrapper=null;
  dispatcherTypeAttr=null;
  requestDispatcherPath=null;
  authType=null;
  requestURI=null;
  inputBuffer.recycle();
  usingInputStream=false;
  usingReader=false;
  userPrincipal=null;
  subject=null;
  sessionParsed=false;
  parametersProcessed=false;
  cookiesParsed=false;
  locales.clear();
  localesParsed=false;
  secure=false;
  remoteAddr=null;
  remoteHost=null;
  remotePort=-1;
  localPort=-1;
  localAddr=null;
  localName=null;
  multipart=null;
  jrouteId=null;
  attributes.clear();
  notes.clear();
  cookies.clear();
  unsuccessfulSessionFind=false;
  if (session != null) {
    session.endAccess();
  }
  session=null;
  requestedSessionCookie=false;
  requestedSessionId=null;
  requestedSessionCookiePath=null;
  requestedSessionURL=false;
  uriParamsCC.recycle();
  sessionTracker.reset();
  dispatchDepth=0;
  parameterMap.setLocked(false);
  parameterMap.clear();
  mappingData.recycle();
  initRequestFacadeHelper=false;
  if (enforceScope) {
    if (facade != null) {
      facade.clear();
      facade=null;
    }
    if (defaultContextMaskingFacade != null) {
      defaultContextMaskingFacade.clear();
      defaultContextMaskingFacade=null;
    }
    if (inputStream != null) {
      inputStream.clear();
      inputStream=null;
    }
    if (reader != null) {
      reader.clear();
      reader=null;
    }
  }
  if (asyncContext != null) {
    asyncContext.clear();
    asyncContext=null;
  }
  isAsyncSupported=true;
  asyncStarted.set(false);
  isAsyncComplete=false;
  asyncStartedThread=null;
}"
29768,"/** 
 * Gets the <code>ServletRequest</code> for which this object is the facade. This method must be implemented by a subclass.
 * @param maskDefaultContextMapping true if the fact that a requestreceived at the root context was mapped to a default-web-module will be masked, false otherwise
 */
@Override public HttpServletRequest getRequest(boolean maskDefaultContextMapping){
  if (!maskDefaultContextMapping || !isDefaultContext) {
    if (facade == null) {
      facade=new RequestFacade(this);
      attributes.put(Globals.REQUEST_FACADE_HELPER,facade.getRequestFacadeHelper());
    }
    return facade;
  }
 else {
    if (defaultContextMaskingFacade == null) {
      defaultContextMaskingFacade=new RequestFacade(this,true);
      attributes.put(Globals.REQUEST_FACADE_HELPER,defaultContextMaskingFacade.getRequestFacadeHelper());
    }
    return defaultContextMaskingFacade;
  }
}","/** 
 * Gets the <code>ServletRequest</code> for which this object is the facade. This method must be implemented by a subclass.
 * @param maskDefaultContextMapping true if the fact that a requestreceived at the root context was mapped to a default-web-module will be masked, false otherwise
 */
@Override public HttpServletRequest getRequest(boolean maskDefaultContextMapping){
  if (!maskDefaultContextMapping || !isDefaultContext) {
    if (facade == null) {
      facade=new RequestFacade(this);
    }
    if (!initRequestFacadeHelper) {
      attributes.put(Globals.REQUEST_FACADE_HELPER,facade.getRequestFacadeHelper());
      initRequestFacadeHelper=true;
    }
    return facade;
  }
 else {
    if (defaultContextMaskingFacade == null) {
      defaultContextMaskingFacade=new RequestFacade(this,true);
    }
    if (!initRequestFacadeHelper) {
      attributes.put(Globals.REQUEST_FACADE_HELPER,defaultContextMaskingFacade.getRequestFacadeHelper());
      initRequestFacadeHelper=true;
    }
    return defaultContextMaskingFacade;
  }
}"
29769,"/** 
 * @return if exists the DeploymentDescriptorFile responsible forhandling the glassfish configuration deployment descriptors
 */
@Override public DeploymentDescriptorFile getGFConfigurationDDFile(){
  return gfEjbRuntimeDD.get();
}","/** 
 * @return if exists the DeploymentDescriptorFile responsible forhandling the glassfish configuration deployment descriptors
 */
@Override public DeploymentDescriptorFile getGFConfigurationDDFile(){
  if (gfEjbRuntimeDD == null) {
    gfEjbRuntimeDD=new GFEjbRuntimeDDFile();
  }
  return gfEjbRuntimeDD;
}"
29770,"/** 
 * @return if exists the DeploymentDescriptorFile responsible forhandling the Sun configuration deployment descriptors
 */
public DeploymentDescriptorFile getSunConfigurationDDFile(){
  return ejbRuntimeDD.get();
}","/** 
 * @return if exists the DeploymentDescriptorFile responsible forhandling the Sun configuration deployment descriptors
 */
public DeploymentDescriptorFile getSunConfigurationDDFile(){
  if (ejbRuntimeDD == null) {
    ejbRuntimeDD=new EjbRuntimeDDFile();
  }
  return ejbRuntimeDD;
}"
29771,"/** 
 * @return the DeploymentDescriptorFile responsible for handlingstandard deployment descriptor
 */
@Override public DeploymentDescriptorFile getStandardDDFile(){
  return standardDD.get();
}","/** 
 * @return the DeploymentDescriptorFile responsible for handlingstandard deployment descriptor
 */
@Override public DeploymentDescriptorFile getStandardDDFile(){
  if (standardDD == null) {
    standardDD=new EjbDeploymentDescriptorFile();
  }
  return standardDD;
}"
29772,"/** 
 * @return a RootXMLNode responsible for handling the deploymentdescriptors associated with this J2EE module
 * @param the descriptor for which we need the node
 */
public RootXMLNode getRootXMLNode(Descriptor descriptor){
  return new EjbBundleNode();
}","/** 
 * @return a RootXMLNode responsible for handling the deploymentdescriptors associated with this J2EE module
 * @param descriptor the descriptor for which we need the node
 */
public RootXMLNode getRootXMLNode(Descriptor descriptor){
  return new EjbBundleNode();
}"
29773,"/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  try {
    DomainsManager manager=new PEDomainsManager();
    DomainConfig config=new DomainConfig(domainName,domainDir);
    manager.validateDomain(config,false);
    verifyPortBase();
  }
 catch (  DomainException e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  adminUser=programOpts.getUser();
  if (!ok(adminUser)) {
    adminUser=SystemPropertyConstants.DEFAULT_ADMIN_USER;
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else   if (noPassword) {
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else {
    boolean haveAdminPwd=false;
    adminPassword=passwords.get(ADMIN_ADMINPASSWORD);
    if (adminPassword != null) {
      haveAdminPwd=true;
      logger.warning(strings.get(""String_Node_Str""));
    }
 else {
      haveAdminPwd=passwords.get(ADMIN_PASSWORD) != null;
      adminPassword=getAdminPassword();
    }
    validatePassword(adminPassword,adminPasswordOption);
  }
  if (saveMasterPassword)   useMasterPassword=true;
  if (useMasterPassword)   masterPassword=getMasterPassword();
  if (masterPassword == null)   masterPassword=DEFAULT_MASTER_PASSWORD;
  validatePassword(masterPassword,masterPasswordOption);
  try {
    if (adminPort != null) {
      verifyPortIsValid(adminPort);
    }
    if (instancePort != null) {
      verifyPortIsValid(instancePort);
    }
    createTheDomain(domainDir,domainProperties);
  }
 catch (  CommandException ce) {
    logger.info(ce.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),ce);
  }
catch (  Exception e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  return 0;
}","/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  try {
    DomainsManager manager=new PEDomainsManager();
    DomainConfig config=new DomainConfig(domainName,domainDir);
    manager.validateDomain(config,false);
    verifyPortBase();
  }
 catch (  DomainException e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  adminUser=programOpts.getUser();
  if (!ok(adminUser)) {
    adminUser=SystemPropertyConstants.DEFAULT_ADMIN_USER;
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else   if (noPassword) {
    adminPassword=SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD;
  }
 else {
    boolean haveAdminPwd=false;
  }
  if (saveMasterPassword)   useMasterPassword=true;
  if (masterPassword == null)   masterPassword=DEFAULT_MASTER_PASSWORD;
  try {
    if (adminPort != null) {
      verifyPortIsValid(adminPort);
    }
    if (instancePort != null) {
      verifyPortIsValid(instancePort);
    }
    createTheDomain(domainDir,domainProperties);
  }
 catch (  CommandException ce) {
    logger.info(ce.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),ce);
  }
catch (  Exception e) {
    logger.fine(e.getLocalizedMessage());
    throw new CommandException(strings.get(""String_Node_Str"",domainName),e);
  }
  return 0;
}"
29774,"public CreateDomainCommand(){
  masterPasswordOption=new ParamModelData(MASTER_PASSWORD,String.class,false,null);
  masterPasswordOption.description=strings.get(""String_Node_Str"");
  masterPasswordOption.param._password=true;
  adminPasswordOption=new ParamModelData(ADMIN_PASSWORD,String.class,false,null);
  adminPasswordOption.description=strings.get(""String_Node_Str"");
  adminPasswordOption.param._password=true;
}","public CreateDomainCommand(){
}"
29775,"/** 
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  if (domainDir == null) {
    domainDir=getSystemProperty(SystemPropertyConstants.DOMAINS_ROOT_PROPERTY);
  }
  if (domainDir == null) {
    throw new CommandValidationException(strings.get(""String_Node_Str"",domainDir));
  }
  if (programOpts.getUser() == null && !noPassword) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val))       programOpts.setUser(val);
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  if (programOpts.getUser() != null) {
    try {
      FileRealmHelper.validateUserName(programOpts.getUser());
    }
 catch (    IllegalArgumentException ise) {
      throw new CommandValidationException(strings.get(""String_Node_Str"",programOpts.getUser()));
    }
  }
}","/** 
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  if (domainDir == null) {
    domainDir=getSystemProperty(SystemPropertyConstants.DOMAINS_ROOT_PROPERTY);
  }
  if (domainDir == null) {
    throw new CommandValidationException(strings.get(""String_Node_Str"",domainDir));
  }
  if (programOpts.getUser() == null && !noPassword) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val)) {
        programOpts.setUser(val);
        if (adminPassword == null) {
          ParamModelData po=new ParamModelData(ADMIN_PASSWORD,String.class,false,null);
          po.description=strings.get(""String_Node_Str"");
          po.param._password=true;
          adminPassword=getPassword(po,SystemPropertyConstants.DEFAULT_ADMIN_PASSWORD,true);
        }
      }
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  if (programOpts.getUser() != null) {
    try {
      FileRealmHelper.validateUserName(programOpts.getUser());
    }
 catch (    IllegalArgumentException ise) {
      throw new CommandValidationException(strings.get(""String_Node_Str"",programOpts.getUser()));
    }
  }
}"
29776,"/** 
 * Override the <code>getParameter()</code> method of the wrapped request.
 * @param name Name of the requested parameter
 */
@Override public String getParameter(String name){
  parseParameters();
synchronized (parameters) {
    Object value=parameters.get(name);
    if (value == null)     return (null);
 else     if (value instanceof String[])     return (((String[])value)[0]);
 else     if (value instanceof String)     return ((String)value);
 else     return (value.toString());
  }
}","/** 
 * Override the <code>getParameter()</code> method of the wrapped request.
 * @param name Name of the requested parameter
 */
@Override public String getParameter(String name){
  parseParameters();
synchronized (parameters) {
    String[] value=parameters.get(name);
    return ((value != null) ? value[0] : null);
  }
}"
29777,"/** 
 * Override the <code>getParameterValues()</code> method of the wrapped request.
 * @param name Name of the requested parameter
 */
@Override public String[] getParameterValues(String name){
  parseParameters();
synchronized (parameters) {
    Object value=parameters.get(name);
    if (value == null)     return null;
 else     if (value instanceof String[])     return ((String[])value);
 else     if (value instanceof String) {
      String values[]=new String[1];
      values[0]=(String)value;
      return (values);
    }
 else {
      String values[]=new String[1];
      values[0]=value.toString();
      return (values);
    }
  }
}","/** 
 * Override the <code>getParameterValues()</code> method of the wrapped request.
 * @param name Name of the requested parameter
 */
@Override public String[] getParameterValues(String name){
  parseParameters();
synchronized (parameters) {
    String[] value=parameters.get(name);
    return value;
  }
}"
29778,"/** 
 * Gets the <code>ServletRequest</code> for which this object is the facade. This method must be implemented by a subclass.
 * @param maskDefaultContextMapping true if the fact that a requestreceived at the root context was mapped to a default-web-module will be masked, false otherwise
 */
@Override public HttpServletRequest getRequest(boolean maskDefaultContextMapping){
  if (!maskDefaultContextMapping || !isDefaultContext) {
    if (facade == null) {
      facade=new RequestFacade(this);
    }
    return facade;
  }
 else {
    if (defaultContextMaskingFacade == null) {
      defaultContextMaskingFacade=new RequestFacade(this,true);
    }
    return defaultContextMaskingFacade;
  }
}","/** 
 * Gets the <code>ServletRequest</code> for which this object is the facade. This method must be implemented by a subclass.
 * @param maskDefaultContextMapping true if the fact that a requestreceived at the root context was mapped to a default-web-module will be masked, false otherwise
 */
@Override public HttpServletRequest getRequest(boolean maskDefaultContextMapping){
  if (!maskDefaultContextMapping || !isDefaultContext) {
    if (facade == null) {
      facade=new RequestFacade(this);
      attributes.put(Globals.REQUEST_FACADE_HELPER,facade.getRequestFacadeHelper());
    }
    return facade;
  }
 else {
    if (defaultContextMaskingFacade == null) {
      defaultContextMaskingFacade=new RequestFacade(this,true);
      attributes.put(Globals.REQUEST_FACADE_HELPER,defaultContextMaskingFacade.getRequestFacadeHelper());
    }
    return defaultContextMaskingFacade;
  }
}"
29779,"/** 
 * Clear facade.
 */
public void clear(){
  request=null;
}","/** 
 * Clear facade.
 */
public void clear(){
  request=null;
  if (reqFacHelper != null) {
    reqFacHelper.clear();
  }
  reqFacHelper=null;
}"
29780,"/** 
 * Construct a wrapper for the specified request.
 * @param request The request to be wrapped
 * @param maskDefaultContextMapping true if the fact that a requestreceived at the root context was mapped to a default-web-module will be masked, false otherwise
 */
public RequestFacade(Request request,boolean maskDefaultContextMapping){
  this.request=request;
  this.maskDefaultContextMapping=maskDefaultContextMapping;
}","/** 
 * Construct a wrapper for the specified request.
 * @param request The request to be wrapped
 * @param maskDefaultContextMapping true if the fact that a requestreceived at the root context was mapped to a default-web-module will be masked, false otherwise
 */
public RequestFacade(Request request,boolean maskDefaultContextMapping){
  this.request=request;
  this.maskDefaultContextMapping=maskDefaultContextMapping;
  this.reqFacHelper=new RequestFacadeHelper(request);
}"
29781,"public void addAuthenticator(Authenticator authenticator,String loginMethod){
  if ((authenticator != null) && !(authenticator instanceof GlassFishValve)) {
    throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  }
  if (authenticators == null) {
synchronized (this) {
      if (authenticators == null) {
        authenticators=new HashMap<String,Authenticator>();
      }
    }
  }
  authenticators.put(loginMethod,authenticator);
}","public synchronized void addAuthenticator(Authenticator authenticator,String loginMethod){
  if ((authenticator != null) && !(authenticator instanceof GlassFishValve)) {
    throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  }
  if (authenticators == null) {
    authenticators=new HashMap<String,Authenticator>();
  }
  authenticators.put(loginMethod,authenticator);
}"
29782,"private static boolean status(HttpServletRequest request,HttpServletResponse response,Context context,Wrapper wrapper,int statusCode){
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (!(reqFacHelper != null && reqFacHelper.isResponseError())) {
    return false;
  }
  boolean matchFound=false;
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    matchFound=true;
    String requestPath=(String)request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
    if (requestPath == null || !requestPath.equals(errorPage.getLocation())) {
      String message=null;
      if (reqFacHelper != null) {
        message=RequestUtil.filter(reqFacHelper.getResponseMessage());
      }
      if (message == null) {
        message=""String_Node_Str"";
      }
      prepareRequestForDispatch(request,wrapper,errorPage.getLocation(),statusCode,message);
      custom(request,response,errorPage,context);
    }
  }
 else {
    errorPage=((StandardHost)context.getParent()).findErrorPage(statusCode);
    if (errorPage != null) {
      matchFound=true;
      try {
        serveErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log.log(Level.WARNING,""String_Node_Str"" + errorPage,e);
      }
    }
  }
  return matchFound;
}","private static boolean status(HttpServletRequest request,HttpServletResponse response,Context context,Wrapper wrapper,int statusCode){
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (reqFacHelper == null || !reqFacHelper.isResponseError()) {
    return false;
  }
  boolean matchFound=false;
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    matchFound=true;
    String requestPath=(String)request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
    if (requestPath == null || !requestPath.equals(errorPage.getLocation())) {
      String message=RequestUtil.filter(reqFacHelper.getResponseMessage());
      if (message == null) {
        message=""String_Node_Str"";
      }
      prepareRequestForDispatch(request,wrapper,errorPage.getLocation(),statusCode,message);
      custom(request,response,errorPage,context);
    }
  }
 else {
    errorPage=((StandardHost)context.getParent()).findErrorPage(statusCode);
    if (errorPage != null) {
      matchFound=true;
      try {
        serveErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log.log(Level.WARNING,""String_Node_Str"" + errorPage,e);
      }
    }
  }
  return matchFound;
}"
29783,"/** 
 * Clear references.
 */
protected void clearReferences(){
  clearReferencesJdbc();
  if (clearReferencesStatic) {
    clearReferencesStaticFinal();
  }
  java.beans.Introspector.flushCaches();
}","/** 
 * Clear references.
 */
protected void clearReferences(){
  clearReferencesJdbc();
  if (clearReferencesStatic) {
    clearReferencesStaticFinal();
  }
  IntrospectionUtils.clear();
  java.beans.Introspector.flushCaches();
}"
29784,"/** 
 * Initialize the passwords field based on the password file specified in the program options, and initialize the program option's password if available in the password file.
 */
protected void initializePasswords() throws CommandException {
  passwords=new HashMap<String,String>();
  String pwfile=programOpts.getPasswordFile();
  if (ok(pwfile)) {
    passwords=CLIUtil.readPasswordFileOptions(pwfile,true);
    logger.finer(""String_Node_Str"" + pwfile);
    String password=passwords.get(Environment.PREFIX + ""String_Node_Str"");
    if (password != null && programOpts.getPassword() == null)     programOpts.setPassword(password,ProgramOptions.PasswordLocation.PASSWORD_FILE);
  }
}","/** 
 * Initialize the passwords field based on the password file specified in the program options, and initialize the program option's password if available in the password file.
 */
protected void initializePasswords() throws CommandException {
  passwords=new HashMap<String,String>();
  String pwfile=programOpts.getPasswordFile();
  if (ok(pwfile)) {
    passwords=CLIUtil.readPasswordFileOptions(pwfile,true);
    logger.finer(""String_Node_Str"" + pwfile);
    String password=passwords.get(Environment.getPrefix() + ""String_Node_Str"");
    if (password != null && programOpts.getPassword() == null)     programOpts.setPassword(password,ProgramOptions.PasswordLocation.PASSWORD_FILE);
  }
}"
29785,"/** 
 * Return a man page for this command that has the tokens substituted
 */
public BufferedReader expandManPage(Reader r){
  manpageTokenValues[0]=programOpts.getCommandName();
  manpageTokenValues[1]=Environment.PREFIX;
  manpageTokenValues[2]=Version.getBriefProductName();
  TokenValueSet tvs=new TokenValueSet();
  for (int i=0; i < manpageTokens.length; i++) {
    tvs.add(new TokenValue(manpageTokens[i],manpageTokenValues[i],""String_Node_Str"",""String_Node_Str""));
  }
  return new BufferedReader(new LineTokenReplacer(tvs).getReader(r));
}","/** 
 * Return a man page for this command that has the tokens substituted
 */
public BufferedReader expandManPage(Reader r){
  manpageTokenValues[0]=programOpts.getCommandName();
  manpageTokenValues[1]=Environment.getPrefix();
  manpageTokenValues[2]=Version.getBriefProductName();
  TokenValueSet tvs=new TokenValueSet();
  for (int i=0; i < manpageTokens.length; i++) {
    tvs.add(new TokenValue(manpageTokens[i],manpageTokenValues[i],""String_Node_Str"",""String_Node_Str""));
  }
  return new BufferedReader(new LineTokenReplacer(tvs).getReader(r));
}"
29786,"/** 
 * Read passwords from the password file and save them in a java.util.Map.
 * @param passwordFileName  password file name
 * @param withPrefix decides whether prefix should be taken into account
 * @return Map of the password name and value
 */
public static Map<String,String> readPasswordFileOptions(final String passwordFileName,boolean withPrefix) throws CommandException {
  Map<String,String> passwordOptions=new HashMap<String,String>();
  boolean readStdin=passwordFileName.equals(""String_Node_Str"");
  InputStream is=null;
  try {
    is=new BufferedInputStream(readStdin ? System.in : new FileInputStream(passwordFileName));
    final Properties prop=new Properties();
    prop.load(is);
    for (    Object key : prop.keySet()) {
      final String entry=(String)key;
      if (entry.startsWith(Environment.PREFIX)) {
        final String optionName=withPrefix ? entry : entry.substring(Environment.PREFIX.length()).toLowerCase(Locale.ENGLISH);
        final String optionValue=prop.getProperty(entry);
        passwordOptions.put(optionName,optionValue);
      }
    }
  }
 catch (  final Exception e) {
    throw new CommandException(e);
  }
 finally {
    try {
      if (!readStdin && is != null)       is.close();
    }
 catch (    final Exception ignore) {
    }
  }
  return passwordOptions;
}","/** 
 * Read passwords from the password file and save them in a java.util.Map.
 * @param passwordFileName  password file name
 * @param withPrefix decides whether prefix should be taken into account
 * @return Map of the password name and value
 */
public static Map<String,String> readPasswordFileOptions(final String passwordFileName,boolean withPrefix) throws CommandException {
  Map<String,String> passwordOptions=new HashMap<String,String>();
  boolean readStdin=passwordFileName.equals(""String_Node_Str"");
  InputStream is=null;
  try {
    is=new BufferedInputStream(readStdin ? System.in : new FileInputStream(passwordFileName));
    final Properties prop=new Properties();
    prop.load(is);
    for (    Object key : prop.keySet()) {
      final String entry=(String)key;
      if (entry.startsWith(Environment.getPrefix())) {
        final String optionName=withPrefix ? entry : entry.substring(Environment.getPrefix().length()).toLowerCase(Locale.ENGLISH);
        final String optionValue=prop.getProperty(entry);
        passwordOptions.put(optionName,optionValue);
      }
    }
  }
 catch (  final Exception e) {
    throw new CommandException(e);
  }
 finally {
    try {
      if (!readStdin && is != null)       is.close();
    }
 catch (    final Exception ignore) {
    }
  }
  return passwordOptions;
}"
29787,"@Override public int executeCommand() throws CommandException, CommandValidationException {
  int ret=0;
  if (vars == null || vars.size() == 0) {
    for (    Map.Entry<String,String> e : env.entrySet())     logger.info(e.getKey() + ""String_Node_Str"" + quote(e.getValue()));
  }
 else {
    for (    String arg : vars) {
      String name, value;
      int eq=arg.indexOf('=');
      if (eq < 0) {
        name=arg;
        value=null;
      }
 else {
        name=arg.substring(0,eq);
        value=arg.substring(eq + 1);
      }
      if (!name.startsWith(Environment.PREFIX)) {
        logger.info(strings.get(""String_Node_Str"",name,Environment.PREFIX));
        ret=-1;
        continue;
      }
      if (value == null) {
        String v=env.get(name);
        if (v != null)         logger.info(name + ""String_Node_Str"" + v);
      }
 else       env.put(name,value);
    }
  }
  return ret;
}","@Override public int executeCommand() throws CommandException, CommandValidationException {
  int ret=0;
  if (vars == null || vars.size() == 0) {
    for (    Map.Entry<String,String> e : env.entrySet())     logger.info(e.getKey() + ""String_Node_Str"" + quote(e.getValue()));
  }
 else {
    for (    String arg : vars) {
      String name, value;
      int eq=arg.indexOf('=');
      if (eq < 0) {
        name=arg;
        value=null;
      }
 else {
        name=arg.substring(0,eq);
        value=arg.substring(eq + 1);
      }
      if (!name.startsWith(Environment.getPrefix())) {
        logger.info(strings.get(""String_Node_Str"",name,Environment.getPrefix()));
        ret=-1;
        continue;
      }
      if (value == null) {
        String v=env.get(name);
        if (v != null)         logger.info(name + ""String_Node_Str"" + v);
      }
 else       env.put(name,value);
    }
  }
  return ret;
}"
29788,"@Override public int executeCommand() throws CommandException, CommandValidationException {
  int ret=0;
  for (  String name : vars) {
    if (!name.startsWith(Environment.PREFIX)) {
      logger.info(strings.get(""String_Node_Str"",name,Environment.PREFIX));
      ret=-1;
      continue;
    }
    if (env.get(name) == null) {
      logger.info(strings.get(""String_Node_Str"",name));
      ret=-1;
    }
 else     env.remove(name);
  }
  return ret;
}","@Override public int executeCommand() throws CommandException, CommandValidationException {
  int ret=0;
  for (  String name : vars) {
    if (!name.startsWith(Environment.getPrefix())) {
      logger.info(strings.get(""String_Node_Str"",name,Environment.getPrefix()));
      ret=-1;
      continue;
    }
    if (env.get(name) == null) {
      logger.info(strings.get(""String_Node_Str"",name));
      ret=-1;
    }
 else     env.remove(name);
  }
  return ret;
}"
29789,"ParameterMap getParameters(String command,String[] args) throws CommandException {
  CommandModel commandModel=commandRunner.getModel(command,logger);
  if (command == null) {
    throw new CommandException(""String_Node_Str"" + command);
  }
  Parser parser=new Parser(args,0,ProgramOptions.getValidOptions(),true);
  ParameterMap globalOptions=parser.getOptions();
  List<String> operands=parser.getOperands();
  String argv[]=operands.toArray(new String[operands.size()]);
  parser=new Parser(argv,0,commandModel.getParameters(),false);
  ParameterMap options=parser.getOptions();
  operands=parser.getOperands();
  options.set(""String_Node_Str"",operands);
  if (commandModel.getModelFor(""String_Node_Str"") != null)   options.set(""String_Node_Str"",Boolean.toString(terse));
  if (globalOptions.size() > 0) {
    String pwfile=globalOptions.getOne(ProgramOptions.PASSWORDFILE);
    if (pwfile != null && pwfile.length() > 0) {
      Map<String,String> passwords=CLIUtil.readPasswordFileOptions(pwfile,true);
      for (      CommandModel.ParamModel opt : commandModel.getParameters()) {
        if (opt.getParam().password()) {
          String pwdname=opt.getName();
          String pwd=passwords.get(pwdname);
          if (pwd != null) {
            options.set(pwdname,pwd);
          }
        }
      }
    }
  }
  return options;
}","ParameterMap getParameters(String command,String[] args) throws CommandException {
  CommandModel commandModel=commandRunner.getModel(command,logger);
  if (commandModel == null) {
    throw new CommandException(""String_Node_Str"" + command);
  }
  Parser parser=new Parser(args,0,ProgramOptions.getValidOptions(),true);
  ParameterMap globalOptions=parser.getOptions();
  List<String> operands=parser.getOperands();
  String argv[]=operands.toArray(new String[operands.size()]);
  parser=new Parser(argv,0,commandModel.getParameters(),false);
  ParameterMap options=parser.getOptions();
  operands=parser.getOperands();
  options.set(""String_Node_Str"",operands);
  if (commandModel.getModelFor(""String_Node_Str"") != null)   options.set(""String_Node_Str"",Boolean.toString(terse));
  if (globalOptions.size() > 0) {
    String pwfile=globalOptions.getOne(ProgramOptions.PASSWORDFILE);
    if (pwfile != null && pwfile.length() > 0) {
      Map<String,String> passwords=CLIUtil.readPasswordFileOptions(pwfile,true);
      for (      CommandModel.ParamModel opt : commandModel.getParameters()) {
        if (opt.getParam().password()) {
          String pwdname=opt.getName();
          String pwd=passwords.get(pwdname);
          if (pwd != null) {
            options.set(pwdname,pwd);
          }
        }
      }
    }
  }
  return options;
}"
29790,"/** 
 * Extract the payload (client side stub jar files) to the directory specified via --retrieve option.
 * @param outboundPayload Payload to be extracted
 * @param actionReport    ActionReport of the deploy command.
 * @param retrieveDir     Directory where the payload should be extracted to.
 */
private void extractPayload(Payload.Outbound outboundPayload,ActionReport actionReport,File retrieveDir){
  File payloadZip=null;
  FileOutputStream payloadOutputStream=null;
  FileInputStream payloadInputStream=null;
  try {
    final ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
    actionReport.writeReport(baos);
    final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
    final Properties reportProps=new Properties();
    reportProps.setProperty(""String_Node_Str"",""String_Node_Str"");
    outboundPayload.addPart(0,actionReport.getContentType(),""String_Node_Str"",reportProps,bais);
    payloadZip=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    payloadOutputStream=new FileOutputStream(payloadZip);
    outboundPayload.writeTo(payloadOutputStream);
    payloadOutputStream.flush();
    payloadOutputStream.close();
    final PayloadFilesManager pfm=new PayloadFilesManager.Perm(retrieveDir,null,logger);
    payloadInputStream=new FileInputStream(payloadZip);
    final PayloadImpl.Inbound inboundPayload=PayloadImpl.Inbound.newInstance(""String_Node_Str"",payloadInputStream);
    pfm.processParts(inboundPayload);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage(),ex);
  }
 finally {
    if (payloadOutputStream != null) {
      try {
        payloadOutputStream.close();
      }
 catch (      IOException ioex) {
        logger.warning(ioex.getMessage());
      }
    }
    if (payloadInputStream != null) {
      try {
        payloadInputStream.close();
      }
 catch (      IOException ioex) {
        logger.warning(ioex.getMessage());
      }
    }
    if (payloadZip != null) {
      payloadZip.delete();
    }
  }
}","/** 
 * Extract the payload (client side stub jar files) to the directory specified via --retrieve option.
 * @param outboundPayload Payload to be extracted
 * @param actionReport    ActionReport of the deploy command.
 * @param retrieveDir     Directory where the payload should be extracted to.
 */
private void extractPayload(Payload.Outbound outboundPayload,ActionReport actionReport,File retrieveDir){
  File payloadZip=null;
  FileOutputStream payloadOutputStream=null;
  FileInputStream payloadInputStream=null;
  try {
    final ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
    actionReport.writeReport(baos);
    final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
    final Properties reportProps=new Properties();
    reportProps.setProperty(""String_Node_Str"",""String_Node_Str"");
    outboundPayload.addPart(0,actionReport.getContentType(),""String_Node_Str"",reportProps,bais);
    payloadZip=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    payloadOutputStream=new FileOutputStream(payloadZip);
    outboundPayload.writeTo(payloadOutputStream);
    payloadOutputStream.flush();
    payloadOutputStream.close();
    final PayloadFilesManager pfm=new PayloadFilesManager.Perm(retrieveDir,null,logger);
    payloadInputStream=new FileInputStream(payloadZip);
    final PayloadImpl.Inbound inboundPayload=PayloadImpl.Inbound.newInstance(""String_Node_Str"",payloadInputStream);
    pfm.processParts(inboundPayload);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage(),ex);
  }
 finally {
    if (payloadOutputStream != null) {
      try {
        payloadOutputStream.close();
      }
 catch (      IOException ioex) {
        logger.warning(ioex.getMessage());
      }
    }
    if (payloadInputStream != null) {
      try {
        payloadInputStream.close();
      }
 catch (      IOException ioex) {
        logger.warning(ioex.getMessage());
      }
    }
    if (payloadZip != null) {
      if (payloadZip.delete() == false) {
        logger.log(Level.WARNING,""String_Node_Str"",payloadZip.toString());
      }
    }
  }
}"
29791,"public void visitInnerClass(String name,String outerName,String innerName,int access){
}","@Override public void visitInnerClass(String name,String outerName,String innerName,int access){
}"
29792,"/** 
 * Visits the end of the class. This method, which is the last one to be called, is used to inform the visitor that all the fields and methods of the class have been visited.
 */
public void visitEnd(){
}","/** 
 * Visits the end of the class. This method, which is the last one to be called, is used to inform the visitor that all the fields and methods of the class have been visited.
 */
@Override public void visitEnd(){
}"
29793,"public void visitOuterClass(String owner,String name,String desc){
}","@Override public void visitOuterClass(String owner,String name,String desc){
}"
29794,"public void visitAttribute(Attribute attr){
}","@Override public void visitAttribute(Attribute attr){
}"
29795,"public AnnotationVisitor visitAnnotation(String desc,boolean visible){
  hasConfiguredAnnotation|=""String_Node_Str"".equals(desc);
  if (""String_Node_Str"".equals(desc)) {
    classDef.setDeprecated(true);
  }
  return null;
}","@Override public AnnotationVisitor visitAnnotation(String desc,boolean visible){
  hasConfiguredAnnotation|=""String_Node_Str"".equals(desc);
  if (""String_Node_Str"".equals(desc) && classDef != null) {
    classDef.setDeprecated(true);
  }
  return null;
}"
29796,"public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  String type=null;
  try {
    if (showDeprecated || ((access & Opcodes.ACC_DEPRECATED) != Opcodes.ACC_DEPRECATED)) {
      if (hasConfiguredAnnotation) {
        if (signature != null) {
          type=GenerateDomainSchema.toClassName(signature.substring(signature.indexOf(""String_Node_Str"") + 1,signature.lastIndexOf(""String_Node_Str"") - 1));
        }
 else {
          type=GenerateDomainSchema.toClassName(desc);
        }
      }
    }
  }
 catch (  StringIndexOutOfBoundsException e) {
    throw new RuntimeException(e.getMessage());
  }
  return name.startsWith(""String_Node_Str"") && type != null ? new AttributeMethodVisitor(classDef,name,type) : null;
}","@Override public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  String type=null;
  try {
    if (showDeprecated || ((access & Opcodes.ACC_DEPRECATED) != Opcodes.ACC_DEPRECATED)) {
      if (hasConfiguredAnnotation) {
        if (signature != null) {
          type=GenerateDomainSchema.toClassName(signature.substring(signature.indexOf(""String_Node_Str"") + 1,signature.lastIndexOf(""String_Node_Str"") - 1));
        }
 else {
          type=GenerateDomainSchema.toClassName(desc);
        }
      }
    }
  }
 catch (  StringIndexOutOfBoundsException e) {
    throw new RuntimeException(e.getMessage());
  }
  return name.startsWith(""String_Node_Str"") && type != null ? new AttributeMethodVisitor(classDef,name,type) : null;
}"
29797,"public void visitSource(String source,String debug){
}","@Override public void visitSource(String source,String debug){
}"
29798,"public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  return null;
}","@Override public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  return null;
}"
29799,"public void visit(int version,int access,String name,String signature,String superName,String[] intfs){
  className=GenerateDomainSchema.toClassName(name);
  interfaces=new ArrayList<String>();
  for (  String intf : intfs) {
    interfaces.add(GenerateDomainSchema.toClassName(intf));
  }
  classDef=new ClassDef(className,interfaces);
}","@Override public void visit(int version,int access,String name,String signature,String superName,String[] intfs){
  className=GenerateDomainSchema.toClassName(name);
  interfaces=new ArrayList<String>();
  for (  String intf : intfs) {
    interfaces.add(GenerateDomainSchema.toClassName(intf));
  }
  classDef=new ClassDef(className,interfaces);
}"
29800,"private List<JarFile> locateJarFiles(String modulesDir) throws IOException {
  List<JarFile> result=new ArrayList<JarFile>();
  final File[] files=new File(modulesDir).listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  for (  File f : files) {
    result.add(new JarFile(f));
  }
  return result;
}","private List<JarFile> locateJarFiles(String modulesDir) throws IOException {
  List<JarFile> result=new ArrayList<JarFile>();
  final File[] files=new File(modulesDir).listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  for (  File f : files) {
    result.add(new JarFile(f));
  }
  return result;
}"
29801,"private ClassDef parse(InputStream is) throws IOException {
  DocClassVisitor visitor=new DocClassVisitor(Boolean.valueOf(showDeprecated));
  new ClassReader(is).accept(visitor,0);
  return visitor.isConfigured() ? visitor.getClassDef() : null;
}","private ClassDef parse(InputStream is) throws IOException {
  DocClassVisitor visitor=new DocClassVisitor(showDeprecated);
  new ClassReader(is).accept(visitor,0);
  return visitor.isConfigured() ? visitor.getClassDef() : null;
}"
29802,"public void execute(AdminCommandContext context){
  try {
    URI uri=new URI(System.getProperty(""String_Node_Str""));
    docDir=new File(new File(uri),""String_Node_Str"");
    findClasses(classDefs,locateJarFiles(System.getProperty(""String_Node_Str"") + ""String_Node_Str""));
    getFormat().output(new Context(classDefs,docDir,showDeprecated,showSubclasses,Domain.class.getName()));
    context.getActionReport().setMessage(""String_Node_Str"" + format + ""String_Node_Str""+ docDir);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
}","@Override public void execute(AdminCommandContext context){
  try {
    URI uri=new URI(System.getProperty(""String_Node_Str""));
    docDir=new File(new File(uri),""String_Node_Str"");
    findClasses(classDefs,locateJarFiles(System.getProperty(""String_Node_Str"") + ""String_Node_Str""));
    getFormat().output(new Context(classDefs,docDir,showDeprecated,showSubclasses,Domain.class.getName()));
    context.getActionReport().setMessage(""String_Node_Str"" + format + ""String_Node_Str""+ docDir);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
}"
29803,"public boolean accept(File dir,String name){
  return name.endsWith(""String_Node_Str"");
}","@Override public boolean accept(File dir,String name){
  return name.endsWith(""String_Node_Str"");
}"
29804,"private void buildToc(final ClassDef def) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  if (def != null) {
    if (!toc.contains(def)) {
      buildDetail(def);
    }
    toc.add(def);
    println(tocWriter,""String_Node_Str"");
    println(tocWriter,""String_Node_Str"" + link(def));
    for (    Entry<String,String> aggType : def.getAggregatedTypes().entrySet()) {
      if (!Property.class.getName().equals(aggType.getValue())) {
        buildToc(defs.get(aggType.getValue()));
      }
    }
    for (    ClassDef subclass : def.getSubclasses()) {
      buildToc(subclass);
    }
    println(tocWriter,""String_Node_Str"");
  }
}","private void buildToc(final ClassDef def) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  if (def != null) {
    if (!toc.contains(def)) {
      buildDetail(def);
    }
    toc.add(def);
    println(tocWriter,""String_Node_Str"");
    println(tocWriter,""String_Node_Str"" + link(def));
    for (    Entry<String,String> aggType : def.getAggregatedTypes().entrySet()) {
      if (!Property.class.getName().equals(aggType.getValue()) && defs != null) {
        buildToc(defs.get(aggType.getValue()));
      }
    }
    for (    ClassDef subclass : def.getSubclasses()) {
      buildToc(subclass);
    }
    println(tocWriter,""String_Node_Str"");
  }
}"
29805,"@SuppressWarnings({""String_Node_Str""}) private void copy(final String resource) throws IOException {
  InputStreamReader reader=null;
  PrintWriter writer=null;
  try {
    InputStream stream=getClass().getClassLoader().getResourceAsStream(resource);
    reader=new InputStreamReader(stream);
    writer=new PrintWriter(new File(dir,resource));
    char[] bytes=new char[8192];
    int read;
    while ((read=reader.read(bytes)) != -1) {
      writer.write(bytes,0,read);
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.close();
    }
  }
}","private void copy(final String resource) throws IOException {
  InputStreamReader reader=null;
  PrintWriter writer=null;
  try {
    try {
      InputStream stream=getClass().getClassLoader().getResourceAsStream(resource);
      reader=new InputStreamReader(stream);
      writer=new PrintWriter(new File(dir,resource));
      char[] bytes=new char[8192];
      int read;
      while ((read=reader.read(bytes)) != -1) {
        writer.write(bytes,0,read);
      }
    }
  finally {
      if (reader != null) {
        reader.close();
      }
    }
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
}"
29806,"/** 
 * Defines the command to stop the derby database. Note that when using Darwin (Mac), the property, ""-Dderby.storage.fileSyncTransactionLog=True"" is defined.
 */
public String[] stopDatabaseCmd() throws Exception {
  passwords=new HashMap<String,String>();
  String passwordfile=this.getOption(ProgramOptions.PASSWORDFILE);
  if (passwordfile != null) {
    dbPasswordFile=new File(passwordfile);
    dbPasswordFile=SmartFile.sanitize(dbPasswordFile);
  }
  if (dbPasswordFile != null) {
    passwords=CLIUtil.readPasswordFileOptions(dbPasswordFile.getPath(),true);
    dbPassword=passwords.get(Environment.PREFIX + ""String_Node_Str"");
  }
  if (dbUser == null && dbPassword == null) {
    if (OS.isDarwin()) {
      return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str""};
    }
    return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str""};
  }
 else {
    if (OS.isDarwin()) {
      return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str"",dbUser,dbPassword};
    }
    return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str"",dbUser,dbPassword};
  }
}","/** 
 * Defines the command to stop the derby database. Note that when using Darwin (Mac), the property, ""-Dderby.storage.fileSyncTransactionLog=True"" is defined.
 */
public String[] stopDatabaseCmd() throws Exception {
  passwords=new HashMap<String,String>();
  String passwordfile=this.getOption(ProgramOptions.PASSWORDFILE);
  if (passwordfile != null) {
    dbPasswordFile=new File(passwordfile);
    dbPasswordFile=SmartFile.sanitize(dbPasswordFile);
  }
  if (dbPasswordFile != null) {
    passwords=CLIUtil.readPasswordFileOptions(dbPasswordFile.getPath(),true);
    dbPassword=passwords.get(Environment.getPrefix() + ""String_Node_Str"");
  }
  if (dbUser == null && dbPassword == null) {
    if (OS.isDarwin()) {
      return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str""};
    }
    return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str""};
  }
 else {
    if (OS.isDarwin()) {
      return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str"",dbUser,dbPassword};
    }
    return new String[]{sJavaHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",""String_Node_Str"" + sInstallRoot + File.separator+ ""String_Node_Str"",""String_Node_Str"",sClasspath + File.pathSeparator + sDatabaseClasspath,""String_Node_Str"",""String_Node_Str"",dbHost,dbPort,""String_Node_Str"",dbUser,dbPassword};
  }
}"
29807,"/** 
 * Get the usage text for the subcommand. This method shows the details for the subcommand options but does not provide details about the command  options.
 * @return usage text
 */
public String getUsage(){
  String usage;
  if (commandModel != null && ok(usage=commandModel.getUsageText())) {
    StringBuffer usageText=new StringBuffer();
    usageText.append(strings.get(""String_Node_Str"",strings.get(""String_Node_Str"")));
    usageText.append(""String_Node_Str"");
    usageText.append(usage);
    return usageText.toString();
  }
 else {
    return generateUsageText();
  }
}","/** 
 * Get the usage text for the subcommand. This method shows the details for the subcommand options but does not provide details about the command  options.
 * @return usage text
 */
public String getUsage(){
  String usage;
  if (commandModel != null && ok(usage=commandModel.getUsageText())) {
    StringBuffer usageText=new StringBuffer();
    usageText.append(strings.get(""String_Node_Str"",strings.get(""String_Node_Str"",programOpts.getCommandName())));
    usageText.append(""String_Node_Str"");
    usageText.append(usage);
    return usageText.toString();
  }
 else {
    return generateUsageText();
  }
}"
29808,"private String generateUsageText(){
  StringBuilder usageText=new StringBuilder();
  usageText.append(strings.get(""String_Node_Str"",strings.get(""String_Node_Str"")));
  usageText.append(""String_Node_Str"");
  usageText.append(getName());
  int len=usageText.length();
  StringBuilder optText=new StringBuilder();
  String lsep=System.getProperty(""String_Node_Str"");
  for (  ParamModel opt : usageOptions()) {
    optText.setLength(0);
    final String optName=lc(opt.getName());
    if (optName.equals(""String_Node_Str""))     continue;
    if (optName.startsWith(""String_Node_Str""))     continue;
    if (opt.getParam().password())     continue;
    if (opt.getParam().obsolete())     continue;
    if (opt.getParam().primary())     continue;
    boolean optional=opt.getParam().optional();
    String defValue=opt.getParam().defaultValue();
    if (optional)     optText.append(""String_Node_Str"");
    String sn=opt.getParam().shortName();
    if (ok(sn))     optText.append('-').append(sn).append('|');
    optText.append(""String_Node_Str"").append(optName);
    if (opt.getType() == Boolean.class || opt.getType() == boolean.class) {
      if (ok(defValue) && Boolean.parseBoolean(defValue))       defValue=""String_Node_Str"";
 else       defValue=""String_Node_Str"";
      optText.append(""String_Node_Str"").append(optName);
      optText.append(strings.get(""String_Node_Str"",defValue));
      optText.append(""String_Node_Str"");
    }
 else {
      if (ok(defValue)) {
        optText.append(""String_Node_Str"").append(optName);
        optText.append(strings.get(""String_Node_Str"",defValue));
        optText.append('>');
      }
 else       optText.append(""String_Node_Str"").append(optName).append('>');
    }
    if (optional)     optText.append(""String_Node_Str"");
    if (len + 1 + optText.length() > 80) {
      usageText.append(lsep).append('\t');
      len=8;
    }
 else {
      usageText.append(' ');
      len++;
    }
    usageText.append(optText);
    len+=optText.length();
  }
  String helpText=""String_Node_Str"";
  if (len + 1 + helpText.length() > 80) {
    usageText.append(lsep).append('\t');
    len=8;
  }
 else {
    usageText.append(' ');
    len++;
  }
  usageText.append(helpText);
  len+=helpText.length();
  optText.setLength(0);
  ParamModel operandParam=getOperandModel();
  String opname=operandParam != null ? lc(operandParam.getName()) : null;
  if (!ok(opname))   opname=""String_Node_Str"";
  int operandMin=0;
  int operandMax=0;
  if (operandParam != null) {
    operandMin=operandParam.getParam().optional() ? 0 : 1;
    operandMax=operandParam.getParam().multiple() ? Integer.MAX_VALUE : 1;
  }
  if (operandMax > 0) {
    if (operandMin == 0) {
      optText.append(""String_Node_Str"").append(opname);
      if (operandMax > 1)       optText.append(""String_Node_Str"");
      optText.append(""String_Node_Str"");
    }
 else {
      optText.append(opname);
      if (operandMax > 1)       optText.append(""String_Node_Str"");
    }
  }
  if (len + 1 + optText.length() > 80) {
    usageText.append(lsep).append('\t');
    len=8;
  }
 else {
    usageText.append(' ');
    len++;
  }
  usageText.append(optText);
  return usageText.toString();
}","private String generateUsageText(){
  StringBuilder usageText=new StringBuilder();
  usageText.append(strings.get(""String_Node_Str"",strings.get(""String_Node_Str"",programOpts.getCommandName())));
  usageText.append(""String_Node_Str"");
  usageText.append(getName());
  int len=usageText.length();
  StringBuilder optText=new StringBuilder();
  String lsep=System.getProperty(""String_Node_Str"");
  for (  ParamModel opt : usageOptions()) {
    optText.setLength(0);
    final String optName=lc(opt.getName());
    if (optName.equals(""String_Node_Str""))     continue;
    if (optName.startsWith(""String_Node_Str""))     continue;
    if (opt.getParam().password())     continue;
    if (opt.getParam().obsolete())     continue;
    if (opt.getParam().primary())     continue;
    boolean optional=opt.getParam().optional();
    String defValue=opt.getParam().defaultValue();
    if (optional)     optText.append(""String_Node_Str"");
    String sn=opt.getParam().shortName();
    if (ok(sn))     optText.append('-').append(sn).append('|');
    optText.append(""String_Node_Str"").append(optName);
    if (opt.getType() == Boolean.class || opt.getType() == boolean.class) {
      if (ok(defValue) && Boolean.parseBoolean(defValue))       defValue=""String_Node_Str"";
 else       defValue=""String_Node_Str"";
      optText.append(""String_Node_Str"").append(optName);
      optText.append(strings.get(""String_Node_Str"",defValue));
      optText.append(""String_Node_Str"");
    }
 else {
      if (ok(defValue)) {
        optText.append(""String_Node_Str"").append(optName);
        optText.append(strings.get(""String_Node_Str"",defValue));
        optText.append('>');
      }
 else       optText.append(""String_Node_Str"").append(optName).append('>');
    }
    if (optional)     optText.append(""String_Node_Str"");
    if (len + 1 + optText.length() > 80) {
      usageText.append(lsep).append('\t');
      len=8;
    }
 else {
      usageText.append(' ');
      len++;
    }
    usageText.append(optText);
    len+=optText.length();
  }
  String helpText=""String_Node_Str"";
  if (len + 1 + helpText.length() > 80) {
    usageText.append(lsep).append('\t');
    len=8;
  }
 else {
    usageText.append(' ');
    len++;
  }
  usageText.append(helpText);
  len+=helpText.length();
  optText.setLength(0);
  ParamModel operandParam=getOperandModel();
  String opname=operandParam != null ? lc(operandParam.getName()) : null;
  if (!ok(opname))   opname=""String_Node_Str"";
  int operandMin=0;
  int operandMax=0;
  if (operandParam != null) {
    operandMin=operandParam.getParam().optional() ? 0 : 1;
    operandMax=operandParam.getParam().multiple() ? Integer.MAX_VALUE : 1;
  }
  if (operandMax > 0) {
    if (operandMin == 0) {
      optText.append(""String_Node_Str"").append(opname);
      if (operandMax > 1)       optText.append(""String_Node_Str"");
      optText.append(""String_Node_Str"");
    }
 else {
      optText.append(opname);
      if (operandMax > 1)       optText.append(""String_Node_Str"");
    }
  }
  if (len + 1 + optText.length() > 80) {
    usageText.append(lsep).append('\t');
    len=8;
  }
 else {
    usageText.append(' ');
    len++;
  }
  usageText.append(optText);
  return usageText.toString();
}"
29809,"@Override public String executeOn(String[] args) throws IOException, InterruptedException {
  SSHLauncher sshLauncher=new SSHLauncher();
  File home=new File(System.getProperty(""String_Node_Str""));
  String keyFile=new File(home,""String_Node_Str"").getAbsolutePath();
  sshLauncher.init(getUser().getName(),address.getHostAddress(),22,null,keyFile,null,Logger.getAnonymousLogger());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  StringBuilder stringBuilder=new StringBuilder();
  for (  String arg : args) {
    stringBuilder.append(arg);
    stringBuilder.append(""String_Node_Str"");
  }
  sshLauncher.runCommand(stringBuilder.toString().trim(),baos);
  return baos.toString();
}","@Override public String executeOn(String[] args) throws IOException, InterruptedException {
  SSHLauncher sshLauncher=new SSHLauncher();
  File home=new File(System.getProperty(""String_Node_Str""));
  String keyFile=new File(home,""String_Node_Str"").getAbsolutePath();
  sshLauncher.init(getUser().getName(),getAddress().getHostAddress(),22,null,keyFile,null,Logger.getAnonymousLogger());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  StringBuilder stringBuilder=new StringBuilder();
  for (  String arg : args) {
    stringBuilder.append(arg);
    stringBuilder.append(""String_Node_Str"");
  }
  sshLauncher.runCommand(stringBuilder.toString().trim(),baos);
  return baos.toString();
}"
29810,"/** 
 * Gets the deployment context of this web application.
 */
public DeploymentContext getDeploymentContext(){
  return deploymentContext;
}","/** 
 * Gets the deployment context of this web application.
 */
public DeploymentContext getDeploymentContext(){
synchronized (this) {
    return deploymentContext;
  }
}"
29811,"public void setLogger(Logger logger){
  this.logger=logger;
}","public void setLogger(Logger logger){
synchronized (this) {
    this.logger=logger;
  }
}"
29812,"private void addJNDIBindings(JndiNameEnvironment env,ScopeType scope,Collection<JNDIBinding> jndiBindings){
  addEnvironmentProperties(scope,env.getEnvironmentProperties().iterator(),jndiBindings);
  for (Iterator itr=env.getJmsDestinationReferenceDescriptors().iterator(); itr.hasNext(); ) {
    JmsDestinationReferenceDescriptor next=(JmsDestinationReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    next.checkType();
    jndiBindings.add(getCompEnvBinding(next));
  }
  addDataSourceBindings(env,scope,jndiBindings);
  for (Iterator itr=env.getEjbReferenceDescriptors().iterator(); itr.hasNext(); ) {
    EjbReferenceDescriptor next=(EjbReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    String name=descriptorToLogicalJndiName(next);
    EjbReferenceProxy proxy=new EjbReferenceProxy(next);
    jndiBindings.add(new CompEnvBinding(name,proxy));
  }
  for (Iterator itr=env.getMessageDestinationReferenceDescriptors().iterator(); itr.hasNext(); ) {
    MessageDestinationReferenceDescriptor next=(MessageDestinationReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    jndiBindings.add(getCompEnvBinding(next));
  }
  addResourceReferences(scope,env.getResourceReferenceDescriptors().iterator(),jndiBindings);
  for (  EntityManagerFactoryReferenceDescriptor next : env.getEntityManagerFactoryReferenceDescriptors()) {
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    String name=descriptorToLogicalJndiName(next);
    Object value=new FactoryForEntityManagerFactoryWrapper(next.getUnitName(),invMgr,this);
    jndiBindings.add(new CompEnvBinding(name,value));
  }
  for (Iterator itr=env.getServiceReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ServiceReferenceDescriptor next=(ServiceReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    if (next.getMappedName() != null) {
      next.setName(next.getMappedName());
    }
    String name=descriptorToLogicalJndiName(next);
    WebServiceRefProxy value=new WebServiceRefProxy(next);
    jndiBindings.add(new CompEnvBinding(name,value));
  }
  for (  EntityManagerReferenceDescriptor next : env.getEntityManagerReferenceDescriptors()) {
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    String name=descriptorToLogicalJndiName(next);
    FactoryForEntityManagerWrapper value=new FactoryForEntityManagerWrapper(next,this);
    jndiBindings.add(new CompEnvBinding(name,value));
  }
  return;
}","private void addJNDIBindings(JndiNameEnvironment env,ScopeType scope,Collection<JNDIBinding> jndiBindings){
  addEnvironmentProperties(scope,env.getEnvironmentProperties().iterator(),jndiBindings);
  for (Iterator itr=env.getResourceEnvReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceEnvReferenceDescriptor next=(ResourceEnvReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    next.checkType();
    jndiBindings.add(getCompEnvBinding(next));
  }
  addDataSourceBindings(env,scope,jndiBindings);
  for (Iterator itr=env.getEjbReferenceDescriptors().iterator(); itr.hasNext(); ) {
    EjbReferenceDescriptor next=(EjbReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    String name=descriptorToLogicalJndiName(next);
    EjbReferenceProxy proxy=new EjbReferenceProxy(next);
    jndiBindings.add(new CompEnvBinding(name,proxy));
  }
  for (Iterator itr=env.getMessageDestinationReferenceDescriptors().iterator(); itr.hasNext(); ) {
    MessageDestinationReferenceDescriptor next=(MessageDestinationReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    jndiBindings.add(getCompEnvBinding(next));
  }
  addResourceReferences(scope,env.getResourceReferenceDescriptors().iterator(),jndiBindings);
  for (  EntityManagerFactoryReferenceDescriptor next : env.getEntityManagerFactoryReferenceDescriptors()) {
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    String name=descriptorToLogicalJndiName(next);
    Object value=new FactoryForEntityManagerFactoryWrapper(next.getUnitName(),invMgr,this);
    jndiBindings.add(new CompEnvBinding(name,value));
  }
  for (Iterator itr=env.getServiceReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ServiceReferenceDescriptor next=(ServiceReferenceDescriptor)itr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    if (next.getMappedName() != null) {
      next.setName(next.getMappedName());
    }
    String name=descriptorToLogicalJndiName(next);
    WebServiceRefProxy value=new WebServiceRefProxy(next);
    jndiBindings.add(new CompEnvBinding(name,value));
  }
  for (  EntityManagerReferenceDescriptor next : env.getEntityManagerReferenceDescriptors()) {
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    String name=descriptorToLogicalJndiName(next);
    FactoryForEntityManagerWrapper value=new FactoryForEntityManagerWrapper(next,this);
    jndiBindings.add(new CompEnvBinding(name,value));
  }
  return;
}"
29813,"private void processDescriptorForRAReferences(com.sun.enterprise.deployment.Application app,String moduleName,Descriptor descriptor){
  if (descriptor instanceof JndiNameEnvironment) {
    JndiNameEnvironment jndiEnv=(JndiNameEnvironment)descriptor;
    for (    Object resourceRef : jndiEnv.getResourceReferenceDescriptors()) {
      ResourceReferenceDescriptor resRefDesc=(ResourceReferenceDescriptor)resourceRef;
      String jndiName=resRefDesc.getJndiName();
      if (jndiName != null) {
        detectResourceInRA(app,moduleName,jndiName);
      }
    }
    for (    Object jmsDestRef : jndiEnv.getJmsDestinationReferenceDescriptors()) {
      JmsDestinationReferenceDescriptor jmsDestRefDesc=(JmsDestinationReferenceDescriptor)jmsDestRef;
      String jndiName=jmsDestRefDesc.getJndiName();
      if (jndiName != null) {
        detectResourceInRA(app,moduleName,jndiName);
      }
    }
  }
}","private void processDescriptorForRAReferences(com.sun.enterprise.deployment.Application app,String moduleName,Descriptor descriptor){
  if (descriptor instanceof JndiNameEnvironment) {
    JndiNameEnvironment jndiEnv=(JndiNameEnvironment)descriptor;
    for (    Object resourceRef : jndiEnv.getResourceReferenceDescriptors()) {
      ResourceReferenceDescriptor resRefDesc=(ResourceReferenceDescriptor)resourceRef;
      String jndiName=resRefDesc.getJndiName();
      if (jndiName != null) {
        detectResourceInRA(app,moduleName,jndiName);
      }
    }
    for (    Object resourceEnvRef : jndiEnv.getResourceEnvReferenceDescriptors()) {
      ResourceEnvReferenceDescriptor resourceEnvRefDesc=(ResourceEnvReferenceDescriptor)resourceEnvRef;
      String jndiName=resourceEnvRefDesc.getJndiName();
      if (jndiName != null) {
        detectResourceInRA(app,moduleName,jndiName);
      }
    }
  }
}"
29814,"public void print(StringBuffer toStringBuffer){
  toStringBuffer.append(""String_Node_Str"");
  toStringBuffer.append(""String_Node_Str"");
  super.print(toStringBuffer);
  toStringBuffer.append(""String_Node_Str"").append(environmentProperties);
  toStringBuffer.append(""String_Node_Str"");
  if (ejbReferences != null)   printDescriptorSet(ejbReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (jmsDestReferences != null)   printDescriptorSet(jmsDestReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (messageDestReferences != null)   printDescriptorSet(messageDestReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (resourceReferences != null)   printDescriptorSet(resourceReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (serviceReferences != null)   printDescriptorSet(serviceReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"").append(mainClassName);
}","public void print(StringBuffer toStringBuffer){
  toStringBuffer.append(""String_Node_Str"");
  toStringBuffer.append(""String_Node_Str"");
  super.print(toStringBuffer);
  toStringBuffer.append(""String_Node_Str"").append(environmentProperties);
  toStringBuffer.append(""String_Node_Str"");
  if (ejbReferences != null)   printDescriptorSet(ejbReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (resourceEnvReferences != null)   printDescriptorSet(resourceEnvReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (messageDestReferences != null)   printDescriptorSet(messageDestReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (resourceReferences != null)   printDescriptorSet(resourceReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"");
  if (serviceReferences != null)   printDescriptorSet(serviceReferences,toStringBuffer);
  toStringBuffer.append(""String_Node_Str"").append(mainClassName);
}"
29815,"/** 
 * Utility method for iterating the set of named descriptors in the supplied nameEnvironment
 */
protected Collection getNamedDescriptorsFrom(JndiNameEnvironment nameEnvironment){
  Collection namedDescriptors=new Vector();
  for (Iterator itr=nameEnvironment.getResourceReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceReferenceDescriptor resourceReference=(ResourceReferenceDescriptor)itr.next();
    namedDescriptors.add(resourceReference);
  }
  for (Iterator itr=nameEnvironment.getEjbReferenceDescriptors().iterator(); itr.hasNext(); ) {
    EjbReferenceDescriptor ejbReference=(EjbReferenceDescriptor)itr.next();
    namedDescriptors.add(ejbReference);
  }
  for (Iterator itr=nameEnvironment.getJmsDestinationReferenceDescriptors().iterator(); itr.hasNext(); ) {
    JmsDestinationReferenceDescriptor resourceEnvRef=(JmsDestinationReferenceDescriptor)itr.next();
    namedDescriptors.add(resourceEnvRef);
  }
  return namedDescriptors;
}","/** 
 * Utility method for iterating the set of named descriptors in the supplied nameEnvironment
 */
protected Collection getNamedDescriptorsFrom(JndiNameEnvironment nameEnvironment){
  Collection namedDescriptors=new Vector();
  for (Iterator itr=nameEnvironment.getResourceReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceReferenceDescriptor resourceReference=(ResourceReferenceDescriptor)itr.next();
    namedDescriptors.add(resourceReference);
  }
  for (Iterator itr=nameEnvironment.getEjbReferenceDescriptors().iterator(); itr.hasNext(); ) {
    EjbReferenceDescriptor ejbReference=(EjbReferenceDescriptor)itr.next();
    namedDescriptors.add(ejbReference);
  }
  for (Iterator itr=nameEnvironment.getResourceEnvReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceEnvReferenceDescriptor resourceEnvRef=(ResourceEnvReferenceDescriptor)itr.next();
    namedDescriptors.add(resourceEnvRef);
  }
  return namedDescriptors;
}"
29816,"/** 
 * Utility method for iterating the set of NameReference pairs in the supplied nameEnvironment
 */
protected Vector<NamedReferencePair> getNamedReferencePairsFrom(JndiNameEnvironment nameEnvironment){
  Vector<NamedReferencePair> pairs=new Vector<NamedReferencePair>();
  for (Iterator itr=nameEnvironment.getResourceReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceReferenceDescriptor resourceReference=(ResourceReferenceDescriptor)itr.next();
    pairs.add(NamedReferencePair.createResourceRefPair((Descriptor)nameEnvironment,resourceReference));
  }
  for (Iterator itr=nameEnvironment.getEjbReferenceDescriptors().iterator(); itr.hasNext(); ) {
    EjbReferenceDescriptor ejbReference=(EjbReferenceDescriptor)itr.next();
    pairs.add(NamedReferencePair.createEjbRefPair((Descriptor)nameEnvironment,ejbReference));
  }
  for (Iterator itr=nameEnvironment.getJmsDestinationReferenceDescriptors().iterator(); itr.hasNext(); ) {
    JmsDestinationReferenceDescriptor resourceEnvRef=(JmsDestinationReferenceDescriptor)itr.next();
    pairs.add(NamedReferencePair.createResourceEnvRefPair((Descriptor)nameEnvironment,resourceEnvRef));
  }
  return pairs;
}","/** 
 * Utility method for iterating the set of NameReference pairs in the supplied nameEnvironment
 */
protected Vector<NamedReferencePair> getNamedReferencePairsFrom(JndiNameEnvironment nameEnvironment){
  Vector<NamedReferencePair> pairs=new Vector<NamedReferencePair>();
  for (Iterator itr=nameEnvironment.getResourceReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceReferenceDescriptor resourceReference=(ResourceReferenceDescriptor)itr.next();
    pairs.add(NamedReferencePair.createResourceRefPair((Descriptor)nameEnvironment,resourceReference));
  }
  for (Iterator itr=nameEnvironment.getEjbReferenceDescriptors().iterator(); itr.hasNext(); ) {
    EjbReferenceDescriptor ejbReference=(EjbReferenceDescriptor)itr.next();
    pairs.add(NamedReferencePair.createEjbRefPair((Descriptor)nameEnvironment,ejbReference));
  }
  for (Iterator itr=nameEnvironment.getResourceEnvReferenceDescriptors().iterator(); itr.hasNext(); ) {
    ResourceEnvReferenceDescriptor resourceEnvRef=(ResourceEnvReferenceDescriptor)itr.next();
    pairs.add(NamedReferencePair.createResourceEnvRefPair((Descriptor)nameEnvironment,resourceEnvRef));
  }
  return pairs;
}"
29817,"private void addJndiNameEnvironmentInjectables(JndiNameEnvironment jndiNameEnv,List<InjectionCapable> injectables){
  Collection allEnvProps=new HashSet();
  for (Iterator envEntryItr=jndiNameEnv.getEnvironmentProperties().iterator(); envEntryItr.hasNext(); ) {
    EnvironmentProperty envEntry=(EnvironmentProperty)envEntryItr.next();
    if (envEntry.hasAValue()) {
      allEnvProps.add(envEntry);
    }
  }
  allEnvProps.addAll(jndiNameEnv.getEjbReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getServiceReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getResourceReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getJmsDestinationReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getMessageDestinationReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getEntityManagerFactoryReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getEntityManagerReferenceDescriptors());
  for (Iterator envItr=allEnvProps.iterator(); envItr.hasNext(); ) {
    InjectionCapable next=(InjectionCapable)envItr.next();
    if (next.isInjectable()) {
      injectables.add(next);
    }
  }
}","private void addJndiNameEnvironmentInjectables(JndiNameEnvironment jndiNameEnv,List<InjectionCapable> injectables){
  Collection allEnvProps=new HashSet();
  for (Iterator envEntryItr=jndiNameEnv.getEnvironmentProperties().iterator(); envEntryItr.hasNext(); ) {
    EnvironmentProperty envEntry=(EnvironmentProperty)envEntryItr.next();
    if (envEntry.hasAValue()) {
      allEnvProps.add(envEntry);
    }
  }
  allEnvProps.addAll(jndiNameEnv.getEjbReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getServiceReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getResourceReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getResourceEnvReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getMessageDestinationReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getEntityManagerFactoryReferenceDescriptors());
  allEnvProps.addAll(jndiNameEnv.getEntityManagerReferenceDescriptors());
  for (Iterator envItr=allEnvProps.iterator(); envItr.hasNext(); ) {
    InjectionCapable next=(InjectionCapable)envItr.next();
    if (next.isInjectable()) {
      injectables.add(next);
    }
  }
}"
29818,"private static void debugMessage(String s){
  if (DEBUG_MESSAGES_ON)   CLIUtil.writeCommandToDebugLog(new Environment(),new String[]{""String_Node_Str"",s},99999);
}","private static void debugMessage(String s){
  if (DEBUG_MESSAGES_ON) {
    Environment env=new Environment();
    try {
      CLIUtil.writeCommandToDebugLog(new ProgramOptions(env),env,new String[]{""String_Node_Str"",s},99999);
    }
 catch (    CommandException ce) {
    }
  }
}"
29819,"@Override protected int executeCommand() throws CommandException {
  if (appName == null && serviceName == null) {
    validationSuccess=false;
    System.out.println(""String_Node_Str"");
  }
  if (appName != null && serviceName != null) {
    validationSuccess=false;
    System.out.println(""String_Node_Str"");
  }
  if (validationSuccess) {
    Date date=new Date();
    long milliseconds=date.getTime();
    origin=String.valueOf(milliseconds);
    while (true) {
      RemoteCommand cmd=new RemoteCommand(commandName,programOpts,env);
      Map<String,String> attr=cmd.executeAndReturnAttributes(getParams());
      String fileData=attr.get(""String_Node_Str"");
      String filePointer=attr.get(""String_Node_Str"");
      String origin=attr.get(""String_Node_Str"");
      if (fileData != null && fileData.trim().length() > 0) {
        System.out.println(fileData);
      }
      this.filepointer=filePointer;
      this.origin=origin;
    }
  }
  return 0;
}","@Override protected int executeCommand() throws CommandException {
  if (appName == null && serviceName == null) {
    validationSuccess=false;
    System.out.println(""String_Node_Str"");
  }
  if (appName != null && serviceName != null) {
    validationSuccess=false;
    System.out.println(""String_Node_Str"");
  }
  if (validationSuccess) {
    Date date=new Date();
    long milliseconds=date.getTime();
    origin=String.valueOf(milliseconds);
    while (true) {
      RemoteCommand cmd=new RemoteCommand(commandName,programOpts,env);
      Map<String,String> attr=cmd.executeAndReturnAttributes(getParams());
      String fileData=attr.get(""String_Node_Str"");
      String filePointer=attr.get(""String_Node_Str"");
      String origin=attr.get(""String_Node_Str"");
      if (fileData != null && fileData.trim().length() > 0) {
        System.out.println(fileData);
      }
      this.filepointer=filePointer;
      this.origin=origin;
      try {
        Thread.currentThread().sleep(Long.parseLong(pollIntervalInSeconds) * 1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  return 0;
}"
29820,"private boolean addDirectory(ZipOutputStream zout,File fileSource) throws IOException {
  boolean zipDone=false;
  File[] files=fileSource.listFiles();
  for (int i=0; i < files.length; i++) {
    if (files[i].isDirectory()) {
      addDirectory(zout,files[i]);
      continue;
    }
    if (files[i].getAbsolutePath().contains(""String_Node_Str"")) {
      continue;
    }
    try {
      byte[] buffer=new byte[1024];
      FileInputStream fin=new FileInputStream(files[i].getAbsolutePath());
      zout.putNextEntry(new ZipEntry(files[i].getAbsolutePath()));
      int length;
      while ((length=fin.read(buffer)) > 0) {
        zout.write(buffer,0,length);
      }
      zout.closeEntry();
      fin.close();
      zipDone=true;
    }
 catch (    IOException ioe) {
      Logger.getAnonymousLogger().log(Level.SEVERE,""String_Node_Str"",ioe);
      throw ioe;
    }
  }
  return zipDone;
}","private boolean addDirectory(ZipOutputStream zout,File fileSource,int ignoreLength) throws IOException {
  boolean zipDone=false;
  File[] files=fileSource.listFiles();
  for (int i=0; i < files.length; i++) {
    if (files[i].isDirectory()) {
      addDirectory(zout,files[i],ignoreLength);
      continue;
    }
    if (files[i].getAbsolutePath().contains(""String_Node_Str"")) {
      continue;
    }
    try {
      byte[] buffer=new byte[1024];
      FileInputStream fin=new FileInputStream(files[i].getAbsolutePath());
      zout.putNextEntry(new ZipEntry(ignoreLength > -1 ? files[i].getAbsolutePath().substring(ignoreLength) : files[i].getAbsolutePath()));
      int length;
      while ((length=fin.read(buffer)) > 0) {
        zout.write(buffer,0,length);
      }
      zout.closeEntry();
      fin.close();
      zipDone=true;
    }
 catch (    IOException ioe) {
      Logger.getAnonymousLogger().log(Level.SEVERE,""String_Node_Str"",ioe);
      throw ioe;
    }
  }
  return zipDone;
}"
29821,"public String createZipFile(String sourceDir,String zipFileName) throws IOException {
  String zipFile=getZipFileName(sourceDir,zipFileName);
  boolean zipDone=false;
  try {
    FileOutputStream fout=new FileOutputStream(zipFile);
    ZipOutputStream zout=new ZipOutputStream(fout);
    File fileSource=new File(sourceDir);
    zipDone=addDirectory(zout,fileSource);
    zout.close();
  }
 catch (  IOException ioe) {
    Logger.getAnonymousLogger().log(Level.SEVERE,""String_Node_Str"",ioe);
    throw ioe;
  }
  return zipFile;
}","public String createZipFile(String sourceDir,String zipFileName) throws IOException {
  String zipFile=getZipFileName(sourceDir,zipFileName);
  boolean zipDone=false;
  try {
    FileOutputStream fout=new FileOutputStream(zipFile);
    ZipOutputStream zout=new ZipOutputStream(fout);
    File fileSource=new File(sourceDir);
    zipDone=addDirectory(zout,fileSource,fileSource.getAbsolutePath().length() + 1);
    zout.close();
  }
 catch (  IOException ioe) {
    Logger.getAnonymousLogger().log(Level.SEVERE,""String_Node_Str"",ioe);
    throw ioe;
  }
  return zipFile;
}"
29822,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  if (tenantId == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  logger.fine(""String_Node_Str"" + tenantId + ""String_Node_Str""+ ""String_Node_Str"");
  securityStore.create(tenantId + ""String_Node_Str"" + ""String_Node_Str"",password.toCharArray());
  logger.fine(""String_Node_Str"" + tenantId);
  tm.create(tenantId,""String_Node_Str"");
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  if (tenantId == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  logger.log(Level.INFO,""String_Node_Str"",tenantId + ""String_Node_Str"");
  securityStore.create(tenantId + ""String_Node_Str"",password.toCharArray());
  logger.log(Level.INFO,""String_Node_Str"",tenantId);
  logger.fine(""String_Node_Str"" + tenantId);
  tm.create(tenantId,""String_Node_Str"");
}"
29823,"/** 
 * Creates file-user in default realm.
 */
@Override public void create(String name,char[] password){
  CommandInvocation cmd=commandRunner.getCommandInvocation(""String_Node_Str"",actionReport);
  ParameterMap map=new ParameterMap();
  map.add(""String_Node_Str"",password.toString());
  map.add(""String_Node_Str"",name);
  cmd.parameters(map);
  cmd.execute();
  if (actionReport.getActionExitCode() == ActionReport.ExitCode.FAILURE) {
    Throwable cause=actionReport.getFailureCause();
    if (cause instanceof IllegalArgumentException) {
      throw (IllegalArgumentException)cause;
    }
 else {
      throw new RuntimeException(cause);
    }
  }
 else   if (actionReport.getActionExitCode() == ActionReport.ExitCode.FAILURE) {
    logger.fine(actionReport.getMessage());
  }
}","/** 
 * Creates file-user in default realm.
 */
@Override public void create(String name,char[] password){
  CommandInvocation cmd=commandRunner.getCommandInvocation(""String_Node_Str"",actionReport);
  ParameterMap map=new ParameterMap();
  map.add(""String_Node_Str"",String.valueOf(password));
  map.add(""String_Node_Str"",name);
  cmd.parameters(map);
  cmd.execute();
  if (actionReport.getActionExitCode() == ActionReport.ExitCode.FAILURE) {
    Throwable cause=actionReport.getFailureCause();
    if (cause instanceof IllegalArgumentException) {
      throw (IllegalArgumentException)cause;
    }
 else {
      throw new RuntimeException(cause);
    }
  }
 else   if (actionReport.getActionExitCode() == ActionReport.ExitCode.FAILURE) {
    logger.fine(actionReport.getMessage());
  }
}"
29824,"public ApplicationInfo deploy(Collection<Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context));
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=getVirtualServers(commandParams.target);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  ProgressTracker tracker=new ProgressTracker(){
    @Override public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    context.addTransientAppMetaData(DeploymentProperties.ARCHIVE_TYPE,handler.getArchiveType());
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    ClassLoaderHierarchy clh=habitat.getByContract(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      if (sniffers != null && logger.isLoggable(Level.FINE)) {
        for (        Sniffer sniffer : sniffers) {
          logger.fine(""String_Node_Str"" + sniffer.getModuleType());
        }
      }
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,interceptorException.getMessage(),interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,prepareException.getMessage(),prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,e.getMessage(),e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}","public ApplicationInfo deploy(Collection<Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context));
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=getVirtualServers(commandParams.target);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  ProgressTracker tracker=new ProgressTracker(){
    @Override public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    context.addTransientAppMetaData(DeploymentProperties.ARCHIVE_TYPE,handler.getArchiveType());
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    ClassLoaderHierarchy clh=habitat.getByContract(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      if (sniffers != null && logger.isLoggable(Level.FINE)) {
        for (        Sniffer sniffer : sniffers) {
          logger.fine(""String_Node_Str"" + sniffer.getModuleType());
        }
      }
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,interceptorException.getMessage(),interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,prepareException.getMessage(),prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          logger.log(Level.SEVERE,loadException.getMessage(),loadException);
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,e.getMessage(),e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}"
29825,"/** 
 * Given a class loader, check for ServletContainerInitializer implementations in any JAR file in the classpath
 * @param cl The ClassLoader to be used to find JAR files
 * @return Iterable over all ServletContainerInitializers that were found
 */
public static Iterable<ServletContainerInitializer> getServletContainerInitializers(Map<String,String> webFragmentMap,List<Object> absoluteOrderingList,boolean hasOthers,ClassLoader cl){
  if ((absoluteOrderingList != null) && !hasOthers) {
    if (!(cl instanceof URLClassLoader)) {
      log.log(Level.WARNING,""String_Node_Str"",cl.getClass().getCanonicalName());
      return null;
    }
    URLClassLoader webAppCl=(URLClassLoader)cl;
    List<URL> newClassLoaderUrlList=new ArrayList<URL>();
    for (    URL classLoaderUrl : webAppCl.getURLs()) {
      if (!""String_Node_Str"".equals(classLoaderUrl.getProtocol())) {
        continue;
      }
      File file=new File(classLoaderUrl.getFile());
      try {
        file=file.getCanonicalFile();
      }
 catch (      IOException e) {
      }
      if (!file.exists()) {
        continue;
      }
      String path=file.getAbsolutePath();
      if (!path.endsWith(""String_Node_Str"")) {
        continue;
      }
      if (!isFragmentMissingFromAbsoluteOrdering(file.getName(),webFragmentMap,absoluteOrderingList)) {
        newClassLoaderUrlList.add(classLoaderUrl);
      }
    }
    URL[] urlsForNewClassLoader=new URL[newClassLoaderUrlList.size()];
    cl=new URLClassLoader(newClassLoaderUrlList.toArray(urlsForNewClassLoader),webAppCl.getParent());
  }
  return ServiceLoader.load(ServletContainerInitializer.class,cl);
}","/** 
 * Given a class loader, check for ServletContainerInitializer implementations in any JAR file in the classpath
 * @param cl The ClassLoader to be used to find JAR files
 * @return Iterable over all ServletContainerInitializers that were found
 */
public static Iterable<ServletContainerInitializer> getServletContainerInitializers(Map<String,String> webFragmentMap,List<Object> absoluteOrderingList,boolean hasOthers,ClassLoader cl){
  if ((absoluteOrderingList != null) && !hasOthers) {
    if (!(cl instanceof URLClassLoader)) {
      log.log(Level.WARNING,""String_Node_Str"",cl.getClass().getCanonicalName());
      return null;
    }
    final URLClassLoader webAppCl=(URLClassLoader)cl;
    List<URL> newClassLoaderUrlList=new ArrayList<URL>();
    for (    URL classLoaderUrl : webAppCl.getURLs()) {
      if (!""String_Node_Str"".equals(classLoaderUrl.getProtocol())) {
        continue;
      }
      File file=new File(classLoaderUrl.getFile());
      try {
        file=file.getCanonicalFile();
      }
 catch (      IOException e) {
      }
      if (!file.exists()) {
        continue;
      }
      String path=file.getAbsolutePath();
      if (!path.endsWith(""String_Node_Str"")) {
        continue;
      }
      if (!isFragmentMissingFromAbsoluteOrdering(file.getName(),webFragmentMap,absoluteOrderingList)) {
        newClassLoaderUrlList.add(classLoaderUrl);
      }
    }
    URL[] urlsForNewClassLoader=new URL[newClassLoaderUrlList.size()];
    final URL[] urlArray=newClassLoaderUrlList.toArray(urlsForNewClassLoader);
    cl=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
      @Override public URLClassLoader run(){
        return new URLClassLoader(urlArray,webAppCl.getParent());
      }
    }
);
  }
  return ServiceLoader.load(ServletContainerInitializer.class,cl);
}"
29826,"/** 
 * Create and return a temporary loader with the same visibility as this loader. The temporary loader may be used to load resources or any other application classes for the purposes of introspecting them for annotations. The persistence provider should not maintain any references to the temporary loader, or any objects loaded by it.
 * @return A temporary classloader with the same classpath as this loader
 */
public ClassLoader copy(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  return new URLClassLoader(getURLs(),getParent());
}","/** 
 * Create and return a temporary loader with the same visibility as this loader. The temporary loader may be used to load resources or any other application classes for the purposes of introspecting them for annotations. The persistence provider should not maintain any references to the temporary loader, or any objects loaded by it.
 * @return A temporary classloader with the same classpath as this loader
 */
public ClassLoader copy(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  return AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
    @Override public URLClassLoader run(){
      return new URLClassLoader(getURLs(),getParent());
    }
  }
);
}"
29827,"public void updateObjectName(){
  try {
    StandardHost host=(StandardHost)getParent();
    oname=createObjectName(host.getDomain(),host.getJmxName());
    controller=oname;
    for (    Container wrapper : findChildren()) {
      ((StandardWrapper)wrapper).registerJMX(this);
    }
  }
 catch (  Exception ex) {
    if (log.isLoggable(Level.INFO)) {
      log.log(Level.INFO,""String_Node_Str"" + this + ""String_Node_Str""+ oname+ ""String_Node_Str""+ ex.toString(),ex);
    }
  }
}","public void updateObjectName(){
  try {
    StandardHost host=(StandardHost)getParent();
synchronized (this) {
      oname=createObjectName(host.getDomain(),host.getJmxName());
      controller=oname;
    }
    for (    Container wrapper : findChildren()) {
      ((StandardWrapper)wrapper).registerJMX(this);
    }
  }
 catch (  Exception ex) {
    if (log.isLoggable(Level.INFO)) {
      log.log(Level.INFO,""String_Node_Str"" + this + ""String_Node_Str""+ oname+ ""String_Node_Str""+ ex.toString(),ex);
    }
  }
}"
29828,"/** 
 * Process the default configuration file, if it exists. The default config must be read with the container loader - so container servlets can be loaded
 */
protected void defaultConfig() throws LifecycleException {
  long t1=System.currentTimeMillis();
  if (defaultWebXml == null && context instanceof StandardContext) {
    defaultWebXml=((StandardContext)context).getDefaultWebXml();
  }
  if (defaultWebXml == null)   getDefaultWebXml();
  File file=new File(this.defaultWebXml);
  if (!file.isAbsolute()) {
    file=new File(getBaseDir(),this.defaultWebXml);
  }
  InputStream stream=null;
  InputSource source=null;
  try {
    if (!file.exists()) {
      stream=getClass().getClassLoader().getResourceAsStream(defaultWebXml);
      if (stream != null) {
        source=new InputSource(getClass().getClassLoader().getResource(defaultWebXml).toString());
      }
      if (stream == null) {
        stream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
        if (stream != null) {
          source=new InputSource(getClass().getClassLoader().getResource(""String_Node_Str"").toString());
        }
      }
      if (stream == null) {
        if (log.isLoggable(Level.INFO)) {
          log.info(""String_Node_Str"");
        }
        return;
      }
    }
 else {
      source=new InputSource(""String_Node_Str"" + file.getAbsolutePath());
      stream=new FileInputStream(file);
    }
  }
 catch (  Exception e) {
    throw new LifecycleException(sm.getString(""String_Node_Str"") + ""String_Node_Str"" + defaultWebXml+ ""String_Node_Str""+ file,e);
  }
synchronized (webDigester) {
    try {
      source.setByteStream(stream);
      webDigester.setDebug(getDebug());
      if (context instanceof StandardContext)       ((StandardContext)context).setReplaceWelcomeFiles(true);
      webDigester.clear();
      webDigester.setClassLoader(classLoader);
      webDigester.setUseContextClassLoader(false);
      webDigester.push(context);
      webDigester.parse(source);
    }
 catch (    SAXParseException e) {
      throw new LifecycleException(sm.getString(""String_Node_Str"",e.getLineNumber(),e.getColumnNumber()),e);
    }
catch (    Exception e) {
      throw new LifecycleException(sm.getString(""String_Node_Str""),e);
    }
 finally {
      try {
        if (stream != null) {
          stream.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str""),e);
      }
    }
  }
  webRuleSet.recycle();
  long t2=System.currentTimeMillis();
  if ((t2 - t1) > 200 && log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"" + file + ""String_Node_Str""+ (t2 - t1));
}","/** 
 * Process the default configuration file, if it exists. The default config must be read with the container loader - so container servlets can be loaded
 */
protected void defaultConfig() throws LifecycleException {
  long t1=System.currentTimeMillis();
  if (defaultWebXml == null && context instanceof StandardContext) {
    defaultWebXml=((StandardContext)context).getDefaultWebXml();
  }
  if (defaultWebXml == null)   getDefaultWebXml();
  File file=new File(this.defaultWebXml);
  if (!file.isAbsolute()) {
    file=new File(getBaseDir(),this.defaultWebXml);
  }
  InputStream stream=null;
  InputSource source=null;
  try {
    if (!file.exists()) {
      stream=getClass().getClassLoader().getResourceAsStream(defaultWebXml);
      if (stream != null) {
        source=new InputSource(getClass().getClassLoader().getResource(defaultWebXml).toString());
      }
      if (stream == null) {
        stream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
        if (stream != null) {
          source=new InputSource(getClass().getClassLoader().getResource(""String_Node_Str"").toString());
        }
      }
      if (stream == null) {
        if (log.isLoggable(Level.INFO)) {
          log.info(""String_Node_Str"");
        }
        return;
      }
    }
 else {
      source=new InputSource(""String_Node_Str"" + file.getAbsolutePath());
      stream=new FileInputStream(file);
    }
  }
 catch (  Exception e) {
    throw new LifecycleException(sm.getString(""String_Node_Str"") + ""String_Node_Str"" + defaultWebXml+ ""String_Node_Str""+ file,e);
  }
synchronized (webDigester) {
    try {
      source.setByteStream(stream);
      webDigester.setDebug(getDebug());
      if (context instanceof StandardContext)       ((StandardContext)context).setReplaceWelcomeFiles(true);
      webDigester.clear();
      webDigester.setClassLoader(this.getClass().getClassLoader());
      webDigester.setUseContextClassLoader(false);
      webDigester.push(context);
      webDigester.parse(source);
    }
 catch (    SAXParseException e) {
      throw new LifecycleException(sm.getString(""String_Node_Str"",e.getLineNumber(),e.getColumnNumber()),e);
    }
catch (    Exception e) {
      throw new LifecycleException(sm.getString(""String_Node_Str""),e);
    }
 finally {
      try {
        if (stream != null) {
          stream.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str""),e);
      }
    }
  }
  webRuleSet.recycle();
  long t2=System.currentTimeMillis();
  if ((t2 - t1) > 200 && log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"" + file + ""String_Node_Str""+ (t2 - t1));
}"
29829,"private void handleError(Request request,Response response,int statusCode) throws IOException {
  ServletRequest sreq=request.getRequest();
  ServletResponse sres=response.getResponse();
  HttpServletResponse hres=(HttpServletResponse)sres;
  ErrorPage errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
  if (errorPage != null) {
    try {
      hres.setStatus(statusCode);
      ServletContext servletContext=request.getContext().getServletContext();
      ApplicationDispatcher dispatcher=(ApplicationDispatcher)servletContext.getRequestDispatcher(errorPage.getLocation());
      if (hres.isCommitted()) {
        dispatcher.include(sreq,sres);
      }
 else {
        response.resetBuffer(true);
        dispatcher.dispatch(sreq,sres,DispatcherType.ERROR);
        response.setSuspended(false);
      }
      sres.flushBuffer();
    }
 catch (    Throwable t) {
      if (log.isLoggable(Level.INFO)) {
        String message=sm.getString(""String_Node_Str"",errorPage.getLocation());
        log.log(Level.INFO,message,t);
      }
    }
  }
 else {
    hres.sendError(statusCode);
  }
}","private void handleError(Request request,Response response,int statusCode) throws IOException {
  ServletRequest sreq=request.getRequest();
  ServletResponse sres=response.getResponse();
  HttpServletResponse hres=(HttpServletResponse)sres;
  ErrorPage errorPage=null;
  if (getContainer() instanceof StandardHost) {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
  }
 else   if (getContainer() instanceof StandardContext) {
    errorPage=((StandardContext)getContainer()).findErrorPage(statusCode);
  }
  if (errorPage != null) {
    try {
      hres.setStatus(statusCode);
      ServletContext servletContext=request.getContext().getServletContext();
      ApplicationDispatcher dispatcher=(ApplicationDispatcher)servletContext.getRequestDispatcher(errorPage.getLocation());
      if (hres.isCommitted()) {
        dispatcher.include(sreq,sres);
      }
 else {
        response.resetBuffer(true);
        dispatcher.dispatch(sreq,sres,DispatcherType.ERROR);
        response.setSuspended(false);
      }
      sres.flushBuffer();
    }
 catch (    Throwable t) {
      if (log.isLoggable(Level.INFO)) {
        String message=sm.getString(""String_Node_Str"",errorPage.getLocation());
        log.log(Level.INFO,message,t);
      }
    }
  }
 else {
    hres.sendError(statusCode);
  }
}"
29830,"/** 
 * Create, configure, and return an Engine that will process all HTTP requests received from one of the associated Connectors, based on the specified properties. Do not create the JAAS default realm since all children will have their own.
 */
@Override public Engine createEngine(){
  StandardEngine engine=new WebEngine(webContainer);
  engine.setDebug(debug);
  engine.setLogger(logger);
  engine.setRealm(null);
  return (engine);
}","/** 
 * Create, configure, and return an Engine that will process all HTTP requests received from one of the associated Connectors, based on the specified properties. Do not create the JAAS default realm since all children will have their own.
 */
@Override public Engine createEngine(){
  StandardEngine engine=new StandardEngine();
  engine.setDebug(debug);
  engine.setLogger(logger);
  engine.setRealm(null);
  return (engine);
}"
29831,"protected WebModuleConfig getDefaultWebModule(Domain domain,WebArchivist webArchivist,ApplicationRegistry appRegistry){
  WebModuleConfig wmInfo=null;
  String wmID=getDefaultWebModuleID();
  if (wmID != null) {
    Applications appsBean=domain.getApplications();
    wmInfo=findWebModuleInJ2eeApp(appsBean,wmID,appRegistry);
    if (wmInfo == null) {
      String contextRoot=ConfigBeansUtilities.getContextRoot(wmID);
      String location=ConfigBeansUtilities.getLocation(wmID);
      if (contextRoot != null && location != null) {
        File docroot=new File(location);
        WebBundleDescriptor wbd=webArchivist.getDefaultWebXmlBundleDescriptor();
        wmInfo=new WebModuleConfig();
        wbd.setName(Constants.DEFAULT_WEB_MODULE_NAME);
        wbd.setContextRoot(contextRoot);
        wmInfo.setLocation(docroot);
        wmInfo.setDescriptor(wbd);
        wmInfo.setParentLoader(EmbeddedWebContainer.class.getClassLoader());
        wmInfo.setAppClassLoader(new WebappClassLoader(wmInfo.getParentLoader()));
      }
    }
    if (wmInfo == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{wmID,getID()});
    }
  }
  return wmInfo;
}","protected WebModuleConfig getDefaultWebModule(Domain domain,WebArchivist webArchivist,ApplicationRegistry appRegistry){
  WebModuleConfig wmInfo=null;
  String wmID=getDefaultWebModuleID();
  if (wmID != null) {
    Applications appsBean=domain.getApplications();
    wmInfo=findWebModuleInJ2eeApp(appsBean,wmID,appRegistry);
    if (wmInfo == null) {
      String contextRoot=ConfigBeansUtilities.getContextRoot(wmID);
      String location=ConfigBeansUtilities.getLocation(wmID);
      if (contextRoot != null && location != null) {
        File docroot=new File(location);
        WebBundleDescriptor wbd=webArchivist.getDefaultWebXmlBundleDescriptor();
        wmInfo=new WebModuleConfig();
        wbd.setName(Constants.DEFAULT_WEB_MODULE_NAME);
        wbd.setContextRoot(contextRoot);
        wmInfo.setLocation(docroot);
        wmInfo.setDescriptor(wbd);
        wmInfo.setParentLoader(EmbeddedWebContainer.class.getClassLoader());
        WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
          @Override public WebappClassLoader run(){
            return new WebappClassLoader(EmbeddedWebContainer.class.getClassLoader());
          }
        }
);
        wmInfo.setAppClassLoader(cloader);
      }
    }
    if (wmInfo == null) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{wmID,getID()});
    }
  }
  return wmInfo;
}"
29832,"/** 
 * Finds and returns information about a web module embedded within a J2EE application, which is identified by a string of the form <code>a:b</code> or <code>a#b</code>, where <code>a</code> is the name of the J2EE application and <code>b</code> is the name of the embedded web module.
 * @return null if <code>id</code> does not identify a web module embeddedwithin a J2EE application.
 */
protected WebModuleConfig findWebModuleInJ2eeApp(Applications appsBean,String id,ApplicationRegistry appRegistry){
  WebModuleConfig wmInfo=null;
  int separatorIndex=id.indexOf(Constants.NAME_SEPARATOR);
  if (separatorIndex == -1) {
    separatorIndex=id.indexOf('#');
  }
  if (separatorIndex != -1) {
    String appID=id.substring(0,separatorIndex);
    String moduleID=id.substring(separatorIndex + 1);
    com.sun.enterprise.config.serverbeans.Application appBean=appsBean.getModule(com.sun.enterprise.config.serverbeans.Application.class,appID);
    if ((appBean != null) && Boolean.valueOf(appBean.getEnabled())) {
      String location=appBean.getLocation();
      String moduleDir=DeploymentUtils.getRelativeEmbeddedModulePath(location,moduleID);
      ApplicationInfo appInfo=appRegistry.get(appID);
      Application app=null;
      if (appInfo != null) {
        app=appInfo.getMetaData(Application.class);
      }
 else {
        Object[] params={id,getID()};
        _logger.log(Level.SEVERE,""String_Node_Str"",params);
        return wmInfo;
      }
      WebBundleDescriptor wbd=app.getModuleByTypeAndUri(WebBundleDescriptor.class,moduleID);
      String webUri=wbd.getModuleDescriptor().getArchiveUri();
      String contextRoot=wbd.getModuleDescriptor().getContextRoot();
      if (moduleID.equals(webUri)) {
        StringBuilder dir=new StringBuilder(location);
        dir.append(File.separator);
        dir.append(moduleDir);
        File docroot=new File(dir.toString());
        wmInfo=new WebModuleConfig();
        wbd.setName(moduleID);
        wbd.setContextRoot(contextRoot);
        wmInfo.setDescriptor(wbd);
        wmInfo.setLocation(docroot);
        wmInfo.setParentLoader(EmbeddedWebContainer.class.getClassLoader());
        wmInfo.setAppClassLoader(new WebappClassLoader(wmInfo.getParentLoader()));
      }
    }
 else {
      Object[] params={id,getID()};
      _logger.log(Level.SEVERE,""String_Node_Str"",params);
    }
  }
  return wmInfo;
}","/** 
 * Finds and returns information about a web module embedded within a J2EE application, which is identified by a string of the form <code>a:b</code> or <code>a#b</code>, where <code>a</code> is the name of the J2EE application and <code>b</code> is the name of the embedded web module.
 * @return null if <code>id</code> does not identify a web module embeddedwithin a J2EE application.
 */
protected WebModuleConfig findWebModuleInJ2eeApp(Applications appsBean,String id,ApplicationRegistry appRegistry){
  WebModuleConfig wmInfo=null;
  int separatorIndex=id.indexOf(Constants.NAME_SEPARATOR);
  if (separatorIndex == -1) {
    separatorIndex=id.indexOf('#');
  }
  if (separatorIndex != -1) {
    String appID=id.substring(0,separatorIndex);
    String moduleID=id.substring(separatorIndex + 1);
    com.sun.enterprise.config.serverbeans.Application appBean=appsBean.getModule(com.sun.enterprise.config.serverbeans.Application.class,appID);
    if ((appBean != null) && Boolean.valueOf(appBean.getEnabled())) {
      String location=appBean.getLocation();
      String moduleDir=DeploymentUtils.getRelativeEmbeddedModulePath(location,moduleID);
      ApplicationInfo appInfo=appRegistry.get(appID);
      Application app=null;
      if (appInfo != null) {
        app=appInfo.getMetaData(Application.class);
      }
 else {
        Object[] params={id,getID()};
        _logger.log(Level.SEVERE,""String_Node_Str"",params);
        return wmInfo;
      }
      WebBundleDescriptor wbd=app.getModuleByTypeAndUri(WebBundleDescriptor.class,moduleID);
      String webUri=wbd.getModuleDescriptor().getArchiveUri();
      String contextRoot=wbd.getModuleDescriptor().getContextRoot();
      if (moduleID.equals(webUri)) {
        StringBuilder dir=new StringBuilder(location);
        dir.append(File.separator);
        dir.append(moduleDir);
        File docroot=new File(dir.toString());
        wmInfo=new WebModuleConfig();
        wbd.setName(moduleID);
        wbd.setContextRoot(contextRoot);
        wmInfo.setDescriptor(wbd);
        wmInfo.setLocation(docroot);
        wmInfo.setParentLoader(EmbeddedWebContainer.class.getClassLoader());
        WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
          @Override public WebappClassLoader run(){
            return new WebappClassLoader(EmbeddedWebContainer.class.getClassLoader());
          }
        }
);
        wmInfo.setAppClassLoader(cloader);
      }
    }
 else {
      Object[] params={id,getID()};
      _logger.log(Level.SEVERE,""String_Node_Str"",params);
    }
  }
  return wmInfo;
}"
29833,"/** 
 * If a default web module has not yet been configured and added to this virtual server's list of web modules then return the configuration information needed in order to create a default web module for this virtual server. This method should be invoked only after all the standalone modules and the modules within j2ee-application elements have been added to this virtual server's list of modules (only then will one know whether the user has already configured a default web module or not).
 */
public WebModuleConfig createSystemDefaultWebModuleIfNecessary(WebArchivist webArchivist){
  WebModuleConfig wmInfo=null;
  String docroot=getAppBase();
  if (getDefaultWebModuleID() == null && findChild(""String_Node_Str"") == null && docroot != null) {
    WebBundleDescriptor wbd=webArchivist.getDefaultWebXmlBundleDescriptor();
    wmInfo=new WebModuleConfig();
    wbd.setModuleID(Constants.DEFAULT_WEB_MODULE_NAME);
    wbd.setContextRoot(""String_Node_Str"");
    wmInfo.setLocation(new File(docroot));
    wmInfo.setDescriptor(wbd);
    wmInfo.setParentLoader(serverContext.getCommonClassLoader());
    WebappClassLoader loader=new WebappClassLoader(wmInfo.getParentLoader());
    loader.start();
    wmInfo.setAppClassLoader(loader);
    if (wbd.getApplication() == null) {
      Application application=Application.createApplication();
      application.setVirtual(true);
      application.setName(Constants.DEFAULT_WEB_MODULE_NAME);
      wbd.setApplication(application);
    }
  }
  return wmInfo;
}","/** 
 * If a default web module has not yet been configured and added to this virtual server's list of web modules then return the configuration information needed in order to create a default web module for this virtual server. This method should be invoked only after all the standalone modules and the modules within j2ee-application elements have been added to this virtual server's list of modules (only then will one know whether the user has already configured a default web module or not).
 */
public WebModuleConfig createSystemDefaultWebModuleIfNecessary(WebArchivist webArchivist){
  WebModuleConfig wmInfo=null;
  String docroot=getAppBase();
  if (getDefaultWebModuleID() == null && findChild(""String_Node_Str"") == null && docroot != null) {
    WebBundleDescriptor wbd=webArchivist.getDefaultWebXmlBundleDescriptor();
    wmInfo=new WebModuleConfig();
    wbd.setModuleID(Constants.DEFAULT_WEB_MODULE_NAME);
    wbd.setContextRoot(""String_Node_Str"");
    wmInfo.setLocation(new File(docroot));
    wmInfo.setDescriptor(wbd);
    wmInfo.setParentLoader(serverContext.getCommonClassLoader());
    WebappClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
      @Override public WebappClassLoader run(){
        return new WebappClassLoader(serverContext.getCommonClassLoader());
      }
    }
);
    loader.start();
    wmInfo.setAppClassLoader(loader);
    if (wbd.getApplication() == null) {
      Application application=Application.createApplication();
      application.setVirtual(true);
      application.setName(Constants.DEFAULT_WEB_MODULE_NAME);
      wbd.setApplication(application);
    }
  }
  return wmInfo;
}"
29834,"/** 
 * Sets the deployment context for this web application.
 */
public void setDeploymentContext(DeploymentContext deploymentContext){
  this.deploymentContext=deploymentContext;
}","/** 
 * Sets the deployment context for this web application.
 */
public void setDeploymentContext(DeploymentContext deploymentContext){
synchronized (this) {
    this.deploymentContext=deploymentContext;
  }
}"
29835,"/** 
 * Sets the parent of the work directory for this web application. The actual work directory is a subdirectory named after the web application.
 * @param baseDir The new base directory under which the actual workdirectory will be created
 */
public void setWorkDirBase(String baseDir){
  _baseDir=baseDir;
}","/** 
 * Sets the parent of the work directory for this web application. The actual work directory is a subdirectory named after the web application.
 * @param baseDir The new base directory under which the actual workdirectory will be created
 */
public void setWorkDirBase(String baseDir){
synchronized (this) {
    _baseDir=baseDir;
  }
}"
29836,"/** 
 * Set the DOL object associated with this class.
 */
public void setServices(Services services){
  this.services=services;
}","/** 
 * Set the DOL object associated with this class.
 */
public void setServices(Services services){
synchronized (this) {
    this.services=services;
  }
}"
29837,"/** 
 * Fires probe event related to the fact that the given request is about to exit from the web container.
 * @param request the request object
 * @param host the virtual server to which the request was mapped
 * @param context the Context to which the request was mapped
 * @param statusCode the response status code
 */
@Override public void requestEndEvent(HttpServletRequest request,Host host,Context context,int statusCode){
  if (requestProbeProvider != null) {
    String appName=null;
    if (context != null) {
      appName=((WebModule)context).getMonitoringNodeName();
    }
    String hostName=null;
    if (host != null) {
      hostName=host.getName();
    }
    requestProbeProvider.requestEndEvent(appName,hostName,request.getServerName(),request.getServerPort(),request.getContextPath(),request.getServletPath(),statusCode,request.getMethod(),request.getRequestURI());
  }
}","/** 
 * Fires probe event related to the fact that the given request is about to exit from the web container.
 * @param request the request object
 * @param host the virtual server to which the request was mapped
 * @param context the Context to which the request was mapped
 * @param statusCode the response status code
 */
@Override public void requestEndEvent(HttpServletRequest request,Host host,Context context,int statusCode){
  if (requestProbeProvider != null) {
    String appName=null;
    if (context instanceof WebModule) {
      appName=((WebModule)context).getMonitoringNodeName();
    }
    String hostName=null;
    if (host != null) {
      hostName=host.getName();
    }
    requestProbeProvider.requestEndEvent(appName,hostName,request.getServerName(),request.getServerPort(),request.getContextPath(),request.getServletPath(),statusCode,request.getMethod(),request.getRequestURI());
  }
}"
29838,"/** 
 * Fires probe event related to the fact that the given request has been entered the web container.
 * @param request the request object
 * @param host the virtual server to which the request was mapped
 * @param context the Context to which the request was mapped
 */
@Override public void requestStartEvent(HttpServletRequest request,Host host,Context context){
  if (requestProbeProvider != null) {
    String appName=null;
    if (context != null) {
      appName=((WebModule)context).getMonitoringNodeName();
    }
    String hostName=null;
    if (host != null) {
      hostName=host.getName();
    }
    requestProbeProvider.requestStartEvent(appName,hostName,request.getServerName(),request.getServerPort(),request.getContextPath(),request.getServletPath());
  }
}","/** 
 * Fires probe event related to the fact that the given request has been entered the web container.
 * @param request the request object
 * @param host the virtual server to which the request was mapped
 * @param context the Context to which the request was mapped
 */
@Override public void requestStartEvent(HttpServletRequest request,Host host,Context context){
  if (requestProbeProvider != null) {
    String appName=null;
    if (context instanceof WebModule) {
      appName=((WebModule)context).getMonitoringNodeName();
    }
    String hostName=null;
    if (host != null) {
      hostName=host.getName();
    }
    requestProbeProvider.requestStartEvent(appName,hostName,request.getServerName(),request.getServerPort(),request.getContextPath(),request.getServletPath());
  }
}"
29839,"@Override public void setContext(Context ctx){
  if (ctx == null) {
    return;
  }
  super.setContext(ctx);
  Response response=(Response)getResponse();
  if (response != null) {
    String[] cacheControls=((PwcWebModule)ctx).getCacheControls();
    for (int i=0; cacheControls != null && i < cacheControls.length; i++) {
      response.addHeader(""String_Node_Str"",cacheControls[i]);
    }
  }
  sunWebXmlChecked=false;
}","@Override public void setContext(Context ctx){
  if (ctx == null) {
    return;
  }
  super.setContext(ctx);
  Response response=(Response)getResponse();
  if ((response != null) && (ctx instanceof PwcWebModule)) {
    String[] cacheControls=((PwcWebModule)ctx).getCacheControls();
    for (int i=0; cacheControls != null && i < cacheControls.length; i++) {
      response.addHeader(""String_Node_Str"",cacheControls[i]);
    }
  }
  sunWebXmlChecked=false;
}"
29840,"public void createESElement() throws TransactionFailure {
  try {
    ConfigSupport.apply(new SingleConfigCode<Tenant>(){
      @Override public Object run(      Tenant tenant) throws TransactionFailure {
        Elastic es=tenant.createChild(Elastic.class);
        tenant.getExtensions().add(es);
        return es;
      }
    }
,tenant);
  }
 catch (  TransactionFailure e) {
    e.printStackTrace();
  }
}","public void createESElement() throws TransactionFailure {
  try {
    ConfigSupport.apply(new SingleConfigCode<Tenant>(){
      @Override public Object run(      Tenant tenant) throws TransactionFailure {
        return null;
      }
    }
,tenant);
  }
 catch (  TransactionFailure e) {
    e.printStackTrace();
  }
}"
29841,"@Override public Object run(Tenant tenant) throws TransactionFailure {
  Elastic es=tenant.createChild(Elastic.class);
  tenant.getExtensions().add(es);
  return es;
}","@Override public Object run(Tenant tenant) throws TransactionFailure {
  return null;
}"
29842,"/** 
 * {@inheritDoc}
 */
public void associateServices(Service serviceConsumer,ServiceReference svcRef,Service serviceProvider,boolean beforeDeployment,PaaSDeploymentContext dc){
  if (!RDBMS_ServiceType.equals(serviceConsumer.getServiceType().toString())) {
    return;
  }
  if (!beforeDeployment) {
    return;
  }
  boolean databaseCreated=false;
  boolean databaseInitialized=false;
  String databaseName=null;
  try {
    Boolean isDatabaseInitialized=dc.getTransientAppMetaData(getClass().getName() + DB_INITIALIZED,Boolean.class);
    if (isDatabaseInitialized == null || !isDatabaseInitialized) {
      final ReadableArchive readableArchive=dc.getArchive();
      String initSqlFile=null;
      String ipAddress=serviceProvider.getProperties().getProperty(VIRTUAL_MACHINE_IP_ADDRESS);
      String servicePropertiesFile=getServicePropertiesFileName(dc,readableArchive);
      if (new File(servicePropertiesFile).exists()) {
        Properties properties=getProperties(servicePropertiesFile);
        databaseName=properties.getProperty(DATABASE_NAME_SVC_CONFIG);
        if (databaseName != null && databaseName.trim().length() > 0) {
          setDatabaseName(databaseName);
          createDatabase(getServiceProperties(ipAddress));
          databaseCreated=true;
        }
      }
      initSqlFile=getInitSQLFileName(readableArchive,dc);
      if (new File(initSqlFile).exists()) {
        setDatabaseName(serviceProvider.getServiceProperties().getProperty(DATABASENAME));
        executeInitSql(getServiceProperties(ipAddress),initSqlFile);
        databaseInitialized=true;
      }
    }
  }
  finally {
    if (databaseCreated || databaseInitialized) {
      dc.addTransientAppMetaData(getClass().getName() + DB_INITIALIZED,true);
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void associateServices(Service serviceConsumer,ServiceReference svcRef,Service serviceProvider,boolean beforeDeployment,PaaSDeploymentContext dc){
  if (!RDBMS_ServiceType.equals(serviceConsumer.getServiceType().toString())) {
    return;
  }
  if (!beforeDeployment) {
    return;
  }
  boolean databaseCreated=false;
  boolean databaseInitialized=false;
  String databaseName=null;
  try {
    Boolean isDatabaseInitialized=dc.getTransientAppMetaData(getClass().getName() + DB_INITIALIZED,Boolean.class);
    if (isDatabaseInitialized == null || !isDatabaseInitialized) {
      final ReadableArchive readableArchive=dc.getArchive();
      String initSqlFile=null;
      String ipAddress=serviceProvider.getServiceProperties().getProperty(VIRTUAL_MACHINE_IP_ADDRESS);
      String servicePropertiesFile=getServicePropertiesFileName(dc,readableArchive);
      if (new File(servicePropertiesFile).exists()) {
        Properties properties=getProperties(servicePropertiesFile);
        databaseName=properties.getProperty(DATABASE_NAME_SVC_CONFIG);
        if (databaseName != null && databaseName.trim().length() > 0) {
          setDatabaseName(databaseName);
          createDatabase(getServiceProperties(ipAddress));
          databaseCreated=true;
        }
      }
      initSqlFile=getInitSQLFileName(readableArchive,dc);
      if (new File(initSqlFile).exists()) {
        setDatabaseName(serviceProvider.getServiceProperties().getProperty(DATABASENAME));
        executeInitSql(getServiceProperties(ipAddress),initSqlFile);
        databaseInitialized=true;
      }
    }
  }
  finally {
    if (databaseCreated || databaseInitialized) {
      dc.addTransientAppMetaData(getClass().getName() + DB_INITIALIZED,true);
    }
  }
}"
29843,"@After public void tearDown() throws TransactionFailure {
  ConfigSupport.apply(new SingleConfigCode<Resources>(){
    public Object run(    Resources param) throws PropertyVetoException, TransactionFailure {
      Resource target=null;
      for (      Resource resource : param.getResources()) {
        if (resource instanceof org.glassfish.resources.config.CustomResource) {
          CustomResource r=(CustomResource)resource;
          if (r.getJndiName().equals(""String_Node_Str"") || r.getJndiName().equals(""String_Node_Str"")) {
            target=resource;
            break;
          }
        }
      }
      if (target != null) {
        param.getResources().remove(target);
      }
      return null;
    }
  }
,resources);
}","@After public void tearDown() throws TransactionFailure {
  org.glassfish.resources.admin.cli.DeleteCustomResource deleteCommand=habitat.getComponent(org.glassfish.resources.admin.cli.DeleteCustomResource.class);
  parameters=new ParameterMap();
  parameters.set(""String_Node_Str"",""String_Node_Str"");
  cr.getCommandInvocation(""String_Node_Str"",context.getActionReport()).parameters(parameters).execute(deleteCommand);
  parameters=new ParameterMap();
  parameters.set(""String_Node_Str"",""String_Node_Str"");
  cr.getCommandInvocation(""String_Node_Str"",context.getActionReport()).parameters(parameters).execute(deleteCommand);
}"
29844,"@After public void tearDown() throws TransactionFailure {
  ConfigSupport.apply(new SingleConfigCode<Resources>(){
    public Object run(    Resources param) throws PropertyVetoException, TransactionFailure {
      Resource target=null;
      for (      Resource resource : param.getResources()) {
        if (resource instanceof MailResource) {
          MailResource r=(MailResource)resource;
          if (r.getJndiName().equals(""String_Node_Str"") || r.getJndiName().equals(""String_Node_Str"")) {
            target=resource;
            break;
          }
        }
      }
      if (target != null) {
        param.getResources().remove(target);
      }
      return null;
    }
  }
,resources);
}","@After public void tearDown() throws TransactionFailure {
  org.glassfish.resources.javamail.admin.cli.DeleteJavaMailResource deleteCommand=habitat.getComponent(org.glassfish.resources.javamail.admin.cli.DeleteJavaMailResource.class);
  parameters=new ParameterMap();
  parameters.set(""String_Node_Str"",""String_Node_Str"");
  cr.getCommandInvocation(""String_Node_Str"",context.getActionReport()).parameters(parameters).execute(deleteCommand);
  parameters=new ParameterMap();
  parameters.set(""String_Node_Str"",""String_Node_Str"");
  cr.getCommandInvocation(""String_Node_Str"",context.getActionReport()).parameters(parameters).execute(deleteCommand);
}"
29845,"public void setCoyoteResponse(Response coyoteResponse){
  this.response=coyoteResponse;
  this.grizzlyResponse=coyoteResponse.getCoyoteResponse();
  this.grizzlyOutputBuffer=grizzlyResponse.getOutputBuffer();
  grizzlyOutputBuffer.setBufferSize(size);
  grizzlyOutputBuffer.registerLifeCycleListener(sessionCookieChecker);
}","public void setCoyoteResponse(Response coyoteResponse){
  this.response=coyoteResponse;
  this.grizzlyResponse=coyoteResponse.getCoyoteResponse();
  this.grizzlyOutputBuffer=grizzlyResponse.getOutputBuffer();
  grizzlyOutputBuffer.setBufferSize(size);
  grizzlyOutputBuffer.registerLifeCycleListener(sessionCookieChecker);
  grizzlyOutputBuffer.setAsyncEnabled(false);
}"
29846,"/** 
 * Add a filter to the set of filters that will be executed in this chain.
 * @param filterConfig The FilterConfig for the servlet to be executed
 */
void addFilter(ApplicationFilterConfig filterConfig){
  if (n == filters.length) {
    ApplicationFilterConfig[] newFilters=new ApplicationFilterConfig[n + INCREMENT];
    System.arraycopy(filters,0,newFilters,0,n);
    filters=newFilters;
  }
  filters[n++]=filterConfig;
}","/** 
 * Add a filter to the set of filters that will be executed in this chain.
 * @param filterConfig The FilterConfig for the servlet to be executed
 */
void addFilter(ApplicationFilterConfig filterConfig){
  boolean add=true;
  String filterName=filterConfig.getFilterName();
  for (int i=0; i < n; i++) {
    ApplicationFilterConfig afc=filters[i];
    if (afc != null && filterName.equals(afc.getFilterName())) {
      add=false;
      break;
    }
  }
  if (add) {
    if (n == filters.length) {
      ApplicationFilterConfig[] newFilters=new ApplicationFilterConfig[n + INCREMENT];
      System.arraycopy(filters,0,newFilters,0,n);
      filters=newFilters;
    }
    filters[n++]=filterConfig;
  }
}"
29847,"/** 
 * Adds the filter with the given name and class type to this servlet context.
 */
@Override public FilterRegistration.Dynamic addFilter(String filterName,Class<? extends Filter> filterClass){
  if (isContextInitializedCalled) {
    throw new IllegalStateException(sm.getString(""String_Node_Str"",""String_Node_Str"",getName()));
  }
synchronized (filterDefs) {
    if (findFilterDef(filterName) != null) {
      return null;
    }
    DynamicFilterRegistrationImpl regis=(DynamicFilterRegistrationImpl)filterRegisMap.get(filterName);
    FilterDef filterDef=null;
    if (null == regis) {
      filterDef=new FilterDef();
    }
 else {
      filterDef=regis.getFilterDefinition();
    }
    filterDef.setFilterName(filterName);
    filterDef.setFilterClass(filterClass);
    addFilterDef(filterDef,true,(regis == null));
    if (null == regis) {
      regis=(DynamicFilterRegistrationImpl)filterRegisMap.get(filterName);
    }
    return regis;
  }
}","/** 
 * Adds the filter with the given name and class type to this servlet context.
 */
@Override public FilterRegistration.Dynamic addFilter(String filterName,Class<? extends Filter> filterClass){
  if (isContextInitializedCalled) {
    throw new IllegalStateException(sm.getString(""String_Node_Str"",""String_Node_Str"",getName()));
  }
  if (filterName == null) {
    throw new IllegalArgumentException(sm.getString(""String_Node_Str""));
  }
synchronized (filterDefs) {
    if (findFilterDef(filterName) != null) {
      return null;
    }
    DynamicFilterRegistrationImpl regis=(DynamicFilterRegistrationImpl)filterRegisMap.get(filterName);
    FilterDef filterDef=null;
    if (null == regis) {
      filterDef=new FilterDef();
    }
 else {
      filterDef=regis.getFilterDefinition();
    }
    filterDef.setFilterName(filterName);
    filterDef.setFilterClass(filterClass);
    addFilterDef(filterDef,true,(regis == null));
    if (null == regis) {
      regis=(DynamicFilterRegistrationImpl)filterRegisMap.get(filterName);
    }
    return regis;
  }
}"
29848,"/** 
 * Add a new MIME mapping, replacing any existing mapping for the specified extension.
 * @param extension Filename extension being mapped
 * @param mimeType Corresponding MIME type
 */
public void addMimeMapping(String extension,String mimeType){
synchronized (mimeMappings) {
    mimeMappings.put(extension,mimeType);
  }
  if (notifyContainerListeners) {
    fireContainerEvent(""String_Node_Str"",extension);
  }
}","/** 
 * Add a new MIME mapping, replacing any existing mapping for the specified extension.
 * @param extension Filename extension being mapped
 * @param mimeType Corresponding MIME type
 */
public void addMimeMapping(String extension,String mimeType){
  mimeMappings.put(extension.toLowerCase(Locale.ENGLISH),mimeType);
  if (notifyContainerListeners) {
    fireContainerEvent(""String_Node_Str"",extension);
  }
}"
29849,"/** 
 * Return the MIME type to which the specified extension is mapped, if any; otherwise return <code>null</code>.
 * @param extension Extension to map to a MIME type
 */
@Override public String findMimeMapping(String extension){
  String mimeType=mimeMappings.get(extension);
  if (mimeType == null) {
synchronized (mimeMappings) {
      for (      String ext : mimeMappings.keySet()) {
        if (ext.equalsIgnoreCase(extension)) {
          mimeType=mimeMappings.get(ext);
          mimeMappings.put(extension,mimeType);
          break;
        }
      }
    }
  }
  return mimeType;
}","/** 
 * Return the MIME type to which the specified extension is mapped, if any; otherwise return <code>null</code>.
 * @param extension Extension to map to a MIME type
 */
@Override public String findMimeMapping(String extension){
  return mimeMappings.get(extension.toLowerCase(Locale.ENGLISH));
}"
29850,"/** 
 * Remove the MIME mapping for the specified extension, if it exists; otherwise, no action is taken.
 * @param extension Extension to remove the mapping for
 */
@Override public void removeMimeMapping(String extension){
synchronized (mimeMappings) {
    mimeMappings.remove(extension);
  }
  if (notifyContainerListeners) {
    fireContainerEvent(""String_Node_Str"",extension);
  }
}","/** 
 * Remove the MIME mapping for the specified extension, if it exists; otherwise, no action is taken.
 * @param extension Extension to remove the mapping for
 */
@Override public void removeMimeMapping(String extension){
  mimeMappings.remove(extension.toLowerCase(Locale.ENGLISH));
  if (notifyContainerListeners) {
    fireContainerEvent(""String_Node_Str"",extension);
  }
}"
29851,"/** 
 * Return the extensions for which MIME mappings are defined.  If there are none, a zero-length array is returned.
 */
@Override public String[] findMimeMappings(){
synchronized (mimeMappings) {
    return mimeMappings.keySet().toArray(new String[mimeMappings.size()]);
  }
}","/** 
 * Return the extensions for which MIME mappings are defined.  If there are none, a zero-length array is returned.
 */
@Override public String[] findMimeMappings(){
  return mimeMappings.keySet().toArray(new String[mimeMappings.size()]);
}"
29852,"/** 
 * Stops the given <tt>context</tt> and removes it from this <tt>VirtualServer</tt>.
 */
public void removeContext(Context context) throws GlassFishException {
  ActionReport report=services.forContract(ActionReport.class).named(""String_Node_Str"").get();
  Deployment deployment=services.forContract(Deployment.class).get();
  String name=((ContextFacade)context).getAppName();
  ApplicationInfo appInfo=deployment.get(name);
  if (appInfo == null) {
    report.setMessage(""String_Node_Str"" + name);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new GlassFishException(""String_Node_Str"" + name);
  }
  ReadableArchive source=appInfo.getSource();
  if (source == null) {
    report.setMessage(""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new GlassFishException(""String_Node_Str"");
  }
  UndeployCommandParameters params=new UndeployCommandParameters(name);
  params.origin=UndeployCommandParameters.Origin.undeploy;
  params.target=""String_Node_Str"";
  ExtendedDeploymentContext deploymentContext=null;
  try {
    deploymentContext=deployment.getBuilder(_logger,params,report).source(source).build();
    deployment.undeploy(name,deploymentContext);
    deployment.unregisterAppFromDomainXML(name,""String_Node_Str"");
  }
 catch (  IOException e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new GlassFishException(""String_Node_Str"",e);
  }
catch (  TransactionFailure e) {
    throw new GlassFishException(e);
  }
 finally {
    deploymentContext.clean();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + name);
  }
}","/** 
 * Stops the given <tt>context</tt> and removes it from this <tt>VirtualServer</tt>.
 */
public void removeContext(Context context) throws GlassFishException {
  ActionReport report=services.forContract(ActionReport.class).named(""String_Node_Str"").get();
  Deployment deployment=services.forContract(Deployment.class).get();
  String name;
  if (context instanceof ContextFacade) {
    name=((ContextFacade)context).getAppName();
  }
 else {
    name=context.getPath();
  }
  ApplicationInfo appInfo=deployment.get(name);
  if (appInfo == null) {
    report.setMessage(""String_Node_Str"" + name);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new GlassFishException(""String_Node_Str"" + name);
  }
  ReadableArchive source=appInfo.getSource();
  if (source == null) {
    report.setMessage(""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new GlassFishException(""String_Node_Str"");
  }
  UndeployCommandParameters params=new UndeployCommandParameters(name);
  params.origin=UndeployCommandParameters.Origin.undeploy;
  params.target=""String_Node_Str"";
  ExtendedDeploymentContext deploymentContext=null;
  try {
    deploymentContext=deployment.getBuilder(_logger,params,report).source(source).build();
    deployment.undeploy(name,deploymentContext);
    deployment.unregisterAppFromDomainXML(name,""String_Node_Str"");
  }
 catch (  IOException e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new GlassFishException(""String_Node_Str"",e);
  }
catch (  TransactionFailure e) {
    throw new GlassFishException(e);
  }
 finally {
    if (deploymentContext != null) {
      deploymentContext.clean();
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + name);
  }
}"
29853,"/** 
 * Registers the given <tt>Context</tt> with this <tt>VirtualServer</tt> at the given context root. <p>If this <tt>VirtualServer</tt> has already been started, the given <tt>context</tt> will be started as well.
 */
public void addContext(Context context,String contextRoot) throws ConfigException, GlassFishException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ contextRoot);
  }
  if (!(context instanceof ContextFacade)) {
    return;
  }
  if (!contextRoot.startsWith(""String_Node_Str"")) {
    contextRoot=""String_Node_Str"" + contextRoot;
  }
  ExtendedDeploymentContext deploymentContext=null;
  try {
    if (factory == null)     factory=services.byType(ArchiveFactory.class).get();
    ContextFacade facade=(ContextFacade)context;
    File docRoot=facade.getDocRoot();
    ClassLoader classLoader=facade.getClassLoader();
    ReadableArchive archive=factory.openArchive(docRoot);
    if (report == null)     report=new PlainTextActionReporter();
    ServerEnvironment env=services.forContract(ServerEnvironment.class).get();
    DeployCommandParameters params=new DeployCommandParameters();
    params.contextroot=contextRoot;
    params.enabled=Boolean.FALSE;
    params.origin=OpsParams.Origin.deploy;
    params.virtualservers=getName();
    params.target=""String_Node_Str"";
    ExtendedDeploymentContext initialContext=new DeploymentContextImpl(report,_logger,archive,params,env);
    if (deployment == null)     deployment=services.forContract(Deployment.class).get();
    ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive);
    if (archiveHandler == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    params.name=archiveHandler.getDefaultApplicationName(archive,initialContext);
    Applications apps=domain.getApplications();
    ApplicationInfo appInfo=deployment.get(params.name);
    ApplicationRef appRef=domain.getApplicationRefInServer(params.target,params.name);
    if (appInfo != null) {
      if (appRef != null && appRef.getVirtualServers().contains(getName())) {
        throw new ConfigException(""String_Node_Str"" + params.name + ""String_Node_Str""+ getName());
      }
 else {
        String virtualServers=appRef.getVirtualServers();
        virtualServers=virtualServers + ""String_Node_Str"" + getName();
        params.virtualservers=virtualServers;
        params.force=Boolean.TRUE;
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ params.name);
        }
        return;
      }
    }
    deploymentContext=deployment.getBuilder(_logger,params,report).source(archive).archiveHandler(archiveHandler).build(initialContext);
    Properties properties=new Properties();
    deploymentContext.getAppProps().putAll(properties);
    if (classLoader != null) {
      ClassLoader parentCL=clh.createApplicationParentCL(classLoader,deploymentContext);
      ClassLoader cl=archiveHandler.getClassLoader(parentCL,deploymentContext);
      deploymentContext.setClassLoader(cl);
    }
    ApplicationConfigInfo savedAppConfig=new ApplicationConfigInfo(apps.getModule(com.sun.enterprise.config.serverbeans.Application.class,params.name));
    Properties appProps=deploymentContext.getAppProps();
    String appLocation=DeploymentUtils.relativizeWithinDomainIfPossible(deploymentContext.getSource().getURI());
    appProps.setProperty(ServerTags.LOCATION,appLocation);
    appProps.setProperty(ServerTags.OBJECT_TYPE,""String_Node_Str"");
    appProps.setProperty(ServerTags.CONTEXT_ROOT,contextRoot);
    savedAppConfig.store(appProps);
    Transaction t=deployment.prepareAppConfigChanges(deploymentContext);
    appInfo=deployment.deploy(deploymentContext);
    if (appInfo != null) {
      facade.setAppName(appInfo.getName());
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ appInfo.getName());
      }
      deployment.registerAppInDomainXML(appInfo,deploymentContext,t);
    }
 else {
      if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
        throw new ConfigException(report.getMessage());
      }
    }
    File file=null;
    boolean delete=true;
    com.sun.enterprise.config.serverbeans.Application appBean=apps.getApplication(params.name);
    if (appBean != null) {
      file=new File(deploymentContext.getSource().getURI().getPath(),""String_Node_Str"");
      if (file.exists()) {
        delete=false;
      }
      updateWebXml(facade,file);
    }
 else {
      _logger.log(Level.SEVERE,""String_Node_Str"" + params.name + ""String_Node_Str"");
    }
    ReadableArchive source=appInfo.getSource();
    UndeployCommandParameters undeployParams=new UndeployCommandParameters(params.name);
    undeployParams.origin=UndeployCommandParameters.Origin.undeploy;
    undeployParams.target=""String_Node_Str"";
    ExtendedDeploymentContext undeploymentContext=deployment.getBuilder(_logger,undeployParams,report).source(source).build();
    deployment.undeploy(params.name,undeploymentContext);
    params.origin=DeployCommandParameters.Origin.load;
    params.enabled=Boolean.TRUE;
    archive=factory.openArchive(docRoot);
    deploymentContext=deployment.getBuilder(_logger,params,report).source(archive).build();
    if (classLoader != null) {
      ClassLoader parentCL=clh.createApplicationParentCL(classLoader,deploymentContext);
      archiveHandler=deployment.getArchiveHandler(archive);
      ClassLoader cl=archiveHandler.getClassLoader(parentCL,deploymentContext);
      deploymentContext.setClassLoader(cl);
    }
    deployment.deploy(deploymentContext);
    deployment.updateAppEnabledAttributeInDomainXML(params.name,params.target,true);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ params.name());
    }
    if (delete) {
      if (file != null) {
        if (file.exists() && !file.delete()) {
          String path=file.toString();
          _logger.log(Level.WARNING,""String_Node_Str"",path);
        }
      }
    }
    if (contextRoot.equals(""String_Node_Str"")) {
      contextRoot=""String_Node_Str"";
    }
    WebModule wm=(WebModule)findChild(contextRoot);
    if (wm != null) {
      facade.setUnwrappedContext(wm);
      wm.setEmbedded(true);
      if (config != null) {
        wm.setDefaultWebXml(config.getDefaultWebXml());
      }
    }
 else {
      throw new ConfigException(""String_Node_Str"" + contextRoot);
    }
    if (deploymentContext != null) {
      deploymentContext.postDeployClean(true);
    }
  }
 catch (  Exception ex) {
    if (deployment != null && deploymentContext != null) {
      deploymentContext.clean();
    }
    throw new GlassFishException(ex);
  }
}","/** 
 * Registers the given <tt>Context</tt> with this <tt>VirtualServer</tt> at the given context root. <p>If this <tt>VirtualServer</tt> has already been started, the given <tt>context</tt> will be started as well.
 */
public void addContext(Context context,String contextRoot) throws ConfigException, GlassFishException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ contextRoot);
  }
  if (!(context instanceof ContextFacade)) {
    return;
  }
  if (!contextRoot.startsWith(""String_Node_Str"")) {
    contextRoot=""String_Node_Str"" + contextRoot;
  }
  ExtendedDeploymentContext deploymentContext=null;
  try {
    if (factory == null)     factory=services.byType(ArchiveFactory.class).get();
    ContextFacade facade=(ContextFacade)context;
    File docRoot=facade.getDocRoot();
    ClassLoader classLoader=facade.getClassLoader();
    ReadableArchive archive=factory.openArchive(docRoot);
    if (report == null)     report=new PlainTextActionReporter();
    ServerEnvironment env=services.forContract(ServerEnvironment.class).get();
    DeployCommandParameters params=new DeployCommandParameters();
    params.contextroot=contextRoot;
    params.enabled=Boolean.FALSE;
    params.origin=OpsParams.Origin.deploy;
    params.virtualservers=getName();
    params.target=""String_Node_Str"";
    ExtendedDeploymentContext initialContext=new DeploymentContextImpl(report,_logger,archive,params,env);
    if (deployment == null)     deployment=services.forContract(Deployment.class).get();
    ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive);
    if (archiveHandler == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    params.name=archiveHandler.getDefaultApplicationName(archive,initialContext);
    Applications apps=domain.getApplications();
    ApplicationInfo appInfo=deployment.get(params.name);
    ApplicationRef appRef=domain.getApplicationRefInServer(params.target,params.name);
    if (appInfo != null && appRef != null) {
      if (appRef.getVirtualServers().contains(getName())) {
        throw new ConfigException(""String_Node_Str"" + params.name + ""String_Node_Str""+ getName());
      }
 else {
        String virtualServers=appRef.getVirtualServers();
        virtualServers=virtualServers + ""String_Node_Str"" + getName();
        params.virtualservers=virtualServers;
        params.force=Boolean.TRUE;
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ params.name);
        }
        return;
      }
    }
    deploymentContext=deployment.getBuilder(_logger,params,report).source(archive).archiveHandler(archiveHandler).build(initialContext);
    Properties properties=new Properties();
    deploymentContext.getAppProps().putAll(properties);
    if (classLoader != null) {
      ClassLoader parentCL=clh.createApplicationParentCL(classLoader,deploymentContext);
      ClassLoader cl=archiveHandler.getClassLoader(parentCL,deploymentContext);
      deploymentContext.setClassLoader(cl);
    }
    ApplicationConfigInfo savedAppConfig=new ApplicationConfigInfo(apps.getModule(com.sun.enterprise.config.serverbeans.Application.class,params.name));
    Properties appProps=deploymentContext.getAppProps();
    String appLocation=DeploymentUtils.relativizeWithinDomainIfPossible(deploymentContext.getSource().getURI());
    appProps.setProperty(ServerTags.LOCATION,appLocation);
    appProps.setProperty(ServerTags.OBJECT_TYPE,""String_Node_Str"");
    appProps.setProperty(ServerTags.CONTEXT_ROOT,contextRoot);
    savedAppConfig.store(appProps);
    Transaction t=deployment.prepareAppConfigChanges(deploymentContext);
    appInfo=deployment.deploy(deploymentContext);
    if (appInfo != null) {
      facade.setAppName(appInfo.getName());
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ appInfo.getName());
      }
      deployment.registerAppInDomainXML(appInfo,deploymentContext,t);
    }
 else {
      if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
        throw new ConfigException(report.getMessage());
      }
    }
    File file=null;
    boolean delete=true;
    com.sun.enterprise.config.serverbeans.Application appBean=apps.getApplication(params.name);
    if (appBean != null) {
      file=new File(deploymentContext.getSource().getURI().getPath(),""String_Node_Str"");
      if (file.exists()) {
        delete=false;
      }
      updateWebXml(facade,file);
    }
 else {
      _logger.log(Level.SEVERE,""String_Node_Str"" + params.name + ""String_Node_Str"");
    }
    ReadableArchive source=appInfo.getSource();
    UndeployCommandParameters undeployParams=new UndeployCommandParameters(params.name);
    undeployParams.origin=UndeployCommandParameters.Origin.undeploy;
    undeployParams.target=""String_Node_Str"";
    ExtendedDeploymentContext undeploymentContext=deployment.getBuilder(_logger,undeployParams,report).source(source).build();
    deployment.undeploy(params.name,undeploymentContext);
    params.origin=DeployCommandParameters.Origin.load;
    params.enabled=Boolean.TRUE;
    archive=factory.openArchive(docRoot);
    deploymentContext=deployment.getBuilder(_logger,params,report).source(archive).build();
    if (classLoader != null) {
      ClassLoader parentCL=clh.createApplicationParentCL(classLoader,deploymentContext);
      archiveHandler=deployment.getArchiveHandler(archive);
      ClassLoader cl=archiveHandler.getClassLoader(parentCL,deploymentContext);
      deploymentContext.setClassLoader(cl);
    }
    deployment.deploy(deploymentContext);
    deployment.updateAppEnabledAttributeInDomainXML(params.name,params.target,true);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + getName() + ""String_Node_Str""+ params.name());
    }
    if (delete) {
      if (file != null) {
        if (file.exists() && !file.delete()) {
          String path=file.toString();
          _logger.log(Level.WARNING,""String_Node_Str"",path);
        }
      }
    }
    if (contextRoot.equals(""String_Node_Str"")) {
      contextRoot=""String_Node_Str"";
    }
    WebModule wm=(WebModule)findChild(contextRoot);
    if (wm != null) {
      facade.setUnwrappedContext(wm);
      wm.setEmbedded(true);
      if (config != null) {
        wm.setDefaultWebXml(config.getDefaultWebXml());
      }
    }
 else {
      throw new ConfigException(""String_Node_Str"" + contextRoot);
    }
    if (deploymentContext != null) {
      deploymentContext.postDeployClean(true);
    }
  }
 catch (  Exception ex) {
    if (deployment != null && deploymentContext != null) {
      deploymentContext.clean();
    }
    throw new GlassFishException(ex);
  }
}"
29854,"public void updateWebXml(ContextFacade facade,File file) throws Exception {
  Map<String,String> servlets=facade.getAddedServlets();
  Map<String,String[]> mappings=facade.getServletMappings();
  List<String> listeners=facade.getListeners();
  Map<String,String> filters=facade.getAddedFilters();
  Map<String,String> servletNameFilterMappings=facade.getServletNameFilterMappings();
  Map<String,String> urlPatternFilterMappings=facade.getUrlPatternFilterMappings();
  if (!filters.isEmpty() || !listeners.isEmpty() || !servlets.isEmpty()) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + file.getAbsolutePath());
    }
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document doc=null;
    Element webapp=null;
    if ((file != null) && (file.exists())) {
      doc=dBuilder.parse(file);
      webapp=doc.getDocumentElement();
    }
 else {
      doc=dBuilder.newDocument();
      webapp=doc.createElement(""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      doc.appendChild(webapp);
    }
    boolean entryFound=false;
    for (    Map.Entry entry : filters.entrySet()) {
      NodeList filterList=doc.getElementsByTagName(""String_Node_Str"");
      for (int i=0; i < filterList.getLength(); i++) {
        Node filterNode=filterList.item(i);
        if (entry.getKey().equals(filterNode.getTextContent()) && filterNode.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList children=filterNode.getParentNode().getChildNodes();
          for (int j=0; j < children.getLength(); j++) {
            Node filterClass=children.item(j);
            if (filterClass.getNodeName().equals(""String_Node_Str"")) {
              filterClass.setTextContent(entry.getValue().toString());
              entryFound=true;
              break;
            }
          }
        }
      }
      if (!entryFound) {
        Element filter=doc.createElement(""String_Node_Str"");
        Element filterName=doc.createElement(""String_Node_Str"");
        filterName.setTextContent(entry.getKey().toString());
        filter.appendChild(filterName);
        Element filterClass=doc.createElement(""String_Node_Str"");
        filterClass.setTextContent(entry.getValue().toString());
        filter.appendChild(filterClass);
        Map<String,String> initParams=facade.getFilterRegistration(entry.getKey().toString()).getInitParameters();
        if ((initParams != null) && (!initParams.isEmpty())) {
          Element initParam=doc.createElement(""String_Node_Str"");
          for (          Map.Entry param : initParams.entrySet()) {
            Element paramName=doc.createElement(""String_Node_Str"");
            paramName.setTextContent(param.getKey().toString());
            initParam.appendChild(paramName);
            Element paramValue=doc.createElement(""String_Node_Str"");
            paramValue.setTextContent(param.getValue().toString());
            initParam.appendChild(paramValue);
          }
          filter.appendChild(initParam);
        }
        webapp.appendChild(filter);
      }
    }
    for (    Map.Entry mapping : servletNameFilterMappings.entrySet()) {
      Element filterMapping=doc.createElement(""String_Node_Str"");
      Element filterName=doc.createElement(""String_Node_Str"");
      filterName.setTextContent(mapping.getKey().toString());
      filterMapping.appendChild(filterName);
      Element servletName=doc.createElement(""String_Node_Str"");
      servletName.setTextContent(mapping.getValue().toString());
      filterMapping.appendChild(servletName);
      webapp.appendChild(filterMapping);
    }
    for (    Map.Entry mapping : urlPatternFilterMappings.entrySet()) {
      Element filterMapping=doc.createElement(""String_Node_Str"");
      Element filterName=doc.createElement(""String_Node_Str"");
      filterName.setTextContent(mapping.getKey().toString());
      filterMapping.appendChild(filterName);
      Element urlPattern=doc.createElement(""String_Node_Str"");
      urlPattern.setTextContent(mapping.getValue().toString());
      filterMapping.appendChild(urlPattern);
      webapp.appendChild(filterMapping);
    }
    entryFound=false;
    for (    Map.Entry entry : servlets.entrySet()) {
      NodeList servletList=doc.getElementsByTagName(""String_Node_Str"");
      for (int i=0; i < servletList.getLength(); i++) {
        Node servletNode=servletList.item(i);
        if (entry.getKey().equals(servletNode.getTextContent()) && servletNode.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList children=servletNode.getParentNode().getChildNodes();
          for (int j=0; j < children.getLength(); j++) {
            Node servletClass=children.item(j);
            if (servletClass.getNodeName().equals(""String_Node_Str"")) {
              servletClass.setTextContent(entry.getValue().toString());
              entryFound=true;
              break;
            }
          }
        }
      }
      if (!entryFound) {
        Element servlet=doc.createElement(""String_Node_Str"");
        Element servletName=doc.createElement(""String_Node_Str"");
        servletName.setTextContent(entry.getKey().toString());
        servlet.appendChild(servletName);
        Element servletClass=doc.createElement(""String_Node_Str"");
        servletClass.setTextContent(entry.getValue().toString());
        servlet.appendChild(servletClass);
        Map<String,String> initParams=facade.getServletRegistration(entry.getKey().toString()).getInitParameters();
        if ((initParams != null) && (!initParams.isEmpty())) {
          Element initParam=doc.createElement(""String_Node_Str"");
          for (          Map.Entry param : initParams.entrySet()) {
            Element paramName=doc.createElement(""String_Node_Str"");
            paramName.setTextContent(param.getKey().toString());
            initParam.appendChild(paramName);
            Element paramValue=doc.createElement(""String_Node_Str"");
            paramValue.setTextContent(param.getValue().toString());
            initParam.appendChild(paramValue);
          }
          servlet.appendChild(initParam);
        }
        webapp.appendChild(servlet);
      }
    }
    entryFound=false;
    for (    Map.Entry mapping : mappings.entrySet()) {
      NodeList servletList=doc.getElementsByTagName(""String_Node_Str"");
      for (int i=0; i < servletList.getLength(); i++) {
        Node servletNode=servletList.item(i);
        if (mapping.getKey().equals(servletNode.getTextContent()) && servletNode.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList children=servletNode.getParentNode().getChildNodes();
          for (int j=0; j < children.getLength(); j++) {
            Node urlPattern=children.item(j);
            if (urlPattern.getNodeName().equals(""String_Node_Str"")) {
              entryFound=true;
              break;
            }
          }
        }
      }
      if (!entryFound) {
        Element servletMapping=doc.createElement(""String_Node_Str"");
        for (        String pattern : mappings.get(mapping.getKey())) {
          Element servletName=doc.createElement(""String_Node_Str"");
          servletName.setTextContent(mapping.getKey().toString());
          servletMapping.appendChild(servletName);
          Element urlPattern=doc.createElement(""String_Node_Str"");
          urlPattern.setTextContent(pattern);
          servletMapping.appendChild(urlPattern);
        }
        webapp.appendChild(servletMapping);
      }
    }
    for (    String listenerStr : listeners) {
      Element listener=doc.createElement(""String_Node_Str"");
      Element listenerClass=doc.createElement(""String_Node_Str"");
      listenerClass.setTextContent(listenerStr);
      listener.appendChild(listenerClass);
      webapp.appendChild(listener);
    }
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource src=new DOMSource(doc);
    StreamResult result=new StreamResult(file);
    transformer.transform(src,result);
  }
}","public void updateWebXml(ContextFacade facade,File file) throws Exception {
  Map<String,String> servlets=facade.getAddedServlets();
  Map<String,String[]> mappings=facade.getServletMappings();
  List<String> listeners=facade.getListeners();
  Map<String,String> filters=facade.getAddedFilters();
  Map<String,String> servletNameFilterMappings=facade.getServletNameFilterMappings();
  Map<String,String> urlPatternFilterMappings=facade.getUrlPatternFilterMappings();
  if (!filters.isEmpty() || !listeners.isEmpty() || !servlets.isEmpty()) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + file.getAbsolutePath());
    }
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document doc=null;
    Element webapp=null;
    if ((file != null) && (file.exists())) {
      doc=dBuilder.parse(file);
      webapp=doc.getDocumentElement();
    }
 else {
      doc=dBuilder.newDocument();
      webapp=doc.createElement(""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      webapp.setAttribute(""String_Node_Str"",""String_Node_Str"");
      doc.appendChild(webapp);
    }
    boolean entryFound=false;
    for (    Map.Entry entry : filters.entrySet()) {
      NodeList filterList=doc.getElementsByTagName(""String_Node_Str"");
      for (int i=0; i < filterList.getLength(); i++) {
        Node filterNode=filterList.item(i);
        if (entry.getKey().equals(filterNode.getTextContent()) && filterNode.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList children=filterNode.getParentNode().getChildNodes();
          for (int j=0; j < children.getLength(); j++) {
            Node filterClass=children.item(j);
            if (filterClass.getNodeName().equals(""String_Node_Str"")) {
              filterClass.setTextContent(entry.getValue().toString());
              entryFound=true;
              break;
            }
          }
        }
      }
      if (!entryFound) {
        Element filter=doc.createElement(""String_Node_Str"");
        Element filterName=doc.createElement(""String_Node_Str"");
        filterName.setTextContent(entry.getKey().toString());
        filter.appendChild(filterName);
        Element filterClass=doc.createElement(""String_Node_Str"");
        filterClass.setTextContent(entry.getValue().toString());
        filter.appendChild(filterClass);
        Map<String,String> initParams=facade.getFilterRegistration(entry.getKey().toString()).getInitParameters();
        if ((initParams != null) && (!initParams.isEmpty())) {
          Element initParam=doc.createElement(""String_Node_Str"");
          for (          Map.Entry param : initParams.entrySet()) {
            Element paramName=doc.createElement(""String_Node_Str"");
            paramName.setTextContent(param.getKey().toString());
            initParam.appendChild(paramName);
            Element paramValue=doc.createElement(""String_Node_Str"");
            paramValue.setTextContent(param.getValue().toString());
            initParam.appendChild(paramValue);
          }
          filter.appendChild(initParam);
        }
        webapp.appendChild(filter);
      }
    }
    for (    Map.Entry mapping : servletNameFilterMappings.entrySet()) {
      Element filterMapping=doc.createElement(""String_Node_Str"");
      Element filterName=doc.createElement(""String_Node_Str"");
      filterName.setTextContent(mapping.getKey().toString());
      filterMapping.appendChild(filterName);
      Element servletName=doc.createElement(""String_Node_Str"");
      servletName.setTextContent(mapping.getValue().toString());
      filterMapping.appendChild(servletName);
      webapp.appendChild(filterMapping);
    }
    for (    Map.Entry mapping : urlPatternFilterMappings.entrySet()) {
      Element filterMapping=doc.createElement(""String_Node_Str"");
      Element filterName=doc.createElement(""String_Node_Str"");
      filterName.setTextContent(mapping.getKey().toString());
      filterMapping.appendChild(filterName);
      Element urlPattern=doc.createElement(""String_Node_Str"");
      urlPattern.setTextContent(mapping.getValue().toString());
      filterMapping.appendChild(urlPattern);
      webapp.appendChild(filterMapping);
    }
    entryFound=false;
    for (    Map.Entry entry : servlets.entrySet()) {
      NodeList servletList=doc.getElementsByTagName(""String_Node_Str"");
      for (int i=0; i < servletList.getLength(); i++) {
        Node servletNode=servletList.item(i);
        if (entry.getKey().equals(servletNode.getTextContent()) && servletNode.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList children=servletNode.getParentNode().getChildNodes();
          for (int j=0; j < children.getLength(); j++) {
            Node servletClass=children.item(j);
            if (servletClass.getNodeName().equals(""String_Node_Str"")) {
              servletClass.setTextContent(entry.getValue().toString());
              entryFound=true;
              break;
            }
          }
        }
      }
      if (!entryFound) {
        Element servlet=doc.createElement(""String_Node_Str"");
        Element servletName=doc.createElement(""String_Node_Str"");
        servletName.setTextContent(entry.getKey().toString());
        servlet.appendChild(servletName);
        Element servletClass=doc.createElement(""String_Node_Str"");
        servletClass.setTextContent(entry.getValue().toString());
        servlet.appendChild(servletClass);
        Map<String,String> initParams=facade.getServletRegistration(entry.getKey().toString()).getInitParameters();
        if ((initParams != null) && (!initParams.isEmpty())) {
          Element initParam=doc.createElement(""String_Node_Str"");
          for (          Map.Entry param : initParams.entrySet()) {
            Element paramName=doc.createElement(""String_Node_Str"");
            paramName.setTextContent(param.getKey().toString());
            initParam.appendChild(paramName);
            Element paramValue=doc.createElement(""String_Node_Str"");
            paramValue.setTextContent(param.getValue().toString());
            initParam.appendChild(paramValue);
          }
          servlet.appendChild(initParam);
        }
        webapp.appendChild(servlet);
      }
    }
    entryFound=false;
    for (    Map.Entry mapping : mappings.entrySet()) {
      NodeList servletList=doc.getElementsByTagName(""String_Node_Str"");
      for (int i=0; i < servletList.getLength(); i++) {
        Node servletNode=servletList.item(i);
        if (mapping.getKey().equals(servletNode.getTextContent()) && servletNode.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList children=servletNode.getParentNode().getChildNodes();
          for (int j=0; j < children.getLength(); j++) {
            Node urlPattern=children.item(j);
            if (urlPattern.getNodeName().equals(""String_Node_Str"")) {
              entryFound=true;
              break;
            }
          }
        }
      }
      if (!entryFound) {
        Element servletMapping=doc.createElement(""String_Node_Str"");
        for (        String pattern : mappings.get(mapping.getKey())) {
          Element servletName=doc.createElement(""String_Node_Str"");
          servletName.setTextContent(mapping.getKey().toString());
          servletMapping.appendChild(servletName);
          Element urlPattern=doc.createElement(""String_Node_Str"");
          urlPattern.setTextContent(pattern);
          servletMapping.appendChild(urlPattern);
        }
        webapp.appendChild(servletMapping);
      }
    }
    for (    String listenerStr : listeners) {
      Element listener=doc.createElement(""String_Node_Str"");
      Element listenerClass=doc.createElement(""String_Node_Str"");
      listenerClass.setTextContent(listenerStr);
      listener.appendChild(listenerClass);
      webapp.appendChild(listener);
    }
    Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    if (file != null) {
      DOMSource src=new DOMSource(doc);
      StreamResult result=new StreamResult(file);
      transformer.transform(src,result);
    }
  }
}"
29855,"/** 
 * Gets the names of the methods supported by the underlying servlet. This is the same set of methods included in the Allow response header in response to an OPTIONS request method processed by the underlying servlet.
 * @return Array of names of the methods supported by the underlyingservlet
 */
public String[] getServletMethods() throws ServletException {
  loadServletClass();
  if (!javax.servlet.http.HttpServlet.class.isAssignableFrom(servletClass)) {
    return DEFAULT_SERVLET_METHODS;
  }
  HashSet<String> allow=new HashSet<String>();
  allow.add(""String_Node_Str"");
  allow.add(""String_Node_Str"");
  Method[] methods=getAllDeclaredMethods(servletClass);
  for (int i=0; methods != null && i < methods.length; i++) {
    Method m=methods[i];
    if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
      allow.add(""String_Node_Str"");
    }
 else     if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
    }
 else     if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
    }
 else     if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
    }
  }
  String[] methodNames=new String[allow.size()];
  return allow.toArray(methodNames);
}","/** 
 * Gets the names of the methods supported by the underlying servlet. This is the same set of methods included in the Allow response header in response to an OPTIONS request method processed by the underlying servlet.
 * @return Array of names of the methods supported by the underlyingservlet
 */
public String[] getServletMethods() throws ServletException {
  loadServletClass();
  if (!javax.servlet.http.HttpServlet.class.isAssignableFrom(servletClass)) {
    return DEFAULT_SERVLET_METHODS;
  }
  HashSet<String> allow=new HashSet<String>();
  allow.add(""String_Node_Str"");
  allow.add(""String_Node_Str"");
  Method[] methods=getAllDeclaredMethods(servletClass);
  for (int i=0; methods != null && i < methods.length; i++) {
    Method m=methods[i];
    Class<?> params[]=m.getParameterTypes();
    if (!(params.length == 2 && params[0] == HttpServletRequest.class && params[1] == HttpServletResponse.class)) {
      continue;
    }
    if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
      allow.add(""String_Node_Str"");
    }
 else     if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
    }
 else     if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
    }
 else     if (m.getName().equals(""String_Node_Str"")) {
      allow.add(""String_Node_Str"");
    }
  }
  String[] methodNames=new String[allow.size()];
  return allow.toArray(methodNames);
}"
29856,"/** 
 * Serve the specified resource, optionally including the data content.
 * @param request The servlet request we are processing
 * @param response The servlet response we are creating
 * @param content Should the content be included?
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet-specified error occurs
 */
protected void serveResource(HttpServletRequest request,HttpServletResponse response,boolean content) throws IOException, ServletException {
  String path=getRelativePath(request);
  if (debug > 0) {
    if (content)     log(""String_Node_Str"" + path + ""String_Node_Str"");
 else     log(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  CacheEntry cacheEntry=null;
  ProxyDirContext proxyDirContext=resources;
  if (alternateDocBases == null || alternateDocBases.size() == 0) {
    cacheEntry=proxyDirContext.lookupCache(path);
  }
 else {
    AlternateDocBase match=AlternateDocBase.findMatch(path,alternateDocBases);
    if (match != null) {
      cacheEntry=((ProxyDirContext)match.getResources()).lookupCache(path);
    }
 else {
      cacheEntry=proxyDirContext.lookupCache(path);
    }
  }
  if (!cacheEntry.exists) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    String metaInfResPath=Globals.META_INF_RESOURCES + path;
    if (cl instanceof WebappClassLoader) {
      WebappClassLoader wcl=(WebappClassLoader)cl;
      final URL resourceUrl=wcl.getResourceFromJars(metaInfResPath);
      if (resourceUrl != null) {
        ConcurrentHashMap<String,ResourceEntry> resourceEntries=wcl.getResourceEntries();
        ResourceEntry resourceEntry=resourceEntries.get(metaInfResPath);
        if (resourceEntry != null) {
          cacheEntry=new CacheEntry();
          try {
            URI resourceUri=resourceUrl.toURI();
            if (""String_Node_Str"".equals(resourceUri.getScheme()) && (new File(resourceUri)).isDirectory()) {
              if (!path.endsWith(""String_Node_Str"")) {
                response.sendRedirect(response.encodeRedirectUrl(request.getContextPath() + path + ""String_Node_Str""));
                return;
              }
              FileDirContext fileDirContext=new FileDirContext();
              String base=resourceUrl.getPath();
              int index=base.lastIndexOf(path);
              if (index != -1) {
                base=base.substring(0,index);
              }
              fileDirContext.setDocBase(base);
              proxyDirContext=new ProxyDirContext(new Hashtable<String,String>(),fileDirContext);
              cacheEntry.context=proxyDirContext;
            }
 else {
              cacheEntry.resource=new Resource(){
                public InputStream streamContent() throws IOException {
                  return resourceUrl.openStream();
                }
              }
;
            }
          }
 catch (          Exception ex) {
            throw new IOException(ex);
          }
          cacheEntry.name=path;
          cacheEntry.attributes=new ResourceAttributes();
          cacheEntry.exists=true;
        }
      }
    }
  }
  if (!cacheEntry.exists) {
    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);
    if (requestUri != null) {
      throw new FileNotFoundException(requestUri);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (cacheEntry.context == null) {
    if (path.endsWith(""String_Node_Str"") || (path.endsWith(""String_Node_Str""))) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
  }
  if (cacheEntry.context == null) {
    boolean included=(request.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH) != null);
    if (!included && !checkIfHeaders(request,response,cacheEntry.attributes)) {
      return;
    }
  }
  String contentType=cacheEntry.attributes.getMimeType();
  if (contentType == null) {
    contentType=getServletContext().getMimeType(cacheEntry.name);
    cacheEntry.attributes.setMimeType(contentType);
  }
  ArrayList<Range> ranges=null;
  long contentLength=-1L;
  if (cacheEntry.context != null) {
    if (!listings) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    contentType=""String_Node_Str"";
  }
 else {
    if (useAcceptRanges) {
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
    }
    ranges=parseRange(request,response,cacheEntry.attributes);
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getETag());
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getLastModifiedHttp());
    contentLength=cacheEntry.attributes.getContentLength();
    if (contentLength == 0L) {
      content=false;
    }
  }
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  if (content) {
    try {
      ostream=response.getOutputStream();
    }
 catch (    IllegalStateException e) {
      if ((contentType == null) || (contentType.startsWith(""String_Node_Str"")) || (contentType.startsWith(""String_Node_Str""))) {
        writer=response.getWriter();
      }
 else {
        throw e;
      }
    }
  }
  if ((cacheEntry.context != null) || (((ranges == null) || (ranges.isEmpty())) && (request.getHeader(""String_Node_Str"") == null)) || (ranges == FULL)) {
    if (contentType != null) {
      if (debug > 0)       log(""String_Node_Str"" + contentType + ""String_Node_Str"");
      response.setContentType(contentType);
    }
    if ((cacheEntry.resource != null) && (contentLength >= 0)) {
      if (debug > 0)       log(""String_Node_Str"" + contentLength);
      if (contentLength < Integer.MAX_VALUE) {
        response.setContentLength((int)contentLength);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + contentLength);
      }
    }
    InputStream renderResult=null;
    if (cacheEntry.context != null) {
      if (content) {
        renderResult=render(request.getContextPath(),cacheEntry,proxyDirContext);
      }
    }
    if (content) {
      try {
        response.setBufferSize(output);
      }
 catch (      IllegalStateException e) {
      }
      if (ostream != null) {
        if (!checkSendfile(request,response,cacheEntry,contentLength,null))         copy(cacheEntry,renderResult,ostream);
      }
 else {
        copy(cacheEntry,renderResult,writer);
      }
    }
  }
 else {
    if ((ranges == null) || (ranges.isEmpty()))     return;
    if (maxHeaderRangeItems >= 0 && ranges.size() > maxHeaderRangeItems) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    if (ranges.size() == 1) {
      Range range=ranges.get(0);
      response.addHeader(""String_Node_Str"",""String_Node_Str"" + range.start + ""String_Node_Str""+ range.end+ ""String_Node_Str""+ range.length);
      long length=range.end - range.start + 1;
      if (length < Integer.MAX_VALUE) {
        response.setContentLength((int)length);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + length);
      }
      if (contentType != null) {
        if (debug > 0)         log(""String_Node_Str"" + contentType + ""String_Node_Str"");
        response.setContentType(contentType);
      }
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          if (!checkSendfile(request,response,cacheEntry,range.end - range.start + 1,range))           copy(cacheEntry,ostream,range);
        }
 else {
          copy(cacheEntry,writer,range);
        }
      }
    }
 else {
      response.setContentType(""String_Node_Str"" + mimeSeparation);
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          copy(cacheEntry,ostream,ranges.iterator(),contentType);
        }
 else {
          copy(cacheEntry,writer,ranges.iterator(),contentType);
        }
      }
    }
  }
}","/** 
 * Serve the specified resource, optionally including the data content.
 * @param request The servlet request we are processing
 * @param response The servlet response we are creating
 * @param content Should the content be included?
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet-specified error occurs
 */
protected void serveResource(HttpServletRequest request,HttpServletResponse response,boolean content) throws IOException, ServletException {
  String path=getRelativePath(request);
  if (debug > 0) {
    if (content)     log(""String_Node_Str"" + path + ""String_Node_Str"");
 else     log(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  CacheEntry cacheEntry=null;
  ProxyDirContext proxyDirContext=resources;
  if (alternateDocBases == null || alternateDocBases.size() == 0) {
    cacheEntry=proxyDirContext.lookupCache(path);
  }
 else {
    AlternateDocBase match=AlternateDocBase.findMatch(path,alternateDocBases);
    if (match != null) {
      cacheEntry=((ProxyDirContext)match.getResources()).lookupCache(path);
    }
 else {
      cacheEntry=proxyDirContext.lookupCache(path);
    }
  }
  if (!cacheEntry.exists) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    String metaInfResPath=Globals.META_INF_RESOURCES + path;
    if (cl instanceof WebappClassLoader) {
      WebappClassLoader wcl=(WebappClassLoader)cl;
      final URL resourceUrl=wcl.getResourceFromJars(metaInfResPath);
      if (resourceUrl != null) {
        ConcurrentHashMap<String,ResourceEntry> resourceEntries=wcl.getResourceEntries();
        ResourceEntry resourceEntry=resourceEntries.get(metaInfResPath);
        if (resourceEntry != null) {
          cacheEntry=new CacheEntry();
          try {
            URI resourceUri=resourceUrl.toURI();
            if (""String_Node_Str"".equals(resourceUri.getScheme()) && (new File(resourceUri)).isDirectory()) {
              if (!path.endsWith(""String_Node_Str"")) {
                response.sendRedirect(response.encodeRedirectUrl(request.getContextPath() + path + ""String_Node_Str""));
                return;
              }
              FileDirContext fileDirContext=new FileDirContext();
              String base=resourceUrl.getPath();
              int index=base.lastIndexOf(path);
              if (index != -1) {
                base=base.substring(0,index);
              }
              fileDirContext.setDocBase(base);
              proxyDirContext=new ProxyDirContext(new Hashtable<String,String>(),fileDirContext);
              cacheEntry.context=proxyDirContext;
            }
 else {
              cacheEntry.resource=new Resource(){
                public InputStream streamContent() throws IOException {
                  return resourceUrl.openStream();
                }
              }
;
            }
          }
 catch (          Exception ex) {
            throw new IOException(ex);
          }
          cacheEntry.name=path;
          cacheEntry.attributes=new ResourceAttributes();
          cacheEntry.exists=true;
        }
      }
    }
  }
  if (!cacheEntry.exists) {
    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);
    if (requestUri != null) {
      throw new FileNotFoundException(requestUri);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (cacheEntry.context == null) {
    if (path.endsWith(""String_Node_Str"") || (path.endsWith(""String_Node_Str""))) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
  }
  if (cacheEntry.context == null) {
    boolean included=(request.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH) != null);
    if (!included && !checkIfHeaders(request,response,cacheEntry.attributes)) {
      return;
    }
  }
  String contentType=cacheEntry.attributes.getMimeType();
  if (contentType == null && !cacheEntry.attributes.isMimeTypeInitialized()) {
    contentType=getServletContext().getMimeType(cacheEntry.name);
    cacheEntry.attributes.setMimeType(contentType);
  }
  ArrayList<Range> ranges=null;
  long contentLength=-1L;
  if (cacheEntry.context != null) {
    if (!listings) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    contentType=""String_Node_Str"";
  }
 else {
    if (useAcceptRanges) {
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
    }
    ranges=parseRange(request,response,cacheEntry.attributes);
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getETag());
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getLastModifiedHttp());
    contentLength=cacheEntry.attributes.getContentLength();
    if (contentLength == 0L) {
      content=false;
    }
  }
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  if (content) {
    try {
      ostream=response.getOutputStream();
    }
 catch (    IllegalStateException e) {
      if ((contentType == null) || (contentType.startsWith(""String_Node_Str"")) || (contentType.startsWith(""String_Node_Str""))) {
        writer=response.getWriter();
      }
 else {
        throw e;
      }
    }
  }
  if ((cacheEntry.context != null) || (((ranges == null) || (ranges.isEmpty())) && (request.getHeader(""String_Node_Str"") == null)) || (ranges == FULL)) {
    if (contentType != null) {
      if (debug > 0)       log(""String_Node_Str"" + contentType + ""String_Node_Str"");
      response.setContentType(contentType);
    }
    if ((cacheEntry.resource != null) && (contentLength >= 0)) {
      if (debug > 0)       log(""String_Node_Str"" + contentLength);
      if (contentLength < Integer.MAX_VALUE) {
        response.setContentLength((int)contentLength);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + contentLength);
      }
    }
    InputStream renderResult=null;
    if (cacheEntry.context != null) {
      if (content) {
        renderResult=render(request.getContextPath(),cacheEntry,proxyDirContext);
      }
    }
    if (content) {
      try {
        response.setBufferSize(output);
      }
 catch (      IllegalStateException e) {
      }
      if (ostream != null) {
        if (!checkSendfile(request,response,cacheEntry,contentLength,null))         copy(cacheEntry,renderResult,ostream);
      }
 else {
        copy(cacheEntry,renderResult,writer);
      }
    }
  }
 else {
    if ((ranges == null) || (ranges.isEmpty()))     return;
    if (maxHeaderRangeItems >= 0 && ranges.size() > maxHeaderRangeItems) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    if (ranges.size() == 1) {
      Range range=ranges.get(0);
      response.addHeader(""String_Node_Str"",""String_Node_Str"" + range.start + ""String_Node_Str""+ range.end+ ""String_Node_Str""+ range.length);
      long length=range.end - range.start + 1;
      if (length < Integer.MAX_VALUE) {
        response.setContentLength((int)length);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + length);
      }
      if (contentType != null) {
        if (debug > 0)         log(""String_Node_Str"" + contentType + ""String_Node_Str"");
        response.setContentType(contentType);
      }
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          if (!checkSendfile(request,response,cacheEntry,range.end - range.start + 1,range))           copy(cacheEntry,ostream,range);
        }
 else {
          copy(cacheEntry,writer,range);
        }
      }
    }
 else {
      response.setContentType(""String_Node_Str"" + mimeSeparation);
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          copy(cacheEntry,ostream,ranges.iterator(),contentType);
        }
 else {
          copy(cacheEntry,writer,ranges.iterator(),contentType);
        }
      }
    }
  }
}"
29857,"/** 
 * Creates and configures a web module and adds it to the specified virtual server.
 */
private WebModule loadWebModule(VirtualServer vs,WebModuleConfig wmInfo,String j2eeApplication,Properties deploymentProperties) throws Exception {
  String wmName=wmInfo.getName();
  String wmContextPath=wmInfo.getContextPath();
  if (wmContextPath.indexOf('%') != -1) {
    try {
      RequestUtil.urlDecode(wmContextPath,""String_Node_Str"");
    }
 catch (    Exception e) {
      String msg=rb.getString(""String_Node_Str"");
      msg=MessageFormat.format(msg,wmName,wmContextPath);
      throw new Exception(msg);
    }
  }
  if (wmContextPath.length() == 0 && vs.getDefaultWebModuleID() != null) {
    String msg=rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{wmName,vs.getID()});
    throw new Exception(msg);
  }
  wmInfo.setWorkDirBase(_appsWorkRoot);
  wmInfo.setStubBaseDir(appsStubRoot);
  String displayContextPath=null;
  if (wmContextPath.length() == 0)   displayContextPath=""String_Node_Str"";
 else   displayContextPath=wmContextPath;
  Map<String,AdHocServletInfo> adHocPaths=null;
  Map<String,AdHocServletInfo> adHocSubtrees=null;
  WebModule ctx=(WebModule)vs.findChild(wmContextPath);
  if (ctx != null) {
    if (ctx instanceof AdHocWebModule) {
      if (ctx.hasAdHocPaths()) {
        adHocPaths=ctx.getAdHocPaths();
      }
      if (ctx.hasAdHocSubtrees()) {
        adHocSubtrees=ctx.getAdHocSubtrees();
      }
      vs.removeChild(ctx);
    }
 else     if (Constants.DEFAULT_WEB_MODULE_NAME.equals(ctx.getModuleName())) {
      unloadWebModule(wmContextPath,ctx.getJ2EEApplication(),vs.getName(),true,null);
    }
 else     if (!ctx.getAvailable()) {
      ctx.setAvailable(true);
      return ctx;
    }
 else {
      String msg=rb.getString(""String_Node_Str"");
      throw new Exception(MessageFormat.format(msg,vs.getID(),ctx.getModuleName(),displayContextPath,wmName));
    }
  }
  if (_logger.isLoggable(Level.FINEST)) {
    Object[] params={wmName,vs.getID(),displayContextPath};
    _logger.log(Level.FINEST,""String_Node_Str"",params);
  }
  File docBase=null;
  if (JWS_APPCLIENT_MODULE_NAME.equals(wmName)) {
    docBase=new File(System.getProperty(""String_Node_Str""));
  }
 else {
    docBase=wmInfo.getLocation();
  }
  ctx=(WebModule)_embedded.createContext(wmName,wmContextPath,docBase,vs.getDefaultContextXmlLocation(),vs.getDefaultWebXmlLocation(),useDOLforDeployment,wmInfo);
  ctx.setUseNaming(false);
  Engine engine=(Engine)vs.getParent();
  if (engine != null) {
    ctx.setEngineName(engine.getName());
    ctx.setJvmRoute(engine.getJvmRoute());
  }
  String j2eeServer=_serverContext.getInstanceName();
  String domain=_serverContext.getDefaultDomainName();
  ctx.setDomain(domain);
  ctx.setJ2EEServer(j2eeServer);
  ctx.setJ2EEApplication(j2eeApplication);
  ctx.setCachingAllowed(false);
  ctx.setCacheControls(vs.getCacheControls());
  ctx.setBean(wmInfo.getBean());
  if (adHocPaths != null) {
    ctx.addAdHocPaths(adHocPaths);
  }
  if (adHocSubtrees != null) {
    ctx.addAdHocSubtrees(adHocSubtrees);
  }
  WebBundleDescriptor wbd=wmInfo.getDescriptor();
  if (wbd != null) {
    ctx.setContextRoot(wbd.getContextRoot());
  }
 else {
    _logger.log(Level.WARNING,""String_Node_Str"",wmInfo);
  }
  String wmInfoWorkDir=wmInfo.getWorkDir();
  if (wmInfoWorkDir != null) {
    StringBuilder workDir=new StringBuilder(wmInfo.getWorkDir());
    if (wmName.equals(Constants.DEFAULT_WEB_MODULE_NAME)) {
      workDir.append(""String_Node_Str"");
      workDir.append(FileUtils.makeFriendlyFilename(vs.getID()));
    }
    ctx.setWorkDir(workDir.toString());
  }
  ClassLoader parentLoader=wmInfo.getParentLoader();
  if (parentLoader == null) {
    parentLoader=_serverContext.getSharedClassLoader();
  }
  ctx.setParentClassLoader(parentLoader);
  if (wbd != null) {
    ctx.configureAlternateDD(wbd);
    ctx.configureWebServices(wbd);
  }
  SunWebApp iasBean=null;
  if (wbd != null) {
    iasBean=wbd.getSunDescriptor();
  }
  ctx.setIasWebAppConfigBean(iasBean);
  ctx.configureMiscSettings(iasBean,vs,displayContextPath);
  if (ctx.getID().startsWith(Constants.DEFAULT_WEB_MODULE_NAME)) {
    ctx.setAlternateDocBases(vs.getProperties());
  }
  Loader loader=ctx.configureLoader(iasBean);
  if (wbd != null && wbd.hasWebServices()) {
    wbd.addExtraAttribute(""String_Node_Str"",loader);
  }
  ctx.configureSessionSettings(wbd,wmInfo);
  ctx.setI18nInfo();
  if (wbd != null) {
    String resourceType=wmInfo.getObjectType();
    boolean isSystem=resourceType != null && resourceType.startsWith(""String_Node_Str"");
    if (!wmName.startsWith(Constants.DEFAULT_WEB_MODULE_NAME)) {
      Realm realm=habitat.getByContract(Realm.class);
      if (""String_Node_Str"".equals(j2eeApplication)) {
        if (realm != null && realm instanceof RealmInitializer) {
          ((RealmInitializer)realm).initializeRealm(wbd,isSystem,vs.getAuthRealmName());
          ctx.setRealm(realm);
        }
      }
 else {
        if (realm != null && realm instanceof RealmInitializer) {
          ((RealmInitializer)realm).initializeRealm(wbd,isSystem,null);
          ctx.setRealm(realm);
        }
      }
    }
    if (wbd.getApplication() != null && wbd.getApplication().isVirtual()) {
      wbd.visit(new WebValidatorWithoutCL());
    }
  }
  addMimeMappings(ctx,vs.getMimeMap());
  String moduleName=Constants.DEFAULT_WEB_MODULE_NAME;
  String monitoringNodeName=moduleName;
  if (wbd != null && wbd.getApplication() != null) {
    com.sun.enterprise.deployment.Application app=wbd.getApplication();
    ctx.setStandalone(app.isVirtual());
    if (app.isVirtual()) {
      moduleName=app.getRegistrationName();
      monitoringNodeName=wbd.getModuleID();
    }
 else {
      moduleName=wbd.getModuleDescriptor().getArchiveUri();
      StringBuilder sb=new StringBuilder();
      sb.append(app.getRegistrationName()).append(MONITORING_NODE_SEPARATOR).append(moduleName);
      monitoringNodeName=sb.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
  ctx.setModuleName(moduleName);
  ctx.setMonitoringNodeName(monitoringNodeName);
  List<String> servletNames=new ArrayList<String>();
  if (wbd != null) {
    for (    WebComponentDescriptor webCompDesc : wbd.getWebComponentDescriptors()) {
      if (webCompDesc.isServlet()) {
        servletNames.add(webCompDesc.getCanonicalName());
      }
    }
  }
  webStatsProviderBootstrap.registerApplicationStatsProviders(monitoringNodeName,vs.getName(),servletNames);
  vs.addChild(ctx);
  ctx.loadSessions(deploymentProperties);
  return ctx;
}","/** 
 * Creates and configures a web module and adds it to the specified virtual server.
 */
private WebModule loadWebModule(VirtualServer vs,WebModuleConfig wmInfo,String j2eeApplication,Properties deploymentProperties) throws Exception {
  String wmName=wmInfo.getName();
  String wmContextPath=wmInfo.getContextPath();
  if (wmContextPath.indexOf('%') != -1) {
    try {
      RequestUtil.urlDecode(wmContextPath,""String_Node_Str"");
    }
 catch (    Exception e) {
      String msg=rb.getString(""String_Node_Str"");
      msg=MessageFormat.format(msg,wmName,wmContextPath);
      throw new Exception(msg);
    }
  }
  if (wmContextPath.length() == 0 && vs.getDefaultWebModuleID() != null) {
    String msg=rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{wmName,vs.getID()});
    throw new Exception(msg);
  }
  wmInfo.setWorkDirBase(_appsWorkRoot);
  wmInfo.setStubBaseDir(appsStubRoot);
  String displayContextPath=null;
  if (wmContextPath.length() == 0)   displayContextPath=""String_Node_Str"";
 else   displayContextPath=wmContextPath;
  Map<String,AdHocServletInfo> adHocPaths=null;
  Map<String,AdHocServletInfo> adHocSubtrees=null;
  WebModule ctx=(WebModule)vs.findChild(wmContextPath);
  if (ctx != null) {
    if (ctx instanceof AdHocWebModule) {
      if (ctx.hasAdHocPaths()) {
        adHocPaths=ctx.getAdHocPaths();
      }
      if (ctx.hasAdHocSubtrees()) {
        adHocSubtrees=ctx.getAdHocSubtrees();
      }
      vs.removeChild(ctx);
    }
 else     if (Constants.DEFAULT_WEB_MODULE_NAME.equals(ctx.getModuleName())) {
      unloadWebModule(wmContextPath,ctx.getJ2EEApplication(),vs.getName(),true,null);
    }
 else     if (!ctx.getAvailable()) {
      ctx.setAvailable(true);
      return ctx;
    }
 else {
      String msg=rb.getString(""String_Node_Str"");
      throw new Exception(MessageFormat.format(msg,vs.getID(),ctx.getModuleName(),displayContextPath,wmName));
    }
  }
  if (_logger.isLoggable(Level.FINEST)) {
    Object[] params={wmName,vs.getID(),displayContextPath};
    _logger.log(Level.FINEST,""String_Node_Str"",params);
  }
  File docBase=null;
  if (JWS_APPCLIENT_MODULE_NAME.equals(wmName)) {
    docBase=new File(System.getProperty(""String_Node_Str""));
  }
 else {
    docBase=wmInfo.getLocation();
  }
  ctx=(WebModule)_embedded.createContext(wmName,wmContextPath,docBase,vs.getDefaultContextXmlLocation(),vs.getDefaultWebXmlLocation(),useDOLforDeployment,wmInfo);
  ctx.setUseNaming(false);
  Engine engine=(Engine)vs.getParent();
  if (engine != null) {
    ctx.setEngineName(engine.getName());
    ctx.setJvmRoute(engine.getJvmRoute());
  }
  String j2eeServer=_serverContext.getInstanceName();
  String domain=_serverContext.getDefaultDomainName();
  ctx.setDomain(domain);
  ctx.setJ2EEServer(j2eeServer);
  ctx.setJ2EEApplication(j2eeApplication);
  ctx.setCacheControls(vs.getCacheControls());
  ctx.setBean(wmInfo.getBean());
  if (adHocPaths != null) {
    ctx.addAdHocPaths(adHocPaths);
  }
  if (adHocSubtrees != null) {
    ctx.addAdHocSubtrees(adHocSubtrees);
  }
  WebBundleDescriptor wbd=wmInfo.getDescriptor();
  if (wbd != null) {
    ctx.setContextRoot(wbd.getContextRoot());
  }
 else {
    _logger.log(Level.WARNING,""String_Node_Str"",wmInfo);
  }
  String wmInfoWorkDir=wmInfo.getWorkDir();
  if (wmInfoWorkDir != null) {
    StringBuilder workDir=new StringBuilder(wmInfo.getWorkDir());
    if (wmName.equals(Constants.DEFAULT_WEB_MODULE_NAME)) {
      workDir.append(""String_Node_Str"");
      workDir.append(FileUtils.makeFriendlyFilename(vs.getID()));
    }
    ctx.setWorkDir(workDir.toString());
  }
  ClassLoader parentLoader=wmInfo.getParentLoader();
  if (parentLoader == null) {
    parentLoader=_serverContext.getSharedClassLoader();
  }
  ctx.setParentClassLoader(parentLoader);
  if (wbd != null) {
    ctx.configureAlternateDD(wbd);
    ctx.configureWebServices(wbd);
  }
  SunWebApp iasBean=null;
  if (wbd != null) {
    iasBean=wbd.getSunDescriptor();
  }
  ctx.setIasWebAppConfigBean(iasBean);
  ctx.configureMiscSettings(iasBean,vs,displayContextPath);
  if (ctx.getID().startsWith(Constants.DEFAULT_WEB_MODULE_NAME)) {
    ctx.setAlternateDocBases(vs.getProperties());
  }
  Loader loader=ctx.configureLoader(iasBean);
  if (wbd != null && wbd.hasWebServices()) {
    wbd.addExtraAttribute(""String_Node_Str"",loader);
  }
  ctx.configureSessionSettings(wbd,wmInfo);
  ctx.setI18nInfo();
  if (wbd != null) {
    String resourceType=wmInfo.getObjectType();
    boolean isSystem=resourceType != null && resourceType.startsWith(""String_Node_Str"");
    if (!wmName.startsWith(Constants.DEFAULT_WEB_MODULE_NAME)) {
      Realm realm=habitat.getByContract(Realm.class);
      if (""String_Node_Str"".equals(j2eeApplication)) {
        if (realm != null && realm instanceof RealmInitializer) {
          ((RealmInitializer)realm).initializeRealm(wbd,isSystem,vs.getAuthRealmName());
          ctx.setRealm(realm);
        }
      }
 else {
        if (realm != null && realm instanceof RealmInitializer) {
          ((RealmInitializer)realm).initializeRealm(wbd,isSystem,null);
          ctx.setRealm(realm);
        }
      }
    }
    if (wbd.getApplication() != null && wbd.getApplication().isVirtual()) {
      wbd.visit(new WebValidatorWithoutCL());
    }
  }
  addMimeMappings(ctx,vs.getMimeMap());
  String moduleName=Constants.DEFAULT_WEB_MODULE_NAME;
  String monitoringNodeName=moduleName;
  if (wbd != null && wbd.getApplication() != null) {
    com.sun.enterprise.deployment.Application app=wbd.getApplication();
    ctx.setStandalone(app.isVirtual());
    if (app.isVirtual()) {
      moduleName=app.getRegistrationName();
      monitoringNodeName=wbd.getModuleID();
    }
 else {
      moduleName=wbd.getModuleDescriptor().getArchiveUri();
      StringBuilder sb=new StringBuilder();
      sb.append(app.getRegistrationName()).append(MONITORING_NODE_SEPARATOR).append(moduleName);
      monitoringNodeName=sb.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
  ctx.setModuleName(moduleName);
  ctx.setMonitoringNodeName(monitoringNodeName);
  List<String> servletNames=new ArrayList<String>();
  if (wbd != null) {
    for (    WebComponentDescriptor webCompDesc : wbd.getWebComponentDescriptors()) {
      if (webCompDesc.isServlet()) {
        servletNames.add(webCompDesc.getCanonicalName());
      }
    }
  }
  webStatsProviderBootstrap.registerApplicationStatsProviders(monitoringNodeName,vs.getName(),servletNames);
  vs.addChild(ctx);
  ctx.loadSessions(deploymentProperties);
  return ctx;
}"
29858,"/** 
 * @param mimeType The mimeType to set.
 */
public void setMimeType(String mimeType){
  this.mimeType=mimeType;
}","/** 
 * @param mimeType The mimeType to set.
 */
public void setMimeType(String mimeType){
  this.mimeTypeInitialized=true;
  this.mimeType=mimeType;
}"
29859,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumPotentialConnLeakCount(){
  return numPotentialConnLeak.getStatistic();
}","/** 
 * When a connection leak is observed, the monitoring statistics are displayed to the server.log. This method helps in segregating the statistics based on LOW/HIGH monitoring levels and displaying them.
 * @param poolName
 * @param stackTrace
 */
@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumPotentialConnLeakCount(){
  return numPotentialConnLeak.getStatistic();
}"
29860,"/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException if there ino <code>PasswordCredential</code> objectsatisfying this request
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  if (dsObjBuilder == null) {
    dsObjBuilder=new DataSourceObjectBuilder(spec);
  }
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  try {
    Class.forName(spec.getDetail(DataSourceSpec.CLASSNAME));
  }
 catch (  ClassNotFoundException cnfe) {
    _logger.log(Level.SEVERE,""String_Node_Str"",cnfe);
    throw new ResourceException(""String_Node_Str"" + spec.getDetail(DataSourceSpec.CLASSNAME));
  }
  java.sql.Connection dsConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  Properties driverProps=new Properties();
  Hashtable properties=dsObjBuilder.parseDriverProperties(spec,false);
  Set<Map.Entry<String,Vector>> entries=(Set<Map.Entry<String,Vector>>)properties.entrySet();
  for (  Map.Entry<String,Vector> entry : entries) {
    String value=null;
    String key=(String)entry.getKey();
    Vector values=(Vector)entry.getValue();
    if (!values.isEmpty() && values.size() == 1) {
      value=(String)values.firstElement();
    }
 else     if (values.size() > 1) {
      logFine(""String_Node_Str"" + key);
    }
    String prop=getParsedKey(key);
    driverProps.put(prop,value);
    if (prop.equalsIgnoreCase(""String_Node_Str"")) {
      if (spec.getDetail(DataSourceSpec.URL) == null) {
        setConnectionURL(value);
      }
    }
  }
  try {
    if (cxRequestInfo != null) {
      driverProps.setProperty(""String_Node_Str"",pc.getUserName());
      driverProps.setProperty(""String_Node_Str"",new String(pc.getPassword()));
    }
 else {
      String user=spec.getDetail(DataSourceSpec.USERNAME);
      String password=spec.getDetail(DataSourceSpec.PASSWORD);
      if (user != null) {
        driverProps.setProperty(""String_Node_Str"",user);
      }
      if (password != null) {
        driverProps.setProperty(""String_Node_Str"",password);
      }
    }
    dsConn=DriverManager.getConnection(spec.getDetail(DataSourceSpec.URL),driverProps);
  }
 catch (  java.sql.SQLException sqle) {
    _logger.log(Level.SEVERE,""String_Node_Str"",sqle);
    throw new javax.resource.spi.ResourceAllocationException(""String_Node_Str"" + sqle.getMessage());
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}","/** 
 * Creates a new physical connection to the underlying EIS resource manager.
 * @param subject       <code>Subject</code> instance passed by the application server
 * @param cxRequestInfo <code>ConnectionRequestInfo</code> which may be createdas a result of the invocation <code>getConnection(user, password)</code> on the <code>DataSource</code> object
 * @return <code>ManagedConnection</code> object created
 * @throws ResourceException if there is an error in instantiating the<code>DataSource</code> object used for the creation of the <code>ManagedConnection</code> object
 * @throws SecurityException if there ino <code>PasswordCredential</code> objectsatisfying this request
 */
public javax.resource.spi.ManagedConnection createManagedConnection(javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {
  logFine(""String_Node_Str"");
  if (dsObjBuilder == null) {
    dsObjBuilder=new DataSourceObjectBuilder(spec);
  }
  PasswordCredential pc=SecurityUtils.getPasswordCredential(this,subject,cxRequestInfo);
  try {
    Class.forName(spec.getDetail(DataSourceSpec.CLASSNAME));
  }
 catch (  ClassNotFoundException cnfe) {
    _logger.log(Level.SEVERE,""String_Node_Str"",cnfe);
    throw new ResourceException(""String_Node_Str"" + spec.getDetail(DataSourceSpec.CLASSNAME));
  }
  java.sql.Connection dsConn=null;
  com.sun.gjc.spi.ManagedConnection mc=null;
  Properties driverProps=new Properties();
  Hashtable properties=dsObjBuilder.parseDriverProperties(spec,false);
  Set<Map.Entry<String,Vector>> entries=(Set<Map.Entry<String,Vector>>)properties.entrySet();
  for (  Map.Entry<String,Vector> entry : entries) {
    String value=new String();
    String key=(String)entry.getKey();
    Vector values=(Vector)entry.getValue();
    if (!values.isEmpty() && values.size() == 1) {
      value=(String)values.firstElement();
    }
 else     if (values.size() > 1) {
      logFine(""String_Node_Str"" + key);
    }
    String prop=getParsedKey(key);
    driverProps.put(prop,value);
    if (prop.equalsIgnoreCase(""String_Node_Str"")) {
      if (spec.getDetail(DataSourceSpec.URL) == null) {
        setConnectionURL(value);
      }
    }
  }
  try {
    if (cxRequestInfo != null) {
      driverProps.setProperty(""String_Node_Str"",pc.getUserName());
      driverProps.setProperty(""String_Node_Str"",new String(pc.getPassword()));
    }
 else {
      String user=spec.getDetail(DataSourceSpec.USERNAME);
      String password=spec.getDetail(DataSourceSpec.PASSWORD);
      if (user != null) {
        driverProps.setProperty(""String_Node_Str"",user);
      }
      if (password != null) {
        driverProps.setProperty(""String_Node_Str"",password);
      }
    }
    dsConn=DriverManager.getConnection(spec.getDetail(DataSourceSpec.URL),driverProps);
  }
 catch (  java.sql.SQLException sqle) {
    _logger.log(Level.SEVERE,""String_Node_Str"",sqle);
    throw new javax.resource.spi.ResourceAllocationException(""String_Node_Str"" + sqle.getMessage());
  }
  try {
    mc=constructManagedConnection(null,dsConn,pc,this);
    validateAndSetIsolation(mc);
  }
  finally {
    if (mc == null) {
      if (dsConn != null) {
        try {
          dsConn.close();
        }
 catch (        SQLException e) {
          _logger.log(Level.FINEST,""String_Node_Str"" + dsConn);
        }
      }
    }
  }
  return mc;
}"
29861,"public void setNetworkTimeout(Executor executorObj,int milliseconds) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    Class<?>[] valueTypes=new Class<?>[]{Executor.class,Integer.TYPE};
    try {
      executor.invokeMethod(con,""String_Node_Str"",valueTypes,executorObj,milliseconds);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void setNetworkTimeout(Executor executorObj,int milliseconds) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    Class<?>[] valueTypes=new Class<?>[]{Executor.class,Integer.TYPE};
    try {
      getMethodExecutor().invokeMethod(con,""String_Node_Str"",valueTypes,executorObj,milliseconds);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29862,"public void setSchema(String schema) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    Class<?>[] valueTypes=new Class<?>[]{String.class};
    try {
      executor.invokeMethod(con,""String_Node_Str"",valueTypes,schema);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void setSchema(String schema) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    Class<?>[] valueTypes=new Class<?>[]{String.class};
    try {
      getMethodExecutor().invokeMethod(con,""String_Node_Str"",valueTypes,schema);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29863,"public String getSchema() throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    try {
      return (String)executor.invokeMethod(con,""String_Node_Str"",null);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public String getSchema() throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    try {
      return (String)getMethodExecutor().invokeMethod(con,""String_Node_Str"",null);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29864,"public int getNetworkTimeout() throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    try {
      return (Integer)executor.invokeMethod(con,""String_Node_Str"",null);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public int getNetworkTimeout() throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    checkValidity();
    try {
      return (Integer)getMethodExecutor().invokeMethod(con,""String_Node_Str"",null);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29865,"public ResultSet getPseudoColumns(String catalog,String schemaPattern,String tableNamePattern,String columnNamePattern) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    Class<?>[] valueTypes=new Class<?>[]{String.class,String.class,String.class,String.class};
    try {
      return (ResultSet)executor.invokeMethod(databaseMetaData,""String_Node_Str"",valueTypes,catalog,schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public ResultSet getPseudoColumns(String catalog,String schemaPattern,String tableNamePattern,String columnNamePattern) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    Class<?>[] valueTypes=new Class<?>[]{String.class,String.class,String.class,String.class};
    try {
      return (ResultSet)getMethodExecutor().invokeMethod(databaseMetaData,""String_Node_Str"",valueTypes,catalog,schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29866,"public boolean generatedKeyAlwaysReturned() throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    try {
      return (Boolean)executor.invokeMethod(databaseMetaData,""String_Node_Str"",null);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public boolean generatedKeyAlwaysReturned() throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    try {
      return (Boolean)getMethodExecutor().invokeMethod(databaseMetaData,""String_Node_Str"",null);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29867,"public <T>T getObject(String columnLabel,Class<T> type) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    Class<?>[] valueTypes=new Class<?>[]{String.class,Class.class};
    try {
      return (T)executor.invokeMethod(resultSet,""String_Node_Str"",valueTypes,columnLabel,type);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public <T>T getObject(String columnLabel,Class<T> type) throws SQLException {
  if (DataSourceObjectBuilder.isJDBC41()) {
    Class<?>[] valueTypes=new Class<?>[]{String.class,Class.class};
    try {
      return (T)getMethodExecutor().invokeMethod(resultSet,""String_Node_Str"",valueTypes,columnLabel,type);
    }
 catch (    ResourceException ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new SQLException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
29868,"private List<String> getGroups(String userDN){
  DirContext ctx=null;
  String srcFilter=null;
  try {
    ctx=new InitialDirContext(getLdapBindProps());
    X500Name name=new X500Name(userDN);
    String _username=name.getCommonName();
    if (_username == null && userDN != null && userDN.startsWith(""String_Node_Str"")) {
      int first=userDN.indexOf(""String_Node_Str"");
      int last=userDN.indexOf(""String_Node_Str"");
      if (first != -1 && last != -1) {
        _username=userDN.substring(first + 4,last);
      }
    }
    StringBuffer sb=new StringBuffer(getProperty(PARAM_GRP_SEARCH_FILTER));
    substitute(sb,SUBST_SUBJECT_NAME,_username);
    substitute(sb,SUBST_SUBJECT_DN,userDN);
    srcFilter=sb.toString();
    List<String> groupsList=new ArrayList<String>();
    groupsList.addAll(groupSearch(ctx,getProperty(PARAM_GRPDN),srcFilter,getProperty(PARAM_GRP_TARGET)));
    groupsList.addAll(dynamicGroupSearch(ctx,getProperty(PARAM_GRPDN),getProperty(PARAM_GRP_TARGET),userDN));
    return groupsList;
  }
 catch (  Exception e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  return null;
}","private List<String> getGroups(String userDN){
  DirContext ctx=null;
  String srcFilter=null;
  try {
    ctx=new InitialDirContext(getLdapBindProps());
    X500Name name=new X500Name(userDN);
    String _username=name.getCommonName();
    if (_username == null && userDN != null && userDN.startsWith(""String_Node_Str"")) {
      int first=userDN.indexOf(""String_Node_Str"");
      int last=userDN.indexOf(""String_Node_Str"");
      if (first != -1 && last != -1) {
        _username=userDN.substring(first + 4,last);
      }
    }
    StringBuffer sb=new StringBuffer(getProperty(PARAM_GRP_SEARCH_FILTER));
    substitute(sb,SUBST_SUBJECT_NAME,_username);
    substitute(sb,SUBST_SUBJECT_DN,userDN);
    srcFilter=sb.toString();
    List<String> groupsList=new ArrayList<String>();
    groupsList.addAll(groupSearch(ctx,getProperty(PARAM_GRPDN),srcFilter,getProperty(PARAM_GRP_TARGET)));
    groupsList.addAll(dynamicGroupSearch(ctx,getProperty(PARAM_GRPDN),getProperty(PARAM_GRP_TARGET),userDN));
    return groupsList;
  }
 catch (  Exception e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    if (ctx != null) {
      try {
        ctx.close();
      }
 catch (      NamingException e) {
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
  }
  return null;
}"
29869,"void notifyAsyncListeners(AsyncEventType asyncEventType,Throwable t){
synchronized (asyncListenerContexts) {
    if (asyncListenerContexts.isEmpty()) {
      return;
    }
    LinkedList<AsyncListenerContext> clone=new LinkedList<AsyncListenerContext>(asyncListenerContexts);
    if (asyncEventType.equals(AsyncEventType.START_ASYNC)) {
      asyncListenerContexts.clear();
    }
    for (    AsyncListenerContext asyncListenerContext : clone) {
      AsyncListener asyncListener=asyncListenerContext.getAsyncListener();
      AsyncEvent asyncEvent=new AsyncEvent(this,asyncListenerContext.getRequest(),asyncListenerContext.getResponse(),t);
      try {
switch (asyncEventType) {
case COMPLETE:
          asyncListener.onComplete(asyncEvent);
        break;
case TIMEOUT:
      asyncListener.onTimeout(asyncEvent);
    break;
case ERROR:
  asyncListener.onError(asyncEvent);
break;
case START_ASYNC:
asyncListener.onStartAsync(asyncEvent);
break;
default :
break;
}
}
 catch (IOException ioe) {
log.log(Level.WARNING,""String_Node_Str"",ioe);
}
}
}
}","void notifyAsyncListeners(AsyncEventType asyncEventType,Throwable t){
  LinkedList<AsyncListenerContext> clone;
synchronized (asyncListenerContexts) {
    if (asyncListenerContexts.isEmpty()) {
      return;
    }
    clone=new LinkedList<AsyncListenerContext>(asyncListenerContexts);
    if (asyncEventType.equals(AsyncEventType.START_ASYNC)) {
      asyncListenerContexts.clear();
    }
  }
  for (  AsyncListenerContext asyncListenerContext : clone) {
    AsyncListener asyncListener=asyncListenerContext.getAsyncListener();
    AsyncEvent asyncEvent=new AsyncEvent(this,asyncListenerContext.getRequest(),asyncListenerContext.getResponse(),t);
    try {
switch (asyncEventType) {
case COMPLETE:
        asyncListener.onComplete(asyncEvent);
      break;
case TIMEOUT:
    asyncListener.onTimeout(asyncEvent);
  break;
case ERROR:
asyncListener.onError(asyncEvent);
break;
case START_ASYNC:
asyncListener.onStartAsync(asyncEvent);
break;
default :
break;
}
}
 catch (IOException ioe) {
log.log(Level.WARNING,STRING_MANAGER.getString(""String_Node_Str""),ioe);
}
}
}"
29870,"/** 
 * Retrieves the work manager.
 * @return <code>WorkManager</code> instance.
 * @see com.sun.enterprise.connectors.work.CommonWorkManager
 * @see com.sun.enterprise.connectors.work.WorkManagerFactory
 */
public WorkManager getWorkManager(){
  initializeWorkManager();
  return wm;
}","/** 
 * Retrieves the work manager.
 * @return <code>WorkManager</code> instance.
 * @see com.sun.enterprise.connectors.work.CommonWorkManager
 * @see com.sun.enterprise.connectors.work.WorkManagerFactoryImpl
 */
public WorkManager getWorkManager(){
  initializeWorkManager();
  return wm;
}"
29871,"/** 
 * validates the work-contexts provided in the work
 * @param workToBeValidated work instance
 * @param context execution-context (if present)
 * @param contextHandler work-context-handler
 * @throws WorkCompletedException when work processing fails
 * @throws WorkRejectedException when work cannot be processed
 */
private void validateWork(Work workToBeValidated,ExecutionContext context,WorkContextHandler contextHandler) throws WorkCompletedException, WorkRejectedException {
  contextHandler.validateWork(workToBeValidated,context);
}","/** 
 * validates the work-contexts provided in the work
 * @param workToBeValidated work instance
 * @param context execution-context (if present)
 * @param contextHandler work-context-handler
 * @throws WorkCompletedException when work processing fails
 * @throws WorkRejectedException when work cannot be processed
 */
private void validateWork(Work workToBeValidated,ExecutionContext context,WorkContextHandlerImpl contextHandler) throws WorkCompletedException, WorkRejectedException {
  contextHandler.validateWork(workToBeValidated,context);
}"
29872,"/** 
 * Executes the work instance. The calling thread will wait until the start of work execution.
 * @param work         work instance from resource adapter
 * @param startTimeout Timeout for the work.
 * @param execContext  Execution context in which the work will be executed.
 * @param workListener Listener from RA that will listen to work events.
 * @throws WorkException if there is an exception while executing work.
 */
public long startWork(Work work,long startTimeout,ExecutionContext execContext,WorkListener workListener) throws WorkException {
  WorkContextHandler contextHandler=createWorkContextHandler();
  validateWork(work,WorkCoordinator.getExecutionContext(execContext,work),contextHandler);
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  long acceptanceTime=System.currentTimeMillis();
  WorkCoordinator wc=new WorkCoordinator(work,startTimeout,execContext,tp.getAnyWorkQueue(),workListener,this.probeProvider,runtime,raName,contextHandler);
  wc.submitWork(WorkCoordinator.WAIT_UNTIL_START);
  wc.lock();
  WorkException we=wc.getException();
  if (we != null) {
    throw we;
  }
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  long startTime=System.currentTimeMillis();
  return (startTime - acceptanceTime);
}","/** 
 * Executes the work instance. The calling thread will wait until the start of work execution.
 * @param work         work instance from resource adapter
 * @param startTimeout Timeout for the work.
 * @param execContext  Execution context in which the work will be executed.
 * @param workListener Listener from RA that will listen to work events.
 * @throws WorkException if there is an exception while executing work.
 */
public long startWork(Work work,long startTimeout,ExecutionContext execContext,WorkListener workListener) throws WorkException {
  WorkContextHandlerImpl contextHandler=createWorkContextHandler();
  validateWork(work,WorkCoordinator.getExecutionContext(execContext,work),contextHandler);
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  long acceptanceTime=System.currentTimeMillis();
  WorkCoordinator wc=new WorkCoordinator(work,startTimeout,execContext,tp.getAnyWorkQueue(),workListener,this.probeProvider,runtime,raName,contextHandler);
  wc.submitWork(WorkCoordinator.WAIT_UNTIL_START);
  wc.lock();
  WorkException we=wc.getException();
  if (we != null) {
    throw we;
  }
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  long startTime=System.currentTimeMillis();
  return (startTime - acceptanceTime);
}"
29873,"/** 
 * Executes the work instance. The calling thread will wait until the end of work execution.
 * @param work         work instance from resource adapter
 * @param startTimeout Timeout for the work.
 * @param execContext  Execution context in which the work will be executed.
 * @param workListener Listener from RA that will listen to work events.
 * @throws WorkException if there is an exception while executing work.
 */
public void doWork(Work work,long startTimeout,ExecutionContext execContext,WorkListener workListener) throws WorkException {
  WorkContextHandler contextHandler=createWorkContextHandler();
  validateWork(work,WorkCoordinator.getExecutionContext(execContext,work),contextHandler);
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  WorkCoordinator wc=new WorkCoordinator(work,startTimeout,execContext,tp.getAnyWorkQueue(),workListener,this.probeProvider,runtime,raName,contextHandler);
  wc.submitWork(WorkCoordinator.WAIT_UNTIL_FINISH);
  wc.lock();
  WorkException we=wc.getException();
  if (we != null) {
    throw we;
  }
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
}","/** 
 * Executes the work instance. The calling thread will wait until the end of work execution.
 * @param work         work instance from resource adapter
 * @param startTimeout Timeout for the work.
 * @param execContext  Execution context in which the work will be executed.
 * @param workListener Listener from RA that will listen to work events.
 * @throws WorkException if there is an exception while executing work.
 */
public void doWork(Work work,long startTimeout,ExecutionContext execContext,WorkListener workListener) throws WorkException {
  WorkContextHandlerImpl contextHandler=createWorkContextHandler();
  validateWork(work,WorkCoordinator.getExecutionContext(execContext,work),contextHandler);
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  WorkCoordinator wc=new WorkCoordinator(work,startTimeout,execContext,tp.getAnyWorkQueue(),workListener,this.probeProvider,runtime,raName,contextHandler);
  wc.submitWork(WorkCoordinator.WAIT_UNTIL_FINISH);
  wc.lock();
  WorkException we=wc.getException();
  if (we != null) {
    throw we;
  }
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
}"
29874,"/** 
 * prvides work-context-handler to handle the submitted work-contexts
 * @return work-context-handler
 */
private WorkContextHandler createWorkContextHandler(){
  WorkContextHandler contextHandler=new WorkContextHandler(runtime,raName,rarClassLoader);
  return contextHandler;
}","/** 
 * prvides work-context-handler to handle the submitted work-contexts
 * @return work-context-handler
 */
private WorkContextHandlerImpl createWorkContextHandler(){
  WorkContextHandlerImpl contextHandler=new WorkContextHandlerImpl(runtime,raName,rarClassLoader);
  return contextHandler;
}"
29875,"/** 
 * Executes the work instance. Calling thread will continue after scheduling the work
 * @param work         work instance from resource adapter
 * @param startTimeout Timeout for the work.
 * @param execContext  Execution context in which the work will be executed.
 * @param workListener Listener from RA that will listen to work events.
 * @throws WorkException if there is an exception while executing work.
 */
public void scheduleWork(Work work,long startTimeout,ExecutionContext execContext,WorkListener workListener) throws WorkException {
  WorkContextHandler contextHandler=createWorkContextHandler();
  validateWork(work,WorkCoordinator.getExecutionContext(execContext,work),contextHandler);
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  WorkCoordinator wc=new WorkCoordinator(work,startTimeout,execContext,tp.getAnyWorkQueue(),workListener,this.probeProvider,runtime,raName,contextHandler);
  wc.submitWork(WorkCoordinator.NO_WAIT);
  wc.lock();
  WorkException we=wc.getException();
  if (we != null) {
    throw we;
  }
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  return;
}","/** 
 * Executes the work instance. Calling thread will continue after scheduling the work
 * @param work         work instance from resource adapter
 * @param startTimeout Timeout for the work.
 * @param execContext  Execution context in which the work will be executed.
 * @param workListener Listener from RA that will listen to work events.
 * @throws WorkException if there is an exception while executing work.
 */
public void scheduleWork(Work work,long startTimeout,ExecutionContext execContext,WorkListener workListener) throws WorkException {
  WorkContextHandlerImpl contextHandler=createWorkContextHandler();
  validateWork(work,WorkCoordinator.getExecutionContext(execContext,work),contextHandler);
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  WorkCoordinator wc=new WorkCoordinator(work,startTimeout,execContext,tp.getAnyWorkQueue(),workListener,this.probeProvider,runtime,raName,contextHandler);
  wc.submitWork(WorkCoordinator.NO_WAIT);
  wc.lock();
  WorkException we=wc.getException();
  if (we != null) {
    throw we;
  }
  if (logger.isLoggable(Level.FINEST)) {
    String msg=""String_Node_Str"" + work.toString() + ""String_Node_Str"";
    logger.log(Level.FINEST,debugMsg(msg));
  }
  return;
}"
29876,"/** 
 * Creates a work object that can be submitted to a workqueue.
 * @param work Actual work submitted by Resource adapter.
 * @param coordinator <code>WorkCoordinator</code> object.
 */
OneWork(Work work,WorkCoordinator coordinator,WorkContextHandler contextHandler,ClassLoader tcc){
  this.work=work;
  this.coordinator=coordinator;
  this.contextHandler=contextHandler;
  this.tcc=tcc;
}","/** 
 * Creates a work object that can be submitted to a workqueue.
 * @param work Actual work submitted by Resource adapter.
 * @param coordinator <code>WorkCoordinator</code> object.
 */
OneWork(Work work,WorkCoordinator coordinator,WorkContextHandlerImpl contextHandler,ClassLoader tcc){
  this.work=work;
  this.coordinator=coordinator;
  this.contextHandler=contextHandler;
  this.tcc=tcc;
}"
29877,"/** 
 * Constructs a coordinator
 * @param work     A work object as submitted by the resource adapter
 * @param timeout  timeout for the work instance
 * @param ec       ExecutionContext object.
 * @param queue    WorkQueue of the threadpool, to which the workwill be submitted
 * @param listener WorkListener object from the resource adapter.
 */
public WorkCoordinator(javax.resource.spi.work.Work work,long timeout,ExecutionContext ec,WorkQueue queue,WorkListener listener,WorkManagementProbeProvider probeProvider,ConnectorRuntime runtime,String raName,WorkContextHandler handler){
  this.work=work;
  this.timeout=timeout;
  this.ec=ec;
  this.queue=queue;
  this.listener=listener;
synchronized (WorkCoordinator.class) {
    this.id=++seed;
  }
  this.runtime=runtime;
  this.lock=new Object();
  this.probeProvider=probeProvider;
  this.raName=raName;
  this.contextHandler=handler;
}","/** 
 * Constructs a coordinator
 * @param work     A work object as submitted by the resource adapter
 * @param timeout  timeout for the work instance
 * @param ec       ExecutionContext object.
 * @param queue    WorkQueue of the threadpool, to which the workwill be submitted
 * @param listener WorkListener object from the resource adapter.
 */
public WorkCoordinator(javax.resource.spi.work.Work work,long timeout,ExecutionContext ec,WorkQueue queue,WorkListener listener,WorkManagementProbeProvider probeProvider,ConnectorRuntime runtime,String raName,WorkContextHandlerImpl handler){
  this.work=work;
  this.timeout=timeout;
  this.ec=ec;
  this.queue=queue;
  this.listener=listener;
synchronized (WorkCoordinator.class) {
    this.id=++seed;
  }
  this.runtime=runtime;
  this.lock=new Object();
  this.probeProvider=probeProvider;
  this.raName=raName;
  this.contextHandler=handler;
}"
29878,"public static ExecutionContext getExecutionContext(ExecutionContext ec,Work work){
  if (ec == null) {
    return WorkContextHandler.getExecutionContext(work);
  }
  return ec;
}","public static ExecutionContext getExecutionContext(ExecutionContext ec,Work work){
  if (ec == null) {
    return WorkContextHandlerImpl.getExecutionContext(work);
  }
  return ec;
}"
29879,"/** 
 * @see java.io.Externalizable
 */
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  moduleName=in.readUTF();
  wm=WorkManagerFactory.retrieveWorkManager(moduleName);
  _logger=LogDomains.getLogger(WorkManagerProxy.class,LogDomains.RSR_LOGGER);
}","/** 
 * @see java.io.Externalizable
 */
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  moduleName=in.readUTF();
  wm=WorkManagerFactoryImpl.retrieveWorkManager(moduleName);
  _logger=LogDomains.getLogger(WorkManagerProxy.class,LogDomains.RSR_LOGGER);
}"
29880,"public void deleteInstanceFilesystem(AdminCommandContext context){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(noderef);
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,theNode.getNodeHost());
  StringBuilder output=new StringBuilder();
  nodeUtils.runAdminCommandOnNode(theNode,command,ctx,firstErrorMessage,humanCommand,output);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    return;
  }
  String msg=Strings.get(""String_Node_Str"",instanceName,theNode.getNodeHost());
  if (!terse) {
    msg=StringUtils.cat(NL,output.toString().trim(),msg);
  }
  report.setMessage(msg);
}","private void deleteInstanceFilesystem(AdminCommandContext ctx){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(noderef);
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,theNode.getNodeHost());
  StringBuilder output=new StringBuilder();
  nodeUtils.runAdminCommandOnNode(theNode,command,ctx,firstErrorMessage,humanCommand,output);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    return;
  }
  String msg=Strings.get(""String_Node_Str"",instanceName,theNode.getNodeHost());
  if (!terse) {
    msg=StringUtils.cat(NL,output.toString().trim(),msg);
  }
  report.setMessage(msg);
}"
29881,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  ctx=context;
  logger=context.logger;
  String msg=""String_Node_Str"";
  boolean fsfailure=false;
  boolean configfailure=false;
  instance=servers.getServer(instanceName);
  if (instance == null) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.warning(msg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  instanceHost=instance.getAdminHost();
  if (instance.isRunning()) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.warning(msg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  noderef=instance.getNodeRef();
  if (!StringUtils.ok(noderef)) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    fsfailure=true;
  }
 else {
    theNode=nodes.getNode(noderef);
    if (theNode == null) {
      msg=Strings.get(""String_Node_Str"",noderef);
      fsfailure=true;
    }
  }
  if (!fsfailure) {
    nodedir=theNode.getNodeDirAbsolute();
    deleteInstanceFilesystem(context);
    report=context.getActionReport();
    if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
      fsfailure=true;
    }
    msg=report.getMessage();
  }
  CommandInvocation ci=cr.getCommandInvocation(""String_Node_Str"",report);
  ParameterMap map=new ParameterMap();
  map.add(""String_Node_Str"",instanceName);
  ci.parameters(map);
  ci.execute();
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS && report.getActionExitCode() != ActionReport.ExitCode.WARNING) {
    configfailure=true;
    if (fsfailure) {
      msg=msg + NL + report.getMessage();
    }
 else {
      msg=report.getMessage();
    }
  }
  if (configfailure && fsfailure) {
    msg=msg + NL + NL+ Strings.get(""String_Node_Str"",instanceName,instanceHost);
  }
 else   if (configfailure && !fsfailure) {
    msg=msg + NL + NL+ Strings.get(""String_Node_Str"",instanceName,instanceHost);
  }
 else   if (!configfailure && fsfailure) {
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
  }
  if (configfailure) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
  }
}","@Override public void execute(AdminCommandContext ctx){
  ActionReport report=ctx.getActionReport();
  logger=ctx.logger;
  String msg=""String_Node_Str"";
  boolean fsfailure=false;
  boolean configfailure=false;
  instance=servers.getServer(instanceName);
  if (instance == null) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.warning(msg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  instanceHost=instance.getAdminHost();
  if (instance.isRunning()) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.warning(msg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  noderef=instance.getNodeRef();
  if (!StringUtils.ok(noderef)) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    fsfailure=true;
  }
 else {
    theNode=nodes.getNode(noderef);
    if (theNode == null) {
      msg=Strings.get(""String_Node_Str"",noderef);
      fsfailure=true;
    }
  }
  if (!fsfailure) {
    nodedir=theNode.getNodeDirAbsolute();
    deleteInstanceFilesystem(ctx);
    report=ctx.getActionReport();
    if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
      fsfailure=true;
    }
    msg=report.getMessage();
  }
  CommandInvocation ci=cr.getCommandInvocation(""String_Node_Str"",report);
  ParameterMap map=new ParameterMap();
  map.add(""String_Node_Str"",instanceName);
  ci.parameters(map);
  ci.execute();
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS && report.getActionExitCode() != ActionReport.ExitCode.WARNING) {
    configfailure=true;
    if (fsfailure) {
      msg=msg + NL + report.getMessage();
    }
 else {
      msg=report.getMessage();
    }
  }
  if (configfailure && fsfailure) {
    msg=msg + NL + NL+ Strings.get(""String_Node_Str"",instanceName,instanceHost);
  }
 else   if (configfailure && !fsfailure) {
    msg=msg + NL + NL+ Strings.get(""String_Node_Str"",instanceName,instanceHost);
  }
 else   if (!configfailure && fsfailure) {
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
  }
  if (configfailure) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
  }
}"
29882,"private String pollForLife(){
  int counter=0;
  while (++counter < 240) {
    if (instance.isRunning())     return null;
    try {
      Thread.sleep(500);
    }
 catch (    Exception e) {
    }
  }
  return Strings.get(""String_Node_Str"",instanceName);
}","private String pollForLife(Server instance){
  int counter=0;
  while (++counter < 240) {
    if (instance.isRunning())     return null;
    try {
      Thread.sleep(500);
    }
 catch (    Exception e) {
    }
  }
  return Strings.get(""String_Node_Str"",instanceName);
}"
29883,"@Override public void execute(AdminCommandContext context){
  logger=context.getLogger();
  this.ctx=context;
  ActionReport report=ctx.getActionReport();
  String msg=""String_Node_Str"";
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  if (!StringUtils.ok(instanceName)) {
    msg=Strings.get(""String_Node_Str"");
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  instance=servers.getServer(instanceName);
  if (instance == null) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  if (instance.isRunning()) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.info(msg);
    report.setMessage(msg);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    return;
  }
  noderef=instance.getNodeRef();
  if (!StringUtils.ok(noderef)) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  node=nodes.getNode(noderef);
  if (node != null) {
    nodedir=node.getNodeDirAbsolute();
    nodeHost=node.getNodeHost();
  }
 else {
    msg=Strings.get(""String_Node_Str"",noderef);
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  if (env.isDas()) {
    startInstance();
  }
 else {
    msg=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
    logger.severe(msg);
    report.setMessage(msg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
    String s=pollForLife();
    if (s != null) {
      report.setMessage(s);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    }
  }
}","@Override public void execute(AdminCommandContext ctx){
  logger=ctx.getLogger();
  ActionReport report=ctx.getActionReport();
  String msg=""String_Node_Str"";
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  if (!StringUtils.ok(instanceName)) {
    msg=Strings.get(""String_Node_Str"");
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  instance=servers.getServer(instanceName);
  if (instance == null) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  if (instance.isRunning()) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.info(msg);
    report.setMessage(msg);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    return;
  }
  noderef=instance.getNodeRef();
  if (!StringUtils.ok(noderef)) {
    msg=Strings.get(""String_Node_Str"",instanceName);
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  node=nodes.getNode(noderef);
  if (node != null) {
    nodedir=node.getNodeDirAbsolute();
    nodeHost=node.getNodeHost();
  }
 else {
    msg=Strings.get(""String_Node_Str"",noderef);
    logger.severe(msg);
    report.setMessage(msg);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  if (env.isDas()) {
    startInstance(ctx);
  }
 else {
    msg=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
    logger.severe(msg);
    report.setMessage(msg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
    String s=pollForLife(instance);
    if (s != null) {
      report.setMessage(s);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    }
  }
}"
29884,"private void startInstance(){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(noderef);
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(sync);
  if (debug) {
    command.add(""String_Node_Str"");
  }
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,nodeHost);
  StringBuilder output=new StringBuilder();
  boolean waitForReaderThreads=true;
  if (OS.isWindows()) {
    waitForReaderThreads=false;
  }
  nodeUtils.runAdminCommandOnNode(node,command,ctx,firstErrorMessage,humanCommand,output,waitForReaderThreads);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
    String msg=Strings.get(""String_Node_Str"",instanceName,nodeHost);
    if (!terse) {
      msg=StringUtils.cat(NL,output.toString().trim(),msg);
    }
    report.setMessage(msg);
  }
}","private void startInstance(AdminCommandContext ctx){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(noderef);
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(sync);
  if (debug) {
    command.add(""String_Node_Str"");
  }
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,nodeHost);
  StringBuilder output=new StringBuilder();
  boolean waitForReaderThreads=true;
  if (OS.isWindows()) {
    waitForReaderThreads=false;
  }
  nodeUtils.runAdminCommandOnNode(node,command,ctx,firstErrorMessage,humanCommand,output,waitForReaderThreads);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
    String msg=Strings.get(""String_Node_Str"",instanceName,nodeHost);
    if (!terse) {
      msg=StringUtils.cat(NL,output.toString().trim(),msg);
    }
    report.setMessage(msg);
  }
}"
29885,"public void deleteInstanceFilesystem(AdminCommandContext context){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  String dasHost=dasServer.getAdminHost();
  String dasPort=Integer.toString(dasServer.getAdminPort());
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(noderef);
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,theNode.getNodeHost());
  StringBuilder output=new StringBuilder();
  nodeUtils.runAdminCommandOnNode(theNode,command,ctx,firstErrorMessage,humanCommand,output);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    return;
  }
  String msg=Strings.get(""String_Node_Str"",instanceName,theNode.getNodeHost());
  if (!terse) {
    msg=StringUtils.cat(NL,output.toString().trim(),msg);
  }
  report.setMessage(msg);
}","public void deleteInstanceFilesystem(AdminCommandContext context){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(noderef);
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,theNode.getNodeHost());
  StringBuilder output=new StringBuilder();
  nodeUtils.runAdminCommandOnNode(theNode,command,ctx,firstErrorMessage,humanCommand,output);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    return;
  }
  String msg=Strings.get(""String_Node_Str"",instanceName,theNode.getNodeHost());
  if (!terse) {
    msg=StringUtils.cat(NL,output.toString().trim(),msg);
  }
  report.setMessage(msg);
}"
29886,"private void startInstance(){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  String dasHost=dasServer.getAdminHost();
  String dasPort=Integer.toString(dasServer.getAdminPort());
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(noderef);
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(sync);
  if (debug) {
    command.add(""String_Node_Str"");
  }
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,nodeHost);
  StringBuilder output=new StringBuilder();
  boolean waitForReaderThreads=true;
  if (OS.isWindows()) {
    waitForReaderThreads=false;
  }
  nodeUtils.runAdminCommandOnNode(node,command,ctx,firstErrorMessage,humanCommand,output,waitForReaderThreads);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
    String msg=Strings.get(""String_Node_Str"",instanceName,nodeHost);
    if (!terse) {
      msg=StringUtils.cat(NL,output.toString().trim(),msg);
    }
    report.setMessage(msg);
  }
}","private void startInstance(){
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(noderef);
  if (nodedir != null) {
    command.add(""String_Node_Str"");
    command.add(nodedir);
  }
  command.add(""String_Node_Str"");
  command.add(sync);
  if (debug) {
    command.add(""String_Node_Str"");
  }
  command.add(instanceName);
  humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,noderef,nodeHost);
  StringBuilder output=new StringBuilder();
  boolean waitForReaderThreads=true;
  if (OS.isWindows()) {
    waitForReaderThreads=false;
  }
  nodeUtils.runAdminCommandOnNode(node,command,ctx,firstErrorMessage,humanCommand,output,waitForReaderThreads);
  ActionReport report=ctx.getActionReport();
  if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
    String msg=Strings.get(""String_Node_Str"",instanceName,nodeHost);
    if (!terse) {
      msg=StringUtils.cat(NL,output.toString().trim(),msg);
    }
    report.setMessage(msg);
  }
}"
29887,"/** 
 * Adds a listener of the given class type to this ServletContext.
 */
@Override public void addListener(Class<? extends EventListener> listenerClass){
  try {
    addListener(createListenerInstance(listenerClass));
  }
 catch (  Throwable t) {
    throw new IllegalArgumentException(t);
  }
}","/** 
 * Adds a listener of the given class type to this ServletContext.
 */
@Override public void addListener(Class<? extends EventListener> listenerClass){
  EventListener listener=null;
  try {
    listener=createListenerInstance(listenerClass);
  }
 catch (  Throwable t) {
    throw new IllegalArgumentException(t);
  }
  addListener(listener);
}"
29888,"/** 
 * Given a byte[] containing session data, return a session object
 * @param state The byte[] with the session attribute data
 * @return A newly created object for the given session attribute data
 */
protected Object getAttributeValue(byte[] state) throws IOException, ClassNotFoundException {
  Object attributeValue=null;
  BufferedInputStream bis=null;
  ByteArrayInputStream bais=null;
  Loader loader=null;
  ClassLoader classLoader=null;
  ObjectInputStream ois=null;
  Container container=manager.getContainer();
  try {
    bais=new ByteArrayInputStream(state);
    bis=new BufferedInputStream(bais);
    if (container != null) {
      loader=container.getLoader();
    }
    if (loader != null) {
      classLoader=loader.getClassLoader();
    }
    if (classLoader != null) {
      try {
        ois=ioUtils.createObjectInputStream(bis,true,classLoader);
      }
 catch (      Exception ex) {
      }
    }
    if (ois == null) {
      ois=new ObjectInputStream(bis);
    }
    if (ois != null) {
      try {
        attributeValue=ois.readObject();
      }
  finally {
        if (ois != null) {
          try {
            ois.close();
            bis=null;
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",e);
    }
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
  return attributeValue;
}","/** 
 * Given a byte[] containing session data, return a session object
 * @param state The byte[] with the session attribute data
 * @return A newly created object for the given session attribute data
 */
protected Object getAttributeValue(byte[] state) throws IOException, ClassNotFoundException {
  Object attributeValue=null;
  BufferedInputStream bis=null;
  ByteArrayInputStream bais=null;
  Loader loader=null;
  ClassLoader classLoader=null;
  ObjectInputStream ois=null;
  Container container=manager.getContainer();
  try {
    bais=new ByteArrayInputStream(state);
    bis=new BufferedInputStream(bais);
    if (container != null) {
      loader=container.getLoader();
    }
    if (loader != null) {
      classLoader=loader.getClassLoader();
    }
    if (classLoader != null) {
      try {
        ois=ioUtils.createObjectInputStream(bis,true,classLoader);
      }
 catch (      Exception ex) {
      }
    }
    if (ois == null) {
      ois=new ObjectInputStream(bis);
    }
    if (ois != null) {
      try {
        attributeValue=ois.readObject();
      }
  finally {
        try {
          ois.close();
          bis=null;
        }
 catch (        IOException e) {
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",e);
    }
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
  return attributeValue;
}"
29889,"public Session getSession(CompositeMetadata metadata) throws IOException {
  if (metadata == null || metadata.getState() == null) {
    return null;
  }
  byte[] state=metadata.getState();
  Session _session=null;
  BufferedInputStream bis=null;
  ByteArrayInputStream bais=null;
  Loader loader=null;
  ClassLoader classLoader=null;
  ObjectInputStream ois=null;
  Container container=manager.getContainer();
  java.security.Principal pal=null;
  String ssoId=null;
  long version=0L;
  try {
    bais=new ByteArrayInputStream(state);
    bis=new BufferedInputStream(bais);
    ssoId=metadata.getStringExtraParam();
    version=metadata.getVersion();
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"" + state.length);
    }
    if (container != null) {
      loader=container.getLoader();
    }
    if (loader != null) {
      classLoader=loader.getClassLoader();
    }
    if (classLoader != null) {
      try {
        ois=ioUtils.createObjectInputStream(bis,true,classLoader);
      }
 catch (      Exception ex) {
      }
    }
    if (ois == null) {
      ois=new ObjectInputStream(bis);
    }
    if (ois != null) {
      try {
        _session=readSession(manager,ois);
      }
  finally {
        if (ois != null) {
          try {
            ois.close();
            bis=null;
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    IOException ex1=(IOException)new IOException(""String_Node_Str"" + e.getMessage()).initCause(e);
    throw ex1;
  }
catch (  IOException e) {
    throw e;
  }
  String username=((HASession)_session).getUserName();
  if ((username != null) && (!username.equals(""String_Node_Str"")) && _session.getPrincipal() == null) {
    if (_debug > 0) {
      debug(""String_Node_Str"" + username);
    }
    pal=((com.sun.web.security.RealmAdapter)container.getRealm()).createFailOveredPrincipal(username);
    if (_debug > 0) {
      debug(""String_Node_Str"" + pal);
    }
    if (pal != null) {
      _session.setPrincipal(pal);
      if (_debug > 0) {
        debug(""String_Node_Str"" + pal + ""String_Node_Str""+ _session);
      }
    }
  }
  _session.setNew(false);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ssoId);
  }
  ((HASession)_session).setVersion(version);
  ((HASession)_session).setDirty(false);
  ((ModifiedAttributeHASession)_session).clearAttributeStates();
  byte[] entriesState=metadata.getState();
  Collection entries=null;
  if (entriesState != null) {
    entries=this.deserializeStatesCollection(entriesState);
    loadAttributes((ModifiedAttributeHASession)_session,entries);
  }
  loadAttributes((ModifiedAttributeHASession)_session,metadata.getEntries());
  return _session;
}","public Session getSession(CompositeMetadata metadata) throws IOException {
  if (metadata == null || metadata.getState() == null) {
    return null;
  }
  byte[] state=metadata.getState();
  Session _session=null;
  BufferedInputStream bis=null;
  ByteArrayInputStream bais=null;
  Loader loader=null;
  ClassLoader classLoader=null;
  ObjectInputStream ois=null;
  Container container=manager.getContainer();
  java.security.Principal pal=null;
  String ssoId=null;
  long version=0L;
  try {
    bais=new ByteArrayInputStream(state);
    bis=new BufferedInputStream(bais);
    ssoId=metadata.getStringExtraParam();
    version=metadata.getVersion();
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"" + state.length);
    }
    if (container != null) {
      loader=container.getLoader();
    }
    if (loader != null) {
      classLoader=loader.getClassLoader();
    }
    if (classLoader != null) {
      try {
        ois=ioUtils.createObjectInputStream(bis,true,classLoader);
      }
 catch (      Exception ex) {
      }
    }
    if (ois == null) {
      ois=new ObjectInputStream(bis);
    }
    if (ois != null) {
      try {
        _session=readSession(manager,ois);
      }
  finally {
        try {
          ois.close();
          bis=null;
        }
 catch (        IOException e) {
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    IOException ex1=(IOException)new IOException(""String_Node_Str"" + e.getMessage()).initCause(e);
    throw ex1;
  }
catch (  IOException e) {
    throw e;
  }
  String username=((HASession)_session).getUserName();
  if ((username != null) && (!username.equals(""String_Node_Str"")) && _session.getPrincipal() == null) {
    if (_debug > 0) {
      debug(""String_Node_Str"" + username);
    }
    pal=((com.sun.web.security.RealmAdapter)container.getRealm()).createFailOveredPrincipal(username);
    if (_debug > 0) {
      debug(""String_Node_Str"" + pal);
    }
    if (pal != null) {
      _session.setPrincipal(pal);
      if (_debug > 0) {
        debug(""String_Node_Str"" + pal + ""String_Node_Str""+ _session);
      }
    }
  }
  _session.setNew(false);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ssoId);
  }
  ((HASession)_session).setVersion(version);
  ((HASession)_session).setDirty(false);
  ((ModifiedAttributeHASession)_session).clearAttributeStates();
  byte[] entriesState=metadata.getState();
  Collection entries=null;
  if (entriesState != null) {
    entries=this.deserializeStatesCollection(entriesState);
    loadAttributes((ModifiedAttributeHASession)_session,entries);
  }
  loadAttributes((ModifiedAttributeHASession)_session,metadata.getEntries());
  return _session;
}"
29890,"/** 
 * Given a byte[] containing session data, return a session object
 * @param state The byte[] with the session attribute data
 * @return A newly created object for the given session attribute data
 */
protected Object getAttributeValueCollection(byte[] state) throws IOException, ClassNotFoundException {
  Collection attributeValueList=new ArrayList();
  Object attributeValue=null;
  BufferedInputStream bis=null;
  ByteArrayInputStream bais=null;
  Loader loader=null;
  ClassLoader classLoader=null;
  ObjectInputStream ois=null;
  Container container=manager.getContainer();
  try {
    bais=new ByteArrayInputStream(state);
    bis=new BufferedInputStream(bais);
    if (container != null) {
      loader=container.getLoader();
    }
    if (loader != null) {
      classLoader=loader.getClassLoader();
    }
    if (classLoader != null) {
      try {
        ois=ioUtils.createObjectInputStream(bis,true,classLoader);
      }
 catch (      Exception ex) {
      }
    }
    if (ois == null) {
      ois=new ObjectInputStream(bis);
    }
    if (ois != null) {
      try {
        Object whatIsIt=ois.readObject();
        int entriesSize=0;
        if (whatIsIt instanceof Integer) {
          entriesSize=((Integer)whatIsIt).intValue();
        }
        for (int i=0; i < entriesSize; i++) {
          Object nextAttributeValue=ois.readObject();
          attributeValueList.add(nextAttributeValue);
        }
      }
  finally {
        if (ois != null) {
          try {
            ois.close();
            bis=null;
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",e);
    }
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
  return attributeValueList;
}","/** 
 * Given a byte[] containing session data, return a session object
 * @param state The byte[] with the session attribute data
 * @return A newly created object for the given session attribute data
 */
protected Object getAttributeValueCollection(byte[] state) throws IOException, ClassNotFoundException {
  Collection attributeValueList=new ArrayList();
  Object attributeValue=null;
  BufferedInputStream bis=null;
  ByteArrayInputStream bais=null;
  Loader loader=null;
  ClassLoader classLoader=null;
  ObjectInputStream ois=null;
  Container container=manager.getContainer();
  try {
    bais=new ByteArrayInputStream(state);
    bis=new BufferedInputStream(bais);
    if (container != null) {
      loader=container.getLoader();
    }
    if (loader != null) {
      classLoader=loader.getClassLoader();
    }
    if (classLoader != null) {
      try {
        ois=ioUtils.createObjectInputStream(bis,true,classLoader);
      }
 catch (      Exception ex) {
      }
    }
    if (ois == null) {
      ois=new ObjectInputStream(bis);
    }
    if (ois != null) {
      try {
        Object whatIsIt=ois.readObject();
        int entriesSize=0;
        if (whatIsIt instanceof Integer) {
          entriesSize=((Integer)whatIsIt).intValue();
        }
        for (int i=0; i < entriesSize; i++) {
          Object nextAttributeValue=ois.readObject();
          attributeValueList.add(nextAttributeValue);
        }
      }
  finally {
        try {
          ois.close();
          bis=null;
        }
 catch (        IOException e) {
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",e);
    }
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
  return attributeValueList;
}"
29891,"public void postRequestDispatcherProcess(ServletRequest request,ServletResponse response){
  Context context=(Context)this.getContainer();
  Session sess=this.getSession(request);
  if (sess != null) {
    doValveSave(sess);
  }
  return;
}","public void postRequestDispatcherProcess(ServletRequest request,ServletResponse response){
  Session sess=this.getSession(request);
  if (sess != null) {
    doValveSave(sess);
  }
  return;
}"
29892,"@Override public Object run(ConfigBeanProxy... params) throws PropertyVetoException, TransactionFailure {
  Cluster wCluster=(Cluster)params[0];
  ServerPoolConfig wServerPoolConfig=(ServerPoolConfig)params[1];
  VirtualMachineConfig vmConfig=config.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
  if (vmConfig != null) {
    wCluster.getExtensions().remove(vmConfig);
  }
 else {
    throw new TransactionFailure(""String_Node_Str"");
  }
  return null;
}","@Override public Object run(ConfigBeanProxy... params) throws PropertyVetoException, TransactionFailure {
  Cluster wCluster=(Cluster)params[0];
  VirtualMachineConfig vmConfig=config.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
  if (vmConfig != null) {
    wCluster.getExtensions().remove(vmConfig);
  }
 else {
    throw new TransactionFailure(""String_Node_Str"");
  }
  return null;
}"
29893,"public synchronized void remove(final VirtualMachine vm){
  try {
    ConfigSupport.apply(new ConfigCode(){
      @Override public Object run(      ConfigBeanProxy... params) throws PropertyVetoException, TransactionFailure {
        Cluster wCluster=(Cluster)params[0];
        ServerPoolConfig wServerPoolConfig=(ServerPoolConfig)params[1];
        VirtualMachineConfig vmConfig=config.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
        if (vmConfig != null) {
          wCluster.getExtensions().remove(vmConfig);
        }
 else {
          throw new TransactionFailure(""String_Node_Str"");
        }
        return null;
      }
    }
,config,vm.getServerPool().getConfig());
  }
 catch (  TransactionFailure transactionFailure) {
    throw new RuntimeException(transactionFailure);
  }
  vms.remove(vm);
}","public synchronized void remove(final VirtualMachine vm){
  try {
    ConfigSupport.apply(new ConfigCode(){
      @Override public Object run(      ConfigBeanProxy... params) throws PropertyVetoException, TransactionFailure {
        Cluster wCluster=(Cluster)params[0];
        VirtualMachineConfig vmConfig=config.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
        if (vmConfig != null) {
          wCluster.getExtensions().remove(vmConfig);
        }
 else {
          throw new TransactionFailure(""String_Node_Str"");
        }
        return null;
      }
    }
,config,vm.getServerPool().getConfig());
  }
 catch (  TransactionFailure transactionFailure) {
    throw new RuntimeException(transactionFailure);
  }
  vms.remove(vm);
}"
29894,"protected synchronized List<StorageVol> prepare(final TemplateInstance templateInstance,final String name,final VirtualCluster cluster) throws VirtException, IOException {
}","protected synchronized List<StorageVol> prepare(final TemplateInstance templateInstance,final String name,final VirtualCluster cluster) throws VirtException, IOException {
  final Template template=templateInstance.getConfig();
  execute(new MachineOperations<Object>(){
    @Override public Object run(    FileOperations fileOperations) throws IOException {
      fileOperations.mkdir(config.getDisksLocation());
      fileOperations.delete(config.getDisksLocation() + ""String_Node_Str"" + name+ ""String_Node_Str"");
      fileOperations.delete(config.getDisksLocation() + ""String_Node_Str"" + name+ ""String_Node_Str"");
      return null;
    }
  }
);
  final File sourceFile=templateInstance.getFileByExtension(""String_Node_Str"");
  final StoragePool pool=(getStoragePools().get(""String_Node_Str"") != null ? getStoragePools().get(""String_Node_Str"") : addStoragePool(""String_Node_Str"",136112211968L));
  List<StorageVol> volumes=new ArrayList<StorageVol>();
  Future<StorageVol> diskFuture=null;
  final String diskLocation=config.getDisksLocation();
  final Machine target=this;
  try {
    diskFuture=habitat.getComponent(ExecutorService.class).submit(new Callable<StorageVol>(){
      @Override public StorageVol call() throws Exception {
        VMTemplate vmTemplate=getVMTemplateFor(template);
        vmTemplate.copyTo(target,diskLocation);
        for (        StorageVol volume : pool.volumes()) {
          RuntimeContext.logger.info(""String_Node_Str"" + volume.getName());
        }
        StorageVol volume=pool.byName(name);
        if (volume != null) {
          RuntimeContext.logger.warning(""String_Node_Str"" + name + ""String_Node_Str"");
          volume.delete();
        }
        volume=pool.allocate(name,vmTemplate.getSize());
        execute(new MachineOperations<Object>(){
          @Override public Object run(          FileOperations fileOperations) throws IOException {
            fileOperations.delete(diskLocation + ""String_Node_Str"" + name+ ""String_Node_Str"");
            fileOperations.mv(diskLocation + ""String_Node_Str"" + sourceFile.getName(),diskLocation + ""String_Node_Str"" + name+ ""String_Node_Str"");
            return null;
          }
        }
);
        return volume;
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    for (    StorageVol vol : volumes) {
      try {
        vol.delete();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    throw new VirtException(e);
  }
  try {
    volumes.add(0,diskFuture.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    try {
      List<StorageVol> copy=new ArrayList<StorageVol>();
      for (      StorageVol volume : pool.volumes()) {
        copy.add(volume);
      }
      for (      StorageVol volume : copy) {
        volume.delete();
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    throw new VirtException(e);
  }
  return volumes;
}"
29895,"@Override public void run(){
  try {
    localTemplate.copyTo(AbstractMachine.this,getConfig().getTemplatesLocation());
  }
 catch (  Exception e) {
    RuntimeContext.logger.log(Level.SEVERE,e.getMessage(),e);
  }
  RemoteTemplate remoteTemplate=new RemoteTemplate(AbstractMachine.this,template);
  installedTemplates.put(template.getConfig().getName(),remoteTemplate);
  TemplateCaching.register(remoteTemplate);
}","@Override public Object run(FileOperations fileOperations) throws IOException {
  fileOperations.delete(diskLocation + ""String_Node_Str"" + name+ ""String_Node_Str"");
  fileOperations.mv(diskLocation + ""String_Node_Str"" + sourceFile.getName(),diskLocation + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return null;
}"
29896,"@Override public PhasedFuture<AllocationPhase,VirtualMachine> allocate(final TemplateInstance template,final VirtualCluster cluster,final EventSource<AllocationPhase> source) throws VirtException {
  int park=size();
  if (park == 0) {
    throw new VirtException(""String_Node_Str"");
  }
  Iterator<? extends Machine> machines=machines().iterator();
  Machine machine;
  int machineTried=0;
  do {
    if (!machines.hasNext()) {
      machines=machines().iterator();
    }
    machine=machines.next();
    machineTried++;
    if (!machine.isUp()) {
      RuntimeContext.logger.info(""String_Node_Str"" + machine.getName());
      try {
        Habitat habitat=Dom.unwrap(config).getHabitat();
        habitat.getComponent(OsInterface.class).resume(machine);
      }
 catch (      IOException e) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getName(),e);
      }
      int tries=0;
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        tries++;
      }
 while (!machine.isUp() && tries < 5);
      if (!machine.isUp()) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getConfig().getDisksLocation());
      }
    }
  }
 while (!machine.isUp() || machineTried > park);
  if (!machine.isUp()) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"");
    throw new VirtException(""String_Node_Str"");
  }
  final Machine targetMachine=machine;
  allocationCount.incrementAndGet();
  final String suffix=allocationCount.toString();
  PhasedFuture<AllocationPhase,VirtualMachine> vm=null;
  try {
    vm=targetMachine.create(template,cluster,source);
  }
 catch (  IOException e) {
    throw new VirtException(e);
  }
  RuntimeContext.logger.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ cluster.getConfig().getName());
  return vm;
}","@Override public PhasedFuture<AllocationPhase,VirtualMachine> allocate(final TemplateInstance template,final VirtualCluster cluster,final EventSource<AllocationPhase> source) throws VirtException {
  int park=size();
  if (park == 0) {
    throw new VirtException(""String_Node_Str"");
  }
  Iterator<? extends Machine> machines=machines().iterator();
  Machine machine;
  int machineTried=0;
  do {
    if (!machines.hasNext()) {
      machines=machines().iterator();
    }
    machine=machines.next();
    machineTried++;
    if (!machine.isUp()) {
      RuntimeContext.logger.info(""String_Node_Str"" + machine.getName());
      try {
        Habitat habitat=Dom.unwrap(config).getHabitat();
        habitat.getComponent(OsInterface.class).resume(machine);
      }
 catch (      IOException e) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getName(),e);
      }
      int tries=0;
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        tries++;
      }
 while (!machine.isUp() && tries < 5);
      if (!machine.isUp()) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getConfig().getDisksLocation());
      }
    }
  }
 while (!machine.isUp() || machineTried > park);
  if (!machine.isUp()) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"");
    throw new VirtException(""String_Node_Str"");
  }
  final Machine targetMachine=machine;
  allocationCount.incrementAndGet();
  PhasedFuture<AllocationPhase,VirtualMachine> vm=null;
  try {
    vm=targetMachine.create(template,cluster,source);
  }
 catch (  IOException e) {
    throw new VirtException(e);
  }
  RuntimeContext.logger.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ cluster.getConfig().getName());
  return vm;
}"
29897,"@Override public Collection<? extends VirtualMachine> getVMs() throws VirtException {
  try {
    VirtualBoxManager mgr=ConnectionManager.connection(getIpAddress());
    List<IMachine> machs=mgr.getVBox().getMachines();
    for (    IMachine m : machs) {
      try {
        String domainName=m.getName();
        String type=m.getOSTypeId();
        if (!domains.containsKey(domainName)) {
          for (          Cluster cluster : domain.getClusters().getCluster()) {
            for (            VirtualMachineConfig vmc : cluster.getExtensionsByType(VirtualMachineConfig.class)) {
              if (vmc.getName().equals(domainName)) {
                VBoxVirtualMachine gfVM=new VBoxVirtualMachine(vmc,vmc.getTemplate().getUser(),this,domainName);
                domains.put(domainName,gfVM);
              }
            }
          }
        }
      }
 catch (      Exception e) {
      }
    }
    mgr.disconnect();
    mgr.cleanup();
  }
 catch (  Exception e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new VirtException(e);
  }
  return domains.values();
}","@Override public Collection<? extends VirtualMachine> getVMs() throws VirtException {
  try {
    VirtualBoxManager mgr=ConnectionManager.connection(getIpAddress());
    List<IMachine> machs=mgr.getVBox().getMachines();
    for (    IMachine m : machs) {
      try {
        String domainName=m.getName();
        if (!domains.containsKey(domainName)) {
          for (          Cluster cluster : domain.getClusters().getCluster()) {
            for (            VirtualMachineConfig vmc : cluster.getExtensionsByType(VirtualMachineConfig.class)) {
              if (vmc.getName().equals(domainName)) {
                VBoxVirtualMachine gfVM=new VBoxVirtualMachine(vmc,vmc.getTemplate().getUser(),this,domainName);
                domains.put(domainName,gfVM);
              }
            }
          }
        }
      }
 catch (      Exception e) {
      }
    }
    mgr.disconnect();
    mgr.cleanup();
  }
 catch (  Exception e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new VirtException(e);
  }
  return domains.values();
}"
29898,"private void createVboxVDIMachine(final Template template,final VirtualCluster cluster,String diskLocation,String name) throws VirtException {
  VirtualBoxManager connect=null;
  try {
    connect=ConnectionManager.connection(getIpAddress());
    IVirtualBox vbox=connect.getVBox();
    String machineName=name;
    IMachine iap=vbox.createMachine(null,machineName,""String_Node_Str"",null,true);
    List<IStorageController> lsc=iap.getStorageControllers();
    for (    IStorageController aaa : lsc) {
      System.out.println(""String_Node_Str"" + aaa.getName());
    }
    iap.getUSBController().setEnabled(false);
    iap.setMemorySize(512L);
    String path=diskLocation + ""String_Node_Str"" + name+ ""String_Node_Str"";
    IMedium newm=vbox.createHardDisk(""String_Node_Str"",path);
    File templateDirLocation=new File(virtualizations.getTemplatesLocation(),template.getName());
    FilenameFilter select=new VDIFileFilter();
    File[] contents=templateDirLocation.listFiles(select);
    if (contents == null || contents.length == 0) {
      throw new VirtException(""String_Node_Str"" + templateDirLocation.getAbsolutePath());
    }
    if (contents.length != 1) {
      throw new VirtException(""String_Node_Str"" + templateDirLocation.getAbsolutePath());
    }
    File VDITemplate=contents[0];
    IMedium im=vbox.openMedium(VDITemplate.getAbsolutePath(),DeviceType.HardDisk,AccessMode.ReadWrite,true);
    IProgress prog=im.cloneTo(newm,im.getVariant(),null);
    prog.waitForCompletion(-1);
    IStorageController isctrl=iap.addStorageController(""String_Node_Str"",StorageBus.SATA);
    INetworkAdapter inadap=iap.getNetworkAdapter(0L);
    inadap.setEnabled(Boolean.FALSE);
    inadap.setAdapterType(NetworkAdapterType.I82540EM);
    inadap.setAttachmentType(NetworkAttachmentType.Bridged);
    String goodPortName=null;
    StringTokenizer portNames=new StringTokenizer(serverPool.getConfig().getPortName(),""String_Node_Str"");
    while (portNames.hasMoreTokens()) {
      if (goodPortName != null) {
        break;
      }
      String portName=portNames.nextToken();
      List<IHostNetworkInterface> lll=vbox.getHost().getNetworkInterfaces();
      for (      IHostNetworkInterface imnet : lll) {
        System.out.println(""String_Node_Str"" + imnet.getName());
        if (imnet.getName().equals(portName)) {
          goodPortName=portName;
          break;
        }
      }
    }
    if (goodPortName == null) {
      throw new VirtException(""String_Node_Str"" + serverPool.getConfig().getPortName());
    }
    inadap.setBridgedInterface(goodPortName);
    inadap.setEnabled(Boolean.TRUE);
    IStorageController dvdctrl=iap.addStorageController(""String_Node_Str"",StorageBus.IDE);
    File ISOFile=createISOCustomization(template,cluster,name,diskLocation);
    IMedium cdrommedium=vbox.openMedium(ISOFile.getAbsolutePath(),DeviceType.DVD,AccessMode.ReadOnly,true);
    iap.saveSettings();
    vbox.registerMachine(iap);
    IMachine newMachine=vbox.findMachine(machineName);
    ISession session=connect.openMachineSession(newMachine);
    session.unlockMachine();
    try {
      newMachine.lockMachine(session,LockType.Write);
      IMedium im2=vbox.openMedium(path,DeviceType.HardDisk,AccessMode.ReadWrite,true);
      session.getMachine().attachDevice(""String_Node_Str"",0,0,DeviceType.HardDisk,im2);
      session.getMachine().attachDevice(""String_Node_Str"",0,0,DeviceType.DVD,cdrommedium);
      session.getMachine().saveSettings();
    }
  finally {
      session.unlockMachine();
    }
  }
 catch (  Exception e) {
    throw new VirtException(e);
  }
 finally {
    if (connect != null) {
      connect.disconnect();
      connect.cleanup();
    }
  }
}","private void createVboxVDIMachine(final Template template,final VirtualCluster cluster,String diskLocation,String name) throws VirtException {
  VirtualBoxManager connect=null;
  try {
    connect=ConnectionManager.connection(getIpAddress());
    IVirtualBox vbox=connect.getVBox();
    String machineName=name;
    IMachine iap=vbox.createMachine(null,machineName,""String_Node_Str"",null,true);
    List<IStorageController> lsc=iap.getStorageControllers();
    for (    IStorageController aaa : lsc) {
      System.out.println(""String_Node_Str"" + aaa.getName());
    }
    iap.getUSBController().setEnabled(false);
    iap.setMemorySize(512L);
    String path=diskLocation + ""String_Node_Str"" + name+ ""String_Node_Str"";
    IMedium newm=vbox.createHardDisk(""String_Node_Str"",path);
    File templateDirLocation=new File(virtualizations.getTemplatesLocation(),template.getName());
    FilenameFilter select=new VDIFileFilter();
    File[] contents=templateDirLocation.listFiles(select);
    if (contents == null || contents.length == 0) {
      throw new VirtException(""String_Node_Str"" + templateDirLocation.getAbsolutePath());
    }
    if (contents.length != 1) {
      throw new VirtException(""String_Node_Str"" + templateDirLocation.getAbsolutePath());
    }
    File VDITemplate=contents[0];
    IMedium im=vbox.openMedium(VDITemplate.getAbsolutePath(),DeviceType.HardDisk,AccessMode.ReadWrite,true);
    IProgress prog=im.cloneTo(newm,im.getVariant(),null);
    prog.waitForCompletion(-1);
    INetworkAdapter inadap=iap.getNetworkAdapter(0L);
    inadap.setEnabled(Boolean.FALSE);
    inadap.setAdapterType(NetworkAdapterType.I82540EM);
    inadap.setAttachmentType(NetworkAttachmentType.Bridged);
    String goodPortName=null;
    StringTokenizer portNames=new StringTokenizer(serverPool.getConfig().getPortName(),""String_Node_Str"");
    while (portNames.hasMoreTokens()) {
      if (goodPortName != null) {
        break;
      }
      String portName=portNames.nextToken();
      List<IHostNetworkInterface> lll=vbox.getHost().getNetworkInterfaces();
      for (      IHostNetworkInterface imnet : lll) {
        System.out.println(""String_Node_Str"" + imnet.getName());
        if (imnet.getName().equals(portName)) {
          goodPortName=portName;
          break;
        }
      }
    }
    if (goodPortName == null) {
      throw new VirtException(""String_Node_Str"" + serverPool.getConfig().getPortName());
    }
    inadap.setBridgedInterface(goodPortName);
    inadap.setEnabled(Boolean.TRUE);
    File ISOFile=createISOCustomization(template,cluster,name,diskLocation);
    IMedium cdrommedium=vbox.openMedium(ISOFile.getAbsolutePath(),DeviceType.DVD,AccessMode.ReadOnly,true);
    iap.saveSettings();
    vbox.registerMachine(iap);
    IMachine newMachine=vbox.findMachine(machineName);
    ISession session=connect.openMachineSession(newMachine);
    session.unlockMachine();
    try {
      newMachine.lockMachine(session,LockType.Write);
      IMedium im2=vbox.openMedium(path,DeviceType.HardDisk,AccessMode.ReadWrite,true);
      session.getMachine().attachDevice(""String_Node_Str"",0,0,DeviceType.HardDisk,im2);
      session.getMachine().attachDevice(""String_Node_Str"",0,0,DeviceType.DVD,cdrommedium);
      session.getMachine().saveSettings();
    }
  finally {
      session.unlockMachine();
    }
  }
 catch (  Exception e) {
    throw new VirtException(e);
  }
 finally {
    if (connect != null) {
      connect.disconnect();
      connect.cleanup();
    }
  }
}"
29899,"@Override public boolean isUp(){
  if (State.READY.equals(getState()))   return true;
  if (ipAddress == null)   return false;
  try {
    ping();
  }
 catch (  Exception e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + config.getName() + ""String_Node_Str""+ e.getMessage());
    RuntimeContext.logger.log(Level.FINE,""String_Node_Str"" + config.getName(),e);
    return false;
  }
  try {
    connection();
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + config.getName() + ""String_Node_Str""+ serverPool.getConfig().getUser().getName(),e);
    return false;
  }
  return true;
}","@Override public boolean isUp(){
  if (State.READY.equals(getState()))   return true;
  if (getIpAddress() == null)   return false;
  try {
    ping();
  }
 catch (  Exception e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + config.getName() + ""String_Node_Str""+ e.getMessage());
    RuntimeContext.logger.log(Level.FINE,""String_Node_Str"" + config.getName(),e);
    return false;
  }
  try {
    connection();
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + config.getName() + ""String_Node_Str""+ serverPool.getConfig().getUser().getName(),e);
    return false;
  }
  return true;
}"
29900,"/** 
 * Used to parse log line based on starting sequence, ending sequence and delimiter.
 * @param line
 * @return
 */
private ServiceLogRecord parse(String line){
  ServiceLogRecord record=new ServiceLogRecord(level,""String_Node_Str"");
  if (startSequence != null || !startSequence.trim().equals(""String_Node_Str""))   line=line.substring(startSequence.length());
  if (endSequence != null || !endSequence.trim().equals(""String_Node_Str""))   line=line.substring(0,line.indexOf(endSequence));
  StringTokenizer tokenizer=new StringTokenizer(line,delimiter);
  for (int i=0; tokenizer.hasMoreTokens(); i++) {
    String nextToken=tokenizer.nextToken();
    set(parameters[i],nextToken,record);
  }
  return record;
}","/** 
 * Used to parse log line based on starting sequence, ending sequence and delimiter.
 * @param line
 * @return
 */
private ServiceLogRecord parse(String line){
  ServiceLogRecord record=new ServiceLogRecord(level,""String_Node_Str"");
  if (startSequence != null && !startSequence.trim().equals(""String_Node_Str""))   line=line.substring(startSequence.length());
  if (endSequence != null && !endSequence.trim().equals(""String_Node_Str""))   line=line.substring(0,line.indexOf(endSequence));
  StringTokenizer tokenizer=new StringTokenizer(line,delimiter);
  for (int i=0; tokenizer.hasMoreTokens(); i++) {
    String nextToken=tokenizer.nextToken();
    set(parameters[i],nextToken,record);
  }
  return record;
}"
29901,"private int bootstrapSecureAdminFiles() throws CommandException {
  RemoteCommand rc=new RemoteCommand(""String_Node_Str"",this.programOpts,this.env);
  rc.setFileOutputDirectory(instanceDir);
  logger.finest(""String_Node_Str"" + instanceDir.getAbsolutePath());
  final int result=rc.execute(new String[]{""String_Node_Str""});
  return result;
}","private int bootstrapSecureAdminFiles() throws CommandException {
  RemoteCommand rc=new RemoteCommand(""String_Node_Str"",this.programOpts,this.env);
  rc.setFileOutputDirectory(instanceDir);
  final int result=rc.execute(new String[]{""String_Node_Str""});
  return result;
}"
29902,"/** 
 * Called from ExecutionContext.execute.
 */
private void doCommand(ExecutionContext inv,AdminCommand command){
  if (command == null) {
    command=getCommand(inv.name(),inv.report(),logger);
    if (command == null) {
      return;
    }
  }
  CommandModel model;
  try {
    CommandModelProvider c=CommandModelProvider.class.cast(command);
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  UploadedFilesManager ufm=null;
  ActionReport report=inv.report();
  ParameterMap parameters;
  final AdminCommandContext context=new AdminCommandContext(LogDomains.getLogger(command.getClass(),LogDomains.ADMIN_LOGGER),report,inv.inboundPayload(),inv.outboundPayload());
  List<RuntimeType> runtimeTypes=new ArrayList<RuntimeType>();
  FailurePolicy fp=null;
  Set<CommandTarget> targetTypesAllowed=new HashSet<CommandTarget>();
  ActionReport.ExitCode preSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  ActionReport.ExitCode postSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  ActionReport.ExitCode afterReplicationSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  boolean doReplication=false;
  if ((domain.getServers().getServer().size() > 1) || (domain.getClusters().getCluster().size() != 0)) {
    doReplication=true;
  }
 else {
    logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    try {
      ufm=new UploadedFilesManager(inv.report,logger,inv.inboundPayload());
      if (inv.typedParams() != null) {
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        InjectionResolver<Param> injectionTarget=new DelegatedInjectionResolver(model,inv.typedParams(),ufm.optionNameToFileMap());
        if (injectParameters(model,command,injectionTarget,context).equals(ActionReport.ExitCode.SUCCESS)) {
          inv.setReport(doCommand(model,command,context));
        }
        return;
      }
      parameters=inv.parameters();
      if (parameters == null) {
        parameters=new ParameterMap();
      }
      if (isSet(parameters,""String_Node_Str"") || isSet(parameters,""String_Node_Str"")) {
        BufferedReader in=getManPage(model.getCommandName(),model);
        String manPage=encodeManPage(in);
        if (manPage != null && isSet(parameters,""String_Node_Str"")) {
          inv.report().getTopMessagePart().addProperty(""String_Node_Str"",manPage);
        }
 else {
          report.getTopMessagePart().addProperty(AdminCommandResponse.GENERATED_HELP,""String_Node_Str"");
          getHelp(command,report);
        }
        return;
      }
      try {
        if (!skipValidation(command)) {
          validateParameters(model,parameters);
        }
      }
 catch (      ComponentException e) {
        Exception exception=e;
        Throwable cause=e.getCause();
        if (cause != null && (cause instanceof UnacceptableValueException)) {
          exception=(Exception)cause;
        }
        logger.severe(exception.getMessage());
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(exception.getMessage());
        report.setFailureCause(exception);
        ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
        childPart.setMessage(getUsageText(command,model));
        return;
      }
      InjectionResolver<Param> injectionMgr=new MapInjectionResolver(model,parameters,ufm.optionNameToFileMap());
      if (!injectParameters(model,command,injectionMgr,context).equals(ActionReport.ExitCode.SUCCESS)) {
        return;
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      org.glassfish.api.admin.ExecuteOn clAnnotation=model.getClusteringAttributes();
      if (clAnnotation == null) {
        runtimeTypes.add(RuntimeType.DAS);
        runtimeTypes.add(RuntimeType.INSTANCE);
        fp=FailurePolicy.Error;
      }
 else {
        if (clAnnotation.value().length == 0) {
          runtimeTypes.add(RuntimeType.DAS);
          runtimeTypes.add(RuntimeType.INSTANCE);
        }
 else {
          for (          RuntimeType t : clAnnotation.value()) {
            runtimeTypes.add(t);
          }
        }
        if (clAnnotation.ifFailure() == null) {
          fp=FailurePolicy.Error;
        }
 else {
          fp=clAnnotation.ifFailure();
        }
      }
      String targetName=parameters.getOne(""String_Node_Str"");
      if (targetName == null || model.getModelFor(""String_Node_Str"").getParam().obsolete()) {
        if (command instanceof DeploymentTargetResolver) {
          targetName=((DeploymentTargetResolver)command).getTarget(parameters);
        }
 else {
          targetName=""String_Node_Str"";
        }
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
      if (serverEnv.isDas()) {
        TargetType tgtTypeAnnotation=command.getClass().getAnnotation(TargetType.class);
        if (tgtTypeAnnotation != null) {
          for (          CommandTarget c : tgtTypeAnnotation.value()) {
            targetTypesAllowed.add(c);
          }
        }
        ;
        if (targetTypesAllowed.size() == 0) {
          targetTypesAllowed.add(CommandTarget.DAS);
          targetTypesAllowed.add(CommandTarget.STANDALONE_INSTANCE);
          targetTypesAllowed.add(CommandTarget.CLUSTER);
          targetTypesAllowed.add(CommandTarget.CONFIG);
        }
        if (CommandTarget.DAS.isValid(habitat,targetName) && !runtimeTypes.contains(RuntimeType.DAS)) {
          runtimeTypes.add(RuntimeType.DAS);
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",runtimeTypes.toString()));
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetTypesAllowed.toString()));
        if ((!CommandTarget.DOMAIN.isValid(habitat,targetName)) && (domain.getServerNamed(targetName) == null) && (domain.getClusterNamed(targetName) == null)&& (domain.getConfigNamed(targetName) == null)) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
          return;
        }
        boolean isTargetValidType=false;
        Iterator<CommandTarget> it=targetTypesAllowed.iterator();
        while (it.hasNext()) {
          if (it.next().isValid(habitat,targetName)) {
            isTargetValidType=true;
            break;
          }
        }
        if (!isTargetValidType) {
          StringBuilder validTypes=new StringBuilder();
          it=targetTypesAllowed.iterator();
          while (it.hasNext()) {
            validTypes.append(it.next().getDescription() + ""String_Node_Str"");
          }
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName,model.getCommandName(),validTypes.toString()));
          return;
        }
        if ((CommandTarget.CLUSTERED_INSTANCE.isValid(habitat,targetName)) && (!targetTypesAllowed.contains(CommandTarget.CLUSTERED_INSTANCE))) {
          Cluster c=domain.getClusterForInstance(targetName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",model.getCommandName(),targetName,c.getName()));
          return;
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
      Lock lock=null;
      boolean lockTimedOut=false;
      try {
        lock=adminLock.getLock(command,""String_Node_Str"");
        if (command instanceof UndoableCommand) {
          UndoableCommand uCmd=(UndoableCommand)command;
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          if (!uCmd.prepare(context,parameters).equals(ActionReport.ExitCode.SUCCESS)) {
            report.setActionExitCode(ActionReport.ExitCode.FAILURE);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",model.getCommandName(),report.getMessage()));
            return;
          }
        }
        ClusterOperationUtil.clearInstanceList();
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        preSupplementalReturn=supplementalExecutor.execute(model.getCommandName(),Supplemental.Timing.Before,context,parameters,ufm.optionNameToFileMap());
        if (preSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
          report.setActionExitCode(preSupplementalReturn);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
          return;
        }
        if ((runtimeTypes.contains(RuntimeType.ALL)) || (serverEnv.isDas() && (CommandTarget.DOMAIN.isValid(habitat,targetName) || runtimeTypes.contains(RuntimeType.DAS))) || (serverEnv.isInstance() && runtimeTypes.contains(RuntimeType.INSTANCE))) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          report=doCommand(model,command,context);
          inv.setReport(report);
        }
        if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          postSupplementalReturn=supplementalExecutor.execute(model.getCommandName(),Supplemental.Timing.After,context,parameters,ufm.optionNameToFileMap());
          if (postSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
            report.setActionExitCode(postSupplementalReturn);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
            return;
          }
        }
      }
 catch (      AdminCommandLockTimeoutException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime+ ""String_Node_Str"";
        logger.warning(logMsg);
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",lockTime);
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
catch (      AdminCommandLockException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String lockMsg=ex.getMessage();
        String logMsg;
        logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime;
        if (lockMsg != null && lockMsg != ""String_Node_Str"") {
          logMsg+=""String_Node_Str"" + lockMsg;
        }
        logger.warning(logMsg);
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",lockTime);
        if (lockMsg != null && lockMsg != ""String_Node_Str"") {
          msg+=""String_Node_Str"" + adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ lockMsg;
        }
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
 finally {
        if (lock != null && lockTimedOut == false) {
          lock.unlock();
        }
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(ex.getMessage());
      report.setFailureCause(ex);
      ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
      childPart.setMessage(getUsageText(command,model));
      return;
    }
    if (processEnv.getProcessType().isEmbedded()) {
      return;
    }
    if (preSupplementalReturn == ActionReport.ExitCode.WARNING || postSupplementalReturn == ActionReport.ExitCode.WARNING) {
      report.setActionExitCode(ActionReport.ExitCode.WARNING);
    }
    if (doReplication && (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) && (serverEnv.isDas())&& (runtimeTypes.contains(RuntimeType.INSTANCE) || runtimeTypes.contains(RuntimeType.ALL))) {
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      ClusterExecutor executor=null;
      try {
        if (model.getClusteringAttributes() != null && model.getClusteringAttributes().executor() != null) {
          executor=habitat.getComponent(model.getClusteringAttributes().executor());
        }
 else {
          executor=habitat.getComponent(ClusterExecutor.class,""String_Node_Str"");
        }
      }
 catch (      UnsatisfiedDependencyException usdepex) {
        String err=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        logger.warning(err);
      }
      if (executor != null) {
        report.setActionExitCode(executor.execute(model.getCommandName(),command,context,parameters));
        if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
            logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
            afterReplicationSupplementalReturn=supplementalExecutor.execute(model.getCommandName(),Supplemental.Timing.AfterReplication,context,parameters,ufm.optionNameToFileMap());
            if (afterReplicationSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
              report.setActionExitCode(afterReplicationSupplementalReturn);
              report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
              return;
            }
          }
        }
      }
    }
    if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      if (command instanceof UndoableCommand) {
        UndoableCommand uCmd=(UndoableCommand)command;
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        uCmd.undo(context,parameters,ClusterOperationUtil.getCompletedInstances());
      }
    }
 else {
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.addServerToStateService(parameters.getOne(""String_Node_Str""));
      }
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.removeInstanceFromStateService(parameters.getOne(""String_Node_Str""));
      }
    }
  }
  finally {
    if (ufm != null) {
      ufm.close();
    }
  }
}","/** 
 * Called from ExecutionContext.execute.
 */
private void doCommand(ExecutionContext inv,AdminCommand command){
  if (command == null) {
    command=getCommand(inv.name(),inv.report(),logger);
    if (command == null) {
      return;
    }
  }
  CommandModel model;
  try {
    CommandModelProvider c=CommandModelProvider.class.cast(command);
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  UploadedFilesManager ufm=null;
  ActionReport report=inv.report();
  ParameterMap parameters;
  final AdminCommandContext context=new AdminCommandContext(LogDomains.getLogger(command.getClass(),LogDomains.ADMIN_LOGGER),report,inv.inboundPayload(),inv.outboundPayload());
  List<RuntimeType> runtimeTypes=new ArrayList<RuntimeType>();
  FailurePolicy fp=null;
  Set<CommandTarget> targetTypesAllowed=new HashSet<CommandTarget>();
  ActionReport.ExitCode preSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  ActionReport.ExitCode postSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  boolean doReplication=false;
  if ((domain.getServers().getServer().size() > 1) || (domain.getClusters().getCluster().size() != 0)) {
    doReplication=true;
  }
 else {
    logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    try {
      ufm=new UploadedFilesManager(inv.report,logger,inv.inboundPayload());
      if (inv.typedParams() != null) {
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        InjectionResolver<Param> injectionTarget=new DelegatedInjectionResolver(model,inv.typedParams(),ufm.optionNameToFileMap());
        if (injectParameters(model,command,injectionTarget,context).equals(ActionReport.ExitCode.SUCCESS)) {
          inv.setReport(doCommand(model,command,context));
        }
        return;
      }
      parameters=inv.parameters();
      if (parameters == null) {
        parameters=new ParameterMap();
      }
      if (isSet(parameters,""String_Node_Str"") || isSet(parameters,""String_Node_Str"")) {
        BufferedReader in=getManPage(model.getCommandName(),model);
        String manPage=encodeManPage(in);
        if (manPage != null && isSet(parameters,""String_Node_Str"")) {
          inv.report().getTopMessagePart().addProperty(""String_Node_Str"",manPage);
        }
 else {
          report.getTopMessagePart().addProperty(AdminCommandResponse.GENERATED_HELP,""String_Node_Str"");
          getHelp(command,report);
        }
        return;
      }
      try {
        if (!skipValidation(command)) {
          validateParameters(model,parameters);
        }
      }
 catch (      ComponentException e) {
        Exception exception=e;
        Throwable cause=e.getCause();
        if (cause != null && (cause instanceof UnacceptableValueException)) {
          exception=(Exception)cause;
        }
        logger.severe(exception.getMessage());
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(exception.getMessage());
        report.setFailureCause(exception);
        ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
        childPart.setMessage(getUsageText(command,model));
        return;
      }
      InjectionResolver<Param> injectionMgr=new MapInjectionResolver(model,parameters,ufm.optionNameToFileMap());
      if (!injectParameters(model,command,injectionMgr,context).equals(ActionReport.ExitCode.SUCCESS)) {
        return;
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      org.glassfish.api.admin.ExecuteOn clAnnotation=model.getClusteringAttributes();
      if (clAnnotation == null) {
        runtimeTypes.add(RuntimeType.DAS);
        runtimeTypes.add(RuntimeType.INSTANCE);
        fp=FailurePolicy.Error;
      }
 else {
        if (clAnnotation.value().length == 0) {
          runtimeTypes.add(RuntimeType.DAS);
          runtimeTypes.add(RuntimeType.INSTANCE);
        }
 else {
          for (          RuntimeType t : clAnnotation.value()) {
            runtimeTypes.add(t);
          }
        }
        if (clAnnotation.ifFailure() == null) {
          fp=FailurePolicy.Error;
        }
 else {
          fp=clAnnotation.ifFailure();
        }
      }
      String targetName=parameters.getOne(""String_Node_Str"");
      if (targetName == null || model.getModelFor(""String_Node_Str"").getParam().obsolete()) {
        if (command instanceof DeploymentTargetResolver) {
          targetName=((DeploymentTargetResolver)command).getTarget(parameters);
        }
 else {
          targetName=""String_Node_Str"";
        }
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
      if (serverEnv.isDas()) {
        TargetType tgtTypeAnnotation=command.getClass().getAnnotation(TargetType.class);
        if (tgtTypeAnnotation != null) {
          for (          CommandTarget c : tgtTypeAnnotation.value()) {
            targetTypesAllowed.add(c);
          }
        }
        ;
        if (targetTypesAllowed.size() == 0) {
          targetTypesAllowed.add(CommandTarget.DAS);
          targetTypesAllowed.add(CommandTarget.STANDALONE_INSTANCE);
          targetTypesAllowed.add(CommandTarget.CLUSTER);
          targetTypesAllowed.add(CommandTarget.CONFIG);
        }
        if (CommandTarget.DAS.isValid(habitat,targetName) && !runtimeTypes.contains(RuntimeType.DAS)) {
          runtimeTypes.add(RuntimeType.DAS);
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",runtimeTypes.toString()));
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetTypesAllowed.toString()));
        if ((!CommandTarget.DOMAIN.isValid(habitat,targetName)) && (domain.getServerNamed(targetName) == null) && (domain.getClusterNamed(targetName) == null)&& (domain.getConfigNamed(targetName) == null)) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
          return;
        }
        boolean isTargetValidType=false;
        Iterator<CommandTarget> it=targetTypesAllowed.iterator();
        while (it.hasNext()) {
          if (it.next().isValid(habitat,targetName)) {
            isTargetValidType=true;
            break;
          }
        }
        if (!isTargetValidType) {
          StringBuilder validTypes=new StringBuilder();
          it=targetTypesAllowed.iterator();
          while (it.hasNext()) {
            validTypes.append(it.next().getDescription() + ""String_Node_Str"");
          }
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName,model.getCommandName(),validTypes.toString()));
          return;
        }
        if ((CommandTarget.CLUSTERED_INSTANCE.isValid(habitat,targetName)) && (!targetTypesAllowed.contains(CommandTarget.CLUSTERED_INSTANCE))) {
          Cluster c=domain.getClusterForInstance(targetName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",model.getCommandName(),targetName,c.getName()));
          return;
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
      Lock lock=null;
      boolean lockTimedOut=false;
      try {
        lock=adminLock.getLock(command,""String_Node_Str"");
        if (command instanceof UndoableCommand) {
          UndoableCommand uCmd=(UndoableCommand)command;
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          if (!uCmd.prepare(context,parameters).equals(ActionReport.ExitCode.SUCCESS)) {
            report.setActionExitCode(ActionReport.ExitCode.FAILURE);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",model.getCommandName(),report.getMessage()));
            return;
          }
        }
        ClusterOperationUtil.clearInstanceList();
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        preSupplementalReturn=supplementalExecutor.execute(model.getCommandName(),Supplemental.Timing.Before,context,parameters,ufm.optionNameToFileMap());
        if (preSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
          report.setActionExitCode(preSupplementalReturn);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
          return;
        }
        if ((runtimeTypes.contains(RuntimeType.ALL)) || (serverEnv.isDas() && (CommandTarget.DOMAIN.isValid(habitat,targetName) || runtimeTypes.contains(RuntimeType.DAS))) || (serverEnv.isInstance() && runtimeTypes.contains(RuntimeType.INSTANCE))) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          report=doCommand(model,command,context);
          inv.setReport(report);
        }
        if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          postSupplementalReturn=supplementalExecutor.execute(model.getCommandName(),Supplemental.Timing.After,context,parameters,ufm.optionNameToFileMap());
          if (postSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
            report.setActionExitCode(postSupplementalReturn);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
            return;
          }
        }
      }
 catch (      AdminCommandLockTimeoutException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime+ ""String_Node_Str"";
        logger.warning(logMsg);
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",lockTime);
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
catch (      AdminCommandLockException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String lockMsg=ex.getMessage();
        String logMsg;
        logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime;
        if (lockMsg != null && !lockMsg.isEmpty()) {
          logMsg+=""String_Node_Str"" + lockMsg;
        }
        logger.warning(logMsg);
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",lockTime);
        if (lockMsg != null && !lockMsg.isEmpty()) {
          msg+=""String_Node_Str"" + adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ lockMsg;
        }
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
 finally {
        if (lock != null && lockTimedOut == false) {
          lock.unlock();
        }
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(ex.getMessage());
      report.setFailureCause(ex);
      ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
      childPart.setMessage(getUsageText(command,model));
      return;
    }
    if (processEnv.getProcessType().isEmbedded()) {
      return;
    }
    if (preSupplementalReturn == ActionReport.ExitCode.WARNING || postSupplementalReturn == ActionReport.ExitCode.WARNING) {
      report.setActionExitCode(ActionReport.ExitCode.WARNING);
    }
    if (doReplication && (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) && (serverEnv.isDas())&& (runtimeTypes.contains(RuntimeType.INSTANCE) || runtimeTypes.contains(RuntimeType.ALL))) {
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      ClusterExecutor executor=null;
      try {
        if (model.getClusteringAttributes() != null && model.getClusteringAttributes().executor() != null) {
          executor=habitat.getComponent(model.getClusteringAttributes().executor());
        }
 else {
          executor=habitat.getComponent(ClusterExecutor.class,""String_Node_Str"");
        }
      }
 catch (      UnsatisfiedDependencyException usdepex) {
        String err=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        logger.warning(err);
      }
      if (executor != null) {
        report.setActionExitCode(executor.execute(model.getCommandName(),command,context,parameters));
        if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
            logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
            ActionReport.ExitCode afterReplicationSupplementalReturn=supplementalExecutor.execute(model.getCommandName(),Supplemental.Timing.AfterReplication,context,parameters,ufm.optionNameToFileMap());
            if (afterReplicationSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
              report.setActionExitCode(afterReplicationSupplementalReturn);
              report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
              return;
            }
          }
        }
      }
    }
    if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      if (command instanceof UndoableCommand) {
        UndoableCommand uCmd=(UndoableCommand)command;
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        uCmd.undo(context,parameters,ClusterOperationUtil.getCompletedInstances());
      }
    }
 else {
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.addServerToStateService(parameters.getOne(""String_Node_Str""));
      }
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.removeInstanceFromStateService(parameters.getOne(""String_Node_Str""));
      }
    }
  }
  finally {
    if (ufm != null) {
      ufm.close();
    }
  }
}"
29903,"public String getApplicationId(){
  if (applicationId != null)   return applicationId;
  Container container=manager.getContainer();
  StringBuffer sb=new StringBuffer(50);
  sb.append(this.getClusterId());
  ArrayList list=new ArrayList();
  while (container != null) {
    if (container.getName() != null) {
      list.add(""String_Node_Str"" + container.getName());
    }
    container=container.getParent();
  }
  for (int i=(list.size() - 1); i > -1; i--) {
    String nextString=(String)list.get(i);
    sb.append(nextString);
  }
  applicationId=sb.toString();
  return applicationId;
}","public String getApplicationId(){
  if (applicationId != null)   return applicationId;
  Container container=manager.getContainer();
  StringBuffer sb=new StringBuffer(50);
  sb.append(this.getClusterId());
  List<String> list=new ArrayList<String>();
  while (container != null) {
    if (container.getName() != null) {
      list.add(""String_Node_Str"" + container.getName());
    }
    container=container.getParent();
  }
  for (int i=(list.size() - 1); i > -1; i--) {
    String nextString=(String)list.get(i);
    sb.append(nextString);
  }
  applicationId=sb.toString();
  return applicationId;
}"
29904,"/** 
 * return an ArrayList of Strings whose elements are the names of the added attributes
 */
public ArrayList getAddedAttributes(){
  ArrayList resultList=new ArrayList();
  Set entries=_attributeStates.entrySet();
  Iterator it=entries.iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    SessionAttributeState nextAttrState=(SessionAttributeState)entry.getValue();
    String nextAttrName=(String)entry.getKey();
    if (!nextAttrState.isPersistent() && !nextAttrState.isDirty()) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}","/** 
 * return an ArrayList of Strings whose elements are the names of the added attributes
 */
public List<String> getAddedAttributes(){
  List<String> resultList=new ArrayList<String>();
  for (  Map.Entry<String,SessionAttributeState> entry : _attributeStates.entrySet()) {
    SessionAttributeState nextAttrState=entry.getValue();
    String nextAttrName=entry.getKey();
    if (!nextAttrState.isPersistent() && !nextAttrState.isDirty()) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}"
29905,"/** 
 * return an ArrayList of Strings whose elements are the names of the added attributes
 */
public ArrayList getAddedAttributesPrevious(){
  ArrayList resultList=new ArrayList();
  Set entries=_attributeStates.entrySet();
  Iterator it=entries.iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    SessionAttributeState nextAttrState=(SessionAttributeState)entry.getValue();
    String nextAttrName=(String)entry.getKey();
    if (!nextAttrState.isPersistent()) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}","/** 
 * return an ArrayList of Strings whose elements are the names of the added attributes
 */
public List<String> getAddedAttributesPrevious(){
  List<String> resultList=new ArrayList<String>();
  for (  Map.Entry<String,SessionAttributeState> entry : _attributeStates.entrySet()) {
    SessionAttributeState nextAttrState=entry.getValue();
    String nextAttrName=entry.getKey();
    if (!nextAttrState.isPersistent()) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}"
29906,"Enumeration privateGetAttributeList(){
  return (new Enumerator(new ArrayList(attributes.keySet())));
}","Enumeration<String> privateGetAttributeList(){
  return (new Enumerator<String>(new ArrayList<String>(attributes.keySet())));
}"
29907,"/** 
 * set the SessionAttributeState for attributeName based on persistent value
 * @param attributeName
 * @param persistent
 */
void setAttributeStatePersistent(String attributeName,boolean persistent){
  SessionAttributeState attrState=(SessionAttributeState)_attributeStates.get(attributeName);
  if (attrState == null) {
    attrState=new SessionAttributeState();
    attrState.setPersistent(persistent);
    _attributeStates.put(attributeName,attrState);
  }
 else {
    attrState.setPersistent(persistent);
  }
}","/** 
 * set the SessionAttributeState for attributeName based on persistent value
 * @param attributeName
 * @param persistent
 */
void setAttributeStatePersistent(String attributeName,boolean persistent){
  SessionAttributeState attrState=_attributeStates.get(attributeName);
  if (attrState == null) {
    attrState=new SessionAttributeState();
    attrState.setPersistent(persistent);
    _attributeStates.put(attributeName,attrState);
  }
 else {
    attrState.setPersistent(persistent);
  }
}"
29908,"/** 
 * Creates a new instance of ModifiedAttributeHASession 
 */
public ModifiedAttributeHASession(Manager manager){
  super(manager);
  _attributeStates=new HashMap();
}","/** 
 * Creates a new instance of ModifiedAttributeHASession 
 */
public ModifiedAttributeHASession(Manager manager){
  super(manager);
}"
29909,"/** 
 * return an ArrayList of Strings whose elements are the names of the deleted attributes
 */
public ArrayList getDeletedAttributes(){
  ArrayList resultList=new ArrayList();
  Set entries=_attributeStates.entrySet();
  Iterator it=entries.iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    SessionAttributeState nextAttrState=(SessionAttributeState)entry.getValue();
    String nextAttrName=(String)entry.getKey();
    if (nextAttrState.isDeleted() && nextAttrState.isPersistent()) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}","/** 
 * return an ArrayList of Strings whose elements are the names of the deleted attributes
 */
public List<String> getDeletedAttributes(){
  List<String> resultList=new ArrayList<String>();
  for (  Map.Entry<String,SessionAttributeState> entry : _attributeStates.entrySet()) {
    SessionAttributeState nextAttrState=entry.getValue();
    String nextAttrName=entry.getKey();
    if (nextAttrState.isDeleted() && nextAttrState.isPersistent()) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}"
29910,"/** 
 * return the SessionAttributeState for attributeName
 * @param attributeName
 */
SessionAttributeState getAttributeState(String attributeName){
  return (SessionAttributeState)_attributeStates.get(attributeName);
}","/** 
 * return the SessionAttributeState for attributeName
 * @param attributeName
 */
SessionAttributeState getAttributeState(String attributeName){
  return _attributeStates.get(attributeName);
}"
29911,"/** 
 * this method called when session is loaded from persistent store or after session state was stored note: pre-condition is that the removed attributes have been removed from _attributeStates; this is taken care of by removeAttribute method
 */
void resetAttributeState(){
  clearAttributeStates();
  Enumeration attrNames=getAttributeNames();
  while (attrNames.hasMoreElements()) {
    String nextAttrName=(String)attrNames.nextElement();
    SessionAttributeState nextAttrState=SessionAttributeState.createPersistentAttribute();
    _attributeStates.put(nextAttrName,nextAttrState);
  }
  setDirty(false);
}","/** 
 * this method called when session is loaded from persistent store or after session state was stored note: pre-condition is that the removed attributes have been removed from _attributeStates; this is taken care of by removeAttribute method
 */
void resetAttributeState(){
  clearAttributeStates();
  Enumeration<String> attrNames=getAttributeNames();
  while (attrNames.hasMoreElements()) {
    String nextAttrName=attrNames.nextElement();
    SessionAttributeState nextAttrState=SessionAttributeState.createPersistentAttribute();
    _attributeStates.put(nextAttrName,nextAttrState);
  }
  setDirty(false);
}"
29912,"/** 
 * return an ArrayList of Strings whose elements are the names of the modified attributes attributes must dirty, persistent and not deleted
 */
public ArrayList getModifiedAttributes(){
  ArrayList resultList=new ArrayList();
  Set entries=_attributeStates.entrySet();
  Iterator it=entries.iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    SessionAttributeState nextAttrState=(SessionAttributeState)entry.getValue();
    String nextAttrName=(String)entry.getKey();
    if (nextAttrState.isDirty() && nextAttrState.isPersistent() && (!nextAttrState.isDeleted())) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}","/** 
 * return an ArrayList of Strings whose elements are the names of the modified attributes attributes must dirty, persistent and not deleted
 */
public List<String> getModifiedAttributes(){
  List<String> resultList=new ArrayList<String>();
  for (  Map.Entry<String,SessionAttributeState> entry : _attributeStates.entrySet()) {
    SessionAttributeState nextAttrState=entry.getValue();
    String nextAttrName=entry.getKey();
    if (nextAttrState.isDirty() && nextAttrState.isPersistent() && (!nextAttrState.isDeleted())) {
      resultList.add(nextAttrName);
    }
  }
  return resultList;
}"
29913,"/** 
 * set the SessionAttributeState for attributeName based on dirty value
 * @param attributeName
 * @param dirty
 */
void setAttributeStateDirty(String attributeName,boolean dirty){
  SessionAttributeState attrState=(SessionAttributeState)_attributeStates.get(attributeName);
  if (attrState == null) {
    attrState=new SessionAttributeState();
    attrState.setDirty(dirty);
    _attributeStates.put(attributeName,attrState);
  }
 else {
    attrState.setDirty(dirty);
  }
}","/** 
 * set the SessionAttributeState for attributeName based on dirty value
 * @param attributeName
 * @param dirty
 */
void setAttributeStateDirty(String attributeName,boolean dirty){
  SessionAttributeState attrState=_attributeStates.get(attributeName);
  if (attrState == null) {
    attrState=new SessionAttributeState();
    attrState.setDirty(dirty);
    _attributeStates.put(attributeName,attrState);
  }
 else {
    attrState.setDirty(dirty);
  }
}"
29914,"/** 
 * clear (empty) the attributeStates
 */
void clearAttributeStates(){
  if (_attributeStates == null) {
    _attributeStates=new HashMap();
  }
  _attributeStates.clear();
}","/** 
 * clear (empty) the attributeStates
 */
void clearAttributeStates(){
  if (_attributeStates == null) {
    _attributeStates=new HashMap<String,SessionAttributeState>();
  }
  _attributeStates.clear();
}"
29915,"private void postSaveUpdate(ModifiedAttributeHASession modAttrSession){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"");
  }
  ArrayList addedAttrs=modAttrSession.getAddedAttributes();
  ArrayList modifiedAttrs=modAttrSession.getModifiedAttributes();
  ArrayList deletedAttrs=modAttrSession.getDeletedAttributes();
  printAttrList(""String_Node_Str"",addedAttrs);
  printAttrList(""String_Node_Str"",modifiedAttrs);
  printAttrList(""String_Node_Str"",deletedAttrs);
  postProcessSetAttrStates(modAttrSession,addedAttrs);
  postProcessSetAttrStates(modAttrSession,modifiedAttrs);
}","private void postSaveUpdate(ModifiedAttributeHASession modAttrSession){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"");
  }
  List<String> addedAttrs=modAttrSession.getAddedAttributes();
  List<String> modifiedAttrs=modAttrSession.getModifiedAttributes();
  List<String> deletedAttrs=modAttrSession.getDeletedAttributes();
  printAttrList(""String_Node_Str"",addedAttrs);
  printAttrList(""String_Node_Str"",modifiedAttrs);
  printAttrList(""String_Node_Str"",deletedAttrs);
  postProcessSetAttrStates(modAttrSession,addedAttrs);
  postProcessSetAttrStates(modAttrSession,modifiedAttrs);
}"
29916,"private CompositeMetadata createCompositeMetadata(ModifiedAttributeHASession modAttrSession){
  byte[] trunkState=null;
  if (modAttrSession.isNew()) {
    try {
      trunkState=this.getByteArray(modAttrSession);
    }
 catch (    IOException ex) {
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + trunkState);
  }
  ArrayList entries=new ArrayList();
  ArrayList addedAttrs=modAttrSession.getAddedAttributes();
  ArrayList modifiedAttrs=modAttrSession.getModifiedAttributes();
  ArrayList deletedAttrs=modAttrSession.getDeletedAttributes();
  printAttrList(""String_Node_Str"",addedAttrs);
  printAttrList(""String_Node_Str"",modifiedAttrs);
  printAttrList(""String_Node_Str"",deletedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.ADD,addedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.UPDATE,modifiedAttrs);
  entries=addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.DELETE,deletedAttrs);
  CompositeMetadata result=new CompositeMetadata(modAttrSession.getVersion(),modAttrSession.getLastAccessedTimeInternal(),modAttrSession.getMaxInactiveInterval() * 1000L,entries,trunkState,null);
  return result;
}","private CompositeMetadata createCompositeMetadata(ModifiedAttributeHASession modAttrSession){
  byte[] trunkState=null;
  if (modAttrSession.isNew()) {
    try {
      trunkState=this.getByteArray(modAttrSession);
    }
 catch (    IOException ex) {
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + trunkState);
  }
  List<SessionAttributeMetadata> entries=new ArrayList<SessionAttributeMetadata>();
  List<String> addedAttrs=modAttrSession.getAddedAttributes();
  List<String> modifiedAttrs=modAttrSession.getModifiedAttributes();
  List<String> deletedAttrs=modAttrSession.getDeletedAttributes();
  printAttrList(""String_Node_Str"",addedAttrs);
  printAttrList(""String_Node_Str"",modifiedAttrs);
  printAttrList(""String_Node_Str"",deletedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.ADD,addedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.UPDATE,modifiedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.DELETE,deletedAttrs);
  CompositeMetadata result=new CompositeMetadata(modAttrSession.getVersion(),modAttrSession.getLastAccessedTimeInternal(),modAttrSession.getMaxInactiveInterval() * 1000L,entries,trunkState,null);
  return result;
}"
29917,"private ArrayList addToEntries(ModifiedAttributeHASession modAttrSession,ArrayList entries,SessionAttributeMetadata.Operation op,ArrayList attrList){
  String nextAttrName=null;
  Object nextAttrValue=null;
  byte[] nextValue=null;
  for (int i=0; i < attrList.size(); i++) {
    nextAttrName=(String)attrList.get(i);
    nextAttrValue=((StandardSession)modAttrSession).getAttribute(nextAttrName);
    nextValue=null;
    try {
      nextValue=getByteArray(nextAttrValue);
    }
 catch (    IOException ex) {
    }
    SessionAttributeMetadata nextAttrMetadata=new SessionAttributeMetadata(nextAttrName,op,nextValue);
    entries.add(nextAttrMetadata);
  }
  return entries;
}","private void addToEntries(ModifiedAttributeHASession modAttrSession,List<SessionAttributeMetadata> entries,SessionAttributeMetadata.Operation op,List<String> attrList){
  String nextAttrName=null;
  Object nextAttrValue=null;
  byte[] nextValue=null;
  for (int i=0; i < attrList.size(); i++) {
    nextAttrName=attrList.get(i);
    nextAttrValue=((StandardSession)modAttrSession).getAttribute(nextAttrName);
    nextValue=null;
    try {
      nextValue=getByteArray(nextAttrValue);
    }
 catch (    IOException ex) {
    }
    SessionAttributeMetadata nextAttrMetadata=new SessionAttributeMetadata(nextAttrName,op,nextValue);
    entries.add(nextAttrMetadata);
  }
}"
29918,"private void printAttrList(String attrListType,ArrayList attrList){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + attrListType);
    String nextAttrName=null;
    for (int i=0; i < attrList.size(); i++) {
      nextAttrName=(String)attrList.get(i);
      _logger.fine(""String_Node_Str"" + i + ""String_Node_Str""+ nextAttrName);
    }
  }
}","private void printAttrList(String attrListType,List<String> attrList){
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + attrListType);
    String nextAttrName=null;
    for (int i=0; i < attrList.size(); i++) {
      nextAttrName=attrList.get(i);
      _logger.fine(""String_Node_Str"" + i + ""String_Node_Str""+ nextAttrName);
    }
  }
}"
29919,"private void postProcessSetAttrStates(ModifiedAttributeHASession modAttrSession,ArrayList attrsList){
  for (int i=0; i < attrsList.size(); i++) {
    String nextStateName=(String)attrsList.get(i);
    modAttrSession.setAttributeStatePersistent(nextStateName,true);
    modAttrSession.setAttributeStateDirty(nextStateName,false);
  }
}","private void postProcessSetAttrStates(ModifiedAttributeHASession modAttrSession,List<String> attrsList){
  for (int i=0; i < attrsList.size(); i++) {
    String nextStateName=attrsList.get(i);
    modAttrSession.setAttributeStatePersistent(nextStateName,true);
    modAttrSession.setAttributeStateDirty(nextStateName,false);
  }
}"
29920,"/** 
 * Start this component, initializing our associated class loader.
 * @exception LifecycleException if a lifecycle error occurs
 */
public void start() throws LifecycleException {
  if (!initialized)   init();
  if (started)   throw new LifecycleException(sm.getString(""String_Node_Str""));
  if (log.isLoggable(Level.FINEST))   log.finest(sm.getString(""String_Node_Str""));
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container.getResources() == null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + container);
    }
    return;
  }
  URLStreamHandlerFactory streamHandlerFactory=new DirContextURLStreamHandlerFactory();
synchronized (WebappLoader.class) {
    if (first) {
      first=false;
      try {
        URL.setURLStreamHandlerFactory(streamHandlerFactory);
      }
 catch (      Exception e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
catch (      Throwable t) {
        if (log.isLoggable(Level.FINE)) {
          log.fine(""String_Node_Str"" + t.getMessage());
        }
      }
    }
  }
  try {
    ClassLoader cl=createClassLoader();
    if (cl instanceof WebappClassLoader) {
      classLoader=(WebappClassLoader)cl;
    }
 else {
      classLoader=new WebappClassLoader(cl);
    }
    classLoader.setResources(container.getResources());
    classLoader.setDebug(this.debug);
    classLoader.setDelegate(this.delegate);
    for (int i=0; i < repositories.length; i++) {
      classLoader.addRepository(repositories[i]);
    }
    if (overridablePackages != null) {
      for (int i=0; i < overridablePackages.size(); i++) {
        classLoader.addOverridablePackage(overridablePackages.get(i));
      }
      overridablePackages=null;
    }
    setRepositories();
    setClassPath();
    setPermissions();
    DirContextURLStreamHandler.bind(classLoader,this.container.getResources());
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new LifecycleException(""String_Node_Str"",t);
  }
}","/** 
 * Start this component, initializing our associated class loader.
 * @exception LifecycleException if a lifecycle error occurs
 */
public void start() throws LifecycleException {
  if (!initialized)   init();
  if (started)   throw new LifecycleException(sm.getString(""String_Node_Str""));
  if (log.isLoggable(Level.FINEST))   log.finest(sm.getString(""String_Node_Str""));
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container.getResources() == null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + container);
    }
    return;
  }
  initStreamHandlerFactory();
  try {
    ClassLoader cl=createClassLoader();
    if (cl instanceof WebappClassLoader) {
      classLoader=(WebappClassLoader)cl;
    }
 else {
      classLoader=new WebappClassLoader(cl);
    }
    classLoader.setResources(container.getResources());
    classLoader.setDebug(this.debug);
    classLoader.setDelegate(this.delegate);
    for (int i=0; i < repositories.length; i++) {
      classLoader.addRepository(repositories[i]);
    }
    if (overridablePackages != null) {
      for (int i=0; i < overridablePackages.size(); i++) {
        classLoader.addOverridablePackage(overridablePackages.get(i));
      }
      overridablePackages=null;
    }
    setRepositories();
    setClassPath();
    setPermissions();
    DirContextURLStreamHandler.bind(classLoader,this.container.getResources());
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new LifecycleException(""String_Node_Str"",t);
  }
}"
29921,"private boolean checkEnvAndParams(){
  if (!env.isDas()) {
    return setFail(Strings.get(""String_Node_Str""));
  }
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    return setFail(Strings.get(""String_Node_Str"",clusterName));
  }
  return true;
}","private boolean checkEnvAndParams(Logger logger,ActionReport report){
  if (!env.isDas()) {
    return setFail(logger,report,Strings.get(""String_Node_Str""));
  }
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    return setFail(logger,report,Strings.get(""String_Node_Str"",clusterName));
  }
  return true;
}"
29922,"private boolean setFail(String message){
  logger.log(Level.WARNING,message);
  report.setMessage(message);
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  return false;
}","private boolean setFail(Logger logger,ActionReport report,String message){
  logger.log(Level.WARNING,message);
  report.setMessage(message);
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  return false;
}"
29923,"private void getHealthWithGMS(){
  StringBuilder result=new StringBuilder();
  HealthHistory history=gmsAdapter.getHealthHistory();
  if (history == null) {
    setFail(Strings.get(""String_Node_Str""));
    return;
  }
  if (history.getInstances().isEmpty()) {
    report.setMessage(Strings.get(""String_Node_Str"",clusterName));
    return;
  }
  SortedSet<String> names=new TreeSet<String>(history.getInstances());
  List<Properties> statesAndTimes=new ArrayList<Properties>(names.size());
  for (  String name : names) {
    Properties instanceStateAndTime=new Properties();
    HealthHistory.InstanceHealth ih=history.getHealthByInstance(name);
    instanceStateAndTime.put(""String_Node_Str"",name);
    instanceStateAndTime.put(""String_Node_Str"",ih.state.name());
    if (HealthHistory.NOTIME == ih.time) {
      result.append(name + ""String_Node_Str"" + ih.state);
      instanceStateAndTime.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      result.append(Strings.get(""String_Node_Str"",name,ih.state,new Date(ih.time).toString()));
      instanceStateAndTime.put(""String_Node_Str"",String.valueOf(ih.time));
    }
    result.append(""String_Node_Str"");
    statesAndTimes.add(instanceStateAndTime);
  }
  Properties instanceStateTimes=new Properties();
  instanceStateTimes.put(""String_Node_Str"",statesAndTimes);
  report.setExtraProperties(instanceStateTimes);
  String rawResult=result.toString();
  report.setMessage(rawResult.substring(0,rawResult.lastIndexOf(""String_Node_Str"")));
}","private void getHealthWithGMS(Logger logger,ActionReport report,GMSAdapter gmsAdapter){
  StringBuilder result=new StringBuilder();
  HealthHistory history=gmsAdapter.getHealthHistory();
  if (history == null) {
    setFail(logger,report,Strings.get(""String_Node_Str""));
    return;
  }
  if (history.getInstances().isEmpty()) {
    report.setMessage(Strings.get(""String_Node_Str"",clusterName));
    return;
  }
  SortedSet<String> names=new TreeSet<String>(history.getInstances());
  List<Properties> statesAndTimes=new ArrayList<Properties>(names.size());
  for (  String name : names) {
    Properties instanceStateAndTime=new Properties();
    HealthHistory.InstanceHealth ih=history.getHealthByInstance(name);
    instanceStateAndTime.put(""String_Node_Str"",name);
    instanceStateAndTime.put(""String_Node_Str"",ih.state.name());
    if (HealthHistory.NOTIME == ih.time) {
      result.append(name + ""String_Node_Str"" + ih.state);
      instanceStateAndTime.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      result.append(Strings.get(""String_Node_Str"",name,ih.state,new Date(ih.time).toString()));
      instanceStateAndTime.put(""String_Node_Str"",String.valueOf(ih.time));
    }
    result.append(""String_Node_Str"");
    statesAndTimes.add(instanceStateAndTime);
  }
  Properties instanceStateTimes=new Properties();
  instanceStateTimes.put(""String_Node_Str"",statesAndTimes);
  report.setExtraProperties(instanceStateTimes);
  String rawResult=result.toString();
  report.setMessage(rawResult.substring(0,rawResult.lastIndexOf(""String_Node_Str"")));
}"
29924,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  logger.log(Level.INFO,Strings.get(""String_Node_Str"",clusterName));
  if (!checkEnvAndParams()) {
    return;
  }
  gmsAdapter=gmsAdapterService.getGMSAdapterByName(clusterName);
  if (gmsAdapter != null) {
    getHealthWithGMS();
  }
 else {
    setFail(Strings.get(""String_Node_Str"",clusterName));
  }
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  Logger logger=context.getLogger();
  logger.log(Level.INFO,Strings.get(""String_Node_Str"",clusterName));
  if (!checkEnvAndParams(logger,report)) {
    return;
  }
  GMSAdapter gmsAdapter=gmsAdapterService.getGMSAdapterByName(clusterName);
  if (gmsAdapter != null) {
    getHealthWithGMS(logger,report,gmsAdapter);
  }
 else {
    setFail(logger,report,Strings.get(""String_Node_Str"",clusterName));
  }
}"
29925,"private boolean fail(String s){
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  report.setMessage(s);
  return false;
}","private boolean fail(ActionReport report,String s){
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  report.setMessage(s);
  return false;
}"
29926,"private boolean checkEnvAndParams(){
  if (containerType == null) {
    return fail(Strings.get(""String_Node_Str""));
  }
  if (!containerType.equals(""String_Node_Str"") && !containerType.equals(""String_Node_Str"")) {
    return fail(Strings.get(""String_Node_Str"",containerType));
  }
  return true;
}","private boolean checkEnvAndParams(ActionReport report){
  if (containerType == null) {
    return fail(report,Strings.get(""String_Node_Str""));
  }
  if (!containerType.equals(""String_Node_Str"") && !containerType.equals(""String_Node_Str"")) {
    return fail(report,Strings.get(""String_Node_Str"",containerType));
  }
  return true;
}"
29927,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  if (!checkEnvAndParams()) {
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,Strings.get(""String_Node_Str"",containerType));
  }
  Set<String> allPersistenceTypes=BackingStoreFactoryRegistry.getRegisteredTypes();
  allPersistenceTypes.remove(""String_Node_Str"");
  if (containerType.equals(""String_Node_Str"")) {
    allPersistenceTypes.remove(""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean removeTrailingSeparator=false;
  for (  String type : allPersistenceTypes) {
    sb.append(type).append(SEPARATOR);
    removeTrailingSeparator=true;
  }
  String output=sb.toString();
  if (removeTrailingSeparator) {
    output=output.substring(0,output.length() - 1);
  }
  Properties extraProperties=new Properties();
  extraProperties.put(""String_Node_Str"",new ArrayList<String>(allPersistenceTypes));
  report.setExtraProperties(extraProperties);
  report.setMessage(output);
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  logger=context.getLogger();
  if (!checkEnvAndParams(report)) {
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,Strings.get(""String_Node_Str"",containerType));
  }
  Set<String> allPersistenceTypes=BackingStoreFactoryRegistry.getRegisteredTypes();
  allPersistenceTypes.remove(""String_Node_Str"");
  if (containerType.equals(""String_Node_Str"")) {
    allPersistenceTypes.remove(""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean removeTrailingSeparator=false;
  for (  String type : allPersistenceTypes) {
    sb.append(type).append(SEPARATOR);
    removeTrailingSeparator=true;
  }
  String output=sb.toString();
  if (removeTrailingSeparator) {
    output=output.substring(0,output.length() - 1);
  }
  Properties extraProperties=new Properties();
  extraProperties.put(""String_Node_Str"",new ArrayList<String>(allPersistenceTypes));
  report.setExtraProperties(extraProperties);
  report.setMessage(output);
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
29928,"protected void refresh(boolean force){
synchronized (refreshLock) {
    if (stateIs(INSERVICE_STATE) && (wasRefreshed == false || force || filesChanged())) {
      int i=0;
      String value=null;
      String urlKey=null;
      while (true) {
        urlKey=PROVIDER_URL + (++i);
        value=java.security.Security.getProperty(urlKey);
        if (value == null || value.equals(""String_Node_Str"")) {
          break;
        }
      }
      try {
        java.security.Security.setProperty(urlKey,policyUrlValue);
        if (fileChanged(false)) {
          excludedPermissions=loadExcludedPolicy();
        }
        captureFileTime(true);
        if (policy == null) {
          policy=getNewPolicy();
        }
 else {
          policy.refresh();
          if (logger.isLoggable(Level.FINE)) {
            logger.fine(""String_Node_Str"" + CONTEXT_ID + ""String_Node_Str""+ policyUrlValue);
          }
        }
        wasRefreshed=true;
      }
  finally {
        java.security.Security.setProperty(urlKey,""String_Node_Str"");
      }
    }
  }
}","protected void refresh(boolean force){
synchronized (refreshLock) {
    if (stateIs(INSERVICE_STATE) && (wasRefreshed == false || force || filesChanged())) {
      int i=0;
      String value=null;
      String urlKey=null;
      while (true) {
        urlKey=PROVIDER_URL + (++i);
        value=getSecurityProperty(urlKey);
        if (value == null || value.equals(""String_Node_Str"")) {
          break;
        }
      }
      try {
        setSecurityProperty(urlKey,policyUrlValue);
        if (fileChanged(false)) {
          excludedPermissions=loadExcludedPolicy();
        }
        captureFileTime(true);
        if (policy == null) {
          policy=getNewPolicy();
        }
 else {
          policy.refresh();
          if (logger.isLoggable(Level.FINE)) {
            logger.fine(""String_Node_Str"" + CONTEXT_ID + ""String_Node_Str""+ policyUrlValue);
          }
        }
        wasRefreshed=true;
      }
  finally {
        setSecurityProperty(urlKey,""String_Node_Str"");
      }
    }
  }
}"
29929,"/** 
 * Get list of password file entries
 * @return List
 */
@Override protected List<String> getPasswords(){
  List list=new ArrayList<String>();
  list.add(""String_Node_Str"" + nodeUtils.sshL.expandPasswordAlias(remotePassword));
  if (sshkeypassphrase != null) {
    list.add(""String_Node_Str"" + nodeUtils.sshL.expandPasswordAlias(sshkeypassphrase));
  }
  return list;
}","/** 
 * Get list of password file entries
 * @return List
 */
@Override protected List<String> getPasswords(){
  List list=new ArrayList<String>();
  NodeUtils nUtils=new NodeUtils(habitat,logger);
  list.add(""String_Node_Str"" + nUtils.sshL.expandPasswordAlias(remotePassword));
  if (sshkeypassphrase != null) {
    list.add(""String_Node_Str"" + nUtils.sshL.expandPasswordAlias(sshkeypassphrase));
  }
  return list;
}"
29930,"/** 
 * Check if we can connect using password auth
 * @return true|false
 */
public boolean checkPasswordAuth(){
  boolean status=false;
  Connection c=null;
  try {
    c=new Connection(host,port);
    c.connect();
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    status=c.authenticateWithPassword(userName,password);
    if (status) {
      logger.finer(""String_Node_Str"" + userName + ""String_Node_Str""+ host+ ""String_Node_Str"");
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINER)) {
      ioe.printStackTrace();
    }
  }
 finally {
    c.close();
  }
  return status;
}","/** 
 * Check if we can connect using password auth
 * @return true|false
 */
public boolean checkPasswordAuth(){
  boolean status=false;
  Connection c=null;
  try {
    c=new Connection(host,port);
    c.connect();
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    status=c.authenticateWithPassword(userName,password);
    if (status) {
      logger.finer(""String_Node_Str"" + userName + ""String_Node_Str""+ host+ ""String_Node_Str"");
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINER)) {
      ioe.printStackTrace();
    }
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
  return status;
}"
29931,"private void modifyInitialDomainXml(DomainConfig domainConfig) throws GlassFishException {
  BootstrapProperties bootstrapProperties=new BootstrapProperties();
  bootstrapProperties.setInstallRoot(domainConfig.getInstallRoot());
  GlassFishRuntime runtime=GlassFishRuntime.bootstrap(bootstrapProperties);
  File domDir=new File(domainConfig.getDomainRoot(),domainConfig.getDomainName());
  File configDir=new File(domDir,""String_Node_Str"");
  GlassFishProperties glassFishProperties=new GlassFishProperties();
  glassFishProperties.setConfigFileURI(new File(configDir,""String_Node_Str"").toURI().toString());
  glassFishProperties.setConfigFileReadOnly(false);
  glassFishProperties.setProperty(StartupContext.STARTUP_MODULESTARTUP_NAME,""String_Node_Str"");
  glassFishProperties.setProperty(""String_Node_Str"",domainConfig.getDomainName());
  GlassFish glassfish=runtime.newGlassFish(glassFishProperties);
  glassfish.start();
  com.sun.enterprise.config.serverbeans.Server serverConfig=glassfish.getService(com.sun.enterprise.config.serverbeans.Server.class,""String_Node_Str"");
  Config config=glassfish.getService(Config.class,serverConfig.getConfigRef());
  DomainContext ctx=new DomainContext();
  ctx.setDomainType(""String_Node_Str"");
  ctx.setLogger(LogDomains.getLogger(DomainInitializer.class,LogDomains.SERVER_LOGGER));
  Habitat habitat=glassfish.getService(Habitat.class);
  Collection<DomainInitializer> inits=habitat.getAllByContract(DomainInitializer.class);
  if (inits.isEmpty()) {
    logger.info(strings.get(""String_Node_Str""));
  }
  for (  DomainInitializer inhabitant : habitat.getAllByContract(DomainInitializer.class)) {
    logger.info(strings.get(""String_Node_Str"",inhabitant.getClass()));
    Container newContainerConfig=inhabitant.getInitialConfig(ctx);
    config.getContainers().add(newContainerConfig);
  }
  glassfish.dispose();
}","private void modifyInitialDomainXml(DomainConfig domainConfig) throws GlassFishException {
  BootstrapProperties bootstrapProperties=new BootstrapProperties();
  bootstrapProperties.setInstallRoot(domainConfig.getInstallRoot());
  GlassFishRuntime runtime=GlassFishRuntime.bootstrap(bootstrapProperties);
  File domDir=new File(domainConfig.getDomainRoot(),domainConfig.getDomainName());
  File configDir=new File(domDir,""String_Node_Str"");
  GlassFishProperties glassFishProperties=new GlassFishProperties();
  glassFishProperties.setConfigFileURI(new File(configDir,""String_Node_Str"").toURI().toString());
  glassFishProperties.setConfigFileReadOnly(false);
  glassFishProperties.setProperty(StartupContext.STARTUP_MODULESTARTUP_NAME,""String_Node_Str"");
  glassFishProperties.setProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY,domDir.getAbsolutePath());
  glassFishProperties.setProperty(""String_Node_Str"",domainConfig.getDomainName());
  GlassFish glassfish=runtime.newGlassFish(glassFishProperties);
  glassfish.start();
  com.sun.enterprise.config.serverbeans.Server serverConfig=glassfish.getService(com.sun.enterprise.config.serverbeans.Server.class,""String_Node_Str"");
  Config config=glassfish.getService(Config.class,serverConfig.getConfigRef());
  DomainContext ctx=new DomainContext();
  ctx.setDomainType(""String_Node_Str"");
  ctx.setLogger(LogDomains.getLogger(DomainInitializer.class,LogDomains.SERVER_LOGGER));
  Habitat habitat=glassfish.getService(Habitat.class);
  Collection<DomainInitializer> inits=habitat.getAllByContract(DomainInitializer.class);
  if (inits.isEmpty()) {
    logger.info(strings.get(""String_Node_Str""));
  }
  for (  DomainInitializer inhabitant : habitat.getAllByContract(DomainInitializer.class)) {
    logger.info(strings.get(""String_Node_Str"",inhabitant.getClass()));
    Container newContainerConfig=inhabitant.getInitialConfig(ctx);
    try {
      ConfigSupport.apply((new ConfigCode(){
        @Override @SuppressWarnings(""String_Node_Str"") public Object run(        ConfigBeanProxy... objects) throws PropertyVetoException, TransactionFailure {
          ((Config)objects[0]).getContainers().add((Container)objects[1]);
          return Boolean.TRUE;
        }
      }
),new ConfigBeanProxy[]{config,newContainerConfig});
    }
 catch (    TransactionFailure e) {
      logger.severe(strings.get(""String_Node_Str"",inhabitant.getClass()));
    }
  }
  glassfish.dispose();
}"
29932,"/** 
 * Read commands from the specified BufferedReader and execute them.  If printPrompt is set, prompt first.
 * @return the exit code of the last command executed
 */
private int executeCommands(BufferedReader reader) throws CommandException, CommandValidationException, IOException {
  String line=null;
  int rc=0;
  programOpts.toEnvironment(env);
  for (; ; ) {
    if (printPrompt) {
      System.out.print(""String_Node_Str"");
      System.out.flush();
    }
    if ((line=reader.readLine()) == null) {
      if (printPrompt)       System.out.println();
      break;
    }
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] args=null;
    try {
      args=getArgs(line);
    }
 catch (    ArgumentTokenizer.ArgumentException ex) {
      logger.info(ex.getMessage());
      continue;
    }
    if (args.length == 0)     continue;
    String command=args[0];
    if (command.length() == 0)     continue;
    if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str""))     break;
    CLICommand cmd=null;
    ProgramOptions po=null;
    try {
      po=new ProgramOptions(env);
      po.setClassPath(programOpts.getClassPath());
      po.setClassName(programOpts.getClassName());
      habitat.remove(habitat.getInhabitantByType(ProgramOptions.class));
      habitat.addComponent(po);
      cmd=CLICommand.getCommand(habitat,command);
      rc=cmd.execute(args);
    }
 catch (    CommandValidationException cve) {
      logger.severe(cve.getMessage());
      logger.severe(cmd.getUsage());
      rc=ERROR;
    }
catch (    InvalidCommandException ice) {
      logger.severe(ice.getMessage());
      try {
        CLIUtil.displayClosestMatch(command,CLIUtil.getAllCommands(habitat,po,env),strings.get(""String_Node_Str""),logger);
      }
 catch (      InvalidCommandException e) {
      }
    }
catch (    CommandException ce) {
      if (ce.getCause() instanceof java.net.ConnectException) {
        logger.severe(ce.getMessage());
        try {
          CLIUtil.displayClosestMatch(command,CLIUtil.getLocalCommands(habitat),strings.get(""String_Node_Str""),logger);
        }
 catch (        InvalidCommandException e) {
          logger.info(strings.get(""String_Node_Str"",command));
        }
      }
 else       logger.severe(ce.getMessage());
      rc=ERROR;
    }
 finally {
      habitat.remove(habitat.getInhabitantByType(ProgramOptions.class));
      habitat.addComponent(programOpts);
    }
switch (rc) {
case SUCCESS:
      if (!programOpts.isTerse())       logger.fine(strings.get(""String_Node_Str"",command));
    break;
case ERROR:
case INVALID_COMMAND_ERROR:
case CONNECTION_ERROR:
default :
  logger.fine(strings.get(""String_Node_Str"",command));
break;
}
CLIUtil.writeCommandToDebugLog(args,rc);
}
return rc;
}","/** 
 * Read commands from the specified BufferedReader and execute them.  If printPrompt is set, prompt first.
 * @return the exit code of the last command executed
 */
private int executeCommands(BufferedReader reader) throws CommandException, CommandValidationException, IOException {
  String line=null;
  int rc=0;
  programOpts.toEnvironment(env);
  for (; ; ) {
    if (printPrompt) {
      System.out.print(""String_Node_Str"");
      System.out.flush();
    }
    if ((line=reader.readLine()) == null) {
      if (printPrompt)       System.out.println();
      break;
    }
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] args=null;
    try {
      args=getArgs(line);
    }
 catch (    ArgumentTokenizer.ArgumentException ex) {
      logger.info(ex.getMessage());
      continue;
    }
    if (args.length == 0)     continue;
    String command=args[0];
    if (command.length() == 0)     continue;
    if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str""))     break;
    CLICommand cmd=null;
    ProgramOptions po=null;
    try {
      po=new ProgramOptions(env);
      po.setClassPath(programOpts.getClassPath());
      po.setClassName(programOpts.getClassName());
      habitat.remove(habitat.getInhabitantByType(ProgramOptions.class));
      habitat.addComponent(po);
      cmd=CLICommand.getCommand(habitat,command);
      rc=cmd.execute(args);
    }
 catch (    CommandValidationException cve) {
      logger.severe(cve.getMessage());
      if (cmd != null)       logger.severe(cmd.getUsage());
      rc=ERROR;
    }
catch (    InvalidCommandException ice) {
      logger.severe(ice.getMessage());
      try {
        CLIUtil.displayClosestMatch(command,CLIUtil.getAllCommands(habitat,po,env),strings.get(""String_Node_Str""),logger);
      }
 catch (      InvalidCommandException e) {
      }
    }
catch (    CommandException ce) {
      if (ce.getCause() instanceof java.net.ConnectException) {
        logger.severe(ce.getMessage());
        try {
          CLIUtil.displayClosestMatch(command,CLIUtil.getLocalCommands(habitat),strings.get(""String_Node_Str""),logger);
        }
 catch (        InvalidCommandException e) {
          logger.info(strings.get(""String_Node_Str"",command));
        }
      }
 else       logger.severe(ce.getMessage());
      rc=ERROR;
    }
 finally {
      habitat.remove(habitat.getInhabitantByType(ProgramOptions.class));
      habitat.addComponent(programOpts);
    }
switch (rc) {
case SUCCESS:
      if (!programOpts.isTerse())       logger.fine(strings.get(""String_Node_Str"",command));
    break;
case ERROR:
case INVALID_COMMAND_ERROR:
case CONNECTION_ERROR:
default :
  logger.fine(strings.get(""String_Node_Str"",command));
break;
}
CLIUtil.writeCommandToDebugLog(args,rc);
}
return rc;
}"
29933,"/** 
 * Run the command using the specified arguments. Return the output of the command.
 */
public String executeCommand(ParameterMap opts) throws CommandException {
  getCommandModel();
  options=new ParameterMap();
  for (  Map.Entry<String,List<String>> o : opts.entrySet()) {
    String key=o.getKey();
    List<String> value=o.getValue();
    options.set(key.toLowerCase(),value);
  }
  operands=options.get(""String_Node_Str"".toLowerCase());
  try {
    initializeDoUpload();
    if (doUpload)     outboundPayload=PayloadImpl.Outbound.newInstance();
    StringBuilder uriString=new StringBuilder(ADMIN_URI_PATH).append(name).append(QUERY_STRING_INTRODUCER);
    ParamModel operandParam=null;
    for (    ParamModel opt : commandModel.getParameters()) {
      if (opt.getParam().primary()) {
        operandParam=opt;
        continue;
      }
      String paramName=opt.getName();
      String paramValue=options.getOne(paramName.toLowerCase());
      if (paramValue == null) {
        if (opt.isParamId(paramName)) {
          paramValue=options.getOne(opt.getParam().alias().toLowerCase());
        }
      }
      if (paramValue == null)       paramValue=getFromEnvironment(paramName);
      if (paramValue == null) {
        if (!opt.getParam().optional())         throw new CommandException(strings.get(""String_Node_Str"",paramName));
        continue;
      }
      if (opt.getType() == File.class) {
        addFileOption(uriString,paramName,paramValue);
      }
 else       if (opt.getParam().password()) {
        addPasswordOption(uriString,paramName,paramValue);
      }
 else       addStringOption(uriString,paramName,paramValue);
    }
    for (    String operand : operands) {
      if (operandParam.getType() == File.class || operandParam.getType() == File[].class)       addFileOption(uriString,""String_Node_Str"",operand);
 else       addStringOption(uriString,""String_Node_Str"",operand);
    }
    uriString.setLength(uriString.length() - 1);
    executeRemoteCommand(uriString.toString());
  }
 catch (  IOException ioex) {
    throw new CommandException(""String_Node_Str"",ioex);
  }
  return output;
}","/** 
 * Run the command using the specified arguments. Return the output of the command.
 */
public String executeCommand(ParameterMap opts) throws CommandException {
  getCommandModel();
  options=new ParameterMap();
  for (  Map.Entry<String,List<String>> o : opts.entrySet()) {
    String key=o.getKey();
    List<String> value=o.getValue();
    options.set(key.toLowerCase(Locale.ENGLISH),value);
  }
  operands=options.get(""String_Node_Str"");
  try {
    initializeDoUpload();
    if (doUpload)     outboundPayload=PayloadImpl.Outbound.newInstance();
    StringBuilder uriString=new StringBuilder(ADMIN_URI_PATH).append(name).append(QUERY_STRING_INTRODUCER);
    ParamModel operandParam=null;
    for (    ParamModel opt : commandModel.getParameters()) {
      if (opt.getParam().primary()) {
        operandParam=opt;
        continue;
      }
      String paramName=opt.getName();
      String paramValue=options.getOne(paramName.toLowerCase(Locale.ENGLISH));
      if (paramValue == null) {
        if (opt.isParamId(paramName)) {
          paramValue=options.getOne(opt.getParam().alias().toLowerCase(Locale.ENGLISH));
        }
      }
      if (paramValue == null)       paramValue=getFromEnvironment(paramName);
      if (paramValue == null) {
        if (!opt.getParam().optional())         throw new CommandException(strings.get(""String_Node_Str"",paramName));
        continue;
      }
      if (opt.getType() == File.class) {
        addFileOption(uriString,paramName,paramValue);
      }
 else       if (opt.getParam().password()) {
        addPasswordOption(uriString,paramName,paramValue);
      }
 else       addStringOption(uriString,paramName,paramValue);
    }
    for (    String operand : operands) {
      if (operandParam.getType() == File.class || operandParam.getType() == File[].class)       addFileOption(uriString,""String_Node_Str"",operand);
 else       addStringOption(uriString,""String_Node_Str"",operand);
    }
    uriString.setLength(uriString.length() - 1);
    executeRemoteCommand(uriString.toString());
  }
 catch (  IOException ioex) {
    throw new CommandException(""String_Node_Str"",ioex);
  }
  return output;
}"
29934,"private void handleResponse(ParameterMap params,InputStream in,int code) throws IOException, CommandException {
  RemoteResponseManager rrm=null;
  try {
    rrm=new RemoteResponseManager(in,code,logger);
    rrm.process();
  }
 catch (  RemoteSuccessException rse) {
    output=rse.getMessage();
    attrs=rrm.getMainAtts();
    return;
  }
catch (  RemoteException rfe) {
    if (rfe.getRemoteCause().indexOf(""String_Node_Str"") >= 0) {
      throw new InvalidCommandException(rfe.getMessage());
    }
    throw new CommandException(""String_Node_Str"" + rfe.getMessage(),rfe);
  }
}","private void handleResponse(ParameterMap params,InputStream in,int code) throws IOException, CommandException {
}"
29935,"/** 
 * Expand the archive to the specified directory. XXX - this doesn't handle all the cases required for a Java EE app, but it's good enough for now for some performance testing
 */
private static void expand(File dir,File archive) throws Exception {
  if (!dir.mkdir())   logger.warning(Strings.get(""String_Node_Str"",dir));
  long modtime=archive.lastModified();
  ZipFile zf=new ZipFile(archive);
  Enumeration<? extends ZipEntry> e=zf.entries();
  while (e.hasMoreElements()) {
    ZipEntry ze=e.nextElement();
    File entry=new File(dir,ze.getName());
    if (ze.isDirectory()) {
      if (!entry.mkdir())       logger.warning(Strings.get(""String_Node_Str"",dir));
    }
 else {
      FileUtils.copy(zf.getInputStream(ze),new FileOutputStream(entry),0);
    }
  }
  if (!dir.setLastModified(modtime))   logger.warning(Strings.get(""String_Node_Str"",dir));
}","/** 
 * Expand the archive to the specified directory. XXX - this doesn't handle all the cases required for a Java EE app, but it's good enough for now for some performance testing
 */
private static void expand(File dir,File archive) throws Exception {
  if (!dir.mkdir())   logger.warning(Strings.get(""String_Node_Str"",dir));
  long modtime=archive.lastModified();
  ZipFile zf=new ZipFile(archive);
  try {
    Enumeration<? extends ZipEntry> e=zf.entries();
    while (e.hasMoreElements()) {
      ZipEntry ze=e.nextElement();
      File entry=new File(dir,ze.getName());
      if (ze.isDirectory()) {
        if (!entry.mkdir())         logger.warning(Strings.get(""String_Node_Str"",dir));
      }
 else {
        FileUtils.copy(zf.getInputStream(ze),new FileOutputStream(entry),0);
      }
    }
  }
  finally {
    try {
      zf.close();
    }
 catch (    IOException ex) {
    }
  }
  if (!dir.setLastModified(modtime))   logger.warning(Strings.get(""String_Node_Str"",dir));
}"
29936,"@Override protected void contextListenerStart(){
  ServletContext servletContext=getServletContext();
  WebBundleDescriptor wbd=getWebBundleDescriptor();
  try {
    servletContext.setAttribute(Constants.DEPLOYMENT_CONTEXT_ATTRIBUTE,getWebModuleConfig().getDeploymentContext());
    if (wbd != null) {
      servletContext.setAttribute(Constants.IS_DISTRIBUTABLE_ATTRIBUTE,Boolean.valueOf(wbd.isDistributable()));
    }
    servletContext.setAttribute(Constants.ENABLE_HA_ATTRIBUTE,Boolean.valueOf(webContainer.getServerConfigLookup().calculateWebAvailabilityEnabledFromConfig(this)));
    super.contextListenerStart();
  }
  finally {
    servletContext.removeAttribute(Constants.DEPLOYMENT_CONTEXT_ATTRIBUTE);
    servletContext.removeAttribute(Constants.IS_DISTRIBUTABLE_ATTRIBUTE);
    servletContext.removeAttribute(Constants.ENABLE_HA_ATTRIBUTE);
  }
  for (  ServletRegistrationImpl srImpl : servletRegisMap.values()) {
    if (srImpl instanceof DynamicWebServletRegistrationImpl) {
      DynamicWebServletRegistrationImpl dwsrImpl=(DynamicWebServletRegistrationImpl)srImpl;
      dwsrImpl.postProcessAnnotations();
    }
  }
  webContainer.afterServletContextInitializedEvent(wbd);
}","@Override protected void contextListenerStart(){
  ServletContext servletContext=getServletContext();
  WebBundleDescriptor wbd=getWebBundleDescriptor();
  try {
    servletContext.setAttribute(Constants.DEPLOYMENT_CONTEXT_ATTRIBUTE,getWebModuleConfig().getDeploymentContext());
    if (wbd != null) {
      servletContext.setAttribute(Constants.IS_DISTRIBUTABLE_ATTRIBUTE,wbd.isDistributable());
    }
    servletContext.setAttribute(Constants.ENABLE_HA_ATTRIBUTE,Boolean.valueOf(webContainer.getServerConfigLookup().calculateWebAvailabilityEnabledFromConfig(this)));
    super.contextListenerStart();
  }
  finally {
    servletContext.removeAttribute(Constants.DEPLOYMENT_CONTEXT_ATTRIBUTE);
    servletContext.removeAttribute(Constants.IS_DISTRIBUTABLE_ATTRIBUTE);
    servletContext.removeAttribute(Constants.ENABLE_HA_ATTRIBUTE);
  }
  for (  ServletRegistrationImpl srImpl : servletRegisMap.values()) {
    if (srImpl instanceof DynamicWebServletRegistrationImpl) {
      DynamicWebServletRegistrationImpl dwsrImpl=(DynamicWebServletRegistrationImpl)srImpl;
      dwsrImpl.postProcessAnnotations();
    }
  }
  webContainer.afterServletContextInitializedEvent(wbd);
}"
29937,"/** 
 * <p> This method returns the list of Names of the existing Templates. </p>
 * @param serviceType Acceptable value is ""JavaEE"", ""Database"" ""LoadBalancer"".If set to NULL, all service type will be returned.
 * @return	<code>List<String></code>  Returns the list of names of the template.
 */
public static List<String> getTemplateList(String type){
  List<String> tList=new ArrayList();
  try {
    List<String> virts=RestUtil.getChildNameList(REST_URL + ""String_Node_Str"");
    for (    String virtType : virts) {
      List<String> virtInstances=RestUtil.getChildNameList(REST_URL + ""String_Node_Str"" + virtType);
      if ((virtInstances != null) && (virtInstances.size() > 0)) {
        String templateEndpoint=REST_URL + ""String_Node_Str"" + virtType+ ""String_Node_Str""+ virtInstances.get(0)+ ""String_Node_Str"";
        if (RestUtil.doesProxyExist(templateEndpoint)) {
          Map<String,String> templateEndpoints=RestUtil.getChildMap(templateEndpoint);
          for (          String oneT : templateEndpoints.keySet()) {
            Map<String,String> tempIndexes=RestUtil.getChildMap(templateEndpoints.get(oneT) + ""String_Node_Str"");
            for (            String oneI : tempIndexes.keySet()) {
              Map attrs=RestUtil.getAttributesMap(tempIndexes.get(oneI));
              if (""String_Node_Str"".equals(attrs.get(""String_Node_Str"")) && type.equals(attrs.get(""String_Node_Str""))) {
                tList.add(oneT);
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return tList;
}","/** 
 * <p> This method returns the list of Names of the existing Templates. </p>
 * @param serviceType Acceptable value is ""JavaEE"", ""Database"" ""LoadBalancer"".If set to NULL, all service type will be returned.
 * @return	<code>List<String></code>  Returns the list of names of the template.
 */
public static List<String> getTemplateList(String type){
  List<String> tList=new ArrayList();
  try {
    List<String> virts=RestUtil.getChildNameList(REST_URL + ""String_Node_Str"");
    for (    String virtType : virts) {
      List<String> virtInstances=RestUtil.getChildNameList(REST_URL + ""String_Node_Str"" + virtType);
      if ((virtInstances != null) && (virtInstances.size() > 0)) {
        String templateEndpoint=REST_URL + ""String_Node_Str"" + virtType+ ""String_Node_Str""+ virtInstances.get(0)+ ""String_Node_Str"";
        if (RestUtil.doesProxyExist(templateEndpoint)) {
          Map<String,String> templateEndpoints=RestUtil.getChildMap(templateEndpoint);
          for (          Map.Entry<String,String> endpointE : templateEndpoints.entrySet()) {
            Map<String,String> tempIndexes=RestUtil.getChildMap(endpointE.getValue() + ""String_Node_Str"");
            for (            Map.Entry<String,String> indexE : tempIndexes.entrySet()) {
              Map attrs=RestUtil.getAttributesMap(indexE.getValue());
              if (""String_Node_Str"".equals(attrs.get(""String_Node_Str"")) && type.equals(attrs.get(""String_Node_Str""))) {
                tList.add(endpointE.getKey());
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return tList;
}"
29938,"static public File inputStreamToFile(InputStream inputStream,String origFileName) throws IOException {
  String tmpdir=System.getProperty(""String_Node_Str"");
  File tmpFile=new File(tmpdir,origFileName);
  if (tmpFile.exists()) {
    tmpFile.delete();
    tmpFile=new File(tmpdir,origFileName);
  }
  tmpFile.deleteOnExit();
  OutputStream out=new FileOutputStream(tmpFile);
  byte buf[]=new byte[4096];
  int len;
  while ((len=inputStream.read(buf)) > 0) {
    out.write(buf,0,len);
  }
  out.close();
  inputStream.close();
  System.out.println(""String_Node_Str"" + tmpFile.getAbsolutePath());
  return tmpFile;
}","static public File inputStreamToFile(InputStream inputStream,String origFileName) throws IOException {
  String tmpdir=System.getProperty(""String_Node_Str"");
  File tmpFile=new File(tmpdir,origFileName);
  if (tmpFile.exists()) {
    if (!tmpFile.delete()) {
      System.out.println(""String_Node_Str"" + tmpFile.getAbsolutePath());
    }
    tmpFile=new File(tmpdir,origFileName);
  }
  tmpFile.deleteOnExit();
  OutputStream out=new FileOutputStream(tmpFile);
  byte buf[]=new byte[4096];
  int len;
  while ((len=inputStream.read(buf)) > 0) {
    out.write(buf,0,len);
  }
  out.close();
  inputStream.close();
  System.out.println(""String_Node_Str"" + tmpFile.getAbsolutePath());
  return tmpFile;
}"
29939,"/** 
 * @param descriptor the WebServices  descriptor
 * @return <code>Result</code> the results for this assertion
 */
public Result check(WebServiceEndpoint descriptor){
  Result result=getInitializedResult();
  ComponentNameConstructor compName=getVerifierContext().getComponentNameConstructor();
  boolean pass=true;
  if (descriptor.hasHandlers()) {
    Collection allPortNames=getAllPortNamesInService(descriptor);
    List handlerChain=descriptor.getHandlerChain();
    for (Iterator it=handlerChain.iterator(); it.hasNext(); ) {
      Collection c=((WebServiceHandler)it.next()).getPortNames();
      Collection invalid=getInvalidHandlerPortNames(c,allPortNames);
      if (invalid.size() > 0) {
        result.addErrorDetails(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{compName.toString()}));
        result.failed(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""}));
        pass=false;
      }
 else {
        result.addGoodDetails(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{compName.toString()}));
        result.passed(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""}));
      }
    }
  }
 else {
    result.addNaDetails(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{compName.toString()}));
    result.notApplicable(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""}));
  }
  return result;
}","/** 
 * @param descriptor the WebServices  descriptor
 * @return <code>Result</code> the results for this assertion
 */
public Result check(WebServiceEndpoint descriptor){
  Result result=getInitializedResult();
  ComponentNameConstructor compName=getVerifierContext().getComponentNameConstructor();
  boolean pass=true;
  if (descriptor.hasHandlers()) {
    Collection allPortNames=getAllPortNamesInService(descriptor);
    List<WebServiceHandlerChain> handlerChains=descriptor.getHandlerChain();
    for (    WebServiceHandlerChain handlerChain : handlerChains) {
      Collection c=new HashSet();
      for (      WebServiceHandler wsh : handlerChain.getHandlers()) {
        c.addAll(wsh.getPortNames());
      }
      Collection invalid=getInvalidHandlerPortNames(c,allPortNames);
      if (invalid.size() > 0) {
        result.addErrorDetails(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{compName.toString()}));
        result.failed(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""}));
        pass=false;
      }
 else {
        result.addGoodDetails(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{compName.toString()}));
        result.passed(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""}));
      }
    }
  }
 else {
    result.addNaDetails(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{compName.toString()}));
    result.notApplicable(smh.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""}));
  }
  return result;
}"
29940,"/** 
 * <p> This handler adds   {@link IntegrationPoint}s of a given type to a <code>UIComponent</code> tree.  It looks for  {@link IntegrationPoint}s using the given <code>type</code>.  It then sorts the results (if any) by <code>parentId</code>, and then by priority.  It next interates over each one looking for a <code>UIComponent</code> with an <code>id</code> which matches the its own <code>parentId</code> value.  It then uses the content of the   {@link IntegrationPoint} to attempt to include the .jsf pageit refers to under the identified parent component.</p>
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=UIComponent.class,required=false)}) public static void includeIntegrations(HandlerContext handlerCtx){
  String type=(String)handlerCtx.getInputValue(""String_Node_Str"");
  UIComponent root=(UIComponent)handlerCtx.getInputValue(""String_Node_Str"");
  FacesContext ctx=handlerCtx.getFacesContext();
  List<IntegrationPoint> points=getIntegrationPoints(ctx,type);
  includeIntegrationPoints(ctx,root,getSortedIntegrationPoints(points));
}","/** 
 * <p> This handler adds   {@link IntegrationPoint}s of a given type to a <code>UIComponent</code> tree.  It looks for  {@link IntegrationPoint}s using the given <code>type</code>.  It then sorts the results (if any) by <code>parentId</code>, and then by priority.  It next interates over each one looking for a <code>UIComponent</code> with an <code>id</code> which matches the its own <code>parentId</code> value.  It then uses the content of the   {@link IntegrationPoint} to attempt to include the .jsf pageit refers to under the identified parent component.</p>
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=UIComponent.class,required=false)}) public static void includeIntegrations(HandlerContext handlerCtx){
  String type=(String)handlerCtx.getInputValue(""String_Node_Str"");
  UIComponent root=(UIComponent)handlerCtx.getInputValue(""String_Node_Str"");
  try {
    FacesContext ctx=handlerCtx.getFacesContext();
    List<IntegrationPoint> points=getIntegrationPoints(ctx,type);
    includeIntegrationPoints(ctx,root,getSortedIntegrationPoints(points));
  }
 catch (  Exception ex) {
    GuiUtil.getLogger().severe(""String_Node_Str"" + type + ""String_Node_Str""+ root.toString());
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      ex.printStackTrace();
    }
  }
}"
29941,"protected static Map<String,Object> fixKeyNames(Map<String,Object> map){
  Map<String,Object> results=new HashMap<String,Object>();
  for (  Map.Entry<String,Object> entry : map.entrySet()) {
    String key=entry.getKey().substring(0,1).toLowerCase() + entry.getKey().substring(1);
    Object value=entry.getValue();
    results.put(key,value);
  }
  return results;
}","protected static Map<String,Object> fixKeyNames(Map<String,Object> map){
  Map<String,Object> results=new HashMap<String,Object>();
  for (  Map.Entry<String,Object> entry : map.entrySet()) {
    String key=entry.getKey().substring(0,1).toLowerCase(GuiUtil.guiLocale) + entry.getKey().substring(1);
    Object value=entry.getValue();
    results.put(key,value);
  }
  return results;
}"
29942,"public static Map maskOffPassword(Map<String,Object> attrs){
  Map masked=new HashMap();
  if (attrs == null) {
    return masked;
  }
  for (  String key : attrs.keySet()) {
    if (pswdAttrList.contains(key.toLowerCase())) {
      masked.put(key,""String_Node_Str"");
    }
 else {
      masked.put(key,attrs.get(key));
    }
  }
  return masked;
}","public static Map maskOffPassword(Map<String,Object> attrs){
  Map masked=new HashMap();
  if (attrs == null) {
    return masked;
  }
  for (  Map.Entry<String,Object> e : attrs.entrySet()) {
    String key=e.getKey().toLowerCase(GuiUtil.guiLocale);
    if (pswdAttrList.contains(key)) {
      masked.put(key,""String_Node_Str"");
    }
 else {
      masked.put(key,e.getValue());
    }
  }
  return masked;
}"
29943,"/** 
 * Parses the parameters of this request. If parameters are present in both the query string and the request content, they are merged.
 */
void parseParameters(){
  if (parsedParams) {
    return;
  }
  parameters=new HashMap<String,String[]>();
synchronized (parameters) {
    parameters=copyMap(getRequest().getParameterMap());
    mergeParameters();
    parsedParams=true;
  }
}","/** 
 * Parses the parameters of this request. If parameters are present in both the query string and the request content, they are merged.
 */
void parseParameters(){
  if (parsedParams) {
    return;
  }
  parameters=new HashMap<String,String[]>();
synchronized (parameters) {
    copyMap(getRequest().getParameterMap(),parameters);
    mergeParameters();
    parsedParams=true;
  }
}"
29944,"/** 
 * Perform a shallow copy of the specified Map, and return the result.
 * @param orig Origin Map to be copied
 */
Map<String,String[]> copyMap(Map<String,String[]> orig){
  if (orig == null)   return (new HashMap<String,String[]>());
  HashMap<String,String[]> dest=new HashMap<String,String[]>();
synchronized (orig) {
    for (    Map.Entry<String,String[]> entry : orig.entrySet()) {
      dest.put(entry.getKey(),entry.getValue());
    }
  }
  return (dest);
}","/** 
 * Perform a shallow copy of the specified Map, and return the result.
 * @param orig Origin Map to be copied
 */
void copyMap(Map<String,String[]> orig,Map<String,String[]> dest){
  if (orig == null)   return;
synchronized (orig) {
    for (    Map.Entry<String,String[]> entry : orig.entrySet()) {
      dest.put(entry.getKey(),entry.getValue());
    }
  }
}"
29945,"/** 
 * Remove the specified Service from the set associated from this Server.
 * @param service The Service to be removed
 */
public void removeService(Service service){
synchronized (services) {
    int j=-1;
    for (int i=0; i < services.length; i++) {
      if (service == services[i]) {
        j=i;
        break;
      }
    }
    if (j < 0)     return;
    if (services[j] instanceof Lifecycle) {
      try {
        ((Lifecycle)services[j]).stop();
      }
 catch (      LifecycleException e) {
      }
    }
    int k=0;
    Service results[]=new Service[services.length - 1];
    for (int i=0; i < services.length; i++) {
      if (i != j)       results[k++]=services[i];
    }
    services=results;
    support.firePropertyChange(""String_Node_Str"",service,null);
  }
}","/** 
 * Remove the specified Service from the set associated from this Server.
 * @param service The Service to be removed
 */
public void removeService(Service service){
synchronized (servicesMonitor) {
    int j=-1;
    for (int i=0; i < services.length; i++) {
      if (service == services[i]) {
        j=i;
        break;
      }
    }
    if (j < 0)     return;
    if (services[j] instanceof Lifecycle) {
      try {
        ((Lifecycle)services[j]).stop();
      }
 catch (      LifecycleException e) {
      }
    }
    int k=0;
    Service results[]=new Service[services.length - 1];
    for (int i=0; i < services.length; i++) {
      if (i != j)       results[k++]=services[i];
    }
    services=results;
    support.firePropertyChange(""String_Node_Str"",service,null);
  }
}"
29946,"/** 
 * Add a new Service to the set of defined Services.
 * @param service The Service to be added
 */
public void addService(Service service){
  service.setServer(this);
synchronized (services) {
    Service results[]=new Service[services.length + 1];
    System.arraycopy(services,0,results,0,services.length);
    results[services.length]=service;
    services=results;
    if (initialized) {
      try {
        service.initialize();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,e.toString());
      }
    }
    if (started && (service instanceof Lifecycle)) {
      try {
        ((Lifecycle)service).start();
      }
 catch (      LifecycleException e) {
      }
    }
    support.firePropertyChange(""String_Node_Str"",null,service);
  }
}","/** 
 * Add a new Service to the set of defined Services.
 * @param service The Service to be added
 */
public void addService(Service service){
  service.setServer(this);
synchronized (servicesMonitor) {
    Service results[]=new Service[services.length + 1];
    System.arraycopy(services,0,results,0,services.length);
    results[services.length]=service;
    services=results;
    if (initialized) {
      try {
        service.initialize();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,e.toString());
      }
    }
    if (started && (service instanceof Lifecycle)) {
      try {
        ((Lifecycle)service).start();
      }
 catch (      LifecycleException e) {
      }
    }
    support.firePropertyChange(""String_Node_Str"",null,service);
  }
}"
29947,"/** 
 * Return the specified Service (if it exists); otherwise return <code>null</code>.
 * @param name Name of the Service to be returned
 */
public Service findService(String name){
  if (name == null) {
    return (null);
  }
synchronized (services) {
    for (int i=0; i < services.length; i++) {
      if (name.equals(services[i].getName())) {
        return (services[i]);
      }
    }
  }
  return (null);
}","/** 
 * Return the specified Service (if it exists); otherwise return <code>null</code>.
 * @param name Name of the Service to be returned
 */
public Service findService(String name){
  if (name == null) {
    return (null);
  }
synchronized (servicesMonitor) {
    for (int i=0; i < services.length; i++) {
      if (name.equals(services[i].getName())) {
        return (services[i]);
      }
    }
  }
  return (null);
}"
29948,"/** 
 * Prepare for the beginning of active use of the public methods of this component.  This method should be called before any of the public methods of this component are utilized.  It should also send a LifecycleEvent of type START_EVENT to any registered listeners.
 * @exception LifecycleException if this component detects a fatal errorthat prevents this component from being used
 */
public void start() throws LifecycleException {
  if (started) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str""));
    }
    return;
  }
  lifecycle.fireLifecycleEvent(BEFORE_START_EVENT,null);
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
synchronized (services) {
    for (int i=0; i < services.length; i++) {
      if (services[i] instanceof Lifecycle)       ((Lifecycle)services[i]).start();
    }
  }
  lifecycle.fireLifecycleEvent(AFTER_START_EVENT,null);
}","/** 
 * Prepare for the beginning of active use of the public methods of this component.  This method should be called before any of the public methods of this component are utilized.  It should also send a LifecycleEvent of type START_EVENT to any registered listeners.
 * @exception LifecycleException if this component detects a fatal errorthat prevents this component from being used
 */
public void start() throws LifecycleException {
  if (started) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str""));
    }
    return;
  }
  lifecycle.fireLifecycleEvent(BEFORE_START_EVENT,null);
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
synchronized (servicesMonitor) {
    for (int i=0; i < services.length; i++) {
      if (services[i] instanceof Lifecycle)       ((Lifecycle)services[i]).start();
    }
  }
  lifecycle.fireLifecycleEvent(AFTER_START_EVENT,null);
}"
29949,"/** 
 * Prepare for the beginning of active use of the public methods of this component.  This method should be called before any of the public methods of this component are utilized.  It should also send a LifecycleEvent of type START_EVENT to any registered listeners.
 * @exception LifecycleException if this component detects a fatal errorthat prevents this component from being used
 */
public void start() throws LifecycleException {
  if (started) {
    if (log.isLoggable(Level.INFO)) {
      log.info(sm.getString(""String_Node_Str""));
    }
  }
  if (!initialized)   init();
  lifecycle.fireLifecycleEvent(BEFORE_START_EVENT,null);
  if (log.isLoggable(Level.INFO)) {
    log.info(sm.getString(""String_Node_Str"",this.name));
  }
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container != null) {
synchronized (container) {
      if (container instanceof Lifecycle) {
        ((Lifecycle)container).start();
      }
    }
  }
synchronized (connectors) {
    for (int i=0; i < connectors.length; i++) {
      if (connectors[i] instanceof Lifecycle)       ((Lifecycle)connectors[i]).start();
    }
  }
  lifecycle.fireLifecycleEvent(AFTER_START_EVENT,null);
}","/** 
 * Prepare for the beginning of active use of the public methods of this component.  This method should be called before any of the public methods of this component are utilized.  It should also send a LifecycleEvent of type START_EVENT to any registered listeners.
 * @exception LifecycleException if this component detects a fatal errorthat prevents this component from being used
 */
public void start() throws LifecycleException {
  if (started) {
    if (log.isLoggable(Level.INFO)) {
      log.info(sm.getString(""String_Node_Str""));
    }
  }
  if (!initialized)   init();
  lifecycle.fireLifecycleEvent(BEFORE_START_EVENT,null);
  if (log.isLoggable(Level.INFO)) {
    log.info(sm.getString(""String_Node_Str"",this.name));
  }
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container != null) {
synchronized (container) {
      if (container instanceof Lifecycle) {
        ((Lifecycle)container).start();
      }
    }
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++) {
      if (connectors[i] instanceof Lifecycle)       ((Lifecycle)connectors[i]).start();
    }
  }
  lifecycle.fireLifecycleEvent(AFTER_START_EVENT,null);
}"
29950,"/** 
 * Add a new Connector to the set of defined Connectors, and associate it with this Service's Container.
 * @param connector The Connector to be added
 */
public void addConnector(Connector connector){
synchronized (connectors) {
    connector.setContainer(this.container);
    connector.setService(this);
    Connector results[]=new Connector[connectors.length + 1];
    System.arraycopy(connectors,0,results,0,connectors.length);
    results[connectors.length]=connector;
    connectors=results;
    if (initialized) {
      try {
        connector.initialize();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
    if (started && (connector instanceof Lifecycle)) {
      try {
        ((Lifecycle)connector).start();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
    support.firePropertyChange(""String_Node_Str"",null,connector);
  }
}","/** 
 * Add a new Connector to the set of defined Connectors, and associate it with this Service's Container.
 * @param connector The Connector to be added
 */
public void addConnector(Connector connector){
synchronized (connectorsMonitor) {
    connector.setContainer(this.container);
    connector.setService(this);
    Connector results[]=new Connector[connectors.length + 1];
    System.arraycopy(connectors,0,results,0,connectors.length);
    results[connectors.length]=connector;
    connectors=results;
    if (initialized) {
      try {
        connector.initialize();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
    if (started && (connector instanceof Lifecycle)) {
      try {
        ((Lifecycle)connector).start();
      }
 catch (      LifecycleException e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
    support.firePropertyChange(""String_Node_Str"",null,connector);
  }
}"
29951,"/** 
 * Gracefully terminate the active use of the public methods of this component.  This method should be the last one called on a given instance of this component.  It should also send a LifecycleEvent of type STOP_EVENT to any registered listeners.
 * @exception LifecycleException if this component detects a fatal errorthat needs to be reported
 */
public void stop() throws LifecycleException {
  if (!started) {
    return;
  }
  lifecycle.fireLifecycleEvent(BEFORE_STOP_EVENT,null);
  lifecycle.fireLifecycleEvent(STOP_EVENT,null);
  if (log.isLoggable(Level.INFO)) {
    log.info(sm.getString(""String_Node_Str"",this.name));
  }
  started=false;
synchronized (connectors) {
    for (int i=0; i < connectors.length; i++) {
      if (connectors[i] instanceof Lifecycle)       ((Lifecycle)connectors[i]).stop();
    }
  }
  if (container != null) {
synchronized (container) {
      if (container instanceof Lifecycle) {
        ((Lifecycle)container).stop();
      }
    }
  }
  lifecycle.fireLifecycleEvent(AFTER_STOP_EVENT,null);
}","/** 
 * Gracefully terminate the active use of the public methods of this component.  This method should be the last one called on a given instance of this component.  It should also send a LifecycleEvent of type STOP_EVENT to any registered listeners.
 * @exception LifecycleException if this component detects a fatal errorthat needs to be reported
 */
public void stop() throws LifecycleException {
  if (!started) {
    return;
  }
  lifecycle.fireLifecycleEvent(BEFORE_STOP_EVENT,null);
  lifecycle.fireLifecycleEvent(STOP_EVENT,null);
  if (log.isLoggable(Level.INFO)) {
    log.info(sm.getString(""String_Node_Str"",this.name));
  }
  started=false;
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++) {
      if (connectors[i] instanceof Lifecycle)       ((Lifecycle)connectors[i]).stop();
    }
  }
  if (container != null) {
synchronized (container) {
      if (container instanceof Lifecycle) {
        ((Lifecycle)container).stop();
      }
    }
  }
  lifecycle.fireLifecycleEvent(AFTER_STOP_EVENT,null);
}"
29952,"/** 
 * Invoke a pre-startup initialization. This is used to allow connectors to bind to restricted ports under Unix operating environments.
 */
public void initialize() throws LifecycleException {
  if (initialized) {
    if (log.isLoggable(Level.INFO)) {
      log.info(sm.getString(""String_Node_Str""));
    }
    return;
  }
  initialized=true;
  if (oname == null) {
    try {
      Container engine=this.getContainer();
      domain=engine.getName();
      oname=new ObjectName(domain + ""String_Node_Str"" + name);
      this.controller=oname;
      Registry.getRegistry(null,null).registerComponent(this,oname,null);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",domain),e);
    }
  }
  if (server == null) {
    ServerFactory.getServer().addService(this);
  }
synchronized (connectors) {
    for (int i=0; i < connectors.length; i++) {
      connectors[i].initialize();
    }
  }
}","/** 
 * Invoke a pre-startup initialization. This is used to allow connectors to bind to restricted ports under Unix operating environments.
 */
public void initialize() throws LifecycleException {
  if (initialized) {
    if (log.isLoggable(Level.INFO)) {
      log.info(sm.getString(""String_Node_Str""));
    }
    return;
  }
  initialized=true;
  if (oname == null) {
    try {
      Container engine=this.getContainer();
      domain=engine.getName();
      oname=new ObjectName(domain + ""String_Node_Str"" + name);
      this.controller=oname;
      Registry.getRegistry(null,null).registerComponent(this,oname,null);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",domain),e);
    }
  }
  if (server == null) {
    ServerFactory.getServer().addService(this);
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++) {
      connectors[i].initialize();
    }
  }
}"
29953,"/** 
 * Set the <code>Container</code> that handles requests for all <code>Connectors</code> associated with this Service.
 * @param container The new Container
 */
public void setContainer(Container container){
  Container oldContainer=this.container;
  if ((oldContainer != null) && (oldContainer instanceof Engine))   ((Engine)oldContainer).setService(null);
  this.container=container;
  if ((this.container != null) && (this.container instanceof Engine))   ((Engine)this.container).setService(this);
  if (started && (this.container != null) && (this.container instanceof Lifecycle)) {
    try {
      ((Lifecycle)this.container).start();
    }
 catch (    LifecycleException e) {
    }
  }
synchronized (connectors) {
    for (int i=0; i < connectors.length; i++)     connectors[i].setContainer(this.container);
  }
  if (started && (oldContainer != null) && (oldContainer instanceof Lifecycle)) {
    try {
      ((Lifecycle)oldContainer).stop();
    }
 catch (    LifecycleException e) {
    }
  }
  support.firePropertyChange(""String_Node_Str"",oldContainer,this.container);
}","/** 
 * Set the <code>Container</code> that handles requests for all <code>Connectors</code> associated with this Service.
 * @param container The new Container
 */
public void setContainer(Container container){
  Container oldContainer=this.container;
  if ((oldContainer != null) && (oldContainer instanceof Engine))   ((Engine)oldContainer).setService(null);
  this.container=container;
  if ((this.container != null) && (this.container instanceof Engine))   ((Engine)this.container).setService(this);
  if (started && (this.container != null) && (this.container instanceof Lifecycle)) {
    try {
      ((Lifecycle)this.container).start();
    }
 catch (    LifecycleException e) {
    }
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++)     connectors[i].setContainer(this.container);
  }
  if (started && (oldContainer != null) && (oldContainer instanceof Lifecycle)) {
    try {
      ((Lifecycle)oldContainer).stop();
    }
 catch (    LifecycleException e) {
    }
  }
  support.firePropertyChange(""String_Node_Str"",oldContainer,this.container);
}"
29954,"/** 
 * Remove the specified Connector from the set associated from this Service.  The removed Connector will also be disassociated from our Container.
 * @param connector The Connector to be removed
 */
public void removeConnector(Connector connector) throws LifecycleException {
synchronized (connectors) {
    int j=-1;
    for (int i=0; i < connectors.length; i++) {
      if (connector == connectors[i]) {
        j=i;
        break;
      }
    }
    if (j < 0)     return;
    ((Lifecycle)connectors[j]).stop();
    int k=0;
    Connector results[]=new Connector[connectors.length - 1];
    for (int i=0; i < connectors.length; i++) {
      if (i != j)       results[k++]=connectors[i];
    }
    connectors=results;
    support.firePropertyChange(""String_Node_Str"",connector,null);
  }
}","/** 
 * Remove the specified Connector from the set associated from this Service.  The removed Connector will also be disassociated from our Container.
 * @param connector The Connector to be removed
 */
public void removeConnector(Connector connector) throws LifecycleException {
synchronized (connectorsMonitor) {
    int j=-1;
    for (int i=0; i < connectors.length; i++) {
      if (connector == connectors[i]) {
        j=i;
        break;
      }
    }
    if (j < 0)     return;
    ((Lifecycle)connectors[j]).stop();
    int k=0;
    Connector results[]=new Connector[connectors.length - 1];
    for (int i=0; i < connectors.length; i++) {
      if (i != j)       results[k++]=connectors[i];
    }
    connectors=results;
    support.firePropertyChange(""String_Node_Str"",connector,null);
  }
}"
29955,"/** 
 * Add a new parameter to the set of parameters for this constructor.
 * @param parameter The new parameter descriptor
 */
public void addParameter(ParameterInfo parameter){
synchronized (parameters) {
    ParameterInfo results[]=new ParameterInfo[parameters.length + 1];
    System.arraycopy(parameters,0,results,0,parameters.length);
    results[parameters.length]=parameter;
    parameters=results;
    this.info=null;
  }
}","/** 
 * Add a new parameter to the set of parameters for this constructor.
 * @param parameter The new parameter descriptor
 */
public void addParameter(ParameterInfo parameter){
synchronized (parametersMonitor) {
    ParameterInfo results[]=new ParameterInfo[parameters.length + 1];
    System.arraycopy(parameters,0,results,0,parameters.length);
    results[parameters.length]=parameter;
    parameters=results;
    this.info=null;
  }
}"
29956,"/** 
 * Add a new constructor to the set of constructors for this MBean.
 * @param constructor The new constructor descriptor
 */
public void addConstructor(ConstructorInfo constructor){
synchronized (constructors) {
    ConstructorInfo results[]=new ConstructorInfo[constructors.length + 1];
    System.arraycopy(constructors,0,results,0,constructors.length);
    results[constructors.length]=constructor;
    constructors=results;
    this.info=null;
  }
}","/** 
 * Add a new constructor to the set of constructors for this MBean.
 * @param constructor The new constructor descriptor
 */
public void addConstructor(ConstructorInfo constructor){
synchronized (constructors) {
    constructors.add(constructor);
    this.info=null;
  }
}"
29957,"/** 
 * The collection of notifications for this MBean.
 */
public NotificationInfo[] getNotifications(){
  return (this.notifications);
}","/** 
 * The collection of notifications for this MBean.
 */
public NotificationInfo[] getNotifications(){
  return (this.notifications.toArray(new NotificationInfo[this.notifications.size()]));
}"
29958,"/** 
 * The collection of constructors for this MBean.
 */
public ConstructorInfo[] getConstructors(){
  return (this.constructors);
}","/** 
 * The collection of constructors for this MBean.
 */
public ConstructorInfo[] getConstructors(){
  return (this.constructors.toArray(new ConstructorInfo[this.constructors.size()]));
}"
29959,"/** 
 * Add a new notification to the set of notifications for this MBean.
 * @param notification The new notification descriptor
 */
public void addNotification(NotificationInfo notification){
synchronized (notifications) {
    NotificationInfo results[]=new NotificationInfo[notifications.length + 1];
    System.arraycopy(notifications,0,results,0,notifications.length);
    results[notifications.length]=notification;
    notifications=results;
    this.info=null;
  }
}","/** 
 * Add a new notification to the set of notifications for this MBean.
 * @param notification The new notification descriptor
 */
public void addNotification(NotificationInfo notification){
synchronized (notifications) {
    notifications.add(notification);
    this.info=null;
  }
}"
29960,"/** 
 * The collection of operations for this MBean.
 */
public OperationInfo[] getOperations(){
  return (this.operations);
}","/** 
 * The collection of operations for this MBean.
 */
public OperationInfo[] getOperations(){
  return (this.operations.toArray(new OperationInfo[this.operations.size()]));
}"
29961,"/** 
 * The collection of attributes for this MBean.
 */
public AttributeInfo[] getAttributes(){
  return (this.attributes);
}","/** 
 * The collection of attributes for this MBean.
 */
public AttributeInfo[] getAttributes(){
  return (this.attributes.toArray(new AttributeInfo[this.attributes.size()]));
}"
29962,"/** 
 * Add a new operation to the set of operations for this MBean.
 * @param operation The new operation descriptor
 */
public void addOperation(OperationInfo operation){
synchronized (operations) {
    OperationInfo results[]=new OperationInfo[operations.length + 1];
    System.arraycopy(operations,0,results,0,operations.length);
    results[operations.length]=operation;
    operations=results;
    this.info=null;
  }
}","/** 
 * Add a new operation to the set of operations for this MBean.
 * @param operation The new operation descriptor
 */
public void addOperation(OperationInfo operation){
synchronized (operations) {
    operations.add(operation);
    this.info=null;
  }
}"
29963,"/** 
 * Add a new attribute to the set of attributes for this MBean.
 * @param attribute The new attribute descriptor
 */
public void addAttribute(AttributeInfo attribute){
synchronized (attributes) {
    AttributeInfo results[]=new AttributeInfo[attributes.length + 1];
    System.arraycopy(attributes,0,results,0,attributes.length);
    results[attributes.length]=attribute;
    attributes=results;
    this.info=null;
  }
}","/** 
 * Add a new attribute to the set of attributes for this MBean.
 * @param attribute The new attribute descriptor
 */
public void addAttribute(AttributeInfo attribute){
synchronized (attributes) {
    attributes.add(attribute);
    this.info=null;
  }
}"
29964,"/** 
 * Add a new notification type to the set managed by an MBean.
 * @param notifType The new notification type
 */
public void addNotifType(String notifType){
synchronized (notifTypes) {
    String results[]=new String[notifTypes.length + 1];
    System.arraycopy(notifTypes,0,results,0,notifTypes.length);
    results[notifTypes.length]=notifType;
    notifTypes=results;
    this.info=null;
  }
}","/** 
 * Add a new notification type to the set managed by an MBean.
 * @param notifType The new notification type
 */
public void addNotifType(String notifType){
synchronized (notifTypesMonitor) {
    String results[]=new String[notifTypes.length + 1];
    System.arraycopy(notifTypes,0,results,0,notifTypes.length);
    results[notifTypes.length]=notifType;
    notifTypes=results;
    this.info=null;
  }
}"
29965,"/** 
 * Add a new parameter to the set of arguments for this operation.
 * @param parameter The new parameter descriptor
 */
public void addParameter(ParameterInfo parameter){
synchronized (parameters) {
    ParameterInfo results[]=new ParameterInfo[parameters.length + 1];
    System.arraycopy(parameters,0,results,0,parameters.length);
    results[parameters.length]=parameter;
    parameters=results;
    this.info=null;
  }
}","/** 
 * Add a new parameter to the set of arguments for this operation.
 * @param parameter The new parameter descriptor
 */
public void addParameter(ParameterInfo parameter){
synchronized (parametersMonitor) {
    ParameterInfo results[]=new ParameterInfo[parameters.length + 1];
    System.arraycopy(parameters,0,results,0,parameters.length);
    results[parameters.length]=parameter;
    parameters=results;
    this.info=null;
  }
}"
29966,"/** 
 * <p> This method returns the ""options"" that should be supplied to the factory that creates the <code>TreeNode</code> for the given tree node model object.</p> <p> Some useful options for the standard <code>TreeNode</code> component include:<p> <ul><li>text</li> <li>url</li> <li>imageURL</li> <li>target</li> <li>action<li> <li>actionListener</li> <li>expanded</li></ul> <p> See Tree / TreeNode component documentation for more details.</p>
 */
public Map<String,Object> getFactoryOptions(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  LayoutComponent desc=getLayoutComponent();
  Map<String,Object> props=new HashMap<String,Object>();
  if (nodeObject == TOP_ID) {
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
 else {
    if (nodeObject instanceof Map) {
      String key=(String)desc.getOption(""String_Node_Str"");
      if (key == null) {
        key=""String_Node_Str"";
      }
      setProperty(props,""String_Node_Str"",((Map)nodeObject).get(key));
    }
 else {
      setProperty(props,""String_Node_Str"",nodeObject);
    }
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    String tt=(String)desc.getOption(""String_Node_Str"");
    if (!GuiUtil.isEmpty(tt)) {
      setProperty(props,""String_Node_Str"",tt);
    }
    setProperty(props,""String_Node_Str"",GuiUtil.encode((String)props.get(""String_Node_Str""),null,null));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
  return props;
}","/** 
 * <p> This method returns the ""options"" that should be supplied to the factory that creates the <code>TreeNode</code> for the given tree node model object.</p> <p> Some useful options for the standard <code>TreeNode</code> component include:<p> <ul><li>text</li> <li>url</li> <li>imageURL</li> <li>target</li> <li>action<li> <li>actionListener</li> <li>expanded</li></ul> <p> See Tree / TreeNode component documentation for more details.</p>
 */
public Map<String,Object> getFactoryOptions(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  LayoutComponent desc=getLayoutComponent();
  Map<String,Object> props=new HashMap<String,Object>();
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
 else {
    if (nodeObject instanceof Map) {
      String key=(String)desc.getOption(""String_Node_Str"");
      if (key == null) {
        key=""String_Node_Str"";
      }
      setProperty(props,""String_Node_Str"",((Map)nodeObject).get(key));
    }
 else {
      setProperty(props,""String_Node_Str"",nodeObject);
    }
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    String tt=(String)desc.getOption(""String_Node_Str"");
    if (!GuiUtil.isEmpty(tt)) {
      setProperty(props,""String_Node_Str"",tt);
    }
    setProperty(props,""String_Node_Str"",GuiUtil.encode((String)props.get(""String_Node_Str""),null,null));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
  return props;
}"
29967,"/** 
 * <p> This method returns any facets that should be applied to the <code>TreeNode (comp)</code>.  Useful facets for the sun <code>TreeNode</code> component are: ""content"" and ""image"".</p> <p> Facets that already exist on <code>comp</code>, or facets that are directly added to <code>comp</code> do not need to be returned from this method.</p> <p> This implementation directly adds a ""content"" and ""image"" facet and returns <code>null</code> from this method.</p>
 * @param comp	    The tree node <code>UIComponent</code>.
 * @param nodeObject  The (model) object representing the tree node.
 */
public Map<String,UIComponent> getFacets(UIComponent comp,Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if (nodeObject == TOP_ID) {
    return null;
  }
  Properties props=new Properties();
  LayoutComponent desc=this.getLayoutComponent();
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  FacesContext ctx=FacesContext.getCurrentInstance();
  ComponentUtil compUtil=ComponentUtil.getInstance(ctx);
  UIComponent imageLink=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  imageLink.setRendererType(""String_Node_Str"");
  setProperty(props,""String_Node_Str"",comp.getAttributes().get(""String_Node_Str""));
  UIComponent link=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  link.setRendererType(""String_Node_Str"");
  Object val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    val=desc.resolveValue(ctx,link,val);
    link.getAttributes().put(""String_Node_Str"",val);
    imageLink.getAttributes().put(""String_Node_Str"",val);
  }
  val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    imageLink.getAttributes().put(""String_Node_Str"",desc.resolveValue(ctx,link,val));
  }
  List handlers=desc.getHandlers(""String_Node_Str"");
  if (handlers != null) {
    link.getAttributes().put(""String_Node_Str"",handlers);
    imageLink.getAttributes().put(""String_Node_Str"",handlers);
    ((ActionSource)link).addActionListener(CommandActionListener.getInstance());
    ((ActionSource)imageLink).addActionListener(CommandActionListener.getInstance());
  }
  return null;
}","/** 
 * <p> This method returns any facets that should be applied to the <code>TreeNode (comp)</code>.  Useful facets for the sun <code>TreeNode</code> component are: ""content"" and ""image"".</p> <p> Facets that already exist on <code>comp</code>, or facets that are directly added to <code>comp</code> do not need to be returned from this method.</p> <p> This implementation directly adds a ""content"" and ""image"" facet and returns <code>null</code> from this method.</p>
 * @param comp	    The tree node <code>UIComponent</code>.
 * @param nodeObject  The (model) object representing the tree node.
 */
public Map<String,UIComponent> getFacets(UIComponent comp,Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    return null;
  }
  Properties props=new Properties();
  LayoutComponent desc=this.getLayoutComponent();
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  FacesContext ctx=FacesContext.getCurrentInstance();
  ComponentUtil compUtil=ComponentUtil.getInstance(ctx);
  UIComponent imageLink=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  imageLink.setRendererType(""String_Node_Str"");
  setProperty(props,""String_Node_Str"",comp.getAttributes().get(""String_Node_Str""));
  UIComponent link=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  link.setRendererType(""String_Node_Str"");
  Object val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    val=desc.resolveValue(ctx,link,val);
    link.getAttributes().put(""String_Node_Str"",val);
    imageLink.getAttributes().put(""String_Node_Str"",val);
  }
  val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    imageLink.getAttributes().put(""String_Node_Str"",desc.resolveValue(ctx,link,val));
  }
  List handlers=desc.getHandlers(""String_Node_Str"");
  if (handlers != null) {
    link.getAttributes().put(""String_Node_Str"",handlers);
    imageLink.getAttributes().put(""String_Node_Str"",handlers);
    ((ActionSource)link).addActionListener(CommandActionListener.getInstance());
    ((ActionSource)imageLink).addActionListener(CommandActionListener.getInstance());
  }
  return null;
}"
29968,"/** 
 * <p> This method returns the <code>id</code> for the given tree node model object.</p>
 */
public String getId(Object nodeObject){
  if (nodeObject == null) {
    return ""String_Node_Str"";
  }
  if (nodeObject == TOP_ID) {
    return getLayoutComponent().getId(FacesContext.getCurrentInstance(),getParentUIComponent());
  }
  return GuiUtil.genId(nodeObject.toString());
}","/** 
 * <p> This method returns the <code>id</code> for the given tree node model object.</p>
 */
public String getId(Object nodeObject){
  if (nodeObject == null) {
    return ""String_Node_Str"";
  }
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    return getLayoutComponent().getId(FacesContext.getCurrentInstance(),getParentUIComponent());
  }
  return GuiUtil.genId(nodeObject.toString());
}"
29969,"/** 
 * <p> Returns child <code>TreeNode</code>s for the given <code>TreeNode</code> model Object.</p>
 */
public List getChildTreeNodeObjects(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if (nodeObject == TOP_ID) {
    if (_children != null) {
      return _children;
    }
    FacesContext ctx=FacesContext.getCurrentInstance();
    LayoutComponent desc=getLayoutComponent();
    Object val=desc.getOption(""String_Node_Str"");
    if (val == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    val=desc.resolveValue(ctx,getParentUIComponent(),val.toString());
    if ((val != null) && (val instanceof Map)) {
      _childMap=(Map<String,Object>)val;
      val=new ArrayList<Object>(_childMap.keySet());
      Collections.sort((List)val);
    }
    _children=(List<Object>)val;
    Object retVal=getLayoutComponent().dispatchHandlers(ctx,FilterTreeEvent.EVENT_TYPE,new FilterTreeEvent(getParentUIComponent(),_children));
    if ((retVal != null) && (retVal instanceof List)) {
      _children=(List<Object>)retVal;
    }
  }
 else {
    return null;
  }
  return _children;
}","/** 
 * <p> Returns child <code>TreeNode</code>s for the given <code>TreeNode</code> model Object.</p>
 */
public List getChildTreeNodeObjects(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    if (_children != null) {
      return _children;
    }
    FacesContext ctx=FacesContext.getCurrentInstance();
    LayoutComponent desc=getLayoutComponent();
    Object val=desc.getOption(""String_Node_Str"");
    if (val == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    val=desc.resolveValue(ctx,getParentUIComponent(),val.toString());
    if ((val != null) && (val instanceof Map)) {
      _childMap=(Map<String,Object>)val;
      val=new ArrayList<Object>(_childMap.keySet());
      Collections.sort((List)val);
    }
    _children=(List<Object>)val;
    Object retVal=getLayoutComponent().dispatchHandlers(ctx,FilterTreeEvent.EVENT_TYPE,new FilterTreeEvent(getParentUIComponent(),_children));
    if ((retVal != null) && (retVal instanceof List)) {
      _children=(List<Object>)retVal;
    }
  }
 else {
    return null;
  }
  return _children;
}"
29970,"/** 
 * <p> This method returns the ""options"" that should be supplied to the factory that creates the <code>TreeNode</code> for the given tree node model object.</p> <p> Some useful options for the standard <code>TreeNode</code> component include:<p> <ul><li>text</li> <li>url</li> <li>imageURL</li> <li>target</li> <li>action<li> <li>actionListener</li> <li>expanded</li></ul> <p> See Tree / TreeNode component documentation for more details.</p>
 */
public Map<String,Object> getFactoryOptions(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  LayoutComponent desc=getLayoutComponent();
  Map<String,Object> props=new HashMap<String,Object>();
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
 else {
    if (nodeObject instanceof Map) {
      String key=(String)desc.getOption(""String_Node_Str"");
      if (key == null) {
        key=""String_Node_Str"";
      }
      setProperty(props,""String_Node_Str"",((Map)nodeObject).get(key));
    }
 else {
      setProperty(props,""String_Node_Str"",nodeObject);
    }
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    String tt=(String)desc.getOption(""String_Node_Str"");
    if (!GuiUtil.isEmpty(tt)) {
      setProperty(props,""String_Node_Str"",tt);
    }
    setProperty(props,""String_Node_Str"",GuiUtil.encode((String)props.get(""String_Node_Str""),null,null));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
  return props;
}","/** 
 * <p> This method returns the ""options"" that should be supplied to the factory that creates the <code>TreeNode</code> for the given tree node model object.</p> <p> Some useful options for the standard <code>TreeNode</code> component include:<p> <ul><li>text</li> <li>url</li> <li>imageURL</li> <li>target</li> <li>action<li> <li>actionListener</li> <li>expanded</li></ul> <p> See Tree / TreeNode component documentation for more details.</p>
 */
public Map<String,Object> getFactoryOptions(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  LayoutComponent desc=getLayoutComponent();
  Map<String,Object> props=new HashMap<String,Object>();
  if ((nodeObject instanceof Integer) && nodeObject.equals(TOP_ID)) {
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
 else {
    if (nodeObject instanceof Map) {
      String key=(String)desc.getOption(""String_Node_Str"");
      if (key == null) {
        key=""String_Node_Str"";
      }
      setProperty(props,""String_Node_Str"",((Map)nodeObject).get(key));
    }
 else {
      setProperty(props,""String_Node_Str"",nodeObject);
    }
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
    String tt=(String)desc.getOption(""String_Node_Str"");
    if (!GuiUtil.isEmpty(tt)) {
      setProperty(props,""String_Node_Str"",tt);
    }
    setProperty(props,""String_Node_Str"",GuiUtil.encode((String)props.get(""String_Node_Str""),null,null));
    setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  }
  return props;
}"
29971,"/** 
 * <p> This method returns any facets that should be applied to the <code>TreeNode (comp)</code>.  Useful facets for the sun <code>TreeNode</code> component are: ""content"" and ""image"".</p> <p> Facets that already exist on <code>comp</code>, or facets that are directly added to <code>comp</code> do not need to be returned from this method.</p> <p> This implementation directly adds a ""content"" and ""image"" facet and returns <code>null</code> from this method.</p>
 * @param comp	    The tree node <code>UIComponent</code>.
 * @param nodeObject  The (model) object representing the tree node.
 */
public Map<String,UIComponent> getFacets(UIComponent comp,Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    return null;
  }
  Properties props=new Properties();
  LayoutComponent desc=this.getLayoutComponent();
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  FacesContext ctx=FacesContext.getCurrentInstance();
  ComponentUtil compUtil=ComponentUtil.getInstance(ctx);
  UIComponent imageLink=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  imageLink.setRendererType(""String_Node_Str"");
  setProperty(props,""String_Node_Str"",comp.getAttributes().get(""String_Node_Str""));
  UIComponent link=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  link.setRendererType(""String_Node_Str"");
  Object val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    val=desc.resolveValue(ctx,link,val);
    link.getAttributes().put(""String_Node_Str"",val);
    imageLink.getAttributes().put(""String_Node_Str"",val);
  }
  val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    imageLink.getAttributes().put(""String_Node_Str"",desc.resolveValue(ctx,link,val));
  }
  List handlers=desc.getHandlers(""String_Node_Str"");
  if (handlers != null) {
    link.getAttributes().put(""String_Node_Str"",handlers);
    imageLink.getAttributes().put(""String_Node_Str"",handlers);
    ((ActionSource)link).addActionListener(CommandActionListener.getInstance());
    ((ActionSource)imageLink).addActionListener(CommandActionListener.getInstance());
  }
  return null;
}","/** 
 * <p> This method returns any facets that should be applied to the <code>TreeNode (comp)</code>.  Useful facets for the sun <code>TreeNode</code> component are: ""content"" and ""image"".</p> <p> Facets that already exist on <code>comp</code>, or facets that are directly added to <code>comp</code> do not need to be returned from this method.</p> <p> This implementation directly adds a ""content"" and ""image"" facet and returns <code>null</code> from this method.</p>
 * @param comp	    The tree node <code>UIComponent</code>.
 * @param nodeObject  The (model) object representing the tree node.
 */
public Map<String,UIComponent> getFacets(UIComponent comp,Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject.equals(TOP_ID)) {
    return null;
  }
  Properties props=new Properties();
  LayoutComponent desc=this.getLayoutComponent();
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  FacesContext ctx=FacesContext.getCurrentInstance();
  ComponentUtil compUtil=ComponentUtil.getInstance(ctx);
  UIComponent imageLink=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  imageLink.setRendererType(""String_Node_Str"");
  setProperty(props,""String_Node_Str"",comp.getAttributes().get(""String_Node_Str""));
  UIComponent link=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  link.setRendererType(""String_Node_Str"");
  Object val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    val=desc.resolveValue(ctx,link,val);
    link.getAttributes().put(""String_Node_Str"",val);
    imageLink.getAttributes().put(""String_Node_Str"",val);
  }
  val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    imageLink.getAttributes().put(""String_Node_Str"",desc.resolveValue(ctx,link,val));
  }
  List handlers=desc.getHandlers(""String_Node_Str"");
  if (handlers != null) {
    link.getAttributes().put(""String_Node_Str"",handlers);
    imageLink.getAttributes().put(""String_Node_Str"",handlers);
    ((ActionSource)link).addActionListener(CommandActionListener.getInstance());
    ((ActionSource)imageLink).addActionListener(CommandActionListener.getInstance());
  }
  return null;
}"
29972,"/** 
 * <p> This method returns the <code>id</code> for the given tree node model object.</p>
 */
public String getId(Object nodeObject){
  if (nodeObject == null) {
    return ""String_Node_Str"";
  }
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    return getLayoutComponent().getId(FacesContext.getCurrentInstance(),getParentUIComponent());
  }
  return GuiUtil.genId(nodeObject.toString());
}","/** 
 * <p> This method returns the <code>id</code> for the given tree node model object.</p>
 */
public String getId(Object nodeObject){
  if (nodeObject == null) {
    return ""String_Node_Str"";
  }
  if ((nodeObject instanceof Integer) && nodeObject.equals(TOP_ID)) {
    return getLayoutComponent().getId(FacesContext.getCurrentInstance(),getParentUIComponent());
  }
  return GuiUtil.genId(nodeObject.toString());
}"
29973,"/** 
 * <p> Returns child <code>TreeNode</code>s for the given <code>TreeNode</code> model Object.</p>
 */
public List getChildTreeNodeObjects(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject == TOP_ID) {
    if (_children != null) {
      return _children;
    }
    FacesContext ctx=FacesContext.getCurrentInstance();
    LayoutComponent desc=getLayoutComponent();
    Object val=desc.getOption(""String_Node_Str"");
    if (val == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    val=desc.resolveValue(ctx,getParentUIComponent(),val.toString());
    if ((val != null) && (val instanceof Map)) {
      _childMap=(Map<String,Object>)val;
      val=new ArrayList<Object>(_childMap.keySet());
      Collections.sort((List)val);
    }
    _children=(List<Object>)val;
    Object retVal=getLayoutComponent().dispatchHandlers(ctx,FilterTreeEvent.EVENT_TYPE,new FilterTreeEvent(getParentUIComponent(),_children));
    if ((retVal != null) && (retVal instanceof List)) {
      _children=(List<Object>)retVal;
    }
  }
 else {
    return null;
  }
  return _children;
}","/** 
 * <p> Returns child <code>TreeNode</code>s for the given <code>TreeNode</code> model Object.</p>
 */
public List getChildTreeNodeObjects(Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject.equals(TOP_ID)) {
    if (_children != null) {
      return _children;
    }
    FacesContext ctx=FacesContext.getCurrentInstance();
    LayoutComponent desc=getLayoutComponent();
    Object val=desc.getOption(""String_Node_Str"");
    if (val == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    val=desc.resolveValue(ctx,getParentUIComponent(),val.toString());
    if ((val != null) && (val instanceof Map)) {
      _childMap=(Map<String,Object>)val;
      val=new ArrayList<Object>(_childMap.keySet());
      Collections.sort((List)val);
    }
    _children=(List<Object>)val;
    Object retVal=getLayoutComponent().dispatchHandlers(ctx,FilterTreeEvent.EVENT_TYPE,new FilterTreeEvent(getParentUIComponent(),_children));
    if ((retVal != null) && (retVal instanceof List)) {
      _children=(List<Object>)retVal;
    }
  }
 else {
    return null;
  }
  return _children;
}"
29974,"public RestResponse execute(Method method,String endPoint,Map<String,Object> payload,boolean needsMultiPart){
  final WebResource request=client.resource(getRestUrl() + endPoint);
  ClientResponse clientResponse;
switch (method) {
case POST:
{
      if (needsMultiPart) {
        clientResponse=request.accept(RESPONSE_TYPE).type(MediaType.MULTIPART_FORM_DATA_TYPE).post(ClientResponse.class,buildFormDataMultipart(payload));
      }
 else {
        clientResponse=request.accept(RESPONSE_TYPE).post(ClientResponse.class,buildMultivalueMap(payload));
      }
      break;
    }
case PUT:
{
    if (needsMultiPart) {
      clientResponse=request.accept(RESPONSE_TYPE).type(MediaType.MULTIPART_FORM_DATA_TYPE).put(ClientResponse.class,buildFormDataMultipart(payload));
    }
 else {
      clientResponse=request.accept(RESPONSE_TYPE).put(ClientResponse.class,buildMultivalueMap(payload));
    }
    break;
  }
case DELETE:
{
  addQueryParams(payload,request);
  clientResponse=request.queryParams(buildMultivalueMap(payload)).accept(RESPONSE_TYPE).delete(ClientResponse.class);
  break;
}
default :
{
addQueryParams(payload,request);
clientResponse=request.queryParams(buildMultivalueMap(payload)).accept(RESPONSE_TYPE).get(ClientResponse.class);
}
}
return new RestResponse(clientResponse);
}","public RestResponse execute(Method method,String endPoint,Map<String,Object> payload,boolean needsMultiPart){
  final WebResource request=client.resource(getRestUrl() + endPoint);
  ClientResponse clientResponse;
switch (method) {
case POST:
{
      if (needsMultiPart) {
        clientResponse=request.accept(RESPONSE_TYPE).type(MediaType.MULTIPART_FORM_DATA_TYPE).post(ClientResponse.class,buildFormDataMultipart(payload));
      }
 else {
        clientResponse=request.accept(RESPONSE_TYPE).post(ClientResponse.class,buildMultivalueMap(payload));
      }
      break;
    }
case PUT:
{
    if (needsMultiPart) {
      clientResponse=request.accept(RESPONSE_TYPE).type(MediaType.MULTIPART_FORM_DATA_TYPE).put(ClientResponse.class,buildFormDataMultipart(payload));
    }
 else {
      clientResponse=request.accept(RESPONSE_TYPE).put(ClientResponse.class,buildMultivalueMap(payload));
    }
    break;
  }
case DELETE:
{
  clientResponse=request.queryParams(buildMultivalueMap(payload)).accept(RESPONSE_TYPE).delete(ClientResponse.class);
  break;
}
default :
{
clientResponse=request.queryParams(buildMultivalueMap(payload)).accept(RESPONSE_TYPE).get(ClientResponse.class);
}
}
return new RestResponse(clientResponse);
}"
29975,"/** 
 * Constructs a method name from  element's bean name for a given prefix.(schema2beans convention)
 * @param elementName the given element name
 * @param prefix the given prefix
 * @return a method name formed from the given name and the prefix
 */
public static String methodNameFromBeanName(String elementName,String prefix){
  if ((null == elementName) || (null == prefix) || (prefix.length() <= 0)) {
    return elementName;
  }
  String methodName=upperCaseFirstLetter(elementName);
  return methodName=prefix + methodName;
}","/** 
 * Constructs a method name from  element's bean name for a given prefix.(schema2beans convention)
 * @param elementName the given element name
 * @param prefix the given prefix
 * @return a method name formed from the given name and the prefix
 */
public static String methodNameFromBeanName(String elementName,String prefix){
  if ((null == elementName) || (null == prefix) || (prefix.length() <= 0)) {
    return elementName;
  }
  return prefix + upperCaseFirstLetter(elementName);
}"
29976,"public static void logTimingMessage(String msg){
  logger.log(Level.INFO,""String_Node_Str"",new Object[]{sdf.format(new Date()),msg});
}","public static void logTimingMessage(String msg){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  logger.log(Level.INFO,""String_Node_Str"",new Object[]{sdf.format(new Date()),msg});
}"
29977,"public static Client getJerseyClient(){
  if (client == null) {
    client=Client.create();
  }
  return client;
}","public static synchronized Client getJerseyClient(){
  if (client == null) {
    client=Client.create();
  }
  return client;
}"
29978,"/** 
 * Generate code for Resource class corresponding to given parentBeanName and command
 * @param parentBeanName
 * @param metaData
 */
private void generateCommandResourceClass(String parentBeanName,CommandResourceMetaData metaData){
  String commandResourceClassName=getClassName(parentBeanName + getBeanName(metaData.resourcePath));
  String commandName=metaData.command;
  String commandDisplayName=metaData.resourcePath;
  String httpMethod=metaData.httpMethod;
  String commandAction=metaData.displayName;
  String baseClassName;
  if (httpMethod.equals(""String_Node_Str"")) {
    baseClassName=""String_Node_Str"";
  }
 else   if (httpMethod.equals(""String_Node_Str"")) {
    baseClassName=""String_Node_Str"";
  }
 else   if (httpMethod.equals(""String_Node_Str"")) {
    baseClassName=""String_Node_Str"";
  }
 else {
    throw new GeneratorException(""String_Node_Str"" + httpMethod);
  }
  ClassWriter writer=getClassWriter(commandResourceClassName,baseClassName,null);
  boolean isLinkedToParent=false;
  if (metaData.commandParams != null) {
    for (    CommandResourceMetaData.ParameterMetaData parameterMetaData : metaData.commandParams) {
      if (Constants.VAR_PARENT.equals(parameterMetaData.value)) {
        isLinkedToParent=true;
      }
    }
  }
  writer.createCommandResourceConstructor(commandResourceClassName,commandName,httpMethod,isLinkedToParent,metaData.commandParams,commandDisplayName,commandAction);
  writer.done();
}","/** 
 * Generate code for Resource class corresponding to given parentBeanName and command
 * @param parentBeanName
 * @param metaData
 */
private void generateCommandResourceClass(String parentBeanName,CommandResourceMetaData metaData){
  String commandResourceClassName=getClassName(parentBeanName + getBeanName(metaData.resourcePath));
  String commandName=metaData.command;
  String commandDisplayName=metaData.resourcePath;
  String httpMethod=metaData.httpMethod;
  String commandAction=metaData.displayName;
  String baseClassName;
  if (""String_Node_Str"".equals(httpMethod)) {
    baseClassName=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    baseClassName=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    baseClassName=""String_Node_Str"";
  }
 else {
    throw new GeneratorException(""String_Node_Str"" + httpMethod);
  }
  ClassWriter writer=getClassWriter(commandResourceClassName,baseClassName,null);
  boolean isLinkedToParent=false;
  if (metaData.commandParams != null) {
    for (    CommandResourceMetaData.ParameterMetaData parameterMetaData : metaData.commandParams) {
      if (Constants.VAR_PARENT.equals(parameterMetaData.value)) {
        isLinkedToParent=true;
      }
    }
  }
  writer.createCommandResourceConstructor(commandResourceClassName,commandName,httpMethod,isLinkedToParent,metaData.commandParams,commandDisplayName,commandAction);
  writer.done();
}"
29979,"public JavaClientClassWriter(final ConfigModel model,final String className,Class parent,File baseDirectory){
  this.className=className;
  File packageDir=new File(baseDirectory,Constants.CLIENT_JAVA_PACKAGE_DIR);
  packageDir.deleteOnExit();
  boolean success=packageDir.exists() || packageDir.mkdirs();
  if (!success) {
    throw new RuntimeException(""String_Node_Str"");
  }
  File classFile=new File(packageDir,className + ""String_Node_Str"");
  try {
    classFile.createNewFile();
    classFile.deleteOnExit();
    source=new BufferedWriter(new FileWriter(classFile));
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
  if (parent.isAssignableFrom(RestClientBase.class)) {
    generateRestClientBaseChild(model);
  }
 else {
    generateSimpleCtor(parent.getName());
  }
}","public JavaClientClassWriter(final ConfigModel model,final String className,Class parent,File baseDirectory){
  this.className=className;
  File packageDir=new File(baseDirectory,Constants.CLIENT_JAVA_PACKAGE_DIR);
  packageDir.deleteOnExit();
  boolean success=packageDir.exists() || packageDir.mkdirs();
  if (!success) {
    throw new RuntimeException(""String_Node_Str"");
  }
  File classFile=new File(packageDir,className + ""String_Node_Str"");
  try {
    boolean createSuccess=classFile.createNewFile();
    if (!createSuccess) {
      Logger.getLogger(JavaClientClassWriter.class.getName()).log(Level.SEVERE,""String_Node_Str"",classFile.getName());
    }
    classFile.deleteOnExit();
    source=new BufferedWriter(new FileWriter(classFile));
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
  if (parent.isAssignableFrom(RestClientBase.class)) {
    generateRestClientBaseChild(model);
  }
 else {
    generateSimpleCtor(parent.getName());
  }
}"
29980,"private void add(File source,JarOutputStream target) throws IOException {
  BufferedInputStream in=null;
  try {
    if (source.isDirectory()) {
      String name=source.getPath().replace(""String_Node_Str"",""String_Node_Str"");
      if (!name.isEmpty()) {
        if (!name.endsWith(""String_Node_Str"")) {
          name+=""String_Node_Str"";
        }
        JarEntry entry=new JarEntry(name);
        entry.setTime(source.lastModified());
        target.putNextEntry(entry);
        target.closeEntry();
      }
      for (      File nestedFile : source.listFiles()) {
        add(nestedFile,target);
      }
      return;
    }
    String sourcePath=source.getPath().replace(""String_Node_Str"",""String_Node_Str"").substring(baseDirectory.getPath().length() + 1);
    JarEntry entry=new JarEntry(sourcePath);
    entry.setTime(source.lastModified());
    target.putNextEntry(entry);
    in=new BufferedInputStream(new FileInputStream(source));
    byte[] buffer=new byte[1024];
    while (true) {
      int count=in.read(buffer);
      if (count == -1) {
        break;
      }
      target.write(buffer,0,count);
    }
    target.closeEntry();
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}","private void add(File source,JarOutputStream target) throws IOException {
  BufferedInputStream in=null;
  try {
    String sourcePath=source.getPath().replace(""String_Node_Str"",""String_Node_Str"").substring(baseDirectory.getPath().length() + 1);
    JarEntry entry=new JarEntry(sourcePath);
    entry.setTime(source.lastModified());
    target.putNextEntry(entry);
    in=new BufferedInputStream(new FileInputStream(source));
    byte[] buffer=new byte[1024];
    while (true) {
      int count=in.read(buffer);
      if (count == -1) {
        break;
      }
      target.write(buffer,0,count);
    }
    target.closeEntry();
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}"
29981,"private void compileSources(){
  try {
    List<File> files=new ArrayList<File>();
    gatherFiles(baseDirectory,files);
    JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
    StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
    List<String> options=new ArrayList<String>();
    options.add(""String_Node_Str"");
    StringBuilder sb=new StringBuilder();
    sb.append(ASClassLoaderUtil.getModuleClassPath(habitat,""String_Node_Str"",null));
    options.add(sb.toString());
    Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(files);
    boolean success=compiler.getTask(null,fileManager,null,options,null,compilationUnits).call();
    fileManager.close();
  }
 catch (  IOException ex) {
    Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
}","private void compileSources(){
  try {
    List<File> files=new ArrayList<File>();
    gatherFiles(baseDirectory,files);
    JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
    StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
    List<String> options=new ArrayList<String>();
    options.add(""String_Node_Str"");
    StringBuilder sb=new StringBuilder();
    sb.append(ASClassLoaderUtil.getModuleClassPath(habitat,""String_Node_Str"",null));
    options.add(sb.toString());
    Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(files);
    if (!compiler.getTask(null,fileManager,null,options,null,compilationUnits).call()) {
      Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.INFO,""String_Node_Str"");
    }
    fileManager.close();
  }
 catch (  IOException ex) {
    Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
29982,"private void addPom(String versionString){
  try {
    String pom=new Scanner(getClass().getResourceAsStream(""String_Node_Str"")).useDelimiter(""String_Node_Str"").next();
    pom=pom.replace(""String_Node_Str"",versionString);
    File out=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    out.deleteOnExit();
    FileWriter writer=new FileWriter(out);
    writer.write(pom);
    writer.close();
    artifacts.put(""String_Node_Str"",out.toURI());
  }
 catch (  IOException ex) {
    Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
}","private void addPom(String versionString){
  FileWriter writer=null;
  try {
    String pom=new Scanner(Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"")).useDelimiter(""String_Node_Str"").next();
    pom=pom.replace(""String_Node_Str"",versionString);
    File out=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    out.deleteOnExit();
    writer=new FileWriter(out);
    writer.write(pom);
    writer.close();
    artifacts.put(""String_Node_Str"",out.toURI());
  }
 catch (  IOException ex) {
    Logger.getLogger(JavaClientGenerator.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
}"
29983,"public PythonClientClassWriter(ConfigModel model,String className,Class parent,File baseDirectory){
  this.className=className;
  final boolean hasKey=Util.getKeyAttributeName(model) != null;
  packageDir=baseDirectory;
  packageDir.deleteOnExit();
  boolean success=packageDir.exists() || packageDir.mkdirs();
  if (!success) {
    throw new RuntimeException(""String_Node_Str"");
  }
  source=new StringBuilder(TMPL_CTOR.replace(""String_Node_Str"",className));
}","public PythonClientClassWriter(ConfigModel model,String className,Class parent,File baseDirectory){
  this.className=className;
  packageDir=baseDirectory;
  packageDir.deleteOnExit();
  boolean success=packageDir.exists() || packageDir.mkdirs();
  if (!success) {
    throw new RuntimeException(""String_Node_Str"");
  }
  source=new StringBuilder(TMPL_CTOR.replace(""String_Node_Str"",className));
}"
29984,"static public HashMap<String,String> getStringMap(Map map){
  HashMap<String,String> stringMap=new HashMap<String,String>();
  if (map != null) {
    String key=null;
    Object value=null;
    Iterator<String> iterator=map.keySet().iterator();
    while (iterator.hasNext()) {
      key=iterator.next();
      value=map.get(key);
      stringMap.put(key,value.toString());
    }
  }
  return stringMap;
}","static public HashMap<String,String> getStringMap(Map<String,Object> map){
  HashMap<String,String> stringMap=new HashMap<String,String>();
  if (map != null) {
    String key=null;
    Object value=null;
    for (    Map.Entry<String,Object> entry : map.entrySet()) {
      stringMap.put(entry.getKey(),entry.getValue().toString());
    }
  }
  return stringMap;
}"
29985,"/** 
 * Scan the content following the named tag, attaching it to the context.
 * @param x       The XmlInputReader containing the source string.
 * @param context The XmlInputObject that will include the new material.
 * @param name    The tag name.
 * @return true if the close tag is processed.
 * @throws InputException
 */
private static boolean parse(XmlInputReader reader,XmlInputObject context,String name) throws InputException {
  char character;
  int i;
  String n;
  XmlInputObject subContext;
  String string;
  Object token;
  token=reader.nextToken();
  if (token == BANG) {
    character=reader.next();
    if (character == '-') {
      if (reader.next() == '-') {
        reader.skipPast(""String_Node_Str"");
        return false;
      }
      reader.back();
    }
 else     if (character == '[') {
      token=reader.nextToken();
      if (token.equals(""String_Node_Str"")) {
        if (reader.next() == '[') {
          string=reader.nextCDATA();
          if (string.length() > 0) {
            context.put(""String_Node_Str"",string);
          }
          return false;
        }
      }
      throw reader.error(""String_Node_Str"");
    }
    i=1;
    do {
      token=reader.nextMeta();
      if (token == null) {
        throw reader.error(""String_Node_Str"");
      }
 else       if (token == LT) {
        i+=1;
      }
 else       if (token == GT) {
        i-=1;
      }
    }
 while (i > 0);
    return false;
  }
 else   if (token == QUEST) {
    reader.skipPast(""String_Node_Str"");
    return false;
  }
 else   if (token == SLASH) {
    token=reader.nextToken();
    if (name == null) {
      throw reader.error(""String_Node_Str"" + token);
    }
    if (!token.equals(name)) {
      throw reader.error(""String_Node_Str"" + name + ""String_Node_Str""+ token);
    }
    if (reader.nextToken() != GT) {
      throw reader.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (token instanceof Character) {
    throw reader.error(""String_Node_Str"");
  }
 else {
    n=(String)token;
    token=null;
    subContext=new XmlInputObject(reader);
    for (; ; ) {
      if (token == null) {
        token=reader.nextToken();
      }
      if (token instanceof String) {
        string=(String)token;
        token=reader.nextToken();
        if (token == EQ) {
          token=reader.nextToken();
          if (!(token instanceof String)) {
            throw reader.error(""String_Node_Str"");
          }
          subContext.put(string,XmlInputObject.stringToValue((String)token));
          token=null;
        }
 else {
          subContext.put(string,""String_Node_Str"");
        }
      }
 else       if (token == SLASH) {
        if (reader.nextToken() != GT) {
          throw reader.error(""String_Node_Str"");
        }
        context.putMap(n,subContext.getMap());
        return false;
      }
 else       if (token == GT) {
        for (; ; ) {
          token=reader.nextContent();
          if (token == null) {
            if (n != null) {
              throw reader.error(""String_Node_Str"" + n);
            }
            return false;
          }
 else           if (token instanceof String) {
            string=(String)token;
            if (string.length() > 0) {
              subContext.put(""String_Node_Str"",XmlInputObject.stringToValue(string));
            }
          }
 else           if (token == LT) {
            if (parse(reader,subContext,n)) {
              if (subContext.length() == 0) {
                context.put(n,""String_Node_Str"");
              }
 else               if (subContext.length() == 1 && subContext.get(""String_Node_Str"") != null) {
                context.put(n,subContext.get(""String_Node_Str""));
              }
 else {
                context.putMap(n,subContext.getMap());
              }
              return false;
            }
          }
        }
      }
 else {
        throw reader.error(""String_Node_Str"");
      }
    }
  }
}","/** 
 * Scan the content following the named tag, attaching it to the context.
 * @param x       The XmlInputReader containing the source string.
 * @param context The XmlInputObject that will include the new material.
 * @param name    The tag name.
 * @return true if the close tag is processed.
 * @throws InputException
 */
private static boolean parse(XmlInputReader reader,XmlInputObject context,String name) throws InputException {
  char character;
  int i;
  String n;
  XmlInputObject subContext;
  String string;
  Object token;
  token=reader.nextToken();
  if (BANG.equals(token)) {
    character=reader.next();
    if (character == '-') {
      if (reader.next() == '-') {
        reader.skipPast(""String_Node_Str"");
        return false;
      }
      reader.back();
    }
 else     if (character == '[') {
      token=reader.nextToken();
      if (""String_Node_Str"".equals(token)) {
        if (reader.next() == '[') {
          string=reader.nextCDATA();
          if (string.length() > 0) {
            context.put(""String_Node_Str"",string);
          }
          return false;
        }
      }
      throw reader.error(""String_Node_Str"");
    }
    i=1;
    do {
      token=reader.nextMeta();
      if (token == null) {
        throw reader.error(""String_Node_Str"");
      }
 else       if (LT.equals(token)) {
        i+=1;
      }
 else       if (GT.equals(token)) {
        i-=1;
      }
    }
 while (i > 0);
    return false;
  }
 else   if (QUEST.equals(token)) {
    reader.skipPast(""String_Node_Str"");
    return false;
  }
 else   if (SLASH.equals(token)) {
    token=reader.nextToken();
    if (name == null) {
      throw reader.error(""String_Node_Str"" + token);
    }
    if (!name.equals(token)) {
      throw reader.error(""String_Node_Str"" + name + ""String_Node_Str""+ token);
    }
    if (!GT.equals(reader.nextToken())) {
      throw reader.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (token instanceof Character) {
    throw reader.error(""String_Node_Str"");
  }
 else {
    n=(String)token;
    token=null;
    subContext=new XmlInputObject(reader);
    for (; ; ) {
      if (token == null) {
        token=reader.nextToken();
      }
      if (token instanceof String) {
        string=(String)token;
        token=reader.nextToken();
        if (EQ.equals(token)) {
          token=reader.nextToken();
          if (!(token instanceof String)) {
            throw reader.error(""String_Node_Str"");
          }
          subContext.put(string,XmlInputObject.stringToValue((String)token));
          token=null;
        }
 else {
          subContext.put(string,""String_Node_Str"");
        }
      }
 else       if (SLASH.equals(token)) {
        if (!reader.nextToken().equals(GT)) {
          throw reader.error(""String_Node_Str"");
        }
        context.putMap(n,subContext.getMap());
        return false;
      }
 else       if (GT.equals(token)) {
        for (; ; ) {
          token=reader.nextContent();
          if (token == null) {
            if (n != null) {
              throw reader.error(""String_Node_Str"" + n);
            }
            return false;
          }
 else           if (token instanceof String) {
            string=(String)token;
            if (string.length() > 0) {
              subContext.put(""String_Node_Str"",XmlInputObject.stringToValue(string));
            }
          }
 else           if (LT.equals(token)) {
            if (parse(reader,subContext,n)) {
              if (subContext.length() == 0) {
                context.put(n,""String_Node_Str"");
              }
 else               if (subContext.length() == 1 && subContext.get(""String_Node_Str"") != null) {
                context.put(n,subContext.get(""String_Node_Str""));
              }
 else {
                context.putMap(n,subContext.getMap());
              }
              return false;
            }
          }
        }
      }
 else {
        throw reader.error(""String_Node_Str"");
      }
    }
  }
}"
29986,"public static byte[] generateBtraceClientClassData(int clientID,Collection<FlashlightProbe> probes){
  String generatedClassName=""String_Node_Str"" + clientID;
  int cwFlags=ClassWriter.COMPUTE_FRAMES + ClassWriter.COMPUTE_MAXS;
  ClassWriter cw=new ClassWriter(cwFlags);
  int access=Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL;
  cw.visit(Opcodes.V1_5,access,generatedClassName,null,""String_Node_Str"",null);
  cw.visitAnnotation(""String_Node_Str"",true);
  int methodCounter=0;
  for (  FlashlightProbe probe : probes) {
    String typeDesc=""String_Node_Str"";
    StringBuilder methodDesc=new StringBuilder(""String_Node_Str"");
    methodDesc.append(probe.getProviderJavaMethodName()).append(""String_Node_Str"");
    methodDesc.append(clientID).append(""String_Node_Str"").append(methodCounter).append(""String_Node_Str"");
    methodDesc.append(""String_Node_Str"");
    typeDesc+=""String_Node_Str"";
    String delim=""String_Node_Str"";
    String typeDelim=""String_Node_Str"";
    Class[] paramTypes=probe.getParamTypes();
    for (int index=0; index < paramTypes.length; index++) {
      Class paramType=paramTypes[index];
      methodDesc.append(delim).append(paramType.getName());
      if (!(probe.hasSelf() && (index == 0))) {
        typeDesc+=typeDelim + paramType.getName();
        typeDelim=""String_Node_Str"";
      }
      delim=""String_Node_Str"";
    }
    methodDesc.append(""String_Node_Str"");
    typeDesc+=""String_Node_Str"";
    Method m=Method.getMethod(methodDesc.toString());
    GeneratorAdapter gen=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC,m,null,null,cw);
    if (probe.hasSelf()) {
      String[] paramNames=probe.getProbeParamNames();
      for (int index=0; index < paramNames.length; index++) {
        if (paramNames[index].equalsIgnoreCase(FlashlightProbe.SELF)) {
          AnnotationVisitor paramVisitor=gen.visitParameterAnnotation(index,""String_Node_Str"",true);
          paramVisitor.visitEnd();
        }
      }
    }
    AnnotationVisitor av=gen.visitAnnotation(""String_Node_Str"",true);
    av.visit(""String_Node_Str"",""String_Node_Str"" + probe.getProviderClazz().getName());
    av.visit(""String_Node_Str"",probe.getProviderJavaMethodName());
    av.visit(""String_Node_Str"",typeDesc);
    av.visitEnd();
    gen.push(probe.getId());
    gen.loadArgArray();
    gen.invokeStatic(Type.getType(ProbeRegistry.class),Method.getMethod(""String_Node_Str""));
    gen.returnValue();
    gen.endMethod();
    methodCounter++;
  }
  BtraceClientGenerator.generateConstructor(cw);
  cw.visitEnd();
  byte[] classData=cw.toByteArray();
  writeClass(classData,generatedClassName);
  return classData;
}","public static byte[] generateBtraceClientClassData(int clientID,Collection<FlashlightProbe> probes){
  String generatedClassName=""String_Node_Str"" + clientID;
  int cwFlags=ClassWriter.COMPUTE_FRAMES + ClassWriter.COMPUTE_MAXS;
  ClassWriter cw=new ClassWriter(cwFlags);
  int access=Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL;
  cw.visit(Opcodes.V1_5,access,generatedClassName,null,""String_Node_Str"",null);
  cw.visitAnnotation(""String_Node_Str"",true);
  int methodCounter=0;
  for (  FlashlightProbe probe : probes) {
    StringBuilder typeDesc=new StringBuilder(""String_Node_Str"");
    StringBuilder methodDesc=new StringBuilder(""String_Node_Str"");
    methodDesc.append(probe.getProviderJavaMethodName()).append(""String_Node_Str"");
    methodDesc.append(clientID).append(""String_Node_Str"").append(methodCounter).append(""String_Node_Str"");
    methodDesc.append(""String_Node_Str"");
    typeDesc.append(""String_Node_Str"");
    String delim=""String_Node_Str"";
    String typeDelim=""String_Node_Str"";
    Class[] paramTypes=probe.getParamTypes();
    for (int index=0; index < paramTypes.length; index++) {
      Class paramType=paramTypes[index];
      methodDesc.append(delim).append(paramType.getName());
      if (!(probe.hasSelf() && (index == 0))) {
        typeDesc.append(typeDelim).append(paramType.getName());
        typeDelim=""String_Node_Str"";
      }
      delim=""String_Node_Str"";
    }
    methodDesc.append(""String_Node_Str"");
    typeDesc.append(""String_Node_Str"");
    Method m=Method.getMethod(methodDesc.toString());
    GeneratorAdapter gen=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC,m,null,null,cw);
    if (probe.hasSelf()) {
      String[] paramNames=probe.getProbeParamNames();
      for (int index=0; index < paramNames.length; index++) {
        if (paramNames[index].equalsIgnoreCase(FlashlightProbe.SELF)) {
          AnnotationVisitor paramVisitor=gen.visitParameterAnnotation(index,""String_Node_Str"",true);
          paramVisitor.visitEnd();
        }
      }
    }
    AnnotationVisitor av=gen.visitAnnotation(""String_Node_Str"",true);
    av.visit(""String_Node_Str"",""String_Node_Str"" + probe.getProviderClazz().getName());
    av.visit(""String_Node_Str"",probe.getProviderJavaMethodName());
    av.visit(""String_Node_Str"",typeDesc.toString());
    av.visitEnd();
    gen.push(probe.getId());
    gen.loadArgArray();
    gen.invokeStatic(Type.getType(ProbeRegistry.class),Method.getMethod(""String_Node_Str""));
    gen.returnValue();
    gen.endMethod();
    methodCounter++;
  }
  BtraceClientGenerator.generateConstructor(cw);
  cw.visitEnd();
  byte[] classData=cw.toByteArray();
  writeClass(classData,generatedClassName);
  return classData;
}"
29987,"/** 
 * Pick out all methods in the listener with the correct annotation, look up the referenced Probe and return a list of all such pairs. Validate that the methods really do matchup properly.
 * @throws RuntimeException if there is any serious problem.
 * @param listenerClass
 * @return
 */
private List<MethodProbe> handleListenerAnnotations(Class listenerClass,String invokerId){
  List<MethodProbe> mp=new LinkedList<MethodProbe>();
  for (  Method method : listenerClass.getMethods()) {
    Annotation[] anns=method.getAnnotations();
    ProbeListener probeAnn=method.getAnnotation(ProbeListener.class);
    if (probeAnn == null)     continue;
    String probeString=probeAnn.value();
    if ((probeString != null) && (invokerId != null)) {
      String[] strArr=probeString.split(""String_Node_Str"");
      probeString=strArr[0] + ""String_Node_Str"" + strArr[1]+ ""String_Node_Str""+ strArr[2]+ invokerId+ ""String_Node_Str""+ strArr[3];
    }
    FlashlightProbe probe=probeRegistry.getProbe(probeString);
    if (probe == null) {
      String errStr=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",probeString);
      throw new RuntimeException(errStr);
    }
    mp.add(new MethodProbe(method,probe));
  }
  return mp;
}","/** 
 * Pick out all methods in the listener with the correct annotation, look up the referenced Probe and return a list of all such pairs. Validate that the methods really do matchup properly.
 * @throws RuntimeException if there is any serious problem.
 * @param listenerClass
 * @return
 */
private List<MethodProbe> handleListenerAnnotations(Class listenerClass,String invokerId){
  List<MethodProbe> mp=new LinkedList<MethodProbe>();
  for (  Method method : listenerClass.getMethods()) {
    ProbeListener probeAnn=method.getAnnotation(ProbeListener.class);
    if (probeAnn == null)     continue;
    String probeString=probeAnn.value();
    if ((probeString != null) && (invokerId != null)) {
      String[] strArr=probeString.split(""String_Node_Str"");
      probeString=strArr[0] + ""String_Node_Str"" + strArr[1]+ ""String_Node_Str""+ strArr[2]+ invokerId+ ""String_Node_Str""+ strArr[3];
    }
    FlashlightProbe probe=probeRegistry.getProbe(probeString);
    if (probe == null) {
      String errStr=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",probeString);
      throw new RuntimeException(errStr);
    }
    mp.add(new MethodProbe(method,probe));
  }
  return mp;
}"
29988,"public void start(BundleContext bCtx){
  this.myBundleContext=bCtx;
}","public void start(BundleContext bCtx){
}"
29989,"WindowsSystemEnvironment(){
  super();
  getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  setSystemModel(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  setSystemManufacturer(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  setSerialNumber(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  String cpuMfr=getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (cpuMfr.length() == 0) {
    String procId=System.getenv(""String_Node_Str"");
    if (procId != null) {
      String[] s=procId.split(""String_Node_Str"");
      cpuMfr=s[s.length - 1].trim();
    }
  }
  setCpuManufacturer(cpuMfr);
  setSockets(getWindowsSockets());
  setCores(getWindowsCores());
  setVirtCpus(getWindowsVirtCpus());
  setPhysMem(getWindowsPhysMem());
  setCpuName(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  setClockRate(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  try {
    File f=new File(""String_Node_Str"");
    if (f.exists()) {
      f.delete();
    }
  }
 catch (  Exception e) {
  }
}","WindowsSystemEnvironment(){
  super();
  getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  setSystemModel(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  setSystemManufacturer(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  setSerialNumber(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  String cpuMfr=getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (cpuMfr.length() == 0) {
    String procId=System.getenv(""String_Node_Str"");
    if (procId != null) {
      String[] s=procId.split(""String_Node_Str"");
      cpuMfr=s[s.length - 1].trim();
    }
  }
  setCpuManufacturer(cpuMfr);
  setSockets(getWindowsSockets());
  setCores(getWindowsCores());
  setVirtCpus(getWindowsVirtCpus());
  setPhysMem(getWindowsPhysMem());
  setCpuName(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  setClockRate(getWmicResult(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  try {
    File f=new File(""String_Node_Str"");
    if (f.exists()) {
      boolean b=f.delete();
      if (!b)       logger.finest(""String_Node_Str"" + f.getAbsolutePath());
    }
  }
 catch (  Exception e) {
    logger.finest(e.getMessage());
  }
}"
29990,"public RegistrationAccount getRegistrationAccount(RegistrationAccountConfig rc) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
  final String className=rc.getClassName();
  Class registrationClass=Class.forName(rc.getClassName());
  if (rc.getParams() != null) {
    Class[] types={RegistrationAccountConfig.class};
    Constructor constructor=registrationClass.getConstructor(types);
    return (RegistrationAccount)constructor.newInstance(new Object[]{rc});
  }
  return (RegistrationAccount)registrationClass.newInstance();
}","public RegistrationAccount getRegistrationAccount(RegistrationAccountConfig rc) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
  Class registrationClass=Class.forName(rc.getClassName());
  if (rc.getParams() != null) {
    Class[] types={RegistrationAccountConfig.class};
    Constructor constructor=registrationClass.getConstructor(types);
    return (RegistrationAccount)constructor.newInstance(new Object[]{rc});
  }
  return (RegistrationAccount)registrationClass.newInstance();
}"
29991,"public RegistrationService getRegistrationService(RegistrationServiceConfig rc) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
  final String className=rc.getClassName();
  Class registrationClass=Class.forName(rc.getClassName());
  if (rc.getParams() != null) {
    Class[] types={RegistrationServiceConfig.class};
    Constructor constructor=registrationClass.getConstructor(types);
    return (RegistrationService)constructor.newInstance(new Object[]{rc});
  }
  return (RegistrationService)registrationClass.newInstance();
}","public RegistrationService getRegistrationService(RegistrationServiceConfig rc) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
  Class registrationClass=Class.forName(rc.getClassName());
  if (rc.getParams() != null) {
    Class[] types={RegistrationServiceConfig.class};
    Constructor constructor=registrationClass.getConstructor(types);
    return (RegistrationService)constructor.newInstance(new Object[]{rc});
  }
  return (RegistrationService)registrationClass.newInstance();
}"
29992,"private String getLogMessage(LogRecord record) throws IOException {
  String logMessage=record.getMessage();
  if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
    if (record.getThrown() != null) {
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      record.getThrown().printStackTrace(pw);
      pw.close();
      logMessage=sw.toString();
      sw.close();
    }
 else {
      logMessage=""String_Node_Str"";
    }
  }
 else {
    if (logMessage.indexOf(""String_Node_Str"") >= 0 && record.getParameters() != null) {
      logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
    }
 else {
      ResourceBundle rb=getResourceBundle(record.getLoggerName());
      if (rb != null) {
        try {
          logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
        }
 catch (        java.util.MissingResourceException e) {
        }
      }
    }
  }
  return logMessage;
}","private String getLogMessage(LogRecord record) throws IOException {
  String logMessage=record.getMessage();
  if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
    if (record.getThrown() != null) {
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      record.getThrown().printStackTrace(pw);
      pw.close();
      logMessage=sw.toString();
      sw.close();
    }
 else {
      logMessage=""String_Node_Str"";
    }
  }
 else {
    if (logMessage.indexOf(""String_Node_Str"") >= 0 && logMessage.contains(""String_Node_Str"") && record.getParameters() != null) {
      logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
    }
 else {
      ResourceBundle rb=getResourceBundle(record.getLoggerName());
      if (rb != null) {
        try {
          logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
        }
 catch (        java.util.MissingResourceException e) {
        }
      }
    }
  }
  return logMessage;
}"
29993,"/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String uniformLogFormat(LogRecord record){
  try {
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    StringBuilder recordBuffer=new StringBuilder(getRecordBeginMarker() != null ? getRecordBeginMarker() : RECORD_BEGIN_MARKER);
    date.setTime(record.getMillis());
    recordBuffer.append(dateFormatter.format(date));
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLevel()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(getProductId()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLoggerName()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(record.getThreadID()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(Thread.currentThread().getName());
    recordBuffer.append(NVPAIR_SEPARATOR);
    Level level=record.getLevel();
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceClassName());
      recordBuffer.append(NVPAIR_SEPARATOR);
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceMethodName());
      recordBuffer.append(NVPAIR_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(recordNumber++).append(NVPAIR_SEPARATOR);
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String logMessage=record.getMessage();
    if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
      if (record.getThrown() != null) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
 else {
        logMessage=""String_Node_Str"";
        recordBuffer.append(logMessage);
      }
    }
 else {
      if (logMessage.indexOf(""String_Node_Str"") >= 0 && record.getParameters() != null) {
        logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
      }
 else {
        ResourceBundle rb=getResourceBundle(record.getLoggerName());
        if (rb != null) {
          try {
            logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
          }
 catch (          java.util.MissingResourceException e) {
          }
        }
      }
      recordBuffer.append(logMessage);
      if (record.getThrown() != null) {
        recordBuffer.append(LINE_SEPARATOR);
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
    }
    recordBuffer.append(getRecordEndMarker() != null ? getRecordEndMarker() : RECORD_END_MARKER).append(LINE_SEPARATOR).append(LINE_SEPARATOR);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}","/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String uniformLogFormat(LogRecord record){
  try {
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    StringBuilder recordBuffer=new StringBuilder(getRecordBeginMarker() != null ? getRecordBeginMarker() : RECORD_BEGIN_MARKER);
    date.setTime(record.getMillis());
    recordBuffer.append(dateFormatter.format(date));
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLevel()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(getProductId()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLoggerName()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(record.getThreadID()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(Thread.currentThread().getName());
    recordBuffer.append(NVPAIR_SEPARATOR);
    Level level=record.getLevel();
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceClassName());
      recordBuffer.append(NVPAIR_SEPARATOR);
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceMethodName());
      recordBuffer.append(NVPAIR_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(recordNumber++).append(NVPAIR_SEPARATOR);
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String logMessage=record.getMessage();
    if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
      if (record.getThrown() != null) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
 else {
        logMessage=""String_Node_Str"";
        recordBuffer.append(logMessage);
      }
    }
 else {
      if (logMessage.indexOf(""String_Node_Str"") >= 0 && logMessage.contains(""String_Node_Str"") && record.getParameters() != null) {
        logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
      }
 else {
        ResourceBundle rb=getResourceBundle(record.getLoggerName());
        if (rb != null) {
          try {
            logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
          }
 catch (          java.util.MissingResourceException e) {
          }
        }
      }
      recordBuffer.append(logMessage);
      if (record.getThrown() != null) {
        recordBuffer.append(LINE_SEPARATOR);
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
    }
    recordBuffer.append(getRecordEndMarker() != null ? getRecordEndMarker() : RECORD_END_MARKER).append(LINE_SEPARATOR).append(LINE_SEPARATOR);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}"
29994,"/** 
 * This method invokes wmic outside of the normal environment collection routines. An initial call to wmic can be costly in terms of time.   <code> Details of why the first call is costly can be found at: http://support.microsoft.com/kb/290216/en-us ""When you run the Wmic.exe utility for the first time, the utility compiles its .mof files into the repository. To save time during Windows installation, this operation takes place as necessary."" </code>
 */
private String getWmicResult(String alias,String verb,String property){
  String res=""String_Node_Str"";
  BufferedReader in=null;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,verb,property);
    Process p=pb.start();
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    bw.write(13);
    bw.flush();
    bw.close();
    p.waitFor();
    if (p.exitValue() == 0) {
      in=new BufferedReader(new InputStreamReader(p.getInputStream()));
      String line=null;
      while ((line=in.readLine()) != null) {
        line=line.trim();
        if (line.length() == 0) {
          continue;
        }
        res=line;
      }
      return res;
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return res.trim();
}","/** 
 * This method invokes wmic outside of the normal environment collection routines. An initial call to wmic can be costly in terms of time.   <code> Details of why the first call is costly can be found at: http://support.microsoft.com/kb/290216/en-us ""When you run the Wmic.exe utility for the first time, the utility compiles its .mof files into the repository. To save time during Windows installation, this operation takes place as necessary."" </code>
 */
private String getWmicResult(String alias,String verb,String property){
  String res=""String_Node_Str"";
  BufferedReader in=null;
  BufferedWriter bw=null;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,verb,property);
    Process p=pb.start();
    bw=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    bw.write(13);
    p.waitFor();
    if (p.exitValue() == 0) {
      in=new BufferedReader(new InputStreamReader(p.getInputStream()));
      String line=null;
      while ((line=in.readLine()) != null) {
        line=line.trim();
        if (line.length() == 0) {
          continue;
        }
        res=line;
      }
      return res;
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
    if (bw != null) {
      try {
        bw.flush();
      }
 catch (      Exception ex) {
      }
      try {
        bw.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  return res.trim();
}"
29995,"public synchronized Map<String,String> updateLoggingProperties(Map<String,String> properties,String targetConfigName) throws IOException {
  Map<String,String> m=new HashMap<String,String>();
  try {
    if (!openPropFile(targetConfigName))     return null;
    String key=null;
    for (    Map.Entry<String,String> e : properties.entrySet()) {
      if (e.getValue() == null)       continue;
      key=LoggingXMLNames.xmltoPropsMap.get(e.getKey());
      if (key == null) {
        key=e.getKey();
      }
      String property=(String)props.setProperty(key,e.getValue());
      if (e.getKey().contains(""String_Node_Str"")) {
        setWebLoggers(e.getValue());
      }
      m.put(key,property);
    }
    closePropFile();
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Exception e) {
  }
  return m;
}","public synchronized Map<String,String> updateLoggingProperties(Map<String,String> properties,String targetConfigName) throws IOException {
  Map<String,String> m=new HashMap<String,String>();
  try {
    if (!openPropFile(targetConfigName))     return null;
    String key=null;
    for (    Map.Entry<String,String> e : properties.entrySet()) {
      if (e.getValue() == null)       continue;
      key=LoggingXMLNames.xmltoPropsMap.get(e.getKey());
      if (key == null) {
        key=e.getKey();
      }
      String property=(String)props.setProperty(key,e.getValue());
      if (e.getKey().contains(""String_Node_Str"")) {
        setWebLoggers(e.getValue());
      }
      if (property == null) {
        property=(String)props.setProperty(key,e.getValue());
      }
      m.put(key,property);
      String loggerName=key.substring(0,key.lastIndexOf(""String_Node_Str""));
      Logger existing=LogManager.getLogManager().getLogger(loggerName);
      if (existing == null) {
        Logger newLogger=new Logger(loggerName,null){
        }
;
        newLogger.setLevel(Level.parse(property));
synchronized (Logger.class) {
          LogManager.getLogManager().addLogger(newLogger);
        }
      }
    }
    closePropFile();
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Exception e) {
  }
  return m;
}"
29996,"/** 
 * Initialize the loggers
 */
public void postConstruct(){
  if (System.getProperty(""String_Node_Str"") != null) {
    return;
  }
  final LogManager logMgr=LogManager.getLogManager();
  File logging=null;
  try {
    logging=getLoggingFile();
    System.setProperty(""String_Node_Str"",logging.getAbsolutePath());
    if (!logging.exists()) {
      Logger.getAnonymousLogger().log(Level.WARNING,logging.getAbsolutePath() + ""String_Node_Str"");
      String rootFolder=env.getProps().get(com.sun.enterprise.util.SystemPropertyConstants.INSTALL_ROOT_PROPERTY);
      String templateDir=rootFolder + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
      File src=new File(templateDir,ServerEnvironmentImpl.kLoggingPropertiesFileName);
      File dest=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
      FileUtils.copy(src,dest);
      logging=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
    }
    logMgr.readConfiguration();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  FormatterDelegate agentDelegate=null;
  if (agent != null) {
    agentDelegate=new AgentFormatterDelegate(agent);
  }
  String formatterClassname=null;
  try {
    Map<String,String> props=getLoggingProperties();
    formatterClassname=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    consoleHandlerFormatterDetail=formatterClassname;
    Class formatterClass=LogManagerService.class.getClassLoader().loadClass(formatterClassname);
    if (formatterClass.getName().equals(""String_Node_Str"")) {
      UniformLogFormatter formatter=(UniformLogFormatter)formatterClass.newInstance();
      String cname=""String_Node_Str"";
      recordBeginMarker=props.get(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=props.get(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=props.get(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=props.get(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatter.setRecordBeginMarker(recordBeginMarker);
      formatter.setRecordEndMarker(recordEndMarker);
      formatter.setRecordDateFormat(recordDateFormat);
      formatter.setRecordFieldSeparator(recordFieldSeparator);
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
 else     if (formatterClass.getName().equals(""String_Node_Str"")) {
      ODLLogFormatter formatter=(ODLLogFormatter)formatterClass.newInstance();
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
    serverLogFileDetail=props.get(SERVER_LOG_FILE_PROPERTY);
    handlerDetail=props.get(HANDLER_PROPERTY);
    consoleHandlerFormatterDetail=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    gffileHandlerFormatterDetail=props.get(GFFILEHANDLER_FORMATTER_PROPERTY);
    rotationOnTimeLimitInMinutesDetail=props.get(ROTATIONTIMELIMITINMINUTES_PROPERTY);
    flushFrequencyDetail=props.get(FLUSHFREQUENCY_PROPERTY);
    filterHandlerDetails=props.get(FILEHANDLER_LIMIT_PROPERTY);
    logToConsoleDetail=props.get(LOGTOCONSOLE_PROPERTY);
    rotationInTimeLimitInBytesDetail=props.get(ROTATIONLIMITINBYTES_PROPERTY);
    useSystemLoggingDetail=props.get(USESYSTEMLOGGING_PROPERTY);
    fileHandlerCountDetail=props.get(FILEHANDLER_COUNT_PROPERTY);
    retainErrorsStaticticsDetail=props.get(RETAINERRORSSTATICTICS_PROPERTY);
    log4jVersionDetail=props.get(LOG4J_VERSION_PROPERTY);
    maxHistoryFilesDetail=props.get(MAXHISTORY_FILES_PROPERTY);
    rotationOnDateChangeDetail=props.get(ROTATIONONDATECHANGE_PROPERTY);
    fileHandlerPatternDetail=props.get(FILEHANDLER_PATTERN_PROPERTY);
    fileHandlerFormatterDetail=props.get(FILEHANDLER_FORMATTER_PROPERTY);
    logFormatDateFormatDetail=props.get(LOGFORMAT_DATEFORMAT_PROPERTY);
  }
 catch (  java.io.IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  ClassNotFoundException exc) {
    logger.log(Level.SEVERE,""String_Node_Str"",formatterClassname);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Collection<Handler> handlers=habitat.getAllByContract(Handler.class);
  if (handlers != null && handlers.size() > 0) {
synchronized (logMgr) {
      Enumeration<String> loggerNames=logMgr.getLoggerNames();
      while (loggerNames.hasMoreElements()) {
        String loggerName=loggerNames.nextElement();
        logMgr.getLogger(loggerName);
        for (        Handler handler : logger.getHandlers()) {
          if (handler.getFormatter() instanceof UniformLogFormatter) {
            ((UniformLogFormatter)handler.getFormatter()).setDelegate(agentDelegate);
          }
        }
      }
      for (      Handler handler : handlers) {
        addHandler(handler);
      }
    }
  }
  try {
    Map<String,String> map=getLoggingProperties();
    String filterClassName=map.get(LoggingXMLNames.xmltoPropsMap.get(""String_Node_Str""));
    if (filterClassName != null) {
      Filter filterClass=habitat.getComponent(java.util.logging.Filter.class,filterClassName);
      Logger rootLogger=Logger.global.getParent();
      if (rootLogger != null) {
        rootLogger.setFilter(filterClass);
      }
    }
  }
 catch (  java.io.IOException ex) {
  }
  Logger _ologger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  LoggingOutputStream los=new LoggingOutputStream(_ologger,Level.INFO);
  LoggingOutputStream.LoggingPrintStream pout=los.new LoggingPrintStream(los);
  System.setOut(pout);
  Logger _elogger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  los=new LoggingOutputStream(_elogger,Level.SEVERE);
  LoggingOutputStream.LoggingPrintStream perr=los.new LoggingPrintStream(los);
  System.setErr(perr);
  if (logging != null) {
    fileMonitoring.monitors(logging,new FileMonitoring.FileChangeListener(){
      public void changed(      File changedFile){
synchronized (gfHandlers) {
          try {
            Map<String,String> props=getLoggingProperties();
            if (props == null)             return;
            Set<String> keys=props.keySet();
            for (            String a : keys) {
              if (a.endsWith(""String_Node_Str"")) {
                String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
                Level l=Level.parse(props.get(a));
                if (logMgr.getLogger(n) != null) {
                  logMgr.getLogger(n).setLevel(l);
                }
 else                 if (gfHandlers.containsKey(n)) {
                  Handler h=(Handler)gfHandlers.get(n);
                  h.setLevel(l);
                }
 else                 if (n.equals(""String_Node_Str"")) {
                  Logger logger=Logger.global.getParent();
                  Handler[] h=logger.getHandlers();
                  for (int i=0; i < h.length; i++) {
                    String name=h[i].toString();
                    if (name.contains(""String_Node_Str""))                     h[i].setLevel(l);
                  }
                }
              }
 else               if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
                if (!props.get(a).equals(serverLogFileDetail)) {
                  PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,props.get(a));
                  UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
                  List<UnprocessedChangeEvents> b=new ArrayList();
                  b.add(ucel);
                  ucl.unprocessedTransactedEvents(b);
                }
              }
 else               if (a.equals(HANDLER_PROPERTY)) {
                if (!props.get(a).equals(handlerDetail)) {
                  generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
                }
              }
 else               if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(consoleHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(gffileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
                if (!props.get(a).equals(rotationOnTimeLimitInMinutesDetail)) {
                  generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
                }
              }
 else               if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
                if (!props.get(a).equals(flushFrequencyDetail)) {
                  generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
                if (!props.get(a).equals(filterHandlerDetails)) {
                  generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
                }
              }
 else               if (a.equals(LOGTOCONSOLE_PROPERTY)) {
                if (!props.get(a).equals(logToConsoleDetail)) {
                  generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
                }
              }
 else               if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
                if (!props.get(a).equals(rotationInTimeLimitInBytesDetail)) {
                  generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
                }
              }
 else               if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
                if (!props.get(a).equals(useSystemLoggingDetail)) {
                  generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerCountDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
                }
              }
 else               if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
                if (!props.get(a).equals(retainErrorsStaticticsDetail)) {
                  generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
                }
              }
 else               if (a.equals(LOG4J_VERSION_PROPERTY)) {
                if (!props.get(a).equals(log4jVersionDetail)) {
                  generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
                }
              }
 else               if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
                if (!props.get(a).equals(maxHistoryFilesDetail)) {
                  generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
                }
              }
 else               if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
                if (!props.get(a).equals(rotationOnDateChangeDetail)) {
                  generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerPatternDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
                if (!props.get(a).equals(logFormatDateFormatDetail)) {
                  generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
                }
              }
            }
            logger.log(Level.INFO,""String_Node_Str"");
          }
 catch (          Exception e) {
            logger.log(Level.SEVERE,""String_Node_Str"",e);
          }
        }
      }
      public void deleted(      File deletedFile){
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
);
  }
  List<EarlyLogger.LevelAndMessage> catchUp=EarlyLogger.getEarlyMessages();
  if (!catchUp.isEmpty()) {
    for (    EarlyLogger.LevelAndMessage levelAndMessage : catchUp) {
      logger.log(levelAndMessage.level,levelAndMessage.msg);
    }
    catchUp.clear();
  }
  ArrayBlockingQueue<LogRecord> catchEarlyMessage=EarlyLogHandler.earlyMessages;
  while (!catchEarlyMessage.isEmpty()) {
    LogRecord logRecord=catchEarlyMessage.poll();
    if (logRecord != null) {
      logger.log(logRecord);
    }
  }
}","/** 
 * Initialize the loggers
 */
public void postConstruct(){
  if (System.getProperty(""String_Node_Str"") != null) {
    return;
  }
  final LogManager logMgr=LogManager.getLogManager();
  File logging=null;
  try {
    logging=getLoggingFile();
    System.setProperty(""String_Node_Str"",logging.getAbsolutePath());
    if (!logging.exists()) {
      Logger.getAnonymousLogger().log(Level.WARNING,logging.getAbsolutePath() + ""String_Node_Str"");
      String rootFolder=env.getProps().get(com.sun.enterprise.util.SystemPropertyConstants.INSTALL_ROOT_PROPERTY);
      String templateDir=rootFolder + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
      File src=new File(templateDir,ServerEnvironmentImpl.kLoggingPropertiesFileName);
      File dest=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
      FileUtils.copy(src,dest);
      logging=new File(env.getConfigDirPath(),ServerEnvironmentImpl.kLoggingPropertiesFileName);
    }
    logMgr.readConfiguration();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  FormatterDelegate agentDelegate=null;
  if (agent != null) {
    agentDelegate=new AgentFormatterDelegate(agent);
  }
  String formatterClassname=null;
  try {
    Map<String,String> props=getLoggingProperties();
    formatterClassname=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    consoleHandlerFormatterDetail=formatterClassname;
    Class formatterClass=LogManagerService.class.getClassLoader().loadClass(formatterClassname);
    if (formatterClass.getName().equals(""String_Node_Str"")) {
      UniformLogFormatter formatter=(UniformLogFormatter)formatterClass.newInstance();
      String cname=""String_Node_Str"";
      recordBeginMarker=props.get(cname + ""String_Node_Str"");
      if (recordBeginMarker == null || (""String_Node_Str"").equals(recordBeginMarker)) {
        recordBeginMarker=RECORD_BEGIN_MARKER;
      }
      recordEndMarker=props.get(cname + ""String_Node_Str"");
      if (recordEndMarker == null || (""String_Node_Str"").equals(recordEndMarker)) {
        recordEndMarker=RECORD_END_MARKER;
      }
      recordFieldSeparator=props.get(cname + ""String_Node_Str"");
      if (recordFieldSeparator == null || (""String_Node_Str"").equals(recordFieldSeparator) || recordFieldSeparator.length() > 1) {
        recordFieldSeparator=RECORD_FIELD_SEPARATOR;
      }
      recordDateFormat=props.get(cname + ""String_Node_Str"");
      if (recordDateFormat != null && !(""String_Node_Str"").equals(recordDateFormat)) {
        SimpleDateFormat sdf=new SimpleDateFormat(recordDateFormat);
        try {
          sdf.format(new Date());
        }
 catch (        Exception e) {
          recordDateFormat=RECORD_DATE_FORMAT;
        }
      }
 else {
        recordDateFormat=RECORD_DATE_FORMAT;
      }
      formatter.setRecordBeginMarker(recordBeginMarker);
      formatter.setRecordEndMarker(recordEndMarker);
      formatter.setRecordDateFormat(recordDateFormat);
      formatter.setRecordFieldSeparator(recordFieldSeparator);
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
 else     if (formatterClass.getName().equals(""String_Node_Str"")) {
      ODLLogFormatter formatter=(ODLLogFormatter)formatterClass.newInstance();
      for (      Handler handler : logMgr.getLogger(""String_Node_Str"").getHandlers()) {
        handler.setFormatter(formatter);
      }
    }
    serverLogFileDetail=props.get(SERVER_LOG_FILE_PROPERTY);
    handlerDetail=props.get(HANDLER_PROPERTY);
    consoleHandlerFormatterDetail=props.get(CONSOLEHANDLER_FORMATTER_PROPERTY);
    gffileHandlerFormatterDetail=props.get(GFFILEHANDLER_FORMATTER_PROPERTY);
    rotationOnTimeLimitInMinutesDetail=props.get(ROTATIONTIMELIMITINMINUTES_PROPERTY);
    flushFrequencyDetail=props.get(FLUSHFREQUENCY_PROPERTY);
    filterHandlerDetails=props.get(FILEHANDLER_LIMIT_PROPERTY);
    logToConsoleDetail=props.get(LOGTOCONSOLE_PROPERTY);
    rotationInTimeLimitInBytesDetail=props.get(ROTATIONLIMITINBYTES_PROPERTY);
    useSystemLoggingDetail=props.get(USESYSTEMLOGGING_PROPERTY);
    fileHandlerCountDetail=props.get(FILEHANDLER_COUNT_PROPERTY);
    retainErrorsStaticticsDetail=props.get(RETAINERRORSSTATICTICS_PROPERTY);
    log4jVersionDetail=props.get(LOG4J_VERSION_PROPERTY);
    maxHistoryFilesDetail=props.get(MAXHISTORY_FILES_PROPERTY);
    rotationOnDateChangeDetail=props.get(ROTATIONONDATECHANGE_PROPERTY);
    fileHandlerPatternDetail=props.get(FILEHANDLER_PATTERN_PROPERTY);
    fileHandlerFormatterDetail=props.get(FILEHANDLER_FORMATTER_PROPERTY);
    logFormatDateFormatDetail=props.get(LOGFORMAT_DATEFORMAT_PROPERTY);
  }
 catch (  java.io.IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  ClassNotFoundException exc) {
    logger.log(Level.SEVERE,""String_Node_Str"",formatterClassname);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Collection<Handler> handlers=habitat.getAllByContract(Handler.class);
  if (handlers != null && handlers.size() > 0) {
synchronized (logMgr) {
      Enumeration<String> loggerNames=logMgr.getLoggerNames();
      while (loggerNames.hasMoreElements()) {
        String loggerName=loggerNames.nextElement();
        logMgr.getLogger(loggerName);
        for (        Handler handler : logger.getHandlers()) {
          if (handler.getFormatter() instanceof UniformLogFormatter) {
            ((UniformLogFormatter)handler.getFormatter()).setDelegate(agentDelegate);
          }
        }
      }
      for (      Handler handler : handlers) {
        addHandler(handler);
      }
    }
  }
  try {
    Map<String,String> map=getLoggingProperties();
    String filterClassName=map.get(LoggingXMLNames.xmltoPropsMap.get(""String_Node_Str""));
    if (filterClassName != null) {
      Filter filterClass=habitat.getComponent(java.util.logging.Filter.class,filterClassName);
      Logger rootLogger=Logger.global.getParent();
      if (rootLogger != null) {
        rootLogger.setFilter(filterClass);
      }
    }
  }
 catch (  java.io.IOException ex) {
  }
  Logger _ologger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  LoggingOutputStream los=new LoggingOutputStream(_ologger,Level.INFO);
  LoggingOutputStream.LoggingPrintStream pout=los.new LoggingPrintStream(los);
  System.setOut(pout);
  Logger _elogger=LogDomains.getLogger(LogManagerService.class,LogDomains.STD_LOGGER);
  los=new LoggingOutputStream(_elogger,Level.SEVERE);
  LoggingOutputStream.LoggingPrintStream perr=los.new LoggingPrintStream(los);
  System.setErr(perr);
  if (logging != null) {
    fileMonitoring.monitors(logging,new FileMonitoring.FileChangeListener(){
      public void changed(      File changedFile){
synchronized (gfHandlers) {
          try {
            Map<String,String> props=getLoggingProperties();
            loggerReference=new Vector<Logger>();
            if (props == null)             return;
            Set<String> keys=props.keySet();
            for (            String a : keys) {
              if (a.endsWith(""String_Node_Str"")) {
                String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
                Level l=Level.parse(props.get(a));
                Logger appLogger=logMgr.getLogger(n);
                if (appLogger != null) {
                  appLogger.setLevel(l);
                  loggerReference.add(appLogger);
                }
 else                 if (gfHandlers.containsKey(n)) {
                  Handler h=(Handler)gfHandlers.get(n);
                  h.setLevel(l);
                }
 else                 if (n.equals(""String_Node_Str"")) {
                  Logger logger=Logger.global.getParent();
                  Handler[] h=logger.getHandlers();
                  for (int i=0; i < h.length; i++) {
                    String name=h[i].toString();
                    if (name.contains(""String_Node_Str""))                     h[i].setLevel(l);
                  }
                }
              }
 else               if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
                if (!props.get(a).equals(serverLogFileDetail)) {
                  PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,props.get(a));
                  UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
                  List<UnprocessedChangeEvents> b=new ArrayList();
                  b.add(ucel);
                  ucl.unprocessedTransactedEvents(b);
                }
              }
 else               if (a.equals(HANDLER_PROPERTY)) {
                if (!props.get(a).equals(handlerDetail)) {
                  generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
                }
              }
 else               if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(consoleHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(gffileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
                if (!props.get(a).equals(rotationOnTimeLimitInMinutesDetail)) {
                  generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
                }
              }
 else               if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
                if (!props.get(a).equals(flushFrequencyDetail)) {
                  generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
                if (!props.get(a).equals(filterHandlerDetails)) {
                  generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
                }
              }
 else               if (a.equals(LOGTOCONSOLE_PROPERTY)) {
                if (!props.get(a).equals(logToConsoleDetail)) {
                  generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
                }
              }
 else               if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
                if (!props.get(a).equals(rotationInTimeLimitInBytesDetail)) {
                  generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
                }
              }
 else               if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
                if (!props.get(a).equals(useSystemLoggingDetail)) {
                  generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerCountDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
                }
              }
 else               if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
                if (!props.get(a).equals(retainErrorsStaticticsDetail)) {
                  generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
                }
              }
 else               if (a.equals(LOG4J_VERSION_PROPERTY)) {
                if (!props.get(a).equals(log4jVersionDetail)) {
                  generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
                }
              }
 else               if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
                if (!props.get(a).equals(maxHistoryFilesDetail)) {
                  generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
                }
              }
 else               if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
                if (!props.get(a).equals(rotationOnDateChangeDetail)) {
                  generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerPatternDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
                }
              }
 else               if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
                if (!props.get(a).equals(fileHandlerFormatterDetail)) {
                  generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
                }
              }
 else               if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
                if (!props.get(a).equals(logFormatDateFormatDetail)) {
                  generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
                }
              }
            }
            logger.log(Level.INFO,""String_Node_Str"");
          }
 catch (          Exception e) {
            logger.log(Level.SEVERE,""String_Node_Str"",e);
          }
        }
      }
      public void deleted(      File deletedFile){
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
);
  }
  List<EarlyLogger.LevelAndMessage> catchUp=EarlyLogger.getEarlyMessages();
  if (!catchUp.isEmpty()) {
    for (    EarlyLogger.LevelAndMessage levelAndMessage : catchUp) {
      logger.log(levelAndMessage.level,levelAndMessage.msg);
    }
    catchUp.clear();
  }
  ArrayBlockingQueue<LogRecord> catchEarlyMessage=EarlyLogHandler.earlyMessages;
  while (!catchEarlyMessage.isEmpty()) {
    LogRecord logRecord=catchEarlyMessage.poll();
    if (logRecord != null) {
      logger.log(logRecord);
    }
  }
}"
29997,"public void changed(File changedFile){
synchronized (gfHandlers) {
    try {
      Map<String,String> props=getLoggingProperties();
      if (props == null)       return;
      Set<String> keys=props.keySet();
      for (      String a : keys) {
        if (a.endsWith(""String_Node_Str"")) {
          String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
          Level l=Level.parse(props.get(a));
          if (logMgr.getLogger(n) != null) {
            logMgr.getLogger(n).setLevel(l);
          }
 else           if (gfHandlers.containsKey(n)) {
            Handler h=(Handler)gfHandlers.get(n);
            h.setLevel(l);
          }
 else           if (n.equals(""String_Node_Str"")) {
            Logger logger=Logger.global.getParent();
            Handler[] h=logger.getHandlers();
            for (int i=0; i < h.length; i++) {
              String name=h[i].toString();
              if (name.contains(""String_Node_Str""))               h[i].setLevel(l);
            }
          }
        }
 else         if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
          if (!props.get(a).equals(serverLogFileDetail)) {
            PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,props.get(a));
            UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
            List<UnprocessedChangeEvents> b=new ArrayList();
            b.add(ucel);
            ucl.unprocessedTransactedEvents(b);
          }
        }
 else         if (a.equals(HANDLER_PROPERTY)) {
          if (!props.get(a).equals(handlerDetail)) {
            generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
          }
        }
 else         if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(consoleHandlerFormatterDetail)) {
            generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(gffileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
          if (!props.get(a).equals(rotationOnTimeLimitInMinutesDetail)) {
            generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
          }
        }
 else         if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
          if (!props.get(a).equals(flushFrequencyDetail)) {
            generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
          if (!props.get(a).equals(filterHandlerDetails)) {
            generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
          }
        }
 else         if (a.equals(LOGTOCONSOLE_PROPERTY)) {
          if (!props.get(a).equals(logToConsoleDetail)) {
            generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
          }
        }
 else         if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
          if (!props.get(a).equals(rotationInTimeLimitInBytesDetail)) {
            generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
          }
        }
 else         if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
          if (!props.get(a).equals(useSystemLoggingDetail)) {
            generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerCountDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
          }
        }
 else         if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
          if (!props.get(a).equals(retainErrorsStaticticsDetail)) {
            generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
          }
        }
 else         if (a.equals(LOG4J_VERSION_PROPERTY)) {
          if (!props.get(a).equals(log4jVersionDetail)) {
            generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
          }
        }
 else         if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
          if (!props.get(a).equals(maxHistoryFilesDetail)) {
            generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
          }
        }
 else         if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
          if (!props.get(a).equals(rotationOnDateChangeDetail)) {
            generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerPatternDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
          if (!props.get(a).equals(logFormatDateFormatDetail)) {
            generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
          }
        }
      }
      logger.log(Level.INFO,""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
}","public void changed(File changedFile){
synchronized (gfHandlers) {
    try {
      Map<String,String> props=getLoggingProperties();
      loggerReference=new Vector<Logger>();
      if (props == null)       return;
      Set<String> keys=props.keySet();
      for (      String a : keys) {
        if (a.endsWith(""String_Node_Str"")) {
          String n=a.substring(0,a.lastIndexOf(""String_Node_Str""));
          Level l=Level.parse(props.get(a));
          Logger appLogger=logMgr.getLogger(n);
          if (appLogger != null) {
            appLogger.setLevel(l);
            loggerReference.add(appLogger);
          }
 else           if (gfHandlers.containsKey(n)) {
            Handler h=(Handler)gfHandlers.get(n);
            h.setLevel(l);
          }
 else           if (n.equals(""String_Node_Str"")) {
            Logger logger=Logger.global.getParent();
            Handler[] h=logger.getHandlers();
            for (int i=0; i < h.length; i++) {
              String name=h[i].toString();
              if (name.contains(""String_Node_Str""))               h[i].setLevel(l);
            }
          }
        }
 else         if (a.equals(SERVER_LOG_FILE_PROPERTY)) {
          if (!props.get(a).equals(serverLogFileDetail)) {
            PropertyChangeEvent pce=new PropertyChangeEvent(this,a,serverLogFileDetail,props.get(a));
            UnprocessedChangeEvents ucel=new UnprocessedChangeEvents(new UnprocessedChangeEvent(pce,""String_Node_Str""));
            List<UnprocessedChangeEvents> b=new ArrayList();
            b.add(ucel);
            ucl.unprocessedTransactedEvents(b);
          }
        }
 else         if (a.equals(HANDLER_PROPERTY)) {
          if (!props.get(a).equals(handlerDetail)) {
            generateAttributeChangeEvent(HANDLER_PROPERTY,handlerDetail,props);
          }
        }
 else         if (a.equals(CONSOLEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(consoleHandlerFormatterDetail)) {
            generateAttributeChangeEvent(CONSOLEHANDLER_FORMATTER_PROPERTY,consoleHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(GFFILEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(gffileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(GFFILEHANDLER_FORMATTER_PROPERTY,gffileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(ROTATIONTIMELIMITINMINUTES_PROPERTY)) {
          if (!props.get(a).equals(rotationOnTimeLimitInMinutesDetail)) {
            generateAttributeChangeEvent(ROTATIONTIMELIMITINMINUTES_PROPERTY,rotationOnTimeLimitInMinutesDetail,props);
          }
        }
 else         if (a.equals(FLUSHFREQUENCY_PROPERTY)) {
          if (!props.get(a).equals(flushFrequencyDetail)) {
            generateAttributeChangeEvent(FLUSHFREQUENCY_PROPERTY,flushFrequencyDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_LIMIT_PROPERTY)) {
          if (!props.get(a).equals(filterHandlerDetails)) {
            generateAttributeChangeEvent(FILEHANDLER_LIMIT_PROPERTY,filterHandlerDetails,props);
          }
        }
 else         if (a.equals(LOGTOCONSOLE_PROPERTY)) {
          if (!props.get(a).equals(logToConsoleDetail)) {
            generateAttributeChangeEvent(LOGTOCONSOLE_PROPERTY,logToConsoleDetail,props);
          }
        }
 else         if (a.equals(ROTATIONLIMITINBYTES_PROPERTY)) {
          if (!props.get(a).equals(rotationInTimeLimitInBytesDetail)) {
            generateAttributeChangeEvent(ROTATIONLIMITINBYTES_PROPERTY,rotationInTimeLimitInBytesDetail,props);
          }
        }
 else         if (a.equals(USESYSTEMLOGGING_PROPERTY)) {
          if (!props.get(a).equals(useSystemLoggingDetail)) {
            generateAttributeChangeEvent(USESYSTEMLOGGING_PROPERTY,useSystemLoggingDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_COUNT_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerCountDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_COUNT_PROPERTY,fileHandlerCountDetail,props);
          }
        }
 else         if (a.equals(RETAINERRORSSTATICTICS_PROPERTY)) {
          if (!props.get(a).equals(retainErrorsStaticticsDetail)) {
            generateAttributeChangeEvent(RETAINERRORSSTATICTICS_PROPERTY,retainErrorsStaticticsDetail,props);
          }
        }
 else         if (a.equals(LOG4J_VERSION_PROPERTY)) {
          if (!props.get(a).equals(log4jVersionDetail)) {
            generateAttributeChangeEvent(LOG4J_VERSION_PROPERTY,log4jVersionDetail,props);
          }
        }
 else         if (a.equals(MAXHISTORY_FILES_PROPERTY)) {
          if (!props.get(a).equals(maxHistoryFilesDetail)) {
            generateAttributeChangeEvent(MAXHISTORY_FILES_PROPERTY,maxHistoryFilesDetail,props);
          }
        }
 else         if (a.equals(ROTATIONONDATECHANGE_PROPERTY)) {
          if (!props.get(a).equals(rotationOnDateChangeDetail)) {
            generateAttributeChangeEvent(ROTATIONONDATECHANGE_PROPERTY,rotationOnDateChangeDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_PATTERN_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerPatternDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_PATTERN_PROPERTY,fileHandlerPatternDetail,props);
          }
        }
 else         if (a.equals(FILEHANDLER_FORMATTER_PROPERTY)) {
          if (!props.get(a).equals(fileHandlerFormatterDetail)) {
            generateAttributeChangeEvent(FILEHANDLER_FORMATTER_PROPERTY,fileHandlerFormatterDetail,props);
          }
        }
 else         if (a.equals(LOGFORMAT_DATEFORMAT_PROPERTY)) {
          if (!props.get(a).equals(logFormatDateFormatDetail)) {
            generateAttributeChangeEvent(LOGFORMAT_DATEFORMAT_PROPERTY,logFormatDateFormatDetail,props);
          }
        }
      }
      logger.log(Level.INFO,""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
}"
29998,"private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.exists() && !baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
}","private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.exists() && !baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      if (!outputFile.exists() && !outputFile.mkdirs()) {
        throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
      }
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
}"
29999,"public ApplicationInfo deploy(Collection<Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context));
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=getVirtualServers(commandParams.target);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  ProgressTracker tracker=new ProgressTracker(){
    public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    ClassLoaderHierarchy clh=habitat.getByContract(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      if (sniffers != null && logger.isLoggable(Level.FINE)) {
        for (        Sniffer sniffer : sniffers) {
          logger.fine(""String_Node_Str"" + sniffer.getModuleType());
        }
      }
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,interceptorException.getMessage(),interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,prepareException.getMessage(),prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,e.getMessage(),e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}","public ApplicationInfo deploy(Collection<Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context));
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=getVirtualServers(commandParams.target);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  ProgressTracker tracker=new ProgressTracker(){
    @Override public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    ClassLoaderHierarchy clh=habitat.getByContract(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      if (sniffers != null && logger.isLoggable(Level.FINE)) {
        for (        Sniffer sniffer : sniffers) {
          logger.fine(""String_Node_Str"" + sniffer.getModuleType());
        }
      }
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,interceptorException.getMessage(),interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,prepareException.getMessage(),prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,e.getMessage(),e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}"
30000,"public void actOn(Logger logger){
  for (  EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
    try {
      module.stop(context);
    }
 catch (    Exception e) {
    }
  }
  try {
    PreDestroy.class.cast(context).preDestroy();
  }
 catch (  Exception e) {
  }
  for (  EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
    try {
      module.unload(context);
    }
 catch (    Exception e) {
    }
  }
  try {
    ApplicationInfo appInfo=appRegistry.get(appName);
    if (appInfo != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
    }
  }
 catch (  Exception e) {
  }
  for (  EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
    try {
      module.clean(context);
    }
 catch (    Exception e) {
    }
  }
  if (!commandParams.keepfailedstubs) {
    try {
      context.clean();
    }
 catch (    Exception e) {
    }
  }
  appRegistry.remove(appName);
}","@Override public void actOn(Logger logger){
  for (  EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
    try {
      module.stop(context);
    }
 catch (    Exception e) {
    }
  }
  try {
    PreDestroy.class.cast(context).preDestroy();
  }
 catch (  Exception e) {
  }
  for (  EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
    try {
      module.unload(context);
    }
 catch (    Exception e) {
    }
  }
  try {
    ApplicationInfo appInfo=appRegistry.get(appName);
    if (appInfo != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
    }
  }
 catch (  Exception e) {
  }
  for (  EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
    try {
      module.clean(context);
    }
 catch (    Exception e) {
    }
  }
  if (!commandParams.keepfailedstubs) {
    try {
      context.clean();
    }
 catch (    Exception e) {
    }
  }
  appRegistry.remove(appName);
}"
