record_number,buggy_code,fixed_code
68001,"public static XMLDescriptor buildDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(MWAbstractCompositeMapping.class);
  descriptor.descriptorIsAggregate();
  descriptor.getInheritancePolicy().setParentClass(MWMapping.class);
  XMLCompositeObjectMapping referenceDescriptorMapping=new XMLCompositeObjectMapping();
  referenceDescriptorMapping.setAttributeName(""String_Node_Str"");
  referenceDescriptorMapping.setGetMethodName(""String_Node_Str"");
  referenceDescriptorMapping.setSetMethodName(""String_Node_Str"");
  referenceDescriptorMapping.setXPath(""String_Node_Str"");
  referenceDescriptorMapping.setReferenceClass(MWDescriptorHandle.class);
  descriptor.addMapping(referenceDescriptorMapping);
  XMLCompositeObjectMapping xmlFieldMapping=new XMLCompositeObjectMapping();
  xmlFieldMapping.setReferenceClass(MWXmlField.class);
  xmlFieldMapping.setAttributeName(""String_Node_Str"");
  xmlFieldMapping.setGetMethodName(""String_Node_Str"");
  xmlFieldMapping.setSetMethodName(""String_Node_Str"");
  xmlFieldMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(xmlFieldMapping);
  XMLCompositeObjectMapping elementTypeHandleMapping=new XMLCompositeObjectMapping();
  elementTypeHandleMapping.setAttributeName(""String_Node_Str"");
  elementTypeHandleMapping.setGetMethodName(""String_Node_Str"");
  elementTypeHandleMapping.setSetMethodName(""String_Node_Str"");
  elementTypeHandleMapping.setReferenceClass(MWNamedSchemaComponentHandle.class);
  elementTypeHandleMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(elementTypeHandleMapping);
  return descriptor;
}","public static XMLDescriptor buildDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(MWAbstractCompositeMapping.class);
  descriptor.descriptorIsAggregate();
  descriptor.getInheritancePolicy().setParentClass(MWMapping.class);
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  XMLCompositeObjectMapping referenceDescriptorMapping=new XMLCompositeObjectMapping();
  referenceDescriptorMapping.setAttributeName(""String_Node_Str"");
  referenceDescriptorMapping.setGetMethodName(""String_Node_Str"");
  referenceDescriptorMapping.setSetMethodName(""String_Node_Str"");
  referenceDescriptorMapping.setXPath(""String_Node_Str"");
  referenceDescriptorMapping.setReferenceClass(MWDescriptorHandle.class);
  descriptor.addMapping(referenceDescriptorMapping);
  XMLCompositeObjectMapping xmlFieldMapping=new XMLCompositeObjectMapping();
  xmlFieldMapping.setReferenceClass(MWXmlField.class);
  xmlFieldMapping.setAttributeName(""String_Node_Str"");
  xmlFieldMapping.setGetMethodName(""String_Node_Str"");
  xmlFieldMapping.setSetMethodName(""String_Node_Str"");
  xmlFieldMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(xmlFieldMapping);
  XMLCompositeObjectMapping elementTypeHandleMapping=new XMLCompositeObjectMapping();
  elementTypeHandleMapping.setAttributeName(""String_Node_Str"");
  elementTypeHandleMapping.setGetMethodName(""String_Node_Str"");
  elementTypeHandleMapping.setSetMethodName(""String_Node_Str"");
  elementTypeHandleMapping.setReferenceClass(MWNamedSchemaComponentHandle.class);
  elementTypeHandleMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(elementTypeHandleMapping);
  XMLCompositeObjectMapping containerAccessorMapping=new XMLCompositeObjectMapping();
  containerAccessorMapping.setAttributeName(""String_Node_Str"");
  containerAccessorMapping.setGetMethodName(""String_Node_Str"");
  containerAccessorMapping.setSetMethodName(""String_Node_Str"");
  containerAccessorMapping.setReferenceClass(MWContainerAccessor.class);
  containerAccessorMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(containerAccessorMapping);
  return descriptor;
}"
68002,"protected void initialize(Node parent){
  super.initialize(parent);
  this.referenceDescriptorHandle=new MWDescriptorHandle(this,this.buildReferenceDescriptorScrubber());
  this.xmlField=new MWXmlField(this);
  this.elementTypeHandle=new MWNamedSchemaComponentHandle(this,this.buildElementTypeScrubber());
}","protected void initialize(Node parent){
  super.initialize(parent);
  this.referenceDescriptorHandle=new MWDescriptorHandle(this,this.buildReferenceDescriptorScrubber());
  this.xmlField=new MWXmlField(this);
  this.elementTypeHandle=new MWNamedSchemaComponentHandle(this,this.buildElementTypeScrubber());
  this.containerAccessor=new MWNullContainerAccessor(this);
  this.usesContainerAccessor=new Boolean(false);
}"
68003,"/** 
 * INTERNAL: Register a ReferenceResolver as an event listener on the session,  if one doesn't already exist.  Each source/target field will have a namespace resolver set as well. 
 * @see org.eclipse.persistence.internal.oxm.ReferenceResolver
 * @see org.eclipse.persistence.oxm.NamespaceResolver
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getReferenceClass() == null) {
    setReferenceClass(session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(getReferenceClassName()));
  }
  super.initialize(session);
  ReferenceResolver resolver=new ReferenceResolver();
  if (!(session.getEventManager().getListeners().contains(resolver))) {
    session.getEventManager().addListener(resolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.get(sourceField);
    targetField=(XMLField)targetDescriptor.buildField(targetField);
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
}","/** 
 * INTERNAL: Register a ReferenceResolver as an event listener on the session,  if one doesn't already exist.  Each source/target field will have a namespace resolver set as well. 
 * @see org.eclipse.persistence.internal.oxm.ReferenceResolver
 * @see org.eclipse.persistence.oxm.NamespaceResolver
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (getReferenceClass() == null) {
    setReferenceClass(session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(getReferenceClassName()));
  }
  super.initialize(session);
  ReferenceListener listener=new ReferenceListener();
  if (!(session.getEventManager().getListeners().contains(listener))) {
    session.getEventManager().addListener(listener);
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.get(sourceField);
    targetField=(XMLField)targetDescriptor.buildField(targetField);
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
}"
68004,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SingleAttributeEmptyKeyTestCases.class);
  suite.addTestSuite(SingleAttributeInvalidKeyTestCases.class);
  suite.addTestSuite(SingleAttributeNullKeyTestCases.class);
  suite.addTestSuite(SingleAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementEmptyKeyTestCases.class);
  suite.addTestSuite(SingleElementInvalidKeyTestCases.class);
  suite.addTestSuite(SingleElementNullKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyTestCases.class);
  suite.addTestSuite(NonStringKeyTypeTestCases.class);
  suite.addTestSuite(MultipleSourceTestCases.class);
  suite.addTestSuite(NestedAttributeKeyTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SingleAttributeEmptyKeyTestCases.class);
  suite.addTestSuite(SingleAttributeInvalidKeyTestCases.class);
  suite.addTestSuite(SingleAttributeNullKeyTestCases.class);
  suite.addTestSuite(SingleAttributeKeyTestCases.class);
  suite.addTestSuite(SingleElementEmptyKeyTestCases.class);
  suite.addTestSuite(SingleElementInvalidKeyTestCases.class);
  suite.addTestSuite(SingleElementNullKeyTestCases.class);
  suite.addTestSuite(SingleElementKeyTestCases.class);
  suite.addTestSuite(NonStringKeyTypeTestCases.class);
  suite.addTestSuite(MultipleSourceTestCases.class);
  suite.addTestSuite(NestedAttributeKeyTestCases.class);
  suite.addTestSuite(MultithreadedTestCases.class);
  return suite;
}"
68005,"/** 
 * INTERNAL: Merge changes from the source to the target object. This merge is only called when a changeSet for the target does not exist or the target is uninitialized
 */
public void mergeIntoObject(Object target,boolean isTargetUnInitialized,Object source,MergeManager mergeManager){
  if (isTargetUnInitialized) {
    if (mergeManager.shouldMergeWorkingCopyIntoOriginal() && (!isAttributeValueInstantiated(source))) {
      setAttributeValueInObject(target,getIndirectionPolicy().getOriginalIndirectionObject(getAttributeValueFromObject(source),mergeManager.getSession()));
      return;
    }
  }
  if (!shouldMergeCascadeReference(mergeManager)) {
    return;
  }
  if (mergeManager.shouldRefreshRemoteObject() && usesIndirection()) {
    mergeRemoteValueHolder(target,source,mergeManager);
    return;
  }
  if (mergeManager.shouldMergeOriginalIntoWorkingCopy()) {
    if (!isAttributeValueInstantiated(target)) {
      Object attributeValue=getAttributeValueFromObject(source);
      Object clonedAttributeValue=getIndirectionPolicy().cloneAttribute(attributeValue,source,target,(UnitOfWorkImpl)mergeManager.getSession(),false);
      setAttributeValueInObject(target,clonedAttributeValue);
      return;
    }
  }
 else   if (!isAttributeValueInstantiatedOrChanged(source)) {
    return;
  }
  Object valueOfSource=getRealCollectionAttributeValueFromObject(source,mergeManager.getSession());
  AbstractSession mergeSession=mergeManager.getSession();
  Object valueOfTarget=getRealCollectionAttributeValueFromObject(target,mergeSession);
  ContainerPolicy containerPolicy=getContainerPolicy();
  containerPolicy.sizeFor(valueOfTarget);
  boolean fireChangeEvents=false;
  if (!mergeManager.shouldMergeOriginalIntoWorkingCopy()) {
    Object newContainer=containerPolicy.containerInstance(containerPolicy.sizeFor(valueOfSource));
    if ((this.descriptor.getObjectChangePolicy().isObjectChangeTrackingPolicy()) && (target instanceof ChangeTracker) && (((ChangeTracker)target)._persistence_getPropertyChangeListener() != null)) {
      fireChangeEvents=true;
      Object iterator=containerPolicy.iteratorFor(valueOfTarget);
      PropertyChangeListener listener=((ChangeTracker)target)._persistence_getPropertyChangeListener();
      while (containerPolicy.hasNext(iterator)) {
        ((ObjectChangeListener)listener).internalPropertyChange(new CollectionChangeEvent(target,getAttributeName(),valueOfTarget,containerPolicy.next(iterator,mergeSession),CollectionChangeEvent.REMOVE));
      }
      if (newContainer instanceof ChangeTracker) {
        ((CollectionChangeTracker)newContainer).setTrackedAttributeName(getAttributeName());
        ((CollectionChangeTracker)newContainer)._persistence_setPropertyChangeListener(listener);
      }
      if (valueOfTarget instanceof ChangeTracker) {
        ((ChangeTracker)valueOfTarget)._persistence_setPropertyChangeListener(null);
      }
    }
    valueOfTarget=newContainer;
  }
 else {
    setRealAttributeValueInObject(target,containerPolicy.containerInstance(containerPolicy.sizeFor(valueOfSource)));
    containerPolicy.clear(valueOfTarget);
  }
synchronized (valueOfSource) {
    Object sourceIterator=containerPolicy.iteratorFor(valueOfSource);
    while (containerPolicy.hasNext(sourceIterator)) {
      Object object=containerPolicy.next(sourceIterator,mergeManager.getSession());
      if (object == null) {
        continue;
      }
      if (shouldMergeCascadeParts(mergeManager)) {
        if ((mergeManager.getSession().isUnitOfWork()) && (((UnitOfWorkImpl)mergeManager.getSession()).getUnitOfWorkChangeSet() != null)) {
          mergeManager.mergeChanges(mergeManager.getObjectToMerge(object),(ObjectChangeSet)((UnitOfWorkImpl)mergeManager.getSession()).getUnitOfWorkChangeSet().getObjectChangeSetForClone(object));
        }
 else {
          mergeManager.mergeChanges(mergeManager.getObjectToMerge(object),null);
        }
      }
      object=this.referenceDescriptor.getObjectBuilder().wrapObject(mergeManager.getTargetVersionOfSourceObject(object),mergeManager.getSession());
synchronized (valueOfTarget) {
        if (fireChangeEvents) {
          ((ObjectChangeListener)((ChangeTracker)target)._persistence_getPropertyChangeListener()).internalPropertyChange(new CollectionChangeEvent(target,getAttributeName(),valueOfTarget,object,CollectionChangeEvent.ADD));
        }
        containerPolicy.addInto(object,valueOfTarget,mergeManager.getSession());
      }
    }
    if (fireChangeEvents && (this.descriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy())) {
      ObjectChangeSet changeSet=((AttributeChangeListener)((ChangeTracker)target)._persistence_getPropertyChangeListener()).getObjectChangeSet();
      if (changeSet != null) {
        CollectionChangeRecord changeRecord=(CollectionChangeRecord)changeSet.getChangesForAttributeNamed(getAttributeName());
        if (changeRecord != null) {
          if (!changeRecord.isDeferred()) {
            if (!changeRecord.hasChanges()) {
              changeSet.removeChange(getAttributeName());
            }
          }
 else {
            changeRecord.setLatestCollection(valueOfTarget);
          }
        }
      }
    }
  }
  setRealAttributeValueInObject(target,valueOfTarget);
}","/** 
 * INTERNAL: Merge changes from the source to the target object. This merge is only called when a changeSet for the target does not exist or the target is uninitialized
 */
public void mergeIntoObject(Object target,boolean isTargetUnInitialized,Object source,MergeManager mergeManager){
  if (isTargetUnInitialized) {
    if (mergeManager.shouldMergeWorkingCopyIntoOriginal() && (!isAttributeValueInstantiated(source))) {
      setAttributeValueInObject(target,getIndirectionPolicy().getOriginalIndirectionObject(getAttributeValueFromObject(source),mergeManager.getSession()));
      return;
    }
  }
  if (!shouldMergeCascadeReference(mergeManager)) {
    return;
  }
  if (mergeManager.shouldRefreshRemoteObject() && usesIndirection()) {
    mergeRemoteValueHolder(target,source,mergeManager);
    return;
  }
  if (mergeManager.shouldMergeOriginalIntoWorkingCopy()) {
    if (!isAttributeValueInstantiated(target)) {
      Object attributeValue=getAttributeValueFromObject(source);
      Object clonedAttributeValue=getIndirectionPolicy().cloneAttribute(attributeValue,source,target,(UnitOfWorkImpl)mergeManager.getSession(),false);
      setAttributeValueInObject(target,clonedAttributeValue);
      return;
    }
  }
 else   if (!isAttributeValueInstantiatedOrChanged(source)) {
    return;
  }
  Object valueOfSource=getRealCollectionAttributeValueFromObject(source,mergeManager.getSession());
  AbstractSession mergeSession=mergeManager.getSession();
  Object valueOfTarget=getRealCollectionAttributeValueFromObject(target,mergeSession);
  ContainerPolicy containerPolicy=getContainerPolicy();
  containerPolicy.sizeFor(valueOfTarget);
  boolean fireChangeEvents=false;
  if (!mergeManager.shouldMergeOriginalIntoWorkingCopy()) {
    Object newContainer=containerPolicy.containerInstance(containerPolicy.sizeFor(valueOfSource));
    if ((this.descriptor.getObjectChangePolicy().isObjectChangeTrackingPolicy()) && (target instanceof ChangeTracker) && (((ChangeTracker)target)._persistence_getPropertyChangeListener() != null)) {
      fireChangeEvents=valueOfSource != valueOfTarget;
      Object iterator=containerPolicy.iteratorFor(valueOfTarget);
      PropertyChangeListener listener=((ChangeTracker)target)._persistence_getPropertyChangeListener();
      if (fireChangeEvents) {
        while (containerPolicy.hasNext(iterator)) {
          ((ObjectChangeListener)listener).internalPropertyChange(new CollectionChangeEvent(target,getAttributeName(),valueOfTarget,containerPolicy.next(iterator,mergeSession),CollectionChangeEvent.REMOVE));
        }
      }
      if (newContainer instanceof ChangeTracker) {
        ((CollectionChangeTracker)newContainer).setTrackedAttributeName(getAttributeName());
        ((CollectionChangeTracker)newContainer)._persistence_setPropertyChangeListener(listener);
      }
      if (valueOfTarget instanceof ChangeTracker) {
        ((ChangeTracker)valueOfTarget)._persistence_setPropertyChangeListener(null);
      }
    }
    valueOfTarget=newContainer;
  }
 else {
    setRealAttributeValueInObject(target,containerPolicy.containerInstance(containerPolicy.sizeFor(valueOfSource)));
    containerPolicy.clear(valueOfTarget);
  }
synchronized (valueOfSource) {
    Object sourceIterator=containerPolicy.iteratorFor(valueOfSource);
    while (containerPolicy.hasNext(sourceIterator)) {
      Object object=containerPolicy.next(sourceIterator,mergeManager.getSession());
      if (object == null) {
        continue;
      }
      if (shouldMergeCascadeParts(mergeManager)) {
        if ((mergeManager.getSession().isUnitOfWork()) && (((UnitOfWorkImpl)mergeManager.getSession()).getUnitOfWorkChangeSet() != null)) {
          mergeManager.mergeChanges(mergeManager.getObjectToMerge(object),(ObjectChangeSet)((UnitOfWorkImpl)mergeManager.getSession()).getUnitOfWorkChangeSet().getObjectChangeSetForClone(object));
        }
 else {
          mergeManager.mergeChanges(mergeManager.getObjectToMerge(object),null);
        }
      }
      object=this.referenceDescriptor.getObjectBuilder().wrapObject(mergeManager.getTargetVersionOfSourceObject(object),mergeManager.getSession());
synchronized (valueOfTarget) {
        if (fireChangeEvents) {
          ((ObjectChangeListener)((ChangeTracker)target)._persistence_getPropertyChangeListener()).internalPropertyChange(new CollectionChangeEvent(target,getAttributeName(),valueOfTarget,object,CollectionChangeEvent.ADD));
        }
        containerPolicy.addInto(object,valueOfTarget,mergeManager.getSession());
      }
    }
    if (fireChangeEvents && (this.descriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy())) {
      ObjectChangeSet changeSet=((AttributeChangeListener)((ChangeTracker)target)._persistence_getPropertyChangeListener()).getObjectChangeSet();
      if (changeSet != null) {
        CollectionChangeRecord changeRecord=(CollectionChangeRecord)changeSet.getChangesForAttributeNamed(getAttributeName());
        if (changeRecord != null) {
          if (!changeRecord.isDeferred()) {
            if (!changeRecord.hasChanges()) {
              changeSet.removeChange(getAttributeName());
            }
          }
 else {
            changeRecord.setLatestCollection(valueOfTarget);
          }
        }
      }
    }
  }
  setRealAttributeValueInObject(target,valueOfTarget);
}"
68006,"public void addNewItem(ObjectListSelectionModel listSelectionModel){
  if (getCollectionMapping().getReferenceDescriptor() != null) {
    Collection queryKeys=getCollectionMapping().getReferenceDescriptor().getAllQueryKeysIncludingInherited();
    if (queryKeys.size() == 0) {
      getCollectionMapping().addOrdering(null);
    }
 else {
      getCollectionMapping().addOrdering((MWQueryKey)queryKeys.iterator().next());
    }
  }
}","public void addNewItem(ObjectListSelectionModel listSelectionModel){
  if (getCollectionMapping().getReferenceDescriptor() != null) {
    Collection queryKeys=getCollectionMapping().getReferenceDescriptor().getAllQueryKeysIncludingInherited();
    if (queryKeys.size() == 0) {
      getCollectionMapping().addOrdering(null);
    }
 else {
      getCollectionMapping().addOrdering((MWQueryKey)queryKeys.iterator().next());
    }
  }
 else {
    getCollectionMapping().addOrdering(null);
  }
}"
68007,"private UpDownAdapter buildTablePanelAdapter(){
  return new UpDownAdapter(){
    public void removeSelectedItems(    ObjectListSelectionModel listSelectionModel){
      Object[] selectedValues=listSelectionModel.getSelectedValues();
      for (int i=0; i < selectedValues.length; i++) {
        getCollectionMapping().removeOrdering((MWCollectionOrdering)selectedValues[i]);
      }
    }
    public void addNewItem(    ObjectListSelectionModel listSelectionModel){
      if (getCollectionMapping().getReferenceDescriptor() != null) {
        Collection queryKeys=getCollectionMapping().getReferenceDescriptor().getAllQueryKeysIncludingInherited();
        if (queryKeys.size() == 0) {
          getCollectionMapping().addOrdering(null);
        }
 else {
          getCollectionMapping().addOrdering((MWQueryKey)queryKeys.iterator().next());
        }
      }
    }
    public void moveItemsDown(    Object[] items){
      for (int i=0; i < items.length; i++) {
        getCollectionMapping().moveOrderingDown((MWCollectionOrdering)items[i]);
      }
    }
    public void moveItemsUp(    Object[] items){
      for (int i=0; i < items.length; i++) {
        getCollectionMapping().moveOrderingUp((MWCollectionOrdering)items[i]);
      }
    }
  }
;
}","private UpDownAdapter buildTablePanelAdapter(){
  return new UpDownAdapter(){
    public void removeSelectedItems(    ObjectListSelectionModel listSelectionModel){
      Object[] selectedValues=listSelectionModel.getSelectedValues();
      for (int i=0; i < selectedValues.length; i++) {
        getCollectionMapping().removeOrdering((MWCollectionOrdering)selectedValues[i]);
      }
    }
    public void addNewItem(    ObjectListSelectionModel listSelectionModel){
      if (getCollectionMapping().getReferenceDescriptor() != null) {
        Collection queryKeys=getCollectionMapping().getReferenceDescriptor().getAllQueryKeysIncludingInherited();
        if (queryKeys.size() == 0) {
          getCollectionMapping().addOrdering(null);
        }
 else {
          getCollectionMapping().addOrdering((MWQueryKey)queryKeys.iterator().next());
        }
      }
 else {
        getCollectionMapping().addOrdering(null);
      }
    }
    public void moveItemsDown(    Object[] items){
      for (int i=0; i < items.length; i++) {
        getCollectionMapping().moveOrderingDown((MWCollectionOrdering)items[i]);
      }
    }
    public void moveItemsUp(    Object[] items){
      for (int i=0; i < items.length; i++) {
        getCollectionMapping().moveOrderingUp((MWCollectionOrdering)items[i]);
      }
    }
  }
;
}"
68008,"/** 
 * Inherited suite mthod for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(SDODataObjectSetGetWithPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectSetGetWithIndexTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearTest.class));
  suite.addTest(new TestSuite(DataHelperToYearWithCalnTest.class));
  suite.addTest(new TestSuite(SDODataObjectUnsetIsSetTest.class));
  suite.addTest(new TestSuite(SDODataObjectContainerContainmentPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectListWrapperTest.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA81TestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA90ConversionTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableDirectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableCompositeObjectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectOpenContentBug6011530TestCases.class));
  suite.addTest(new TestSuite(SetAndGetWithManyPropertyTestCases.class));
  suite.addTest(new TestSuite(SetAndGetWithManyPropertyViaPathTestCases.class));
  return suite;
}","/** 
 * Inherited suite mthod for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(SDODataObjectCloneTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectSetGetWithPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectSetGetWithIndexTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearTest.class));
  suite.addTest(new TestSuite(DataHelperToYearWithCalnTest.class));
  suite.addTest(new TestSuite(SDODataObjectUnsetIsSetTest.class));
  suite.addTest(new TestSuite(SDODataObjectContainerContainmentPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectListWrapperTest.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA81TestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA90ConversionTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableDirectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableCompositeObjectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectOpenContentBug6011530TestCases.class));
  suite.addTest(new TestSuite(SetAndGetWithManyPropertyTestCases.class));
  suite.addTest(new TestSuite(SetAndGetWithManyPropertyViaPathTestCases.class));
  return suite;
}"
68009,"/** 
 * INTERNAL: Return a valid Java class name or method name for a given string
 * @param s
 * @param isClass (flag whether called from a method context)
 * @param flag
 * @return
 */
public static String className(String s,boolean flag,boolean isClass,boolean logOn){
  preProcessJavaReservedNames(s);
  preProcessSDOReservedNames(s);
  String[] as=getWordList(s);
  StringBuffer stringbuffer=new StringBuffer();
  StringBuffer stringbuffer1=new StringBuffer();
  if (as.length == 0) {
    return stringbuffer.toString();
  }
  for (int i=0; i < as.length; i++) {
    char[] ac=as[i].toCharArray();
    if (Character.isLowerCase(ac[0])) {
      ac[0]=Character.toUpperCase(ac[0]);
    }
    for (int j=0; j < ac.length; j++) {
      if ((ac[j] >= ' ') && (ac[j] < '\177')) {
        if ((ac[j] != '_') || !asWordSeparator) {
          stringbuffer.append(ac[j]);
        }
        continue;
      }
      if (flag) {
        stringbuffer.append(escapeUnicode(stringbuffer1,ac[j]));
      }
 else {
        stringbuffer.append(ac[j]);
      }
    }
  }
  String normalizedName=stringbuffer.toString();
  if (!s.equals(normalizedName) && logOn) {
    int logLevel;
    if (!s.equalsIgnoreCase(normalizedName)) {
      logLevel=AbstractSessionLog.WARNING;
    }
 else {
      logLevel=AbstractSessionLog.FINER;
    }
    if (isClass) {
      AbstractSessionLog.getLog().log(logLevel,""String_Node_Str"",new Object[]{""String_Node_Str"",s,normalizedName});
    }
 else {
      AbstractSessionLog.getLog().log(logLevel,""String_Node_Str"",new Object[]{""String_Node_Str"",s,normalizedName});
    }
  }
  return normalizedName;
}","/** 
 * INTERNAL: Return a valid Java class name or method name for a given string
 * @param s
 * @param isClass (flag whether called from a method context)
 * @param flag
 * @return
 */
public static String className(String s,boolean flag,boolean isClass,boolean logOn){
  preProcessJavaReservedNames(s);
  preProcessSDOReservedNames(s);
  String[] as=getWordList(s);
  StringBuffer stringbuffer=new StringBuffer();
  StringBuffer stringbuffer1=new StringBuffer();
  if (as.length == 0) {
    return stringbuffer.toString();
  }
  for (int i=0; i < as.length; i++) {
    char[] ac=as[i].toCharArray();
    if (Character.isLowerCase(ac[0])) {
      ac[0]=Character.toUpperCase(ac[0]);
    }
    for (int j=0; j < ac.length; j++) {
      if ((ac[j] >= ' ') && (ac[j] < '\177')) {
        if ((ac[j] != '_') || !asWordSeparator) {
          stringbuffer.append(ac[j]);
        }
        continue;
      }
      if (flag) {
        stringbuffer.append(escapeUnicode(stringbuffer1,ac[j]));
      }
 else {
        stringbuffer.append(ac[j]);
      }
    }
  }
  String normalizedName=stringbuffer.toString();
  if (!s.equals(normalizedName) && logOn) {
    int logLevel;
    if (!s.equalsIgnoreCase(normalizedName)) {
      logLevel=AbstractSessionLog.INFO;
    }
 else {
      logLevel=AbstractSessionLog.FINER;
    }
    if (isClass) {
      AbstractSessionLog.getLog().log(logLevel,""String_Node_Str"",new Object[]{""String_Node_Str"",s,normalizedName});
    }
 else {
      AbstractSessionLog.getLog().log(logLevel,""String_Node_Str"",new Object[]{""String_Node_Str"",s,normalizedName});
    }
  }
  return normalizedName;
}"
68010,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(ObjectTypeConverterTestCases.class);
  suite.addTestSuite(TypeSafeEnumConverterTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(ObjectTypeConverterTestCases.class);
  suite.addTestSuite(TypeSafeEnumConverterTestCases.class);
  suite.addTestSuite(JAXBEnumTypeConverterTestCases.class);
  return suite;
}"
68011,"/** 
 * INTERNAL: Convert all the class-name-based settings in this converter to actual  class-based settings. This method is used when converting a project  that has been built with class names to a project with classes.
 * @param classLoader 
 */
public void convertClassNamesToClasses(){
  try {
    m_enumClass=PrivilegedAccessHelper.getClassForName(m_enumClassName);
  }
 catch (  ClassNotFoundException exception) {
  }
}","/** 
 * INTERNAL: Convert all the class-name-based settings in this converter to actual  class-based settings. This method is used when converting a project  that has been built with class names to a project with classes.
 * @param classLoader 
 */
public void convertClassNamesToClasses(){
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        m_enumClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(m_enumClassName));
      }
 catch (      PrivilegedActionException exception) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(m_enumClassName,exception.getException());
      }
    }
 else {
      m_enumClass=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(m_enumClassName);
    }
  }
 catch (  ClassNotFoundException exception) {
    throw ValidationException.classNotFoundWhileConvertingClassNames(m_enumClassName,exception);
  }
}"
68012,"/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new XSDHelperDefineTestSuite().suite());
  suite.addTest(new XSDHelperGenerateTestSuite().suite());
  suite.addTest(new SDOTypeHelperTestSuite().suite());
  suite.addTest(new SDODataFactoryTestSuite().suite());
  suite.addTest(new SDOXMLHelperTestSuite().suite());
  suite.addTest(new PluggableTestSuite().suite());
  return suite;
}","/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new XSDHelperDefineTestSuite().suite());
  suite.addTest(new XSDHelperGenerateTestSuite().suite());
  suite.addTest(new SDOTypeHelperTestSuite().suite());
  suite.addTest(new SDODataFactoryTestSuite().suite());
  suite.addTest(new SDOXMLHelperTestSuite().suite());
  return suite;
}"
68013,"/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        String sdoPath=convertXPathToSDOPath(nextXPath);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        if (nextCreatedDO == null) {
          int nextSlash=sdoPath.indexOf('/');
          if (nextSlash != -1) {
            sdoPath=sdoPath.substring(nextSlash + 1);
          }
 else {
            sdoPath=""String_Node_Str"";
          }
          nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        }
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO=null;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        String sdoPath=convertXPathToSDOPath(refValue);
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        if (nextModifiedDO == null) {
          int nextSlash=sdoPath.indexOf('/');
          if (nextSlash != -1) {
            sdoPath=sdoPath.substring(nextSlash + 1);
          }
 else {
            sdoPath=""String_Node_Str"";
          }
          nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        }
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
          unsetValueList=(List)xmlConversionManager.convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          Node n=nextNode.getFirstChild();
          while (n != null) {
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
            n=n.getNextSibling();
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            SDOProperty nextProp=(SDOProperty)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    String sdoRefPath=convertXPathToSDOPath(sdoRef);
                    int nextSlash=sdoRefPath.indexOf('/');
                    if (nextSlash != -1) {
                      sdoRefPath=sdoRefPath.substring(nextSlash + 1);
                    }
 else {
                      sdoRefPath=""String_Node_Str"";
                    }
                    newList.add(targetDataObject.getDataObject(sdoRefPath));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
      Iterator created=nextCS.getCreated().iterator();
      while (created.hasNext()) {
        SDODataObject next=(SDODataObject)created.next();
        Property containmentProperty=next.getContainmentProperty();
        if (containmentProperty != null && containmentProperty.isMany()) {
          SDODataObject container=(SDODataObject)next.getContainer();
          ListWrapper list=(ListWrapper)container.get(containmentProperty);
          if (!(nextCS.getOriginalElements().containsKey(list))) {
            nextCS.getOriginalElements().put(list,new ArrayList());
          }
        }
      }
    }
    initialize();
  }
}","/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      boolean loggingValue=nextCS.isLoggingMapping();
      nextCS.setLogging(true);
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        String sdoPath=convertXPathToSDOPath(nextXPath);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        if (nextCreatedDO == null) {
          int nextSlash=sdoPath.indexOf('/');
          if (nextSlash != -1) {
            sdoPath=sdoPath.substring(nextSlash + 1);
          }
 else {
            sdoPath=""String_Node_Str"";
          }
          nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        }
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO=null;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        String sdoPath=convertXPathToSDOPath(refValue);
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        if (nextModifiedDO == null) {
          int nextSlash=sdoPath.indexOf('/');
          if (nextSlash != -1) {
            sdoPath=sdoPath.substring(nextSlash + 1);
          }
 else {
            sdoPath=""String_Node_Str"";
          }
          nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(sdoPath);
        }
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
          unsetValueList=(List)xmlConversionManager.convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          Node n=nextNode.getFirstChild();
          while (n != null) {
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
            n=n.getNextSibling();
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            SDOProperty nextProp=(SDOProperty)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    String sdoRefPath=convertXPathToSDOPath(sdoRef);
                    int nextSlash=sdoRefPath.indexOf('/');
                    if (nextSlash != -1) {
                      sdoRefPath=sdoRefPath.substring(nextSlash + 1);
                    }
 else {
                      sdoRefPath=""String_Node_Str"";
                    }
                    newList.add(targetDataObject.getDataObject(sdoRefPath));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
      Iterator created=nextCS.getCreated().iterator();
      while (created.hasNext()) {
        SDODataObject next=(SDODataObject)created.next();
        Property containmentProperty=next.getContainmentProperty();
        if (containmentProperty != null && containmentProperty.isMany()) {
          SDODataObject container=(SDODataObject)next.getContainer();
          ListWrapper list=(ListWrapper)container.get(containmentProperty);
          if (!(nextCS.getOriginalElements().containsKey(list))) {
            nextCS.getOriginalElements().put(list,new ArrayList());
          }
        }
      }
      nextCS.setLogging(loggingValue);
    }
    initialize();
  }
}"
68014,"public boolean equals(Object object){
  try {
    if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    return ((localName == xPathFragment.getLocalName()) || ((localName != null) && localName.equals(xPathFragment.getLocalName()))) && ((namespaceURI == xPathFragment.getNamespaceURI()) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.getNamespaceURI()))) && (this.indexValue == xPathFragment.getIndexValue())&& (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}","public boolean equals(Object object){
  try {
    if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    return ((nameIsText && xPathFragment.nameIsText()) || (localName == xPathFragment.getLocalName()) || ((localName != null) && localName.equals(xPathFragment.getLocalName()))) && ((namespaceURI == xPathFragment.getNamespaceURI()) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.getNamespaceURI()))) && (this.indexValue == xPathFragment.getIndexValue())&& (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}"
68015,"private void buildFragments(String xpathString){
  StringTokenizer st=new StringTokenizer(xpathString,""String_Node_Str"");
  String next;
  int i=0;
  XPathFragment currentXPathFragment=null;
  XPathFragment nextXPathFragment=null;
  if (xpathString.startsWith(""String_Node_Str"")) {
    next=st.nextToken();
    next=""String_Node_Str"" + next;
    currentXPathFragment=new XPathFragment(next);
    setXPathFragment(currentXPathFragment);
    i++;
  }
  while (st.hasMoreTokens()) {
    next=st.nextToken();
    if (null != next) {
      if (next.equals(""String_Node_Str"")) {
        nextXPathFragment=XPathFragment.TEXT_FRAGMENT;
      }
 else {
        nextXPathFragment=new XPathFragment(next);
      }
      if (0 == i) {
        setXPathFragment(nextXPathFragment);
      }
 else {
        currentXPathFragment.setNextFragment(nextXPathFragment);
        if (nextXPathFragment.isAttribute() || nextXPathFragment.nameIsText()) {
          currentXPathFragment.setHasText(true);
        }
      }
      currentXPathFragment=nextXPathFragment;
      i++;
    }
    setLastXPathFragment(currentXPathFragment);
  }
}","private void buildFragments(String xpathString){
  StringTokenizer st=new StringTokenizer(xpathString,""String_Node_Str"");
  String next;
  int i=0;
  XPathFragment currentXPathFragment=null;
  XPathFragment nextXPathFragment=null;
  if (xpathString.startsWith(""String_Node_Str"")) {
    next=st.nextToken();
    next=""String_Node_Str"" + next;
    currentXPathFragment=new XPathFragment(next);
    setXPathFragment(currentXPathFragment);
    i++;
  }
  while (st.hasMoreTokens()) {
    next=st.nextToken();
    if (null != next) {
      if (next.equals(XPathFragment.TEXT)) {
        nextXPathFragment=new XPathFragment(XPathFragment.TEXT);
      }
 else {
        nextXPathFragment=new XPathFragment(next);
      }
      if (0 == i) {
        setXPathFragment(nextXPathFragment);
      }
 else {
        currentXPathFragment.setNextFragment(nextXPathFragment);
        if (nextXPathFragment.isAttribute() || nextXPathFragment.nameIsText()) {
          currentXPathFragment.setHasText(true);
        }
      }
      currentXPathFragment=nextXPathFragment;
      i++;
    }
    setLastXPathFragment(currentXPathFragment);
  }
}"
68016,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}"
68017,"/** 
 * Build a DatabaseQuery from an JPQL string.
 * @param jpql the JPQL string.
 * @param flushOnExecute flush the unit of work before executing the query.
 * @param session the session to get the descriptors for this query for.
 * @param hints a list of hints to be applied to the query.
 * @return a DatabaseQuery representing the given jpql.
 */
public static DatabaseQuery buildEJBQLDatabaseQuery(String queryName,String jpql,Session session,Enum lockMode,Map<String,Object> hints,ClassLoader classLoader){
  boolean isCacheable=(queryName == null) && (hints == null);
  DatabaseQuery databaseQuery=null;
  if (isCacheable) {
    databaseQuery=(DatabaseQuery)session.getProject().getJPQLParseCache().get(jpql);
  }
  if ((databaseQuery == null) || (!databaseQuery.isPrepared())) {
    JPQLParseTree parseTree=JPQLParser.buildParseTree(queryName,jpql);
    parseTree.setClassLoader(classLoader);
    databaseQuery=parseTree.createDatabaseQuery();
    databaseQuery.setJPQLString(jpql);
    parseTree.populateQuery(databaseQuery,(AbstractSession)session);
    if (databaseQuery.isReadAllQuery()) {
      ReadAllQuery readAllQuery=(ReadAllQuery)databaseQuery;
      if (readAllQuery.hasJoining() && (readAllQuery.getDistinctState() == ReadAllQuery.DONT_USE_DISTINCT)) {
        readAllQuery.setShouldFilterDuplicates(false);
      }
    }
    parseTree.addParametersToQuery(databaseQuery);
    ((JPQLCallQueryMechanism)databaseQuery.getQueryMechanism()).getJPQLCall().setIsParsed(true);
    if (databaseQuery.isReadQuery()) {
      databaseQuery.cascadeByMapping();
    }
    if (lockMode != null) {
      if (databaseQuery.isObjectLevelReadQuery()) {
        if (((ObjectLevelReadQuery)databaseQuery).setLockModeType((LockModeType)lockMode,(AbstractSession)session)) {
          throw new PersistenceException(ExceptionLocalization.buildMessage(""String_Node_Str"",null));
        }
      }
 else {
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",(Object[])null));
      }
    }
    databaseQuery=applyHints(hints,databaseQuery,classLoader);
    if (isCacheable) {
      databaseQuery.prepareCall(session,new DatabaseRecord());
      session.getProject().getJPQLParseCache().put(jpql,databaseQuery);
    }
  }
  return databaseQuery;
}","/** 
 * Build a DatabaseQuery from an JPQL string.
 * @param jpql the JPQL string.
 * @param flushOnExecute flush the unit of work before executing the query.
 * @param session the session to get the descriptors for this query for.
 * @param hints a list of hints to be applied to the query.
 * @return a DatabaseQuery representing the given jpql.
 */
public static DatabaseQuery buildEJBQLDatabaseQuery(String queryName,String jpql,Session session,Enum lockMode,Map<String,Object> hints,ClassLoader classLoader){
  boolean isCacheable=(queryName == null) && (hints == null);
  DatabaseQuery databaseQuery=null;
  if (isCacheable) {
    databaseQuery=(DatabaseQuery)session.getProject().getJPQLParseCache().get(jpql);
  }
  if ((databaseQuery == null) || (!databaseQuery.isPrepared())) {
    JPQLParseTree parseTree=JPQLParser.buildParseTree(queryName,jpql);
    parseTree.setClassLoader(classLoader);
    databaseQuery=parseTree.createDatabaseQuery();
    databaseQuery.setJPQLString(jpql);
    parseTree.populateQuery(databaseQuery,(AbstractSession)session);
    if (databaseQuery.isReadAllQuery()) {
      ReadAllQuery readAllQuery=(ReadAllQuery)databaseQuery;
      if (readAllQuery.hasJoining() && (readAllQuery.getDistinctState() == ReadAllQuery.DONT_USE_DISTINCT)) {
        readAllQuery.setShouldFilterDuplicates(false);
      }
    }
    parseTree.addParametersToQuery(databaseQuery);
    ((JPQLCallQueryMechanism)databaseQuery.getQueryMechanism()).getJPQLCall().setIsParsed(true);
    if (databaseQuery.isReadQuery()) {
      databaseQuery.cascadeByMapping();
    }
    if (lockMode != null && !lockMode.name().equals(ObjectLevelReadQuery.NONE)) {
      if (databaseQuery.isObjectLevelReadQuery()) {
        if (((ObjectLevelReadQuery)databaseQuery).setLockModeType((LockModeType)lockMode,(AbstractSession)session)) {
          throw new PersistenceException(ExceptionLocalization.buildMessage(""String_Node_Str"",null));
        }
      }
 else {
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",(Object[])null));
      }
    }
    databaseQuery=applyHints(hints,databaseQuery,classLoader);
    if (isCacheable) {
      databaseQuery.prepareCall(session,new DatabaseRecord());
      session.getProject().getJPQLParseCache().put(jpql,databaseQuery);
    }
  }
  return databaseQuery;
}"
68018,"protected ClassDescriptor buildXMLChoiceCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLChoiceCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  XMLCompositeCollectionMapping fieldToClassNameMapping=new XMLCompositeCollectionMapping();
  fieldToClassNameMapping.setAttributeName(""String_Node_Str"");
  fieldToClassNameMapping.setGetMethodName(""String_Node_Str"");
  fieldToClassNameMapping.setSetMethodName(""String_Node_Str"");
  fieldToClassNameMapping.setReferenceClass(XMLChoiceFieldToClassAssociation.class);
  fieldToClassNameMapping.useCollectionClass(ArrayList.class);
  fieldToClassNameMapping.setXPath(getPrimaryNamespacePrefix() + ""String_Node_Str"");
  descriptor.addMapping(fieldToClassNameMapping);
  return descriptor;
}","protected ClassDescriptor buildXMLChoiceCollectionMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(XMLChoiceCollectionMapping.class);
  descriptor.getInheritancePolicy().setParentClass(DatabaseMapping.class);
  XMLCompositeObjectMapping containerPolicyMapping=new XMLCompositeObjectMapping();
  containerPolicyMapping.setAttributeName(""String_Node_Str"");
  containerPolicyMapping.setReferenceClass(ContainerPolicy.class);
  containerPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(containerPolicyMapping);
  XMLCompositeCollectionMapping fieldToClassNameMapping=new XMLCompositeCollectionMapping();
  fieldToClassNameMapping.setAttributeName(""String_Node_Str"");
  fieldToClassNameMapping.setGetMethodName(""String_Node_Str"");
  fieldToClassNameMapping.setSetMethodName(""String_Node_Str"");
  fieldToClassNameMapping.setReferenceClass(XMLChoiceFieldToClassAssociation.class);
  fieldToClassNameMapping.useCollectionClass(ArrayList.class);
  fieldToClassNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(fieldToClassNameMapping);
  return descriptor;
}"
68019,"/** 
 * INTERNAL:
 */
public void addMappingToOwner(boolean sdoMethodAttributeAccessor,int indexToAdd){
  if (xmlMapping != null) {
    if (sdoMethodAttributeAccessor) {
      SDOMethodAttributeAccessor accessor=null;
      if (this.getType().isDataType()) {
        Class theClass=getType().getInstanceClass();
        accessor=new SDOMethodAttributeAccessor(this,theClass);
      }
 else {
        accessor=new SDOMethodAttributeAccessor(this);
      }
      xmlMapping.setAttributeAccessor(accessor);
    }
    if ((getContainingType() != null) && !getContainingType().isDataType()) {
      ClassDescriptor containingDescriptor=((SDOType)getContainingType()).getXmlDescriptor();
      xmlMapping.setDescriptor(containingDescriptor);
      XMLMapping mapping=(XMLMapping)((SDOType)getContainingType()).getXmlDescriptor().getMappingForAttributeName(getName());
      if (mapping != null) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().remove(mapping);
      }
      if ((indexToAdd > -1) && (indexToAdd < ((SDOType)getContainingType()).getXmlDescriptor().getMappings().size())) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(indexToAdd,xmlMapping);
      }
 else {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(xmlMapping);
      }
    }
  }
}","/** 
 * INTERNAL:
 */
public void addMappingToOwner(boolean sdoMethodAttributeAccessor,int indexToAdd){
  if (xmlMapping != null) {
    if (sdoMethodAttributeAccessor) {
      SDOMethodAttributeAccessor accessor=null;
      if (this.getType().isDataType()) {
        Class theClass=getType().getInstanceClass();
        accessor=new SDOMethodAttributeAccessor(this,theClass);
      }
 else {
        accessor=new SDOMethodAttributeAccessor(this);
      }
      xmlMapping.setAttributeAccessor(accessor);
    }
    if ((getContainingType() != null) && !getContainingType().isDataType()) {
      ClassDescriptor containingDescriptor=((SDOType)getContainingType()).getXmlDescriptor();
      xmlMapping.setDescriptor(containingDescriptor);
      XMLMapping mapping=(XMLMapping)((SDOType)getContainingType()).getXmlDescriptor().getMappingForAttributeName(getName());
      if (mapping != null) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().remove(mapping);
      }
      if (indexToAdd == -1) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(xmlMapping);
      }
 else {
        SDOType containingType=(SDOType)getContainingType();
        Vector<DatabaseMapping> mappings=containingType.getXmlDescriptor().getMappings();
        boolean added=false;
        for (int i=0; i < mappings.size(); i++) {
          DatabaseMapping next=mappings.get(i);
          SDOProperty associatedProperty=containingType.getProperty(next.getAttributeName());
          if (associatedProperty != null && indexToAdd < associatedProperty.getIndexInType()) {
            mappings.add(i,xmlMapping);
            added=true;
            break;
          }
        }
        if (!added) {
          ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(xmlMapping);
        }
      }
    }
  }
}"
68020,"/** 
 * INTERNAL: Execute the query in the unit of work. This allows any pre-execute checks to be done for unit of work queries.
 */
public Object executeInUnitOfWork(UnitOfWorkImpl unitOfWork,AbstractRecord translationRow) throws DatabaseException, OptimisticLockException {
  Object result=null;
  if (!shouldMaintainCache() || isReadOnly()) {
    result=unitOfWork.getParent().executeQuery(this,translationRow);
  }
 else {
    result=execute(unitOfWork,translationRow);
  }
  if (lockModeType != null && result != null) {
    if (lockModeType.equals(READ) || lockModeType.equals(WRITE) || lockModeType.contains(OPTIMISTIC)) {
      boolean forceUpdateToVersionField=lockModeType.equals(WRITE) || lockModeType.equals(OPTIMISTIC_FORCE_INCREMENT);
      if (result instanceof Collection) {
        Iterator i=((Collection)result).iterator();
        while (i.hasNext()) {
          Object obj=i.next();
          if (obj != null) {
            if (obj instanceof Object[]) {
              for (              Object o : (Object[])obj) {
                if (o != null) {
                  unitOfWork.forceUpdateToVersionField(o,forceUpdateToVersionField);
                }
              }
            }
 else {
              unitOfWork.forceUpdateToVersionField(obj,forceUpdateToVersionField);
            }
          }
        }
      }
 else {
        unitOfWork.forceUpdateToVersionField(result,forceUpdateToVersionField);
      }
    }
  }
  return result;
}","/** 
 * INTERNAL: Execute the query in the unit of work. This allows any pre-execute checks to be done for unit of work queries.
 */
public Object executeInUnitOfWork(UnitOfWorkImpl unitOfWork,AbstractRecord translationRow) throws DatabaseException, OptimisticLockException {
  Object result=null;
  if (!shouldMaintainCache() || isReadOnly()) {
    result=unitOfWork.getParent().executeQuery(this,translationRow);
  }
 else {
    result=execute(unitOfWork,translationRow);
  }
  if (lockModeType != null && result != null) {
    if (lockModeType.equals(READ) || lockModeType.equals(WRITE) || lockModeType.contains(OPTIMISTIC)|| lockModeType.equals(PESSIMISTIC_FORCE_INCREMENT)) {
      boolean forceUpdateToVersionField=lockModeType.equals(WRITE) || lockModeType.equals(OPTIMISTIC_FORCE_INCREMENT) || lockModeType.equals(PESSIMISTIC_FORCE_INCREMENT);
      if (result instanceof Collection) {
        Iterator i=((Collection)result).iterator();
        while (i.hasNext()) {
          Object obj=i.next();
          if (obj != null) {
            if (obj instanceof Object[]) {
              for (              Object o : (Object[])obj) {
                if (o != null) {
                  unitOfWork.forceUpdateToVersionField(o,forceUpdateToVersionField);
                }
              }
            }
 else {
              unitOfWork.forceUpdateToVersionField(obj,forceUpdateToVersionField);
            }
          }
        }
      }
 else {
        unitOfWork.forceUpdateToVersionField(result,forceUpdateToVersionField);
      }
    }
  }
  return result;
}"
68021,"/** 
 * INTERNAL: When merging from a clone when the cache cannot be guaranteed the object must be first read if it is existing and not in the cache. Otherwise no changes will be detected as the original state is missing.
 */
protected Object registerObjectForMergeCloneIntoWorkingCopy(Object clone){
  UnitOfWorkImpl unitOfWork=(UnitOfWorkImpl)getSession();
  ClassDescriptor descriptor=unitOfWork.getDescriptor(clone.getClass());
  Vector primaryKey=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(clone,unitOfWork);
  Object objectFromCache=unitOfWork.getIdentityMapAccessorInstance().getFromIdentityMap(primaryKey,descriptor.getJavaClass(),false,descriptor);
  if (objectFromCache == null) {
    objectFromCache=unitOfWork.checkIfAlreadyRegistered(clone,descriptor);
  }
  if (objectFromCache != null) {
    if (unitOfWork.isObjectDeleted(objectFromCache)) {
      if (shouldMergeCloneIntoWorkingCopy() || shouldMergeCloneWithReferencesIntoWorkingCopy()) {
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{clone}));
      }
    }
    return objectFromCache;
  }
  org.eclipse.persistence.queries.DoesExistQuery existQuery=descriptor.getQueryManager().getDoesExistQuery();
  if (existQuery.shouldCheckCacheForDoesExist()) {
    Object registeredObject=unitOfWork.internalRegisterObject(clone,descriptor);
    if (unitOfWork.hasNewObjects() && unitOfWork.getNewObjectsOriginalToClone().containsKey(clone)) {
      mergedNewObjects.put(registeredObject,registeredObject);
    }
    return registeredObject;
  }
  Boolean doesExist=(Boolean)existQuery.checkEarlyReturn(clone,primaryKey,unitOfWork,null);
  if (doesExist == Boolean.FALSE) {
    Object registeredObject=unitOfWork.internalRegisterObject(clone,descriptor);
    mergedNewObjects.put(registeredObject,registeredObject);
    return registeredObject;
  }
  Object object=unitOfWork.readObject(clone);
  if (object == null) {
    object=unitOfWork.cloneAndRegisterNewObject(clone);
    mergedNewObjects.put(object,object);
  }
  return object;
}","/** 
 * INTERNAL: When merging from a clone when the cache cannot be guaranteed the object must be first read if it is existing and not in the cache. Otherwise no changes will be detected as the original state is missing.
 */
protected Object registerObjectForMergeCloneIntoWorkingCopy(Object clone){
  UnitOfWorkImpl unitOfWork=(UnitOfWorkImpl)getSession();
  ClassDescriptor descriptor=unitOfWork.getDescriptor(clone.getClass());
  Vector primaryKey=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(clone,unitOfWork);
  Object objectFromCache=unitOfWork.getIdentityMapAccessorInstance().getFromIdentityMap(primaryKey,descriptor.getJavaClass(),false,descriptor);
  if (objectFromCache == null) {
    objectFromCache=unitOfWork.checkIfAlreadyRegistered(clone,descriptor);
  }
  if (objectFromCache != null) {
    if (unitOfWork.getNewObjectsCloneToOriginal().containsKey(objectFromCache)) {
      mergedNewObjects.put(objectFromCache,objectFromCache);
    }
    if (unitOfWork.isObjectDeleted(objectFromCache)) {
      if (shouldMergeCloneIntoWorkingCopy() || shouldMergeCloneWithReferencesIntoWorkingCopy()) {
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{clone}));
      }
    }
    return objectFromCache;
  }
  org.eclipse.persistence.queries.DoesExistQuery existQuery=descriptor.getQueryManager().getDoesExistQuery();
  if (existQuery.shouldCheckCacheForDoesExist()) {
    Object registeredObject=unitOfWork.internalRegisterObject(clone,descriptor);
    if (unitOfWork.hasNewObjects() && unitOfWork.getNewObjectsOriginalToClone().containsKey(clone)) {
      mergedNewObjects.put(registeredObject,registeredObject);
    }
    return registeredObject;
  }
  Boolean doesExist=(Boolean)existQuery.checkEarlyReturn(clone,primaryKey,unitOfWork,null);
  if (doesExist == Boolean.FALSE) {
    Object registeredObject=unitOfWork.internalRegisterObject(clone,descriptor);
    mergedNewObjects.put(registeredObject,registeredObject);
    return registeredObject;
  }
  Object object=unitOfWork.readObject(clone);
  if (object == null) {
    object=unitOfWork.cloneAndRegisterNewObject(clone);
    mergedNewObjects.put(object,object);
  }
  return object;
}"
68022,"/** 
 * INTERNAL: Merge the attributes of the clone into the unit of work copy.
 */
public Object mergeCloneWithReferences(Object rmiClone,MergeManager manager){
  Object mergedObject=super.mergeCloneWithReferences(rmiClone,manager);
  Map newObjects=manager.getMergedNewObjects();
  if (!newObjects.isEmpty()) {
    Iterator iterator=newObjects.values().iterator();
    while (iterator.hasNext()) {
      Object newObjectClone=iterator.next();
      ClassDescriptor descriptor=getDescriptor(newObjectClone);
      assignSequenceNumber(newObjectClone,descriptor);
      registerNewObjectInIdentityMap(newObjectClone,null,descriptor);
    }
  }
  return mergedObject;
}","/** 
 * INTERNAL: Merge the attributes of the clone into the unit of work copy.
 */
public Object mergeCloneWithReferences(Object rmiClone,MergeManager manager){
  Object mergedObject=super.mergeCloneWithReferences(rmiClone,manager);
  Map newObjects=manager.getMergedNewObjects();
  if (!newObjects.isEmpty()) {
    Iterator iterator=newObjects.values().iterator();
    while (iterator.hasNext()) {
      Object newObjectClone=iterator.next();
      ClassDescriptor descriptor=getDescriptor(newObjectClone);
      if (assignSequenceNumber(newObjectClone,descriptor) != null) {
        registerNewObjectInIdentityMap(newObjectClone,null,descriptor);
      }
    }
  }
  return mergedObject;
}"
68023,"/** 
 * INTERNAL: Assign sequence number to the object.
 */
public void assignSequenceNumber(Object object,ClassDescriptor descriptor) throws DatabaseException {
  if (descriptor.usesSequenceNumbers() && !descriptor.getSequence().shouldAcquireValueAfterInsert()) {
    startOperationProfile(SessionProfiler.AssignSequence);
    ObjectBuilder builder=descriptor.getObjectBuilder();
    try {
      builder.assignSequenceNumber(object,this);
    }
 catch (    RuntimeException exception) {
      handleException(exception);
    }
 finally {
      endOperationProfile(SessionProfiler.AssignSequence);
    }
  }
}","/** 
 * INTERNAL: Assign sequence number to the object.
 */
public Object assignSequenceNumber(Object object,ClassDescriptor descriptor) throws DatabaseException {
  Object value=null;
  if (descriptor.usesSequenceNumbers() && !descriptor.getSequence().shouldAcquireValueAfterInsert()) {
    startOperationProfile(SessionProfiler.AssignSequence);
    ObjectBuilder builder=descriptor.getObjectBuilder();
    try {
      value=builder.assignSequenceNumber(object,this);
    }
 catch (    RuntimeException exception) {
      handleException(exception);
    }
 finally {
      endOperationProfile(SessionProfiler.AssignSequence);
    }
  }
  return value;
}"
68024,"public static TableDefinition build_SERIALNUMBER_Table(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition NUMBER_field=new FieldDefinition();
  NUMBER_field.setName(""String_Node_Str"");
  NUMBER_field.setTypeName(""String_Node_Str"");
  NUMBER_field.setSize(15);
  NUMBER_field.setIsPrimaryKey(true);
  NUMBER_field.setUnique(false);
  NUMBER_field.setIsIdentity(false);
  NUMBER_field.setShouldAllowNull(false);
  table.addField(NUMBER_field);
  return table;
}","public static TableDefinition build_SERIALNUMBER_Table(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition NUMBER_field=new FieldDefinition();
  NUMBER_field.setName(""String_Node_Str"");
  NUMBER_field.setTypeName(""String_Node_Str"");
  NUMBER_field.setSize(15);
  NUMBER_field.setIsPrimaryKey(true);
  NUMBER_field.setUnique(false);
  NUMBER_field.setIsIdentity(false);
  NUMBER_field.setShouldAllowNull(false);
  table.addField(NUMBER_field);
  FieldDefinition ISSUE_DATE_field=new FieldDefinition();
  ISSUE_DATE_field.setName(""String_Node_Str"");
  ISSUE_DATE_field.setTypeName(""String_Node_Str"");
  ISSUE_DATE_field.setSize(23);
  ISSUE_DATE_field.setIsPrimaryKey(false);
  ISSUE_DATE_field.setUnique(false);
  ISSUE_DATE_field.setIsIdentity(false);
  ISSUE_DATE_field.setShouldAllowNull(true);
  table.addField(ISSUE_DATE_field);
  return table;
}"
68025,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedCallbacksJunitTest(""String_Node_Str""));
  return suite;
}"
68026,"private SpinnerNumberModel buildSequencingPrealocationSizeSpinnerModel(){
  return new NumberSpinnerModelAdapter(buildSequencingPrealocationSizeHolder(getSelectionHolder()),new Integer(0),null,new Integer(1),new Integer(0));
}","private SpinnerNumberModel buildSequencingPrealocationSizeSpinnerModel(){
  return new NumberSpinnerModelAdapter(buildSequencingPrealocationSizeHolder(),new Integer(0),null,new Integer(1),new Integer(0));
}"
68027,"private PropertyValueModel buildSequencingPrealocationSizeHolder(ValueModel sequencingPolicyHolder){
  return new PropertyAspectAdapter(sequencingPolicyHolder,MWSequencingPolicy.PREALLOCATION_SIZE_PROPERTY){
    protected Object getValueFromSubject(){
      return new Integer(((MWRelationalProject)subject).getSequencingPolicy().getPreallocationSize());
    }
    protected void setValueOnSubject(    Object value){
      ((MWRelationalProject)subject).getSequencingPolicy().setPreallocationSize(((Number)value).intValue());
    }
  }
;
}","private PropertyValueModel buildSequencingPrealocationSizeHolder(){
  return new PropertyAspectAdapter(this.sequencingPolicyHolder,MWSequencingPolicy.PREALLOCATION_SIZE_PROPERTY){
    protected Object getValueFromSubject(){
      return new Integer(((MWSequencingPolicy)subject).getPreallocationSize());
    }
    protected void setValueOnSubject(    Object value){
      ((MWSequencingPolicy)subject).setPreallocationSize(((Number)value).intValue());
    }
  }
;
}"
68028,"/** 
 * Inherited suite mthod for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(SDODataObjectSetGetWithPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectSetGetWithIndexTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearTest.class));
  suite.addTest(new TestSuite(DataHelperToYearWithCalnTest.class));
  suite.addTest(new TestSuite(SDODataObjectUnsetIsSetTest.class));
  suite.addTest(new TestSuite(SDODataObjectContainerContainmentPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectListWrapperTest.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA81TestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA90ConversionTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableDirectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableCompositeObjectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectOpenContentBug6011530TestCases.class));
  return suite;
}","/** 
 * Inherited suite mthod for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(SDODataObjectSetGetWithPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectSetGetWithIndexTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthDayWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthTest.class));
  suite.addTest(new TestSuite(DataHelperToYearMonthWithCalnTest.class));
  suite.addTest(new TestSuite(DataHelperToYearTest.class));
  suite.addTest(new TestSuite(DataHelperToYearWithCalnTest.class));
  suite.addTest(new TestSuite(SDODataObjectUnsetIsSetTest.class));
  suite.addTest(new TestSuite(SDODataObjectContainerContainmentPropertyTest.class));
  suite.addTest(new TestSuite(SDODataObjectListWrapperTest.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA81TestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA90ConversionTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableDirectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectJIRA102NillableCompositeObjectTestCases.class));
  suite.addTest(new TestSuite(SDODataObjectOpenContentBug6011530TestCases.class));
  suite.addTest(new TestSuite(SetAndGetWithManyPropertyTestCases.class));
  suite.addTest(new TestSuite(SetAndGetWithManyPropertyViaPathTestCases.class));
  return suite;
}"
68029,"/** 
 * INTERNAL: Select all objects for an interface descriptor. This is accomplished by selecting for all of the concrete classes and then merging the objects.
 * @return Vector containing all objects.
 * @exception DatabaseException - an error has occurred on the database.
 */
public Object selectAllObjectsUsingMultipleTableSubclassRead(ReadAllQuery query) throws DatabaseException {
  org.eclipse.persistence.internal.queries.ContainerPolicy containerPolicy=query.getContainerPolicy();
  Object objects=containerPolicy.containerInstance(1);
  for (Enumeration childDescriptors=getChildDescriptors().elements(); childDescriptors.hasMoreElements(); ) {
    ReadAllQuery concreteQuery=(ReadAllQuery)query.deepClone();
    ClassDescriptor descriptor=(ClassDescriptor)childDescriptors.nextElement();
    Class javaClass=descriptor.getJavaClass();
    concreteQuery.setReferenceClass(javaClass);
    concreteQuery.setDescriptor(descriptor);
    objects=containerPolicy.concatenateContainers(objects,query.getSession().executeQuery(concreteQuery));
  }
  return objects;
}","/** 
 * INTERNAL: Select all objects for an interface descriptor. This is accomplished by selecting for all of the concrete classes and then merging the objects.
 * @return Vector containing all objects.
 * @exception DatabaseException - an error has occurred on the database.
 */
public Object selectAllObjectsUsingMultipleTableSubclassRead(ReadAllQuery query) throws DatabaseException {
  org.eclipse.persistence.internal.queries.ContainerPolicy containerPolicy=query.getContainerPolicy();
  Object objects=containerPolicy.containerInstance(1);
  for (Enumeration childDescriptors=getChildDescriptors().elements(); childDescriptors.hasMoreElements(); ) {
    ClassDescriptor descriptor=(ClassDescriptor)childDescriptors.nextElement();
    objects=containerPolicy.concatenateContainers(objects,descriptor.getInterfacePolicy().selectAllObjects(query));
  }
  return objects;
}"
68030,"/** 
 * INTERNAL: Select one object of any concrete subclass.
 */
public Object selectOneObjectUsingMultipleTableSubclassRead(ReadObjectQuery query) throws DatabaseException, QueryException {
  Object object=null;
  for (Enumeration childDescriptors=getChildDescriptors().elements(); childDescriptors.hasMoreElements() && (object == null); ) {
    ReadObjectQuery concreteQuery=(ReadObjectQuery)query.clone();
    ClassDescriptor descriptor=(ClassDescriptor)childDescriptors.nextElement();
    Class javaClass=descriptor.getJavaClass();
    concreteQuery.setReferenceClass(javaClass);
    concreteQuery.setDescriptor(descriptor);
    object=query.getSession().executeQuery(concreteQuery,concreteQuery.getTranslationRow());
  }
  return object;
}","/** 
 * INTERNAL: Select one object of any concrete subclass.
 */
public Object selectOneObjectUsingMultipleTableSubclassRead(ReadObjectQuery query) throws DatabaseException, QueryException {
  Object object=null;
  for (Enumeration childDescriptors=getChildDescriptors().elements(); childDescriptors.hasMoreElements() && (object == null); ) {
    ClassDescriptor descriptor=(ClassDescriptor)childDescriptors.nextElement();
    object=descriptor.getInterfacePolicy().selectOneObject(query);
  }
  return object;
}"
68031,"/** 
 * INTERNAL: Logging utility method.
 */
public void logConfigMessage(String ctx,Object param1,Object param2){
  log(SessionLog.FINEST,ctx,new Object[]{param1,param2});
}","/** 
 * INTERNAL: Logging utility method. We currently can not log any lower than CONFIG since all our metadata logging messages are located in LoggingLocalizationResource. Any lower than CONFIG and those message strings would have to move to  TraceLocalizationResource.
 */
public void logConfigMessage(String ctx,Object param1,Object param2){
  log(SessionLog.CONFIG,ctx,new Object[]{param1,param2});
}"
68032,"/** 
 * INTERNAL:
 */
public MetadataLogger(AbstractSession session){
  m_session=session;
  m_ctxStrings=new HashMap();
  m_ctxStrings.put(OVERRIDE_ANNOTATION_WITH_XML,OVERRIDE_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_ANNOTATION_WITH_XML,OVERRIDE_NAMED_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_XML_WITH_ECLIPSELINK_XML,OVERRIDE_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML,OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(IGNORE_ANNOTATION,IGNORE_ANNOTATION);
  m_ctxStrings.put(IGNORE_PRIVATE_OWNED_ANNOTATION,IGNORE_PRIVATE_OWNED_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_INSERT_ANNOTATION,IGNORE_RETURN_INSERT_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_UPDATE_ANNOTATION,IGNORE_RETURN_UPDATE_ANNOTATION);
  m_ctxStrings.put(IGNORE_LOB,IGNORE_LOB);
  m_ctxStrings.put(IGNORE_TEMPORAL,IGNORE_TEMPORAL);
  m_ctxStrings.put(IGNORE_ENUMERATED,IGNORE_ENUMERATED);
  m_ctxStrings.put(IGNORE_SERIALIZED,IGNORE_SERIALIZED);
  m_ctxStrings.put(IGNORE_VERSION_LOCKING,IGNORE_VERSION_LOCKING);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_CACHE,IGNORE_INHERITANCE_SUBCLASS_CACHE);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_CACHE_INTERCEPTOR,IGNORE_INHERITANCE_SUBCLASS_CACHE_INTERCEPTOR);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_DEFAULT_REDIRECTORS,IGNORE_INHERITANCE_SUBCLASS_DEFAULT_REDIRECTORS);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_READ_ONLY,IGNORE_INHERITANCE_SUBCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_COPY_POLICY,IGNORE_MAPPED_SUPERCLASS_COPY_POLICY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING,IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CACHE,IGNORE_MAPPED_SUPERCLASS_CACHE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CACHE_INTERCEPTOR,IGNORE_MAPPED_SUPERCLASS_CACHE_INTERCEPTOR);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_DEFAULT_REDIRECTORS,IGNORE_MAPPED_SUPERCLASS_DEFAULT_REDIRECTORS);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING,IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER,IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_READ_ONLY,IGNORE_MAPPED_SUPERCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING,IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING);
  m_ctxStrings.put(ACCESS_TYPE,ACCESS_TYPE);
  m_ctxStrings.put(ALIAS,ALIAS);
  m_ctxStrings.put(MAP_KEY_ATTRIBUTE_NAME,MAP_KEY_ATTRIBUTE_NAME);
  m_ctxStrings.put(TABLE_NAME,TABLE_NAME);
  m_ctxStrings.put(TABLE_SCHEMA,TABLE_SCHEMA);
  m_ctxStrings.put(TABLE_CATALOG,TABLE_CATALOG);
  m_ctxStrings.put(JOIN_TABLE_NAME,JOIN_TABLE_NAME);
  m_ctxStrings.put(JOIN_TABLE_SCHEMA,JOIN_TABLE_SCHEMA);
  m_ctxStrings.put(JOIN_TABLE_CATALOG,JOIN_TABLE_CATALOG);
  m_ctxStrings.put(SECONDARY_TABLE_NAME,SECONDARY_TABLE_NAME);
  m_ctxStrings.put(SECONDARY_TABLE_SCHEMA,SECONDARY_TABLE_SCHEMA);
  m_ctxStrings.put(SECONDARY_TABLE_CATALOG,SECONDARY_TABLE_CATALOG);
  m_ctxStrings.put(COLLECTION_TABLE_NAME,COLLECTION_TABLE_NAME);
  m_ctxStrings.put(COLLECTION_TABLE_SCHEMA,COLLECTION_TABLE_SCHEMA);
  m_ctxStrings.put(COLLECTION_TABLE_CATALOG,COLLECTION_TABLE_CATALOG);
  m_ctxStrings.put(CONVERTER_DATA_TYPE,CONVERTER_DATA_TYPE);
  m_ctxStrings.put(CONVERTER_OBJECT_TYPE,CONVERTER_OBJECT_TYPE);
  m_ctxStrings.put(COLUMN,COLUMN);
  m_ctxStrings.put(PK_COLUMN,PK_COLUMN);
  m_ctxStrings.put(FK_COLUMN,FK_COLUMN);
  m_ctxStrings.put(QK_COLUMN,QK_COLUMN);
  m_ctxStrings.put(VALUE_COLUMN,VALUE_COLUMN);
  m_ctxStrings.put(MAP_KEY_COLUMN,MAP_KEY_COLUMN);
  m_ctxStrings.put(SOURCE_PK_COLUMN,SOURCE_PK_COLUMN);
  m_ctxStrings.put(SOURCE_FK_COLUMN,SOURCE_FK_COLUMN);
  m_ctxStrings.put(TARGET_PK_COLUMN,TARGET_PK_COLUMN);
  m_ctxStrings.put(TARGET_FK_COLUMN,TARGET_FK_COLUMN);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_DISCRIMINATOR_COLUMN,VARIABLE_ONE_TO_ONE_DISCRIMINATOR_COLUMN);
  m_ctxStrings.put(INHERITANCE_DISCRIMINATOR_COLUMN,INHERITANCE_DISCRIMINATOR_COLUMN);
  m_ctxStrings.put(INHERITANCE_PK_COLUMN,INHERITANCE_PK_COLUMN);
  m_ctxStrings.put(INHERITANCE_FK_COLUMN,INHERITANCE_FK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_PK_COLUMN,SECONDARY_TABLE_PK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_FK_COLUMN,SECONDARY_TABLE_FK_COLUMN);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING,ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING,ONE_TO_MANY_MAPPING);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING,VARIABLE_ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING_REFERENCE_CLASS,ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING_REFERENCE_CLASS,ONE_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_ONE_MAPPING_REFERENCE_CLASS,MANY_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_MANY_MAPPING_REFERENCE_CLASS,MANY_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS,VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION,WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION);
}","/** 
 * INTERNAL:
 */
public MetadataLogger(AbstractSession session){
  m_session=session;
  m_ctxStrings=new HashMap();
  m_ctxStrings.put(OVERRIDE_ANNOTATION_WITH_XML,OVERRIDE_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_ANNOTATION_WITH_XML,OVERRIDE_NAMED_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_XML_WITH_ECLIPSELINK_XML,OVERRIDE_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML,OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(IGNORE_ANNOTATION,IGNORE_ANNOTATION);
  m_ctxStrings.put(IGNORE_PRIVATE_OWNED_ANNOTATION,IGNORE_PRIVATE_OWNED_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_INSERT_ANNOTATION,IGNORE_RETURN_INSERT_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_UPDATE_ANNOTATION,IGNORE_RETURN_UPDATE_ANNOTATION);
  m_ctxStrings.put(IGNORE_LOB,IGNORE_LOB);
  m_ctxStrings.put(IGNORE_TEMPORAL,IGNORE_TEMPORAL);
  m_ctxStrings.put(IGNORE_ENUMERATED,IGNORE_ENUMERATED);
  m_ctxStrings.put(IGNORE_SERIALIZED,IGNORE_SERIALIZED);
  m_ctxStrings.put(IGNORE_VERSION_LOCKING,IGNORE_VERSION_LOCKING);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_CACHE,IGNORE_INHERITANCE_SUBCLASS_CACHE);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_CACHE_INTERCEPTOR,IGNORE_INHERITANCE_SUBCLASS_CACHE_INTERCEPTOR);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_DEFAULT_REDIRECTORS,IGNORE_INHERITANCE_SUBCLASS_DEFAULT_REDIRECTORS);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_READ_ONLY,IGNORE_INHERITANCE_SUBCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_COPY_POLICY,IGNORE_MAPPED_SUPERCLASS_COPY_POLICY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING,IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CACHE,IGNORE_MAPPED_SUPERCLASS_CACHE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CACHE_INTERCEPTOR,IGNORE_MAPPED_SUPERCLASS_CACHE_INTERCEPTOR);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_DEFAULT_REDIRECTORS,IGNORE_MAPPED_SUPERCLASS_DEFAULT_REDIRECTORS);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING,IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER,IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_READ_ONLY,IGNORE_MAPPED_SUPERCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING,IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING);
  m_ctxStrings.put(ACCESS_TYPE,ACCESS_TYPE);
  m_ctxStrings.put(ALIAS,ALIAS);
  m_ctxStrings.put(MAP_KEY_ATTRIBUTE_NAME,MAP_KEY_ATTRIBUTE_NAME);
  m_ctxStrings.put(TABLE_NAME,TABLE_NAME);
  m_ctxStrings.put(TABLE_SCHEMA,TABLE_SCHEMA);
  m_ctxStrings.put(TABLE_CATALOG,TABLE_CATALOG);
  m_ctxStrings.put(TABLE_GENERATOR_NAME,TABLE_GENERATOR_NAME);
  m_ctxStrings.put(TABLE_GENERATOR_SCHEMA,TABLE_GENERATOR_SCHEMA);
  m_ctxStrings.put(TABLE_GENERATOR_CATALOG,TABLE_GENERATOR_CATALOG);
  m_ctxStrings.put(JOIN_TABLE_NAME,JOIN_TABLE_NAME);
  m_ctxStrings.put(JOIN_TABLE_SCHEMA,JOIN_TABLE_SCHEMA);
  m_ctxStrings.put(JOIN_TABLE_CATALOG,JOIN_TABLE_CATALOG);
  m_ctxStrings.put(SECONDARY_TABLE_NAME,SECONDARY_TABLE_NAME);
  m_ctxStrings.put(SECONDARY_TABLE_SCHEMA,SECONDARY_TABLE_SCHEMA);
  m_ctxStrings.put(SECONDARY_TABLE_CATALOG,SECONDARY_TABLE_CATALOG);
  m_ctxStrings.put(COLLECTION_TABLE_NAME,COLLECTION_TABLE_NAME);
  m_ctxStrings.put(COLLECTION_TABLE_SCHEMA,COLLECTION_TABLE_SCHEMA);
  m_ctxStrings.put(COLLECTION_TABLE_CATALOG,COLLECTION_TABLE_CATALOG);
  m_ctxStrings.put(CONVERTER_DATA_TYPE,CONVERTER_DATA_TYPE);
  m_ctxStrings.put(CONVERTER_OBJECT_TYPE,CONVERTER_OBJECT_TYPE);
  m_ctxStrings.put(COLUMN,COLUMN);
  m_ctxStrings.put(PK_COLUMN,PK_COLUMN);
  m_ctxStrings.put(FK_COLUMN,FK_COLUMN);
  m_ctxStrings.put(QK_COLUMN,QK_COLUMN);
  m_ctxStrings.put(VALUE_COLUMN,VALUE_COLUMN);
  m_ctxStrings.put(MAP_KEY_COLUMN,MAP_KEY_COLUMN);
  m_ctxStrings.put(SOURCE_PK_COLUMN,SOURCE_PK_COLUMN);
  m_ctxStrings.put(SOURCE_FK_COLUMN,SOURCE_FK_COLUMN);
  m_ctxStrings.put(TARGET_PK_COLUMN,TARGET_PK_COLUMN);
  m_ctxStrings.put(TARGET_FK_COLUMN,TARGET_FK_COLUMN);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_DISCRIMINATOR_COLUMN,VARIABLE_ONE_TO_ONE_DISCRIMINATOR_COLUMN);
  m_ctxStrings.put(INHERITANCE_DISCRIMINATOR_COLUMN,INHERITANCE_DISCRIMINATOR_COLUMN);
  m_ctxStrings.put(INHERITANCE_PK_COLUMN,INHERITANCE_PK_COLUMN);
  m_ctxStrings.put(INHERITANCE_FK_COLUMN,INHERITANCE_FK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_PK_COLUMN,SECONDARY_TABLE_PK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_FK_COLUMN,SECONDARY_TABLE_FK_COLUMN);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING,ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING,ONE_TO_MANY_MAPPING);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING,VARIABLE_ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING_REFERENCE_CLASS,ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING_REFERENCE_CLASS,ONE_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_ONE_MAPPING_REFERENCE_CLASS,MANY_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_MANY_MAPPING_REFERENCE_CLASS,MANY_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS,VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION,WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION);
}"
68033,"/** 
 * INTERNAL: Return the logging context string for the given context.
 */
protected String getLoggingContextString(String context){
  return (String)m_ctxStrings.get(context);
}","/** 
 * INTERNAL: Return the logging context string for the given context.
 */
protected String getLoggingContextString(String context){
  String ctxString=(String)m_ctxStrings.get(context);
  if (ctxString == null) {
    throw ValidationException.missingContextStringForContext(context);
  }
  return ctxString;
}"
68034,"private JPanel buildMainPanel(ApplicationContext context){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel mainPanel=new JPanel(new GridBagLayout());
  JLabel logoLabel=new JLabel(context.getResourceRepository().getIcon(""String_Node_Str""));
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=3;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(20,30,0,0);
  mainPanel.add(logoLabel,constraints);
  JLabel toplinkLabel=new JLabel(context.getApplication().getProductName());
  toplinkLabel.setHorizontalAlignment(SwingConstants.CENTER);
  Font font=toplinkLabel.getFont();
  toplinkLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize() + 5));
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(20,10,0,50);
  mainPanel.add(toplinkLabel,constraints);
  JLabel applicationLabel=new JLabel(context.getApplication().getShortProductName());
  applicationLabel.setHorizontalAlignment(SwingConstants.CENTER);
  font=applicationLabel.getFont();
  applicationLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize() + 5));
  constraints.gridx=1;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(5,10,0,50);
  mainPanel.add(applicationLabel,constraints);
  JLabel versionLabel=new JLabel(context.getApplication().getReleaseDesignation());
  versionLabel.setHorizontalAlignment(SwingConstants.CENTER);
  font=versionLabel.getFont();
  versionLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize()));
  constraints.gridx=1;
  constraints.gridy=2;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(5,10,0,50);
  mainPanel.add(versionLabel,constraints);
  JLabel buildLabel=new JLabel(context.getResourceRepository().getString(""String_Node_Str"",context.getApplication().getBuildNumber()));
  buildLabel.setHorizontalAlignment(SwingConstants.CENTER);
  font=buildLabel.getFont();
  buildLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize()));
  constraints.gridx=1;
  constraints.gridy=3;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(0,10,0,50);
  mainPanel.add(buildLabel,constraints);
  LabelArea copyrightLabel=new LabelArea(context.getResourceRepository().getString(""String_Node_Str""));
  copyrightLabel.setHorizontalAlignment(SwingConstants.CENTER);
  constraints.gridx=0;
  constraints.gridy=4;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=1;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(30,50,0,50);
  mainPanel.add(copyrightLabel,constraints);
  return mainPanel;
}","private JPanel buildMainPanel(ApplicationContext context){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel mainPanel=new JPanel(new GridBagLayout());
  JLabel logoLabel=new JLabel(context.getResourceRepository().getIcon(""String_Node_Str""));
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=3;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(20,30,0,0);
  mainPanel.add(logoLabel,constraints);
  JLabel toplinkLabel=new JLabel(context.getApplication().getProductName());
  toplinkLabel.setHorizontalAlignment(SwingConstants.CENTER);
  Font font=toplinkLabel.getFont();
  toplinkLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize() + 5));
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(20,10,0,50);
  mainPanel.add(toplinkLabel,constraints);
  JLabel applicationLabel=new JLabel(context.getApplication().getShortProductName());
  applicationLabel.setHorizontalAlignment(SwingConstants.CENTER);
  font=applicationLabel.getFont();
  applicationLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize() + 5));
  constraints.gridx=1;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(5,10,0,50);
  mainPanel.add(applicationLabel,constraints);
  JLabel versionLabel=new JLabel(context.getResourceRepository().getString(""String_Node_Str"",context.getApplication().getVersionNumber()));
  versionLabel.setHorizontalAlignment(SwingConstants.CENTER);
  font=versionLabel.getFont();
  versionLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize()));
  constraints.gridx=1;
  constraints.gridy=2;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(5,10,0,50);
  mainPanel.add(versionLabel,constraints);
  JLabel buildLabel=new JLabel(context.getResourceRepository().getString(""String_Node_Str"",context.getApplication().getBuildNumber()));
  buildLabel.setHorizontalAlignment(SwingConstants.CENTER);
  font=buildLabel.getFont();
  buildLabel.setFont(new Font(font.getName(),Font.BOLD,font.getSize()));
  constraints.gridx=1;
  constraints.gridy=3;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(0,10,0,50);
  mainPanel.add(buildLabel,constraints);
  LabelArea copyrightLabel=new LabelArea(context.getResourceRepository().getString(""String_Node_Str""));
  copyrightLabel.setHorizontalAlignment(SwingConstants.CENTER);
  constraints.gridx=0;
  constraints.gridy=4;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=1;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(30,50,0,50);
  mainPanel.add(copyrightLabel,constraints);
  return mainPanel;
}"
68035,"private JPanel buildPrimaryTablePanel(){
  JPanel primaryTablePanel=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  JLabel tableLabel=buildLabel(""String_Node_Str"");
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=0;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,0,0);
  primaryTablePanel.add(tableLabel,constraints);
  LabelPanel primaryTableLabelPanel=new LabelPanel(this.buildLabelPanelTextAdapter());
  Insets insets=UIManager.getInsets(""String_Node_Str"");
  primaryTableLabelPanel.setBorder(BorderFactory.createCompoundBorder(UIManager.getBorder(""String_Node_Str""),BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right)));
  Dimension size=tableLabel.getPreferredSize();
  insets=primaryTableLabelPanel.getBorder().getBorderInsets(primaryTableLabelPanel);
  primaryTableLabelPanel.setPreferredSize(new Dimension(1,size.height + insets.top + insets.bottom));
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,5,0,0);
  primaryTablePanel.add(primaryTableLabelPanel,constraints);
  return primaryTablePanel;
}","private JPanel buildPrimaryTablePanel(){
  JPanel primaryTablePanel=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  JLabel tableLabel=buildLabel(""String_Node_Str"");
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=0;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,0,0);
  primaryTablePanel.add(tableLabel,constraints);
  LabelPanel primaryTableLabelPanel=new LabelPanel(this.buildLabelPanelTextAdapter());
  Insets insets=UIManager.getInsets(""String_Node_Str"");
  if (insets == null) {
    insets=UIManager.getInsets(""String_Node_Str"");
  }
  primaryTableLabelPanel.setBorder(BorderFactory.createCompoundBorder(UIManager.getBorder(""String_Node_Str""),BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right)));
  Dimension size=tableLabel.getPreferredSize();
  insets=primaryTableLabelPanel.getBorder().getBorderInsets(primaryTableLabelPanel);
  primaryTableLabelPanel.setPreferredSize(new Dimension(1,size.height + insets.top + insets.bottom));
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,5,0,0);
  primaryTablePanel.add(primaryTableLabelPanel,constraints);
  return primaryTablePanel;
}"
68036,"private CollectionValueModel buildJ2CAdaptersCollectionAdapter(){
  return new ReadOnlyCollectionValueModel(MWEisLoginSpec.getJ2CAdapterNames());
}","private CollectionValueModel buildJ2CAdaptersCollectionAdapter(){
  return new ReadOnlyCollectionValueModel(CollectionTools.sort(MWEisLoginSpec.j2CAdapterNames()));
}"
68037,"protected void buidPlatforms(){
  this.addPlatform(AQ_ID,""String_Node_Str"");
  this.addPlatform(MQ_ID,""String_Node_Str"");
}","protected void buidPlatforms(){
  this.addPlatform(AQ_ID,""String_Node_Str"");
  this.addPlatform(JMS_ID,""String_Node_Str"");
  this.addPlatform(MQ_ID,""String_Node_Str"");
  this.addPlatform(XML_ID,""String_Node_Str"");
}"
68038,"private void buidConnectionSpecs(){
  this.connectionSpecs.put(AQ_ID,""String_Node_Str"");
  this.connectionSpecs.put(MQ_ID,""String_Node_Str"");
}","private void buidConnectionSpecs(){
  this.connectionSpecs.put(AQ_ID,""String_Node_Str"");
  this.connectionSpecs.put(JMS_ID,""String_Node_Str"");
  this.connectionSpecs.put(MQ_ID,""String_Node_Str"");
  this.connectionSpecs.put(XML_ID,""String_Node_Str"");
}"
68039,"private ListCellRenderer buildEisNameRenderer(){
  return new SimpleListCellRenderer(){
    protected String buildText(    Object cellValue){
      if (((String)cellValue).equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (((String)cellValue).equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
;
}","private ListCellRenderer buildEisNameRenderer(){
  return new SimpleListCellRenderer(){
    protected String buildText(    Object cellValue){
      if (((String)cellValue).equals(""String_Node_Str"")) {
        return EisPlatformManager.AQ_ID;
      }
 else       if (((String)cellValue).equals(""String_Node_Str"")) {
        return EisPlatformManager.JMS_ID;
      }
 else       if (((String)cellValue).equals(""String_Node_Str"")) {
        return EisPlatformManager.MQ_ID;
      }
 else {
        return EisPlatformManager.XML_ID;
      }
    }
  }
;
}"
68040,"protected String buildText(Object cellValue){
  String string=(String)cellValue;
  if (string.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (string.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","protected String buildText(Object cellValue){
  String string=(String)cellValue;
  if (string.equals(""String_Node_Str"")) {
    return EisPlatformManager.AQ_ID;
  }
  if (string.equals(""String_Node_Str"")) {
    return EisPlatformManager.MQ_ID;
  }
  if (string.equals(""String_Node_Str"")) {
    return EisPlatformManager.JMS_ID;
  }
  return EisPlatformManager.XML_ID;
}"
68041,"private ListCellRenderer buildEisNameRenderer(){
  return new SimpleListCellRenderer(){
    protected String buildText(    Object cellValue){
      String string=(String)cellValue;
      if (string.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (string.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
;
}","private ListCellRenderer buildEisNameRenderer(){
  return new SimpleListCellRenderer(){
    protected String buildText(    Object cellValue){
      String string=(String)cellValue;
      if (string.equals(""String_Node_Str"")) {
        return EisPlatformManager.AQ_ID;
      }
      if (string.equals(""String_Node_Str"")) {
        return EisPlatformManager.MQ_ID;
      }
      if (string.equals(""String_Node_Str"")) {
        return EisPlatformManager.JMS_ID;
      }
      return EisPlatformManager.XML_ID;
    }
  }
;
}"
68042,"protected String buildText(Object cellValue){
  if (((String)cellValue).equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (((String)cellValue).equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","protected String buildText(Object cellValue){
  if (((String)cellValue).equals(""String_Node_Str"")) {
    return EisPlatformManager.AQ_ID;
  }
 else   if (((String)cellValue).equals(""String_Node_Str"")) {
    return EisPlatformManager.JMS_ID;
  }
 else   if (((String)cellValue).equals(""String_Node_Str"")) {
    return EisPlatformManager.MQ_ID;
  }
 else {
    return EisPlatformManager.XML_ID;
  }
}"
68043,"/** 
 * Creates the decorator responsible to format the class name (String) values in the Platform combo box.
 * @return A new <code>ListCellRenderer</code>
 */
private ListCellRenderer buildPlatformLabelDecorator(){
  return new SimpleListCellRenderer(){
    protected String buildText(    Object cellValue){
      if (((String)cellValue).equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (((String)cellValue).equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
;
}","/** 
 * Creates the decorator responsible to format the class name (String) values in the Platform combo box.
 * @return A new <code>ListCellRenderer</code>
 */
private ListCellRenderer buildPlatformLabelDecorator(){
  return new SimpleListCellRenderer(){
    protected String buildText(    Object cellValue){
      if (((String)cellValue).equals(""String_Node_Str"")) {
        return EisPlatformManager.AQ_ID;
      }
 else       if (((String)cellValue).equals(""String_Node_Str"")) {
        return EisPlatformManager.JMS_ID;
      }
 else       if (((String)cellValue).equals(""String_Node_Str"")) {
        return EisPlatformManager.MQ_ID;
      }
 else {
        return EisPlatformManager.XML_ID;
      }
    }
  }
;
}"
68044,"/** 
 * INTERNAL: Sets a javax.persistence.LockModeType to used with this queries execution.  The valid types are: - WRITE - READ - OPTIMISTIC - OPTIMISTIC_FORCE_INCREMENT - PESSIMISTIC - PESSIMISTIC_FORCE_INCREMENT - NONE Setting a null type will do nothing.
 */
public void setLockModeType(LockModeType lockModeType,AbstractSession session){
  if (lockModeType != null) {
    OptimisticLockingPolicy lockingPolicy=session.getDescriptor(getReferenceClass()).getOptimisticLockingPolicy();
    if (lockingPolicy == null || !(lockingPolicy instanceof VersionLockingPolicy)) {
      if (!lockModeType.name().equals(PESSIMISTIC) && !lockModeType.name().equals(NONE)) {
        throw new RuntimeException(ExceptionLocalization.buildMessage(""String_Node_Str"",null));
      }
    }
    this.lockModeType=lockModeType.name();
    setIsPrePrepared(false);
    setIsPrepared(false);
    setWasDefaultLockMode(false);
  }
}","/** 
 * INTERNAL: Sets a javax.persistence.LockModeType to used with this queries execution.  The valid types are: - WRITE - READ - OPTIMISTIC - OPTIMISTIC_FORCE_INCREMENT - PESSIMISTIC - PESSIMISTIC_FORCE_INCREMENT - NONE Setting a null type will do nothing.
 * @return returns a failure flag indicating that we were UNABLE to set the lock mode because of validation. Callers to this method should check the  return value and throw the necessary exception.
 */
public boolean setLockModeType(LockModeType lockModeType,AbstractSession session){
  if (lockModeType != null) {
    OptimisticLockingPolicy lockingPolicy=session.getDescriptor(getReferenceClass()).getOptimisticLockingPolicy();
    if (lockingPolicy == null || !(lockingPolicy instanceof VersionLockingPolicy)) {
      if (!lockModeType.name().equals(PESSIMISTIC) && !lockModeType.name().equals(NONE)) {
        return true;
      }
    }
    this.lockModeType=lockModeType.name();
    setIsPrePrepared(false);
    setIsPrepared(false);
    setWasDefaultLockMode(false);
  }
  return false;
}"
68045,"/** 
 * INTERNAL: Execute the query in the unit of work. This allows any pre-execute checks to be done for unit of work queries.
 */
public Object executeInUnitOfWork(UnitOfWorkImpl unitOfWork,AbstractRecord translationRow) throws DatabaseException, OptimisticLockException {
  Object result=null;
  try {
    if (!shouldMaintainCache() || isReadOnly()) {
      result=unitOfWork.getParent().executeQuery(this,translationRow);
    }
 else {
      result=execute(unitOfWork,translationRow);
    }
    if (lockModeType != null && result != null) {
      if (lockModeType.equals(READ) || lockModeType.equals(WRITE) || lockModeType.contains(OPTIMISTIC)) {
        boolean forceUpdateToVersionField=lockModeType.equals(WRITE) || lockModeType.equals(OPTIMISTIC_FORCE_INCREMENT);
        if (result instanceof Collection) {
          Iterator i=((Collection)result).iterator();
          while (i.hasNext()) {
            Object obj=i.next();
            if (obj != null) {
              if (obj instanceof Object[]) {
                for (                Object o : (Object[])obj) {
                  if (o != null) {
                    unitOfWork.forceUpdateToVersionField(o,forceUpdateToVersionField);
                  }
                }
              }
 else {
                unitOfWork.forceUpdateToVersionField(obj,forceUpdateToVersionField);
              }
            }
          }
        }
 else {
          unitOfWork.forceUpdateToVersionField(result,forceUpdateToVersionField);
        }
      }
    }
  }
 catch (  DatabaseException e) {
    if (lockModeType != null && lockModeType.contains(PESSIMISTIC)) {
      throw unitOfWork.getPlatform().getLockException(e);
    }
 else {
      throw e;
    }
  }
  return result;
}","/** 
 * INTERNAL: Execute the query in the unit of work. This allows any pre-execute checks to be done for unit of work queries.
 */
public Object executeInUnitOfWork(UnitOfWorkImpl unitOfWork,AbstractRecord translationRow) throws DatabaseException, OptimisticLockException {
  Object result=null;
  if (!shouldMaintainCache() || isReadOnly()) {
    result=unitOfWork.getParent().executeQuery(this,translationRow);
  }
 else {
    result=execute(unitOfWork,translationRow);
  }
  if (lockModeType != null && result != null) {
    if (lockModeType.equals(READ) || lockModeType.equals(WRITE) || lockModeType.contains(OPTIMISTIC)) {
      boolean forceUpdateToVersionField=lockModeType.equals(WRITE) || lockModeType.equals(OPTIMISTIC_FORCE_INCREMENT);
      if (result instanceof Collection) {
        Iterator i=((Collection)result).iterator();
        while (i.hasNext()) {
          Object obj=i.next();
          if (obj != null) {
            if (obj instanceof Object[]) {
              for (              Object o : (Object[])obj) {
                if (o != null) {
                  unitOfWork.forceUpdateToVersionField(o,forceUpdateToVersionField);
                }
              }
            }
 else {
              unitOfWork.forceUpdateToVersionField(obj,forceUpdateToVersionField);
            }
          }
        }
      }
 else {
        unitOfWork.forceUpdateToVersionField(result,forceUpdateToVersionField);
      }
    }
  }
  return result;
}"
68046,"/** 
 * INTERNAL: Sets a javax.persistence.LockModeType to used with this queries execution.  The valid types are: - WRITE - READ - OPTIMISTIC - OPTIMISTIC_FORCE_INCREMENT - PESSIMISTIC - PESSIMISTIC_FORCE_INCREMENT - NONE Setting a null type will do nothing.
 */
@Override public void setLockModeType(LockModeType lockModeType,AbstractSession session){
  if (lockModeType != null) {
    super.setLockModeType(lockModeType,session);
    if (!lockModeType.equals(PESSIMISTIC) && !lockModeType.equals(NONE)) {
      for (      ReportItem reportItem : (Vector<ReportItem>)getItems()) {
        if (reportItem.getAttributeExpression() != null && reportItem.getAttributeExpression().isExpressionBuilder()) {
          OptimisticLockingPolicy lockingPolicy=reportItem.getDescriptor().getOptimisticLockingPolicy();
          if (lockingPolicy == null || !(lockingPolicy instanceof VersionLockingPolicy)) {
            throw new RuntimeException(ExceptionLocalization.buildMessage(""String_Node_Str"",null));
          }
        }
      }
    }
  }
}","/** 
 * INTERNAL: Sets a javax.persistence.LockModeType to used with this queries execution.  The valid types are: - WRITE - READ - OPTIMISTIC - OPTIMISTIC_FORCE_INCREMENT - PESSIMISTIC - PESSIMISTIC_FORCE_INCREMENT - NONE Setting a null type will do nothing.
 * @return returns a failure flag indicating that we were UNABLE to set the lock mode because of validation. Callers to this method should check the  return value and throw the necessary exception.
 */
@Override public boolean setLockModeType(LockModeType lockModeType,AbstractSession session){
  if (lockModeType != null) {
    if (super.setLockModeType(lockModeType,session)) {
      return true;
    }
 else {
      if (!lockModeType.equals(PESSIMISTIC) && !lockModeType.equals(NONE)) {
        for (        ReportItem reportItem : (Vector<ReportItem>)getItems()) {
          if (reportItem.getAttributeExpression() != null && reportItem.getAttributeExpression().isExpressionBuilder()) {
            OptimisticLockingPolicy lockingPolicy=reportItem.getDescriptor().getOptimisticLockingPolicy();
            if (lockingPolicy == null || !(lockingPolicy instanceof VersionLockingPolicy)) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}"
68047,"/** 
 * Build a DatabaseQuery from an JPQL string.
 * @param jpql the JPQL string.
 * @param flushOnExecute flush the unit of work before executing the query.
 * @param session the session to get the descriptors for this query for.
 * @param hints a list of hints to be applied to the query.
 * @return a DatabaseQuery representing the given jpql.
 */
public static DatabaseQuery buildEJBQLDatabaseQuery(String queryName,String jpql,Session session,Enum lockMode,Map<String,Object> hints,ClassLoader classLoader){
  boolean isCacheable=(queryName == null) && (hints == null);
  DatabaseQuery databaseQuery=null;
  if (isCacheable) {
    databaseQuery=(DatabaseQuery)session.getProject().getJPQLParseCache().get(jpql);
  }
  if ((databaseQuery == null) || (!databaseQuery.isPrepared())) {
    JPQLParseTree parseTree=JPQLParser.buildParseTree(queryName,jpql);
    parseTree.setClassLoader(classLoader);
    databaseQuery=parseTree.createDatabaseQuery();
    databaseQuery.setJPQLString(jpql);
    parseTree.populateQuery(databaseQuery,(AbstractSession)session);
    if (databaseQuery.isReadAllQuery()) {
      ReadAllQuery readAllQuery=(ReadAllQuery)databaseQuery;
      if (readAllQuery.hasJoining() && (readAllQuery.getDistinctState() == ReadAllQuery.DONT_USE_DISTINCT)) {
        readAllQuery.setShouldFilterDuplicates(false);
      }
    }
    parseTree.addParametersToQuery(databaseQuery);
    ((JPQLCallQueryMechanism)databaseQuery.getQueryMechanism()).getJPQLCall().setIsParsed(true);
    if (databaseQuery.isReadQuery()) {
      databaseQuery.cascadeByMapping();
    }
    if (lockMode != null) {
      if (databaseQuery.isObjectLevelReadQuery()) {
        ((ObjectLevelReadQuery)databaseQuery).setLockModeType((LockModeType)lockMode,(AbstractSession)session);
      }
 else {
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",(Object[])null));
      }
    }
    databaseQuery=applyHints(hints,databaseQuery,classLoader);
    if (isCacheable) {
      databaseQuery.prepareCall(session,new DatabaseRecord());
      session.getProject().getJPQLParseCache().put(jpql,databaseQuery);
    }
  }
  return databaseQuery;
}","/** 
 * Build a DatabaseQuery from an JPQL string.
 * @param jpql the JPQL string.
 * @param flushOnExecute flush the unit of work before executing the query.
 * @param session the session to get the descriptors for this query for.
 * @param hints a list of hints to be applied to the query.
 * @return a DatabaseQuery representing the given jpql.
 */
public static DatabaseQuery buildEJBQLDatabaseQuery(String queryName,String jpql,Session session,Enum lockMode,Map<String,Object> hints,ClassLoader classLoader){
  boolean isCacheable=(queryName == null) && (hints == null);
  DatabaseQuery databaseQuery=null;
  if (isCacheable) {
    databaseQuery=(DatabaseQuery)session.getProject().getJPQLParseCache().get(jpql);
  }
  if ((databaseQuery == null) || (!databaseQuery.isPrepared())) {
    JPQLParseTree parseTree=JPQLParser.buildParseTree(queryName,jpql);
    parseTree.setClassLoader(classLoader);
    databaseQuery=parseTree.createDatabaseQuery();
    databaseQuery.setJPQLString(jpql);
    parseTree.populateQuery(databaseQuery,(AbstractSession)session);
    if (databaseQuery.isReadAllQuery()) {
      ReadAllQuery readAllQuery=(ReadAllQuery)databaseQuery;
      if (readAllQuery.hasJoining() && (readAllQuery.getDistinctState() == ReadAllQuery.DONT_USE_DISTINCT)) {
        readAllQuery.setShouldFilterDuplicates(false);
      }
    }
    parseTree.addParametersToQuery(databaseQuery);
    ((JPQLCallQueryMechanism)databaseQuery.getQueryMechanism()).getJPQLCall().setIsParsed(true);
    if (databaseQuery.isReadQuery()) {
      databaseQuery.cascadeByMapping();
    }
    if (lockMode != null) {
      if (databaseQuery.isObjectLevelReadQuery()) {
        if (((ObjectLevelReadQuery)databaseQuery).setLockModeType((LockModeType)lockMode,(AbstractSession)session)) {
          throw new PersistenceException(ExceptionLocalization.buildMessage(""String_Node_Str"",null));
        }
      }
 else {
        throw new IllegalArgumentException(ExceptionLocalization.buildMessage(""String_Node_Str"",(Object[])null));
      }
    }
    databaseQuery=applyHints(hints,databaseQuery,classLoader);
    if (isCacheable) {
      databaseQuery.prepareCall(session,new DatabaseRecord());
      session.getProject().getJPQLParseCache().put(jpql,databaseQuery);
    }
  }
  return databaseQuery;
}"
68048,"/** 
 * Execute a ReadQuery by assigning the stored parameter values and running it in the database
 * @return the results of the query execution
 */
protected Object executeReadQuery(){
  List parameterValues=processParameters();
  boolean shouldResetConformResultsInUnitOfWork=false;
  if (isFlushModeAUTO()) {
    performPreQueryFlush();
    if (getDatabaseQuery().isObjectLevelReadQuery()) {
      if (((ObjectLevelReadQuery)getDatabaseQuery()).shouldConformResultsInUnitOfWork()) {
        cloneSharedQuery();
        ((ObjectLevelReadQuery)getDatabaseQuery()).setCacheUsage(ObjectLevelReadQuery.UseDescriptorSetting);
        shouldResetConformResultsInUnitOfWork=true;
      }
    }
  }
  if (this.lockMode != null) {
    this.entityManager.checkForTransaction(true);
    cloneSharedQuery();
    ((ObjectLevelReadQuery)getDatabaseQuery()).setLockModeType(lockMode,(AbstractSession)getActiveSession());
  }
  Session session=getActiveSession();
  try {
    if (getDatabaseQuery().isUserDefined()) {
      if (this.entityManager.checkForTransaction(false) != null) {
        if (session.isUnitOfWork() && !((UnitOfWorkImpl)session).wasTransactionBegunPrematurely()) {
          ((UnitOfWorkImpl)session).beginEarlyTransaction();
        }
      }
    }
    return session.executeQuery(getDatabaseQuery(),parameterValues);
  }
 catch (  LockTimeoutException e) {
    throw e;
  }
catch (  PessimisticLockException e) {
    throw e;
  }
catch (  RuntimeException e) {
    setRollbackOnly();
    throw e;
  }
 finally {
    lockMode=null;
    if (shouldResetConformResultsInUnitOfWork) {
      ((ObjectLevelReadQuery)getDatabaseQuery()).conformResultsInUnitOfWork();
    }
  }
}","/** 
 * Execute a ReadQuery by assigning the stored parameter values and running it in the database
 * @return the results of the query execution
 */
protected Object executeReadQuery(){
  List parameterValues=processParameters();
  boolean shouldResetConformResultsInUnitOfWork=false;
  if (isFlushModeAUTO()) {
    performPreQueryFlush();
    if (getDatabaseQuery().isObjectLevelReadQuery()) {
      if (((ObjectLevelReadQuery)getDatabaseQuery()).shouldConformResultsInUnitOfWork()) {
        cloneSharedQuery();
        ((ObjectLevelReadQuery)getDatabaseQuery()).setCacheUsage(ObjectLevelReadQuery.UseDescriptorSetting);
        shouldResetConformResultsInUnitOfWork=true;
      }
    }
  }
  if (this.lockMode != null) {
    this.entityManager.checkForTransaction(true);
    cloneSharedQuery();
    if (((ObjectLevelReadQuery)getDatabaseQuery()).setLockModeType(lockMode,(AbstractSession)getActiveSession())) {
      throw new PersistenceException(ExceptionLocalization.buildMessage(""String_Node_Str"",null));
    }
  }
  Session session=getActiveSession();
  try {
    if (getDatabaseQuery().isUserDefined()) {
      if (this.entityManager.checkForTransaction(false) != null) {
        if (session.isUnitOfWork() && !((UnitOfWorkImpl)session).wasTransactionBegunPrematurely()) {
          ((UnitOfWorkImpl)session).beginEarlyTransaction();
        }
      }
    }
    return session.executeQuery(getDatabaseQuery(),parameterValues);
  }
 catch (  DatabaseException e) {
    if (lockMode != null && lockMode.name().contains(ObjectLevelReadQuery.PESSIMISTIC)) {
      if (session.getPlatform().isLockTimeoutException(e)) {
        throw new LockTimeoutException(e);
      }
 else {
        throw new PessimisticLockException(e);
      }
    }
 else {
      setRollbackOnly();
      throw e;
    }
  }
catch (  RuntimeException e) {
    setRollbackOnly();
    throw e;
  }
 finally {
    lockMode=null;
    if (shouldResetConformResultsInUnitOfWork) {
      ((ObjectLevelReadQuery)getDatabaseQuery()).conformResultsInUnitOfWork();
    }
  }
}"
68049,"/** 
 * INTERNAL:
 */
public void storeXMLDescriptorByQName(XMLDescriptor xmlDescriptor){
  QName descriptorQName;
  String defaultRootName;
  Vector tableNames=xmlDescriptor.getTableNames();
  for (int i=0; i < tableNames.size(); i++) {
    defaultRootName=(String)tableNames.get(i);
    if (null != defaultRootName) {
      int index=defaultRootName.indexOf(':');
      String defaultRootLocalName=defaultRootName.substring(index + 1);
      if (index > -1) {
        String defaultRootPrefix=defaultRootName.substring(0,index);
        String defaultRootNamespaceURI=xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
        descriptorQName=new QName(defaultRootNamespaceURI,defaultRootLocalName);
      }
 else {
        if (xmlDescriptor.getNamespaceResolver() != null) {
          descriptorQName=new QName(xmlDescriptor.getNamespaceResolver().getDefaultNamespaceURI(),defaultRootLocalName);
        }
 else {
          descriptorQName=new QName(defaultRootLocalName);
        }
      }
      if (!xmlDescriptor.hasInheritance() || xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
        descriptorsByQName.put(descriptorQName,xmlDescriptor);
      }
 else {
        XMLDescriptor existingDescriptor=(XMLDescriptor)descriptorsByQName.get(descriptorQName);
        if (existingDescriptor == null) {
          descriptorsByQName.put(descriptorQName,xmlDescriptor);
        }
      }
    }
  }
  XMLSchemaReference xmlSchemaReference=xmlDescriptor.getSchemaReference();
  if (null != xmlSchemaReference) {
    String schemaContext=xmlSchemaReference.getSchemaContext();
    if ((xmlSchemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlSchemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE)) {
      if ((null != schemaContext) && (schemaContext.lastIndexOf('/') == 0)) {
        schemaContext=schemaContext.substring(1,schemaContext.length());
        XPathFragment typeFragment=new XPathFragment(schemaContext);
        if (null != xmlDescriptor.getNamespaceResolver()) {
          typeFragment.setNamespaceURI(xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(typeFragment.getPrefix()));
        }
        this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
      }
 else {
        QName qname=xmlSchemaReference.getSchemaContextAsQName();
        if (qname != null) {
          XPathFragment typeFragment=new XPathFragment();
          typeFragment.setLocalName(qname.getLocalPart());
          typeFragment.setNamespaceURI(qname.getNamespaceURI());
          this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
        }
      }
    }
  }
}","/** 
 * INTERNAL:
 */
public void storeXMLDescriptorByQName(XMLDescriptor xmlDescriptor){
  QName descriptorQName;
  String defaultRootName;
  Vector tableNames=xmlDescriptor.getTableNames();
  for (int i=0; i < tableNames.size(); i++) {
    defaultRootName=(String)tableNames.get(i);
    if (null != defaultRootName) {
      int index=defaultRootName.indexOf(':');
      String defaultRootLocalName=defaultRootName.substring(index + 1);
      if (index > -1) {
        String defaultRootPrefix=defaultRootName.substring(0,index);
        String defaultRootNamespaceURI=xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
        descriptorQName=new QName(defaultRootNamespaceURI,defaultRootLocalName);
      }
 else {
        if (xmlDescriptor.getNamespaceResolver() != null) {
          descriptorQName=new QName(xmlDescriptor.getNamespaceResolver().getDefaultNamespaceURI(),defaultRootLocalName);
        }
 else {
          descriptorQName=new QName(defaultRootLocalName);
        }
      }
      if (!xmlDescriptor.hasInheritance() || xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
        descriptorsByQName.put(descriptorQName,xmlDescriptor);
      }
 else {
        XMLDescriptor existingDescriptor=(XMLDescriptor)descriptorsByQName.get(descriptorQName);
        if (existingDescriptor == null) {
          descriptorsByQName.put(descriptorQName,xmlDescriptor);
        }
      }
    }
  }
  XMLSchemaReference xmlSchemaReference=xmlDescriptor.getSchemaReference();
  if (null != xmlSchemaReference) {
    String schemaContext=xmlSchemaReference.getSchemaContext();
    if ((xmlSchemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlSchemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE)) {
      if ((null != schemaContext) && (schemaContext.lastIndexOf('/') == 0)) {
        schemaContext=schemaContext.substring(1,schemaContext.length());
        XPathFragment typeFragment=new XPathFragment(schemaContext);
        if (null != xmlDescriptor.getNamespaceResolver()) {
          typeFragment.setNamespaceURI(xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(typeFragment.getPrefix()));
        }
        this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
      }
 else {
        QName qname=xmlSchemaReference.getSchemaContextAsQName();
        if (qname != null) {
          if (xmlDescriptor.isWrapper() && xmlDescriptor.getJavaClassName().contains(""String_Node_Str"")) {
            return;
          }
          XPathFragment typeFragment=new XPathFragment();
          typeFragment.setLocalName(qname.getLocalPart());
          typeFragment.setNamespaceURI(qname.getNamespaceURI());
          this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
        }
      }
    }
  }
}"
68050,"private AddRemoveListPanel buildSequenceListPane(){
  AddRemoveListPanel panel=new AddRemoveListPanel(getApplicationContext(),buildSequenceListAdapter(),buildSortedSequenceListHolder());
  panel.setCellRenderer(buildSequenceListRenderer());
  return panel;
}","private AddRemoveListPanel buildSequenceListPane(){
  AddRemoveListPanel panel=new AddRemoveListPanel(getApplicationContext(),buildSequenceListAdapter(),buildSortedSequenceListHolder()){
    @Override protected void updateRemoveButton(    JButton removeButton){
      SequenceAdapter sequence=(SequenceAdapter)this.getSelectionModel().getSelectedValue();
      removeButton.setEnabled((sequence != null) && (getSelectedValues().length == 1) && (!sequence.isTheDefaultSequence()));
    }
  }
;
  panel.setCellRenderer(buildSequenceListRenderer());
  return panel;
}"
68051,"public void addSchemaComponents(JavaClass myClass){
  String myClassName=myClass.getQualifiedName();
  Element rootElement=null;
  TypeInfo info=(TypeInfo)typeInfo.get(myClassName);
  SchemaTypeInfo schemaTypeInfo=new SchemaTypeInfo();
  schemaTypeInfo.setSchemaTypeName(new QName(info.getClassNamespace(),info.getSchemaTypeName()));
  this.schemaTypeInfo.put(myClass.getQualifiedName(),schemaTypeInfo);
  NamespaceInfo namespaceInfo=this.packageToNamespaceMappings.get(myClass.getPackage().getQualifiedName());
  Schema schema=getSchemaForNamespace(info.getClassNamespace());
  info.setSchema(schema);
  String typeName=info.getSchemaTypeName();
  String[] propOrder=info.getPropOrder();
  String pfx=""String_Node_Str"";
  Property valueField=null;
  if (helper.isAnnotationPresent(myClass,XmlRootElement.class)) {
    XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(myClass,XmlRootElement.class);
    rootElement=new Element();
    String elementName=rootElemAnnotation.name();
    if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
      if (myClassName.indexOf(""String_Node_Str"") != -1) {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('$') + 1));
      }
 else {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('.') + 1));
      }
      if (elementName.length() >= 3) {
        int idx=elementName.length() - 1;
        char ch=elementName.charAt(idx - 1);
        if (Character.isDigit(ch)) {
          char lastCh=Character.toUpperCase(elementName.charAt(idx));
          elementName=elementName.substring(0,idx) + lastCh;
        }
      }
    }
    rootElement.setName(elementName);
    String rootNamespace=rootElemAnnotation.namespace();
    if (rootNamespace.equals(""String_Node_Str"")) {
      getSchemaForNamespace(namespaceInfo.getNamespace()).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(namespaceInfo.getNamespace(),rootNamespace));
      rootNamespace=namespaceInfo.getNamespace();
    }
 else {
      getSchemaForNamespace(rootNamespace).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(rootNamespace,elementName));
    }
    Schema rootSchema=getSchemaForNamespace(rootNamespace);
    if (schema != rootSchema) {
      Import schemaImport=new Import();
      schemaImport.setNamespace(schema.getTargetNamespace());
      schemaImport.setSchemaLocation(schema.getName());
      rootSchema.getImports().add(schemaImport);
    }
    if (!info.getClassNamespace().equals(""String_Node_Str"")) {
      pfx=getPrefixForNamespace(info.getClassNamespace(),rootSchema.getNamespaceResolver());
      if (pfx == null) {
        pfx=rootSchema.getNamespaceResolver().generatePrefix();
        rootSchema.getNamespaceResolver().put(pfx,info.getClassNamespace());
      }
      pfx+=""String_Node_Str"";
    }
  }
  ArrayList<String> propertyNames=info.getPropertyNames();
  if (info.isEnumerationType() || (propertyNames.size() == 1 && helper.isAnnotationPresent(info.getProperties().get(propertyNames.get(0)).getElement(),XmlValue.class))) {
    SimpleType type=new SimpleType();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setSimpleType(type);
      }
    }
 else {
      type.setName(typeName);
      schema.addTopLevelSimpleTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName restrictionType=null;
    Restriction restriction=new Restriction();
    if (info.isEnumerationType()) {
      restrictionType=((EnumTypeInfo)info).getRestrictionBase();
      restriction.setEnumerationFacets(this.getEnumerationFacetsFor((EnumTypeInfo)info));
      restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + restrictionType.getLocalPart());
      type.setRestriction(restriction);
    }
 else {
      valueField=info.getProperties().get(propertyNames.get(0));
      QName baseType=getSchemaTypeFor(valueField.getType());
      if (helper.isAnnotationPresent(valueField.getElement(),XmlList.class)) {
        List list=new List();
        list.setItemType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setList(list);
      }
 else {
        if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
          baseType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
        }
        restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setRestriction(restriction);
      }
    }
    info.setSimpleType(type);
  }
 else   if ((valueField=this.getXmlValueFieldForSimpleContent(info.getPropertyList())) != null) {
    ComplexType type=new ComplexType();
    SimpleContent content=new SimpleContent();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
    }
 else {
      type.setName(typeName);
      schema.addTopLevelComplexTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName extensionType=getSchemaTypeFor(valueField.getType());
    if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
      extensionType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
    }
    Extension extension=new Extension();
    extension.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + extensionType.getLocalPart());
    content.setExtension(extension);
    type.setSimpleContent(content);
    info.setComplexType(type);
    info.setPropOrder(propOrder);
  }
 else {
    ComplexType type=new ComplexType();
    JavaClass superClass=(JavaClass)myClass.getSuperclass();
    TypeInfo parentTypeInfo=this.typeInfo.get(superClass.getQualifiedName());
    Extension extension=null;
    if (parentTypeInfo != null) {
      extension=new Extension();
      String parentPrefix=getPrefixForNamespace(parentTypeInfo.getClassNamespace(),namespaceInfo.getNamespaceResolver());
      if (parentPrefix != null) {
        extension.setBaseType(parentPrefix + ""String_Node_Str"" + parentTypeInfo.getSchemaTypeName());
      }
 else {
        extension.setBaseType(parentTypeInfo.getSchemaTypeName());
      }
      ComplexContent content=new ComplexContent();
      content.setExtension(extension);
      type.setComplexContent(content);
    }
    TypeDefParticle compositor=null;
    if (propOrder.length == 0) {
      if (info.hasElementRefs()) {
        compositor=new Sequence();
        if (extension != null) {
          extension.setSequence((Sequence)compositor);
        }
 else {
          type.setSequence((Sequence)compositor);
        }
      }
 else       if (extension != null) {
        compositor=new All();
        extension.setAll((All)compositor);
      }
 else {
        compositor=new All();
        type.setAll((All)compositor);
      }
    }
 else {
      compositor=new Sequence();
      if (extension != null) {
        extension.setSequence((Sequence)compositor);
      }
 else {
        type.setSequence((Sequence)compositor);
      }
    }
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
 else {
      type.setName(typeName);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
      schema.addTopLevelComplexTypes(type);
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
    info.setPropOrder(propOrder);
  }
}","public void addSchemaComponents(JavaClass myClass){
  String myClassName=myClass.getQualifiedName();
  Element rootElement=null;
  TypeInfo info=(TypeInfo)typeInfo.get(myClassName);
  SchemaTypeInfo schemaTypeInfo=new SchemaTypeInfo();
  schemaTypeInfo.setSchemaTypeName(new QName(info.getClassNamespace(),info.getSchemaTypeName()));
  this.schemaTypeInfo.put(myClass.getQualifiedName(),schemaTypeInfo);
  NamespaceInfo namespaceInfo=this.packageToNamespaceMappings.get(myClass.getPackage().getQualifiedName());
  Schema schema=getSchemaForNamespace(info.getClassNamespace());
  info.setSchema(schema);
  String typeName=info.getSchemaTypeName();
  String[] propOrder=info.getPropOrder();
  String pfx=""String_Node_Str"";
  Property valueField=null;
  if (helper.isAnnotationPresent(myClass,XmlRootElement.class)) {
    XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(myClass,XmlRootElement.class);
    rootElement=new Element();
    String elementName=rootElemAnnotation.name();
    if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
      if (myClassName.indexOf(""String_Node_Str"") != -1) {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('$') + 1));
      }
 else {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('.') + 1));
      }
      if (elementName.length() >= 3) {
        int idx=elementName.length() - 1;
        char ch=elementName.charAt(idx - 1);
        if (Character.isDigit(ch)) {
          char lastCh=Character.toUpperCase(elementName.charAt(idx));
          elementName=elementName.substring(0,idx) + lastCh;
        }
      }
    }
    rootElement.setName(elementName);
    String rootNamespace=rootElemAnnotation.namespace();
    if (rootNamespace.equals(""String_Node_Str"")) {
      getSchemaForNamespace(namespaceInfo.getNamespace()).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(namespaceInfo.getNamespace(),rootNamespace));
      rootNamespace=namespaceInfo.getNamespace();
    }
 else {
      getSchemaForNamespace(rootNamespace).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(rootNamespace,elementName));
    }
    Schema rootSchema=getSchemaForNamespace(rootNamespace);
    if (schema != rootSchema) {
      Import schemaImport=new Import();
      schemaImport.setNamespace(schema.getTargetNamespace());
      schemaImport.setSchemaLocation(schema.getName());
      rootSchema.getImports().add(schemaImport);
    }
    if (!info.getClassNamespace().equals(""String_Node_Str"")) {
      pfx=getPrefixForNamespace(info.getClassNamespace(),rootSchema.getNamespaceResolver());
      if (pfx == null) {
        pfx=rootSchema.getNamespaceResolver().generatePrefix();
        rootSchema.getNamespaceResolver().put(pfx,info.getClassNamespace());
      }
      pfx+=""String_Node_Str"";
    }
  }
  ArrayList<String> propertyNames=info.getPropertyNames();
  if (info.isEnumerationType() || (propertyNames.size() == 1 && helper.isAnnotationPresent(info.getProperties().get(propertyNames.get(0)).getElement(),XmlValue.class))) {
    SimpleType type=new SimpleType();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setSimpleType(type);
      }
    }
 else {
      type.setName(typeName);
      schema.addTopLevelSimpleTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName restrictionType=null;
    Restriction restriction=new Restriction();
    if (info.isEnumerationType()) {
      restrictionType=((EnumTypeInfo)info).getRestrictionBase();
      restriction.setEnumerationFacets(this.getEnumerationFacetsFor((EnumTypeInfo)info));
      restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + restrictionType.getLocalPart());
      type.setRestriction(restriction);
    }
 else {
      valueField=info.getProperties().get(propertyNames.get(0));
      QName baseType=getSchemaTypeFor(valueField.getType());
      if (helper.isAnnotationPresent(valueField.getElement(),XmlList.class)) {
        List list=new List();
        list.setItemType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setList(list);
      }
 else {
        if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
          baseType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
        }
        restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setRestriction(restriction);
      }
    }
    info.setSimpleType(type);
  }
 else   if ((valueField=this.getXmlValueFieldForSimpleContent(info.getPropertyList())) != null) {
    ComplexType type=new ComplexType();
    SimpleContent content=new SimpleContent();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
    }
 else {
      type.setName(typeName);
      schema.addTopLevelComplexTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName extensionType=getSchemaTypeFor(valueField.getType());
    if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
      extensionType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
    }
    Extension extension=new Extension();
    extension.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + extensionType.getLocalPart());
    content.setExtension(extension);
    type.setSimpleContent(content);
    info.setComplexType(type);
  }
 else {
    ComplexType type=new ComplexType();
    JavaClass superClass=(JavaClass)myClass.getSuperclass();
    TypeInfo parentTypeInfo=this.typeInfo.get(superClass.getQualifiedName());
    Extension extension=null;
    if (parentTypeInfo != null) {
      extension=new Extension();
      String parentPrefix=getPrefixForNamespace(parentTypeInfo.getClassNamespace(),namespaceInfo.getNamespaceResolver());
      if (parentPrefix != null) {
        extension.setBaseType(parentPrefix + ""String_Node_Str"" + parentTypeInfo.getSchemaTypeName());
      }
 else {
        extension.setBaseType(parentTypeInfo.getSchemaTypeName());
      }
      ComplexContent content=new ComplexContent();
      content.setExtension(extension);
      type.setComplexContent(content);
    }
    TypeDefParticle compositor=null;
    if (propOrder.length == 0) {
      if (info.hasElementRefs()) {
        compositor=new Sequence();
        if (extension != null) {
          extension.setSequence((Sequence)compositor);
        }
 else {
          type.setSequence((Sequence)compositor);
        }
      }
 else       if (extension != null) {
        compositor=new All();
        extension.setAll((All)compositor);
      }
 else {
        compositor=new All();
        type.setAll((All)compositor);
      }
    }
 else {
      compositor=new Sequence();
      if (extension != null) {
        extension.setSequence((Sequence)compositor);
      }
 else {
        type.setSequence((Sequence)compositor);
      }
    }
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
 else {
      type.setName(typeName);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
      schema.addTopLevelComplexTypes(type);
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
    info.setPropOrder(propOrder);
  }
}"
68052,"public void setPropOrder(String[] order){
  if (order.length == 0 || order[0].equals(""String_Node_Str"")) {
    propOrder=null;
  }
 else {
    propOrder=new ArrayList(order.length);
    for (    String next : order) {
      propOrder.add(next);
    }
  }
}","public void setPropOrder(String[] order){
  if (order.length == 0) {
    propOrder=null;
  }
 else {
    propOrder=new ArrayList(order.length);
    for (    String next : order) {
      propOrder.add(next);
    }
  }
}"
68053,"private void writeTypeAttribute(MarshalRecord marshalRecord,XMLDescriptor descriptor,String xsiPrefix){
  String typeValue=descriptor.getSchemaReference().getSchemaContext();
  typeValue=typeValue.substring(1);
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}","private void writeTypeAttribute(MarshalRecord marshalRecord,XMLDescriptor descriptor,String xsiPrefix){
  String typeValue=descriptor.getSchemaReference().getSchemaContext();
  if (typeValue == null) {
    QName contextAsQName=descriptor.getSchemaReference().getSchemaContextAsQName();
    if (contextAsQName == null) {
      return;
    }
    String uri=contextAsQName.getNamespaceURI();
    String localPart=contextAsQName.getLocalPart();
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(uri);
    if (prefix == null) {
      String defaultUri=marshalRecord.getNamespaceResolver().getDefaultNamespaceURI();
      if (defaultUri != null && defaultUri.equals(uri)) {
        typeValue=localPart;
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,uri);
        typeValue=prefix + ""String_Node_Str"" + localPart;
      }
    }
 else {
      typeValue=prefix + ""String_Node_Str"" + localPart;
    }
  }
 else {
    typeValue=typeValue.substring(1);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}"
68054,"/** 
 * INTERNAL: return if an xsi:type attribute should be added for the given XMLRootObject
 */
public boolean shouldWriteTypeAttribute(Object object,XMLDescriptor descriptor,boolean isXMLRoot){
  boolean writeTypeAttribute=false;
  if (isXMLRoot && (descriptor != null)) {
    if (descriptor.hasInheritance()) {
      XMLField classIndicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
      String classIndicatorUri=null;
      String classIndicatorLocalName=classIndicatorField.getXPathFragment().getLocalName();
      String classIndicatorPrefix=classIndicatorField.getXPathFragment().getPrefix();
      if (classIndicatorPrefix != null) {
        classIndicatorUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(classIndicatorPrefix);
      }
      if ((classIndicatorLocalName != null) && classIndicatorLocalName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && (classIndicatorUri != null)&& classIndicatorUri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
        return false;
      }
    }
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    writeTypeAttribute=true;
    if (descriptor.getSchemaReference() == null) {
      return false;
    }
    for (int i=0; i < descriptor.getTableNames().size(); i++) {
      if (!writeTypeAttribute) {
        break;
      }
      String defaultRootQualifiedName=(String)descriptor.getTableNames().get(i);
      if (defaultRootQualifiedName != null) {
        String defaultRootLocalName=null;
        String defaultRootUri=null;
        int colonIndex=defaultRootQualifiedName.indexOf(':');
        if (colonIndex > 0) {
          String defaultRootPrefix=defaultRootQualifiedName.substring(0,colonIndex);
          defaultRootLocalName=defaultRootQualifiedName.substring(colonIndex + 1);
          if (descriptor.getNamespaceResolver() != null) {
            defaultRootUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
          }
        }
 else {
          defaultRootLocalName=defaultRootQualifiedName;
        }
        if (xmlRootLocalName != null) {
          if ((((defaultRootLocalName == null) && (xmlRootLocalName == null)) || (defaultRootLocalName.equals(xmlRootLocalName))) && (((defaultRootUri == null) && (xmlRootUri == null)) || ((xmlRootUri != null) && (defaultRootUri != null) && (defaultRootUri.equals(xmlRootUri))))) {
            writeTypeAttribute=false;
          }
        }
 else {
        }
      }
 else {
        if (xmlRootLocalName == null) {
          writeTypeAttribute=false;
        }
      }
    }
  }
  return writeTypeAttribute;
}","/** 
 * INTERNAL: return if an xsi:type attribute should be added for the given XMLRootObject
 */
public boolean shouldWriteTypeAttribute(Object object,XMLDescriptor descriptor,boolean isXMLRoot){
  boolean writeTypeAttribute=false;
  if (isXMLRoot && (descriptor != null)) {
    XMLRoot xr=(XMLRoot)object;
    QName qName=new QName(xr.getNamespaceURI(),xr.getLocalName());
    XMLDescriptor xdesc=xmlContext.getDescriptor(qName);
    if (xdesc != null) {
      return xdesc.getJavaClass() != descriptor.getJavaClass();
    }
    if (descriptor.hasInheritance()) {
      XMLField classIndicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
      String classIndicatorUri=null;
      String classIndicatorLocalName=classIndicatorField.getXPathFragment().getLocalName();
      String classIndicatorPrefix=classIndicatorField.getXPathFragment().getPrefix();
      if (classIndicatorPrefix != null) {
        classIndicatorUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(classIndicatorPrefix);
      }
      if ((classIndicatorLocalName != null) && classIndicatorLocalName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && (classIndicatorUri != null)&& classIndicatorUri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
        return false;
      }
    }
    if (descriptor.getSchemaReference() == null) {
      return false;
    }
    String xmlRootLocalName=xr.getLocalName();
    String xmlRootUri=xr.getNamespaceURI();
    writeTypeAttribute=true;
    for (int i=0; i < descriptor.getTableNames().size(); i++) {
      if (!writeTypeAttribute) {
        break;
      }
      String defaultRootQualifiedName=(String)descriptor.getTableNames().get(i);
      if (defaultRootQualifiedName != null) {
        String defaultRootLocalName=null;
        String defaultRootUri=null;
        int colonIndex=defaultRootQualifiedName.indexOf(':');
        if (colonIndex > 0) {
          String defaultRootPrefix=defaultRootQualifiedName.substring(0,colonIndex);
          defaultRootLocalName=defaultRootQualifiedName.substring(colonIndex + 1);
          if (descriptor.getNamespaceResolver() != null) {
            defaultRootUri=descriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
          }
        }
 else {
          defaultRootLocalName=defaultRootQualifiedName;
        }
        if (xmlRootLocalName != null) {
          if ((((defaultRootLocalName == null) && (xmlRootLocalName == null)) || (defaultRootLocalName.equals(xmlRootLocalName))) && (((defaultRootUri == null) && (xmlRootUri == null)) || ((xmlRootUri != null) && (defaultRootUri != null) && (defaultRootUri.equals(xmlRootUri))))) {
            writeTypeAttribute=false;
          }
        }
      }
 else {
        if (xmlRootLocalName == null) {
          writeTypeAttribute=false;
        }
      }
    }
  }
  return writeTypeAttribute;
}"
68055,"public SDOWrapperType(Type aPropertyType,String aTypeName,SDOTypeHelper aSDOTypeHelper,QName[] schemaTypes){
  super(SDOConstants.ORACLE_SDO_URL,aTypeName,aSDOTypeHelper);
  typeName=aTypeName;
  descriptorsMap=new HashMap<QName,XMLDescriptor>();
  SDOProperty valueProperty=new SDOProperty(aHelperContext);
  valueProperty.setName(""String_Node_Str"");
  valueProperty.setType(aPropertyType);
  valueProperty.setXsdType(schemaTypes[0]);
  addDeclaredProperty(valueProperty);
  String normalizedTypeName=SDOUtil.className(aTypeName,true,true,false);
  String instanceClassName=""String_Node_Str"" + normalizedTypeName + ""String_Node_Str"";
  setInstanceClassName(instanceClassName);
  String implClassName=""String_Node_Str"" + normalizedTypeName + ""String_Node_Str"";
  setImplClassName(implClassName);
  getInstanceClass();
  getImplClass();
  xmlDescriptor.getInterfacePolicy().addParentInterface(getInstanceClass());
  initializeDescriptor(xmlDescriptor,schemaTypes[0],aPropertyType,valueProperty);
  descriptorsMap.put(schemaTypes[0],xmlDescriptor);
  if (schemaTypes.length > 1) {
    for (int i=1; i < schemaTypes.length; i++) {
      XMLDescriptor d=new XMLDescriptor();
      QName schemaType=schemaTypes[i];
      String className=""String_Node_Str"" + normalizedTypeName + ""String_Node_Str""+ schemaType.getLocalPart()+ ""String_Node_Str"";
      try {
        SDOClassLoader loader=((SDOXMLHelper)aHelperContext.getXMLHelper()).getLoader();
        d.setJavaClass(loader.loadClass(className + ""String_Node_Str"",this));
        d.getInterfacePolicy().addParentInterface(loader.loadClass(className,this));
      }
 catch (      ClassNotFoundException e) {
        throw SDOException.classNotFound(e,getURI(),getName());
      }
catch (      SecurityException e) {
        throw SDOException.classNotFound(e,getURI(),getName());
      }
      initializeDescriptor(d,schemaType,aPropertyType,valueProperty);
      descriptorsMap.put(schemaTypes[i],d);
    }
  }
}","public SDOWrapperType(Type aPropertyType,String aTypeName,SDOTypeHelper aSDOTypeHelper,QName[] schemaTypes){
  super(SDOConstants.ORACLE_SDO_URL,aTypeName,aSDOTypeHelper);
  typeName=aTypeName;
  SDOProperty valueProperty=new SDOProperty(aHelperContext);
  valueProperty.setName(""String_Node_Str"");
  valueProperty.setType(aPropertyType);
  valueProperty.setXsdType(schemaTypes[0]);
  addDeclaredProperty(valueProperty);
  String normalizedTypeName=SDOUtil.className(aTypeName,true,true,false);
  String instanceClassName=""String_Node_Str"" + normalizedTypeName + ""String_Node_Str"";
  setInstanceClassName(instanceClassName);
  String implClassName=""String_Node_Str"" + normalizedTypeName + ""String_Node_Str"";
  setImplClassName(implClassName);
  getInstanceClass();
  getImplClass();
  xmlDescriptor.getInterfacePolicy().addParentInterface(getInstanceClass());
  initializeDescriptor(xmlDescriptor,schemaTypes[0],aPropertyType,valueProperty);
  descriptorsMap=new HashMap<QName,XMLDescriptor>();
  descriptorsMap.put(schemaTypes[0],xmlDescriptor);
  setSchemaContext(xmlDescriptor,schemaTypes[0]);
  if (schemaTypes.length > 1) {
    for (int i=1; i < schemaTypes.length; i++) {
      XMLDescriptor d=new XMLDescriptor();
      QName schemaType=schemaTypes[i];
      String className=""String_Node_Str"" + normalizedTypeName + ""String_Node_Str""+ schemaType.getLocalPart()+ ""String_Node_Str"";
      try {
        SDOClassLoader loader=((SDOXMLHelper)aHelperContext.getXMLHelper()).getLoader();
        d.setJavaClass(loader.loadClass(className + ""String_Node_Str"",this));
        d.getInterfacePolicy().addParentInterface(loader.loadClass(className,this));
      }
 catch (      ClassNotFoundException e) {
        throw SDOException.classNotFound(e,getURI(),getName());
      }
catch (      SecurityException e) {
        throw SDOException.classNotFound(e,getURI(),getName());
      }
      initializeDescriptor(d,schemaType,aPropertyType,valueProperty);
      descriptorsMap.put(schemaTypes[i],d);
      setSchemaContext(d,schemaTypes[i]);
    }
  }
}"
68056,"/** 
 * INTERNAL:
 */
public void storeXMLDescriptorByQName(XMLDescriptor xmlDescriptor){
  QName descriptorQName;
  String defaultRootName;
  Vector tableNames=xmlDescriptor.getTableNames();
  for (int i=0; i < tableNames.size(); i++) {
    defaultRootName=(String)tableNames.get(i);
    if (null != defaultRootName) {
      int index=defaultRootName.indexOf(':');
      String defaultRootLocalName=defaultRootName.substring(index + 1);
      if (index > -1) {
        String defaultRootPrefix=defaultRootName.substring(0,index);
        String defaultRootNamespaceURI=xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
        descriptorQName=new QName(defaultRootNamespaceURI,defaultRootLocalName);
      }
 else {
        if (xmlDescriptor.getNamespaceResolver() != null) {
          descriptorQName=new QName(xmlDescriptor.getNamespaceResolver().getDefaultNamespaceURI(),defaultRootLocalName);
        }
 else {
          descriptorQName=new QName(defaultRootLocalName);
        }
      }
      if (!xmlDescriptor.hasInheritance() || xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
        descriptorsByQName.put(descriptorQName,xmlDescriptor);
      }
 else {
        XMLDescriptor existingDescriptor=(XMLDescriptor)descriptorsByQName.get(descriptorQName);
        if (existingDescriptor == null) {
          descriptorsByQName.put(descriptorQName,xmlDescriptor);
        }
      }
    }
  }
  XMLSchemaReference xmlSchemaReference=xmlDescriptor.getSchemaReference();
  if (null != xmlSchemaReference) {
    String schemaContext=xmlSchemaReference.getSchemaContext();
    if ((xmlSchemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlSchemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE)) {
      if ((null != schemaContext) && (schemaContext.lastIndexOf('/') == 0)) {
        schemaContext=schemaContext.substring(1,schemaContext.length());
        XPathFragment typeFragment=new XPathFragment(schemaContext);
        if (null != xmlDescriptor.getNamespaceResolver()) {
          typeFragment.setNamespaceURI(xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(typeFragment.getPrefix()));
        }
        this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
      }
    }
  }
}","/** 
 * INTERNAL:
 */
public void storeXMLDescriptorByQName(XMLDescriptor xmlDescriptor){
  QName descriptorQName;
  String defaultRootName;
  Vector tableNames=xmlDescriptor.getTableNames();
  for (int i=0; i < tableNames.size(); i++) {
    defaultRootName=(String)tableNames.get(i);
    if (null != defaultRootName) {
      int index=defaultRootName.indexOf(':');
      String defaultRootLocalName=defaultRootName.substring(index + 1);
      if (index > -1) {
        String defaultRootPrefix=defaultRootName.substring(0,index);
        String defaultRootNamespaceURI=xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
        descriptorQName=new QName(defaultRootNamespaceURI,defaultRootLocalName);
      }
 else {
        if (xmlDescriptor.getNamespaceResolver() != null) {
          descriptorQName=new QName(xmlDescriptor.getNamespaceResolver().getDefaultNamespaceURI(),defaultRootLocalName);
        }
 else {
          descriptorQName=new QName(defaultRootLocalName);
        }
      }
      if (!xmlDescriptor.hasInheritance() || xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
        descriptorsByQName.put(descriptorQName,xmlDescriptor);
      }
 else {
        XMLDescriptor existingDescriptor=(XMLDescriptor)descriptorsByQName.get(descriptorQName);
        if (existingDescriptor == null) {
          descriptorsByQName.put(descriptorQName,xmlDescriptor);
        }
      }
    }
  }
  XMLSchemaReference xmlSchemaReference=xmlDescriptor.getSchemaReference();
  if (null != xmlSchemaReference) {
    String schemaContext=xmlSchemaReference.getSchemaContext();
    if ((xmlSchemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlSchemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE)) {
      if ((null != schemaContext) && (schemaContext.lastIndexOf('/') == 0)) {
        schemaContext=schemaContext.substring(1,schemaContext.length());
        XPathFragment typeFragment=new XPathFragment(schemaContext);
        if (null != xmlDescriptor.getNamespaceResolver()) {
          typeFragment.setNamespaceURI(xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(typeFragment.getPrefix()));
        }
        this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
      }
 else {
        QName qname=xmlSchemaReference.getSchemaContextAsQName();
        if (qname != null) {
          XPathFragment typeFragment=new XPathFragment();
          typeFragment.setLocalName(qname.getLocalPart());
          typeFragment.setNamespaceURI(qname.getNamespaceURI());
          this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
        }
      }
    }
  }
}"
68057,"private SDOProperty buildPropertyFromDataObject(DataObject dataObject,Type containingType,List types){
  String nameValue=dataObject.getString(""String_Node_Str"");
  Object typeObjectValue=dataObject.get(""String_Node_Str"");
  SDOProperty newProperty=new SDOProperty(aHelperContext);
  newProperty.setName(nameValue);
  Type typeValue=(Type)getValueFromObject(typeObjectValue,types);
  newProperty.setType(typeValue);
  if (typeValue != null) {
    if (typeValue == SDOConstants.SDO_BYTES) {
      newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (typeValue.isDataType()) {
      if (isBaseTypeBytes(typeValue)) {
        newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setContainment(dataObject.getBoolean(""String_Node_Str""));
  }
 else {
    if (typeValue != null) {
      newProperty.setContainment(!typeValue.isDataType());
    }
  }
  newProperty.setReadOnly(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setMany(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setNullable(dataObject.getBoolean(""String_Node_Str""));
  List aliasNames=dataObject.getList(""String_Node_Str"");
  for (int i=0; i < aliasNames.size(); i++) {
    Object aliasName=aliasNames.get(i);
    newProperty.getAliasNames().add(aliasName);
  }
  Object opposite=dataObject.get(""String_Node_Str"");
  if (opposite != null) {
    if (opposite instanceof Property) {
      newProperty.setOpposite((Property)opposite);
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setDefault(dataObject.get(""String_Node_Str""));
  }
  List openProps=((SDODataObject)dataObject)._getOpenContentProperties();
  for (int i=0; i < openProps.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openProps.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  List openPropsAttrs=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (int i=0; i < openPropsAttrs.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openPropsAttrs.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  if (newProperty.getType() == null) {
    throw SDOException.noTypeSpecifiedForProperty(newProperty.getName());
  }
  if (containingType != null) {
    ((SDOType)containingType).addDeclaredProperty(newProperty);
    if (aHelperContext.getXSDHelper().isElement(newProperty) || newProperty.getType().isChangeSummaryType()) {
      newProperty.setNamespaceQualified(true);
    }
    newProperty.buildMapping(containingType.getURI());
  }
  return newProperty;
}","private SDOProperty buildPropertyFromDataObject(DataObject dataObject,Type containingType,List types){
  String nameValue=dataObject.getString(""String_Node_Str"");
  Object typeObjectValue=dataObject.get(""String_Node_Str"");
  SDOProperty newProperty=new SDOProperty(aHelperContext);
  newProperty.setName(nameValue);
  Type typeValue=(Type)getValueFromObject(typeObjectValue,types);
  newProperty.setType(typeValue);
  if (typeValue != null) {
    if (typeValue == SDOConstants.SDO_BYTES) {
      newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (typeValue.isDataType()) {
      if (isBaseTypeBytes(typeValue)) {
        newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setContainment(dataObject.getBoolean(""String_Node_Str""));
  }
 else {
    if (typeValue != null) {
      newProperty.setContainment(!typeValue.isDataType());
    }
  }
  newProperty.setReadOnly(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setMany(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setNullable(dataObject.getBoolean(""String_Node_Str""));
  List aliasNames=dataObject.getList(""String_Node_Str"");
  for (int i=0; i < aliasNames.size(); i++) {
    Object aliasName=aliasNames.get(i);
    newProperty.getAliasNames().add(aliasName);
  }
  Object opposite=dataObject.get(""String_Node_Str"");
  if (opposite != null) {
    if (opposite instanceof SDOProperty) {
      newProperty.setOpposite((SDOProperty)opposite);
      ((SDOProperty)opposite).setOpposite(newProperty);
    }
 else     if (opposite instanceof DataObject) {
      SDOProperty prop=(SDOProperty)typeValue.getProperty(((DataObject)opposite).getString(""String_Node_Str""));
      if (prop != null) {
        newProperty.setOpposite(prop);
        prop.setOpposite(newProperty);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setDefault(dataObject.get(""String_Node_Str""));
  }
  List openProps=((SDODataObject)dataObject)._getOpenContentProperties();
  for (int i=0; i < openProps.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openProps.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  List openPropsAttrs=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (int i=0; i < openPropsAttrs.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openPropsAttrs.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  if (newProperty.getType() == null) {
    throw SDOException.noTypeSpecifiedForProperty(newProperty.getName());
  }
  if (containingType != null) {
    ((SDOType)containingType).addDeclaredProperty(newProperty);
    if (aHelperContext.getXSDHelper().isElement(newProperty) || newProperty.getType().isChangeSummaryType()) {
      newProperty.setNamespaceQualified(true);
    }
    newProperty.buildMapping(containingType.getURI());
  }
  return newProperty;
}"
68058,"private SDOType processSimpleType(String targetNamespace,String defaultNamespace,String sdoTypeName,SimpleType simpleType){
  if (simpleType == null) {
    return null;
  }
  boolean addedNR=addNextNamespaceResolver(simpleType.getAttributesMap());
  String name=sdoTypeName;
  String originalName=name;
  String nameValue=(String)simpleType.getAttributesMap().get(SDOConstants.SDOXML_NAME_QNAME);
  if (nameValue != null) {
    itemNameToSDOName.put(sdoTypeName,nameValue);
    name=nameValue;
  }
  SDOType newType=startSimpleType(targetNamespace,defaultNamespace,name,originalName,simpleType);
  if (newType != null) {
    Restriction restriction=simpleType.getRestriction();
    if (restriction != null) {
      processRestriction(targetNamespace,defaultNamespace,newType,restriction);
    }
    List list=simpleType.getList();
    if (list != null) {
      processList(targetNamespace,defaultNamespace,sdoTypeName,list);
    }
    Union union=simpleType.getUnion();
    if (union != null) {
      processUnion(targetNamespace,defaultNamespace,sdoTypeName,union);
    }
    finishSimpleType(targetNamespace,defaultNamespace,sdoTypeName,simpleType);
  }
  if (addedNR) {
    namespaceResolvers.remove(namespaceResolvers.size() - 1);
  }
  return newType;
}","private SDOType processSimpleType(String targetNamespace,String defaultNamespace,String sdoTypeName,SimpleType simpleType){
  if (simpleType == null) {
    return null;
  }
  boolean addedNR=addNextNamespaceResolver(simpleType.getAttributesMap());
  String name=sdoTypeName;
  String originalName=name;
  String nameValue=(String)simpleType.getAttributesMap().get(SDOConstants.SDOXML_NAME_QNAME);
  if (nameValue != null) {
    itemNameToSDOName.put(sdoTypeName,nameValue);
    name=nameValue;
  }
  SDOType newType=startSimpleType(targetNamespace,defaultNamespace,name,originalName,simpleType);
  if (newType != null) {
    Restriction restriction=simpleType.getRestriction();
    if (restriction != null) {
      processRestriction(targetNamespace,defaultNamespace,newType,restriction);
    }
    List list=simpleType.getList();
    if (list != null) {
      processList(targetNamespace,defaultNamespace,sdoTypeName,list,newType);
    }
    Union union=simpleType.getUnion();
    if (union != null) {
      processUnion(targetNamespace,defaultNamespace,sdoTypeName,union,newType);
    }
    finishSimpleType(targetNamespace,defaultNamespace,sdoTypeName,simpleType,newType);
  }
  if (addedNR) {
    namespaceResolvers.remove(namespaceResolvers.size() - 1);
  }
  return newType;
}"
68059,"private void processAttribute(String targetNamespace,String defaultNamespace,SDOType owningType,Attribute attribute,boolean isGlobal){
  SimpleType simpleType=attribute.getSimpleType();
  if (simpleType != null) {
    processSimpleType(targetNamespace,defaultNamespace,attribute.getName(),simpleType);
    processSimpleAttribute(targetNamespace,defaultNamespace,owningType,attribute,isGlobal,rootSchema.isAttributeFormDefault());
  }
 else {
    processSimpleAttribute(targetNamespace,defaultNamespace,owningType,attribute,isGlobal,rootSchema.isAttributeFormDefault());
  }
}","private void processAttribute(String targetNamespace,String defaultNamespace,SDOType owningType,Attribute attribute,boolean isGlobal){
  SimpleType simpleType=attribute.getSimpleType();
  if (simpleType != null) {
    SDOType propertyType=processSimpleType(targetNamespace,defaultNamespace,attribute.getName(),simpleType);
    processSimpleAttribute(targetNamespace,defaultNamespace,owningType,attribute,isGlobal,rootSchema.isAttributeFormDefault(),propertyType);
  }
 else {
    processSimpleAttribute(targetNamespace,defaultNamespace,owningType,attribute,isGlobal,rootSchema.isAttributeFormDefault(),null);
  }
}"
68060,"private void processList(String targetNamespace,String defaultNamespace,String sdoTypeName,List list){
  if (list != null) {
    SDOType type=getSDOTypeForName(targetNamespace,defaultNamespace,sdoTypeName);
    type.setXsdList(true);
    type.setInstanceClass(ClassConstants.List_Class);
  }
}","private void processList(String targetNamespace,String defaultNamespace,String sdoTypeName,List list,SDOType type){
  if (list != null) {
    type.setXsdList(true);
    type.setInstanceClass(ClassConstants.List_Class);
  }
}"
68061,"private void finishSimpleType(String targetNamespace,String defaultNamespace,String sdoTypeName,SimpleType simpleType){
  SDOType currentType=getSDOTypeForName(targetNamespace,defaultNamespace,false,sdoTypeName);
  String value=(String)simpleType.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (value != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(value,java.util.List.class);
    currentType.setAliasNames(names);
  }
  String instanceClassValue=(String)simpleType.getAttributesMap().get(SDOConstants.SDOJAVA_INSTANCECLASS_QNAME);
  if (instanceClassValue != null) {
    currentType.setInstanceProperty(SDOConstants.JAVA_CLASS_PROPERTY,instanceClassValue);
    currentType.setBaseTypes(null);
  }
  String extendedInstanceClassValue=(String)simpleType.getAttributesMap().get(SDOConstants.SDOJAVA_EXTENDEDINSTANCECLASS_QNAME);
  if (extendedInstanceClassValue != null) {
    currentType.setInstanceClassName(extendedInstanceClassValue);
  }
  currentType.postInitialize();
}","private void finishSimpleType(String targetNamespace,String defaultNamespace,String sdoTypeName,SimpleType simpleType,SDOType currentType){
  String value=(String)simpleType.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (value != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(value,java.util.List.class);
    currentType.setAliasNames(names);
  }
  String instanceClassValue=(String)simpleType.getAttributesMap().get(SDOConstants.SDOJAVA_INSTANCECLASS_QNAME);
  if (instanceClassValue != null) {
    currentType.setInstanceProperty(SDOConstants.JAVA_CLASS_PROPERTY,instanceClassValue);
    currentType.setBaseTypes(null);
  }
  String extendedInstanceClassValue=(String)simpleType.getAttributesMap().get(SDOConstants.SDOJAVA_EXTENDEDINSTANCECLASS_QNAME);
  if (extendedInstanceClassValue != null) {
    currentType.setInstanceClassName(extendedInstanceClassValue);
  }
  currentType.postInitialize();
}"
68062,"private void processSimpleAttribute(String targetNamespace,String defaultNamespace,SDOType owningType,Attribute attribute,boolean isGlobal,boolean isQualified){
  if (attribute == null) {
    return;
  }
  SDOProperty p=null;
  String typeName=null;
  SDOType sdoPropertyType=null;
  String mappingUri=null;
  if (owningType != null) {
    mappingUri=owningType.getURI();
  }
  if (attribute.getRef() != null) {
    String ref=attribute.getRef();
    String localName=null;
    String uri=null;
    int index=ref.indexOf(':');
    if (index != -1) {
      String prefix=ref.substring(0,index);
      localName=ref.substring(index + 1,ref.length());
      uri=getURIForPrefix(prefix);
    }
 else {
      localName=ref;
      uri=defaultNamespace;
    }
    Property lookedUp=owningType.getProperty(localName);
    if (lookedUp != null) {
      if (inRestriction) {
        return;
      }
      updateCollisionProperty(owningType,(SDOProperty)lookedUp);
    }
 else {
      SDOProperty theProp=new SDOProperty(aHelperContext);
      theProp.setName(localName);
      theProp.setGlobal(false);
      theProp.setContainment(false);
      theProp.setXsd(true);
      theProp.setMany(false);
      if (attribute.getAnnotation() != null) {
        java.util.List doc=attribute.getAnnotation().getDocumentation();
        if (doc != null) {
          theProp.setInstanceProperty(SDOConstants.DOCUMENTATION_PROPERTY,doc);
        }
      }
      theProp.setFinalized(true);
      GlobalRef globalRef=new GlobalRef();
      globalRef.setProperty(theProp);
      owningType.addDeclaredProperty(theProp);
      globalRef.setIsElement(false);
      globalRef.setOwningType(owningType);
      globalRef.setUri(uri);
      globalRef.setLocalName(localName);
      addGlobalRef(globalRef);
    }
    return;
  }
 else {
    if (isGlobal) {
      SDOProperty lookedUpProp=getExistingGlobalProperty(targetNamespace,attribute.getName(),false);
      if (lookedUpProp != null && lookedUpProp.isFinalized()) {
        return;
      }
    }
    p=createNewProperty(targetNamespace,attribute.getName(),isQualified,isGlobal,false,false,attribute.getAnnotation());
    if (attribute.getAnnotation() != null) {
      p.setAppInfoElements(attribute.getAnnotation().getAppInfo());
    }
    typeName=attribute.getType();
    if (typeName != null) {
      p.setName(attribute.getName());
      QName qname=getQNameForString(defaultNamespace,typeName);
      if (isGlobal) {
        processGlobalItem(targetNamespace,defaultNamespace,typeName);
      }
      if ((qname.equals(XMLConstants.BASE_64_BINARY_QNAME)) || (qname.equals(XMLConstants.HEX_BINARY_QNAME)) || (qname.equals(XMLConstants.DATE_QNAME))|| (qname.equals(XMLConstants.TIME_QNAME))|| (qname.equals(XMLConstants.DATE_TIME_QNAME))) {
        p.setXsdType(qname);
      }
      sdoPropertyType=getSDOTypeForName(targetNamespace,defaultNamespace,typeName);
      if ((p.getXsdType() == null) && (sdoPropertyType.getXsdType() != null)) {
        p.setXsdType(sdoPropertyType.getXsdType());
      }
    }
 else     if (attribute.getSimpleType() != null) {
      p.setName(attribute.getName());
      sdoPropertyType=getSDOTypeForName(targetNamespace,defaultNamespace,attribute.getName());
      typeName=attribute.getName();
    }
 else {
      p.setName(attribute.getName());
      sdoPropertyType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(SDOConstants.ANY_TYPE_QNAME);
    }
  }
  sdoPropertyType=processSimpleComponentAnnotations(owningType,attribute,p,targetNamespace,defaultNamespace,sdoPropertyType);
  p.setType(sdoPropertyType);
  p.setContainment(false);
  setDefaultValue(p,attribute);
  if (p.getType().isChangeSummaryType()) {
    p.setReadOnly(true);
  }
  if (owningType != null) {
    updateOwnerAndBuildMapping(owningType,p,defaultNamespace,targetNamespace,attribute,typeName,mappingUri);
  }
  p.setFinalized(true);
}","private void processSimpleAttribute(String targetNamespace,String defaultNamespace,SDOType owningType,Attribute attribute,boolean isGlobal,boolean isQualified,SDOType sdoPropertyType){
  if (attribute == null) {
    return;
  }
  SDOProperty p=null;
  String typeName=null;
  String mappingUri=null;
  if (owningType != null) {
    mappingUri=owningType.getURI();
  }
  if (attribute.getRef() != null) {
    String ref=attribute.getRef();
    String localName=null;
    String uri=null;
    int index=ref.indexOf(':');
    if (index != -1) {
      String prefix=ref.substring(0,index);
      localName=ref.substring(index + 1,ref.length());
      uri=getURIForPrefix(prefix);
    }
 else {
      localName=ref;
      uri=defaultNamespace;
    }
    Property lookedUp=owningType.getProperty(localName);
    if (lookedUp != null) {
      if (inRestriction) {
        return;
      }
      updateCollisionProperty(owningType,(SDOProperty)lookedUp);
    }
 else {
      SDOProperty theProp=new SDOProperty(aHelperContext);
      theProp.setName(localName);
      theProp.setGlobal(false);
      theProp.setContainment(false);
      theProp.setXsd(true);
      theProp.setMany(false);
      if (attribute.getAnnotation() != null) {
        java.util.List doc=attribute.getAnnotation().getDocumentation();
        if (doc != null) {
          theProp.setInstanceProperty(SDOConstants.DOCUMENTATION_PROPERTY,doc);
        }
      }
      theProp.setFinalized(true);
      GlobalRef globalRef=new GlobalRef();
      globalRef.setProperty(theProp);
      owningType.addDeclaredProperty(theProp);
      globalRef.setIsElement(false);
      globalRef.setOwningType(owningType);
      globalRef.setUri(uri);
      globalRef.setLocalName(localName);
      addGlobalRef(globalRef);
    }
    return;
  }
 else {
    if (isGlobal) {
      SDOProperty lookedUpProp=getExistingGlobalProperty(targetNamespace,attribute.getName(),false);
      if (lookedUpProp != null && lookedUpProp.isFinalized()) {
        return;
      }
    }
    p=createNewProperty(targetNamespace,attribute.getName(),isQualified,isGlobal,false,false,attribute.getAnnotation());
    if (attribute.getAnnotation() != null) {
      p.setAppInfoElements(attribute.getAnnotation().getAppInfo());
    }
    typeName=attribute.getType();
    if (typeName != null) {
      p.setName(attribute.getName());
      QName qname=getQNameForString(defaultNamespace,typeName);
      if (isGlobal) {
        processGlobalItem(targetNamespace,defaultNamespace,typeName);
      }
      if ((qname.equals(XMLConstants.BASE_64_BINARY_QNAME)) || (qname.equals(XMLConstants.HEX_BINARY_QNAME)) || (qname.equals(XMLConstants.DATE_QNAME))|| (qname.equals(XMLConstants.TIME_QNAME))|| (qname.equals(XMLConstants.DATE_TIME_QNAME))) {
        p.setXsdType(qname);
      }
      sdoPropertyType=getSDOTypeForName(targetNamespace,defaultNamespace,typeName);
      if ((p.getXsdType() == null) && (sdoPropertyType.getXsdType() != null)) {
        p.setXsdType(sdoPropertyType.getXsdType());
      }
    }
 else     if (attribute.getSimpleType() != null) {
      p.setName(attribute.getName());
      typeName=attribute.getName();
    }
 else {
      p.setName(attribute.getName());
      sdoPropertyType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(SDOConstants.ANY_TYPE_QNAME);
    }
  }
  sdoPropertyType=processSimpleComponentAnnotations(owningType,attribute,p,targetNamespace,defaultNamespace,sdoPropertyType);
  p.setType(sdoPropertyType);
  p.setContainment(false);
  setDefaultValue(p,attribute);
  if (p.getType().isChangeSummaryType()) {
    p.setReadOnly(true);
  }
  if (owningType != null) {
    updateOwnerAndBuildMapping(owningType,p,defaultNamespace,targetNamespace,attribute,typeName,mappingUri);
  }
  p.setFinalized(true);
}"
68063,"private void processUnion(String targetNamespace,String defaultNamespace,String sdoTypeName,Union union){
  if (union != null) {
    java.util.List allMemberTypes=union.getAllMemberTypes();
    SDOType type=getSDOTypeForName(targetNamespace,defaultNamespace,sdoTypeName);
    String firstInstanceClassName=null;
    for (int i=0; i < allMemberTypes.size(); i++) {
      String nextMemberType=(String)allMemberTypes.get(i);
      SDOType typeForMemberType=getTypeForName(targetNamespace,defaultNamespace,nextMemberType);
      if (i == 0) {
        firstInstanceClassName=typeForMemberType.getInstanceClassName();
        if (firstInstanceClassName == null) {
          break;
        }
      }
 else {
        String nextClassName=typeForMemberType.getInstanceClassName();
        if (!firstInstanceClassName.equals(nextClassName)) {
          type.setInstanceClass(java.lang.Object.class);
          return;
        }
      }
    }
    if (firstInstanceClassName != null) {
      type.setInstanceClassName(firstInstanceClassName);
    }
 else {
      type.setInstanceClass(java.lang.Object.class);
    }
  }
}","private void processUnion(String targetNamespace,String defaultNamespace,String sdoTypeName,Union union,SDOType type){
  if (union != null) {
    java.util.List allMemberTypes=union.getAllMemberTypes();
    String firstInstanceClassName=null;
    for (int i=0; i < allMemberTypes.size(); i++) {
      String nextMemberType=(String)allMemberTypes.get(i);
      SDOType typeForMemberType=getTypeForName(targetNamespace,defaultNamespace,nextMemberType);
      if (i == 0) {
        firstInstanceClassName=typeForMemberType.getInstanceClassName();
        if (firstInstanceClassName == null) {
          break;
        }
      }
 else {
        String nextClassName=typeForMemberType.getInstanceClassName();
        if (!firstInstanceClassName.equals(nextClassName)) {
          type.setInstanceClass(java.lang.Object.class);
          return;
        }
      }
    }
    if (firstInstanceClassName != null) {
      type.setInstanceClassName(firstInstanceClassName);
    }
 else {
      type.setInstanceClass(java.lang.Object.class);
    }
  }
}"
68064,"/** 
 * Extract primary key attribute values from the domainObject.
 */
public Vector extractPrimaryKeyFromObject(Object domainObject,AbstractSession session,boolean shouldReturnNullIfNull){
  boolean isPersistenceEntity=domainObject instanceof PersistenceEntity;
  if (isPersistenceEntity) {
    Vector key=((PersistenceEntity)domainObject)._persistence_getPKVector();
    if (key != null) {
      return key;
    }
  }
  ClassDescriptor descriptor=this.descriptor;
  boolean isNull=false;
  if (descriptor.hasInheritance() && (domainObject.getClass() != descriptor.getJavaClass()) && (!domainObject.getClass().getSuperclass().equals(descriptor.getJavaClass()))) {
    return session.getDescriptor(domainObject).getObjectBuilder().extractPrimaryKeyFromObject(domainObject,session,shouldReturnNullIfNull);
  }
 else {
    IdValidation idValidation=descriptor.getIdValidation();
    List primaryKeyFields=descriptor.getPrimaryKeyFields();
    Vector primaryKeyValues=new NonSynchronizedVector(primaryKeyFields.size());
    List mappings=getPrimaryKeyMappings();
    int size=mappings.size();
    if (descriptor.hasSimplePrimaryKey()) {
      for (int index=0; index < size; index++) {
        AbstractDirectMapping mapping=(AbstractDirectMapping)mappings.get(index);
        Object keyValue=mapping.valueFromObject(domainObject,(DatabaseField)primaryKeyFields.get(index),session);
        if ((idValidation != IdValidation.NONE) && ((keyValue == null) || ((idValidation == IdValidation.ZERO) && Helper.isEquivalentToNull(keyValue)))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(keyValue);
      }
    }
 else {
      AbstractRecord databaseRow=createRecord(size,session);
      for (int index=0; index < size; index++) {
        DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
        if (mapping != null) {
          mapping.writeFromObjectIntoRow(domainObject,databaseRow,session);
        }
      }
      List primaryKeyClassifications=getPrimaryKeyClassifications();
      Platform platform=session.getPlatform(domainObject.getClass());
      for (int index=0; index < size; index++) {
        Class classification=(Class)primaryKeyClassifications.get(index);
        Object value=databaseRow.get((DatabaseField)primaryKeyFields.get(index));
        if ((idValidation != IdValidation.NONE) && ((value == null) || ((idValidation == IdValidation.ZERO) && Helper.isEquivalentToNull(value)))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(platform.convertObject(value,classification));
      }
    }
    if (isPersistenceEntity && (!isNull)) {
      ((PersistenceEntity)domainObject)._persistence_setPKVector(primaryKeyValues);
    }
    return primaryKeyValues;
  }
}","/** 
 * Extract primary key attribute values from the domainObject.
 */
public Vector extractPrimaryKeyFromObject(Object domainObject,AbstractSession session,boolean shouldReturnNullIfNull){
  boolean isPersistenceEntity=domainObject instanceof PersistenceEntity;
  if (isPersistenceEntity) {
    Vector key=((PersistenceEntity)domainObject)._persistence_getPKVector();
    if (key != null) {
      return key;
    }
  }
  ClassDescriptor descriptor=this.descriptor;
  boolean isNull=false;
  if (descriptor.hasInheritance() && (domainObject.getClass() != descriptor.getJavaClass()) && (!domainObject.getClass().getSuperclass().equals(descriptor.getJavaClass()))) {
    return session.getDescriptor(domainObject).getObjectBuilder().extractPrimaryKeyFromObject(domainObject,session,shouldReturnNullIfNull);
  }
 else {
    IdValidation idValidation=descriptor.getIdValidation();
    List primaryKeyFields=descriptor.getPrimaryKeyFields();
    Vector primaryKeyValues=new NonSynchronizedVector(primaryKeyFields.size());
    List mappings=getPrimaryKeyMappings();
    int size=mappings.size();
    if (descriptor.hasSimplePrimaryKey()) {
      for (int index=0; index < size; index++) {
        AbstractDirectMapping mapping=(AbstractDirectMapping)mappings.get(index);
        Object keyValue=mapping.valueFromObject(domainObject,(DatabaseField)primaryKeyFields.get(index),session);
        if ((idValidation != IdValidation.NONE) && ((keyValue == null) || ((idValidation == IdValidation.ZERO) && Helper.isEquivalentToNull(keyValue)))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(keyValue);
      }
    }
 else {
      AbstractRecord databaseRow=createRecordForPKExtraction(size,session);
      for (int index=0; index < size; index++) {
        DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
        if (mapping != null) {
          mapping.writeFromObjectIntoRow(domainObject,databaseRow,session);
        }
      }
      List primaryKeyClassifications=getPrimaryKeyClassifications();
      Platform platform=session.getPlatform(domainObject.getClass());
      for (int index=0; index < size; index++) {
        Class classification=(Class)primaryKeyClassifications.get(index);
        Object value=databaseRow.get((DatabaseField)primaryKeyFields.get(index));
        if ((idValidation != IdValidation.NONE) && ((value == null) || ((idValidation == IdValidation.ZERO) && Helper.isEquivalentToNull(value)))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(platform.convertObject(value,classification));
      }
    }
    if (isPersistenceEntity && (!isNull)) {
      ((PersistenceEntity)domainObject)._persistence_setPKVector(primaryKeyValues);
    }
    return primaryKeyValues;
  }
}"
68065,"public void registerTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType bytesType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject customerType=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,true,true,true);
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}","public void registerTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType bytesType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject customerType=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,true,true,true);
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}"
68066,"public void registerTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType bytesType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject customerType=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,true,true,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY,""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}","public void registerTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType bytesType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject customerType=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,false,true,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY,""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}"
68067,"public void registerTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING);
  SDOType bytesType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.BYTES);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject customerType=dataFactory.create(SDOConstants.SDO_URL,SDOConstants.TYPE);
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,true,false,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY,""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}","public void registerTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING);
  SDOType bytesType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.BYTES);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject customerType=dataFactory.create(SDOConstants.SDO_URL,SDOConstants.TYPE);
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,false,false,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY,""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}"
68068,"public void registerTypes(){
  SDOType bytesType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.BYTES);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  SDOType stringType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING);
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject customerType=dataFactory.create(typeType);
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,true,true,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY,""String_Node_Str"");
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}","public void registerTypes(){
  SDOType bytesType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.BYTES);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  SDOType stringType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING);
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject customerType=dataFactory.create(typeType);
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,false,true,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY,""String_Node_Str"");
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}"
68069,"public void registerTypes(){
  SDOType bytesType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.BYTES);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  SDOType stringType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING);
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject customerType=dataFactory.create(typeType);
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,true,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,true,false,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY,""String_Node_Str"");
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}","public void registerTypes(){
  SDOType bytesType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.BYTES);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  SDOType stringType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING);
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject customerType=dataFactory.create(typeType);
  customerType.set(""String_Node_Str"",getControlRootURI());
  customerType.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  addProperty(customerType,""String_Node_Str"",stringType,false,false,true);
  DataObject photoProp=addProperty(customerType,""String_Node_Str"",bytesType,false,false,true);
  photoProp.set(SDOConstants.MIME_TYPE_PROPERTY,""String_Node_Str"");
  Type customerSDOType=typeHelper.define(customerType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",customerSDOType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}"
68070,"protected void registerTypes(){
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject schemaTypesType=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  SDOProperty prop=(SDOProperty)schemaTypesType.getType().getProperty(""String_Node_Str"");
  schemaTypesType.set(prop,getControlRootURI());
  prop=(SDOProperty)schemaTypesType.getType().getProperty(""String_Node_Str"");
  schemaTypesType.set(prop,""String_Node_Str"");
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_OBJECT,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,true,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,true,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_URI,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_BYTES,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_BOOLEAN,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_BYTE,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_YEARMONTHDAY,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DATETIME,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DECIMAL,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DOUBLE,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DURATION,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRINGS,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_FLOAT,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DAY,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_MONTH,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_MONTHDAY,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_YEAR,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_YEARMONTH,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRINGS,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INT,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_LONG,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRINGS,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_URI,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_SHORT,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_TIME,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_SHORT,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_LONG,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INT,true,false,true);
  Type schemaTypes=typeHelper.define(schemaTypesType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",schemaTypes);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
  DataObject personTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  personTypeDO.set(""String_Node_Str"",getControlRootURI());
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type personType=typeHelper.define(personTypeDO);
}","protected void registerTypes(){
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject schemaTypesType=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  SDOProperty prop=(SDOProperty)schemaTypesType.getType().getProperty(""String_Node_Str"");
  schemaTypesType.set(prop,getControlRootURI());
  prop=(SDOProperty)schemaTypesType.getType().getProperty(""String_Node_Str"");
  schemaTypesType.set(prop,""String_Node_Str"");
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_OBJECT,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,true,true);
  addProperty(schemaTypesType,""String_Node_Str"",dataObjectType,true,true,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_URI,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_BYTES,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_BOOLEAN,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_BYTE,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_YEARMONTHDAY,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DECIMAL,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DOUBLE,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DURATION,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRINGS,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_FLOAT,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_DAY,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_MONTH,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_MONTHDAY,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_YEAR,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_YEARMONTH,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRINGS,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INT,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_LONG,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRINGS,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_URI,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_TIME,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_LONG,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INTEGER,false,false,true);
  addProperty(schemaTypesType,""String_Node_Str"",SDOConstants.SDO_INT,false,false,true);
  Type schemaTypes=typeHelper.define(schemaTypesType);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",schemaTypes);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
  DataObject personTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  personTypeDO.set(""String_Node_Str"",getControlRootURI());
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type personType=typeHelper.define(personTypeDO);
}"
68071,"/** 
 * INTERNAL: Ensure that each Setting in the settings list is also present in the valuesToSettings map 
 */
public void afterUnmarshal(){
  for (Iterator<Setting> setIt=getSettings().iterator(); setIt.hasNext(); ) {
    addValueToSettings(setIt.next());
  }
}","/** 
 * INTERNAL: Ensure that each Setting in the settings list is also present in the valuesToSettings map
 */
public void afterUnmarshal(){
  for (Iterator<Setting> setIt=getSettings().iterator(); setIt.hasNext(); ) {
    addValueToSettings(setIt.next());
  }
}"
68072,"/** 
 * INTERNAL: Convenience method that returns the index of the Setting associated  with a given property in the Settings list
 * @param property
 * @return index of the Setting associated with a given property in the Settings list or -1 if not found
 */
public int getIndexForProperty(Property property){
  List<Key> keys=new ArrayList<Key>(valuesToSettings.keySet());
  for (int i=0; i < keys.size(); i++) {
    Key nextKey=keys.get(i);
    if (nextKey.getProperty() == property) {
      return settings.indexOf(valuesToSettings.get(nextKey));
    }
  }
  return -1;
}","/** 
 * INTERNAL: Convenience method that returns the index of the Setting associated with a given property in the Settings list
 * @param property
 * @return index of the Setting associated with a given property in theSettings list or -1 if not found
 */
public int getIndexForProperty(Property property){
  List<Key> keys=new ArrayList<Key>(valuesToSettings.keySet());
  for (int i=0; i < keys.size(); i++) {
    Key nextKey=keys.get(i);
    if (nextKey.getProperty() == property) {
      return settings.indexOf(valuesToSettings.get(nextKey));
    }
  }
  return -1;
}"
68073,"/** 
 * INTERNAL: Convenience method that, given a many property and a value, returns the associated Setting's index in the Settings list.  For example, if a  sequence contains many properties ""letters"" and ""numbers"", such as  [A, 1, C, 2, B, D], and we are looking for the letter B, this method will return 2.  Although B is at index 4 of the Settings list, it is at index 2 of the list of ""letters"" - [A, C, B, D].    
 * @param property
 * @return index of the value's Setting in the list relative to a given property or -1 if not found.
 */
private int getIndexInList(Property manyProp,Object value){
  int returnIndex=-1;
  for (int i=0; i < settings.size(); i++) {
    Setting nextSetting=settings.get(i);
    Property prop=getProperty(nextSetting);
    if (prop.equals(manyProp)) {
      returnIndex++;
      if (value.equals(getValue(nextSetting))) {
        return returnIndex;
      }
    }
  }
  return returnIndex;
}","/** 
 * INTERNAL: Convenience method that, given a many property and a value, returns the associated Setting's index in the Settings list. For example, if a sequence contains many properties ""letters"" and ""numbers"", such as [A, 1, C, 2, B, D], and we are looking for the letter B, this method will return 2. Although B is at index 4 of the Settings list, it is at index 2 of the list of ""letters"" - [A, C, B, D].
 * @param property
 * @return index of the value's Setting in the list relative to a givenproperty or -1 if not found.
 */
private int getIndexInList(Property manyProp,Object value){
  int returnIndex=-1;
  for (int i=0; i < settings.size(); i++) {
    Setting nextSetting=settings.get(i);
    Property prop=getProperty(nextSetting);
    if (prop.equals(manyProp)) {
      returnIndex++;
      if (value.equals(getValue(nextSetting))) {
        return returnIndex;
      }
    }
  }
  return returnIndex;
}"
68074,"/** 
 * INTERNAL: Prepare the receiver for execution in a session.
 */
public void prepareForExecution() throws QueryException {
  super.prepareForExecution();
  DatabaseCall databaseCall=this.getCall();
  if (databaseCall != null) {
    AbstractRecord parameters=this.getTranslationRow();
    if (parameters.isEmpty()) {
      parameters=new DatabaseRecord();
    }
    parameters.add(DatabaseCall.FIRSTRESULT_FIELD,this.getFirstResult());
    parameters.add(DatabaseCall.MAXROW_FIELD,session.getPlatform().computeMaxRowsForSQL(this.getFirstResult(),this.getMaxRows()));
    this.setTranslationRow(parameters);
  }
}","/** 
 * INTERNAL: Prepare the receiver for execution in a session.
 */
public void prepareForExecution() throws QueryException {
  super.prepareForExecution();
  DatabaseCall databaseCall=this.getCall();
  if (databaseCall != null && databaseCall.shouldIgnoreFirstRowMaxResultsSettings()) {
    AbstractRecord parameters=this.getTranslationRow();
    if (parameters.isEmpty()) {
      parameters=new DatabaseRecord();
    }
    parameters.add(DatabaseCall.FIRSTRESULT_FIELD,this.getFirstResult());
    parameters.add(DatabaseCall.MAXROW_FIELD,session.getPlatform().computeMaxRowsForSQL(this.getFirstResult(),this.getMaxRows()));
    this.setTranslationRow(parameters);
  }
}"
68075,"private void processNonRoot(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  DataObject owner=(DataObject)currentDataObjects.peek();
  if ((owner != null) && !owner.getType().isOpen()) {
    return;
  }
  Property globalProperty=aHelperContext.getXSDHelper().getGlobalProperty(namespaceURI,localName,true);
  if (globalProperty != null) {
    currentProperties.push(globalProperty);
    SDOType theType=((SDOType)globalProperty.getType());
    if (globalProperty.getType().isDataType()) {
      depth++;
    }
 else {
      XMLDescriptor xmlDescriptor=theType.getXmlDescriptor();
      giveToOXToProcess(namespaceURI,localName,qName,atts,xmlDescriptor);
    }
  }
 else {
    String typeName=localName;
    String typeUri=namespaceURI;
    QName typeAttribute=getTypeAttributeQName(atts);
    Type newType=null;
    if (typeAttribute != null) {
      typeName=typeAttribute.getLocalPart();
      typeUri=typeAttribute.getNamespaceURI();
      newType=aHelperContext.getTypeHelper().getType(typeUri,typeName);
    }
    if (newType == null) {
      newType=aHelperContext.getTypeHelper().getType(SDOConstants.ORACLE_SDO_URL,""String_Node_Str"");
      Property property=defineNewSDOProperty(namespaceURI,localName,true,newType);
      DataObject newDO=aHelperContext.getDataFactory().create(newType);
      processAttributes(atts,newDO,false);
      currentDataObjects.push(newDO);
      depth++;
      parentRecord.setCurrentObject(newDO);
      currentProperties.push(property);
    }
 else {
      XMLDescriptor xmlDescriptor=((SDOType)newType).getXmlDescriptor();
      giveToOXToProcess(namespaceURI,localName,qName,atts,xmlDescriptor);
      Property property=defineNewSDOProperty(namespaceURI,localName,true,newType);
      currentProperties.push(property);
      return;
    }
  }
}","private void processNonRoot(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  DataObject owner=(DataObject)currentDataObjects.peek();
  if ((owner != null) && !owner.getType().isOpen()) {
    return;
  }
  Property globalProperty=aHelperContext.getXSDHelper().getGlobalProperty(namespaceURI,localName,true);
  if (globalProperty != null) {
    currentProperties.push(globalProperty);
    SDOType theType=((SDOType)globalProperty.getType());
    if (globalProperty.getType().isDataType()) {
      depth++;
    }
 else {
      XMLDescriptor xmlDescriptor=theType.getXmlDescriptor();
      giveToOXToProcess(namespaceURI,localName,qName,atts,xmlDescriptor);
    }
  }
 else {
    String typeName=localName;
    String typeUri=namespaceURI;
    QName typeAttribute=getTypeAttributeQName(atts);
    Type newType=null;
    if (typeAttribute != null) {
      typeName=typeAttribute.getLocalPart();
      typeUri=typeAttribute.getNamespaceURI();
      newType=aHelperContext.getTypeHelper().getType(typeUri,typeName);
    }
    if (newType == null) {
      newType=aHelperContext.getTypeHelper().getType(SDOConstants.ORACLE_SDO_URL,""String_Node_Str"");
      Type dataObjectType=aHelperContext.getTypeHelper().getType(SDOConstants.SDO_URL,""String_Node_Str"");
      Property property=defineNewSDOProperty(namespaceURI,localName,true,dataObjectType);
      DataObject newDO=aHelperContext.getDataFactory().create(newType);
      processAttributes(atts,newDO,false);
      currentDataObjects.push(newDO);
      depth++;
      parentRecord.setCurrentObject(newDO);
      currentProperties.push(property);
    }
 else {
      XMLDescriptor xmlDescriptor=((SDOType)newType).getXmlDescriptor();
      giveToOXToProcess(namespaceURI,localName,qName,atts,xmlDescriptor);
      Property property=defineNewSDOProperty(namespaceURI,localName,true,newType);
      currentProperties.push(property);
      return;
    }
  }
}"
68076,"private void setElementPropertyValue(){
  Property currentProperty=(Property)currentProperties.pop();
  boolean simple=true;
  if (lastEvent == END_ELEMENT) {
    simple=false;
  }
 else {
    if (depth > currentDataObjects.size()) {
      simple=true;
    }
 else {
      DataObject nextDO=(DataObject)currentDataObjects.peek();
      if (nextDO.getInstanceProperties().size() > 0) {
        simple=false;
      }
 else {
        currentDataObjects.pop();
      }
    }
    depth--;
  }
  lastEvent=END_ELEMENT;
  if (simple && (!isInCharacterBlock || (currentBuffer.length() == 0))) {
    return;
  }
  DataObject currentDataObject=(DataObject)currentDataObjects.peek();
  if (currentProperty != null) {
    Object value=null;
    if (simple) {
      value=currentBuffer.toString();
      ((SDOProperty)currentProperty).setType(SDOConstants.SDO_STRING);
      ((SDOProperty)currentProperty).setContainment(false);
    }
 else {
      value=currentDataObject;
      currentDataObjects.pop();
      depth--;
      if (currentDataObjects.isEmpty()) {
        currentDataObject=null;
      }
 else {
        currentDataObject=(DataObject)currentDataObjects.peek();
      }
    }
    HelperContext aHelperContext=((SDOType)currentDataObject.getType()).getHelperContext();
    if (currentSchemaType != null) {
      Type sdoType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(currentSchemaType);
      if (sdoType != null) {
        ((SDOProperty)currentProperty).setType(sdoType);
      }
      if ((currentProperty.getType() != null) && simple) {
        value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType(),currentSchemaType);
      }
      currentSchemaType=null;
    }
 else     if ((currentProperty.getType() != null) && currentProperty.getType().isDataType()) {
      value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType());
    }
    if (currentDataObject != null) {
      if (!simple) {
        parentRecord.getUnmarshaller().getUnmarshalListener().afterUnmarshal(value,currentDataObject);
      }
      if (currentProperty.isMany()) {
        currentDataObject.getList(currentProperty).add(value);
      }
 else {
        currentDataObject.set(currentProperty,value);
      }
    }
    currentBuffer.reset();
  }
}","private void setElementPropertyValue(){
  Property currentProperty=(Property)currentProperties.pop();
  boolean simple=true;
  if (lastEvent == END_ELEMENT) {
    simple=false;
  }
 else {
    if (depth > currentDataObjects.size()) {
      simple=true;
    }
 else {
      DataObject nextDO=(DataObject)currentDataObjects.peek();
      if (nextDO.getInstanceProperties().size() > 0) {
        simple=false;
        if (!currentBuffer.toString().trim().equals(""String_Node_Str"")) {
          DataObject dObj=(DataObject)currentDataObjects.peek();
          dObj.getSequence().addText(currentBuffer.toString());
        }
      }
 else {
        currentDataObjects.pop();
      }
    }
    depth--;
  }
  lastEvent=END_ELEMENT;
  if (simple && (!isInCharacterBlock || (currentBuffer.length() == 0))) {
    return;
  }
  DataObject currentDataObject=(DataObject)currentDataObjects.peek();
  if (currentProperty != null) {
    Object value=null;
    if (simple) {
      value=currentBuffer.toString();
      ((SDOProperty)currentProperty).setType(SDOConstants.SDO_STRING);
      ((SDOProperty)currentProperty).setContainment(false);
    }
 else {
      value=currentDataObject;
      currentDataObjects.pop();
      depth--;
      if (currentDataObjects.isEmpty()) {
        currentDataObject=null;
      }
 else {
        currentDataObject=(DataObject)currentDataObjects.peek();
      }
    }
    HelperContext aHelperContext=((SDOType)currentDataObject.getType()).getHelperContext();
    if (currentSchemaType != null) {
      Type sdoType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(currentSchemaType);
      if (sdoType != null) {
        ((SDOProperty)currentProperty).setType(sdoType);
      }
      if ((currentProperty.getType() != null) && simple) {
        value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType(),currentSchemaType);
      }
      currentSchemaType=null;
    }
 else     if ((currentProperty.getType() != null) && currentProperty.getType().isDataType()) {
      value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType());
    }
    if (currentDataObject != null) {
      if (!simple) {
        parentRecord.getUnmarshaller().getUnmarshalListener().afterUnmarshal(value,currentDataObject);
      }
      if (currentProperty.isMany()) {
        currentDataObject.getList(currentProperty).add(value);
      }
 else {
        currentDataObject.set(currentProperty,value);
      }
    }
    currentBuffer.reset();
  }
}"
68077,"public List<SDOType> getControlTypes(){
  List<SDOType> types=new ArrayList<SDOType>();
  Type stringType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type intType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType phoneType=new SDOType(uri,""String_Node_Str"");
  phoneType.setXsd(true);
  phoneType.setXsdLocalName(""String_Node_Str"");
  phoneType.setDataType(false);
  phoneType.setInstanceClassName(""String_Node_Str"");
  SDOProperty numberProp=new SDOProperty(aHelperContext);
  numberProp.setName(""String_Node_Str"");
  numberProp.setXsdLocalName(""String_Node_Str"");
  numberProp.setXsd(true);
  numberProp.setType(stringType);
  phoneType.addDeclaredProperty(numberProp);
  SDOProperty orderNameProp=new SDOProperty(aHelperContext);
  orderNameProp.setName(""String_Node_Str"");
  orderNameProp.setXsdLocalName(""String_Node_Str"");
  orderNameProp.setContainment(false);
  orderNameProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  orderNameProp.setType(SDOConstants.SDO_STRING);
  orderNameProp.setXsd(true);
  SDOProperty phoneProp=new SDOProperty(aHelperContext);
  phoneProp.setName(""String_Node_Str"");
  phoneProp.setXsdLocalName(""String_Node_Str"");
  phoneProp.setContainment(true);
  phoneProp.setType(phoneType);
  phoneProp.setXsd(true);
  SDOProperty phoneAttrProp=new SDOProperty(aHelperContext);
  phoneAttrProp.setName(""String_Node_Str"");
  phoneAttrProp.setXsdLocalName(""String_Node_Str"");
  phoneAttrProp.setContainment(false);
  phoneAttrProp.setType(SDOConstants.SDO_STRING);
  phoneAttrProp.setXsd(true);
  SDOType POtype=new SDOType(uri2,""String_Node_Str"");
  POtype.setXsd(true);
  POtype.setXsdLocalName(""String_Node_Str"");
  POtype.setInstanceClassName(""String_Node_Str"");
  POtype.setDataType(false);
  POtype.addDeclaredProperty(orderNameProp);
  POtype.addDeclaredProperty(phoneProp);
  POtype.addDeclaredProperty(phoneAttrProp);
  types.add(phoneType);
  types.add(POtype);
  return types;
}","public List<SDOType> getControlTypes(){
  SDOType stringType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType intType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  DataObject PhoneTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  PhoneTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  PhoneTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject numberProperty=PhoneTypeDO.createDataObject(""String_Node_Str"");
  numberProperty.set(""String_Node_Str"",""String_Node_Str"");
  SDOType phoneType=(SDOType)typeHelper.define(PhoneTypeDO);
  phoneType.addBaseType(stringType);
  phoneType.setInstanceClassName(""String_Node_Str"");
  DataObject PurchaseOrderDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  PurchaseOrderDO.set(""String_Node_Str"",""String_Node_Str"");
  PurchaseOrderDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject orderNameProperty=PurchaseOrderDO.createDataObject(""String_Node_Str"");
  orderNameProperty.set(""String_Node_Str"",""String_Node_Str"");
  orderNameProperty.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  orderNameProperty.set(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  DataObject phoneTypeProperty=PurchaseOrderDO.createDataObject(""String_Node_Str"");
  phoneTypeProperty.set(""String_Node_Str"",""String_Node_Str"");
  phoneTypeProperty.set(""String_Node_Str"",phoneType);
  DataObject phoneTypeAttrProperty=PurchaseOrderDO.createDataObject(""String_Node_Str"");
  phoneTypeAttrProperty.set(""String_Node_Str"",""String_Node_Str"");
  phoneTypeAttrProperty.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  SDOType purchaseOrderType=(SDOType)typeHelper.define(PurchaseOrderDO);
  purchaseOrderType.setInstanceClassName(""String_Node_Str"");
  List<SDOType> types=new ArrayList<SDOType>();
  types.add(phoneType);
  types.add(purchaseOrderType);
  return types;
}"
68078,"protected void testDefine(Source xsdSource,DefaultSchemaResolver schemaResolver){
  schemaResolver.setBaseSchemaLocation(getSchemaLocation());
  List types=((SDOXSDHelper)xsdHelper).define(xsdSource,schemaResolver);
  log(""String_Node_Str"");
  List<SDOType> controlTypes=getControlTypes();
  log(controlTypes);
  log(""String_Node_Str"");
  log(types);
  compare(getControlTypes(),types);
  try {
    FileInputStream inStream=new FileInputStream(""String_Node_Str"");
    XMLDocument theDoc=xmlHelper.load(inStream);
    assertNotNull(theDoc);
    assertNotNull(theDoc.getRootObject());
    DataObject shipToDO=theDoc.getRootObject().getDataObject(""String_Node_Str"");
    DataObject billToDo=theDoc.getRootObject().getDataObject(""String_Node_Str"");
    assertNotNull(shipToDO);
    assertNotNull(billToDo);
    DataObject shipToPhoneData=shipToDO.getDataObject(""String_Node_Str"");
    assertNotNull(shipToPhoneData);
    assertEquals(""String_Node_Str"",shipToPhoneData.getString(""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","protected void testDefine(Source xsdSource,DefaultSchemaResolver schemaResolver){
  schemaResolver.setBaseSchemaLocation(getSchemaLocation());
  List types=((SDOXSDHelper)xsdHelper).define(xsdSource,schemaResolver);
  log(""String_Node_Str"");
  List<Type> controlTypes=getControlTypes();
  log(controlTypes);
  log(""String_Node_Str"");
  log(types);
  compare(getControlTypes(),types);
  try {
    FileInputStream inStream=new FileInputStream(""String_Node_Str"");
    XMLDocument theDoc=xmlHelper.load(inStream);
    assertNotNull(theDoc);
    assertNotNull(theDoc.getRootObject());
    DataObject shipToDO=theDoc.getRootObject().getDataObject(""String_Node_Str"");
    DataObject billToDo=theDoc.getRootObject().getDataObject(""String_Node_Str"");
    assertNotNull(shipToDO);
    assertNotNull(billToDo);
    DataObject shipToPhoneData=shipToDO.getDataObject(""String_Node_Str"");
    assertNotNull(shipToPhoneData);
    assertEquals(""String_Node_Str"",shipToPhoneData.getString(""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}"
68079,"public List<SDOType> getControlTypes(){
  List<SDOType> types=new ArrayList<SDOType>();
  Type stringType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type intType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType quantityType=new SDOType(uri,""String_Node_Str"");
  quantityType.setXsd(true);
  quantityType.setXsdLocalName(""String_Node_Str"");
  quantityType.setDataType(true);
  quantityType.setInstanceClassName(""String_Node_Str"");
  quantityType.addBaseType((SDOType)intType);
  SDOType SKUType=new SDOType(uri,""String_Node_Str"");
  SKUType.setXsd(true);
  SKUType.setXsdLocalName(""String_Node_Str"");
  SKUType.setInstanceClassName(""String_Node_Str"");
  SKUType.setDataType(true);
  SKUType.addBaseType((SDOType)stringType);
  SDOType phoneType=new SDOType(uri,""String_Node_Str"");
  phoneType.setXsd(true);
  phoneType.setXsdLocalName(""String_Node_Str"");
  phoneType.setDataType(false);
  phoneType.setInstanceClassName(""String_Node_Str"");
  SDOProperty numberProp=new SDOProperty(aHelperContext);
  numberProp.setName(""String_Node_Str"");
  numberProp.setXsdLocalName(""String_Node_Str"");
  numberProp.setXsd(true);
  numberProp.setType(stringType);
  phoneType.addDeclaredProperty(numberProp);
  SDOType USaddrType=new SDOType(uri2,""String_Node_Str"");
  USaddrType.setXsd(true);
  USaddrType.setXsdLocalName(""String_Node_Str"");
  USaddrType.setDataType(false);
  USaddrType.setInstanceClassName(""String_Node_Str"");
  SDOProperty streetProp=new SDOProperty(aHelperContext);
  streetProp.setName(""String_Node_Str"");
  streetProp.setXsd(true);
  streetProp.setXsdLocalName(""String_Node_Str"");
  streetProp.setType(stringType);
  USaddrType.addDeclaredProperty(streetProp);
  SDOProperty cityProp=new SDOProperty(aHelperContext);
  cityProp.setName(""String_Node_Str"");
  cityProp.setXsdLocalName(""String_Node_Str"");
  cityProp.setType(stringType);
  cityProp.setXsd(true);
  USaddrType.addDeclaredProperty(cityProp);
  SDOProperty quantityProp=new SDOProperty(aHelperContext);
  quantityProp.setName(""String_Node_Str"");
  quantityProp.setXsdLocalName(""String_Node_Str"");
  quantityProp.setType(stringType);
  quantityProp.setXsd(true);
  USaddrType.addDeclaredProperty(quantityProp);
  SDOProperty partNumProp=new SDOProperty(aHelperContext);
  partNumProp.setName(""String_Node_Str"");
  partNumProp.setXsdLocalName(""String_Node_Str"");
  partNumProp.setType(SKUType);
  partNumProp.setXsd(true);
  USaddrType.addDeclaredProperty(partNumProp);
  SDOProperty phoneProp=new SDOProperty(aHelperContext);
  phoneProp.setName(""String_Node_Str"");
  phoneProp.setXsdLocalName(""String_Node_Str"");
  phoneProp.setType(phoneType);
  phoneProp.setXsd(true);
  phoneProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  USaddrType.addDeclaredProperty(phoneProp);
  SDOProperty shipToProp=new SDOProperty(aHelperContext);
  shipToProp.setName(""String_Node_Str"");
  shipToProp.setXsdLocalName(""String_Node_Str"");
  shipToProp.setContainment(true);
  shipToProp.setType(USaddrType);
  shipToProp.setXsd(true);
  SDOProperty billToProp=new SDOProperty(aHelperContext);
  billToProp.setName(""String_Node_Str"");
  billToProp.setXsdLocalName(""String_Node_Str"");
  billToProp.setContainment(true);
  billToProp.setType(USaddrType);
  billToProp.setXsd(true);
  SDOType POtype=new SDOType(uri,""String_Node_Str"");
  POtype.setXsd(true);
  POtype.setXsdLocalName(""String_Node_Str"");
  POtype.setInstanceClassName(""String_Node_Str"");
  POtype.setDataType(false);
  POtype.addDeclaredProperty(shipToProp);
  POtype.addDeclaredProperty(billToProp);
  types.add(POtype);
  types.add(USaddrType);
  types.add(phoneType);
  types.add(SKUType);
  return types;
}","public List<Type> getControlTypes(){
  SDOType intType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOType stringType=(SDOType)typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  DataObject PhoneTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  PhoneTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  PhoneTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject numberProperty=PhoneTypeDO.createDataObject(""String_Node_Str"");
  numberProperty.set(""String_Node_Str"",""String_Node_Str"");
  SDOType phoneType=(SDOType)typeHelper.define(PhoneTypeDO);
  phoneType.addBaseType(stringType);
  phoneType.setInstanceClassName(""String_Node_Str"");
  DataObject USaddrDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  USaddrDO.set(""String_Node_Str"",""String_Node_Str"");
  USaddrDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject streetProperty=USaddrDO.createDataObject(""String_Node_Str"");
  streetProperty.set(""String_Node_Str"",""String_Node_Str"");
  DataObject cityProperty=USaddrDO.createDataObject(""String_Node_Str"");
  cityProperty.set(""String_Node_Str"",""String_Node_Str"");
  DataObject quantityProperty=USaddrDO.createDataObject(""String_Node_Str"");
  quantityProperty.set(""String_Node_Str"",""String_Node_Str"");
  DataObject partNumProperty=USaddrDO.createDataObject(""String_Node_Str"");
  partNumProperty.set(""String_Node_Str"",""String_Node_Str"");
  DataObject phoneProperty=USaddrDO.createDataObject(""String_Node_Str"");
  phoneProperty.set(""String_Node_Str"",""String_Node_Str"");
  phoneProperty.set(""String_Node_Str"",phoneType);
  SDOType usAddrType=(SDOType)typeHelper.define(USaddrDO);
  usAddrType.setInstanceClassName(""String_Node_Str"");
  DataObject QuantityTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  QuantityTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  QuantityTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  SDOType quantityType=(SDOType)typeHelper.define(QuantityTypeDO);
  quantityType.addBaseType(intType);
  DataObject SkuDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  SkuDO.set(""String_Node_Str"",""String_Node_Str"");
  SkuDO.set(""String_Node_Str"",""String_Node_Str"");
  SDOType skuType=(SDOType)typeHelper.define(SkuDO);
  skuType.addBaseType(stringType);
  DataObject PurchaseOrderDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  PurchaseOrderDO.set(""String_Node_Str"",""String_Node_Str"");
  PurchaseOrderDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject shipToProperty=PurchaseOrderDO.createDataObject(""String_Node_Str"");
  shipToProperty.set(""String_Node_Str"",""String_Node_Str"");
  shipToProperty.set(""String_Node_Str"",usAddrType);
  DataObject billToProperty=PurchaseOrderDO.createDataObject(""String_Node_Str"");
  billToProperty.set(""String_Node_Str"",""String_Node_Str"");
  billToProperty.set(""String_Node_Str"",usAddrType);
  Type purchaseOrderType=typeHelper.define(PurchaseOrderDO);
  List<Type> types=new ArrayList<Type>();
  types.add(usAddrType);
  types.add(phoneType);
  types.add(skuType);
  types.add(purchaseOrderType);
  return types;
}"
68080,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    record.getXMLReader().setContentHandler(record);
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.endElement(namespaceURI,localName,qName);
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getCollectionContentType();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    record.getXMLReader().setContentHandler(record);
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.endElement(namespaceURI,localName,qName);
  }
}"
68081,"/** 
 * INTERNAL: Prepare the receiver for execution in a session.
 */
public void prepareForExecution() throws QueryException {
  super.prepareForExecution();
  DatabaseCall databaseCall=this.getCall();
  if (databaseCall != null && databaseCall.shouldIgnoreFirstRowMaxResultsSettings()) {
    AbstractRecord parameters=this.getTranslationRow();
    if (parameters.isEmpty()) {
      parameters=new DatabaseRecord();
    }
    parameters.add(DatabaseCall.FIRSTRESULT_FIELD,this.getFirstResult());
    parameters.add(DatabaseCall.MAXROW_FIELD,session.getPlatform().computeMaxRowsForSQL(this.getFirstResult(),this.getMaxRows()));
    this.setTranslationRow(parameters);
  }
}","/** 
 * INTERNAL: Prepare the receiver for execution in a session.
 */
public void prepareForExecution() throws QueryException {
  super.prepareForExecution();
  DatabaseCall databaseCall=this.getCall();
  if (databaseCall != null) {
    AbstractRecord parameters=this.getTranslationRow();
    if (parameters.isEmpty()) {
      parameters=new DatabaseRecord();
    }
    parameters.add(DatabaseCall.FIRSTRESULT_FIELD,this.getFirstResult());
    parameters.add(DatabaseCall.MAXROW_FIELD,session.getPlatform().computeMaxRowsForSQL(this.getFirstResult(),this.getMaxRows()));
    this.setTranslationRow(parameters);
  }
}"
68082,"/** 
 * Prior to the fix for GF 2333, the query in this test would generate an invalid query key exception
 */
public void testInvertedSelectionCriteriaInvalidQueryKey(){
  Exception exception=null;
  try {
    String jpqlString=""String_Node_Str"";
    List resultList=createEntityManager().createQuery(jpqlString).getResultList();
  }
 catch (  Exception e) {
    e.printStackTrace();
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
}","/** 
 * Prior to the fix for GF 2333, the query in this test would generate an invalid query key exception
 */
public void testInvertedSelectionCriteriaInvalidQueryKey(){
  Exception exception=null;
  try {
    String jpqlString=""String_Node_Str"";
    List resultList=createEntityManager().createQuery(jpqlString).getResultList();
  }
 catch (  Exception e) {
    logThrowable(e);
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
}"
68083,"/** 
 * Tests fix for bug6070214 that using Oracle Rownum pagination with non-unique columns throws an SQl exception.
 */
public void testMaxAndFirstResultsOnDataQuery(){
  EntityManager em=createEntityManager();
  Exception exception=null;
  List resultList=null;
  clearCache();
  Query query=em.createQuery(""String_Node_Str"");
  try {
    query.setFirstResult(1);
    query.setMaxResults(1);
    resultList=query.getResultList();
  }
 catch (  Exception e) {
    e.printStackTrace();
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
  Assert.assertTrue(""String_Node_Str"" + resultList.size(),resultList.size() == 1);
}","/** 
 * Tests fix for bug6070214 that using Oracle Rownum pagination with non-unique columns throws an SQl exception.
 */
public void testMaxAndFirstResultsOnDataQuery(){
  EntityManager em=createEntityManager();
  Exception exception=null;
  List resultList=null;
  clearCache();
  Query query=em.createQuery(""String_Node_Str"");
  try {
    query.setFirstResult(1);
    query.setMaxResults(1);
    resultList=query.getResultList();
  }
 catch (  Exception e) {
    logThrowable(exception);
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
  Assert.assertTrue(""String_Node_Str"" + resultList.size(),resultList.size() == 1);
}"
68084,"/** 
 * Tests fix for bug6070214 that using Oracle Rownum pagination with group by throws an SQl exception.
 */
public void testMaxAndFirstResultsOnDataQueryWithGroupBy(){
  EntityManager em=createEntityManager();
  Exception exception=null;
  List resultList=null;
  clearCache();
  Query query=em.createQuery(""String_Node_Str"");
  try {
    query.setFirstResult(1);
    query.setMaxResults(1);
    resultList=query.getResultList();
  }
 catch (  Exception e) {
    e.printStackTrace();
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
  Assert.assertTrue(""String_Node_Str"" + resultList.size(),resultList.size() == 1);
}","/** 
 * Tests fix for bug6070214 that using Oracle Rownum pagination with group by throws an SQl exception.
 */
public void testMaxAndFirstResultsOnDataQueryWithGroupBy(){
  EntityManager em=createEntityManager();
  Exception exception=null;
  List resultList=null;
  clearCache();
  Query query=em.createQuery(""String_Node_Str"");
  try {
    query.setFirstResult(1);
    query.setMaxResults(1);
    resultList=query.getResultList();
  }
 catch (  Exception e) {
    logThrowable(exception);
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
  Assert.assertTrue(""String_Node_Str"" + resultList.size(),resultList.size() == 1);
}"
68085,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLUnitTestSuite(""String_Node_Str""));
  return suite;
}"
68086,"/** 
 * Prior to the fix for GF 2333, the query in this test would a Null PK exception
 */
public void testInvertedSelectionCriteriaNullPK(){
  Exception exception=null;
  try {
    String jpqlString=""String_Node_Str"";
    List resultList=createEntityManager().createQuery(jpqlString).getResultList();
  }
 catch (  Exception e) {
    e.printStackTrace();
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
}","/** 
 * Prior to the fix for GF 2333, the query in this test would a Null PK exception
 */
public void testInvertedSelectionCriteriaNullPK(){
  Exception exception=null;
  try {
    String jpqlString=""String_Node_Str"";
    List resultList=createEntityManager().createQuery(jpqlString).getResultList();
  }
 catch (  Exception e) {
    logThrowable(exception);
    exception=e;
  }
  Assert.assertNull(""String_Node_Str"",exception);
}"
68087,"/** 
 * Configure the firstResult, maxRows and lock mode in the EclipseLink ReadQuery.
 */
protected void propagateResultProperties(){
  DatabaseQuery databaseQuery=getDatabaseQuery();
  if (databaseQuery.isReadQuery()) {
    ReadQuery readQuery=(ReadQuery)databaseQuery;
    if (maxResults >= 0) {
      cloneSharedQuery();
      readQuery=(ReadQuery)getDatabaseQuery();
      maxRows=maxResults + ((firstResultIndex >= 0) ? firstResultIndex : 0);
      readQuery.setMaxRows(maxRows);
      maxResults=-1;
    }
    if (firstResultIndex > -1) {
      cloneSharedQuery();
      readQuery=(ReadQuery)getDatabaseQuery();
      readQuery.setFirstResult(firstResultIndex);
      firstResultIndex=-1;
    }
  }
}","/** 
 * Configure the firstResult, maxRows and lock mode in the EclipseLink ReadQuery.
 */
protected void propagateResultProperties(){
  DatabaseQuery databaseQuery=getDatabaseQuery();
  if (databaseQuery.isReadQuery()) {
    ReadQuery readQuery=(ReadQuery)databaseQuery;
    if (maxResults >= 0) {
      cloneSharedQuery();
      readQuery=(ReadQuery)getDatabaseQuery();
      int maxRows=maxResults + ((firstResultIndex >= 0) ? firstResultIndex : 0);
      readQuery.setMaxRows(maxRows);
      maxResults=-1;
      if (readQuery.isObjectLevelReadQuery()) {
        ((org.eclipse.persistence.queries.ObjectLevelReadQuery)readQuery).setShouldOuterJoinSubclasses(true);
      }
    }
    if (firstResultIndex > -1) {
      cloneSharedQuery();
      readQuery=(ReadQuery)getDatabaseQuery();
      readQuery.setFirstResult(firstResultIndex);
      firstResultIndex=-1;
      if (readQuery.isObjectLevelReadQuery()) {
        ((org.eclipse.persistence.queries.ObjectLevelReadQuery)readQuery).setShouldOuterJoinSubclasses(true);
      }
    }
  }
}"
68088,"public SDOHelperContext(ClassLoader aClassLoader){
  super();
  copyHelper=new SDOCopyHelper(this);
  dataFactory=new SDODataFactoryDelegate(this);
  dataHelper=new SDODataHelper(this);
  equalityHelper=new SDOEqualityHelper(this);
  xmlHelper=new SDOXMLHelperDelegate(this,aClassLoader);
  typeHelper=new SDOTypeHelperDelegate(this);
  xsdHelper=new SDOXSDHelperDelegate(this);
}","/** 
 * This constructor creates the helper instances.
 * @param aClassLoader
 */
public SDOHelperContext(ClassLoader aClassLoader){
  super();
  copyHelper=new SDOCopyHelper(this);
  dataFactory=new SDODataFactoryDelegate(this);
  dataHelper=new SDODataHelper(this);
  equalityHelper=new SDOEqualityHelper(this);
  xmlHelper=new SDOXMLHelperDelegate(this,aClassLoader);
  typeHelper=new SDOTypeHelperDelegate(this);
  xsdHelper=new SDOXSDHelperDelegate(this);
}"
68089,"/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key.
 */
public static HelperContext getHelperContext(){
  Object key=getDelegateMapKey();
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    helperContexts.put(key,hCtx);
  }
  return hCtx;
}","/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key. The key is assumed to be non-null -  getDelegateKey should always return either a string representing the application name (for WLS) or a class loader.  This is relevant since 'putIfAbsent' will  throw a null pointer exception if the key is null.   
 */
public static HelperContext getHelperContext(){
  Object key=getDelegateMapKey();
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    HelperContext existingCtx=helperContexts.putIfAbsent(key,hCtx);
    if (existingCtx != null) {
      hCtx=existingCtx;
    }
  }
  return hCtx;
}"
68090,"/** 
 * INTERNAL: This convenience method will look up a WebLogic execute thread from the runtime  MBean tree.  The execute thread contains application information.  This code  will use the name of the current thread to lookup the corresponding ExecuteThread. The ExecuteThread will allow us to obtain the application name (and version, etc). Note that the MBeanServer and ThreadPoolRuntime instances will be cached for  performance.
 * @return application name or null if the name cannot be obtained
 */
private static Object getExecuteThread(){
  if (wlsMBeanServer == null) {
    Context weblogicContext=null;
    try {
      weblogicContext=new InitialContext();
      try {
        wlsMBeanServer=(MBeanServer)weblogicContext.lookup(WLS_ENV_CONTEXT_LOOKUP);
      }
 catch (      NamingException e) {
        try {
          wlsMBeanServer=(MBeanServer)weblogicContext.lookup(WLS_CONTEXT_LOOKUP);
        }
 catch (        NamingException ne) {
        }
      }
    }
 catch (    NamingException nex) {
    }
  }
  if (wlsMBeanServer != null) {
    if (wlsThreadPoolRuntime == null) {
      try {
        ObjectName service=new ObjectName(WLS_SERVICE_KEY);
        ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
        wlsThreadPoolRuntime=(ObjectName)wlsMBeanServer.getAttribute(serverRuntime,WLS_THREADPOOL_RUNTIME);
      }
 catch (      Exception x) {
      }
    }
    if (wlsThreadPoolRuntime != null) {
      try {
        return wlsMBeanServer.invoke(wlsThreadPoolRuntime,WLS_EXECUTE_THREAD_GET_METHOD_NAME,new Object[]{Thread.currentThread().getName()},new String[]{String.class.getName()});
      }
 catch (      Exception e) {
      }
    }
  }
  return null;
}","/** 
 * INTERNAL: This convenience method will look up a WebLogic execute thread from the runtime  MBean tree.  The execute thread contains application information.  This code  will use the name of the current thread to lookup the corresponding ExecuteThread. The ExecuteThread will allow us to obtain the application name (and version, etc).
 * @return application name or null if the name cannot be obtained
 */
private static Object getExecuteThread(){
  if (getWLSMBeanServer() != null) {
    if (wlsThreadPoolRuntime == null) {
      try {
        ObjectName service=new ObjectName(WLS_SERVICE_KEY);
        ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
        wlsThreadPoolRuntime=(ObjectName)wlsMBeanServer.getAttribute(serverRuntime,WLS_THREADPOOL_RUNTIME);
      }
 catch (      Exception x) {
        return null;
      }
    }
    try {
      return wlsMBeanServer.invoke(wlsThreadPoolRuntime,WLS_EXECUTE_THREAD_GET_METHOD_NAME,new Object[]{Thread.currentThread().getName()},new String[]{String.class.getName()});
    }
 catch (    Exception e) {
    }
  }
  return null;
}"
68091,"public void reset(){
  ((SDOTypeHelper)getTypeHelper()).reset();
  ((SDOXMLHelper)getXMLHelper()).reset();
  ((SDOXSDHelper)getXSDHelper()).reset();
}","/** 
 * Reset the Type,XML and XSD helper instances.
 */
public void reset(){
  ((SDOTypeHelper)getTypeHelper()).reset();
  ((SDOXMLHelper)getXMLHelper()).reset();
  ((SDOXSDHelper)getXSDHelper()).reset();
}"
68092,"private XMLDescriptor buildAttributeDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Attribute.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping useMapping=new XMLDirectMapping();
  useMapping.setAttributeName(""String_Node_Str"");
  useMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(useMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}","private XMLDescriptor buildAttributeDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Attribute.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping useMapping=new XMLDirectMapping();
  useMapping.setAttributeName(""String_Node_Str"");
  useMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(useMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setGetMethodName(""String_Node_Str"");
  defaultMapping.setSetMethodName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  ((NullPolicy)defaultMapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}"
68093,"private XMLDescriptor buildElementDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Element.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLDirectMapping minOccursMapping=new XMLDirectMapping();
  minOccursMapping.setAttributeName(""String_Node_Str"");
  minOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(minOccursMapping);
  XMLDirectMapping maxOccursMapping=new XMLDirectMapping();
  maxOccursMapping.setAttributeName(""String_Node_Str"");
  maxOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(maxOccursMapping);
  XMLDirectMapping nillableMapping=new XMLDirectMapping();
  nillableMapping.setAttributeName(""String_Node_Str"");
  nillableMapping.setXPath(""String_Node_Str"");
  nillableMapping.setNullValue(new Boolean(""String_Node_Str""));
  descriptor.addMapping(nillableMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping subGroupMapping=new XMLDirectMapping();
  subGroupMapping.setAttributeName(""String_Node_Str"");
  subGroupMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(subGroupMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setGetMethodName(""String_Node_Str"");
  simpleTypeMapping.setSetMethodName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeObjectMapping complexTypeMapping=new XMLCompositeObjectMapping();
  complexTypeMapping.setReferenceClass(ComplexType.class);
  complexTypeMapping.setAttributeName(""String_Node_Str"");
  complexTypeMapping.setGetMethodName(""String_Node_Str"");
  complexTypeMapping.setSetMethodName(""String_Node_Str"");
  complexTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(complexTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}","private XMLDescriptor buildElementDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Element.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLDirectMapping minOccursMapping=new XMLDirectMapping();
  minOccursMapping.setAttributeName(""String_Node_Str"");
  minOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(minOccursMapping);
  XMLDirectMapping maxOccursMapping=new XMLDirectMapping();
  maxOccursMapping.setAttributeName(""String_Node_Str"");
  maxOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(maxOccursMapping);
  XMLDirectMapping nillableMapping=new XMLDirectMapping();
  nillableMapping.setAttributeName(""String_Node_Str"");
  nillableMapping.setXPath(""String_Node_Str"");
  nillableMapping.setNullValue(new Boolean(""String_Node_Str""));
  descriptor.addMapping(nillableMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setGetMethodName(""String_Node_Str"");
  defaultMapping.setSetMethodName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  ((NullPolicy)defaultMapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping subGroupMapping=new XMLDirectMapping();
  subGroupMapping.setAttributeName(""String_Node_Str"");
  subGroupMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(subGroupMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setGetMethodName(""String_Node_Str"");
  simpleTypeMapping.setSetMethodName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeObjectMapping complexTypeMapping=new XMLCompositeObjectMapping();
  complexTypeMapping.setReferenceClass(ComplexType.class);
  complexTypeMapping.setAttributeName(""String_Node_Str"");
  complexTypeMapping.setGetMethodName(""String_Node_Str"");
  complexTypeMapping.setSetMethodName(""String_Node_Str"");
  complexTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(complexTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}"
68094,"public void setDefaultValue(String defaultValue){
  this.defaultValue=defaultValue;
}","public void setDefaultValue(String defaultValue){
  this.defaultValue=defaultValue;
  isSetDefaultValue=true;
}"
68095,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,XMLDescriptor descriptor,boolean isXMLRoot){
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  AbstractSession session=null;
  if (descriptor != null) {
    session=xmlContext.getSession(object);
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
 else {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,(AbstractSession)session,this);
  }
 else   if (isXMLRoot) {
    String value=null;
    value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
    marshalRecord.characters(value);
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,XMLDescriptor descriptor,boolean isXMLRoot){
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  AbstractSession session=null;
  if (descriptor != null) {
    session=xmlContext.getSession(object);
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
 else {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,(AbstractSession)session,this);
  }
 else   if (isXMLRoot) {
    String value=null;
    value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
    marshalRecord.characters(value);
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
68096,"private void setDefaultValue(SDOProperty p,SimpleComponent sc){
  if (sc.getFixed() != null) {
    Object convertedValue=convertDefaultValue(p.getType(),sc.getFixed());
    p.setDefault(convertedValue);
  }
 else   if (sc.getDefaultValue() != null) {
    Object convertedValue=convertDefaultValue(p.getType(),sc.getDefaultValue());
    p.setDefault(convertedValue);
  }
}","private void setDefaultValue(SDOProperty p,SimpleComponent sc){
  if (sc.getFixed() != null) {
    Object convertedValue=convertDefaultValue(p.getType(),sc.getFixed());
    p.setDefault(convertedValue);
  }
 else   if (sc.getDefaultValue() != null) {
    Object convertedValue=convertDefaultValue(p.getType(),sc.getDefaultValue());
    p.setDefault(convertedValue);
  }
 else {
    if (p.getType().getQName().equals(SDOConstants.SDO_STRING.getQName()) && sc.isSetDefaultValue()) {
      p.setDefault(""String_Node_Str"");
    }
  }
}"
68097,"/** 
 * Creates an XMLDocument with the specified XML rootElement for the DataObject.
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @return XMLDocument a new XMLDocument set with the specified parameters.
 */
public XMLDocument createDocument(DataObject dataObject,String rootElementURI,String rootElementName){
  SDOXMLDocument document=new SDOXMLDocument();
  document.setRootObject(dataObject);
  document.setRootElementURI(rootElementURI);
  if (rootElementName != null) {
    document.setRootElementName(rootElementName);
  }
  document.setEncoding(SDOXMLDocument.DEFAULT_XML_ENCODING);
  document.setXMLVersion(SDOXMLDocument.DEFAULT_XML_VERSION);
  return document;
}","/** 
 * Creates an XMLDocument with the specified XML rootElement for the DataObject.
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @return XMLDocument a new XMLDocument set with the specified parameters.
 */
public XMLDocument createDocument(DataObject dataObject,String rootElementURI,String rootElementName){
  SDOXMLDocument document=new SDOXMLDocument();
  document.setRootObject(dataObject);
  document.setRootElementURI(rootElementURI);
  if (rootElementName != null) {
    document.setRootElementName(rootElementName);
  }
  Property globalProp=getHelperContext().getXSDHelper().getGlobalProperty(rootElementURI,rootElementName,true);
  if (null != globalProp) {
    document.setSchemaType(((SDOType)globalProp.getType()).getXsdType());
  }
  document.setEncoding(SDOXMLDocument.DEFAULT_XML_ENCODING);
  document.setXMLVersion(SDOXMLDocument.DEFAULT_XML_VERSION);
  return document;
}"
68098,"/** 
 * Return the method for the WebSphere JDBC connection wrapper vendorConnection.
 */
protected Method getVendorConnectionMethod(){
  if ((this.vendorConnectionMethod == null) && (!getWebsphereUtilClass().equals(void.class))) {
    try {
      Class args[]=new Class[1];
      args[0]=getWebsphereConnectionClass();
      this.vendorConnectionMethod=PrivilegedAccessHelper.getDeclaredMethod(getWebsphereUtilClass(),""String_Node_Str"",new Class[0]);
    }
 catch (    NoSuchMethodException exception) {
      getDatabaseSession().getSessionLog().logThrowable(SessionLog.WARNING,exception);
    }
  }
  return this.vendorConnectionMethod;
}","/** 
 * Return the method for the WebSphere JDBC connection wrapper vendorConnection.
 */
protected Method getVendorConnectionMethod(){
  if ((this.vendorConnectionMethod == null) && (!getWebsphereUtilClass().equals(void.class))) {
    try {
      Class args[]=new Class[1];
      args[0]=getWebsphereConnectionClass();
      this.vendorConnectionMethod=PrivilegedAccessHelper.getDeclaredMethod(getWebsphereUtilClass(),""String_Node_Str"",args);
    }
 catch (    NoSuchMethodException exception) {
      getDatabaseSession().getSessionLog().logThrowable(SessionLog.WARNING,exception);
    }
  }
  return this.vendorConnectionMethod;
}"
68099,"/** 
 * Unwraps the WebSphere JDBC connection wrapping using the WebLogic API reflectively.
 */
@Override public Connection unwrapConnection(Connection connection){
  if (getWebsphereConnectionClass().isInstance(connection) && getVendorConnectionMethod() != null) {
    try {
      return (Connection)PrivilegedAccessHelper.invokeMethod(getVendorConnectionMethod(),connection);
    }
 catch (    IllegalAccessException exception) {
      getDatabaseSession().getSessionLog().logThrowable(SessionLog.WARNING,exception);
    }
catch (    InvocationTargetException exception) {
      getDatabaseSession().getSessionLog().logThrowable(SessionLog.WARNING,exception);
    }
  }
  return super.unwrapConnection(connection);
}","/** 
 * Unwraps the WebSphere JDBC connection wrapping using the WebLogic API reflectively.
 */
@Override public Connection unwrapConnection(Connection connection){
  if (getWebsphereConnectionClass().isInstance(connection) && getVendorConnectionMethod() != null) {
    try {
      return (Connection)PrivilegedAccessHelper.invokeMethod(getVendorConnectionMethod(),null,new Object[]{connection});
    }
 catch (    IllegalAccessException exception) {
      getDatabaseSession().getSessionLog().logThrowable(SessionLog.WARNING,exception);
    }
catch (    InvocationTargetException exception) {
      getDatabaseSession().getSessionLog().logThrowable(SessionLog.WARNING,exception);
    }
  }
  return super.unwrapConnection(connection);
}"
68100,"public void addTests(){
  addTest(getReadObjectTestSuite());
  addTest(getReadAllTestSuite());
  addTest(getSessionBrokerClientQueryTestSuite());
  addTest(new SessionBrokerPlatformTest());
  addTest(new ReadOnlyClassesInSessionBrokerTest());
}","public void addTests(){
  addTest(getReadObjectTestSuite());
  addTest(getReadAllTestSuite());
  addTest(getSessionBrokerClientQueryTestSuite());
  addTest(new SessionBrokerPlatformTest());
  addTest(new ReadOnlyClassesInSessionBrokerTest());
  addTest(new VerifyClientBrokerCreationTest());
}"
68101,"/** 
 * PUBLIC: Return a session broker that behaves as a client session broker.  An aquire session broker is done under the covers on each session inside the session broker, and a new broker is returned. NOTE: when finished with the client broker, it should be releases.  See releaseClientSessionBroker.
 */
public SessionBroker acquireClientSessionBroker(){
  log(SessionLog.FINER,SessionLog.CONNECTION,""String_Node_Str"");
  SessionBroker clientBroker=copySessionBroker();
  clientBroker.parent=this;
  clientBroker.getIdentityMapAccessorInstance().setIdentityMapManager(getIdentityMapAccessorInstance().getIdentityMapManager());
  clientBroker.commitManager=getCommitManager();
  clientBroker.commandManager=getCommandManager();
  clientBroker.externalTransactionController=getExternalTransactionController();
  String sessionName;
  AbstractSession ssession;
  Iterator names=this.getSessionsByName().keySet().iterator();
  while (names.hasNext()) {
    sessionName=(String)names.next();
    ssession=getSessionForName(sessionName);
    if (ssession instanceof org.eclipse.persistence.sessions.server.ServerSession) {
      if (ssession.getProject().hasIsolatedClasses()) {
        throw ValidationException.isolatedDataNotSupportedInSessionBroker(sessionName);
      }
      clientBroker.internalRegisterSession(sessionName,((org.eclipse.persistence.sessions.server.ServerSession)ssession).acquireClientSession());
    }
 else {
      throw ValidationException.cannotAcquireClientSessionFromSession();
    }
  }
  clientBroker.initializeSequencing();
  return clientBroker;
}","/** 
 * PUBLIC: Return a session broker that behaves as a client session broker.  An acquire session broker is done under the covers on each session inside the session broker, and a new broker is returned. NOTE: when finished with the client broker, it should be releases.  See releaseClientSessionBroker.
 */
public SessionBroker acquireClientSessionBroker(){
  log(SessionLog.FINER,SessionLog.CONNECTION,""String_Node_Str"");
  SessionBroker clientBroker=copySessionBroker();
  clientBroker.parent=this;
  clientBroker.getIdentityMapAccessorInstance().setIdentityMapManager(getIdentityMapAccessorInstance().getIdentityMapManager());
  clientBroker.commitManager=getCommitManager();
  clientBroker.commandManager=getCommandManager();
  clientBroker.externalTransactionController=getExternalTransactionController();
  clientBroker.setServerPlatform(getServerPlatform());
  String sessionName;
  AbstractSession ssession;
  Iterator names=this.getSessionsByName().keySet().iterator();
  while (names.hasNext()) {
    sessionName=(String)names.next();
    ssession=getSessionForName(sessionName);
    if (ssession instanceof org.eclipse.persistence.sessions.server.ServerSession) {
      if (ssession.getProject().hasIsolatedClasses()) {
        throw ValidationException.isolatedDataNotSupportedInSessionBroker(sessionName);
      }
      clientBroker.internalRegisterSession(sessionName,((org.eclipse.persistence.sessions.server.ServerSession)ssession).acquireClientSession());
    }
 else {
      throw ValidationException.cannotAcquireClientSessionFromSession();
    }
  }
  clientBroker.initializeSequencing();
  return clientBroker;
}"
68102,"/** 
 * INTERNAL: Return a copy (not using clone) of a session broker.
 */
protected SessionBroker copySessionBroker(){
  SessionBroker broker=new SessionBroker(this.getSessionNamesByClass());
  broker.accessor=getAccessor();
  broker.name=getName();
  broker.sessionLog=getSessionLog();
  broker.project=project;
  broker.eventManager=getEventManager().clone(broker);
  return broker;
}","/** 
 * INTERNAL: Return a copy (not using clone) of a session broker.
 */
protected SessionBroker copySessionBroker(){
  SessionBroker broker=new SessionBroker(this.getSessionNamesByClass());
  broker.accessor=getAccessor();
  broker.name=getName();
  broker.sessionLog=getSessionLog();
  broker.project=project;
  broker.eventManager=getEventManager().clone(broker);
  broker.shouldPropagateChanges=shouldPropagateChanges;
  return broker;
}"
68103,"public void setNamespaceURI(String namespaceURI){
  if (""String_Node_Str"".equals(namespaceURI)) {
    this.namespaceURI=null;
  }
 else {
    this.namespaceURI=namespaceURI;
  }
}","public void setNamespaceURI(String namespaceURI){
  if (isSelfFragment || ""String_Node_Str"".equals(namespaceURI)) {
    this.namespaceURI=null;
  }
 else {
    this.namespaceURI=namespaceURI;
  }
}"
68104,"/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key. The key is assumed to be non-null -  getDelegateKey should always return either a string representing the application name (for WLS) or a class loader.  This is relevant since 'putIfAbsent' will  throw a null pointer exception if the key is null.   
 */
public static HelperContext getHelperContext(){
  Object key=getDelegateMapKey();
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    HelperContext existingCtx=helperContexts.putIfAbsent(key,hCtx);
    if (existingCtx != null) {
      hCtx=existingCtx;
    }
  }
  return hCtx;
}","/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key. The key is assumed to be non-null -  getDelegateKey should always return either a string representing the application name (for WLS) or a class loader.  This is relevant since 'putIfAbsent' will  throw a null pointer exception if the key is null.   
 */
public static HelperContext getHelperContext(){
  Object key=getDelegateMapKey();
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    HelperContext existingCtx=helperContexts.putIfAbsent(key,hCtx);
    if (existingCtx != null) {
      hCtx=existingCtx;
    }
    addNotificationListener(key);
  }
  return hCtx;
}"
68105,"private void processList(String targetNamespace,String defaultNamespace,String sdoTypeName,List list){
  if (list != null) {
    SDOType type=getSDOTypeForName(targetNamespace,defaultNamespace,sdoTypeName);
    type.setXsdList(true);
  }
}","private void processList(String targetNamespace,String defaultNamespace,String sdoTypeName,List list){
  if (list != null) {
    SDOType type=getSDOTypeForName(targetNamespace,defaultNamespace,sdoTypeName);
    type.setXsdList(true);
    type.setInstanceClass(ClassConstants.List_Class);
  }
}"
68106,"/** 
 * INTERNAL: Update the ValueStore with the new property value and update any sequence if it exists.
 * @param property
 * @param value
 * @param updateSequence (truncate call back from sequence when this function was called from sequence)
 */
public void setPropertyInternal(SDOProperty property,Object value,boolean updateSequence){
  if (type.isSequenced() && updateSequence && !property.getType().isChangeSummaryType()&& !aHelperContext.getXSDHelper().isAttribute(property)) {
    if (property.isMany()) {
      ((SDOSequence)sequence).addSettingWithoutModifyingDataObject(property,value);
    }
 else {
      if (isSet(property)) {
        ((SDOSequence)sequence).updateSettingWithoutModifyingDataObject(property,get(property),value);
      }
 else {
        ((SDOSequence)sequence).addSettingWithoutModifyingDataObject(property,value);
      }
    }
  }
  int index=((SDOProperty)property).getIndexInType();
  if (index == -1) {
    _getCurrentValueStore().setOpenContentProperty(property,value);
  }
 else {
    _getCurrentValueStore().setDeclaredProperty(index,value);
  }
}","/** 
 * INTERNAL: Update the ValueStore with the new property value and update any sequence if it exists.
 * @param property
 * @param value
 * @param updateSequence (truncate call back from sequence when this function was called from sequence)
 */
public void setPropertyInternal(SDOProperty property,Object value,boolean updateSequence){
  Object origValue=getPropertyInternal(property);
  if (type.isSequenced() && updateSequence && !property.getType().isChangeSummaryType()&& !aHelperContext.getXSDHelper().isAttribute(property)) {
    if (property.isMany()) {
      ((SDOSequence)sequence).addSettingWithoutModifyingDataObject(property,value);
    }
 else {
      if (isSet(property)) {
        ((SDOSequence)sequence).updateSettingWithoutModifyingDataObject(property,get(property),value);
      }
 else {
        ((SDOSequence)sequence).addSettingWithoutModifyingDataObject(property,value);
      }
    }
  }
  int index=((SDOProperty)property).getIndexInType();
  if (index == -1) {
    _getCurrentValueStore().setOpenContentProperty(property,value);
  }
 else {
    _getCurrentValueStore().setDeclaredProperty(index,value);
  }
  if (origValue != null && property.getOpposite() != null && property.getType() != null && !property.getType().isDataType()) {
    Property oppositeProp=property.getOpposite();
    DataObject valueDO=(DataObject)value;
    valueDO.set(oppositeProp,this);
    DataObject origValueDO=(DataObject)origValue;
    origValueDO.set(oppositeProp,null);
  }
}"
68107,"public void setUp(){
  xmlComparer=new SDOXMLComparer();
  if (customContext) {
    aHelperContext=new SDOHelperContext();
  }
 else {
    aHelperContext=HelperProvider.getDefaultContext();
  }
  typeHelper=aHelperContext.getTypeHelper();
  xmlHelper=aHelperContext.getXMLHelper();
  xsdHelper=aHelperContext.getXSDHelper();
  equalityHelper=aHelperContext.getEqualityHelper();
  copyHelper=aHelperContext.getCopyHelper();
  dataFactory=aHelperContext.getDataFactory();
  dataHelper=(SDODataHelper)aHelperContext.getDataHelper();
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(true);
  builderFactory.setIgnoringElementContentWhitespace(true);
  try {
    parser=builderFactory.newDocumentBuilder();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
  if (customContext) {
    ((SDOHelperContext)aHelperContext).reset();
  }
 else {
    SDOHelperContext.resetHelperContext();
  }
}","public void setUp(){
  xmlComparer=new SDOXMLComparer();
  if (customContext) {
    aHelperContext=new SDOHelperContext();
  }
 else {
    aHelperContext=HelperProvider.getDefaultContext();
  }
  typeHelper=aHelperContext.getTypeHelper();
  xmlHelper=aHelperContext.getXMLHelper();
  xsdHelper=aHelperContext.getXSDHelper();
  equalityHelper=aHelperContext.getEqualityHelper();
  copyHelper=aHelperContext.getCopyHelper();
  dataFactory=aHelperContext.getDataFactory();
  dataHelper=(SDODataHelper)aHelperContext.getDataHelper();
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(true);
  builderFactory.setIgnoringElementContentWhitespace(true);
  try {
    parser=builderFactory.newDocumentBuilder();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
  ((SDOTypeHelper)typeHelper).reset();
  ((SDOXMLHelper)xmlHelper).reset();
  ((SDOXSDHelper)xsdHelper).reset();
}"
68108,"public void tearDown() throws Exception {
  if (customContext) {
    ((SDOHelperContext)aHelperContext).reset();
  }
 else {
    SDOHelperContext.resetHelperContext();
  }
  typeHelper=null;
  xmlHelper=null;
  xsdHelper=null;
  equalityHelper=null;
  copyHelper=null;
  dataFactory=null;
  parser=null;
  aHelperContext=null;
}","public void tearDown() throws Exception {
  ((SDOTypeHelper)typeHelper).reset();
  ((SDOXMLHelper)xmlHelper).reset();
  ((SDOXSDHelper)xsdHelper).reset();
  typeHelper=null;
  xmlHelper=null;
  xsdHelper=null;
  equalityHelper=null;
  copyHelper=null;
  dataFactory=null;
  parser=null;
  aHelperContext=null;
}"
68109,"/** 
 * INTERNAL: This method will return the key to be used to store/retrieve the delegates for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return Application classloader for OC4J, application name for WebLogic, otherwise Thread.currentThread().getContextClassLoader()
 */
private static Object getDelegateMapKey(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=classLoader.getClass().getName();
  Object delegateKey=classLoader;
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    delegateKey=classLoader;
  }
 else   if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,PARAMETER_TYPES,false);
        delegateKey=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
      }
 catch (      Exception e) {
      }
    }
  }
  return delegateKey;
}","/** 
 * INTERNAL: This method will return the key to be used to store/retrieve the delegates for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return Application classloader for OC4J, application name for WebLogic, otherwise Thread.currentThread().getContextClassLoader()
 */
private static Object getDelegateMapKey(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=classLoader.getClass().getName();
  Object delegateKey=classLoader;
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    delegateKey=classLoader;
  }
 else   if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,PARAMETER_TYPES,false);
        delegateKey=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
        if (delegateKey == null) {
          delegateKey=classLoader;
        }
      }
 catch (      Exception e) {
      }
    }
  }
  return delegateKey;
}"
68110,"@Override public DateFormat get(){
  if (timeZoneHolder != null) {
    TimeZone tz=timeZoneHolder.getTimeZone();
    if (tz != null && !simpleDateFormat.getTimeZone().equals(tz)) {
      simpleDateFormat.setTimeZone(tz);
    }
  }
  return super.get();
}","@Override public DateFormat get(){
  DateFormat simpleDateFormat=super.get();
  if (timeZoneHolder != null) {
    TimeZone tz=timeZoneHolder.getTimeZone();
    if (tz != null && !simpleDateFormat.getTimeZone().equals(tz)) {
      simpleDateFormat.setTimeZone(tz);
    }
  }
  return simpleDateFormat;
}"
68111,"public DateFormatThreadLocal(String formatStr,TimeZoneHolder timeZoneHolder){
  super();
  simpleDateFormat=new SimpleDateFormat(formatStr);
  this.timeZoneHolder=timeZoneHolder;
}","public DateFormatThreadLocal(String formatStr,TimeZoneHolder timeZoneHolder){
  super();
  this.formatStr=formatStr;
  this.timeZoneHolder=timeZoneHolder;
}"
68112,"@Override protected DateFormat initialValue(){
  return simpleDateFormat;
}","@Override protected DateFormat initialValue(){
  SimpleDateFormat format=new SimpleDateFormat(formatStr);
  return format;
}"
68113,"private DatabaseMapping buildXMLCompositeDirectCollectionMapping(String mappingUri){
  XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,true);
  mapping.setXPath(xpath);
  mapping.setAttributeElementClass(getType().getInstanceClass());
  if (getXsdType() != null) {
    ((XMLField)mapping.getField()).setSchemaType(getXsdType());
  }
 else {
  }
  if (getType().getInstanceClass() != null) {
    if (shouldAddInstanceClassConverter()) {
      InstanceClassConverter converter=new InstanceClassConverter();
      converter.setCustomClass(getType().getInstanceClass());
      mapping.setValueConverter(converter);
    }
  }
  return mapping;
}","private DatabaseMapping buildXMLCompositeDirectCollectionMapping(String mappingUri){
  XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,true);
  mapping.setXPath(xpath);
  mapping.setAttributeElementClass(getType().getInstanceClass());
  if (getXsdType() != null) {
    ((XMLField)mapping.getField()).setSchemaType(getXsdType());
  }
 else {
  }
  if (getType().equals(SDOConstants.SDO_STRINGS)) {
    mapping.setUsesSingleNode(true);
  }
  if (getType().getInstanceClass() != null) {
    if (shouldAddInstanceClassConverter()) {
      InstanceClassConverter converter=new InstanceClassConverter();
      converter.setCustomClass(getType().getInstanceClass());
      mapping.setValueConverter(converter);
    }
  }
  return mapping;
}"
68114,"private void updateOwnerAndBuildMapping(SDOType owningType,SDOProperty p,String defaultNamespace,String targetNamespace,SimpleComponent simpleComponent,String typeName,String mappingUri){
  boolean buildMapping=true;
  Property lookedUp=owningType.getProperty(p.getName());
  if (lookedUp != null) {
    p=(SDOProperty)lookedUp;
    if (inRestriction) {
      return;
    }
    updateCollisionProperty(owningType,p);
  }
 else {
    owningType.addDeclaredProperty(p);
  }
  QName xsdType=getQNameForString(defaultNamespace,typeName);
  if ((xsdType != null) && xsdType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
    if (xsdType.getLocalPart().equals(SDOConstants.ID)) {
      owningType.setInstanceProperty(SDOConstants.ID_PROPERTY,p.getName());
    }
 else     if (xsdType.getLocalPart().equals(SDOConstants.IDREF)) {
      p.setContainment(false);
      String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
      if (propertyTypeValue != null) {
        buildMapping=false;
      }
    }
 else     if (xsdType.getLocalPart().equals(SDOConstants.IDREFS)) {
      p.setContainment(false);
      p.setMany(true);
      String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
      if (propertyTypeValue != null) {
        buildMapping=false;
      }
    }
  }
  if (buildMapping) {
    p.buildMapping(mappingUri);
  }
}","private void updateOwnerAndBuildMapping(SDOType owningType,SDOProperty p,String defaultNamespace,String targetNamespace,SimpleComponent simpleComponent,String typeName,String mappingUri){
  boolean buildMapping=true;
  Property lookedUp=owningType.getProperty(p.getName());
  if (lookedUp != null) {
    p=(SDOProperty)lookedUp;
    if (inRestriction) {
      return;
    }
    updateCollisionProperty(owningType,p);
  }
 else {
    owningType.addDeclaredProperty(p);
  }
  QName xsdType=getQNameForString(defaultNamespace,typeName);
  if ((xsdType != null) && xsdType.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) {
    if (xsdType.getLocalPart().equals(SDOConstants.ID)) {
      owningType.setInstanceProperty(SDOConstants.ID_PROPERTY,p.getName());
    }
 else     if (xsdType.getLocalPart().equals(SDOConstants.IDREF)) {
      p.setContainment(false);
      String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
      if (propertyTypeValue != null) {
        buildMapping=false;
      }
    }
 else     if (xsdType.getLocalPart().equals(SDOConstants.IDREFS)) {
      p.setContainment(false);
      String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
      if (propertyTypeValue != null) {
        buildMapping=false;
        p.setMany(true);
      }
 else {
        p.setMany(false);
      }
    }
  }
  if (buildMapping) {
    p.buildMapping(mappingUri);
  }
}"
68115,"public void setUp(){
  xmlComparer=new SDOXMLComparer();
  if (customContext) {
    aHelperContext=new SDOHelperContext();
  }
 else {
    aHelperContext=HelperProvider.getDefaultContext();
  }
  typeHelper=aHelperContext.getTypeHelper();
  xmlHelper=aHelperContext.getXMLHelper();
  xsdHelper=aHelperContext.getXSDHelper();
  equalityHelper=aHelperContext.getEqualityHelper();
  copyHelper=aHelperContext.getCopyHelper();
  dataFactory=aHelperContext.getDataFactory();
  dataHelper=(SDODataHelper)aHelperContext.getDataHelper();
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(true);
  builderFactory.setIgnoringElementContentWhitespace(true);
  try {
    parser=builderFactory.newDocumentBuilder();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
  ((SDOTypeHelper)aHelperContext.getTypeHelper()).reset();
  ((SDOXMLHelper)aHelperContext.getXMLHelper()).reset();
  ((SDOXSDHelper)aHelperContext.getXSDHelper()).reset();
}","public void setUp(){
  xmlComparer=new SDOXMLComparer();
  if (customContext) {
    aHelperContext=new SDOHelperContext();
  }
 else {
    aHelperContext=HelperProvider.getDefaultContext();
  }
  typeHelper=aHelperContext.getTypeHelper();
  xmlHelper=aHelperContext.getXMLHelper();
  xsdHelper=aHelperContext.getXSDHelper();
  equalityHelper=aHelperContext.getEqualityHelper();
  copyHelper=aHelperContext.getCopyHelper();
  dataFactory=aHelperContext.getDataFactory();
  dataHelper=(SDODataHelper)aHelperContext.getDataHelper();
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(true);
  builderFactory.setIgnoringElementContentWhitespace(true);
  try {
    parser=builderFactory.newDocumentBuilder();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
    e.printStackTrace();
  }
  if (customContext) {
    ((SDOHelperContext)aHelperContext).reset();
  }
 else {
    SDOHelperContext.resetHelperContext();
  }
}"
68116,"public void tearDown() throws Exception {
  ((SDOTypeHelper)aHelperContext.getTypeHelper()).reset();
  ((SDOXMLHelper)aHelperContext.getXMLHelper()).reset();
  ((SDOXSDHelper)aHelperContext.getXSDHelper()).reset();
  typeHelper=null;
  xmlHelper=null;
  xsdHelper=null;
  equalityHelper=null;
  copyHelper=null;
  dataFactory=null;
  parser=null;
  aHelperContext=null;
}","public void tearDown() throws Exception {
  if (customContext) {
    ((SDOHelperContext)aHelperContext).reset();
  }
 else {
    SDOHelperContext.resetHelperContext();
  }
  typeHelper=null;
  xmlHelper=null;
  xsdHelper=null;
  equalityHelper=null;
  copyHelper=null;
  dataFactory=null;
  parser=null;
  aHelperContext=null;
}"
68117,"public void reset(){
  ((SDOXMLHelper)getXMLHelper()).reset();
  ((SDOTypeHelper)getTypeHelper()).reset();
  ((SDOXSDHelper)getXSDHelper()).reset();
}","public void reset(){
  ((SDOTypeHelper)getTypeHelper()).reset();
  ((SDOXMLHelper)getXMLHelper()).reset();
  ((SDOXSDHelper)getXSDHelper()).reset();
}"
68118,"/** 
 * Creates the <code>PropertyValueModel</code> responsible to handle the External Connection Pooling property.
 * @return A new <code>PropertyValueModel</code>
 */
private PropertyValueModel buildExternalConnectionPoolingHolder(){
  PropertyValueModel subjectHolder=new PropertyAspectAdapter(getSubjectHolder(),""String_Node_Str""){
    protected Object getValueFromSubject(){
      LoginAdapter login=(LoginAdapter)subject;
      return login.getParent();
    }
  }
;
  return new PropertyAspectAdapter(subjectHolder,DatabaseSessionAdapter.EXTERNAL_CONNECTION_POOLING_PROPERTY){
    protected Object getValueFromSubject(){
      DatabaseSessionAdapter session=(DatabaseSessionAdapter)subject;
      return Boolean.valueOf(session.usesExternalConnectionPooling());
    }
    protected void setValueOnSubject(    Object value){
      DatabaseSessionAdapter session=(DatabaseSessionAdapter)subject;
      boolean removeConnectionPool=false;
      if ((Boolean)value && session.isServer()) {
        ServerSessionAdapter serverSession=(ServerSessionAdapter)session;
        if (serverSession.hasAnyConnectionPool()) {
          removeConnectionPool=promptUserToDeleteConnectionPools();
        }
      }
      session.setExternalConnectionPooling(Boolean.TRUE.equals(value));
      if (removeConnectionPool) {
        ServerSessionAdapter serverSession=(ServerSessionAdapter)session;
        serverSession.removeAllConnectionPools();
      }
    }
  }
;
}","/** 
 * Creates the <code>PropertyValueModel</code> responsible to handle the External Connection Pooling property.
 * @return A new <code>PropertyValueModel</code>
 */
private PropertyValueModel buildExternalConnectionPoolingHolder(){
  PropertyValueModel subjectHolder=new PropertyAspectAdapter(getSubjectHolder(),""String_Node_Str""){
    protected Object getValueFromSubject(){
      LoginAdapter login=(LoginAdapter)subject;
      return login.getParent();
    }
  }
;
  return new PropertyAspectAdapter(subjectHolder,DatabaseSessionAdapter.EXTERNAL_CONNECTION_POOLING_PROPERTY){
    protected Object getValueFromSubject(){
      DatabaseSessionAdapter session=(DatabaseSessionAdapter)subject;
      return Boolean.valueOf(session.usesExternalConnectionPooling());
    }
    protected void setValueOnSubject(    Object value){
      DatabaseSessionAdapter session=(DatabaseSessionAdapter)subject;
      boolean removeConnectionPool=false;
      if ((Boolean)value && session.isServer()) {
        ServerSessionAdapter serverSession=(ServerSessionAdapter)session;
        if (serverSession.hasAnyConnectionPool()) {
          removeConnectionPool=promptUserToDeleteConnectionPools();
          if (removeConnectionPool) {
            serverSession.removeAllConnectionPools();
            session.setExternalConnectionPooling(true);
          }
 else {
            session.setExternalConnectionPooling(true);
            session.setExternalConnectionPooling(false);
          }
        }
      }
 else {
        session.setExternalConnectionPooling(((Boolean)value).booleanValue());
      }
    }
  }
;
}"
68119,"protected void setValueOnSubject(Object value){
  DatabaseSessionAdapter session=(DatabaseSessionAdapter)subject;
  boolean removeConnectionPool=false;
  if ((Boolean)value && session.isServer()) {
    ServerSessionAdapter serverSession=(ServerSessionAdapter)session;
    if (serverSession.hasAnyConnectionPool()) {
      removeConnectionPool=promptUserToDeleteConnectionPools();
    }
  }
  session.setExternalConnectionPooling(Boolean.TRUE.equals(value));
  if (removeConnectionPool) {
    ServerSessionAdapter serverSession=(ServerSessionAdapter)session;
    serverSession.removeAllConnectionPools();
  }
}","protected void setValueOnSubject(Object value){
  DatabaseSessionAdapter session=(DatabaseSessionAdapter)subject;
  boolean removeConnectionPool=false;
  if ((Boolean)value && session.isServer()) {
    ServerSessionAdapter serverSession=(ServerSessionAdapter)session;
    if (serverSession.hasAnyConnectionPool()) {
      removeConnectionPool=promptUserToDeleteConnectionPools();
      if (removeConnectionPool) {
        serverSession.removeAllConnectionPools();
        session.setExternalConnectionPooling(true);
      }
 else {
        session.setExternalConnectionPooling(true);
        session.setExternalConnectionPooling(false);
      }
    }
  }
 else {
    session.setExternalConnectionPooling(((Boolean)value).booleanValue());
  }
}"
68120,"protected void execute(ApplicationNode selectedNode){
  ServerSessionAdapter session=(ServerSessionAdapter)selectedNode.getValue();
  navigatorSelectionModel().pushExpansionState();
  ConnectionPoolAdapter newPool=session.addReadConnectionPool();
  navigatorSelectionModel().popAndRestoreExpansionState();
  ((AbstractApplicationNode)selectedNode.getProjectRoot()).selectDescendantNodeForValue(newPool,navigatorSelectionModel());
}","protected void execute(ApplicationNode selectedNode){
  ServerSessionAdapter session=(ServerSessionAdapter)selectedNode.getValue();
  if (session.usesExternalConnectionPooling()) {
    promptUserToTurnOffExternalConnectionPooling();
  }
 else {
    navigatorSelectionModel().pushExpansionState();
    ConnectionPoolAdapter newPool=session.addReadConnectionPool();
    navigatorSelectionModel().popAndRestoreExpansionState();
    ((AbstractApplicationNode)selectedNode.getProjectRoot()).selectDescendantNodeForValue(newPool,navigatorSelectionModel());
  }
}"
68121,"protected void execute(ApplicationNode selectedNode){
  ServerSessionAdapter session=(ServerSessionAdapter)selectedNode.getValue();
  navigatorSelectionModel().pushExpansionState();
  ConnectionPoolAdapter newPool=session.addSequenceConnectionPool();
  navigatorSelectionModel().popAndRestoreExpansionState();
  ((AbstractApplicationNode)selectedNode.getProjectRoot()).selectDescendantNodeForValue(newPool,navigatorSelectionModel());
}","protected void execute(ApplicationNode selectedNode){
  ServerSessionAdapter session=(ServerSessionAdapter)selectedNode.getValue();
  if (session.usesExternalConnectionPooling()) {
    promptUserToTurnOffExternalConnectionPooling();
  }
 else {
    navigatorSelectionModel().pushExpansionState();
    ConnectionPoolAdapter newPool=session.addSequenceConnectionPool();
    navigatorSelectionModel().popAndRestoreExpansionState();
    ((AbstractApplicationNode)selectedNode.getProjectRoot()).selectDescendantNodeForValue(newPool,navigatorSelectionModel());
  }
}"
68122,"protected void execute(ApplicationNode selectedNode){
  ServerSessionAdapter session=(ServerSessionAdapter)selectedNode.getValue();
  navigatorSelectionModel().pushExpansionState();
  ConnectionPoolAdapter newPool=session.addWriteConnectionPool();
  navigatorSelectionModel().popAndRestoreExpansionState();
  ((AbstractApplicationNode)selectedNode.getProjectRoot()).selectDescendantNodeForValue(newPool,navigatorSelectionModel());
}","protected void execute(ApplicationNode selectedNode){
  ServerSessionAdapter session=(ServerSessionAdapter)selectedNode.getValue();
  if (session.usesExternalConnectionPooling()) {
    promptUserToTurnOffExternalConnectionPooling();
  }
 else {
    navigatorSelectionModel().pushExpansionState();
    ConnectionPoolAdapter newPool=session.addWriteConnectionPool();
    navigatorSelectionModel().popAndRestoreExpansionState();
    ((AbstractApplicationNode)selectedNode.getProjectRoot()).selectDescendantNodeForValue(newPool,navigatorSelectionModel());
  }
}"
68123,"protected void execute(){
  if (!this.confirmTableCreation()) {
    return;
  }
  try {
    this.checkDevelopmentLoginSpec(""String_Node_Str"");
  }
 catch (  IllegalStateException ex) {
    return;
  }
  Collection tables=this.buildTables();
  try {
    this.database().generateTables(tables);
  }
 catch (  EclipseLinkException exception) {
    ExceptionDialog dialog=new ExceptionDialog(resourceRepository().getString(""String_Node_Str""),exception,this.getWorkbenchContext(),resourceRepository().getString(""String_Node_Str""));
    dialog.show();
    return;
  }
  JOptionPane.showMessageDialog(this.getWorkbenchContext().getCurrentWindow(),this.resourceRepository().getString(""String_Node_Str"",new Object[]{NumberFormat.getInstance().format(tables.size())}),this.resourceRepository().getString(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}","protected void execute(){
  if (!this.confirmTableCreation()) {
    return;
  }
  try {
    this.checkDevelopmentLoginSpec(""String_Node_Str"");
  }
 catch (  IllegalStateException ex) {
    return;
  }
  Collection tables=this.buildTables();
  try {
    this.database().generateTables(tables);
  }
 catch (  EclipseLinkException exception) {
    if (exception instanceof DatabaseException && ((DatabaseException)exception).getDatabaseErrorCode() == 955) {
      JOptionPane.showMessageDialog(this.getWorkbenchContext().getCurrentWindow(),resourceRepository().getString(""String_Node_Str"",StringTools.CR),resourceRepository().getString(""String_Node_Str""),JOptionPane.WARNING_MESSAGE);
    }
 else     if (exception instanceof DatabaseException && ((DatabaseException)exception).getDatabaseErrorCode() == 2270) {
      JOptionPane.showMessageDialog(this.getWorkbenchContext().getCurrentWindow(),resourceRepository().getString(""String_Node_Str"",StringTools.CR),resourceRepository().getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    }
 else {
      ExceptionDialog dialog=new ExceptionDialog(resourceRepository().getString(""String_Node_Str""),exception,this.getWorkbenchContext(),resourceRepository().getString(""String_Node_Str""));
      dialog.show();
    }
    return;
  }
  JOptionPane.showMessageDialog(this.getWorkbenchContext().getCurrentWindow(),this.resourceRepository().getString(""String_Node_Str"",new Object[]{NumberFormat.getInstance().format(tables.size())}),this.resourceRepository().getString(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}"
68124,"private PropertyValueModel buildPreallocationSizeHolder(){
  return new PropertyAspectAdapter(getSubjectHolder(),SequenceAdapter.PREALLOCATION_SIZE_PROPERTY){
    @Override protected Object getValueFromSubject(){
      return Integer.valueOf(((SequenceAdapter)subject).getPreallocationSize());
    }
    @Override protected void setValueOnSubject(    Object value){
      ((SequenceAdapter)subject).setPreallocationSize(((Integer)value).intValue());
    }
  }
;
}","private PropertyValueModel buildPreallocationSizeHolder(){
  return new PropertyAspectAdapter(getSubjectHolder(),SequenceAdapter.PREALLOCATION_SIZE_PROPERTY){
    @Override protected Object getValueFromSubject(){
      return Integer.valueOf(((SequenceAdapter)subject).getPreallocationSize());
    }
    @Override protected void setValueOnSubject(    Object value){
      if (value == null) {
        ((SequenceAdapter)subject).setPreallocationSize(0);
      }
 else {
        ((SequenceAdapter)subject).setPreallocationSize(((Integer)value).intValue());
      }
    }
  }
;
}"
68125,"@Override protected void setValueOnSubject(Object value){
  ((SequenceAdapter)subject).setPreallocationSize(((Integer)value).intValue());
}","@Override protected void setValueOnSubject(Object value){
  if (value == null) {
    ((SequenceAdapter)subject).setPreallocationSize(0);
  }
 else {
    ((SequenceAdapter)subject).setPreallocationSize(((Integer)value).intValue());
  }
}"
68126,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
    }
    if (!isLastEventText) {
      getWriter().write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        getWriter().write(TAB);
      }
    }
    isStartElementOpen=true;
    getWriter().write('<');
    getWriter().write(xPathFragment.getShortName());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        getWriter().write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        getWriter().write(TAB);
      }
    }
    isStartElementOpen=true;
    getWriter().write('<');
    getWriter().write(xPathFragment.getShortName());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
68127,"/** 
 * INTERNAL: Saves the DataObject as an XML document with the specified root element. Same as save(createDocument(dataObject, rootElementURI, rootElementName), writer, null);
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @param writer specifies the Writer to write to.
 * @throws IOException for stream exceptions.
 * @throws IllegalArgumentException if the dataObject treeis not closed or has no container.
 */
private void save(DataObject rootObject,String rootElementURI,String rootElementName,Writer writer) throws XMLMarshalException {
  SDOXMLDocument xmlDocument=(SDOXMLDocument)createDocument(rootObject,rootElementURI,rootElementName);
  XMLMarshaller anXMLMarshaller=getXmlMarshaller();
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObject(rootObject);
  anXMLMarshaller.marshal(xmlDocument,writer);
}","/** 
 * INTERNAL: Saves the DataObject as an XML document with the specified root element. Same as save(createDocument(dataObject, rootElementURI, rootElementName), writer, null);
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @param writer specifies the Writer to write to.
 * @throws IOException for stream exceptions.
 * @throws IllegalArgumentException if the dataObject treeis not closed or has no container.
 */
private void save(DataObject rootObject,String rootElementURI,String rootElementName,Writer writer) throws XMLMarshalException {
  SDOXMLDocument xmlDocument=(SDOXMLDocument)createDocument(rootObject,rootElementURI,rootElementName);
  XMLMarshaller anXMLMarshaller=getXmlMarshaller();
  anXMLMarshaller.setFragment(!xmlDocument.isXMLDeclaration());
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObject(rootObject);
  anXMLMarshaller.marshal(xmlDocument,writer);
}"
68128,"/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key.
 * @param key Either a class loader or string (application name)
 */
public static HelperContext getHelperContext(Object key){
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    helperContexts.put(key,hCtx);
  }
  return hCtx;
}","/** 
 * INTERNAL:  Return the helper context for a given key.  The key will either be a ClassLoader or a String (representing an application name). A new context will be created and put in the map if none exists  for the given key.
 */
public static HelperContext getHelperContext(){
  Object key=getDelegateMapKey();
  HelperContext hCtx=helperContexts.get(key);
  if (hCtx == null) {
    hCtx=new SDOHelperContext();
    helperContexts.put(key,hCtx);
  }
  return hCtx;
}"
68129,"private SDODataFactoryDelegate getSDODataFactoryDelegate(){
  HelperContext hCtx=SDOHelperContext.getHelperContext(getDelegateMapKey());
  return (SDODataFactoryDelegate)hCtx.getDataFactory();
}","private SDODataFactoryDelegate getSDODataFactoryDelegate(){
  return (SDODataFactoryDelegate)SDOHelperContext.getHelperContext().getDataFactory();
}"
68130,"private SDOTypeHelperDelegate getSDOTypeHelperDelegate(){
  HelperContext hCtx=SDOHelperContext.getHelperContext(getDelegateMapKey());
  return (SDOTypeHelperDelegate)hCtx.getTypeHelper();
}","private SDOTypeHelperDelegate getSDOTypeHelperDelegate(){
  return (SDOTypeHelperDelegate)SDOHelperContext.getHelperContext().getTypeHelper();
}"
68131,"/** 
 * INTERNAL:
 */
private SDOXMLHelperDelegate getSDOXMLHelperDelegate(){
  HelperContext hCtx=SDOHelperContext.getHelperContext(getDelegateMapKey());
  return (SDOXMLHelperDelegate)hCtx.getXMLHelper();
}","/** 
 * INTERNAL:
 */
private SDOXMLHelperDelegate getSDOXMLHelperDelegate(){
  return (SDOXMLHelperDelegate)SDOHelperContext.getHelperContext().getXMLHelper();
}"
68132,"/** 
 * INTERNAL:
 */
private SDOXSDHelperDelegate getSDOXSDHelperDelegate(){
  HelperContext hCtx=SDOHelperContext.getHelperContext(getDelegateMapKey());
  return (SDOXSDHelperDelegate)hCtx.getXSDHelper();
}","/** 
 * INTERNAL:
 */
private SDOXSDHelperDelegate getSDOXSDHelperDelegate(){
  return (SDOXSDHelperDelegate)SDOHelperContext.getHelperContext().getXSDHelper();
}"
68133,"private XMLDescriptor buildRestrictionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Restriction.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  XMLDirectMapping baseTypeMapping=new XMLDirectMapping();
  baseTypeMapping.setAttributeName(""String_Node_Str"");
  baseTypeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(baseTypeMapping);
  XMLCompositeObjectMapping sequenceMapping=new XMLCompositeObjectMapping();
  sequenceMapping.setReferenceClass(Sequence.class);
  sequenceMapping.setAttributeName(""String_Node_Str"");
  sequenceMapping.setSetMethodName(""String_Node_Str"");
  sequenceMapping.setGetMethodName(""String_Node_Str"");
  sequenceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(sequenceMapping);
  XMLCompositeObjectMapping choiceMapping=new XMLCompositeObjectMapping();
  choiceMapping.setReferenceClass(Choice.class);
  choiceMapping.setAttributeName(""String_Node_Str"");
  choiceMapping.setSetMethodName(""String_Node_Str"");
  choiceMapping.setGetMethodName(""String_Node_Str"");
  choiceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(choiceMapping);
  XMLCompositeObjectMapping allMapping=new XMLCompositeObjectMapping();
  allMapping.setReferenceClass(All.class);
  allMapping.setAttributeName(""String_Node_Str"");
  allMapping.setSetMethodName(""String_Node_Str"");
  allMapping.setGetMethodName(""String_Node_Str"");
  allMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(allMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeCollectionMapping attributesMapping=new XMLCompositeCollectionMapping();
  attributesMapping.setReferenceClass(Attribute.class);
  attributesMapping.setAttributeName(""String_Node_Str"");
  attributesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(attributesMapping);
  XMLCompositeObjectMapping anyAttributeMapping=new XMLCompositeObjectMapping();
  anyAttributeMapping.setReferenceClass(AnyAttribute.class);
  anyAttributeMapping.setAttributeName(""String_Node_Str"");
  anyAttributeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(anyAttributeMapping);
  XMLCompositeDirectCollectionMapping enumerationFacetsMapping=new XMLCompositeDirectCollectionMapping();
  enumerationFacetsMapping.setAttributeName(""String_Node_Str"");
  enumerationFacetsMapping.useCollectionClass(java.util.ArrayList.class);
  enumerationFacetsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(enumerationFacetsMapping);
  return descriptor;
}","private XMLDescriptor buildRestrictionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Restriction.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  XMLDirectMapping baseTypeMapping=new XMLDirectMapping();
  baseTypeMapping.setAttributeName(""String_Node_Str"");
  baseTypeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(baseTypeMapping);
  XMLCompositeObjectMapping sequenceMapping=new XMLCompositeObjectMapping();
  sequenceMapping.setReferenceClass(Sequence.class);
  sequenceMapping.setAttributeName(""String_Node_Str"");
  sequenceMapping.setSetMethodName(""String_Node_Str"");
  sequenceMapping.setGetMethodName(""String_Node_Str"");
  sequenceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(sequenceMapping);
  XMLCompositeObjectMapping choiceMapping=new XMLCompositeObjectMapping();
  choiceMapping.setReferenceClass(Choice.class);
  choiceMapping.setAttributeName(""String_Node_Str"");
  choiceMapping.setSetMethodName(""String_Node_Str"");
  choiceMapping.setGetMethodName(""String_Node_Str"");
  choiceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(choiceMapping);
  XMLCompositeObjectMapping allMapping=new XMLCompositeObjectMapping();
  allMapping.setReferenceClass(All.class);
  allMapping.setAttributeName(""String_Node_Str"");
  allMapping.setSetMethodName(""String_Node_Str"");
  allMapping.setGetMethodName(""String_Node_Str"");
  allMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(allMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeCollectionMapping attributesMapping=new XMLCompositeCollectionMapping();
  attributesMapping.setReferenceClass(Attribute.class);
  attributesMapping.setAttributeName(""String_Node_Str"");
  attributesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(attributesMapping);
  XMLCompositeObjectMapping anyAttributeMapping=new XMLCompositeObjectMapping();
  anyAttributeMapping.setReferenceClass(AnyAttribute.class);
  anyAttributeMapping.setAttributeName(""String_Node_Str"");
  anyAttributeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(anyAttributeMapping);
  XMLDirectMapping minInclusiveMapping=new XMLDirectMapping();
  minInclusiveMapping.setAttributeName(""String_Node_Str"");
  minInclusiveMapping.setSetMethodName(""String_Node_Str"");
  minInclusiveMapping.setGetMethodName(""String_Node_Str"");
  minInclusiveMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(minInclusiveMapping);
  XMLDirectMapping maxInclusiveMapping=new XMLDirectMapping();
  maxInclusiveMapping.setAttributeName(""String_Node_Str"");
  maxInclusiveMapping.setSetMethodName(""String_Node_Str"");
  maxInclusiveMapping.setGetMethodName(""String_Node_Str"");
  maxInclusiveMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(maxInclusiveMapping);
  XMLDirectMapping minExclusiveMapping=new XMLDirectMapping();
  minExclusiveMapping.setAttributeName(""String_Node_Str"");
  minExclusiveMapping.setSetMethodName(""String_Node_Str"");
  minExclusiveMapping.setGetMethodName(""String_Node_Str"");
  minExclusiveMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(minExclusiveMapping);
  XMLDirectMapping maxExclusiveMapping=new XMLDirectMapping();
  maxExclusiveMapping.setAttributeName(""String_Node_Str"");
  maxExclusiveMapping.setSetMethodName(""String_Node_Str"");
  maxExclusiveMapping.setGetMethodName(""String_Node_Str"");
  maxExclusiveMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(maxExclusiveMapping);
  XMLCompositeDirectCollectionMapping enumerationFacetsMapping=new XMLCompositeDirectCollectionMapping();
  enumerationFacetsMapping.setAttributeName(""String_Node_Str"");
  enumerationFacetsMapping.useCollectionClass(java.util.ArrayList.class);
  enumerationFacetsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(enumerationFacetsMapping);
  return descriptor;
}"
68134,"private void processBaseType(String targetNamespace,String defaultNamespace,SDOType owningType,String qualifiedName,boolean simpleContentExtension){
  if (qualifiedName == null) {
    return;
  }
  SDOType baseType=getSDOTypeForName(targetNamespace,defaultNamespace,qualifiedName);
  if (simpleContentExtension && baseType.isDataType()) {
    if (owningType != null) {
      SDOProperty prop=new SDOProperty(aHelperContext);
      prop.setName(""String_Node_Str"");
      prop.setType(baseType);
      prop.setValueProperty(true);
      prop.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
      ((SDOType)owningType).addDeclaredProperty(prop);
      prop.buildMapping(null,-1);
      prop.setFinalized(true);
    }
    return;
  }
  java.util.List<Type> baseTypes=new ArrayList<Type>();
  baseTypes.add(baseType);
  if (owningType != null) {
    if (owningType.isDataType()) {
      owningType.setInstanceClassName(baseType.getInstanceClassName());
      if (baseType.getInstanceClass() != null) {
        owningType.setInstanceClass(baseType.getInstanceClass());
      }
      QName baseQName=getQNameForString(defaultNamespace,qualifiedName);
      if ((baseQName.equals(XMLConstants.BASE_64_BINARY_QNAME)) || (baseQName.equals(XMLConstants.HEX_BINARY_QNAME)) || (baseQName.equals(XMLConstants.DATE_QNAME))|| (baseQName.equals(XMLConstants.TIME_QNAME))|| (baseQName.equals(XMLConstants.DATE_TIME_QNAME))) {
        owningType.setXsdType(baseQName);
      }
    }
    if (!owningType.getBaseTypes().contains(baseType)) {
      owningType.addBaseType(baseType);
    }
  }
}","private void processBaseType(SDOType baseType,String targetNamespace,String defaultNamespace,SDOType owningType,String qualifiedName,boolean simpleContentExtension){
  if (simpleContentExtension && baseType.isDataType()) {
    if (owningType != null) {
      SDOProperty prop=new SDOProperty(aHelperContext);
      prop.setName(""String_Node_Str"");
      prop.setType(baseType);
      prop.setValueProperty(true);
      prop.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
      ((SDOType)owningType).addDeclaredProperty(prop);
      prop.buildMapping(null,-1);
      prop.setFinalized(true);
    }
    return;
  }
  java.util.List<Type> baseTypes=new ArrayList<Type>();
  baseTypes.add(baseType);
  if (owningType != null) {
    if (owningType.isDataType()) {
      owningType.setInstanceClassName(baseType.getInstanceClassName());
      if (baseType.getInstanceClass() != null) {
        owningType.setInstanceClass(baseType.getInstanceClass());
      }
      QName baseQName=getQNameForString(defaultNamespace,qualifiedName);
      if ((baseQName.equals(XMLConstants.BASE_64_BINARY_QNAME)) || (baseQName.equals(XMLConstants.HEX_BINARY_QNAME)) || (baseQName.equals(XMLConstants.DATE_QNAME))|| (baseQName.equals(XMLConstants.TIME_QNAME))|| (baseQName.equals(XMLConstants.DATE_TIME_QNAME))) {
        owningType.setXsdType(baseQName);
      }
    }
    if (!owningType.getBaseTypes().contains(baseType)) {
      owningType.addBaseType(baseType);
    }
  }
}"
68135,"private void processExtension(String targetNamespace,String defaultNamespace,SDOType owningType,Extension extension,boolean simpleContent){
  if (extension != null) {
    String qualifiedType=extension.getBaseType();
    processBaseType(targetNamespace,defaultNamespace,owningType,qualifiedType,simpleContent);
    if (extension.getChoice() != null) {
      processChoice(targetNamespace,defaultNamespace,owningType,extension.getChoice(),false);
    }
 else     if (extension.getSequence() != null) {
      processSequence(targetNamespace,defaultNamespace,owningType,extension.getSequence(),false);
    }
 else     if (extension.getAll() != null) {
    }
    processOrderedAttributes(targetNamespace,defaultNamespace,owningType,extension.getOrderedAttributes());
  }
}","private void processExtension(String targetNamespace,String defaultNamespace,SDOType owningType,Extension extension,boolean simpleContent){
  if (extension != null) {
    String qualifiedType=extension.getBaseType();
    if (qualifiedType != null) {
      SDOType baseType=getSDOTypeForName(targetNamespace,defaultNamespace,qualifiedType);
      processBaseType(baseType,targetNamespace,defaultNamespace,owningType,qualifiedType,simpleContent);
    }
    if (extension.getChoice() != null) {
      processChoice(targetNamespace,defaultNamespace,owningType,extension.getChoice(),false);
    }
 else     if (extension.getSequence() != null) {
      processSequence(targetNamespace,defaultNamespace,owningType,extension.getSequence(),false);
    }
 else     if (extension.getAll() != null) {
    }
    processOrderedAttributes(targetNamespace,defaultNamespace,owningType,extension.getOrderedAttributes());
  }
}"
68136,"private void processRestriction(String targetNamespace,String defaultNamespace,SDOType owningType,Restriction restriction){
  if (restriction != null) {
    String qualifiedType=restriction.getBaseType();
    processBaseType(targetNamespace,defaultNamespace,owningType,qualifiedType,false);
    boolean alreadyIn=inRestriction;
    if (!alreadyIn) {
      inRestriction=true;
    }
    if (restriction.getChoice() != null) {
      processChoice(targetNamespace,defaultNamespace,owningType,restriction.getChoice(),false);
    }
 else     if (restriction.getSequence() != null) {
      processSequence(targetNamespace,defaultNamespace,owningType,restriction.getSequence(),false);
    }
 else     if (restriction.getAll() != null) {
    }
    processAttributes(targetNamespace,defaultNamespace,owningType,restriction.getAttributes());
    if (!alreadyIn) {
      inRestriction=false;
    }
  }
}","private void processRestriction(String targetNamespace,String defaultNamespace,SDOType owningType,Restriction restriction){
  if (restriction != null) {
    String qualifiedType=restriction.getBaseType();
    processBaseType(targetNamespace,defaultNamespace,owningType,qualifiedType,false,restriction);
    boolean alreadyIn=inRestriction;
    if (!alreadyIn) {
      inRestriction=true;
    }
    if (restriction.getChoice() != null) {
      processChoice(targetNamespace,defaultNamespace,owningType,restriction.getChoice(),false);
    }
 else     if (restriction.getSequence() != null) {
      processSequence(targetNamespace,defaultNamespace,owningType,restriction.getSequence(),false);
    }
 else     if (restriction.getAll() != null) {
    }
    processAttributes(targetNamespace,defaultNamespace,owningType,restriction.getAttributes());
    if (!alreadyIn) {
      inRestriction=false;
    }
  }
}"
68137,"/** 
 * INTERNAL:
 */
private void addMappingToOwner(boolean sdoMethodAttributeAccessor,int indexToAdd){
  if (xmlMapping != null) {
    if (sdoMethodAttributeAccessor) {
      SDOMethodAttributeAccessor accessor=null;
      if (this.getType().isDataType()) {
        Class theClass=getType().getInstanceClass();
        accessor=new SDOMethodAttributeAccessor(this,theClass);
      }
 else {
        accessor=new SDOMethodAttributeAccessor(this);
      }
      xmlMapping.setAttributeAccessor(accessor);
    }
    if ((getContainingType() != null) && !getContainingType().isDataType()) {
      ClassDescriptor containingDescriptor=((SDOType)getContainingType()).getXmlDescriptor();
      xmlMapping.setDescriptor(containingDescriptor);
      XMLMapping mapping=(XMLMapping)((SDOType)getContainingType()).getXmlDescriptor().getMappingForAttributeName(getName());
      if (mapping != null) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().remove(mapping);
      }
      if ((indexToAdd > -1) && (indexToAdd < ((SDOType)getContainingType()).getXmlDescriptor().getMappings().size())) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(indexToAdd,xmlMapping);
      }
 else {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(xmlMapping);
      }
    }
  }
}","/** 
 * INTERNAL:
 */
public void addMappingToOwner(boolean sdoMethodAttributeAccessor,int indexToAdd){
  if (xmlMapping != null) {
    if (sdoMethodAttributeAccessor) {
      SDOMethodAttributeAccessor accessor=null;
      if (this.getType().isDataType()) {
        Class theClass=getType().getInstanceClass();
        accessor=new SDOMethodAttributeAccessor(this,theClass);
      }
 else {
        accessor=new SDOMethodAttributeAccessor(this);
      }
      xmlMapping.setAttributeAccessor(accessor);
    }
    if ((getContainingType() != null) && !getContainingType().isDataType()) {
      ClassDescriptor containingDescriptor=((SDOType)getContainingType()).getXmlDescriptor();
      xmlMapping.setDescriptor(containingDescriptor);
      XMLMapping mapping=(XMLMapping)((SDOType)getContainingType()).getXmlDescriptor().getMappingForAttributeName(getName());
      if (mapping != null) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().remove(mapping);
      }
      if ((indexToAdd > -1) && (indexToAdd < ((SDOType)getContainingType()).getXmlDescriptor().getMappings().size())) {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(indexToAdd,xmlMapping);
      }
 else {
        ((SDOType)getContainingType()).getXmlDescriptor().getMappings().add(xmlMapping);
      }
    }
  }
}"
68138,"/** 
 * Return the Type for this interfaceClass or null if not found.
 * @param interfaceClass is the interface for the DataObject's Type -type.getInstanceClass();
 * @return the Type for this interfaceClass or null if not found.
 */
public SDOType getType(Class interfaceClass){
  SDOType type=(SDOType)getInterfacesToSDOTypeHashMap().get(interfaceClass);
  if (type != null) {
    return type;
  }
  type=getTypeForSimpleJavaType(interfaceClass);
  if (type != null) {
    return type;
  }
  Iterator iter=getTypesHashMap().keySet().iterator();
  while (iter.hasNext()) {
    QName key=(QName)iter.next();
    SDOType value=(SDOType)getTypesHashMap().get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  return null;
}","/** 
 * Return the Type for this interfaceClass or null if not found.
 * @param interfaceClass is the interface for the DataObject's Type -type.getInstanceClass();
 * @return the Type for this interfaceClass or null if not found.
 */
public SDOType getType(Class interfaceClass){
  SDOType type=(SDOType)getInterfacesToSDOTypeHashMap().get(interfaceClass);
  if (type != null) {
    return type;
  }
  type=getTypeForSimpleJavaType(interfaceClass);
  if (type != null) {
    return type;
  }
  Iterator iter=getTypesHashMap().keySet().iterator();
  while (iter.hasNext()) {
    QName key=(QName)iter.next();
    SDOType value=(SDOType)getTypesHashMap().get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  iter=this.commonjHashMap.keySet().iterator();
  while (iter.hasNext()) {
    Object key=iter.next();
    SDOType value=(SDOType)commonjHashMap.get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  return null;
}"
68139,"public Project getTopLinkProject(){
  if (topLinkProject == null) {
    topLinkProject=new Project();
    XMLLogin xmlLogin=new XMLLogin();
    xmlLogin.setEqualNamespaceResolvers(false);
    topLinkProject.setDatasourceLogin(xmlLogin);
    NamespaceResolver nr=new NamespaceResolver();
    SDOTypeHelper sdoTypeHelper=(SDOTypeHelper)aHelperContext.getTypeHelper();
    String sdoPrefix=sdoTypeHelper.getPrefix(SDOConstants.SDO_URL);
    nr.put(sdoPrefix,SDOConstants.SDO_URL);
    SDOType changeSummaryType=(SDOType)sdoTypeHelper.getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
    changeSummaryType.getXmlDescriptor().setNamespaceResolver(nr);
    topLinkProject.addDescriptor(changeSummaryType.getXmlDescriptor());
    SDOType openSequencedType=(SDOType)aHelperContext.getTypeHelper().getType(SDOConstants.ORACLE_SDO_URL,""String_Node_Str"");
    topLinkProject.addDescriptor(openSequencedType.getXmlDescriptor());
    ((SDOTypeHelper)aHelperContext.getTypeHelper()).addWrappersToProject(topLinkProject);
  }
  return topLinkProject;
}","public Project getTopLinkProject(){
  if (topLinkProject == null) {
    topLinkProject=new Project();
    XMLLogin xmlLogin=new XMLLogin();
    xmlLogin.setEqualNamespaceResolvers(false);
    topLinkProject.setDatasourceLogin(xmlLogin);
    NamespaceResolver nr=new NamespaceResolver();
    SDOTypeHelper sdoTypeHelper=(SDOTypeHelper)aHelperContext.getTypeHelper();
    String sdoPrefix=sdoTypeHelper.getPrefix(SDOConstants.SDO_URL);
    nr.put(sdoPrefix,SDOConstants.SDO_URL);
    SDOType changeSummaryType=(SDOType)sdoTypeHelper.getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
    changeSummaryType.getXmlDescriptor().setNamespaceResolver(nr);
    topLinkProject.addDescriptor(changeSummaryType.getXmlDescriptor());
    SDOType openSequencedType=(SDOType)aHelperContext.getTypeHelper().getType(SDOConstants.ORACLE_SDO_URL,""String_Node_Str"");
    topLinkProject.addDescriptor(openSequencedType.getXmlDescriptor());
    SDOTypeType typeType=(SDOTypeType)aHelperContext.getTypeHelper().getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
    if (!typeType.isInitialized()) {
      typeType.initializeMappings();
    }
    topLinkProject.addDescriptor(typeType.getXmlDescriptor());
    SDOPropertyType propertyType=(SDOPropertyType)aHelperContext.getTypeHelper().getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
    if (!propertyType.isInitialized()) {
      propertyType.initializeMappings();
    }
    topLinkProject.addDescriptor(propertyType.getXmlDescriptor());
    ((SDOTypeHelper)aHelperContext.getTypeHelper()).addWrappersToProject(topLinkProject);
  }
  return topLinkProject;
}"
68140,"public SDOPropertyType(SDOTypeHelper sdoTypeHelper,SDOType typeType){
  super(SDOConstants.SDO_URL,SDOConstants.PROPERTY,sdoTypeHelper);
  SDOProperty aliasNameProperty=new SDOProperty(aHelperContext);
  aliasNameProperty.setName(""String_Node_Str"");
  aliasNameProperty.setMany(true);
  aliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(aliasNameProperty);
  SDOProperty propNameProperty=new SDOProperty(aHelperContext);
  propNameProperty.setName(""String_Node_Str"");
  propNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(propNameProperty);
  SDOProperty manyProperty=new SDOProperty(aHelperContext);
  manyProperty.setName(""String_Node_Str"");
  manyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(manyProperty);
  SDOProperty containmentProperty=new SDOProperty(aHelperContext);
  containmentProperty.setName(""String_Node_Str"");
  containmentProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(containmentProperty);
  SDOProperty defaultProperty=new SDOProperty(aHelperContext);
  defaultProperty.setName(""String_Node_Str"");
  defaultProperty.setType(SDOConstants.SDO_OBJECT);
  addDeclaredProperty(defaultProperty);
  SDOProperty readOnlyProperty=new SDOProperty(aHelperContext);
  readOnlyProperty.setName(""String_Node_Str"");
  readOnlyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(readOnlyProperty);
  SDOProperty typeProperty=new SDOProperty(aHelperContext);
  typeProperty.setName(""String_Node_Str"");
  typeProperty.setType(typeType);
  addDeclaredProperty(typeProperty);
  SDOProperty oppositeProperty=new SDOProperty(aHelperContext);
  oppositeProperty.setName(""String_Node_Str"");
  oppositeProperty.setType(this);
  addDeclaredProperty(oppositeProperty);
  SDOProperty nullableProperty=new SDOProperty(aHelperContext);
  nullableProperty.setName(""String_Node_Str"");
  nullableProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(nullableProperty);
  setOpen(true);
}","public SDOPropertyType(SDOTypeHelper sdoTypeHelper,SDOType typeType){
  super(SDOConstants.SDO_URL,SDOConstants.PROPERTY,sdoTypeHelper);
  this.typeHelper=sdoTypeHelper;
  setInstanceClassName(SDOConstants.ORACLE_SDO_URL + ""String_Node_Str"");
  getInstanceClass();
  Class implClass=getImplClass();
  xmlDescriptor.setJavaClass(implClass);
  XMLSchemaReference schemaReference=new XMLSchemaClassPathReference();
  schemaReference.setSchemaContext(""String_Node_Str"");
  xmlDescriptor.setSchemaReference(schemaReference);
  SDOProperty aliasNameProperty=new SDOProperty(aHelperContext);
  aliasNameProperty.setName(""String_Node_Str"");
  aliasNameProperty.setMany(true);
  aliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(aliasNameProperty);
  SDOProperty propNameProperty=new SDOProperty(aHelperContext);
  propNameProperty.setName(""String_Node_Str"");
  propNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(propNameProperty);
  SDOProperty manyProperty=new SDOProperty(aHelperContext);
  manyProperty.setName(""String_Node_Str"");
  manyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(manyProperty);
  SDOProperty containmentProperty=new SDOProperty(aHelperContext);
  containmentProperty.setName(""String_Node_Str"");
  containmentProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(containmentProperty);
  SDOProperty defaultProperty=new SDOProperty(aHelperContext);
  defaultProperty.setName(""String_Node_Str"");
  defaultProperty.setType(SDOConstants.SDO_OBJECT);
  addDeclaredProperty(defaultProperty);
  SDOProperty readOnlyProperty=new SDOProperty(aHelperContext);
  readOnlyProperty.setName(""String_Node_Str"");
  readOnlyProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(readOnlyProperty);
  SDOProperty typeProperty=new SDOProperty(aHelperContext);
  typeProperty.setName(""String_Node_Str"");
  typeProperty.setType(typeType);
  typeProperty.setContainment(false);
  addDeclaredProperty(typeProperty);
  SDOProperty oppositeProperty=new SDOProperty(aHelperContext);
  oppositeProperty.setName(""String_Node_Str"");
  oppositeProperty.setType(this);
  addDeclaredProperty(oppositeProperty);
  SDOProperty nullableProperty=new SDOProperty(aHelperContext);
  nullableProperty.setName(""String_Node_Str"");
  nullableProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(nullableProperty);
  setOpen(true);
  setFinalized(true);
}"
68141,"public SDOTypeType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.SDO_URL,SDOConstants.TYPE,sdoTypeHelper);
  SDOType propertyType=new SDOPropertyType(sdoTypeHelper,this);
  sdoTypeHelper.addType(propertyType);
  SDOProperty baseTypeProperty=new SDOProperty(aHelperContext);
  baseTypeProperty.setName(""String_Node_Str"");
  baseTypeProperty.setMany(true);
  baseTypeProperty.setType(this);
  addDeclaredProperty(baseTypeProperty);
  SDOProperty propertiesProperty=new SDOProperty(aHelperContext);
  propertiesProperty.setName(""String_Node_Str"");
  propertiesProperty.setMany(true);
  propertiesProperty.setContainment(true);
  propertiesProperty.setType(propertyType);
  addDeclaredProperty(propertiesProperty);
  SDOProperty typeAliasNameProperty=new SDOProperty(aHelperContext);
  typeAliasNameProperty.setName(""String_Node_Str"");
  typeAliasNameProperty.setMany(true);
  typeAliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(typeAliasNameProperty);
  SDOProperty nameProperty=new SDOProperty(aHelperContext);
  nameProperty.setName(""String_Node_Str"");
  nameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(nameProperty);
  SDOProperty uriProperty=new SDOProperty(aHelperContext);
  uriProperty.setName(""String_Node_Str"");
  uriProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(uriProperty);
  SDOProperty dataTypeProperty=new SDOProperty(aHelperContext);
  dataTypeProperty.setName(""String_Node_Str"");
  dataTypeProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(dataTypeProperty);
  SDOProperty openProperty=new SDOProperty(aHelperContext);
  openProperty.setName(""String_Node_Str"");
  openProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(openProperty);
  SDOProperty sequencedProperty=new SDOProperty(aHelperContext);
  sequencedProperty.setName(""String_Node_Str"");
  sequencedProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(sequencedProperty);
  SDOProperty abstractProperty=new SDOProperty(aHelperContext);
  abstractProperty.setName(""String_Node_Str"");
  abstractProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(abstractProperty);
  setOpen(true);
}","public SDOTypeType(SDOTypeHelper sdoTypeHelper){
  super(SDOConstants.SDO_URL,SDOConstants.TYPE,sdoTypeHelper);
  setInstanceClassName(SDOConstants.ORACLE_SDO_URL + ""String_Node_Str"");
  getInstanceClass();
  Class implClass=getImplClass();
  xmlDescriptor.setJavaClass(implClass);
  xmlDescriptor.setDefaultRootElement(""String_Node_Str"");
  XMLSchemaReference schemaReference=new XMLSchemaClassPathReference();
  schemaReference.setSchemaContext(""String_Node_Str"");
  xmlDescriptor.setSchemaReference(schemaReference);
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(SDOConstants.SDO_PREFIX,SDOConstants.SDO_URL);
  SDOType propertyType=new SDOPropertyType(sdoTypeHelper,this);
  sdoTypeHelper.addType(propertyType);
  SDOProperty baseTypeProperty=new SDOProperty(aHelperContext);
  baseTypeProperty.setName(""String_Node_Str"");
  baseTypeProperty.setMany(true);
  baseTypeProperty.setType(this);
  baseTypeProperty.setContainment(true);
  addDeclaredProperty(baseTypeProperty);
  SDOProperty propertiesProperty=new SDOProperty(aHelperContext);
  propertiesProperty.setName(""String_Node_Str"");
  propertiesProperty.setMany(true);
  propertiesProperty.setContainment(true);
  propertiesProperty.setType(propertyType);
  addDeclaredProperty(propertiesProperty);
  SDOProperty typeAliasNameProperty=new SDOProperty(aHelperContext);
  typeAliasNameProperty.setName(""String_Node_Str"");
  typeAliasNameProperty.setMany(true);
  typeAliasNameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(typeAliasNameProperty);
  SDOProperty nameProperty=new SDOProperty(aHelperContext);
  nameProperty.setName(""String_Node_Str"");
  nameProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(nameProperty);
  SDOProperty uriProperty=new SDOProperty(aHelperContext);
  uriProperty.setName(""String_Node_Str"");
  uriProperty.setType(SDOConstants.SDO_STRING);
  addDeclaredProperty(uriProperty);
  SDOProperty dataTypeProperty=new SDOProperty(aHelperContext);
  dataTypeProperty.setName(""String_Node_Str"");
  dataTypeProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(dataTypeProperty);
  SDOProperty openProperty=new SDOProperty(aHelperContext);
  openProperty.setName(""String_Node_Str"");
  openProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(openProperty);
  SDOProperty sequencedProperty=new SDOProperty(aHelperContext);
  sequencedProperty.setName(""String_Node_Str"");
  sequencedProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(sequencedProperty);
  SDOProperty abstractProperty=new SDOProperty(aHelperContext);
  abstractProperty.setName(""String_Node_Str"");
  abstractProperty.setType(SDOConstants.SDO_BOOLEAN);
  addDeclaredProperty(abstractProperty);
  setOpen(true);
  setFinalized(true);
}"
68142,"public ClassDescriptor buildSwanDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(Swan.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setAlias(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  DirectToFieldMapping idMapping=new DirectToFieldMapping();
  idMapping.setAttributeName(""String_Node_Str"");
  idMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(idMapping);
  DirectToFieldMapping nameMapping=new DirectToFieldMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  DirectToFieldMapping foalCountMapping=new DirectToFieldMapping();
  foalCountMapping.setAttributeName(""String_Node_Str"");
  foalCountMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(foalCountMapping);
  return descriptor;
}","public ClassDescriptor buildSwanDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(Swan.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorFieldName(""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(Swan.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SuperSwan.class,""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setAlias(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  DirectToFieldMapping idMapping=new DirectToFieldMapping();
  idMapping.setAttributeName(""String_Node_Str"");
  idMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(idMapping);
  DirectToFieldMapping nameMapping=new DirectToFieldMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  DirectToFieldMapping foalCountMapping=new DirectToFieldMapping();
  foalCountMapping.setAttributeName(""String_Node_Str"");
  foalCountMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(foalCountMapping);
  DirectToFieldMapping weightMapping=new DirectToFieldMapping();
  weightMapping.setAttributeName(""String_Node_Str"");
  weightMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(weightMapping);
  DirectToFieldMapping ageMapping=new DirectToFieldMapping();
  ageMapping.setAttributeName(""String_Node_Str"");
  ageMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(ageMapping);
  return descriptor;
}"
68143,"public ClassDescriptor buildCowDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(Cow.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setAlias(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  DirectToFieldMapping cowIdMapping=new DirectToFieldMapping();
  cowIdMapping.setAttributeName(""String_Node_Str"");
  cowIdMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(cowIdMapping);
  DirectToFieldMapping calfCountIdMapping=new DirectToFieldMapping();
  calfCountIdMapping.setAttributeName(""String_Node_Str"");
  calfCountIdMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(calfCountIdMapping);
  DirectToFieldMapping nameMapping=new DirectToFieldMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setFieldName(""String_Node_Str"");
  nameMapping.setNullValue(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  DirectToFieldMapping calfCountMapping=new DirectToFieldMapping();
  calfCountMapping.setAttributeName(""String_Node_Str"");
  calfCountMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(calfCountMapping);
  return descriptor;
}","public ClassDescriptor buildCowDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(Cow.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorFieldName(""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(Cow.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SuperCow.class,""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setAlias(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  DirectToFieldMapping cowIdMapping=new DirectToFieldMapping();
  cowIdMapping.setAttributeName(""String_Node_Str"");
  cowIdMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(cowIdMapping);
  DirectToFieldMapping calfCountIdMapping=new DirectToFieldMapping();
  calfCountIdMapping.setAttributeName(""String_Node_Str"");
  calfCountIdMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(calfCountIdMapping);
  DirectToFieldMapping nameMapping=new DirectToFieldMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setFieldName(""String_Node_Str"");
  nameMapping.setNullValue(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  DirectToFieldMapping calfCountMapping=new DirectToFieldMapping();
  calfCountMapping.setAttributeName(""String_Node_Str"");
  calfCountMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(calfCountMapping);
  DirectToFieldMapping weightIdMapping=new DirectToFieldMapping();
  weightIdMapping.setAttributeName(""String_Node_Str"");
  weightIdMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(weightIdMapping);
  DirectToFieldMapping weightMapping=new DirectToFieldMapping();
  weightMapping.setAttributeName(""String_Node_Str"");
  weightMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(weightMapping);
  DirectToFieldMapping ageIdMapping=new DirectToFieldMapping();
  ageIdMapping.setAttributeName(""String_Node_Str"");
  ageIdMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(ageIdMapping);
  DirectToFieldMapping ageMapping=new DirectToFieldMapping();
  ageMapping.setAttributeName(""String_Node_Str"");
  ageMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(ageMapping);
  return descriptor;
}"
68144,"public MultipleTableProject(){
  setName(""String_Node_Str"");
  addDescriptor(buildCowDescriptor());
  addDescriptor(buildHorseDescriptor());
  addDescriptor(buildHumanDescriptor());
  addDescriptor(buildSwanDescriptor());
}","public MultipleTableProject(){
  setName(""String_Node_Str"");
  addDescriptor(buildCowDescriptor());
  addDescriptor(buildHorseDescriptor());
  addDescriptor(buildHumanDescriptor());
  addDescriptor(buildSwanDescriptor());
  addDescriptor(buildSuperCowDescriptor());
  addDescriptor(buildSuperHorseDescriptor());
  addDescriptor(buildSuperSwanDescriptor());
}"
68145,"public ClassDescriptor buildHorseDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(Horse.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setAlias(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  DirectToFieldMapping idMapping=new DirectToFieldMapping();
  idMapping.setAttributeName(""String_Node_Str"");
  idMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(idMapping);
  DirectToFieldMapping nameMapping=new DirectToFieldMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  DirectToFieldMapping foalCountMapping=new DirectToFieldMapping();
  foalCountMapping.setAttributeName(""String_Node_Str"");
  foalCountMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(foalCountMapping);
  return descriptor;
}","public ClassDescriptor buildHorseDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(Horse.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorFieldName(""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(Horse.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SuperHorse.class,""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.addForeignKeyFieldNameForMultipleTable(""String_Node_Str"",""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setAlias(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  DirectToFieldMapping idMapping=new DirectToFieldMapping();
  idMapping.setAttributeName(""String_Node_Str"");
  idMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(idMapping);
  DirectToFieldMapping nameMapping=new DirectToFieldMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  DirectToFieldMapping foalCountMapping=new DirectToFieldMapping();
  foalCountMapping.setAttributeName(""String_Node_Str"");
  foalCountMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(foalCountMapping);
  DirectToFieldMapping weightMapping=new DirectToFieldMapping();
  weightMapping.setAttributeName(""String_Node_Str"");
  weightMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(weightMapping);
  DirectToFieldMapping ageMapping=new DirectToFieldMapping();
  ageMapping.setAttributeName(""String_Node_Str"");
  ageMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(ageMapping);
  return descriptor;
}"
68146,"public DataObject createDataObject(Property property,Type aType){
  DataObject created=aHelperContext.getDataFactory().create(aType);
  if (property.isMany()) {
    ((ListWrapper)getList(property)).add(created,false);
  }
 else {
    set(property,created);
  }
  _setModified(true);
  ((SDODataObject)created)._setCreated(true);
  return created;
}","public DataObject createDataObject(Property property,Type aType){
  DataObject created=aHelperContext.getDataFactory().create(aType);
  if (property.isMany()) {
    ((ListWrapper)getList(property)).add(created,true);
  }
 else {
    set(property,created);
  }
  _setModified(true);
  ((SDODataObject)created)._setCreated(true);
  return created;
}"
68147,"public static ForUpdateClause newInstance(short lockMode){
  if (lockMode == ObjectBuildingQuery.NO_LOCK) {
    return NO_LOCK_CLAUSE;
  }
 else {
    return new ForUpdateClause(lockMode);
  }
}","public static ForUpdateClause newInstance(Integer waitTimeout){
  return new ForUpdateClause(waitTimeout);
}"
68148,"/** 
 * INTERNAL: Prints the as of clause for an expression inside of the FROM clause.
 */
public void printSQL(ExpressionSQLPrinter printer,SQLSelectStatement statement){
  if (getLockMode() == ObjectBuildingQuery.LOCK) {
    printer.printString(printer.getSession().getPlatform().getSelectForUpdateString());
  }
 else   if (lockMode == ObjectBuildingQuery.LOCK_NOWAIT) {
    printer.printString(printer.getSession().getPlatform().getSelectForUpdateNoWaitString());
  }
}","/** 
 * INTERNAL: Prints the as of clause for an expression inside of the FROM clause.
 */
public void printSQL(ExpressionSQLPrinter printer,SQLSelectStatement statement){
  if (getLockMode() == ObjectBuildingQuery.LOCK) {
    if (waitTimeout == null) {
      printer.printString(printer.getSession().getPlatform().getSelectForUpdateString());
    }
 else {
      printer.printString(printer.getSession().getPlatform().getSelectForUpdateWaitString(waitTimeout));
    }
  }
 else   if (lockMode == ObjectBuildingQuery.LOCK_NOWAIT) {
    printer.printString(printer.getSession().getPlatform().getSelectForUpdateNoWaitString());
  }
}"
68149,"public ForUpdateClause(short lockMode){
  this.lockMode=lockMode;
}","public ForUpdateClause(Integer waitTimeout){
  this.lockMode=ObjectBuildingQuery.LOCK;
  this.waitTimeout=waitTimeout;
}"
68150,"/** 
 * INTERNAL: Create and return a new unit of work with the session as its parent.
 */
public UnitOfWorkImpl(AbstractSession parent,ReferenceMode referenceMode){
  super();
  this.isLoggingOff=parent.isLoggingOff();
  this.referenceMode=referenceMode;
  this.shouldDiscoverNewObjects=true;
  this.name=parent.getName();
  this.parent=parent;
  this.project=parent.getProject();
  this.profiler=parent.getProfiler();
  this.isInProfile=parent.isInProfile;
  this.sessionLog=parent.getSessionLog();
  this.eventManager=parent.getEventManager().clone(this);
  this.exceptionHandler=parent.getExceptionHandler();
  this.setReadOnlyClasses(parent.copyReadOnlyClasses());
  this.validationLevel=Partial;
  this.shouldThrowConformExceptions=DO_NOT_THROW_CONFORM_EXCEPTIONS;
  this.lifecycle=Birth;
  this.shouldCheckWriteLock=parent.getDatasourceLogin().shouldSynchronizedReadOnWrite() || parent.getDatasourceLogin().shouldSynchronizeWrites();
  this.isNestedUnitOfWork=parent.isUnitOfWork();
  this.eventManager.postAcquireUnitOfWork();
  incrementProfile(SessionProfiler.UowCreated);
}","/** 
 * INTERNAL: Create and return a new unit of work with the session as its parent.
 */
public UnitOfWorkImpl(AbstractSession parent,ReferenceMode referenceMode){
  super();
  this.isLoggingOff=parent.isLoggingOff();
  this.referenceMode=referenceMode;
  this.shouldDiscoverNewObjects=true;
  this.name=parent.getName();
  this.parent=parent;
  this.project=parent.getProject();
  this.profiler=parent.getProfiler();
  this.isInProfile=parent.isInProfile;
  this.sessionLog=parent.getSessionLog();
  this.eventManager=parent.getEventManager().clone(this);
  this.exceptionHandler=parent.getExceptionHandler();
  this.pessimisticLockTimeoutDefault=parent.getPessimisticLockTimeoutDefault();
  this.setReadOnlyClasses(parent.copyReadOnlyClasses());
  this.validationLevel=Partial;
  this.shouldThrowConformExceptions=DO_NOT_THROW_CONFORM_EXCEPTIONS;
  this.lifecycle=Birth;
  this.shouldCheckWriteLock=parent.getDatasourceLogin().shouldSynchronizedReadOnWrite() || parent.getDatasourceLogin().shouldSynchronizeWrites();
  this.isNestedUnitOfWork=parent.isUnitOfWork();
  this.eventManager.postAcquireUnitOfWork();
  incrementProfile(SessionProfiler.UowCreated);
}"
68151,"private DatabaseMapping buildXMLTransformationMapping(String mappingUri){
  XMLTransformationMapping mapping=new XMLTransformationMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,true);
  QNameTransformer transformer=new QNameTransformer(xpath);
  mapping.setAttributeTransformer(transformer);
  mapping.addFieldTransformer(xpath,transformer);
  return mapping;
}","private DatabaseMapping buildXMLTransformationMapping(String mappingUri){
  XMLTransformationMapping mapping=new XMLTransformationMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,true);
  String xpathMinusText=xpath.substring(0,xpath.lastIndexOf(""String_Node_Str""));
  QNameTransformer transformer=new QNameTransformer(xpath);
  mapping.setAttributeTransformer(transformer);
  mapping.addFieldTransformer(xpath,transformer);
  NamespaceResolver nsr=new NamespaceResolver();
  nsr.put(XMLConstants.XMLNS,XMLConstants.XMLNS_URL);
  XMLField field=new XMLField();
  field.setNamespaceResolver(nsr);
  field.setXPath(xpathMinusText + ""String_Node_Str"" + XMLConstants.XMLNS+ ""String_Node_Str""+ QNameTransformer.QNAME_NAMESPACE_PREFIX);
  mapping.addFieldTransformer(field,new NamespaceURITransformer());
  return mapping;
}"
68152,"public void testSetPropertyOnNullDataObject(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=new SDODataFactory(getHelperContext());
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoex) {
    if (sdoex.getMessage().lastIndexOf(""String_Node_Str"") != -1) {
      expectedEx=true;
    }
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}","public void testSetPropertyOnNullDataObject(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=(SDODataFactory)getHelperContext().getDataFactory();
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoex) {
    if (sdoex.getMessage().lastIndexOf(""String_Node_Str"") != -1) {
      expectedEx=true;
    }
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}"
68153,"public void testSetPropertyOnNullNestedDataObject(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=new SDODataFactory(getHelperContext());
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    SDODataObject items=(SDODataObject)po.createDataObject(""String_Node_Str"");
    items.createDataObject(""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoex) {
    if (sdoex.getMessage().lastIndexOf(""String_Node_Str"") != -1) {
      expectedEx=true;
    }
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}","public void testSetPropertyOnNullNestedDataObject(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=(SDODataFactory)getHelperContext().getDataFactory();
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    SDODataObject items=(SDODataObject)po.createDataObject(""String_Node_Str"");
    items.createDataObject(""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoex) {
    if (sdoex.getMessage().lastIndexOf(""String_Node_Str"") != -1) {
      expectedEx=true;
    }
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}"
68154,"public void testSetPropertyOnNullListWrapper(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=new SDODataFactory(getHelperContext());
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    po.createDataObject(""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoe) {
    expectedEx=true;
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}","public void testSetPropertyOnNullListWrapper(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=(SDODataFactory)getHelperContext().getDataFactory();
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    po.createDataObject(""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoe) {
    expectedEx=true;
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}"
68155,"public void setHelperContext(HelperContext helperContext){
  aHelperContext=helperContext;
}","/** 
 * INTERNAL: Set the helperContext that this instance is associated with.
 * @param helperContext
 */
public void setHelperContext(HelperContext helperContext);"
68156,"public HelperContext getHelperContext(){
  if (null == aHelperContext) {
    aHelperContext=HelperProvider.getDefaultContext();
  }
  return aHelperContext;
}","/** 
 * INTERNAL: Return the helperContext that this instance is associated with.
 * @return
 */
public HelperContext getHelperContext();"
68157,"public SDOHelperContext(ClassLoader aClassLoader){
  super();
  copyHelper=new SDOCopyHelper(this);
  dataFactory=new SDODataFactory(this);
  dataHelper=new SDODataHelper(this);
  equalityHelper=new SDOEqualityHelper(this);
  xmlHelper=new SDOXMLHelperDelegate(this,aClassLoader);
  typeHelper=new SDOTypeHelperDelegate(this);
  xsdHelper=new SDOXSDHelperDelegate(this);
}","public SDOHelperContext(ClassLoader aClassLoader){
  super();
  copyHelper=new SDOCopyHelper(this);
  dataFactory=new SDODataFactoryDelegate(this);
  dataHelper=new SDODataHelper(this);
  equalityHelper=new SDOEqualityHelper(this);
  xmlHelper=new SDOXMLHelperDelegate(this,aClassLoader);
  typeHelper=new SDOTypeHelperDelegate(this);
  xsdHelper=new SDOXSDHelperDelegate(this);
}"
68158,"/** 
 * INTERNAL:
 */
private SDOTypeHelperDelegate getSDOTypeHelperDelegate(){
  Object key=getDelegateMapKey();
  SDOTypeHelperDelegate sdoTypeHelperDelegate=(SDOTypeHelperDelegate)sdoTypeHelperDelegates.get(key);
  if (null == sdoTypeHelperDelegate) {
    sdoTypeHelperDelegate=new SDOTypeHelperDelegate(getHelperContext());
    sdoTypeHelperDelegates.put(key,sdoTypeHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoTypeHelperDelegate,key},false);
  }
  return sdoTypeHelperDelegate;
}","private SDOTypeHelperDelegate getSDOTypeHelperDelegate(){
  HelperContext hCtx=SDOHelperContext.getHelperContext(getDelegateMapKey());
  return (SDOTypeHelperDelegate)hCtx.getTypeHelper();
}"
68159,"public SDOTypeHelperDelegator(HelperContext aContext){
  super();
  aHelperContext=aContext;
  sdoTypeHelperDelegates=new WeakHashMap();
}","public SDOTypeHelperDelegator(HelperContext aContext){
  aHelperContext=aContext;
}"
68160,"/** 
 * INTERNAL:
 */
private SDOXMLHelperDelegate getSDOXMLHelperDelegate(){
  Object key=getDelegateMapKey();
  SDOXMLHelperDelegate sdoXMLHelperDelegate=(SDOXMLHelperDelegate)sdoXMLHelperDelegates.get(key);
  if (null == sdoXMLHelperDelegate) {
    sdoXMLHelperDelegate=new SDOXMLHelperDelegate(getHelperContext());
    sdoXMLHelperDelegates.put(key,sdoXMLHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoXMLHelperDelegate,key},false);
  }
  return sdoXMLHelperDelegate;
}","/** 
 * INTERNAL:
 */
private SDOXMLHelperDelegate getSDOXMLHelperDelegate(){
  HelperContext hCtx=SDOHelperContext.getHelperContext(getDelegateMapKey());
  return (SDOXMLHelperDelegate)hCtx.getXMLHelper();
}"
68161,"public SDOXMLHelperDelegator(HelperContext aContext){
  super();
  aHelperContext=aContext;
  sdoXMLHelperDelegates=new WeakHashMap();
}","public SDOXMLHelperDelegator(HelperContext aContext){
  super();
  aHelperContext=aContext;
}"
68162,"private void buildCalendar(){
  CONTROL_ID.set(Calendar.YEAR,2000);
  CONTROL_ID.set(Calendar.MONTH,Calendar.JANUARY);
  CONTROL_ID.set(Calendar.DAY_OF_MONTH,2);
  CONTROL_ID.set(Calendar.HOUR,9);
  CONTROL_ID.set(Calendar.HOUR_OF_DAY,9);
  CONTROL_ID.set(Calendar.AM_PM,Calendar.AM);
  CONTROL_ID.set(Calendar.MINUTE,30);
  CONTROL_ID.set(Calendar.SECOND,45);
  CONTROL_ID.set(Calendar.MILLISECOND,0);
}","private void buildCalendar(){
  CONTROL_ID.clear();
  CONTROL_ID.set(Calendar.YEAR,2000);
  CONTROL_ID.set(Calendar.MONTH,Calendar.JANUARY);
  CONTROL_ID.set(Calendar.DAY_OF_MONTH,2);
  CONTROL_ID.set(Calendar.HOUR,9);
  CONTROL_ID.set(Calendar.HOUR_OF_DAY,9);
  CONTROL_ID.set(Calendar.AM_PM,Calendar.AM);
  CONTROL_ID.set(Calendar.MINUTE,30);
  CONTROL_ID.set(Calendar.SECOND,45);
  CONTROL_ID.set(Calendar.MILLISECOND,0);
}"
68163,"public Object getControlObject(){
  try {
    String base64=""String_Node_Str"";
    String hex=""String_Node_Str"";
    Calendar time, time2, time3, date, date2, date3, dateTime, dateTime2, dateTime3;
    Vector hexAndBase64Vector, timeVector, dateVector, dateTimeVector;
    Date typedDate, untypedDate;
    java.sql.Date typedSqlDate, untypedSqlDate;
    java.sql.Timestamp typedTimestamp, untypedTimestamp;
    hexAndBase64Vector=new Vector();
    hexAndBase64Vector.addElement(new String(""String_Node_Str"").getBytes());
    hexAndBase64Vector.addElement(new String(""String_Node_Str"").getBytes());
    hexAndBase64Vector.addElement(new String(""String_Node_Str"").getBytes());
    Date parsedDate=new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str"");
    time=Calendar.getInstance();
    time.setTime(parsedDate);
    time.clear(Calendar.YEAR);
    time.clear(Calendar.MONTH);
    time.clear(Calendar.DATE);
    parsedDate=new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str"");
    time2=Calendar.getInstance();
    time2.setTime(parsedDate);
    time2.clear(Calendar.YEAR);
    time2.clear(Calendar.MONTH);
    time2.clear(Calendar.DATE);
    parsedDate=new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str"");
    time3=Calendar.getInstance();
    time3.setTime(parsedDate);
    time3.clear(Calendar.YEAR);
    time3.clear(Calendar.MONTH);
    time3.clear(Calendar.DATE);
    parsedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    date=Calendar.getInstance();
    date.setTime(parsedDate);
    date.clear(Calendar.HOUR);
    date.clear(Calendar.MINUTE);
    date.clear(Calendar.SECOND);
    date.clear(Calendar.MILLISECOND);
    parsedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    date2=Calendar.getInstance();
    date2.setTime(parsedDate);
    date2.clear(Calendar.HOUR);
    date2.clear(Calendar.MINUTE);
    date2.clear(Calendar.SECOND);
    date2.clear(Calendar.MILLISECOND);
    parsedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    date3=Calendar.getInstance();
    date3.setTime(parsedDate);
    date3.clear(Calendar.HOUR);
    date3.clear(Calendar.MINUTE);
    date3.clear(Calendar.SECOND);
    date3.clear(Calendar.MILLISECOND);
    parsedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    dateTime=Calendar.getInstance();
    dateTime.clear();
    dateTime.setTime(parsedDate);
    parsedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    dateTime2=Calendar.getInstance();
    dateTime2.clear();
    dateTime2.setTime(parsedDate);
    parsedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    dateTime3=Calendar.getInstance();
    dateTime3.clear();
    dateTime3.setTime(parsedDate);
    typedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    untypedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    typedSqlDate=Helper.sqlDateFromUtilDate(typedDate);
    untypedSqlDate=Helper.sqlDateFromUtilDate(untypedDate);
    untypedTimestamp=Helper.timestampFromDate(untypedDate);
    typedTimestamp=Helper.timestampFromDate(new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str""));
    dateVector=new Vector();
    dateVector.addElement(date);
    dateVector.addElement(date2);
    dateVector.addElement(date3);
    timeVector=new Vector();
    timeVector.addElement(time);
    timeVector.addElement(time2);
    timeVector.addElement(time3);
    dateTimeVector=new Vector();
    dateTimeVector.addElement(dateTime);
    dateTimeVector.addElement(dateTime2);
    dateTimeVector.addElement(dateTime3);
    TestObject testObject=new TestObject();
    testObject.setBase64(base64.getBytes());
    testObject.setHex(hex.getBytes());
    testObject.setDate(date);
    testObject.setTime(time);
    testObject.setDateTime(dateTime);
    testObject.setBase64Vector(hexAndBase64Vector);
    testObject.setHexVector(hexAndBase64Vector);
    testObject.setDateVector(dateVector);
    testObject.setTimeVector(timeVector);
    testObject.setDateTimeVector(dateTimeVector);
    testObject.setUntypedDate(untypedDate);
    testObject.setTypedDate(typedDate);
    testObject.setUntypedSqlDate(untypedSqlDate);
    testObject.setTypedSqlDate(typedSqlDate);
    testObject.setUntypedTimestamp(untypedTimestamp);
    testObject.setTypedTimestamp(typedTimestamp);
    return testObject;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public Object getControlObject(){
  try {
    String base64=""String_Node_Str"";
    String hex=""String_Node_Str"";
    Calendar time, time2, time3, date, date2, date3, dateTime, dateTime2, dateTime3;
    Vector hexAndBase64Vector, timeVector, dateVector, dateTimeVector;
    Date typedDate, untypedDate;
    java.sql.Date typedSqlDate, untypedSqlDate;
    java.sql.Timestamp typedTimestamp, untypedTimestamp;
    hexAndBase64Vector=new Vector();
    hexAndBase64Vector.addElement(new String(""String_Node_Str"").getBytes());
    hexAndBase64Vector.addElement(new String(""String_Node_Str"").getBytes());
    hexAndBase64Vector.addElement(new String(""String_Node_Str"").getBytes());
    Date parsedDate=new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str"");
    time=Calendar.getInstance();
    time.setTime(parsedDate);
    time.clear(Calendar.YEAR);
    time.clear(Calendar.MONTH);
    time.clear(Calendar.DATE);
    time.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str"");
    time2=Calendar.getInstance();
    time2.setTime(parsedDate);
    time2.clear(Calendar.YEAR);
    time2.clear(Calendar.MONTH);
    time2.clear(Calendar.DATE);
    time2.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str"");
    time3=Calendar.getInstance();
    time3.setTime(parsedDate);
    time3.clear(Calendar.YEAR);
    time3.clear(Calendar.MONTH);
    time3.clear(Calendar.DATE);
    time3.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    date=Calendar.getInstance();
    date.setTime(parsedDate);
    date.clear(Calendar.HOUR);
    date.clear(Calendar.MINUTE);
    date.clear(Calendar.SECOND);
    date.clear(Calendar.MILLISECOND);
    date.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    date2=Calendar.getInstance();
    date2.setTime(parsedDate);
    date2.clear(Calendar.HOUR);
    date2.clear(Calendar.MINUTE);
    date2.clear(Calendar.SECOND);
    date2.clear(Calendar.MILLISECOND);
    date2.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    date3=Calendar.getInstance();
    date3.setTime(parsedDate);
    date3.clear(Calendar.HOUR);
    date3.clear(Calendar.MINUTE);
    date3.clear(Calendar.SECOND);
    date3.clear(Calendar.MILLISECOND);
    date3.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    dateTime=Calendar.getInstance();
    dateTime.clear();
    dateTime.setTime(parsedDate);
    dateTime.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    dateTime2=Calendar.getInstance();
    dateTime2.clear();
    dateTime2.setTime(parsedDate);
    dateTime2.clear(Calendar.ZONE_OFFSET);
    parsedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    dateTime3=Calendar.getInstance();
    dateTime3.clear();
    dateTime3.setTime(parsedDate);
    dateTime3.clear(Calendar.ZONE_OFFSET);
    typedDate=new SimpleDateFormat(DATE_FORMAT).parse(""String_Node_Str"");
    untypedDate=new SimpleDateFormat(DATE_TIME_FORMAT).parse(""String_Node_Str"");
    typedSqlDate=Helper.sqlDateFromUtilDate(typedDate);
    untypedSqlDate=Helper.sqlDateFromUtilDate(untypedDate);
    untypedTimestamp=Helper.timestampFromDate(untypedDate);
    typedTimestamp=Helper.timestampFromDate(new SimpleDateFormat(TIME_FORMAT).parse(""String_Node_Str""));
    dateVector=new Vector();
    dateVector.addElement(date);
    dateVector.addElement(date2);
    dateVector.addElement(date3);
    timeVector=new Vector();
    timeVector.addElement(time);
    timeVector.addElement(time2);
    timeVector.addElement(time3);
    dateTimeVector=new Vector();
    dateTimeVector.addElement(dateTime);
    dateTimeVector.addElement(dateTime2);
    dateTimeVector.addElement(dateTime3);
    TestObject testObject=new TestObject();
    testObject.setBase64(base64.getBytes());
    testObject.setHex(hex.getBytes());
    testObject.setDate(date);
    testObject.setTime(time);
    testObject.setDateTime(dateTime);
    testObject.setBase64Vector(hexAndBase64Vector);
    testObject.setHexVector(hexAndBase64Vector);
    testObject.setDateVector(dateVector);
    testObject.setTimeVector(timeVector);
    testObject.setDateTimeVector(dateTimeVector);
    testObject.setUntypedDate(untypedDate);
    testObject.setTypedDate(typedDate);
    testObject.setUntypedSqlDate(untypedSqlDate);
    testObject.setTypedSqlDate(typedSqlDate);
    testObject.setUntypedTimestamp(untypedTimestamp);
    testObject.setTypedTimestamp(typedTimestamp);
    return testObject;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
68164,"public void testCalendarToString_gMonth(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_MONTH_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_gMonth(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_MONTH_QNAME);
  this.assertEquals(control,test);
}"
68165,"public void testCalendarToString_gMonthDay(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_MONTH_DAY_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_gMonthDay(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_MONTH_DAY_QNAME);
  this.assertEquals(control,test);
}"
68166,"public void testCalendarToString_time_1ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_1MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_time_1ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_1MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}"
68167,"public void testCalendarToString_gYear(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_YEAR_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_gYear(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_YEAR_QNAME);
  this.assertEquals(control,test);
}"
68168,"public void testCalendarToString_time_0ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_time_0ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}"
68169,"public void testCalendarToString_dateTime_0ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_dateTime_0ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}"
68170,"public void testCalendarToString_dateTime_10ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_10MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_dateTime_10ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_10MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}"
68171,"public void testCalendarToString_gYearMonth(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_YEAR_MONTH_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_gYearMonth(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_YEAR_MONTH_QNAME);
  this.assertEquals(control,test);
}"
68172,"public void testCalendarToString_gDay(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_DAY_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_gDay(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.G_DAY_QNAME);
  this.assertEquals(control,test);
}"
68173,"public void testCalendarToString_time_100ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_100MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_time_100ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_100MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}"
68174,"public void testCalendarToString_time_10ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_10MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_time_10ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_10MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.TIME_QNAME);
  this.assertEquals(control,test);
}"
68175,"public void testCalendarToString_dateTime_1ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_1MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_dateTime_1ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_1MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}"
68176,"public void testCalendarToString_dateTime_100ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_100MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_dateTime_100ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_100MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_TIME_QNAME);
  this.assertEquals(control,test);
}"
68177,"public void testCalendarToString_date(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_QNAME);
  this.assertEquals(control,test);
}","public void testCalendarToString_date(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class,XMLConstants.DATE_QNAME);
  this.assertEquals(control,test);
}"
68178,"/** 
 * Return the Type for this interfaceClass or null if not found.
 * @param interfaceClass is the interface for the DataObject's Type -type.getInstanceClass();
 * @return the Type for this interfaceClass or null if not found.
 */
public SDOType getType(Class interfaceClass){
  SDOType type=(SDOType)getInterfacesToSDOTypeHashMap().get(interfaceClass);
  if (type != null) {
    return type;
  }
  Iterator iter=getTypesHashMap().keySet().iterator();
  while (iter.hasNext()) {
    QName key=(QName)iter.next();
    SDOType value=(SDOType)getTypesHashMap().get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  return getTypeForSimpleJavaType(interfaceClass);
}","/** 
 * Return the Type for this interfaceClass or null if not found.
 * @param interfaceClass is the interface for the DataObject's Type -type.getInstanceClass();
 * @return the Type for this interfaceClass or null if not found.
 */
public SDOType getType(Class interfaceClass){
  SDOType type=(SDOType)getInterfacesToSDOTypeHashMap().get(interfaceClass);
  if (type != null) {
    return type;
  }
  type=getTypeForSimpleJavaType(interfaceClass);
  if (type != null) {
    return type;
  }
  Iterator iter=getTypesHashMap().keySet().iterator();
  while (iter.hasNext()) {
    QName key=(QName)iter.next();
    SDOType value=(SDOType)getTypesHashMap().get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  return null;
}"
68179,"public void addTests(){
  addTest(new AggregatePrimaryKeyTest());
  addTest(new AggregatePrimaryKeyOrderByTest());
  addTest(new NestedAggregateTest());
}","public void addTests(){
  addTest(new AggregatePrimaryKeyOrderByTest());
  addTest(new NestedAggregateTest());
}"
68180,"protected void checkIndirection(List newProblems){
  if (this.usesValueHolderIndirection()) {
    if (!getProject().usesWeaving() && !this.getInstanceVariable().isValueHolder()) {
      newProblems.add(this.buildProblem(ProblemConstants.MAPPING_VALUE_HOLDER_INDIRECTION_WITHOUT_VALUE_HOLDER_ATTRIBUTE));
    }
  }
 else {
    if (this.getInstanceVariable().isValueHolder()) {
      newProblems.add(this.buildProblem(ProblemConstants.MAPPING_VALUE_HOLDER_ATTRIBUTE_WITHOUT_VALUE_HOLDER_INDIRECTION));
    }
  }
}","protected void checkIndirection(List newProblems){
  if (this.usesValueHolderIndirection()) {
    if (this.getInstanceVariable().isTLValueHolder()) {
      newProblems.add(this.buildProblem(ProblemConstants.MAPPING_VALUE_HOLDER_INDIRECTION_WITH_TL_VALUE_HOLDER_ATTRIBUTE));
    }
 else     if (!getProject().usesWeaving() && !this.getInstanceVariable().isValueHolder()) {
      newProblems.add(this.buildProblem(ProblemConstants.MAPPING_VALUE_HOLDER_INDIRECTION_WITHOUT_VALUE_HOLDER_ATTRIBUTE));
    }
  }
 else {
    if (this.getInstanceVariable().isValueHolder()) {
      newProblems.add(this.buildProblem(ProblemConstants.MAPPING_VALUE_HOLDER_ATTRIBUTE_WITHOUT_VALUE_HOLDER_INDIRECTION));
    }
  }
}"
68181,"private void removeAllAdditionalProjects(){
  this.removeItemsFromCollection(CollectionTools.collection(additionalProjects()),additionalProjects,ADDITIONAL_PROJECTS_COLLECTION);
}","private void removeAllAdditionalProjects(){
  this.removeItemsFromCollection(CollectionTools.collection(additionalProjects()),additionalProjects,ADDITIONAL_PROJECTS_COLLECTION);
  this.getAdditionalProjectsConfigs().clear();
}"
68182,"private void addExpressionMathTest(){
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression expression=builder.get(""String_Node_Str"").greaterThanEqual(1000);
  expression=expression.and((ExpressionMath.add(builder.get(""String_Node_Str""),new Integer(3000))).lessThan(90000));
  expression=expression.and((ExpressionMath.subtract(builder.get(""String_Node_Str""),new Integer(1000))).greaterThan(1000));
  expression=expression.and((ExpressionMath.multiply(builder.get(""String_Node_Str""),new Integer(3))).greaterThan(50000));
  expression=expression.and((ExpressionMath.divide(builder.get(""String_Node_Str""),new Integer(3))).lessThan(100000));
  expression=expression.and((ExpressionMath.abs(builder.get(""String_Node_Str""))).lessThan(100000));
  expression=expression.and((ExpressionMath.cos(builder.get(""String_Node_Str"")).lessThanEqual(1)));
  expression=expression.and((ExpressionMath.sin(builder.get(""String_Node_Str"")).lessThanEqual(1)));
  expression=expression.and((ExpressionMath.tan(builder.get(""String_Node_Str"")).lessThanEqual(1)));
  expression=expression.and((ExpressionMath.log(builder.get(""String_Node_Str""))).greaterThan(0));
  ReadAllExpressionTest test=new ReadAllExpressionTest(Employee.class,6);
  test.setExpression(expression);
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  test.addUnsupportedPlatform(TimesTenPlatform.class);
  addTest(test);
}","private void addExpressionMathTest(){
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression expression=builder.get(""String_Node_Str"").greaterThanEqual(1000);
  expression=expression.and((ExpressionMath.add(builder.get(""String_Node_Str""),new Integer(3000))).lessThan(90000));
  expression=expression.and((ExpressionMath.subtract(builder.get(""String_Node_Str""),new Integer(1000))).greaterThan(1000));
  expression=expression.and((ExpressionMath.multiply(builder.get(""String_Node_Str""),new Integer(3))).greaterThan(50000));
  expression=expression.and((ExpressionMath.divide(builder.get(""String_Node_Str""),new Integer(3))).lessThan(100000));
  expression=expression.and((ExpressionMath.abs(builder.get(""String_Node_Str""))).lessThan(100000));
  expression=expression.and((ExpressionMath.cos(builder.get(""String_Node_Str"")).lessThanEqual(1)));
  expression=expression.and((ExpressionMath.sin(builder.get(""String_Node_Str"")).lessThanEqual(1)));
  expression=expression.and((ExpressionMath.tan(builder.get(""String_Node_Str"")).lessThanEqual(1)));
  expression=expression.and((ExpressionMath.log(builder.get(""String_Node_Str""))).greaterThan(4));
  ReadAllExpressionTest test=new ReadAllExpressionTest(Employee.class,6);
  test.setExpression(expression);
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  test.addUnsupportedPlatform(TimesTenPlatform.class);
  addTest(test);
}"
68183,"/** 
 * INTERNAL:
 */
public static XMLEntityMappings read(URL url,ClassLoader classLoader) throws IOException {
  InputStreamReader reader1=null;
  InputStreamReader reader2=null;
  InputStreamReader reader3=null;
  try {
    try {
      reader1=new InputStreamReader(url.openStream(),""String_Node_Str"");
      reader2=new InputStreamReader(url.openStream(),""String_Node_Str"");
      reader3=new InputStreamReader(url.openStream(),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException exception) {
      throw ValidationException.fatalErrorOccurred(exception);
    }
    XMLEntityMappings entityMappings=read(url,reader1,reader2,reader3,classLoader);
    entityMappings.setMappingFile(url);
    return entityMappings;
  }
  finally {
    try {
      if (reader1 != null) {
        reader1.close();
      }
      if (reader2 != null) {
        reader2.close();
      }
    }
 catch (    IOException exception) {
      throw ValidationException.fileError(exception);
    }
  }
}","/** 
 * INTERNAL:
 */
public static XMLEntityMappings read(URL url,ClassLoader classLoader) throws IOException {
  InputStreamReader reader1=null;
  InputStreamReader reader2=null;
  InputStreamReader reader3=null;
  try {
    try {
      reader1=getInputStreamReader(url);
      reader2=getInputStreamReader(url);
      reader3=getInputStreamReader(url);
    }
 catch (    UnsupportedEncodingException exception) {
      throw ValidationException.fatalErrorOccurred(exception);
    }
    XMLEntityMappings entityMappings=read(url,reader1,reader2,reader3,classLoader);
    entityMappings.setMappingFile(url);
    return entityMappings;
  }
  finally {
    try {
      if (reader1 != null) {
        reader1.close();
      }
      if (reader2 != null) {
        reader2.close();
      }
      if (reader3 != null) {
        reader3.close();
      }
    }
 catch (    IOException exception) {
      throw ValidationException.fileError(exception);
    }
  }
}"
68184,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession();
      new InheritedTableManager().replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  return suite;
}"
68185,"protected void setUp(){
  DatabaseSession session=JUnitTestCase.getServerSession();
  new InheritedTableManager().replaceTables(session);
}","public void setUp(){
  super.setUp();
  clearCache();
}"
68186,"private JComboBox buildQueryTypeComboBox(ObjectListSelectionModel querySelectionModel){
  JComboBox comboBox=new JComboBox(new ComboBoxModelAdapter(buildQueryTypeValueModel(),buildQueryTypePropertyAdapter(querySelectionModel)));
  comboBox.setEnabled(false);
  comboBox.setEditable(false);
  this.queryHolder.addPropertyChangeListener(ValueModel.VALUE,buildQueryTypeChooserListener(comboBox));
  return comboBox;
}","private JComboBox buildQueryTypeComboBox(ObjectListSelectionModel querySelectionModel){
  JComboBox comboBox=new JComboBox(new ComboBoxModelAdapter(buildQueryTypeValueModel(),buildQueryTypePropertyAdapter(querySelectionModel)));
  comboBox.setEnabled(false);
  comboBox.setEditable(false);
  this.queryHolder.addPropertyChangeListener(buildQueryTypeChooserListener(comboBox));
  return comboBox;
}"
68187,"private PropertyChangeListener buildQueryTypeChooserListener(final JComboBox comboBox){
  return new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (getQuery() == null) {
        comboBox.setEnabled(false);
      }
    }
  }
;
}","private PropertyChangeListener buildQueryTypeChooserListener(final JComboBox comboBox){
  return new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (getQuery() == null) {
        comboBox.setEnabled(false);
      }
 else {
        comboBox.setEnabled(true);
      }
    }
  }
;
}"
68188,"public void propertyChange(PropertyChangeEvent evt){
  if (getQuery() == null) {
    comboBox.setEnabled(false);
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (getQuery() == null) {
    comboBox.setEnabled(false);
  }
 else {
    comboBox.setEnabled(true);
  }
}"
68189,"/** 
 * INTERNAL:
 * @return
 */
private SDOTypeHelperDelegate getSDOTypeHelperDelegate(){
  ClassLoader contextClassLoader=getContextClassLoader();
  SDOTypeHelperDelegate sdoTypeHelperDelegate=(SDOTypeHelperDelegate)sdoTypeHelperDelegates.get(contextClassLoader);
  if (null == sdoTypeHelperDelegate) {
    sdoTypeHelperDelegate=new SDOTypeHelperDelegate(getHelperContext());
    sdoTypeHelperDelegates.put(contextClassLoader,sdoTypeHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoTypeHelperDelegate,contextClassLoader.toString()},false);
  }
  return sdoTypeHelperDelegate;
}","/** 
 * INTERNAL:
 */
private SDOTypeHelperDelegate getSDOTypeHelperDelegate(){
  Object key=getDelegateMapKey();
  SDOTypeHelperDelegate sdoTypeHelperDelegate=(SDOTypeHelperDelegate)sdoTypeHelperDelegates.get(key);
  if (null == sdoTypeHelperDelegate) {
    sdoTypeHelperDelegate=new SDOTypeHelperDelegate(getHelperContext());
    sdoTypeHelperDelegates.put(key,sdoTypeHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoTypeHelperDelegate,key},false);
  }
  return sdoTypeHelperDelegate;
}"
68190,"/** 
 * INTERNAL:
 * @return
 */
private SDOXMLHelperDelegate getSDOXMLHelperDelegate(){
  ClassLoader contextClassLoader=getContextClassLoader();
  SDOXMLHelperDelegate sdoXMLHelperDelegate=(SDOXMLHelperDelegate)sdoXMLHelperDelegates.get(contextClassLoader);
  if (null == sdoXMLHelperDelegate) {
    sdoXMLHelperDelegate=new SDOXMLHelperDelegate(getHelperContext());
    sdoXMLHelperDelegates.put(contextClassLoader,sdoXMLHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoXMLHelperDelegate,contextClassLoader.toString()},false);
  }
  return sdoXMLHelperDelegate;
}","/** 
 * INTERNAL:
 */
private SDOXMLHelperDelegate getSDOXMLHelperDelegate(){
  Object key=getDelegateMapKey();
  SDOXMLHelperDelegate sdoXMLHelperDelegate=(SDOXMLHelperDelegate)sdoXMLHelperDelegates.get(key);
  if (null == sdoXMLHelperDelegate) {
    sdoXMLHelperDelegate=new SDOXMLHelperDelegate(getHelperContext());
    sdoXMLHelperDelegates.put(key,sdoXMLHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoXMLHelperDelegate,key},false);
  }
  return sdoXMLHelperDelegate;
}"
68191,"/** 
 * INTERNAL:
 * @return
 */
private SDOXSDHelperDelegate getSDOXSDHelperDelegate(){
  ClassLoader contextClassLoader=getContextClassLoader();
  SDOXSDHelperDelegate sdoXSDHelperDelegate=(SDOXSDHelperDelegate)sdoXSDHelperDelegates.get(contextClassLoader);
  if (null == sdoXSDHelperDelegate) {
    sdoXSDHelperDelegate=new SDOXSDHelperDelegate(getHelperContext());
    sdoXSDHelperDelegates.put(contextClassLoader,sdoXSDHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoXSDHelperDelegate,contextClassLoader.toString()},false);
  }
  return sdoXSDHelperDelegate;
}","/** 
 * INTERNAL:
 */
private SDOXSDHelperDelegate getSDOXSDHelperDelegate(){
  Object key=getDelegateMapKey();
  SDOXSDHelperDelegate sdoXSDHelperDelegate=(SDOXSDHelperDelegate)sdoXSDHelperDelegates.get(key);
  if (null == sdoXSDHelperDelegate) {
    sdoXSDHelperDelegate=new SDOXSDHelperDelegate(getHelperContext());
    sdoXSDHelperDelegates.put(key,sdoXSDHelperDelegate);
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,""String_Node_Str"",new Object[]{getClass().getName(),sdoXSDHelperDelegate,key},false);
  }
  return sdoXSDHelperDelegate;
}"
68192,"public static javax.xml.bind.JAXBContext createContext(String contextPath,ClassLoader classLoader) throws JAXBException {
  try {
    XMLContext xmlContext=new XMLContext(contextPath,classLoader);
    return new org.eclipse.persistence.jaxb.JAXBContext(xmlContext);
  }
 catch (  ValidationException vex) {
    if (vex.getErrorCode() != 7095) {
      throw new JAXBException(vex);
    }
  }
catch (  Exception ex) {
    throw new JAXBException(ex);
  }
  ArrayList classes=new ArrayList();
  StringTokenizer tokenizer=new StringTokenizer(contextPath,""String_Node_Str"");
  while (tokenizer.hasMoreElements()) {
    String path=tokenizer.nextToken();
    try {
      Class objectFactory=classLoader.loadClass(path + ""String_Node_Str"");
      classes.add(objectFactory);
    }
 catch (    Exception ex) {
    }
    try {
      classLoader.loadClass(path + ""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    InputStream jaxbIndex=classLoader.getResourceAsStream(path.replace('.','/') + ""String_Node_Str"");
    if (jaxbIndex != null) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(jaxbIndex));
      try {
        String line=reader.readLine();
        while (line != null) {
          String className=path + ""String_Node_Str"" + line.trim();
          try {
            classes.add(classLoader.loadClass(className));
          }
 catch (          Exception ex) {
          }
          line=reader.readLine();
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  if (classes.size() == 0) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.noObjectFactoryOrJaxbIndexInPath(contextPath));
  }
  Class[] classArray=new Class[classes.size()];
  for (int i=0; i < classes.size(); i++) {
    classArray[i]=(Class)classes.get(i);
  }
  return createContext(classArray,null,classLoader);
}","public static javax.xml.bind.JAXBContext createContext(String contextPath,ClassLoader classLoader) throws JAXBException {
  try {
    XMLContext xmlContext=new XMLContext(contextPath,classLoader);
    return new org.eclipse.persistence.jaxb.JAXBContext(xmlContext);
  }
 catch (  ValidationException vex) {
    if (vex.getErrorCode() != ValidationException.NO_SESSIONS_XML_FOUND) {
      throw new JAXBException(vex);
    }
  }
catch (  Exception ex) {
    throw new JAXBException(ex);
  }
  ArrayList classes=new ArrayList();
  StringTokenizer tokenizer=new StringTokenizer(contextPath,""String_Node_Str"");
  while (tokenizer.hasMoreElements()) {
    String path=tokenizer.nextToken();
    try {
      Class objectFactory=classLoader.loadClass(path + ""String_Node_Str"");
      if (isJAXB2ObjectFactory(objectFactory)) {
        classes.add(objectFactory);
      }
    }
 catch (    Exception ex) {
    }
    try {
      classLoader.loadClass(path + ""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    InputStream jaxbIndex=classLoader.getResourceAsStream(path.replace('.','/') + ""String_Node_Str"");
    if (jaxbIndex != null) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(jaxbIndex));
      try {
        String line=reader.readLine();
        while (line != null) {
          String className=path + ""String_Node_Str"" + line.trim();
          try {
            classes.add(classLoader.loadClass(className));
          }
 catch (          Exception ex) {
          }
          line=reader.readLine();
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  if (classes.size() == 0) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.noObjectFactoryOrJaxbIndexInPath(contextPath));
  }
  Class[] classArray=new Class[classes.size()];
  for (int i=0; i < classes.size(); i++) {
    classArray[i]=(Class)classes.get(i);
  }
  return createContext(classArray,null,classLoader);
}"
68193,"/** 
 * Delegate to the node's editor.
 * @see javax.swing.CellEditor#isCellEditable(java.util.EventObject)
 */
public boolean isCellEditable(EventObject e){
  try {
    MouseEvent mouseEvent=(MouseEvent)e;
    JTree tree=(JTree)mouseEvent.getSource();
    TreePath path=tree.getPathForLocation(mouseEvent.getX(),mouseEvent.getY());
    EditingNode node=(EditingNode)path.getLastPathComponent();
    return node.getEditor().isCellEditable(e);
  }
 catch (  NullPointerException exception) {
    return false;
  }
}","/** 
 * Delegate to the node's editor.
 * @see javax.swing.CellEditor#isCellEditable(java.util.EventObject)
 */
public boolean isCellEditable(EventObject e){
  JTree tree=(JTree)e.getSource();
  TreePath path=null;
  if (e instanceof MouseEvent) {
    MouseEvent mouseEvent=(MouseEvent)e;
    path=tree.getPathForLocation(mouseEvent.getX(),mouseEvent.getY());
  }
 else {
    path=tree.getSelectionPath();
  }
  if (path == null) {
    return false;
  }
  EditingNode node=(EditingNode)path.getLastPathComponent();
  return node.getEditor().isCellEditable(e);
}"
68194,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  suite.addTest(new OrderedListJunitTest(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession();
      new InheritedTableManager().replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}"
68195,"public void setUp(){
  super.setUp();
  clearCache();
}","protected void setUp(){
  DatabaseSession session=JUnitTestCase.getServerSession();
  new InheritedTableManager().replaceTables(session);
}"
68196,"/** 
 * Delegate to the node's editor.
 * @see javax.swing.CellEditor#isCellEditable(java.util.EventObject)
 */
public boolean isCellEditable(EventObject e){
  MouseEvent mouseEvent=(MouseEvent)e;
  JTree tree=(JTree)mouseEvent.getSource();
  TreePath path=tree.getPathForLocation(mouseEvent.getX(),mouseEvent.getY());
  EditingNode node=(EditingNode)path.getLastPathComponent();
  return node.getEditor().isCellEditable(e);
}","/** 
 * Delegate to the node's editor.
 * @see javax.swing.CellEditor#isCellEditable(java.util.EventObject)
 */
public boolean isCellEditable(EventObject e){
  try {
    MouseEvent mouseEvent=(MouseEvent)e;
    JTree tree=(JTree)mouseEvent.getSource();
    TreePath path=tree.getPathForLocation(mouseEvent.getX(),mouseEvent.getY());
    EditingNode node=(EditingNode)path.getLastPathComponent();
    return node.getEditor().isCellEditable(e);
  }
 catch (  NullPointerException exception) {
    return false;
  }
}"
68197,"protected LoginAdapter buildLogin(){
  if (this.platformIsEis()) {
    return new EISLoginAdapter(this);
  }
  return new DatabaseLoginAdapter(this);
}","protected LoginAdapter buildLogin(){
  if (this.platformIsEis()) {
    return new EISLoginAdapter(this);
  }
 else   if (this.platformIsXml()) {
    return new XMLLoginAdapter(this);
  }
  return new DatabaseLoginAdapter(this);
}"
68198,"private void initializeXmlDs(){
  this.platformId=XML_PLATFORM_ID;
  this.platformName=""String_Node_Str"";
}","private void initializeXmlDs(){
  this.platformId=XML_PLATFORM_ID;
  this.platformName=""String_Node_Str"";
  this.platformClassName=XMLLoginAdapter.DEFAULT_PLATFORM_CLASS_NAME;
}"
68199,"/** 
 * Returns the datasource platform class from user's preference.
 */
protected String getDefaultPlatformClassName(){
  return null;
}","/** 
 * Returns the datasource platform class from user's preference.
 */
protected String getDefaultPlatformClassName(){
  return DEFAULT_PLATFORM_CLASS_NAME;
}"
68200,"protected void initializeTabs(){
  addTab(buildGeneralPropertiesPage(),0,buildGeneralPropertiesPageTitle());
  addTab(buildMultipleProjectsHolder(),1,buildMultipleProjectsPageBuilder(),buildMultipleProjectsPropertiesPageTitle());
  addTab(buildServerPlatformPropertiesPage(),2,buildServerPlatformPropertiesPageTitle());
}","protected void initializeTabs(){
  addTab(buildGeneralPropertiesPage(),0,buildGeneralPropertiesPageTitle());
  addTab(buildLoginPropertiesPage(),1,buildLoginPropertiesPageTitle());
  addTab(buildMultipleProjectsHolder(),2,buildMultipleProjectsPageBuilder(),buildMultipleProjectsPropertiesPageTitle());
  addTab(buildServerPlatformPropertiesPage(),3,buildServerPlatformPropertiesPageTitle());
}"
68201,"protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}","protected Hashtable buildFieldTypes(){
  Hashtable fieldTypeMapping=new Hashtable();
  fieldTypeMapping.put(Boolean.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Integer.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Long.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Float.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Double.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Short.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Byte.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigInteger.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.math.BigDecimal.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(Number.class,new FieldTypeDefinition(""String_Node_Str"",38));
  fieldTypeMapping.put(String.class,new FieldTypeDefinition(""String_Node_Str"",255));
  fieldTypeMapping.put(Character.class,new FieldTypeDefinition(""String_Node_Str"",1));
  fieldTypeMapping.put(Byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(Character[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(byte[].class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(char[].class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Blob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Clob.class,new FieldTypeDefinition(""String_Node_Str""));
  fieldTypeMapping.put(java.sql.Date.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Time.class,new FieldTypeDefinition(""String_Node_Str"",false));
  fieldTypeMapping.put(java.sql.Timestamp.class,new FieldTypeDefinition(""String_Node_Str"",false));
  return fieldTypeMapping;
}"
68202,"private Node selectSingleText(Node contextNode){
  NodeList childrenNodes=contextNode.getChildNodes();
  if (childrenNodes.getLength() == 0) {
    return null;
  }
  if (childrenNodes.getLength() == 1) {
    Node child=childrenNodes.item(0);
    if (child.getNodeType() == Node.TEXT_NODE || child.getNodeType() == Node.CDATA_SECTION_NODE) {
      return child;
    }
    return null;
  }
  String returnVal=null;
  for (int i=0; i < childrenNodes.getLength(); i++) {
    Node next=childrenNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE || next.getNodeType() == Node.CDATA_SECTION_NODE) {
      String val=next.getNodeValue();
      if (val != null) {
        if (returnVal == null) {
          returnVal=new String();
        }
        if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
          val=val.trim();
        }
        returnVal+=val;
      }
    }
  }
  if (returnVal != null) {
    return contextNode.getOwnerDocument().createTextNode(returnVal);
  }
  return null;
}","private Node selectSingleText(Node contextNode){
  NodeList childrenNodes=contextNode.getChildNodes();
  int numberOfNodes=childrenNodes.getLength();
  if (numberOfNodes == 0) {
    return null;
  }
  if (numberOfNodes == 1) {
    Node child=childrenNodes.item(0);
    if (child.getNodeType() == Node.TEXT_NODE || child.getNodeType() == Node.CDATA_SECTION_NODE) {
      return child;
    }
    return null;
  }
  String returnVal=null;
  for (int i=0; i < numberOfNodes; i++) {
    Node next=childrenNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE || next.getNodeType() == Node.CDATA_SECTION_NODE) {
      String val=next.getNodeValue();
      if (val != null) {
        if (returnVal == null) {
          returnVal=new String();
        }
        if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
          val=val.trim();
        }
        returnVal+=val;
      }
    }
  }
  if (returnVal != null) {
    return contextNode.getOwnerDocument().createTextNode(returnVal);
  }
  return null;
}"
68203,"public int getIndex(String uri,String localName){
  Attr item;
  for (int i=0; i < attrs.size(); i++) {
    item=attrs.get(i);
    try {
      if (item.getNamespaceURI().equals(uri) && item.getLocalName().equals(localName)) {
        return i;
      }
    }
 catch (    Exception x) {
    }
  }
  return -1;
}","public int getIndex(String uri,String localName){
  Attr item;
  int size=attrs.size();
  for (int i=0; i < size; i++) {
    item=attrs.get(i);
    try {
      if (item.getNamespaceURI().equals(uri) && item.getLocalName().equals(localName)) {
        return i;
      }
    }
 catch (    Exception x) {
    }
  }
  return -1;
}"
68204,"protected void handleChildNodes(NodeList children) throws SAXException {
  for (int i=0; i < children.getLength(); i++) {
    Node next=children.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      char[] value=((Text)next).getNodeValue().toCharArray();
      getContentHandler().characters(value,0,value.length);
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      char[] value=((Comment)next).getNodeValue().toCharArray();
      if (lexicalHandler != null) {
        lexicalHandler.comment(value,0,value.length);
      }
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      Element childElement=(Element)next;
      reportElementEvents(childElement);
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      if (lexicalHandler != null) {
        lexicalHandler.startCDATA();
      }
      char[] value=((CDATASection)next).getData().toCharArray();
      getContentHandler().characters(value,0,value.length);
      if (lexicalHandler != null) {
        lexicalHandler.endCDATA();
      }
    }
  }
}","protected void handleChildNodes(NodeList children) throws SAXException {
  Node nextChild=null;
  if (children.getLength() > 0) {
    nextChild=children.item(0);
  }
  while (nextChild != null) {
    if (nextChild.getNodeType() == Node.TEXT_NODE) {
      char[] value=((Text)nextChild).getNodeValue().toCharArray();
      getContentHandler().characters(value,0,value.length);
    }
 else     if (nextChild.getNodeType() == Node.COMMENT_NODE) {
      char[] value=((Comment)nextChild).getNodeValue().toCharArray();
      if (lexicalHandler != null) {
        lexicalHandler.comment(value,0,value.length);
      }
    }
 else     if (nextChild.getNodeType() == Node.ELEMENT_NODE) {
      Element childElement=(Element)nextChild;
      reportElementEvents(childElement);
    }
 else     if (nextChild.getNodeType() == Node.CDATA_SECTION_NODE) {
      if (lexicalHandler != null) {
        lexicalHandler.startCDATA();
      }
      char[] value=((CDATASection)nextChild).getData().toCharArray();
      getContentHandler().characters(value,0,value.length);
      if (lexicalHandler != null) {
        lexicalHandler.endCDATA();
      }
    }
    nextChild=nextChild.getNextSibling();
  }
}"
68205,"/** 
 * Process namespace declarations on parent elements if not the root. For each parent node from current to root push each onto a stack,  then pop each off, calling startPrefixMapping for each XMLNS  attribute.  Using a stack ensures that the parent nodes are  processed top down.
 * @param element
 */
protected void processParentNamespaces(Element element) throws SAXException {
  Node parent=element.getParentNode();
  if (parent != null && parent.getNodeType() == Node.DOCUMENT_NODE) {
    return;
  }
  Stack<Node> parentElements=new Stack();
  while (parent != null && parent.getNodeType() != Node.DOCUMENT_NODE) {
    parentElements.push(parent);
    parent=parent.getParentNode();
  }
  for (Iterator stackIt=parentElements.iterator(); stackIt.hasNext(); ) {
    NamedNodeMap attrs=parentElements.pop().getAttributes();
    if (attrs != null) {
      for (int i=0; i < attrs.getLength(); i++) {
        Attr next=(Attr)attrs.item(i);
        String attrPrefix=next.getPrefix();
        if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
          getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
        }
      }
    }
  }
}","/** 
 * Process namespace declarations on parent elements if not the root. For each parent node from current to root push each onto a stack,  then pop each off, calling startPrefixMapping for each XMLNS  attribute.  Using a stack ensures that the parent nodes are  processed top down.
 * @param element
 */
protected void processParentNamespaces(Element element) throws SAXException {
  Node parent=element.getParentNode();
  if (parent != null && parent.getNodeType() == Node.DOCUMENT_NODE) {
    return;
  }
  Stack<Node> parentElements=new Stack();
  while (parent != null && parent.getNodeType() != Node.DOCUMENT_NODE) {
    parentElements.push(parent);
    parent=parent.getParentNode();
  }
  for (Iterator stackIt=parentElements.iterator(); stackIt.hasNext(); ) {
    NamedNodeMap attrs=parentElements.pop().getAttributes();
    if (attrs != null) {
      int length=attrs.getLength();
      for (int i=0; i < length; i++) {
        Attr next=(Attr)attrs.item(i);
        String attrPrefix=next.getPrefix();
        if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
          getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
        }
      }
    }
  }
}"
68206,"public String getValue(String uri,String localName){
  Attr item;
  for (int i=0; i < attrs.size(); i++) {
    item=attrs.get(i);
    if (item != null) {
      String itemNS=item.getNamespaceURI();
      if (item.getNamespaceURI() == null) {
        itemNS=""String_Node_Str"";
      }
      if ((itemNS.equals(uri)) && (item.getLocalName() != null && item.getLocalName().equals(localName))) {
        return item.getValue();
      }
    }
  }
  return null;
}","public String getValue(String uri,String localName){
  Attr item;
  int size=attrs.size();
  for (int i=0; i < size; i++) {
    item=attrs.get(i);
    if (item != null) {
      String itemNS=item.getNamespaceURI();
      if (item.getNamespaceURI() == null) {
        itemNS=""String_Node_Str"";
      }
      if ((itemNS.equals(uri)) && (item.getLocalName() != null && item.getLocalName().equals(localName))) {
        return item.getValue();
      }
    }
  }
  return null;
}"
68207,"protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(""String_Node_Str"")) {
        getContentHandler().startPrefixMapping(""String_Node_Str"",next.getValue());
      }
    }
    attributes.addAttribute(next);
  }
  return attributes;
}","protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  int length=attrs.getLength();
  for (int i=0; i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(""String_Node_Str"")) {
        getContentHandler().startPrefixMapping(""String_Node_Str"",next.getValue());
      }
    }
    attributes.addAttribute(next);
  }
  return attributes;
}"
68208,"protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null) {
        getContentHandler().endPrefixMapping(""String_Node_Str"");
      }
    }
  }
}","protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  int numOfAtts=attrs.getLength();
  for (int i=0; i < numOfAtts; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null) {
        getContentHandler().endPrefixMapping(""String_Node_Str"");
      }
    }
  }
}"
68209,"public NodeListElementEnumerator(NodeList list){
  this.index=0;
  this.list=list;
  while ((index < list.getLength()) && (list.item(index).getNodeType() != Node.ELEMENT_NODE)) {
    ++this.index;
  }
}","public NodeListElementEnumerator(NodeList list){
  this.index=0;
  this.list=list;
  int length=list.getLength();
  while ((index < length) && (list.item(index).getNodeType() != Node.ELEMENT_NODE)) {
    ++this.index;
  }
}"
68210,"public Node nextNode(){
  Node result=list.item(index);
  ++index;
  while ((index < list.getLength()) && (list.item(index).getNodeType() != Node.ELEMENT_NODE)) {
    ++this.index;
  }
  return result;
}","public Node nextNode(){
  Node result=list.item(index);
  ++index;
  int length=list.getLength();
  while ((index < length) && (list.item(index).getNodeType() != Node.ELEMENT_NODE)) {
    ++this.index;
  }
  return result;
}"
68211,"private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query){
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)getContainerPolicy();
  Object container=cp.containerInstance();
  org.w3c.dom.Element root=(Element)record.getDOM();
  NamedNodeMap attributes=root.getAttributes();
  Attr next;
  String localName;
  for (int i=0; i < attributes.getLength(); i++) {
    next=(Attr)attributes.item(i);
    localName=next.getLocalName();
    if (null == localName) {
      localName=next.getName();
    }
    QName key=new QName(next.getNamespaceURI(),localName);
    String value=next.getValue();
    cp.addInto(key,value,container,session);
  }
  return container;
}","private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query){
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)getContainerPolicy();
  Object container=cp.containerInstance();
  org.w3c.dom.Element root=(Element)record.getDOM();
  NamedNodeMap attributes=root.getAttributes();
  Attr next;
  String localName;
  int numberOfAtts=attributes.getLength();
  for (int i=0; i < numberOfAtts; i++) {
    next=(Attr)attributes.item(i);
    localName=next.getLocalName();
    if (null == localName) {
      localName=next.getName();
    }
    QName key=new QName(next.getNamespaceURI(),localName);
    String value=next.getValue();
    cp.addInto(key,value,container,session);
  }
  return container;
}"
68212,"private ArrayList getUnmappedChildNodes(NodeList nodes){
  ArrayList unmappedNodes=new ArrayList();
  for (int i=0; i < nodes.getLength(); i++) {
    Node next=nodes.item(i);
    if (isUnmappedContent(next)) {
      unmappedNodes.add(next);
    }
  }
  return unmappedNodes;
}","private ArrayList getUnmappedChildNodes(NodeList nodes){
  ArrayList unmappedNodes=new ArrayList();
  int length=nodes.getLength();
  for (int i=0; i < length; i++) {
    Node next=nodes.item(i);
    if (isUnmappedContent(next)) {
      unmappedNodes.add(next);
    }
  }
  return unmappedNodes;
}"
68213,"private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList children=root.getChildNodes();
  ContainerPolicy cp=getContainerPolicy();
  Object container=cp.containerInstance();
  int length=children.getLength();
  for (int i=0; i < length; i++) {
    Object objectValue=null;
    org.w3c.dom.Node next=children.item(i);
    if (isUnmappedContent(next)) {
      if ((next.getNodeType() == Node.TEXT_NODE) && this.isMixedContent()) {
        if (next.getNodeValue().trim().length() > 0) {
          objectValue=next.getNodeValue();
          if (getConverter() != null) {
            objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
          }
          cp.addInto(objectValue,container,session);
        }
      }
 else       if (next.getNodeType() == Node.ELEMENT_NODE) {
        ClassDescriptor referenceDescriptor=null;
        DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
        if (!useXMLRoot) {
          referenceDescriptor=getDescriptor(nestedRecord,session,null);
          if ((referenceDescriptor != null) && (keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            objectValue=builder.buildObject(query,nestedRecord,joinManager);
            if (getConverter() != null) {
              objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
            }
            cp.addInto(objectValue,container,session);
          }
 else {
            if ((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
              XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
              objectValue=next;
              if (getConverter() != null) {
                objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
              }
              cp.addInto(objectValue,container,session);
            }
          }
        }
 else {
          String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          QName schemaTypeQName=null;
          XPathFragment frag=new XPathFragment();
          if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
            frag.setXPath(schemaType);
            if (frag.hasNamespace()) {
              String prefix=frag.getPrefix();
              XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
              String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
              frag.setNamespaceURI(url);
              schemaTypeQName=new QName(url,frag.getLocalName());
            }
            XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
            referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
          if (referenceDescriptor == null) {
            try {
              QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
              referenceDescriptor=getDescriptor(nestedRecord,session,qname);
            }
 catch (            XMLMarshalException e) {
              referenceDescriptor=null;
            }
            XMLDescriptor xmlReferenceDescriptor=(XMLDescriptor)referenceDescriptor;
            if (referenceDescriptor != null && xmlReferenceDescriptor.isWrapper()) {
              referenceDescriptor=null;
            }
          }
          if ((referenceDescriptor != null) && (getKeepAsElementPolicy() != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            objectValue=builder.buildObject(query,nestedRecord,joinManager);
            Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
            if (getConverter() != null) {
              updated=getConverter().convertDataValueToObjectValue(updated,session,record.getUnmarshaller());
            }
            cp.addInto(updated,container,session);
          }
 else           if ((referenceDescriptor == null) && (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
            XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
            objectValue=next;
            if (getConverter() != null) {
              objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
            }
            cp.addInto(objectValue,container,session);
          }
 else {
            Object value=null;
            Node textchild=((Element)next).getFirstChild();
            if ((textchild != null) && (textchild.getNodeType() == Node.TEXT_NODE)) {
              value=((Text)textchild).getNodeValue();
            }
            if ((value != null) && !value.equals(""String_Node_Str"")) {
              if (schemaTypeQName != null) {
                Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaTypeQName);
                if (theClass != null) {
                  value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,schemaTypeQName);
                }
              }
              if (getConverter() != null) {
                value=getConverter().convertDataValueToObjectValue(value,session,record.getUnmarshaller());
              }
              XMLRoot rootValue=new XMLRoot();
              rootValue.setLocalName(next.getLocalName());
              rootValue.setSchemaType(schemaTypeQName);
              rootValue.setNamespaceURI(next.getNamespaceURI());
              rootValue.setObject(value);
              cp.addInto(rootValue,container,session);
            }
          }
        }
      }
    }
  }
  return container;
}","private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList children=root.getChildNodes();
  ContainerPolicy cp=getContainerPolicy();
  Object container=cp.containerInstance();
  int length=children.getLength();
  Node next=null;
  if (length > 0) {
    next=record.getDOM().getFirstChild();
  }
  while (next != null) {
    Object objectValue=null;
    if (isUnmappedContent(next)) {
      if ((next.getNodeType() == Node.TEXT_NODE) && this.isMixedContent()) {
        if (next.getNodeValue().trim().length() > 0) {
          objectValue=next.getNodeValue();
          if (getConverter() != null) {
            objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
          }
          cp.addInto(objectValue,container,session);
        }
      }
 else       if (next.getNodeType() == Node.ELEMENT_NODE) {
        ClassDescriptor referenceDescriptor=null;
        DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
        if (!useXMLRoot) {
          referenceDescriptor=getDescriptor(nestedRecord,session,null);
          if ((referenceDescriptor != null) && (keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            objectValue=builder.buildObject(query,nestedRecord,joinManager);
            if (getConverter() != null) {
              objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
            }
            cp.addInto(objectValue,container,session);
          }
 else {
            if ((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
              XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
              objectValue=next;
              if (getConverter() != null) {
                objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
              }
              cp.addInto(objectValue,container,session);
            }
          }
        }
 else {
          String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          QName schemaTypeQName=null;
          XPathFragment frag=new XPathFragment();
          if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
            frag.setXPath(schemaType);
            if (frag.hasNamespace()) {
              String prefix=frag.getPrefix();
              XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
              String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
              frag.setNamespaceURI(url);
              schemaTypeQName=new QName(url,frag.getLocalName());
            }
            XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
            referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
          if (referenceDescriptor == null) {
            try {
              QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
              referenceDescriptor=getDescriptor(nestedRecord,session,qname);
            }
 catch (            XMLMarshalException e) {
              referenceDescriptor=null;
            }
            XMLDescriptor xmlReferenceDescriptor=(XMLDescriptor)referenceDescriptor;
            if (referenceDescriptor != null && xmlReferenceDescriptor.isWrapper()) {
              referenceDescriptor=null;
            }
          }
          if ((referenceDescriptor != null) && (getKeepAsElementPolicy() != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            objectValue=builder.buildObject(query,nestedRecord,joinManager);
            Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
            if (getConverter() != null) {
              updated=getConverter().convertDataValueToObjectValue(updated,session,record.getUnmarshaller());
            }
            cp.addInto(updated,container,session);
          }
 else           if ((referenceDescriptor == null) && (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
            XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
            objectValue=next;
            if (getConverter() != null) {
              objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
            }
            cp.addInto(objectValue,container,session);
          }
 else {
            Object value=null;
            Node textchild=((Element)next).getFirstChild();
            if ((textchild != null) && (textchild.getNodeType() == Node.TEXT_NODE)) {
              value=((Text)textchild).getNodeValue();
            }
            if ((value != null) && !value.equals(""String_Node_Str"")) {
              if (schemaTypeQName != null) {
                Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaTypeQName);
                if (theClass != null) {
                  value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,schemaTypeQName);
                }
              }
              if (getConverter() != null) {
                value=getConverter().convertDataValueToObjectValue(value,session,record.getUnmarshaller());
              }
              XMLRoot rootValue=new XMLRoot();
              rootValue.setLocalName(next.getLocalName());
              rootValue.setSchemaType(schemaTypeQName);
              rootValue.setNamespaceURI(next.getNamespaceURI());
              rootValue.setObject(value);
              cp.addInto(rootValue,container,session);
            }
          }
        }
      }
    }
    next=next.getNextSibling();
  }
  return container;
}"
68214,"private ArrayList getUnmappedChildNodes(NodeList nodes){
  ArrayList unmappedNodes=new ArrayList();
  for (int i=0; i < nodes.getLength(); i++) {
    Node next=nodes.item(i);
    if (isUnmappedContent(next)) {
      unmappedNodes.add(next);
    }
  }
  return unmappedNodes;
}","private ArrayList getUnmappedChildNodes(NodeList nodes){
  ArrayList unmappedNodes=new ArrayList();
  int length=nodes.getLength();
  for (int i=0; i < length; i++) {
    Node next=nodes.item(i);
    if (isUnmappedContent(next)) {
      unmappedNodes.add(next);
    }
  }
  return unmappedNodes;
}"
68215,"public Node getNodeToReplace(Node parent){
  NodeList children=parent.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    Node next=children.item(i);
    if ((next.getNodeType() == Node.ELEMENT_NODE) || (next.getNodeType() == Node.TEXT_NODE) || (next.getNodeType() == Node.CDATA_SECTION_NODE)) {
      if (isUnmappedContent(next)) {
        return next;
      }
    }
  }
  return null;
}","public Node getNodeToReplace(Node parent){
  Node next=parent.getFirstChild();
  while (next != null) {
    if ((next.getNodeType() == Node.ELEMENT_NODE) || (next.getNodeType() == Node.TEXT_NODE) || (next.getNodeType() == Node.CDATA_SECTION_NODE)) {
      if (isUnmappedContent(next)) {
        return next;
      }
    }
    next=next.getNextSibling();
  }
  return null;
}"
68216,"/** 
 * PUBLIC: Return the collection of element values from the DOM. todo: needs to do gets with the keys to have correct values, need to check attributes / innerclass
 */
public Collection values(){
  Vector values=new Vector(getDOM().getChildNodes().getLength());
  for (int index=0; index < getDOM().getChildNodes().getLength(); index++) {
    values.add(getDOM().getChildNodes().item(index));
  }
  return values;
}","/** 
 * PUBLIC: Return the collection of element values from the DOM. todo: needs to do gets with the keys to have correct values, need to check attributes / innerclass
 */
public Collection values(){
  int length=getDOM().getChildNodes().getLength();
  Vector values=new Vector(length);
  for (int index=0; index < length; index++) {
    values.add(getDOM().getChildNodes().item(index));
  }
  return values;
}"
68217,"/** 
 * PUBLIC: Return the set of element names from the DOM. todo: need to check attributes, should be prefix or nodename? / innerclass
 */
public Set keySet(){
  HashSet keys=new HashSet(getDOM().getChildNodes().getLength());
  for (int index=0; index < getDOM().getChildNodes().getLength(); index++) {
    keys.add(getDOM().getChildNodes().item(index).getNodeName());
  }
  return keys;
}","/** 
 * PUBLIC: Return the set of element names from the DOM. todo: need to check attributes, should be prefix or nodename? / innerclass
 */
public Set keySet(){
  int length=getDOM().getChildNodes().getLength();
  HashSet keys=new HashSet(length);
  for (int index=0; index < length; index++) {
    keys.add(getDOM().getChildNodes().item(index).getNodeName());
  }
  return keys;
}"
68218,"/** 
 * INTERNAL: This should not be used, but added some support for it as is called from some places such as sdk call used in the descriptor to define operation not supported, may also be called from TopLink in some places.
 */
public Vector getValues(){
  Vector values=new Vector(getDOM().getChildNodes().getLength());
  for (int index=0; index < getDOM().getChildNodes().getLength(); index++) {
    values.add(getDOM().getChildNodes().item(index));
  }
  return values;
}","/** 
 * INTERNAL: This should not be used, but added some support for it as is called from some places such as sdk call used in the descriptor to define operation not supported, may also be called from TopLink in some places.
 */
public Vector getValues(){
  int length=getDOM().getChildNodes().getLength();
  Node nextNode=null;
  if (length > 0) {
    nextNode=getDOM().getFirstChild();
  }
  Vector values=new Vector(length);
  while (nextNode != null) {
    values.add(nextNode);
    nextNode=nextNode.getNextSibling();
  }
  return values;
}"
68219,"/** 
 * INTERNAL: This should not be used, but added some support for it as is called from some places such as sdk call used in the descriptor to define operation not supported, may also be called from toplin in some places.
 */
public Vector getFields(){
  Vector fields=new Vector(getDOM().getChildNodes().getLength());
  for (int index=0; index < getDOM().getChildNodes().getLength(); index++) {
    fields.add(new DatabaseField(getDOM().getChildNodes().item(index).getNodeName()));
  }
  return fields;
}","/** 
 * INTERNAL: This should not be used, but added some support for it as is called from some places such as sdk call used in the descriptor to define operation not supported, may also be called from toplin in some places.
 */
public Vector getFields(){
  int length=getDOM().getChildNodes().getLength();
  Node nextNode=null;
  if (length > 0) {
    nextNode=getDOM().getChildNodes().item(0);
  }
  Vector fields=new Vector(length);
  while (nextNode != null) {
    fields.add(new DatabaseField(nextNode.getNodeName()));
    nextNode=nextNode.getNextSibling();
  }
  return fields;
}"
68220,"private void namespaceQualifyFragment(Element next,List<String> declaredPrefixes){
  String elementUri=next.getNamespaceURI();
  String elementPrefix=next.getPrefix();
  if (elementPrefix != null) {
    Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix);
    if ((null == namespaceDeclaration) && !declaredPrefixes.contains(elementPrefix)) {
      (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix,elementUri);
      declaredPrefixes.add(elementPrefix);
    }
  }
  NamedNodeMap attributes=next.getAttributes();
  int attributesSize=attributes.getLength();
  for (int i=0; i < attributesSize; i++) {
    Attr nextAttribute=(Attr)attributes.item(i);
    String attributePrefix=nextAttribute.getPrefix();
    if (attributePrefix != null) {
      if (XMLConstants.XMLNS_URL.equals(nextAttribute.getNamespaceURI())) {
        declaredPrefixes.add(nextAttribute.getLocalName());
      }
 else {
        Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix);
        if ((null == namespaceDeclaration) && !declaredPrefixes.contains(attributePrefix)) {
          String attributeUri=nextAttribute.getNamespaceURI();
          (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix,attributeUri);
          declaredPrefixes.add(attributePrefix);
        }
        if (XMLConstants.SCHEMA_INSTANCE_URL.equals(nextAttribute.getNamespaceURI()) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(nextAttribute.getLocalName())) {
          String value=nextAttribute.getValue();
          int colonIndex=value.indexOf(':');
          if (colonIndex > -1) {
            String prefix=value.substring(0,colonIndex);
            namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + prefix);
            if ((null == namespaceDeclaration) && !declaredPrefixes.contains(prefix)) {
              String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(next,prefix);
              (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,uri);
              declaredPrefixes.add(prefix);
            }
          }
        }
      }
    }
  }
  NodeList children=next.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    Node nextNode=children.item(i);
    if (nextNode.getNodeType() == Node.ELEMENT_NODE) {
      Element child=(Element)nextNode;
      namespaceQualifyFragment(child,declaredPrefixes);
    }
  }
}","private void namespaceQualifyFragment(Element next,List<String> declaredPrefixes){
  String elementUri=next.getNamespaceURI();
  String elementPrefix=next.getPrefix();
  if (elementPrefix != null) {
    Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix);
    if ((null == namespaceDeclaration) && !declaredPrefixes.contains(elementPrefix)) {
      (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix,elementUri);
      declaredPrefixes.add(elementPrefix);
    }
  }
  NamedNodeMap attributes=next.getAttributes();
  int attributesSize=attributes.getLength();
  for (int i=0; i < attributesSize; i++) {
    Attr nextAttribute=(Attr)attributes.item(i);
    String attributePrefix=nextAttribute.getPrefix();
    if (attributePrefix != null) {
      if (XMLConstants.XMLNS_URL.equals(nextAttribute.getNamespaceURI())) {
        declaredPrefixes.add(nextAttribute.getLocalName());
      }
 else {
        Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix);
        if ((null == namespaceDeclaration) && !declaredPrefixes.contains(attributePrefix)) {
          String attributeUri=nextAttribute.getNamespaceURI();
          (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix,attributeUri);
          declaredPrefixes.add(attributePrefix);
        }
        if (XMLConstants.SCHEMA_INSTANCE_URL.equals(nextAttribute.getNamespaceURI()) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(nextAttribute.getLocalName())) {
          String value=nextAttribute.getValue();
          int colonIndex=value.indexOf(':');
          if (colonIndex > -1) {
            String prefix=value.substring(0,colonIndex);
            namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + prefix);
            if ((null == namespaceDeclaration) && !declaredPrefixes.contains(prefix)) {
              String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(next,prefix);
              (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,uri);
              declaredPrefixes.add(prefix);
            }
          }
        }
      }
    }
  }
  NodeList children=next.getChildNodes();
  int numberOfNodes=children.getLength();
  for (int i=0; i < numberOfNodes; i++) {
    Node nextNode=children.item(i);
    if (nextNode.getNodeType() == Node.ELEMENT_NODE) {
      Element child=(Element)nextNode;
      namespaceQualifyFragment(child,declaredPrefixes);
    }
  }
}"
68221,"private void namespaceQualifyFragment(Element next,List<String> declaredPrefixes){
  String elementUri=next.getNamespaceURI();
  String elementPrefix=next.getPrefix();
  if (elementPrefix != null) {
    Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix);
    if ((null == namespaceDeclaration) && !declaredPrefixes.contains(elementPrefix)) {
      (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix,elementUri);
      declaredPrefixes.add(elementPrefix);
    }
  }
  NamedNodeMap attributes=next.getAttributes();
  int attributesSize=attributes.getLength();
  for (int i=0; i < attributesSize; i++) {
    Attr nextAttribute=(Attr)attributes.item(i);
    String attributePrefix=nextAttribute.getPrefix();
    if (attributePrefix != null) {
      if (XMLConstants.XMLNS_URL.equals(nextAttribute.getNamespaceURI())) {
        declaredPrefixes.add(nextAttribute.getLocalName());
      }
 else {
        Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix);
        if ((null == namespaceDeclaration) && !declaredPrefixes.contains(attributePrefix)) {
          String attributeUri=nextAttribute.getNamespaceURI();
          (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix,attributeUri);
          declaredPrefixes.add(attributePrefix);
        }
        if (XMLConstants.SCHEMA_INSTANCE_URL.equals(nextAttribute.getNamespaceURI()) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(nextAttribute.getLocalName())) {
          String value=nextAttribute.getValue();
          int colonIndex=value.indexOf(':');
          if (colonIndex > -1) {
            String prefix=value.substring(0,colonIndex);
            namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + prefix);
            if ((null == namespaceDeclaration) && !declaredPrefixes.contains(prefix)) {
              String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(next,prefix);
              (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,uri);
              declaredPrefixes.add(prefix);
            }
          }
        }
      }
    }
  }
  NodeList children=next.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    Node nextNode=children.item(i);
    if (nextNode.getNodeType() == Node.ELEMENT_NODE) {
      Element child=(Element)nextNode;
      namespaceQualifyFragment(child,declaredPrefixes);
    }
  }
}","private void namespaceQualifyFragment(Element next,List<String> declaredPrefixes){
  String elementUri=next.getNamespaceURI();
  String elementPrefix=next.getPrefix();
  if (elementPrefix != null) {
    Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix);
    if ((null == namespaceDeclaration) && !declaredPrefixes.contains(elementPrefix)) {
      (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + elementPrefix,elementUri);
      declaredPrefixes.add(elementPrefix);
    }
  }
  NamedNodeMap attributes=next.getAttributes();
  int attributesSize=attributes.getLength();
  for (int i=0; i < attributesSize; i++) {
    Attr nextAttribute=(Attr)attributes.item(i);
    String attributePrefix=nextAttribute.getPrefix();
    if (attributePrefix != null) {
      if (XMLConstants.XMLNS_URL.equals(nextAttribute.getNamespaceURI())) {
        declaredPrefixes.add(nextAttribute.getLocalName());
      }
 else {
        Attr namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix);
        if ((null == namespaceDeclaration) && !declaredPrefixes.contains(attributePrefix)) {
          String attributeUri=nextAttribute.getNamespaceURI();
          (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + attributePrefix,attributeUri);
          declaredPrefixes.add(attributePrefix);
        }
        if (XMLConstants.SCHEMA_INSTANCE_URL.equals(nextAttribute.getNamespaceURI()) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(nextAttribute.getLocalName())) {
          String value=nextAttribute.getValue();
          int colonIndex=value.indexOf(':');
          if (colonIndex > -1) {
            String prefix=value.substring(0,colonIndex);
            namespaceDeclaration=next.getAttributeNode(XMLConstants.XMLNS + ""String_Node_Str"" + prefix);
            if ((null == namespaceDeclaration) && !declaredPrefixes.contains(prefix)) {
              String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(next,prefix);
              (next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,uri);
              declaredPrefixes.add(prefix);
            }
          }
        }
      }
    }
  }
  NodeList children=next.getChildNodes();
  int numberOfNodes=children.getLength();
  for (int i=0; i < numberOfNodes; i++) {
    Node nextNode=children.item(i);
    if (nextNode.getNodeType() == Node.ELEMENT_NODE) {
      Element child=(Element)nextNode;
      namespaceQualifyFragment(child,declaredPrefixes);
    }
  }
}"
68222,"/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(nextXPath));
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(refValue));
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
          unsetValueList=(List)xmlConversionManager.convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          NodeList children=nextNode.getChildNodes();
          for (int p=0; p < children.getLength(); p++) {
            Node n=children.item(p);
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            SDOProperty nextProp=(SDOProperty)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    newList.add(targetDataObject.getDataObject(convertXPathToSDOPath(sdoRef)));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
      Iterator created=nextCS.getCreated().iterator();
      while (created.hasNext()) {
        SDODataObject next=(SDODataObject)created.next();
        Property containmentProperty=next.getContainmentProperty();
        if (containmentProperty != null && containmentProperty.isMany()) {
          SDODataObject container=(SDODataObject)next.getContainer();
          ListWrapper list=(ListWrapper)container.get(containmentProperty);
          if (!(nextCS.getOriginalElements().containsKey(list))) {
            nextCS.getOriginalElements().put(list,new ArrayList());
          }
        }
      }
    }
    initialize();
  }
}","/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(nextXPath));
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(refValue));
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
          unsetValueList=(List)xmlConversionManager.convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          Node n=nextNode.getFirstChild();
          while (n != null) {
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
            n=n.getNextSibling();
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            SDOProperty nextProp=(SDOProperty)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    newList.add(targetDataObject.getDataObject(convertXPathToSDOPath(sdoRef)));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
      Iterator created=nextCS.getCreated().iterator();
      while (created.hasNext()) {
        SDODataObject next=(SDODataObject)created.next();
        Property containmentProperty=next.getContainmentProperty();
        if (containmentProperty != null && containmentProperty.isMany()) {
          SDODataObject container=(SDODataObject)next.getContainer();
          ListWrapper list=(ListWrapper)container.get(containmentProperty);
          if (!(nextCS.getOriginalElements().containsKey(list))) {
            nextCS.getOriginalElements().put(list,new ArrayList());
          }
        }
      }
    }
    initialize();
  }
}"
68223,"/** 
 * Add a variable of type ValueHolderInterface to the class.  When this method has been run, the class will contain a variable declaration similar to the following: private ValueHolderInterface _persistence_variableName_vh;
 */
public void addValueHolder(AttributeDetails attributeDetails){
  String attribute=attributeDetails.getAttributeName();
  RuntimeVisibleAnnotations annotations=null;
  if (attributeDetails.getGetterMethodName() == null || attributeDetails.getGetterMethodName().equals(""String_Node_Str"")) {
    annotations=getTransientAnnotation();
  }
  cv.visitField(ACC_PROTECTED,""String_Node_Str"" + attribute + ""String_Node_Str"",VHI_SIGNATURE,null,annotations);
}","/** 
 * Add a variable of type ValueHolderInterface to the class.  When this method has been run, the class will contain a variable declaration similar to the following: private ValueHolderInterface _persistence_variableName_vh;
 */
public void addValueHolder(AttributeDetails attributeDetails){
  String attribute=attributeDetails.getAttributeName();
  RuntimeVisibleAnnotations annotations=null;
  if (attributeDetails.getGetterMethodName() == null || attributeDetails.getGetterMethodName().equals(""String_Node_Str"") || attributeDetails.weaveTransientFieldValueHolders()) {
    annotations=getTransientAnnotation();
  }
  cv.visitField(ACC_PROTECTED,""String_Node_Str"" + attribute + ""String_Node_Str"",VHI_SIGNATURE,null,annotations);
}"
68224,"/** 
 * INTERNAL: Store a set of attribute mappings on the given ClassDetails that correspont to the given class. Return the list of mappings that is not specifically found on the given class.  These attributes will  be found on MappedSuperclasses.
 */
protected List storeAttributeMappings(Class clz,ClassDetails classDetails,List mappings,boolean weaveValueHolders){
  List unMappedAttributes=new ArrayList();
  Map attributesMap=new HashMap();
  Map settersMap=new HashMap();
  Map gettersMap=new HashMap();
  List lazyMappings=new ArrayList();
  for (Iterator iterator=mappings.iterator(); iterator.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)iterator.next();
    String attribute=mapping.getAttributeName();
    AttributeDetails attributeDetails=new AttributeDetails(attribute,mapping);
    Class typeClass=getAttributeTypeFromClass(clz,attribute,mapping,false);
    if (typeClass == null) {
      attributeDetails.setAttributeOnSuperClass(true);
      unMappedAttributes.add(mapping);
    }
    if (mapping.getGetMethodName() != null) {
      gettersMap.put(mapping.getGetMethodName(),attributeDetails);
      attributeDetails.setGetterMethodName(mapping.getGetMethodName());
      if (mapping.getSetMethodName() != null) {
        settersMap.put(mapping.getSetMethodName(),attributeDetails);
        attributeDetails.setSetterMethodName(mapping.getSetMethodName());
      }
      if (this.weaveInternal) {
        attributeDetails.setHasField(hasFieldInClass(clz,attribute));
      }
    }
 else {
      attributeDetails.setHasField(true);
    }
    if (attributeDetails.hasField()) {
      attributeDetails.setDeclaringType(Type.getType(getAttributeDeclaringClass(clz,attribute)));
    }
    if (mapping.isForeignReferenceMapping()) {
      ForeignReferenceMapping foreignReferenceMapping=(ForeignReferenceMapping)mapping;
      attributeDetails.setReferenceClassName(foreignReferenceMapping.getReferenceClassName());
      Class referenceClass=null;
      if (attributeDetails.getReferenceClassName() != null) {
        try {
          if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
            try {
              referenceClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(attributeDetails.getReferenceClassName(),true,classLoader));
            }
 catch (            PrivilegedActionException exception) {
            }
          }
 else {
            referenceClass=PrivilegedAccessHelper.getClassForName(attributeDetails.getReferenceClassName(),true,classLoader);
          }
        }
 catch (        ClassNotFoundException exception) {
        }
        attributeDetails.setReferenceClassType(Type.getType(referenceClass));
      }
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(clz,attribute,foreignReferenceMapping,true);
      }
      if (weaveValueHolders && (foreignReferenceMapping.getIndirectionPolicy() instanceof BasicIndirectionPolicy) && (typeClass != null)&& (!ValueHolderInterface.class.isAssignableFrom(typeClass))) {
        lazyMappings.add(foreignReferenceMapping);
        attributeDetails.weaveVH(weaveValueHolders,foreignReferenceMapping);
      }
    }
    if (attributeDetails.getReferenceClassType() == null) {
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(clz,attribute,mapping,true);
      }
    }
    if (typeClass != null) {
      attributeDetails.setReferenceClassName(typeClass.getName());
      attributeDetails.setReferenceClassType(Type.getType(typeClass));
    }
    attributesMap.put(attribute,attributeDetails);
  }
  classDetails.setAttributesMap(attributesMap);
  classDetails.setGetterMethodToAttributeDetails(gettersMap);
  classDetails.setSetterMethodToAttributeDetails(settersMap);
  classDetails.setLazyMappings(lazyMappings);
  return unMappedAttributes;
}","/** 
 * INTERNAL: Store a set of attribute mappings on the given ClassDetails that correspont to the given class. Return the list of mappings that is not specifically found on the given class.  These attributes will  be found on MappedSuperclasses.
 */
protected List storeAttributeMappings(Class clz,ClassDetails classDetails,List mappings,boolean weaveValueHolders){
  List unMappedAttributes=new ArrayList();
  Map attributesMap=new HashMap();
  Map settersMap=new HashMap();
  Map gettersMap=new HashMap();
  List lazyMappings=new ArrayList();
  for (Iterator iterator=mappings.iterator(); iterator.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)iterator.next();
    String attribute=mapping.getAttributeName();
    AttributeDetails attributeDetails=new AttributeDetails(attribute,mapping);
    Class typeClass=getAttributeTypeFromClass(clz,attribute,mapping,false);
    if (typeClass == null) {
      attributeDetails.setAttributeOnSuperClass(true);
      unMappedAttributes.add(mapping);
    }
    if (mapping.getGetMethodName() != null) {
      gettersMap.put(mapping.getGetMethodName(),attributeDetails);
      attributeDetails.setGetterMethodName(mapping.getGetMethodName());
      if (mapping.getSetMethodName() != null) {
        settersMap.put(mapping.getSetMethodName(),attributeDetails);
        attributeDetails.setSetterMethodName(mapping.getSetMethodName());
      }
      if (mapping.isForeignReferenceMapping() && ((ForeignReferenceMapping)mapping).requiresTransientWeavedFields()) {
        attributeDetails.setWeaveTransientFieldValueHolders();
      }
      if (this.weaveInternal) {
        attributeDetails.setHasField(hasFieldInClass(clz,attribute));
      }
    }
 else {
      attributeDetails.setHasField(true);
    }
    if (attributeDetails.hasField()) {
      attributeDetails.setDeclaringType(Type.getType(getAttributeDeclaringClass(clz,attribute)));
    }
    if (mapping.isForeignReferenceMapping()) {
      ForeignReferenceMapping foreignReferenceMapping=(ForeignReferenceMapping)mapping;
      attributeDetails.setReferenceClassName(foreignReferenceMapping.getReferenceClassName());
      Class referenceClass=null;
      if (attributeDetails.getReferenceClassName() != null) {
        try {
          if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
            try {
              referenceClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(attributeDetails.getReferenceClassName(),true,classLoader));
            }
 catch (            PrivilegedActionException exception) {
            }
          }
 else {
            referenceClass=PrivilegedAccessHelper.getClassForName(attributeDetails.getReferenceClassName(),true,classLoader);
          }
        }
 catch (        ClassNotFoundException exception) {
        }
        attributeDetails.setReferenceClassType(Type.getType(referenceClass));
      }
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(clz,attribute,foreignReferenceMapping,true);
      }
      if (weaveValueHolders && (foreignReferenceMapping.getIndirectionPolicy() instanceof BasicIndirectionPolicy) && (typeClass != null)&& (!ValueHolderInterface.class.isAssignableFrom(typeClass))) {
        lazyMappings.add(foreignReferenceMapping);
        attributeDetails.weaveVH(weaveValueHolders,foreignReferenceMapping);
      }
    }
    if (attributeDetails.getReferenceClassType() == null) {
      if (typeClass == null) {
        typeClass=getAttributeTypeFromClass(clz,attribute,mapping,true);
      }
    }
    if (typeClass != null) {
      attributeDetails.setReferenceClassName(typeClass.getName());
      attributeDetails.setReferenceClassType(Type.getType(typeClass));
    }
    attributesMap.put(attribute,attributeDetails);
  }
  classDetails.setAttributesMap(attributesMap);
  classDetails.setGetterMethodToAttributeDetails(gettersMap);
  classDetails.setSetterMethodToAttributeDetails(settersMap);
  classDetails.setLazyMappings(lazyMappings);
  return unMappedAttributes;
}"
68225,"/** 
 * INTERNAL: A subclass that supports cascade version optimistic locking should  implement this method to properly prepare the locking policy for their  mapping type. Guy
 */
public void prepareCascadeLockingPolicy(){
  return;
}","/** 
 * INTERNAL: A subclass that supports cascade version optimistic locking should  implement this method to properly prepare the locking policy for their  mapping type.
 */
public void prepareCascadeLockingPolicy(){
  return;
}"
68226,"protected ForeignReferenceMapping(){
  this.isPrivateOwned=false;
  this.hasCustomSelectionQuery=false;
  this.usesBatchReading=false;
  this.useBasicIndirection();
  this.cascadePersist=false;
  this.cascadeMerge=false;
  this.cascadeRefresh=false;
  this.cascadeRemove=false;
}","protected ForeignReferenceMapping(){
  this.isPrivateOwned=false;
  this.hasCustomSelectionQuery=false;
  this.usesBatchReading=false;
  this.useBasicIndirection();
  this.cascadePersist=false;
  this.cascadeMerge=false;
  this.cascadeRefresh=false;
  this.cascadeRemove=false;
  this.requiresTransientWeavedFields=true;
}"
68227,"/** 
 * INTERNAL: We currently limit this merging to the ClassAccessor level.
 */
@Override public void merge(ORMetadata metadata){
  MetadataAccessor accessor=(MetadataAccessor)metadata;
  m_converters=mergeORObjectLists(m_converters,accessor.getConverters());
  m_objectTypeConverters=mergeORObjectLists(m_objectTypeConverters,accessor.getObjectTypeConverters());
  m_structConverters=mergeORObjectLists(m_structConverters,accessor.getStructConverters());
  m_typeConverters=mergeORObjectLists(m_typeConverters,accessor.getTypeConverters());
  m_properties=mergeORObjectLists(m_properties,accessor.getProperties());
}","/** 
 * INTERNAL: We currently limit this merging to the ClassAccessor level.
 */
@Override public void merge(ORMetadata metadata){
  MetadataAccessor accessor=(MetadataAccessor)metadata;
  m_access=(Enum)mergeSimpleObjects(m_access,accessor.getAccess(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_converters=mergeORObjectLists(m_converters,accessor.getConverters());
  m_objectTypeConverters=mergeORObjectLists(m_objectTypeConverters,accessor.getObjectTypeConverters());
  m_structConverters=mergeORObjectLists(m_structConverters,accessor.getStructConverters());
  m_typeConverters=mergeORObjectLists(m_typeConverters,accessor.getTypeConverters());
  m_properties=mergeORObjectLists(m_properties,accessor.getProperties());
}"
68228,"/** 
 * INTERNAL:
 */
public MetadataAccessor(Annotation annotation,MetadataAccessibleObject accessibleObject,MetadataDescriptor descriptor,MetadataProject project){
  super(annotation,accessibleObject);
  m_project=project;
  m_descriptor=descriptor;
}","/** 
 * INTERNAL:
 */
public MetadataAccessor(Annotation annotation,MetadataAccessibleObject accessibleObject,MetadataDescriptor descriptor,MetadataProject project){
  super(annotation,accessibleObject);
  m_project=project;
  m_descriptor=descriptor;
  Annotation access=getAnnotation(Access.class);
  if (access != null) {
    setAccess((Enum)MetadataHelper.invokeMethod(""String_Node_Str"",access));
  }
}"
68229,"/** 
 * INTERNAL: Create and return the appropriate accessor based on the accessible  object given. Order of checking is important, careful when modifying or adding, check what the isXyz call does to determine if the accessor is of type xyz.
 */
protected MappingAccessor buildAccessor(MetadataAnnotatedElement accessibleObject){
  if (accessibleObject.isBasicCollection(getDescriptor())) {
    return new BasicCollectionAccessor(accessibleObject.getAnnotation(BasicCollection.class),accessibleObject,this);
  }
 else   if (accessibleObject.isBasicMap(getDescriptor())) {
    return new BasicMapAccessor(accessibleObject.getAnnotation(BasicMap.class),accessibleObject,this);
  }
 else   if (accessibleObject.isId(getDescriptor())) {
    return new IdAccessor(accessibleObject.getAnnotation(Id.class),accessibleObject,this);
  }
 else   if (accessibleObject.isVersion(getDescriptor())) {
    return new VersionAccessor(accessibleObject.getAnnotation(Version.class),accessibleObject,this);
  }
 else   if (accessibleObject.isBasic(getDescriptor())) {
    return new BasicAccessor(accessibleObject.getAnnotation(Basic.class),accessibleObject,this);
  }
 else   if (accessibleObject.isEmbedded(getDescriptor())) {
    return new EmbeddedAccessor(accessibleObject.getAnnotation(Embedded.class),accessibleObject,this);
  }
 else   if (accessibleObject.isEmbeddedId(getDescriptor())) {
    return new EmbeddedIdAccessor(accessibleObject.getAnnotation(EmbeddedId.class),accessibleObject,this);
  }
 else   if (accessibleObject.isTransformation(getDescriptor())) {
    return new TransformationAccessor(accessibleObject.getAnnotation(Transformation.class),accessibleObject,this);
  }
 else   if (accessibleObject.isManyToMany(getDescriptor())) {
    return new ManyToManyAccessor(accessibleObject.getAnnotation(ManyToMany.class),accessibleObject,this);
  }
 else   if (accessibleObject.isManyToOne(getDescriptor())) {
    return new ManyToOneAccessor(accessibleObject.getAnnotation(ManyToOne.class),accessibleObject,this);
  }
 else   if (accessibleObject.isOneToMany(getDescriptor())) {
    return new OneToManyAccessor(accessibleObject.getAnnotation(OneToMany.class),accessibleObject,this);
  }
 else   if (accessibleObject.isOneToOne(getDescriptor())) {
    return new OneToOneAccessor(accessibleObject.getAnnotation(OneToOne.class),accessibleObject,this);
  }
 else   if (accessibleObject.isVariableOneToOne(getDescriptor())) {
    return new VariableOneToOneAccessor(accessibleObject.getAnnotation(VariableOneToOne.class),accessibleObject,this);
  }
 else   if (getDescriptor().ignoreDefaultMappings() || ValueHolderInterface.class.isAssignableFrom(accessibleObject.getRawClass(getDescriptor()))) {
    return null;
  }
 else {
    return new BasicAccessor(accessibleObject.getAnnotation(Basic.class),accessibleObject,this);
  }
}","/** 
 * INTERNAL: Create and return the appropriate accessor based on the accessible  object given. Order of checking is important, careful when modifying or adding, check what the isXyz call does to determine if the accessor is of type xyz.
 */
protected MappingAccessor buildAccessor(MetadataAnnotatedElement accessibleObject){
  if (accessibleObject.isBasicCollection(getDescriptor())) {
    return new BasicCollectionAccessor(accessibleObject.getAnnotation(BasicCollection.class),accessibleObject,this);
  }
 else   if (accessibleObject.isBasicMap(getDescriptor())) {
    return new BasicMapAccessor(accessibleObject.getAnnotation(BasicMap.class),accessibleObject,this);
  }
 else   if (accessibleObject.isId(getDescriptor())) {
    return new IdAccessor(accessibleObject.getAnnotation(Id.class),accessibleObject,this);
  }
 else   if (accessibleObject.isVersion(getDescriptor())) {
    return new VersionAccessor(accessibleObject.getAnnotation(Version.class),accessibleObject,this);
  }
 else   if (accessibleObject.isBasic(getDescriptor())) {
    return new BasicAccessor(accessibleObject.getAnnotation(Basic.class),accessibleObject,this);
  }
 else   if (accessibleObject.isEmbedded(getDescriptor())) {
    return new EmbeddedAccessor(accessibleObject.getAnnotation(Embedded.class),accessibleObject,this);
  }
 else   if (accessibleObject.isEmbeddedId(getDescriptor())) {
    return new EmbeddedIdAccessor(accessibleObject.getAnnotation(EmbeddedId.class),accessibleObject,this);
  }
 else   if (accessibleObject.isTransformation(getDescriptor())) {
    return new TransformationAccessor(accessibleObject.getAnnotation(Transformation.class),accessibleObject,this);
  }
 else   if (accessibleObject.isManyToMany(getDescriptor())) {
    return new ManyToManyAccessor(accessibleObject.getAnnotation(ManyToMany.class),accessibleObject,this);
  }
 else   if (accessibleObject.isManyToOne(getDescriptor())) {
    return new ManyToOneAccessor(accessibleObject.getAnnotation(ManyToOne.class),accessibleObject,this);
  }
 else   if (accessibleObject.isOneToMany(getDescriptor())) {
    return new OneToManyAccessor(accessibleObject.getAnnotation(OneToMany.class),accessibleObject,this);
  }
 else   if (accessibleObject.isOneToOne(getDescriptor())) {
    return new OneToOneAccessor(accessibleObject.getAnnotation(OneToOne.class),accessibleObject,this);
  }
 else   if (accessibleObject.isVariableOneToOne(getDescriptor())) {
    return new VariableOneToOneAccessor(accessibleObject.getAnnotation(VariableOneToOne.class),accessibleObject,this);
  }
 else   if (getDescriptor().ignoreDefaultMappings()) {
    return null;
  }
 else {
    return new BasicAccessor(accessibleObject.getAnnotation(Basic.class),accessibleObject,this);
  }
}"
68230,"/** 
 * INTERNAL: Generic class level merging details for entities, mapped superclasses and embeddables.
 */
@Override public void merge(ORMetadata metadata){
  super.merge(metadata);
  ClassAccessor accessor=(ClassAccessor)metadata;
  m_access=(Enum)mergeSimpleObjects(m_access,accessor.getAccess(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_customizerClass=(Class)mergeSimpleObjects(m_customizerClass,accessor.getCustomizerClass(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_description=(String)mergeSimpleObjects(m_description,accessor.getDescription(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_metadataComplete=(Boolean)mergeSimpleObjects(m_metadataComplete,accessor.getMetadataComplete(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_excludeDefaultMappings=(Boolean)mergeSimpleObjects(m_excludeDefaultMappings,accessor.getExcludeDefaultMappings(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_cloneCopyPolicy=(CloneCopyPolicyMetadata)mergeORObjects(m_cloneCopyPolicy,accessor.getCloneCopyPolicy());
  m_customCopyPolicy=(CustomCopyPolicyMetadata)mergeORObjects(m_customCopyPolicy,accessor.getCustomCopyPolicy());
  m_instantiationCopyPolicy=(InstantiationCopyPolicyMetadata)mergeORObjects(m_instantiationCopyPolicy,accessor.getInstantiationCopyPolicy());
  m_changeTracking=(ChangeTrackingMetadata)mergeORObjects(m_changeTracking,accessor.getChangeTracking());
  if (m_attributes == null) {
    m_attributes=accessor.getAttributes();
  }
 else {
    m_attributes.merge(accessor.getAttributes());
  }
}","/** 
 * INTERNAL: Generic class level merging details for entities, mapped superclasses and embeddables.
 */
@Override public void merge(ORMetadata metadata){
  super.merge(metadata);
  ClassAccessor accessor=(ClassAccessor)metadata;
  m_customizerClass=(Class)mergeSimpleObjects(m_customizerClass,accessor.getCustomizerClass(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_description=(String)mergeSimpleObjects(m_description,accessor.getDescription(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_metadataComplete=(Boolean)mergeSimpleObjects(m_metadataComplete,accessor.getMetadataComplete(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_excludeDefaultMappings=(Boolean)mergeSimpleObjects(m_excludeDefaultMappings,accessor.getExcludeDefaultMappings(),accessor.getAccessibleObject(),""String_Node_Str"");
  m_cloneCopyPolicy=(CloneCopyPolicyMetadata)mergeORObjects(m_cloneCopyPolicy,accessor.getCloneCopyPolicy());
  m_customCopyPolicy=(CustomCopyPolicyMetadata)mergeORObjects(m_customCopyPolicy,accessor.getCustomCopyPolicy());
  m_instantiationCopyPolicy=(InstantiationCopyPolicyMetadata)mergeORObjects(m_instantiationCopyPolicy,accessor.getInstantiationCopyPolicy());
  m_changeTracking=(ChangeTrackingMetadata)mergeORObjects(m_changeTracking,accessor.getChangeTracking());
  if (m_attributes == null) {
    m_attributes=accessor.getAttributes();
  }
 else {
    m_attributes.merge(accessor.getAttributes());
  }
}"
68231,"/** 
 * INTERNAL: Returns true if this class uses uses property access. It will first check for an explicit access type specification, otherwise will use the default access as specified on the descriptor for this accessor  since we may be processing a mapped superclass.
 */
public boolean usesPropertyAccess(){
  return getAccessType().name().equals(AccessType.PROPERTY.name());
}","/** 
 * INTERNAL: Returns true if this class uses uses property access. It will first check for an explicit access type specification, otherwise will use the default access as specified on the descriptor for this accessor  since we may be processing a mapped superclass.
 */
public boolean usesPropertyAccess(){
  return getAccess().name().equals(AccessType.PROPERTY.name());
}"
68232,"/** 
 * INTERNAL: Create mappings from the fields directly. If the mustBeExplicit flag is true, then we are processing the inverse of an explicit access setting and for a field to be processed it must have a Access(FIELD)  setting.
 */
protected void processAccessorFields(boolean processingInverse){
  for (  Field field : MetadataHelper.getFields(getJavaClass())) {
    MetadataField metadataField=new MetadataField(field,getLogger());
    if (metadataField.isAnnotationPresent(Transient.class)) {
      if (metadataField.hasMoreThanOneDeclaredAnnotation(getDescriptor())) {
        throw ValidationException.mappingAnnotationsAppliedToTransientAttribute(field);
      }
    }
 else {
      if (metadataField.isValidPersistenceField(processingInverse,getDescriptor())) {
        if (!getDescriptor().hasAccessorFor(metadataField.getAttributeName()) || (getDescriptor().hasAccessorFor(metadataField.getAttributeName()) && processingInverse)) {
          getDescriptor().addAccessor(buildAccessor(metadataField));
        }
      }
    }
  }
  if (hasExplicitAccessType() && !processingInverse) {
    processAccessorMethods(true);
  }
}","/** 
 * INTERNAL: Create mappings from the fields directly. If the mustBeExplicit flag is true, then we are processing the inverse of an explicit access setting and for a field to be processed it must have a Access(FIELD)  setting.
 */
protected void processAccessorFields(boolean processingInverse){
  for (  Field field : MetadataHelper.getFields(getJavaClass())) {
    MetadataField metadataField=new MetadataField(field,getLogger());
    if (metadataField.isAnnotationPresent(Transient.class)) {
      if (metadataField.hasMoreThanOneDeclaredAnnotation(getDescriptor())) {
        throw ValidationException.mappingAnnotationsAppliedToTransientAttribute(field);
      }
    }
 else {
      if (metadataField.isValidPersistenceField(processingInverse,getDescriptor())) {
        if (!getDescriptor().hasAccessorFor(metadataField.getAttributeName()) || (getDescriptor().hasAccessorFor(metadataField.getAttributeName()) && processingInverse)) {
          getDescriptor().addAccessor(buildAccessor(metadataField));
        }
      }
    }
  }
  if (hasAccess() && !processingInverse) {
    processAccessorMethods(true);
  }
}"
68233,"/** 
 * INTERNAL: Create mappings via the class properties. If the mustBeExplicit flag is true, then we are processing the inverse of an explicit access setting and for a field to be processed it must have a Access(PROPERTY)  setting.
 */
protected void processAccessorMethods(boolean processingInverse){
  for (  Method method : MetadataHelper.getDeclaredMethods(getJavaClass())) {
    MetadataMethod metadataMethod=new MetadataMethod(method,getLogger());
    if (metadataMethod.isAnnotationPresent(Transient.class)) {
      if (metadataMethod.hasMoreThanOneDeclaredAnnotation(getDescriptor())) {
        throw ValidationException.mappingAnnotationsAppliedToTransientAttribute(method);
      }
    }
 else {
      if (metadataMethod.isValidPersistenceMethod(processingInverse,getDescriptor())) {
        if (!getDescriptor().hasAccessorFor(metadataMethod.getAttributeName()) || (getDescriptor().hasAccessorFor(metadataMethod.getAttributeName()) && processingInverse)) {
          getDescriptor().addAccessor(buildAccessor(metadataMethod));
        }
      }
    }
  }
  if (hasExplicitAccessType() && !processingInverse) {
    processAccessorFields(true);
  }
}","/** 
 * INTERNAL: Create mappings via the class properties. If the mustBeExplicit flag is true, then we are processing the inverse of an explicit access setting and for a field to be processed it must have a Access(PROPERTY)  setting.
 */
protected void processAccessorMethods(boolean processingInverse){
  for (  Method method : MetadataHelper.getDeclaredMethods(getJavaClass())) {
    MetadataMethod metadataMethod=new MetadataMethod(method,getLogger());
    if (metadataMethod.isAnnotationPresent(Transient.class)) {
      if (metadataMethod.hasMoreThanOneDeclaredAnnotation(getDescriptor())) {
        throw ValidationException.mappingAnnotationsAppliedToTransientAttribute(method);
      }
    }
 else {
      if (metadataMethod.isValidPersistenceMethod(processingInverse,getDescriptor())) {
        if (!getDescriptor().hasAccessorFor(metadataMethod.getAttributeName()) || (getDescriptor().hasAccessorFor(metadataMethod.getAttributeName()) && processingInverse)) {
          getDescriptor().addAccessor(buildAccessor(metadataMethod));
        }
      }
    }
  }
  if (hasAccess() && !processingInverse) {
    processAccessorFields(true);
  }
}"
68234,"/** 
 * INTERNAL: Used for OX mapping.
 */
public Enum getAccess(){
  return m_access;
}","/** 
 * INTERNAL: Return the access type of this accessor. Assumes all access processing has been performed before calling this method.
 */
@Override public Enum getAccess(){
  if (hasAccess()) {
    return super.getAccess();
  }
 else {
    return getDescriptor().getDefaultAccess();
  }
}"
68235,"/** 
 * INTERNAL: Process the access type of this embeddable.
 */
public void processAccessType(){
  Enum owningClassAccessorsAccessType=getOwningDescriptor().getClassAccessor().getAccessType();
  getDescriptor().setDefaultAccess(owningClassAccessorsAccessType);
  if (getExplicitAccessType() == null) {
    getLogger().logConfigMessage(MetadataLogger.ACCESS_TYPE,owningClassAccessorsAccessType.name(),getJavaClass());
  }
}","/** 
 * INTERNAL: Process the access type of this embeddable.
 */
public void processAccessType(){
  Enum owningClassAccessorsAccess=getOwningDescriptor().getClassAccessor().getAccess();
  getDescriptor().setDefaultAccess(owningClassAccessorsAccess);
  if (getAccess() == null) {
    getLogger().logConfigMessage(MetadataLogger.ACCESS_TYPE,owningClassAccessorsAccess.name(),getJavaClass());
  }
}"
68236,"/** 
 * Sets usesExternalConnectionPooling and the config model.
 */
void setExternalConnectionPooling(boolean value){
  this.loginConfig().setExternalConnectionPooling(value);
}","/** 
 * Sets usesExternalConnectionPooling and the config model.
 */
public void setExternalConnectionPooling(boolean value){
  boolean old=this.loginConfig().getExternalConnectionPooling();
  this.loginConfig().setExternalConnectionPooling(value);
  this.firePropertyChanged(EXTERNAL_CONNECTION_POOLING_PROPERTY,old,value);
}"
68237,"/** 
 * Sets this config model property.
 */
void setUsesExternalTransactionController(boolean value){
  boolean old=this.loginConfig().getExternalTransactionController();
  this.loginConfig().setExternalTransactionController(value);
  this.firePropertyChanged(EXTERNAL_TRANSACTION_CONTROLLER_PROPERTY,old,value);
}","/** 
 * Sets this config model property.
 */
public void setUsesExternalTransactionController(boolean value){
  boolean old=this.loginConfig().getExternalTransactionController();
  this.loginConfig().setExternalTransactionController(value);
  this.firePropertyChanged(EXTERNAL_TRANSACTION_CONTROLLER_PROPERTY,old,value);
}"
68238,"/** 
 * Returns usesExternalConnectionPooling.
 */
boolean usesExternalConnectionPooling(){
  return this.loginConfig().getExternalConnectionPooling();
}","/** 
 * Returns usesExternalConnectionPooling.
 */
public boolean usesExternalConnectionPooling(){
  return this.loginConfig().getExternalConnectionPooling();
}"
68239,"/** 
 * Sets this config model property.
 */
void setUsesExternalTransactionController(boolean value){
}","/** 
 * Sets this config model property.
 */
public void setUsesExternalTransactionController(boolean value){
}"
68240,"/** 
 * Initializes the layout of this pane.
 * @return The container with all its widgets
 */
protected final Component buildPage(){
  GridBagConstraints constraints=new GridBagConstraints();
  Vector components=new Vector();
  int offset=SwingTools.checkBoxIconWidth();
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JCheckBox exclusiveCheckBox=buildCheckBox(""String_Node_Str"",buildExclusiveConnectionsCheckBoxAdapter());
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,0,0);
  panel.add(exclusiveCheckBox,constraints);
  helpManager().addTopicID(exclusiveCheckBox,""String_Node_Str"");
  JCheckBox nonTransactionalReadLoginCheckBox=buildCheckBox(""String_Node_Str"",buildUseNonTransactionalReadLoginCheckBoxAdapter());
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,5,0);
  panel.add(nonTransactionalReadLoginCheckBox,constraints);
  helpManager().addTopicID(nonTransactionalReadLoginCheckBox,""String_Node_Str"");
  JComponent loginPane=buildLoginPane();
  loginPane.setName(""String_Node_Str"");
  constraints.gridx=0;
  constraints.gridy=2;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.insets=new Insets(0,offset,0,0);
  panel.add(loginPane,constraints);
  helpManager().addTopicID(loginPane,""String_Node_Str"");
  components.add(loginPane);
  buildUseNonTransactionalReadLoginEnabler(components);
  buildExclusiveConnectionsEnabler(exclusiveCheckBox);
  return panel;
}","@Override protected final Component buildPage(){
  GridBagConstraints constraints=new GridBagConstraints();
  int offset=SwingTools.checkBoxIconWidth();
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JCheckBox exclusiveCheckBox=buildCheckBox(""String_Node_Str"",buildExclusiveConnectionsCheckBoxAdapter());
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,0,0);
  panel.add(exclusiveCheckBox,constraints);
  helpManager().addTopicID(exclusiveCheckBox,""String_Node_Str"");
  JCheckBox nonTransactionalReadLoginCheckBox=buildCheckBox(""String_Node_Str"",buildUseNonTransactionalReadLoginCheckBoxAdapter());
  constraints.gridx=0;
  constraints.gridy=3;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,5,0);
  panel.add(nonTransactionalReadLoginCheckBox,constraints);
  helpManager().addTopicID(nonTransactionalReadLoginCheckBox,""String_Node_Str"");
  loginPane=buildLoginPane();
  SwitcherPanel switcherPane=new SwitcherPanel(buildUseNonTransactionalReadLoginHolder(),buildLoginPaneTransformer());
  loginPane.setName(""String_Node_Str"");
  constraints.gridx=0;
  constraints.gridy=4;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.insets=new Insets(0,offset,0,0);
  panel.add(switcherPane,constraints);
  helpManager().addTopicID(loginPane,""String_Node_Str"");
  installExclusiveConnectionsEnabler(exclusiveCheckBox);
  return panel;
}"
68241,"protected Object getValueFromSubject(){
  LoginAdapter login=(LoginAdapter)subject;
  DatabaseSessionAdapter session=(DatabaseSessionAdapter)login.getParent();
  return Boolean.valueOf(session.usesExternalConnectionPooling());
}","protected Object getValueFromSubject(){
  ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
  return Boolean.valueOf(pool.usesNonTransactionalReadLogin());
}"
68242,"/** 
 * Creates the <code>PropertyValueModel</code> responsible to handle the Exclusive Connections.
 * @return A new <code>PropertyValueModel</code>
 */
private PropertyValueModel buildExclusiveConnectionsHolder(){
  return new PropertyAspectAdapter(getSelectionHolder(),ReadConnectionPoolAdapter.EXCLUSIVE_PROPERTY){
    protected Object getValueFromSubject(){
      ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
      return Boolean.valueOf(pool.isExclusive());
    }
    protected void setValueOnSubject(    Object value){
      ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
      pool.setExclusive(Boolean.TRUE.equals(value));
    }
  }
;
}","private PropertyValueModel buildExclusiveConnectionsHolder(){
  return new PropertyAspectAdapter(getSelectionHolder(),ReadConnectionPoolAdapter.EXCLUSIVE_PROPERTY){
    @Override protected Object getValueFromSubject(){
      ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
      return pool.isExclusive();
    }
    @Override protected void setValueOnSubject(    Object value){
      ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
      pool.setExclusive((Boolean)value);
    }
  }
;
}"
68243,"protected Object transform(Object value){
  return Boolean.valueOf(Boolean.FALSE.equals(value));
}","public Object transform(Object value){
  if ((value != null) && (Boolean)value) {
    return loginPane;
  }
  return null;
}"
68244,"/** 
 * Creates the <code>ButtonModel</code> responsible to handle enabled state of Exclusive Connections check box.
 * @return A new <code>ButtonModel</code>
 */
private ButtonModel buildExclusiveConnectionsCheckBoxAdapter(){
  return new CheckBoxModelAdapter(buildExclusiveConnectionsHolder());
}","private ButtonModel buildExclusiveConnectionsCheckBoxAdapter(){
  return new CheckBoxModelAdapter(buildExclusiveConnectionsHolder());
}"
68245,"/** 
 * Creates the <code>PropertyValueModel</code> responsible to retrieve the boolean flag used by the <code>ComponentEnabler</code> in order to keep the enable state of the components in sync with the underlying model's property.
 * @return A new <code>PropertyValueModel</code>
 */
private PropertyValueModel buildEnableStateHolder(){
  PropertyAspectAdapter sessionHolder=new PropertyAspectAdapter(getSelectionHolder(),""String_Node_Str""){
    protected Object getValueFromSubject(){
      ConnectionPoolAdapter pool=(ConnectionPoolAdapter)subject;
      return pool.getParent().getParent();
    }
  }
;
  PropertyAspectAdapter loginHolder=new PropertyAspectAdapter(sessionHolder,ServerSessionAdapter.LOGIN_CONFIG_PROPERTY){
    protected Object getValueFromSubject(){
      ServerSessionAdapter session=(ServerSessionAdapter)subject;
      return session.getLogin();
    }
  }
;
  PropertyAspectAdapter booleanHolder=new PropertyAspectAdapter(loginHolder,DatabaseSessionAdapter.EXTERNAL_CONNECTION_POOLING_PROPERTY){
    protected Object getValueFromSubject(){
      LoginAdapter login=(LoginAdapter)subject;
      DatabaseSessionAdapter session=(DatabaseSessionAdapter)login.getParent();
      return Boolean.valueOf(session.usesExternalConnectionPooling());
    }
  }
;
  return new TransformationPropertyValueModel(booleanHolder){
    protected Object transform(    Object value){
      return Boolean.valueOf(Boolean.FALSE.equals(value));
    }
  }
;
}","private PropertyValueModel buildEnableStateHolder(){
  ValueModel sessionHolder=new PropertyAspectAdapter(getSelectionHolder(),""String_Node_Str""){
    @Override protected Object getValueFromSubject(){
      ConnectionPoolAdapter pool=(ConnectionPoolAdapter)subject;
      return pool.getParent().getParent();
    }
  }
;
  ValueModel loginHolder=new PropertyAspectAdapter(sessionHolder,ServerSessionAdapter.LOGIN_CONFIG_PROPERTY){
    @Override protected Object getValueFromSubject(){
      ServerSessionAdapter session=(ServerSessionAdapter)subject;
      return session.getLogin();
    }
  }
;
  PropertyAspectAdapter booleanHolder=new PropertyAspectAdapter(loginHolder,DatabaseSessionAdapter.EXTERNAL_CONNECTION_POOLING_PROPERTY){
    @Override protected Object getValueFromSubject(){
      LoginAdapter login=(LoginAdapter)subject;
      DatabaseSessionAdapter session=(DatabaseSessionAdapter)login.getParent();
      return session.usesExternalConnectionPooling();
    }
  }
;
  return new TransformationPropertyValueModel(booleanHolder){
    @Override protected Object transform(    Object value){
      return Boolean.valueOf(Boolean.FALSE.equals(value));
    }
  }
;
}"
68246,"/** 
 * Creates the selection holder that will hold the user object to be edited by this page.
 * @return The <code>PropertyValueModel</code> containing the {@link DatabaseLoginAdapter}to be edited by the   {@link AbstractRdbmsLoginPane}
 */
protected final PropertyValueModel buildLoginHolder(){
  String[] propertyNames={ConnectionPoolAdapter.LOGIN_CONFIG_PROPERTY,ReadConnectionPoolAdapter.USE_NON_TRANSACTIONAL_READ_LOGIN_PROPERTY};
  return new PropertyAspectAdapter(getSelectionHolder(),propertyNames){
    protected Object getValueFromSubject(){
      ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
      if (pool.usesNonTransactionalReadLogin())       return pool.getLogin();
      return null;
    }
  }
;
}","protected final PropertyValueModel buildLoginHolder(){
  String[] propertyNames={ConnectionPoolAdapter.LOGIN_CONFIG_PROPERTY,ReadConnectionPoolAdapter.USE_NON_TRANSACTIONAL_READ_LOGIN_PROPERTY};
  return new PropertyAspectAdapter(getSelectionHolder(),propertyNames){
    protected Object getValueFromSubject(){
      ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
      return pool.usesNonTransactionalReadLogin() ? pool.getLogin() : null;
    }
  }
;
}"
68247,"protected void setValueOnSubject(Object value){
  ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
  pool.setExclusive(Boolean.TRUE.equals(value));
}","protected void setValueOnSubject(Object value){
  ReadConnectionPoolAdapter pool=(ReadConnectionPoolAdapter)subject;
  pool.setUseNonTransactionalReadLogin(Boolean.TRUE.equals(value));
}"
68248,"/** 
 * INTERNAL: This method returns the application ClassLoader. The parent application ClassLoader is returned when running in a J2EE client  either in a web or ejb container to match a weak reference to a particular  HelperContext.
 */
protected ClassLoader getContextClassLoader(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=classLoader.getClass().getName();
  if (classLoaderName.startsWith(""String_Node_Str"")) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
  }
 else   if (classLoaderName.startsWith(""String_Node_Str"")) {
    final int systemLoaderOffest=3;
    ClassLoader systemLoader=ClassLoader.getSystemClassLoader();
    ClassLoader currentLoader=classLoader;
    ArrayList<ClassLoader> loaders=new ArrayList<ClassLoader>();
    loaders.add(currentLoader);
    while (currentLoader.getParent() != null) {
      currentLoader=currentLoader.getParent();
      loaders.add(currentLoader);
      if (currentLoader.getParent() == systemLoader) {
        if (loaders.size() >= systemLoaderOffest) {
          classLoader=loaders.get(loaders.size() - systemLoaderOffest);
          break;
        }
      }
    }
  }
  return classLoader;
}","/** 
 * INTERNAL: This method returns the application ClassLoader. The parent application ClassLoader is returned when running in a J2EE client  either in a web or ejb container to match a weak reference to a particular  HelperContext.
 */
protected ClassLoader getContextClassLoader(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=classLoader.getClass().getName();
  if (classLoaderName.startsWith(""String_Node_Str"")) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
  }
 else   if (classLoaderName.startsWith(""String_Node_Str"")) {
    final int systemLoaderOffest=4;
    ClassLoader systemLoader=ClassLoader.getSystemClassLoader();
    ClassLoader currentLoader=classLoader;
    ArrayList<ClassLoader> loaders=new ArrayList<ClassLoader>();
    loaders.add(currentLoader);
    while (currentLoader.getParent() != null) {
      currentLoader=currentLoader.getParent();
      loaders.add(currentLoader);
      if (currentLoader.getParent() == systemLoader) {
        if (loaders.size() >= systemLoaderOffest) {
          classLoader=loaders.get(loaders.size() - systemLoaderOffest);
          break;
        }
      }
    }
  }
  return classLoader;
}"
68249,"public void testGetOldSequenceNotLoggingNull(){
  purchaseOrderObject.unset(""String_Node_Str"");
  cs.endLogging();
  address1Object.unset(address1Object.getInstanceProperty(""String_Node_Str""));
  Sequence oldAddressSeq=cs.getOldSequence(address1Object);
  assertNull(oldAddressSeq);
}","public void testGetOldSequenceNotLoggingNull(){
  purchaseOrderObject.unset(""String_Node_Str"");
  cs.endLogging();
  address1Object.unset(address1Object.getInstanceProperty(""String_Node_Str""));
  Sequence oldAddressSeq=cs.getOldSequence(address1Object);
  assertNotNull(oldAddressSeq);
}"
68250,"public void testGetOldSequenceNotLogging(){
  cs.endLogging();
  address1Object.set(""String_Node_Str"",""String_Node_Str"");
  List oldValues=cs.getOldValues(address1Object);
  assertEquals(0,oldValues.size());
  address1Object.unset(address1Object.getInstanceProperty(""String_Node_Str""));
  Sequence oldAddressSeq=cs.getOldSequence(address1Object);
  assertNull(oldAddressSeq);
}","public void testGetOldSequenceNotLogging(){
  cs.endLogging();
  address1Object.set(""String_Node_Str"",""String_Node_Str"");
  List oldValues=cs.getOldValues(address1Object);
  assertEquals(0,oldValues.size());
  address1Object.unset(address1Object.getInstanceProperty(""String_Node_Str""));
  Sequence oldAddressSeq=cs.getOldSequence(address1Object);
  assertNotNull(oldAddressSeq);
}"
68251,"/** 
 * Returns the value of the   {@link DataObject#getSequence sequence} for the data objectat the point when logging  {@link #beginLogging() began}.
 * @param dataObject the object in question.
 * @return the old containment property.
 */
public Sequence getOldSequence(DataObject dataObject){
  if (!isLogging() || (dataObject == null) || (!isDeleted(dataObject) && ((dataObject.getChangeSummary() != null) && (dataObject.getChangeSummary() != this)))) {
    return null;
  }
  if (!isCreated(dataObject) && dataObject.getType().isSequenced()) {
    if (getOldSequences().containsKey(dataObject)) {
      return (Sequence)getOldSequences().get(dataObject);
    }
    SDOSequence originalSeq=(SDOSequence)getOriginalSequences().get(dataObject);
    if (originalSeq == null) {
      originalSeq=(SDOSequence)dataObject.getSequence();
    }
    SDOSequence seqWithDeepCopies=new SDOSequence((SDODataObject)dataObject);
    for (int i=0; i < originalSeq.size(); i++) {
      Object nextOriginalSettingValue=originalSeq.getValue(i);
      if (nextOriginalSettingValue == null) {
        continue;
      }
      Property nextOriginalSettingProp=originalSeq.getProperty(i);
      if (nextOriginalSettingProp == null) {
        seqWithDeepCopies.addText(nextOriginalSettingValue.toString());
      }
 else       if (nextOriginalSettingProp.getType().isDataType()) {
        seqWithDeepCopies.addSettingWithoutModifyingDataObject(nextOriginalSettingProp,nextOriginalSettingValue,false);
      }
 else {
        seqWithDeepCopies.addSettingWithoutModifyingDataObject(nextOriginalSettingProp,getOrCreateDeepCopy((DataObject)nextOriginalSettingValue),false);
      }
    }
    getOldSequences().put(dataObject,seqWithDeepCopies);
    return seqWithDeepCopies;
  }
  return null;
}","/** 
 * Returns the value of the   {@link DataObject#getSequence sequence} for the data objectat the point when logging  {@link #beginLogging() began}.
 * @param dataObject the object in question.
 * @return the old containment property.
 */
public Sequence getOldSequence(DataObject dataObject){
  if ((dataObject == null) || (!isDeleted(dataObject) && ((dataObject.getChangeSummary() != null) && (dataObject.getChangeSummary() != this)))) {
    return null;
  }
  if (!isCreated(dataObject) && dataObject.getType().isSequenced()) {
    if (getOldSequences().containsKey(dataObject)) {
      return (Sequence)getOldSequences().get(dataObject);
    }
    SDOSequence originalSeq=(SDOSequence)getOriginalSequences().get(dataObject);
    if (originalSeq == null) {
      originalSeq=(SDOSequence)dataObject.getSequence();
    }
    SDOSequence seqWithDeepCopies=new SDOSequence((SDODataObject)dataObject);
    for (int i=0; i < originalSeq.size(); i++) {
      Object nextOriginalSettingValue=originalSeq.getValue(i);
      if (nextOriginalSettingValue == null) {
        continue;
      }
      Property nextOriginalSettingProp=originalSeq.getProperty(i);
      if (nextOriginalSettingProp == null) {
        seqWithDeepCopies.addText(nextOriginalSettingValue.toString());
      }
 else       if (nextOriginalSettingProp.getType().isDataType()) {
        seqWithDeepCopies.addSettingWithoutModifyingDataObject(nextOriginalSettingProp,nextOriginalSettingValue,false);
      }
 else {
        seqWithDeepCopies.addSettingWithoutModifyingDataObject(nextOriginalSettingProp,getOrCreateDeepCopy((DataObject)nextOriginalSettingValue),false);
      }
    }
    getOldSequences().put(dataObject,seqWithDeepCopies);
    return seqWithDeepCopies;
  }
  return null;
}"
68252,"private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    String string=dateTimeFormatter.get().format(sourceDate);
    int ns=sourceDate.getNanos();
    if (0 == ns) {
      string+=""String_Node_Str"";
    }
 else {
      string+=('.' + Helper.buildZeroPrefixAndTruncTrailZeros(ns,9));
    }
    return appendTimeZone(string);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    return dateFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    String string=timeFormatter.get().format(sourceDate);
    int ns=sourceDate.getNanos();
    if (0 == ns) {
      string+=""String_Node_Str"";
    }
 else {
      string+=('.' + Helper.buildZeroPrefixAndTruncTrailZeros(ns,9));
    }
    return appendTimeZone(string);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    return gDayFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    return gMonthFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    return gMonthDayFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    return gYearFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    return gYearMonthFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromTimestamp(sourceDate);
  }
}","/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled  as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  boolean bc=sourceDate.getTime() < YEAR_ONE_AD_TIME;
  if (bc) {
    sourceDate=handleBCDate(sourceDate);
  }
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    return bc ? '-' + dateFormatter.get().format(sourceDate) : dateFormatter.get().format(sourceDate);
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    String string=timeFormatter.get().format(sourceDate);
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    return gDayFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    return gMonthFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    return gMonthDayFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    return bc ? '-' + gYearFormatter.get().format(sourceDate) : gYearFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    return bc ? '-' + gYearMonthFormatter.get().format(sourceDate) : gYearMonthFormatter.get().format(sourceDate);
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  String string=dateTimeFormatter.get().format(sourceDate);
  string=appendNanos(string,sourceDate);
  return bc ? '-' + appendTimeZone(string) : appendTimeZone(string);
}"
68253,"public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    return dateFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    String string=timeFormatter.get().format(sourceDate);
    int ms=(int)(sourceDate.getTime() % 1000);
    if (0 == ms) {
      string+=""String_Node_Str"";
    }
 else {
      string+=('.' + Helper.buildZeroPrefixAndTruncTrailZeros(ms,3));
    }
    return appendTimeZone(string);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    return gDayFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    return gMonthFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    return gMonthDayFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    return gYearFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    return gYearMonthFormatter.get().format(sourceDate);
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromDate(sourceDate);
  }
}","/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName.   BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled  as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  boolean bc=sourceDate.getTime() < YEAR_ONE_AD_TIME;
  if (bc) {
    sourceDate=handleBCDate(sourceDate);
  }
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    return bc ? '-' + dateFormatter.get().format(sourceDate) : dateFormatter.get().format(sourceDate);
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    String string=timeFormatter.get().format(sourceDate);
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    return gDayFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    return gMonthFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    return gMonthDayFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    return bc ? '-' + gYearFormatter.get().format(sourceDate) : gYearFormatter.get().format(sourceDate);
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    return bc ? '-' + gYearMonthFormatter.get().format(sourceDate) : gYearMonthFormatter.get().format(sourceDate);
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  String string=dateTimeFormatter.get().format(sourceDate);
  string=appendMillis(string,sourceDate.getTime());
  return bc ? '-' + appendTimeZone(string) : appendTimeZone(string);
}"
68254,"private String stringFromCalendar(Calendar sourceCalendar){
  if (!(sourceCalendar.isSet(Calendar.HOUR) || sourceCalendar.isSet(Calendar.MINUTE) || sourceCalendar.isSet(Calendar.SECOND)|| sourceCalendar.isSet(Calendar.MILLISECOND))) {
    return dateFormatter.get().format(sourceCalendar.getTime());
  }
 else   if (!(sourceCalendar.isSet(Calendar.YEAR) || sourceCalendar.isSet(Calendar.MONTH) || sourceCalendar.isSet(Calendar.DATE))) {
    String string=timeFormatter.get().format(sourceCalendar.getTime());
    int ms=(int)(sourceCalendar.getTimeInMillis() % 1000);
    if (0 == ms) {
      string+=""String_Node_Str"";
    }
 else {
      string+=('.' + Helper.buildZeroPrefixAndTruncTrailZeros(ms,3));
    }
    return appendTimeZone(string);
  }
 else {
    return stringFromDate(sourceCalendar.getTime());
  }
}","private String stringFromCalendar(Calendar sourceCalendar){
  if (!(sourceCalendar.isSet(Calendar.HOUR) || sourceCalendar.isSet(Calendar.MINUTE) || sourceCalendar.isSet(Calendar.SECOND)|| sourceCalendar.isSet(Calendar.MILLISECOND))) {
    return dateFormatter.get().format(sourceCalendar.getTime());
  }
 else   if (!(sourceCalendar.isSet(Calendar.YEAR) || sourceCalendar.isSet(Calendar.MONTH) || sourceCalendar.isSet(Calendar.DATE))) {
    String string=timeFormatter.get().format(sourceCalendar.getTime());
    string=appendMillis(string,sourceCalendar.getTimeInMillis());
    return appendTimeZone(string);
  }
 else {
    return stringFromDate(sourceCalendar.getTime());
  }
}"
68255,"protected Object getControlObject(){
  ArrayList responsibilities=new ArrayList();
  responsibilities.add(CONTROL_RESPONSIBILITY1);
  responsibilities.add(CONTROL_RESPONSIBILITY2);
  responsibilities.add(CONTROL_RESPONSIBILITY3);
  Employee employee=new Employee();
  employee.firstName=CONTROL_FIRST_NAME;
  employee.lastName=CONTROL_LAST_NAME;
  Calendar cal=Calendar.getInstance();
  cal.clear();
  cal.set(2005,04,24,16,06,53);
  employee.birthday=cal;
  employee.id=CONTROL_ID;
  employee.responsibilities=responsibilities;
  return employee;
}","protected Object getControlObject(){
  ArrayList responsibilities=new ArrayList();
  responsibilities.add(CONTROL_RESPONSIBILITY1);
  responsibilities.add(CONTROL_RESPONSIBILITY2);
  responsibilities.add(CONTROL_RESPONSIBILITY3);
  Employee employee=new Employee();
  employee.firstName=CONTROL_FIRST_NAME;
  employee.lastName=CONTROL_LAST_NAME;
  Calendar cal=Calendar.getInstance();
  cal.clear();
  cal.set(2005,04,24,16,06,53);
  employee.birthday=cal;
  employee.id=CONTROL_ID;
  employee.responsibilities=responsibilities;
  employee.setBlah(""String_Node_Str"");
  return employee;
}"
68256,"public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Collection methods=objectFactoryClass.getMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass.getPackage());
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      if (!(next.getReturnType().getName().equals(""String_Node_Str"")) && !classes.contains(next.getReturnType())) {
        classes.add(next.getReturnType());
      }
 else {
        if (helper.isAnnotationPresent(next,XmlElementDecl.class)) {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          String url=elementDecl.namespace();
          if (""String_Node_Str"".equals(url)) {
            url=namespaceInfo.getNamespace();
          }
          String localName=elementDecl.name();
          QName qname=new QName(url,localName);
          JavaClass type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
          if (this.globalElements == null) {
            globalElements=new HashMap<QName,ElementDeclaration>();
          }
          ElementDeclaration declaration=new ElementDeclaration(qname,type.getQualifiedName());
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            declaration.setSubstitutionHead(new QName(subHeadNamespace,subHeadLocal));
          }
          globalElements.put(qname,declaration);
          if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
            classes.add(type);
          }
        }
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}","public JavaClass[] processObjectFactory(JavaClass objectFactoryClass,ArrayList<JavaClass> classes){
  Collection methods=objectFactoryClass.getMethods();
  Iterator methodsIter=methods.iterator();
  NamespaceInfo namespaceInfo=getNamespaceInfoForPackage(objectFactoryClass.getPackage());
  while (methodsIter.hasNext()) {
    JavaMethod next=(JavaMethod)methodsIter.next();
    if (next.getName().startsWith(""String_Node_Str"")) {
      if (!(next.getReturnType().getName().equals(""String_Node_Str"")) && !classes.contains(next.getReturnType())) {
        classes.add(next.getReturnType());
      }
 else {
        if (helper.isAnnotationPresent(next,XmlElementDecl.class)) {
          XmlElementDecl elementDecl=(XmlElementDecl)helper.getAnnotation(next,XmlElementDecl.class);
          String url=elementDecl.namespace();
          if (""String_Node_Str"".equals(url)) {
            url=namespaceInfo.getNamespace();
          }
          String localName=elementDecl.name();
          QName qname=new QName(url,localName);
          JavaClass type=(JavaClass)next.getReturnType().getActualTypeArguments().toArray()[0];
          if (this.globalElements == null) {
            globalElements=new HashMap<QName,ElementDeclaration>();
          }
          ElementDeclaration declaration=new ElementDeclaration(qname,type,type.getQualifiedName());
          if (!elementDecl.substitutionHeadName().equals(""String_Node_Str"")) {
            String subHeadLocal=elementDecl.substitutionHeadName();
            String subHeadNamespace=elementDecl.substitutionHeadNamespace();
            if (subHeadNamespace.equals(""String_Node_Str"")) {
              subHeadNamespace=namespaceInfo.getNamespace();
            }
            declaration.setSubstitutionHead(new QName(subHeadNamespace,subHeadLocal));
          }
          globalElements.put(qname,declaration);
          if (!helper.isBuiltInJavaType(type) && !classes.contains(type)) {
            classes.add(type);
          }
        }
      }
    }
  }
  if (classes.size() > 0) {
    return classes.toArray(new JavaClass[classes.size()]);
  }
 else {
    return new JavaClass[0];
  }
}"
68257,"public void updateGlobalElements(ArrayList<JavaClass> classesToProcess){
  for (  JavaClass javaClass : classesToProcess) {
    if (helper.isAnnotationPresent(javaClass,XmlRootElement.class)) {
      XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(javaClass,XmlRootElement.class);
      NamespaceInfo namespaceInfo;
      JavaPackage pack=javaClass.getPackage();
      namespaceInfo=this.packageToNamespaceMappings.get(pack.getQualifiedName());
      String elementName=rootElemAnnotation.name();
      if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
        if (javaClass.getName().indexOf(""String_Node_Str"") != -1) {
          elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('$') + 1));
        }
 else {
          elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('.') + 1));
        }
      }
      String rootNamespace=rootElemAnnotation.namespace();
      QName rootElemName=null;
      if (rootNamespace.equals(""String_Node_Str"")) {
        if (namespaceInfo == null) {
          rootElemName=new QName(elementName);
        }
 else {
          rootElemName=new QName(namespaceInfo.getNamespace(),elementName);
        }
      }
 else {
        rootElemName=new QName(rootNamespace,elementName);
      }
      ElementDeclaration declaration=new ElementDeclaration(rootElemName,javaClass.getRawName());
      declaration.setIsXmlRootElement(true);
      if (this.globalElements == null) {
        globalElements=new HashMap<QName,ElementDeclaration>();
      }
      this.globalElements.put(rootElemName,declaration);
    }
  }
  if (this.globalElements == null) {
    return;
  }
  Iterator<QName> elementQnames=this.globalElements.keySet().iterator();
  while (elementQnames.hasNext()) {
    QName next=elementQnames.next();
    ElementDeclaration nextDeclaration=this.globalElements.get(next);
    if (nextDeclaration.getSubstitutionHead() != null) {
      ElementDeclaration rootDeclaration=this.globalElements.get(nextDeclaration.getSubstitutionHead());
      rootDeclaration.addSubstitutableElement(nextDeclaration);
    }
  }
}","public void updateGlobalElements(ArrayList<JavaClass> classesToProcess){
  for (  JavaClass javaClass : classesToProcess) {
    if (helper.isAnnotationPresent(javaClass,XmlRootElement.class)) {
      XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(javaClass,XmlRootElement.class);
      NamespaceInfo namespaceInfo;
      JavaPackage pack=javaClass.getPackage();
      namespaceInfo=this.packageToNamespaceMappings.get(pack.getQualifiedName());
      String elementName=rootElemAnnotation.name();
      if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
        if (javaClass.getName().indexOf(""String_Node_Str"") != -1) {
          elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('$') + 1));
        }
 else {
          elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('.') + 1));
        }
      }
      String rootNamespace=rootElemAnnotation.namespace();
      QName rootElemName=null;
      if (rootNamespace.equals(""String_Node_Str"")) {
        if (namespaceInfo == null) {
          rootElemName=new QName(elementName);
        }
 else {
          rootElemName=new QName(namespaceInfo.getNamespace(),elementName);
        }
      }
 else {
        rootElemName=new QName(rootNamespace,elementName);
      }
      ElementDeclaration declaration=new ElementDeclaration(rootElemName,javaClass,javaClass.getRawName());
      declaration.setIsXmlRootElement(true);
      if (this.globalElements == null) {
        globalElements=new HashMap<QName,ElementDeclaration>();
      }
      this.globalElements.put(rootElemName,declaration);
    }
  }
  if (this.globalElements == null) {
    return;
  }
  Iterator<QName> elementQnames=this.globalElements.keySet().iterator();
  while (elementQnames.hasNext()) {
    QName next=elementQnames.next();
    ElementDeclaration nextDeclaration=this.globalElements.get(next);
    if (nextDeclaration.getSubstitutionHead() != null) {
      ElementDeclaration rootDeclaration=this.globalElements.get(nextDeclaration.getSubstitutionHead());
      rootDeclaration.addSubstitutableElement(nextDeclaration);
    }
  }
}"
68258,"public SchemaTypeInfo addClass(JavaClass javaClass){
  if (javaClass == null) {
    return null;
  }
  if (typeInfo == null) {
    this.typeInfoClasses=new ArrayList<JavaClass>();
    this.typeInfo=new HashMap<String,TypeInfo>();
    this.userDefinedSchemaTypes=new HashMap<String,QName>();
    this.packageToNamespaceMappings=new HashMap<String,NamespaceInfo>();
    this.namespaceResolver=new NamespaceResolver();
  }
  TypeInfo info=createTypeInfoFor(javaClass);
  NamespaceInfo namespaceInfo;
  JavaPackage pack=javaClass.getPackage();
  namespaceInfo=this.packageToNamespaceMappings.get(pack.getQualifiedName());
  SchemaTypeInfo schemaInfo=new SchemaTypeInfo();
  schemaInfo.setSchemaTypeName(new QName(info.getClassNamespace(),info.getSchemaTypeName()));
  if (helper.isAnnotationPresent(javaClass,XmlRootElement.class)) {
    XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(javaClass,XmlRootElement.class);
    String elementName=rootElemAnnotation.name();
    if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
      if (javaClass.getName().indexOf(""String_Node_Str"") != -1) {
        elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('$') + 1));
      }
 else {
        elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('.') + 1));
      }
    }
    String rootNamespace=rootElemAnnotation.namespace();
    QName rootElemName=null;
    if (rootNamespace.equals(""String_Node_Str"")) {
      rootElemName=new QName(namespaceInfo.getNamespace(),elementName);
    }
 else {
      rootElemName=new QName(rootNamespace,elementName);
    }
    schemaInfo.getGlobalElementDeclarations().add(rootElemName);
    ElementDeclaration declaration=new ElementDeclaration(rootElemName,javaClass.getRawName());
    this.globalElements.put(rootElemName,declaration);
  }
  return schemaInfo;
}","public SchemaTypeInfo addClass(JavaClass javaClass){
  if (javaClass == null) {
    return null;
  }
  if (typeInfo == null) {
    this.typeInfoClasses=new ArrayList<JavaClass>();
    this.typeInfo=new HashMap<String,TypeInfo>();
    this.userDefinedSchemaTypes=new HashMap<String,QName>();
    this.packageToNamespaceMappings=new HashMap<String,NamespaceInfo>();
    this.namespaceResolver=new NamespaceResolver();
  }
  TypeInfo info=createTypeInfoFor(javaClass);
  NamespaceInfo namespaceInfo;
  JavaPackage pack=javaClass.getPackage();
  namespaceInfo=this.packageToNamespaceMappings.get(pack.getQualifiedName());
  SchemaTypeInfo schemaInfo=new SchemaTypeInfo();
  schemaInfo.setSchemaTypeName(new QName(info.getClassNamespace(),info.getSchemaTypeName()));
  if (helper.isAnnotationPresent(javaClass,XmlRootElement.class)) {
    XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(javaClass,XmlRootElement.class);
    String elementName=rootElemAnnotation.name();
    if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
      if (javaClass.getName().indexOf(""String_Node_Str"") != -1) {
        elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('$') + 1));
      }
 else {
        elementName=Introspector.decapitalize(javaClass.getName().substring(javaClass.getName().lastIndexOf('.') + 1));
      }
    }
    String rootNamespace=rootElemAnnotation.namespace();
    QName rootElemName=null;
    if (rootNamespace.equals(""String_Node_Str"")) {
      rootElemName=new QName(namespaceInfo.getNamespace(),elementName);
    }
 else {
      rootElemName=new QName(rootNamespace,elementName);
    }
    schemaInfo.getGlobalElementDeclarations().add(rootElemName);
    ElementDeclaration declaration=new ElementDeclaration(rootElemName,javaClass,javaClass.getRawName());
    this.globalElements.put(rootElemName,declaration);
  }
  return schemaInfo;
}"
68259,"public ElementDeclaration(QName name,String javaTypeName){
  this.elementName=name;
  this.javaTypeName=javaTypeName;
  this.substitutableElements=new ArrayList<ElementDeclaration>();
}","public ElementDeclaration(QName name,JavaClass javaType,String javaTypeName){
  this.elementName=name;
  this.javaTypeName=javaTypeName;
  this.javaType=javaType;
  this.substitutableElements=new ArrayList<ElementDeclaration>();
}"
68260,"public void processGlobalElements(Project project){
  if (this.globalElements == null) {
    return;
  }
  Iterator<QName> keys=this.globalElements.keySet().iterator();
  while (keys.hasNext()) {
    QName next=keys.next();
    ElementDeclaration nextElement=this.globalElements.get(next);
    String nextClassName=nextElement.getJavaTypeName();
    TypeInfo type=this.typeInfo.get(nextClassName);
    if (type != null) {
      if (next.getNamespaceURI() == null || next.getNamespaceURI().equals(""String_Node_Str"")) {
        type.getDescriptor().addRootElement(next.getLocalPart());
      }
 else {
        XMLDescriptor descriptor=type.getDescriptor();
        String uri=next.getNamespaceURI();
        String prefix=descriptor.getNamespaceResolver().resolveNamespaceURI(uri);
        if (prefix == null) {
          prefix=descriptor.getNamespaceResolver().generatePrefix();
          descriptor.getNamespaceResolver().put(prefix,uri);
        }
        descriptor.addRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
    }
 else     if (helper.isBuiltInJavaType(helper.getJavaClass(nextClassName))) {
      String namespaceUri=next.getNamespaceURI();
      if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
        namespaceUri=""String_Node_Str"";
      }
      Class generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,nextClassName);
      this.generatedClassesToQNames.put(generatedClass,next);
      XMLDescriptor desc=new XMLDescriptor();
      desc.setJavaClass(generatedClass);
      XMLDirectMapping mapping=new XMLDirectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
      desc.addMapping(mapping);
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolver();
        String prefix=resolver.resolveNamespaceURI(namespaceUri);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new NamespaceResolver();
          String prefix=resolver.generatePrefix();
          resolver.put(prefix,namespaceUri);
          desc.setNamespaceResolver(resolver);
          desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
        }
      }
      project.addDescriptor(desc);
    }
  }
}","public void processGlobalElements(Project project){
  if (this.globalElements == null) {
    return;
  }
  Iterator<QName> keys=this.globalElements.keySet().iterator();
  while (keys.hasNext()) {
    QName next=keys.next();
    ElementDeclaration nextElement=this.globalElements.get(next);
    String nextClassName=nextElement.getJavaTypeName();
    TypeInfo type=this.typeInfo.get(nextClassName);
    if (type != null) {
      if (next.getNamespaceURI() == null || next.getNamespaceURI().equals(""String_Node_Str"")) {
        type.getDescriptor().addRootElement(next.getLocalPart());
      }
 else {
        XMLDescriptor descriptor=type.getDescriptor();
        String uri=next.getNamespaceURI();
        String prefix=descriptor.getNamespaceResolver().resolveNamespaceURI(uri);
        if (prefix == null) {
          prefix=descriptor.getNamespaceResolver().generatePrefix();
          descriptor.getNamespaceResolver().put(prefix,uri);
        }
        descriptor.addRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
    }
 else     if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
      String namespaceUri=next.getNamespaceURI();
      if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
        namespaceUri=""String_Node_Str"";
      }
      Class generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,nextClassName);
      this.generatedClassesToQNames.put(generatedClass,next);
      XMLDescriptor desc=new XMLDescriptor();
      desc.setJavaClass(generatedClass);
      XMLDirectMapping mapping=new XMLDirectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
      desc.addMapping(mapping);
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolver();
        String prefix=resolver.resolveNamespaceURI(namespaceUri);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new NamespaceResolver();
          String prefix=resolver.generatePrefix();
          resolver.put(prefix,namespaceUri);
          desc.setNamespaceResolver(resolver);
          desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
        }
      }
      project.addDescriptor(desc);
    }
  }
}"
68261,"private Object setValue(Setting setting,Object value){
  if (null == setting.getMapping()) {
    if (setting.getName() != null && setting.getName().equals(TEXT_XPATH)) {
      dataObject._setModified(true);
      Object oldValue=setting.getValue();
      setting.setValue(value,false);
      return oldValue;
    }
    List<Setting> children=setting.getChildren();
    if (null != children && children.size() > 0) {
      return setValue(children.get(0),value);
    }
    return null;
  }
  Property property=getProperty(setting);
  Object oldValue=setting.getValue();
  if (property.isMany()) {
    List listValue=dataObject.getList(property);
    int valueIndex=listValue.indexOf(oldValue);
    listValue.remove(valueIndex);
    listValue.add(valueIndex,value);
    setting.setValue(value,false);
  }
 else {
    if (dataObject.isSet(property)) {
      updateSettingWithoutModifyingDataObject(property,dataObject.get(property),value);
      setting.setValue(value);
    }
 else {
      addSettingWithoutModifyingDataObject(property,value);
    }
    dataObject.setPropertyInternal((SDOProperty)property,value,false);
  }
  return oldValue;
}","private Object setValue(Setting setting,Object value){
  if (null == setting.getMapping()) {
    if (setting.getName() != null && setting.getName().equals(TEXT_XPATH)) {
      dataObject._setModified(true);
      Object oldValue=setting.getValue();
      setting.setValue(value,false);
      return oldValue;
    }
    List<Setting> children=setting.getChildren();
    if (null != children && children.size() > 0) {
      return setValue(children.get(0),value);
    }
    return null;
  }
  Property property=getProperty(setting);
  Object oldValue=setting.getValue();
  if (property.isMany()) {
    List listValue=dataObject.getList(property);
    int valueIndex=listValue.indexOf(oldValue);
    ((ListWrapper)listValue).remove(oldValue,property.isContainment(),false);
    ((ListWrapper)listValue).add(valueIndex,value,false);
    setting.setValue(value,false);
  }
 else {
    if (dataObject.isSet(property)) {
      updateSettingWithoutModifyingDataObject(property,dataObject.get(property),value);
      setting.setValue(value);
    }
 else {
      addSettingWithoutModifyingDataObject(property,value);
    }
    dataObject.setPropertyInternal((SDOProperty)property,value,false);
  }
  return oldValue;
}"
68262,"/** 
 * Set a property's value.
 * @param lastProperty      the property to queries.
 * @param lastDataObject    the DataObject, owner of the queried property
 * @param numInLastProperty the index number in the value list of the above property
 * @param value             the value to be set as the target property's value
 * @param convertValue     boolean used for set if we should convert the value 
 */
private void set(Property lastProperty,DataObject lastDataObject,int numInLastProperty,Object value,boolean convertValue){
  if (numInLastProperty == -1) {
    if (lastDataObject != null) {
      if (convertValue) {
        value=DataHelper.INSTANCE.convert(lastProperty,value);
      }
      lastDataObject.set(lastProperty,value);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    List objects=lastDataObject.getList(lastProperty);
    if (convertValue) {
      value=DataHelper.INSTANCE.convert(lastProperty.getType(),value);
    }
    objects.set(numInLastProperty,value);
  }
}","/** 
 * Set a property's value.
 * @param lastProperty      the property to queries.
 * @param lastDataObject    the DataObject, owner of the queried property
 * @param numInLastProperty the index number in the value list of the above property
 * @param value             the value to be set as the target property's value
 * @param convertValue     boolean used for set if we should convert the value 
 */
private void set(Property lastProperty,DataObject lastDataObject,int numInLastProperty,Object value,boolean convertValue){
  if (numInLastProperty == -1) {
    if (lastDataObject != null) {
      if (convertValue) {
        value=DataHelper.INSTANCE.convert(lastProperty,value);
      }
      lastDataObject.set(lastProperty,value);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    List objects=lastDataObject.getList(lastProperty);
    if (convertValue) {
      value=DataHelper.INSTANCE.convert(lastProperty.getType(),value);
    }
    Sequence seq=lastDataObject.getSequence();
    if (seq != null) {
      seq.setValue(numInLastProperty,value);
    }
 else {
      objects.set(numInLastProperty,value);
    }
  }
}"
68263,"public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic) {
        Property property=null;
        if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElements.class)) {
          property=new ChoiceProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
          XmlElement[] elements=xmlElements.value();
          ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
          for (int i=0; i < elements.length; i++) {
            XmlElement next=elements[i];
            Property choiceProp=new Property();
            String name=next.name();
            String namespace=next.namespace();
            QName qName=null;
            if (!namespace.equals(""String_Node_Str"")) {
              qName=new QName(namespace,name);
            }
 else {
              qName=new QName(name);
            }
            choiceProp.setPropertyName(property.getPropertyName());
            choiceProp.setType(helper.getJavaClass(next.type()));
            choiceProp.setSchemaName(qName);
            choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
            choiceProp.setElement(property.getElement());
            choiceProperties.add(choiceProp);
          }
          ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
        }
 else         if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlAnyElement.class)) {
          property=new AnyProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation((JavaHasAnnotations)nextField,XmlAnyElement.class);
          ((AnyProperty)property).setLax(anyElement.lax());
          ((AnyProperty)property).setDomHandlerClass(anyElement.value());
        }
 else         if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElementRef.class) || helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElementRefs.class)) {
          property=new ReferenceProperty(helper);
          XmlElementRef[] elementRefs;
          XmlElementRef ref=(XmlElementRef)helper.getAnnotation((JavaHasAnnotations)nextField,XmlElementRef.class);
          if (ref != null) {
            elementRefs=new XmlElementRef[]{ref};
          }
 else {
            XmlElementRefs refs=(XmlElementRefs)helper.getAnnotation((JavaHasAnnotations)nextField,XmlElementRefs.class);
            elementRefs=refs.value();
            info.setHasElementRefs(true);
          }
          for (          XmlElementRef nextRef : elementRefs) {
            String name=nextRef.name();
            String namespace=nextRef.namespace();
            if (namespace.equals(""String_Node_Str"")) {
              namespace=""String_Node_Str"";
            }
            QName qname=new QName(namespace,name);
            ElementDeclaration referencedElement=this.globalElements.get(qname);
            if (referencedElement != null) {
              addReferencedElement((ReferenceProperty)property,referencedElement);
            }
          }
        }
 else {
          property=new Property(helper);
          property.setElement((JavaHasAnnotations)nextField);
        }
        JavaClass ptype=(JavaClass)nextField.getResolvedType();
        property.setType(ptype);
        if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
          property.setAdapterClass(adapter.value());
        }
 else         if (info.getAdaptersByClass().get(ptype) != null) {
          property.setAdapterClass(info.getAdapterClass(ptype));
        }
        if (property.hasAdapterClass()) {
          ptype=property.getValueType();
        }
        property.setGenericType(helper.getGenericType(nextField));
        property.setPropertyName(nextField.getName());
        if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
          property.setIsSwaAttachmentRef(true);
          property.setSchemaType(XMLConstants.SWA_REF_QNAME);
        }
 else         if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
          property.setIsMtomAttachment(true);
          property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
          property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
          QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
          property.setSchemaType(schemaTypeQname);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
          property.setIsAttribute(true);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
          property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
        }
        property.setSchemaName(getQNameForProperty(Introspector.decapitalize(nextField.getName()),nextField));
        properties.add(property);
      }
    }
  }
  return properties;
}","public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (!Modifier.isStatic(nextField.getModifiers()) && (Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic) {
        Property property=null;
        if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElements.class)) {
          property=new ChoiceProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
          XmlElement[] elements=xmlElements.value();
          ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
          for (int i=0; i < elements.length; i++) {
            XmlElement next=elements[i];
            Property choiceProp=new Property();
            String name=next.name();
            String namespace=next.namespace();
            QName qName=null;
            if (!namespace.equals(""String_Node_Str"")) {
              qName=new QName(namespace,name);
            }
 else {
              qName=new QName(name);
            }
            choiceProp.setPropertyName(property.getPropertyName());
            choiceProp.setType(helper.getJavaClass(next.type()));
            choiceProp.setSchemaName(qName);
            choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
            choiceProp.setElement(property.getElement());
            choiceProperties.add(choiceProp);
          }
          ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
        }
 else         if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlAnyElement.class)) {
          property=new AnyProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation((JavaHasAnnotations)nextField,XmlAnyElement.class);
          ((AnyProperty)property).setLax(anyElement.lax());
          ((AnyProperty)property).setDomHandlerClass(anyElement.value());
        }
 else         if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElementRef.class) || helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElementRefs.class)) {
          property=new ReferenceProperty(helper);
          XmlElementRef[] elementRefs;
          XmlElementRef ref=(XmlElementRef)helper.getAnnotation((JavaHasAnnotations)nextField,XmlElementRef.class);
          if (ref != null) {
            elementRefs=new XmlElementRef[]{ref};
          }
 else {
            XmlElementRefs refs=(XmlElementRefs)helper.getAnnotation((JavaHasAnnotations)nextField,XmlElementRefs.class);
            elementRefs=refs.value();
            info.setHasElementRefs(true);
          }
          for (          XmlElementRef nextRef : elementRefs) {
            String name=nextRef.name();
            String namespace=nextRef.namespace();
            if (namespace.equals(""String_Node_Str"")) {
              namespace=""String_Node_Str"";
            }
            QName qname=new QName(namespace,name);
            ElementDeclaration referencedElement=this.globalElements.get(qname);
            if (referencedElement != null) {
              addReferencedElement((ReferenceProperty)property,referencedElement);
            }
          }
        }
 else {
          property=new Property(helper);
          property.setElement((JavaHasAnnotations)nextField);
        }
        JavaClass ptype=(JavaClass)nextField.getResolvedType();
        property.setType(ptype);
        if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
          property.setAdapterClass(adapter.value());
        }
 else         if (info.getAdaptersByClass().get(ptype) != null) {
          property.setAdapterClass(info.getAdapterClass(ptype));
        }
        if (property.hasAdapterClass()) {
          ptype=property.getValueType();
        }
        property.setGenericType(helper.getGenericType(nextField));
        property.setPropertyName(nextField.getName());
        if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
          property.setIsSwaAttachmentRef(true);
          property.setSchemaType(XMLConstants.SWA_REF_QNAME);
        }
 else         if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
          property.setIsMtomAttachment(true);
          property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
          property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
          QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
          property.setSchemaType(schemaTypeQname);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
          property.setIsAttribute(true);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
          property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
        }
        property.setSchemaName(getQNameForProperty(Introspector.decapitalize(nextField.getName()),nextField));
        properties.add(property);
      }
    }
  }
  return properties;
}"
68264,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> getMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if ((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3) || ((areEquals((JavaClass)next.getReturnType(),Boolean.class) || areEquals((JavaClass)next.getReturnType(),boolean.class)) && (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 2))) {
      if ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic) {
        getMethods.add(next);
      }
    }
  }
  for (int i=0; i < getMethods.size(); i++) {
    JavaMethod getMethod=getMethods.get(i);
    String propertyName=""String_Node_Str"";
    if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(3);
    }
 else     if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(2);
    }
    propertyName=Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1);
    String setMethodName=""String_Node_Str"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
    JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
    JavaMethod setMethod=cls.getMethod(setMethodName,paramTypes);
    JavaMethod propertyMethod=null;
    if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
      if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
        propertyMethod=setMethod;
      }
    }
 else {
      if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
        propertyMethod=getMethod;
      }
    }
    Property property=null;
    if (helper.isAnnotationPresent(propertyMethod,XmlElements.class)) {
      property=new ChoiceProperty(helper);
    }
 else     if (helper.isAnnotationPresent(propertyMethod,XmlAnyElement.class)) {
      property=new AnyProperty(helper);
    }
 else     if (helper.isAnnotationPresent(propertyMethod,XmlElementRef.class) || helper.isAnnotationPresent(propertyMethod,XmlElementRefs.class)) {
      property=new ReferenceProperty(helper);
    }
 else {
      property=new Property(helper);
    }
    property.setElement(propertyMethod);
    property.setSchemaName(getQNameForProperty(propertyName,propertyMethod));
    property.setPropertyName(propertyName);
    property.setType((JavaClass)getMethod.getReturnType());
    property.setGenericType(helper.getGenericReturnType(getMethod));
    property.setGetMethodName(getMethod.getName());
    property.setSetMethodName(setMethodName);
    property.setMethodProperty(true);
    JavaClass ptype=property.getType();
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (property.hasAdapterClass()) {
      ptype=property.getValueType();
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
      QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
      property.setSchemaType(schemaTypeQname);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
      property.setIsSwaAttachmentRef(true);
      property.setSchemaType(XMLConstants.SWA_REF_QNAME);
    }
 else     if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
      property.setIsMtomAttachment(true);
      property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
      property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
      property.setIsAttribute(true);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElements.class)) {
      XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
      XmlElement[] elements=xmlElements.value();
      ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
      for (int j=0; j < elements.length; j++) {
        XmlElement next=elements[j];
        Property choiceProp=new Property();
        String name=next.name();
        String namespace=next.namespace();
        QName qName=null;
        if (!namespace.equals(""String_Node_Str"")) {
          qName=new QName(namespace,name);
        }
 else {
          qName=new QName(name);
        }
        choiceProp.setPropertyName(property.getPropertyName());
        choiceProp.setType(helper.getJavaClass(next.type()));
        choiceProp.setSchemaName(qName);
        choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
        choiceProp.setElement(property.getElement());
        choiceProperties.add(choiceProp);
      }
      ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAnyElement.class)) {
      XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation(property.getElement(),XmlAnyElement.class);
      ((AnyProperty)property).setDomHandlerClass(anyElement.value());
      ((AnyProperty)property).setLax(anyElement.lax());
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElementRef.class) || helper.isAnnotationPresent(property.getElement(),XmlElementRefs.class)) {
      XmlElementRef[] elementRefs;
      XmlElementRef ref=(XmlElementRef)helper.getAnnotation(property.getElement(),XmlElementRef.class);
      if (ref != null) {
        elementRefs=new XmlElementRef[]{ref};
      }
 else {
        XmlElementRefs refs=(XmlElementRefs)helper.getAnnotation(property.getElement(),XmlElementRefs.class);
        elementRefs=refs.value();
        info.setHasElementRefs(true);
      }
      for (      XmlElementRef nextRef : elementRefs) {
        String name=nextRef.name();
        String namespace=nextRef.namespace();
        if (namespace.equals(""String_Node_Str"")) {
          namespace=""String_Node_Str"";
        }
        QName qname=new QName(namespace,name);
        ElementDeclaration referencedElement=this.globalElements.get(qname);
        if (referencedElement != null) {
          ((ReferenceProperty)property).addReferencedElement(referencedElement);
        }
      }
    }
    if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
      properties.add(property);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
      property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
    }
  }
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> getMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if ((next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 3) || ((areEquals((JavaClass)next.getReturnType(),Boolean.class) || areEquals((JavaClass)next.getReturnType(),boolean.class)) && (next.getName().startsWith(""String_Node_Str"") && next.getName().length() > 2))) {
      if (!Modifier.isStatic(next.getModifiers()) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        getMethods.add(next);
      }
    }
  }
  for (int i=0; i < getMethods.size(); i++) {
    JavaMethod getMethod=getMethods.get(i);
    String propertyName=""String_Node_Str"";
    if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(3);
    }
 else     if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(2);
    }
    propertyName=Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1);
    String setMethodName=""String_Node_Str"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
    JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
    JavaMethod setMethod=cls.getMethod(setMethodName,paramTypes);
    JavaMethod propertyMethod=null;
    if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
      if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
        propertyMethod=setMethod;
      }
    }
 else {
      if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
        propertyMethod=getMethod;
      }
    }
    Property property=null;
    if (helper.isAnnotationPresent(propertyMethod,XmlElements.class)) {
      property=new ChoiceProperty(helper);
    }
 else     if (helper.isAnnotationPresent(propertyMethod,XmlAnyElement.class)) {
      property=new AnyProperty(helper);
    }
 else     if (helper.isAnnotationPresent(propertyMethod,XmlElementRef.class) || helper.isAnnotationPresent(propertyMethod,XmlElementRefs.class)) {
      property=new ReferenceProperty(helper);
    }
 else {
      property=new Property(helper);
    }
    property.setElement(propertyMethod);
    property.setSchemaName(getQNameForProperty(propertyName,propertyMethod));
    property.setPropertyName(propertyName);
    property.setType((JavaClass)getMethod.getReturnType());
    property.setGenericType(helper.getGenericReturnType(getMethod));
    property.setGetMethodName(getMethod.getName());
    property.setSetMethodName(setMethodName);
    property.setMethodProperty(true);
    JavaClass ptype=property.getType();
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (property.hasAdapterClass()) {
      ptype=property.getValueType();
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
      QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
      property.setSchemaType(schemaTypeQname);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
      property.setIsSwaAttachmentRef(true);
      property.setSchemaType(XMLConstants.SWA_REF_QNAME);
    }
 else     if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
      property.setIsMtomAttachment(true);
      property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
      property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
      property.setIsAttribute(true);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElements.class)) {
      XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
      XmlElement[] elements=xmlElements.value();
      ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
      for (int j=0; j < elements.length; j++) {
        XmlElement next=elements[j];
        Property choiceProp=new Property();
        String name=next.name();
        String namespace=next.namespace();
        QName qName=null;
        if (!namespace.equals(""String_Node_Str"")) {
          qName=new QName(namespace,name);
        }
 else {
          qName=new QName(name);
        }
        choiceProp.setPropertyName(property.getPropertyName());
        choiceProp.setType(helper.getJavaClass(next.type()));
        choiceProp.setSchemaName(qName);
        choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
        choiceProp.setElement(property.getElement());
        choiceProperties.add(choiceProp);
      }
      ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAnyElement.class)) {
      XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation(property.getElement(),XmlAnyElement.class);
      ((AnyProperty)property).setDomHandlerClass(anyElement.value());
      ((AnyProperty)property).setLax(anyElement.lax());
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElementRef.class) || helper.isAnnotationPresent(property.getElement(),XmlElementRefs.class)) {
      XmlElementRef[] elementRefs;
      XmlElementRef ref=(XmlElementRef)helper.getAnnotation(property.getElement(),XmlElementRef.class);
      if (ref != null) {
        elementRefs=new XmlElementRef[]{ref};
      }
 else {
        XmlElementRefs refs=(XmlElementRefs)helper.getAnnotation(property.getElement(),XmlElementRefs.class);
        elementRefs=refs.value();
        info.setHasElementRefs(true);
      }
      for (      XmlElementRef nextRef : elementRefs) {
        String name=nextRef.name();
        String namespace=nextRef.namespace();
        if (namespace.equals(""String_Node_Str"")) {
          namespace=""String_Node_Str"";
        }
        QName qname=new QName(namespace,name);
        ElementDeclaration referencedElement=this.globalElements.get(qname);
        if (referencedElement != null) {
          ((ReferenceProperty)property).addReferencedElement(referencedElement);
        }
      }
    }
    if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
      properties.add(property);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
      property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
    }
  }
  return properties;
}"
68265,"/** 
 * INTERNAL: This method will be the entry point for threads attempting to acquire locks for all objects that have a changeset.  This method will hand off the processing of the deadlock algorithm to other member methods.  The mergeManager must be the active mergemanager for the calling thread. Returns true if all required locks were acquired
 */
public void acquireRequiredLocks(MergeManager mergeManager,UnitOfWorkChangeSet changeSet){
  if (!MergeManager.LOCK_ON_MERGE) {
    return;
  }
  boolean locksToAcquire=true;
  boolean isForDistributedMerge=false;
  try {
    AbstractSession session=mergeManager.getSession();
    if (session.isUnitOfWork()) {
      session=((UnitOfWorkImpl)session).getParent();
    }
 else {
      isForDistributedMerge=true;
    }
    while (locksToAcquire) {
      locksToAcquire=false;
      Iterator classIterator=changeSet.getObjectChanges().keySet().iterator();
      while (classIterator.hasNext()) {
        String objectClassName=(String)classIterator.next();
        Hashtable changeSetTable=(Hashtable)changeSet.getObjectChanges().get(objectClassName);
        Iterator changeSetIterator=changeSetTable.keySet().iterator();
        Class objectClass=null;
        while (changeSetIterator.hasNext()) {
          ObjectChangeSet objectChangeSet=(ObjectChangeSet)changeSetIterator.next();
          if (objectChangeSet.getCacheKey() == null) {
            continue;
          }
          if (objectClass == null) {
            objectClass=objectChangeSet.getClassType(session);
          }
          ClassDescriptor descriptor=session.getDescriptor(objectClass);
          if (descriptor.shouldIsolateObjectsInUnitOfWork()) {
            break;
          }
          CacheKey activeCacheKey=attemptToAcquireLock(objectClass,objectChangeSet.getCacheKey(),session);
          if (activeCacheKey == null) {
            if (this.prevailingQueue.getFirst() == mergeManager) {
              activeCacheKey=waitOnObjectLock(objectClass,objectChangeSet.getCacheKey(),session);
              mergeManager.getAcquiredLocks().add(activeCacheKey);
            }
 else {
              releaseAllAcquiredLocks(mergeManager);
              activeCacheKey=session.getIdentityMapAccessorInstance().getCacheKeyForObject(objectChangeSet.getCacheKey().getKey(),objectClass,descriptor);
              if (session.shouldLog(SessionLog.FINER,SessionLog.CACHE)) {
                Object[] params=new Object[3];
                params[0]=objectClass;
                params[1]=objectChangeSet.getCacheKey() != null ? objectChangeSet.getCacheKey().getKey() : new Vector();
                params[2]=Thread.currentThread().getName();
                session.log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"",params,null,true);
              }
              if (mergeManager.getWriteLockQueued() == null) {
                mergeManager.setQueueNode(this.prevailingQueue.addLast(mergeManager));
              }
              mergeManager.setWriteLockQueued(objectChangeSet.getCacheKey());
              try {
                if (activeCacheKey != null) {
synchronized (activeCacheKey.getMutex()) {
                    if (activeCacheKey.getMutex().isAcquired() && (activeCacheKey.getMutex().getActiveThread() != Thread.currentThread())) {
                      activeCacheKey.getMutex().wait();
                    }
                  }
                }
              }
 catch (              InterruptedException exception) {
                throw org.eclipse.persistence.exceptions.ConcurrencyException.waitWasInterrupted(exception.getMessage());
              }
              locksToAcquire=true;
              break;
            }
          }
 else {
            objectChangeSet.setActiveCacheKey(activeCacheKey);
            mergeManager.getAcquiredLocks().add(activeCacheKey);
          }
        }
        if (locksToAcquire) {
          break;
        }
      }
    }
  }
 catch (  RuntimeException exception) {
    releaseAllAcquiredLocks(mergeManager);
    throw exception;
  }
 finally {
    if (mergeManager.getWriteLockQueued() != null) {
      this.prevailingQueue.remove(mergeManager.getQueueNode());
      mergeManager.setWriteLockQueued(null);
    }
  }
}","/** 
 * INTERNAL: This method will be the entry point for threads attempting to acquire locks for all objects that have a changeset.  This method will hand off the processing of the deadlock algorithm to other member methods.  The mergeManager must be the active mergemanager for the calling thread. Returns true if all required locks were acquired
 */
public void acquireRequiredLocks(MergeManager mergeManager,UnitOfWorkChangeSet changeSet){
  if (!MergeManager.LOCK_ON_MERGE) {
    return;
  }
  boolean locksToAcquire=true;
  boolean isForDistributedMerge=false;
  try {
    AbstractSession session=mergeManager.getSession();
    if (session.isUnitOfWork()) {
      session=((UnitOfWorkImpl)session).getParent();
    }
 else {
      isForDistributedMerge=true;
    }
    while (locksToAcquire) {
      locksToAcquire=false;
      Iterator classIterator=changeSet.getObjectChanges().keySet().iterator();
      while (classIterator.hasNext()) {
        String objectClassName=(String)classIterator.next();
        Hashtable changeSetTable=(Hashtable)changeSet.getObjectChanges().get(objectClassName);
        Iterator changeSetIterator=changeSetTable.keySet().iterator();
        Class objectClass=null;
        while (changeSetIterator.hasNext()) {
          ObjectChangeSet objectChangeSet=(ObjectChangeSet)changeSetIterator.next();
          if (objectChangeSet.getCacheKey() == null) {
            continue;
          }
          if (objectClass == null) {
            objectClass=objectChangeSet.getClassType(session);
          }
          ClassDescriptor descriptor=session.getDescriptor(objectClass);
          if (descriptor.shouldIsolateObjectsInUnitOfWork()) {
            break;
          }
          CacheKey activeCacheKey=attemptToAcquireLock(objectClass,objectChangeSet.getCacheKey(),session);
          if (activeCacheKey == null) {
            if (this.prevailingQueue.getFirst() == mergeManager) {
              activeCacheKey=waitOnObjectLock(objectClass,objectChangeSet.getCacheKey(),session);
              mergeManager.getAcquiredLocks().add(activeCacheKey);
            }
 else {
              releaseAllAcquiredLocks(mergeManager);
              activeCacheKey=session.getIdentityMapAccessorInstance().getCacheKeyForObject(objectChangeSet.getCacheKey().getKey(),objectClass,descriptor);
              if (session.shouldLog(SessionLog.FINER,SessionLog.CACHE)) {
                Object[] params=new Object[3];
                params[0]=objectClass;
                params[1]=objectChangeSet.getCacheKey() != null ? objectChangeSet.getCacheKey().getKey() : new Vector();
                params[2]=Thread.currentThread().getName();
                session.log(SessionLog.FINER,SessionLog.CACHE,""String_Node_Str"",params,null,true);
              }
              if (mergeManager.getWriteLockQueued() == null) {
synchronized (this.prevailingQueue) {
                  mergeManager.setQueueNode(this.prevailingQueue.addLast(mergeManager));
                }
              }
              mergeManager.setWriteLockQueued(objectChangeSet.getCacheKey());
              try {
                if (activeCacheKey != null) {
synchronized (activeCacheKey.getMutex()) {
                    if (activeCacheKey.getMutex().isAcquired() && (activeCacheKey.getMutex().getActiveThread() != Thread.currentThread())) {
                      activeCacheKey.getMutex().wait();
                    }
                  }
                }
              }
 catch (              InterruptedException exception) {
                throw org.eclipse.persistence.exceptions.ConcurrencyException.waitWasInterrupted(exception.getMessage());
              }
              locksToAcquire=true;
              break;
            }
          }
 else {
            objectChangeSet.setActiveCacheKey(activeCacheKey);
            mergeManager.getAcquiredLocks().add(activeCacheKey);
          }
        }
        if (locksToAcquire) {
          break;
        }
      }
    }
  }
 catch (  RuntimeException exception) {
    releaseAllAcquiredLocks(mergeManager);
    throw exception;
  }
 finally {
    if (mergeManager.getWriteLockQueued() != null) {
synchronized (this.prevailingQueue) {
        this.prevailingQueue.remove(mergeManager.getQueueNode());
      }
      mergeManager.setWriteLockQueued(null);
    }
  }
}"
68266,"/** 
 * INTERNAL: Process ValueStore changes on any set/delete/detach/unset when logging is on.
 */
private void updateChangeSummaryWithOriginalValues(){
  if (isLogging() && (!((SDOChangeSummary)getChangeSummary()).isDirty(this))) {
    ((SDOChangeSummary)getChangeSummary()).getOriginalValueStores().put(this,_getCurrentValueStore());
    currentValueStore=_getCurrentValueStore().copy();
    if (getType().isSequenced()) {
      SDOSequence copySequence=((SDOSequence)getSequence()).copy();
      ((SDOChangeSummary)getChangeSummary()).getOriginalSequences().put(this,copySequence);
    }
  }
}","/** 
 * INTERNAL: Process ValueStore changes on any set/delete/detach/unset when logging is on.
 */
private void updateChangeSummaryWithOriginalValues(){
  if (isLogging() && (!((SDOChangeSummary)getChangeSummary()).isDirty(this)) && (!((SDOChangeSummary)getChangeSummary()).isCreated(this))) {
    ((SDOChangeSummary)getChangeSummary()).getOriginalValueStores().put(this,_getCurrentValueStore());
    currentValueStore=_getCurrentValueStore().copy();
    if (getType().isSequenced()) {
      SDOSequence copySequence=((SDOSequence)getSequence()).copy();
      ((SDOChangeSummary)getChangeSummary()).getOriginalSequences().put(this,copySequence);
    }
  }
}"
68267,"protected void internalTestReadTransactionIsolation(boolean shouldOriginalBeInParentCache,boolean shouldUpdateAll,boolean shouldRefresh,boolean shouldFlush){
  String firstName=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  Query deleteQuery=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"");
  beginTransaction(em);
  try {
    deleteQuery.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  em.clear();
  String lastNameOriginal=""String_Node_Str"";
  int salaryOriginal=0;
  Employee employee=new Employee();
  employee.setFirstName(firstName);
  employee.setLastName(lastNameOriginal);
  employee.setSalary(salaryOriginal);
  beginTransaction(em);
  try {
    em.persist(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  if (!shouldOriginalBeInParentCache) {
    clearCache(""String_Node_Str"");
  }
  em.clear();
  Employee employeeUOW=null;
  int salaryNew=100;
  String lastNameNew=""String_Node_Str"";
  beginTransaction(em);
  Query selectQuery=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"");
  try {
    if (shouldRefresh) {
      String lastNameAlternative=""String_Node_Str"";
      int salaryAlternative=50;
      employeeUOW=(Employee)selectQuery.getSingleResult();
      employeeUOW.setLastName(lastNameAlternative);
      employeeUOW.setSalary(salaryAlternative);
    }
    int nUpdated;
    if (shouldUpdateAll) {
      nUpdated=em.createQuery(""String_Node_Str"" + lastNameNew + ""String_Node_Str""+ firstName+ ""String_Node_Str"").setFlushMode(FlushModeType.AUTO).executeUpdate();
    }
 else {
      nUpdated=em.createNativeQuery(""String_Node_Str"" + lastNameNew + ""String_Node_Str""+ firstName+ ""String_Node_Str"").setFlushMode(FlushModeType.AUTO).executeUpdate();
    }
    assertTrue(""String_Node_Str"" + nUpdated + ""String_Node_Str"",nUpdated == 1);
    if (shouldFlush) {
      selectQuery.setFlushMode(FlushModeType.AUTO);
    }
 else {
      selectQuery.setFlushMode(FlushModeType.COMMIT);
    }
    if (shouldRefresh) {
      selectQuery.setHint(""String_Node_Str"",Boolean.TRUE);
      employeeUOW=(Employee)selectQuery.getSingleResult();
      selectQuery.setHint(""String_Node_Str"",Boolean.FALSE);
    }
 else {
      employeeUOW=(Employee)selectQuery.getSingleResult();
    }
    assertTrue(""String_Node_Str"" + employeeUOW.getLastName() + ""String_Node_Str""+ lastNameNew+ ""String_Node_Str"",employeeUOW.getLastName().equals(lastNameNew));
    employeeUOW.setSalary(salaryNew);
    employeeUOW=(Employee)selectQuery.getSingleResult();
    assertTrue(""String_Node_Str"" + employeeUOW.getSalary() + ""String_Node_Str""+ salaryNew+ ""String_Node_Str"",employeeUOW.getSalary() == salaryNew);
    commitTransaction(em);
  }
 catch (  Throwable ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    if (Error.class.isAssignableFrom(ex.getClass())) {
      throw (Error)ex;
    }
 else {
      throw (RuntimeException)ex;
    }
  }
  Employee employeeFoundAfterTransaction=em.find(Employee.class,employeeUOW.getId());
  assertTrue(""String_Node_Str"" + employeeFoundAfterTransaction.getLastName() + ""String_Node_Str""+ lastNameNew+ ""String_Node_Str"",employeeFoundAfterTransaction.getLastName().equals(lastNameNew));
  assertTrue(""String_Node_Str"" + employeeFoundAfterTransaction.getSalary() + ""String_Node_Str""+ salaryNew+ ""String_Node_Str"",employeeFoundAfterTransaction.getSalary() == salaryNew);
  beginTransaction(em);
  try {
    deleteQuery.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  closeEntityManager(em);
}","protected void internalTestReadTransactionIsolation(boolean shouldOriginalBeInParentCache,boolean shouldUpdateAll,boolean shouldRefresh,boolean shouldFlush){
  String firstName=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  em.clear();
  String lastNameOriginal=""String_Node_Str"";
  int salaryOriginal=0;
  Employee employee=new Employee();
  employee.setFirstName(firstName);
  employee.setLastName(lastNameOriginal);
  employee.setSalary(salaryOriginal);
  beginTransaction(em);
  try {
    em.persist(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  if (!shouldOriginalBeInParentCache) {
    clearCache(""String_Node_Str"");
  }
  em.clear();
  Employee employeeUOW=null;
  int salaryNew=100;
  String lastNameNew=""String_Node_Str"";
  beginTransaction(em);
  Query selectQuery=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"");
  try {
    if (shouldRefresh) {
      String lastNameAlternative=""String_Node_Str"";
      int salaryAlternative=50;
      employeeUOW=(Employee)selectQuery.getSingleResult();
      employeeUOW.setLastName(lastNameAlternative);
      employeeUOW.setSalary(salaryAlternative);
    }
    int nUpdated;
    if (shouldUpdateAll) {
      nUpdated=em.createQuery(""String_Node_Str"" + lastNameNew + ""String_Node_Str""+ firstName+ ""String_Node_Str"").setFlushMode(FlushModeType.AUTO).executeUpdate();
    }
 else {
      nUpdated=em.createNativeQuery(""String_Node_Str"" + lastNameNew + ""String_Node_Str""+ firstName+ ""String_Node_Str"").setFlushMode(FlushModeType.AUTO).executeUpdate();
    }
    assertTrue(""String_Node_Str"" + nUpdated + ""String_Node_Str"",nUpdated == 1);
    if (shouldFlush) {
      selectQuery.setFlushMode(FlushModeType.AUTO);
    }
 else {
      selectQuery.setFlushMode(FlushModeType.COMMIT);
    }
    if (shouldRefresh) {
      selectQuery.setHint(""String_Node_Str"",Boolean.TRUE);
      employeeUOW=(Employee)selectQuery.getSingleResult();
      selectQuery.setHint(""String_Node_Str"",Boolean.FALSE);
    }
 else {
      employeeUOW=(Employee)selectQuery.getSingleResult();
    }
    assertTrue(""String_Node_Str"" + employeeUOW.getLastName() + ""String_Node_Str""+ lastNameNew+ ""String_Node_Str"",employeeUOW.getLastName().equals(lastNameNew));
    employeeUOW.setSalary(salaryNew);
    employeeUOW=(Employee)selectQuery.getSingleResult();
    assertTrue(""String_Node_Str"" + employeeUOW.getSalary() + ""String_Node_Str""+ salaryNew+ ""String_Node_Str"",employeeUOW.getSalary() == salaryNew);
    commitTransaction(em);
  }
 catch (  Throwable ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    if (Error.class.isAssignableFrom(ex.getClass())) {
      throw (Error)ex;
    }
 else {
      throw (RuntimeException)ex;
    }
  }
  Employee employeeFoundAfterTransaction=em.find(Employee.class,employeeUOW.getId());
  assertTrue(""String_Node_Str"" + employeeFoundAfterTransaction.getLastName() + ""String_Node_Str""+ lastNameNew+ ""String_Node_Str"",employeeFoundAfterTransaction.getLastName().equals(lastNameNew));
  assertTrue(""String_Node_Str"" + employeeFoundAfterTransaction.getSalary() + ""String_Node_Str""+ salaryNew+ ""String_Node_Str"",employeeFoundAfterTransaction.getSalary() == salaryNew);
  beginTransaction(em);
  try {
    em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  closeEntityManager(em);
}"
68268,"public void testFindDeleteAllPersist(){
  String firstName=""String_Node_Str"";
  Employee empWithAddress=new Employee();
  empWithAddress.setFirstName(firstName);
  empWithAddress.setLastName(""String_Node_Str"");
  empWithAddress.setAddress(new Address());
  Employee empWithoutAddress=new Employee();
  empWithoutAddress.setFirstName(firstName);
  empWithoutAddress.setLastName(""String_Node_Str"");
  EntityManager em=createEntityManager(""String_Node_Str"");
  Query deleteQuery=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"");
  beginTransaction(em);
  try {
    deleteQuery.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    em.persist(empWithAddress);
    em.persist(empWithoutAddress);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  em.clear();
  beginTransaction(em);
  try {
    Employee empWithAddressFound=em.find(Employee.class,empWithAddress.getId());
    Employee empWithoutAddressFound=em.find(Employee.class,empWithoutAddress.getId());
    int nDeleted=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  em.clear();
  beginTransaction(em);
  try {
    Employee newEmpWithoutAddress=new Employee();
    newEmpWithoutAddress.setFirstName(firstName);
    newEmpWithoutAddress.setLastName(""String_Node_Str"");
    newEmpWithoutAddress.setId(empWithoutAddress.getId());
    em.persist(newEmpWithoutAddress);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    Employee newEmpWithAddress=new Employee();
    newEmpWithAddress.setFirstName(firstName);
    newEmpWithAddress.setLastName(""String_Node_Str"");
    newEmpWithAddress.setId(empWithAddress.getId());
    em.persist(newEmpWithAddress);
    fail(""String_Node_Str"");
  }
 catch (  EntityExistsException ex) {
  }
 finally {
    rollbackTransaction(em);
  }
  beginTransaction(em);
  deleteQuery.executeUpdate();
  commitTransaction(em);
}","public void testFindDeleteAllPersist(){
  String firstName=""String_Node_Str"";
  Employee empWithAddress=new Employee();
  empWithAddress.setFirstName(firstName);
  empWithAddress.setLastName(""String_Node_Str"");
  empWithAddress.setAddress(new Address());
  Employee empWithoutAddress=new Employee();
  empWithoutAddress.setFirstName(firstName);
  empWithoutAddress.setLastName(""String_Node_Str"");
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    em.persist(empWithAddress);
    em.persist(empWithoutAddress);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  clearCache(""String_Node_Str"");
  em.clear();
  beginTransaction(em);
  try {
    Employee empWithAddressFound=em.find(Employee.class,empWithAddress.getId());
    Employee empWithoutAddressFound=em.find(Employee.class,empWithoutAddress.getId());
    int nDeleted=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  em.clear();
  beginTransaction(em);
  try {
    Employee newEmpWithoutAddress=new Employee();
    newEmpWithoutAddress.setFirstName(firstName);
    newEmpWithoutAddress.setLastName(""String_Node_Str"");
    newEmpWithoutAddress.setId(empWithoutAddress.getId());
    em.persist(newEmpWithoutAddress);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    Employee newEmpWithAddress=new Employee();
    newEmpWithAddress.setFirstName(firstName);
    newEmpWithAddress.setLastName(""String_Node_Str"");
    newEmpWithAddress.setId(empWithAddress.getId());
    em.persist(newEmpWithAddress);
    fail(""String_Node_Str"");
  }
 catch (  EntityExistsException ex) {
  }
 finally {
    rollbackTransaction(em);
  }
  beginTransaction(em);
  em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
  commitTransaction(em);
}"
68269,"private String getPrefixStringForURI(String uri){
  String prefix=getPrefixForURI(uri);
  if (prefix == null) {
    return ""String_Node_Str"";
  }
 else {
    return prefix + ""String_Node_Str"";
  }
}","private String getPrefixStringForURI(String uri){
  if (null == uri || SDOConstants.EMPTY_STRING.equals(uri)) {
    return SDOConstants.EMPTY_STRING;
  }
  String prefix=getPrefixForURI(uri);
  if (prefix == null) {
    return SDOConstants.EMPTY_STRING;
  }
 else {
    return prefix + ""String_Node_Str"";
  }
}"
68270,"private void processSchema(Schema parsedSchema){
  rootSchema=parsedSchema;
  initialize();
  namespaceResolvers.add(rootSchema.getNamespaceResolver());
  processIncludes(rootSchema.getIncludes());
  processImports(rootSchema.getImports());
  processGlobalAttributes(rootSchema);
  processGlobalElements(rootSchema);
  processGlobalSimpleTypes(rootSchema);
  processGlobalComplexTypes(rootSchema);
  postProcessing();
}","private void processSchema(Schema parsedSchema){
  rootSchema=parsedSchema;
  initialize();
  namespaceResolvers.add(rootSchema.getNamespaceResolver());
  processIncludes(rootSchema.getIncludes());
  processImports(rootSchema.getImports());
  preprocessGlobalTypes(rootSchema);
  processGlobalAttributes(rootSchema);
  processGlobalElements(rootSchema);
  processGlobalSimpleTypes(rootSchema);
  processGlobalComplexTypes(rootSchema);
  postProcessing();
}"
68271,"private SDOType getOrCreateType(String uri,String typeName,String xsdLocalName){
  String lookupName=typeName;
  int index=lookupName.indexOf(':');
  if (index != -1) {
    lookupName=lookupName.substring(index + 1,lookupName.length());
  }
  SDOTypeHelper sdoTypeHelper=(SDOTypeHelper)aHelperContext.getTypeHelper();
  SDOType returnType=(SDOType)sdoTypeHelper.getType(uri,lookupName);
  if (returnType == null) {
    QName qname=new QName(uri,lookupName);
    returnType=(SDOType)getGeneratedTypes().get(qname);
    if (returnType == null) {
      returnType=new SDOType(uri,lookupName,sdoTypeHelper);
      returnType.setXsd(true);
      returnType.setXsdLocalName(xsdLocalName);
    }
  }
  return returnType;
}","private SDOType getOrCreateType(String uri,String typeName,String xsdLocalName){
  String lookupName=typeName;
  int index=lookupName.indexOf(':');
  if (index != -1) {
    lookupName=lookupName.substring(index + 1,lookupName.length());
  }
  SDOTypeHelper sdoTypeHelper=(SDOTypeHelper)aHelperContext.getTypeHelper();
  SDOType returnType=(SDOType)sdoTypeHelper.getType(uri,lookupName);
  if (returnType == null) {
    QName qname=new QName(uri,lookupName);
    returnType=(SDOType)getGeneratedTypes().get(qname);
    if (returnType == null) {
      QName xsdQName=new QName(uri,xsdLocalName);
      returnType=getTypeForXSDQName(xsdQName);
      if (returnType == null) {
        returnType=new SDOType(uri,lookupName,sdoTypeHelper);
        returnType.setXsd(true);
        returnType.setXsdLocalName(xsdLocalName);
      }
 else {
        returnType.setQName(qname);
      }
    }
  }
  return returnType;
}"
68272,"private void startNewSimpleType(String targetNamespace,String sdoTypeName,String xsdLocalName,SimpleType simpleType){
  SDOType currentType=createSDOTypeForName(targetNamespace,sdoTypeName,xsdLocalName);
  currentType.setDataType(true);
  SDOTypeHelper typeHelper=((SDOTypeHelper)aHelperContext.getTypeHelper());
  QName baseTypeQName=null;
  if (simpleType.getRestriction() != null) {
    String baseType=simpleType.getRestriction().getBaseType();
    int colonIndex=baseType.indexOf(""String_Node_Str"");
    if (colonIndex != -1) {
      baseType=baseType.substring(colonIndex + 1,baseType.length());
    }
    baseTypeQName=new QName(XMLConstants.SCHEMA_URL,baseType);
    SDOType baseSDOType=typeHelper.getSDOTypeFromXSDType(baseTypeQName);
    currentType.addBaseType(baseSDOType);
    currentType.setInstanceClass(baseSDOType.getInstanceClass());
  }
  SDOWrapperType wrapperType=new SDOWrapperType(currentType,sdoTypeName,typeHelper,baseTypeQName);
  typeHelper.getWrappersHashMap().put(currentType.getQName(),wrapperType);
  typeHelper.getTypesHashMap().put(wrapperType.getQName(),wrapperType);
  typeHelper.getInterfacesToSDOTypeHashMap().put(wrapperType.getXmlDescriptor().getInterfacePolicy().getParentInterfaces().firstElement(),wrapperType);
  ArrayList list=new ArrayList(1);
  list.add(wrapperType);
  ((SDOXMLHelper)aHelperContext.getXMLHelper()).addDescriptors(list);
  if (simpleType.getAnnotation() != null) {
    currentType.setAppInfoElements(simpleType.getAnnotation().getAppInfo());
  }
}","private void startNewSimpleType(String targetNamespace,String defaultNamespace,String sdoTypeName,String xsdLocalName,SimpleType simpleType){
  SDOType currentType=createSDOTypeForName(targetNamespace,sdoTypeName,xsdLocalName);
  currentType.setDataType(true);
  SDOTypeHelper typeHelper=((SDOTypeHelper)aHelperContext.getTypeHelper());
  QName baseTypeQName=null;
  if (simpleType.getRestriction() != null) {
    String baseType=simpleType.getRestriction().getBaseType();
    baseTypeQName=this.getQNameForString(defaultNamespace,baseType);
    SDOType baseSDOType=getTypeForXSDQName(baseTypeQName);
    currentType.addBaseType(baseSDOType);
    currentType.setInstanceClass(baseSDOType.getInstanceClass());
  }
  SDOWrapperType wrapperType=new SDOWrapperType(currentType,sdoTypeName,typeHelper,baseTypeQName);
  typeHelper.getWrappersHashMap().put(currentType.getQName(),wrapperType);
  typeHelper.getTypesHashMap().put(wrapperType.getQName(),wrapperType);
  typeHelper.getInterfacesToSDOTypeHashMap().put(wrapperType.getXmlDescriptor().getInterfacePolicy().getParentInterfaces().firstElement(),wrapperType);
  ArrayList list=new ArrayList(1);
  list.add(wrapperType);
  ((SDOXMLHelper)aHelperContext.getXMLHelper()).addDescriptors(list);
  if (simpleType.getAnnotation() != null) {
    currentType.setAppInfoElements(simpleType.getAnnotation().getAppInfo());
  }
}"
68273,"private void processGlobalSimpleType(String targetNamespace,String defaultNamespace,SimpleType simpleType){
  QName qname=new QName(targetNamespace,simpleType.getName());
  Object processed=processedSimpleTypes.get(qname);
  if (processed == null) {
    processSimpleType(targetNamespace,defaultNamespace,simpleType.getName(),simpleType);
    processedSimpleTypes.put(qname,simpleType);
  }
}","private void processGlobalSimpleType(String targetNamespace,String defaultNamespace,SimpleType simpleType){
  QName qname=new QName(targetNamespace,simpleType.getName());
  if (!processedSimpleTypes.containsKey(qname)) {
    processSimpleType(targetNamespace,defaultNamespace,simpleType.getName(),simpleType);
    processedSimpleTypes.put(qname,simpleType);
  }
}"
68274,"public SDOTypesGenerator(HelperContext aContext){
  processedComplexTypes=new HashMap();
  processedSimpleTypes=new HashMap();
  processedElements=new HashMap();
  processedAttributes=new HashMap();
  itemNameToSDOName=new HashMap();
  namespaceResolvers=new ArrayList();
  this.aHelperContext=aContext;
}","public SDOTypesGenerator(HelperContext aContext){
  generatedTypesByXsdQName=new HashMap<QName,SDOType>();
  processedComplexTypes=new HashMap();
  processedSimpleTypes=new HashMap();
  processedElements=new HashMap();
  processedAttributes=new HashMap();
  itemNameToSDOName=new HashMap();
  namespaceResolvers=new ArrayList();
  this.aHelperContext=aContext;
}"
68275,"/** 
 * INTERNAL: This function is referenced by processImport or processInclude possibly recursively
 * @param Include theImportOrInclude
 * @throws Exception
 */
private void processImportIncludeInternal(Include theImportOrInclude) throws Exception {
  if (theImportOrInclude.getSchema() != null) {
    SDOTypesGenerator generator=new SDOTypesGenerator(aHelperContext);
    generator.setGeneratedTypes(getGeneratedTypes());
    generator.setGeneratedGlobalElements(getGeneratedGlobalElements());
    generator.setGeneratedGlobalAttributes(getGeneratedGlobalAttributes());
    generator.setIsImportProcessor(true);
    java.util.List<Type> importedTypes=generator.define(theImportOrInclude.getSchema(),isReturnAllTypes(),isProcessImports());
    processedComplexTypes.putAll(generator.processedComplexTypes);
    processedSimpleTypes.putAll(generator.processedSimpleTypes);
    processedElements.putAll(generator.processedElements);
    processedAttributes.putAll(generator.processedAttributes);
    if (null != importedTypes) {
      for (int i=0, size=importedTypes.size(); i < size; i++) {
        Type nextType=importedTypes.get(i);
        String name=nextType.getName();
        QName qname=new QName(nextType.getURI(),name);
        getGeneratedTypes().put(qname,nextType);
      }
    }
    Iterator<QName> globalPropsIter=generator.getGeneratedGlobalElements().keySet().iterator();
    while (globalPropsIter.hasNext()) {
      QName nextKey=globalPropsIter.next();
      getGeneratedGlobalElements().put(nextKey,generator.getGeneratedGlobalElements().get(nextKey));
    }
    globalPropsIter=generator.getGeneratedGlobalAttributes().keySet().iterator();
    while (globalPropsIter.hasNext()) {
      QName nextKey=globalPropsIter.next();
      getGeneratedGlobalAttributes().put(nextKey,generator.getGeneratedGlobalAttributes().get(nextKey));
    }
    Iterator<Type> globalRefsIter=generator.getGlobalRefs().keySet().iterator();
    while (globalRefsIter.hasNext()) {
      Type nextKey=globalRefsIter.next();
      getGlobalRefs().put(nextKey,generator.getGlobalRefs().get(nextKey));
    }
  }
}","/** 
 * INTERNAL: This function is referenced by processImport or processInclude possibly recursively
 * @param Include theImportOrInclude
 * @throws Exception
 */
private void processImportIncludeInternal(Include theImportOrInclude) throws Exception {
  if (theImportOrInclude.getSchema() != null) {
    SDOTypesGenerator generator=new SDOTypesGenerator(aHelperContext);
    generator.setGeneratedTypes(getGeneratedTypes());
    generator.setGeneratedTypesByXsdQName(getGeneratedTypesByXsdQName());
    generator.setGeneratedGlobalElements(getGeneratedGlobalElements());
    generator.setGeneratedGlobalAttributes(getGeneratedGlobalAttributes());
    generator.setIsImportProcessor(true);
    java.util.List<Type> importedTypes=generator.define(theImportOrInclude.getSchema(),isReturnAllTypes(),isProcessImports());
    processedComplexTypes.putAll(generator.processedComplexTypes);
    processedSimpleTypes.putAll(generator.processedSimpleTypes);
    processedElements.putAll(generator.processedElements);
    processedAttributes.putAll(generator.processedAttributes);
    if (null != importedTypes) {
      for (int i=0, size=importedTypes.size(); i < size; i++) {
        Type nextType=importedTypes.get(i);
        String name=nextType.getName();
        QName qname=new QName(nextType.getURI(),name);
        getGeneratedTypes().put(qname,nextType);
      }
    }
    Iterator<QName> globalPropsIter=generator.getGeneratedGlobalElements().keySet().iterator();
    while (globalPropsIter.hasNext()) {
      QName nextKey=globalPropsIter.next();
      getGeneratedGlobalElements().put(nextKey,generator.getGeneratedGlobalElements().get(nextKey));
    }
    globalPropsIter=generator.getGeneratedGlobalAttributes().keySet().iterator();
    while (globalPropsIter.hasNext()) {
      QName nextKey=globalPropsIter.next();
      getGeneratedGlobalAttributes().put(nextKey,generator.getGeneratedGlobalAttributes().get(nextKey));
    }
    Iterator<Type> globalRefsIter=generator.getGlobalRefs().keySet().iterator();
    while (globalRefsIter.hasNext()) {
      Type nextKey=globalRefsIter.next();
      getGlobalRefs().put(nextKey,generator.getGlobalRefs().get(nextKey));
    }
  }
}"
68276,"private boolean startSimpleType(String targetNamespace,String defaultNamespace,String name,String xsdLocalName,SimpleType simpleType){
  boolean alreadyExists=typesExists(targetNamespace,name);
  if (!alreadyExists) {
    startNewSimpleType(targetNamespace,name,xsdLocalName,simpleType);
    return true;
  }
  return false;
}","private boolean startSimpleType(String targetNamespace,String defaultNamespace,String name,String xsdLocalName,SimpleType simpleType){
  boolean alreadyExists=typesExists(targetNamespace,name);
  if (!alreadyExists) {
    startNewSimpleType(targetNamespace,defaultNamespace,name,xsdLocalName,simpleType);
    return true;
  }
  return false;
}"
68277,"public static TestSuite getInsertObjectTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  PopulationManager manager=PopulationManager.getDefaultManager();
  suite.addTest(new CollectionInsertObjectTest(CollectionInsertObjectTest.buildInstanceToInsert()));
  return suite;
}","public static TestSuite getInsertObjectTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  PopulationManager manager=PopulationManager.getDefaultManager();
  suite.addTest(new CollectionInsertObjectTest(CollectionInsertObjectTest.buildInstanceToInsert()));
  suite.addTest(new CollectionInsertDetectionTest());
  return suite;
}"
68278,"/** 
 * ADVANCED: The unit of work performs validations such as, ensuring multiple copies of the same object don't exist in the same unit of work, ensuring deleted objects are not referred after commit, ensures that objects from the parent cache are not refered in the unit of work cache. The level of validation can be increased or decreased for debugging purposes or under advanced situation where the application requires/desires to violate clone identity in the unit of work. It is strongly suggested that clone identity not be violate in the unit of work.
 */
public boolean shouldPerformNoValidation(){
  return getValidationLevel() == None;
}","/** 
 * ADVANCED: The unit of work performs validations such as, ensuring multiple copies of the same object don't exist in the same unit of work, ensuring deleted objects are not referred after commit, ensures that objects from the parent cache are not refered in the unit of work cache. The level of validation can be increased or decreased for debugging purposes or under advanced situation where the application requires/desires to violate clone identity in the unit of work. It is strongly suggested that clone identity not be violated in the unit of work.
 */
public boolean shouldPerformNoValidation(){
  return getValidationLevel() == None;
}"
68279,"/** 
 * INTERNAL: Traverse the object to find references to objects not registered in this unit of work.
 */
public void discoverUnregisteredNewObjects(Map clones,final Map knownNewObjects,final Map unregisteredExistingObjects,Map visitedObjects){
  DescriptorIterator iterator=new DescriptorIterator(){
    public void iterate(    Object object){
      if (isClassReadOnly(object.getClass(),this.getCurrentDescriptor())) {
        this.setShouldBreak(true);
        return;
      }
      if (isSmartMerge() && isOriginalNewObject(object)) {
        return;
      }
 else       if (!isObjectRegistered(object)) {
        if ((shouldPerformNoValidation()) && (!shouldValidateExistence() || checkForUnregisteredExistingObject(object))) {
          unregisteredExistingObjects.put(object,object);
          this.setShouldBreak(true);
          return;
        }
        knownNewObjects.put(object,object);
      }
    }
  }
;
  setUnregisteredExistingObjects(unregisteredExistingObjects);
  iterator.setVisitedObjects(visitedObjects);
  iterator.setResult(knownNewObjects);
  iterator.setSession(this);
  iterator.setShouldIterateOverWrappedObjects(false);
  for (Iterator clonesEnum=clones.keySet().iterator(); clonesEnum.hasNext(); ) {
    iterator.startIterationOn(clonesEnum.next());
  }
}","/** 
 * INTERNAL: Traverse the object to find references to objects not registered in this unit of work.
 */
public void discoverUnregisteredNewObjects(Map clones,final Map knownNewObjects,final Map unregisteredExistingObjects,Map visitedObjects){
  DescriptorIterator iterator=new DescriptorIterator(){
    public void iterate(    Object object){
      if (isClassReadOnly(object.getClass(),this.getCurrentDescriptor())) {
        this.setShouldBreak(true);
        return;
      }
      if (isSmartMerge() && isOriginalNewObject(object)) {
        return;
      }
 else       if (!isObjectRegistered(object)) {
        if (shouldPerformNoValidation() && checkForUnregisteredExistingObject(object)) {
          unregisteredExistingObjects.put(object,object);
          this.setShouldBreak(true);
          return;
        }
        knownNewObjects.put(object,object);
      }
    }
  }
;
  setUnregisteredExistingObjects(unregisteredExistingObjects);
  iterator.setVisitedObjects(visitedObjects);
  iterator.setResult(knownNewObjects);
  iterator.setSession(this);
  iterator.setShouldIterateOverWrappedObjects(false);
  for (Iterator clonesEnum=clones.keySet().iterator(); clonesEnum.hasNext(); ) {
    iterator.startIterationOn(clonesEnum.next());
  }
}"
68280,"/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(nextXPath));
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(refValue));
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
          unsetValueList=(List)xmlConversionManager.convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          NodeList children=nextNode.getChildNodes();
          for (int p=0; p < children.getLength(); p++) {
            Node n=children.item(p);
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            SDOProperty nextProp=(SDOProperty)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    newList.add(targetDataObject.getDataObject(convertXPathToSDOPath(sdoRef)));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
    }
    initialize();
  }
}","/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(nextXPath));
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(refValue));
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
          unsetValueList=(List)xmlConversionManager.convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          NodeList children=nextNode.getChildNodes();
          for (int p=0; p < children.getLength(); p++) {
            Node n=children.item(p);
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            SDOProperty nextProp=(SDOProperty)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    newList.add(targetDataObject.getDataObject(convertXPathToSDOPath(sdoRef)));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
      Iterator created=nextCS.getCreated().iterator();
      while (created.hasNext()) {
        SDODataObject next=(SDODataObject)created.next();
        Property containmentProperty=next.getContainmentProperty();
        if (containmentProperty != null && containmentProperty.isMany()) {
          SDODataObject container=(SDODataObject)next.getContainer();
          ListWrapper list=(ListWrapper)container.get(containmentProperty);
          if (!(nextCS.getOriginalElements().containsKey(list))) {
            nextCS.getOriginalElements().put(list,new ArrayList());
          }
        }
      }
    }
    initialize();
  }
}"
68281,"private boolean importExists(java.util.List imports,String schemaName){
  for (int i=0; i < imports.size(); i++) {
    Import nextImport=(Import)imports.get(i);
    if (nextImport.getSchemaLocation() != null && nextImport.getSchemaLocation().equals(schemaName)) {
      return true;
    }
  }
  return false;
}","private boolean importExists(java.util.List imports,String schemaName){
  for (int i=0; i < imports.size(); i++) {
    Include nextImport=(Include)imports.get(i);
    if (nextImport.getSchemaLocation() != null && nextImport.getSchemaLocation().equals(schemaName)) {
      return true;
    }
  }
  return false;
}"
68282,"/** 
 * INTERNAL: Convenience method that sets up class indicator and @sdoRef attribute.
 * @param xdesc
 * @param pCls
 */
private void addClassIndicator(XMLDescriptor xdesc,Class pCls){
  XMLField field=(XMLField)getXmlDescriptor().buildField(""String_Node_Str"");
  xdesc.getInheritancePolicy().setClassIndicatorField(field);
  String parentIndicator=getName();
  String parentPrefix=xdesc.getNamespaceResolver().resolveNamespaceURI(getURI());
  if (parentPrefix != null) {
    parentIndicator=parentPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + parentIndicator;
  }
  xdesc.getInheritancePolicy().addClassIndicator(pCls,parentIndicator);
  if (xdesc.getMappingForAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME) == null) {
    String sdoPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(SDOConstants.SDO_URL);
    XMLDirectMapping sdoRefMapping=new XMLDirectMapping();
    sdoRefMapping.setAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME);
    XMLField xmlField=new XMLField(""String_Node_Str"" + sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT+ SDOConstants.CHANGESUMMARY_REF);
    xmlField.getXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    xmlField.getLastXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    sdoRefMapping.setField(xmlField);
    xdesc.addMapping(sdoRefMapping);
  }
}","/** 
 * INTERNAL: Convenience method that sets up class indicator and @sdoRef attribute.
 * @param xdesc
 * @param pCls
 */
private void addClassIndicator(XMLDescriptor xdesc,Class pCls,boolean isInheritanceRoot){
  XMLField field=(XMLField)getXmlDescriptor().buildField(""String_Node_Str"");
  xdesc.getInheritancePolicy().setClassIndicatorField(field);
  String parentIndicator=getName();
  String parentPrefix=xdesc.getNamespaceResolver().resolveNamespaceURI(getURI());
  if (parentPrefix != null) {
    parentIndicator=parentPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + parentIndicator;
  }
  xdesc.getInheritancePolicy().addClassIndicator(pCls,parentIndicator);
  if (isInheritanceRoot) {
    InheritanceNodeValue inheritanceNodeValue=new InheritanceNodeValue();
    inheritanceNodeValue.setInheritancePolicy(xdesc.getInheritancePolicy());
    ((TreeObjectBuilder)xmlDescriptor.getObjectBuilder()).addChild(field.getXPathFragment(),inheritanceNodeValue,xmlDescriptor.getNamespaceResolver());
  }
  if (xdesc.getMappingForAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME) == null) {
    String sdoPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(SDOConstants.SDO_URL);
    XMLDirectMapping sdoRefMapping=new XMLDirectMapping();
    sdoRefMapping.setAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME);
    XMLField xmlField=new XMLField(""String_Node_Str"" + sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT+ SDOConstants.CHANGESUMMARY_REF);
    xmlField.getXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    xmlField.getLastXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    sdoRefMapping.setField(xmlField);
    xdesc.addMapping(sdoRefMapping);
  }
}"
68283,"public void setupInheritance(SDOType parentType){
  if (parentType == null) {
    addClassIndicator(getXmlDescriptor(),getImplClass());
  }
 else {
    if ((parentType.getURI() != null) && (!parentType.getURI().equals(SDOConstants.SDO_URL))) {
      if (!parentType.getXmlDescriptor().hasInheritance()) {
        addClassIndicator(parentType.getXmlDescriptor(),parentType.getImplClass());
      }
      XMLDescriptor parentDescriptor=(XMLDescriptor)parentType.getXmlDescriptor().getInheritancePolicy().getRootParentDescriptor();
      NamespaceResolver parentNR=parentDescriptor.getNonNullNamespaceResolver();
      if (parentNR != null) {
        for (int i=0; i < parentNR.getNamespaces().size(); i++) {
          Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
          if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
            getXmlDescriptor().getNonNullNamespaceResolver().put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
          }
        }
      }
      if (getInstanceClassName() != null) {
        String indicator=getName();
        String prefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(getURI());
        if (prefix == null) {
          prefix=getXmlDescriptor().getNamespaceResolver().resolveNamespaceURI(getURI());
          if (prefix != null) {
            parentDescriptor.getNamespaceResolver().put(prefix,getURI());
          }
        }
        if (prefix != null) {
          indicator=prefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + indicator;
        }
        Class implClass=getImplClass();
        parentDescriptor.getInheritancePolicy().addClassIndicator(implClass,indicator);
        parentDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
        Class parentClass=parentType.getImplClass();
        getXmlDescriptor().getInheritancePolicy().setParentClass(parentClass);
        getXmlDescriptor().getInheritancePolicy().setParentDescriptor(parentType.getXmlDescriptor());
        parentType.getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
        getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      }
    }
  }
  for (int i=0; i < subTypes.size(); i++) {
    SDOType nextSubType=(SDOType)subTypes.get(i);
    if (!nextSubType.isDataType() && (nextSubType.getBaseTypes() != null) && (nextSubType.getBaseTypes().size() > 0)) {
      nextSubType.setupInheritance(this);
    }
  }
}","public void setupInheritance(SDOType parentType){
  if (parentType == null) {
    addClassIndicator(getXmlDescriptor(),getImplClass(),true);
  }
 else {
    if ((parentType.getURI() != null) && (!parentType.getURI().equals(SDOConstants.SDO_URL))) {
      if (!parentType.getXmlDescriptor().hasInheritance()) {
        addClassIndicator(parentType.getXmlDescriptor(),parentType.getImplClass(),false);
      }
      XMLDescriptor parentDescriptor=(XMLDescriptor)parentType.getXmlDescriptor().getInheritancePolicy().getRootParentDescriptor();
      NamespaceResolver parentNR=parentDescriptor.getNonNullNamespaceResolver();
      if (parentNR != null) {
        for (int i=0; i < parentNR.getNamespaces().size(); i++) {
          Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
          if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
            getXmlDescriptor().getNonNullNamespaceResolver().put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
          }
        }
      }
      if (getInstanceClassName() != null) {
        String indicator=getName();
        String prefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(getURI());
        if (prefix == null) {
          prefix=getXmlDescriptor().getNamespaceResolver().resolveNamespaceURI(getURI());
          if (prefix != null) {
            parentDescriptor.getNamespaceResolver().put(prefix,getURI());
          }
        }
        if (prefix != null) {
          indicator=prefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + indicator;
        }
        Class implClass=getImplClass();
        parentDescriptor.getInheritancePolicy().addClassIndicator(implClass,indicator);
        parentDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
        Class parentClass=parentType.getImplClass();
        getXmlDescriptor().getInheritancePolicy().setParentClass(parentClass);
        getXmlDescriptor().getInheritancePolicy().setParentDescriptor(parentType.getXmlDescriptor());
        parentType.getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
        getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      }
    }
  }
  for (int i=0; i < subTypes.size(); i++) {
    SDOType nextSubType=(SDOType)subTypes.get(i);
    if (!nextSubType.isDataType() && (nextSubType.getBaseTypes() != null) && (nextSubType.getBaseTypes().size() > 0)) {
      nextSubType.setupInheritance(this);
    }
  }
}"
68284,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
    }
    getWriter().write(Helper.cr());
    isStartElementOpen=true;
    for (int x=0; x < numberOfTabs; x++) {
      getWriter().write(TAB);
    }
    getWriter().write('<');
    getWriter().write(xPathFragment.getShortName());
    numberOfTabs++;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
    }
    if (!isLastEventText) {
      getWriter().write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        getWriter().write(TAB);
      }
    }
    isStartElementOpen=true;
    getWriter().write('<');
    getWriter().write(xPathFragment.getShortName());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
68285,"public void characters(char[] ch,int start,int length) throws SAXException {
  if (isProcessingCData) {
    cdata(new String(ch,start,length));
    return;
  }
  if (new String(ch).trim().length() == 0) {
    return;
  }
  super.characters(ch,start,length);
  complexType=false;
}","public void characters(char[] ch,int start,int length) throws SAXException {
  if (isProcessingCData) {
    cdata(new String(ch,start,length));
    return;
  }
  if (new String(ch).trim().length() == 0) {
    return;
  }
  super.characters(ch,start,length);
  isLastEventText=true;
  complexType=false;
}"
68286,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    numberOfTabs--;
    if (isStartElementOpen) {
      getWriter().write('/');
      getWriter().write('>');
      isStartElementOpen=false;
      return;
    }
    if (complexType) {
      getWriter().write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        getWriter().write(TAB);
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      getWriter().write('/');
      getWriter().write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      getWriter().write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        getWriter().write(TAB);
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
68287,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
    }
    getWriter().write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      getWriter().write(TAB);
    }
    getWriter().write('<');
    getWriter().write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
    }
    if (!isLastEventText) {
      getWriter().write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        getWriter().write(TAB);
      }
    }
    getWriter().write('<');
    getWriter().write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
68288,"public FormattedWriterRecord(){
  super();
  numberOfTabs=0;
  complexType=true;
}","public FormattedWriterRecord(){
  super();
  numberOfTabs=0;
  complexType=true;
  isLastEventText=false;
}"
68289,"/** 
 * INTERNAL:
 */
public void element(String namespaceURI,String localName,String qName){
  try {
    if (isStartElementOpen) {
      getWriter().write('>');
      isStartElementOpen=false;
    }
    getWriter().write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      getWriter().write(TAB);
    }
    super.element(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(String namespaceURI,String localName,String qName){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      getWriter().write('>');
      isStartElementOpen=false;
    }
    getWriter().write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      getWriter().write(TAB);
    }
    super.element(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
68290,"public DescriptorLevelDocumentPreservationPolicy(XMLContext ctx){
  context=ctx;
  this.setNodeOrderingPolicy(new AppendNewElementsOrderingPolicy());
}","public DescriptorLevelDocumentPreservationPolicy(){
  super();
  this.setNodeOrderingPolicy(new AppendNewElementsOrderingPolicy());
}"
68291,"@Override protected ClassDescriptor buildXMLLoginDescriptor(){
  ClassDescriptor descriptor=super.buildXMLLoginDescriptor();
  XMLDirectMapping equalNamespaceResolversMapping=new XMLDirectMapping();
  equalNamespaceResolversMapping.setAttributeName(""String_Node_Str"");
  equalNamespaceResolversMapping.setGetMethodName(""String_Node_Str"");
  equalNamespaceResolversMapping.setSetMethodName(""String_Node_Str"");
  equalNamespaceResolversMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  equalNamespaceResolversMapping.setNullValue(Boolean.TRUE);
  descriptor.addMapping(equalNamespaceResolversMapping);
  return descriptor;
}","@Override protected ClassDescriptor buildXMLLoginDescriptor(){
  ClassDescriptor descriptor=super.buildXMLLoginDescriptor();
  XMLDirectMapping equalNamespaceResolversMapping=new XMLDirectMapping();
  equalNamespaceResolversMapping.setAttributeName(""String_Node_Str"");
  equalNamespaceResolversMapping.setGetMethodName(""String_Node_Str"");
  equalNamespaceResolversMapping.setSetMethodName(""String_Node_Str"");
  equalNamespaceResolversMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  equalNamespaceResolversMapping.setNullValue(Boolean.TRUE);
  descriptor.addMapping(equalNamespaceResolversMapping);
  XMLCompositeObjectMapping documentPreservationPolicyMapping=new XMLCompositeObjectMapping();
  documentPreservationPolicyMapping.setReferenceClass(DocumentPreservationPolicy.class);
  documentPreservationPolicyMapping.setAttributeName(""String_Node_Str"");
  documentPreservationPolicyMapping.setGetMethodName(""String_Node_Str"");
  documentPreservationPolicyMapping.setSetMethodName(""String_Node_Str"");
  documentPreservationPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(documentPreservationPolicyMapping);
  return descriptor;
}"
68292,"@Override public void buildDescriptors(){
  super.buildDescriptors();
  addDescriptor(buildCursoredStreamPolicyDescriptor());
  addDescriptor(buildScrollableCursorPolicyDescriptor());
  addDescriptor(buildStoredProcedureArgumentDescriptor());
  addDescriptor(buildStoredProcedureOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureInOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureOutCursorArgumentsDescriptor());
  addDescriptor(buildStoredProcedureCallDescriptor());
  addDescriptor(buildStoredFunctionCallDescriptor());
  addDescriptor(buildSortedCollectionContainerPolicyDescriptor());
  addDescriptor(buildXMLAnyAttributeMappingDescriptor());
  addDescriptor(buildXMLCollectionReferenceMappingDescriptor());
  addDescriptor(buildXMLObjectReferenceMappingDescriptor());
  addDescriptor(buildXMLFragmentMappingDescriptor());
  addDescriptor(buildXMLFragmentCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceFieldToClassAssociationDescriptor());
  addDescriptor(buildXMLChoiceObjectMappingDescriptor());
  addDescriptor(buildAbstractNullPolicyDescriptor());
  addDescriptor(buildNullPolicyDescriptor());
  addDescriptor(buildIsSetNullPolicyDescriptor());
  addDescriptor(buildDatabaseTypeWrapperDescriptor());
  addDescriptor(buildJDBCTypeWrapperDescriptor());
  addDescriptor(buildSimplePLSQLTypeWrapperDescriptor());
  addDescriptor(buildComplexPLSQLTypeWrapperDescriptor());
  addDescriptor(buildPLSQLargumentDescriptor());
  addDescriptor(buildPLSQLStoredProcedureCallDescriptor());
  addDescriptor(buildPLSQLrecordDescriptor());
  addDescriptor(buildObjectRelationalDatabaseFieldDescriptor());
}","@Override public void buildDescriptors(){
  super.buildDescriptors();
  addDescriptor(buildCursoredStreamPolicyDescriptor());
  addDescriptor(buildScrollableCursorPolicyDescriptor());
  addDescriptor(buildStoredProcedureArgumentDescriptor());
  addDescriptor(buildStoredProcedureOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureInOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureOutCursorArgumentsDescriptor());
  addDescriptor(buildStoredProcedureCallDescriptor());
  addDescriptor(buildStoredFunctionCallDescriptor());
  addDescriptor(buildSortedCollectionContainerPolicyDescriptor());
  addDescriptor(buildXMLAnyAttributeMappingDescriptor());
  addDescriptor(buildXMLCollectionReferenceMappingDescriptor());
  addDescriptor(buildXMLObjectReferenceMappingDescriptor());
  addDescriptor(buildXMLFragmentMappingDescriptor());
  addDescriptor(buildXMLFragmentCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceFieldToClassAssociationDescriptor());
  addDescriptor(buildXMLChoiceObjectMappingDescriptor());
  addDescriptor(buildAbstractNullPolicyDescriptor());
  addDescriptor(buildNullPolicyDescriptor());
  addDescriptor(buildIsSetNullPolicyDescriptor());
  addDescriptor(buildDatabaseTypeWrapperDescriptor());
  addDescriptor(buildJDBCTypeWrapperDescriptor());
  addDescriptor(buildSimplePLSQLTypeWrapperDescriptor());
  addDescriptor(buildComplexPLSQLTypeWrapperDescriptor());
  addDescriptor(buildPLSQLargumentDescriptor());
  addDescriptor(buildPLSQLStoredProcedureCallDescriptor());
  addDescriptor(buildPLSQLrecordDescriptor());
  addDescriptor(buildObjectRelationalDatabaseFieldDescriptor());
  addDescriptor(buildDocumentPreservationPolicyDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyDescriptor());
  addDescriptor(buildXMLBinderPolicyDescriptor());
  addDescriptor(buildNodeOrderingPolicyDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyDescriptor());
}"
68293,"public XMLSessionConfigProject_11_1_1(){
  super();
  addDescriptor(buildOc4jJGroupsTransportManagerConfigDescriptor());
  addDescriptor(buildServerPlatformConfigDescriptorFor(Oc4jPlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(SunAS9PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_9_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_10_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_6_1_PlatformConfig.class));
}","public XMLSessionConfigProject_11_1_1(){
  super();
  addDescriptor(buildOc4jJGroupsTransportManagerConfigDescriptor());
  addDescriptor(buildServerPlatformConfigDescriptorFor(Oc4jPlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(SunAS9PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_9_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_10_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_6_1_PlatformConfig.class));
  addDescriptor(buildDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildXMLBinderPolicyConfigDescriptor());
  addDescriptor(buildNodeOrderingPolicyConfigDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyConfigDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyConfigDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyConfigDescriptor());
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE_NS_URI);
  namespaceResolver.put(""String_Node_Str"",W3C_XML_SCHEMA_NS_URI);
  for (Iterator descriptors=getDescriptors().values().iterator(); descriptors.hasNext(); ) {
    XMLDescriptor descriptor=(XMLDescriptor)descriptors.next();
    descriptor.setNamespaceResolver(namespaceResolver);
  }
}"
68294,"public void setupDocumentPreservationPolicy(DatabaseSession session){
  XMLLogin login=(XMLLogin)session.getDatasourceLogin();
  if (login.getDocumentPreservationPolicy() == null) {
    Iterator iterator=session.getProject().getOrderedDescriptors().iterator();
    while (iterator.hasNext()) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)iterator.next();
      if (xmlDescriptor.shouldPreserveDocument()) {
        login.setDocumentPreservationPolicy(new DescriptorLevelDocumentPreservationPolicy(this));
        break;
      }
    }
  }
  if (login.getDocumentPreservationPolicy() == null) {
    login.setDocumentPreservationPolicy(new NoDocumentPreservationPolicy());
  }
  if (login.getDocumentPreservationPolicy().shouldPreserveDocument() && !hasDocumentPreservation) {
    hasDocumentPreservation=true;
  }
}","public void setupDocumentPreservationPolicy(DatabaseSession session){
  XMLLogin login=(XMLLogin)session.getDatasourceLogin();
  if (login.getDocumentPreservationPolicy() == null) {
    Iterator iterator=session.getProject().getOrderedDescriptors().iterator();
    while (iterator.hasNext()) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)iterator.next();
      if (xmlDescriptor.shouldPreserveDocument()) {
        login.setDocumentPreservationPolicy(new DescriptorLevelDocumentPreservationPolicy());
        break;
      }
    }
  }
  if (login.getDocumentPreservationPolicy() == null) {
    login.setDocumentPreservationPolicy(new NoDocumentPreservationPolicy());
  }
  login.getDocumentPreservationPolicy().initialize(this);
  if (login.getDocumentPreservationPolicy().shouldPreserveDocument() && !hasDocumentPreservation) {
    hasDocumentPreservation=true;
  }
}"
68295,"/** 
 * INTERNAL: Indicates if a null value has been set or not.
 * @param object
 * @return boolean (isSet status)
 */
private boolean isSet(Object object){
  Boolean isSet;
  try {
    Class objectClass=object.getClass();
    PrivilegedGetMethod privilegedGetMethod=new PrivilegedGetMethod(objectClass,getIsSetMethodName(),getIsSetParameterTypes(),false,true);
    Method isSetMethod=privilegedGetMethod.run();
    PrivilegedMethodInvoker privilegedMethodInvoker=new PrivilegedMethodInvoker(isSetMethod,object,isSetParameters);
    isSet=(Boolean)privilegedMethodInvoker.run();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return isSet.booleanValue();
}","/** 
 * INTERNAL: Indicates if a null value has been set or not.
 * @param object
 * @return boolean (isSet status)
 */
private boolean isSet(Object object){
  try {
    Boolean isSet=(Boolean)PrivilegedAccessHelper.invokeMethod(getIsSetMethod(object.getClass()),object,isSetParameters);
    return isSet.booleanValue();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
68296,"/** 
 * INTERNAL:
 */
public void buildMapping(String mappingUri,int indexToAdd){
  if (getContainingType().isDataType()) {
    return;
  }
  if (getType().isChangeSummaryType()) {
    buildChangeSummaryMapping();
    addMappingToOwner(false,indexToAdd);
  }
 else   if (isNameCollision()) {
    xmlMapping=new XMLAnyCollectionMapping();
    xmlMapping.setAttributeName(getName());
    addMappingToOwner(true,indexToAdd);
  }
 else {
    boolean sdoMethodAccessor=true;
    if (!getType().isDataType()) {
      if (getType().isDataObjectType()) {
        ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
        if (getXsdType() != null && !getXsdType().equals(SDOConstants.ANY_TYPE_QNAME)) {
          if (isMany()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
        }
 else {
          sdoMethodAccessor=false;
          if (isMany()) {
            xmlMapping=buildXMLFragmentCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLFragmentMapping(mappingUri);
          }
        }
      }
 else {
        if (!((SDOType)getType()).isFinalized()) {
          ((SDOType)getType()).getNonFinalizedReferencingProps().add(this);
          ((SDOType)getType()).getNonFinalizedMappingURIs().add(mappingUri);
          return;
        }
        if (isSubstitutable()) {
          if (isMany()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
        }
 else         if (isMany()) {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCollectionReferenceMapping(mappingUri);
          }
        }
 else {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLObjectReferenceMapping(mappingUri);
          }
        }
      }
    }
 else {
      if (isMany()) {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME)))) {
          xmlMapping=buildXMLBinaryDataCollectionMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeDirectCollectionMapping(mappingUri);
          }
        }
      }
 else {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME)))) {
          xmlMapping=buildXMLBinaryDataMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLDirectMapping(mappingUri);
          }
        }
      }
    }
    addMappingToOwner(sdoMethodAccessor,indexToAdd);
  }
}","/** 
 * INTERNAL:
 */
public void buildMapping(String mappingUri,int indexToAdd){
  if (getContainingType().isDataType()) {
    return;
  }
  if (getType().isChangeSummaryType()) {
    buildChangeSummaryMapping();
    addMappingToOwner(false,indexToAdd);
  }
 else   if (isNameCollision()) {
    xmlMapping=new XMLAnyCollectionMapping();
    xmlMapping.setAttributeName(getName());
    addMappingToOwner(true,indexToAdd);
  }
 else {
    boolean sdoMethodAccessor=true;
    if (!getType().isDataType()) {
      if (getType().isDataObjectType()) {
        ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
        if (getXsdType() != null && !getXsdType().equals(SDOConstants.ANY_TYPE_QNAME)) {
          if (isMany()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
        }
 else {
          sdoMethodAccessor=false;
          if (isMany()) {
            xmlMapping=buildXMLFragmentCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLFragmentMapping(mappingUri);
          }
        }
      }
 else {
        if (!((SDOType)getType()).isFinalized()) {
          ((SDOType)getType()).getNonFinalizedReferencingProps().add(this);
          ((SDOType)getType()).getNonFinalizedMappingURIs().add(mappingUri);
          return;
        }
        if (isSubstitutable()) {
          if (isMany()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
        }
 else         if (isMany()) {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCollectionReferenceMapping(mappingUri);
          }
        }
 else {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLObjectReferenceMapping(mappingUri);
          }
        }
      }
    }
 else {
      if (isMany()) {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (isActivationAvailable && (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME))))) {
          xmlMapping=buildXMLBinaryDataCollectionMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeDirectCollectionMapping(mappingUri);
          }
        }
      }
 else {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (isActivationAvailable && (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")) || (getXsdType() != null && getXsdType().equals(XMLConstants.BASE_64_BINARY_QNAME))))) {
          xmlMapping=buildXMLBinaryDataMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLDirectMapping(mappingUri);
          }
        }
      }
    }
    addMappingToOwner(sdoMethodAccessor,indexToAdd);
  }
}"
68297,"public void setup(){
  super.setup();
  this.shouldCacheStatements=getSession().getPlatform().shouldCacheAllStatements();
  this.shouldBindAllParams=getSession().getPlatform().shouldBindAllParameters();
  getSession().getPlatform().setShouldCacheAllStatements(true);
  getSession().getPlatform().setShouldBindAllParameters(true);
}","public void setup(){
  super.setup();
  this.shouldCacheStatements=getSession().getPlatform().shouldCacheAllStatements();
  this.shouldBindAllParams=getSession().getPlatform().shouldBindAllParameters();
  getSession().getPlatform().setShouldCacheAllStatements(true);
  getSession().getPlatform().setShouldBindAllParameters(true);
  ((DatabaseAccessor)getAbstractSession().getAccessor()).clearStatementCache((AbstractSession)getSession());
}"
68298,"public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller) throws XMLMarshalException {
  super();
  try {
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(""String_Node_Str"",true);
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
68299,public void setXMLSchema(URL url) throws XMLPlatformException ;,public void setXMLSchema(Schema schema) throws XMLPlatformException ;
68300,"public void setXMLSchema(URL url) throws XMLPlatformException {
  if (null == url) {
    return;
  }
  try {
    documentBuilderFactory.setAttribute(SCHEMA_LANGUAGE,XML_SCHEMA);
    documentBuilderFactory.setAttribute(JAXP_SCHEMA_SOURCE,url.toString());
  }
 catch (  IllegalArgumentException e) {
  }
catch (  Exception e) {
    XMLPlatformException.xmlPlatformErrorResolvingXMLSchema(url,e);
  }
}","public void setXMLSchema(Schema schema) throws XMLPlatformException {
  documentBuilderFactory.setSchema(schema);
}"
68301,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=platform.equalsIgnoreCase(""String_Node_Str"");
  suite.addTestSuite(XMLMarshallerCreateTestCases.class);
  suite.addTestSuite(XMLMarshalTestCases.class);
  suite.addTestSuite(XMLMarshalFragmentTestCases.class);
  suite.addTestSuite(XMLUnmarshalTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(XMLMarshallerValidateRootTestCases.class);
  }
  suite.addTestSuite(XMLMarshallerValidationModeTestCases.class);
  suite.addTestSuite(SetSchemasTestCases.class);
  suite.addTest(StructureValidationTestSuite.suite());
  suite.addTestSuite(XMLUnmarshallerHandlerTestCases.class);
  suite.addTestSuite(XMLMarshallerNoDefaultRootTestCases.class);
  suite.addTestSuite(XMLContextConstructorUsingXMLSessionConfigLoader.class);
  suite.addTestSuite(XMLContextStoreXMLDescriptorSimpleType.class);
  suite.addTestSuite(UnmarshalChildElementNSTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=platform.equalsIgnoreCase(""String_Node_Str"");
  suite.addTestSuite(XMLMarshallerCreateTestCases.class);
  suite.addTestSuite(XMLMarshalTestCases.class);
  suite.addTestSuite(XMLMarshalFragmentTestCases.class);
  suite.addTestSuite(XMLUnmarshalTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(XMLMarshallerValidateRootTestCases.class);
  }
  suite.addTestSuite(XMLMarshallerValidationModeTestCases.class);
  suite.addTestSuite(SetSchemasTestCases.class);
  suite.addTestSuite(SetXmlSchemaTestCases.class);
  suite.addTest(StructureValidationTestSuite.suite());
  suite.addTestSuite(XMLUnmarshallerHandlerTestCases.class);
  suite.addTestSuite(XMLMarshallerNoDefaultRootTestCases.class);
  suite.addTestSuite(XMLContextConstructorUsingXMLSessionConfigLoader.class);
  suite.addTestSuite(XMLContextStoreXMLDescriptorSimpleType.class);
  suite.addTestSuite(UnmarshalChildElementNSTestCases.class);
  return suite;
}"
68302,"public void setSchema(Schema schema){
  this.schema=schema;
}","public void setSchema(Schema schema){
  this.xmlUnmarshaller.setSchema(schema);
}"
68303,"public Schema getSchema(){
  return schema;
}","public Schema getSchema(){
  return this.xmlUnmarshaller.getSchema();
}"
68304,"public void testConverFromObject_Date_GMTDefault(){
  String origDateString=""String_Node_Str"";
  Date aDate=dataHelper.toDate(origDateString);
  System.out.println(""String_Node_Str"" + aDate);
  DateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  String dateString=f.format(aDate);
  this.assertEquals(origDateString,dateString);
}","public void testConverFromObject_Date_GMTDefault(){
  String origDateString=""String_Node_Str"";
  Date aDate=dataHelper.toDate(origDateString);
  DateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  String dateString=f.format(aDate);
  this.assertEquals(origDateString,dateString);
}"
68305,"private Document objectToXML(Object object,Node rootNode,XMLDescriptor descriptor,XMLRecord xmlRow,boolean isXMLRoot){
  Document document=null;
  NamespaceResolver resolver=new NamespaceResolver();
  resolver.setDOM(rootNode);
  this.copyNamespaces(descriptor.getNamespaceResolver(),resolver);
  boolean shouldCallSetAttributeNS=false;
  boolean isRootDocumentFragment=false;
  AbstractSession session=xmlContext.getSession(descriptor);
  if (xmlRow != null) {
    isRootDocumentFragment=(xmlRow.getDOM().getNodeType() == Node.DOCUMENT_FRAGMENT_NODE);
  }
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootPrefix=null;
    if (xmlRow == null) {
      String recordName=((XMLRoot)object).getLocalName();
      if (xmlRootUri != null) {
        xmlRootPrefix=resolver.resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null) {
          xmlRootPrefix=resolver.generatePrefix();
          resolver.put(xmlRootPrefix,xmlRootUri);
          shouldCallSetAttributeNS=true;
        }
        recordName=xmlRootPrefix + ""String_Node_Str"" + recordName;
      }
      xmlRow=(XMLRecord)((XMLObjectBuilder)descriptor.getObjectBuilder()).createRecordFor(((XMLRoot)object).getObject(),xmlContext.getDocumentPreservationPolicy(session),recordName,xmlRootUri);
      xmlRow.setMarshaller(this);
      if (!isRootDocumentFragment) {
        if (shouldCallSetAttributeNS) {
          if (xmlRootPrefix != null) {
            ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + xmlRootPrefix,xmlRootUri);
          }
          shouldCallSetAttributeNS=false;
        }
      }
    }
    copyNamespaces(resolver,xmlRow.getNamespaceResolver());
    document=xmlRow.getDocument();
    Element docElement=document.getDocumentElement();
    xmlRow.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    boolean writeTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
    if (writeTypeAttribute && (descriptor.getSchemaReference() != null) && (descriptor.getSchemaReference().getSchemaContext() != null)) {
      ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      String typeValue=descriptor.getSchemaReference().getSchemaContext();
      typeValue=typeValue.substring(1);
      XMLField xsiTypefield=new XMLField(""String_Node_Str"");
      xsiTypefield.setNamespaceResolver(xmlRow.getNamespaceResolver());
      XPathEngine.getInstance().create(xsiTypefield,docElement,typeValue,session);
    }
    object=((XMLRoot)object).getObject();
  }
  XMLObjectBuilder bldr=(XMLObjectBuilder)descriptor.getObjectBuilder();
  xmlRow=(XMLRecord)bldr.buildRow(xmlRow,object,(AbstractSession)xmlContext.getSession(object),isXMLRoot);
  xmlRow.setMarshaller(this);
  if (shouldCallSetAttributeNS && !isRootDocumentFragment) {
    ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  document=xmlRow.getDocument();
  addSchemaLocations(document,session);
  return document;
}","private Document objectToXML(Object object,Node rootNode,XMLDescriptor descriptor,XMLRecord xmlRow,boolean isXMLRoot){
  Document document=null;
  NamespaceResolver resolver=new NamespaceResolver();
  resolver.setDOM(rootNode);
  this.copyNamespaces(descriptor.getNamespaceResolver(),resolver);
  boolean shouldCallSetAttributeNS=false;
  boolean isRootDocumentFragment=false;
  AbstractSession session=xmlContext.getSession(descriptor);
  if (xmlRow != null) {
    isRootDocumentFragment=(xmlRow.getDOM().getNodeType() == Node.DOCUMENT_FRAGMENT_NODE);
  }
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootPrefix=null;
    if (xmlRow == null) {
      String recordName=((XMLRoot)object).getLocalName();
      if (xmlRootUri != null) {
        xmlRootPrefix=resolver.resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(resolver.getDefaultNamespaceURI()))) {
          xmlRootPrefix=resolver.generatePrefix();
          resolver.put(xmlRootPrefix,xmlRootUri);
          shouldCallSetAttributeNS=true;
        }
        if (xmlRootPrefix != null) {
          recordName=xmlRootPrefix + ""String_Node_Str"" + recordName;
        }
      }
      xmlRow=(XMLRecord)((XMLObjectBuilder)descriptor.getObjectBuilder()).createRecordFor(((XMLRoot)object).getObject(),xmlContext.getDocumentPreservationPolicy(session),recordName,xmlRootUri);
      xmlRow.setMarshaller(this);
      if (!isRootDocumentFragment) {
        if (shouldCallSetAttributeNS) {
          if (xmlRootPrefix != null) {
            ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + xmlRootPrefix,xmlRootUri);
          }
          shouldCallSetAttributeNS=false;
        }
      }
    }
    copyNamespaces(resolver,xmlRow.getNamespaceResolver());
    document=xmlRow.getDocument();
    Element docElement=document.getDocumentElement();
    xmlRow.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    boolean writeTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
    if (writeTypeAttribute && (descriptor.getSchemaReference() != null) && (descriptor.getSchemaReference().getSchemaContext() != null)) {
      ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      String typeValue=descriptor.getSchemaReference().getSchemaContext();
      typeValue=typeValue.substring(1);
      XMLField xsiTypefield=new XMLField(""String_Node_Str"");
      xsiTypefield.setNamespaceResolver(xmlRow.getNamespaceResolver());
      XPathEngine.getInstance().create(xsiTypefield,docElement,typeValue,session);
    }
    object=((XMLRoot)object).getObject();
  }
  XMLObjectBuilder bldr=(XMLObjectBuilder)descriptor.getObjectBuilder();
  xmlRow=(XMLRecord)bldr.buildRow(xmlRow,object,(AbstractSession)xmlContext.getSession(object),isXMLRoot);
  xmlRow.setMarshaller(this);
  if (shouldCallSetAttributeNS && !isRootDocumentFragment) {
    ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  document=xmlRow.getDocument();
  addSchemaLocations(document,session);
  return document;
}"
68306,"private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    rootFragment=((XMLRoot)object).getRootFragment();
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        rootFragment.setXPath(xmlRootPrefix + ""String_Node_Str"" + xmlRootLocalName);
      }
 else {
        String xmlRootPrefix=""String_Node_Str"";
        marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        rootFragment.setXPath(xmlRootPrefix + ""String_Node_Str"" + xmlRootLocalName);
      }
    }
  }
 else {
    String rootName=descriptor.getDefaultRootElement();
    if (null != rootName) {
      rootFragment=new XPathFragment(rootName);
      NamespaceResolver descriptorNamespaceResolver=descriptor.getNamespaceResolver();
      if (rootFragment.getPrefix() != null && (rootFragment.getNamespaceURI() == null)) {
        String uri=null;
        if (null == descriptorNamespaceResolver) {
          throw XMLMarshalException.namespaceResolverNotSpecified(null);
        }
        uri=descriptor.getNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
        if (uri == null) {
          throw XMLMarshalException.namespaceNotFound(rootFragment.getPrefix());
        }
        rootFragment.setNamespaceURI(uri);
      }
 else {
        if (descriptorNamespaceResolver != null) {
          rootFragment.setNamespaceURI(descriptorNamespaceResolver.getDefaultNamespaceURI());
        }
      }
    }
  }
  return rootFragment;
}","private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    rootFragment=((XMLRoot)object).getRootFragment();
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setXPath(xmlRootPrefix + ""String_Node_Str"" + xmlRootLocalName);
        }
      }
 else {
        String xmlRootPrefix=""String_Node_Str"";
        marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        rootFragment.setXPath(xmlRootPrefix + ""String_Node_Str"" + xmlRootLocalName);
      }
    }
  }
 else {
    String rootName=descriptor.getDefaultRootElement();
    if (null != rootName) {
      rootFragment=new XPathFragment(rootName);
      NamespaceResolver descriptorNamespaceResolver=descriptor.getNamespaceResolver();
      if (rootFragment.getPrefix() != null && (rootFragment.getNamespaceURI() == null)) {
        String uri=null;
        if (null == descriptorNamespaceResolver) {
          throw XMLMarshalException.namespaceResolverNotSpecified(null);
        }
        uri=descriptor.getNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
        if (uri == null) {
          throw XMLMarshalException.namespaceNotFound(rootFragment.getPrefix());
        }
        rootFragment.setNamespaceURI(uri);
      }
 else {
        if (descriptorNamespaceResolver != null) {
          rootFragment.setNamespaceURI(descriptorNamespaceResolver.getDefaultNamespaceURI());
        }
      }
    }
  }
  return rootFragment;
}"
68307,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DefaultNamespaceTestCases.class);
  suite.addTestSuite(GloballyDefinedNodesTestCases.class);
  suite.addTestSuite(LocallyDefinedNodesTestCases.class);
  suite.addTestSuite(NoNamespacesTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DefaultNamespaceTestCases.class);
  suite.addTestSuite(DefaultNamespaceXMLRootTestCases.class);
  suite.addTestSuite(GloballyDefinedNodesTestCases.class);
  suite.addTestSuite(LocallyDefinedNodesTestCases.class);
  suite.addTestSuite(NoNamespacesTestCases.class);
  return suite;
}"
68308,"public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(""String_Node_Str"",true);
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(""String_Node_Str"",true);
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    DefaultErrorHandler handler=new DefaultErrorHandler();
    xmlReader.setErrorHandler(handler);
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
68309,"public JAXPParser(){
  super();
  documentBuilderFactory=DocumentBuilderFactory.newInstance();
  setNamespaceAware(true);
  setWhitespacePreserving(false);
}","public JAXPParser(){
  super();
  documentBuilderFactory=DocumentBuilderFactory.newInstance();
  errorHandler=new DefaultErrorHandler();
  setNamespaceAware(true);
  setWhitespacePreserving(false);
}"
68310,"public void setXMLSchema(URL url) throws XMLPlatformException {
  if (null == url) {
    return;
  }
  try {
    documentBuilderFactory.setAttribute(SCHEMA_LANGUAGE,XML_SCHEMA);
    documentBuilderFactory.setAttribute(JAXP_SCHEMA_SOURCE,url.toString());
  }
 catch (  IllegalArgumentException e) {
  }
catch (  Exception e) {
    XMLPlatformException.xmlPlatformErrorResolvingXMLSchema(url,e);
  }
}","public void setXMLSchema(Schema schema){
  this.documentBuilderFactory.setSchema(schema);
}"
68311,"public PrivilegedGetMethod(Class clazz,String methodName,Class[] methodParameterTypes,boolean shouldSetAccessible){
  this.clazz=clazz;
  this.methodName=methodName;
  this.methodParameterTypes=methodParameterTypes;
}","public PrivilegedGetMethod(Class clazz,String methodName,Class[] methodParameterTypes,boolean shouldSetAccessible,boolean publicOnly){
  this.clazz=clazz;
  this.methodName=methodName;
  this.methodParameterTypes=methodParameterTypes;
  this.publicOnly=publicOnly;
}"
68312,"public Method run() throws NoSuchMethodException {
  return PrivilegedAccessHelper.getMethod(clazz,methodName,methodParameterTypes,shouldSetAccessible);
}","public Method run() throws NoSuchMethodException {
  if (publicOnly) {
    return PrivilegedAccessHelper.getPublicMethod(clazz,methodName,methodParameterTypes,shouldSetAccessible);
  }
  return PrivilegedAccessHelper.getMethod(clazz,methodName,methodParameterTypes,shouldSetAccessible);
}"
68313,"/** 
 * INTERNAL: Indicates if a null value has been set or not.
 * @param object
 * @return boolean (isSet status)
 */
private boolean isSet(Object object){
  Boolean isSet;
  try {
    Class objectClass=object.getClass();
    PrivilegedGetMethod privilegedGetMethod=new PrivilegedGetMethod(objectClass,getIsSetMethodName(),getIsSetParameterTypes(),false);
    Method isSetMethod=privilegedGetMethod.run();
    PrivilegedMethodInvoker privilegedMethodInvoker=new PrivilegedMethodInvoker(isSetMethod,object,isSetParameters);
    isSet=(Boolean)privilegedMethodInvoker.run();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return isSet.booleanValue();
}","/** 
 * INTERNAL: Indicates if a null value has been set or not.
 * @param object
 * @return boolean (isSet status)
 */
private boolean isSet(Object object){
  Boolean isSet;
  try {
    Class objectClass=object.getClass();
    PrivilegedGetMethod privilegedGetMethod=new PrivilegedGetMethod(objectClass,getIsSetMethodName(),getIsSetParameterTypes(),false,true);
    Method isSetMethod=privilegedGetMethod.run();
    PrivilegedMethodInvoker privilegedMethodInvoker=new PrivilegedMethodInvoker(isSetMethod,object,isSetParameters);
    isSet=(Boolean)privilegedMethodInvoker.run();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return isSet.booleanValue();
}"
68314,"public void testDeepCopyAfterSetNullComplexChildWithBidirectionalChild_generatingLinkedDisjointTrees(){
  root.set(""String_Node_Str"",null);
  SDODataObject copyOfRoot=(SDODataObject)((SDOCopyHelper)copyHelper).copy(root,getChangeSummary());
  assertTrue(root.isSet(""String_Node_Str""));
  assertNotNull(copyOfRoot);
  assertFalse(equalityHelper.equal(root,copyOfRoot));
}","public void testDeepCopyAfterSetNullComplexChildWithBidirectionalChild_generatingLinkedDisjointTrees(){
  root.set(""String_Node_Str"",null);
  SDODataObject copyOfRoot=(SDODataObject)((SDOCopyHelper)copyHelper).copy(root,getChangeSummary());
  assertFalse(root.isSet(""String_Node_Str""));
  assertNotNull(copyOfRoot);
  assertFalse(equalityHelper.equal(root,copyOfRoot));
}"
68315,"public void testDeepEqualWithSetNullComplexChild(){
  root.set(""String_Node_Str"",null);
  SDODataObject copyOfRoot=(SDODataObject)copyHelper.copy(root);
  assertTrue(root.isSet(""String_Node_Str""));
  assertNotNull(copyOfRoot);
  assertTrue(equalityHelper.equal(root,copyOfRoot));
}","public void testDeepEqualWithSetNullComplexChild(){
  root.set(""String_Node_Str"",null);
  SDODataObject copyOfRoot=(SDODataObject)copyHelper.copy(root);
  assertFalse(root.isSet(""String_Node_Str""));
  assertNotNull(copyOfRoot);
  assertTrue(equalityHelper.equal(root,copyOfRoot));
}"
68316,"public void testPOJOValueStoreSetNullPreviouslySet(){
  SDODataObject anEmployee=setupDataObjectWithPOJOValueStore(true,true);
  SDODataObject anAddress=null;
  anEmployee.set(TEST_EMPLOYEE_ADDRESS_FIELD_NAME,anAddress);
  boolean addressSet=anEmployee.isSet(TEST_EMPLOYEE_ADDRESS_FIELD_NAME);
  assertTrue(addressSet);
}","public void testPOJOValueStoreSetNullPreviouslySet(){
  SDODataObject anEmployee=setupDataObjectWithPOJOValueStore(true,true);
  SDODataObject anAddress=null;
  anEmployee.set(TEST_EMPLOYEE_ADDRESS_FIELD_NAME,anAddress);
  boolean addressSet=anEmployee.isSet(TEST_EMPLOYEE_ADDRESS_FIELD_NAME);
  assertFalse(addressSet);
}"
68317,"public void setUp(){
  super.setUp();
  SDOType changeSummaryType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
  DataObject rootPropertyTypeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootPropertyType=(SDOType)typeHelper.define(rootPropertyTypeDO);
  DataObject rootTypeDO=defineType(URINAME,TYPENAME);
  DataObject changeSumPropertyDO=addProperty(rootTypeDO,""String_Node_Str"",changeSummaryType);
  changeSumPropertyDO.set(""String_Node_Str"",true);
  DataObject rootPropertyDO=addProperty(rootTypeDO,""String_Node_Str"",rootPropertyType);
  rootPropertyDO.set(""String_Node_Str"",true);
  DataObject rootProperty1DO=addProperty(rootTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING);
  rootType=(SDOType)typeHelper.define(rootTypeDO);
  rootProperty=(SDOProperty)rootType.getDeclaredPropertiesMap().get(""String_Node_Str"");
  rootProperty1=(SDOProperty)rootType.getDeclaredPropertiesMap().get(""String_Node_Str"");
  DataObject contained_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  DataObject containedPropertyDO=addProperty(contained_typeDO,""String_Node_Str"",SDOConstants.SDO_STRING);
  contained_type=(SDOType)typeHelper.define(contained_typeDO);
  containedDataObject=(SDODataObject)dataFactory.create(contained_type);
  root=(SDODataObject)dataFactory.create(rootType);
  root.set(rootProperty,containedDataObject);
  changeSummary=(SDOChangeSummary)root.getChangeSummary();
}","public void setUp(){
  super.setUp();
  SDOType changeSummaryType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
  DataObject rootPropertyTypeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootPropertyType=(SDOType)typeHelper.define(rootPropertyTypeDO);
  DataObject rootTypeDO=defineType(URINAME,TYPENAME);
  DataObject changeSumPropertyDO=addProperty(rootTypeDO,""String_Node_Str"",changeSummaryType);
  changeSumPropertyDO.set(""String_Node_Str"",true);
  DataObject rootPropertyDO=addProperty(rootTypeDO,""String_Node_Str"",rootPropertyType);
  rootPropertyDO.set(""String_Node_Str"",true);
  DataObject rootProperty1DO=addProperty(rootTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING);
  rootType=(SDOType)typeHelper.define(rootTypeDO);
  rootProperty=(SDOProperty)rootType.getDeclaredPropertiesMap().get(""String_Node_Str"");
  rootProperty1=(SDOProperty)rootType.getDeclaredPropertiesMap().get(""String_Node_Str"");
  rootProperty1.setNullable(true);
  DataObject contained_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  DataObject containedPropertyDO=addProperty(contained_typeDO,""String_Node_Str"",SDOConstants.SDO_STRING);
  contained_type=(SDOType)typeHelper.define(contained_typeDO);
  containedDataObject=(SDODataObject)dataFactory.create(contained_type);
  root=(SDODataObject)dataFactory.create(rootType);
  root.set(rootProperty,containedDataObject);
  changeSummary=(SDOChangeSummary)root.getChangeSummary();
}"
68318,"public void testUnsetSimpleIDSetToNullOnRoot(){
  rootObject.set(""String_Node_Str"",null);
  cs.beginLogging();
  rootObject.unset(""String_Node_Str"");
  assertModified(rootObject,cs);
  assertEquals(1,cs.getChangedDataObjects().size());
  List oldValues=cs.getOldValues(rootObject);
  assertEquals(1,oldValues.size());
  ChangeSummary.Setting theSetting=(ChangeSummary.Setting)oldValues.get(0);
  assertEquals(""String_Node_Str"",theSetting.getProperty().getName());
  assertEquals(true,theSetting.isSet());
  assertEquals(null,theSetting.getValue());
}","public void testUnsetSimpleIDSetToNullOnRoot(){
  SDOProperty idProperty=(SDOProperty)((SDOType)rootObject.getType()).getDeclaredPropertiesMap().get(""String_Node_Str"");
  idProperty.setNullable(true);
  rootObject.set(""String_Node_Str"",null);
  cs.beginLogging();
  rootObject.unset(""String_Node_Str"");
  assertModified(rootObject,cs);
  assertEquals(1,cs.getChangedDataObjects().size());
  List oldValues=cs.getOldValues(rootObject);
  assertEquals(1,oldValues.size());
  ChangeSummary.Setting theSetting=(ChangeSummary.Setting)oldValues.get(0);
  assertEquals(""String_Node_Str"",theSetting.getProperty().getName());
  assertEquals(true,theSetting.isSet());
  assertEquals(null,theSetting.getValue());
}"
68319,"public void testUnsetSimpleIDSetToNullOnRoot(){
  rootObject.set(""String_Node_Str"",null);
  cs.beginLogging();
  rootObject.unset(""String_Node_Str"");
  assertModified(rootObject,cs);
  assertEquals(1,cs.getChangedDataObjects().size());
  List oldValues=cs.getOldValues(rootObject);
  assertEquals(1,oldValues.size());
  ChangeSummary.Setting theSetting=(ChangeSummary.Setting)oldValues.get(0);
  assertEquals(""String_Node_Str"",theSetting.getProperty().getName());
  assertEquals(true,theSetting.isSet());
  assertEquals(null,theSetting.getValue());
}","public void testUnsetSimpleIDSetToNullOnRoot(){
  SDOProperty idProperty=(SDOProperty)((SDOType)rootObject.getType()).getDeclaredPropertiesMap().get(""String_Node_Str"");
  idProperty.setNullable(true);
  rootObject.set(""String_Node_Str"",null);
  cs.beginLogging();
  rootObject.unset(""String_Node_Str"");
  assertModified(rootObject,cs);
  assertEquals(1,cs.getChangedDataObjects().size());
  List oldValues=cs.getOldValues(rootObject);
  assertEquals(1,oldValues.size());
  ChangeSummary.Setting theSetting=(ChangeSummary.Setting)oldValues.get(0);
  assertEquals(""String_Node_Str"",theSetting.getProperty().getName());
  assertEquals(true,theSetting.isSet());
  assertEquals(null,theSetting.getValue());
}"
68320,"public void setUp(){
  super.setUp();
  SDOType type=new SDOType(URINAME,TYPENAME);
  type.setOpen(true);
  SDOProperty property=new SDOProperty(aHelperContext);
  property.setName(DEFINED_PROPERTY_NAME);
  property.setDefault(DEFAULT_VALUE);
  type.addDeclaredProperty(property);
  SDOType type_Not_Open=new SDOType(URINAME,TYPENAME);
  type_Not_Open.setOpen(false);
  SDOProperty property_=new SDOProperty(aHelperContext);
  property.setName(DEFINED_PROPERTY_NAME);
  SDOType type_=new SDOType(URINAME,TYPENAME);
  SDOProperty _property=new SDOProperty(aHelperContext);
  _property.setReadOnly(true);
  _property.setName(DEFINED_PROPERTY_READONLY_NAME);
  type_.addDeclaredProperty(_property);
  SDOType type_Path_a_b=new SDOType(URINAME,TYPENAME);
  type_Path_a_b.setOpen(true);
  SDOProperty property_Path_a_b=new SDOProperty(aHelperContext);
  property_Path_a_b.setName(DEFINED_PROPERTY_NAME_a);
  property_Path_a_b.setDefault(DEFAULT_VALUE);
  type_Path_a_b.addDeclaredProperty(property_Path_a_b);
  SDOType type_Path_b=new SDOType(URINAME,""String_Node_Str"");
  type_Path_b.setOpen(true);
  SDOProperty property_Path_b=new SDOProperty(aHelperContext);
  property_Path_b.setName(DEFINED_PROPERTY_NAME);
  property_Path_b.setDefault(DEFAULT_VALUE);
  type_Path_b.addDeclaredProperty(property_Path_b);
  dataObject_Path_b=(SDODataObject)dataFactory.create(type_Path_b);
  dataObject_Path_a_b=(SDODataObject)dataFactory.create(type_Path_a_b);
  dataObject_Path_a_b.set(property_Path_a_b,dataObject_Path_b);
  dataObject=(SDODataObject)dataFactory.create(type);
  dataObject_Not_Open=(SDODataObject)dataFactory.create(type_Not_Open);
  dataObject_WithReadOnlyProperty=(SDODataObject)dataFactory.create(type_);
}","public void setUp(){
  super.setUp();
  SDOType type=new SDOType(URINAME,TYPENAME);
  type.setOpen(true);
  SDOProperty property=new SDOProperty(aHelperContext);
  property.setName(DEFINED_PROPERTY_NAME);
  property.setDefault(DEFAULT_VALUE);
  type.addDeclaredProperty(property);
  SDOProperty manyProperty=new SDOProperty(aHelperContext);
  manyProperty.setName(DEFINED_MANY_PROPERTY_NAME);
  manyProperty.setDefault(DEFAULT_VALUE);
  manyProperty.setMany(true);
  type.addDeclaredProperty(manyProperty);
  SDOType type_Not_Open=new SDOType(URINAME,TYPENAME);
  type_Not_Open.setOpen(false);
  SDOProperty property_=new SDOProperty(aHelperContext);
  property.setName(DEFINED_PROPERTY_NAME);
  SDOType type_=new SDOType(URINAME,TYPENAME);
  SDOProperty _property=new SDOProperty(aHelperContext);
  _property.setReadOnly(true);
  _property.setName(DEFINED_PROPERTY_READONLY_NAME);
  type_.addDeclaredProperty(_property);
  SDOType type_Path_a_b=new SDOType(URINAME,TYPENAME);
  type_Path_a_b.setOpen(true);
  SDOProperty property_Path_a_b=new SDOProperty(aHelperContext);
  property_Path_a_b.setName(DEFINED_PROPERTY_NAME_a);
  property_Path_a_b.setDefault(DEFAULT_VALUE);
  type_Path_a_b.addDeclaredProperty(property_Path_a_b);
  SDOType type_Path_b=new SDOType(URINAME,""String_Node_Str"");
  type_Path_b.setOpen(true);
  SDOProperty property_Path_b=new SDOProperty(aHelperContext);
  property_Path_b.setName(DEFINED_PROPERTY_NAME);
  property_Path_b.setDefault(DEFAULT_VALUE);
  type_Path_b.addDeclaredProperty(property_Path_b);
  dataObject_Path_b=(SDODataObject)dataFactory.create(type_Path_b);
  dataObject_Path_a_b=(SDODataObject)dataFactory.create(type_Path_a_b);
  dataObject_Path_a_b.set(property_Path_a_b,dataObject_Path_b);
  dataObject=(SDODataObject)dataFactory.create(type);
  dataObject_Not_Open=(SDODataObject)dataFactory.create(type_Not_Open);
  dataObject_WithReadOnlyProperty=(SDODataObject)dataFactory.create(type_);
}"
68321,"/** 
 * INTERNAL: Sets the value of the given property of the object to the new value. <p> The use of a false updateSequence flag is internally implemented during an SDOSequence.add() call. Refactor: we need to abstract this function using a type of Command pattern to handle the sequence context.
 * @param property
 * @param value
 * @param updateSequence
 * @throws UnsupportedOperationException
 * @throws IllegalArgumentException
 */
public void set(SDOProperty property,Object value,boolean updateSequence) throws UnsupportedOperationException, IllegalArgumentException {
  if (null == property) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (property.isReadOnly()) {
    throw new UnsupportedOperationException(""String_Node_Str"" + property.getName() + ""String_Node_Str""+ getType().getName());
  }
  setInternal(property,value,updateSequence);
}","/** 
 * INTERNAL: Sets the value of the given property of the object to the new value. <p> The use of a false updateSequence flag is internally implemented during an SDOSequence.add() call. Refactor: we need to abstract this function using a type of Command pattern to handle the sequence context.
 * @param property
 * @param value
 * @param updateSequence
 * @throws UnsupportedOperationException
 * @throws IllegalArgumentException
 */
public void set(SDOProperty property,Object value,boolean updateSequence) throws UnsupportedOperationException, IllegalArgumentException {
  if (null == property) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (property.isReadOnly()) {
    throw new UnsupportedOperationException(""String_Node_Str"" + property.getName() + ""String_Node_Str""+ getType().getName());
  }
  if (value == null && !property.isNullable()) {
    unset(property,false,updateSequence);
  }
 else {
    setInternal(property,value,updateSequence);
  }
}"
68322,"/** 
 * INTERNAL: Either create a new change record or update the change record with the new value. This is used by attribute change tracking.
 */
public void updateChangeRecord(Object sourceClone,Object newValue,Object oldValue,ObjectChangeSet objectChangeSet,UnitOfWorkImpl uow) throws DescriptorException {
  AggregateChangeRecord changeRecord=(AggregateChangeRecord)objectChangeSet.getChangesForAttributeNamed(this.getAttributeName());
  if (changeRecord == null) {
    changeRecord=new AggregateChangeRecord(objectChangeSet);
    changeRecord.setAttribute(this.getAttributeName());
    changeRecord.setMapping(this);
    objectChangeSet.addChange(changeRecord);
  }
  if (sourceClone.getClass().equals(objectChangeSet.getClassType(uow))) {
    ClassDescriptor referenceDescriptor=getReferenceDescriptor(newValue,uow);
    if (newValue == null) {
      changeRecord.setChangedObject(null);
      if (referenceDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
        ((AggregateAttributeChangeListener)((ChangeTracker)oldValue)._persistence_getPropertyChangeListener()).setParentListener(null);
      }
      return;
    }
 else {
      UnitOfWorkChangeSet uowChangeSet=(UnitOfWorkChangeSet)objectChangeSet.getUOWChangeSet();
      ObjectChangeSet aggregateChangeSet=(ObjectChangeSet)uowChangeSet.getObjectChangeSetForClone(newValue);
      if (aggregateChangeSet != null) {
        aggregateChangeSet.clear();
      }
      if (referenceDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
        ((AggregateAttributeChangeListener)((ChangeTracker)oldValue)._persistence_getPropertyChangeListener()).setParentListener(null);
        AggregateAttributeChangeListener newListener=(AggregateAttributeChangeListener)((ChangeTracker)newValue)._persistence_getPropertyChangeListener();
        if (newListener == null) {
          newListener=new AggregateAttributeChangeListener(referenceDescriptor,uow,((AttributeChangeListener)((ChangeTracker)sourceClone)._persistence_getPropertyChangeListener()),this.getAttributeName(),newValue);
          ((ChangeTracker)newValue)._persistence_setPropertyChangeListener(newListener);
        }
        newListener.setParentListener((AttributeChangeListener)((ChangeTracker)sourceClone)._persistence_getPropertyChangeListener());
      }
      changeRecord.setChangedObject(referenceDescriptor.getObjectChangePolicy().createObjectChangeSetThroughComparison(newValue,oldValue,uowChangeSet,(oldValue == null),uow,referenceDescriptor));
      referenceDescriptor.getObjectChangePolicy().setChangeSetOnListener((ObjectChangeSet)changeRecord.getChangedObject(),newValue);
    }
  }
 else {
    if (referenceDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
      changeRecord.setChangedObject(((AggregateAttributeChangeListener)((ChangeTracker)sourceClone)._persistence_getPropertyChangeListener()).getObjectChangeSet());
    }
 else {
      changeRecord.setChangedObject(referenceDescriptor.getObjectChangePolicy().createObjectChangeSetThroughComparison(sourceClone,null,(UnitOfWorkChangeSet)objectChangeSet.getUOWChangeSet(),true,uow,referenceDescriptor));
    }
  }
}","/** 
 * INTERNAL: Either create a new change record or update the change record with the new value. This is used by attribute change tracking.
 */
public void updateChangeRecord(Object sourceClone,Object newValue,Object oldValue,ObjectChangeSet objectChangeSet,UnitOfWorkImpl uow) throws DescriptorException {
  AggregateChangeRecord changeRecord=(AggregateChangeRecord)objectChangeSet.getChangesForAttributeNamed(this.getAttributeName());
  if (changeRecord == null) {
    changeRecord=new AggregateChangeRecord(objectChangeSet);
    changeRecord.setAttribute(this.getAttributeName());
    changeRecord.setMapping(this);
    objectChangeSet.addChange(changeRecord);
  }
  if (sourceClone.getClass().equals(objectChangeSet.getClassType(uow))) {
    ClassDescriptor referenceDescriptor=getReferenceDescriptor(newValue,uow);
    if (newValue == null) {
      changeRecord.setChangedObject(null);
      if (referenceDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
        ((AggregateAttributeChangeListener)((ChangeTracker)oldValue)._persistence_getPropertyChangeListener()).setParentListener(null);
      }
      return;
    }
 else {
      UnitOfWorkChangeSet uowChangeSet=(UnitOfWorkChangeSet)objectChangeSet.getUOWChangeSet();
      ObjectChangeSet aggregateChangeSet=(ObjectChangeSet)uowChangeSet.getObjectChangeSetForClone(newValue);
      if (aggregateChangeSet != null) {
        aggregateChangeSet.clear();
      }
      if (referenceDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
        if (oldValue != null) {
          ((AggregateAttributeChangeListener)((ChangeTracker)oldValue)._persistence_getPropertyChangeListener()).setParentListener(null);
        }
        AggregateAttributeChangeListener newListener=(AggregateAttributeChangeListener)((ChangeTracker)newValue)._persistence_getPropertyChangeListener();
        if (newListener == null) {
          newListener=new AggregateAttributeChangeListener(referenceDescriptor,uow,((AttributeChangeListener)((ChangeTracker)sourceClone)._persistence_getPropertyChangeListener()),this.getAttributeName(),newValue);
          ((ChangeTracker)newValue)._persistence_setPropertyChangeListener(newListener);
        }
        newListener.setParentListener((AttributeChangeListener)((ChangeTracker)sourceClone)._persistence_getPropertyChangeListener());
      }
      changeRecord.setChangedObject(referenceDescriptor.getObjectChangePolicy().createObjectChangeSetThroughComparison(newValue,oldValue,uowChangeSet,(oldValue == null),uow,referenceDescriptor));
      referenceDescriptor.getObjectChangePolicy().setChangeSetOnListener((ObjectChangeSet)changeRecord.getChangedObject(),newValue);
    }
  }
 else {
    if (referenceDescriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
      changeRecord.setChangedObject(((AggregateAttributeChangeListener)((ChangeTracker)sourceClone)._persistence_getPropertyChangeListener()).getObjectChangeSet());
    }
 else {
      changeRecord.setChangedObject(referenceDescriptor.getObjectChangePolicy().createObjectChangeSetThroughComparison(sourceClone,null,(UnitOfWorkChangeSet)objectChangeSet.getUOWChangeSet(),true,uow,referenceDescriptor));
    }
  }
}"
68323,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}"
68324,"protected static void buildFormatters(XMLConversionManager xmlConversionManager){
  xmlConversionManager.dateFormatter=new DateFormatThreadLocal(XSD_DATE_FORMAT_STR,null);
  xmlConversionManager.timeFormatter=new DateFormatThreadLocal(XSD_TIME_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.dateTimeFormatter=new DateFormatThreadLocal(XSD_DATE_TIME_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.gDayFormatter=new DateFormatThreadLocal(XSD_GDAY_FORMAT_STR,null);
  xmlConversionManager.gMonthFormatter=new DateFormatThreadLocal(XSD_GMONTH_FORMAT_STR,null);
  xmlConversionManager.gMonthDayFormatter=new DateFormatThreadLocal(XSD_GMONTH_DAY_FORMAT_STR,null);
  xmlConversionManager.gYearFormatter=new DateFormatThreadLocal(XSD_GYEAR_FORMAT_STR,null);
  xmlConversionManager.gYearMonthFormatter=new DateFormatThreadLocal(XSD_GYEAR_MONTH_FORMAT_STR,null);
}","protected static void buildFormatters(XMLConversionManager xmlConversionManager){
  xmlConversionManager.dateFormatter=new DateFormatThreadLocal(XSD_DATE_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.timeFormatter=new DateFormatThreadLocal(XSD_TIME_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.dateTimeFormatter=new DateFormatThreadLocal(XSD_DATE_TIME_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.gDayFormatter=new DateFormatThreadLocal(XSD_GDAY_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.gMonthFormatter=new DateFormatThreadLocal(XSD_GMONTH_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.gMonthDayFormatter=new DateFormatThreadLocal(XSD_GMONTH_DAY_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.gYearFormatter=new DateFormatThreadLocal(XSD_GYEAR_FORMAT_STR,xmlConversionManager);
  xmlConversionManager.gYearMonthFormatter=new DateFormatThreadLocal(XSD_GYEAR_MONTH_FORMAT_STR,xmlConversionManager);
}"
68325,"public void testConverFromString_Calendar(){
  String b=""String_Node_Str"";
  Calendar controlCalendar=Calendar.getInstance();
  controlCalendar.clear();
  controlCalendar.set(Calendar.YEAR,2000);
  controlCalendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  this.assertEquals(controlCalendar,(Calendar)dataHelper.convertFromStringValue(b,Calendar.class,null));
}","public void testConverFromString_Calendar(){
  String b=""String_Node_Str"";
  Calendar controlCalendar=Calendar.getInstance();
  controlCalendar.clear();
  controlCalendar.set(Calendar.YEAR,2000);
  controlCalendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  Calendar aCalendar=(Calendar)dataHelper.convertFromStringValue(b,Calendar.class,null);
  assertTrue(""String_Node_Str"" + controlCalendar.get(Calendar.YEAR) + ""String_Node_Str""+ aCalendar.get(Calendar.YEAR),controlCalendar.get(Calendar.YEAR) == aCalendar.get(Calendar.YEAR));
  assertTrue(""String_Node_Str"" + controlCalendar.getTimeZone() + ""String_Node_Str""+ aCalendar.getTimeZone(),controlCalendar.getTimeZone().equals(aCalendar.getTimeZone()));
  assertTrue(""String_Node_Str"" + controlCalendar.toString() + ""String_Node_Str""+ aCalendar.toString(),controlCalendar.toString().equals(aCalendar.toString()));
}"
68326,"public void testConverFromString_Calendar_NoQname(){
  String b=""String_Node_Str"";
  Calendar controlCalendar=Calendar.getInstance();
  controlCalendar.clear();
  controlCalendar.set(Calendar.YEAR,2000);
  controlCalendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  this.assertEquals(controlCalendar,(Calendar)dataHelper.convertFromStringValue(b,Calendar.class));
}","public void testConverFromString_Calendar_NoQname(){
  String b=""String_Node_Str"";
  Calendar controlCalendar=Calendar.getInstance();
  controlCalendar.clear();
  controlCalendar.set(Calendar.YEAR,2000);
  controlCalendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  Calendar aCalendar=(Calendar)dataHelper.convertFromStringValue(b,Calendar.class,null);
  assertTrue(""String_Node_Str"" + controlCalendar.get(Calendar.YEAR) + ""String_Node_Str""+ aCalendar.get(Calendar.YEAR),controlCalendar.get(Calendar.YEAR) == aCalendar.get(Calendar.YEAR));
  assertTrue(""String_Node_Str"" + controlCalendar.getTimeZone() + ""String_Node_Str""+ aCalendar.getTimeZone(),controlCalendar.getTimeZone().equals(aCalendar.getTimeZone()));
  assertTrue(""String_Node_Str"" + controlCalendar.toString() + ""String_Node_Str""+ aCalendar.toString(),controlCalendar.toString().equals(aCalendar.toString()));
}"
68327,"@Test public void noargsTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(xrService.getORSession().getProject().getDatasourceLogin().getPlatform() instanceof OraclePlatform ? VALUE_1_XML : VALUE_0_XML));
  assertTrue(""String_Node_Str"",comparer.isNodeEqual(controlDoc,doc));
}","@Test public void noargsTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(xrService.getORSession().getProject().getDatasourceLogin().getPlatform() instanceof MySQLPlatform ? VALUE_0_XML : VALUE_1_XML));
  assertTrue(""String_Node_Str"",comparer.isNodeEqual(controlDoc,doc));
}"
68328,"@Test public void varcharTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(xrService.getORSession().getProject().getDatasourceLogin().getPlatform() instanceof OraclePlatform ? VALUE_1_XML : VALUE_0_XML));
  assertTrue(""String_Node_Str"",comparer.isNodeEqual(controlDoc,doc));
}","@Test public void varcharTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(xrService.getORSession().getProject().getDatasourceLogin().getPlatform() instanceof MySQLPlatform ? VALUE_0_XML : VALUE_1_XML));
  assertTrue(""String_Node_Str"",comparer.isNodeEqual(controlDoc,doc));
}"
68329,"@BeforeClass public static void setUp(){
  final String username=System.getProperty(DATABASE_USERNAME_KEY);
  if (username == null) {
    fail(""String_Node_Str"");
  }
  final String password=System.getProperty(DATABASE_PASSWORD_KEY);
  if (password == null) {
    fail(""String_Node_Str"");
  }
  final String url=System.getProperty(DATABASE_URL_KEY);
  if (url == null) {
    fail(""String_Node_Str"");
  }
  final String driver=System.getProperty(DATABASE_DRIVER_KEY);
  if (driver == null) {
    fail(""String_Node_Str"");
  }
  XRServiceFactory factory=new XRServiceFactory(){
    @Override public XRServiceAdapter buildService(    XRServiceModel xrServiceModel){
      parentClassLoader=this.getClass().getClassLoader();
      xrSchemaStream=new ByteArrayInputStream(KEYMAPPINGS_SCHEMA.getBytes());
      return super.buildService(xrServiceModel);
    }
    @Override public void buildSessions(){
      BaseEntityClassLoader becl=new BaseEntityClassLoader(parentClassLoader);
      XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject(),becl);
      XMLUnmarshaller unmarshaller=context.createUnmarshaller();
      Project orProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OR_PROJECT));
      DatasourceLogin login=new DatabaseLogin();
      login.setUserName(username);
      login.setPassword(password);
      ((DatabaseLogin)login).setConnectionString(url);
      ((DatabaseLogin)login).setDriverClassName(driver);
      Platform platform=new OraclePlatform();
      ConversionManager conversionManager=platform.getConversionManager();
      if (conversionManager != null) {
        conversionManager.setLoader(becl);
      }
      login.setDatasourcePlatform(platform);
      ((DatabaseLogin)login).bindAllParameters();
      orProject.setDatasourceLogin(login);
      Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OX_PROJECT));
      login=(DatasourceLogin)oxProject.getDatasourceLogin();
      if (login != null) {
        platform=login.getDatasourcePlatform();
        if (platform != null) {
          conversionManager=platform.getConversionManager();
          if (conversionManager != null) {
            conversionManager.setLoader(becl);
          }
        }
      }
      ProjectHelper.fixOROXAccessors(orProject,oxProject);
      xrService.setORSession(orProject.createDatabaseSession());
      xrService.getORSession().dontLogMessages();
      xrService.setXMLContext(new XMLContext(oxProject));
      xrService.setOXSession(xrService.getXMLContext().getSession(0));
    }
  }
;
  XMLContext context=new XMLContext(new DBWSModelProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  DBWSModel model=(DBWSModel)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_DBWS));
  xrService=factory.buildService(model);
}","@BeforeClass public static void setUp(){
  final String username=System.getProperty(DATABASE_USERNAME_KEY);
  if (username == null) {
    fail(""String_Node_Str"");
  }
  final String password=System.getProperty(DATABASE_PASSWORD_KEY);
  if (password == null) {
    fail(""String_Node_Str"");
  }
  final String url=System.getProperty(DATABASE_URL_KEY);
  if (url == null) {
    fail(""String_Node_Str"");
  }
  final String driver=System.getProperty(DATABASE_DRIVER_KEY);
  if (driver == null) {
    fail(""String_Node_Str"");
  }
  XRServiceFactory factory=new XRServiceFactory(){
    @Override public XRServiceAdapter buildService(    XRServiceModel xrServiceModel){
      parentClassLoader=this.getClass().getClassLoader();
      xrSchemaStream=new ByteArrayInputStream(KEYMAPPINGS_SCHEMA.getBytes());
      return super.buildService(xrServiceModel);
    }
    @Override public void buildSessions(){
      BaseEntityClassLoader becl=new BaseEntityClassLoader(parentClassLoader);
      XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject(),becl);
      XMLUnmarshaller unmarshaller=context.createUnmarshaller();
      Project orProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OR_PROJECT));
      DatasourceLogin login=new DatabaseLogin();
      login.setUserName(username);
      login.setPassword(password);
      ((DatabaseLogin)login).setConnectionString(url);
      ((DatabaseLogin)login).setDriverClassName(driver);
      Platform platform=new MySQLPlatform();
      ConversionManager conversionManager=platform.getConversionManager();
      if (conversionManager != null) {
        conversionManager.setLoader(becl);
      }
      login.setDatasourcePlatform(platform);
      ((DatabaseLogin)login).bindAllParameters();
      orProject.setDatasourceLogin(login);
      Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OX_PROJECT));
      login=(DatasourceLogin)oxProject.getDatasourceLogin();
      if (login != null) {
        platform=login.getDatasourcePlatform();
        if (platform != null) {
          conversionManager=platform.getConversionManager();
          if (conversionManager != null) {
            conversionManager.setLoader(becl);
          }
        }
      }
      ProjectHelper.fixOROXAccessors(orProject,oxProject);
      xrService.setORSession(orProject.createDatabaseSession());
      xrService.getORSession().dontLogMessages();
      xrService.setXMLContext(new XMLContext(oxProject));
      xrService.setOXSession(xrService.getXMLContext().getSession(0));
    }
  }
;
  XMLContext context=new XMLContext(new DBWSModelProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  DBWSModel model=(DBWSModel)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_DBWS));
  xrService=factory.buildService(model);
}"
68330,"@Override public void buildSessions(){
  BaseEntityClassLoader becl=new BaseEntityClassLoader(parentClassLoader);
  XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject(),becl);
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  Project orProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OR_PROJECT));
  DatasourceLogin login=new DatabaseLogin();
  login.setUserName(username);
  login.setPassword(password);
  ((DatabaseLogin)login).setConnectionString(url);
  ((DatabaseLogin)login).setDriverClassName(driver);
  Platform platform=new OraclePlatform();
  ConversionManager conversionManager=platform.getConversionManager();
  if (conversionManager != null) {
    conversionManager.setLoader(becl);
  }
  login.setDatasourcePlatform(platform);
  ((DatabaseLogin)login).bindAllParameters();
  orProject.setDatasourceLogin(login);
  Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OX_PROJECT));
  login=(DatasourceLogin)oxProject.getDatasourceLogin();
  if (login != null) {
    platform=login.getDatasourcePlatform();
    if (platform != null) {
      conversionManager=platform.getConversionManager();
      if (conversionManager != null) {
        conversionManager.setLoader(becl);
      }
    }
  }
  ProjectHelper.fixOROXAccessors(orProject,oxProject);
  xrService.setORSession(orProject.createDatabaseSession());
  xrService.getORSession().dontLogMessages();
  xrService.setXMLContext(new XMLContext(oxProject));
  xrService.setOXSession(xrService.getXMLContext().getSession(0));
}","@Override public void buildSessions(){
  BaseEntityClassLoader becl=new BaseEntityClassLoader(parentClassLoader);
  XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject(),becl);
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  Project orProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OR_PROJECT));
  DatasourceLogin login=new DatabaseLogin();
  login.setUserName(username);
  login.setPassword(password);
  ((DatabaseLogin)login).setConnectionString(url);
  ((DatabaseLogin)login).setDriverClassName(driver);
  Platform platform=new MySQLPlatform();
  ConversionManager conversionManager=platform.getConversionManager();
  if (conversionManager != null) {
    conversionManager.setLoader(becl);
  }
  login.setDatasourcePlatform(platform);
  ((DatabaseLogin)login).bindAllParameters();
  orProject.setDatasourceLogin(login);
  Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(KEYMAPPINGS_OX_PROJECT));
  login=(DatasourceLogin)oxProject.getDatasourceLogin();
  if (login != null) {
    platform=login.getDatasourcePlatform();
    if (platform != null) {
      conversionManager=platform.getConversionManager();
      if (conversionManager != null) {
        conversionManager.setLoader(becl);
      }
    }
  }
  ProjectHelper.fixOROXAccessors(orProject,oxProject);
  xrService.setORSession(orProject.createDatabaseSession());
  xrService.getORSession().dontLogMessages();
  xrService.setXMLContext(new XMLContext(oxProject));
  xrService.setOXSession(xrService.getXMLContext().getSession(0));
}"
68331,"@BeforeClass public static void setUp(){
  final String username=System.getProperty(DATABASE_USERNAME_KEY);
  if (username == null) {
    fail(""String_Node_Str"");
  }
  final String password=System.getProperty(DATABASE_PASSWORD_KEY);
  if (password == null) {
    fail(""String_Node_Str"");
  }
  final String url=System.getProperty(DATABASE_URL_KEY);
  if (url == null) {
    fail(""String_Node_Str"");
  }
  final String driver=System.getProperty(DATABASE_DRIVER_KEY);
  if (driver == null) {
    fail(""String_Node_Str"");
  }
  XRServiceFactory factory=new XRServiceFactory(){
    @Override public XRServiceAdapter buildService(    XRServiceModel xrServiceModel){
      parentClassLoader=this.getClass().getClassLoader();
      xrSchemaStream=new ByteArrayInputStream(RELATIONSHIPS_SCHEMA.getBytes());
      return super.buildService(xrServiceModel);
    }
    @Override public void buildSessions(){
      XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject());
      XMLUnmarshaller unmarshaller=context.createUnmarshaller();
      Project orProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OR_PROJECT));
      DatasourceLogin login=new DatabaseLogin();
      login.setUserName(username);
      login.setPassword(password);
      ((DatabaseLogin)login).setConnectionString(url);
      ((DatabaseLogin)login).setDriverClassName(driver);
      Platform platform=new OraclePlatform();
      login.setDatasourcePlatform(platform);
      ((DatabaseLogin)login).bindAllParameters();
      orProject.setDatasourceLogin(login);
      Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OX_PROJECT));
      xrService.setORSession(orProject.createDatabaseSession());
      xrService.getORSession().dontLogMessages();
      xrService.setXMLContext(new XMLContext(oxProject));
      xrService.setOXSession(xrService.getXMLContext().getSession(0));
    }
  }
;
  XMLContext context=new XMLContext(new DBWSModelProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  DBWSModel model=(DBWSModel)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_DBWS));
  xrService=factory.buildService(model);
}","@BeforeClass public static void setUp(){
  final String username=System.getProperty(DATABASE_USERNAME_KEY);
  if (username == null) {
    fail(""String_Node_Str"");
  }
  final String password=System.getProperty(DATABASE_PASSWORD_KEY);
  if (password == null) {
    fail(""String_Node_Str"");
  }
  final String url=System.getProperty(DATABASE_URL_KEY);
  if (url == null) {
    fail(""String_Node_Str"");
  }
  final String driver=System.getProperty(DATABASE_DRIVER_KEY);
  if (driver == null) {
    fail(""String_Node_Str"");
  }
  XRServiceFactory factory=new XRServiceFactory(){
    @Override public XRServiceAdapter buildService(    XRServiceModel xrServiceModel){
      parentClassLoader=this.getClass().getClassLoader();
      xrSchemaStream=new ByteArrayInputStream(RELATIONSHIPS_SCHEMA.getBytes());
      return super.buildService(xrServiceModel);
    }
    @Override public void buildSessions(){
      XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject());
      XMLUnmarshaller unmarshaller=context.createUnmarshaller();
      Project orProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OR_PROJECT));
      DatasourceLogin login=new DatabaseLogin();
      login.setUserName(username);
      login.setPassword(password);
      ((DatabaseLogin)login).setConnectionString(url);
      ((DatabaseLogin)login).setDriverClassName(driver);
      Platform platform=new MySQLPlatform();
      login.setDatasourcePlatform(platform);
      ((DatabaseLogin)login).bindAllParameters();
      orProject.setDatasourceLogin(login);
      Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OX_PROJECT));
      xrService.setORSession(orProject.createDatabaseSession());
      xrService.getORSession().dontLogMessages();
      xrService.setXMLContext(new XMLContext(oxProject));
      xrService.setOXSession(xrService.getXMLContext().getSession(0));
    }
  }
;
  XMLContext context=new XMLContext(new DBWSModelProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  DBWSModel model=(DBWSModel)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_DBWS));
  xrService=factory.buildService(model);
}"
68332,"@Override public void buildSessions(){
  XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  Project orProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OR_PROJECT));
  DatasourceLogin login=new DatabaseLogin();
  login.setUserName(username);
  login.setPassword(password);
  ((DatabaseLogin)login).setConnectionString(url);
  ((DatabaseLogin)login).setDriverClassName(driver);
  Platform platform=new OraclePlatform();
  login.setDatasourcePlatform(platform);
  ((DatabaseLogin)login).bindAllParameters();
  orProject.setDatasourceLogin(login);
  Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OX_PROJECT));
  xrService.setORSession(orProject.createDatabaseSession());
  xrService.getORSession().dontLogMessages();
  xrService.setXMLContext(new XMLContext(oxProject));
  xrService.setOXSession(xrService.getXMLContext().getSession(0));
}","@Override public void buildSessions(){
  XMLContext context=new XMLContext(new EclipseLinkObjectPersistenceRuntimeXMLProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  Project orProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OR_PROJECT));
  DatasourceLogin login=new DatabaseLogin();
  login.setUserName(username);
  login.setPassword(password);
  ((DatabaseLogin)login).setConnectionString(url);
  ((DatabaseLogin)login).setDriverClassName(driver);
  Platform platform=new MySQLPlatform();
  login.setDatasourcePlatform(platform);
  ((DatabaseLogin)login).bindAllParameters();
  orProject.setDatasourceLogin(login);
  Project oxProject=(Project)unmarshaller.unmarshal(new StringReader(RELATIONSHIPS_OX_PROJECT));
  xrService.setORSession(orProject.createDatabaseSession());
  xrService.getORSession().dontLogMessages();
  xrService.setXMLContext(new XMLContext(oxProject));
  xrService.setOXSession(xrService.getXMLContext().getSession(0));
}"
68333,"/** 
 * Perform a cache lookup for the query This is only called from read object query. The query has already checked that the cache should be checked.
 */
public Object checkCacheForObject(AbstractRecord translationRow,AbstractSession session){
  ReadObjectQuery query=getReadObjectQuery();
  ClassDescriptor descriptor=getDescriptor();
  boolean conforming=false;
  UnitOfWorkImpl uow=null;
  if (session.isUnitOfWork()) {
    conforming=query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork();
    uow=(UnitOfWorkImpl)session;
  }
  int policyToUse=query.getInMemoryQueryIndirectionPolicyState();
  if (conforming && (policyToUse != InMemoryQueryIndirectionPolicy.SHOULD_TRIGGER_INDIRECTION)) {
    policyToUse=InMemoryQueryIndirectionPolicy.SHOULD_IGNORE_EXCEPTION_RETURN_CONFORMED;
  }
  Object cachedObject=null;
  Expression selectionCriteria=getSelectionCriteria();
  Vector selectionKey=query.getSelectionKey();
  Object selectionObject=query.getSelectionObject();
  if ((selectionKey != null) || (selectionObject != null)) {
    if (selectionKey == null) {
      selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(selectionObject,session,true);
      if (selectionKey == null) {
        return InvalidObject.instance;
      }
      query.setSelectionKey(selectionKey);
    }
    if (descriptor.shouldAcquireCascadedLocks()) {
      cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
    }
 else {
      cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
    }
    if (selectionKey.contains(null)) {
      return InvalidObject.instance;
    }
  }
 else {
    if (selectionCriteria == null) {
      if (query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork() || query.shouldCheckCacheOnly()|| query.shouldCheckCacheThenDatabase()) {
        cachedObject=session.getIdentityMapAccessorInstance().getIdentityMapManager().getFromIdentityMap(null,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
      }
    }
 else {
      selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(true,selectionCriteria,translationRow,session);
      if ((selectionKey != null) || query.shouldCheckCacheByExactPrimaryKey()) {
        if (selectionKey != null) {
          if (descriptor.shouldAcquireCascadedLocks()) {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
          }
 else {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
          }
          if (selectionKey.contains(null)) {
            return InvalidObject.instance;
          }
        }
      }
 else {
        Vector inexactSelectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(false,selectionCriteria,translationRow,session);
        if (inexactSelectionKey != null) {
          if (descriptor.shouldAcquireCascadedLocks()) {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMapWithDeferredLock(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
          }
 else {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
          }
          if (cachedObject != null) {
            try {
              ExpressionBuilder builder=selectionCriteria.getBuilder();
              builder.setSession(session.getRootSession(null));
              builder.setQueryClass(descriptor.getJavaClass());
              if (!selectionCriteria.doesConform(cachedObject,session,translationRow,policyToUse)) {
                cachedObject=null;
              }
            }
 catch (            QueryException exception) {
              if (query.shouldCheckCacheOnly()) {
                throw exception;
              }
              cachedObject=null;
            }
          }
        }
        boolean conformingButOutsideUnitOfWork=((query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork()) && !session.isUnitOfWork());
        if ((cachedObject == null) && (conforming || (!query.shouldCheckCacheByPrimaryKey() && !conformingButOutsideUnitOfWork))) {
          if (selectionCriteria != null) {
            ExpressionBuilder builder=selectionCriteria.getBuilder();
            builder.setSession(session.getRootSession(null));
            builder.setQueryClass(descriptor.getJavaClass());
          }
          try {
            cachedObject=session.getIdentityMapAccessorInstance().getIdentityMapManager().getFromIdentityMap(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
          }
 catch (          QueryException exception) {
            if (query.shouldCheckCacheOnly()) {
              throw exception;
            }
          }
        }
      }
    }
  }
  if (conforming) {
    if (cachedObject == null) {
      if (selectionKey != null) {
        if (!uow.shouldNewObjectsBeCached()) {
          cachedObject=uow.getObjectFromNewObjects(query.getReferenceClass(),selectionKey);
        }
      }
 else {
        if (selectionCriteria != null) {
          ExpressionBuilder builder=selectionCriteria.getBuilder();
          builder.setSession(session.getRootSession(null));
          builder.setQueryClass(descriptor.getJavaClass());
        }
        try {
          cachedObject=uow.getObjectFromNewObjects(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse);
        }
 catch (        QueryException exception) {
        }
      }
    }
    if (cachedObject != null) {
      if (uow.isObjectDeleted(cachedObject)) {
        if (selectionKey != null) {
          return InvalidObject.instance;
        }
 else {
          cachedObject=null;
        }
      }
    }
  }
  if (cachedObject != null) {
    if (descriptor.hasFetchGroupManager()) {
      if (descriptor.getFetchGroupManager().isPartialObject(cachedObject)) {
        if (!descriptor.getFetchGroupManager().isObjectValidForFetchGroup(cachedObject,query.getFetchGroup())) {
          cachedObject=null;
        }
      }
    }
  }
  if ((cachedObject == null) && query.shouldCheckCacheOnly()) {
    return InvalidObject.instance;
  }
  return cachedObject;
}","/** 
 * Perform a cache lookup for the query This is only called from read object query. The query has already checked that the cache should be checked.
 */
public Object checkCacheForObject(AbstractRecord translationRow,AbstractSession session){
  ReadObjectQuery query=getReadObjectQuery();
  ClassDescriptor descriptor=getDescriptor();
  boolean conforming=false;
  UnitOfWorkImpl uow=null;
  if (session.isUnitOfWork()) {
    conforming=query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork();
    uow=(UnitOfWorkImpl)session;
  }
  int policyToUse=query.getInMemoryQueryIndirectionPolicyState();
  if (conforming && (policyToUse != InMemoryQueryIndirectionPolicy.SHOULD_TRIGGER_INDIRECTION)) {
    policyToUse=InMemoryQueryIndirectionPolicy.SHOULD_IGNORE_EXCEPTION_RETURN_CONFORMED;
  }
  Object cachedObject=null;
  Expression selectionCriteria=getSelectionCriteria();
  Vector selectionKey=query.getSelectionKey();
  Object selectionObject=query.getSelectionObject();
  if ((selectionKey != null) || (selectionObject != null)) {
    if (selectionKey == null) {
      selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(selectionObject,session,true);
      if (selectionKey == null) {
        return InvalidObject.instance;
      }
      query.setSelectionKey(selectionKey);
    }
    if (descriptor.shouldAcquireCascadedLocks()) {
      cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
    }
 else {
      cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
    }
    if (selectionKey.contains(null)) {
      return InvalidObject.instance;
    }
  }
 else {
    if (selectionCriteria == null) {
      if (query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork() || query.shouldCheckCacheOnly()|| query.shouldCheckCacheThenDatabase()) {
        cachedObject=session.getIdentityMapAccessorInstance().getIdentityMapManager().getFromIdentityMap(null,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
      }
    }
 else {
      selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(true,selectionCriteria,translationRow,session);
      if ((selectionKey != null) || query.shouldCheckCacheByExactPrimaryKey()) {
        if (selectionKey != null) {
          if (descriptor.shouldAcquireCascadedLocks()) {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
          }
 else {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
          }
          if (selectionKey.contains(null)) {
            return InvalidObject.instance;
          }
        }
      }
 else {
        Vector inexactSelectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(false,selectionCriteria,translationRow,session);
        if (inexactSelectionKey != null) {
          if (descriptor.shouldAcquireCascadedLocks()) {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMapWithDeferredLock(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
          }
 else {
            cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
          }
          if (cachedObject != null) {
            try {
              ExpressionBuilder builder=selectionCriteria.getBuilder();
              builder.setSession(session.getRootSession(null));
              builder.setQueryClass(descriptor.getJavaClass());
              if (!selectionCriteria.doesConform(cachedObject,session,translationRow,policyToUse)) {
                cachedObject=null;
              }
            }
 catch (            QueryException exception) {
              if (query.shouldCheckCacheOnly()) {
                throw exception;
              }
              cachedObject=null;
            }
          }
        }
        boolean conformingButOutsideUnitOfWork=((query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork()) && !session.isUnitOfWork());
        if ((cachedObject == null) && (conforming || (!query.shouldCheckCacheByPrimaryKey() && !conformingButOutsideUnitOfWork))) {
          if (selectionCriteria != null) {
            ExpressionBuilder builder=selectionCriteria.getBuilder();
            builder.setSession(session.getRootSession(null));
            builder.setQueryClass(descriptor.getJavaClass());
          }
          try {
            cachedObject=session.getIdentityMapAccessorInstance().getIdentityMapManager().getFromIdentityMap(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
          }
 catch (          QueryException exception) {
            if (query.shouldCheckCacheOnly()) {
              throw exception;
            }
          }
        }
      }
    }
  }
  if (conforming) {
    if (cachedObject == null) {
      if (selectionKey != null) {
        if (!uow.shouldNewObjectsBeCached()) {
          cachedObject=uow.getObjectFromNewObjects(query.getReferenceClass(),selectionKey);
        }
      }
 else {
        if (selectionCriteria != null) {
          ExpressionBuilder builder=selectionCriteria.getBuilder();
          builder.setSession(session.getRootSession(null));
          builder.setQueryClass(descriptor.getJavaClass());
        }
        try {
          cachedObject=uow.getObjectFromNewObjects(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse);
        }
 catch (        QueryException exception) {
        }
      }
    }
    if (cachedObject != null) {
      if (uow.isObjectDeleted(cachedObject)) {
        if (selectionKey != null) {
          return InvalidObject.instance;
        }
 else {
          cachedObject=null;
        }
      }
    }
  }
  if (cachedObject != null) {
    if (descriptor.hasFetchGroupManager()) {
      if (descriptor.getFetchGroupManager().isPartialObject(cachedObject)) {
        if (!descriptor.getFetchGroupManager().isObjectValidForFetchGroup(cachedObject,query.getFetchGroup())) {
          cachedObject=null;
        }
      }
    }
  }
  if ((cachedObject == null) && query.shouldCheckCacheOnly() && !session.isUnitOfWork()) {
    return InvalidObject.instance;
  }
  return cachedObject;
}"
68334,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  return new TestSetup(suite){
    protected void tearDown(){
      clearCache();
    }
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession();
      EmployeePopulator employeePopulator=new EmployeePopulator();
      new AdvancedTableCreator().replaceTables(session);
      comparer=new JUnitDomainObjectComparer();
      comparer.setSession((AbstractSession)session.getActiveSession());
      employeePopulator.buildExamples();
      employeePopulator.persistExample(session);
    }
  }
;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedQueryTestSuite(""String_Node_Str""));
  return new TestSetup(suite){
    protected void tearDown(){
      clearCache();
    }
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession();
      EmployeePopulator employeePopulator=new EmployeePopulator();
      new AdvancedTableCreator().replaceTables(session);
      comparer=new JUnitDomainObjectComparer();
      comparer.setSession((AbstractSession)session.getActiveSession());
      employeePopulator.buildExamples();
      employeePopulator.persistExample(session);
    }
  }
;
}"
68335,"public boolean equals(java.lang.Object arg0){
  if (!(arg0 instanceof Child)) {
    return false;
  }
  return id == ((Child)arg0).id;
}","public boolean equals(java.lang.Object arg0){
  if (!(arg0 instanceof Child)) {
    return false;
  }
  Child c2=(Child)arg0;
  if ((id == c2.id) || ((id != null) && (c2.id != null) && id.equals(c2.id))) {
    return true;
  }
  return false;
}"
68336,"protected void setup() throws Exception {
  originalSession=getExecutor().getSession();
  createObject();
  try {
    LocateRegistry.createRegistry(41099);
  }
 catch (  Exception e) {
  }
  cluster1Session=buildSession(""String_Node_Str"");
  cluster1Session.login();
  cluster2Session=buildSession(""String_Node_Str"");
  cluster2Session.login();
  Thread.sleep(5000);
  policy1=disableOptimisticLocking(cluster1Session);
  policy2=disableOptimisticLocking(cluster2Session);
}","protected void setup() throws Exception {
  originalSession=getExecutor().getSession();
  originalSession.getIdentityMapAccessor().initializeAllIdentityMaps();
  createObject();
  try {
    LocateRegistry.createRegistry(41099);
  }
 catch (  Exception e) {
  }
  cluster1Session=buildSession(""String_Node_Str"");
  cluster1Session.login();
  cluster2Session=buildSession(""String_Node_Str"");
  cluster2Session.login();
  Thread.sleep(5000);
  policy1=disableOptimisticLocking(cluster1Session);
  policy2=disableOptimisticLocking(cluster2Session);
}"
68337,"/** 
 * INTERNAL: This method returns the application ClassLoader. The parent application ClassLoader is returned when running in a J2EE client  either in a web or ejb container to match a weak reference to a particular  HelperContext.
 */
protected ClassLoader getContextClassLoader(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=classLoader.getClass().getName();
  if (classLoaderName.startsWith(""String_Node_Str"")) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
  }
 else   if (classLoaderName.startsWith(""String_Node_Str"")) {
    final int systemLoaderOffest=4;
    ClassLoader systemLoader=ClassLoader.getSystemClassLoader();
    ClassLoader currentLoader=classLoader;
    ArrayList<ClassLoader> loaders=new ArrayList<ClassLoader>();
    loaders.add(currentLoader);
    while (currentLoader.getParent() != null) {
      currentLoader=currentLoader.getParent();
      loaders.add(currentLoader);
      if (currentLoader.getParent() == systemLoader) {
        if (loaders.size() >= 4) {
          classLoader=loaders.get(loaders.size() - systemLoaderOffest);
          break;
        }
      }
    }
  }
  return classLoader;
}","/** 
 * INTERNAL: This method returns the application ClassLoader. The parent application ClassLoader is returned when running in a J2EE client  either in a web or ejb container to match a weak reference to a particular  HelperContext.
 */
protected ClassLoader getContextClassLoader(){
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String classLoaderName=classLoader.getClass().getName();
  if (classLoaderName.startsWith(""String_Node_Str"")) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
  }
 else   if (classLoaderName.startsWith(""String_Node_Str"")) {
    final int systemLoaderOffest=3;
    ClassLoader systemLoader=ClassLoader.getSystemClassLoader();
    ClassLoader currentLoader=classLoader;
    ArrayList<ClassLoader> loaders=new ArrayList<ClassLoader>();
    loaders.add(currentLoader);
    while (currentLoader.getParent() != null) {
      currentLoader=currentLoader.getParent();
      loaders.add(currentLoader);
      if (currentLoader.getParent() == systemLoader) {
        if (loaders.size() >= 4) {
          classLoader=loaders.get(loaders.size() - systemLoaderOffest);
          break;
        }
      }
    }
  }
  return classLoader;
}"
68338,"/** 
 * Create a DataObject of the Type specified.
 * @param type The Type.
 * @return the created DataObject.
 * @throws IllegalArgumentException if the Typecannot be instantiated by this factory.
 */
public DataObject create(Type type){
  if (type.isAbstract() || type.isDataType()) {
    throw new IllegalArgumentException(SDOException.errorCreatingDataObjectForType(type.getURI(),type.getName()));
  }
  Class typedDataObjectClass=((SDOType)type).getInstanceClass();
  if (typedDataObjectClass != null) {
    try {
      Class implClass=((SDOType)type).getImplClass();
      if (implClass != null) {
        SDODataObject theDataObject=(SDODataObject)implClass.newInstance();
        theDataObject._setType(type);
        theDataObject._setHelperContext(getHelperContext());
        return theDataObject;
      }
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException(SDOException.errorCreatingDataObjectForClass(e,typedDataObjectClass.getName(),type.getURI(),type.getName()));
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException(SDOException.errorCreatingDataObjectForClass(e,typedDataObjectClass.getName(),type.getURI(),type.getName()));
    }
  }
  SDODataObject dataObject=new SDODataObject();
  dataObject._setType(type);
  dataObject._setHelperContext(getHelperContext());
  return dataObject;
}","/** 
 * Create a DataObject of the Type specified.
 * @param type The Type.
 * @return the created DataObject.
 * @throws IllegalArgumentException if the Typecannot be instantiated by this factory.
 */
public DataObject create(Type type){
  if (type.isAbstract()) {
    throw new IllegalArgumentException(SDOException.errorCreatingDataObjectForType(type.getURI(),type.getName()));
  }
  if (type.isDataType()) {
    SDOTypeHelper sth=(SDOTypeHelper)aHelperContext.getTypeHelper();
    type=(SDOType)sth.getWrappersHashMap().get(((SDOType)type).getQName());
  }
  Class typedDataObjectClass=((SDOType)type).getInstanceClass();
  if (typedDataObjectClass != null) {
    try {
      Class implClass=((SDOType)type).getImplClass();
      if (implClass != null) {
        SDODataObject theDataObject=(SDODataObject)implClass.newInstance();
        theDataObject._setType(type);
        theDataObject._setHelperContext(getHelperContext());
        return theDataObject;
      }
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException(SDOException.errorCreatingDataObjectForClass(e,typedDataObjectClass.getName(),type.getURI(),type.getName()));
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException(SDOException.errorCreatingDataObjectForClass(e,typedDataObjectClass.getName(),type.getURI(),type.getName()));
    }
  }
  SDODataObject dataObject=new SDODataObject();
  dataObject._setType(type);
  dataObject._setHelperContext(getHelperContext());
  return dataObject;
}"
68339,"public void addWrappersToProject(Project project){
  SDO_BOOLEAN_WRAPPER.addDescriptorToProject(project);
  SDO_BYTE_WRAPPER.addDescriptorToProject(project);
  SDO_BYTES_WRAPPER.addDescriptorToProject(project);
  SDO_CHARACTER_WRAPPER.addDescriptorToProject(project);
  SDO_DATE_WRAPPER.addDescriptorToProject(project);
  SDO_DATETIME_WRAPPER.addDescriptorToProject(project);
  SDO_DAY_WRAPPER.addDescriptorToProject(project);
  SDO_DECIMAL_WRAPPER.addDescriptorToProject(project);
  SDO_DOUBLE_WRAPPER.addDescriptorToProject(project);
  SDO_DURATION_WRAPPER.addDescriptorToProject(project);
  SDO_FLOAT_WRAPPER.addDescriptorToProject(project);
  SDO_INT_WRAPPER.addDescriptorToProject(project);
  SDO_INTEGER_WRAPPER.addDescriptorToProject(project);
  SDO_LONG_WRAPPER.addDescriptorToProject(project);
  SDO_MONTH_WRAPPER.addDescriptorToProject(project);
  SDO_MONTHDAY_WRAPPER.addDescriptorToProject(project);
  SDO_OBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_SHORT_WRAPPER.addDescriptorToProject(project);
  SDO_STRING_WRAPPER.addDescriptorToProject(project);
  SDO_STRINGS_WRAPPER.addDescriptorToProject(project);
  SDO_TIME_WRAPPER.addDescriptorToProject(project);
  SDO_URI_WRAPPER.addDescriptorToProject(project);
  SDO_YEAR_WRAPPER.addDescriptorToProject(project);
  SDO_YEARMONTH_WRAPPER.addDescriptorToProject(project);
  SDO_YEARMONTHDAY_WRAPPER.addDescriptorToProject(project);
}","public void addWrappersToProject(Project project){
  SDO_BOOLEAN_WRAPPER.addDescriptorToProject(project);
  SDO_BYTE_WRAPPER.addDescriptorToProject(project);
  SDO_BYTES_WRAPPER.addDescriptorToProject(project);
  SDO_CHARACTER_WRAPPER.addDescriptorToProject(project);
  SDO_DATE_WRAPPER.addDescriptorToProject(project);
  SDO_DATETIME_WRAPPER.addDescriptorToProject(project);
  SDO_DAY_WRAPPER.addDescriptorToProject(project);
  SDO_DECIMAL_WRAPPER.addDescriptorToProject(project);
  SDO_DOUBLE_WRAPPER.addDescriptorToProject(project);
  SDO_DURATION_WRAPPER.addDescriptorToProject(project);
  SDO_FLOAT_WRAPPER.addDescriptorToProject(project);
  SDO_INT_WRAPPER.addDescriptorToProject(project);
  SDO_INTEGER_WRAPPER.addDescriptorToProject(project);
  SDO_LONG_WRAPPER.addDescriptorToProject(project);
  SDO_MONTH_WRAPPER.addDescriptorToProject(project);
  SDO_MONTHDAY_WRAPPER.addDescriptorToProject(project);
  SDO_OBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_SHORT_WRAPPER.addDescriptorToProject(project);
  SDO_STRING_WRAPPER.addDescriptorToProject(project);
  SDO_STRINGS_WRAPPER.addDescriptorToProject(project);
  SDO_TIME_WRAPPER.addDescriptorToProject(project);
  SDO_URI_WRAPPER.addDescriptorToProject(project);
  SDO_YEAR_WRAPPER.addDescriptorToProject(project);
  SDO_YEARMONTH_WRAPPER.addDescriptorToProject(project);
  SDO_YEARMONTHDAY_WRAPPER.addDescriptorToProject(project);
  SDO_BOOLEANOBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_BYTEOBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_CHARACTEROBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_DOUBLEOBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_FLOATOBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_INTOBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_LONGOBJECT_WRAPPER.addDescriptorToProject(project);
  SDO_SHORTOBJECT_WRAPPER.addDescriptorToProject(project);
}"
68340,"/** 
 * initializes HashMap typesHashMap.
 */
private void initTypesHashMap(){
  typesHashMap=new HashMap();
  SDOType typeType=(SDOType)this.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  SDOType xmlHelperLoadOptionsType=new SDOXMLHelperLoadOptionsType(this,typeType);
  typesHashMap.put(xmlHelperLoadOptionsType.getQName(),xmlHelperLoadOptionsType);
  SDOType openSequencedType=new SDOOpenSequencedType(this);
  typesHashMap.put(openSequencedType.getQName(),openSequencedType);
  typesHashMap.put(SDO_BOOLEAN_WRAPPER.getQName(),SDO_BOOLEAN_WRAPPER);
  typesHashMap.put(SDO_BYTE_WRAPPER.getQName(),SDO_BYTE_WRAPPER);
  typesHashMap.put(SDO_BYTES_WRAPPER.getQName(),SDO_BYTES_WRAPPER);
  typesHashMap.put(SDO_CHARACTER_WRAPPER.getQName(),SDO_CHARACTER_WRAPPER);
  typesHashMap.put(SDO_DATE_WRAPPER.getQName(),SDO_DATE_WRAPPER);
  typesHashMap.put(SDO_DATETIME_WRAPPER.getQName(),SDO_DATETIME_WRAPPER);
  typesHashMap.put(SDO_DAY_WRAPPER.getQName(),SDO_DAY_WRAPPER);
  typesHashMap.put(SDO_DECIMAL_WRAPPER.getQName(),SDO_DECIMAL_WRAPPER);
  typesHashMap.put(SDO_DOUBLE_WRAPPER.getQName(),SDO_DOUBLE_WRAPPER);
  typesHashMap.put(SDO_DURATION_WRAPPER.getQName(),SDO_DURATION_WRAPPER);
  typesHashMap.put(SDO_FLOAT_WRAPPER.getQName(),SDO_FLOAT_WRAPPER);
  typesHashMap.put(SDO_INT_WRAPPER.getQName(),SDO_INT_WRAPPER);
  typesHashMap.put(SDO_INTEGER_WRAPPER.getQName(),SDO_INTEGER_WRAPPER);
  typesHashMap.put(SDO_LONG_WRAPPER.getQName(),SDO_LONG_WRAPPER);
  typesHashMap.put(SDO_MONTH_WRAPPER.getQName(),SDO_MONTH_WRAPPER);
  typesHashMap.put(SDO_MONTHDAY_WRAPPER.getQName(),SDO_MONTHDAY_WRAPPER);
  typesHashMap.put(SDO_OBJECT_WRAPPER.getQName(),SDO_OBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORT_WRAPPER.getQName(),SDO_SHORT_WRAPPER);
  typesHashMap.put(SDO_STRING_WRAPPER.getQName(),SDO_STRING_WRAPPER);
  typesHashMap.put(SDO_STRINGS_WRAPPER.getQName(),SDO_STRINGS_WRAPPER);
  typesHashMap.put(SDO_TIME_WRAPPER.getQName(),SDO_TIME_WRAPPER);
  typesHashMap.put(SDO_URI_WRAPPER.getQName(),SDO_URI_WRAPPER);
  typesHashMap.put(SDO_YEAR_WRAPPER.getQName(),SDO_YEAR_WRAPPER);
  typesHashMap.put(SDO_YEARMONTH_WRAPPER.getQName(),SDO_YEARMONTH_WRAPPER);
  typesHashMap.put(SDO_YEARMONTHDAY_WRAPPER.getQName(),SDO_YEARMONTHDAY_WRAPPER);
}","/** 
 * initializes HashMap typesHashMap.
 */
private void initTypesHashMap(){
  typesHashMap=new HashMap();
  SDOType typeType=(SDOType)this.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  SDOType xmlHelperLoadOptionsType=new SDOXMLHelperLoadOptionsType(this,typeType);
  typesHashMap.put(xmlHelperLoadOptionsType.getQName(),xmlHelperLoadOptionsType);
  SDOType openSequencedType=new SDOOpenSequencedType(this);
  typesHashMap.put(openSequencedType.getQName(),openSequencedType);
  typesHashMap.put(SDO_BOOLEAN_WRAPPER.getQName(),SDO_BOOLEAN_WRAPPER);
  typesHashMap.put(SDO_BYTE_WRAPPER.getQName(),SDO_BYTE_WRAPPER);
  typesHashMap.put(SDO_BYTES_WRAPPER.getQName(),SDO_BYTES_WRAPPER);
  typesHashMap.put(SDO_CHARACTER_WRAPPER.getQName(),SDO_CHARACTER_WRAPPER);
  typesHashMap.put(SDO_DATE_WRAPPER.getQName(),SDO_DATE_WRAPPER);
  typesHashMap.put(SDO_DATETIME_WRAPPER.getQName(),SDO_DATETIME_WRAPPER);
  typesHashMap.put(SDO_DAY_WRAPPER.getQName(),SDO_DAY_WRAPPER);
  typesHashMap.put(SDO_DECIMAL_WRAPPER.getQName(),SDO_DECIMAL_WRAPPER);
  typesHashMap.put(SDO_DOUBLE_WRAPPER.getQName(),SDO_DOUBLE_WRAPPER);
  typesHashMap.put(SDO_DURATION_WRAPPER.getQName(),SDO_DURATION_WRAPPER);
  typesHashMap.put(SDO_FLOAT_WRAPPER.getQName(),SDO_FLOAT_WRAPPER);
  typesHashMap.put(SDO_INT_WRAPPER.getQName(),SDO_INT_WRAPPER);
  typesHashMap.put(SDO_INTEGER_WRAPPER.getQName(),SDO_INTEGER_WRAPPER);
  typesHashMap.put(SDO_LONG_WRAPPER.getQName(),SDO_LONG_WRAPPER);
  typesHashMap.put(SDO_MONTH_WRAPPER.getQName(),SDO_MONTH_WRAPPER);
  typesHashMap.put(SDO_MONTHDAY_WRAPPER.getQName(),SDO_MONTHDAY_WRAPPER);
  typesHashMap.put(SDO_OBJECT_WRAPPER.getQName(),SDO_OBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORT_WRAPPER.getQName(),SDO_SHORT_WRAPPER);
  typesHashMap.put(SDO_STRING_WRAPPER.getQName(),SDO_STRING_WRAPPER);
  typesHashMap.put(SDO_STRINGS_WRAPPER.getQName(),SDO_STRINGS_WRAPPER);
  typesHashMap.put(SDO_TIME_WRAPPER.getQName(),SDO_TIME_WRAPPER);
  typesHashMap.put(SDO_URI_WRAPPER.getQName(),SDO_URI_WRAPPER);
  typesHashMap.put(SDO_YEAR_WRAPPER.getQName(),SDO_YEAR_WRAPPER);
  typesHashMap.put(SDO_YEARMONTH_WRAPPER.getQName(),SDO_YEARMONTH_WRAPPER);
  typesHashMap.put(SDO_YEARMONTHDAY_WRAPPER.getQName(),SDO_YEARMONTHDAY_WRAPPER);
  typesHashMap.put(SDO_BOOLEANOBJECT_WRAPPER.getQName(),SDO_BOOLEANOBJECT_WRAPPER);
  typesHashMap.put(SDO_BYTEOBJECT_WRAPPER.getQName(),SDO_BYTEOBJECT_WRAPPER);
  typesHashMap.put(SDO_CHARACTEROBJECT_WRAPPER.getQName(),SDO_CHARACTEROBJECT_WRAPPER);
  typesHashMap.put(SDO_DOUBLEOBJECT_WRAPPER.getQName(),SDO_DOUBLEOBJECT_WRAPPER);
  typesHashMap.put(SDO_FLOATOBJECT_WRAPPER.getQName(),SDO_FLOATOBJECT_WRAPPER);
  typesHashMap.put(SDO_INTOBJECT_WRAPPER.getQName(),SDO_INTOBJECT_WRAPPER);
  typesHashMap.put(SDO_LONGOBJECT_WRAPPER.getQName(),SDO_LONGOBJECT_WRAPPER);
  typesHashMap.put(SDO_SHORTOBJECT_WRAPPER.getQName(),SDO_SHORTOBJECT_WRAPPER);
}"
68341,"/** 
 * Initializes the wrappersHashMap HashMap.
 */
private void initWrappersHashMap(){
  wrappersHashMap=new HashMap<QName,SDOType>();
  wrappersHashMap.put(SDOConstants.SDO_BOOLEAN.getQName(),SDO_BOOLEAN_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_BYTE.getQName(),SDO_BYTE_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_BYTES.getQName(),SDO_BYTES_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_CHARACTER.getQName(),SDO_CHARACTER_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DATE.getQName(),SDO_DATE_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DATETIME.getQName(),SDO_DATETIME_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DAY.getQName(),SDO_DAY_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DECIMAL.getQName(),SDO_DECIMAL_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DOUBLE.getQName(),SDO_DOUBLE_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DURATION.getQName(),SDO_DURATION_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_FLOAT.getQName(),SDO_FLOAT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_INT.getQName(),SDO_INT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_INTEGER.getQName(),SDO_INTEGER_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_LONG.getQName(),SDO_LONG_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_MONTH.getQName(),SDO_MONTH_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_MONTHDAY.getQName(),SDO_MONTHDAY_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_OBJECT.getQName(),SDO_OBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_SHORT.getQName(),SDO_SHORT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_STRING.getQName(),SDO_STRING_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_STRINGS.getQName(),SDO_STRINGS_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_TIME.getQName(),SDO_TIME_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_URI.getQName(),SDO_URI_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_YEAR.getQName(),SDO_YEAR_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_YEARMONTH.getQName(),SDO_YEARMONTH_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_YEARMONTHDAY.getQName(),SDO_YEARMONTHDAY_WRAPPER);
  Iterator wrappers=wrappersHashMap.values().iterator();
  while (wrappers.hasNext()) {
    SDOWrapperType wrapper=(SDOWrapperType)wrappers.next();
    Iterator descriptors=wrapper.getDescriptorsMap().values().iterator();
    while (descriptors.hasNext()) {
      XMLDescriptor d=(XMLDescriptor)descriptors.next();
      interfacesToSDOTypeHashMap.put((Class)d.getInterfacePolicy().getParentInterfaces().firstElement(),wrapper);
    }
  }
}","/** 
 * Initializes the wrappersHashMap HashMap.
 */
private void initWrappersHashMap(){
  wrappersHashMap=new HashMap<QName,SDOType>();
  wrappersHashMap.put(SDOConstants.SDO_BOOLEAN.getQName(),SDO_BOOLEAN_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_BYTE.getQName(),SDO_BYTE_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_BYTES.getQName(),SDO_BYTES_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_CHARACTER.getQName(),SDO_CHARACTER_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DATE.getQName(),SDO_DATE_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DATETIME.getQName(),SDO_DATETIME_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DAY.getQName(),SDO_DAY_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DECIMAL.getQName(),SDO_DECIMAL_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DOUBLE.getQName(),SDO_DOUBLE_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DURATION.getQName(),SDO_DURATION_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_FLOAT.getQName(),SDO_FLOAT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_INT.getQName(),SDO_INT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_INTEGER.getQName(),SDO_INTEGER_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_LONG.getQName(),SDO_LONG_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_MONTH.getQName(),SDO_MONTH_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_MONTHDAY.getQName(),SDO_MONTHDAY_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_OBJECT.getQName(),SDO_OBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_SHORT.getQName(),SDO_SHORT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_STRING.getQName(),SDO_STRING_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_STRINGS.getQName(),SDO_STRINGS_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_TIME.getQName(),SDO_TIME_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_URI.getQName(),SDO_URI_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_YEAR.getQName(),SDO_YEAR_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_YEARMONTH.getQName(),SDO_YEARMONTH_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_YEARMONTHDAY.getQName(),SDO_YEARMONTHDAY_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_BOOLEANOBJECT.getQName(),SDO_BOOLEANOBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_BYTEOBJECT.getQName(),SDO_BYTEOBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_CHARACTEROBJECT.getQName(),SDO_CHARACTEROBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_DOUBLEOBJECT.getQName(),SDO_DOUBLEOBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_FLOATOBJECT.getQName(),SDO_FLOATOBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_INTOBJECT.getQName(),SDO_INTOBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_LONGOBJECT.getQName(),SDO_LONGOBJECT_WRAPPER);
  wrappersHashMap.put(SDOConstants.SDO_SHORTOBJECT.getQName(),SDO_SHORTOBJECT_WRAPPER);
  Iterator wrappers=wrappersHashMap.values().iterator();
  while (wrappers.hasNext()) {
    SDOWrapperType wrapper=(SDOWrapperType)wrappers.next();
    Iterator descriptors=wrapper.getDescriptorsMap().values().iterator();
    while (descriptors.hasNext()) {
      XMLDescriptor d=(XMLDescriptor)descriptors.next();
      interfacesToSDOTypeHashMap.put((Class)d.getInterfacePolicy().getParentInterfaces().firstElement(),wrapper);
    }
  }
}"
68342,"public void initWrapperTypes(){
  SDO_BOOLEAN_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEAN,SDOConstants.BOOLEAN,this,XMLConstants.BOOLEAN_QNAME);
  SDO_BYTE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTE,SDOConstants.BYTE,this,XMLConstants.BYTE_QNAME);
  SDO_BYTES_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTES,SDOConstants.BYTES,this,new QName[]{XMLConstants.BASE_64_BINARY_QNAME,XMLConstants.HEX_BINARY_QNAME});
  SDO_CHARACTER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTER,SDOConstants.CHARACTER,this,XMLConstants.STRING_QNAME);
  SDO_DATE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATE,SDOConstants.DATE,this,XMLConstants.DATE_QNAME);
  SDO_DATETIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATETIME,SDOConstants.DATETIME,this,XMLConstants.DATE_TIME_QNAME);
  SDO_DAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DAY,SDOConstants.DAY,this,XMLConstants.G_DAY_QNAME);
  SDO_DECIMAL_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DECIMAL,SDOConstants.DECIMAL,this,XMLConstants.DECIMAL_QNAME);
  SDO_DOUBLE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLE,SDOConstants.DOUBLE,this,XMLConstants.DOUBLE_QNAME);
  SDO_DURATION_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DURATION,SDOConstants.DURATION,this,XMLConstants.DURATION_QNAME);
  SDO_FLOAT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOAT,SDOConstants.FLOAT,this,XMLConstants.FLOAT_QNAME);
  SDO_INT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INT,SDOConstants.INT,this,XMLConstants.INT_QNAME);
  SDO_INTEGER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTEGER,SDOConstants.INTEGER,this,XMLConstants.INTEGER_QNAME);
  SDO_LONG_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONG,SDOConstants.LONG,this,XMLConstants.LONG_QNAME);
  SDO_MONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTH,SDOConstants.MONTH,this,XMLConstants.G_MONTH_QNAME);
  SDO_MONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTHDAY,SDOConstants.MONTHDAY,this,XMLConstants.G_MONTH_DAY_QNAME);
  SDO_OBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_OBJECT,SDOConstants.OBJECT,this,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  SDO_SHORT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORT,SDOConstants.SHORT,this,XMLConstants.SHORT_QNAME);
  SDO_STRING_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRING,SDOConstants.STRING,this,XMLConstants.STRING_QNAME);
  SDO_STRINGS_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRINGS,SDOConstants.STRINGS,this,XMLConstants.STRING_QNAME);
  SDO_TIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_TIME,SDOConstants.TIME,this,XMLConstants.TIME_QNAME);
  SDO_URI_WRAPPER=new SDOWrapperType(SDOConstants.SDO_URI,SDOConstants.URI,this,XMLConstants.ANY_URI_QNAME);
  SDO_YEAR_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEAR,SDOConstants.YEAR,this,XMLConstants.G_YEAR_QNAME);
  SDO_YEARMONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTH,SDOConstants.YEARMONTH,this,XMLConstants.G_YEAR_MONTH_QNAME);
  SDO_YEARMONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTHDAY,SDOConstants.YEARMONTHDAY,this,XMLConstants.DATE_QNAME);
}","public void initWrapperTypes(){
  SDO_BOOLEAN_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEAN,SDOConstants.BOOLEAN,this,XMLConstants.BOOLEAN_QNAME);
  SDO_BYTE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTE,SDOConstants.BYTE,this,XMLConstants.BYTE_QNAME);
  SDO_BYTES_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTES,SDOConstants.BYTES,this,new QName[]{XMLConstants.BASE_64_BINARY_QNAME,XMLConstants.HEX_BINARY_QNAME});
  SDO_CHARACTER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTER,SDOConstants.CHARACTER,this,XMLConstants.STRING_QNAME);
  SDO_DATE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATE,SDOConstants.DATE,this,XMLConstants.DATE_QNAME);
  SDO_DATETIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATETIME,SDOConstants.DATETIME,this,XMLConstants.DATE_TIME_QNAME);
  SDO_DAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DAY,SDOConstants.DAY,this,XMLConstants.G_DAY_QNAME);
  SDO_DECIMAL_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DECIMAL,SDOConstants.DECIMAL,this,XMLConstants.DECIMAL_QNAME);
  SDO_DOUBLE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLE,SDOConstants.DOUBLE,this,XMLConstants.DOUBLE_QNAME);
  SDO_DURATION_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DURATION,SDOConstants.DURATION,this,XMLConstants.DURATION_QNAME);
  SDO_FLOAT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOAT,SDOConstants.FLOAT,this,XMLConstants.FLOAT_QNAME);
  SDO_INT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INT,SDOConstants.INT,this,XMLConstants.INT_QNAME);
  SDO_INTEGER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTEGER,SDOConstants.INTEGER,this,XMLConstants.INTEGER_QNAME);
  SDO_LONG_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONG,SDOConstants.LONG,this,XMLConstants.LONG_QNAME);
  SDO_MONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTH,SDOConstants.MONTH,this,XMLConstants.G_MONTH_QNAME);
  SDO_MONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTHDAY,SDOConstants.MONTHDAY,this,XMLConstants.G_MONTH_DAY_QNAME);
  SDO_OBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_OBJECT,SDOConstants.OBJECT,this,XMLConstants.ANY_SIMPLE_TYPE_QNAME);
  SDO_SHORT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORT,SDOConstants.SHORT,this,XMLConstants.SHORT_QNAME);
  SDO_STRING_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRING,SDOConstants.STRING,this,XMLConstants.STRING_QNAME);
  SDO_STRINGS_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRINGS,SDOConstants.STRINGS,this,XMLConstants.STRING_QNAME);
  SDO_TIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_TIME,SDOConstants.TIME,this,XMLConstants.TIME_QNAME);
  SDO_URI_WRAPPER=new SDOWrapperType(SDOConstants.SDO_URI,SDOConstants.URI,this,XMLConstants.ANY_URI_QNAME);
  SDO_YEAR_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEAR,SDOConstants.YEAR,this,XMLConstants.G_YEAR_QNAME);
  SDO_YEARMONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTH,SDOConstants.YEARMONTH,this,XMLConstants.G_YEAR_MONTH_QNAME);
  SDO_YEARMONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTHDAY,SDOConstants.YEARMONTHDAY,this,XMLConstants.DATE_QNAME);
  SDO_BOOLEANOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEANOBJECT,SDOConstants.BOOLEANOBJECT,this,XMLConstants.BOOLEAN_QNAME);
  SDO_BYTEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTEOBJECT,SDOConstants.BYTEOBJECT,this,XMLConstants.BYTE_QNAME);
  SDO_CHARACTEROBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTEROBJECT,SDOConstants.CHARACTEROBJECT,this,XMLConstants.STRING_QNAME);
  SDO_DOUBLEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLEOBJECT,SDOConstants.DOUBLEOBJECT,this,XMLConstants.DOUBLE_QNAME);
  SDO_FLOATOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOATOBJECT,SDOConstants.FLOATOBJECT,this,XMLConstants.FLOAT_QNAME);
  SDO_INTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTOBJECT,SDOConstants.INTOBJECT,this,XMLConstants.INT_QNAME);
  SDO_LONGOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONGOBJECT,SDOConstants.LONGOBJECT,this,XMLConstants.LONG_QNAME);
  SDO_SHORTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORTOBJECT,SDOConstants.SHORTOBJECT,this,XMLConstants.SHORT_QNAME);
}"
68343,"/** 
 * Return the Type for this interfaceClass or null if not found.
 * @param interfaceClass is the interface for the DataObject's Type -type.getInstanceClass();
 * @return the Type for this interfaceClass or null if not found.
 */
public SDOType getType(Class interfaceClass){
  SDOType type=(SDOType)getInterfacesToSDOTypeHashMap().get(interfaceClass);
  if (type != null) {
    return type;
  }
  Iterator iter=getTypesHashMap().keySet().iterator();
  while (iter.hasNext()) {
    QName key=(QName)iter.next();
    SDOType value=(SDOType)getTypesHashMap().get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  return null;
}","/** 
 * Return the Type for this interfaceClass or null if not found.
 * @param interfaceClass is the interface for the DataObject's Type -type.getInstanceClass();
 * @return the Type for this interfaceClass or null if not found.
 */
public SDOType getType(Class interfaceClass){
  SDOType type=(SDOType)getInterfacesToSDOTypeHashMap().get(interfaceClass);
  if (type != null) {
    return type;
  }
  Iterator iter=getTypesHashMap().keySet().iterator();
  while (iter.hasNext()) {
    QName key=(QName)iter.next();
    SDOType value=(SDOType)getTypesHashMap().get(key);
    if (value.getInstanceClass() == interfaceClass) {
      return value;
    }
  }
  return getTypeForSimpleJavaType(interfaceClass);
}"
68344,"public TableDefinition buildCITYSLICKERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(10);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}","public TableDefinition buildCITYSLICKERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(19);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}"
68345,"public TableDefinition buildCOUNTRYDWELLERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(10);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}","public TableDefinition buildCOUNTRYDWELLERTable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldFNAME=new FieldDefinition();
  fieldFNAME.setName(""String_Node_Str"");
  fieldFNAME.setTypeName(""String_Node_Str"");
  fieldFNAME.setSize(20);
  fieldFNAME.setSubSize(0);
  fieldFNAME.setIsPrimaryKey(true);
  fieldFNAME.setIsIdentity(false);
  fieldFNAME.setUnique(true);
  fieldFNAME.setShouldAllowNull(false);
  table.addField(fieldFNAME);
  FieldDefinition fieldLNAME=new FieldDefinition();
  fieldLNAME.setName(""String_Node_Str"");
  fieldLNAME.setTypeName(""String_Node_Str"");
  fieldLNAME.setSize(20);
  fieldLNAME.setSubSize(0);
  fieldLNAME.setIsPrimaryKey(true);
  fieldLNAME.setIsIdentity(false);
  fieldLNAME.setUnique(true);
  fieldLNAME.setShouldAllowNull(false);
  table.addField(fieldLNAME);
  FieldDefinition fieldAGE=new FieldDefinition();
  fieldAGE.setName(""String_Node_Str"");
  fieldAGE.setTypeName(""String_Node_Str"");
  fieldAGE.setSize(15);
  fieldAGE.setSubSize(0);
  fieldAGE.setIsPrimaryKey(false);
  fieldAGE.setIsIdentity(false);
  fieldAGE.setUnique(false);
  fieldAGE.setShouldAllowNull(false);
  table.addField(fieldAGE);
  FieldDefinition fieldGENDER=new FieldDefinition();
  fieldGENDER.setName(""String_Node_Str"");
  fieldGENDER.setTypeName(""String_Node_Str"");
  fieldGENDER.setSize(6);
  fieldGENDER.setSubSize(0);
  fieldGENDER.setIsPrimaryKey(false);
  fieldGENDER.setIsIdentity(false);
  fieldGENDER.setUnique(false);
  fieldGENDER.setShouldAllowNull(true);
  table.addField(fieldGENDER);
  FieldDefinition fieldWORLDID=new FieldDefinition();
  fieldWORLDID.setName(""String_Node_Str"");
  fieldWORLDID.setTypeName(""String_Node_Str"");
  fieldWORLDID.setSize(19);
  fieldWORLDID.setSubSize(0);
  fieldWORLDID.setIsPrimaryKey(false);
  fieldWORLDID.setIsIdentity(false);
  fieldWORLDID.setUnique(false);
  fieldWORLDID.setShouldAllowNull(true);
  fieldWORLDID.setForeignKeyFieldName(""String_Node_Str"");
  table.addField(fieldWORLDID);
  return table;
}"
68346,"public SchemaFactory getSchemaFactory(){
  if (null == schemaFactory) {
    schemaFactory=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);
  }
  return schemaFactory;
}","public SchemaFactory getSchemaFactory(){
  if (null == schemaFactory) {
    schemaFactory=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
  }
  return schemaFactory;
}"
68347,"public void testName002Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testName002Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68348,"public void testNamespace001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testNamespace001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68349,"public void testName001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testName001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68350,"public void testName001Negative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}","public void testName001Negative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}"
68351,"public void testNamespace001Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}","public void testNamespace001Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}"
68352,"public void testName002Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}","public void testName002Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}"
68353,"public void testBaseType001cPositive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testBaseType001cPositive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68354,"public void testBaseType001cNegative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}","public void testBaseType001cNegative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}"
68355,"/** 
 * The following test expects a schema validation exception to occur. This is due to the fact that the supplied instance document does not contain a 'firstName' element, which is required as the  corresponding field in the Employee class contains the following annotation:  @XmlElement(required = true)
 * @throws Exception
 */
public void testEmployeeSchemaGenMissingRequiredElement() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  String msg=""String_Node_Str"";
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getLocalizedMessage();
  }
  assertTrue(""String_Node_Str"",exception);
  assertTrue(""String_Node_Str"" + msg,msg.contains(""String_Node_Str""));
}","/** 
 * The following test expects a schema validation exception to occur. This is due to the fact that the supplied instance document does not contain a 'firstName' element, which is required as the  corresponding field in the Employee class contains the following annotation:  @XmlElement(required = true)
 * @throws Exception
 */
public void testEmployeeSchemaGenMissingRequiredElement() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  String msg=""String_Node_Str"";
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getLocalizedMessage();
  }
  assertTrue(""String_Node_Str"",exception);
  assertTrue(""String_Node_Str"" + msg,msg.contains(""String_Node_Str""));
}"
68356,"public void testEmployeeSchemaGeneration() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testEmployeeSchemaGeneration() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68357,"public Schema getSchema(){
  try {
    return SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema();
  }
 catch (  org.xml.sax.SAXException ex) {
  }
  return null;
}","public Schema getSchema(){
  try {
    return SchemaFactory.newInstance(XMLConstants.SCHEMA_URL).newSchema();
  }
 catch (  org.xml.sax.SAXException ex) {
  }
  return null;
}"
68358,"/** 
 * INTERNAL:
 * @param classBuffer
 * @param name
 * @param javaType (always represents the processed javaClass name)
 * @param annotation
 * @param className
 */
private void buildGetMethodBuffer(ClassBuffer classBuffer,SDOProperty property,java.util.List documentation){
  String returnType=getJavaTypeForProperty(property);
  String methodName=SDOUtil.getMethodName(property.getName());
  if (!(property.getType().isChangeSummaryType() && methodName.equals(""String_Node_Str""))) {
    if ((documentation != null) && (documentation.size() > 0)) {
      classBuffer.getMethodBuffer().append(buildGetterJavaDoc(documentation,property.getName()));
    }
    classBuffer.getMethodBuffer().append(indent);
    classBuffer.getMethodBuffer().append(""String_Node_Str"");
    classBuffer.getMethodBuffer().append(returnType).append(""String_Node_Str"");
    classBuffer.getMethodBuffer().append(methodName);
    classBuffer.getMethodBuffer().append(""String_Node_Str"").append(lsep);
    pushIndent();
    classBuffer.getMethodBuffer().append(indent).append(""String_Node_Str"");
    String builtIn=getBuiltInType(returnType);
    if (builtIn != null) {
      String wrapperCall=getWrapperCall(returnType);
      if (wrapperCall != null) {
        classBuffer.getMethodBuffer().append(wrapperCall);
      }
      classBuffer.getMethodBuffer().append(""String_Node_Str"").append(builtIn).append(""String_Node_Str"");
      classBuffer.getMethodBuffer().append(START_PROPERTY_INDEX).append(""String_Node_Str"").append(property.getIndexInDeclaredProperties());
      classBuffer.getMethodBuffer().append(""String_Node_Str"");
      if (wrapperCall != null) {
        classBuffer.getMethodBuffer().append(""String_Node_Str"");
      }
    }
 else {
      if (!returnType.equals(ClassConstants.OBJECT.getName())) {
        classBuffer.getMethodBuffer().append(""String_Node_Str"");
        classBuffer.getMethodBuffer().append(returnType).append(""String_Node_Str"");
      }
      classBuffer.getMethodBuffer().append(""String_Node_Str"");
      classBuffer.getMethodBuffer().append(START_PROPERTY_INDEX).append(""String_Node_Str"").append(property.getIndexInDeclaredProperties());
      classBuffer.getMethodBuffer().append(""String_Node_Str"");
    }
    classBuffer.getMethodBuffer().append(""String_Node_Str"").append(lsep);
    popIndent();
    classBuffer.getMethodBuffer().append(indent).append(""String_Node_Str"").append(lsep2);
  }
  if (generateInterfaces) {
    classBuffer.getInterfaceBuffer().append(indent);
    classBuffer.getInterfaceBuffer().append(""String_Node_Str"");
    classBuffer.getInterfaceBuffer().append(returnType).append(""String_Node_Str"");
    classBuffer.getInterfaceBuffer().append(methodName);
    classBuffer.getInterfaceBuffer().append(""String_Node_Str"").append(lsep2);
  }
}","/** 
 * INTERNAL:
 * @param classBuffer
 * @param name
 * @param javaType (always represents the processed javaClass name)
 * @param annotation
 * @param className
 */
private void buildGetMethodBuffer(ClassBuffer classBuffer,SDOProperty property,java.util.List documentation){
  String returnType=getJavaTypeForProperty(property);
  String methodName=SDOUtil.getMethodName(property.getName(),returnType);
  if (!(property.getType().isChangeSummaryType() && methodName.equals(""String_Node_Str""))) {
    if ((documentation != null) && (documentation.size() > 0)) {
      classBuffer.getMethodBuffer().append(buildGetterJavaDoc(documentation,property.getName()));
    }
    classBuffer.getMethodBuffer().append(indent);
    classBuffer.getMethodBuffer().append(""String_Node_Str"");
    classBuffer.getMethodBuffer().append(returnType).append(""String_Node_Str"");
    classBuffer.getMethodBuffer().append(methodName);
    classBuffer.getMethodBuffer().append(""String_Node_Str"").append(lsep);
    pushIndent();
    classBuffer.getMethodBuffer().append(indent).append(""String_Node_Str"");
    String builtIn=getBuiltInType(returnType);
    if (builtIn != null) {
      String wrapperCall=getWrapperCall(returnType);
      if (wrapperCall != null) {
        classBuffer.getMethodBuffer().append(wrapperCall);
      }
      classBuffer.getMethodBuffer().append(""String_Node_Str"").append(builtIn).append(""String_Node_Str"");
      classBuffer.getMethodBuffer().append(START_PROPERTY_INDEX).append(""String_Node_Str"").append(property.getIndexInDeclaredProperties());
      classBuffer.getMethodBuffer().append(""String_Node_Str"");
      if (wrapperCall != null) {
        classBuffer.getMethodBuffer().append(""String_Node_Str"");
      }
    }
 else {
      if (!returnType.equals(ClassConstants.OBJECT.getName())) {
        classBuffer.getMethodBuffer().append(""String_Node_Str"");
        classBuffer.getMethodBuffer().append(returnType).append(""String_Node_Str"");
      }
      classBuffer.getMethodBuffer().append(""String_Node_Str"");
      classBuffer.getMethodBuffer().append(START_PROPERTY_INDEX).append(""String_Node_Str"").append(property.getIndexInDeclaredProperties());
      classBuffer.getMethodBuffer().append(""String_Node_Str"");
    }
    classBuffer.getMethodBuffer().append(""String_Node_Str"").append(lsep);
    popIndent();
    classBuffer.getMethodBuffer().append(indent).append(""String_Node_Str"").append(lsep2);
  }
  if (generateInterfaces) {
    classBuffer.getInterfaceBuffer().append(indent);
    classBuffer.getInterfaceBuffer().append(""String_Node_Str"");
    classBuffer.getInterfaceBuffer().append(returnType).append(""String_Node_Str"");
    classBuffer.getInterfaceBuffer().append(methodName);
    classBuffer.getInterfaceBuffer().append(""String_Node_Str"").append(lsep2);
  }
}"
68359,"/** 
 * INTERNAL: Return a valid Java set method name for a given string
 * @param s
 * @return
 */
public static String setMethodName(String s){
  StringBuffer stringbuffer=new StringBuffer();
  stringbuffer.append(""String_Node_Str"").append(methodName(s));
  return stringbuffer.toString();
}","/** 
 * INTERNAL: Return a valid Java set method name for a given string
 * @param s
 * @return
 */
public static String setMethodName(String s){
  StringBuffer stringbuffer=new StringBuffer();
  stringbuffer.append(SET).append(methodName(s));
  return stringbuffer.toString();
}"
68360,"/** 
 * INTERNAL: Return a valid Java get method name for a given string
 * @param s
 * @return
 */
public static String getMethodName(String s){
  StringBuffer stringbuffer=new StringBuffer();
  stringbuffer.append(""String_Node_Str"").append(className(s,true,false,false));
  return stringbuffer.toString();
}","/** 
 * INTERNAL: Return a valid Java get method name for a given string. This method will check the returnType to see if it is a boolean/Boolean:  if so, 'is' will be used in the method name instead of 'get'.
 * @param s
 * @param returnType
 * @return
 */
public static String getMethodName(String s,String returnType){
  if (returnType.equals(ClassConstants.PBOOLEAN.getName()) || returnType.equals(ClassConstants.BOOLEAN.getName())) {
    StringBuffer stringbuffer=new StringBuffer();
    stringbuffer.append(IS).append(SDOUtil.className(s,true,false,false));
    return stringbuffer.toString();
  }
  return getMethodName(s);
}"
68361,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderWChangeSummaryTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsDefaultNamespaceTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithImportsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsElementOrderTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveIDRefTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderComplexTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderComplexDefaultNSTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSimpleAttributeTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSimpleElementTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSchemaTypesTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveOpenContentTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnXSDTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnPropertyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnXSDManyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnPropertyManyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderWithAnnotations.class));
  suite.addTest(new TestSuite(LoadAndSaveOrderBookingTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveXMLEncodingAndVersionTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDataObjectDataTypeTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveValuePropTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDefaultsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveInheritanceBug6043501TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNamespacesBugTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBug6130541TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveAttributeGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithTypeBug6522867TestCases.class));
  suite.addTest(new TestSuite(IsSetNillableOptionalWithDefaultSetNullTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalAttributeWithoutDefaultSetNOPTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableOptionalNodeNullPolicyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableIsSetNodeNullPolicyTrueTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableIsSetNodeNullPolicyFalseTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithoutDefaultSetNonNullTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithoutDefaultSetNOPTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithoutDefaultSetNullTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithoutDefaultSetNonNullTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithoutDefaultSetNOPTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithoutDefaultSetNullTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithDefaultSetNonNullTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithDefaultSetNOPTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithDefaultSetNullTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithDefaultSetDefaultTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithDefaultSetNonNullTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithDefaultSetNOPTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithDefaultSetNullTestCases.class));
  suite.addTest(new TestSuite(IsSetNillableWithDefaultSetDefaultTestCases.class));
  suite.addTest(new TestSuite(IsSetOptionalWithoutDefaultSetNOPNumericPrimsTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.SingleValueBaseTypeTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.SingleValueNonBaseTypeTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.CollectionValueTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsWithInheritanceTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveWithReadOnlyTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.nillable.ListPropertyNillableElementTestCases.class));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderWChangeSummaryTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsDefaultNamespaceTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithImportsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsElementOrderTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveIDRefTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderComplexTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderComplexDefaultNSTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSimpleAttributeTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSimpleElementTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveSchemaTypesTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveOpenContentTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnXSDTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnPropertyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnXSDManyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveMimeTypeOnPropertyManyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSavePurchaseOrderWithAnnotations.class));
  suite.addTest(new TestSuite(LoadAndSaveOrderBookingTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveXMLEncodingAndVersionTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDataObjectDataTypeTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveValuePropTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDefaultsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveInheritanceBug6043501TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNamespacesBugTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBug6130541TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveAttributeGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithTypeBug6522867TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableOptionalNodeNullPolicyTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableIsSetNodeNullPolicyTrueTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNillableIsSetNodeNullPolicyFalseTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.SingleValueBaseTypeTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.SingleValueNonBaseTypeTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.substitutiongroups.CollectionValueTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveImportsWithInheritanceTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveWithReadOnlyTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.nillable.ListPropertyNillableElementTestCases.class));
  return suite;
}"
68362,"public void testSetPropertyOnNullListWrapper(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=new SDODataFactory(getHelperContext());
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    po.createDataObject(""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException iobe) {
    expectedEx=true;
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}","public void testSetPropertyOnNullListWrapper(){
  boolean expectedEx=false;
  boolean unexpectedEx=false;
  try {
    SDODataFactory factory=new SDODataFactory(getHelperContext());
    SDODataObject po=(SDODataObject)factory.create(""String_Node_Str"",""String_Node_Str"");
    po.createDataObject(""String_Node_Str"");
    po.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SDOException sdoe) {
    if (sdoe.getErrorCode() == SDOException.CANNOT_PERFORM_OPERATION_ON_PROPERTY) {
      expectedEx=true;
    }
 else {
      unexpectedEx=true;
    }
  }
catch (  Exception x) {
    unexpectedEx=true;
  }
  assertTrue(""String_Node_Str"",expectedEx);
  assertFalse(""String_Node_Str"",unexpectedEx);
}"
68363,"/** 
 * According to the requirement, correspondingly perform isset, unset or set function.
 * @param frag              one string fragment in the path
 * @param path              the String representation of path based access
 * @param caller            the DataObject that pass path information in
 * @param value             the value to be set as the target property's value
 * @param lastSlashIndex    the last index of '/' in the path string
 * @param convertValue     boolean used for set if we should convert the value
 * @param _case             an int value indicating what kind of operation to use: set, isset or unset.
 * @return                  true if operation is isset and property's value is set, otherwise false.
 */
private boolean setIsSetUnSet(String frag,String path,DataObject caller,Object value,int lastSlashIndex,boolean convertValue,int _case){
  int indexOfDot=frag.lastIndexOf('.');
  int indexOfOpenBracket=frag.lastIndexOf('[');
  int indexOfCloseBracket=frag.lastIndexOf(']');
  int numInLastProperty=getNumberInFrag(frag,indexOfDot,indexOfOpenBracket,indexOfCloseBracket);
  String lastPropertyName=getPropertyNameInFrag(frag,numInLastProperty,indexOfDot,indexOfOpenBracket);
  DataObject lastDataObject;
  if (-1 < lastSlashIndex) {
    lastDataObject=(SDODataObject)get(path.substring(0,lastSlashIndex),caller);
    if (lastDataObject == null) {
      throw SDOException.cannotPerformOperationOnProperty(lastPropertyName,path);
    }
  }
 else {
    lastDataObject=caller;
  }
  Property lastProperty=lastDataObject.getInstanceProperty(lastPropertyName);
switch (_case) {
case SET:
    if (lastProperty == null) {
      lastProperty=((SDODataObject)lastDataObject).defineOpenContentProperty(lastPropertyName,value);
    }
  if (lastProperty != null) {
    set(lastProperty,lastDataObject,numInLastProperty,value,convertValue);
  }
return false;
case ISSET:
if (lastProperty == null) {
return false;
}
return isSet(lastProperty,lastDataObject);
case UNSET:
if (lastProperty == null) {
return false;
}
unSet(lastProperty,lastDataObject,numInLastProperty);
return false;
default :
return false;
}
}","/** 
 * According to the requirement, correspondingly perform isset, unset or set function.
 * @param frag              one string fragment in the path
 * @param path              the String representation of path based access
 * @param caller            the DataObject that pass path information in
 * @param value             the value to be set as the target property's value
 * @param lastSlashIndex    the last index of '/' in the path string
 * @param convertValue     boolean used for set if we should convert the value
 * @param _case             an int value indicating what kind of operation to use: set, isset or unset.
 * @return                  true if operation is isset and property's value is set, otherwise false.
 */
private boolean setIsSetUnSet(String frag,String path,DataObject caller,Object value,int lastSlashIndex,boolean convertValue,int _case){
  int indexOfDot=frag.lastIndexOf('.');
  int indexOfOpenBracket=frag.lastIndexOf('[');
  int indexOfCloseBracket=frag.lastIndexOf(']');
  int numInLastProperty=getNumberInFrag(frag,indexOfDot,indexOfOpenBracket,indexOfCloseBracket);
  String lastPropertyName=getPropertyNameInFrag(frag,numInLastProperty,indexOfDot,indexOfOpenBracket);
  DataObject lastDataObject;
  if (-1 < lastSlashIndex) {
    Object lastObject=get(path.substring(0,lastSlashIndex),caller);
    if (lastObject == null || lastObject instanceof ListWrapper) {
      throw SDOException.cannotPerformOperationOnProperty(lastPropertyName,path);
    }
    lastDataObject=(SDODataObject)lastObject;
  }
 else {
    lastDataObject=caller;
  }
  Property lastProperty=lastDataObject.getInstanceProperty(lastPropertyName);
switch (_case) {
case SET:
    if (lastProperty == null) {
      lastProperty=((SDODataObject)lastDataObject).defineOpenContentProperty(lastPropertyName,value);
    }
  if (lastProperty != null) {
    set(lastProperty,lastDataObject,numInLastProperty,value,convertValue);
  }
return false;
case ISSET:
if (lastProperty == null) {
return false;
}
return isSet(lastProperty,lastDataObject);
case UNSET:
if (lastProperty == null) {
return false;
}
unSet(lastProperty,lastDataObject,numInLastProperty);
return false;
default :
return false;
}
}"
68364,"public void testDataTypeAnnotation() throws Exception {
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject timestampSTDo=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",true);
  timestampSTDo.set(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  Type timeStampType=typeHelper.define(timestampSTDo);
  DataObject rootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",false);
  DataObject rootPropDO=rootTypeDO.createDataObject(""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",SDOConstants.SDO_DATETIME);
  Property xmlDataTypeProperty=typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  rootPropDO.set(xmlDataTypeProperty,timeStampType);
  rootPropDO.set(SDOConstants.XMLELEMENT_PROPERTY,true);
  Type rootType=typeHelper.define(rootTypeDO);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",rootType);
  typeHelper.defineOpenContentProperty(""String_Node_Str"",propDO);
  FileInputStream xmlFile=new FileInputStream(getXmlFileNameToLoad());
  XMLDocument document=xmlHelper.load(xmlFile);
  DataObject root=document.getRootObject();
  Object value=root.get(""String_Node_Str"");
  assertNotNull(value);
  assertEquals(java.sql.Timestamp.class,value.getClass());
}","public void testDataTypeAnnotation() throws Exception {
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject timestampSTDo=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",true);
  timestampSTDo.set(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  Type timeStampType=typeHelper.define(timestampSTDo);
  DataObject rootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",false);
  DataObject rootPropDO=rootTypeDO.createDataObject(""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",SDOConstants.SDO_DATETIME);
  Property xmlDataTypeProperty=typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  rootPropDO.set(xmlDataTypeProperty,timeStampType);
  rootPropDO.set(SDOConstants.XMLELEMENT_PROPERTY,true);
  Type rootType=typeHelper.define(rootTypeDO);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",rootType);
  typeHelper.defineOpenContentProperty(""String_Node_Str"",propDO);
  FileInputStream xmlFile=new FileInputStream(getXmlFileNameToLoad());
  XMLDocument document=xmlHelper.load(xmlFile);
  DataObject root=document.getRootObject();
  Object value=root.get(""String_Node_Str"");
  assertNotNull(value);
  assertEquals(java.sql.Timestamp.class,value.getClass());
}"
68365,"protected void registerTypes(){
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",childType,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,childType);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",myRootType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}","protected void registerTypes(){
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",childType,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,childType);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",getControlRootName());
  propDO.set(""String_Node_Str"",myRootType);
  typeHelper.defineOpenContentProperty(getControlRootURI(),propDO);
}"
68366,"public List getControlTypes(){
  List types=new ArrayList();
  String uri=""String_Node_Str"";
  Type stringType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOType customerType=new SDOType(uri,""String_Node_Str"");
  customerType.setDataType(false);
  customerType.setInstanceClassName(""String_Node_Str"");
  SDOProperty fNameProp=new SDOProperty(aHelperContext);
  fNameProp.setName(""String_Node_Str"");
  fNameProp.setXsd(true);
  fNameProp.setXsdLocalName(""String_Node_Str"");
  fNameProp.setType(stringType);
  SDOProperty lNameProp=new SDOProperty(aHelperContext);
  lNameProp.setName(""String_Node_Str"");
  lNameProp.setXsd(true);
  lNameProp.setXsdLocalName(""String_Node_Str"");
  lNameProp.setType(stringType);
  SDOProperty idProp=new SDOProperty(aHelperContext);
  idProp.setName(""String_Node_Str"");
  idProp.setXsd(true);
  idProp.setXsdLocalName(""String_Node_Str"");
  idProp.setInstanceProperty(xmlDataTypeProperty,SDOConstants.SDO_INTEGER);
  idProp.setType(SDOConstants.SDO_INTEGER);
  customerType.addDeclaredProperty(fNameProp);
  customerType.addDeclaredProperty(lNameProp);
  customerType.addDeclaredProperty(idProp);
  types.add(customerType);
  return types;
}","public List getControlTypes(){
  List types=new ArrayList();
  String uri=""String_Node_Str"";
  Type stringType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOType customerType=new SDOType(uri,""String_Node_Str"");
  customerType.setDataType(false);
  customerType.setInstanceClassName(""String_Node_Str"");
  SDOProperty fNameProp=new SDOProperty(aHelperContext);
  fNameProp.setName(""String_Node_Str"");
  fNameProp.setXsd(true);
  fNameProp.setXsdLocalName(""String_Node_Str"");
  fNameProp.setType(stringType);
  SDOProperty lNameProp=new SDOProperty(aHelperContext);
  lNameProp.setName(""String_Node_Str"");
  lNameProp.setXsd(true);
  lNameProp.setXsdLocalName(""String_Node_Str"");
  lNameProp.setType(stringType);
  SDOProperty idProp=new SDOProperty(aHelperContext);
  idProp.setName(""String_Node_Str"");
  idProp.setXsd(true);
  idProp.setXsdLocalName(""String_Node_Str"");
  idProp.setInstanceProperty(xmlDataTypeProperty,SDOConstants.SDO_INTEGER);
  idProp.setType(SDOConstants.SDO_INTEGER);
  customerType.addDeclaredProperty(fNameProp);
  customerType.addDeclaredProperty(lNameProp);
  customerType.addDeclaredProperty(idProp);
  types.add(customerType);
  return types;
}"
68367,"public List getTypesToGenerateFrom(){
  List types=new ArrayList();
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",childType,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,childType);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  types.add(childType);
  types.add(myRootType);
  return types;
}","public List getTypesToGenerateFrom(){
  List types=new ArrayList();
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",childType,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,childType);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  types.add(childType);
  types.add(myRootType);
  return types;
}"
68368,"public List getTypesToGenerateFromForSchemaTypeTest(){
  List types=new ArrayList();
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",myChildTypeDO,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,myChildTypeDO);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  types.add(childType);
  types.add(myRootType);
  return types;
}","public List getTypesToGenerateFromForSchemaTypeTest(){
  List types=new ArrayList();
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",myChildTypeDO,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,myChildTypeDO);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  types.add(childType);
  types.add(myRootType);
  return types;
}"
68369,"public List getControlTypes(){
  List types=new ArrayList();
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  test1Prop.set(xmlDataTypeProperty,SDOConstants.SDO_INTOBJECT);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  test3Prop.set(xmlDataTypeProperty,SDOConstants.SDO_DATE);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  test4Prop.set(xmlDataTypeProperty,SDOConstants.SDO_DATETIME);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORTOBJECT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,childType);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  types.add(childType);
  types.add(myRootType);
  return types;
}","public List getControlTypes(){
  List types=new ArrayList();
  ((SDOTypeHelper)typeHelper).reset();
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject myChildTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myChildTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(myChildTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type childType=typeHelper.define(myChildTypeDO);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)childType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  DataObject myRootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  myRootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject test1Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_INTOBJECT,false,false,true);
  test1Prop.set(xmlDataTypeProperty,SDOConstants.SDO_INTOBJECT);
  DataObject test2Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_BOOLEANOBJECT,false,false,true);
  test2Prop.set(xmlDataTypeProperty,SDOConstants.SDO_BOOLEANOBJECT);
  DataObject test3Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATE,false,false,true);
  test3Prop.set(xmlDataTypeProperty,SDOConstants.SDO_DATE);
  DataObject test4Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_DATETIME,false,false,true);
  test4Prop.set(xmlDataTypeProperty,SDOConstants.SDO_DATETIME);
  DataObject test5Prop=addProperty(myRootTypeDO,""String_Node_Str"",SDOConstants.SDO_SHORTOBJECT,false,false,true);
  test5Prop.set(xmlDataTypeProperty,SDOConstants.SDO_SHORTOBJECT);
  DataObject test6Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test6Prop.set(xmlDataTypeProperty,dataObjectType);
  DataObject test7Prop=addProperty(myRootTypeDO,""String_Node_Str"",dataObjectType,true,false,true);
  test7Prop.set(xmlSchemaTypeProperty,childType);
  test7Prop.set(xmlDataTypeProperty,dataObjectType);
  Type myRootType=typeHelper.define(myRootTypeDO);
  ((SDOType)myRootType).setXsd(true);
  ((SDOType)myRootType).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsd(true);
  ((SDOProperty)myRootType.getProperty(""String_Node_Str"")).setXsdLocalName(""String_Node_Str"");
  types.add(childType);
  types.add(myRootType);
  return types;
}"
68370,"protected void compareGeneratedTypes(List controlTypes,List types){
  assertEquals(controlTypes.size(),types.size());
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  for (int i=0; i < types.size(); i++) {
    SDOType control=(SDOType)controlTypes.get(i);
    SDOType generated=null;
    for (int j=0; j < types.size(); j++) {
      SDOType next=(SDOType)types.get(j);
      if (next.getName().equals(control.getName())) {
        if ((next.getURI() == null && control.getURI() == null) || ((next.getURI() != null && control.getURI() != null && next.getURI().equals(control.getURI())))) {
          generated=next;
          break;
        }
      }
    }
    assertNotNull(generated);
    assertEquals(control.getURI(),generated.getURI());
    assertEquals(control.getName(),generated.getName());
    if (control.getBaseTypes() == null) {
      assertNull(generated.getBaseTypes());
    }
    assertEquals(control.getBaseTypes().size(),generated.getBaseTypes().size());
    assertEquals(control.isOpen(),generated.isOpen());
    assertEquals(control.isSequenced(),generated.isSequenced());
    assertEquals(control.getInstanceClassName(),generated.getInstanceClassName());
    assertEquals(control.getDeclaredProperties().size(),generated.getDeclaredProperties().size());
    assertEquals(control.getAliasNames().size(),generated.getAliasNames().size());
    List controlProps=control.getDeclaredProperties();
    for (int j=0; j < controlProps.size(); j++) {
      SDOProperty controlProp=(SDOProperty)controlProps.get(j);
      SDOProperty generatedProp=(SDOProperty)generated.getProperty(controlProp.getName());
      assertEquals(controlProp.isMany(),generatedProp.isMany());
      Object controlXMLElementValue=controlProp.get(SDOConstants.XMLELEMENT_PROPERTY);
      if (controlXMLElementValue != null) {
        Object generatedXMLElementValue=generatedProp.get(SDOConstants.XMLELEMENT_PROPERTY);
        assertTrue(controlXMLElementValue instanceof Boolean);
        assertTrue(generatedXMLElementValue instanceof Boolean);
        assertEquals(((Boolean)controlXMLElementValue).booleanValue(),((Boolean)generatedXMLElementValue).booleanValue());
      }
      Object controlDataTypeValue=controlProp.get(xmlDataTypeProperty);
      Object generatedDataTypeValue=generatedProp.get(xmlDataTypeProperty);
      if (controlDataTypeValue == null) {
        assertNull(generatedDataTypeValue);
      }
 else {
        assertTrue(controlDataTypeValue instanceof Type);
        assertTrue(generatedDataTypeValue instanceof Type);
        assertEquals(controlDataTypeValue,generatedDataTypeValue);
      }
      Object generatedSchemaTypeValue=generatedProp.get(xmlSchemaTypeProperty);
      assertEquals(xsdHelper.isAttribute(controlProp),xsdHelper.isAttribute(generatedProp));
      assertEquals(xsdHelper.isElement(controlProp),xsdHelper.isElement(generatedProp));
      assertEquals(controlProp.isXsd(),generatedProp.isXsd());
      assertEquals(controlProp.getXsdLocalName(),generatedProp.getXsdLocalName());
      assertEquals(controlProp.isNullable(),generatedProp.isNullable());
      if (controlProp.getContainingType() == null) {
        assertNull(generatedProp.getContainingType());
      }
 else {
        assertNotNull(generatedProp.getContainingType());
        assertEquals(controlProp.getContainingType().getName(),generatedProp.getContainingType().getName());
      }
      if (controlProp.getOpposite() == null) {
        assertNull(generatedProp.getOpposite());
      }
 else {
        assertNotNull(generatedProp.getOpposite());
        assertEquals(controlProp.getOpposite().getName(),generatedProp.getOpposite().getName());
      }
      assertEquals(controlProp.getType().getURI(),generatedProp.getType().getURI());
      assertEquals(controlProp.getType().getName(),generatedProp.getType().getName());
      assertEquals(controlProp.getAliasNames().size(),generatedProp.getAliasNames().size());
      assertEquals(controlProp.isReadOnly(),generatedProp.isReadOnly());
    }
  }
}","protected void compareGeneratedTypes(List controlTypes,List types){
  assertEquals(controlTypes.size(),types.size());
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  for (int i=0; i < types.size(); i++) {
    SDOType control=(SDOType)controlTypes.get(i);
    SDOType generated=null;
    for (int j=0; j < types.size(); j++) {
      SDOType next=(SDOType)types.get(j);
      if (next.getName().equals(control.getName())) {
        if ((next.getURI() == null && control.getURI() == null) || ((next.getURI() != null && control.getURI() != null && next.getURI().equals(control.getURI())))) {
          generated=next;
          break;
        }
      }
    }
    assertNotNull(generated);
    assertEquals(control.getURI(),generated.getURI());
    assertEquals(control.getName(),generated.getName());
    if (control.getBaseTypes() == null) {
      assertNull(generated.getBaseTypes());
    }
    assertEquals(control.getBaseTypes().size(),generated.getBaseTypes().size());
    assertEquals(control.isOpen(),generated.isOpen());
    assertEquals(control.isSequenced(),generated.isSequenced());
    assertEquals(control.getInstanceClassName(),generated.getInstanceClassName());
    assertEquals(control.getDeclaredProperties().size(),generated.getDeclaredProperties().size());
    assertEquals(control.getAliasNames().size(),generated.getAliasNames().size());
    List controlProps=control.getDeclaredProperties();
    for (int j=0; j < controlProps.size(); j++) {
      SDOProperty controlProp=(SDOProperty)controlProps.get(j);
      SDOProperty generatedProp=(SDOProperty)generated.getProperty(controlProp.getName());
      assertEquals(controlProp.isMany(),generatedProp.isMany());
      Object controlXMLElementValue=controlProp.get(SDOConstants.XMLELEMENT_PROPERTY);
      if (controlXMLElementValue != null) {
        Object generatedXMLElementValue=generatedProp.get(SDOConstants.XMLELEMENT_PROPERTY);
        assertTrue(controlXMLElementValue instanceof Boolean);
        assertTrue(generatedXMLElementValue instanceof Boolean);
        assertEquals(((Boolean)controlXMLElementValue).booleanValue(),((Boolean)generatedXMLElementValue).booleanValue());
      }
      Object controlDataTypeValue=controlProp.get(xmlDataTypeProperty);
      Object generatedDataTypeValue=generatedProp.get(xmlDataTypeProperty);
      if (controlDataTypeValue == null) {
        assertNull(generatedDataTypeValue);
      }
 else {
        assertTrue(controlDataTypeValue instanceof Type);
        assertTrue(generatedDataTypeValue instanceof Type);
        assertEquals(controlDataTypeValue,generatedDataTypeValue);
      }
      Object generatedSchemaTypeValue=generatedProp.get(xmlSchemaTypeProperty);
      assertEquals(xsdHelper.isAttribute(controlProp),xsdHelper.isAttribute(generatedProp));
      assertEquals(xsdHelper.isElement(controlProp),xsdHelper.isElement(generatedProp));
      assertEquals(controlProp.isXsd(),generatedProp.isXsd());
      assertEquals(controlProp.getXsdLocalName(),generatedProp.getXsdLocalName());
      assertEquals(controlProp.isNullable(),generatedProp.isNullable());
      if (controlProp.getContainingType() == null) {
        assertNull(generatedProp.getContainingType());
      }
 else {
        assertNotNull(generatedProp.getContainingType());
        assertEquals(controlProp.getContainingType().getName(),generatedProp.getContainingType().getName());
      }
      if (controlProp.getOpposite() == null) {
        assertNull(generatedProp.getOpposite());
      }
 else {
        assertNotNull(generatedProp.getOpposite());
        assertEquals(controlProp.getOpposite().getName(),generatedProp.getOpposite().getName());
      }
      assertEquals(controlProp.getType().getURI(),generatedProp.getType().getURI());
      assertEquals(controlProp.getType().getName(),generatedProp.getType().getName());
      assertEquals(controlProp.getAliasNames().size(),generatedProp.getAliasNames().size());
      assertEquals(controlProp.isReadOnly(),generatedProp.isReadOnly());
    }
  }
}"
68371,"public List getTypesToGenerateFrom(){
  List types=new ArrayList();
  String uri=""String_Node_Str"";
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject addressTypeDO=dataFactory.create(typeType);
  addressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,false);
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,false);
  Type addressType=typeHelper.define(addressTypeDO);
  DataObject personTypeDO=dataFactory.create(typeType);
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  personTypeDO.set(""String_Node_Str"",uri);
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,false);
  DataObject addressPropDO=addProperty(personTypeDO,""String_Node_Str"",addressType,true,false,true);
  addressPropDO.set(xmlDataTypeProperty,dataObjectType);
  addressPropDO.set(xmlSchemaTypeProperty,addressType);
  Type personType=typeHelper.define(personTypeDO);
  types.add(personType);
  return types;
}","public List getTypesToGenerateFrom(){
  List types=new ArrayList();
  String uri=""String_Node_Str"";
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  SDOProperty xmlSchemaTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  DataObject addressTypeDO=dataFactory.create(typeType);
  addressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,false);
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,false);
  Type addressType=typeHelper.define(addressTypeDO);
  DataObject personTypeDO=dataFactory.create(typeType);
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  personTypeDO.set(""String_Node_Str"",uri);
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,false);
  DataObject addressPropDO=addProperty(personTypeDO,""String_Node_Str"",addressType,true,false,true);
  addressPropDO.set(xmlDataTypeProperty,dataObjectType);
  addressPropDO.set(xmlSchemaTypeProperty,addressType);
  Type personType=typeHelper.define(personTypeDO);
  types.add(personType);
  return types;
}"
68372,"public List getTypesToGenerateFrom(){
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  List types=new ArrayList();
  String uri=getControlUri();
  Type stringType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type intType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type dateType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type decimalType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  String javaPackage=""String_Node_Str"";
  SDOType gregorianDateType=new SDODataType(uri,""String_Node_Str"",(SDOTypeHelper)typeHelper);
  gregorianDateType.setInstanceProperty(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  List aliasNames=new ArrayList();
  aliasNames.add(""String_Node_Str"");
  gregorianDateType.setAliasNames(aliasNames);
  SDOType USaddrType=new SDOType(uri,""String_Node_Str"");
  USaddrType.setDataType(false);
  SDOProperty addrNameProp=new SDOProperty(aHelperContext);
  addrNameProp.setXsd(true);
  addrNameProp.setXsdLocalName(""String_Node_Str"");
  addrNameProp.setName(""String_Node_Str"");
  addrNameProp.setType(stringType);
  addrNameProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(addrNameProp);
  SDOProperty streetProp=new SDOProperty(aHelperContext);
  streetProp.setName(""String_Node_Str"");
  streetProp.setXsd(true);
  streetProp.setXsdLocalName(""String_Node_Str"");
  streetProp.setType(stringType);
  streetProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(streetProp);
  SDOProperty cityProp=new SDOProperty(aHelperContext);
  cityProp.setName(""String_Node_Str"");
  cityProp.setXsdLocalName(""String_Node_Str"");
  cityProp.setXsd(true);
  cityProp.setType(stringType);
  cityProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(cityProp);
  SDOProperty stateProp=new SDOProperty(aHelperContext);
  stateProp.setName(""String_Node_Str"");
  stateProp.setXsd(true);
  stateProp.setXsdLocalName(""String_Node_Str"");
  stateProp.setType(stringType);
  stateProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(stateProp);
  SDOProperty zipProp=new SDOProperty(aHelperContext);
  zipProp.setXsd(true);
  zipProp.setName(""String_Node_Str"");
  zipProp.setXsdLocalName(""String_Node_Str"");
  zipProp.setType(decimalType);
  zipProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(zipProp);
  SDOProperty countryProp=new SDOProperty(aHelperContext);
  countryProp.setXsd(true);
  countryProp.setName(""String_Node_Str"");
  countryProp.setXsdLocalName(""String_Node_Str"");
  countryProp.setType(stringType);
  countryProp.setDefault(""String_Node_Str"");
  countryProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(countryProp);
  SDOType quantityType=new SDODataType(uri,""String_Node_Str"",(SDOTypeHelper)typeHelper);
  quantityType.setXsdType(SDOConstants.ANY_TYPE_QNAME);
  quantityType.getBaseTypes().add(intType);
  quantityType.setInstanceClassName(""String_Node_Str"");
  SDOType SKUType=new SDODataType(uri,""String_Node_Str"",(SDOTypeHelper)typeHelper);
  SKUType.setXsd(true);
  SKUType.setXsdLocalName(""String_Node_Str"");
  SKUType.setInstanceClassName(""String_Node_Str"");
  SKUType.setInstanceProperty(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  SDOType itemType=new SDOType(uri,""String_Node_Str"");
  itemType.setDataType(false);
  itemType.setInstanceClassName(javaPackage + ""String_Node_Str"" + ""String_Node_Str"");
  itemType.setXsdLocalName(""String_Node_Str"");
  SDOProperty productNameProp=new SDOProperty(aHelperContext);
  productNameProp.setXsd(true);
  productNameProp.setName(""String_Node_Str"");
  productNameProp.setXsdLocalName(""String_Node_Str"");
  productNameProp.setType(stringType);
  productNameProp.setReadOnly(true);
  productNameProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(productNameProp);
  SDOProperty pOrderProp=new SDOProperty(aHelperContext);
  pOrderProp.setXsd(true);
  pOrderProp.setName(""String_Node_Str"");
  pOrderProp.setXsdLocalName(""String_Node_Str"");
  pOrderProp.setType(stringType);
  pOrderProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  pOrderProp.setMany(false);
  pOrderProp.setContainment(true);
  pOrderProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(pOrderProp);
  SDOProperty quantityProp=new SDOProperty(aHelperContext);
  quantityProp.setXsd(true);
  quantityProp.setName(""String_Node_Str"");
  quantityProp.setXsdLocalName(""String_Node_Str"");
  quantityProp.setContainingType(itemType);
  quantityProp.setInstanceProperty(xmlDataTypeProperty,SDOConstants.SDO_INTEGER);
  quantityProp.setType(SDOConstants.SDO_INTEGER);
  itemType.getDeclaredProperties().add(quantityProp);
  SDOProperty partNumProp=new SDOProperty(aHelperContext);
  partNumProp.setXsd(true);
  partNumProp.setName(""String_Node_Str"");
  partNumProp.setXsdLocalName(""String_Node_Str"");
  partNumProp.setType(SKUType);
  partNumProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(partNumProp);
  SDOProperty USPriceProp=new SDOProperty(aHelperContext);
  USPriceProp.setXsd(true);
  USPriceProp.setName(""String_Node_Str"");
  USPriceProp.setXsdLocalName(""String_Node_Str"");
  USPriceProp.setType(decimalType);
  USPriceProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(USPriceProp);
  SDOProperty itemCommentProp=new SDOProperty(aHelperContext);
  itemCommentProp.setXsd(true);
  itemCommentProp.setName(""String_Node_Str"");
  itemCommentProp.setXsdLocalName(""String_Node_Str"");
  itemCommentProp.setType(stringType);
  itemCommentProp.setContainment(false);
  List names=new ArrayList();
  names.add(""String_Node_Str"");
  itemCommentProp.setAliasNames(names);
  itemCommentProp.setContainingType(itemType);
  itemCommentProp.setContainment(false);
  itemType.getDeclaredProperties().add(itemCommentProp);
  SDOProperty shipDateProp=new SDOProperty(aHelperContext);
  shipDateProp.setXsd(true);
  shipDateProp.setName(""String_Node_Str"");
  shipDateProp.setXsdLocalName(""String_Node_Str"");
  shipDateProp.setType(SDOConstants.SDO_YEARMONTHDAY);
  shipDateProp.setContainment(false);
  shipDateProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(shipDateProp);
  SDOType itemsType=new SDOType(uri,""String_Node_Str"");
  itemsType.setDataType(false);
  itemsType.setInstanceClassName(javaPackage + ""String_Node_Str"" + ""String_Node_Str"");
  SDOProperty itemProp=new SDOProperty(aHelperContext);
  itemProp.setXsd(true);
  itemProp.setName(""String_Node_Str"");
  itemProp.setXsdLocalName(""String_Node_Str"");
  itemProp.setContainment(true);
  itemProp.setMany(true);
  itemProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  itemProp.setContainingType(itemsType);
  itemProp.setType(itemType);
  itemsType.getDeclaredProperties().add(itemProp);
  SDOType POtype=new SDOType(uri,""String_Node_Str"");
  POtype.setDataType(false);
  POtype.setSequenced(true);
  names=new ArrayList();
  names.add(""String_Node_Str"");
  POtype.setAliasNames(names);
  POtype.setInstanceClassName(javaPackage + ""String_Node_Str"" + ""String_Node_Str"");
  SDOProperty shipToProp=new SDOProperty(aHelperContext);
  shipToProp.setXsd(true);
  shipToProp.setName(""String_Node_Str"");
  shipToProp.setMany(true);
  shipToProp.setXsdLocalName(""String_Node_Str"");
  shipToProp.setContainment(true);
  names=new ArrayList();
  names.add(""String_Node_Str"");
  shipToProp.setAliasNames(names);
  shipToProp.setMany(true);
  shipToProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  shipToProp.setContainingType(POtype);
  shipToProp.setType(USaddrType);
  SDOProperty billToProp=new SDOProperty(aHelperContext);
  billToProp.setXsd(true);
  billToProp.setName(""String_Node_Str"");
  billToProp.setXsdLocalName(""String_Node_Str"");
  billToProp.setReadOnly(true);
  billToProp.setContainment(true);
  billToProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  billToProp.setContainingType(POtype);
  billToProp.setType(USaddrType);
  SDOProperty itemsProp=new SDOProperty(aHelperContext);
  itemsProp.setXsd(true);
  itemsProp.setName(""String_Node_Str"");
  itemsProp.setXsdLocalName(""String_Node_Str"");
  itemsProp.setContainment(true);
  itemsProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  itemsProp.setInstanceProperty(xmlDataTypeProperty,itemsType);
  itemsProp.setType(dataObjectType);
  itemsProp.setContainingType(POtype);
  SDOProperty commentProp=new SDOProperty(aHelperContext);
  commentProp.setXsd(true);
  commentProp.setName(""String_Node_Str"");
  commentProp.setXsdLocalName(""String_Node_Str"");
  commentProp.setType(stringType);
  commentProp.setContainingType(POtype);
  commentProp.setContainment(false);
  SDOProperty orderDateProp=new SDOProperty(aHelperContext);
  orderDateProp.setXsd(true);
  orderDateProp.setName(""String_Node_Str"");
  orderDateProp.setXsdLocalName(""String_Node_Str"");
  orderDateProp.setType(SDOConstants.SDO_YEARMONTHDAY);
  orderDateProp.setInstanceProperty(xmlDataTypeProperty,gregorianDateType);
  orderDateProp.setContainingType(POtype);
  orderDateProp.setContainment(false);
  SDOProperty topPriorityItemProp=new SDOProperty(aHelperContext);
  topPriorityItemProp.setXsd(true);
  topPriorityItemProp.setName(""String_Node_Str"");
  topPriorityItemProp.setXsdLocalName(""String_Node_Str"");
  topPriorityItemProp.setType(itemType);
  topPriorityItemProp.setMany(true);
  topPriorityItemProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  topPriorityItemProp.setContainment(true);
  topPriorityItemProp.setContainingType(POtype);
  POtype.getDeclaredProperties().add(shipToProp);
  POtype.getDeclaredProperties().add(billToProp);
  POtype.getDeclaredProperties().add(itemsProp);
  POtype.getDeclaredProperties().add(commentProp);
  POtype.getDeclaredProperties().add(orderDateProp);
  POtype.getDeclaredProperties().add(topPriorityItemProp);
  types.add(USaddrType);
  types.add(gregorianDateType);
  types.add(POtype);
  types.add(itemsType);
  types.add(itemType);
  types.add(quantityType);
  types.add(SKUType);
  return types;
}","public List getTypesToGenerateFrom(){
  SDOType dataObjectType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.DATAOBJECT);
  SDOProperty xmlDataTypeProperty=(SDOProperty)typeHelper.getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  List types=new ArrayList();
  String uri=getControlUri();
  Type stringType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type intType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type dateType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  Type decimalType=typeHelper.getType(""String_Node_Str"",""String_Node_Str"");
  String javaPackage=""String_Node_Str"";
  SDOType gregorianDateType=new SDODataType(uri,""String_Node_Str"",(SDOTypeHelper)typeHelper);
  gregorianDateType.setInstanceProperty(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  List aliasNames=new ArrayList();
  aliasNames.add(""String_Node_Str"");
  gregorianDateType.setAliasNames(aliasNames);
  SDOType USaddrType=new SDOType(uri,""String_Node_Str"");
  USaddrType.setDataType(false);
  SDOProperty addrNameProp=new SDOProperty(aHelperContext);
  addrNameProp.setXsd(true);
  addrNameProp.setXsdLocalName(""String_Node_Str"");
  addrNameProp.setName(""String_Node_Str"");
  addrNameProp.setType(stringType);
  addrNameProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(addrNameProp);
  SDOProperty streetProp=new SDOProperty(aHelperContext);
  streetProp.setName(""String_Node_Str"");
  streetProp.setXsd(true);
  streetProp.setXsdLocalName(""String_Node_Str"");
  streetProp.setType(stringType);
  streetProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(streetProp);
  SDOProperty cityProp=new SDOProperty(aHelperContext);
  cityProp.setName(""String_Node_Str"");
  cityProp.setXsdLocalName(""String_Node_Str"");
  cityProp.setXsd(true);
  cityProp.setType(stringType);
  cityProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(cityProp);
  SDOProperty stateProp=new SDOProperty(aHelperContext);
  stateProp.setName(""String_Node_Str"");
  stateProp.setXsd(true);
  stateProp.setXsdLocalName(""String_Node_Str"");
  stateProp.setType(stringType);
  stateProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(stateProp);
  SDOProperty zipProp=new SDOProperty(aHelperContext);
  zipProp.setXsd(true);
  zipProp.setName(""String_Node_Str"");
  zipProp.setXsdLocalName(""String_Node_Str"");
  zipProp.setType(decimalType);
  zipProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(zipProp);
  SDOProperty countryProp=new SDOProperty(aHelperContext);
  countryProp.setXsd(true);
  countryProp.setName(""String_Node_Str"");
  countryProp.setXsdLocalName(""String_Node_Str"");
  countryProp.setType(stringType);
  countryProp.setDefault(""String_Node_Str"");
  countryProp.setContainingType(USaddrType);
  USaddrType.getDeclaredProperties().add(countryProp);
  SDOType quantityType=new SDODataType(uri,""String_Node_Str"",(SDOTypeHelper)typeHelper);
  quantityType.setXsdType(SDOConstants.ANY_TYPE_QNAME);
  quantityType.getBaseTypes().add(intType);
  quantityType.setInstanceClassName(""String_Node_Str"");
  SDOType SKUType=new SDODataType(uri,""String_Node_Str"",(SDOTypeHelper)typeHelper);
  SKUType.setXsd(true);
  SKUType.setXsdLocalName(""String_Node_Str"");
  SKUType.setInstanceClassName(""String_Node_Str"");
  SKUType.setInstanceProperty(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  SDOType itemType=new SDOType(uri,""String_Node_Str"");
  itemType.setDataType(false);
  itemType.setInstanceClassName(javaPackage + ""String_Node_Str"" + ""String_Node_Str"");
  itemType.setXsdLocalName(""String_Node_Str"");
  SDOProperty productNameProp=new SDOProperty(aHelperContext);
  productNameProp.setXsd(true);
  productNameProp.setName(""String_Node_Str"");
  productNameProp.setXsdLocalName(""String_Node_Str"");
  productNameProp.setType(stringType);
  productNameProp.setReadOnly(true);
  productNameProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(productNameProp);
  SDOProperty pOrderProp=new SDOProperty(aHelperContext);
  pOrderProp.setXsd(true);
  pOrderProp.setName(""String_Node_Str"");
  pOrderProp.setXsdLocalName(""String_Node_Str"");
  pOrderProp.setType(stringType);
  pOrderProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  pOrderProp.setMany(false);
  pOrderProp.setContainment(true);
  pOrderProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(pOrderProp);
  SDOProperty quantityProp=new SDOProperty(aHelperContext);
  quantityProp.setXsd(true);
  quantityProp.setName(""String_Node_Str"");
  quantityProp.setXsdLocalName(""String_Node_Str"");
  quantityProp.setContainingType(itemType);
  quantityProp.setInstanceProperty(xmlDataTypeProperty,SDOConstants.SDO_INTEGER);
  quantityProp.setType(SDOConstants.SDO_INTEGER);
  itemType.getDeclaredProperties().add(quantityProp);
  SDOProperty partNumProp=new SDOProperty(aHelperContext);
  partNumProp.setXsd(true);
  partNumProp.setName(""String_Node_Str"");
  partNumProp.setXsdLocalName(""String_Node_Str"");
  partNumProp.setType(SKUType);
  partNumProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(partNumProp);
  SDOProperty USPriceProp=new SDOProperty(aHelperContext);
  USPriceProp.setXsd(true);
  USPriceProp.setName(""String_Node_Str"");
  USPriceProp.setXsdLocalName(""String_Node_Str"");
  USPriceProp.setType(decimalType);
  USPriceProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(USPriceProp);
  SDOProperty itemCommentProp=new SDOProperty(aHelperContext);
  itemCommentProp.setXsd(true);
  itemCommentProp.setName(""String_Node_Str"");
  itemCommentProp.setXsdLocalName(""String_Node_Str"");
  itemCommentProp.setType(stringType);
  itemCommentProp.setContainment(false);
  List names=new ArrayList();
  names.add(""String_Node_Str"");
  itemCommentProp.setAliasNames(names);
  itemCommentProp.setContainingType(itemType);
  itemCommentProp.setContainment(false);
  itemType.getDeclaredProperties().add(itemCommentProp);
  SDOProperty shipDateProp=new SDOProperty(aHelperContext);
  shipDateProp.setXsd(true);
  shipDateProp.setName(""String_Node_Str"");
  shipDateProp.setXsdLocalName(""String_Node_Str"");
  shipDateProp.setType(SDOConstants.SDO_YEARMONTHDAY);
  shipDateProp.setContainment(false);
  shipDateProp.setContainingType(itemType);
  itemType.getDeclaredProperties().add(shipDateProp);
  SDOType itemsType=new SDOType(uri,""String_Node_Str"");
  itemsType.setDataType(false);
  itemsType.setInstanceClassName(javaPackage + ""String_Node_Str"" + ""String_Node_Str"");
  SDOProperty itemProp=new SDOProperty(aHelperContext);
  itemProp.setXsd(true);
  itemProp.setName(""String_Node_Str"");
  itemProp.setXsdLocalName(""String_Node_Str"");
  itemProp.setContainment(true);
  itemProp.setMany(true);
  itemProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  itemProp.setContainingType(itemsType);
  itemProp.setType(itemType);
  itemsType.getDeclaredProperties().add(itemProp);
  SDOType POtype=new SDOType(uri,""String_Node_Str"");
  POtype.setDataType(false);
  POtype.setSequenced(true);
  names=new ArrayList();
  names.add(""String_Node_Str"");
  POtype.setAliasNames(names);
  POtype.setInstanceClassName(javaPackage + ""String_Node_Str"" + ""String_Node_Str"");
  SDOProperty shipToProp=new SDOProperty(aHelperContext);
  shipToProp.setXsd(true);
  shipToProp.setName(""String_Node_Str"");
  shipToProp.setMany(true);
  shipToProp.setXsdLocalName(""String_Node_Str"");
  shipToProp.setContainment(true);
  names=new ArrayList();
  names.add(""String_Node_Str"");
  shipToProp.setAliasNames(names);
  shipToProp.setMany(true);
  shipToProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  shipToProp.setContainingType(POtype);
  shipToProp.setType(USaddrType);
  SDOProperty billToProp=new SDOProperty(aHelperContext);
  billToProp.setXsd(true);
  billToProp.setName(""String_Node_Str"");
  billToProp.setXsdLocalName(""String_Node_Str"");
  billToProp.setReadOnly(true);
  billToProp.setContainment(true);
  billToProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  billToProp.setContainingType(POtype);
  billToProp.setType(USaddrType);
  SDOProperty itemsProp=new SDOProperty(aHelperContext);
  itemsProp.setXsd(true);
  itemsProp.setName(""String_Node_Str"");
  itemsProp.setXsdLocalName(""String_Node_Str"");
  itemsProp.setContainment(true);
  itemsProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  itemsProp.setInstanceProperty(xmlDataTypeProperty,itemsType);
  itemsProp.setType(dataObjectType);
  itemsProp.setContainingType(POtype);
  SDOProperty commentProp=new SDOProperty(aHelperContext);
  commentProp.setXsd(true);
  commentProp.setName(""String_Node_Str"");
  commentProp.setXsdLocalName(""String_Node_Str"");
  commentProp.setType(stringType);
  commentProp.setContainingType(POtype);
  commentProp.setContainment(false);
  SDOProperty orderDateProp=new SDOProperty(aHelperContext);
  orderDateProp.setXsd(true);
  orderDateProp.setName(""String_Node_Str"");
  orderDateProp.setXsdLocalName(""String_Node_Str"");
  orderDateProp.setType(SDOConstants.SDO_YEARMONTHDAY);
  orderDateProp.setInstanceProperty(xmlDataTypeProperty,gregorianDateType);
  orderDateProp.setContainingType(POtype);
  orderDateProp.setContainment(false);
  SDOProperty topPriorityItemProp=new SDOProperty(aHelperContext);
  topPriorityItemProp.setXsd(true);
  topPriorityItemProp.setName(""String_Node_Str"");
  topPriorityItemProp.setXsdLocalName(""String_Node_Str"");
  topPriorityItemProp.setType(itemType);
  topPriorityItemProp.setMany(true);
  topPriorityItemProp.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
  topPriorityItemProp.setContainment(true);
  topPriorityItemProp.setContainingType(POtype);
  POtype.getDeclaredProperties().add(shipToProp);
  POtype.getDeclaredProperties().add(billToProp);
  POtype.getDeclaredProperties().add(itemsProp);
  POtype.getDeclaredProperties().add(commentProp);
  POtype.getDeclaredProperties().add(orderDateProp);
  POtype.getDeclaredProperties().add(topPriorityItemProp);
  types.add(USaddrType);
  types.add(gregorianDateType);
  types.add(POtype);
  types.add(itemsType);
  types.add(itemType);
  types.add(quantityType);
  types.add(SKUType);
  return types;
}"
68373,"public void setInstanceProperty(Property property,Object value){
  getPropertyValues().put(property,value);
  if (SDOConstants.ORACLE_SDO_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.SDOXML_DATATYPE.equals(property.getName()) && value instanceof Type) {
    setType((Type)value);
  }
  if (SDOConstants.ORACLE_SDO_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.XML_SCHEMA_TYPE_NAME.equals(property.getName()) && value instanceof Type) {
    Type schemaType=(Type)value;
    QName schemaTypeQName=new QName(schemaType.getURI(),schemaType.getName());
    setXsdType(schemaTypeQName);
  }
}","public void setInstanceProperty(Property property,Object value){
  getPropertyValues().put(property,value);
  if (SDOConstants.SDOXML_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.SDOXML_DATATYPE.equals(property.getName()) && value instanceof Type) {
    setType((Type)value);
  }
  if (SDOConstants.ORACLE_SDO_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.XML_SCHEMA_TYPE_NAME.equals(property.getName()) && value instanceof Type) {
    Type schemaType=(Type)value;
    QName schemaTypeQName=new QName(schemaType.getURI(),schemaType.getName());
    setXsdType(schemaTypeQName);
  }
}"
68374,"private void addSimpleComponentAnnotations(SimpleComponent sc,Property property,boolean element){
  if (property.isReadOnly()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_READONLY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,""String_Node_Str"");
  }
  if ((property.getAliasNames() != null) && (property.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(property.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,aliasNamesString);
  }
  String xsdLocalName=((SDOProperty)property).getXsdLocalName();
  if ((xsdLocalName != null) && !(xsdLocalName.equals(property.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,property.getName());
  }
  if ((element && !property.isContainment() && !property.getType().isDataType()) || (!element && !property.getType().isDataType())) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String uri=property.getType().getURI();
    String value=property.getType().getName();
    if (uri != null) {
      String typePrefix=getPrefixForURI(uri);
      if (typePrefix != null) {
        value=typePrefix + ""String_Node_Str"" + value;
      }
    }
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_PROPERTYTYPE,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  if (property.getOpposite() != null) {
    String value=property.getOpposite().getName();
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_OPPOSITEPROPERTY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  Type dataType=(Type)property.get(xmlDataTypeProperty);
  if (dataType == null) {
    dataType=getAutomaticDataTypeForType(property.getType());
  }
  if (dataType != null) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE,sdoXmlPrefix);
    String dataTypeString=dataType.getName();
    if (dataType.getURI() != null) {
      String dataTypePrefix=getPrefixForURI(dataType.getURI());
      if (dataTypePrefix != null) {
        dataTypeString=dataTypePrefix + ""String_Node_Str"" + dataTypeString;
      }
    }
    sc.getAttributesMap().put(qname,dataTypeString);
  }
  if (element) {
    String mimeType=(String)property.get(SDOConstants.MIME_TYPE_PROPERTY);
    if (mimeType != null) {
      String prefix=getPrefixForURI(SDOConstants.MIMETYPE_URL);
      QName qname=new QName(SDOConstants.XML_MIME_TYPE_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_QNAME.getLocalPart(),prefix);
      sc.getAttributesMap().put(qname,mimeType);
    }
 else {
      mimeType=(String)property.get(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
      if (mimeType != null) {
        String prefix=getPrefixForURI(SDOConstants.ORACLE_SDO_URL);
        QName qname=new QName(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getLocalPart(),prefix);
        sc.getAttributesMap().put(qname,mimeType);
      }
    }
  }
}","private void addSimpleComponentAnnotations(SimpleComponent sc,Property property,boolean element){
  if (property.isReadOnly()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_READONLY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,""String_Node_Str"");
  }
  if ((property.getAliasNames() != null) && (property.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(property.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,aliasNamesString);
  }
  String xsdLocalName=((SDOProperty)property).getXsdLocalName();
  if ((xsdLocalName != null) && !(xsdLocalName.equals(property.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,property.getName());
  }
  if ((element && !property.isContainment() && !property.getType().isDataType()) || (!element && !property.getType().isDataType())) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String uri=property.getType().getURI();
    String value=property.getType().getName();
    if (uri != null) {
      String typePrefix=getPrefixForURI(uri);
      if (typePrefix != null) {
        value=typePrefix + ""String_Node_Str"" + value;
      }
    }
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_PROPERTYTYPE,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  if (property.getOpposite() != null) {
    String value=property.getOpposite().getName();
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_OPPOSITEPROPERTY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  Type dataType=(Type)property.get(xmlDataTypeProperty);
  if (dataType == null) {
    dataType=getAutomaticDataTypeForType(property.getType());
  }
  if (dataType != null) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE,sdoXmlPrefix);
    String dataTypeString=dataType.getName();
    if (dataType.getURI() != null) {
      String dataTypePrefix=getPrefixForURI(dataType.getURI());
      if (dataTypePrefix != null) {
        dataTypeString=dataTypePrefix + ""String_Node_Str"" + dataTypeString;
      }
    }
    sc.getAttributesMap().put(qname,dataTypeString);
  }
  if (element) {
    String mimeType=(String)property.get(SDOConstants.MIME_TYPE_PROPERTY);
    if (mimeType != null) {
      String prefix=getPrefixForURI(SDOConstants.MIMETYPE_URL);
      QName qname=new QName(SDOConstants.XML_MIME_TYPE_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_QNAME.getLocalPart(),prefix);
      sc.getAttributesMap().put(qname,mimeType);
    }
 else {
      mimeType=(String)property.get(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
      if (mimeType != null) {
        String prefix=getPrefixForURI(SDOConstants.ORACLE_SDO_URL);
        QName qname=new QName(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getLocalPart(),prefix);
        sc.getAttributesMap().put(qname,mimeType);
      }
    }
  }
}"
68375,"private SDOType processSimpleComponentAnnotations(SDOType owningType,SimpleComponent simpleComponent,SDOProperty p,String targetNamespace,String defaultNamespace,SDOType sdoPropertyType){
  String aliasNamesValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (aliasNamesValue != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(aliasNamesValue,java.util.List.class);
    p.setAliasNames(names);
  }
  String readOnlyValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_READONLY_QNAME);
  if (readOnlyValue != null) {
    Boolean readOnlyBoolean=new Boolean(readOnlyValue);
    p.setReadOnly(readOnlyBoolean.booleanValue());
  }
  String dataTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_DATATYPE_QNAME);
  if (dataTypeValue != null) {
    QName xsdQName=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(sdoPropertyType);
    if ((xsdQName == null) && !sdoPropertyType.isDataType()) {
      xsdQName=new QName(sdoPropertyType.getURI(),sdoPropertyType.getName());
    }
    p.setXsdType(xsdQName);
    SDOType sdoType=getSDOTypeForName(targetNamespace,defaultNamespace,dataTypeValue);
    sdoPropertyType=sdoType;
    Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
    p.setInstanceProperty(xmlDataTypeProperty,sdoType);
  }
  String stringValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_STRING_QNAME);
  if (stringValue != null) {
    QName xsdTypeQName=getQNameForString(defaultNamespace,simpleComponent.getType());
    p.setXsdType(xsdTypeQName);
    sdoPropertyType=SDOConstants.SDO_STRING;
  }
  String nameValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_NAME_QNAME);
  if (nameValue != null) {
    p.setName(nameValue);
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,nameValue);
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
 else {
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,p.getName());
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
  String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
  if (propertyTypeValue != null) {
    String uri=targetNamespace;
    int colonIndex=propertyTypeValue.indexOf(':');
    if (colonIndex > -1) {
      String prefix=propertyTypeValue.substring(0,colonIndex);
      uri=getURIForPrefix(prefix);
    }
    NonContainmentReference nonContainmentReference=new NonContainmentReference();
    nonContainmentReference.setPropertyTypeName(propertyTypeValue);
    nonContainmentReference.setPropertyTypeURI(uri);
    nonContainmentReference.setOwningType(owningType);
    nonContainmentReference.setOwningProp(p);
    String oppositePropValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_OPPOSITEPROPERTY_QNAME);
    nonContainmentReference.setOppositePropName(oppositePropValue);
    getNonContainmentReferences().add(nonContainmentReference);
  }
  return sdoPropertyType;
}","private SDOType processSimpleComponentAnnotations(SDOType owningType,SimpleComponent simpleComponent,SDOProperty p,String targetNamespace,String defaultNamespace,SDOType sdoPropertyType){
  String aliasNamesValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_ALIASNAME_QNAME);
  if (aliasNamesValue != null) {
    XMLConversionManager xmlConversionManager=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlConversionManager();
    java.util.List names=(java.util.List)xmlConversionManager.convertObject(aliasNamesValue,java.util.List.class);
    p.setAliasNames(names);
  }
  String readOnlyValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_READONLY_QNAME);
  if (readOnlyValue != null) {
    Boolean readOnlyBoolean=new Boolean(readOnlyValue);
    p.setReadOnly(readOnlyBoolean.booleanValue());
  }
  String dataTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_DATATYPE_QNAME);
  if (dataTypeValue != null) {
    QName xsdQName=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(sdoPropertyType);
    if ((xsdQName == null) && !sdoPropertyType.isDataType()) {
      xsdQName=new QName(sdoPropertyType.getURI(),sdoPropertyType.getName());
    }
    p.setXsdType(xsdQName);
    SDOType sdoType=getSDOTypeForName(targetNamespace,defaultNamespace,dataTypeValue);
    sdoPropertyType=sdoType;
    Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
    p.setInstanceProperty(xmlDataTypeProperty,sdoType);
  }
  String stringValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_STRING_QNAME);
  if (stringValue != null) {
    QName xsdTypeQName=getQNameForString(defaultNamespace,simpleComponent.getType());
    p.setXsdType(xsdTypeQName);
    sdoPropertyType=SDOConstants.SDO_STRING;
  }
  String nameValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_NAME_QNAME);
  if (nameValue != null) {
    p.setName(nameValue);
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,nameValue);
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
 else {
    if (p.isGlobal() && targetNamespace != null) {
      QName propertyName=new QName(targetNamespace,p.getName());
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getOpenContentProperties().put(propertyName,p);
    }
  }
  String propertyTypeValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_PROPERTYTYPE_QNAME);
  if (propertyTypeValue != null) {
    String uri=targetNamespace;
    int colonIndex=propertyTypeValue.indexOf(':');
    if (colonIndex > -1) {
      String prefix=propertyTypeValue.substring(0,colonIndex);
      uri=getURIForPrefix(prefix);
    }
    NonContainmentReference nonContainmentReference=new NonContainmentReference();
    nonContainmentReference.setPropertyTypeName(propertyTypeValue);
    nonContainmentReference.setPropertyTypeURI(uri);
    nonContainmentReference.setOwningType(owningType);
    nonContainmentReference.setOwningProp(p);
    String oppositePropValue=(String)simpleComponent.getAttributesMap().get(SDOConstants.SDOXML_OPPOSITEPROPERTY_QNAME);
    nonContainmentReference.setOppositePropName(oppositePropValue);
    getNonContainmentReferences().add(nonContainmentReference);
  }
  return sdoPropertyType;
}"
68376,"private void initOpenProps(){
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_QNAME,SDOConstants.MIME_TYPE_PROPERTY);
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_PROPERTY_QNAME,SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
  Property xmlSchemaTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  getGlobalAttributes().put(SDOConstants.SCHEMA_TYPE_QNAME,xmlSchemaTypeProperty);
  getGlobalAttributes().put(SDOConstants.JAVA_CLASS_QNAME,SDOConstants.JAVA_CLASS_PROPERTY);
  getGlobalAttributes().put(SDOConstants.XML_ELEMENT_QNAME,SDOConstants.XMLELEMENT_PROPERTY);
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  getGlobalAttributes().put(SDOConstants.XML_DATATYPE_QNAME,xmlDataTypeProperty);
  getGlobalAttributes().put(SDOConstants.XML_ID_PROPERTY_QNAME,SDOConstants.ID_PROPERTY);
  getGlobalAttributes().put(SDOConstants.DOCUMENTATION_PROPERTY_QNAME,SDOConstants.DOCUMENTATION_PROPERTY);
}","private void initOpenProps(){
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_QNAME,SDOConstants.MIME_TYPE_PROPERTY);
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_PROPERTY_QNAME,SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
  Property xmlSchemaTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  getGlobalAttributes().put(SDOConstants.SCHEMA_TYPE_QNAME,xmlSchemaTypeProperty);
  getGlobalAttributes().put(SDOConstants.JAVA_CLASS_QNAME,SDOConstants.JAVA_CLASS_PROPERTY);
  getGlobalAttributes().put(SDOConstants.XML_ELEMENT_QNAME,SDOConstants.XMLELEMENT_PROPERTY);
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  getGlobalAttributes().put(SDOConstants.XML_DATATYPE_QNAME,xmlDataTypeProperty);
  getGlobalAttributes().put(SDOConstants.XML_ID_PROPERTY_QNAME,SDOConstants.ID_PROPERTY);
  getGlobalAttributes().put(SDOConstants.DOCUMENTATION_PROPERTY_QNAME,SDOConstants.DOCUMENTATION_PROPERTY);
}"
68377,"protected void test(){
  this.unitOfWorkWorkingCopy.setFirstName(""String_Node_Str"");
  this.unitOfWorkWorkingCopy.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Employee newEmp=new Employee();
  newEmp.setFirstName(""String_Node_Str"");
  newEmp.setLastName(""String_Node_Str"");
  newEmp.setSalary(13);
  PhoneNumber phone=(PhoneNumber)this.unitOfWorkWorkingCopy.getPhoneNumbers().get(0);
  this.unitOfWorkWorkingCopy.getPhoneNumbers().remove(phone);
  this.unitOfWork.deleteObject(phone);
  this.unitOfWorkWorkingCopy.addManagedEmployee(newEmp);
  if (compareObjects(this.originalObject,this.unitOfWorkWorkingCopy)) {
    throw new TestErrorException(""String_Node_Str"");
  }
  UnitOfWorkChangeSet changeSet=(UnitOfWorkChangeSet)this.unitOfWork.getCurrentChanges();
  this.unitOfWork.revertAndResume();
  ((UnitOfWorkImpl)this.unitOfWork).commitAndResumeWithPreBuiltChangeSet(changeSet);
  this.unitOfWork.release();
}","protected void test(){
  this.unitOfWorkWorkingCopy.setFirstName(""String_Node_Str"");
  this.unitOfWorkWorkingCopy.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Employee newEmp=new Employee();
  newEmp.setFirstName(""String_Node_Str"");
  newEmp.setLastName(""String_Node_Str"");
  newEmp.setSalary(13);
  PhoneNumber phone=(PhoneNumber)this.unitOfWorkWorkingCopy.getPhoneNumbers().get(0);
  this.unitOfWorkWorkingCopy.getPhoneNumbers().remove(phone);
  this.unitOfWork.deleteObject(phone);
  this.unitOfWorkWorkingCopy.addManagedEmployee(newEmp);
  if (compareObjects(this.originalObject,this.unitOfWorkWorkingCopy)) {
    throw new TestErrorException(""String_Node_Str"");
  }
  UnitOfWorkChangeSet changeSet=(UnitOfWorkChangeSet)this.unitOfWork.getCurrentChanges();
  this.unitOfWork.assignSequenceNumbers();
  this.unitOfWork.revertAndResume();
  ((UnitOfWorkImpl)this.unitOfWork).commitAndResumeWithPreBuiltChangeSet(changeSet);
  this.unitOfWork.release();
}"
68378,"/** 
 * Initialize any platform-specific operators
 */
protected void initializePlatformOperators(){
  this.platformOperators=new HashMap();
  addOperator(ExpressionOperator.equalOuterJoin());
  addOperator(ExpressionOperator.toUpperCase());
  addOperator(ExpressionOperator.toLowerCase());
  addOperator(ExpressionOperator.chr());
  addOperator(ExpressionOperator.concat());
  addOperator(ExpressionOperator.hexToRaw());
  addOperator(ExpressionOperator.initcap());
  addOperator(ExpressionOperator.instring());
  addOperator(ExpressionOperator.soundex());
  addOperator(ExpressionOperator.leftPad());
  addOperator(ExpressionOperator.leftTrim());
  addOperator(ExpressionOperator.leftTrim2());
  addOperator(ExpressionOperator.replace());
  addOperator(ExpressionOperator.rightPad());
  addOperator(ExpressionOperator.rightTrim());
  addOperator(ExpressionOperator.rightTrim2());
  addOperator(ExpressionOperator.substring());
  addOperator(ExpressionOperator.toNumber());
  addOperator(ExpressionOperator.toChar());
  addOperator(ExpressionOperator.toCharWithFormat());
  addOperator(ExpressionOperator.translate());
  addOperator(ExpressionOperator.trim());
  addOperator(ExpressionOperator.trim2());
  addOperator(ExpressionOperator.ascii());
  addOperator(ExpressionOperator.length());
  addOperator(ExpressionOperator.locate());
  addOperator(ExpressionOperator.locate2());
  addOperator(ExpressionOperator.addMonths());
  addOperator(ExpressionOperator.dateToString());
  addOperator(ExpressionOperator.lastDay());
  addOperator(ExpressionOperator.monthsBetween());
  addOperator(ExpressionOperator.nextDay());
  addOperator(ExpressionOperator.roundDate());
  addOperator(ExpressionOperator.toDate());
  addOperator(ExpressionOperator.today());
  addOperator(ExpressionOperator.currentDate());
  addOperator(ExpressionOperator.currentTime());
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Add,""String_Node_Str""));
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Subtract,""String_Node_Str""));
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Multiply,""String_Node_Str""));
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Divide,""String_Node_Str""));
  addOperator(ExpressionOperator.ceil());
  addOperator(ExpressionOperator.cos());
  addOperator(ExpressionOperator.cosh());
  addOperator(ExpressionOperator.abs());
  addOperator(ExpressionOperator.acos());
  addOperator(ExpressionOperator.asin());
  addOperator(ExpressionOperator.atan());
  addOperator(ExpressionOperator.exp());
  addOperator(ExpressionOperator.sqrt());
  addOperator(ExpressionOperator.floor());
  addOperator(ExpressionOperator.ln());
  addOperator(ExpressionOperator.log());
  addOperator(ExpressionOperator.mod());
  addOperator(ExpressionOperator.power());
  addOperator(ExpressionOperator.round());
  addOperator(ExpressionOperator.sign());
  addOperator(ExpressionOperator.sin());
  addOperator(ExpressionOperator.sinh());
  addOperator(ExpressionOperator.tan());
  addOperator(ExpressionOperator.tanh());
  addOperator(ExpressionOperator.trunc());
  addOperator(ExpressionOperator.greatest());
  addOperator(ExpressionOperator.least());
  addOperator(ExpressionOperator.deref());
  addOperator(ExpressionOperator.ref());
  addOperator(ExpressionOperator.refToHex());
  addOperator(ExpressionOperator.value());
}","/** 
 * Initialize any platform-specific operators
 */
protected void initializePlatformOperators(){
  this.platformOperators=new HashMap();
  addOperator(ExpressionOperator.equalOuterJoin());
  addOperator(ExpressionOperator.toUpperCase());
  addOperator(ExpressionOperator.toLowerCase());
  addOperator(ExpressionOperator.chr());
  addOperator(ExpressionOperator.concat());
  addOperator(ExpressionOperator.hexToRaw());
  addOperator(ExpressionOperator.initcap());
  addOperator(ExpressionOperator.instring());
  addOperator(ExpressionOperator.soundex());
  addOperator(ExpressionOperator.leftPad());
  addOperator(ExpressionOperator.leftTrim());
  addOperator(ExpressionOperator.leftTrim2());
  addOperator(ExpressionOperator.replace());
  addOperator(ExpressionOperator.rightPad());
  addOperator(ExpressionOperator.rightTrim());
  addOperator(ExpressionOperator.rightTrim2());
  addOperator(ExpressionOperator.substring());
  addOperator(ExpressionOperator.toNumber());
  addOperator(ExpressionOperator.toChar());
  addOperator(ExpressionOperator.toCharWithFormat());
  addOperator(ExpressionOperator.translate());
  addOperator(ExpressionOperator.trim());
  addOperator(ExpressionOperator.trim2());
  addOperator(ExpressionOperator.ascii());
  addOperator(ExpressionOperator.length());
  addOperator(ExpressionOperator.locate());
  addOperator(ExpressionOperator.locate2());
  addOperator(ExpressionOperator.addMonths());
  addOperator(ExpressionOperator.dateToString());
  addOperator(ExpressionOperator.lastDay());
  addOperator(ExpressionOperator.monthsBetween());
  addOperator(ExpressionOperator.nextDay());
  addOperator(ExpressionOperator.roundDate());
  addOperator(ExpressionOperator.toDate());
  addOperator(ExpressionOperator.today());
  addOperator(ExpressionOperator.currentDate());
  addOperator(ExpressionOperator.currentTime());
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Add,""String_Node_Str""));
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Subtract,""String_Node_Str""));
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Multiply,""String_Node_Str""));
  addOperator(ExpressionOperator.simpleMath(ExpressionOperator.Divide,""String_Node_Str""));
  addOperator(ExpressionOperator.ceil());
  addOperator(ExpressionOperator.cos());
  addOperator(ExpressionOperator.cosh());
  addOperator(ExpressionOperator.abs());
  addOperator(ExpressionOperator.acos());
  addOperator(ExpressionOperator.asin());
  addOperator(ExpressionOperator.atan());
  addOperator(ExpressionOperator.exp());
  addOperator(ExpressionOperator.sqrt());
  addOperator(ExpressionOperator.floor());
  addOperator(ExpressionOperator.ln());
  addOperator(ExpressionOperator.log());
  addOperator(ExpressionOperator.mod());
  addOperator(ExpressionOperator.power());
  addOperator(ExpressionOperator.round());
  addOperator(ExpressionOperator.sign());
  addOperator(ExpressionOperator.sin());
  addOperator(ExpressionOperator.sinh());
  addOperator(ExpressionOperator.tan());
  addOperator(ExpressionOperator.tanh());
  addOperator(ExpressionOperator.trunc());
  addOperator(ExpressionOperator.greatest());
  addOperator(ExpressionOperator.least());
  addOperator(ExpressionOperator.standardDeviation());
  addOperator(ExpressionOperator.deref());
  addOperator(ExpressionOperator.ref());
  addOperator(ExpressionOperator.refToHex());
  addOperator(ExpressionOperator.value());
}"
68379,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (namespaceURI.equals(XMLConstants.XOP_URL) && (localName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str""))) {
    this.c_id=atts.getValue(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}","@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    this.c_id=atts.getValue(""String_Node_Str"",HREF_ATTRIBUTE_NAME);
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}"
68380,"public XMLBinaryAttachmentHandler(UnmarshalRecord unmarshalRecord,NodeValue nodeValue,XMLBinaryDataCollectionMapping mapping){
  record=unmarshalRecord;
  this.mapping=mapping;
  converter=mapping.getValueConverter();
  this.nodeValue=nodeValue;
  isCollection=true;
}","public XMLBinaryAttachmentHandler(UnmarshalRecord unmarshalRecord,NodeValue nodeValue,DatabaseMapping mapping,Converter converter,boolean isCollection){
  super(null);
  record=unmarshalRecord;
  this.mapping=mapping;
  this.nodeValue=nodeValue;
  this.converter=converter;
  this.isCollection=isCollection;
}"
68381,"public void characters(char[] characters,int offset,int length){
}","@Override public void characters(char[] ch,int offset,int length) throws SAXException {
}"
68382,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (namespaceURI.equals(XMLConstants.XOP_URL) && (localName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str""))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      Object container=record.getContainerInstance((XMLBinaryDataCollectionMappingNodeValue)nodeValue);
      ((XMLBinaryDataCollectionMapping)mapping).getContainerPolicy().addInto(data,container,record.getSession());
    }
 else {
      mapping.setAttributeValueInObject(record.getCurrentObject(),data);
    }
    record.getXMLReader().setContentHandler(record);
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.endElement(namespaceURI,localName,qName);
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    record.getXMLReader().setContentHandler(record);
  }
 else {
    record.getXMLReader().setContentHandler(record);
    record.endElement(namespaceURI,localName,qName);
  }
}"
68383,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  XMLField xmlField=(XMLField)xmlBinaryDataCollectionMapping.getField();
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  if (!xmlBinaryDataCollectionMapping.isSwaRef() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData() && !lastFragment.isAttribute()) {
    if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().isXOPPackage()) {
      XMLBinaryAttachmentHandler handler=new XMLBinaryAttachmentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
    }
  }
 else   if (lastFragment.isAttribute()) {
    String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
    Object fieldValue=null;
    if (xmlBinaryDataCollectionMapping.isSwaRef()) {
      if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
        if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
          fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
        }
 else {
          fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
        }
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
 else {
      fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
    }
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLField xmlField=(XMLField)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + ""String_Node_Str"" + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
68384,"public void marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  boolean addDeclaration=false;
  boolean removePrefix=false;
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null) {
    addDeclaration=true;
    xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
    if (xopPrefix == null) {
      removePrefix=true;
      xopPrefix=XMLConstants.XOP_PREFIX;
      marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
    }
    namespaceResolver=marshalRecord.getNamespaceResolver();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      byte[] bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    marshalRecord.characters(c_id);
  }
 else {
    if (marshaller.getAttachmentMarshaller() != null && marshaller.getAttachmentMarshaller().isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=""String_Node_Str"";
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        byte[] bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,lastFrag.getLocalName(),lastFrag.getNamespaceURI(),null);
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        byte[] bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
      xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
      marshalRecord.openStartElement(xopInclude,namespaceResolver);
      marshalRecord.attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",c_id);
      if (addDeclaration) {
        marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + ""String_Node_Str"" + xopPrefix,XMLConstants.XOP_URL);
      }
      marshalRecord.closeStartElement();
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      String value=""String_Node_Str"";
      if (objectValue.getClass() == ClassConstants.ABYTE || objectValue.getClass() == ClassConstants.APBYTE) {
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  if (removePrefix) {
    marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  }
}","public void marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return;
  }
  boolean addDeclaration=false;
  boolean removePrefix=false;
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null) {
    addDeclaration=true;
    xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
    if (xopPrefix == null) {
      removePrefix=true;
      xopPrefix=XMLConstants.XOP_PREFIX;
      marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
    }
    namespaceResolver=marshalRecord.getNamespaceResolver();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      byte[] bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    marshalRecord.characters(c_id);
  }
 else {
    if (marshaller.getAttachmentMarshaller() != null && marshaller.getAttachmentMarshaller().isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=""String_Node_Str"";
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        byte[] bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,lastFrag.getLocalName(),lastFrag.getNamespaceURI(),null);
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        byte[] bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
      xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
      marshalRecord.openStartElement(xopInclude,namespaceResolver);
      marshalRecord.attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",c_id);
      if (addDeclaration) {
        marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + ""String_Node_Str"" + xopPrefix,XMLConstants.XOP_URL);
      }
      marshalRecord.closeStartElement();
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      String value=""String_Node_Str"";
      if (objectValue.getClass() == ClassConstants.ABYTE || objectValue.getClass() == ClassConstants.APBYTE) {
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        byte[] bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  if (removePrefix) {
    marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  }
}"
68385,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (!xmlBinaryDataCollectionMapping.shouldInlineBinaryData() && !xmlBinaryDataCollectionMapping.isSwaRef() && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().isXOPPackage()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
    if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
      Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
 else {
    value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
    if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
      Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession());
  if (value != null) {
    Object container=unmarshalRecord.getContainerInstance(this);
    unmarshalRecord.addAttributeValue(this,value);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.getStringBuffer().reset();
}"
68386,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (!xmlBinaryDataMapping.shouldInlineBinaryData() && !xmlBinaryDataMapping.isSwaRef() && (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null)&& unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().isXOPPackage()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (xmlBinaryDataMapping.isSwaRef() && (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (xmlBinaryDataMapping.getConverter() != null) {
      Converter converter=xmlBinaryDataMapping.getConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
 else {
    value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
    if (xmlBinaryDataMapping.getConverter() != null) {
      Converter converter=xmlBinaryDataMapping.getConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession());
  unmarshalRecord.setAttributeValue(value,xmlBinaryDataMapping);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.getStringBuffer().reset();
}"
68387,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlBinaryDataMapping.getField();
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  if (!xmlBinaryDataMapping.isSwaRef() && !xmlBinaryDataMapping.shouldInlineBinaryData() && !lastFragment.isAttribute()) {
    if ((unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().isXOPPackage()) {
      XMLBinaryAttachmentHandler handler=new XMLBinaryAttachmentHandler(unmarshalRecord,this,this.xmlBinaryDataMapping);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
    }
  }
 else   if (lastFragment.isAttribute()) {
    String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
    Object fieldValue=null;
    if (xmlBinaryDataMapping.isSwaRef()) {
      if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
        if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
          fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
        }
 else {
          fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
        }
        xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
 else {
      fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
    }
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLField xmlField=(XMLField)xmlBinaryDataMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + ""String_Node_Str"" + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
68388,"public void parse(Node node) throws SAXException {
  if (getContentHandler() == null) {
    return;
  }
  Element rootNode=null;
  if (node.getNodeType() == Node.DOCUMENT_NODE) {
    rootNode=((Document)node).getDocumentElement();
  }
 else {
    rootNode=(Element)node;
  }
  startDocument();
  setupLocator(rootNode.getOwnerDocument());
  reportElementEvents(rootNode);
  endDocument();
}","public void parse(Node node) throws SAXException {
  if (getContentHandler() == null) {
    return;
  }
  Element rootNode=null;
  if (node.getNodeType() == Node.DOCUMENT_NODE) {
    rootNode=((Document)node).getDocumentElement();
  }
 else {
    rootNode=(Element)node;
  }
  processParentNamespaces(rootNode);
  startDocument();
  setupLocator(rootNode.getOwnerDocument());
  reportElementEvents(rootNode);
  endDocument();
}"
68389,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=platform.equalsIgnoreCase(""String_Node_Str"");
  suite.addTestSuite(XMLMarshallerCreateTestCases.class);
  suite.addTestSuite(XMLMarshalTestCases.class);
  suite.addTestSuite(XMLMarshalFragmentTestCases.class);
  suite.addTestSuite(XMLUnmarshalTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(XMLMarshallerValidateRootTestCases.class);
  }
  suite.addTestSuite(XMLMarshallerValidationModeTestCases.class);
  suite.addTestSuite(SetSchemasTestCases.class);
  suite.addTest(StructureValidationTestSuite.suite());
  suite.addTestSuite(XMLUnmarshallerHandlerTestCases.class);
  suite.addTestSuite(XMLMarshallerNoDefaultRootTestCases.class);
  suite.addTestSuite(XMLContextConstructorUsingXMLSessionConfigLoader.class);
  suite.addTestSuite(XMLContextStoreXMLDescriptorSimpleType.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=platform.equalsIgnoreCase(""String_Node_Str"");
  suite.addTestSuite(XMLMarshallerCreateTestCases.class);
  suite.addTestSuite(XMLMarshalTestCases.class);
  suite.addTestSuite(XMLMarshalFragmentTestCases.class);
  suite.addTestSuite(XMLUnmarshalTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(XMLMarshallerValidateRootTestCases.class);
  }
  suite.addTestSuite(XMLMarshallerValidationModeTestCases.class);
  suite.addTestSuite(SetSchemasTestCases.class);
  suite.addTest(StructureValidationTestSuite.suite());
  suite.addTestSuite(XMLUnmarshallerHandlerTestCases.class);
  suite.addTestSuite(XMLMarshallerNoDefaultRootTestCases.class);
  suite.addTestSuite(XMLContextConstructorUsingXMLSessionConfigLoader.class);
  suite.addTestSuite(XMLContextStoreXMLDescriptorSimpleType.class);
  suite.addTestSuite(UnmarshalChildElementNSTestCases.class);
  return suite;
}"
68390,"public SDOChangeSummary(SDODataObject dataObject,HelperContext aContext){
  this();
  aHelperContext=aContext;
  rootDataObject=dataObject;
}","public SDOChangeSummary(SDODataGraph dataGraph,HelperContext aContext){
  this();
  aHelperContext=aContext;
  this.dataGraph=dataGraph;
}"
68391,"/** 
 * Creates a new root data object of the specified type. An exception is thrown if a root object exists.
 * @param type the type of the new root.
 * @return the new root.
 * @throws IllegalStateException if the root object already exists.
 * @see #createRootObject(String,String)
 */
public DataObject createRootObject(Type type){
  rootObject=(SDODataObject)helperContext.getDataFactory().create(type);
  rootObject.setDataGraph(this);
  rootObject._setChangeSummary(changeSummary);
  return rootObject;
}","/** 
 * Creates a new root data object of the specified type. An exception is thrown if a root object exists.
 * @param type the type of the new root.
 * @return the new root.
 * @throws IllegalStateException if the root object already exists.
 * @see #createRootObject(String,String)
 */
public DataObject createRootObject(Type type){
  if (null != rootObject) {
    throw new IllegalStateException();
  }
  rootObject=(SDODataObject)helperContext.getDataFactory().create(type);
  rootObject.setDataGraph(this);
  rootObject._setChangeSummary(changeSummary);
  changeSummary.setRootDataObject(rootObject);
  return rootObject;
}"
68392,"public SDODataGraph(HelperContext helperContext){
  super();
  if (null == helperContext) {
    this.helperContext=HelperProvider.getDefaultContext();
  }
 else {
    this.helperContext=helperContext;
  }
  this.changeSummary=new SDOChangeSummary();
}","public SDODataGraph(HelperContext helperContext){
  super();
  if (null == helperContext) {
    this.helperContext=HelperProvider.getDefaultContext();
  }
 else {
    this.helperContext=helperContext;
  }
  this.changeSummary=new SDOChangeSummary(this,helperContext);
}"
68393,"public StoredProcedureDefinition buildSQLServerUpdateProcedure(){
  StoredProcedureDefinition proc=new StoredProcedureDefinition();
  proc.setName(""String_Node_Str"");
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",Integer.class);
  proc.addArgument(""String_Node_Str"",java.sql.Date.class);
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",java.sql.Date.class);
  proc.addArgument(""String_Node_Str"",String.class,40);
  proc.addArgument(""String_Node_Str"",String.class,40);
  proc.addArgument(""String_Node_Str"",String.class,1);
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",java.sql.Time.class);
  proc.addArgument(""String_Node_Str"",java.sql.Time.class);
  proc.addStatement(""String_Node_Str"");
  proc.addStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  return proc;
}","public StoredProcedureDefinition buildSQLServerUpdateProcedure(){
  StoredProcedureDefinition proc=new StoredProcedureDefinition();
  proc.setName(""String_Node_Str"");
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",Integer.class);
  proc.addArgument(""String_Node_Str"",java.sql.Date.class);
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",java.sql.Date.class);
  proc.addArgument(""String_Node_Str"",String.class,40);
  proc.addArgument(""String_Node_Str"",String.class,40);
  proc.addArgument(""String_Node_Str"",String.class,1);
  proc.addArgument(""String_Node_Str"",Long.class);
  proc.addArgument(""String_Node_Str"",java.sql.Time.class);
  proc.addArgument(""String_Node_Str"",java.sql.Time.class);
  proc.addStatement(""String_Node_Str"");
  proc.addStatement(""String_Node_Str"" + ""String_Node_Str"");
  return proc;
}"
68394,"protected void setSQLServerSQL(Session session){
  ClassDescriptor empDescriptor=session.getDescriptor(new Employee());
  StoredProcedureCall call;
  empDescriptor.setOptimisticLockingPolicy(null);
  session.getLogin().getPlatform().setUsesNativeSQL(true);
  ReadObjectQuery readQuery=new ReadObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.setReturnsResultSet(true);
  readQuery.setCall(call);
  empDescriptor.getQueryManager().setReadObjectQuery(readQuery);
  ReadAllQuery readAllQuery=new ReadAllQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.setReturnsResultSet(true);
  readAllQuery.setCall(call);
  empDescriptor.getQueryManager().setReadAllQuery(readAllQuery);
  DeleteObjectQuery deleteQuery=new DeleteObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  deleteQuery.setCall(call);
  empDescriptor.getQueryManager().setDeleteQuery(deleteQuery);
  InsertObjectQuery insertQuery=new InsertObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.setUsesBinding(true);
  call.setShouldCacheStatement(true);
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedOutputArgument(""String_Node_Str"",""String_Node_Str"",java.math.BigDecimal.class);
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  insertQuery.setCall(call);
  empDescriptor.getQueryManager().setInsertQuery(insertQuery);
  UpdateObjectQuery updateQuery=new UpdateObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  updateQuery.setCall(call);
  empDescriptor.getQueryManager().setUpdateQuery(updateQuery);
  ManyToManyMapping manyToMany=(ManyToManyMapping)empDescriptor.getMappingForAttributeName(""String_Node_Str"");
  manyToMany.setSelectionSQLString(""String_Node_Str"");
}","protected void setSQLServerSQL(Session session){
  ClassDescriptor empDescriptor=session.getDescriptor(new Employee());
  StoredProcedureCall call;
  empDescriptor.setOptimisticLockingPolicy(null);
  session.getLogin().getPlatform().setUsesNativeSQL(true);
  ReadObjectQuery readQuery=new ReadObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.setReturnsResultSet(true);
  readQuery.setCall(call);
  empDescriptor.getQueryManager().setReadObjectQuery(readQuery);
  ReadAllQuery readAllQuery=new ReadAllQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.setReturnsResultSet(true);
  readAllQuery.setCall(call);
  empDescriptor.getQueryManager().setReadAllQuery(readAllQuery);
  DeleteObjectQuery deleteQuery=new DeleteObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  deleteQuery.setCall(call);
  empDescriptor.getQueryManager().setDeleteQuery(deleteQuery);
  InsertObjectQuery insertQuery=new InsertObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.setUsesBinding(true);
  call.setShouldCacheStatement(true);
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedOutputArgument(""String_Node_Str"",""String_Node_Str"",java.math.BigDecimal.class);
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  insertQuery.setCall(call);
  empDescriptor.getQueryManager().setInsertQuery(insertQuery);
  UpdateObjectQuery updateQuery=new UpdateObjectQuery();
  call=new StoredProcedureCall();
  call.setProcedureName(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  call.addNamedArgument(""String_Node_Str"");
  updateQuery.setCall(call);
  empDescriptor.getQueryManager().setUpdateQuery(updateQuery);
  ManyToManyMapping manyToMany=(ManyToManyMapping)empDescriptor.getMappingForAttributeName(""String_Node_Str"");
  manyToMany.setSelectionSQLString(""String_Node_Str"");
}"
68395,"public void test(){
  ReadAllQuery readQuery=new ReadAllQuery(Employee.class);
  DatabaseCall call;
  SQLCall sqlCall;
  StoredProcedureCall spCall;
  boolean useInOut=getSession().getPlatform().isSybase();
  if (useCustomSQL) {
    String prefix;
    if (useInOut) {
      prefix=""String_Node_Str"";
    }
 else {
      prefix=""String_Node_Str"";
    }
    sqlCall=new SQLCall(""String_Node_Str"" + prefix + ""String_Node_Str"");
    sqlCall.setCustomSQLArgumentType(""String_Node_Str"",BigDecimal.class);
    call=sqlCall;
  }
 else {
    spCall=new StoredProcedureCall();
    spCall.setProcedureName(""String_Node_Str"");
    spCall.addNamedArgument(""String_Node_Str"",""String_Node_Str"");
    if (useInOut) {
      spCall.addNamedInOutputArgumentValue(""String_Node_Str"",new Long(0),""String_Node_Str"",java.math.BigDecimal.class);
    }
 else {
      spCall.addNamedOutputArgument(""String_Node_Str"",""String_Node_Str"",BigDecimal.class);
    }
    call=spCall;
  }
  call.setReturnsResultSet(true);
  readQuery.setCall(call);
  readQuery.addArgument(""String_Node_Str"");
  if (useCustomSQL && useInOut) {
    readQuery.addArgument(""String_Node_Str"");
  }
  getSession().removeQuery(""String_Node_Str"");
  getSession().addQuery(""String_Node_Str"",readQuery);
  Vector args=new Vector(2);
  args.addElement(new Integer(1));
  if (useCustomSQL && useInOut) {
    args.addElement(new Long(0));
  }
  try {
    Vector vResult=(Vector)getSession().executeQuery(""String_Node_Str"",args);
  }
 catch (  ClassCastException e) {
    throw new TestErrorException(""String_Node_Str"");
  }
  readQuery=new ReadAllQuery(Employee.class);
  if (useCustomSQL) {
    return;
  }
 else {
    spCall=new StoredProcedureCall();
    spCall.setProcedureName(""String_Node_Str"");
    spCall.addNamedArgumentValue(""String_Node_Str"",new Integer(1));
    if (useInOut) {
      spCall.addNamedInOutputArgumentValue(""String_Node_Str"",new Long(0),""String_Node_Str"",java.math.BigDecimal.class);
    }
 else {
      spCall.addNamedOutputArgument(""String_Node_Str"",""String_Node_Str"",BigDecimal.class);
    }
    call=spCall;
  }
  call.setReturnsResultSet(true);
  readQuery.setCall(call);
  try {
    Vector vResult=(Vector)getSession().executeQuery(readQuery);
  }
 catch (  ClassCastException e) {
    throw new TestErrorException(""String_Node_Str"");
  }
}","public void test(){
  ReadAllQuery readQuery=new ReadAllQuery(Employee.class);
  DatabaseCall call;
  SQLCall sqlCall;
  StoredProcedureCall spCall;
  boolean useInOut=getSession().getPlatform().isSybase();
  if (useCustomSQL) {
    String prefix;
    if (useInOut) {
      prefix=""String_Node_Str"";
    }
 else {
      prefix=""String_Node_Str"";
    }
    sqlCall=new SQLCall(""String_Node_Str"" + prefix + ""String_Node_Str""+ getSession().getPlatform().getOutputProcedureToken());
    sqlCall.setCustomSQLArgumentType(""String_Node_Str"",BigDecimal.class);
    call=sqlCall;
  }
 else {
    spCall=new StoredProcedureCall();
    spCall.setProcedureName(""String_Node_Str"");
    spCall.addNamedArgument(""String_Node_Str"",""String_Node_Str"");
    if (useInOut) {
      spCall.addNamedInOutputArgumentValue(""String_Node_Str"",new Long(0),""String_Node_Str"",java.math.BigDecimal.class);
    }
 else {
      spCall.addNamedOutputArgument(""String_Node_Str"",""String_Node_Str"",BigDecimal.class);
    }
    call=spCall;
  }
  call.setReturnsResultSet(true);
  readQuery.setCall(call);
  readQuery.addArgument(""String_Node_Str"");
  if (useCustomSQL && useInOut) {
    readQuery.addArgument(""String_Node_Str"");
  }
  getSession().removeQuery(""String_Node_Str"");
  getSession().addQuery(""String_Node_Str"",readQuery);
  Vector args=new Vector(2);
  args.addElement(new Integer(1));
  if (useCustomSQL && useInOut) {
    args.addElement(new Long(0));
  }
  try {
    Vector vResult=(Vector)getSession().executeQuery(""String_Node_Str"",args);
  }
 catch (  ClassCastException e) {
    throw new TestErrorException(""String_Node_Str"");
  }
  readQuery=new ReadAllQuery(Employee.class);
  if (useCustomSQL) {
    return;
  }
 else {
    spCall=new StoredProcedureCall();
    spCall.setProcedureName(""String_Node_Str"");
    spCall.addNamedArgumentValue(""String_Node_Str"",new Integer(1));
    if (useInOut) {
      spCall.addNamedInOutputArgumentValue(""String_Node_Str"",new Long(0),""String_Node_Str"",java.math.BigDecimal.class);
    }
 else {
      spCall.addNamedOutputArgument(""String_Node_Str"",""String_Node_Str"",BigDecimal.class);
    }
    call=spCall;
  }
  call.setReturnsResultSet(true);
  readQuery.setCall(call);
  try {
    Vector vResult=(Vector)getSession().executeQuery(readQuery);
  }
 catch (  ClassCastException e) {
    throw new TestErrorException(""String_Node_Str"");
  }
}"
68396,"public void test(){
  ReadAllQuery query=new ReadAllQuery();
  query.setReferenceClass(Employee.class);
  query.useScrollableCursor();
  ScrollableCursor cursor=(ScrollableCursor)getSession().executeQuery(query);
  while (cursor.hasMoreElements()) {
    this.cursoredQueryObjects.addElement(cursor.nextElement());
  }
}","public void test(){
  ReadAllQuery query=new ReadAllQuery();
  query.setReferenceClass(Employee.class);
  if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
    query.useScrollableCursor();
  }
 else {
    ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
    if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
      policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
    }
    if (!CONCUR_UPDATABLE_isSupported) {
      policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
    }
    policy.setPageSize(10);
    query.useScrollableCursor(policy);
  }
  ScrollableCursor cursor=(ScrollableCursor)getSession().executeQuery(query);
  while (cursor.hasMoreElements()) {
    this.cursoredQueryObjects.addElement(cursor.nextElement());
  }
}"
68397,"protected void setup(){
  if (getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (getSession().getPlatform().isDB2()) {
    throw new TestWarningException(""String_Node_Str"" + Helper.cr() + ""String_Node_Str"");
  }
  this.cursoredQueryObjects=new Vector();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}","protected void setup(){
  if (getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (getSession().getPlatform().isDB2()) {
    throw new TestWarningException(""String_Node_Str"" + Helper.cr() + ""String_Node_Str"");
  }
  TYPE_SCROLL_INSENSITIVE_isSupported=true;
  CONCUR_UPDATABLE_isSupported=true;
  if (getSession().getPlatform().isSQLServer()) {
    TYPE_SCROLL_INSENSITIVE_isSupported=false;
    CONCUR_UPDATABLE_isSupported=false;
  }
  this.cursoredQueryObjects=new Vector();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}"
68398,"/** 
 * Test the join-subclasses query feature.
 */
public TestCase buildJoinSubclassesQueryTest(){
  TestCase test=new TestCase(){
    public void test(){
      UnitOfWork uow=getSession().acquireUnitOfWork();
      ReadAllQuery query=new ReadAllQuery(Project.class);
      query.useScrollableCursor();
      query.setShouldOuterJoinSubclasses(true);
      Cursor result=(Cursor)uow.executeQuery(query);
      result.nextElement();
      result.close();
    }
  }
;
  test.setName(""String_Node_Str"");
  return test;
}","/** 
 * Test the join-subclasses query feature.
 */
public TestCase buildJoinSubclassesQueryTest(){
  TestCase test=new TestCase(){
    public void test(){
      UnitOfWork uow=getSession().acquireUnitOfWork();
      ReadAllQuery query=new ReadAllQuery(Project.class);
      boolean TYPE_SCROLL_INSENSITIVE_isSupported=true;
      boolean CONCUR_UPDATABLE_isSupported=true;
      if (getSession().getPlatform().isSQLServer()) {
        TYPE_SCROLL_INSENSITIVE_isSupported=false;
        CONCUR_UPDATABLE_isSupported=false;
      }
      if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
        query.useScrollableCursor();
      }
 else {
        ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
        if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
          policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
        }
        if (!CONCUR_UPDATABLE_isSupported) {
          policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
        }
        policy.setPageSize(10);
        query.useScrollableCursor(policy);
      }
      query.setShouldOuterJoinSubclasses(true);
      Cursor result=(Cursor)uow.executeQuery(query);
      result.nextElement();
      result.close();
    }
  }
;
  test.setName(""String_Node_Str"");
  return test;
}"
68399,"public void test(){
  ReadAllQuery query=new ReadAllQuery();
  query.setReferenceClass(Employee.class);
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression exp=builder.get(""String_Node_Str"").like(""String_Node_Str"");
  query.setSelectionCriteria(exp);
  query.useScrollableCursor();
  employeeStream=(ScrollableCursor)getSession().executeQuery(query);
}","public void test(){
  ReadAllQuery query=new ReadAllQuery();
  query.setReferenceClass(Employee.class);
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression exp=builder.get(""String_Node_Str"").like(""String_Node_Str"");
  query.setSelectionCriteria(exp);
  if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
    query.useScrollableCursor();
  }
 else {
    ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
    if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
      policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
    }
    if (!CONCUR_UPDATABLE_isSupported) {
      policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
    }
    policy.setPageSize(10);
    query.useScrollableCursor(policy);
  }
  employeeStream=(ScrollableCursor)getSession().executeQuery(query);
}"
68400,"protected void setup(){
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
}","protected void setup(){
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  TYPE_SCROLL_INSENSITIVE_isSupported=true;
  CONCUR_UPDATABLE_isSupported=true;
  if (getSession().getPlatform().isSQLServer()) {
    TYPE_SCROLL_INSENSITIVE_isSupported=false;
    CONCUR_UPDATABLE_isSupported=false;
  }
}"
68401,"public void test(){
  ReadAllQuery query=new ReadAllQuery();
  ScrollableCursor cursor=null;
  try {
    query.setReferenceClass(Employee.class);
    query.useScrollableCursor(2);
    if (configuration != null) {
      ExpressionBuilder builder=new ExpressionBuilder();
      Expression exp=builder.get(""String_Node_Str"").greaterThan(50000);
      query.setSelectionCriteria(exp);
      query.conformResultsInUnitOfWork();
    }
    cursor=(ScrollableCursor)getSession().executeQuery(query);
    try {
      int totalItems=0;
      while (cursor.hasNext()) {
        readWithNext.addElement(cursor.next());
        totalItems++;
      }
      while (cursor.hasPrevious()) {
        readWithPrevious.addElement(cursor.previous());
        totalItems--;
      }
      cursorSuccess=(totalItems == 0);
      int size=readWithPrevious.size();
      for (int i=0; i < readWithNext.size(); i++) {
        cursorSuccess=(cursorSuccess && (readWithNext.elementAt(i) == readWithPrevious.elementAt((size - 1) - i)));
      }
    }
 catch (    org.eclipse.persistence.exceptions.QueryException ex) {
      caughtException=ex;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","public void test(){
  ReadAllQuery query=new ReadAllQuery();
  ScrollableCursor cursor=null;
  try {
    query.setReferenceClass(Employee.class);
    if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
      query.useScrollableCursor(2);
    }
 else {
      ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
      if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
        policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
      }
      if (!CONCUR_UPDATABLE_isSupported) {
        policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
      }
      policy.setPageSize(2);
      query.useScrollableCursor(policy);
    }
    if (configuration != null) {
      ExpressionBuilder builder=new ExpressionBuilder();
      Expression exp=builder.get(""String_Node_Str"").greaterThan(50000);
      query.setSelectionCriteria(exp);
      query.conformResultsInUnitOfWork();
    }
    cursor=(ScrollableCursor)getSession().executeQuery(query);
    try {
      int totalItems=0;
      while (cursor.hasNext()) {
        readWithNext.addElement(cursor.next());
        totalItems++;
      }
      while (cursor.hasPrevious()) {
        readWithPrevious.addElement(cursor.previous());
        totalItems--;
      }
      cursorSuccess=(totalItems == 0);
      int size=readWithPrevious.size();
      for (int i=0; i < readWithNext.size(); i++) {
        cursorSuccess=(cursorSuccess && (readWithNext.elementAt(i) == readWithPrevious.elementAt((size - 1) - i)));
      }
    }
 catch (    org.eclipse.persistence.exceptions.QueryException ex) {
      caughtException=ex;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}"
68402,"protected void setup(){
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  readWithNext=new Vector();
  readWithPrevious=new Vector();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  if (configuration != null) {
    configuration.setup(getSession());
    getExecutor().setSession(configuration.getUnitOfWork());
  }
}","protected void setup(){
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  TYPE_SCROLL_INSENSITIVE_isSupported=true;
  CONCUR_UPDATABLE_isSupported=true;
  if (getSession().getPlatform().isSQLServer()) {
    TYPE_SCROLL_INSENSITIVE_isSupported=false;
    CONCUR_UPDATABLE_isSupported=false;
  }
  readWithNext=new Vector();
  readWithPrevious=new Vector();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  if (configuration != null) {
    configuration.setup(getSession());
    getExecutor().setSession(configuration.getUnitOfWork());
  }
}"
68403,"public void test(){
  ReadAllQuery query=new ReadAllQuery();
  if (configuration != null) {
    ExpressionBuilder emp=new ExpressionBuilder();
    Expression exp=emp.get(""String_Node_Str"").greaterThan(50000);
    query.setSelectionCriteria(exp);
    query.conformResultsInUnitOfWork();
  }
  ScrollableCursor cursor=null;
  try {
    query.setReferenceClass(Employee.class);
    query.useScrollableCursor(2);
    cursor=(ScrollableCursor)getSession().executeQuery(query);
    try {
      boolean isFirst=cursor.first();
      if (!cursor.isFirst() || !isFirst) {
        navigationError=""String_Node_Str"";
      }
      Object second=cursor.next();
      Object first=cursor.previous();
      if (first.equals(second)) {
        navigationError=""String_Node_Str"";
      }
      if (!second.equals(cursor.next())) {
        navigationError=""String_Node_Str"";
      }
      boolean isRelative=cursor.relative(1);
      if (!isRelative || !second.equals(cursor.previous())) {
        navigationError=""String_Node_Str"";
      }
      boolean isAbsolute=cursor.absolute(1);
      if (!second.equals(cursor.next())) {
        navigationError=""String_Node_Str"";
      }
      cursor.beforeFirst();
      if (!cursor.isBeforeFirst()) {
        navigationError=""String_Node_Str"";
      }
      if (!first.equals(cursor.next())) {
        navigationError=""String_Node_Str"";
      }
      boolean isLast=cursor.last();
      if (!isLast || !cursor.isLast()) {
        navigationError=""String_Node_Str"";
      }
      cursor.afterLast();
      if (!cursor.isAfterLast()) {
        navigationError=""String_Node_Str"";
      }
      Object last=cursor.previous();
      int size=cursor.size();
      cursor.relative(size);
      Object lastBySize=cursor.previous();
      if (!last.equals(lastBySize)) {
        navigationError=""String_Node_Str"";
      }
    }
 catch (    org.eclipse.persistence.exceptions.QueryException ex) {
      caughtException=ex;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","public void test(){
  ReadAllQuery query=new ReadAllQuery();
  if (configuration != null) {
    ExpressionBuilder emp=new ExpressionBuilder();
    Expression exp=emp.get(""String_Node_Str"").greaterThan(50000);
    query.setSelectionCriteria(exp);
    query.conformResultsInUnitOfWork();
  }
  ScrollableCursor cursor=null;
  try {
    query.setReferenceClass(Employee.class);
    if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
      query.useScrollableCursor(2);
    }
 else {
      ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
      if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
        policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
      }
      if (!CONCUR_UPDATABLE_isSupported) {
        policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
      }
      policy.setPageSize(2);
      query.useScrollableCursor(policy);
    }
    cursor=(ScrollableCursor)getSession().executeQuery(query);
    try {
      boolean isFirst=cursor.first();
      if (!cursor.isFirst() || !isFirst) {
        navigationError=""String_Node_Str"";
      }
      Object second=cursor.next();
      Object first=cursor.previous();
      if (first.equals(second)) {
        navigationError=""String_Node_Str"";
      }
      if (!second.equals(cursor.next())) {
        navigationError=""String_Node_Str"";
      }
      boolean isRelative=cursor.relative(1);
      if (!isRelative || !second.equals(cursor.previous())) {
        navigationError=""String_Node_Str"";
      }
      boolean isAbsolute=cursor.absolute(1);
      if (!second.equals(cursor.next())) {
        navigationError=""String_Node_Str"";
      }
      cursor.beforeFirst();
      if (!cursor.isBeforeFirst()) {
        navigationError=""String_Node_Str"";
      }
      if (!first.equals(cursor.next())) {
        navigationError=""String_Node_Str"";
      }
      boolean isLast=cursor.last();
      if (!isLast || !cursor.isLast()) {
        navigationError=""String_Node_Str"";
      }
      cursor.afterLast();
      if (!cursor.isAfterLast()) {
        navigationError=""String_Node_Str"";
      }
      Object last=cursor.previous();
      int size=cursor.size();
      cursor.relative(size);
      Object lastBySize=cursor.previous();
      if (!last.equals(lastBySize)) {
        navigationError=""String_Node_Str"";
      }
    }
 catch (    org.eclipse.persistence.exceptions.QueryException ex) {
      caughtException=ex;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}"
68404,"protected void setup(){
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (getSession().getPlatform().isMySQL()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  if (configuration != null) {
    configuration.setup(getSession());
    getExecutor().setSession(configuration.getUnitOfWork());
  }
}","protected void setup(){
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (getSession().getPlatform().isMySQL()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  TYPE_SCROLL_INSENSITIVE_isSupported=true;
  CONCUR_UPDATABLE_isSupported=true;
  if (getSession().getPlatform().isSQLServer()) {
    TYPE_SCROLL_INSENSITIVE_isSupported=false;
    CONCUR_UPDATABLE_isSupported=false;
  }
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  if (configuration != null) {
    configuration.setup(getSession());
    getExecutor().setSession(configuration.getUnitOfWork());
  }
}"
68405,"public void test(){
  ReadAllQuery query1=new ReadAllQuery();
  query1.setReferenceClass(Employee.class);
  Vector resultSet=null;
  ReadAllQuery query2=new ReadAllQuery();
  query2.setReferenceClass(Employee.class);
  query2.useScrollableCursor();
  ScrollableCursor cursor=null;
  resultSet=(Vector)getSession().executeQuery(query1);
  try {
    cursor=(ScrollableCursor)getSession().executeQuery(query2);
    size=cursor.size();
  }
 catch (  org.eclipse.persistence.exceptions.DatabaseException dbe) {
    caughtException=dbe;
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","public void test(){
  ReadAllQuery query1=new ReadAllQuery();
  query1.setReferenceClass(Employee.class);
  Vector resultSet=null;
  ReadAllQuery query2=new ReadAllQuery();
  query2.setReferenceClass(Employee.class);
  if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
    query2.useScrollableCursor();
  }
 else {
    ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
    if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
      policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
    }
    if (!CONCUR_UPDATABLE_isSupported) {
      policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
    }
    policy.setPageSize(10);
    query2.useScrollableCursor(policy);
  }
  ScrollableCursor cursor=null;
  resultSet=(Vector)getSession().executeQuery(query1);
  try {
    cursor=(ScrollableCursor)getSession().executeQuery(query2);
    size=cursor.size();
  }
 catch (  org.eclipse.persistence.exceptions.DatabaseException dbe) {
    caughtException=dbe;
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}"
68406,"protected void setup(){
  this.origionalBindingState=this.getSession().getPlatform().shouldBindAllParameters();
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  this.origionalStatementCachingState=this.getSession().getPlatform().shouldCacheAllStatements();
  this.getSession().getPlatform().setShouldBindAllParameters(true);
  this.getSession().getPlatform().setShouldCacheAllStatements(true);
}","protected void setup(){
  this.origionalBindingState=this.getSession().getPlatform().shouldBindAllParameters();
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isTimesTen()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  TYPE_SCROLL_INSENSITIVE_isSupported=true;
  CONCUR_UPDATABLE_isSupported=true;
  if (getSession().getPlatform().isSQLServer()) {
    TYPE_SCROLL_INSENSITIVE_isSupported=false;
    CONCUR_UPDATABLE_isSupported=false;
  }
  this.origionalStatementCachingState=this.getSession().getPlatform().shouldCacheAllStatements();
  this.getSession().getPlatform().setShouldBindAllParameters(true);
  this.getSession().getPlatform().setShouldCacheAllStatements(true);
}"
68407,"public void testQueryTimeoutReset(Session session){
  boolean query1TimedOut=false;
  boolean query2TimedOut=false;
  String sql;
  if (getSession().getLogin().getDatasourcePlatform().isDB2() || getSession().getLogin().getDatasourcePlatform().isMySQL()) {
    sql=""String_Node_Str"";
  }
 else   if (getSession().getLogin().getDatasourcePlatform().isSybase()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    query.setQueryTimeout(1);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query1TimedOut=true;
    }
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query2TimedOut=true;
    }
  }
  if (query2TimedOut == true) {
    throw new TestErrorException(""String_Node_Str"");
  }
}","public void testQueryTimeoutReset(Session session){
  boolean query1TimedOut=false;
  boolean query2TimedOut=false;
  String sql;
  if (getSession().getLogin().getDatasourcePlatform().isDB2() || getSession().getLogin().getDatasourcePlatform().isMySQL()) {
    sql=""String_Node_Str"";
  }
 else   if (getSession().getLogin().getDatasourcePlatform().isSybase() || getSession().getLogin().getDatasourcePlatform().isSQLServer()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    query.setQueryTimeout(1);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query1TimedOut=true;
    }
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query2TimedOut=true;
    }
  }
  if (query2TimedOut == true) {
    throw new TestErrorException(""String_Node_Str"");
  }
}"
68408,"public void setup(){
  getDatabaseSession().getLogin().cacheAllStatements();
  getDatabaseSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  UnitOfWork uow=getDatabaseSession().acquireUnitOfWork();
  employeesCreated=new ArrayList(10);
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(190),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(191),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(192),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(193),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(194),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(195),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(196),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(197),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(198),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(199),""String_Node_Str""));
  uow.registerAllObjects(employeesCreated);
  uow.commit();
}","public void setup(){
  TYPE_SCROLL_INSENSITIVE_isSupported=true;
  CONCUR_UPDATABLE_isSupported=true;
  if (getSession().getPlatform().isSQLServer()) {
    TYPE_SCROLL_INSENSITIVE_isSupported=false;
    CONCUR_UPDATABLE_isSupported=false;
  }
  getDatabaseSession().getLogin().cacheAllStatements();
  getDatabaseSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  UnitOfWork uow=getDatabaseSession().acquireUnitOfWork();
  employeesCreated=new ArrayList(10);
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(190),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(191),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(192),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(193),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(194),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(195),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(196),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(197),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(198),""String_Node_Str""));
  employeesCreated.add(new QueryOptionEmployee(new BigDecimal(199),""String_Node_Str""));
  uow.registerAllObjects(employeesCreated);
  uow.commit();
}"
68409,"public void testResultSetFetchSizeReset(Session session){
  ReadAllQuery query=new ReadAllQuery(QueryOptionEmployee.class);
  query.useScrollableCursor();
  String sql=""String_Node_Str"";
  int fetchSize=100;
  query.setSQLString(sql);
  query.setFetchSize(fetchSize);
  org.eclipse.persistence.internal.sessions.DatabaseSessionImpl impl=(org.eclipse.persistence.internal.sessions.DatabaseSessionImpl)session;
  DatabaseAccessor accessor=(DatabaseAccessor)impl.getAccessor();
  Hashtable statementCache=null;
  try {
    Method method=PrivilegedAccessHelper.getDeclaredMethod(DatabaseAccessor.class,""String_Node_Str"",new Class[]{});
    method.setAccessible(true);
    statementCache=(Hashtable)method.invoke(accessor,new Object[]{});
  }
 catch (  Exception nsme) {
    throwError(""String_Node_Str"",nsme);
  }
  int previousFetchSize=0;
  Statement statement=(Statement)statementCache.get(sql);
  if (statement != null) {
    try {
      previousFetchSize=statement.getFetchSize();
    }
 catch (    SQLException sqle) {
      throwError(""String_Node_Str"",sqle);
    }
  }
  ScrollableCursor cursor=(ScrollableCursor)session.executeQuery(query);
  List employees=new ArrayList();
  while (cursor.hasNext()) {
    employees.add(cursor.next());
  }
  cursor.close();
  int postQueryFetchSize=0;
  statement=(Statement)statementCache.get(sql);
  if (statement != null) {
    try {
      postQueryFetchSize=statement.getFetchSize();
    }
 catch (    SQLException sqle) {
      throwError(""String_Node_Str"",sqle);
    }
  }
  if (postQueryFetchSize == fetchSize) {
    throwError(""String_Node_Str"");
  }
}","public void testResultSetFetchSizeReset(Session session){
  ReadAllQuery query=new ReadAllQuery(QueryOptionEmployee.class);
  if (TYPE_SCROLL_INSENSITIVE_isSupported && CONCUR_UPDATABLE_isSupported) {
    query.useScrollableCursor(2);
  }
 else {
    ScrollableCursorPolicy policy=new ScrollableCursorPolicy();
    if (!TYPE_SCROLL_INSENSITIVE_isSupported) {
      policy.setResultSetType(ScrollableCursorPolicy.TYPE_SCROLL_SENSITIVE);
    }
    if (!CONCUR_UPDATABLE_isSupported) {
      policy.setResultSetConcurrency(ScrollableCursorPolicy.CONCUR_READ_ONLY);
    }
    policy.setPageSize(10);
    query.useScrollableCursor(policy);
  }
  String sql=""String_Node_Str"";
  int fetchSize=100;
  query.setSQLString(sql);
  query.setFetchSize(fetchSize);
  org.eclipse.persistence.internal.sessions.DatabaseSessionImpl impl=(org.eclipse.persistence.internal.sessions.DatabaseSessionImpl)session;
  DatabaseAccessor accessor=(DatabaseAccessor)impl.getAccessor();
  Hashtable statementCache=null;
  try {
    Method method=PrivilegedAccessHelper.getDeclaredMethod(DatabaseAccessor.class,""String_Node_Str"",new Class[]{});
    method.setAccessible(true);
    statementCache=(Hashtable)method.invoke(accessor,new Object[]{});
  }
 catch (  Exception nsme) {
    throwError(""String_Node_Str"",nsme);
  }
  int previousFetchSize=0;
  Statement statement=(Statement)statementCache.get(sql);
  if (statement != null) {
    try {
      previousFetchSize=statement.getFetchSize();
    }
 catch (    SQLException sqle) {
      throwError(""String_Node_Str"",sqle);
    }
  }
  ScrollableCursor cursor=(ScrollableCursor)session.executeQuery(query);
  List employees=new ArrayList();
  while (cursor.hasNext()) {
    employees.add(cursor.next());
  }
  cursor.close();
  int postQueryFetchSize=0;
  statement=(Statement)statementCache.get(sql);
  if (statement != null) {
    try {
      postQueryFetchSize=statement.getFetchSize();
    }
 catch (    SQLException sqle) {
      throwError(""String_Node_Str"",sqle);
    }
  }
  if (postQueryFetchSize == fetchSize) {
    throwError(""String_Node_Str"");
  }
}"
68410,"protected void reloadInternal(XSObject schemaObject){
  super.reloadInternal(schemaObject);
  if (schemaObject != null) {
    this.minOccurs=((XSParticleDecl)schemaObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)schemaObject).getMaxOccurs();
  }
 else {
    this.minOccurs=0;
    this.maxOccurs=0;
  }
}","protected void reloadInternal(XSObject schemaObject){
  super.reloadInternal(schemaObject);
  if (schemaObject != null) {
    this.minOccurs=((XSParticleDecl)schemaObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)schemaObject).getMaxOccurs();
    if (((XSParticleDecl)schemaObject).getMaxOccursUnbounded()) {
      this.maxOccurs=MWXmlSchema.INFINITY;
    }
  }
 else {
    this.minOccurs=0;
    this.maxOccurs=0;
  }
}"
68411,"protected void reloadInternal(XSObject xsObject){
  XSElementDecl elemenDecl=null;
  if (xsObject instanceof XSParticleDecl) {
    elemenDecl=(XSElementDecl)((XSParticleDecl)xsObject).getTerm();
    super.reloadInternal(elemenDecl);
  }
 else {
    elemenDecl=(XSElementDecl)xsObject;
    super.reloadInternal(xsObject);
  }
  this.reloadType(elemenDecl);
  this.reloadNillable(elemenDecl);
  if (elemenDecl.getConstraintType() != XSConstants.VC_NONE) {
    if (elemenDecl.getConstraintType() == XSConstants.VC_DEFAULT) {
      this.defaultValue=elemenDecl.getConstraintValue();
    }
 else     if (elemenDecl.getConstraintType() == XSConstants.VC_FIXED) {
      this.fixedValue=elemenDecl.getConstraintValue();
    }
  }
  this.abstractFlag=elemenDecl.getAbstract();
  if (xsObject instanceof XSParticleDecl) {
    this.minOccurs=((XSParticleDecl)xsObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)xsObject).getMaxOccurs();
  }
  this.reloadSubstitutionGroup(elemenDecl);
  this.reloadIdentityConstraints(elemenDecl);
}","protected void reloadInternal(XSObject xsObject){
  XSElementDecl elemenDecl=null;
  if (xsObject instanceof XSParticleDecl) {
    elemenDecl=(XSElementDecl)((XSParticleDecl)xsObject).getTerm();
    super.reloadInternal(elemenDecl);
  }
 else {
    elemenDecl=(XSElementDecl)xsObject;
    super.reloadInternal(xsObject);
  }
  this.reloadType(elemenDecl);
  this.reloadNillable(elemenDecl);
  if (elemenDecl.getConstraintType() != XSConstants.VC_NONE) {
    if (elemenDecl.getConstraintType() == XSConstants.VC_DEFAULT) {
      this.defaultValue=elemenDecl.getConstraintValue();
    }
 else     if (elemenDecl.getConstraintType() == XSConstants.VC_FIXED) {
      this.fixedValue=elemenDecl.getConstraintValue();
    }
  }
  this.abstractFlag=elemenDecl.getAbstract();
  if (xsObject instanceof XSParticleDecl) {
    this.minOccurs=((XSParticleDecl)xsObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)xsObject).getMaxOccurs();
    if (((XSParticleDecl)xsObject).getMaxOccursUnbounded()) {
      this.maxOccurs=MWXmlSchema.INFINITY;
    }
  }
  this.reloadSubstitutionGroup(elemenDecl);
  this.reloadIdentityConstraints(elemenDecl);
}"
68412,"@Override protected void reloadInternal(XSObject schemaObject){
  super.reloadInternal(schemaObject);
  if (schemaObject instanceof XSParticleDecl) {
    this.minOccurs=((XSParticleDecl)schemaObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)schemaObject).getMaxOccurs();
  }
}","@Override protected void reloadInternal(XSObject schemaObject){
  super.reloadInternal(schemaObject);
  if (schemaObject instanceof XSParticleDecl) {
    this.minOccurs=((XSParticleDecl)schemaObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)schemaObject).getMaxOccurs();
    if (((XSParticleDecl)schemaObject).getMaxOccursUnbounded()) {
      this.maxOccurs=MWXmlSchema.INFINITY;
    }
  }
}"
68413,"protected String getValueFromComponent(){
  int maxOccurs=((MWParticle)this.component).getMaxOccurs();
  return (maxOccurs == -1) ? ""String_Node_Str"" : String.valueOf(maxOccurs);
}","protected String getValueFromComponent(){
  int maxOccurs=((MWParticle)this.component).getMaxOccurs();
  return (maxOccurs == MWXmlSchema.INFINITY) ? ""String_Node_Str"" : String.valueOf(maxOccurs);
}"
68414,"SchemaComponentDetail buildMaxOccursDetail(){
  return new SchemaComponentDetail(this.getComponent()){
    protected String getName(){
      return ""String_Node_Str"";
    }
    protected String getValueFromComponent(){
      int maxOccurs=((MWParticle)this.component).getMaxOccurs();
      return (maxOccurs == -1) ? ""String_Node_Str"" : String.valueOf(maxOccurs);
    }
  }
;
}","SchemaComponentDetail buildMaxOccursDetail(){
  return new SchemaComponentDetail(this.getComponent()){
    protected String getName(){
      return ""String_Node_Str"";
    }
    protected String getValueFromComponent(){
      int maxOccurs=((MWParticle)this.component).getMaxOccurs();
      return (maxOccurs == MWXmlSchema.INFINITY) ? ""String_Node_Str"" : String.valueOf(maxOccurs);
    }
  }
;
}"
68415,"public void reset(){
  getAbstractSession().rollbackTransaction();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}","public void reset(){
  if (getAbstractSession().isInTransaction()) {
    getAbstractSession().rollbackTransaction();
  }
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  if (listener != null) {
    getAbstractSession().getParent().getEventManager().removeListener(listener);
    listener=null;
  }
}"
68416,"public void setup(){
  getAbstractSession().beginTransaction();
}","public void setup(){
  if (getSession().getPlatform().isSybase() && getSession().isClientSession()) {
    if (SybaseTransactionIsolationListener.isDatabaseVersionSupported((ServerSession)getAbstractSession().getParent())) {
      listener=new SybaseTransactionIsolationListener();
      getAbstractSession().getParent().getEventManager().addListener(listener);
    }
 else {
      throw new TestWarningException(""String_Node_Str"" + SybaseTransactionIsolationListener.requiredVersion + ""String_Node_Str"");
    }
  }
  getAbstractSession().beginTransaction();
}"
68417,"protected void setup(){
  super.setup();
  this.firstUnitOfWork=getSession().acquireUnitOfWork();
  this.firstUnitOfWorkWorkingCopy=this.firstUnitOfWork.registerObject(this.objectToBeWritten);
  changeFirstUnitOfWorkWorkingCopy();
  if (!compareObjects(this.originalObject,this.objectToBeWritten)) {
    throw new TestErrorException(""String_Node_Str"");
  }
  this.secondUnitOfWork=getSession().acquireUnitOfWork();
  this.secondUnitOfWorkWorkingCopy=this.secondUnitOfWork.registerObject(this.objectToBeWritten);
  changeSecondUnitOfWorkWorkingCopy();
  if (!getAbstractSession().compareObjectsDontMatch(this.firstUnitOfWorkWorkingCopy,this.secondUnitOfWorkWorkingCopy)) {
    throw new TestErrorException(""String_Node_Str"");
  }
}","protected void setup(){
  if (getSession().getPlatform().isSybase() && getSession().isClientSession()) {
    if (SybaseTransactionIsolationListener.isDatabaseVersionSupported((ServerSession)getAbstractSession().getParent())) {
      listener=new SybaseTransactionIsolationListener();
      getAbstractSession().getParent().getEventManager().addListener(listener);
    }
 else {
      throw new TestWarningException(""String_Node_Str"" + SybaseTransactionIsolationListener.requiredVersion + ""String_Node_Str"");
    }
  }
  super.setup();
  this.firstUnitOfWork=getSession().acquireUnitOfWork();
  this.firstUnitOfWorkWorkingCopy=this.firstUnitOfWork.registerObject(this.objectToBeWritten);
  changeFirstUnitOfWorkWorkingCopy();
  if (!compareObjects(this.originalObject,this.objectToBeWritten)) {
    throw new TestErrorException(""String_Node_Str"");
  }
  this.secondUnitOfWork=getSession().acquireUnitOfWork();
  this.secondUnitOfWorkWorkingCopy=this.secondUnitOfWork.registerObject(this.objectToBeWritten);
  changeSecondUnitOfWorkWorkingCopy();
  if (!getAbstractSession().compareObjectsDontMatch(this.firstUnitOfWorkWorkingCopy,this.secondUnitOfWorkWorkingCopy)) {
    throw new TestErrorException(""String_Node_Str"");
  }
}"
68418,"public void setup(){
  super.setup();
  existenceCheck=getSession().getDescriptor(Employee.class).getQueryManager().getExistenceCheck();
  if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
    throw new TestWarningException(""String_Node_Str"");
  }
}","public void setup(){
  if (getSession().getPlatform().isSybase() && getSession().isClientSession()) {
    if (SybaseTransactionIsolationListener.isDatabaseVersionSupported((ServerSession)getAbstractSession().getParent())) {
      listener=new SybaseTransactionIsolationListener();
      getAbstractSession().getParent().getEventManager().addListener(listener);
    }
 else {
      existenceCheck=getSession().getDescriptor(Employee.class).getQueryManager().getExistenceCheck();
      throw new TestWarningException(""String_Node_Str"" + SybaseTransactionIsolationListener.requiredVersion + ""String_Node_Str"");
    }
  }
  super.setup();
  existenceCheck=getSession().getDescriptor(Employee.class).getQueryManager().getExistenceCheck();
  if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
    throw new TestWarningException(""String_Node_Str"");
  }
}"
68419,"public void reset(){
  super.reset();
  getSession().getDescriptor(Employee.class).setExistenceChecking(this.existenceCheck);
}","public void reset(){
  super.reset();
  getSession().getDescriptor(Employee.class).setExistenceChecking(this.existenceCheck);
  if (listener != null) {
    getAbstractSession().getParent().getEventManager().removeListener(listener);
    listener=null;
  }
}"
68420,"public void setup(){
  getAbstractSession().beginTransaction();
  uow1=getSession().acquireUnitOfWork();
  uow2=getSession().acquireUnitOfWork();
  Expression exp=new ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str"");
  dbEmployee1=(Employee)uow1.readObject(Employee.class,exp);
  dbEmployee2=(Employee)uow2.readObject(Employee.class,exp);
  dbEmployee1.getAddress().setCity(""String_Node_Str"");
}","public void setup(){
  if (getSession().getPlatform().isSybase() && getSession().isClientSession()) {
    if (SybaseTransactionIsolationListener.isDatabaseVersionSupported((ServerSession)getAbstractSession().getParent())) {
      listener=new SybaseTransactionIsolationListener();
      getAbstractSession().getParent().getEventManager().addListener(listener);
    }
 else {
      throw new TestWarningException(""String_Node_Str"" + SybaseTransactionIsolationListener.requiredVersion + ""String_Node_Str"");
    }
  }
  getAbstractSession().beginTransaction();
  uow1=getSession().acquireUnitOfWork();
  uow2=getSession().acquireUnitOfWork();
  Expression exp=new ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str"");
  dbEmployee1=(Employee)uow1.readObject(Employee.class,exp);
  dbEmployee2=(Employee)uow2.readObject(Employee.class,exp);
  dbEmployee1.getAddress().setCity(""String_Node_Str"");
}"
68421,"public void reset(){
  getAbstractSession().rollbackTransaction();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}","public void reset(){
  if (getAbstractSession().isInTransaction()) {
    getAbstractSession().rollbackTransaction();
  }
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  if (listener != null) {
    getAbstractSession().getParent().getEventManager().removeListener(listener);
    listener=null;
  }
}"
68422,"public MWElementDeclaration nestedElement(String namespaceUrl,String elementName){
  for (Iterator stream=this.particles(); stream.hasNext(); ) {
    MWParticle particle=(MWParticle)stream.next();
    MWElementDeclaration element;
    if (particle instanceof MWElementDeclaration) {
      element=(MWElementDeclaration)particle;
      if (StringTools.stringsAreEqual(namespaceUrl,element.getNamespaceUrl()) && elementName.equals(element.getName())) {
        return element;
      }
    }
 else {
      element=particle.nestedElement(namespaceUrl,elementName);
      if (element != null) {
        return element;
      }
    }
  }
  return null;
}","public MWElementDeclaration nestedElement(String namespaceUrl,String elementName){
  for (Iterator stream=this.particles(); stream.hasNext(); ) {
    MWParticle particle=(MWParticle)stream.next();
    MWElementDeclaration element;
    if (particle instanceof MWElementDeclaration) {
      element=(MWElementDeclaration)particle;
      if (elementName.equals(element.getName())) {
        return element;
      }
    }
 else {
      element=particle.nestedElement(namespaceUrl,elementName);
      if (element != null) {
        return element;
      }
    }
  }
  return null;
}"
68423,"public NamespaceResolver runtimeNamespaceResolver(){
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  for (Iterator stream=this.namespaces(); stream.hasNext(); ) {
    MWNamespace namespace=(MWNamespace)stream.next();
    if (namespace.isDeclared() && !""String_Node_Str"".equals(namespace.getNamespacePrefix())) {
      namespaceResolver.put(namespace.getNamespacePrefix(),namespace.getNamespaceUrl());
    }
  }
  return namespaceResolver;
}","public NamespaceResolver runtimeNamespaceResolver(){
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  for (Iterator stream=this.namespaces(); stream.hasNext(); ) {
    MWNamespace namespace=(MWNamespace)stream.next();
    if (namespace.isDeclared() && !""String_Node_Str"".equals(namespace.getNamespacePrefix())) {
      namespaceResolver.put(namespace.getNamespacePrefix(),namespace.getNamespaceUrl());
    }
  }
  if (this.shouldUseDefaultNamespace() && !""String_Node_Str"".equals(this.getDefaultNamespaceUrl())) {
    namespaceResolver.setDefaultNamespaceURI(this.getDefaultNamespaceUrl());
  }
  return namespaceResolver;
}"
68424,"private void checkRequiredNamespacePrefix(List currentProblems){
  for (Iterator stream=this.namespaces(); stream.hasNext(); ) {
    MWNamespace namespace=(MWNamespace)stream.next();
    if (!""String_Node_Str"".equals(namespace.getNamespaceUrl()) && ""String_Node_Str"".equals(namespace.getNamespacePrefix())) {
      currentProblems.add(this.buildProblem(ProblemConstants.SCHEMA_NAMESPACE_PREFIX_NOT_SPECIFIED,namespace.getNamespaceUrlForDisplay()));
    }
  }
}","private void checkRequiredNamespacePrefix(List currentProblems){
  for (Iterator stream=this.namespaces(); stream.hasNext(); ) {
    MWNamespace namespace=(MWNamespace)stream.next();
    if (!""String_Node_Str"".equals(namespace.getNamespaceUrl()) && ""String_Node_Str"".equals(namespace.getNamespacePrefix()) && !namespace.getNamespaceUrl().equals(this.defaultNamespaceUrl)) {
      currentProblems.add(this.buildProblem(ProblemConstants.SCHEMA_NAMESPACE_PREFIX_NOT_SPECIFIED,namespace.getNamespaceUrlForDisplay()));
    }
  }
}"
68425,"public void setTargetNamespaceUrl(String newTargetNamespaceUrl){
  this.targetNamespaceUrl=newTargetNamespaceUrl;
}","public void setTargetNamespaceUrl(String newTargetNamespaceUrl){
  this.targetNamespaceUrl=newTargetNamespaceUrl;
  if (""String_Node_Str"".equals(this.defaultNamespaceUrl)) {
    this.defaultNamespaceUrl=this.targetNamespaceUrl;
  }
}"
68426,"private String namespacePrefix(){
  if (this.namespace != null && !""String_Node_Str"".equals(this.namespace.getNamespacePrefix())) {
    return this.namespace.getNamespacePrefix() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","private String namespacePrefix(){
  if (this.namespace != null && !""String_Node_Str"".equals(this.namespace.getNamespacePrefix()) && !this.namespace.getSchema().getDefaultNamespaceUrl().equals(this.namespace.getNamespaceUrl())) {
    return this.namespace.getNamespacePrefix() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}"
68427,"protected Component buildPage(){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel page=new JPanel(new GridBagLayout());
  page.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JComponent schemaSourceWidgets=this.buildSchemaSourcePanel();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,0,0,0);
  page.add(schemaSourceWidgets,constraints);
  addHelpTopicId(schemaSourceWidgets,""String_Node_Str"");
  JComponent schemaNamespacesWidgets=this.buildSchemaNamespacesPanel();
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.insets=new Insets(5,0,0,0);
  page.add(schemaNamespacesWidgets,constraints);
  addHelpTopicId(schemaNamespacesWidgets,""String_Node_Str"");
  addHelpTopicId(page,""String_Node_Str"");
  return page;
}","protected Component buildPage(){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel page=new JPanel(new GridBagLayout());
  page.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JComponent schemaSourceWidgets=this.buildSchemaSourcePanel();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,0,0,0);
  page.add(schemaSourceWidgets,constraints);
  addHelpTopicId(schemaSourceWidgets,""String_Node_Str"");
  JCheckBox defaultNamespaceCheckBox=buildCheckBox(""String_Node_Str"",buildDefaultNamespaceCheckBoxAdapter());
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.insets=new Insets(5,0,0,0);
  page.add(defaultNamespaceCheckBox,constraints);
  addAlignLeft(defaultNamespaceCheckBox);
  JTextField defaultNamespaceUrlTextField=new JTextField();
  defaultNamespaceUrlTextField.setDocument(buildDefaultNamspaceUrlDocument(buildDefaultNamespaceUrlHolder()));
  defaultNamespaceUrlTextField.setEnabled(defaultNamespaceCheckBox.isSelected());
  constraints.gridx=1;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.insets=new Insets(5,5,0,0);
  page.add(defaultNamespaceUrlTextField,constraints);
  addAlignRight(defaultNamespaceUrlTextField);
  defaultNamespaceCheckBox.addItemListener(buildDefaultNamspaceUrlEnabler(defaultNamespaceUrlTextField));
  JComponent schemaNamespacesWidgets=this.buildSchemaNamespacesPanel();
  constraints.gridx=0;
  constraints.gridy=2;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.PAGE_START;
  constraints.insets=new Insets(5,0,0,0);
  page.add(schemaNamespacesWidgets,constraints);
  addHelpTopicId(schemaNamespacesWidgets,""String_Node_Str"");
  addHelpTopicId(page,""String_Node_Str"");
  return page;
}"
68428,"protected Object getValueFromSubject(){
  ResourceSpecification schemaSource=((MWXmlSchema)this.subject).getSchemaSource();
  if (schemaSource == null) {
    return null;
  }
  String key=schemaSource.getSourceKey() + ""String_Node_Str"";
  return SchemaDocumentInfoPanel.this.resourceRepository().getString(key,schemaSource.getLocation());
}","protected Object getValueFromSubject(){
  return ((MWXmlSchema)this.subject).getDefaultNamespaceUrl();
}"
68429,"/** 
 * Given the source schema and namespace and schemaLocation values from an import or include return the referenced Schema.
 * @param sourceXSD The Source object of the source schema
 * @param namespace The namespace portion of the import/include
 * @param schemaLocation The schemaLocation portion of the import/include
 * @return Source for the referenced Schema or null if processing the referencedschema should be skipped
 */
public Source resolveSchema(Source sourceXSD,String namespace,String schemaLocation){
  try {
    URL schemaUrl=null;
    if (getBaseSchemaLocation() != null) {
      schemaUrl=new URI(getBaseSchemaLocation()).resolve(schemaLocation).toURL();
    }
 else {
      schemaUrl=new URL(schemaLocation);
    }
    return new StreamSource(schemaUrl.toExternalForm());
  }
 catch (  Exception e) {
    AbstractSessionLog.getLog().log(AbstractSessionLog.WARNING,""String_Node_Str"",new Object[]{e.getClass().getName(),namespace,schemaLocation});
    AbstractSessionLog.getLog().logThrowable(AbstractSessionLog.FINEST,e);
  }
  return null;
}","/** 
 * Given the source schema and namespace and schemaLocation values from an import or include return the referenced Schema.
 * @param sourceXSD The Source object of the source schema
 * @param namespace The namespace portion of the import/include
 * @param schemaLocation The schemaLocation portion of the import/include
 * @return Source for the referenced Schema or null if processing the referencedschema should be skipped
 */
public Source resolveSchema(Source sourceXSD,String namespace,String schemaLocation){
  try {
    URL schemaUrl=null;
    String baseLoc=getBaseSchemaLocation();
    if (baseLoc == null) {
      schemaUrl=new URI(schemaLocation).toURL();
    }
 else {
      URI schemaUri=new URI(schemaLocation);
      if (schemaUri.isAbsolute()) {
        schemaUrl=schemaUri.toURL();
      }
 else {
        URI baseUri=new URI(baseLoc);
        if (baseUri.isOpaque() && baseUri.getScheme().equals(""String_Node_Str"")) {
          schemaUrl=new URI(baseLoc.substring(0,baseLoc.lastIndexOf(""String_Node_Str"") + 1) + schemaLocation).toURL();
        }
 else {
          schemaUrl=new URI(baseLoc).resolve(schemaUri).toURL();
        }
      }
    }
    return new StreamSource(schemaUrl.toExternalForm());
  }
 catch (  Exception e) {
    AbstractSessionLog.getLog().log(AbstractSessionLog.WARNING,""String_Node_Str"",new Object[]{e.getClass().getName(),namespace,schemaLocation});
    AbstractSessionLog.getLog().logThrowable(AbstractSessionLog.FINEST,e);
  }
  return null;
}"
68430,"public void marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)session.getDescriptor(value);
  TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(value);
  }
  getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
  if ((xmlCompositeCollectionMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
    addTypeAttributeIfNeeded(descriptor,xmlCompositeCollectionMapping,marshalRecord);
  }
  List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
  writeExtraNamespaces(extraNamespaces,marshalRecord,session);
  objectBuilder.buildRow(marshalRecord,value,session,marshaller);
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(value);
  }
}","public void marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
    return;
  }
  XMLDescriptor descriptor=(XMLDescriptor)session.getDescriptor(value);
  TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(value);
  }
  getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
  if ((xmlCompositeCollectionMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
    addTypeAttributeIfNeeded(descriptor,xmlCompositeCollectionMapping,marshalRecord);
  }
  List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
  writeExtraNamespaces(extraNamespaces,marshalRecord,session);
  objectBuilder.buildRow(marshalRecord,value,session,marshaller);
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(value);
  }
}"
68431,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}"
68432,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(unmarshalRecord,atts,xmlCompositeCollectionMapping);
    }
    XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
    if (xmlFld.hasLastXPathFragment()) {
      unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
    }
    processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(unmarshalRecord,atts,xmlCompositeCollectionMapping);
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
68433,"public int getIndex(String uri,String localName){
  Attr item;
  for (int i=0; i < attrs.size(); i++) {
    item=attrs.get(i);
    if (item.getNamespaceURI().equals(uri) && item.getLocalName().equals(localName)) {
      return i;
    }
  }
  return -1;
}","public int getIndex(String uri,String localName){
  Attr item;
  for (int i=0; i < attrs.size(); i++) {
    item=attrs.get(i);
    try {
      if (item.getNamespaceURI().equals(uri) && item.getLocalName().equals(localName)) {
        return i;
      }
    }
 catch (    Exception x) {
    }
  }
  return -1;
}"
68434,"public XMLCompositeCollectionMapping(){
  super();
}","public XMLCompositeCollectionMapping(){
  super();
  nullPolicy=new NullPolicy();
}"
68435,"TargetDatabaseProp(){
  super(PersistenceUnitProperties.TARGET_DATABASE,TargetDatabase.DEFAULT);
  this.shouldReturnOriginalValueIfValueToApplyNotFound=true;
  String pcg=""String_Node_Str"";
  valueArray=new Object[][]{{TargetDatabase.Auto,pcg + ""String_Node_Str""},{TargetDatabase.Oracle,pcg + ""String_Node_Str""},{TargetDatabase.Oracle8,pcg + ""String_Node_Str""},{TargetDatabase.Oracle9,pcg + ""String_Node_Str""},{TargetDatabase.Oracle10,pcg + ""String_Node_Str""},{TargetDatabase.Oracle11,pcg + ""String_Node_Str""},{TargetDatabase.Attunity,pcg + ""String_Node_Str""},{TargetDatabase.Cloudscape,pcg + ""String_Node_Str""},{TargetDatabase.Database,pcg + ""String_Node_Str""},{TargetDatabase.DB2Mainframe,pcg + ""String_Node_Str""},{TargetDatabase.DB2,pcg + ""String_Node_Str""},{TargetDatabase.DBase,pcg + ""String_Node_Str""},{TargetDatabase.Derby,pcg + ""String_Node_Str""},{TargetDatabase.HSQL,pcg + ""String_Node_Str""},{TargetDatabase.Informix,pcg + ""String_Node_Str""},{TargetDatabase.JavaDB,pcg + ""String_Node_Str""},{TargetDatabase.MySQL,pcg + ""String_Node_Str""},{TargetDatabase.MySQL4,pcg + ""String_Node_Str""},{TargetDatabase.PointBase,pcg + ""String_Node_Str""},{TargetDatabase.PostgreSQL,pcg + ""String_Node_Str""},{TargetDatabase.SQLAnyWhere,pcg + ""String_Node_Str""},{TargetDatabase.SQLServer,pcg + ""String_Node_Str""},{TargetDatabase.Sybase,pcg + ""String_Node_Str""},{TargetDatabase.TimesTen,pcg + ""String_Node_Str""}};
}","TargetDatabaseProp(){
  super(PersistenceUnitProperties.TARGET_DATABASE,TargetDatabase.DEFAULT);
  this.shouldReturnOriginalValueIfValueToApplyNotFound=true;
  String pcg=""String_Node_Str"";
  valueArray=new Object[][]{{TargetDatabase.Auto,pcg + ""String_Node_Str""},{TargetDatabase.Oracle,pcg + ""String_Node_Str""},{TargetDatabase.Oracle8,pcg + ""String_Node_Str""},{TargetDatabase.Oracle9,pcg + ""String_Node_Str""},{TargetDatabase.Oracle10,pcg + ""String_Node_Str""},{TargetDatabase.Oracle11,pcg + ""String_Node_Str""},{TargetDatabase.Attunity,pcg + ""String_Node_Str""},{TargetDatabase.Cloudscape,pcg + ""String_Node_Str""},{TargetDatabase.Database,pcg + ""String_Node_Str""},{TargetDatabase.DB2Mainframe,pcg + ""String_Node_Str""},{TargetDatabase.DB2,pcg + ""String_Node_Str""},{TargetDatabase.DBase,pcg + ""String_Node_Str""},{TargetDatabase.Derby,pcg + ""String_Node_Str""},{TargetDatabase.HSQL,pcg + ""String_Node_Str""},{TargetDatabase.Informix,pcg + ""String_Node_Str""},{TargetDatabase.JavaDB,pcg + ""String_Node_Str""},{TargetDatabase.MySQL,pcg + ""String_Node_Str""},{TargetDatabase.MySQL4,pcg + ""String_Node_Str""},{TargetDatabase.PointBase,pcg + ""String_Node_Str""},{TargetDatabase.PostgreSQL,pcg + ""String_Node_Str""},{TargetDatabase.SQLAnywhere,pcg + ""String_Node_Str""},{TargetDatabase.SQLServer,pcg + ""String_Node_Str""},{TargetDatabase.Sybase,pcg + ""String_Node_Str""},{TargetDatabase.TimesTen,pcg + ""String_Node_Str""}};
}"
68436,"public Object convertDataValueToObjectValue(Object fieldValue,Session session){
  Object result=platformList.get(fieldValue);
  if (result != null) {
    fieldValue=result;
  }
  Object attributeValue=null;
  if (fieldValue != null) {
    Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
        }
 catch (        PrivilegedActionException exception) {
          throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
        }
      }
 else {
        attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
      }
    }
 catch (    Exception exception) {
      throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
    }
  }
  return attributeValue;
}","public Object convertDataValueToObjectValue(Object fieldValue,Session session){
  if (fieldValue == null) {
    return null;
  }
  if (((String)fieldValue).startsWith(oldPrefix)) {
    fieldValue=((String)fieldValue).replaceFirst(oldPrefix,newPrefix);
  }
  Object result=platformList.get(fieldValue);
  if (result != null) {
    fieldValue=result;
  }
  Object attributeValue;
  Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
      }
 catch (      PrivilegedActionException exception) {
        throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
      }
    }
 else {
      attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
    }
  }
 catch (  Exception exception) {
    throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
  }
  return attributeValue;
}"
68437,"public void initialize(DatabaseMapping mapping,Session session){
  this.platformList=new HashMap();
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.mapping=mapping;
  if (this.mapping.isDirectToFieldMapping()) {
    AbstractDirectMapping directMapping=(AbstractDirectMapping)this.mapping;
    if (directMapping.getFieldClassification() == null) {
      directMapping.setFieldClassification(ClassConstants.STRING);
    }
  }
}","public void initialize(DatabaseMapping mapping,Session session){
  this.platformList=new HashMap();
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.mapping=mapping;
  if (this.mapping.isDirectToFieldMapping()) {
    AbstractDirectMapping directMapping=(AbstractDirectMapping)this.mapping;
    if (directMapping.getFieldClassification() == null) {
      directMapping.setFieldClassification(ClassConstants.STRING);
    }
  }
}"
68438,"public ClassDescriptor buildDatasourceLoginDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatasourceLogin.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(EISLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLDirectMapping platformMapping=new XMLDirectMapping();
  platformMapping.setAttributeName(""String_Node_Str"");
  platformMapping.setGetMethodName(""String_Node_Str"");
  platformMapping.setSetMethodName(""String_Node_Str"");
  platformMapping.setConverter(new Converter(){
    protected DatabaseMapping mapping;
    private Map platformList;
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      if (objectValue == null) {
        return null;
      }
      return objectValue.getClass().getName();
    }
    public Object convertDataValueToObjectValue(    Object fieldValue,    Session session){
      Object result=platformList.get(fieldValue);
      if (result != null) {
        fieldValue=result;
      }
      Object attributeValue=null;
      if (fieldValue != null) {
        Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
        try {
          if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
            try {
              attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
            }
 catch (            PrivilegedActionException exception) {
              throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
            }
          }
 else {
            attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
          }
        }
 catch (        Exception exception) {
          throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
        }
      }
      return attributeValue;
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.mapping=mapping;
      if (this.mapping.isDirectToFieldMapping()) {
        AbstractDirectMapping directMapping=(AbstractDirectMapping)this.mapping;
        if (directMapping.getFieldClassification() == null) {
          directMapping.setFieldClassification(ClassConstants.STRING);
        }
      }
    }
  }
);
  platformMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(platformMapping);
  XMLDirectMapping userNameMapping=new XMLDirectMapping();
  userNameMapping.setAttributeName(""String_Node_Str"");
  userNameMapping.setGetMethodName(""String_Node_Str"");
  userNameMapping.setSetMethodName(""String_Node_Str"");
  userNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(userNameMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping usesExternalConnectionPoolingMapping=new XMLDirectMapping();
  usesExternalConnectionPoolingMapping.setAttributeName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setGetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setSetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalConnectionPoolingMapping);
  XMLDirectMapping usesExternalTransactionControllerMapping=new XMLDirectMapping();
  usesExternalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalTransactionControllerMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalTransactionControllerMapping);
  XMLCompositeObjectMapping defaultSequenceMapping=new XMLCompositeObjectMapping();
  defaultSequenceMapping.setAttributeName(""String_Node_Str"");
  defaultSequenceMapping.setSetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setGetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setReferenceClass(Sequence.class);
  defaultSequenceMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(defaultSequenceMapping);
  XMLCompositeCollectionMapping sequencesMapping=new XMLCompositeCollectionMapping();
  MapContainerPolicy containerPolicy=new MapContainerPolicy(HashMap.class);
  containerPolicy.setKeyName(""String_Node_Str"",Sequence.class.getName());
  sequencesMapping.setContainerPolicy(containerPolicy);
  sequencesMapping.setAttributeName(""String_Node_Str"");
  sequencesMapping.setSetMethodName(""String_Node_Str"");
  sequencesMapping.setGetMethodName(""String_Node_Str"");
  sequencesMapping.setReferenceClass(Sequence.class);
  sequencesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str""+ getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequencesMapping);
  return descriptor;
}","public ClassDescriptor buildDatasourceLoginDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatasourceLogin.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(EISLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLDirectMapping platformMapping=new XMLDirectMapping();
  platformMapping.setAttributeName(""String_Node_Str"");
  platformMapping.setGetMethodName(""String_Node_Str"");
  platformMapping.setSetMethodName(""String_Node_Str"");
  platformMapping.setConverter(new Converter(){
    protected DatabaseMapping mapping;
    private Map platformList;
    private String oldPrefix=""String_Node_Str"";
    private String newPrefix=""String_Node_Str"";
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      if (objectValue == null) {
        return null;
      }
      return objectValue.getClass().getName();
    }
    public Object convertDataValueToObjectValue(    Object fieldValue,    Session session){
      if (fieldValue == null) {
        return null;
      }
      if (((String)fieldValue).startsWith(oldPrefix)) {
        fieldValue=((String)fieldValue).replaceFirst(oldPrefix,newPrefix);
      }
      Object result=platformList.get(fieldValue);
      if (result != null) {
        fieldValue=result;
      }
      Object attributeValue;
      Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
          }
 catch (          PrivilegedActionException exception) {
            throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
          }
        }
 else {
          attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
        }
      }
 catch (      Exception exception) {
        throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
      }
      return attributeValue;
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.mapping=mapping;
      if (this.mapping.isDirectToFieldMapping()) {
        AbstractDirectMapping directMapping=(AbstractDirectMapping)this.mapping;
        if (directMapping.getFieldClassification() == null) {
          directMapping.setFieldClassification(ClassConstants.STRING);
        }
      }
    }
  }
);
  platformMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(platformMapping);
  XMLDirectMapping userNameMapping=new XMLDirectMapping();
  userNameMapping.setAttributeName(""String_Node_Str"");
  userNameMapping.setGetMethodName(""String_Node_Str"");
  userNameMapping.setSetMethodName(""String_Node_Str"");
  userNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(userNameMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping usesExternalConnectionPoolingMapping=new XMLDirectMapping();
  usesExternalConnectionPoolingMapping.setAttributeName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setGetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setSetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalConnectionPoolingMapping);
  XMLDirectMapping usesExternalTransactionControllerMapping=new XMLDirectMapping();
  usesExternalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalTransactionControllerMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalTransactionControllerMapping);
  XMLCompositeObjectMapping defaultSequenceMapping=new XMLCompositeObjectMapping();
  defaultSequenceMapping.setAttributeName(""String_Node_Str"");
  defaultSequenceMapping.setSetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setGetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setReferenceClass(Sequence.class);
  defaultSequenceMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(defaultSequenceMapping);
  XMLCompositeCollectionMapping sequencesMapping=new XMLCompositeCollectionMapping();
  MapContainerPolicy containerPolicy=new MapContainerPolicy(HashMap.class);
  containerPolicy.setKeyName(""String_Node_Str"",Sequence.class.getName());
  sequencesMapping.setContainerPolicy(containerPolicy);
  sequencesMapping.setAttributeName(""String_Node_Str"");
  sequencesMapping.setSetMethodName(""String_Node_Str"");
  sequencesMapping.setGetMethodName(""String_Node_Str"");
  sequencesMapping.setReferenceClass(Sequence.class);
  sequencesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str""+ getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequencesMapping);
  return descriptor;
}"
68439,"public Object convertDataValueToObjectValue(Object dataValue,Session session){
  Object result=platformList.get(dataValue);
  if (result == null) {
    return dataValue;
  }
 else {
    return result;
  }
}","public Object convertDataValueToObjectValue(Object dataValue,Session session){
  if (dataValue == null) {
    return null;
  }
  if (((String)dataValue).startsWith(oldPrefix)) {
    dataValue=((String)dataValue).replaceFirst(oldPrefix,newPrefix);
  }
  Object result=platformList.get(dataValue);
  if (result == null) {
    return dataValue;
  }
 else {
    return result;
  }
}"
68440,"public void initialize(DatabaseMapping mapping,Session session){
  this.platformList=new HashMap();
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
}","public void initialize(DatabaseMapping mapping,Session session){
  this.platformList=new HashMap();
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
  this.platformList.put(""String_Node_Str"",""String_Node_Str"");
}"
68441,"public ClassDescriptor buildLoginConfigDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(LoginConfig.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(EISLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLoginConfig.class,""String_Node_Str"");
  XMLDirectMapping platformClassMapping=new XMLDirectMapping();
  platformClassMapping.setAttributeName(""String_Node_Str"");
  platformClassMapping.setGetMethodName(""String_Node_Str"");
  platformClassMapping.setSetMethodName(""String_Node_Str"");
  platformClassMapping.setXPath(""String_Node_Str"");
  platformClassMapping.setConverter(new Converter(){
    private Map platformList;
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      return objectValue;
    }
    public Object convertDataValueToObjectValue(    Object dataValue,    Session session){
      Object result=platformList.get(dataValue);
      if (result == null) {
        return dataValue;
      }
 else {
        return result;
      }
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  descriptor.addMapping(platformClassMapping);
  XMLDirectMapping usernameMapping=new XMLDirectMapping();
  usernameMapping.setAttributeName(""String_Node_Str"");
  usernameMapping.setGetMethodName(""String_Node_Str"");
  usernameMapping.setSetMethodName(""String_Node_Str"");
  usernameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(usernameMapping);
  XMLDirectMapping encryptionClassMapping=new XMLDirectMapping();
  encryptionClassMapping.setAttributeName(""String_Node_Str"");
  encryptionClassMapping.setGetMethodName(""String_Node_Str"");
  encryptionClassMapping.setSetMethodName(""String_Node_Str"");
  encryptionClassMapping.setXPath(""String_Node_Str"");
  encryptionClassMapping.setNullValue(ENCRYPTION_CLASS_DEFAULT);
  descriptor.addMapping(encryptionClassMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping tableQualifierMapping=new XMLDirectMapping();
  tableQualifierMapping.setAttributeName(""String_Node_Str"");
  tableQualifierMapping.setGetMethodName(""String_Node_Str"");
  tableQualifierMapping.setSetMethodName(""String_Node_Str"");
  tableQualifierMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(tableQualifierMapping);
  XMLDirectMapping externalConnectionPoolMapping=new XMLDirectMapping();
  externalConnectionPoolMapping.setAttributeName(""String_Node_Str"");
  externalConnectionPoolMapping.setGetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setSetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setXPath(""String_Node_Str"");
  externalConnectionPoolMapping.setNullValue(new Boolean(EXTERNAL_CONNECTION_POOL_DEFAULT));
  descriptor.addMapping(externalConnectionPoolMapping);
  XMLDirectMapping externalTransactionControllerMapping=new XMLDirectMapping();
  externalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  externalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setXPath(""String_Node_Str"");
  externalTransactionControllerMapping.setNullValue(new Boolean(EXTERNAL_TRANSACTION_CONTROLLER_DEFAULT));
  descriptor.addMapping(externalTransactionControllerMapping);
  XMLCompositeObjectMapping sequencingMapping=new XMLCompositeObjectMapping();
  sequencingMapping.setAttributeName(""String_Node_Str"");
  sequencingMapping.setSetMethodName(""String_Node_Str"");
  sequencingMapping.setGetMethodName(""String_Node_Str"");
  sequencingMapping.setReferenceClass(SequencingConfig.class);
  sequencingMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(sequencingMapping);
  XMLCompositeCollectionMapping propertiesMapping=new XMLCompositeCollectionMapping();
  propertiesMapping.setReferenceClass(PropertyConfig.class);
  propertiesMapping.setAttributeName(""String_Node_Str"");
  propertiesMapping.setGetMethodName(""String_Node_Str"");
  propertiesMapping.setSetMethodName(""String_Node_Str"");
  propertiesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(propertiesMapping);
  return descriptor;
}","public ClassDescriptor buildLoginConfigDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(LoginConfig.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(EISLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLoginConfig.class,""String_Node_Str"");
  XMLDirectMapping platformClassMapping=new XMLDirectMapping();
  platformClassMapping.setAttributeName(""String_Node_Str"");
  platformClassMapping.setGetMethodName(""String_Node_Str"");
  platformClassMapping.setSetMethodName(""String_Node_Str"");
  platformClassMapping.setXPath(""String_Node_Str"");
  platformClassMapping.setConverter(new Converter(){
    private Map platformList;
    private String oldPrefix=""String_Node_Str"";
    private String newPrefix=""String_Node_Str"";
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      return objectValue;
    }
    public Object convertDataValueToObjectValue(    Object dataValue,    Session session){
      if (dataValue == null) {
        return null;
      }
      if (((String)dataValue).startsWith(oldPrefix)) {
        dataValue=((String)dataValue).replaceFirst(oldPrefix,newPrefix);
      }
      Object result=platformList.get(dataValue);
      if (result == null) {
        return dataValue;
      }
 else {
        return result;
      }
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  descriptor.addMapping(platformClassMapping);
  XMLDirectMapping usernameMapping=new XMLDirectMapping();
  usernameMapping.setAttributeName(""String_Node_Str"");
  usernameMapping.setGetMethodName(""String_Node_Str"");
  usernameMapping.setSetMethodName(""String_Node_Str"");
  usernameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(usernameMapping);
  XMLDirectMapping encryptionClassMapping=new XMLDirectMapping();
  encryptionClassMapping.setAttributeName(""String_Node_Str"");
  encryptionClassMapping.setGetMethodName(""String_Node_Str"");
  encryptionClassMapping.setSetMethodName(""String_Node_Str"");
  encryptionClassMapping.setXPath(""String_Node_Str"");
  encryptionClassMapping.setNullValue(ENCRYPTION_CLASS_DEFAULT);
  descriptor.addMapping(encryptionClassMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping tableQualifierMapping=new XMLDirectMapping();
  tableQualifierMapping.setAttributeName(""String_Node_Str"");
  tableQualifierMapping.setGetMethodName(""String_Node_Str"");
  tableQualifierMapping.setSetMethodName(""String_Node_Str"");
  tableQualifierMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(tableQualifierMapping);
  XMLDirectMapping externalConnectionPoolMapping=new XMLDirectMapping();
  externalConnectionPoolMapping.setAttributeName(""String_Node_Str"");
  externalConnectionPoolMapping.setGetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setSetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setXPath(""String_Node_Str"");
  externalConnectionPoolMapping.setNullValue(new Boolean(EXTERNAL_CONNECTION_POOL_DEFAULT));
  descriptor.addMapping(externalConnectionPoolMapping);
  XMLDirectMapping externalTransactionControllerMapping=new XMLDirectMapping();
  externalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  externalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setXPath(""String_Node_Str"");
  externalTransactionControllerMapping.setNullValue(new Boolean(EXTERNAL_TRANSACTION_CONTROLLER_DEFAULT));
  descriptor.addMapping(externalTransactionControllerMapping);
  XMLCompositeObjectMapping sequencingMapping=new XMLCompositeObjectMapping();
  sequencingMapping.setAttributeName(""String_Node_Str"");
  sequencingMapping.setSetMethodName(""String_Node_Str"");
  sequencingMapping.setGetMethodName(""String_Node_Str"");
  sequencingMapping.setReferenceClass(SequencingConfig.class);
  sequencingMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(sequencingMapping);
  XMLCompositeCollectionMapping propertiesMapping=new XMLCompositeCollectionMapping();
  propertiesMapping.setReferenceClass(PropertyConfig.class);
  propertiesMapping.setAttributeName(""String_Node_Str"");
  propertiesMapping.setGetMethodName(""String_Node_Str"");
  propertiesMapping.setSetMethodName(""String_Node_Str"");
  propertiesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(propertiesMapping);
  return descriptor;
}"
68442,"private void removeAllJavaFiles(File folder){
  File[] contents=folder.listFiles();
  for (int index=0; contents != null && index < contents.length; index++) {
    File file=contents[index];
    if (file.isDirectory()) {
      removeAllJavaFiles(file);
    }
 else {
      if (file.getName().endsWith(""String_Node_Str"") || file.getName().endsWith(""String_Node_Str"")) {
        file.delete();
      }
    }
  }
}","private void removeAllJavaFiles(File folder){
  File[] contents=folder.listFiles();
  for (int index=0; contents != null && index < contents.length; index++) {
    File file=contents[index];
    if (file.isDirectory()) {
      removeAllJavaFiles(file);
    }
 else {
      if (file.getName().endsWith(""String_Node_Str"")) {
        file.delete();
      }
    }
  }
}"
68443,"/** 
 * Returns a map of the old and new Database Platform classes.
 */
private Map oldPlatformClasses(){
  Map oldClasses=new Hashtable();
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  return oldClasses;
}","/** 
 * Returns a map of the old and new Database Platform classes.
 */
private Map oldPlatformClasses(){
  Map oldClasses=new Hashtable();
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  oldClasses.put(""String_Node_Str"",""String_Node_Str"");
  return oldClasses;
}"
68444,"protected ClassDescriptor buildOneToOneMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(OneToOneMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLCompositeCollectionMapping sourceToTargetKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      Map sourceToTargetKeyFields=((OneToOneMapping)object).getSourceToTargetKeyFields();
      List associations=new ArrayList(sourceToTargetKeyFields.size());
      Iterator iterator=sourceToTargetKeyFields.entrySet().iterator();
      while (iterator.hasNext()) {
        Map.Entry entry=(Map.Entry)iterator.next();
        associations.add(new Association(entry.getKey(),entry.getValue()));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      OneToOneMapping mapping=(OneToOneMapping)object;
      List associations=(List)value;
      mapping.setSourceToTargetKeyFields(new HashMap(associations.size() + 1));
      mapping.setTargetToSourceKeyFields(new HashMap(associations.size() + 1));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceToTargetKeyFields().put((DatabaseField)association.getKey(),(DatabaseField)association.getValue());
        mapping.getTargetToSourceKeyFields().put((DatabaseField)association.getValue(),(DatabaseField)association.getKey());
      }
    }
  }
);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeyFieldAssociationsMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeyFieldAssociationsMapping);
  XMLCompositeCollectionMapping foreignKeyFieldNamesMapping=new XMLCompositeCollectionMapping();
  foreignKeyFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  foreignKeyFieldNamesMapping.setAttributeName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  foreignKeyFieldNamesMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(foreignKeyFieldNamesMapping);
  XMLDirectMapping relationshipPartnerAttributeNameMapping=new XMLDirectMapping();
  relationshipPartnerAttributeNameMapping.setAttributeName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setGetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setSetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(relationshipPartnerAttributeNameMapping);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLDirectMapping usesJoiningMapping=new XMLDirectMapping();
  usesJoiningMapping.setAttributeName(""String_Node_Str"");
  usesJoiningMapping.setGetMethodName(""String_Node_Str"");
  usesJoiningMapping.setSetMethodName(""String_Node_Str"");
  usesJoiningMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesJoiningMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesJoiningMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  return descriptor;
}","protected ClassDescriptor buildOneToOneMappingDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(OneToOneMapping.class);
  descriptor.getInheritancePolicy().setParentClass(ObjectReferenceMapping.class);
  XMLCompositeCollectionMapping sourceToTargetKeyFieldAssociationsMapping=new XMLCompositeCollectionMapping();
  sourceToTargetKeyFieldAssociationsMapping.setReferenceClass(Association.class);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      Map sourceToTargetKeyFields=((OneToOneMapping)object).getSourceToTargetKeyFields();
      List associations=new ArrayList(sourceToTargetKeyFields.size());
      Iterator iterator=sourceToTargetKeyFields.entrySet().iterator();
      while (iterator.hasNext()) {
        Map.Entry entry=(Map.Entry)iterator.next();
        associations.add(new Association(entry.getKey(),entry.getValue()));
      }
      return associations;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      OneToOneMapping mapping=(OneToOneMapping)object;
      List associations=(List)value;
      mapping.setSourceToTargetKeyFields(new HashMap(associations.size() + 1));
      mapping.setTargetToSourceKeyFields(new HashMap(associations.size() + 1));
      Iterator iterator=associations.iterator();
      while (iterator.hasNext()) {
        Association association=(Association)iterator.next();
        mapping.getSourceToTargetKeyFields().put((DatabaseField)association.getKey(),(DatabaseField)association.getValue());
        mapping.getTargetToSourceKeyFields().put((DatabaseField)association.getValue(),(DatabaseField)association.getKey());
      }
    }
  }
);
  sourceToTargetKeyFieldAssociationsMapping.setAttributeName(""String_Node_Str"");
  sourceToTargetKeyFieldAssociationsMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sourceToTargetKeyFieldAssociationsMapping);
  XMLCompositeCollectionMapping foreignKeyFieldNamesMapping=new XMLCompositeCollectionMapping();
  foreignKeyFieldNamesMapping.useCollectionClass(NonSynchronizedVector.class);
  foreignKeyFieldNamesMapping.setAttributeName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setGetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setSetMethodName(""String_Node_Str"");
  foreignKeyFieldNamesMapping.setXPath(getSecondaryNamespaceXPath() + ""String_Node_Str"" + getSecondaryNamespaceXPath()+ ""String_Node_Str"");
  foreignKeyFieldNamesMapping.setReferenceClass(DatabaseField.class);
  descriptor.addMapping(foreignKeyFieldNamesMapping);
  XMLDirectMapping relationshipPartnerAttributeNameMapping=new XMLDirectMapping();
  relationshipPartnerAttributeNameMapping.setAttributeName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setGetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setSetMethodName(""String_Node_Str"");
  relationshipPartnerAttributeNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(relationshipPartnerAttributeNameMapping);
  XMLDirectMapping usesBatchReadingMapping=new XMLDirectMapping();
  usesBatchReadingMapping.setAttributeName(""String_Node_Str"");
  usesBatchReadingMapping.setGetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setSetMethodName(""String_Node_Str"");
  usesBatchReadingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesBatchReadingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesBatchReadingMapping);
  XMLDirectMapping joinFetchMapping=new XMLDirectMapping();
  joinFetchMapping.setAttributeName(""String_Node_Str"");
  joinFetchMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ObjectTypeConverter joinFetchConverter=new ObjectTypeConverter();
  joinFetchConverter.addConversionValue(""String_Node_Str"",new Integer(ForeignReferenceMapping.INNER_JOIN));
  joinFetchConverter.addConversionValue(""String_Node_Str"",new Integer(ForeignReferenceMapping.NONE));
  joinFetchMapping.setConverter(joinFetchConverter);
  joinFetchMapping.setNullValue(ForeignReferenceMapping.NONE);
  descriptor.addMapping(joinFetchMapping);
  XMLCompositeObjectMapping indirectionPolicyMapping=new XMLCompositeObjectMapping();
  indirectionPolicyMapping.setReferenceClass(IndirectionPolicy.class);
  indirectionPolicyMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      IndirectionPolicy policy=((ForeignReferenceMapping)object).getIndirectionPolicy();
      if (policy instanceof NoIndirectionPolicy) {
        return null;
      }
      return policy;
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      IndirectionPolicy policy=(IndirectionPolicy)value;
      if (value == null) {
        policy=new NoIndirectionPolicy();
      }
      ((ForeignReferenceMapping)object).setIndirectionPolicy(policy);
    }
  }
);
  indirectionPolicyMapping.setAttributeName(""String_Node_Str"");
  indirectionPolicyMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(indirectionPolicyMapping);
  XMLCompositeObjectMapping selectionQueryMapping=new XMLCompositeObjectMapping();
  selectionQueryMapping.setAttributeName(""String_Node_Str"");
  selectionQueryMapping.setGetMethodName(""String_Node_Str"");
  selectionQueryMapping.setSetMethodName(""String_Node_Str"");
  selectionQueryMapping.setReferenceClass(ReadQuery.class);
  selectionQueryMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(selectionQueryMapping);
  return descriptor;
}"
68445,"public void test(){
  this.server=new ServerSession((DatabaseLogin)getSession().getLogin().clone(),2,5);
  copyDescriptors(getSession());
  this.server.addDescriptor(buildNonIsolatedDescriptor());
  this.server.dontLogMessages();
  try {
    this.server.login();
  }
 catch (  IntegrityException ex) {
    Vector exceptions=ex.getIntegrityChecker().getCaughtExceptions();
    for (int index=0; index < exceptions.size(); ++index) {
      if (((EclipseLinkException)exceptions.get(index)).getErrorCode() == DescriptorException.ISOLATED_DESCRIPTOR_REFERENCED_BY_SHARED_DESCRIPTOR) {
        return;
      }
    }
  }
  throw new TestErrorException(""String_Node_Str"");
}","public void test(){
  this.server=new ServerSession((DatabaseLogin)getSession().getLogin().clone(),2,5);
  copyDescriptors(getSession());
  this.server.addDescriptor(buildNonIsolatedDescriptor());
  this.server.dontLogMessages();
  try {
    this.server.login();
  }
 catch (  IntegrityException ex) {
    Vector exceptions=ex.getIntegrityChecker().getCaughtExceptions();
    for (int index=0; index < exceptions.size(); ++index) {
      if (((EclipseLinkException)exceptions.get(index)).getErrorCode() == DescriptorException.ISOLATED_DESCRIPTOR_REFERENCED_BY_SHARED_DESCRIPTOR) {
        return;
      }
    }
  }
 finally {
    if (this.server.isConnected()) {
      this.server.logout();
    }
    this.server=null;
  }
  throw new TestErrorException(""String_Node_Str"");
}"
68446,"public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL()) && (lockMode == org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT)) {
    throw new TestWarningException(""String_Node_Str"");
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
 catch (  RuntimeException e) {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
    throw e;
  }
}","public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL()) && (lockMode == org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT)) {
    throw new TestWarningException(""String_Node_Str"");
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
  finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
}"
68447,"public void verify(){
  if (!(new SessionManager().getSession(new XMLSessionConfigLoader(getSessionXmlFileName()),getSessionName(),this.getClass().getClassLoader()).getSessionLog() instanceof org.eclipse.persistence.logging.JavaLog)) {
    throw new TestErrorException(""String_Node_Str"");
  }
}","public void verify(){
  if (!(new SessionManager().getSession(new XMLSessionConfigLoader(getSessionXmlFileName()),getSessionName(),this.getClass().getClassLoader(),false,false).getSessionLog() instanceof org.eclipse.persistence.logging.JavaLog)) {
    throw new TestErrorException(""String_Node_Str"");
  }
}"
68448,"public void test(){
  ServerSession server=null;
  try {
    server=new ServerSession(getSession().getLogin());
    server.setLogLevel(getSession().getLogLevel());
    server.setLog(getSession().getLog());
    server.addConnectionPool(""String_Node_Str"",getSession().getLogin(),3,5);
    server.login();
    server.useReadConnectionPool(3,3);
  }
 catch (  EclipseLinkException exception) {
    caughtException=exception;
  }
 finally {
  }
}","public void test(){
  ServerSession server=null;
  try {
    server=new ServerSession(getSession().getLogin());
    server.setLogLevel(getSession().getLogLevel());
    server.setLog(getSession().getLog());
    server.addConnectionPool(""String_Node_Str"",getSession().getLogin(),3,5);
    server.login();
    server.useReadConnectionPool(3,3);
  }
 catch (  EclipseLinkException exception) {
    caughtException=exception;
  }
 finally {
    server.logout();
  }
}"
68449,"public void test(){
  DatabaseSession session=(DatabaseSession)getSession();
  try {
    Project project=new ConstructorProject();
    project.setLogin(getSession().getLogin());
    org.eclipse.persistence.sessions.DatabaseSession testSession=project.createDatabaseSession();
    testSession.dontLogMessages();
    testSession.login();
    testSession.logout();
  }
 catch (  org.eclipse.persistence.exceptions.EclipseLinkException exception) {
    caughtException=exception;
  }
catch (  Exception e) {
    throw new org.eclipse.persistence.testing.framework.TestWarningException(""String_Node_Str"");
  }
}","public void test(){
  org.eclipse.persistence.sessions.DatabaseSession testSession=null;
  try {
    Project project=new ConstructorProject();
    project.setLogin(getSession().getLogin());
    testSession=project.createDatabaseSession();
    testSession.dontLogMessages();
    testSession.login();
  }
 catch (  org.eclipse.persistence.exceptions.EclipseLinkException exception) {
    caughtException=exception;
  }
catch (  Exception e) {
    throw new org.eclipse.persistence.testing.framework.TestWarningException(""String_Node_Str"");
  }
 finally {
    if (testSession != null) {
      if (testSession.isConnected()) {
        testSession.logout();
      }
    }
  }
}"
68450,"public void test(){
  EmployeeSystem employeeSystem=new EmployeeSystem();
  DatabaseLogin databaseLogin=(DatabaseLogin)getSession().getLogin().clone();
  employeeSystem.project.setLogin(databaseLogin);
  DatabaseSession newSession=employeeSystem.project.createDatabaseSession();
  newSession.login();
  try {
    newSession.login();
  }
 catch (  org.eclipse.persistence.exceptions.EclipseLinkException e) {
    this.caughtException=e;
  }
}","public void test(){
  EmployeeSystem employeeSystem=new EmployeeSystem();
  DatabaseLogin databaseLogin=(DatabaseLogin)getSession().getLogin().clone();
  employeeSystem.project.setLogin(databaseLogin);
  DatabaseSession newSession=employeeSystem.project.createDatabaseSession();
  newSession.login();
  try {
    newSession.login();
  }
 catch (  org.eclipse.persistence.exceptions.EclipseLinkException e) {
    this.caughtException=e;
  }
 finally {
    newSession.logout();
  }
}"
68451,"public void test(){
  EmployeeSystem employeeSystem=new EmployeeSystem();
  DatabaseLogin databaseLogin=(DatabaseLogin)getSession().getLogin().clone();
  employeeSystem.project.setLogin(databaseLogin);
  DatabaseSession newSession=employeeSystem.project.createDatabaseSession();
  newSession.login();
  try {
    newSession.logout();
    newSession.login();
  }
 catch (  org.eclipse.persistence.exceptions.EclipseLinkException e) {
    this.caughtException=e;
  }
}","public void test(){
  EmployeeSystem employeeSystem=new EmployeeSystem();
  DatabaseLogin databaseLogin=(DatabaseLogin)getSession().getLogin().clone();
  employeeSystem.project.setLogin(databaseLogin);
  DatabaseSession newSession=employeeSystem.project.createDatabaseSession();
  newSession.login();
  try {
    newSession.logout();
    newSession.login();
  }
 catch (  org.eclipse.persistence.exceptions.EclipseLinkException e) {
    this.caughtException=e;
  }
 finally {
    if (newSession.isConnected()) {
      newSession.logout();
    }
  }
}"
68452,"public void processGlobalElements(Project project){
  if (this.globalElements == null) {
    return;
  }
  Iterator<QName> keys=this.globalElements.keySet().iterator();
  while (keys.hasNext()) {
    QName next=keys.next();
    ElementDeclaration nextElement=this.globalElements.get(next);
    String nextClassName=nextElement.getJavaTypeName();
    TypeInfo type=this.typeInfo.get(nextClassName);
    if (type != null) {
      if (next.getNamespaceURI() == null || next.getNamespaceURI().equals(""String_Node_Str"")) {
        type.getDescriptor().addRootElement(next.getLocalPart());
      }
 else {
        XMLDescriptor descriptor=type.getDescriptor();
        String uri=next.getNamespaceURI();
        String prefix=descriptor.getNamespaceResolver().resolveNamespaceURI(uri);
        if (prefix == null) {
          prefix=descriptor.getNamespaceResolver().generatePrefix();
          descriptor.getNamespaceResolver().put(prefix,uri);
        }
        descriptor.addRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
    }
 else     if (helper.isBuiltInJavaType(helper.getJavaClass(nextClassName))) {
      String namespaceUri=next.getNamespaceURI();
      if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
        namespaceUri=""String_Node_Str"";
      }
      String packageName=getPackageNameForURI(namespaceUri);
      if (packageName == null) {
        packageName=""String_Node_Str"";
      }
      String className=packageName + ""String_Node_Str"" + next.getLocalPart()+ ""String_Node_Str"";
      Class generatedClass=this.generateWrapperClass(className,nextClassName);
      this.generatedClassesToQNames.put(generatedClass,next);
      XMLDescriptor desc=new XMLDescriptor();
      desc.setJavaClassName(className);
      XMLDirectMapping mapping=new XMLDirectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
      desc.addMapping(mapping);
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolver();
        String prefix=resolver.resolveNamespaceURI(namespaceUri);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new NamespaceResolver();
          String prefix=resolver.generatePrefix();
          resolver.put(prefix,namespaceUri);
          desc.setNamespaceResolver(resolver);
          desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
        }
      }
      project.addDescriptor(desc);
    }
  }
}","public void processGlobalElements(Project project){
  if (this.globalElements == null) {
    return;
  }
  Iterator<QName> keys=this.globalElements.keySet().iterator();
  while (keys.hasNext()) {
    QName next=keys.next();
    ElementDeclaration nextElement=this.globalElements.get(next);
    String nextClassName=nextElement.getJavaTypeName();
    TypeInfo type=this.typeInfo.get(nextClassName);
    if (type != null) {
      if (next.getNamespaceURI() == null || next.getNamespaceURI().equals(""String_Node_Str"")) {
        type.getDescriptor().addRootElement(next.getLocalPart());
      }
 else {
        XMLDescriptor descriptor=type.getDescriptor();
        String uri=next.getNamespaceURI();
        String prefix=descriptor.getNamespaceResolver().resolveNamespaceURI(uri);
        if (prefix == null) {
          prefix=descriptor.getNamespaceResolver().generatePrefix();
          descriptor.getNamespaceResolver().put(prefix,uri);
        }
        descriptor.addRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
    }
 else     if (helper.isBuiltInJavaType(helper.getJavaClass(nextClassName))) {
      String namespaceUri=next.getNamespaceURI();
      if (namespaceUri == null || namespaceUri.equals(""String_Node_Str"")) {
        namespaceUri=""String_Node_Str"";
      }
      Class generatedClass=this.generateWrapperClass(WRAPPER_CLASS + wrapperCounter++,nextClassName);
      this.generatedClassesToQNames.put(generatedClass,next);
      XMLDescriptor desc=new XMLDescriptor();
      desc.setJavaClass(generatedClass);
      XMLDirectMapping mapping=new XMLDirectMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((XMLField)mapping.getField()).setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
      }
      desc.addMapping(mapping);
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolver();
        String prefix=resolver.resolveNamespaceURI(namespaceUri);
        desc.setNamespaceResolver(resolver);
        desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new NamespaceResolver();
          String prefix=resolver.generatePrefix();
          resolver.put(prefix,namespaceUri);
          desc.setNamespaceResolver(resolver);
          desc.setDefaultRootElement(prefix + ""String_Node_Str"" + next.getLocalPart());
        }
      }
      project.addDescriptor(desc);
    }
  }
}"
68453,"public static XMLDescriptor buildDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ReferencedElementDeclaration.class);
  descriptor.getInheritancePolicy().setParentClass(SchemaComponentReference.class);
  return descriptor;
}","public static XMLDescriptor buildDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(ReferencedElementDeclaration.class);
  descriptor.getInheritancePolicy().setParentClass(SchemaComponentReference.class);
  ((XMLDirectMapping)descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"")).setNullValue(new Integer(1));
  ((XMLDirectMapping)descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"")).setNullValue(new Integer(1));
  return descriptor;
}"
68454,"/** 
 * Add a variable of type ValueHolderInterface to the class.  When this method has been run, the class will contain a variable declaration similar to the following: private ValueHolderInterface _persistence_variableName_vh;
 */
public void addValueHolder(AttributeDetails attributeDetails){
  String attribute=attributeDetails.getAttributeName();
  RuntimeVisibleAnnotations annotations=null;
  if (attributeDetails.getGetterMethodName() == null || attributeDetails.getGetterMethodName().equals(""String_Node_Str"")) {
    annotations=getTransientAnnotation();
  }
  cv.visitField(ACC_PRIVATE,""String_Node_Str"" + attribute + ""String_Node_Str"",VHI_SIGNATURE,null,annotations);
}","/** 
 * Add a variable of type ValueHolderInterface to the class.  When this method has been run, the class will contain a variable declaration similar to the following: private ValueHolderInterface _persistence_variableName_vh;
 */
public void addValueHolder(AttributeDetails attributeDetails){
  String attribute=attributeDetails.getAttributeName();
  RuntimeVisibleAnnotations annotations=null;
  if (attributeDetails.getGetterMethodName() == null || attributeDetails.getGetterMethodName().equals(""String_Node_Str"")) {
    annotations=getTransientAnnotation();
  }
  cv.visitField(ACC_PROTECTED,""String_Node_Str"" + attribute + ""String_Node_Str"",VHI_SIGNATURE,null,annotations);
}"
68455,"public int getMinOccurs(){
  return this.element.getMinOccurs();
}","public int getMinOccurs(){
  return this.minOccurs;
}"
68456,"public int getMaxOccurs(){
  return this.element.getMaxOccurs();
}","public int getMaxOccurs(){
  return this.maxOccurs;
}"
68457,"@Override protected void reloadInternal(XSObject schemaObject){
  super.reloadInternal(schemaObject);
  if (this.element != null) {
    this.element.reloadInternal(schemaObject);
  }
}","@Override protected void reloadInternal(XSObject schemaObject){
  super.reloadInternal(schemaObject);
  if (schemaObject instanceof XSParticleDecl) {
    this.minOccurs=((XSParticleDecl)schemaObject).getMinOccurs();
    this.maxOccurs=((XSParticleDecl)schemaObject).getMaxOccurs();
  }
}"
68458,"public void addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
    return;
  }
  int index=children.indexOf(xPathNode);
  if (index >= 0) {
    xPathNode=(XPathNode)children.get(index);
  }
 else {
    xPathNode.setParent(this);
    if (!children.contains(xPathNode)) {
      children.add(xPathNode);
    }
    if (XPathFragment.SELF_FRAGMENT.equals(anXPathFragment)) {
      if (null == selfChildren) {
        selfChildren=new ArrayList();
      }
      if (!selfChildren.contains(xPathNode)) {
        selfChildren.add(xPathNode);
      }
    }
 else {
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
}","public void addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
    return;
  }
  int index=children.indexOf(xPathNode);
  if (index >= 0) {
    xPathNode=(XPathNode)children.get(index);
  }
 else {
    xPathNode.setParent(this);
    if (!children.contains(xPathNode)) {
      children.add(xPathNode);
    }
    if (XPathFragment.SELF_FRAGMENT.equals(anXPathFragment)) {
      if (null == selfChildren) {
        selfChildren=new ArrayList();
      }
      if (!selfChildren.contains(xPathNode)) {
        selfChildren.add(xPathNode);
      }
    }
 else {
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
}"
68459,"public void addSRGTests(){
  setManager(PopulationManager.getDefaultManager());
  addAggregateObjectObjectComparisonTest();
  addAggregateObjectIsNullTest();
  addAggregateObjectNullTest();
  addMultipleAndsTest();
  addMultipleAndsTest2();
  addMultipleAndsTest3();
  addMultipleAndsTest4();
  addMultipleAndsTest5();
  addMultipleAndsTest6();
  addObjectComparisonAcrossJoin();
  addExpressionFunctionTest();
  addExpressionMathTest();
  addAdvancedExpressionFunctionTest();
  addAdvancedExpressionMathTest();
  addBuilderEqualParameterTest();
  addAndTest();
  addNotTest();
  addAndNullTest();
  addOrTest();
  addOrNullTest();
  addEqualTest();
  addEqualUnneccessaryJoinTest();
  addEqualDoubleTest();
  addGreaterThanEqualTest();
  addGreaterThanTest();
  addJoinsShrinkResultSetSizeTest();
  addJoinsShrinkResultSetSizeTest2();
  addLessThanEqualTest();
  addLessThanTest();
  addIsNullTest();
  addIsNullWithJoinTest();
  addIsNotNullTest();
  addIsNotNullWithJoinTest();
  addInTest();
  addInSingleVectorParameterTest();
  addInMultipleExpressionParameterTest();
  addNotInTest();
  addInConversionTest();
  addLikeTest();
  addLikeIgnoreCaseTest();
  addLikeIgnoringCaseTest1();
  addLikeIgnoringCaseTest2();
  addLikeEscapeTest();
  addNotLikeTest();
  addBetweenTest();
  addBetweenTest2();
  addSelectionObjectWithoutPrepareTest();
  addSelfManagedEmployeeTests();
  addSingleTableJoinTest();
  addMultiplePrimaryKeyTest();
  addMultipleTableJoinTest1();
  addMultipleTableJoinTest2();
  addMultipleTableJoinTest3();
  addMultipleTableJoinTest4();
  addMultipleTableJoinTest5();
  addMultipleTableJoinTest6();
  addMultipleTableJoinTest7();
  addMultipleTableJoinTest8();
  addMultipleTableJoinTest9();
  addCustomQKJoinTest1();
  addCustomQKJoinTest2();
  addCustomQKTest1();
  addComputerViewCursoredStreamTest();
  addComputerViewTest1();
  addVehicleViewCursoredStreamTest();
  addVehicleViewTest1();
  addVehicleViewOrderByJoinTest();
  addVehicleViewOrderByOnlyTest();
  addNonFueledVehicleViewTest1();
  addVehicleViewJoinOnlyTest();
  addBadQueryKeyTest();
  addMismatchedQueryKeyTest();
  addBadQueryTableTest();
  addBadFieldWithTableTest();
  addBadToManyQueryKeyTest();
  addBadFieldWithTableTest();
  addBadAnyOfTest();
  addExpressionsDefaultingFieldTest();
  addOneToOneEqualTest();
  addTransformationTest();
  addAggregateQueryTest();
  addLowerCaseTest();
  addUpperCaseTest();
  addCustomDefaultExpressionTest();
  addOneToManyJoinTest1();
  addOneToManyJoinTest2();
  addOneToManyJoin2WithBatchReadTest();
  addOneToManyJoinTest3();
  addOneToManyJoinTest4();
  addOneToManyJoinTest5();
  addManyToManyJoinTest1();
  addManyToManyJoinTest2();
  addManyToManyJoinTest3();
  addManyToManyJoinTest4();
  addManyToManyJoinTest5();
  addOneToManyJoinObjectCompareTest();
  addOneToManyJoinObjectCompareTest2();
  addDirectCollectionJoinTest1();
  addComplexBooleanTest();
  addOneToOneObjectTest();
  addGetFunctionWithTwoArgumentsTest();
  addAggregeateCollectionJoinTest();
  addTest(new InvalidQueryKeyFunctionExpressionTest(new ExpressionBuilder().get(""String_Node_Str"").isNull()));
  addConstantEqualConstantTest();
  addParameterIsNullTest();
  addValueEqualValueTest();
  addMultiPlatfromTest();
}","public void addSRGTests(){
  setManager(PopulationManager.getDefaultManager());
  addAggregateObjectObjectComparisonTest();
  addAggregateObjectIsNullTest();
  addAggregateObjectNullTest();
  addMultipleAndsTest();
  addMultipleAndsTest2();
  addMultipleAndsTest3();
  addMultipleAndsTest4();
  addMultipleAndsTest5();
  addMultipleAndsTest6();
  addObjectComparisonAcrossJoin();
  addExpressionFunctionTest();
  addExpressionMathTest();
  addAdvancedExpressionFunctionTest();
  addAdvancedExpressionMathTest();
  addBuilderEqualParameterTest();
  addAndTest();
  addNotTest();
  addAndNullTest();
  addOrTest();
  addOrNullTest();
  addEqualTest();
  addEqualUnneccessaryJoinTest();
  addEqualDoubleTest();
  addGreaterThanEqualTest();
  addGreaterThanTest();
  addJoinsShrinkResultSetSizeTest();
  addJoinsShrinkResultSetSizeTest2();
  addLessThanEqualTest();
  addLessThanTest();
  addIsNullTest();
  addIsNullWithJoinTest();
  addIsNotNullTest();
  addIsNotNullWithJoinTest();
  addInTest();
  addInMultipleExpressionWithConvertionParameterTest();
  addInSingleVectorParameterTest();
  addInMultipleExpressionParameterTest();
  addNotInTest();
  addInConversionTest();
  addLikeTest();
  addLikeIgnoreCaseTest();
  addLikeIgnoringCaseTest1();
  addLikeIgnoringCaseTest2();
  addLikeEscapeTest();
  addNotLikeTest();
  addBetweenTest();
  addBetweenTest2();
  addSelectionObjectWithoutPrepareTest();
  addSelfManagedEmployeeTests();
  addSingleTableJoinTest();
  addMultiplePrimaryKeyTest();
  addMultipleTableJoinTest1();
  addMultipleTableJoinTest2();
  addMultipleTableJoinTest3();
  addMultipleTableJoinTest4();
  addMultipleTableJoinTest5();
  addMultipleTableJoinTest6();
  addMultipleTableJoinTest7();
  addMultipleTableJoinTest8();
  addMultipleTableJoinTest9();
  addCustomQKJoinTest1();
  addCustomQKJoinTest2();
  addCustomQKTest1();
  addComputerViewCursoredStreamTest();
  addComputerViewTest1();
  addVehicleViewCursoredStreamTest();
  addVehicleViewTest1();
  addVehicleViewOrderByJoinTest();
  addVehicleViewOrderByOnlyTest();
  addNonFueledVehicleViewTest1();
  addVehicleViewJoinOnlyTest();
  addBadQueryKeyTest();
  addMismatchedQueryKeyTest();
  addBadQueryTableTest();
  addBadFieldWithTableTest();
  addBadToManyQueryKeyTest();
  addBadFieldWithTableTest();
  addBadAnyOfTest();
  addExpressionsDefaultingFieldTest();
  addOneToOneEqualTest();
  addTransformationTest();
  addAggregateQueryTest();
  addLowerCaseTest();
  addUpperCaseTest();
  addCustomDefaultExpressionTest();
  addOneToManyJoinTest1();
  addOneToManyJoinTest2();
  addOneToManyJoin2WithBatchReadTest();
  addOneToManyJoinTest3();
  addOneToManyJoinTest4();
  addOneToManyJoinTest5();
  addManyToManyJoinTest1();
  addManyToManyJoinTest2();
  addManyToManyJoinTest3();
  addManyToManyJoinTest4();
  addManyToManyJoinTest5();
  addOneToManyJoinObjectCompareTest();
  addOneToManyJoinObjectCompareTest2();
  addDirectCollectionJoinTest1();
  addComplexBooleanTest();
  addOneToOneObjectTest();
  addGetFunctionWithTwoArgumentsTest();
  addAggregeateCollectionJoinTest();
  addTest(new InvalidQueryKeyFunctionExpressionTest(new ExpressionBuilder().get(""String_Node_Str"").isNull()));
  addConstantEqualConstantTest();
  addParameterIsNullTest();
  addValueEqualValueTest();
  addMultiPlatfromTest();
}"
68460,"/** 
 * INTERNAL: Translate only IN() parameter values (Vector parameters).
 */
public void translateQueryStringForParameterizedIN(AbstractRecord translationRow,AbstractRecord modifyRow,AbstractSession session){
  int lastIndex=0;
  int parameterIndex=0;
  String queryString=getQueryString();
  Writer writer=new CharArrayWriter(queryString.length() + 50);
  try {
    Vector parameters=getParameters();
    Vector parametersValues=new Vector(parameters.size());
    while (lastIndex != -1) {
      int tokenIndex=queryString.indexOf(argumentMarker(),lastIndex);
      String token;
      if (tokenIndex == -1) {
        token=queryString.substring(lastIndex,queryString.length());
        lastIndex=-1;
      }
 else {
        token=queryString.substring(lastIndex,tokenIndex);
      }
      writer.write(token);
      if (tokenIndex != -1) {
        Object parameter=parameters.get(parameterIndex);
        if (parameter instanceof Collection) {
          Vector values=(Vector)parameter;
          parametersValues.addAll(values);
          int size=values.size();
          writer.write(""String_Node_Str"");
          for (int index=0; index < size; index++) {
            writer.write(""String_Node_Str"");
            if ((index + 1) < size) {
              writer.write(""String_Node_Str"");
            }
          }
          writer.write(""String_Node_Str"");
        }
 else {
          parametersValues.add(parameter);
          writer.write(""String_Node_Str"");
        }
        lastIndex=tokenIndex + 1;
        parameterIndex++;
      }
    }
    setParameters(parametersValues);
    setQueryString(writer.toString());
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}","/** 
 * INTERNAL: Translate only IN() parameter values (Vector parameters).
 */
public void translateQueryStringForParameterizedIN(AbstractRecord translationRow,AbstractRecord modifyRow,AbstractSession session){
  int lastIndex=0;
  int parameterIndex=0;
  String queryString=getQueryString();
  Writer writer=new CharArrayWriter(queryString.length() + 50);
  try {
    Vector parameters=getParameters();
    Vector parametersValues=new Vector(parameters.size());
    while (lastIndex != -1) {
      int tokenIndex=queryString.indexOf(argumentMarker(),lastIndex);
      String token;
      if (tokenIndex == -1) {
        token=queryString.substring(lastIndex,queryString.length());
        lastIndex=-1;
      }
 else {
        token=queryString.substring(lastIndex,tokenIndex);
      }
      writer.write(token);
      if (tokenIndex != -1) {
        Object parameter=parameters.get(parameterIndex);
        if (parameter instanceof Collection) {
          Collection values=(Collection)parameter;
          parametersValues.addAll(values);
          int size=values.size();
          writer.write(""String_Node_Str"");
          for (int index=0; index < size; index++) {
            writer.write(""String_Node_Str"");
            if ((index + 1) < size) {
              writer.write(""String_Node_Str"");
            }
          }
          writer.write(""String_Node_Str"");
        }
 else {
          parametersValues.add(parameter);
          writer.write(""String_Node_Str"");
        }
        lastIndex=tokenIndex + 1;
        parameterIndex++;
      }
    }
    setParameters(parametersValues);
    setQueryString(writer.toString());
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}"
68461,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}"
68462,"/** 
 * INTERNAL: Traverse the object to find references to objects not registered in this unit of work.
 */
public void discoverUnregisteredNewObjects(Map clones,final Map knownNewObjects,final Map unregisteredExistingObjects,Map visitedObjects){
  DescriptorIterator iterator=new DescriptorIterator(){
    public void iterate(    Object object){
      if (isClassReadOnly(object.getClass(),this.getCurrentDescriptor())) {
        this.setShouldBreak(true);
        return;
      }
      if (isSmartMerge() && isOriginalNewObject(object)) {
        return;
      }
 else       if (!isObjectRegistered(object)) {
        if ((shouldPerformNoValidation()) && (shouldValidateExistence() && checkForUnregisteredExistingObject(object))) {
          unregisteredExistingObjects.put(object,object);
          this.setShouldBreak(true);
          return;
        }
        knownNewObjects.put(object,object);
      }
    }
  }
;
  setUnregisteredExistingObjects(unregisteredExistingObjects);
  iterator.setVisitedObjects(visitedObjects);
  iterator.setResult(knownNewObjects);
  iterator.setSession(this);
  iterator.setShouldIterateOverWrappedObjects(false);
  for (Iterator clonesEnum=clones.keySet().iterator(); clonesEnum.hasNext(); ) {
    iterator.startIterationOn(clonesEnum.next());
  }
}","/** 
 * INTERNAL: Traverse the object to find references to objects not registered in this unit of work.
 */
public void discoverUnregisteredNewObjects(Map clones,final Map knownNewObjects,final Map unregisteredExistingObjects,Map visitedObjects){
  DescriptorIterator iterator=new DescriptorIterator(){
    public void iterate(    Object object){
      if (isClassReadOnly(object.getClass(),this.getCurrentDescriptor())) {
        this.setShouldBreak(true);
        return;
      }
      if (isSmartMerge() && isOriginalNewObject(object)) {
        return;
      }
 else       if (!isObjectRegistered(object)) {
        if ((shouldPerformNoValidation()) && (!shouldValidateExistence() || checkForUnregisteredExistingObject(object))) {
          unregisteredExistingObjects.put(object,object);
          this.setShouldBreak(true);
          return;
        }
        knownNewObjects.put(object,object);
      }
    }
  }
;
  setUnregisteredExistingObjects(unregisteredExistingObjects);
  iterator.setVisitedObjects(visitedObjects);
  iterator.setResult(knownNewObjects);
  iterator.setSession(this);
  iterator.setShouldIterateOverWrappedObjects(false);
  for (Iterator clonesEnum=clones.keySet().iterator(); clonesEnum.hasNext(); ) {
    iterator.startIterationOn(clonesEnum.next());
  }
}"
68463,"public void testDatabaseSyncNewObject(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    Project project=new LargeProject();
    em.persist(project);
    project.setName(""String_Node_Str"");
    project.setTeamLeader(new Employee());
    project.getTeamLeader().addProject(project);
    em.flush();
  }
 catch (  IllegalStateException ex) {
    rollbackTransaction(em);
    return;
  }
  fail(""String_Node_Str"");
}","public void testDatabaseSyncNewObject(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    Project project=new LargeProject();
    em.persist(project);
    project.setName(""String_Node_Str"");
    project.setTeamLeader(new Employee());
    project.getTeamLeader().addProject(project);
    em.flush();
  }
 catch (  PersistenceException ex) {
    rollbackTransaction(em);
    if (ex.getCause() instanceof IllegalStateException)     return;
  }
  fail(""String_Node_Str"");
}"
68464,"public void testREADLock(){
  if (isOnServer()) {
    return;
  }
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Employee employee=null;
  try {
    employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    em.persist(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  EntityManager em2=createEntityManager();
  Exception optimisticLockException=null;
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.lock(employee,LockModeType.READ);
    em2.getTransaction().begin();
    try {
      Employee employee2=em2.find(Employee.class,employee.getId());
      employee2.setFirstName(""String_Node_Str"");
      em2.getTransaction().commit();
      em2.close();
    }
 catch (    RuntimeException ex) {
      em2.getTransaction().rollback();
      em2.close();
      throw ex;
    }
    try {
      em.flush();
    }
 catch (    PersistenceException exception) {
      if (exception instanceof OptimisticLockException) {
        optimisticLockException=exception;
      }
 else {
        throw exception;
      }
    }
    rollbackTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.remove(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  if (optimisticLockException == null) {
    fail(""String_Node_Str"");
  }
}","public void testREADLock(){
  if (isOnServer()) {
    return;
  }
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Employee employee=null;
  try {
    employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    em.persist(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  EntityManager em2=createEntityManager();
  Exception optimisticLockException=null;
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.lock(employee,LockModeType.READ);
    em2.getTransaction().begin();
    try {
      Employee employee2=em2.find(Employee.class,employee.getId());
      employee2.setFirstName(""String_Node_Str"");
      em2.getTransaction().commit();
      em2.close();
    }
 catch (    RuntimeException ex) {
      em2.getTransaction().rollback();
      em2.close();
      throw ex;
    }
    try {
      em.flush();
    }
 catch (    PersistenceException exception) {
      if (exception.getCause() instanceof OptimisticLockException) {
        optimisticLockException=exception;
      }
 else {
        throw exception;
      }
    }
    rollbackTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.remove(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  if (optimisticLockException == null) {
    fail(""String_Node_Str"");
  }
}"
68465,"public void testDatabaseSyncNewObject(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    Project project=new LargeProject();
    em.persist(project);
    project.setName(""String_Node_Str"");
    project.setTeamLeader(new Employee());
    project.getTeamLeader().addProject(project);
    em.flush();
  }
 catch (  IllegalStateException ex) {
    rollbackTransaction(em);
    return;
  }
  fail(""String_Node_Str"");
}","public void testDatabaseSyncNewObject(){
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    Project project=new LargeProject();
    em.persist(project);
    project.setName(""String_Node_Str"");
    project.setTeamLeader(new Employee());
    project.getTeamLeader().addProject(project);
    em.flush();
  }
 catch (  PersistenceException ex) {
    rollbackTransaction(em);
    if (ex.getCause() instanceof IllegalStateException)     return;
  }
  fail(""String_Node_Str"");
}"
68466,"public void testREADLock(){
  if (isOnServer()) {
    return;
  }
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  Employee employee=null;
  try {
    employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    em.persist(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  EntityManager em2=createEntityManager(""String_Node_Str"");
  Exception optimisticLockException=null;
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.lock(employee,LockModeType.READ);
    em2.getTransaction().begin();
    try {
      Employee employee2=em2.find(Employee.class,employee.getId());
      employee2.setFirstName(""String_Node_Str"");
      em2.getTransaction().commit();
      em2.close();
    }
 catch (    RuntimeException ex) {
      em2.getTransaction().rollback();
      em2.close();
      throw ex;
    }
    try {
      em.flush();
    }
 catch (    PersistenceException exception) {
      if (exception instanceof OptimisticLockException) {
        optimisticLockException=exception;
      }
 else {
        throw exception;
      }
    }
    rollbackTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.remove(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  if (optimisticLockException == null) {
    fail(""String_Node_Str"");
  }
}","public void testREADLock(){
  if (isOnServer()) {
    return;
  }
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  Employee employee=null;
  try {
    employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    em.persist(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  EntityManager em2=createEntityManager(""String_Node_Str"");
  Exception optimisticLockException=null;
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.lock(employee,LockModeType.READ);
    em2.getTransaction().begin();
    try {
      Employee employee2=em2.find(Employee.class,employee.getId());
      employee2.setFirstName(""String_Node_Str"");
      em2.getTransaction().commit();
      em2.close();
    }
 catch (    RuntimeException ex) {
      em2.getTransaction().rollback();
      em2.close();
      throw ex;
    }
    try {
      em.flush();
    }
 catch (    PersistenceException exception) {
      if (exception.getCause() instanceof OptimisticLockException) {
        optimisticLockException=exception;
      }
 else {
        throw exception;
      }
    }
    rollbackTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  beginTransaction(em);
  try {
    employee=em.find(Employee.class,employee.getId());
    em.remove(employee);
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  if (optimisticLockException == null) {
    fail(""String_Node_Str"");
  }
}"
68467,"/** 
 * For this test you need to add a persistence unit named default1 in the persistence.xml file in essentials_testmodels.jar.
 */
public void flushOptimisticLockExceptionTest(){
  EntityManager firstEm=createEntityManager();
  EntityManager secondEm=createAlternateEntityManager();
  String ejbqlString=""String_Node_Str"";
  secondEm.getTransaction().begin();
  try {
    firstEm.getTransaction().begin();
    try {
      Employee firstEmployee=(Employee)firstEm.createQuery(ejbqlString).getSingleResult();
      firstEmployee.setLastName(""String_Node_Str"");
      Employee secondEmployee=(Employee)secondEm.createQuery(ejbqlString).getSingleResult();
      secondEmployee.setLastName(""String_Node_Str"");
      firstEm.flush();
      firstEm.getTransaction().commit();
    }
 catch (    RuntimeException ex) {
      if (firstEm.getTransaction().isActive()) {
        firstEm.getTransaction().rollback();
      }
      firstEm.close();
      throw ex;
    }
    secondEm.flush();
    fail(""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    if (secondEm.getTransaction().isActive()) {
      secondEm.getTransaction().rollback();
    }
    secondEm.close();
    undoEmployeeChanges();
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    if (isKnownMySQLIssue(e)) {
      warning(""String_Node_Str"");
    }
 else {
      Assert.assertTrue(e instanceof javax.persistence.OptimisticLockException);
    }
  }
}","/** 
 * For this test you need to add a persistence unit named default1 in the persistence.xml file in essentials_testmodels.jar.
 */
public void flushOptimisticLockExceptionTest(){
  EntityManager firstEm=createEntityManager();
  EntityManager secondEm=createAlternateEntityManager();
  String ejbqlString=""String_Node_Str"";
  secondEm.getTransaction().begin();
  try {
    firstEm.getTransaction().begin();
    try {
      Employee firstEmployee=(Employee)firstEm.createQuery(ejbqlString).getSingleResult();
      firstEmployee.setLastName(""String_Node_Str"");
      Employee secondEmployee=(Employee)secondEm.createQuery(ejbqlString).getSingleResult();
      secondEmployee.setLastName(""String_Node_Str"");
      firstEm.flush();
      firstEm.getTransaction().commit();
    }
 catch (    RuntimeException ex) {
      if (firstEm.getTransaction().isActive()) {
        firstEm.getTransaction().rollback();
      }
      firstEm.close();
      throw ex;
    }
    secondEm.flush();
    fail(""String_Node_Str"");
  }
 catch (  PersistenceException e) {
    if (secondEm.getTransaction().isActive()) {
      secondEm.getTransaction().rollback();
    }
    secondEm.close();
    undoEmployeeChanges();
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    if (isKnownMySQLIssue(e.getCause())) {
      warning(""String_Node_Str"");
    }
 else {
      Assert.assertTrue(e.getCause() instanceof javax.persistence.OptimisticLockException);
    }
  }
}"
68468,"protected void buildConfigs(){
  this.addConfig(NO_SERVER_ID,""String_Node_Str"");
  this.addConfig(OC4J_11_1_1_ID,""String_Node_Str"");
  this.addConfig(OC4J_10_1_3_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addConfig(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addConfig(JBOSS_ID,""String_Node_Str"");
  this.addConfig(SUNAS_ID,""String_Node_Str"");
  this.addConfig(CUSTOM_SERVER_ID,""String_Node_Str"");
}","protected void buildConfigs(){
  this.addConfig(NO_SERVER_ID,""String_Node_Str"");
  this.addConfig(OC4J__ID,""String_Node_Str"");
  this.addConfig(OC4J_11_1_1_ID,""String_Node_Str"");
  this.addConfig(OC4J_10_1_3_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addConfig(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addConfig(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addConfig(JBOSS_ID,""String_Node_Str"");
  this.addConfig(SUNAS_ID,""String_Node_Str"");
  this.addConfig(CUSTOM_SERVER_ID,""String_Node_Str"");
}"
68469,"protected void buidPlatforms(){
  this.addPlatform(NO_SERVER_ID,""String_Node_Str"");
  this.addPlatform(OC4J_11_1_1_ID,""String_Node_Str"");
  this.addPlatform(OC4J_10_1_3_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addPlatform(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addPlatform(JBOSS_ID,""String_Node_Str"");
  this.addPlatform(SUNAS_ID,""String_Node_Str"");
  this.addPlatform(CUSTOM_SERVER_ID,""String_Node_Str"");
}","protected void buidPlatforms(){
  this.addPlatform(NO_SERVER_ID,""String_Node_Str"");
  this.addPlatform(OC4J_11_1_1_ID,""String_Node_Str"");
  this.addPlatform(OC4J_10_1_3_ID,""String_Node_Str"");
  this.addPlatform(OC4J__ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_9_ID,""String_Node_Str"");
  this.addPlatform(WEBLOGIC_10_ID,""String_Node_Str"");
  this.addPlatform(WEBSPHERE_6_1_ID,""String_Node_Str"");
  this.addPlatform(JBOSS_ID,""String_Node_Str"");
  this.addPlatform(SUNAS_ID,""String_Node_Str"");
  this.addPlatform(CUSTOM_SERVER_ID,""String_Node_Str"");
}"
68470,"protected void addProblemsTo(List currentProblems){
  super.addProblemsTo(currentProblems);
  this.checkGetMethod(currentProblems);
  this.checkSetMethod(currentProblems);
  this.checkMethods(currentProblems);
  this.checkWriteLockField(currentProblems);
}","protected void addProblemsTo(List currentProblems){
  super.addProblemsTo(currentProblems);
  this.checkGetMethod(currentProblems);
  this.checkSetMethod(currentProblems);
  this.checkMethods(currentProblems);
  this.checkWriteLockField(currentProblems);
  this.checkMappableAttribute(currentProblems);
}"
68471,"private void addUnmappedMappingNodeFor(MWClassAttribute attribute){
  if (attribute.isMappable()) {
    this.unmappedMappingNodesHolder.addItem(this.buildUnmappedMappingNode(attribute));
  }
}","private void addUnmappedMappingNodeFor(MWClassAttribute attribute){
  this.unmappedMappingNodesHolder.addItem(this.buildUnmappedMappingNode(attribute));
}"
68472,"public UnmappedMappingNode(MWClassAttribute classAttribute,ApplicationContext context,SelectionActionsPolicy mappingNodeTypePolicy,MappingDescriptorNode parent){
  super(null,context,mappingNodeTypePolicy,parent);
  if (!classAttribute.isMappable()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.classAttribute=classAttribute;
}","public UnmappedMappingNode(MWClassAttribute classAttribute,ApplicationContext context,SelectionActionsPolicy mappingNodeTypePolicy,MappingDescriptorNode parent){
  super(null,context,mappingNodeTypePolicy,parent);
  this.classAttribute=classAttribute;
}"
68473,"private void setDefaultLoginPlatform(){
  DataSource ds=null;
  if (this.login.platformIsRdbms())   ds=buildDefaultRdbmsDataSource();
 else   if (this.login.platformIsEis())   ds=buildDefaultEisDataSource();
 else   throw new IllegalStateException();
  login.setPlatformClass(ds.getPlatformClassName());
}","private void setDefaultLoginPlatform(){
  DataSource ds=null;
  if (this.login.platformIsRdbms())   ds=buildDefaultRdbmsDataSource();
 else   if (this.login.platformIsEis())   ds=buildDefaultEisDataSource();
 else   if (this.login.platformIsXml())   ds=buildDefaultXmlDataSource();
 else   throw new IllegalStateException();
  login.setPlatformClass(ds.getPlatformClassName());
}"
68474,"public void initializeNamespaceMaps(){
  Stack records=new Stack();
  UnmarshalRecord next=owningRecord;
  while (next != null) {
    records.push(next);
    next=next.getParentRecord();
  }
  for (int i=0; i < records.size(); i++) {
    next=(UnmarshalRecord)records.pop();
    if (next.getNamespaceMap() != null) {
      java.util.Iterator prefixes=next.getNamespaceMap().keySet().iterator();
      while (prefixes.hasNext()) {
        String prefix=(String)prefixes.next();
        this.resolver.put(prefix,(String)next.getNamespaceMap().get(prefix));
      }
    }
  }
}","public void initializeNamespaceMaps(){
  Stack records=new Stack();
  UnmarshalRecord next=owningRecord;
  while (next != null) {
    records.push(next);
    next=next.getParentRecord();
  }
  for (int i=0; i < records.size(); i++) {
    next=(UnmarshalRecord)records.pop();
    if (next.getNamespaceMap() != null) {
      java.util.Iterator prefixes=next.getNamespaceMap().keySet().iterator();
      while (prefixes.hasNext()) {
        String prefix=(String)prefixes.next();
        Stack uriStack=(Stack)next.getNamespaceMap().get(prefix);
        if (uriStack.size() > 0) {
          this.resolver.put(prefix,(String)uriStack.peek());
        }
      }
    }
  }
}"
68475,"public void endDocument() throws SAXException {
  Object object=this.getCurrentObject();
  if (null != selfRecords) {
    int selfRecordsSize=selfRecords.size();
    for (int x=0; x < selfRecordsSize; x++) {
      ((UnmarshalRecord)selfRecords.get(x)).endDocument();
    }
  }
  try {
    if (null != containersMap) {
      Iterator containersMapKeys=containersMap.keySet().iterator();
      ContainerValue containerValue;
      Object containerInstance;
      while (containersMapKeys.hasNext()) {
        containerValue=(ContainerValue)containersMapKeys.next();
        containerInstance=containersMap.get(containerValue);
        containerValue.setContainerInstance(object,containerInstance);
      }
    }
    if (null != getNullCapableValues()) {
      int nullValuesSize=getNullCapableValues().size();
      NullCapableValue nullCapableValue;
      for (int x=0; x < nullValuesSize; x++) {
        nullCapableValue=(NullCapableValue)getNullCapableValues().get(x);
        nullCapableValue.setNullValue(object,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      int transformationMappingsSize=transformationMappings.size();
      AbstractTransformationMapping transformationMapping;
      for (int x=0; x < transformationMappingsSize; x++) {
        transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,object,query,session);
      }
    }
    if ((this.unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
      if (this.parentRecord != null) {
        unmarshaller.getUnmarshalListener().afterUnmarshal(object,parentRecord.getCurrentObject());
      }
 else {
        unmarshaller.getUnmarshalListener().afterUnmarshal(object,null);
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(object);
    if ((xmlDescriptor != null) && (xmlDescriptor.getPrimaryKeyFieldNames().size() > 0)) {
      Vector pk=treeObjectBuilder.extractPrimaryKeyFromObject(object,session);
      CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
      key.setRecord(this);
      key.setObject(object);
      key.releaseDeferredLock();
    }
  }
}","public void endDocument() throws SAXException {
  Object object=this.getCurrentObject();
  if (null != selfRecords) {
    int selfRecordsSize=selfRecords.size();
    for (int x=0; x < selfRecordsSize; x++) {
      ((UnmarshalRecord)selfRecords.get(x)).endDocument();
    }
  }
  try {
    if (null != containersMap) {
      Iterator containersMapKeys=containersMap.keySet().iterator();
      ContainerValue containerValue;
      Object containerInstance;
      while (containersMapKeys.hasNext()) {
        containerValue=(ContainerValue)containersMapKeys.next();
        containerInstance=containersMap.get(containerValue);
        containerValue.setContainerInstance(object,containerInstance);
      }
    }
    if (null != getNullCapableValues()) {
      int nullValuesSize=getNullCapableValues().size();
      NullCapableValue nullCapableValue;
      for (int x=0; x < nullValuesSize; x++) {
        nullCapableValue=(NullCapableValue)getNullCapableValues().get(x);
        nullCapableValue.setNullValue(object,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      int transformationMappingsSize=transformationMappings.size();
      AbstractTransformationMapping transformationMapping;
      for (int x=0; x < transformationMappingsSize; x++) {
        transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,object,query,session);
      }
    }
    if ((this.unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
      if (this.parentRecord != null) {
        unmarshaller.getUnmarshalListener().afterUnmarshal(object,parentRecord.getCurrentObject());
      }
 else {
        unmarshaller.getUnmarshalListener().afterUnmarshal(object,null);
      }
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(object);
    if ((xmlDescriptor != null) && (xmlDescriptor.getEventManager().hasAnyEventListeners())) {
      DescriptorEvent event=new DescriptorEvent(object);
      event.setSession(session);
      event.setRecord(this);
      event.setEventCode(DescriptorEventManager.PostBuildEvent);
      xmlDescriptor.getEventManager().executeEvent(event);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(object);
    if ((xmlDescriptor != null) && (xmlDescriptor.getPrimaryKeyFieldNames().size() > 0)) {
      Vector pk=treeObjectBuilder.extractPrimaryKeyFromObject(object,session);
      CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
      key.setRecord(this);
      key.setObject(object);
      key.releaseDeferredLock();
    }
  }
}"
68476,"public void addAddressDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Address.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping street=new XMLDirectMapping();
  street.setAttributeName(""String_Node_Str"");
  street.setXPath(""String_Node_Str"");
  descriptor.addMapping(street);
  this.addDescriptor(descriptor);
}","public XMLDescriptor addAddressDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Address.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping street=new XMLDirectMapping();
  street.setAttributeName(""String_Node_Str"");
  street.setXPath(""String_Node_Str"");
  descriptor.addMapping(street);
  this.addDescriptor(descriptor);
  return descriptor;
}"
68477,"public void addEmployeeDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Employee.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping addr=new XMLCompositeObjectMapping();
  addr.setAttributeName(""String_Node_Str"");
  addr.setXPath(""String_Node_Str"");
  addr.setReferenceClass(Address.class);
  descriptor.addMapping(addr);
  XMLCompositeCollectionMapping phone=new XMLCompositeCollectionMapping();
  phone.setAttributeName(""String_Node_Str"");
  phone.setXPath(""String_Node_Str"");
  phone.setReferenceClass(PhoneNumber.class);
  phone.useCollectionClass(ArrayList.class);
  descriptor.addMapping(phone);
  XMLAnyObjectMapping object=new XMLAnyObjectMapping();
  object.setAttributeName(""String_Node_Str"");
  object.setXPath(""String_Node_Str"");
  descriptor.addMapping(object);
  XMLAnyCollectionMapping anyCollection=new XMLAnyCollectionMapping();
  anyCollection.setAttributeName(""String_Node_Str"");
  anyCollection.setXPath(""String_Node_Str"");
  anyCollection.useCollectionClass(ArrayList.class);
  descriptor.addMapping(anyCollection);
  this.addDescriptor(descriptor);
}","public XMLDescriptor addEmployeeDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Employee.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLCompositeObjectMapping addr=new XMLCompositeObjectMapping();
  addr.setAttributeName(""String_Node_Str"");
  addr.setXPath(""String_Node_Str"");
  addr.setReferenceClass(Address.class);
  descriptor.addMapping(addr);
  XMLCompositeCollectionMapping phone=new XMLCompositeCollectionMapping();
  phone.setAttributeName(""String_Node_Str"");
  phone.setXPath(""String_Node_Str"");
  phone.setReferenceClass(PhoneNumber.class);
  phone.useCollectionClass(ArrayList.class);
  descriptor.addMapping(phone);
  XMLAnyObjectMapping object=new XMLAnyObjectMapping();
  object.setAttributeName(""String_Node_Str"");
  object.setXPath(""String_Node_Str"");
  descriptor.addMapping(object);
  XMLAnyCollectionMapping anyCollection=new XMLAnyCollectionMapping();
  anyCollection.setAttributeName(""String_Node_Str"");
  anyCollection.setXPath(""String_Node_Str"");
  anyCollection.useCollectionClass(ArrayList.class);
  descriptor.addMapping(anyCollection);
  this.addDescriptor(descriptor);
  return descriptor;
}"
68478,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(RootWithCompositeCollectionTestCases.class);
  suite.addTestSuite(RootWithAnyObjectTestCases.class);
  suite.addTestSuite(RootWithAnyCollectionTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(RootWithCompositeCollectionTestCases.class);
  suite.addTestSuite(RootWithAnyObjectTestCases.class);
  suite.addTestSuite(RootWithAnyCollectionTestCases.class);
  suite.addTestSuite(PostBuildEventTestCases.class);
  return suite;
}"
68479,"/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(""String_Node_Str"");
    if (index == -1) {
      concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        QName qname=new QName(uri,localPart);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}","/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(""String_Node_Str"");
    if (index == -1) {
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
      if (uri == null) {
        concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
      }
 else {
        QName qname=new QName(uri,indicatorValue);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        QName qname=new QName(uri,localPart);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}"
68480,"protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
    attributes.addAttribute(next);
  }
  return attributes;
}","protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(""String_Node_Str"")) {
        getContentHandler().startPrefixMapping(""String_Node_Str"",next.getValue());
      }
    }
    attributes.addAttribute(next);
  }
  return attributes;
}"
68481,"protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().endPrefixMapping(next.getLocalName());
    }
  }
}","protected void endPrefixMappings(Element elem) throws SAXException {
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(XMLConstants.XMLNS)) {
      getContentHandler().endPrefixMapping(next.getLocalName());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null) {
        getContentHandler().endPrefixMapping(""String_Node_Str"");
      }
    }
  }
}"
68482,"public void endPrefixMapping(String prefix) throws SAXException {
  if (null == namespaceMap) {
    return;
  }
  if (uriToPrefixMap != null) {
    String uri=(String)namespaceMap.get(prefix);
    uriToPrefixMap.remove(uri);
  }
  namespaceMap.remove(prefix);
}","public void endPrefixMapping(String prefix) throws SAXException {
  if (null == namespaceMap) {
    return;
  }
  Stack uriStack=(Stack)namespaceMap.get(prefix);
  String uri=null;
  if (uriStack.size() > 0) {
    uri=(String)uriStack.pop();
  }
  if (uri != null && uriToPrefixMap != null) {
    Stack prefixStack=(Stack)uriToPrefixMap.get(uri);
    if (prefixStack != null && prefixStack.size() > 0) {
      prefixStack.pop();
    }
  }
}"
68483,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    String name;
    if (EMPTY_STRING.equals(localName) || (localName == null)) {
      name=qName;
    }
 else {
      name=localName;
    }
    QName rootQName;
    if (EMPTY_STRING.equals(namespaceURI) || (namespaceURI == null)) {
      rootQName=new QName(name);
    }
 else {
      rootQName=new QName(namespaceURI,name);
    }
    XMLDescriptor xmlDescriptor=xmlContext.getDescriptor(rootQName);
    if (null == xmlDescriptor) {
      String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,""String_Node_Str"");
      if (null != type) {
        XPathFragment typeFragment=new XPathFragment(type);
        if (null != namespaceMap) {
          if (null == typeFragment.getPrefix()) {
            typeFragment.setNamespaceURI((String)namespaceMap.get(EMPTY_STRING));
          }
 else {
            typeFragment.setNamespaceURI((String)namespaceMap.get(typeFragment.getPrefix()));
          }
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      }
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
      }
      if (null == xmlDescriptor) {
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setNamespaceMap(namespaceMap);
      unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
    }
    unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.startDocument();
    unmarshalRecord.setNamespaceMap(namespaceMap);
    unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
    xmlReader.setContentHandler(unmarshalRecord);
    try {
      unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
    }
 catch (    SAXNotRecognizedException ex) {
    }
catch (    SAXNotSupportedException ex) {
    }
    object=xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,unmarshaller.isResultAlwaysXMLRoot());
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    String name;
    if (EMPTY_STRING.equals(localName) || (localName == null)) {
      name=qName;
    }
 else {
      name=localName;
    }
    QName rootQName;
    if (EMPTY_STRING.equals(namespaceURI) || (namespaceURI == null)) {
      rootQName=new QName(name);
    }
 else {
      rootQName=new QName(namespaceURI,name);
    }
    XMLDescriptor xmlDescriptor=xmlContext.getDescriptor(rootQName);
    if (null == xmlDescriptor) {
      String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,""String_Node_Str"");
      if (null != type) {
        XPathFragment typeFragment=new XPathFragment(type);
        if (null != namespaceMap) {
          Stack namespaceStack=null;
          if (null == typeFragment.getPrefix()) {
            namespaceStack=(Stack)namespaceMap.get(EMPTY_STRING);
          }
 else {
            namespaceStack=(Stack)namespaceMap.get(typeFragment.getPrefix());
          }
          if (namespaceStack != null && namespaceStack.size() > 0) {
            typeFragment.setNamespaceURI((String)namespaceStack.peek());
          }
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      }
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
      }
      if (null == xmlDescriptor) {
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setNamespaceMap(namespaceMap);
      unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
    }
    unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.startDocument();
    unmarshalRecord.setNamespaceMap(namespaceMap);
    unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
    xmlReader.setContentHandler(unmarshalRecord);
    try {
      unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
    }
 catch (    SAXNotRecognizedException ex) {
    }
catch (    SAXNotSupportedException ex) {
    }
    object=xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,unmarshaller.isResultAlwaysXMLRoot());
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
68484,"public void startPrefixMapping(String prefix,String uri) throws SAXException {
  if (null == namespaceMap) {
    namespaceMap=new HashMap();
  }
  namespaceMap.put(prefix,uri);
  if (uriToPrefixMap == null) {
    uriToPrefixMap=new HashMap();
  }
  uriToPrefixMap.put(uri,prefix);
}","public void startPrefixMapping(String prefix,String uri) throws SAXException {
  if (null == namespaceMap) {
    namespaceMap=new HashMap();
  }
  if (uriToPrefixMap == null) {
    uriToPrefixMap=new HashMap();
  }
  Stack uriStack=(Stack)namespaceMap.get(prefix);
  if (uriStack == null) {
    uriStack=new Stack();
    namespaceMap.put(prefix,uriStack);
  }
  uriStack.push(uri);
  Stack prefixStack=(Stack)uriToPrefixMap.get(uri);
  if (prefixStack == null) {
    prefixStack=new Stack();
    uriToPrefixMap.put(uri,prefixStack);
  }
  prefixStack.push(prefix);
}"
68485,"public void endPrefixMapping(String prefix) throws SAXException {
  this.unmappedContentHandler.endPrefixMapping(prefix);
}","public void endPrefixMapping(String prefix) throws SAXException {
  if (getParentRecord() != null) {
    getParentRecord().endPrefixMapping(prefix);
  }
  this.unmappedContentHandler.endPrefixMapping(prefix);
}"
68486,"public void endPrefixMapping(String prefix) throws SAXException {
  if (null == namespaceMap) {
    return;
  }
  if (uriToPrefixMap != null) {
    String uri=(String)namespaceMap.get(prefix);
    uriToPrefixMap.remove(uri);
  }
  namespaceMap.remove(prefix);
}","public void endPrefixMapping(String prefix) throws SAXException {
  if (null == namespaceMap) {
    return;
  }
  Stack uriStack=(Stack)namespaceMap.get(prefix);
  String uri=null;
  if (uriStack != null && uriStack.size() > 0) {
    uri=(String)uriStack.pop();
  }
  if (uri != null && uriToPrefixMap != null) {
    Stack prefixStack=(Stack)uriToPrefixMap.get(uri);
    if (prefixStack != null && prefixStack.size() > 0) {
      prefixStack.pop();
    }
  }
}"
68487,"public String resolveNamespacePrefix(String prefix){
  String namespaceURI=null;
  if (null != namespaceMap) {
    namespaceURI=(String)namespaceMap.get(prefix);
  }
  if (null == namespaceURI) {
    if (null != getParentRecord()) {
      namespaceURI=getParentRecord().resolveNamespacePrefix(prefix);
    }
  }
  return namespaceURI;
}","public String resolveNamespacePrefix(String prefix){
  String namespaceURI=null;
  if (prefix == null) {
    prefix=""String_Node_Str"";
  }
  if (null != namespaceMap) {
    Stack uriStack=(Stack)namespaceMap.get(prefix);
    if (uriStack != null && uriStack.size() > 0) {
      namespaceURI=(String)uriStack.peek();
    }
  }
  if (null == namespaceURI) {
    if (null != getParentRecord()) {
      namespaceURI=getParentRecord().resolveNamespacePrefix(prefix);
    }
  }
  return namespaceURI;
}"
68488,"public String resolveNamespaceUri(String uri){
  String prefix=null;
  if (null != uriToPrefixMap) {
    prefix=(String)uriToPrefixMap.get(uri);
  }
  if (null == prefix) {
    if (null != getParentRecord()) {
      prefix=getParentRecord().resolveNamespaceUri(uri);
    }
  }
  return prefix;
}","public String resolveNamespaceUri(String uri){
  String prefix=null;
  if (null != uriToPrefixMap) {
    Stack prefixStack=(Stack)uriToPrefixMap.get(uri);
    if (prefixStack != null && prefixStack.size() > 0) {
      prefix=(String)prefixStack.peek();
    }
  }
  if (null == prefix) {
    if (null != getParentRecord()) {
      prefix=getParentRecord().resolveNamespaceUri(uri);
    }
  }
  return prefix;
}"
68489,"public void startPrefixMapping(String prefix,String uri) throws SAXException {
  if (null == namespaceMap) {
    namespaceMap=new HashMap();
  }
  if (uriToPrefixMap == null) {
    uriToPrefixMap=new HashMap();
  }
  namespaceMap.put(prefix,uri);
  uriToPrefixMap.put(uri,prefix);
}","public void startPrefixMapping(String prefix,String uri) throws SAXException {
  if (null == namespaceMap) {
    namespaceMap=new HashMap();
  }
  if (uriToPrefixMap == null) {
    uriToPrefixMap=new HashMap();
  }
  Stack uriStack=(Stack)namespaceMap.get(prefix);
  if (uriStack == null) {
    uriStack=new Stack();
    namespaceMap.put(prefix,uriStack);
  }
  uriStack.push(uri);
  Stack prefixStack=(Stack)uriToPrefixMap.get(uri);
  if (prefixStack == null) {
    prefixStack=new Stack();
    uriToPrefixMap.put(uri,prefixStack);
  }
  prefixStack.push(prefix);
}"
68490,"protected void handleAttributes(Attributes atts){
  for (int i=0; i < atts.getLength(); i++) {
    if ((atts.getQName(i) != null && atts.getQName(i).startsWith(XMLConstants.XMLNS + ""String_Node_Str""))) {
      continue;
    }
    attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
}","protected void handleAttributes(Attributes atts){
  for (int i=0; i < atts.getLength(); i++) {
    if ((atts.getQName(i) != null && (atts.getQName(i).startsWith(XMLConstants.XMLNS + ""String_Node_Str"") || atts.getQName(i).equals(XMLConstants.XMLNS)))) {
      continue;
    }
    attribute(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),atts.getValue(i));
  }
}"
68491,"protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        getWriter().write(' ');
        getWriter().write(XMLConstants.XMLNS);
        getWriter().write(""String_Node_Str"");
        getWriter().write(prefix);
        getWriter().write('=');
        getWriter().write('""');
        getWriter().write(prefixMappings.get(prefix));
        getWriter().write('""');
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","protected void writePrefixMappings(){
  try {
    if (!prefixMappings.isEmpty()) {
      for (java.util.Iterator<String> keys=prefixMappings.keySet().iterator(); keys.hasNext(); ) {
        String prefix=keys.next();
        getWriter().write(' ');
        getWriter().write(XMLConstants.XMLNS);
        if (!prefix.equals(""String_Node_Str"")) {
          getWriter().write(""String_Node_Str"");
          getWriter().write(prefix);
        }
        getWriter().write('=');
        getWriter().write('""');
        getWriter().write(prefixMappings.get(prefix));
        getWriter().write('""');
      }
      prefixMappings.clear();
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
68492,"public String resolveNamespacePrefix(Node contextNode,String namespacePrefix) throws XMLPlatformException {
  if (null == namespacePrefix) {
    if (null == contextNode.getPrefix()) {
      return contextNode.getNamespaceURI();
    }
  }
 else   if (namespacePrefix.equals(contextNode.getPrefix())) {
    return contextNode.getNamespaceURI();
  }
  if (contextNode.getNodeType() == Node.ELEMENT_NODE) {
    Element contextElement=(Element)contextNode;
    Attr namespaceDeclaration=contextElement.getAttributeNode(""String_Node_Str"" + namespacePrefix);
    if (null != namespaceDeclaration) {
      return namespaceDeclaration.getValue();
    }
  }
  Node parentNode=contextNode.getParentNode();
  if (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {
    return resolveNamespacePrefix(parentNode,namespacePrefix);
  }
  return null;
}","public String resolveNamespacePrefix(Node contextNode,String namespacePrefix) throws XMLPlatformException {
  if (null == namespacePrefix) {
    if (null == contextNode.getPrefix()) {
      return contextNode.getNamespaceURI();
    }
  }
 else   if (namespacePrefix.equals(contextNode.getPrefix())) {
    return contextNode.getNamespaceURI();
  }
  if (contextNode.getNodeType() == Node.ELEMENT_NODE) {
    Element contextElement=(Element)contextNode;
    Attr namespaceDeclaration=null;
    if (namespacePrefix != null) {
      namespaceDeclaration=contextElement.getAttributeNode(""String_Node_Str"" + namespacePrefix);
    }
 else {
      namespaceDeclaration=contextElement.getAttributeNode(""String_Node_Str"");
    }
    if (null != namespaceDeclaration) {
      return namespaceDeclaration.getValue();
    }
  }
  Node parentNode=contextNode.getParentNode();
  if (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {
    return resolveNamespacePrefix(parentNode,namespacePrefix);
  }
  return null;
}"
68493,"/** 
 * Returns true if sessions.xml version is previous to 10g.
 */
protected final boolean configVersionIsPre10g(){
  String versionString=this.getConfigFileVersion();
  int version=0;
  for (int i=0; i < versionString.length(); i++) {
    char c=versionString.charAt(i);
    if (Character.isDigit(c))     version*=10;
 else     break;
    version+=Character.digit(c,10);
  }
  return (version < 10);
}","/** 
 * Returns true if sessions.xml version is previous to 10g.   For EL added the version > 3 clause since the version number has reset.   When EL Workbench surpasses 3.0 this will need to be revisited, but perhaps we  won't be supporting opening older TL sessions files and this method can be removed.
 */
protected final boolean configVersionIsPre10g(){
  String versionString=this.getConfigFileVersion();
  int version=0;
  for (int i=0; i < versionString.length(); i++) {
    char c=versionString.charAt(i);
    if (Character.isDigit(c))     version*=10;
 else     break;
    version+=Character.digit(c,10);
  }
  return (version > 3 && version < 10);
}"
68494,"public void addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (anXPathFragment != null && namespaceResolver != null) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
    return;
  }
  int index=children.indexOf(xPathNode);
  if (index >= 0) {
    xPathNode=(XPathNode)children.get(index);
  }
 else {
    xPathNode.setParent(this);
    if (!children.contains(xPathNode)) {
      children.add(xPathNode);
    }
    if (XPathFragment.SELF_FRAGMENT.equals(anXPathFragment)) {
      if (null == selfChildren) {
        selfChildren=new ArrayList();
      }
      if (!selfChildren.contains(xPathNode)) {
        selfChildren.add(xPathNode);
      }
    }
 else {
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
}","public void addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
    return;
  }
  int index=children.indexOf(xPathNode);
  if (index >= 0) {
    xPathNode=(XPathNode)children.get(index);
  }
 else {
    xPathNode.setParent(this);
    if (!children.contains(xPathNode)) {
      children.add(xPathNode);
    }
    if (XPathFragment.SELF_FRAGMENT.equals(anXPathFragment)) {
      if (null == selfChildren) {
        selfChildren=new ArrayList();
      }
      if (!selfChildren.contains(xPathNode)) {
        selfChildren.add(xPathNode);
      }
    }
 else {
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue()) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
}"
68495,"public void setXPath(String xpathString){
  xpath=xpathString;
  if ((xpath.indexOf(""String_Node_Str"") != -1) && (xpath.indexOf(""String_Node_Str"") == -1)) {
    setShouldExecuteSelectNodes(true);
    return;
  }
  if (xpath.indexOf(""String_Node_Str"") != -1) {
    setShouldExecuteSelectNodes(true);
    return;
  }
  shortName=xpathString;
  int attrindex=xpathString.indexOf('@');
  if (attrindex == 0) {
    hasAttribute=true;
    shortName=xpathString.substring(attrindex + 1);
    indexValue=hasIndex(xpathString);
    setupNamespaceInformation(shortName);
    return;
  }
  if (xpathString.startsWith(""String_Node_Str"")) {
    setShouldExecuteSelectNodes(true);
    shortName=xpathString;
    indexValue=hasIndex(xpathString);
    setupNamespaceInformation(shortName);
    return;
  }
  if (xpathString.equals(""String_Node_Str"")) {
    nameIsText=true;
    shortName=xpathString;
    return;
  }
  if (xpathString.equals(""String_Node_Str"")) {
    isSelfFragment=true;
    shortName=xpathString;
    return;
  }
  indexValue=hasIndex(xpathString);
  setupNamespaceInformation(shortName);
}","public void setXPath(String xpathString){
  xpath=xpathString;
  if ((xpath.indexOf(""String_Node_Str"") != -1) && (xpath.indexOf(""String_Node_Str"") == -1)) {
    setShouldExecuteSelectNodes(true);
    return;
  }
  if (xpath.indexOf(""String_Node_Str"") != -1) {
    setShouldExecuteSelectNodes(true);
    return;
  }
  shortName=xpathString;
  int attrindex=xpathString.indexOf('@');
  if (attrindex == 0) {
    hasAttribute=true;
    shortName=xpathString.substring(attrindex + 1);
    indexValue=hasIndex(xpathString);
    setupNamespaceInformation(shortName);
    return;
  }
  if (xpathString.startsWith(""String_Node_Str"")) {
    setShouldExecuteSelectNodes(true);
    shortName=xpathString;
    indexValue=hasIndex(xpathString);
    setupNamespaceInformation(shortName);
    return;
  }
  if (xpathString.equals(""String_Node_Str"")) {
    nameIsText=true;
    shortName=xpathString;
    return;
  }
 else {
    nameIsText=false;
  }
  if (xpathString.equals(""String_Node_Str"")) {
    isSelfFragment=true;
    shortName=xpathString;
    return;
  }
  indexValue=hasIndex(xpathString);
  setupNamespaceInformation(shortName);
}"
68496,"public Object getNonAttributeChild(int index,XPathNode xPathNode){
  Setting setting=settings.get(index);
  if (null == setting.getName()) {
    return xPathNode.getNonAttributeChildrenMap().get(null);
  }
 else {
    indexFragment.setXPath(setting.getName());
    indexFragment.setNamespaceURI(setting.getNamespaceURI());
    return xPathNode.getNonAttributeChildrenMap().get(indexFragment);
  }
}","public Object getNonAttributeChild(int index,XPathNode xPathNode){
  Setting setting=settings.get(index);
  if (null == setting.getName()) {
    return xPathNode.getNonAttributeChildrenMap().get(null);
  }
 else {
    indexFragment.setLocalName(null);
    indexFragment.setXPath(setting.getName());
    indexFragment.setNamespaceURI(setting.getNamespaceURI());
    return xPathNode.getNonAttributeChildrenMap().get(indexFragment);
  }
}"
68497,"public void characters(UnmarshalRecord unmarshalRecord){
  if (!TEXT_XPATH.equals(currentSetting.getName())) {
    Setting parentSetting=currentSetting;
    currentSetting=new Setting(null,TEXT_XPATH);
    if (null != parentSetting) {
      parentSetting.addChild(currentSetting);
    }
  }
}","public void characters(UnmarshalRecord unmarshalRecord){
  if (null == currentSetting || null == currentSetting.getName()) {
    currentSetting=new Setting(null,TEXT_XPATH);
    ((SequencedObject)unmarshalRecord.getCurrentObject()).getSettings().add(currentSetting);
  }
 else   if (!TEXT_XPATH.equals(currentSetting.getName())) {
    Setting parentSetting=currentSetting;
    currentSetting=new Setting(null,TEXT_XPATH);
    if (null != parentSetting) {
      parentSetting.addChild(currentSetting);
    }
  }
}"
68498,"public void endElement(UnmarshalRecord unmarshalRecord){
  if (null == currentSetting) {
    return;
  }
  if (TEXT_XPATH.equals(currentSetting.getName())) {
    currentSetting=currentSetting.getParent().getParent();
  }
 else {
    currentSetting=currentSetting.getParent();
  }
}","public void endElement(UnmarshalRecord unmarshalRecord){
  if (null == currentSetting) {
    return;
  }
  if (TEXT_XPATH.equals(currentSetting.getName())) {
    if (null == currentSetting.getParent()) {
      currentSetting=null;
    }
 else {
      currentSetting=currentSetting.getParent().getParent();
    }
  }
 else {
    currentSetting=currentSetting.getParent();
  }
}"
68499,"public void startElement(UnmarshalRecord unmarshalRecord){
  Setting parentSetting=currentSetting;
  XPathFragment xPathFragment=unmarshalRecord.getXPathNode().getXPathFragment();
  if (null != xPathFragment) {
    currentSetting=new Setting(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
  }
 else {
    currentSetting=new Setting();
  }
  int levelIndex=unmarshalRecord.getLevelIndex();
  if (0 == levelIndex) {
  }
 else   if (1 == levelIndex) {
    ((SequencedObject)unmarshalRecord.getCurrentObject()).getSettings().add(currentSetting);
  }
 else {
    parentSetting.addChild(currentSetting);
  }
}","public void startElement(UnmarshalRecord unmarshalRecord){
  Setting parentSetting;
  if (null == currentSetting) {
    parentSetting=null;
  }
 else   if (TEXT_XPATH.equals(currentSetting.getName())) {
    parentSetting=null;
  }
 else {
    parentSetting=currentSetting;
  }
  XPathFragment xPathFragment=unmarshalRecord.getXPathNode().getXPathFragment();
  if (null != xPathFragment) {
    currentSetting=new Setting(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
  }
 else {
    currentSetting=new Setting();
  }
  int levelIndex=unmarshalRecord.getLevelIndex();
  if (0 == levelIndex) {
  }
 else   if (1 == levelIndex) {
    ((SequencedObject)unmarshalRecord.getCurrentObject()).getSettings().add(currentSetting);
  }
 else {
    parentSetting.addChild(currentSetting);
  }
}"
68500,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (rootElementName == null) {
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      int selfRecordsSize=selfRecords.size();
      for (int x=0; x < selfRecordsSize; x++) {
        ((UnmarshalRecord)selfRecords.get(x)).startElement(namespaceURI,localName,qName,atts);
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (EMPTY_STRING.equals(namespaceURI)) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(""String_Node_Str"");
            attLocalName=qname.substring((idx <= 0) ? 0 : (idx + 1),qname.length());
            String attPrefix=(idx == -1) ? null : qname.substring(0,idx);
            if (((attPrefix != null) && attPrefix.equalsIgnoreCase(""String_Node_Str"")) || ((attPrefix == null) && attLocalName.equalsIgnoreCase(""String_Node_Str""))) {
              attNamespace=XMLConstants.XMLNS_URL;
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=((UnmarshalRecord)selfRecords.get(j));
            attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
            if (attributeNodeValue != null) {
              attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) {
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (rootElementName == null) {
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      int selfRecordsSize=selfRecords.size();
      for (int x=0; x < selfRecordsSize; x++) {
        ((UnmarshalRecord)selfRecords.get(x)).startElement(namespaceURI,localName,qName,atts);
      }
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (EMPTY_STRING.equals(namespaceURI)) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(""String_Node_Str"");
            attLocalName=qname.substring((idx <= 0) ? 0 : (idx + 1),qname.length());
            String attPrefix=(idx == -1) ? null : qname.substring(0,idx);
            if (((attPrefix != null) && attPrefix.equalsIgnoreCase(""String_Node_Str"")) || ((attPrefix == null) && attLocalName.equalsIgnoreCase(""String_Node_Str""))) {
              attNamespace=XMLConstants.XMLNS_URL;
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=((UnmarshalRecord)selfRecords.get(j));
            attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
            if (attributeNodeValue != null) {
              attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
68501,"/** 
 * ADVANCED: Use this method when updating object attribute values, with unmapped objects Integer, String or others. in events to ensure that all required objects are updated.  EclipseLink will automatically update all objects and changesets involved.  EclipseLink will update the field, in the row, to have the new value for the field that this mapping maps to.
 */
public void updateAttributeWithObject(String attributeName,Object value){
  DatabaseMapping mapping=this.query.getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
  if (mapping == null) {
    throw DescriptorException.mappingForAttributeIsMissing(attributeName,getDescriptor());
  }
  Object clone=this.getObject();
  Object cloneValue=value;
  Object original=null;
  if ((this.eventCode == DescriptorEventManager.PostCloneEvent) || (this.eventCode == DescriptorEventManager.PostMergeEvent)) {
    original=this.getOriginalObject();
  }
  Object originalValue=value;
  ObjectChangeSet eventChangeSet=this.getChangeSet();
  Object valueForChangeSet=value;
  if ((this.query != null) && this.query.isObjectLevelModifyQuery()) {
    clone=((ObjectLevelModifyQuery)this.query).getObject();
    eventChangeSet=((ObjectLevelModifyQuery)this.query).getObjectChangeSet();
  }
  ClassDescriptor descriptor=getSession().getDescriptor(value.getClass());
  if (descriptor != null) {
    if (eventChangeSet != null) {
      valueForChangeSet=descriptor.getObjectBuilder().createObjectChangeSet(value,(UnitOfWorkChangeSet)eventChangeSet.getUOWChangeSet(),getSession());
    }
    if (original != null) {
      originalValue=((UnitOfWorkImpl)getSession()).getOriginalVersionOfObject(value);
    }
  }
  if (clone != null) {
    mapping.setRealAttributeValueInObject(clone,cloneValue);
  }
  if (original != null) {
    mapping.setRealAttributeValueInObject(original,originalValue);
  }
  if (getRecord() != null) {
    AbstractRecord tempRow=getDescriptor().getObjectBuilder().createRecord();
    mapping.writeFromObjectIntoRow(clone,tempRow,getSession());
    ((AbstractRecord)getRecord()).mergeFrom(tempRow);
  }
  if (eventChangeSet != null) {
    eventChangeSet.removeChange(attributeName);
    eventChangeSet.addChange(mapping.compareForChange(clone,((UnitOfWorkImpl)getSession()).getBackupClone(clone),eventChangeSet,getSession()));
  }
}","/** 
 * ADVANCED: Use this method when updating object attribute values, with unmapped objects Integer, String or others. in events to ensure that all required objects are updated.  EclipseLink will automatically update all objects and changesets involved.  EclipseLink will update the field, in the row, to have the new value for the field that this mapping maps to.
 */
public void updateAttributeWithObject(String attributeName,Object value){
  DatabaseMapping mapping=this.query.getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
  if (mapping == null) {
    throw DescriptorException.mappingForAttributeIsMissing(attributeName,getDescriptor());
  }
  Object clone=this.getObject();
  Object cloneValue=value;
  Object original=null;
  if ((this.eventCode == DescriptorEventManager.PostCloneEvent) || (this.eventCode == DescriptorEventManager.PostMergeEvent)) {
    original=this.getOriginalObject();
  }
  Object originalValue=value;
  ObjectChangeSet eventChangeSet=this.getChangeSet();
  Object valueForChangeSet=value;
  if ((this.query != null) && this.query.isObjectLevelModifyQuery()) {
    clone=((ObjectLevelModifyQuery)this.query).getObject();
    eventChangeSet=((ObjectLevelModifyQuery)this.query).getObjectChangeSet();
  }
  ClassDescriptor descriptor=getSession().getDescriptor(value.getClass());
  if (descriptor != null) {
    if (eventChangeSet != null) {
      valueForChangeSet=descriptor.getObjectBuilder().createObjectChangeSet(value,(UnitOfWorkChangeSet)eventChangeSet.getUOWChangeSet(),getSession());
    }
    if (original != null) {
      originalValue=((UnitOfWorkImpl)getSession()).getOriginalVersionOfObject(value);
    }
  }
  if (clone != null) {
    mapping.setRealAttributeValueInObject(clone,cloneValue);
  }
  if (original != null) {
    mapping.setRealAttributeValueInObject(original,originalValue);
  }
  if (getRecord() != null) {
    AbstractRecord tempRow=getDescriptor().getObjectBuilder().createRecord(getSession());
    mapping.writeFromObjectIntoRow(clone,tempRow,getSession());
    ((AbstractRecord)getRecord()).mergeFrom(tempRow);
  }
  if (eventChangeSet != null) {
    eventChangeSet.removeChange(attributeName);
    eventChangeSet.addChange(mapping.compareForChange(clone,((UnitOfWorkImpl)getSession()).getBackupClone(clone),eventChangeSet,getSession()));
  }
}"
68502,"/** 
 * ADVANCED: Use this method when updating object attribute values, with unmapped objects Integer, String or others. in events to ensure that all required objects are updated.  EclipseLink will automatically update all objects and changesets involved.  EclipseLink will update the field, in the row, to have the new value for the field that this mapping maps to.  If the attribute being updated is within an aggregate then pass the updated aggregate and the attribute of the aggregate mapping into this method.
 */
public void updateAttributeAddObjectToCollection(String attributeName,Object mapKey,Object value){
  DatabaseMapping mapping=this.query.getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
  if (mapping == null) {
    throw DescriptorException.mappingForAttributeIsMissing(attributeName,getDescriptor());
  }
  Object clone=this.getObject();
  Object cloneValue=value;
  Object original=null;
  if ((this.eventCode == DescriptorEventManager.PostCloneEvent) || (this.eventCode == DescriptorEventManager.PostMergeEvent)) {
    original=this.getOriginalObject();
  }
  Object originalValue=value;
  ObjectChangeSet eventChangeSet=this.getChangeSet();
  Object valueForChangeSet=value;
  if ((this.query != null) && this.query.isObjectLevelModifyQuery()) {
    clone=((ObjectLevelModifyQuery)this.query).getObject();
    eventChangeSet=((ObjectLevelModifyQuery)this.query).getObjectChangeSet();
  }
  ClassDescriptor descriptor=getSession().getDescriptor(value.getClass());
  if (descriptor != null) {
    if (eventChangeSet != null) {
      valueForChangeSet=descriptor.getObjectBuilder().createObjectChangeSet(value,(UnitOfWorkChangeSet)eventChangeSet.getUOWChangeSet(),getSession());
    }
    if (original != null) {
      originalValue=((UnitOfWorkImpl)getSession()).getOriginalVersionOfObject(value);
    }
  }
  if (clone != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(clone,getSession());
    mapping.getContainerPolicy().addInto(mapKey,cloneValue,collection,getSession());
  }
  if (original != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(original,getSession());
    mapping.getContainerPolicy().addInto(mapKey,originalValue,collection,getSession());
  }
  if (getRecord() != null) {
    AbstractRecord tempRow=getDescriptor().getObjectBuilder().createRecord();
    mapping.writeFromObjectIntoRow(clone,tempRow,getSession());
    ((AbstractRecord)getRecord()).mergeFrom(tempRow);
  }
  if (eventChangeSet != null) {
    mapping.simpleAddToCollectionChangeRecord(mapKey,valueForChangeSet,eventChangeSet,getSession());
  }
}","/** 
 * ADVANCED: Use this method when updating object attribute values, with unmapped objects Integer, String or others. in events to ensure that all required objects are updated.  EclipseLink will automatically update all objects and changesets involved.  EclipseLink will update the field, in the row, to have the new value for the field that this mapping maps to.  If the attribute being updated is within an aggregate then pass the updated aggregate and the attribute of the aggregate mapping into this method.
 */
public void updateAttributeAddObjectToCollection(String attributeName,Object mapKey,Object value){
  DatabaseMapping mapping=this.query.getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
  if (mapping == null) {
    throw DescriptorException.mappingForAttributeIsMissing(attributeName,getDescriptor());
  }
  Object clone=this.getObject();
  Object cloneValue=value;
  Object original=null;
  if ((this.eventCode == DescriptorEventManager.PostCloneEvent) || (this.eventCode == DescriptorEventManager.PostMergeEvent)) {
    original=this.getOriginalObject();
  }
  Object originalValue=value;
  ObjectChangeSet eventChangeSet=this.getChangeSet();
  Object valueForChangeSet=value;
  if ((this.query != null) && this.query.isObjectLevelModifyQuery()) {
    clone=((ObjectLevelModifyQuery)this.query).getObject();
    eventChangeSet=((ObjectLevelModifyQuery)this.query).getObjectChangeSet();
  }
  ClassDescriptor descriptor=getSession().getDescriptor(value.getClass());
  if (descriptor != null) {
    if (eventChangeSet != null) {
      valueForChangeSet=descriptor.getObjectBuilder().createObjectChangeSet(value,(UnitOfWorkChangeSet)eventChangeSet.getUOWChangeSet(),getSession());
    }
    if (original != null) {
      originalValue=((UnitOfWorkImpl)getSession()).getOriginalVersionOfObject(value);
    }
  }
  if (clone != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(clone,getSession());
    mapping.getContainerPolicy().addInto(mapKey,cloneValue,collection,getSession());
  }
  if (original != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(original,getSession());
    mapping.getContainerPolicy().addInto(mapKey,originalValue,collection,getSession());
  }
  if (getRecord() != null) {
    AbstractRecord tempRow=getDescriptor().getObjectBuilder().createRecord(getSession());
    mapping.writeFromObjectIntoRow(clone,tempRow,getSession());
    ((AbstractRecord)getRecord()).mergeFrom(tempRow);
  }
  if (eventChangeSet != null) {
    mapping.simpleAddToCollectionChangeRecord(mapKey,valueForChangeSet,eventChangeSet,getSession());
  }
}"
68503,"/** 
 * ADVANCED: Use this method when updating object attribute values, with unmapped objects Integer, String or others. in events to ensure that all required objects are updated.  EclipseLink will automatically update all objects and changesets involved.  EclipseLink will update the field, in the row, to have the new value for the field that this mapping maps to.
 */
public void updateAttributeRemoveObjectFromCollection(String attributeName,Object mapKey,Object value){
  DatabaseMapping mapping=this.query.getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
  if (mapping == null) {
    throw DescriptorException.mappingForAttributeIsMissing(attributeName,getDescriptor());
  }
  Object clone=this.getObject();
  Object cloneValue=value;
  Object original=null;
  if ((this.eventCode == DescriptorEventManager.PostCloneEvent) || (this.eventCode == DescriptorEventManager.PostMergeEvent)) {
    original=this.getOriginalObject();
  }
  Object originalValue=value;
  ObjectChangeSet eventChangeSet=this.getChangeSet();
  Object valueForChangeSet=value;
  if ((this.query != null) && this.query.isObjectLevelModifyQuery()) {
    clone=((ObjectLevelModifyQuery)this.query).getObject();
    eventChangeSet=((ObjectLevelModifyQuery)this.query).getObjectChangeSet();
  }
  ClassDescriptor descriptor=getSession().getDescriptor(value.getClass());
  if (descriptor != null) {
    if (eventChangeSet != null) {
      valueForChangeSet=descriptor.getObjectBuilder().createObjectChangeSet(value,(UnitOfWorkChangeSet)eventChangeSet.getUOWChangeSet(),getSession());
    }
    if (original != null) {
      originalValue=((UnitOfWorkImpl)getSession()).getOriginalVersionOfObject(value);
    }
  }
  if (clone != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(clone,getSession());
    mapping.getContainerPolicy().removeFrom(mapKey,cloneValue,collection,getSession());
  }
  if (original != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(original,getSession());
    mapping.getContainerPolicy().removeFrom(mapKey,originalValue,collection,getSession());
  }
  if (getRecord() != null) {
    AbstractRecord tempRow=getDescriptor().getObjectBuilder().createRecord();
    mapping.writeFromObjectIntoRow(clone,tempRow,getSession());
    ((AbstractRecord)getRecord()).mergeFrom(tempRow);
  }
  if (eventChangeSet != null) {
    mapping.simpleRemoveFromCollectionChangeRecord(mapKey,valueForChangeSet,eventChangeSet,getSession());
  }
}","/** 
 * ADVANCED: Use this method when updating object attribute values, with unmapped objects Integer, String or others. in events to ensure that all required objects are updated.  EclipseLink will automatically update all objects and changesets involved.  EclipseLink will update the field, in the row, to have the new value for the field that this mapping maps to.
 */
public void updateAttributeRemoveObjectFromCollection(String attributeName,Object mapKey,Object value){
  DatabaseMapping mapping=this.query.getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
  if (mapping == null) {
    throw DescriptorException.mappingForAttributeIsMissing(attributeName,getDescriptor());
  }
  Object clone=this.getObject();
  Object cloneValue=value;
  Object original=null;
  if ((this.eventCode == DescriptorEventManager.PostCloneEvent) || (this.eventCode == DescriptorEventManager.PostMergeEvent)) {
    original=this.getOriginalObject();
  }
  Object originalValue=value;
  ObjectChangeSet eventChangeSet=this.getChangeSet();
  Object valueForChangeSet=value;
  if ((this.query != null) && this.query.isObjectLevelModifyQuery()) {
    clone=((ObjectLevelModifyQuery)this.query).getObject();
    eventChangeSet=((ObjectLevelModifyQuery)this.query).getObjectChangeSet();
  }
  ClassDescriptor descriptor=getSession().getDescriptor(value.getClass());
  if (descriptor != null) {
    if (eventChangeSet != null) {
      valueForChangeSet=descriptor.getObjectBuilder().createObjectChangeSet(value,(UnitOfWorkChangeSet)eventChangeSet.getUOWChangeSet(),getSession());
    }
    if (original != null) {
      originalValue=((UnitOfWorkImpl)getSession()).getOriginalVersionOfObject(value);
    }
  }
  if (clone != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(clone,getSession());
    mapping.getContainerPolicy().removeFrom(mapKey,cloneValue,collection,getSession());
  }
  if (original != null) {
    Object collection=mapping.getRealCollectionAttributeValueFromObject(original,getSession());
    mapping.getContainerPolicy().removeFrom(mapKey,originalValue,collection,getSession());
  }
  if (getRecord() != null) {
    AbstractRecord tempRow=getDescriptor().getObjectBuilder().createRecord(getSession());
    mapping.writeFromObjectIntoRow(clone,tempRow,getSession());
    ((AbstractRecord)getRecord()).mergeFrom(tempRow);
  }
  if (eventChangeSet != null) {
    mapping.simpleRemoveFromCollectionChangeRecord(mapKey,valueForChangeSet,eventChangeSet,getSession());
  }
}"
68504,"/** 
 * INTERNAL: Update the row, object and change set with the version value. This handles the version being mapped in nested aggregates, writable or read-only.
 */
protected void updateWriteLockValueForWrite(ObjectLevelModifyQuery query,Object lockValue){
  query.getModifyRow().put(this.writeLockField,lockValue);
  AbstractSession session=query.getSession();
  Object object=query.getObject();
  ObjectChangeSet objectChangeSet=query.getObjectChangeSet();
  if (objectChangeSet == null) {
    if (session.isUnitOfWork() && (((UnitOfWorkImpl)session).getUnitOfWorkChangeSet() != null)) {
      objectChangeSet=(ObjectChangeSet)((UnitOfWorkImpl)session).getUnitOfWorkChangeSet().getObjectChangeSetForClone(object);
    }
  }
  if (this.lockMapping != null) {
    this.lockMapping.setAttributeValueInObject(object,this.lockMapping.getAttributeValue(lockValue,session));
    if (objectChangeSet != null) {
      objectChangeSet.setWriteLockValue(lockValue);
      objectChangeSet.updateChangeRecordForAttribute(this.lockMapping,lockValue,session);
    }
  }
 else {
    ObjectBuilder objectBuilder=this.descriptor.getObjectBuilder();
    AbstractRecord record=objectBuilder.createRecord(1);
    record.put(this.writeLockField,lockValue);
    objectBuilder.assignReturnRow(object,session,record);
    if (objectChangeSet != null) {
      objectChangeSet.setWriteLockValue(lockValue);
      query.getQueryMechanism().updateChangeSet(this.descriptor,objectChangeSet,record,object);
    }
  }
}","/** 
 * INTERNAL: Update the row, object and change set with the version value. This handles the version being mapped in nested aggregates, writable or read-only.
 */
protected void updateWriteLockValueForWrite(ObjectLevelModifyQuery query,Object lockValue){
  query.getModifyRow().put(this.writeLockField,lockValue);
  AbstractSession session=query.getSession();
  Object object=query.getObject();
  ObjectChangeSet objectChangeSet=query.getObjectChangeSet();
  if (objectChangeSet == null) {
    if (session.isUnitOfWork() && (((UnitOfWorkImpl)session).getUnitOfWorkChangeSet() != null)) {
      objectChangeSet=(ObjectChangeSet)((UnitOfWorkImpl)session).getUnitOfWorkChangeSet().getObjectChangeSetForClone(object);
    }
  }
  if (this.lockMapping != null) {
    this.lockMapping.setAttributeValueInObject(object,this.lockMapping.getAttributeValue(lockValue,session));
    if (objectChangeSet != null) {
      objectChangeSet.setWriteLockValue(lockValue);
      objectChangeSet.updateChangeRecordForAttribute(this.lockMapping,lockValue,session);
    }
  }
 else {
    ObjectBuilder objectBuilder=this.descriptor.getObjectBuilder();
    AbstractRecord record=objectBuilder.createRecord(1,session);
    record.put(this.writeLockField,lockValue);
    objectBuilder.assignReturnRow(object,session,record);
    if (objectChangeSet != null) {
      objectChangeSet.setWriteLockValue(lockValue);
      query.getQueryMechanism().updateChangeSet(this.descriptor,objectChangeSet,record,object);
    }
  }
}"
68505,"/** 
 * Set the JCA adapter record.
 */
public void setRecord(Record record){
  this.record=record;
  this.recordName=record.getRecordName();
  this.recordShortDescription=record.getRecordShortDescription();
}","/** 
 * Set the JCA adapter record.
 */
public void setRecord(Record record){
  this.record=record;
  this.recordName=record.getRecordName();
  this.recordShortDescription=record.getRecordShortDescription();
  if (record instanceof XMLRecord) {
    this.session=((XMLRecord)record).getSession();
  }
}"
68506,"/** 
 * Create a TopLink record from the JCA adapter record. This attempts to introspect the record to retrieve the DOM tree.
 */
public EISDOMRecord(Record record){
  this.record=record;
  this.recordName=record.getRecordName();
  this.recordShortDescription=record.getRecordShortDescription();
  if (domMethod == null) {
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          domMethod=AccessController.doPrivileged(new PrivilegedGetMethod(record.getClass(),""String_Node_Str"",null,false));
        }
 catch (        PrivilegedActionException ex) {
          throw (Exception)ex.getCause();
        }
      }
 else {
        domMethod=PrivilegedAccessHelper.getMethod(record.getClass(),""String_Node_Str"",null,false);
      }
    }
 catch (    Exception notFound) {
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            domMethod=AccessController.doPrivileged(new PrivilegedGetMethod(record.getClass(),""String_Node_Str"",null,false));
          }
 catch (          PrivilegedActionException ex) {
            throw (Exception)ex.getCause();
          }
        }
 else {
          domMethod=PrivilegedAccessHelper.getMethod(record.getClass(),""String_Node_Str"",null,false);
        }
      }
 catch (      Exception cantFind) {
        throw new EISException(cantFind);
      }
    }
  }
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        setDOM((Element)AccessController.doPrivileged(new PrivilegedMethodInvoker(domMethod,record,null)));
      }
 catch (      PrivilegedActionException ex) {
        throw (Exception)ex.getCause();
      }
    }
 else {
      setDOM((Element)PrivilegedAccessHelper.invokeMethod(domMethod,record,null));
    }
  }
 catch (  Exception error) {
    throw new EISException(error);
  }
}","/** 
 * Create a TopLink record from the JCA adapter record. This attempts to introspect the record to retrieve the DOM tree.
 */
public EISDOMRecord(Record record){
  this.record=record;
  this.recordName=record.getRecordName();
  this.recordShortDescription=record.getRecordShortDescription();
  if (record instanceof XMLRecord) {
    this.session=((XMLRecord)record).getSession();
  }
  if (domMethod == null) {
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          domMethod=AccessController.doPrivileged(new PrivilegedGetMethod(record.getClass(),""String_Node_Str"",null,false));
        }
 catch (        PrivilegedActionException ex) {
          throw (Exception)ex.getCause();
        }
      }
 else {
        domMethod=PrivilegedAccessHelper.getMethod(record.getClass(),""String_Node_Str"",null,false);
      }
    }
 catch (    Exception notFound) {
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            domMethod=AccessController.doPrivileged(new PrivilegedGetMethod(record.getClass(),""String_Node_Str"",null,false));
          }
 catch (          PrivilegedActionException ex) {
            throw (Exception)ex.getCause();
          }
        }
 else {
          domMethod=PrivilegedAccessHelper.getMethod(record.getClass(),""String_Node_Str"",null,false);
        }
      }
 catch (      Exception cantFind) {
        throw new EISException(cantFind);
      }
    }
  }
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        setDOM((Element)AccessController.doPrivileged(new PrivilegedMethodInvoker(domMethod,record,null)));
      }
 catch (      PrivilegedActionException ex) {
        throw (Exception)ex.getCause();
      }
    }
 else {
      setDOM((Element)PrivilegedAccessHelper.invokeMethod(domMethod,record,null));
    }
  }
 catch (  Exception error) {
    throw new EISException(error);
  }
}"
68507,"/** 
 * INTERNAL: Build the nested row.
 */
public AbstractRecord buildNestedRowFromFieldValue(Object fieldValue){
  if (!getDataFormat().equals(XML)) {
    if (!(fieldValue instanceof List)) {
      return new DatabaseRecord(1);
    }
    List nestedRows=((List)fieldValue);
    if (nestedRows.isEmpty()) {
      return new DatabaseRecord(1);
    }
 else {
      if (!(nestedRows.get(0) instanceof AbstractRecord)) {
        return new DatabaseRecord(1);
      }
      return (AbstractRecord)nestedRows.get(0);
    }
  }
  if (fieldValue instanceof XMLRecord) {
    return (XMLRecord)fieldValue;
  }
  if (!(fieldValue instanceof Vector)) {
    return getObjectBuilder().createRecord();
  }
  Vector nestedRows=(Vector)fieldValue;
  if (nestedRows.isEmpty()) {
    return getObjectBuilder().createRecord();
  }
 else {
    if (!(nestedRows.firstElement() instanceof XMLRecord)) {
      return getObjectBuilder().createRecord();
    }
    return (XMLRecord)nestedRows.firstElement();
  }
}","/** 
 * INTERNAL: Build the nested row.
 */
public AbstractRecord buildNestedRowFromFieldValue(Object fieldValue){
  if (!getDataFormat().equals(XML)) {
    if (!(fieldValue instanceof List)) {
      return new DatabaseRecord(1);
    }
    List nestedRows=((List)fieldValue);
    if (nestedRows.isEmpty()) {
      return new DatabaseRecord(1);
    }
 else {
      if (!(nestedRows.get(0) instanceof AbstractRecord)) {
        return new DatabaseRecord(1);
      }
      return (AbstractRecord)nestedRows.get(0);
    }
  }
  if (fieldValue instanceof XMLRecord) {
    return (XMLRecord)fieldValue;
  }
  if (!(fieldValue instanceof Vector)) {
    return getObjectBuilder().createRecord(null);
  }
  Vector nestedRows=(Vector)fieldValue;
  if (nestedRows.isEmpty()) {
    return getObjectBuilder().createRecord(null);
  }
 else {
    if (!(nestedRows.firstElement() instanceof XMLRecord)) {
      return getObjectBuilder().createRecord(null);
    }
    return (XMLRecord)nestedRows.firstElement();
  }
}"
68508,"/** 
 * Create a DOM input record for this interaction. Convet the database row or arguments into an XML DOM tree.
 */
public Record createInputRecord(EISAccessor accessor){
  Record record=accessor.getEISPlatform().createDOMRecord(getInputRecordName(),accessor);
  Element dom=createInputDOM(accessor);
  accessor.getEISPlatform().setDOMInRecord(dom,record,this,accessor);
  return record;
}","/** 
 * Create a DOM input record for this interaction. Convert the database row or arguments into an XML DOM tree.
 */
public Record createInputRecord(EISAccessor accessor){
  Record record=accessor.getEISPlatform().createDOMRecord(getInputRecordName(),accessor);
  Element dom=createInputDOM(accessor);
  accessor.getEISPlatform().setDOMInRecord(dom,record,this,accessor);
  if (record instanceof XMLRecord) {
    ((XMLRecord)record).setSession(this.getQuery().getSession());
  }
  return record;
}"
68509,"/** 
 * INTERNAL: Use the createRecord method on ObjectBuilder in case the root element is namespace qualified
 */
protected XMLRecord createXMLRecord(String rootName){
  if (getQuery().getDescriptor() instanceof EISDescriptor && (getQuery().getDescriptor() != null)) {
    XMLRecord record=(XMLRecord)((XMLObjectBuilder)this.getQuery().getDescriptor().getObjectBuilder()).createRecord(getInputRootElementName());
    record.setSession(getQuery().getSession());
    return record;
  }
 else {
    return new org.eclipse.persistence.oxm.record.DOMRecord(getInputRootElementName());
  }
}","/** 
 * INTERNAL: Use the createRecord method on ObjectBuilder in case the root element is namespace qualified
 */
protected XMLRecord createXMLRecord(String rootName){
  XMLRecord xmlRec;
  if (getQuery().getDescriptor() != null && getQuery().getDescriptor() instanceof EISDescriptor) {
    xmlRec=(XMLRecord)((XMLObjectBuilder)this.getQuery().getDescriptor().getObjectBuilder()).createRecord(getInputRootElementName(),getQuery().getSession());
  }
 else {
    xmlRec=new org.eclipse.persistence.oxm.record.DOMRecord(getInputRootElementName());
    xmlRec.setSession(getQuery().getSession());
  }
  return xmlRec;
}"
68510,"/** 
 * Create a DOM for this interaction. Convet the database row or arguments into an XML DOM tree.
 */
public Element createInputDOM(EISAccessor accessor){
  Element dom=null;
  if ((getInputRow() != null) && (!hasArguments())) {
    if (getInputResultPath().length() == 0) {
      if (getInputRow() instanceof XMLRecord) {
        dom=(Element)((XMLRecord)getInputRow()).getDOM();
        if (!dom.getTagName().equals(getInputRootElementName())) {
          XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
          parameterRow.put(""String_Node_Str"" + getInputRootElementName(),getInputRow());
          dom=(Element)parameterRow.getDOM();
        }
      }
 else {
        XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
        for (int index=0; index < getInputRow().size(); index++) {
          parameterRow.put(getInputRow().getFields().elementAt(index),getInputRow().getValues().elementAt(index));
        }
        dom=(Element)parameterRow.getDOM();
      }
    }
 else {
      XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
      parameterRow.put(getInputResultPath(),getInputRow());
      dom=(Element)parameterRow.getDOM();
    }
  }
 else {
    XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
    for (int index=0; index < getArgumentNames().size(); index++) {
      String parameterName=(String)getArgumentNames().get(index);
      Object parameter=getParameters().get(index);
      if ((parameter == null) && (getInputRow() != null)) {
        parameter=getInputRow().get(parameterName);
      }
      parameterRow.put(parameterName,parameter);
    }
    dom=(Element)parameterRow.getDOM();
  }
  return dom;
}","/** 
 * Create a DOM for this interaction. Convert the database row or arguments into an XML DOM tree.
 */
public Element createInputDOM(EISAccessor accessor){
  Element dom=null;
  if ((getInputRow() != null) && (!hasArguments())) {
    if (getInputResultPath().length() == 0) {
      if (getInputRow() instanceof XMLRecord) {
        dom=(Element)((XMLRecord)getInputRow()).getDOM();
        if (!dom.getTagName().equals(getInputRootElementName())) {
          XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
          parameterRow.put(""String_Node_Str"" + getInputRootElementName(),getInputRow());
          dom=(Element)parameterRow.getDOM();
        }
      }
 else {
        XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
        for (int index=0; index < getInputRow().size(); index++) {
          parameterRow.put(getInputRow().getFields().elementAt(index),getInputRow().getValues().elementAt(index));
        }
        dom=(Element)parameterRow.getDOM();
      }
    }
 else {
      XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
      parameterRow.put(getInputResultPath(),getInputRow());
      dom=(Element)parameterRow.getDOM();
    }
  }
 else {
    XMLRecord parameterRow=createXMLRecord(getInputRootElementName());
    for (int index=0; index < getArgumentNames().size(); index++) {
      String parameterName=(String)getArgumentNames().get(index);
      Object parameter=getParameters().get(index);
      if ((parameter == null) && (getInputRow() != null)) {
        parameter=getInputRow().get(parameterName);
      }
      parameterRow.put(parameterName,parameter);
    }
    dom=(Element)parameterRow.getDOM();
  }
  return dom;
}"
68511,"/** 
 * Build the row representation of the object for update. The row built does not contain entries for uninstantiated attributes.
 */
public AbstractRecord buildRowForUpdate(WriteObjectQuery query){
  AbstractRecord databaseRow=createRecord();
  for (Iterator mappings=getNonPrimaryKeyMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    mapping.writeFromObjectIntoRowForUpdate(query,databaseRow);
  }
  if (this.descriptor.hasInheritance() && this.descriptor.isAggregateDescriptor()) {
    if (query.getObject() != null) {
      if (query.getBackupClone() == null) {
        this.descriptor.getInheritancePolicy().addClassIndicatorFieldToRow(databaseRow);
      }
 else {
        if (!query.getObject().getClass().equals(query.getBackupClone().getClass())) {
          this.descriptor.getInheritancePolicy().addClassIndicatorFieldToRow(databaseRow);
        }
      }
    }
  }
  return databaseRow;
}","/** 
 * Build the row representation of the object for update. The row built does not contain entries for uninstantiated attributes.
 */
public AbstractRecord buildRowForUpdate(WriteObjectQuery query){
  AbstractRecord databaseRow=createRecord(query.getSession());
  for (Iterator mappings=getNonPrimaryKeyMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    mapping.writeFromObjectIntoRowForUpdate(query,databaseRow);
  }
  if (this.descriptor.hasInheritance() && this.descriptor.isAggregateDescriptor()) {
    if (query.getObject() != null) {
      if (query.getBackupClone() == null) {
        this.descriptor.getInheritancePolicy().addClassIndicatorFieldToRow(databaseRow);
      }
 else {
        if (!query.getObject().getClass().equals(query.getBackupClone().getClass())) {
          this.descriptor.getInheritancePolicy().addClassIndicatorFieldToRow(databaseRow);
        }
      }
    }
  }
  return databaseRow;
}"
68512,"/** 
 * Build the row from the primary key values.
 */
public AbstractRecord buildRowFromPrimaryKeyValues(Vector key,AbstractSession session){
  AbstractRecord databaseRow=createRecord(key.size());
  int keySize=key.size();
  for (int index=0; index < keySize; index++) {
    DatabaseField field=this.descriptor.getPrimaryKeyFields().get(index);
    Object value=key.elementAt(index);
    value=session.getPlatform(this.descriptor.getJavaClass()).getConversionManager().convertObject(value,field.getType());
    databaseRow.put(field,value);
  }
  return databaseRow;
}","/** 
 * Build the row from the primary key values.
 */
public AbstractRecord buildRowFromPrimaryKeyValues(Vector key,AbstractSession session){
  AbstractRecord databaseRow=createRecord(key.size(),session);
  int keySize=key.size();
  for (int index=0; index < keySize; index++) {
    DatabaseField field=this.descriptor.getPrimaryKeyFields().get(index);
    Object value=key.elementAt(index);
    value=session.getPlatform(this.descriptor.getJavaClass()).getConversionManager().convertObject(value,field.getType());
    databaseRow.put(field,value);
  }
  return databaseRow;
}"
68513,"/** 
 * Return the row with primary keys and their values from the given expression.
 */
public Vector extractPrimaryKeyFromExpression(boolean requiresExactMatch,Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(requiresExactMatch,this.descriptor,primaryKeyRow,translationRow);
  if (requiresExactMatch && (!isValid)) {
    return null;
  }
  if (primaryKeyRow.size() != this.descriptor.getPrimaryKeyFields().size()) {
    return null;
  }
  return extractPrimaryKeyFromRow(primaryKeyRow,session);
}","/** 
 * Return the row with primary keys and their values from the given expression.
 */
public Vector extractPrimaryKeyFromExpression(boolean requiresExactMatch,Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size(),session);
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(requiresExactMatch,this.descriptor,primaryKeyRow,translationRow);
  if (requiresExactMatch && (!isValid)) {
    return null;
  }
  if (primaryKeyRow.size() != this.descriptor.getPrimaryKeyFields().size()) {
    return null;
  }
  return extractPrimaryKeyFromRow(primaryKeyRow,session);
}"
68514,"/** 
 * Extract primary key attribute values from the domainObject.
 */
public Vector extractPrimaryKeyFromObject(Object domainObject,AbstractSession session,boolean shouldReturnNullIfNull){
  boolean isPersistenceEntity=domainObject instanceof PersistenceEntity;
  if (isPersistenceEntity) {
    Vector key=((PersistenceEntity)domainObject)._persistence_getPKVector();
    if (key != null) {
      return key;
    }
  }
  ClassDescriptor descriptor=this.descriptor;
  boolean isNull=false;
  if (descriptor.hasInheritance() && (domainObject.getClass() != descriptor.getJavaClass()) && (!domainObject.getClass().getSuperclass().equals(descriptor.getJavaClass()))) {
    return session.getDescriptor(domainObject).getObjectBuilder().extractPrimaryKeyFromObject(domainObject,session,shouldReturnNullIfNull);
  }
 else {
    List primaryKeyFields=descriptor.getPrimaryKeyFields();
    Vector primaryKeyValues=new NonSynchronizedVector(primaryKeyFields.size());
    List mappings=getPrimaryKeyMappings();
    int size=mappings.size();
    if (descriptor.hasSimplePrimaryKey()) {
      for (int index=0; index < size; index++) {
        AbstractDirectMapping mapping=(AbstractDirectMapping)mappings.get(index);
        Object keyValue=mapping.valueFromObject(domainObject,(DatabaseField)primaryKeyFields.get(index),session);
        if (keyValue == null || ((size == 1) && Helper.isEquivalentToNull(keyValue))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(keyValue);
      }
    }
 else {
      AbstractRecord databaseRow=createRecord(size);
      for (int index=0; index < size; index++) {
        DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
        if (mapping != null) {
          mapping.writeFromObjectIntoRow(domainObject,databaseRow,session);
        }
      }
      List primaryKeyClassifications=getPrimaryKeyClassifications();
      Platform platform=session.getPlatform(domainObject.getClass());
      for (int index=0; index < size; index++) {
        Class classification=(Class)primaryKeyClassifications.get(index);
        Object value=databaseRow.get((DatabaseField)primaryKeyFields.get(index));
        if (value == null || ((size == 1) && Helper.isEquivalentToNull(value))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(platform.convertObject(value,classification));
      }
    }
    if (isPersistenceEntity && (!isNull)) {
      ((PersistenceEntity)domainObject)._persistence_setPKVector(primaryKeyValues);
    }
    return primaryKeyValues;
  }
}","/** 
 * Extract primary key attribute values from the domainObject.
 */
public Vector extractPrimaryKeyFromObject(Object domainObject,AbstractSession session,boolean shouldReturnNullIfNull){
  boolean isPersistenceEntity=domainObject instanceof PersistenceEntity;
  if (isPersistenceEntity) {
    Vector key=((PersistenceEntity)domainObject)._persistence_getPKVector();
    if (key != null) {
      return key;
    }
  }
  ClassDescriptor descriptor=this.descriptor;
  boolean isNull=false;
  if (descriptor.hasInheritance() && (domainObject.getClass() != descriptor.getJavaClass()) && (!domainObject.getClass().getSuperclass().equals(descriptor.getJavaClass()))) {
    return session.getDescriptor(domainObject).getObjectBuilder().extractPrimaryKeyFromObject(domainObject,session,shouldReturnNullIfNull);
  }
 else {
    List primaryKeyFields=descriptor.getPrimaryKeyFields();
    Vector primaryKeyValues=new NonSynchronizedVector(primaryKeyFields.size());
    List mappings=getPrimaryKeyMappings();
    int size=mappings.size();
    if (descriptor.hasSimplePrimaryKey()) {
      for (int index=0; index < size; index++) {
        AbstractDirectMapping mapping=(AbstractDirectMapping)mappings.get(index);
        Object keyValue=mapping.valueFromObject(domainObject,(DatabaseField)primaryKeyFields.get(index),session);
        if (keyValue == null || ((size == 1) && Helper.isEquivalentToNull(keyValue))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(keyValue);
      }
    }
 else {
      AbstractRecord databaseRow=createRecord(size,session);
      for (int index=0; index < size; index++) {
        DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
        if (mapping != null) {
          mapping.writeFromObjectIntoRow(domainObject,databaseRow,session);
        }
      }
      List primaryKeyClassifications=getPrimaryKeyClassifications();
      Platform platform=session.getPlatform(domainObject.getClass());
      for (int index=0; index < size; index++) {
        Class classification=(Class)primaryKeyClassifications.get(index);
        Object value=databaseRow.get((DatabaseField)primaryKeyFields.get(index));
        if (value == null || ((size == 1) && Helper.isEquivalentToNull(value))) {
          if (shouldReturnNullIfNull) {
            return null;
          }
          isNull=true;
        }
        primaryKeyValues.add(platform.convertObject(value,classification));
      }
    }
    if (isPersistenceEntity && (!isNull)) {
      ((PersistenceEntity)domainObject)._persistence_setPKVector(primaryKeyValues);
    }
    return primaryKeyValues;
  }
}"
68515,"/** 
 * Return the row with primary keys and their values from the given expression.
 */
public AbstractRecord extractPrimaryKeyRowFromExpression(Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(true,this.descriptor,primaryKeyRow,translationRow);
  if (!isValid) {
    return null;
  }
  if (primaryKeyRow.size() != this.descriptor.getPrimaryKeyFields().size()) {
    return null;
  }
  return primaryKeyRow;
}","/** 
 * Return the row with primary keys and their values from the given expression.
 */
public AbstractRecord extractPrimaryKeyRowFromExpression(Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size(),session);
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(true,this.descriptor,primaryKeyRow,translationRow);
  if (!isValid) {
    return null;
  }
  if (primaryKeyRow.size() != this.descriptor.getPrimaryKeyFields().size()) {
    return null;
  }
  return primaryKeyRow;
}"
68516,"/** 
 * Create a new row/record for the object builder. This allows subclasses to define different record types.
 */
public AbstractRecord createRecord(int size){
  return new DatabaseRecord(size);
}","/** 
 * Create a new row/record for the object builder. This allows subclasses to define different record types.
 */
public AbstractRecord createRecord(int size,AbstractSession session){
  return new DatabaseRecord(size);
}"
68517,"/** 
 * Build the row representation of an object. The row built is used only for translations for the expressions in the expression framework.
 */
public AbstractRecord buildRowForTranslation(Object object,AbstractSession session){
  AbstractRecord databaseRow=createRecord();
  for (Iterator mappings=getPrimaryKeyMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    if (mapping != null) {
      mapping.writeFromObjectIntoRow(object,databaseRow,session);
    }
  }
  addPrimaryKeyForNonDefaultTable(databaseRow,object,session);
  return databaseRow;
}","/** 
 * Build the row representation of an object. The row built is used only for translations for the expressions in the expression framework.
 */
public AbstractRecord buildRowForTranslation(Object object,AbstractSession session){
  AbstractRecord databaseRow=createRecord(session);
  for (Iterator mappings=getPrimaryKeyMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    if (mapping != null) {
      mapping.writeFromObjectIntoRow(object,databaseRow,session);
    }
  }
  addPrimaryKeyForNonDefaultTable(databaseRow,object,session);
  return databaseRow;
}"
68518,"/** 
 * INTERNAL: Update the object primary key by fetching a new sequence number from the accessor. This assume the uses sequence numbers check has already been done.
 * @return the sequence value or null if not assigned.
 * @exception DatabaseException - an error has occurred on the database.
 */
public Object assignSequenceNumber(Object object,AbstractSession writeSession) throws DatabaseException {
  DatabaseField sequenceNumberField=this.descriptor.getSequenceNumberField();
  Object existingValue=getBaseValueForField(sequenceNumberField,object);
  if (existingValue != null) {
    if (!writeSession.getSequencing().shouldOverrideExistingValue(object.getClass(),existingValue)) {
      return null;
    }
  }
  Object sequenceValue=writeSession.getSequencing().getNextValue(object.getClass());
  writeSession.log(SessionLog.FINEST,SessionLog.SEQUENCING,""String_Node_Str"",sequenceValue,object);
  if (sequenceValue == null) {
    return null;
  }
  AbstractRecord tempRow=createRecord(1);
  tempRow.put(sequenceNumberField,sequenceValue);
  ReadObjectQuery query=new ReadObjectQuery();
  query.setSession(writeSession);
  DatabaseMapping mapping=getBaseMappingForField(sequenceNumberField);
  Object sequenceIntoObject=getParentObjectForField(sequenceNumberField,object);
  Object convertedSequenceValue=mapping.readFromRowIntoObject(tempRow,null,sequenceIntoObject,query);
  clearPrimaryKey(object);
  return convertedSequenceValue;
}","/** 
 * INTERNAL: Update the object primary key by fetching a new sequence number from the accessor. This assume the uses sequence numbers check has already been done.
 * @return the sequence value or null if not assigned.
 * @exception DatabaseException - an error has occurred on the database.
 */
public Object assignSequenceNumber(Object object,AbstractSession writeSession) throws DatabaseException {
  DatabaseField sequenceNumberField=this.descriptor.getSequenceNumberField();
  Object existingValue=getBaseValueForField(sequenceNumberField,object);
  if (existingValue != null) {
    if (!writeSession.getSequencing().shouldOverrideExistingValue(object.getClass(),existingValue)) {
      return null;
    }
  }
  Object sequenceValue=writeSession.getSequencing().getNextValue(object.getClass());
  writeSession.log(SessionLog.FINEST,SessionLog.SEQUENCING,""String_Node_Str"",sequenceValue,object);
  if (sequenceValue == null) {
    return null;
  }
  AbstractRecord tempRow=createRecord(1,writeSession);
  tempRow.put(sequenceNumberField,sequenceValue);
  ReadObjectQuery query=new ReadObjectQuery();
  query.setSession(writeSession);
  DatabaseMapping mapping=getBaseMappingForField(sequenceNumberField);
  Object sequenceIntoObject=getParentObjectForField(sequenceNumberField,object);
  Object convertedSequenceValue=mapping.readFromRowIntoObject(tempRow,null,sequenceIntoObject,query);
  clearPrimaryKey(object);
  return convertedSequenceValue;
}"
68519,"/** 
 * Build the row representation of the object for update. The row built does not contain entries for uninstantiated attributes.
 */
public AbstractRecord buildTemplateUpdateRow(AbstractSession session){
  AbstractRecord databaseRow=createRecord();
  for (Iterator mappings=getNonPrimaryKeyMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    mapping.writeUpdateFieldsIntoRow(databaseRow,session);
  }
  if (getDescriptor().usesOptimisticLocking()) {
    getDescriptor().getOptimisticLockingPolicy().addLockFieldsToUpdateRow(databaseRow,session);
  }
  return databaseRow;
}","/** 
 * Build the row representation of the object for update. The row built does not contain entries for uninstantiated attributes.
 */
public AbstractRecord buildTemplateUpdateRow(AbstractSession session){
  AbstractRecord databaseRow=createRecord(session);
  for (Iterator mappings=getNonPrimaryKeyMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    mapping.writeUpdateFieldsIntoRow(databaseRow,session);
  }
  if (getDescriptor().usesOptimisticLocking()) {
    getDescriptor().getOptimisticLockingPolicy().addLockFieldsToUpdateRow(databaseRow,session);
  }
  return databaseRow;
}"
68520,"/** 
 * Build the row representation of the object for update. The row built does not contain entries for uninstantiated attributes.
 */
public AbstractRecord buildRowForUpdateWithChangeSet(WriteObjectQuery query){
  AbstractRecord databaseRow=createRecord();
  AbstractSession session=query.getSession();
  List changes=query.getObjectChangeSet().getChanges();
  int size=changes.size();
  for (int index=0; index < size; index++) {
    ChangeRecord changeRecord=(ChangeRecord)changes.get(index);
    DatabaseMapping mapping=changeRecord.getMapping();
    mapping.writeFromObjectIntoRowWithChangeRecord(changeRecord,databaseRow,session);
  }
  return databaseRow;
}","/** 
 * Build the row representation of the object for update. The row built does not contain entries for uninstantiated attributes.
 */
public AbstractRecord buildRowForUpdateWithChangeSet(WriteObjectQuery query){
  AbstractRecord databaseRow=createRecord(query.getSession());
  AbstractSession session=query.getSession();
  List changes=query.getObjectChangeSet().getChanges();
  int size=changes.size();
  for (int index=0; index < size; index++) {
    ChangeRecord changeRecord=(ChangeRecord)changes.get(index);
    DatabaseMapping mapping=changeRecord.getMapping();
    mapping.writeFromObjectIntoRowWithChangeRecord(changeRecord,databaseRow,session);
  }
  return databaseRow;
}"
68521,"/** 
 * Extract primary key attribute values from the domainObject.
 */
public AbstractRecord extractPrimaryKeyRowFromObject(Object domainObject,AbstractSession session){
  AbstractRecord databaseRow=createRecord(getPrimaryKeyMappings().size());
  for (int index=0; index < getPrimaryKeyMappings().size(); index++) {
    getPrimaryKeyMappings().get(index).writeFromObjectIntoRow(domainObject,databaseRow,session);
  }
  if (this.descriptor.hasSimplePrimaryKey()) {
    return databaseRow;
  }
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  for (int index=0; index < primaryKeyFields.size(); index++) {
    Class classification=getPrimaryKeyClassifications().get(index);
    DatabaseField field=(DatabaseField)primaryKeyFields.get(index);
    Object value=databaseRow.get(field);
    primaryKeyRow.put(field,session.getPlatform(domainObject.getClass()).convertObject(value,classification));
  }
  return primaryKeyRow;
}","/** 
 * Extract primary key attribute values from the domainObject.
 */
public AbstractRecord extractPrimaryKeyRowFromObject(Object domainObject,AbstractSession session){
  AbstractRecord databaseRow=createRecord(getPrimaryKeyMappings().size(),session);
  for (int index=0; index < getPrimaryKeyMappings().size(); index++) {
    getPrimaryKeyMappings().get(index).writeFromObjectIntoRow(domainObject,databaseRow,session);
  }
  if (this.descriptor.hasSimplePrimaryKey()) {
    return databaseRow;
  }
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size(),session);
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  for (int index=0; index < primaryKeyFields.size(); index++) {
    Class classification=getPrimaryKeyClassifications().get(index);
    DatabaseField field=(DatabaseField)primaryKeyFields.get(index);
    Object value=databaseRow.get(field);
    primaryKeyRow.put(field,session.getPlatform(domainObject.getClass()).convertObject(value,classification));
  }
  return primaryKeyRow;
}"
68522,"/** 
 * Build the row representation of an object.
 */
public AbstractRecord buildRowForWhereClause(ObjectLevelModifyQuery query){
  AbstractRecord databaseRow=createRecord();
  for (Iterator mappings=this.descriptor.getMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    mapping.writeFromObjectIntoRowForWhereClause(query,databaseRow);
  }
  if (!this.descriptor.isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(databaseRow);
  }
  return databaseRow;
}","/** 
 * Build the row representation of an object.
 */
public AbstractRecord buildRowForWhereClause(ObjectLevelModifyQuery query){
  AbstractRecord databaseRow=createRecord(query.getSession());
  for (Iterator mappings=this.descriptor.getMappings().iterator(); mappings.hasNext(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.next();
    mapping.writeFromObjectIntoRowForWhereClause(query,databaseRow);
  }
  if (!this.descriptor.isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(databaseRow);
  }
  return databaseRow;
}"
68523,"public static javax.xml.bind.JAXBContext createContext(String contextPath,ClassLoader classLoader) throws JAXBException {
  try {
    XMLContext xmlContext=new XMLContext(contextPath,classLoader);
    return new org.eclipse.persistence.jaxb.JAXBContext(xmlContext);
  }
 catch (  Exception ex) {
  }
  ArrayList classes=new ArrayList();
  StringTokenizer tokenizer=new StringTokenizer(contextPath,""String_Node_Str"");
  while (tokenizer.hasMoreElements()) {
    String path=tokenizer.nextToken();
    try {
      Class objectFactory=classLoader.loadClass(path + ""String_Node_Str"");
      classes.add(objectFactory);
    }
 catch (    Exception ex) {
    }
    try {
      classLoader.loadClass(path + ""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    InputStream jaxbIndex=classLoader.getResourceAsStream(path.replace('.','/') + ""String_Node_Str"");
    if (jaxbIndex != null) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(jaxbIndex));
      try {
        String line=reader.readLine();
        while (line != null) {
          String className=path + ""String_Node_Str"" + line.trim();
          try {
            classes.add(classLoader.loadClass(className));
          }
 catch (          Exception ex) {
          }
          line=reader.readLine();
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  Class[] classArray=new Class[classes.size()];
  for (int i=0; i < classes.size(); i++) {
    classArray[i]=(Class)classes.get(i);
  }
  return createContext(classArray,null,classLoader);
}","public static javax.xml.bind.JAXBContext createContext(String contextPath,ClassLoader classLoader) throws JAXBException {
  try {
    XMLContext xmlContext=new XMLContext(contextPath,classLoader);
    return new org.eclipse.persistence.jaxb.JAXBContext(xmlContext);
  }
 catch (  ValidationException vex) {
    if (vex.getErrorCode() != 7095) {
      throw new JAXBException(vex);
    }
  }
catch (  Exception ex) {
    throw new JAXBException(ex);
  }
  ArrayList classes=new ArrayList();
  StringTokenizer tokenizer=new StringTokenizer(contextPath,""String_Node_Str"");
  while (tokenizer.hasMoreElements()) {
    String path=tokenizer.nextToken();
    try {
      Class objectFactory=classLoader.loadClass(path + ""String_Node_Str"");
      classes.add(objectFactory);
    }
 catch (    Exception ex) {
    }
    try {
      classLoader.loadClass(path + ""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    InputStream jaxbIndex=classLoader.getResourceAsStream(path.replace('.','/') + ""String_Node_Str"");
    if (jaxbIndex != null) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(jaxbIndex));
      try {
        String line=reader.readLine();
        while (line != null) {
          String className=path + ""String_Node_Str"" + line.trim();
          try {
            classes.add(classLoader.loadClass(className));
          }
 catch (          Exception ex) {
          }
          line=reader.readLine();
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  if (classes.size() == 0) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.noObjectFactoryOrJaxbIndexInPath(contextPath));
  }
  Class[] classArray=new Class[classes.size()];
  for (int i=0; i < classes.size(); i++) {
    classArray[i]=(Class)classes.get(i);
  }
  return createContext(classArray,null,classLoader);
}"
68524,"private void reloadGroups(XSNamedMap modelGroupDefs){
  Collection removedGroups=new HashBag(this.modelGroupDefinitions.values());
  for (int i=modelGroupDefs.getLength() - 1; i >= 0; i--) {
    ModelGroupDefinition group=this.reloadGroup((XSModelGroupDefinition)modelGroupDefs.item(i));
    removedGroups.remove(group);
  }
  for (Iterator stream=removedGroups.iterator(); stream.hasNext(); ) {
    this.removeGroup((ModelGroupDefinition)stream.next());
  }
}","private void reloadGroups(XSNamedMap modelGroupDefs){
  Collection removedGroups=new HashBag(this.modelGroupDefinitions.values());
  for (int i=modelGroupDefs.getLength() - 1; i >= 0; i--) {
    XSModelGroupDefinition modelGroupDef=(XSModelGroupDefinition)modelGroupDefs.item(i);
    String ns=modelGroupDef.getNamespace();
    if (ns == null) {
      ns=""String_Node_Str"";
    }
    if (ns.equals(getNamespaceUrl())) {
      ModelGroupDefinition group=this.reloadGroup(modelGroupDef);
      removedGroups.remove(group);
    }
  }
  for (Iterator stream=removedGroups.iterator(); stream.hasNext(); ) {
    this.removeGroup((ModelGroupDefinition)stream.next());
  }
}"
68525,"private void reloadElements(XSNamedMap elementDeclarations){
  Collection removedElements=new HashBag(this.elementDeclarations.values());
  for (int i=elementDeclarations.getLength() - 1; i >= 0; i--) {
    ExplicitElementDeclaration element=this.reloadElement((XSElementDecl)elementDeclarations.item(i));
    removedElements.remove(element);
  }
  for (Iterator stream=removedElements.iterator(); stream.hasNext(); ) {
    this.removeElement((ExplicitElementDeclaration)stream.next());
  }
}","private void reloadElements(XSNamedMap elementDeclarations){
  Collection removedElements=new HashBag(this.elementDeclarations.values());
  for (int i=elementDeclarations.getLength() - 1; i >= 0; i--) {
    XSElementDecl elementDecl=(XSElementDecl)elementDeclarations.item(i);
    String ns=elementDecl.getNamespace();
    if (ns == null) {
      ns=""String_Node_Str"";
    }
    if (ns.equals(this.getNamespaceUrl())) {
      ExplicitElementDeclaration element=this.reloadElement(elementDecl);
      removedElements.remove(element);
    }
  }
  for (Iterator stream=removedElements.iterator(); stream.hasNext(); ) {
    this.removeElement((ExplicitElementDeclaration)stream.next());
  }
}"
68526,"private void reloadAttributes(XSNamedMap attributeDeclarations){
  Collection removedAttributes=new HashBag(this.attributeDeclarations.values());
  for (int i=attributeDeclarations.getLength() - 1; i >= 0; i--) {
    ExplicitAttributeDeclaration attribute=this.reloadAttribute((XSAttributeDecl)attributeDeclarations.item(i));
    removedAttributes.remove(attribute);
  }
  for (Iterator stream=removedAttributes.iterator(); stream.hasNext(); ) {
    this.removeAttribute((ExplicitAttributeDeclaration)stream.next());
  }
}","private void reloadAttributes(XSNamedMap attributeDeclarations){
  Collection removedAttributes=new HashBag(this.attributeDeclarations.values());
  for (int i=attributeDeclarations.getLength() - 1; i >= 0; i--) {
    XSAttributeDecl attrDecl=(XSAttributeDecl)attributeDeclarations.item(i);
    String ns=attrDecl.getNamespace();
    if (ns == null) {
      ns=""String_Node_Str"";
    }
    if (ns.equals(getNamespaceUrl())) {
      ExplicitAttributeDeclaration attribute=this.reloadAttribute(attrDecl);
      removedAttributes.remove(attribute);
    }
  }
  for (Iterator stream=removedAttributes.iterator(); stream.hasNext(); ) {
    this.removeAttribute((ExplicitAttributeDeclaration)stream.next());
  }
}"
68527,"private void reloadTypes(XSNamedMap typeDefs){
  Collection removedTypeNames=CollectionTools.collection(this.typeDefinitions.keySet().iterator());
  for (int i=typeDefs.getLength() - 1; i >= 0; i--) {
    XSTypeDefinition typeDef=(XSTypeDefinition)typeDefs.item(i);
    ExplicitSchemaTypeDefinition type=null;
    if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(typeDef.getNamespace())) {
      if (typeDef.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {
        type=this.reloadSimpleType((XSSimpleTypeDecl)typeDef);
      }
 else {
        type=this.reloadComplexType((XSComplexTypeDecl)typeDef);
      }
      removedTypeNames.remove(type.getName());
    }
  }
  for (Iterator stream=removedTypeNames.iterator(); stream.hasNext(); ) {
    this.removeType((String)stream.next());
  }
}","private void reloadTypes(XSNamedMap typeDefs){
  Collection removedTypeNames=CollectionTools.collection(this.typeDefinitions.keySet().iterator());
  for (int i=typeDefs.getLength() - 1; i >= 0; i--) {
    XSTypeDefinition typeDef=(XSTypeDefinition)typeDefs.item(i);
    ExplicitSchemaTypeDefinition type=null;
    String ns=typeDef.getNamespace();
    if (ns == null) {
      ns=""String_Node_Str"";
    }
    if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(typeDef.getNamespace()) && ns.equals(getNamespaceUrl())) {
      if (typeDef.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {
        type=this.reloadSimpleType((XSSimpleTypeDecl)typeDef);
      }
 else {
        type=this.reloadComplexType((XSComplexTypeDecl)typeDef);
      }
      removedTypeNames.remove(type.getName());
    }
  }
  for (Iterator stream=removedTypeNames.iterator(); stream.hasNext(); ) {
    this.removeType((String)stream.next());
  }
}"
68528,"/** 
 * Constructor called from the EntityManagerFactory to create an EntityManager
 * @param factory the EntityMangerFactoryImpl that created this entity manager.Note: The properties argument is provided to allow properties to be passed into this EntityManager, but there are currently no such properties implemented
 */
public EntityManagerImpl(EntityManagerFactoryImpl factory,Map properties,boolean propagatePersistenceContext,boolean extended){
  this.factory=factory;
  this.serverSession=factory.getServerSession();
  detectTransactionWrapper();
  this.extended=true;
  this.propagatePersistenceContext=false;
  this.properties=properties;
  processProperties();
  flushMode=FlushModeType.AUTO;
}","/** 
 * Constructor called from the EntityManagerFactory to create an EntityManager
 * @param factory the EntityMangerFactoryImpl that created this entity manager.Note: The properties argument is provided to allow properties to be passed into this EntityManager, but there are currently no such properties implemented
 */
public EntityManagerImpl(EntityManagerFactoryImpl factory,Map properties,boolean propagatePersistenceContext,boolean extended){
  this.factory=factory;
  this.serverSession=factory.getServerSession();
  detectTransactionWrapper();
  this.extended=true;
  this.propagatePersistenceContext=false;
  if (properties != null) {
    this.properties=new HashMap(properties);
  }
  processProperties();
  flushMode=FlushModeType.AUTO;
}"
68529,"public static QueryException expressionDoesNotSupportPartialAttributeReading(Expression expression){
  Object[] args={expression};
  QueryException queryException=new QueryException(ExceptionMessageGenerator.buildMessage(QueryException.class,EXPRESSION_DOES_NOT_SUPPORT_PARTAIL_ATTRIBUTE_READING,args));
  queryException.setErrorCode(EXPRESSION_DOES_NOT_SUPPORT_PARTAIL_ATTRIBUTE_READING);
  return queryException;
}","public static QueryException expressionDoesNotSupportPartialAttributeReading(Expression expression){
  Object[] args={expression};
  QueryException queryException=new QueryException(ExceptionMessageGenerator.buildMessage(QueryException.class,EXPRESSION_DOES_NOT_SUPPORT_PARTIAL_ATTRIBUTE_READING,args));
  queryException.setErrorCode(EXPRESSION_DOES_NOT_SUPPORT_PARTIAL_ATTRIBUTE_READING);
  return queryException;
}"
68530,"/** 
 * Delete the first phone number on the employee with multiple phone numbers.
 */
private void deleteTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_deleteException=e;
  }
}","/** 
 * Delete the first phone number on the employee with multiple phone numbers.
 */
private void deleteTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    getEntityManager().remove(((Vector)employee.getPhoneNumbers()).firstElement());
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_deleteException=e;
  }
}"
68531,"/** 
 * Update the phone numbers on the employee with multiple phone numbers.
 */
private void updateTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    LinkedList phones=(LinkedList)employee.getPhoneNumbers();
    Iterator e=phones.listIterator();
    while (e.hasNext()) {
      PhoneNumber phone=(PhoneNumber)e.next();
      phone.setAreaCode(""String_Node_Str"");
    }
    getEntityManager().persist(employee);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_updateException=e;
  }
}","/** 
 * Update the phone numbers on the employee with multiple phone numbers.
 */
private void updateTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    Vector phones=(Vector)employee.getPhoneNumbers();
    Enumeration e=phones.elements();
    while (e.hasMoreElements()) {
      PhoneNumber phone=(PhoneNumber)e.nextElement();
      phone.setAreaCode(""String_Node_Str"");
    }
    getEntityManager().persist(employee);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_updateException=e;
  }
}"
68532,"public void testSelectPhoneNumberNumberWithEmployeeWithFirstNameFirst(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((java.util.LinkedList)emp.getPhoneNumbers()).getFirst();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder();
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(firstName).and(phones.get(""String_Node_Str"").equal(areaCode));
  ReportQuery rq=new ReportQuery();
  rq.setSelectionCriteria(whereClause);
  rq.addAttribute(""String_Node_Str"",phones.get(""String_Node_Str""));
  rq.setReferenceClass(Employee.class);
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + firstName + ""String_Node_Str""+ areaCode+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}","public void testSelectPhoneNumberNumberWithEmployeeWithFirstNameFirst(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((Vector)emp.getPhoneNumbers()).firstElement();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder();
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(firstName).and(phones.get(""String_Node_Str"").equal(areaCode));
  ReportQuery rq=new ReportQuery();
  rq.setSelectionCriteria(whereClause);
  rq.addAttribute(""String_Node_Str"",phones.get(""String_Node_Str""));
  rq.setReferenceClass(Employee.class);
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + firstName + ""String_Node_Str""+ areaCode+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}"
68533,"public void testPrimaryKeysSpecifiedProblem(){
  String errorName=ProblemConstants.EIS_DESCRIPTOR_NO_PRIMARY_KEYS_SPECIFIED;
  checkEisDescriptorsForFalseFailures(errorName);
  MWRootEisDescriptor employeeDescriptor=(MWRootEisDescriptor)this.getEmployeeEisDescriptor();
  MWEisPrimaryKeyPolicy pkPolicy=((MWEisTransactionalPolicy)employeeDescriptor.getTransactionalPolicy()).getPrimaryKeyPolicy();
  Collection primaryKeyXpaths=new ArrayList();
  for (Iterator stream=pkPolicy.primaryKeyXpaths(); stream.hasNext(); ) {
    primaryKeyXpaths.add(stream.next());
  }
  pkPolicy.clearPrimaryKeys();
  assertTrue(""String_Node_Str"",this.hasProblem(errorName,employeeDescriptor));
  for (Iterator stream=primaryKeyXpaths.iterator(); stream.hasNext(); ) {
    pkPolicy.addPrimaryKey((String)stream.next());
  }
  assertTrue(""String_Node_Str"",!this.hasProblem(errorName,employeeDescriptor));
}","public void testPrimaryKeysSpecifiedProblem(){
  String errorName=ProblemConstants.EIS_DESCRIPTOR_NO_PRIMARY_KEYS_SPECIFIED;
  checkEisDescriptorsForFalseFailures(errorName);
  MWRootEisDescriptor employeeDescriptor=(MWRootEisDescriptor)this.getEmployeeEisDescriptor();
  MWXmlPrimaryKeyPolicy pkPolicy=((MWEisTransactionalPolicy)employeeDescriptor.getTransactionalPolicy()).getPrimaryKeyPolicy();
  Collection primaryKeyXpaths=new ArrayList();
  for (Iterator stream=pkPolicy.primaryKeyXpaths(); stream.hasNext(); ) {
    primaryKeyXpaths.add(stream.next());
  }
  pkPolicy.clearPrimaryKeys();
  assertTrue(""String_Node_Str"",this.hasProblem(errorName,employeeDescriptor));
  for (Iterator stream=primaryKeyXpaths.iterator(); stream.hasNext(); ) {
    pkPolicy.addPrimaryKey((String)stream.next());
  }
  assertTrue(""String_Node_Str"",!this.hasProblem(errorName,employeeDescriptor));
}"
68534,"public void initializeEmployeeDescriptor(){
  MWRootEisDescriptor employeeDescriptor=getEmployeeDescriptor();
  employeeDescriptor.addInterfaceAliasPolicy();
  MWClass interfaceAlias=typeNamed(""String_Node_Str"");
  ((MWDescriptorInterfaceAliasPolicy)employeeDescriptor.getInterfaceAliasPolicy()).setInterfaceAlias(interfaceAlias);
  MWClass employeeClass=employeeDescriptor.getMWClass();
  MWElementDeclaration employeeElement=this.getEmployeeSchema().element(""String_Node_Str"");
  employeeDescriptor.setSchemaContext(employeeElement);
  MWEisTransactionalPolicy transactionalPolicy=(MWEisTransactionalPolicy)employeeDescriptor.getTransactionalPolicy();
  transactionalPolicy.setConformResultsInUnitOfWork(true);
  transactionalPolicy.getRefreshCachePolicy().setDisableCacheHits(true);
  transactionalPolicy.getRefreshCachePolicy().setAlwaysRefreshCache(true);
  MWEisPrimaryKeyPolicy primaryKeyPolicy=transactionalPolicy.getPrimaryKeyPolicy();
  primaryKeyPolicy.addPrimaryKey(""String_Node_Str"");
  MWEisQueryManager queryManager=(MWEisQueryManager)employeeDescriptor.getQueryManager();
  MWEisInteraction readObjectInteraction=queryManager.getReadObjectInteraction();
  readObjectInteraction.setFunctionName(""String_Node_Str"");
  readObjectInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWXmlDirectMapping idMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  idMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping firstNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  firstNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping lastNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  lastNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping genderMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  genderMapping.getXmlField().setXpath(""String_Node_Str"");
  MWObjectTypeConverter genderConverter=genderMapping.setObjectTypeConverter();
  genderConverter.setAttributeType(new MWTypeDeclaration(genderConverter,genderMapping.typeNamed(""String_Node_Str"")));
  try {
    genderConverter.addValuePair(""String_Node_Str"",""String_Node_Str"");
    genderConverter.addValuePair(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ConversionValueException cve) {
  }
  genderConverter.setDefaultAttributeValue(""String_Node_Str"");
  MWXmlTransformationMapping normalHoursMapping=(MWXmlTransformationMapping)employeeDescriptor.addTransformationMapping(employeeClass.attributeNamed(""String_Node_Str""));
  normalHoursMapping.setAttributeTransformer(normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  MWXmlDirectCollectionMapping responsibilitiesMapping=(MWXmlDirectCollectionMapping)employeeDescriptor.addDirectCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  responsibilitiesMapping.getXmlField().setXpath(""String_Node_Str"");
  MWCompositeObjectMapping addressMapping=employeeDescriptor.addCompositeObjectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  addressMapping.getXmlField().setXpath(""String_Node_Str"");
  addressMapping.setReferenceDescriptor(this.getAddressDescriptor());
  MWCompositeCollectionMapping phoneNumbersMapping=employeeDescriptor.addCompositeCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  phoneNumbersMapping.setReferenceDescriptor(this.getPhoneNumberDescriptor());
  phoneNumbersMapping.getXmlField().setXpath(""String_Node_Str"");
  ((MWMapContainerPolicy)phoneNumbersMapping.getContainerPolicy()).setKeyMethod(this.getPhoneNumberDescriptor().getMWClass().methodWithSignature(""String_Node_Str""));
  MWCompositeCollectionMapping dependentsMapping=employeeDescriptor.addCompositeCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  dependentsMapping.setReferenceDescriptor(this.getDependentDescriptor());
  dependentsMapping.getXmlField().setXpath(""String_Node_Str"");
  MWEisOneToOneMapping managerMapping=employeeDescriptor.addEisOneToOneMapping(employeeClass.attributeNamed(""String_Node_Str""));
  managerMapping.setReferenceDescriptor(this.getEmployeeDescriptor());
  managerMapping.addFieldPair(""String_Node_Str"",""String_Node_Str"");
  managerMapping.addFieldPair(""String_Node_Str"",""String_Node_Str"");
  managerMapping.setUseValueHolderIndirection();
  managerMapping.setUseDescriptorReadObjectInteraction(false);
  managerMapping.getSelectionInteraction().setFunctionName(""String_Node_Str"");
}","public void initializeEmployeeDescriptor(){
  MWRootEisDescriptor employeeDescriptor=getEmployeeDescriptor();
  employeeDescriptor.addInterfaceAliasPolicy();
  MWClass interfaceAlias=typeNamed(""String_Node_Str"");
  ((MWDescriptorInterfaceAliasPolicy)employeeDescriptor.getInterfaceAliasPolicy()).setInterfaceAlias(interfaceAlias);
  MWClass employeeClass=employeeDescriptor.getMWClass();
  MWElementDeclaration employeeElement=this.getEmployeeSchema().element(""String_Node_Str"");
  employeeDescriptor.setSchemaContext(employeeElement);
  MWEisTransactionalPolicy transactionalPolicy=(MWEisTransactionalPolicy)employeeDescriptor.getTransactionalPolicy();
  transactionalPolicy.setConformResultsInUnitOfWork(true);
  transactionalPolicy.getRefreshCachePolicy().setDisableCacheHits(true);
  transactionalPolicy.getRefreshCachePolicy().setAlwaysRefreshCache(true);
  MWXmlPrimaryKeyPolicy primaryKeyPolicy=transactionalPolicy.getPrimaryKeyPolicy();
  primaryKeyPolicy.addPrimaryKey(""String_Node_Str"");
  MWEisQueryManager queryManager=(MWEisQueryManager)employeeDescriptor.getQueryManager();
  MWEisInteraction readObjectInteraction=queryManager.getReadObjectInteraction();
  readObjectInteraction.setFunctionName(""String_Node_Str"");
  readObjectInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWXmlDirectMapping idMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  idMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping firstNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  firstNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping lastNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  lastNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping genderMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  genderMapping.getXmlField().setXpath(""String_Node_Str"");
  MWObjectTypeConverter genderConverter=genderMapping.setObjectTypeConverter();
  genderConverter.setAttributeType(new MWTypeDeclaration(genderConverter,genderMapping.typeNamed(""String_Node_Str"")));
  try {
    genderConverter.addValuePair(""String_Node_Str"",""String_Node_Str"");
    genderConverter.addValuePair(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ConversionValueException cve) {
  }
  genderConverter.setDefaultAttributeValue(""String_Node_Str"");
  MWXmlTransformationMapping normalHoursMapping=(MWXmlTransformationMapping)employeeDescriptor.addTransformationMapping(employeeClass.attributeNamed(""String_Node_Str""));
  normalHoursMapping.setAttributeTransformer(normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  MWXmlDirectCollectionMapping responsibilitiesMapping=(MWXmlDirectCollectionMapping)employeeDescriptor.addDirectCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  responsibilitiesMapping.getXmlField().setXpath(""String_Node_Str"");
  MWCompositeObjectMapping addressMapping=employeeDescriptor.addCompositeObjectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  addressMapping.getXmlField().setXpath(""String_Node_Str"");
  addressMapping.setReferenceDescriptor(this.getAddressDescriptor());
  MWCompositeCollectionMapping phoneNumbersMapping=employeeDescriptor.addCompositeCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  phoneNumbersMapping.setReferenceDescriptor(this.getPhoneNumberDescriptor());
  phoneNumbersMapping.getXmlField().setXpath(""String_Node_Str"");
  ((MWMapContainerPolicy)phoneNumbersMapping.getContainerPolicy()).setKeyMethod(this.getPhoneNumberDescriptor().getMWClass().methodWithSignature(""String_Node_Str""));
  MWCompositeCollectionMapping dependentsMapping=employeeDescriptor.addCompositeCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  dependentsMapping.setReferenceDescriptor(this.getDependentDescriptor());
  dependentsMapping.getXmlField().setXpath(""String_Node_Str"");
  MWEisOneToOneMapping managerMapping=employeeDescriptor.addEisOneToOneMapping(employeeClass.attributeNamed(""String_Node_Str""));
  managerMapping.setReferenceDescriptor(this.getEmployeeDescriptor());
  managerMapping.addFieldPair(""String_Node_Str"",""String_Node_Str"");
  managerMapping.addFieldPair(""String_Node_Str"",""String_Node_Str"");
  managerMapping.setUseValueHolderIndirection();
  managerMapping.setUseDescriptorReadObjectInteraction(false);
  managerMapping.getSelectionInteraction().setFunctionName(""String_Node_Str"");
}"
68535,"public void initializeProjectDescriptor(){
  MWRootEisDescriptor projectDescriptor=this.getProjectDescriptor();
  MWClass projectClass=projectDescriptor.getMWClass();
  MWComplexTypeDefinition projectComplexType=this.getProjectSchema().complexType(""String_Node_Str"");
  MWElementDeclaration projectElement=this.getProjectSchema().element(""String_Node_Str"");
  projectDescriptor.addInheritancePolicy();
  MWEisDescriptorInheritancePolicy inheritancePolicy=(MWEisDescriptorInheritancePolicy)projectDescriptor.getInheritancePolicy();
  inheritancePolicy.setIsRoot(true);
  MWXmlClassIndicatorFieldPolicy classIndicatorPolicy=(MWXmlClassIndicatorFieldPolicy)inheritancePolicy.getClassIndicatorPolicy();
  classIndicatorPolicy.setUseXSIType(true);
  MWClassIndicatorValue classIndicatorValue=classIndicatorPolicy.getClassIndicatorValueForDescriptor(projectDescriptor);
  classIndicatorValue.setInclude(true);
  classIndicatorValue.setIndicatorValue(""String_Node_Str"");
  projectDescriptor.setSchemaContext(projectComplexType);
  projectDescriptor.setDefaultRootElement(projectElement);
  MWEisTransactionalPolicy transactionalPolicy=(MWEisTransactionalPolicy)projectDescriptor.getTransactionalPolicy();
  transactionalPolicy.setConformResultsInUnitOfWork(true);
  transactionalPolicy.getRefreshCachePolicy().setDisableCacheHits(true);
  transactionalPolicy.getRefreshCachePolicy().setAlwaysRefreshCache(true);
  MWEisPrimaryKeyPolicy primaryKeyPolicy=transactionalPolicy.getPrimaryKeyPolicy();
  primaryKeyPolicy.addPrimaryKey(""String_Node_Str"");
  MWXmlDirectMapping idMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  idMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping nameMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  nameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping descriptionMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  descriptionMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping versionMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  versionMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping endDateMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  endDateMapping.getXmlField().setXpath(""String_Node_Str"");
}","public void initializeProjectDescriptor(){
  MWRootEisDescriptor projectDescriptor=this.getProjectDescriptor();
  MWClass projectClass=projectDescriptor.getMWClass();
  MWComplexTypeDefinition projectComplexType=this.getProjectSchema().complexType(""String_Node_Str"");
  MWElementDeclaration projectElement=this.getProjectSchema().element(""String_Node_Str"");
  projectDescriptor.addInheritancePolicy();
  MWEisDescriptorInheritancePolicy inheritancePolicy=(MWEisDescriptorInheritancePolicy)projectDescriptor.getInheritancePolicy();
  inheritancePolicy.setIsRoot(true);
  MWXmlClassIndicatorFieldPolicy classIndicatorPolicy=(MWXmlClassIndicatorFieldPolicy)inheritancePolicy.getClassIndicatorPolicy();
  classIndicatorPolicy.setUseXSIType(true);
  MWClassIndicatorValue classIndicatorValue=classIndicatorPolicy.getClassIndicatorValueForDescriptor(projectDescriptor);
  classIndicatorValue.setInclude(true);
  classIndicatorValue.setIndicatorValue(""String_Node_Str"");
  projectDescriptor.setSchemaContext(projectComplexType);
  projectDescriptor.setDefaultRootElement(projectElement);
  MWEisTransactionalPolicy transactionalPolicy=(MWEisTransactionalPolicy)projectDescriptor.getTransactionalPolicy();
  transactionalPolicy.setConformResultsInUnitOfWork(true);
  transactionalPolicy.getRefreshCachePolicy().setDisableCacheHits(true);
  transactionalPolicy.getRefreshCachePolicy().setAlwaysRefreshCache(true);
  MWXmlPrimaryKeyPolicy primaryKeyPolicy=transactionalPolicy.getPrimaryKeyPolicy();
  primaryKeyPolicy.addPrimaryKey(""String_Node_Str"");
  MWXmlDirectMapping idMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  idMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping nameMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  nameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping descriptionMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  descriptionMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping versionMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  versionMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping endDateMapping=(MWXmlDirectMapping)projectDescriptor.addDirectMapping(projectClass.attributeNamed(""String_Node_Str""));
  endDateMapping.getXmlField().setXpath(""String_Node_Str"");
}"
68536,"public void initializeEmployeeDescriptor(){
  MWRootEisDescriptor employeeDescriptor=getEmployeeDescriptor();
  MWXmlSchema employeeSchema=(MWXmlSchema)getProject().getSchemaRepository().schemas().next();
  MWElementDeclaration employeeElement=employeeSchema.element(""String_Node_Str"");
  MWClass employeeClass=employeeDescriptor.getMWClass();
  employeeDescriptor.setSchemaContext(employeeElement);
  MWEisPrimaryKeyPolicy primaryKeyPolicy=((MWEisTransactionalPolicy)employeeDescriptor.getTransactionalPolicy()).getPrimaryKeyPolicy();
  primaryKeyPolicy.addPrimaryKey(""String_Node_Str"");
  MWEisQueryManager queryManager=(MWEisQueryManager)employeeDescriptor.getQueryManager();
  MWEisInteraction readObjectInteraction=queryManager.getReadObjectInteraction();
  readObjectInteraction.setFunctionName(""String_Node_Str"");
  readObjectInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWEisInteraction insertInteraction=queryManager.getInsertInteraction();
  insertInteraction.setFunctionName(""String_Node_Str"");
  insertInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWEisInteraction updateInteraction=queryManager.getUpdateInteraction();
  updateInteraction.setFunctionName(""String_Node_Str"");
  updateInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWXmlDirectMapping idMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  idMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping firstNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  firstNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping lastNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  lastNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectCollectionMapping responsibilitiesMapping=(MWXmlDirectCollectionMapping)employeeDescriptor.addDirectCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  responsibilitiesMapping.getXmlField().setXpath(""String_Node_Str"");
  responsibilitiesMapping.getContainerPolicy().getDefaultingContainerClass().usesDefaultContainerClass();
  MWXmlTransformationMapping normalHoursMapping=(MWXmlTransformationMapping)employeeDescriptor.addTransformationMapping(employeeClass.attributeNamed(""String_Node_Str""));
  normalHoursMapping.setAttributeTransformer(normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  employeeDescriptor.addReturningPolicy();
  MWEisReturningPolicy returningPolicy=(MWEisReturningPolicy)employeeDescriptor.getReturningPolicy();
  returningPolicy.addInsertFieldReadOnlyFlag(""String_Node_Str"").setReturnOnly(true);
  returningPolicy.addUpdateField(""String_Node_Str"");
}","public void initializeEmployeeDescriptor(){
  MWRootEisDescriptor employeeDescriptor=getEmployeeDescriptor();
  MWXmlSchema employeeSchema=(MWXmlSchema)getProject().getSchemaRepository().schemas().next();
  MWElementDeclaration employeeElement=employeeSchema.element(""String_Node_Str"");
  MWClass employeeClass=employeeDescriptor.getMWClass();
  employeeDescriptor.setSchemaContext(employeeElement);
  MWXmlPrimaryKeyPolicy primaryKeyPolicy=((MWEisTransactionalPolicy)employeeDescriptor.getTransactionalPolicy()).getPrimaryKeyPolicy();
  primaryKeyPolicy.addPrimaryKey(""String_Node_Str"");
  MWEisQueryManager queryManager=(MWEisQueryManager)employeeDescriptor.getQueryManager();
  MWEisInteraction readObjectInteraction=queryManager.getReadObjectInteraction();
  readObjectInteraction.setFunctionName(""String_Node_Str"");
  readObjectInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWEisInteraction insertInteraction=queryManager.getInsertInteraction();
  insertInteraction.setFunctionName(""String_Node_Str"");
  insertInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWEisInteraction updateInteraction=queryManager.getUpdateInteraction();
  updateInteraction.setFunctionName(""String_Node_Str"");
  updateInteraction.addInputArgument(""String_Node_Str"",""String_Node_Str"");
  MWXmlDirectMapping idMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  idMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping firstNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  firstNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectMapping lastNameMapping=(MWXmlDirectMapping)employeeDescriptor.addDirectMapping(employeeClass.attributeNamed(""String_Node_Str""));
  lastNameMapping.getXmlField().setXpath(""String_Node_Str"");
  MWXmlDirectCollectionMapping responsibilitiesMapping=(MWXmlDirectCollectionMapping)employeeDescriptor.addDirectCollectionMapping(employeeClass.attributeNamed(""String_Node_Str""));
  responsibilitiesMapping.getXmlField().setXpath(""String_Node_Str"");
  responsibilitiesMapping.getContainerPolicy().getDefaultingContainerClass().usesDefaultContainerClass();
  MWXmlTransformationMapping normalHoursMapping=(MWXmlTransformationMapping)employeeDescriptor.addTransformationMapping(employeeClass.attributeNamed(""String_Node_Str""));
  normalHoursMapping.setAttributeTransformer(normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  normalHoursMapping.addFieldTransformerAssociation(""String_Node_Str"",normalHoursMapping.typeFor(NormalHoursTransformer.class));
  employeeDescriptor.addReturningPolicy();
  MWEisReturningPolicy returningPolicy=(MWEisReturningPolicy)employeeDescriptor.getReturningPolicy();
  returningPolicy.addInsertFieldReadOnlyFlag(""String_Node_Str"").setReturnOnly(true);
  returningPolicy.addUpdateField(""String_Node_Str"");
}"
68537,"/** 
 * ADVANCED: Set all of the objects of a specific class to be invalid in TopLink's identity maps. User can set the recurse flag to false if they do not want to invalidate all the classes within an inheritance tree.
 */
public void invalidateClass(Class myClass,boolean recurse){
  IdentityMap identityMap=this.getIdentityMap(myClass);
synchronized (identityMap) {
    Enumeration keys=identityMap.keys();
    while (keys.hasMoreElements()) {
      CacheKey key=(CacheKey)keys.nextElement();
      Object obj=key.getObject();
      if (recurse || ((obj != null) && obj.getClass().equals(myClass))) {
        key.setInvalidationState(CacheKey.CACHE_KEY_INVALID);
      }
    }
  }
}","/** 
 * ADVANCED: Set all of the objects of a specific class to be invalid in TopLink's identity maps. User can set the recurse flag to false if they do not want to invalidate all the classes within an inheritance tree.
 */
public void invalidateClass(Class myClass,boolean recurse){
  IdentityMap identityMap=this.getIdentityMap(myClass);
  Enumeration keys=identityMap.keys();
  while (keys.hasMoreElements()) {
    CacheKey key=(CacheKey)keys.nextElement();
    Object obj=key.getObject();
    if (recurse || ((obj != null) && obj.getClass().equals(myClass))) {
      key.setInvalidationState(CacheKey.CACHE_KEY_INVALID);
    }
  }
}"
68538,"protected void setup(){
  expectedException=DescriptorException.attributeAndMappingWithTransparentIndirectionMismatch(new DirectToFieldMapping(),null);
  expectedException.setErrorCode(138);
  orgIntegrityChecker=getSession().getIntegrityChecker();
  getSession().setIntegrityChecker(new IntegrityChecker());
  getSession().getIntegrityChecker().dontCatchExceptions();
}","protected void setup(){
  expectedException=DescriptorException.attributeAndMappingWithTransparentIndirectionMismatch(new DirectToFieldMapping(),null,null);
  expectedException.setErrorCode(138);
  orgIntegrityChecker=getSession().getIntegrityChecker();
  getSession().setIntegrityChecker(new IntegrityChecker());
  getSession().getIntegrityChecker().dontCatchExceptions();
}"
68539,"protected void setup(){
  expectedException=DescriptorException.parameterAndMappingWithTransparentIndirectionMismatch(new OneToManyMapping(),null);
  orgIntegrityChecker=getSession().getIntegrityChecker();
  getSession().setIntegrityChecker(new IntegrityChecker());
  getSession().getIntegrityChecker().dontCatchExceptions();
}","protected void setup(){
  expectedException=DescriptorException.parameterAndMappingWithTransparentIndirectionMismatch(new OneToManyMapping(),null,null);
  orgIntegrityChecker=getSession().getIntegrityChecker();
  getSession().setIntegrityChecker(new IntegrityChecker());
  getSession().getIntegrityChecker().dontCatchExceptions();
}"
68540,"protected void setup(){
  expectedException=DescriptorException.returnAndMappingWithTransparentIndirectionMismatch(new OneToManyMapping(),null);
  super.setup();
}","protected void setup(){
  expectedException=DescriptorException.returnAndMappingWithTransparentIndirectionMismatch(new OneToManyMapping(),null,null);
  super.setup();
}"
68541,"public static DescriptorException returnAndMappingWithTransparentIndirectionMismatch(DatabaseMapping mapping,String validTypeName){
  Object[] args={mapping.getAttributeName(),validTypeName};
  DescriptorException exception=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,RETURN_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH,args),mapping);
  exception.setErrorCode(RETURN_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH);
  return exception;
}","public static DescriptorException returnAndMappingWithTransparentIndirectionMismatch(DatabaseMapping mapping,Class parameterType,String validTypeName){
  Object[] args={mapping.getAttributeName(),parameterType,validTypeName};
  DescriptorException exception=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,RETURN_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH,args),mapping);
  exception.setErrorCode(RETURN_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH);
  return exception;
}"
68542,"public static DescriptorException parameterAndMappingWithTransparentIndirectionMismatch(DatabaseMapping mapping,String validTypeName){
  Object[] args={mapping.getAttributeName(),validTypeName};
  DescriptorException exception=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,PARAMETER_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH,args),mapping);
  exception.setErrorCode(PARAMETER_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH);
  return exception;
}","public static DescriptorException parameterAndMappingWithTransparentIndirectionMismatch(DatabaseMapping mapping,Class parameterType,String validTypeName){
  Object[] args={mapping.getAttributeName(),parameterType,validTypeName};
  DescriptorException exception=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,PARAMETER_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH,args),mapping);
  exception.setErrorCode(PARAMETER_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH);
  return exception;
}"
68543,"public static DescriptorException attributeAndMappingWithTransparentIndirectionMismatch(DatabaseMapping mapping,String validTypeName){
  Object[] args={mapping.getAttributeName(),validTypeName};
  DescriptorException exception=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,ATTRIBUTE_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH,args),mapping);
  exception.setErrorCode(ATTRIBUTE_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH);
  return exception;
}","public static DescriptorException attributeAndMappingWithTransparentIndirectionMismatch(DatabaseMapping mapping,Class parameterType,String validTypeName){
  Object[] args={mapping.getAttributeName(),parameterType,validTypeName};
  DescriptorException exception=new DescriptorException(ExceptionMessageGenerator.buildMessage(DescriptorException.class,ATTRIBUTE_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH,args),mapping);
  exception.setErrorCode(ATTRIBUTE_AND_MAPPING_WITH_TRANSPARENT_INDIRECTION_MISMATCH);
  return exception;
}"
68544,"/** 
 * INTERNAL: Verify that getter returnType is correct for the indirection policy. If it is incorrect, add an exception to the integrity checker. In this case, the attribute type MUST be compatible with the one specified by the ContainerPolicy.
 */
public void validateGetMethodReturnType(Class returnType,IntegrityChecker checker) throws DescriptorException {
  super.validateGetMethodReturnType(returnType,checker);
  if (!this.typeIsValid(returnType)) {
    checker.handleError(DescriptorException.returnAndMappingWithTransparentIndirectionMismatch(this.getMapping(),this.validTypeName()));
  }
}","/** 
 * INTERNAL: Verify that getter returnType is correct for the indirection policy. If it is incorrect, add an exception to the integrity checker. In this case, the attribute type MUST be compatible with the one specified by the ContainerPolicy.
 */
public void validateGetMethodReturnType(Class returnType,IntegrityChecker checker) throws DescriptorException {
  super.validateGetMethodReturnType(returnType,checker);
  if (!this.typeIsValid(returnType)) {
    checker.handleError(DescriptorException.returnAndMappingWithTransparentIndirectionMismatch(this.getMapping(),returnType,this.validTypeName()));
  }
}"
68545,"/** 
 * INTERNAL: Verify that setter parameterType is correct for the indirection policy. If it is incorrect, add an exception to the integrity checker. In this case, the attribute type MUST be compatible with the one specified by the ContainerPolicy.
 */
public void validateSetMethodParameterType(Class parameterType,IntegrityChecker checker) throws DescriptorException {
  super.validateSetMethodParameterType(parameterType,checker);
  if (!this.typeIsValid(parameterType)) {
    checker.handleError(DescriptorException.parameterAndMappingWithTransparentIndirectionMismatch(this.getMapping(),this.validTypeName()));
  }
}","/** 
 * INTERNAL: Verify that setter parameterType is correct for the indirection policy. If it is incorrect, add an exception to the integrity checker. In this case, the attribute type MUST be compatible with the one specified by the ContainerPolicy.
 */
public void validateSetMethodParameterType(Class parameterType,IntegrityChecker checker) throws DescriptorException {
  super.validateSetMethodParameterType(parameterType,checker);
  if (!this.typeIsValid(parameterType)) {
    checker.handleError(DescriptorException.parameterAndMappingWithTransparentIndirectionMismatch(this.getMapping(),parameterType,this.validTypeName()));
  }
}"
68546,"/** 
 * INTERNAL: Verify that attributeType is correct for the indirection policy. If it is incorrect, add an exception to the integrity checker. In this case, the attribute type MUST be compatible with the one specified by the ContainerPolicy.
 */
public void validateDeclaredAttributeType(Class attributeType,IntegrityChecker checker) throws DescriptorException {
  super.validateDeclaredAttributeType(attributeType,checker);
  if (!this.typeIsValid(attributeType)) {
    checker.handleError(DescriptorException.attributeAndMappingWithTransparentIndirectionMismatch(this.getMapping(),this.validTypeName()));
  }
}","/** 
 * INTERNAL: Verify that attributeType is correct for the indirection policy. If it is incorrect, add an exception to the integrity checker. In this case, the attribute type MUST be compatible with the one specified by the ContainerPolicy.
 */
public void validateDeclaredAttributeType(Class attributeType,IntegrityChecker checker) throws DescriptorException {
  super.validateDeclaredAttributeType(attributeType,checker);
  if (!this.typeIsValid(attributeType)) {
    checker.handleError(DescriptorException.attributeAndMappingWithTransparentIndirectionMismatch(this.getMapping(),attributeType,this.validTypeName()));
  }
}"
68547,"@OneToMany(fetch=EAGER,cascade=PERSIST) public Collection<Employee> getManagers(){
  return managers;
}","@OneToMany(fetch=EAGER,cascade=PERSIST) @PrivateOwned public Collection<Employee> getManagers(){
  return managers;
}"
68548,"public void setPhoneNumbers(Collection<PhoneNumber> phoneNumbers){
  this.m_phoneNumbers=phoneNumbers;
}","public void setPhoneNumbers(LinkedList<PhoneNumber> phoneNumbers){
  this.m_phoneNumbers=phoneNumbers;
}"
68549,"@OneToMany(cascade=ALL,mappedBy=""String_Node_Str"") @PrivateOwned @Property(name=""String_Node_Str"",value=""String_Node_Str"") public Collection<PhoneNumber> getPhoneNumbers(){
  return m_phoneNumbers;
}","@OneToMany(fetch=EAGER,cascade=ALL,mappedBy=""String_Node_Str"") @PrivateOwned @Property(name=""String_Node_Str"",value=""String_Node_Str"") public LinkedList<PhoneNumber> getPhoneNumbers(){
  return m_phoneNumbers;
}"
68550,"/** 
 * Delete the first phone number on the employee with multiple phone numbers.
 */
private void deleteTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    getEntityManager().remove(((Vector)employee.getPhoneNumbers()).firstElement());
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_deleteException=e;
  }
}","/** 
 * Delete the first phone number on the employee with multiple phone numbers.
 */
private void deleteTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_deleteException=e;
  }
}"
68551,"/** 
 * Create an employee with multiple phone numbers.
 */
private int createTest(){
  Vector phoneNumbers=new Vector();
  Employee employee=new Employee();
  try {
    beginTransaction();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    PhoneNumber homeNumber=new PhoneNumber();
    homeNumber.setAreaCode(""String_Node_Str"");
    homeNumber.setNumber(""String_Node_Str"");
    homeNumber.setOwner(employee);
    homeNumber.setType(""String_Node_Str"");
    phoneNumbers.add(homeNumber);
    PhoneNumber cellNumber=new PhoneNumber();
    cellNumber.setAreaCode(""String_Node_Str"");
    cellNumber.setNumber(""String_Node_Str"");
    cellNumber.setOwner(employee);
    cellNumber.setType(""String_Node_Str"");
    phoneNumbers.add(cellNumber);
    PhoneNumber workNumber=new PhoneNumber();
    workNumber.setAreaCode(""String_Node_Str"");
    workNumber.setNumber(""String_Node_Str"");
    workNumber.setOwner(employee);
    workNumber.setType(""String_Node_Str"");
    phoneNumbers.add(workNumber);
    employee.setPhoneNumbers(phoneNumbers);
    getEntityManager().persist(employee);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_createException=e;
  }
  return employee.getId();
}","/** 
 * Create an employee with multiple phone numbers.
 */
private int createTest(){
  LinkedList phoneNumbers=new LinkedList();
  Employee employee=new Employee();
  try {
    beginTransaction();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    PhoneNumber homeNumber=new PhoneNumber();
    homeNumber.setAreaCode(""String_Node_Str"");
    homeNumber.setNumber(""String_Node_Str"");
    homeNumber.setOwner(employee);
    homeNumber.setType(""String_Node_Str"");
    phoneNumbers.add(homeNumber);
    PhoneNumber cellNumber=new PhoneNumber();
    cellNumber.setAreaCode(""String_Node_Str"");
    cellNumber.setNumber(""String_Node_Str"");
    cellNumber.setOwner(employee);
    cellNumber.setType(""String_Node_Str"");
    phoneNumbers.add(cellNumber);
    PhoneNumber workNumber=new PhoneNumber();
    workNumber.setAreaCode(""String_Node_Str"");
    workNumber.setNumber(""String_Node_Str"");
    workNumber.setOwner(employee);
    workNumber.setType(""String_Node_Str"");
    phoneNumbers.add(workNumber);
    employee.setPhoneNumbers(phoneNumbers);
    getEntityManager().persist(employee);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_createException=e;
  }
  return employee.getId();
}"
68552,"/** 
 * Update the phone numbers on the employee with multiple phone numbers.
 */
private void updateTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    Vector phones=(Vector)employee.getPhoneNumbers();
    Enumeration e=phones.elements();
    while (e.hasMoreElements()) {
      PhoneNumber phone=(PhoneNumber)e.nextElement();
      phone.setAreaCode(""String_Node_Str"");
    }
    getEntityManager().persist(employee);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_updateException=e;
  }
}","/** 
 * Update the phone numbers on the employee with multiple phone numbers.
 */
private void updateTest(int empId){
  try {
    beginTransaction();
    Employee employee=getEntityManager().find(Employee.class,empId);
    LinkedList phones=(LinkedList)employee.getPhoneNumbers();
    Iterator e=phones.listIterator();
    while (e.hasNext()) {
      PhoneNumber phone=(PhoneNumber)e.next();
      phone.setAreaCode(""String_Node_Str"");
    }
    getEntityManager().persist(employee);
    commitTransaction();
  }
 catch (  Exception e) {
    rollbackTransaction();
    m_updateException=e;
  }
}"
68553,"public void simpleInOneDotTest(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ReadObjectQuery roq=new ReadObjectQuery(Employee.class);
  ExpressionBuilder empBldr=new ExpressionBuilder();
  Expression exp1=empBldr.get(""String_Node_Str"").equal(""String_Node_Str"");
  Expression exp2=empBldr.get(""String_Node_Str"").equal(""String_Node_Str"");
  roq.setSelectionCriteria(exp1.and(exp2));
  Employee expectedResult=(Employee)em.getActiveSession().executeQuery(roq);
  clearCache();
  PhoneNumber empPhoneNumbers=(PhoneNumber)((Vector)expectedResult.getPhoneNumbers()).elementAt(0);
  String ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + empPhoneNumbers.getAreaCode() + ""String_Node_Str""+ ""String_Node_Str""+ expectedResult.getFirstName()+ ""String_Node_Str"";
  ejbqlString=ejbqlString + ""String_Node_Str"" + expectedResult.getLastName()+ ""String_Node_Str"";
  Employee result=(Employee)em.createQuery(ejbqlString).getSingleResult();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}","public void simpleInOneDotTest(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ReadObjectQuery roq=new ReadObjectQuery(Employee.class);
  ExpressionBuilder empBldr=new ExpressionBuilder();
  Expression exp1=empBldr.get(""String_Node_Str"").equal(""String_Node_Str"");
  Expression exp2=empBldr.get(""String_Node_Str"").equal(""String_Node_Str"");
  roq.setSelectionCriteria(exp1.and(exp2));
  Employee expectedResult=(Employee)em.getActiveSession().executeQuery(roq);
  clearCache();
  PhoneNumber empPhoneNumbers=(PhoneNumber)((java.util.LinkedList)expectedResult.getPhoneNumbers()).getFirst();
  String ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + empPhoneNumbers.getAreaCode() + ""String_Node_Str""+ ""String_Node_Str""+ expectedResult.getFirstName()+ ""String_Node_Str"";
  ejbqlString=ejbqlString + ""String_Node_Str"" + expectedResult.getLastName()+ ""String_Node_Str"";
  Employee result=(Employee)em.createQuery(ejbqlString).getSingleResult();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}"
68554,"public void collectionMemberIdentifierEqualsTest(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee expectedResult=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  clearCache();
  PhoneNumber phoneNumber=(PhoneNumber)((Vector)expectedResult.getPhoneNumbers()).firstElement();
  String ejbqlString=""String_Node_Str"" + ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).setParameter(1,phoneNumber).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(expectedResult,result));
}","public void collectionMemberIdentifierEqualsTest(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee expectedResult=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  clearCache();
  PhoneNumber phoneNumber=(PhoneNumber)((java.util.LinkedList)expectedResult.getPhoneNumbers()).getFirst();
  String ejbqlString=""String_Node_Str"" + ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).setParameter(1,phoneNumber).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(expectedResult,result));
}"
68555,"public void testSelectPhoneNumberNumberWithEmployeeWithExplicitJoin(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((Vector)emp.getPhoneNumbers()).firstElement();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder(Employee.class);
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").equal(areaCode).and(phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(employeeBuilder.get(""String_Node_Str"")).and(employeeBuilder.get(""String_Node_Str"").equal(firstName)));
  ReportQuery rq=new ReportQuery();
  rq.addAttribute(""String_Node_Str"",new ExpressionBuilder().anyOf(""String_Node_Str"").get(""String_Node_Str""));
  rq.setSelectionCriteria(whereClause);
  rq.setReferenceClass(Employee.class);
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + areaCode + ""String_Node_Str""+ firstName+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}","public void testSelectPhoneNumberNumberWithEmployeeWithExplicitJoin(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((java.util.LinkedList)emp.getPhoneNumbers()).getFirst();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder(Employee.class);
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").equal(areaCode).and(phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(employeeBuilder.get(""String_Node_Str"")).and(employeeBuilder.get(""String_Node_Str"").equal(firstName)));
  ReportQuery rq=new ReportQuery();
  rq.addAttribute(""String_Node_Str"",new ExpressionBuilder().anyOf(""String_Node_Str"").get(""String_Node_Str""));
  rq.setSelectionCriteria(whereClause);
  rq.setReferenceClass(Employee.class);
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + areaCode + ""String_Node_Str""+ firstName+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}"
68556,"public void testSelectPhoneNumberAreaCodeWithEmployee(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((Vector)emp.getPhoneNumbers()).firstElement();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder();
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").equal(areaCode).and(phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(firstName));
  ReportQuery rq=new ReportQuery();
  rq.setSelectionCriteria(whereClause);
  rq.addAttribute(""String_Node_Str"",phones.get(""String_Node_Str""));
  rq.setReferenceClass(Employee.class);
  rq.dontMaintainCache();
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + areaCode + ""String_Node_Str""+ firstName+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}","public void testSelectPhoneNumberAreaCodeWithEmployee(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((java.util.LinkedList)emp.getPhoneNumbers()).getFirst();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder();
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").equal(areaCode).and(phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(firstName));
  ReportQuery rq=new ReportQuery();
  rq.setSelectionCriteria(whereClause);
  rq.addAttribute(""String_Node_Str"",phones.get(""String_Node_Str""));
  rq.setReferenceClass(Employee.class);
  rq.dontMaintainCache();
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + areaCode + ""String_Node_Str""+ firstName+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}"
68557,"public void testSelectPhoneNumberNumberWithEmployeeWithFirstNameFirst(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((Vector)emp.getPhoneNumbers()).firstElement();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder();
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(firstName).and(phones.get(""String_Node_Str"").equal(areaCode));
  ReportQuery rq=new ReportQuery();
  rq.setSelectionCriteria(whereClause);
  rq.addAttribute(""String_Node_Str"",phones.get(""String_Node_Str""));
  rq.setReferenceClass(Employee.class);
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + firstName + ""String_Node_Str""+ areaCode+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}","public void testSelectPhoneNumberNumberWithEmployeeWithFirstNameFirst(){
  org.eclipse.persistence.jpa.JpaEntityManager em=(org.eclipse.persistence.jpa.JpaEntityManager)createEntityManager();
  ExpressionBuilder employees=new ExpressionBuilder();
  Expression exp=employees.get(""String_Node_Str"").equal(""String_Node_Str"");
  exp=exp.and(employees.get(""String_Node_Str"").equal(""String_Node_Str""));
  Employee emp=(Employee)em.getActiveSession().readAllObjects(Employee.class,exp).firstElement();
  PhoneNumber phone=(PhoneNumber)((java.util.LinkedList)emp.getPhoneNumbers()).getFirst();
  String areaCode=phone.getAreaCode();
  String firstName=emp.getFirstName();
  ExpressionBuilder employeeBuilder=new ExpressionBuilder();
  Expression phones=employeeBuilder.anyOf(""String_Node_Str"");
  Expression whereClause=phones.get(""String_Node_Str"").get(""String_Node_Str"").equal(firstName).and(phones.get(""String_Node_Str"").equal(areaCode));
  ReportQuery rq=new ReportQuery();
  rq.setSelectionCriteria(whereClause);
  rq.addAttribute(""String_Node_Str"",phones.get(""String_Node_Str""));
  rq.setReferenceClass(Employee.class);
  Vector expectedResult=getAttributeFromAll(""String_Node_Str"",(Vector)em.getActiveSession().executeQuery(rq),Employee.class);
  clearCache();
  String ejbqlString;
  ejbqlString=""String_Node_Str"" + ""String_Node_Str"" + firstName + ""String_Node_Str""+ areaCode+ ""String_Node_Str"";
  List result=em.createQuery(ejbqlString).getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}"
68558,"/** 
 * INTERNAL:
 */
public MetadataLogger(AbstractSession session){
  m_session=session;
  m_ctxStrings=new HashMap();
  m_ctxStrings.put(OVERRIDE_ANNOTATION_WITH_XML,OVERRIDE_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_ANNOTATION_WITH_XML,OVERRIDE_NAMED_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_XML_WITH_ECLIPSELINK_XML,OVERRIDE_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML,OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(IGNORE_ANNOTATION,IGNORE_ANNOTATION);
  m_ctxStrings.put(IGNORE_PRIVATE_OWNED_ANNOTATION,IGNORE_PRIVATE_OWNED_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_INSERT_ANNOTATION,IGNORE_RETURN_INSERT_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_UPDATE_ANNOTATION,IGNORE_RETURN_UPDATE_ANNOTATION);
  m_ctxStrings.put(IGNORE_LOB,IGNORE_LOB);
  m_ctxStrings.put(IGNORE_TEMPORAL,IGNORE_TEMPORAL);
  m_ctxStrings.put(IGNORE_ENUMERATED,IGNORE_ENUMERATED);
  m_ctxStrings.put(IGNORE_SERIALIZED,IGNORE_SERIALIZED);
  m_ctxStrings.put(IGNORE_VERSION_LOCKING,IGNORE_VERSION_LOCKING);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_CACHE,IGNORE_INHERITANCE_SUBCLASS_CACHE);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_READ_ONLY,IGNORE_INHERITANCE_SUBCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_COPY_POLICY,IGNORE_MAPPED_SUPERCLASS_COPY_POLICY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING,IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CACHE,IGNORE_MAPPED_SUPERCLASS_CACHE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING,IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER,IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_READ_ONLY,IGNORE_MAPPED_SUPERCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING,IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING);
  m_ctxStrings.put(ALIAS,ALIAS);
  m_ctxStrings.put(MAP_KEY_ATTRIBUTE_NAME,MAP_KEY_ATTRIBUTE_NAME);
  m_ctxStrings.put(TABLE_NAME,TABLE_NAME);
  m_ctxStrings.put(TABLE_SCHEMA,TABLE_SCHEMA);
  m_ctxStrings.put(TABLE_CATALOG,TABLE_CATALOG);
  m_ctxStrings.put(JOIN_TABLE_NAME,JOIN_TABLE_NAME);
  m_ctxStrings.put(JOIN_TABLE_SCHEMA,JOIN_TABLE_SCHEMA);
  m_ctxStrings.put(JOIN_TABLE_CATALOG,JOIN_TABLE_CATALOG);
  m_ctxStrings.put(SECONDARY_TABLE_NAME,SECONDARY_TABLE_NAME);
  m_ctxStrings.put(SECONDARY_TABLE_SCHEMA,SECONDARY_TABLE_SCHEMA);
  m_ctxStrings.put(SECONDARY_TABLE_CATALOG,SECONDARY_TABLE_CATALOG);
  m_ctxStrings.put(COLLECTION_TABLE_NAME,COLLECTION_TABLE_NAME);
  m_ctxStrings.put(COLLECTION_TABLE_SCHEMA,COLLECTION_TABLE_SCHEMA);
  m_ctxStrings.put(COLLECTION_TABLE_CATALOG,COLLECTION_TABLE_CATALOG);
  m_ctxStrings.put(CONVERTER_DATA_TYPE,CONVERTER_DATA_TYPE);
  m_ctxStrings.put(CONVERTER_OBJECT_TYPE,CONVERTER_OBJECT_TYPE);
  m_ctxStrings.put(COLUMN,COLUMN);
  m_ctxStrings.put(PK_COLUMN,PK_COLUMN);
  m_ctxStrings.put(FK_COLUMN,FK_COLUMN);
  m_ctxStrings.put(QK_COLUMN,QK_COLUMN);
  m_ctxStrings.put(VALUE_COLUMN,VALUE_COLUMN);
  m_ctxStrings.put(MAP_KEY_COLUMN,MAP_KEY_COLUMN);
  m_ctxStrings.put(SOURCE_PK_COLUMN,SOURCE_PK_COLUMN);
  m_ctxStrings.put(SOURCE_FK_COLUMN,SOURCE_FK_COLUMN);
  m_ctxStrings.put(TARGET_PK_COLUMN,TARGET_PK_COLUMN);
  m_ctxStrings.put(TARGET_FK_COLUMN,TARGET_FK_COLUMN);
  m_ctxStrings.put(DISCRIMINATOR_COLUMN,DISCRIMINATOR_COLUMN);
  m_ctxStrings.put(INHERITANCE_PK_COLUMN,INHERITANCE_PK_COLUMN);
  m_ctxStrings.put(INHERITANCE_FK_COLUMN,INHERITANCE_FK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_PK_COLUMN,SECONDARY_TABLE_PK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_FK_COLUMN,SECONDARY_TABLE_FK_COLUMN);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING,ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING,ONE_TO_MANY_MAPPING);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING,VARIABLE_ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING_REFERENCE_CLASS,ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING_REFERENCE_CLASS,ONE_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_ONE_MAPPING_REFERENCE_CLASS,MANY_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_MANY_MAPPING_REFERENCE_CLASS,MANY_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS,VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
}","/** 
 * INTERNAL:
 */
public MetadataLogger(AbstractSession session){
  m_session=session;
  m_ctxStrings=new HashMap();
  m_ctxStrings.put(OVERRIDE_ANNOTATION_WITH_XML,OVERRIDE_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_ANNOTATION_WITH_XML,OVERRIDE_NAMED_ANNOTATION_WITH_XML);
  m_ctxStrings.put(OVERRIDE_XML_WITH_ECLIPSELINK_XML,OVERRIDE_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML,OVERRIDE_NAMED_XML_WITH_ECLIPSELINK_XML);
  m_ctxStrings.put(IGNORE_ANNOTATION,IGNORE_ANNOTATION);
  m_ctxStrings.put(IGNORE_PRIVATE_OWNED_ANNOTATION,IGNORE_PRIVATE_OWNED_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_INSERT_ANNOTATION,IGNORE_RETURN_INSERT_ANNOTATION);
  m_ctxStrings.put(IGNORE_RETURN_UPDATE_ANNOTATION,IGNORE_RETURN_UPDATE_ANNOTATION);
  m_ctxStrings.put(IGNORE_LOB,IGNORE_LOB);
  m_ctxStrings.put(IGNORE_TEMPORAL,IGNORE_TEMPORAL);
  m_ctxStrings.put(IGNORE_ENUMERATED,IGNORE_ENUMERATED);
  m_ctxStrings.put(IGNORE_SERIALIZED,IGNORE_SERIALIZED);
  m_ctxStrings.put(IGNORE_VERSION_LOCKING,IGNORE_VERSION_LOCKING);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_CACHE,IGNORE_INHERITANCE_SUBCLASS_CACHE);
  m_ctxStrings.put(IGNORE_INHERITANCE_SUBCLASS_READ_ONLY,IGNORE_INHERITANCE_SUBCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_COPY_POLICY,IGNORE_MAPPED_SUPERCLASS_COPY_POLICY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ASSOCIATION_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE,IGNORE_MAPPED_SUPERCLASS_ATTRIBUTE_OVERRIDE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING,IGNORE_MAPPED_SUPERCLASS_OPTIMISTIC_LOCKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CACHE,IGNORE_MAPPED_SUPERCLASS_CACHE);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING,IGNORE_MAPPED_SUPERCLASS_CHANGE_TRACKING);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER,IGNORE_MAPPED_SUPERCLASS_CUSTOMIZER);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_READ_ONLY,IGNORE_MAPPED_SUPERCLASS_READ_ONLY);
  m_ctxStrings.put(IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING,IGNORE_MAPPED_SUPERCLASS_EXISTENCE_CHECKING);
  m_ctxStrings.put(ALIAS,ALIAS);
  m_ctxStrings.put(MAP_KEY_ATTRIBUTE_NAME,MAP_KEY_ATTRIBUTE_NAME);
  m_ctxStrings.put(TABLE_NAME,TABLE_NAME);
  m_ctxStrings.put(TABLE_SCHEMA,TABLE_SCHEMA);
  m_ctxStrings.put(TABLE_CATALOG,TABLE_CATALOG);
  m_ctxStrings.put(JOIN_TABLE_NAME,JOIN_TABLE_NAME);
  m_ctxStrings.put(JOIN_TABLE_SCHEMA,JOIN_TABLE_SCHEMA);
  m_ctxStrings.put(JOIN_TABLE_CATALOG,JOIN_TABLE_CATALOG);
  m_ctxStrings.put(SECONDARY_TABLE_NAME,SECONDARY_TABLE_NAME);
  m_ctxStrings.put(SECONDARY_TABLE_SCHEMA,SECONDARY_TABLE_SCHEMA);
  m_ctxStrings.put(SECONDARY_TABLE_CATALOG,SECONDARY_TABLE_CATALOG);
  m_ctxStrings.put(COLLECTION_TABLE_NAME,COLLECTION_TABLE_NAME);
  m_ctxStrings.put(COLLECTION_TABLE_SCHEMA,COLLECTION_TABLE_SCHEMA);
  m_ctxStrings.put(COLLECTION_TABLE_CATALOG,COLLECTION_TABLE_CATALOG);
  m_ctxStrings.put(CONVERTER_DATA_TYPE,CONVERTER_DATA_TYPE);
  m_ctxStrings.put(CONVERTER_OBJECT_TYPE,CONVERTER_OBJECT_TYPE);
  m_ctxStrings.put(COLUMN,COLUMN);
  m_ctxStrings.put(PK_COLUMN,PK_COLUMN);
  m_ctxStrings.put(FK_COLUMN,FK_COLUMN);
  m_ctxStrings.put(QK_COLUMN,QK_COLUMN);
  m_ctxStrings.put(VALUE_COLUMN,VALUE_COLUMN);
  m_ctxStrings.put(MAP_KEY_COLUMN,MAP_KEY_COLUMN);
  m_ctxStrings.put(SOURCE_PK_COLUMN,SOURCE_PK_COLUMN);
  m_ctxStrings.put(SOURCE_FK_COLUMN,SOURCE_FK_COLUMN);
  m_ctxStrings.put(TARGET_PK_COLUMN,TARGET_PK_COLUMN);
  m_ctxStrings.put(TARGET_FK_COLUMN,TARGET_FK_COLUMN);
  m_ctxStrings.put(DISCRIMINATOR_COLUMN,DISCRIMINATOR_COLUMN);
  m_ctxStrings.put(INHERITANCE_PK_COLUMN,INHERITANCE_PK_COLUMN);
  m_ctxStrings.put(INHERITANCE_FK_COLUMN,INHERITANCE_FK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_PK_COLUMN,SECONDARY_TABLE_PK_COLUMN);
  m_ctxStrings.put(SECONDARY_TABLE_FK_COLUMN,SECONDARY_TABLE_FK_COLUMN);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING,ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING,ONE_TO_MANY_MAPPING);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING,VARIABLE_ONE_TO_ONE_MAPPING);
  m_ctxStrings.put(ONE_TO_ONE_MAPPING_REFERENCE_CLASS,ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(ONE_TO_MANY_MAPPING_REFERENCE_CLASS,ONE_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_ONE_MAPPING_REFERENCE_CLASS,MANY_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(MANY_TO_MANY_MAPPING_REFERENCE_CLASS,MANY_TO_MANY_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS,VARIABLE_ONE_TO_ONE_MAPPING_REFERENCE_CLASS);
  m_ctxStrings.put(WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION,WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION);
}"
68559,"/** 
 * INTERNAL: Set the correct indirection policy on a collection mapping. Method assume that the reference class has been set on the mapping before calling this method.
 */
public void setIndirectionPolicy(CollectionMapping mapping,String mapKey,boolean usesIndirection){
  Class rawClass=getRawClass();
  if (usesIndirection) {
    if (rawClass == Map.class) {
      mapping.useTransparentMap(mapKey);
    }
 else     if (rawClass == List.class) {
      mapping.useTransparentList();
    }
 else     if (rawClass == Collection.class) {
      mapping.useTransparentCollection();
      mapping.setContainerPolicy(new CollectionContainerPolicy(ClassConstants.IndirectList_Class));
    }
 else     if (rawClass == Set.class) {
      mapping.useTransparentSet();
    }
 else {
    }
  }
 else {
    mapping.dontUseIndirection();
    if (rawClass == Map.class) {
      mapping.useMapClass(java.util.Hashtable.class,mapKey);
    }
 else     if (rawClass == Set.class) {
      mapping.useCollectionClass(java.util.HashSet.class);
    }
 else {
      mapping.useCollectionClass(java.util.Vector.class);
    }
  }
}","/** 
 * INTERNAL: Set the correct indirection policy on a collection mapping. Method assume that the reference class has been set on the mapping before calling this method.
 */
public void setIndirectionPolicy(CollectionMapping mapping,String mapKey,boolean usesIndirection){
  Class rawClass=getRawClass();
  if (usesIndirection) {
    if (rawClass == Map.class) {
      mapping.useTransparentMap(mapKey);
    }
 else     if (rawClass == List.class) {
      mapping.useTransparentList();
    }
 else     if (rawClass == Collection.class) {
      mapping.useTransparentCollection();
      mapping.setContainerPolicy(new CollectionContainerPolicy(ClassConstants.IndirectList_Class));
    }
 else     if (rawClass == Set.class) {
      mapping.useTransparentSet();
    }
 else {
      this.getLogger().logWarningMessage(MetadataLogger.WARNING_INVALID_COLLECTION_USED_ON_LAZY_RELATION,this.getJavaClass(),this.getAnnotatedElement(),rawClass);
    }
  }
 else {
    mapping.dontUseIndirection();
    if (rawClass == Map.class) {
      mapping.useMapClass(java.util.Hashtable.class,mapKey);
    }
 else     if (rawClass == Set.class) {
      mapping.useCollectionClass(java.util.HashSet.class);
    }
 else     if ((rawClass == List.class) || (rawClass == Collection.class)) {
      mapping.useCollectionClass(java.util.Vector.class);
    }
 else {
      if (mapKey == null || mapKey.equals(""String_Node_Str"")) {
        mapping.useCollectionClass(rawClass);
      }
 else {
        mapping.useMapClass(rawClass,mapKey);
      }
    }
  }
}"
68560,"public void test(){
  ReadObjectQuery query=new ReadObjectQuery(IsolatedEmployee.class);
  Session client1=this.server.acquireClientSession();
  IsolatedEmployee employee=(IsolatedEmployee)client1.executeQuery(query);
  client1.release();
  try {
    employee.getPhoneNumbers();
    throw new TestErrorException(""String_Node_Str"");
  }
 catch (  ValidationException ex) {
  }
}","public void test(){
  ReadObjectQuery query=new ReadObjectQuery(IsolatedEmployee.class);
  ClientSession client1=this.server.acquireClientSession();
  IsolatedEmployee employee=(IsolatedEmployee)client1.executeQuery(query);
  if (numAcquireExclusive != 1 || numReleaseExclusive != 0) {
    errorMsg+=""String_Node_Str"" + numAcquireExclusive + ""String_Node_Str""+ numReleaseExclusive+ ""String_Node_Str"";
  }
  client1.release();
  if (numAcquireExclusive != 1 || numReleaseExclusive != 1) {
    errorMsg+=""String_Node_Str"" + numAcquireExclusive + ""String_Node_Str""+ numReleaseExclusive+ ""String_Node_Str"";
  }
  if (client1.getWriteConnection() != null) {
    errorMsg+=""String_Node_Str"";
  }
  employee.getPhoneNumbers();
  if (numAcquireExclusive != 2 || numReleaseExclusive != 2) {
    errorMsg+=""String_Node_Str"" + numAcquireExclusive + ""String_Node_Str""+ numReleaseExclusive+ ""String_Node_Str"";
  }
  if (client1.getWriteConnection() != null) {
    errorMsg+=""String_Node_Str"";
  }
}"
68561,"public void reset(){
  try {
    this.server.logout();
    getDatabaseSession().logout();
    getDatabaseSession().login();
    String schemaName=getSession().getLogin().getUserName();
  }
 catch (  DatabaseException ex) {
  }
}","public void reset(){
  try {
    errorMsg=""String_Node_Str"";
    numAcquireExclusive=0;
    numReleaseExclusive=0;
    this.server.getEventManager().removeListener(listener);
    this.server.logout();
    getDatabaseSession().logout();
    getDatabaseSession().login();
    String schemaName=getSession().getLogin().getUserName();
  }
 catch (  DatabaseException ex) {
  }
}"
68562,"public void setup(){
  try {
    this.emps=getSession().readAllObjects(IsolatedEmployee.class);
    String schemaName=getSession().getLogin().getUserName();
    this.login=(DatabaseLogin)getSession().getLogin().clone();
    this.server=new ServerSession(this.login,2,5);
    this.server.getDefaultConnectionPolicy().setShouldUseExclusiveConnection(true);
    this.server.setSessionLog(getSession().getSessionLog());
    copyDescriptors(getSession());
    this.server.login();
  }
 catch (  RuntimeException ex) {
    getSession().logMessage(""String_Node_Str"");
    throw ex;
  }
}","public void setup(){
  try {
    this.emps=getSession().readAllObjects(IsolatedEmployee.class);
    String schemaName=getSession().getLogin().getUserName();
    this.login=(DatabaseLogin)getSession().getLogin().clone();
    this.server=new ServerSession(this.login,2,5);
    this.server.getDefaultConnectionPolicy().setShouldUseExclusiveConnection(true);
    this.server.setSessionLog(getSession().getSessionLog());
    copyDescriptors(getSession());
    this.server.getEventManager().addListener(listener);
    this.server.login();
  }
 catch (  RuntimeException ex) {
    getSession().logMessage(""String_Node_Str"");
    throw ex;
  }
}"
68563,"public void verify(){
}","public void verify(){
  if (errorMsg.length() > 0) {
    throw new TestErrorException(errorMsg);
  }
}"
68564,"public Class loadClass(String className,SDOType type) throws ClassNotFoundException {
  Class javaClass=null;
  try {
    javaClass=delegateLoader.loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    javaClass=createGeneric(className,type);
    if (javaClass == null) {
      throw e;
    }
  }
catch (  NoClassDefFoundError error) {
    javaClass=createGeneric(className,type);
    if (javaClass == null) {
      throw error;
    }
  }
  return javaClass;
}","public Class loadClass(String className,SDOType type) throws ClassNotFoundException {
  Class javaClass=null;
  javaClass=(Class)generatedClasses.get(className);
  if (javaClass != null) {
    return javaClass;
  }
  try {
    javaClass=delegateLoader.loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    javaClass=createGeneric(className,type);
    if (javaClass == null) {
      throw e;
    }
  }
catch (  NoClassDefFoundError error) {
    javaClass=createGeneric(className,type);
    if (javaClass == null) {
      throw error;
    }
  }
  return javaClass;
}"
68565,"/** 
 * Returns whether or not the specified data object was updated while   {@link #isLogging logging}. An object that was contained in the scope when logging began and remains in the scope when logging ends will be considered potentially modified. <p> An object considered modified must have at least one old value setting.
 * @param dataObject the data object in question.
 * @return <code>true</code> if the specified data object was modified.
 * @see #getChangedDataObjects
 */
public boolean isModified(DataObject dataObject){
  return (modifiedList != null) && modifiedList.contains(dataObject);
}","/** 
 * Returns whether or not the specified data object was updated while   {@link #isLogging logging}. An object that was contained in the scope when logging began and remains in the scope when logging ends will be considered potentially modified. <p> An object considered modified must have at least one old value setting.
 * @param dataObject the data object in question.
 * @return <code>true</code> if the specified data object was modified.
 * @see #getChangedDataObjects
 */
public boolean isModified(DataObject dataObject){
  if (this.originalValueStores.get(dataObject) == null || isDeleted(dataObject)) {
    return false;
  }
  return true;
}"
68566,"/** 
 * INTERNAL: Return all modified objects
 * @return Set
 */
public List getModified(){
  return modifiedList;
}","private void getModified(SDODataObject sdoDataObject,List modifiedList){
  if (null == sdoDataObject) {
    return;
  }
  if (isModified(sdoDataObject)) {
    modifiedList.add(sdoDataObject);
  }
  List<Property> properties=(List<Property>)sdoDataObject.getInstanceProperties();
  for (int x=0; x < properties.size(); x++) {
    Property property=properties.get(x);
    if (property.isContainment()) {
      if (property.isMany()) {
        List<SDODataObject> dataObjects=(List<SDODataObject>)sdoDataObject.getList(property);
        for (int y=0; y < dataObjects.size(); y++) {
          getModified(dataObjects.get(y),modifiedList);
        }
      }
 else {
        if ((property.getType() != null) && !(((SDOType)property.getType()).isChangeSummaryType())) {
          getModified((SDODataObject)sdoDataObject.getDataObject(property),modifiedList);
        }
      }
    }
  }
}"
68567,"/** 
 * INTERNAL: Set flag created value.
 * @param created   flag created's new value.
 */
public void setCreated(DataObject anObject,boolean created){
  if (getRootObject() == anObject) {
    return;
  }
  if (isLogging() && !created) {
    createdList.remove(anObject);
  }
  if (isLogging() && !isCreated(anObject)) {
    if (created) {
      modifiedList.remove(anObject);
      deletedList.remove(anObject);
      createdList.add(anObject);
    }
  }
}","/** 
 * INTERNAL: Set flag created value.
 * @param created   flag created's new value.
 */
public void setCreated(DataObject anObject,boolean created){
  if (getRootObject() == anObject) {
    return;
  }
  if (isLogging() && !created) {
    createdList.remove(anObject);
  }
  if (isLogging() && !isCreated(anObject)) {
    if (created) {
      deletedList.remove(anObject);
      createdList.add(anObject);
    }
  }
}"
68568,"/** 
 * INTERNAL: Called from beginLogging and undoChanges
 */
private void resetChanges(){
  createdList.clear();
  deletedList.clear();
  modifiedList.clear();
  oldSettings.clear();
  deepCopies.clear();
  oldContainer.clear();
  oldContainmentProperty.clear();
  unsetPropsMap.clear();
  unsetOCPropsMap.clear();
  originalValueStores.clear();
  originalElements.clear();
  reverseDeletedMap.clear();
  getOldSequences().clear();
  getOriginalSequences().clear();
}","/** 
 * INTERNAL: Called from beginLogging and undoChanges
 */
private void resetChanges(){
  createdList.clear();
  deletedList.clear();
  oldSettings.clear();
  deepCopies.clear();
  oldContainer.clear();
  oldContainmentProperty.clear();
  unsetPropsMap.clear();
  unsetOCPropsMap.clear();
  originalValueStores.clear();
  originalElements.clear();
  reverseDeletedMap.clear();
  getOldSequences().clear();
  getOriginalSequences().clear();
}"
68569,"/** 
 * Returns a list consisting of all the   {@link DataObject data objects} that have been changed while {@link #isLogging logging}. <p> The   {@link #isCreated new} and {@link #isModified modified} objects in the List are references to objectsassociated with this ChangeSummary. The  {@link #isDeleted deleted} objects in the List are references to objectsat the time that event logging was enabled; <p> Each changed object must have exactly one of the following methods return true: {@link #isCreated isCreated},  {@link #isDeleted isDeleted}, or  {@link #isModified isModified}.
 * @return a list of changed data objects.
 * @see #isCreated(DataObject)
 * @see #isDeleted(DataObject)
 * @see #isModified(DataObject)
 */
public List getChangedDataObjects(){
  ArrayList aList=new ArrayList();
  if (modifiedList != null) {
    aList.addAll(modifiedList);
  }
  if (deletedList != null) {
    aList.addAll(deletedList);
  }
  if (createdList != null) {
    aList.addAll(createdList);
  }
  return aList;
}","/** 
 * Returns a list consisting of all the   {@link DataObject data objects} that have been changed while {@link #isLogging logging}. <p> The   {@link #isCreated new} and {@link #isModified modified} objects in the List are references to objectsassociated with this ChangeSummary. The  {@link #isDeleted deleted} objects in the List are references to objectsat the time that event logging was enabled; <p> Each changed object must have exactly one of the following methods return true: {@link #isCreated isCreated},  {@link #isDeleted isDeleted}, or  {@link #isModified isModified}.
 * @return a list of changed data objects.
 * @see #isCreated(DataObject)
 * @see #isDeleted(DataObject)
 * @see #isModified(DataObject)
 */
public List getChangedDataObjects(){
  ArrayList aList=new ArrayList();
  aList.addAll(getModified());
  if (deletedList != null) {
    aList.addAll(deletedList);
  }
  if (createdList != null) {
    aList.addAll(createdList);
  }
  return aList;
}"
68570,"/** 
 * INTERNAL: Set flag modified value.
 * @param deleted   flag modified's new value.
 */
public boolean setDeleted(DataObject anObject,boolean deleted){
  if (getRootObject() == anObject) {
    return false;
  }
  if (isLogging() && !deleted) {
    deletedList.remove(anObject);
  }
  if (isLogging() && !this.isDeleted(anObject)) {
    if (deleted) {
      modifiedList.remove(anObject);
      if (isCreated(anObject)) {
        createdList.remove(anObject);
        oldSettings.remove(anObject);
        originalValueStores.remove(anObject);
        originalElements.remove(anObject);
        return false;
      }
 else {
        pauseLogging();
        deletedList.add(anObject);
        resumeLogging();
      }
    }
  }
  return true;
}","/** 
 * INTERNAL: Set flag modified value.
 * @param deleted   flag modified's new value.
 */
public boolean setDeleted(DataObject anObject,boolean deleted){
  if (getRootObject() == anObject) {
    return false;
  }
  if (isLogging() && !deleted) {
    deletedList.remove(anObject);
  }
  if (isLogging() && !this.isDeleted(anObject)) {
    if (deleted) {
      if (isCreated(anObject)) {
        createdList.remove(anObject);
        oldSettings.remove(anObject);
        originalValueStores.remove(anObject);
        originalElements.remove(anObject);
        return false;
      }
 else {
        pauseLogging();
        deletedList.add(anObject);
        resumeLogging();
      }
    }
  }
  return true;
}"
68571,"/** 
 * INTERNAL: Set flag modified value.
 * @param modified   flag modified's new value.
 */
public void _setModified(boolean modified){
  if (changeSummary != null) {
    ((SDOChangeSummary)changeSummary).setModified(this,modified);
    if (isLogging()) {
      updateChangeSummaryWithOriginalValues();
    }
  }
}","/** 
 * INTERNAL: Set flag modified value.
 * @param modified   flag modified's new value.
 */
public void _setModified(boolean modified){
  if (changeSummary != null) {
    if (isLogging()) {
      updateChangeSummaryWithOriginalValues();
    }
  }
}"
68572,"/** 
 * INTERNAL:
 */
public void buildChangeSummaryMapping(){
  XMLCompositeObjectMapping aCMapping=new XMLCompositeObjectMapping();
  aCMapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(getContainingType().getURI(),false);
  aCMapping.setXPath(xpath);
  aCMapping.setGetMethodName(""String_Node_Str"");
  aCMapping.setSetMethodName(""String_Node_Str"");
  aCMapping.setReferenceClass(SDOChangeSummary.class);
  setXmlMapping(aCMapping);
  return;
}","/** 
 * INTERNAL:
 */
public void buildChangeSummaryMapping(){
  XMLCompositeObjectMapping aCMapping=new XMLCompositeObjectMapping();
  aCMapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(getContainingType().getURI(),false);
  aCMapping.setXPath(xpath);
  aCMapping.setGetMethodName(""String_Node_Str"");
  aCMapping.setSetMethodName(""String_Node_Str"");
  aCMapping.setReferenceClass(SDOChangeSummary.class);
  if (nullable) {
    setIsSetNillablePolicyOnMapping(aCMapping,propertyName);
  }
 else {
    setIsSetOptionalPolicyOnMapping(aCMapping,propertyName);
  }
  setXmlMapping(aCMapping);
}"
68573,"/** 
 * INTERNAL:
 * @param index
 * @param item
 * @param updateSequence
 */
public void add(int index,Object item,boolean updateSequence){
  if ((index < 0) || (index > size())) {
    return;
  }
  copyElements();
  updateContainment(item,updateSequence);
  currentElements.add(index,item);
}","/** 
 * INTERNAL:
 * @param index
 * @param item
 * @param updateSequence
 */
public void add(int index,Object item,boolean updateSequence){
  if ((index < 0) || (index > size())) {
    return;
  }
  copyElements();
  currentElements.add(index,item);
  updateContainment(item,updateSequence);
}"
68574,"private SDOProperty buildPropertyFromDataObject(DataObject dataObject,Type containingType,List types){
  String nameValue=dataObject.getString(""String_Node_Str"");
  Object typeObjectValue=dataObject.get(""String_Node_Str"");
  SDOProperty newProperty=new SDOProperty(aHelperContext);
  newProperty.setName(nameValue);
  Type typeValue=(Type)getValueFromObject(typeObjectValue,types);
  newProperty.setType(typeValue);
  if (typeValue != null) {
    if (typeValue == SDOConstants.SDO_BYTES) {
      newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (typeValue.isDataType()) {
      if (isBaseTypeBytes(typeValue)) {
        newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setContainment(dataObject.getBoolean(""String_Node_Str""));
  }
 else {
    if (typeValue != null) {
      newProperty.setContainment(!typeValue.isDataType());
    }
  }
  newProperty.setReadOnly(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setMany(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setNullable(dataObject.getBoolean(""String_Node_Str""));
  List aliasNames=dataObject.getList(""String_Node_Str"");
  for (int i=0; i < aliasNames.size(); i++) {
    Object aliasName=aliasNames.get(i);
    newProperty.getAliasNames().add(aliasName);
  }
  Object opposite=dataObject.get(""String_Node_Str"");
  if (opposite != null) {
    if (opposite instanceof Property) {
      newProperty.setOpposite((Property)opposite);
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setDefault(dataObject.get(""String_Node_Str""));
  }
  List openProps=((SDODataObject)dataObject)._getOpenContentProperties();
  for (int i=0; i < openProps.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openProps.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  List openPropsAttrs=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (int i=0; i < openPropsAttrs.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openPropsAttrs.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  if (newProperty.getType() == null) {
    throw SDOException.noTypeSpecifiedForProperty(newProperty.getName());
  }
  if (containingType != null) {
    ((SDOType)containingType).addDeclaredProperty(newProperty);
    if (aHelperContext.getXSDHelper().isElement(newProperty)) {
      newProperty.setNamespaceQualified(true);
    }
    newProperty.buildMapping(containingType.getURI());
  }
  return newProperty;
}","private SDOProperty buildPropertyFromDataObject(DataObject dataObject,Type containingType,List types){
  String nameValue=dataObject.getString(""String_Node_Str"");
  Object typeObjectValue=dataObject.get(""String_Node_Str"");
  SDOProperty newProperty=new SDOProperty(aHelperContext);
  newProperty.setName(nameValue);
  Type typeValue=(Type)getValueFromObject(typeObjectValue,types);
  newProperty.setType(typeValue);
  if (typeValue != null) {
    if (typeValue == SDOConstants.SDO_BYTES) {
      newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (typeValue.isDataType()) {
      if (isBaseTypeBytes(typeValue)) {
        newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setContainment(dataObject.getBoolean(""String_Node_Str""));
  }
 else {
    if (typeValue != null) {
      newProperty.setContainment(!typeValue.isDataType());
    }
  }
  newProperty.setReadOnly(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setMany(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setNullable(dataObject.getBoolean(""String_Node_Str""));
  List aliasNames=dataObject.getList(""String_Node_Str"");
  for (int i=0; i < aliasNames.size(); i++) {
    Object aliasName=aliasNames.get(i);
    newProperty.getAliasNames().add(aliasName);
  }
  Object opposite=dataObject.get(""String_Node_Str"");
  if (opposite != null) {
    if (opposite instanceof Property) {
      newProperty.setOpposite((Property)opposite);
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setDefault(dataObject.get(""String_Node_Str""));
  }
  List openProps=((SDODataObject)dataObject)._getOpenContentProperties();
  for (int i=0; i < openProps.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openProps.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  List openPropsAttrs=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (int i=0; i < openPropsAttrs.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openPropsAttrs.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  if (newProperty.getType() == null) {
    throw SDOException.noTypeSpecifiedForProperty(newProperty.getName());
  }
  if (containingType != null) {
    ((SDOType)containingType).addDeclaredProperty(newProperty);
    if (aHelperContext.getXSDHelper().isElement(newProperty) || newProperty.getType().isChangeSummaryType()) {
      newProperty.setNamespaceQualified(true);
    }
    newProperty.buildMapping(containingType.getURI());
  }
  return newProperty;
}"
68575,"/** 
 * @param currentDO
 * @param isCSonAncestor
 */
public void assertChangeSummaryStatusIfClearedIfCSIsAncestor(DataObject currentDO,boolean isCSonAncestor){
  if (currentDO != null) {
    if (isCSonAncestor) {
      assertNull(((SDODataObject)currentDO).getChangeSummary());
    }
 else {
      assertNotNull(((SDODataObject)currentDO).getChangeSummary());
    }
    List instanceProperties=currentDO.getInstanceProperties();
    for (int i=0; i < instanceProperties.size(); i++) {
      Property nextProperty=(Property)instanceProperties.get(i);
      Object value=currentDO.get(nextProperty);
      if (nextProperty.getType() != SDO_CHANGESUMMARY && !nextProperty.getType().isDataType() && value != null) {
        if (nextProperty.isMany()) {
          Object manyItem;
          for (int index=0; index < ((List)value).size(); index++) {
            manyItem=((List)value).get(index);
            if (manyItem != null) {
              assertChangeSummaryStatusIfClearedIfCSIsAncestor((SDODataObject)manyItem,isCSonAncestor);
            }
          }
        }
 else {
          assertChangeSummaryStatusIfClearedIfCSIsAncestor((SDODataObject)value,isCSonAncestor);
        }
      }
    }
  }
}","/** 
 * @param currentDO
 * @param isCSonAncestor
 */
public void assertChangeSummaryStatusIfClearedIfCSIsAncestor(DataObject currentDO,boolean isCSonAncestor){
  if (currentDO != null) {
    if (isCSonAncestor) {
      assertNull(((SDODataObject)currentDO).getChangeSummary());
    }
 else {
      assertNotNull(((SDODataObject)currentDO).getChangeSummary());
    }
    List instanceProperties=currentDO.getInstanceProperties();
    for (int i=0; i < instanceProperties.size(); i++) {
      SDOProperty nextProperty=(SDOProperty)instanceProperties.get(i);
      Object value=currentDO.get(nextProperty);
      if (!nextProperty.getType().isChangeSummaryType() && !nextProperty.getType().isDataType() && value != null) {
        if (nextProperty.isMany()) {
          Object manyItem;
          for (int index=0; index < ((List)value).size(); index++) {
            manyItem=((List)value).get(index);
            if (manyItem != null) {
              assertChangeSummaryStatusIfClearedIfCSIsAncestor((SDODataObject)manyItem,isCSonAncestor);
            }
          }
        }
 else {
          assertChangeSummaryStatusIfClearedIfCSIsAncestor((SDODataObject)value,isCSonAncestor);
        }
      }
    }
  }
}"
68576,"private List<DataObject> preOrderTraversalDataObjectList(SDODataObject currentDO,ArrayList<DataObject> currentList,boolean countNullObjects,boolean recurse){
  if (currentDO != null) {
    currentList.add(currentDO);
    List instanceProperties=currentDO.getInstanceProperties();
    Property nextProperty=null;
    Object value=null;
    if (recurse) {
      for (int i=0; i < instanceProperties.size(); i++) {
        nextProperty=(Property)instanceProperties.get(i);
        value=currentDO.get(nextProperty);
        boolean recurseHopefullyNotToInfinityPlease=true;
        if (nextProperty.getType() != SDO_CHANGESUMMARY && !nextProperty.getType().isDataType()) {
          if (null != nextProperty.getOpposite()) {
            recurseHopefullyNotToInfinityPlease=false;
          }
          if (nextProperty.isMany()) {
            Object manyItem;
            for (int index=0; index < ((List)value).size(); index++) {
              manyItem=((List)value).get(index);
              if (manyItem != null && manyItem instanceof SDODataObject) {
                preOrderTraversalDataObjectList((SDODataObject)manyItem,currentList,countNullObjects,recurseHopefullyNotToInfinityPlease);
              }
            }
          }
 else {
            if (value != null) {
              preOrderTraversalDataObjectList((SDODataObject)value,currentList,countNullObjects,recurseHopefullyNotToInfinityPlease);
            }
          }
        }
      }
    }
  }
 else {
    if (countNullObjects) {
      currentList.add(currentDO);
    }
  }
  return currentList;
}","private List<DataObject> preOrderTraversalDataObjectList(SDODataObject currentDO,ArrayList<DataObject> currentList,boolean countNullObjects,boolean recurse){
  if (currentDO != null) {
    currentList.add(currentDO);
    List instanceProperties=currentDO.getInstanceProperties();
    SDOProperty nextProperty=null;
    Object value=null;
    if (recurse) {
      for (int i=0; i < instanceProperties.size(); i++) {
        nextProperty=(SDOProperty)instanceProperties.get(i);
        value=currentDO.get(nextProperty);
        boolean recurseHopefullyNotToInfinityPlease=true;
        if (!nextProperty.getType().isChangeSummaryType() && !nextProperty.getType().isDataType()) {
          if (null != nextProperty.getOpposite()) {
            recurseHopefullyNotToInfinityPlease=false;
          }
          if (nextProperty.isMany()) {
            Object manyItem;
            for (int index=0; index < ((List)value).size(); index++) {
              manyItem=((List)value).get(index);
              if (manyItem != null && manyItem instanceof SDODataObject) {
                preOrderTraversalDataObjectList((SDODataObject)manyItem,currentList,countNullObjects,recurseHopefullyNotToInfinityPlease);
              }
            }
          }
 else {
            if (value != null) {
              preOrderTraversalDataObjectList((SDODataObject)value,currentList,countNullObjects,recurseHopefullyNotToInfinityPlease);
            }
          }
        }
      }
    }
  }
 else {
    if (countNullObjects) {
      currentList.add(currentDO);
    }
  }
  return currentList;
}"
68577,"/** 
 * Structure: root rootproperty1 --> is DataType; SDOString  <---> value: ""test"" rootproperty2 --> not DataType            <---> value: containedDataObject root's child: containedDataObject1 contained1Property1 --> not DataType; bidirectional   <---> value: containedByContainedDataObject containedDataObject containedProperty1  --> is DataType; SDOString  <---> value: ""test1"" containedProperty2  --> not DataType            <---> value: containedByContainedDataObject containedProperty3  --> not DataType            <---> value: containedByContainedDataObject3 (bidirectional inside sub-tree copy tree) containedProperty_ChangeSummary  --> not DataType  <---> value: chSum(ChangeSummary) containedDataObject's child: containedByContainedDataObject containedByContainedProperty1  --> not DataType; bidirectional   <---> value: containedDataObejct1 Covered test cases: Test case 1: copied root's DataType property rootproperty1 has same value Test Case 2: copied root's not DataType property rootproperty2 has a copied DataObject from containedDataObject Test case 3: there exists dataobject's bidirectional not containment property has another DataObject as value Test Case 4: there exists dataobject's unidirectional not containment property has another DataObject as value Test Case 5: there exists dataobject's non containment property has another DataObject that is not in containment tree as value Test Case 6: copied containedProperty's ChangeSummary Type property containedProperty_ChangeSummary has a copied ChangeSummary from source's ChangeSummary chSum
 */
public void setUp(){
  super.setUp();
  DataObject rootTypeDO=defineType(rootTypeUri,rootTypeName);
  rootType=(SDOType)typeHelper.define(rootTypeDO);
  rootProperty1=new SDOProperty(aHelperContext);
  rootProperty1.setName(""String_Node_Str"");
  SDOType rootProperty1_type=SDOConstants.SDO_STRING;
  rootProperty1_type.setDataType(true);
  rootProperty1.setType(rootProperty1_type);
  rootType.addDeclaredProperty(rootProperty1);
  rootProperty2=new SDOProperty(aHelperContext);
  rootProperty2.setName(""String_Node_Str"");
  rootProperty2.setContainment(true);
  SDOType rootProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  QName qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootProperty2_type);
  rootProperty2_type.setDataType(false);
  rootProperty2.setType(rootProperty2_type);
  rootType.addDeclaredProperty((Property)rootProperty2);
  rootProperty3=new SDOProperty(aHelperContext);
  rootProperty3.setName(""String_Node_Str"");
  rootProperty3.setContainment(true);
  DataObject rootProperty3_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty3_type=(SDOType)typeHelper.define(rootProperty3_typeDO);
  rootProperty3_type.setDataType(false);
  rootProperty3.setType(rootProperty3_type);
  rootType.addDeclaredProperty(rootProperty3);
  rootProperty4=new SDOProperty(aHelperContext);
  rootProperty4.setName(""String_Node_Str"");
  rootProperty4.setContainment(true);
  rootProperty4.setMany(true);
  DataObject rootProperty4_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty4_type=(SDOType)typeHelper.define(rootProperty4_typeDO);
  rootProperty4_type.setDataType(false);
  rootProperty4.setType(rootProperty4_type);
  rootType.addDeclaredProperty(rootProperty4);
  SDOProperty rootProperty_NotContainment=new SDOProperty(aHelperContext);
  rootProperty_NotContainment.setContainment(false);
  DataObject rootProperty_NotContainment_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty_NotContainment_type=(SDOType)typeHelper.define(rootProperty_NotContainment_typeDO);
  rootProperty_NotContainment_type.setDataType(false);
  rootProperty_NotContainment.setType(rootProperty_NotContainment_type);
  rootProperty_NotContainment.setName(""String_Node_Str"");
  rootType.addDeclaredProperty(rootProperty_NotContainment);
  contained1Property3=new SDOProperty(aHelperContext);
  contained1Property3.setName(""String_Node_Str"");
  contained1Property3.setContainment(false);
  DataObject contained1Property3_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType contained1Property3_type=(SDOType)typeHelper.define(contained1Property3_typeDO);
  contained1Property3_type.setDataType(false);
  contained1Property3.setType(contained1Property3_type);
  objects=new ArrayList();
  SDOType obj1Type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,obj1Type);
  SDOProperty obj1Property=new SDOProperty(aHelperContext);
  obj1Property.setName(""String_Node_Str"");
  SDOType obj1PropertyType=SDOConstants.SDO_STRING;
  obj1PropertyType.setDataType(true);
  obj1Property.setType(obj1PropertyType);
  obj1Property.setContainment(false);
  obj1Type.addDeclaredProperty(obj1Property);
  SDODataObject obj1=(SDODataObject)dataFactory.create(obj1Type);
  objects.add(obj1);
  obj1.set(obj1Property,""String_Node_Str"");
  DataObject containedTypeDO=defineType(containedTypeUri,containedTypeName);
  containedType=(SDOType)typeHelper.define(containedTypeDO);
  containedProperty1=new SDOProperty(aHelperContext);
  containedProperty1.setName(""String_Node_Str"");
  SDOType containedProperty1_type=SDOConstants.SDO_STRING;
  containedProperty1_type.setDataType(true);
  containedProperty1.setType(containedProperty1_type);
  containedType.addDeclaredProperty(containedProperty1);
  containedProperty2=new SDOProperty(aHelperContext);
  containedProperty2.setName(""String_Node_Str"");
  containedProperty2.setContainment(true);
  SDOType containedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedProperty2_type);
  containedProperty2_type.setDataType(false);
  containedProperty2.setType(containedProperty2_type);
  containedType.addDeclaredProperty(containedProperty2);
  containedProperty3=new SDOProperty(aHelperContext);
  containedProperty3.setName(""String_Node_Str"");
  containedProperty3.setContainment(true);
  SDOType containedProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedProperty3_type);
  containedProperty3_type.setDataType(false);
  containedProperty3.setType(containedProperty3_type);
  containedType.addDeclaredProperty(containedProperty3);
  containedProperty_ChangeSummary=new SDOProperty(aHelperContext);
  containedProperty_ChangeSummary.setContainment(false);
  containedProperty_ChangeSummary.setType(SDOConstants.SDO_CHANGESUMMARY);
  containedProperty_ChangeSummary.setName(""String_Node_Str"");
  containedType.addDeclaredProperty(containedProperty_ChangeSummary);
  containedDataObject=(SDODataObject)dataFactory.create(containedType);
  containedType1=new SDOType(containedType1Uri,containedType1Name);
  qname=new QName(containedType1Uri,containedType1Name);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedType1);
  contained1Property1=new SDOProperty(aHelperContext);
  contained1Property1.setName(""String_Node_Str"");
  contained1Property1.setContainment(false);
  SDOType contained1Property1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,contained1Property1_type);
  contained1Property1_type.setDataType(false);
  contained1Property1.setType(contained1Property1_type);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedType1.addDeclaredProperty(contained1Property1);
  containedDataObject1=(SDODataObject)dataFactory.create(containedType1);
  containedByContainedType=new SDOType(containedBycontainedType1Uri,containedByContainedTypeName);
  qname=new QName(containedBycontainedType1Uri,containedByContainedTypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedType);
  containedByContainedProperty1=new SDOProperty(aHelperContext);
  containedByContainedProperty1.setName(""String_Node_Str"");
  containedByContainedProperty1.setContainment(false);
  SDOType containedByContainedProperty1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedProperty1_type);
  containedByContainedProperty1_type.setDataType(false);
  containedByContainedProperty1.setType(containedByContainedProperty1_type);
  containedByContainedProperty1.setOpposite(contained1Property1);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty1);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedByContainedProperty2=new SDOProperty(aHelperContext);
  containedByContainedProperty2.setName(""String_Node_Str"");
  containedByContainedProperty2.setContainment(false);
  SDOType containedByContainedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedProperty2_type);
  containedByContainedProperty2_type.setDataType(false);
  containedByContainedProperty2.setType(containedByContainedProperty2_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty2);
  containedByContainedProperty3=new SDOProperty(aHelperContext);
  containedByContainedProperty3.setName(""String_Node_Str"");
  containedByContainedProperty3.setContainment(false);
  SDOType containedByContainedProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedProperty3_type);
  containedByContainedProperty3_type.setDataType(false);
  containedByContainedProperty3.setType(containedByContainedProperty3_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty3);
  containedByContainedDataObject=(SDODataObject)dataFactory.create(containedByContainedType);
  root=(SDODataObject)dataFactory.create(rootType);
  root.set(rootProperty1,""String_Node_Str"");
  root.set(rootProperty2,containedDataObject);
  root.set(rootProperty3,containedDataObject1);
  root.set(rootProperty4,objects);
  containedDataObject.set(containedProperty1,""String_Node_Str"");
  containedDataObject.set(containedProperty2,containedByContainedDataObject);
  containedDataObject1.set(contained1Property1,containedByContainedDataObject);
  containedByContainedDataObject.set(containedByContainedProperty1,containedDataObject1);
  rootUC4Type=new SDOType(rootUC4TypeUri,rootUC4TypeName);
  qname=new QName(rootUC4TypeUri,rootUC4TypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootUC4Type);
  homeType=new SDOType(homeObjectUri,homeObjectName);
  qname=new QName(homeObjectUri,homeObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeType);
  addressType=new SDOType(addressObjectUri,addressObjectName);
  qname=new QName(addressObjectUri,addressObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressType);
  workType=new SDOType(workObjectUri,workObjectName);
  qname=new QName(workObjectUri,workObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workType);
  rootHome=new SDOProperty(aHelperContext);
  rootHome.setName(rootHomeName);
  rootHome.setContainment(true);
  SDOType rootHome_type=new SDOType(rootHomeUri,rootHomeName);
  qname=new QName(rootHomeUri,rootHomeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootHome_type);
  rootHome_type.setDataType(false);
  rootHome.setType(rootHome_type);
  rootUC4Type.addDeclaredProperty((Property)rootHome);
  rootWork=new SDOProperty(aHelperContext);
  rootWork.setName(rootWorkName);
  rootWork.setContainment(false);
  SDOType rootWork_type=new SDOType(rootWorkUri,rootWorkName);
  qname=new QName(rootWorkUri,rootWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootWork_type);
  rootWork_type.setDataType(false);
  rootWork.setType(rootWork_type);
  rootUC4Type.addDeclaredProperty((Property)rootWork);
  homeAddress=new SDOProperty(aHelperContext);
  homeAddress.setName(homeAddressName);
  homeAddress.setContainment(true);
  SDOType homeAddress_type=new SDOType(homeAddressUri,homeAddressName);
  qname=new QName(homeAddressUri,homeAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeAddress_type);
  homeAddress_type.setDataType(false);
  homeAddress.setType(homeAddress_type);
  homeType.addDeclaredProperty((Property)homeAddress);
  workAddress=new SDOProperty(aHelperContext);
  workAddress.setName(workAddressName);
  workAddress.setContainment(false);
  SDOType workAddress_type=new SDOType(workAddressUri,workAddressName);
  qname=new QName(workAddressUri,workAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workAddress_type);
  workAddress_type.setDataType(false);
  workAddress.setType(workAddress_type);
  workType.addDeclaredProperty((Property)workAddress);
  addressWork=new SDOProperty(aHelperContext);
  addressWork.setName(addressWorkName);
  addressWork.setContainment(true);
  SDOType addressWork_type=new SDOType(addressWorkUri,addressWorkName);
  qname=new QName(addressWorkUri,addressWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressWork_type);
  addressWork_type.setDataType(false);
  addressWork.setType(addressWork_type);
  addressType.addDeclaredProperty((Property)addressWork);
  rootUC4=(SDODataObject)dataFactory.create(rootUC4Type);
  addressObject=(SDODataObject)dataFactory.create(addressType);
  homeObject=(SDODataObject)dataFactory.create(homeType);
  workObject=(SDODataObject)dataFactory.create(workType);
  addressWork.setOpposite(workAddress);
  workAddress.setOpposite(addressWork);
  rootUC4.set(rootHome,homeObject);
  rootUC4.set(rootWork,workObject);
  homeObject.set(homeAddress,addressObject);
  addressObject.set(addressWork,workObject);
  workObject.set(workAddress,addressObject);
  rootUC4Typem=new SDOType(rootUC4TypeUrim,rootUC4TypeName);
  qname=new QName(rootUC4TypeUrim,rootUC4TypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootUC4Typem);
  homeTypem=new SDOType(homeObjectUrim,homeObjectName);
  qname=new QName(homeObjectUrim,homeObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeTypem);
  addressTypem=new SDOType(addressObjectUrim,addressObjectName);
  qname=new QName(addressObjectUrim,addressObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressTypem);
  workTypem=new SDOType(workObjectUrim,workObjectName);
  qname=new QName(workObjectUrim,workObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workTypem);
  rootHomem=new SDOProperty(aHelperContext);
  rootHomem.setName(rootHomeName);
  rootHomem.setContainment(true);
  SDOType rootHome_typem=new SDOType(rootHomeUrim,rootHomeName);
  qname=new QName(rootHomeUrim,rootHomeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootHome_typem);
  rootHome_typem.setDataType(false);
  rootHomem.setType(rootHome_typem);
  rootUC4Typem.addDeclaredProperty((Property)rootHomem);
  rootWorkm=new SDOProperty(aHelperContext);
  rootWorkm.setName(rootWorkName);
  rootWorkm.setContainment(false);
  rootWorkm.setMany(true);
  SDOType rootWork_typem=new SDOType(rootWorkUrim,rootWorkName);
  qname=new QName(rootWorkUrim,rootWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootWork_typem);
  rootWork_typem.setDataType(false);
  rootWorkm.setType(rootWork_typem);
  rootUC4Typem.addDeclaredProperty((Property)rootWorkm);
  homeAddressm=new SDOProperty(aHelperContext);
  homeAddressm.setName(homeAddressName);
  homeAddressm.setContainment(true);
  SDOType homeAddress_typem=new SDOType(homeAddressUrim,homeAddressName);
  qname=new QName(homeAddressUrim,homeAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeAddress_typem);
  homeAddress_typem.setDataType(false);
  homeAddressm.setType(homeAddress_typem);
  homeTypem.addDeclaredProperty((Property)homeAddressm);
  workAddressm=new SDOProperty(aHelperContext);
  workAddressm.setName(workAddressName);
  workAddressm.setContainment(false);
  SDOType workAddress_typem=new SDOType(workAddressUri,workAddressName);
  qname=new QName(workAddressUri,workAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workAddress_typem);
  workAddress_typem.setDataType(false);
  workAddressm.setType(workAddress_typem);
  workTypem.addDeclaredProperty((Property)workAddressm);
  addressWorkm=new SDOProperty(aHelperContext);
  addressWorkm.setName(addressWorkName);
  addressWorkm.setContainment(false);
  addressWorkm.setMany(true);
  SDOType addressWork_typem=new SDOType(addressWorkUri,addressWorkName);
  qname=new QName(addressWorkUri,addressWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressWork_typem);
  addressWork_typem.setDataType(false);
  addressWorkm.setType(addressWork_typem);
  addressTypem.addDeclaredProperty((Property)addressWorkm);
  rootUC4m=(SDODataObject)dataFactory.create(rootUC4Typem);
  addressObjectm=(SDODataObject)dataFactory.create(addressTypem);
  homeObjectm=(SDODataObject)dataFactory.create(homeTypem);
  workObjectm=(SDODataObject)dataFactory.create(workTypem);
  addressWorkm.setOpposite(workAddressm);
  workAddressm.setOpposite(addressWorkm);
  rootUC4m.set(rootHomem,homeObjectm);
  ArrayList workList=new ArrayList();
  workList.add(workObjectm);
  rootUC4m.set(rootWorkm,workList);
  homeObjectm.set(homeAddressm,addressObjectm);
  addressObjectm.set(addressWorkm,workList);
  workObjectm.set(workAddressm,addressObjectm);
  rootUCUniOutsideType=new SDOType(rootUCUniOutsideTypeUri,rootUCUniOutsideTypeName);
  qname=new QName(rootUCUniOutsideTypeUri,rootUCUniOutsideTypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootUCUniOutsideType);
  homeTypeUCUniOutside=new SDOType(homeObjectUriUCUniOutside,homeObjectNameUCUniOutside);
  qname=new QName(homeObjectUriUCUniOutside,homeObjectNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeTypeUCUniOutside);
  addressTypeUCUniOutside=new SDOType(addressObjectUriUCUniOutside,addressObjectNameUCUniOutside);
  qname=new QName(addressObjectUriUCUniOutside,addressObjectNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressTypeUCUniOutside);
  workTypeUCUniOutside=new SDOType(workObjectUriUCUniOutside,workObjectNameUCUniOutside);
  qname=new QName(workObjectUriUCUniOutside,workObjectNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workTypeUCUniOutside);
  rootHomeUCUniOutside=new SDOProperty(aHelperContext);
  rootHomeUCUniOutside.setName(rootHomeNameUCUniOutside);
  rootHomeUCUniOutside.setContainment(true);
  SDOType rootHome_typeUCUniOutside=new SDOType(rootHomeUriUCUniOutside,rootHomeNameUCUniOutside);
  qname=new QName(rootHomeUriUCUniOutside,rootHomeNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootHome_typeUCUniOutside);
  rootHome_typeUCUniOutside.setDataType(false);
  rootHomeUCUniOutside.setType(rootHome_typeUCUniOutside);
  rootUCUniOutsideType.addDeclaredProperty((Property)rootHomeUCUniOutside);
  rootWorkUCUniOutside=new SDOProperty(aHelperContext);
  rootWorkUCUniOutside.setName(rootWorkNameUCUniOutside);
  rootWorkUCUniOutside.setContainment(false);
  SDOType rootWork_typeUCUniOutside=new SDOType(rootWorkUriUCUniOutside,rootWorkNameUCUniOutside);
  qname=new QName(rootWorkUriUCUniOutside,rootWorkNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootWork_typeUCUniOutside);
  rootWork_typeUCUniOutside.setDataType(false);
  rootWorkUCUniOutside.setType(rootWork_typeUCUniOutside);
  rootUCUniOutsideType.addDeclaredProperty((Property)rootWorkUCUniOutside);
  homeAddressUCUniOutside=new SDOProperty(aHelperContext);
  homeAddressUCUniOutside.setName(homeAddressNameUCUniOutside);
  homeAddressUCUniOutside.setContainment(true);
  SDOType homeAddress_typeUCUniOutside=new SDOType(homeAddressUriUCUniOutside,homeAddressNameUCUniOutside);
  qname=new QName(homeAddressUriUCUniOutside,homeAddressNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeAddress_typeUCUniOutside);
  homeAddress_typeUCUniOutside.setDataType(false);
  homeAddressUCUniOutside.setType(homeAddress_typeUCUniOutside);
  homeTypeUCUniOutside.addDeclaredProperty((Property)homeAddressUCUniOutside);
  addressWorkUCUniOutside=new SDOProperty(aHelperContext);
  addressWorkUCUniOutside.setName(addressWorkNameUCUniOutside);
  addressWorkUCUniOutside.setContainment(true);
  SDOType addressWork_typeUCUniOutside=new SDOType(addressWorkUriUCUniOutside,addressWorkNameUCUniOutside);
  qname=new QName(addressWorkUriUCUniOutside,addressWorkNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressWork_typeUCUniOutside);
  addressWork_typeUCUniOutside.setDataType(false);
  addressWorkUCUniOutside.setType(addressWork_typeUCUniOutside);
  addressTypeUCUniOutside.addDeclaredProperty((Property)addressWorkUCUniOutside);
  rootUCUniOutside=(SDODataObject)dataFactory.create(rootUCUniOutsideType);
  addressObjectUCUniOutside=(SDODataObject)dataFactory.create(addressTypeUCUniOutside);
  homeObjectUCUniOutside=(SDODataObject)dataFactory.create(homeTypeUCUniOutside);
  workObjectUCUniOutside=(SDODataObject)dataFactory.create(workTypeUCUniOutside);
  rootUCUniOutside.set(rootHomeUCUniOutside,homeObjectUCUniOutside);
  rootUCUniOutside.set(rootWorkUCUniOutside,workObjectUCUniOutside);
  homeObjectUCUniOutside.set(homeAddressUCUniOutside,addressObjectUCUniOutside);
  addressObjectUCUniOutside.set(addressWorkUCUniOutside,workObjectUCUniOutside);
  containedDataObject.getChangeSummary().beginLogging();
}","/** 
 * Structure: root rootproperty1 --> is DataType; SDOString  <---> value: ""test"" rootproperty2 --> not DataType            <---> value: containedDataObject root's child: containedDataObject1 contained1Property1 --> not DataType; bidirectional   <---> value: containedByContainedDataObject containedDataObject containedProperty1  --> is DataType; SDOString  <---> value: ""test1"" containedProperty2  --> not DataType            <---> value: containedByContainedDataObject containedProperty3  --> not DataType            <---> value: containedByContainedDataObject3 (bidirectional inside sub-tree copy tree) containedProperty_ChangeSummary  --> not DataType  <---> value: chSum(ChangeSummary) containedDataObject's child: containedByContainedDataObject containedByContainedProperty1  --> not DataType; bidirectional   <---> value: containedDataObejct1 Covered test cases: Test case 1: copied root's DataType property rootproperty1 has same value Test Case 2: copied root's not DataType property rootproperty2 has a copied DataObject from containedDataObject Test case 3: there exists dataobject's bidirectional not containment property has another DataObject as value Test Case 4: there exists dataobject's unidirectional not containment property has another DataObject as value Test Case 5: there exists dataobject's non containment property has another DataObject that is not in containment tree as value Test Case 6: copied containedProperty's ChangeSummary Type property containedProperty_ChangeSummary has a copied ChangeSummary from source's ChangeSummary chSum
 */
public void setUp(){
  super.setUp();
  SDOType changeSummaryType=(SDOType)aHelperContext.getTypeHelper().getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
  DataObject rootTypeDO=defineType(rootTypeUri,rootTypeName);
  rootType=(SDOType)typeHelper.define(rootTypeDO);
  rootProperty1=new SDOProperty(aHelperContext);
  rootProperty1.setName(""String_Node_Str"");
  SDOType rootProperty1_type=SDOConstants.SDO_STRING;
  rootProperty1.setType(rootProperty1_type);
  rootType.addDeclaredProperty(rootProperty1);
  rootProperty2=new SDOProperty(aHelperContext);
  rootProperty2.setName(""String_Node_Str"");
  rootProperty2.setContainment(true);
  SDOType rootProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  QName qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootProperty2_type);
  rootProperty2.setType(rootProperty2_type);
  rootType.addDeclaredProperty((Property)rootProperty2);
  rootProperty3=new SDOProperty(aHelperContext);
  rootProperty3.setName(""String_Node_Str"");
  rootProperty3.setContainment(true);
  DataObject rootProperty3_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty3_type=(SDOType)typeHelper.define(rootProperty3_typeDO);
  rootProperty3.setType(rootProperty3_type);
  rootType.addDeclaredProperty(rootProperty3);
  rootProperty4=new SDOProperty(aHelperContext);
  rootProperty4.setName(""String_Node_Str"");
  rootProperty4.setContainment(true);
  rootProperty4.setMany(true);
  DataObject rootProperty4_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty4_type=(SDOType)typeHelper.define(rootProperty4_typeDO);
  rootProperty4.setType(rootProperty4_type);
  rootType.addDeclaredProperty(rootProperty4);
  SDOProperty rootProperty_NotContainment=new SDOProperty(aHelperContext);
  rootProperty_NotContainment.setContainment(false);
  DataObject rootProperty_NotContainment_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty_NotContainment_type=(SDOType)typeHelper.define(rootProperty_NotContainment_typeDO);
  rootProperty_NotContainment.setType(rootProperty_NotContainment_type);
  rootProperty_NotContainment.setName(""String_Node_Str"");
  rootType.addDeclaredProperty(rootProperty_NotContainment);
  contained1Property3=new SDOProperty(aHelperContext);
  contained1Property3.setName(""String_Node_Str"");
  contained1Property3.setContainment(false);
  DataObject contained1Property3_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType contained1Property3_type=(SDOType)typeHelper.define(contained1Property3_typeDO);
  contained1Property3.setType(contained1Property3_type);
  objects=new ArrayList();
  SDOType obj1Type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,obj1Type);
  SDOProperty obj1Property=new SDOProperty(aHelperContext);
  obj1Property.setName(""String_Node_Str"");
  SDOType obj1PropertyType=SDOConstants.SDO_STRING;
  obj1Property.setType(obj1PropertyType);
  obj1Property.setContainment(false);
  obj1Type.addDeclaredProperty(obj1Property);
  SDODataObject obj1=(SDODataObject)dataFactory.create(obj1Type);
  objects.add(obj1);
  obj1.set(obj1Property,""String_Node_Str"");
  DataObject containedTypeDO=defineType(containedTypeUri,containedTypeName);
  containedType=(SDOType)typeHelper.define(containedTypeDO);
  containedProperty1=new SDOProperty(aHelperContext);
  containedProperty1.setName(""String_Node_Str"");
  SDOType containedProperty1_type=SDOConstants.SDO_STRING;
  containedProperty1.setType(containedProperty1_type);
  containedType.addDeclaredProperty(containedProperty1);
  containedProperty2=new SDOProperty(aHelperContext);
  containedProperty2.setName(""String_Node_Str"");
  containedProperty2.setContainment(true);
  SDOType containedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedProperty2_type);
  containedProperty2_type.setDataType(false);
  containedProperty2.setType(containedProperty2_type);
  containedType.addDeclaredProperty(containedProperty2);
  containedProperty3=new SDOProperty(aHelperContext);
  containedProperty3.setName(""String_Node_Str"");
  containedProperty3.setContainment(true);
  SDOType containedProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedProperty3_type);
  containedProperty3_type.setDataType(false);
  containedProperty3.setType(containedProperty3_type);
  containedType.addDeclaredProperty(containedProperty3);
  containedProperty_ChangeSummary=new SDOProperty(aHelperContext);
  containedProperty_ChangeSummary.setContainment(false);
  containedProperty_ChangeSummary.setType(changeSummaryType);
  containedProperty_ChangeSummary.setName(""String_Node_Str"");
  containedType.addDeclaredProperty(containedProperty_ChangeSummary);
  containedDataObject=(SDODataObject)dataFactory.create(containedType);
  containedType1=new SDOType(containedType1Uri,containedType1Name);
  qname=new QName(containedType1Uri,containedType1Name);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedType1);
  contained1Property1=new SDOProperty(aHelperContext);
  contained1Property1.setName(""String_Node_Str"");
  contained1Property1.setContainment(false);
  SDOType contained1Property1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,contained1Property1_type);
  contained1Property1_type.setDataType(false);
  contained1Property1.setType(contained1Property1_type);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedType1.addDeclaredProperty(contained1Property1);
  containedDataObject1=(SDODataObject)dataFactory.create(containedType1);
  containedByContainedType=new SDOType(containedBycontainedType1Uri,containedByContainedTypeName);
  qname=new QName(containedBycontainedType1Uri,containedByContainedTypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedType);
  containedByContainedProperty1=new SDOProperty(aHelperContext);
  containedByContainedProperty1.setName(""String_Node_Str"");
  containedByContainedProperty1.setContainment(false);
  SDOType containedByContainedProperty1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedProperty1_type);
  containedByContainedProperty1_type.setDataType(false);
  containedByContainedProperty1.setType(containedByContainedProperty1_type);
  containedByContainedProperty1.setOpposite(contained1Property1);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty1);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedByContainedProperty2=new SDOProperty(aHelperContext);
  containedByContainedProperty2.setName(""String_Node_Str"");
  containedByContainedProperty2.setContainment(false);
  SDOType containedByContainedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedProperty2_type);
  containedByContainedProperty2_type.setDataType(false);
  containedByContainedProperty2.setType(containedByContainedProperty2_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty2);
  containedByContainedProperty3=new SDOProperty(aHelperContext);
  containedByContainedProperty3.setName(""String_Node_Str"");
  containedByContainedProperty3.setContainment(false);
  SDOType containedByContainedProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  qname=new QName(""String_Node_Str"",""String_Node_Str"");
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,containedByContainedProperty3_type);
  containedByContainedProperty3_type.setDataType(false);
  containedByContainedProperty3.setType(containedByContainedProperty3_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty3);
  containedByContainedDataObject=(SDODataObject)dataFactory.create(containedByContainedType);
  root=(SDODataObject)dataFactory.create(rootType);
  root.set(rootProperty1,""String_Node_Str"");
  root.set(rootProperty2,containedDataObject);
  root.set(rootProperty3,containedDataObject1);
  root.set(rootProperty4,objects);
  containedDataObject.set(containedProperty1,""String_Node_Str"");
  containedDataObject.set(containedProperty2,containedByContainedDataObject);
  containedDataObject1.set(contained1Property1,containedByContainedDataObject);
  containedByContainedDataObject.set(containedByContainedProperty1,containedDataObject1);
  rootUC4Type=new SDOType(rootUC4TypeUri,rootUC4TypeName);
  qname=new QName(rootUC4TypeUri,rootUC4TypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootUC4Type);
  homeType=new SDOType(homeObjectUri,homeObjectName);
  qname=new QName(homeObjectUri,homeObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeType);
  addressType=new SDOType(addressObjectUri,addressObjectName);
  qname=new QName(addressObjectUri,addressObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressType);
  workType=new SDOType(workObjectUri,workObjectName);
  qname=new QName(workObjectUri,workObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workType);
  rootHome=new SDOProperty(aHelperContext);
  rootHome.setName(rootHomeName);
  rootHome.setContainment(true);
  SDOType rootHome_type=new SDOType(rootHomeUri,rootHomeName);
  qname=new QName(rootHomeUri,rootHomeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootHome_type);
  rootHome_type.setDataType(false);
  rootHome.setType(rootHome_type);
  rootUC4Type.addDeclaredProperty((Property)rootHome);
  rootWork=new SDOProperty(aHelperContext);
  rootWork.setName(rootWorkName);
  rootWork.setContainment(false);
  SDOType rootWork_type=new SDOType(rootWorkUri,rootWorkName);
  qname=new QName(rootWorkUri,rootWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootWork_type);
  rootWork_type.setDataType(false);
  rootWork.setType(rootWork_type);
  rootUC4Type.addDeclaredProperty((Property)rootWork);
  homeAddress=new SDOProperty(aHelperContext);
  homeAddress.setName(homeAddressName);
  homeAddress.setContainment(true);
  SDOType homeAddress_type=new SDOType(homeAddressUri,homeAddressName);
  qname=new QName(homeAddressUri,homeAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeAddress_type);
  homeAddress_type.setDataType(false);
  homeAddress.setType(homeAddress_type);
  homeType.addDeclaredProperty((Property)homeAddress);
  workAddress=new SDOProperty(aHelperContext);
  workAddress.setName(workAddressName);
  workAddress.setContainment(false);
  SDOType workAddress_type=new SDOType(workAddressUri,workAddressName);
  qname=new QName(workAddressUri,workAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workAddress_type);
  workAddress_type.setDataType(false);
  workAddress.setType(workAddress_type);
  workType.addDeclaredProperty((Property)workAddress);
  addressWork=new SDOProperty(aHelperContext);
  addressWork.setName(addressWorkName);
  addressWork.setContainment(true);
  SDOType addressWork_type=new SDOType(addressWorkUri,addressWorkName);
  qname=new QName(addressWorkUri,addressWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressWork_type);
  addressWork_type.setDataType(false);
  addressWork.setType(addressWork_type);
  addressType.addDeclaredProperty((Property)addressWork);
  rootUC4=(SDODataObject)dataFactory.create(rootUC4Type);
  addressObject=(SDODataObject)dataFactory.create(addressType);
  homeObject=(SDODataObject)dataFactory.create(homeType);
  workObject=(SDODataObject)dataFactory.create(workType);
  addressWork.setOpposite(workAddress);
  workAddress.setOpposite(addressWork);
  rootUC4.set(rootHome,homeObject);
  rootUC4.set(rootWork,workObject);
  homeObject.set(homeAddress,addressObject);
  addressObject.set(addressWork,workObject);
  workObject.set(workAddress,addressObject);
  rootUC4Typem=new SDOType(rootUC4TypeUrim,rootUC4TypeName);
  qname=new QName(rootUC4TypeUrim,rootUC4TypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootUC4Typem);
  homeTypem=new SDOType(homeObjectUrim,homeObjectName);
  qname=new QName(homeObjectUrim,homeObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeTypem);
  addressTypem=new SDOType(addressObjectUrim,addressObjectName);
  qname=new QName(addressObjectUrim,addressObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressTypem);
  workTypem=new SDOType(workObjectUrim,workObjectName);
  qname=new QName(workObjectUrim,workObjectName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workTypem);
  rootHomem=new SDOProperty(aHelperContext);
  rootHomem.setName(rootHomeName);
  rootHomem.setContainment(true);
  SDOType rootHome_typem=new SDOType(rootHomeUrim,rootHomeName);
  qname=new QName(rootHomeUrim,rootHomeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootHome_typem);
  rootHome_typem.setDataType(false);
  rootHomem.setType(rootHome_typem);
  rootUC4Typem.addDeclaredProperty((Property)rootHomem);
  rootWorkm=new SDOProperty(aHelperContext);
  rootWorkm.setName(rootWorkName);
  rootWorkm.setContainment(false);
  rootWorkm.setMany(true);
  SDOType rootWork_typem=new SDOType(rootWorkUrim,rootWorkName);
  qname=new QName(rootWorkUrim,rootWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootWork_typem);
  rootWork_typem.setDataType(false);
  rootWorkm.setType(rootWork_typem);
  rootUC4Typem.addDeclaredProperty((Property)rootWorkm);
  homeAddressm=new SDOProperty(aHelperContext);
  homeAddressm.setName(homeAddressName);
  homeAddressm.setContainment(true);
  SDOType homeAddress_typem=new SDOType(homeAddressUrim,homeAddressName);
  qname=new QName(homeAddressUrim,homeAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeAddress_typem);
  homeAddress_typem.setDataType(false);
  homeAddressm.setType(homeAddress_typem);
  homeTypem.addDeclaredProperty((Property)homeAddressm);
  workAddressm=new SDOProperty(aHelperContext);
  workAddressm.setName(workAddressName);
  workAddressm.setContainment(false);
  SDOType workAddress_typem=new SDOType(workAddressUri,workAddressName);
  qname=new QName(workAddressUri,workAddressName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workAddress_typem);
  workAddress_typem.setDataType(false);
  workAddressm.setType(workAddress_typem);
  workTypem.addDeclaredProperty((Property)workAddressm);
  addressWorkm=new SDOProperty(aHelperContext);
  addressWorkm.setName(addressWorkName);
  addressWorkm.setContainment(false);
  addressWorkm.setMany(true);
  SDOType addressWork_typem=new SDOType(addressWorkUri,addressWorkName);
  qname=new QName(addressWorkUri,addressWorkName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressWork_typem);
  addressWork_typem.setDataType(false);
  addressWorkm.setType(addressWork_typem);
  addressTypem.addDeclaredProperty((Property)addressWorkm);
  rootUC4m=(SDODataObject)dataFactory.create(rootUC4Typem);
  addressObjectm=(SDODataObject)dataFactory.create(addressTypem);
  homeObjectm=(SDODataObject)dataFactory.create(homeTypem);
  workObjectm=(SDODataObject)dataFactory.create(workTypem);
  addressWorkm.setOpposite(workAddressm);
  workAddressm.setOpposite(addressWorkm);
  rootUC4m.set(rootHomem,homeObjectm);
  ArrayList workList=new ArrayList();
  workList.add(workObjectm);
  rootUC4m.set(rootWorkm,workList);
  homeObjectm.set(homeAddressm,addressObjectm);
  addressObjectm.set(addressWorkm,workList);
  workObjectm.set(workAddressm,addressObjectm);
  rootUCUniOutsideType=new SDOType(rootUCUniOutsideTypeUri,rootUCUniOutsideTypeName);
  qname=new QName(rootUCUniOutsideTypeUri,rootUCUniOutsideTypeName);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootUCUniOutsideType);
  homeTypeUCUniOutside=new SDOType(homeObjectUriUCUniOutside,homeObjectNameUCUniOutside);
  qname=new QName(homeObjectUriUCUniOutside,homeObjectNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeTypeUCUniOutside);
  addressTypeUCUniOutside=new SDOType(addressObjectUriUCUniOutside,addressObjectNameUCUniOutside);
  qname=new QName(addressObjectUriUCUniOutside,addressObjectNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressTypeUCUniOutside);
  workTypeUCUniOutside=new SDOType(workObjectUriUCUniOutside,workObjectNameUCUniOutside);
  qname=new QName(workObjectUriUCUniOutside,workObjectNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,workTypeUCUniOutside);
  rootHomeUCUniOutside=new SDOProperty(aHelperContext);
  rootHomeUCUniOutside.setName(rootHomeNameUCUniOutside);
  rootHomeUCUniOutside.setContainment(true);
  SDOType rootHome_typeUCUniOutside=new SDOType(rootHomeUriUCUniOutside,rootHomeNameUCUniOutside);
  qname=new QName(rootHomeUriUCUniOutside,rootHomeNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootHome_typeUCUniOutside);
  rootHome_typeUCUniOutside.setDataType(false);
  rootHomeUCUniOutside.setType(rootHome_typeUCUniOutside);
  rootUCUniOutsideType.addDeclaredProperty((Property)rootHomeUCUniOutside);
  rootWorkUCUniOutside=new SDOProperty(aHelperContext);
  rootWorkUCUniOutside.setName(rootWorkNameUCUniOutside);
  rootWorkUCUniOutside.setContainment(false);
  SDOType rootWork_typeUCUniOutside=new SDOType(rootWorkUriUCUniOutside,rootWorkNameUCUniOutside);
  qname=new QName(rootWorkUriUCUniOutside,rootWorkNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,rootWork_typeUCUniOutside);
  rootWork_typeUCUniOutside.setDataType(false);
  rootWorkUCUniOutside.setType(rootWork_typeUCUniOutside);
  rootUCUniOutsideType.addDeclaredProperty((Property)rootWorkUCUniOutside);
  homeAddressUCUniOutside=new SDOProperty(aHelperContext);
  homeAddressUCUniOutside.setName(homeAddressNameUCUniOutside);
  homeAddressUCUniOutside.setContainment(true);
  SDOType homeAddress_typeUCUniOutside=new SDOType(homeAddressUriUCUniOutside,homeAddressNameUCUniOutside);
  qname=new QName(homeAddressUriUCUniOutside,homeAddressNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,homeAddress_typeUCUniOutside);
  homeAddress_typeUCUniOutside.setDataType(false);
  homeAddressUCUniOutside.setType(homeAddress_typeUCUniOutside);
  homeTypeUCUniOutside.addDeclaredProperty((Property)homeAddressUCUniOutside);
  addressWorkUCUniOutside=new SDOProperty(aHelperContext);
  addressWorkUCUniOutside.setName(addressWorkNameUCUniOutside);
  addressWorkUCUniOutside.setContainment(true);
  SDOType addressWork_typeUCUniOutside=new SDOType(addressWorkUriUCUniOutside,addressWorkNameUCUniOutside);
  qname=new QName(addressWorkUriUCUniOutside,addressWorkNameUCUniOutside);
  ((SDOTypeHelper)typeHelper).getTypesHashMap().put(qname,addressWork_typeUCUniOutside);
  addressWork_typeUCUniOutside.setDataType(false);
  addressWorkUCUniOutside.setType(addressWork_typeUCUniOutside);
  addressTypeUCUniOutside.addDeclaredProperty((Property)addressWorkUCUniOutside);
  rootUCUniOutside=(SDODataObject)dataFactory.create(rootUCUniOutsideType);
  addressObjectUCUniOutside=(SDODataObject)dataFactory.create(addressTypeUCUniOutside);
  homeObjectUCUniOutside=(SDODataObject)dataFactory.create(homeTypeUCUniOutside);
  workObjectUCUniOutside=(SDODataObject)dataFactory.create(workTypeUCUniOutside);
  rootUCUniOutside.set(rootHomeUCUniOutside,homeObjectUCUniOutside);
  rootUCUniOutside.set(rootWorkUCUniOutside,workObjectUCUniOutside);
  homeObjectUCUniOutside.set(homeAddressUCUniOutside,addressObjectUCUniOutside);
  addressObjectUCUniOutside.set(addressWorkUCUniOutside,workObjectUCUniOutside);
  containedDataObject.getChangeSummary().beginLogging();
}"
68578,"public void testDataObjectNotInContainmentTree(){
  SDOType notInTreeRootType=new SDOType(aHelperContext);
  SDOProperty notInTreeProperty=new SDOProperty(aHelperContext);
  notInTreeProperty.setName(""String_Node_Str"");
  SDOType notInTreePropertyType=new SDOType(aHelperContext);
  notInTreePropertyType.setDataType(false);
  notInTreeProperty.setContainment(true);
  notInTreeProperty.setType(notInTreePropertyType);
  notInTreeRootType.addDeclaredProperty(notInTreeProperty);
  SDODataObject dataObjectNotInTree=(SDODataObject)dataFactory.create(notInTreeRootType);
  SDODataObject dataObjectNotInTreeroot=(SDODataObject)dataFactory.create(notInTreeRootType);
  dataObjectNotInTreeroot.set(notInTreeProperty,dataObjectNotInTree);
  containedByContainedDataObject.set(containedByContainedProperty2,dataObjectNotInTree);
  SDODataObject copyRoot=null;
  try {
    copyRoot=(SDODataObject)((SDOCopyHelper)copyHelper).copy(root,getChangeSummary());
  }
 catch (  IllegalArgumentException e) {
    assertNull(copyRoot);
  }
}","public void testDataObjectNotInContainmentTree(){
  SDOType notInTreeRootType=new SDOType((SDOTypeHelper)aHelperContext.getTypeHelper());
  SDOProperty notInTreeProperty=new SDOProperty(aHelperContext);
  notInTreeProperty.setName(""String_Node_Str"");
  SDOType notInTreePropertyType=new SDOType((SDOTypeHelper)aHelperContext.getTypeHelper());
  notInTreePropertyType.setDataType(false);
  notInTreeProperty.setContainment(true);
  notInTreeProperty.setType(notInTreePropertyType);
  notInTreeRootType.addDeclaredProperty(notInTreeProperty);
  SDODataObject dataObjectNotInTree=(SDODataObject)dataFactory.create(notInTreeRootType);
  SDODataObject dataObjectNotInTreeroot=(SDODataObject)dataFactory.create(notInTreeRootType);
  dataObjectNotInTreeroot.set(notInTreeProperty,dataObjectNotInTree);
  containedByContainedDataObject.set(containedByContainedProperty2,dataObjectNotInTree);
  SDODataObject copyRoot=null;
  try {
    copyRoot=(SDODataObject)((SDOCopyHelper)copyHelper).copy(root,getChangeSummary());
  }
 catch (  IllegalArgumentException e) {
    assertNull(copyRoot);
  }
}"
68579,"public void setUp(){
  super.setUp();
  customerObject=rootObject.getDataObject(""String_Node_Str"");
  DataObject newProperty=dataFactory.create(SDOConstants.SDO_PROPERTY);
  SDOProperty nameProp=(SDOProperty)newProperty.getType().getProperty(""String_Node_Str"");
  newProperty.set(nameProp,""String_Node_Str"");
  newProperty.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  openPropString=typeHelper.defineOpenContentProperty(""String_Node_Str"",newProperty);
  DataObject newProperty2=dataFactory.create(SDOConstants.SDO_PROPERTY);
  newProperty2.set(nameProp,""String_Node_Str"");
  newProperty2.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  newProperty2.set(""String_Node_Str"",true);
  openPropStringMany=typeHelper.defineOpenContentProperty(""String_Node_Str"",newProperty2);
}","public void setUp(){
  super.setUp();
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  customerObject=rootObject.getDataObject(""String_Node_Str"");
  DataObject newProperty=dataFactory.create(propertyType);
  SDOProperty nameProp=(SDOProperty)newProperty.getType().getProperty(""String_Node_Str"");
  newProperty.set(nameProp,""String_Node_Str"");
  newProperty.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  openPropString=typeHelper.defineOpenContentProperty(""String_Node_Str"",newProperty);
  DataObject newProperty2=dataFactory.create(propertyType);
  newProperty2.set(nameProp,""String_Node_Str"");
  newProperty2.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  newProperty2.set(""String_Node_Str"",true);
  openPropStringMany=typeHelper.defineOpenContentProperty(""String_Node_Str"",newProperty2);
}"
68580,"/** 
 * Structure: root rootproperty1 --> is DataType; SDOString  <---> value: ""test"" rootproperty2 --> not DataType            <---> value: containedDataObject root's child: containedDataObject1 contained1Property1 --> not DataType; bidirectional   <---> value: containedByContainedDataObject containedDataObject containedProperty1  --> is DataType; SDOString  <---> value: ""test1"" containedProperty2  --> not DataType            <---> value: containedByContainedDataObject containedProperty_ChangeSummary  --> not DataType  <---> value: chSum(ChangeSummary) containedDataObject's child: containedByContainedDataObject containedByContainedProperty1  --> not DataType; bidirectional   <---> value: containedDataObject1 Covered test cases: Test Case 1: copied root's DataType property rootproperty1 has same value Test Case 2: copied root's not DataType property rootproperty2 has a copied DataObject from containedDataObject Test Case 3: there exists dataobject's bidirectional not containment property has another DataObject as value Test Case 4: there exists dataobject's unidirectional not containment property has another DataObject as value Test Case 5: there exists dataobject's not containment property has another DataObject that is not in containment tree as value Test Case 6: copied containedProperty's ChangeSummary Type property containedProperty_ChangeSummary has a copied ChangeSummary from source's ChangeSummary chSum
 */
public void setUp(){
  super.setUp();
  rootType=new SDOType(rootTypeUri,rootTypeName);
  rootProperty1=new SDOProperty(aHelperContext);
  rootProperty1.setName(""String_Node_Str"");
  SDOType rootProperty1_type=SDOConstants.SDO_STRING;
  rootProperty1_type.setDataType(true);
  rootProperty1.setType(rootProperty1_type);
  rootType.addDeclaredProperty((Property)rootProperty1);
  rootProperty2=new SDOProperty(aHelperContext);
  rootProperty2.setName(""String_Node_Str"");
  rootProperty2.setContainment(true);
  SDOType rootProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty2_type.setDataType(false);
  rootProperty2.setType(rootProperty2_type);
  rootType.addDeclaredProperty((Property)rootProperty2);
  rootProperty3=new SDOProperty(aHelperContext);
  rootProperty3.setName(""String_Node_Str"");
  rootProperty3.setContainment(true);
  SDOType rootProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty3_type.setDataType(false);
  rootProperty3.setType(rootProperty3_type);
  rootType.addDeclaredProperty((Property)rootProperty3);
  rootProperty4=new SDOProperty(aHelperContext);
  rootProperty4.setName(""String_Node_Str"");
  rootProperty4.setContainment(true);
  rootProperty4.setMany(true);
  SDOType rootProperty4_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty4_type.setDataType(false);
  rootProperty4.setType(rootProperty4_type);
  rootType.addDeclaredProperty((Property)rootProperty4);
  SDOProperty rootProperty_NotContainment=new SDOProperty(aHelperContext);
  rootProperty_NotContainment.setContainment(false);
  SDOType rootProperty_NotContainment_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty_NotContainment_type.setDataType(false);
  rootProperty_NotContainment.setType(rootProperty_NotContainment_type);
  rootProperty_NotContainment.setName(""String_Node_Str"");
  rootType.addDeclaredProperty(rootProperty_NotContainment);
  contained1Property3=new SDOProperty(aHelperContext);
  contained1Property3.setName(""String_Node_Str"");
  contained1Property3.setContainment(false);
  SDOType contained1Property3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  contained1Property3_type.setDataType(false);
  contained1Property3.setType(contained1Property3_type);
  objects=new ArrayList();
  SDOType obj1Type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  SDOProperty obj1Property=new SDOProperty(aHelperContext);
  obj1Property.setName(""String_Node_Str"");
  SDOType obj1PropertyType=SDOConstants.SDO_STRING;
  obj1PropertyType.setDataType(true);
  obj1Property.setType(obj1PropertyType);
  obj1Property.setContainment(false);
  obj1Type.addDeclaredProperty(obj1Property);
  SDODataObject obj1=(SDODataObject)dataFactory.create(obj1Type);
  objects.add(obj1);
  obj1.set(obj1Property,""String_Node_Str"");
  containedType=new SDOType(containedTypeUri,containedTypeName);
  containedProperty1=new SDOProperty(aHelperContext);
  containedProperty1.setName(""String_Node_Str"");
  SDOType containedProperty1_type=SDOConstants.SDO_STRING;
  containedProperty1_type.setDataType(true);
  containedProperty1.setType(containedProperty1_type);
  containedType.addDeclaredProperty(containedProperty1);
  containedProperty2=new SDOProperty(aHelperContext);
  containedProperty2.setName(""String_Node_Str"");
  containedProperty2.setContainment(true);
  SDOType containedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedProperty2_type.setDataType(false);
  containedProperty2.setType(containedProperty2_type);
  containedType.addDeclaredProperty(containedProperty2);
  containedProperty3=new SDOProperty(aHelperContext);
  containedProperty3.setName(""String_Node_Str"");
  containedProperty3.setContainment(true);
  SDOType containedProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedProperty3_type.setDataType(false);
  containedProperty3.setType(containedProperty3_type);
  containedType.addDeclaredProperty(containedProperty3);
  containedProperty_ChangeSummary=new SDOProperty(aHelperContext);
  containedProperty_ChangeSummary.setContainment(false);
  containedProperty_ChangeSummary.setType(SDOConstants.SDO_CHANGESUMMARY);
  containedProperty_ChangeSummary.setName(""String_Node_Str"");
  containedType.addDeclaredProperty((Property)containedProperty_ChangeSummary);
  containedDataObject=(SDODataObject)dataFactory.create(containedType);
  containedDataObject.getChangeSummary().beginLogging();
  containedType1=new SDOType(containedType1Uri,containedType1Name);
  contained1Property1=new SDOProperty(aHelperContext);
  contained1Property1.setName(""String_Node_Str"");
  contained1Property1.setContainment(false);
  SDOType contained1Property1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  contained1Property1_type.setDataType(false);
  contained1Property1.setType(contained1Property1_type);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedType1.addDeclaredProperty(contained1Property1);
  containedDataObject1=(SDODataObject)dataFactory.create(containedType1);
  containedByContainedType=new SDOType(containedBycontainedType1Uri,containedByContainedTypeName);
  containedByContainedProperty1=new SDOProperty(aHelperContext);
  containedByContainedProperty1.setName(""String_Node_Str"");
  containedByContainedProperty1.setContainment(false);
  SDOType containedByContainedProperty1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedByContainedProperty1_type.setDataType(false);
  containedByContainedProperty1.setType(containedByContainedProperty1_type);
  containedByContainedProperty1.setOpposite(contained1Property1);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty1);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedByContainedProperty2=new SDOProperty(aHelperContext);
  containedByContainedProperty2.setName(""String_Node_Str"");
  containedByContainedProperty2.setContainment(false);
  SDOType containedByContainedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedByContainedProperty2_type.setDataType(false);
  containedByContainedProperty2.setType(containedByContainedProperty2_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty2);
  containedByContainedDataObject=(SDODataObject)dataFactory.create(containedByContainedType);
  root=(SDODataObject)dataFactory.create(rootType);
  root.set(rootProperty1,""String_Node_Str"");
  root.set(rootProperty2,containedDataObject);
  root.set(rootProperty3,containedDataObject1);
  root.set(rootProperty4,objects);
  containedDataObject.set(containedProperty1,""String_Node_Str"");
  containedDataObject.set(containedProperty2,containedByContainedDataObject);
  containedDataObject1.set(contained1Property1,containedByContainedDataObject);
  containedByContainedDataObject.set(containedByContainedProperty1,containedDataObject1);
}","/** 
 * Structure: root rootproperty1 --> is DataType; SDOString  <---> value: ""test"" rootproperty2 --> not DataType            <---> value: containedDataObject root's child: containedDataObject1 contained1Property1 --> not DataType; bidirectional   <---> value: containedByContainedDataObject containedDataObject containedProperty1  --> is DataType; SDOString  <---> value: ""test1"" containedProperty2  --> not DataType            <---> value: containedByContainedDataObject containedProperty_ChangeSummary  --> not DataType  <---> value: chSum(ChangeSummary) containedDataObject's child: containedByContainedDataObject containedByContainedProperty1  --> not DataType; bidirectional   <---> value: containedDataObject1 Covered test cases: Test Case 1: copied root's DataType property rootproperty1 has same value Test Case 2: copied root's not DataType property rootproperty2 has a copied DataObject from containedDataObject Test Case 3: there exists dataobject's bidirectional not containment property has another DataObject as value Test Case 4: there exists dataobject's unidirectional not containment property has another DataObject as value Test Case 5: there exists dataobject's not containment property has another DataObject that is not in containment tree as value Test Case 6: copied containedProperty's ChangeSummary Type property containedProperty_ChangeSummary has a copied ChangeSummary from source's ChangeSummary chSum
 */
public void setUp(){
  super.setUp();
  SDOType changeSummaryType=(SDOType)aHelperContext.getTypeHelper().getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
  rootType=new SDOType(rootTypeUri,rootTypeName);
  rootProperty1=new SDOProperty(aHelperContext);
  rootProperty1.setName(""String_Node_Str"");
  SDOType rootProperty1_type=SDOConstants.SDO_STRING;
  rootProperty1_type.setDataType(true);
  rootProperty1.setType(rootProperty1_type);
  rootType.addDeclaredProperty((Property)rootProperty1);
  rootProperty2=new SDOProperty(aHelperContext);
  rootProperty2.setName(""String_Node_Str"");
  rootProperty2.setContainment(true);
  SDOType rootProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty2_type.setDataType(false);
  rootProperty2.setType(rootProperty2_type);
  rootType.addDeclaredProperty((Property)rootProperty2);
  rootProperty3=new SDOProperty(aHelperContext);
  rootProperty3.setName(""String_Node_Str"");
  rootProperty3.setContainment(true);
  SDOType rootProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty3_type.setDataType(false);
  rootProperty3.setType(rootProperty3_type);
  rootType.addDeclaredProperty((Property)rootProperty3);
  rootProperty4=new SDOProperty(aHelperContext);
  rootProperty4.setName(""String_Node_Str"");
  rootProperty4.setContainment(true);
  rootProperty4.setMany(true);
  SDOType rootProperty4_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty4_type.setDataType(false);
  rootProperty4.setType(rootProperty4_type);
  rootType.addDeclaredProperty((Property)rootProperty4);
  SDOProperty rootProperty_NotContainment=new SDOProperty(aHelperContext);
  rootProperty_NotContainment.setContainment(false);
  SDOType rootProperty_NotContainment_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  rootProperty_NotContainment_type.setDataType(false);
  rootProperty_NotContainment.setType(rootProperty_NotContainment_type);
  rootProperty_NotContainment.setName(""String_Node_Str"");
  rootType.addDeclaredProperty(rootProperty_NotContainment);
  contained1Property3=new SDOProperty(aHelperContext);
  contained1Property3.setName(""String_Node_Str"");
  contained1Property3.setContainment(false);
  SDOType contained1Property3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  contained1Property3_type.setDataType(false);
  contained1Property3.setType(contained1Property3_type);
  objects=new ArrayList();
  SDOType obj1Type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  SDOProperty obj1Property=new SDOProperty(aHelperContext);
  obj1Property.setName(""String_Node_Str"");
  SDOType obj1PropertyType=SDOConstants.SDO_STRING;
  obj1PropertyType.setDataType(true);
  obj1Property.setType(obj1PropertyType);
  obj1Property.setContainment(false);
  obj1Type.addDeclaredProperty(obj1Property);
  SDODataObject obj1=(SDODataObject)dataFactory.create(obj1Type);
  objects.add(obj1);
  obj1.set(obj1Property,""String_Node_Str"");
  containedType=new SDOType(containedTypeUri,containedTypeName);
  containedProperty1=new SDOProperty(aHelperContext);
  containedProperty1.setName(""String_Node_Str"");
  SDOType containedProperty1_type=SDOConstants.SDO_STRING;
  containedProperty1_type.setDataType(true);
  containedProperty1.setType(containedProperty1_type);
  containedType.addDeclaredProperty(containedProperty1);
  containedProperty2=new SDOProperty(aHelperContext);
  containedProperty2.setName(""String_Node_Str"");
  containedProperty2.setContainment(true);
  SDOType containedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedProperty2_type.setDataType(false);
  containedProperty2.setType(containedProperty2_type);
  containedType.addDeclaredProperty(containedProperty2);
  containedProperty3=new SDOProperty(aHelperContext);
  containedProperty3.setName(""String_Node_Str"");
  containedProperty3.setContainment(true);
  SDOType containedProperty3_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedProperty3_type.setDataType(false);
  containedProperty3.setType(containedProperty3_type);
  containedType.addDeclaredProperty(containedProperty3);
  containedProperty_ChangeSummary=new SDOProperty(aHelperContext);
  containedProperty_ChangeSummary.setContainment(false);
  containedProperty_ChangeSummary.setType(changeSummaryType);
  containedProperty_ChangeSummary.setName(""String_Node_Str"");
  containedType.addDeclaredProperty((Property)containedProperty_ChangeSummary);
  containedDataObject=(SDODataObject)dataFactory.create(containedType);
  containedDataObject.getChangeSummary().beginLogging();
  containedType1=new SDOType(containedType1Uri,containedType1Name);
  contained1Property1=new SDOProperty(aHelperContext);
  contained1Property1.setName(""String_Node_Str"");
  contained1Property1.setContainment(false);
  SDOType contained1Property1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  contained1Property1_type.setDataType(false);
  contained1Property1.setType(contained1Property1_type);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedType1.addDeclaredProperty(contained1Property1);
  containedDataObject1=(SDODataObject)dataFactory.create(containedType1);
  containedByContainedType=new SDOType(containedBycontainedType1Uri,containedByContainedTypeName);
  containedByContainedProperty1=new SDOProperty(aHelperContext);
  containedByContainedProperty1.setName(""String_Node_Str"");
  containedByContainedProperty1.setContainment(false);
  SDOType containedByContainedProperty1_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedByContainedProperty1_type.setDataType(false);
  containedByContainedProperty1.setType(containedByContainedProperty1_type);
  containedByContainedProperty1.setOpposite(contained1Property1);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty1);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedByContainedProperty2=new SDOProperty(aHelperContext);
  containedByContainedProperty2.setName(""String_Node_Str"");
  containedByContainedProperty2.setContainment(false);
  SDOType containedByContainedProperty2_type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  containedByContainedProperty2_type.setDataType(false);
  containedByContainedProperty2.setType(containedByContainedProperty2_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty2);
  containedByContainedDataObject=(SDODataObject)dataFactory.create(containedByContainedType);
  root=(SDODataObject)dataFactory.create(rootType);
  root.set(rootProperty1,""String_Node_Str"");
  root.set(rootProperty2,containedDataObject);
  root.set(rootProperty3,containedDataObject1);
  root.set(rootProperty4,objects);
  containedDataObject.set(containedProperty1,""String_Node_Str"");
  containedDataObject.set(containedProperty2,containedByContainedDataObject);
  containedDataObject1.set(contained1Property1,containedByContainedDataObject);
  containedByContainedDataObject.set(containedByContainedProperty1,containedDataObject1);
}"
68581,"public void testOpenTypeException() throws Exception {
  SDOType type=new SDOType(""String_Node_Str"",""String_Node_Str"");
  type.setDataType(true);
  try {
    dataFactory.create(type);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","public void testOpenTypeException() throws Exception {
  SDOType type=new SDODataType(""String_Node_Str"",""String_Node_Str"",(SDOTypeHelper)HelperProvider.getDefaultContext().getTypeHelper());
  try {
    dataFactory.create(type);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}"
68582,"/** 
 * Structure: root rootproperty1 --> is DataType; SDOString  <---> value: ""test"" rootproperty2 --> not DataType            <---> value: containedDataObject root's child: containedDataObject1 contained1Property1 --> not DataType; bidirectional   <---> value: containedByContainedDataObject containedDataObject containedProperty1  --> is DataType; SDOString  <---> value: ""test1"" containedProperty2  --> not DataType            <---> value: containedByContainedDataObject containedProperty_ChangeSummary  --> not DataType  <---> value: chSum(ChangeSummary) containedDataObject's child: containedByContainedDataObject containedByContainedProperty1  --> not DataType; bidirectional   <---> value: containedDataObejct1 Covered test cases: Test case 1: copied root's DataType property rootproperty1 has same value Test Case 2: copied root's not DataType property rootproperty2 has a copied DataObject from containedDataObject Test case 3: there exists dataobject's bidircetional not containment property has another DataObjcet as value Test Case 4: there exists dataobject's unidircetional not containment property has another DataObjcet as value Test Case 5: there exists dataobject's not containment property has another DataObjcet that is not in containment tree as value Test Case 6: copied containedProperty's ChangeSummary Type property containedProperty_ChangeSummary has a copied ChangeSummary from source's ChangeSummary chSum
 */
public void setUp(){
  super.setUp();
  DataObject rootTypeDO=defineType(rootTypeUri,rootTypeName);
  rootType=(SDOType)typeHelper.define(rootTypeDO);
  rootType.setOpen(true);
  rootProperty1=new SDOProperty(aHelperContext);
  rootProperty1.setName(""String_Node_Str"");
  SDOType rootProperty1_type=SDOConstants.SDO_STRING;
  rootProperty1_type.setDataType(true);
  rootProperty1.setType(rootProperty1_type);
  rootType.addDeclaredProperty(rootProperty1);
  rootProperty2=new SDOProperty(aHelperContext);
  rootProperty2.setName(""String_Node_Str"");
  rootProperty2.setContainment(true);
  DataObject rootProperty2_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty2_type=(SDOType)typeHelper.define(rootProperty2_typeDO);
  rootProperty2_type.setDataType(false);
  rootProperty2.setType(rootProperty2_type);
  rootType.addDeclaredProperty(rootProperty2);
  rootProperty3=new SDOProperty(aHelperContext);
  rootProperty3.setName(""String_Node_Str"");
  rootProperty3.setContainment(true);
  DataObject rootProperty3_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty3_type=(SDOType)typeHelper.define(rootProperty3_typeDO);
  rootProperty3_type.setDataType(false);
  rootProperty3.setType(rootProperty3_type);
  rootType.addDeclaredProperty(rootProperty3);
  rootProperty4=new SDOProperty(aHelperContext);
  rootProperty4.setName(""String_Node_Str"");
  rootProperty4.setContainment(true);
  DataObject rootProperty4_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty4_type=(SDOType)typeHelper.define(rootProperty4_typeDO);
  rootProperty4_type.setDataType(false);
  rootProperty4.setType(rootProperty4_type);
  rootType.addDeclaredProperty(rootProperty4);
  DataObject containedTypeDO=defineType(containedTypeUri,containedTypeName);
  containedType=(SDOType)typeHelper.define(containedTypeDO);
  containedProperty1=new SDOProperty(aHelperContext);
  containedProperty1.setName(""String_Node_Str"");
  SDOType containedProperty1_type=SDOConstants.SDO_STRING;
  containedProperty1_type.setDataType(true);
  containedProperty1.setType(containedProperty1_type);
  containedType.addDeclaredProperty(containedProperty1);
  containedProperty2=new SDOProperty(aHelperContext);
  containedProperty2.setName(""String_Node_Str"");
  containedProperty2.setContainment(true);
  DataObject containedProperty2_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType containedProperty2_type=(SDOType)typeHelper.define(containedProperty2_typeDO);
  containedProperty2_type.setDataType(false);
  containedProperty2.setType(containedProperty2_type);
  containedType.addDeclaredProperty(containedProperty2);
  containedDataObject1=new SDODataObject();
  DataObject containedType1DO=defineType(containedType1Uri,containedType1Name);
  containedType1=(SDOType)typeHelper.define(containedType1DO);
  containedDataObject1._setType(containedType1);
  contained1Property1=new SDOProperty(aHelperContext);
  contained1Property1.setName(""String_Node_Str"");
  contained1Property1.setContainment(false);
  DataObject contained1Property1_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType contained1Property1_type=(SDOType)typeHelper.define(contained1Property1_typeDO);
  contained1Property1_type.setDataType(false);
  contained1Property1.setType(contained1Property1_type);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedType1.addDeclaredProperty(contained1Property1);
  containedByContainedDataObject=new SDODataObject();
  DataObject containedByContainedTypeDO=defineType(containedBycontainedType1Uri,containedByContainedTypeName);
  containedByContainedType=(SDOType)typeHelper.define(containedByContainedTypeDO);
  containedByContainedDataObject._setType(containedByContainedType);
  containedByContainedProperty1=new SDOProperty(aHelperContext);
  containedByContainedProperty1.setName(""String_Node_Str"");
  containedByContainedProperty1.setContainment(false);
  DataObject containedByContainedProperty1_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType containedByContainedProperty1_type=(SDOType)typeHelper.define(containedByContainedProperty1_typeDO);
  containedByContainedProperty1_type.setDataType(false);
  containedByContainedProperty1.setType(containedByContainedProperty1_type);
  containedByContainedProperty1.setOpposite(contained1Property1);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty1);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedByContainedProperty2=new SDOProperty(aHelperContext);
  containedByContainedProperty2.setName(""String_Node_Str"");
  containedByContainedProperty2.setContainment(false);
  DataObject containedByContainedProperty2_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType containedByContainedProperty2_type=(SDOType)typeHelper.define(containedByContainedProperty2_typeDO);
  containedByContainedProperty2_type.setDataType(false);
  containedByContainedProperty2.setType(containedByContainedProperty2_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty2);
  containedProperty_ChangeSummary=new SDOProperty(aHelperContext);
  containedProperty_ChangeSummary.setContainment(false);
  containedProperty_ChangeSummary.setType(SDOConstants.SDO_CHANGESUMMARY);
  containedProperty_ChangeSummary.setName(""String_Node_Str"");
  containedType.addDeclaredProperty(containedProperty_ChangeSummary);
  root=(SDODataObject)dataFactory.create(rootType);
  root1=(SDODataObject)dataFactory.create(rootType);
  containedDataObject=(SDODataObject)dataFactory.create(containedType);
  containedDataObject_1=(SDODataObject)dataFactory.create(containedType);
  root.set(rootProperty1,""String_Node_Str"");
  root1.set(rootProperty1,""String_Node_Str"");
  root.set(rootProperty2,containedDataObject);
  root1.set(rootProperty2,containedDataObject_1);
  containedDataObject.set(containedProperty1,""String_Node_Str"");
  containedDataObject_1.set(containedProperty1,""String_Node_Str"");
}","/** 
 * Structure: root rootproperty1 --> is DataType; SDOString  <---> value: ""test"" rootproperty2 --> not DataType            <---> value: containedDataObject root's child: containedDataObject1 contained1Property1 --> not DataType; bidirectional   <---> value: containedByContainedDataObject containedDataObject containedProperty1  --> is DataType; SDOString  <---> value: ""test1"" containedProperty2  --> not DataType            <---> value: containedByContainedDataObject containedProperty_ChangeSummary  --> not DataType  <---> value: chSum(ChangeSummary) containedDataObject's child: containedByContainedDataObject containedByContainedProperty1  --> not DataType; bidirectional   <---> value: containedDataObejct1 Covered test cases: Test case 1: copied root's DataType property rootproperty1 has same value Test Case 2: copied root's not DataType property rootproperty2 has a copied DataObject from containedDataObject Test case 3: there exists dataobject's bidircetional not containment property has another DataObjcet as value Test Case 4: there exists dataobject's unidircetional not containment property has another DataObjcet as value Test Case 5: there exists dataobject's not containment property has another DataObjcet that is not in containment tree as value Test Case 6: copied containedProperty's ChangeSummary Type property containedProperty_ChangeSummary has a copied ChangeSummary from source's ChangeSummary chSum
 */
public void setUp(){
  super.setUp();
  SDOType changeSummaryType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY);
  DataObject rootTypeDO=defineType(rootTypeUri,rootTypeName);
  rootType=(SDOType)typeHelper.define(rootTypeDO);
  rootType.setOpen(true);
  rootProperty1=new SDOProperty(aHelperContext);
  rootProperty1.setName(""String_Node_Str"");
  SDOType rootProperty1_type=SDOConstants.SDO_STRING;
  rootProperty1_type.setDataType(true);
  rootProperty1.setType(rootProperty1_type);
  rootType.addDeclaredProperty(rootProperty1);
  rootProperty2=new SDOProperty(aHelperContext);
  rootProperty2.setName(""String_Node_Str"");
  rootProperty2.setContainment(true);
  DataObject rootProperty2_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty2_type=(SDOType)typeHelper.define(rootProperty2_typeDO);
  rootProperty2_type.setDataType(false);
  rootProperty2.setType(rootProperty2_type);
  rootType.addDeclaredProperty(rootProperty2);
  rootProperty3=new SDOProperty(aHelperContext);
  rootProperty3.setName(""String_Node_Str"");
  rootProperty3.setContainment(true);
  DataObject rootProperty3_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty3_type=(SDOType)typeHelper.define(rootProperty3_typeDO);
  rootProperty3_type.setDataType(false);
  rootProperty3.setType(rootProperty3_type);
  rootType.addDeclaredProperty(rootProperty3);
  rootProperty4=new SDOProperty(aHelperContext);
  rootProperty4.setName(""String_Node_Str"");
  rootProperty4.setContainment(true);
  DataObject rootProperty4_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType rootProperty4_type=(SDOType)typeHelper.define(rootProperty4_typeDO);
  rootProperty4_type.setDataType(false);
  rootProperty4.setType(rootProperty4_type);
  rootType.addDeclaredProperty(rootProperty4);
  DataObject containedTypeDO=defineType(containedTypeUri,containedTypeName);
  containedType=(SDOType)typeHelper.define(containedTypeDO);
  containedProperty1=new SDOProperty(aHelperContext);
  containedProperty1.setName(""String_Node_Str"");
  SDOType containedProperty1_type=SDOConstants.SDO_STRING;
  containedProperty1_type.setDataType(true);
  containedProperty1.setType(containedProperty1_type);
  containedType.addDeclaredProperty(containedProperty1);
  containedProperty2=new SDOProperty(aHelperContext);
  containedProperty2.setName(""String_Node_Str"");
  containedProperty2.setContainment(true);
  DataObject containedProperty2_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType containedProperty2_type=(SDOType)typeHelper.define(containedProperty2_typeDO);
  containedProperty2_type.setDataType(false);
  containedProperty2.setType(containedProperty2_type);
  containedType.addDeclaredProperty(containedProperty2);
  containedDataObject1=new SDODataObject();
  DataObject containedType1DO=defineType(containedType1Uri,containedType1Name);
  containedType1=(SDOType)typeHelper.define(containedType1DO);
  containedDataObject1._setType(containedType1);
  contained1Property1=new SDOProperty(aHelperContext);
  contained1Property1.setName(""String_Node_Str"");
  contained1Property1.setContainment(false);
  DataObject contained1Property1_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType contained1Property1_type=(SDOType)typeHelper.define(contained1Property1_typeDO);
  contained1Property1_type.setDataType(false);
  contained1Property1.setType(contained1Property1_type);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedType1.addDeclaredProperty(contained1Property1);
  containedByContainedDataObject=new SDODataObject();
  DataObject containedByContainedTypeDO=defineType(containedBycontainedType1Uri,containedByContainedTypeName);
  containedByContainedType=(SDOType)typeHelper.define(containedByContainedTypeDO);
  containedByContainedDataObject._setType(containedByContainedType);
  containedByContainedProperty1=new SDOProperty(aHelperContext);
  containedByContainedProperty1.setName(""String_Node_Str"");
  containedByContainedProperty1.setContainment(false);
  DataObject containedByContainedProperty1_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType containedByContainedProperty1_type=(SDOType)typeHelper.define(containedByContainedProperty1_typeDO);
  containedByContainedProperty1_type.setDataType(false);
  containedByContainedProperty1.setType(containedByContainedProperty1_type);
  containedByContainedProperty1.setOpposite(contained1Property1);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty1);
  contained1Property1.setOpposite(containedByContainedProperty1);
  containedByContainedProperty2=new SDOProperty(aHelperContext);
  containedByContainedProperty2.setName(""String_Node_Str"");
  containedByContainedProperty2.setContainment(false);
  DataObject containedByContainedProperty2_typeDO=defineType(""String_Node_Str"",""String_Node_Str"");
  SDOType containedByContainedProperty2_type=(SDOType)typeHelper.define(containedByContainedProperty2_typeDO);
  containedByContainedProperty2_type.setDataType(false);
  containedByContainedProperty2.setType(containedByContainedProperty2_type);
  containedByContainedType.addDeclaredProperty(containedByContainedProperty2);
  containedProperty_ChangeSummary=new SDOProperty(aHelperContext);
  containedProperty_ChangeSummary.setContainment(false);
  containedProperty_ChangeSummary.setType(changeSummaryType);
  containedProperty_ChangeSummary.setName(""String_Node_Str"");
  containedType.addDeclaredProperty(containedProperty_ChangeSummary);
  root=(SDODataObject)dataFactory.create(rootType);
  root1=(SDODataObject)dataFactory.create(rootType);
  containedDataObject=(SDODataObject)dataFactory.create(containedType);
  containedDataObject_1=(SDODataObject)dataFactory.create(containedType);
  root.set(rootProperty1,""String_Node_Str"");
  root1.set(rootProperty1,""String_Node_Str"");
  root.set(rootProperty2,containedDataObject);
  root1.set(rootProperty2,containedDataObject_1);
  containedDataObject.set(containedProperty1,""String_Node_Str"");
  containedDataObject_1.set(containedProperty1,""String_Node_Str"");
}"
68583,"public void testDefineOpenContentProperty(){
  DataObject propDO=dataFactory.create(SDOConstants.SDO_PROPERTY);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  Property definedProp=typeHelper.defineOpenContentProperty(""String_Node_Str"",propDO);
  Property typeProp=typeHelper.getOpenContentProperty(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(typeProp);
  assertEquals(definedProp,typeProp);
  Property xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",true);
  assertNull(xsdProp);
  xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",false);
  assertNotNull(xsdProp);
}","public void testDefineOpenContentProperty(){
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  Property definedProp=typeHelper.defineOpenContentProperty(""String_Node_Str"",propDO);
  Property typeProp=typeHelper.getOpenContentProperty(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(typeProp);
  assertEquals(definedProp,typeProp);
  Property xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",true);
  assertNull(xsdProp);
  xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",false);
  assertNotNull(xsdProp);
}"
68584,"public void testDefineOpenContentPropertyNullUri(){
  DataObject propDO=dataFactory.create(SDOConstants.SDO_PROPERTY);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  typeHelper.defineOpenContentProperty(null,propDO);
  Property typeProp=typeHelper.getOpenContentProperty(""String_Node_Str"",""String_Node_Str"");
  assertNull(typeProp);
  Property xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",true);
  assertNull(xsdProp);
  xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",false);
  assertNull(xsdProp);
}","public void testDefineOpenContentPropertyNullUri(){
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",SDOConstants.SDO_STRING);
  typeHelper.defineOpenContentProperty(null,propDO);
  Property typeProp=typeHelper.getOpenContentProperty(""String_Node_Str"",""String_Node_Str"");
  assertNull(typeProp);
  Property xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",true);
  assertNull(xsdProp);
  xsdProp=xsdHelper.getGlobalProperty(""String_Node_Str"",""String_Node_Str"",false);
  assertNull(xsdProp);
}"
68585,"public void testDefine() throws Exception {
  DataObject personTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject parentTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  parentTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  parentTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  List baseTypes=new ArrayList();
  baseTypes.add(personTypeDO);
  parentTypeDO.set(""String_Node_Str"",baseTypes);
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(personTypeDO,""String_Node_Str"",parentTypeDO,true,false,true);
  Type personType=typeHelper.define(personTypeDO);
  Type parentType=typeHelper.define(parentTypeDO);
  assertNotNull(parentType.getBaseTypes());
  assertEquals(1,parentType.getBaseTypes().size());
  Type theBaseType=(Type)parentType.getBaseTypes().get(0);
  assertTrue(personType == theBaseType);
}","public void testDefine() throws Exception {
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject personTypeDO=dataFactory.create(typeType);
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject parentTypeDO=dataFactory.create(typeType);
  parentTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  parentTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  List baseTypes=new ArrayList();
  baseTypes.add(personTypeDO);
  parentTypeDO.set(""String_Node_Str"",baseTypes);
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(personTypeDO,""String_Node_Str"",parentTypeDO,true,false,true);
  Type personType=typeHelper.define(personTypeDO);
  Type parentType=typeHelper.define(parentTypeDO);
  assertNotNull(parentType.getBaseTypes());
  assertEquals(1,parentType.getBaseTypes().size());
  Type theBaseType=(Type)parentType.getBaseTypes().get(0);
  assertTrue(personType == theBaseType);
}"
68586,"public void testDataTypeAnnotation() throws Exception {
  DataObject timestampSTDo=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",true);
  timestampSTDo.set(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  Type timeStampType=typeHelper.define(timestampSTDo);
  DataObject rootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",false);
  DataObject rootPropDO=rootTypeDO.createDataObject(""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",SDOConstants.SDO_DATETIME);
  rootPropDO.set(SDOConstants.XMLDATATYPE_PROPERTY,timeStampType);
  rootPropDO.set(SDOConstants.XMLELEMENT_PROPERTY,true);
  Type rootType=typeHelper.define(rootTypeDO);
  DataObject propDO=dataFactory.create(SDOConstants.SDO_PROPERTY);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",rootType);
  typeHelper.defineOpenContentProperty(""String_Node_Str"",propDO);
  FileInputStream xmlFile=new FileInputStream(getXmlFileNameToLoad());
  XMLDocument document=xmlHelper.load(xmlFile);
  DataObject root=document.getRootObject();
  Object value=root.get(""String_Node_Str"");
  assertNotNull(value);
  assertTrue(value instanceof Timestamp);
}","public void testDataTypeAnnotation() throws Exception {
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject timestampSTDo=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",""String_Node_Str"");
  timestampSTDo.set(""String_Node_Str"",true);
  timestampSTDo.set(SDOConstants.JAVA_CLASS_PROPERTY,""String_Node_Str"");
  Type timeStampType=typeHelper.define(timestampSTDo);
  DataObject rootTypeDO=dataFactory.create(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  rootTypeDO.set(""String_Node_Str"",false);
  DataObject rootPropDO=rootTypeDO.createDataObject(""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",""String_Node_Str"");
  rootPropDO.set(""String_Node_Str"",SDOConstants.SDO_DATETIME);
  Property xmlDataTypeProperty=typeHelper.getOpenContentProperty(SDOConstants.ORACLE_SDO_URL,SDOConstants.SDOXML_DATATYPE);
  rootPropDO.set(xmlDataTypeProperty,timeStampType);
  rootPropDO.set(SDOConstants.XMLELEMENT_PROPERTY,true);
  Type rootType=typeHelper.define(rootTypeDO);
  DataObject propDO=dataFactory.create(propertyType);
  propDO.set(""String_Node_Str"",""String_Node_Str"");
  propDO.set(""String_Node_Str"",rootType);
  typeHelper.defineOpenContentProperty(""String_Node_Str"",propDO);
  FileInputStream xmlFile=new FileInputStream(getXmlFileNameToLoad());
  XMLDocument document=xmlHelper.load(xmlFile);
  DataObject root=document.getRootObject();
  Object value=root.get(""String_Node_Str"");
  assertNotNull(value);
  assertTrue(value instanceof Timestamp);
}"
68587,"public void testDefineOpenContentProperty(){
  assertEquals(2,rootType.getDeclaredProperties().size());
  DataObject newProperty=dataFactory.create(SDOConstants.SDO_PROPERTY);
  SDOProperty prop=(SDOProperty)newProperty.getType().getProperty(""String_Node_Str"");
  newProperty.set(prop,""String_Node_Str"");
  prop=(SDOProperty)newProperty.getType().getProperty(""String_Node_Str"");
  newProperty.set(prop,typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING));
  Property openProp=typeHelper.defineOpenContentProperty(""String_Node_Str"",newProperty);
  Property lookedUp=typeHelper.getOpenContentProperty(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(lookedUp);
  assertTrue(openProp == lookedUp);
  assertTrue(lookedUp.isOpenContent());
  DataObject rootDataObject=dataFactory.create(rootType);
  assertEquals(2,rootDataObject.getInstanceProperties().size());
  rootDataObject.set(lookedUp,""String_Node_Str"");
  assertEquals(3,rootDataObject.getInstanceProperties().size());
  assertNull(lookedUp.getContainingType());
  rootDataObject.unset(lookedUp);
  assertEquals(2,rootDataObject.getInstanceProperties().size());
}","public void testDefineOpenContentProperty(){
  assertEquals(2,rootType.getDeclaredProperties().size());
  SDOType propertyType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.PROPERTY);
  DataObject newProperty=dataFactory.create(propertyType);
  SDOProperty prop=(SDOProperty)newProperty.getType().getProperty(""String_Node_Str"");
  newProperty.set(prop,""String_Node_Str"");
  prop=(SDOProperty)newProperty.getType().getProperty(""String_Node_Str"");
  newProperty.set(prop,typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.STRING));
  Property openProp=typeHelper.defineOpenContentProperty(""String_Node_Str"",newProperty);
  Property lookedUp=typeHelper.getOpenContentProperty(""String_Node_Str"",""String_Node_Str"");
  assertNotNull(lookedUp);
  assertTrue(openProp == lookedUp);
  assertTrue(lookedUp.isOpenContent());
  DataObject rootDataObject=dataFactory.create(rootType);
  assertEquals(2,rootDataObject.getInstanceProperties().size());
  rootDataObject.set(lookedUp,""String_Node_Str"");
  assertEquals(3,rootDataObject.getInstanceProperties().size());
  assertNull(lookedUp.getContainingType());
  rootDataObject.unset(lookedUp);
  assertEquals(2,rootDataObject.getInstanceProperties().size());
}"
68588,"public void testDataTypeTrueFails2() throws Exception {
  DataObject newTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  SDOProperty prop=(SDOProperty)newTypeDO.getType().getProperty(""String_Node_Str"");
  newTypeDO.set(prop,""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",true);
  newTypeDO.set(""String_Node_Str"",true);
  try {
    Type newType=typeHelper.define(newTypeDO);
  }
 catch (  SDOException e) {
    assertEquals(SDOException.TYPE_CANNOT_BE_OPEN_AND_DATATYPE,e.getErrorCode());
    return;
  }
}","public void testDataTypeTrueFails2() throws Exception {
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject newTypeDO=dataFactory.create(typeType);
  SDOProperty prop=(SDOProperty)newTypeDO.getType().getProperty(""String_Node_Str"");
  newTypeDO.set(prop,""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",true);
  newTypeDO.set(""String_Node_Str"",true);
  try {
    Type newType=typeHelper.define(newTypeDO);
  }
 catch (  SDOException e) {
    assertEquals(SDOException.TYPE_CANNOT_BE_OPEN_AND_DATATYPE,e.getErrorCode());
    return;
  }
}"
68589,"public void testDataTypeTrueFails() throws Exception {
  DataObject newTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  SDOProperty prop=(SDOProperty)newTypeDO.getType().getProperty(""String_Node_Str"");
  newTypeDO.set(prop,""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",true);
  newTypeDO.set(""String_Node_Str"",true);
  try {
    Type newType=typeHelper.define(newTypeDO);
  }
 catch (  SDOException e) {
    assertEquals(SDOException.TYPE_CANNOT_BE_OPEN_AND_DATATYPE,e.getErrorCode());
    return;
  }
  fail(""String_Node_Str"");
}","public void testDataTypeTrueFails() throws Exception {
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject newTypeDO=dataFactory.create(typeType);
  SDOProperty prop=(SDOProperty)newTypeDO.getType().getProperty(""String_Node_Str"");
  newTypeDO.set(prop,""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  newTypeDO.set(""String_Node_Str"",true);
  newTypeDO.set(""String_Node_Str"",true);
  try {
    Type newType=typeHelper.define(newTypeDO);
  }
 catch (  SDOException e) {
    assertEquals(SDOException.TYPE_CANNOT_BE_OPEN_AND_DATATYPE,e.getErrorCode());
    return;
  }
  fail(""String_Node_Str"");
}"
68590,"public void testPolymorphicProperty(){
  DataObject addressTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  addressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type addressType=typeHelper.define(addressTypeDO);
  DataObject cdnAddressTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  cdnAddressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  List baseTypes=new ArrayList();
  baseTypes.add(addressType);
  cdnAddressTypeDO.set(""String_Node_Str"",baseTypes);
  addProperty(cdnAddressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type cdnAddressType=typeHelper.define(cdnAddressTypeDO);
  DataObject personTypeDO=dataFactory.create(SDOConstants.SDO_TYPE);
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(personTypeDO,""String_Node_Str"",addressType,true,false,true);
  Type personType=typeHelper.define(personTypeDO);
  DataObject addressDO=dataFactory.create(addressType);
  addressDO.set(""String_Node_Str"",""String_Node_Str"");
  addressDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject personDO=dataFactory.create(personType);
  personDO.set(""String_Node_Str"",""String_Node_Str"");
  personDO.set(""String_Node_Str"",addressDO);
  DataObject value=personDO.getDataObject(""String_Node_Str"");
  assertEquals(""String_Node_Str"",value.getType().getName());
  DataObject cdnAddressDO=dataFactory.create(cdnAddressType);
  cdnAddressDO.set(""String_Node_Str"",""String_Node_Str"");
  cdnAddressDO.set(""String_Node_Str"",""String_Node_Str"");
  cdnAddressDO.set(""String_Node_Str"",""String_Node_Str"");
  personDO.set(""String_Node_Str"",cdnAddressDO);
  value=personDO.getDataObject(""String_Node_Str"");
  assertEquals(""String_Node_Str"",value.getType().getName());
}","public void testPolymorphicProperty(){
  SDOType typeType=(SDOType)typeHelper.getType(SDOConstants.SDO_URL,SDOConstants.TYPE);
  DataObject addressTypeDO=dataFactory.create(typeType);
  addressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(addressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type addressType=typeHelper.define(addressTypeDO);
  DataObject cdnAddressTypeDO=dataFactory.create(typeType);
  cdnAddressTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  List baseTypes=new ArrayList();
  baseTypes.add(addressType);
  cdnAddressTypeDO.set(""String_Node_Str"",baseTypes);
  addProperty(cdnAddressTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  Type cdnAddressType=typeHelper.define(cdnAddressTypeDO);
  DataObject personTypeDO=dataFactory.create(typeType);
  personTypeDO.set(""String_Node_Str"",""String_Node_Str"");
  addProperty(personTypeDO,""String_Node_Str"",SDOConstants.SDO_STRING,false,false,true);
  addProperty(personTypeDO,""String_Node_Str"",addressType,true,false,true);
  Type personType=typeHelper.define(personTypeDO);
  DataObject addressDO=dataFactory.create(addressType);
  addressDO.set(""String_Node_Str"",""String_Node_Str"");
  addressDO.set(""String_Node_Str"",""String_Node_Str"");
  DataObject personDO=dataFactory.create(personType);
  personDO.set(""String_Node_Str"",""String_Node_Str"");
  personDO.set(""String_Node_Str"",addressDO);
  DataObject value=personDO.getDataObject(""String_Node_Str"");
  assertEquals(""String_Node_Str"",value.getType().getName());
  DataObject cdnAddressDO=dataFactory.create(cdnAddressType);
  cdnAddressDO.set(""String_Node_Str"",""String_Node_Str"");
  cdnAddressDO.set(""String_Node_Str"",""String_Node_Str"");
  cdnAddressDO.set(""String_Node_Str"",""String_Node_Str"");
  personDO.set(""String_Node_Str"",cdnAddressDO);
  value=personDO.getDataObject(""String_Node_Str"");
  assertEquals(""String_Node_Str"",value.getType().getName());
}"
68591,"/** 
 * INTERNAL: This method is used to clear the batched statements without the need to execute the statements first This is used in the case of rollback.
 */
public void clear(){
  this.previousCall=null;
  this.parameters.clear();
  statementCount=executionCount=0;
  clearCacheQueryTimeout();
}","/** 
 * INTERNAL: This method is used to clear the batched statements without the need to execute the statements first This is used in the case of rollback.
 */
public void clear(){
  this.previousCall=null;
  this.parameters.clear();
  statementCount=executionCount=0;
  clearCacheQueryTimeout();
  lastCallAppended=null;
}"
68592,"/** 
 * Test that inserts allow the garbage collection of the persisted objects.
 */
public TestCase buildInsertTest(){
  MemoryLeakTestCase test=new MemoryLeakTestCase(){
    public void test(){
      EntityManager manager=createEntityManager();
      ((JpaEntityManager)manager).getUnitOfWork().getParent().getIdentityMapAccessor().initializeAllIdentityMaps();
      manager.getTransaction().begin();
      for (int count=0; count < 500; count++) {
        Employee employee=new Employee();
        employee.setFirstName(""String_Node_Str"");
        employee.setLastName(""String_Node_Str"");
        manager.persist(employee);
        addWeakReference(employee);
      }
      manager.getTransaction().commit();
      Query query=manager.createQuery(""String_Node_Str"");
      query.setHint(""String_Node_Str"",true);
      query.setHint(""String_Node_Str"",CacheUsage.CheckCacheOnly);
      addWeakReferences(query.getResultList());
      addWeakReference(manager);
      addWeakReference(((JpaEntityManager)manager).getUnitOfWork());
      addWeakReference(((JpaEntityManager)manager).getSession());
      manager.close();
    }
    public void reset(){
      getSession().executeNonSelectingSQL(""String_Node_Str"");
      getSession().executeNonSelectingSQL(""String_Node_Str"");
      getSession().executeNonSelectingSQL(""String_Node_Str"");
    }
  }
;
  test.setName(""String_Node_Str"");
  test.setThreshold(100);
  return test;
}","/** 
 * Test that inserts allow the garbage collection of the persisted objects.
 */
public TestCase buildInsertTest(){
  MemoryLeakTestCase test=new MemoryLeakTestCase(){
    public void test(){
      EntityManager manager=createEntityManager();
      ((JpaEntityManager)manager).getUnitOfWork().getParent().getIdentityMapAccessor().initializeAllIdentityMaps();
      manager.getTransaction().begin();
      for (int count=0; count < 500; count++) {
        Employee employee=new Employee();
        employee.setFirstName(""String_Node_Str"");
        employee.setLastName(""String_Node_Str"");
        manager.persist(employee);
        addWeakReference(employee);
      }
      manager.getTransaction().commit();
      Query query=manager.createQuery(""String_Node_Str"");
      query.setHint(""String_Node_Str"",true);
      query.setHint(""String_Node_Str"",CacheUsage.CheckCacheOnly);
      addWeakReferences(query.getResultList());
      addWeakReference(manager);
      addWeakReference(((JpaEntityManager)manager).getUnitOfWork());
      addWeakReference(((JpaEntityManager)manager).getUnitOfWork().getParent());
      manager.close();
    }
    public void reset(){
      getSession().executeNonSelectingSQL(""String_Node_Str"");
    }
  }
;
  test.setName(""String_Node_Str"");
  test.setThreshold(100);
  return test;
}"
68593,"public void test(){
  EntityManager manager=createEntityManager();
  ((JpaEntityManager)manager).getUnitOfWork().getParent().getIdentityMapAccessor().initializeAllIdentityMaps();
  Query query=manager.createQuery(""String_Node_Str"");
  query.setHint(""String_Node_Str"",true);
  addWeakReferences(query.getResultList());
  addWeakReference(query);
  query=manager.createQuery(""String_Node_Str"");
  addWeakReferences(query.getResultList());
  addWeakReference(query);
  addWeakReference(manager);
  addWeakReference(((JpaEntityManager)manager).getUnitOfWork());
  addWeakReference(((JpaEntityManager)manager).getSession());
  manager.close();
}","public void test(){
  EntityManager manager=createEntityManager();
  boolean usesBatchWriting=((JpaEntityManager)manager).getServerSession().getPlatform().usesBatchWriting();
  if (!usesBatchWriting) {
    ((JpaEntityManager)manager).getServerSession().getPlatform().setUsesBatchWriting(true);
  }
  boolean shouldBindAllParameters=((JpaEntityManager)manager).getServerSession().getPlatform().shouldBindAllParameters();
  if (!shouldBindAllParameters) {
    ((JpaEntityManager)manager).getServerSession().getPlatform().setShouldBindAllParameters(true);
  }
  manager.getTransaction().begin();
  for (int count=0; count < 5; count++) {
    Employee employee=new Employee();
    employee.setFirstName(""String_Node_Str"");
    employee.setLastName(""String_Node_Str"");
    manager.persist(employee);
    addWeakReference(employee);
  }
  addWeakReference(manager);
  addWeakReference(((JpaEntityManager)manager).getUnitOfWork());
  addWeakReference(((JpaEntityManager)manager).getUnitOfWork().getParent());
  manager.getTransaction().commit();
  if (!usesBatchWriting) {
    ((JpaEntityManager)manager).getServerSession().getPlatform().setUsesBatchWriting(false);
  }
  if (!shouldBindAllParameters) {
    ((JpaEntityManager)manager).getServerSession().getPlatform().setShouldBindAllParameters(false);
  }
  manager.close();
}"
68594,"/** 
 * Test that read allow the garbage collection of the objects.
 */
public TestCase buildReadTest(){
  MemoryLeakTestCase test=new MemoryLeakTestCase(){
    public void test(){
      EntityManager manager=createEntityManager();
      ((JpaEntityManager)manager).getUnitOfWork().getParent().getIdentityMapAccessor().initializeAllIdentityMaps();
      Query query=manager.createQuery(""String_Node_Str"");
      query.setHint(""String_Node_Str"",true);
      addWeakReferences(query.getResultList());
      addWeakReference(query);
      query=manager.createQuery(""String_Node_Str"");
      addWeakReferences(query.getResultList());
      addWeakReference(query);
      addWeakReference(manager);
      addWeakReference(((JpaEntityManager)manager).getUnitOfWork());
      addWeakReference(((JpaEntityManager)manager).getSession());
      manager.close();
    }
  }
;
  test.setName(""String_Node_Str"");
  test.setThreshold(100);
  return test;
}","/** 
 * Test that read allow the garbage collection of the objects.
 */
public TestCase buildReadTest(){
  MemoryLeakTestCase test=new MemoryLeakTestCase(){
    public void test(){
      EntityManager manager=createEntityManager();
      ((JpaEntityManager)manager).getUnitOfWork().getParent().getIdentityMapAccessor().initializeAllIdentityMaps();
      Query query=manager.createQuery(""String_Node_Str"");
      query.setHint(""String_Node_Str"",true);
      addWeakReferences(query.getResultList());
      addWeakReference(query);
      query=manager.createQuery(""String_Node_Str"");
      addWeakReferences(query.getResultList());
      addWeakReference(query);
      addWeakReference(manager);
      addWeakReference(((JpaEntityManager)manager).getUnitOfWork());
      addWeakReference(((JpaEntityManager)manager).getUnitOfWork().getParent());
      manager.close();
    }
  }
;
  test.setName(""String_Node_Str"");
  test.setThreshold(100);
  return test;
}"
68595,"public void addTests(){
  addTest(buildReadTest());
  addTest(buildInsertTest());
  addTest(buildUpdateTest());
}","public void addTests(){
  addTest(buildReadTest());
  addTest(buildInsertTest());
  addTest(buildUpdateTest());
  addTest(buildParameterizedBatchWriteTest());
}"
68596,"/** 
 * Create/populate database.
 */
public void setup(){
  for (int j=0; j < 100; j++) {
    Employee empInsert=new Employee();
    empInsert.setFirstName(""String_Node_Str"");
    empInsert.setMale();
    empInsert.setLastName(""String_Node_Str"" + j + ""String_Node_Str"");
    empInsert.setSalary(100000);
    EmploymentPeriod employmentPeriod=new EmploymentPeriod();
    java.sql.Date startDate=Helper.dateFromString(""String_Node_Str"");
    java.sql.Date endDate=Helper.dateFromString(""String_Node_Str"");
    employmentPeriod.setEndDate(startDate);
    employmentPeriod.setStartDate(endDate);
    empInsert.setPeriod(employmentPeriod);
    empInsert.setAddress(new Address());
    empInsert.getAddress().setCity(""String_Node_Str"");
    empInsert.getAddress().setPostalCode(""String_Node_Str"");
    empInsert.getAddress().setProvince(""String_Node_Str"");
    empInsert.getAddress().setStreet(""String_Node_Str"" + j);
    empInsert.getAddress().setCountry(""String_Node_Str"");
    empInsert.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    empInsert.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    getDatabaseSession().insertObject(empInsert);
  }
  setupProvider();
  getSession().logMessage(getExecutor().getEntityManagerFactory().getClass().toString());
  System.out.println(getExecutor().getEntityManagerFactory().getClass().toString());
}","/** 
 * Create/populate database.
 */
public void setup(){
  setupProvider();
  getSession().logMessage(getExecutor().getEntityManagerFactory().getClass().toString());
  System.out.println(getExecutor().getEntityManagerFactory().getClass().toString());
  EntityManager manager=getExecutor().createEntityManager();
  try {
    new EmployeeTableCreator().replaceTables(((JpaEntityManager)manager).getServerSession());
  }
 catch (  ClassCastException cast) {
    new EmployeeTableCreator().replaceTables(getDatabaseSession());
  }
  manager.getTransaction().begin();
  for (int j=0; j < 100; j++) {
    Employee empInsert=new Employee();
    empInsert.setFirstName(""String_Node_Str"");
    empInsert.setMale();
    empInsert.setLastName(""String_Node_Str"" + j + ""String_Node_Str"");
    empInsert.setSalary(100000);
    EmploymentPeriod employmentPeriod=new EmploymentPeriod();
    java.sql.Date startDate=Helper.dateFromString(""String_Node_Str"");
    java.sql.Date endDate=Helper.dateFromString(""String_Node_Str"");
    employmentPeriod.setEndDate(startDate);
    employmentPeriod.setStartDate(endDate);
    empInsert.setPeriod(employmentPeriod);
    empInsert.setAddress(new Address());
    empInsert.getAddress().setCity(""String_Node_Str"");
    empInsert.getAddress().setPostalCode(""String_Node_Str"");
    empInsert.getAddress().setProvince(""String_Node_Str"");
    empInsert.getAddress().setStreet(""String_Node_Str"" + j);
    empInsert.getAddress().setCountry(""String_Node_Str"");
    empInsert.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    empInsert.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    manager.persist(empInsert);
  }
  manager.getTransaction().commit();
  manager.close();
}"
68597,"public void reset(){
  getSession().executeNonSelectingSQL(""String_Node_Str"");
  getSession().executeNonSelectingSQL(""String_Node_Str"");
  getSession().executeNonSelectingSQL(""String_Node_Str"");
}","public void reset(){
  getSession().executeNonSelectingSQL(""String_Node_Str"");
}"
68598,"public XMLContext(Project project,ClassLoader classLoader){
  if ((project.getDatasourceLogin() == null) || !(project.getDatasourceLogin().getDatasourcePlatform() instanceof XMLPlatform)) {
    XMLPlatform platform=new SAXPlatform();
    platform.getConversionManager().setLoader(classLoader);
    project.setLogin(new XMLLogin(platform));
  }
  sessions=new ArrayList(1);
  DatabaseSession session=project.createDatabaseSession();
  session.setLogLevel(SessionLog.OFF);
  setupDocumentPreservationPolicy(session);
  session.login();
  sessions.add(session);
  descriptorsByQName=new HashMap();
  descriptorsByGlobalType=new HashMap();
  storeXMLDescriptorsByQName(session);
}","public XMLContext(Collection projects,ClassLoader classLoader){
  Iterator iterator=projects.iterator();
  sessions=new ArrayList(projects.size());
  descriptorsByQName=new HashMap();
  descriptorsByGlobalType=new HashMap();
  while (iterator.hasNext()) {
    Project project=(Project)iterator.next();
    if ((project.getDatasourceLogin() == null) || !(project.getDatasourceLogin().getDatasourcePlatform() instanceof XMLPlatform)) {
      XMLPlatform platform=new SAXPlatform();
      platform.getConversionManager().setLoader(classLoader);
      project.setLogin(new XMLLogin(platform));
    }
    DatabaseSession session=project.createDatabaseSession();
    session.setLogLevel(SessionLog.OFF);
    setupDocumentPreservationPolicy(session);
    session.login();
    sessions.add(session);
    storeXMLDescriptorsByQName(session);
  }
}"
68599,"/** 
 * Asks this <code>AutomapVerifier</code> to verify the execution of the automap on the state objects.
 * @param project The root of the state object hierarchy
 */
public void verify(MWProject project){
  MWDescriptor descriptor;
  Hashtable descriptors=new Hashtable();
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_Address());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_Employee());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_EmploymentPeriod());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_LargeProject());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_PhoneNumber());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_Project());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,test_oracle_models_employee_SmallProject());
  testDescriptors(descriptors);
}","/** 
 * Asks this <code>AutomapVerifier</code> to verify the execution of the automap on the state objects.
 * @param project The root of the state object hierarchy
 */
public void verify(MWProject project){
  MWDescriptor descriptor;
  Hashtable descriptors=new Hashtable();
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,org_eclipse_persistence_tools_workbench_test_models_employee_Address());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,org_eclipse_persistence_tools_workbench_test_models_employee_Employee());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,org_eclipse_persistence_tools_workbench_test_models_employee_EmploymentPeriod());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,org_eclipse_persistence_tools_workbench_test_models_employee_LargeProject());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,org_eclipse_persistence_tools_workbench_test_models_employee_PhoneNumber());
  descriptor=project.descriptorNamed(""String_Node_Str"");
  descriptors.put(descriptor,org_eclipse_persistence_tools_workbench_test_models_employee_Project());
  testDescriptors(descriptors);
}"
68600,"/** 
 * match classes with tables using partial string matching on their short names, with any prevailing prefixes and/or suffixes stripped off
 */
protected void matchClassesAndMetaData(Collection automapDescriptors){
  super.matchClassesAndMetaData(automapDescriptors);
  DescriptorStringHolder[] descriptorHolders=this.buildMetaDataDescriptorStringHolders(automapDescriptors);
  TableStringHolder[] tableHolders=this.buildTableStringHolders();
  StringHolderPair[] pairs=CLASS_META_DATA_NAME_COMPARATOR_ENGINE.match(descriptorHolders,tableHolders);
  for (int i=pairs.length; i-- > 0; ) {
    StringHolderPair pair=pairs[i];
    DescriptorStringHolder descriptorHolder=(DescriptorStringHolder)pair.getStringHolder1();
    TableStringHolder tableHolder=(TableStringHolder)pair.getStringHolder2();
    if ((descriptorHolder == null) || (tableHolder == null)) {
      continue;
    }
    if (pair.getScore() > 0.50) {
      ((MWTableDescriptor)descriptorHolder.getDescriptor()).setPrimaryTable(tableHolder.getTable());
    }
  }
}","/** 
 * match classes with tables using partial string matching on their short names, with any prevailing prefixes and/or suffixes stripped off
 */
protected void matchClassesAndMetaData(Collection automapDescriptors){
  super.matchClassesAndMetaData(automapDescriptors);
  DescriptorStringHolder[] descriptorHolders=this.buildMetaDataDescriptorStringHolders(automapDescriptors);
  TableStringHolder[] tableHolders=this.buildTableStringHolders();
  StringHolderPair[] pairs=CLASS_META_DATA_NAME_COMPARATOR_ENGINE.match(descriptorHolders,tableHolders);
  for (int i=pairs.length; i-- > 0; ) {
    StringHolderPair pair=pairs[i];
    DescriptorStringHolder descriptorHolder=(DescriptorStringHolder)pair.getStringHolder1();
    TableStringHolder tableHolder=(TableStringHolder)pair.getStringHolder2();
    if ((descriptorHolder == null) || (tableHolder == null)) {
      continue;
    }
    if (pair.getScore() > 0.45) {
      ((MWTableDescriptor)descriptorHolder.getDescriptor()).setPrimaryTable(tableHolder.getTable());
    }
  }
}"
68601,"/** 
 * Build and return a database row that contains a foreign key for the specified reference object. This will be stored in the nested row(s).
 */
protected XMLRecord extractKeyRowFromReferenceObject(Object object,AbstractSession session,XMLRecord parentRecord){
  Element newNode=XPathEngine.getInstance().createUnownedElement(parentRecord.getDOM(),getForeignKeyGroupingElement());
  XMLRecord result=new DOMRecord(newNode);
  for (int i=0; i < this.getSourceForeignKeyFields().size(); i++) {
    DatabaseField fkField=(DatabaseField)getSourceForeignKeyFields().get(i);
    if (object == null) {
      result.add(fkField,null);
    }
 else {
      DatabaseField pkField=(DatabaseField)this.getSourceForeignKeysToTargetKeys().get(fkField);
      Object value=this.getReferenceDescriptor().getObjectBuilder().extractValueFromObjectForField(object,pkField,session);
      result.add(fkField,value);
    }
  }
  return result;
}","/** 
 * Build and return a database row that contains a foreign key for the specified reference  object.  This will be stored in the nested row(s).
 */
protected XMLRecord extractKeyRowFromReferenceObject(Object object,AbstractSession session,XMLRecord parentRecord){
  Element newNode=XPathEngine.getInstance().createUnownedElement(parentRecord.getDOM(),getForeignKeyGroupingElement());
  XMLRecord result=new DOMRecord(newNode);
  result.setSession(session);
  for (int i=0; i < this.getSourceForeignKeyFields().size(); i++) {
    DatabaseField fkField=(DatabaseField)getSourceForeignKeyFields().get(i);
    if (object == null) {
      result.add(fkField,null);
    }
 else {
      DatabaseField pkField=(DatabaseField)this.getSourceForeignKeysToTargetKeys().get(fkField);
      Object value=this.getReferenceDescriptor().getObjectBuilder().extractValueFromObjectForField(object,pkField,session);
      result.add(fkField,value);
    }
  }
  return result;
}"
68602,"/** 
 * INTERNAL: Return the value of the reference attribute or a value holder. Check whether the mapping's attribute should be optimized through batch and joining.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  ReadQuery targetQuery=getSelectionQuery();
  if (!isForeignKeyRelationship) {
    if (targetQuery.isObjectLevelReadQuery() && (sourceQuery.shouldCascadeAllParts() || (sourceQuery.shouldCascadePrivateParts() && isPrivateOwned()) || (sourceQuery.shouldCascadeByMapping() && this.cascadeRefresh))) {
      targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
      ((ObjectLevelReadQuery)targetQuery).setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
      targetQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
      targetQuery.setQueryId(sourceQuery.getQueryId());
      if (targetQuery.shouldMaintainCache()) {
        targetQuery.setShouldMaintainCache(sourceQuery.shouldMaintainCache());
      }
    }
    return getIndirectionPolicy().valueFromQuery(targetQuery,row,sourceQuery.getSession());
  }
 else {
    if (getIndirectionPolicy().usesIndirection()) {
      EISOneToManyQueryBasedValueHolder valueholder=new EISOneToManyQueryBasedValueHolder(this,targetQuery,row,sourceQuery.getSession());
      return valueholder;
    }
 else {
      Vector subRows=getForeignKeyRows(row);
      if (subRows == null) {
        return null;
      }
      ContainerPolicy cp=this.getContainerPolicy();
      Object results=cp.containerInstance(subRows.size());
      for (int i=0; i < subRows.size(); i++) {
        XMLRecord subRow=(XMLRecord)subRows.elementAt(i);
        Object object=getIndirectionPolicy().valueFromQuery(targetQuery,subRow,sourceQuery.getSession());
        if (object instanceof Collection) {
          java.util.Iterator iter=((Collection)object).iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else         if (object instanceof java.util.Map) {
          java.util.Iterator iter=((java.util.Map)object).values().iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else {
          cp.addInto(object,results,executionSession);
        }
      }
      if (cp.sizeFor(results) == 0) {
        return null;
      }
      return results;
    }
  }
}","/** 
 * INTERNAL: Return the value of the reference attribute or a value holder. Check whether the mapping's attribute should be optimized through batch and joining.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  if (((EISDescriptor)this.getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    ((XMLRecord)row).setSession(executionSession);
  }
  ReadQuery targetQuery=getSelectionQuery();
  if (!isForeignKeyRelationship) {
    if (targetQuery.isObjectLevelReadQuery() && (sourceQuery.shouldCascadeAllParts() || (sourceQuery.shouldCascadePrivateParts() && isPrivateOwned()) || (sourceQuery.shouldCascadeByMapping() && this.cascadeRefresh))) {
      targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
      ((ObjectLevelReadQuery)targetQuery).setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
      targetQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
      targetQuery.setQueryId(sourceQuery.getQueryId());
      if (targetQuery.shouldMaintainCache()) {
        targetQuery.setShouldMaintainCache(sourceQuery.shouldMaintainCache());
      }
    }
    return getIndirectionPolicy().valueFromQuery(targetQuery,row,sourceQuery.getSession());
  }
 else {
    if (getIndirectionPolicy().usesIndirection()) {
      EISOneToManyQueryBasedValueHolder valueholder=new EISOneToManyQueryBasedValueHolder(this,targetQuery,row,sourceQuery.getSession());
      return valueholder;
    }
 else {
      Vector subRows=getForeignKeyRows(row);
      if (subRows == null) {
        return null;
      }
      ContainerPolicy cp=this.getContainerPolicy();
      Object results=cp.containerInstance(subRows.size());
      for (int i=0; i < subRows.size(); i++) {
        XMLRecord subRow=(XMLRecord)subRows.elementAt(i);
        Object object=getIndirectionPolicy().valueFromQuery(targetQuery,subRow,sourceQuery.getSession());
        if (object instanceof Collection) {
          java.util.Iterator iter=((Collection)object).iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else         if (object instanceof java.util.Map) {
          java.util.Iterator iter=((java.util.Map)object).values().iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else {
          cp.addInto(object,results,executionSession);
        }
      }
      if (cp.sizeFor(results) == 0) {
        return null;
      }
      return results;
    }
  }
}"
68603,"/** 
 * INTERNAL:
 */
public Vector getForeignKeyRows(AbstractRecord row){
  Vector subRows=new Vector();
  if (getForeignKeyGroupingElement() == null) {
    if (this.getSourceForeignKeyFields().size() > 0) {
      Object values=row.getValues((DatabaseField)this.getSourceForeignKeyFields().get(0));
      if (values != null) {
        if (values instanceof Vector) {
          int valuesSize=((Vector)values).size();
          for (int j=0; j < valuesSize; j++) {
            XMLRecord newRecord=new DOMRecord(""String_Node_Str"");
            newRecord.put(this.getSourceForeignKeyFields().get(0),((Vector)values).get(j));
            subRows.add(newRecord);
          }
        }
 else {
          XMLRecord newRecord=new DOMRecord(""String_Node_Str"");
          newRecord.put(getSourceForeignKeyFields().get(0),values);
          subRows.add(newRecord);
        }
      }
    }
  }
 else {
    subRows=(Vector)row.getValues(getForeignKeyGroupingElement());
  }
  return subRows;
}","/** 
 * INTERNAL:
 */
public Vector getForeignKeyRows(AbstractRecord row){
  Vector subRows=new Vector();
  if (getForeignKeyGroupingElement() == null) {
    if (this.getSourceForeignKeyFields().size() > 0) {
      Object values=row.getValues((DatabaseField)this.getSourceForeignKeyFields().get(0));
      if (values != null) {
        if (values instanceof Vector) {
          int valuesSize=((Vector)values).size();
          for (int j=0; j < valuesSize; j++) {
            XMLRecord newRecord=new DOMRecord(""String_Node_Str"");
            newRecord.setSession(((XMLRecord)row).getSession());
            newRecord.put(this.getSourceForeignKeyFields().get(0),((Vector)values).get(j));
            subRows.add(newRecord);
          }
        }
 else {
          XMLRecord newRecord=new DOMRecord(""String_Node_Str"");
          newRecord.setSession(((XMLRecord)row).getSession());
          newRecord.put(getSourceForeignKeyFields().get(0),values);
          subRows.add(newRecord);
        }
      }
    }
  }
 else {
    subRows=(Vector)row.getValues(getForeignKeyGroupingElement());
  }
  return subRows;
}"
68604,"/** 
 * INTERNAL: Override the parent's buildObject to allow for the caching of aggregate objects in OX. By caching aggregates along with XML Nodes that they were created from, we are able to preserve the structure and unmapped content of the document that was used to create these objects.
 */
public Object buildObject(ObjectBuildingQuery query,AbstractRecord databaseRow,JoinedAttributeManager joinManager) throws DatabaseException, QueryException {
  XMLRecord row=(XMLRecord)databaseRow;
  XMLUnmarshaller unmarshaller=row.getUnmarshaller();
  Object parent=row.getOwningObject();
  Vector pk=extractPrimaryKeyFromRow(databaseRow,query.getSession());
  if (!(isXmlDescriptor() || getDescriptor().isAggregateDescriptor() || getDescriptor().isAggregateCollectionDescriptor())) {
    return super.buildObject(query,databaseRow,joinManager);
  }
  query.getSession().startOperationProfile(SessionProfiler.OBJECT_BUILDING,query,SessionProfiler.ALL);
  ClassDescriptor concreteDescriptor=getDescriptor();
  Object domainObject=null;
  if (concreteDescriptor.hasInheritance() && (parent == null)) {
    Class classValue=concreteDescriptor.getInheritancePolicy().classFromRow(databaseRow,query.getSession());
    if ((classValue == null) && isXmlDescriptor()) {
      QName leafElementType=((XMLDescriptor)concreteDescriptor).getDefaultRootElementType();
      if (leafElementType != null) {
        Object indicator=concreteDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,concreteDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      concreteDescriptor=query.getSession().getDescriptor(classValue);
      if ((concreteDescriptor == null) && query.hasPartialAttributeExpressions()) {
        concreteDescriptor=getDescriptor();
      }
      if (concreteDescriptor == null) {
        throw QueryException.noDescriptorForClassFromInheritancePolicy(query,classValue);
      }
    }
 else {
      if (Modifier.isAbstract(concreteDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(databaseRow,concreteDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  domainObject=concreteDescriptor.getObjectBuilder().buildNewInstance();
  row.setCurrentObject(domainObject);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().beforeUnmarshal(domainObject,parent);
  }
  concreteDescriptor.getObjectBuilder().buildAttributesIntoObject(domainObject,databaseRow,query,joinManager,false);
  if (isXmlDescriptor() && ((XMLDescriptor)concreteDescriptor).getPrimaryKeyFieldNames().size() > 0) {
    if ((pk == null) || (pk.size() == 0)) {
      pk=new Vector();
      pk.addElement(new WeakObjectWrapper(domainObject));
    }
    CacheKey key=query.getSession().getIdentityMapAccessorInstance().acquireDeferredLock(pk,concreteDescriptor.getJavaClass(),concreteDescriptor);
    if (((XMLDescriptor)concreteDescriptor).shouldPreserveDocument()) {
      key.setRecord(databaseRow);
    }
    key.setObject(domainObject);
    key.releaseDeferredLock();
  }
  DocumentPreservationPolicy docPresPolicy=((DOMRecord)row).getDocPresPolicy();
  if (docPresPolicy != null) {
    ((DOMRecord)row).getDocPresPolicy().addObjectToCache(domainObject,((DOMRecord)row).getDOM());
  }
  query.getSession().endOperationProfile(SessionProfiler.OBJECT_BUILDING,query,SessionProfiler.ALL);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().afterUnmarshal(domainObject,parent);
  }
  return domainObject;
}","/** 
 * INTERNAL: Override the parent's buildObject to allow for the caching of aggregate objects in OX. By caching aggregates along with XML Nodes that they were created from, we are able to preserve the structure and unmapped content of the document that was used to create these objects.
 */
public Object buildObject(ObjectBuildingQuery query,AbstractRecord databaseRow,JoinedAttributeManager joinManager) throws DatabaseException, QueryException {
  XMLRecord row=(XMLRecord)databaseRow;
  row.setSession(query.getSession());
  XMLUnmarshaller unmarshaller=row.getUnmarshaller();
  Object parent=row.getOwningObject();
  Vector pk=extractPrimaryKeyFromRow(databaseRow,query.getSession());
  if (!(isXmlDescriptor() || getDescriptor().isAggregateDescriptor() || getDescriptor().isAggregateCollectionDescriptor())) {
    return super.buildObject(query,databaseRow,joinManager);
  }
  query.getSession().startOperationProfile(SessionProfiler.OBJECT_BUILDING,query,SessionProfiler.ALL);
  ClassDescriptor concreteDescriptor=getDescriptor();
  Object domainObject=null;
  if (concreteDescriptor.hasInheritance() && (parent == null)) {
    Class classValue=concreteDescriptor.getInheritancePolicy().classFromRow(databaseRow,query.getSession());
    if ((classValue == null) && isXmlDescriptor()) {
      QName leafElementType=((XMLDescriptor)concreteDescriptor).getDefaultRootElementType();
      if (leafElementType != null) {
        Object indicator=concreteDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,concreteDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      concreteDescriptor=query.getSession().getDescriptor(classValue);
      if ((concreteDescriptor == null) && query.hasPartialAttributeExpressions()) {
        concreteDescriptor=getDescriptor();
      }
      if (concreteDescriptor == null) {
        throw QueryException.noDescriptorForClassFromInheritancePolicy(query,classValue);
      }
    }
 else {
      if (Modifier.isAbstract(concreteDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(databaseRow,concreteDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  domainObject=concreteDescriptor.getObjectBuilder().buildNewInstance();
  row.setCurrentObject(domainObject);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().beforeUnmarshal(domainObject,parent);
  }
  concreteDescriptor.getObjectBuilder().buildAttributesIntoObject(domainObject,databaseRow,query,joinManager,false);
  if (isXmlDescriptor() && ((XMLDescriptor)concreteDescriptor).getPrimaryKeyFieldNames().size() > 0) {
    if ((pk == null) || (pk.size() == 0)) {
      pk=new Vector();
      pk.addElement(new WeakObjectWrapper(domainObject));
    }
    CacheKey key=query.getSession().getIdentityMapAccessorInstance().acquireDeferredLock(pk,concreteDescriptor.getJavaClass(),concreteDescriptor);
    if (((XMLDescriptor)concreteDescriptor).shouldPreserveDocument()) {
      key.setRecord(databaseRow);
    }
    key.setObject(domainObject);
    key.releaseDeferredLock();
  }
  DocumentPreservationPolicy docPresPolicy=((DOMRecord)row).getDocPresPolicy();
  if (docPresPolicy != null) {
    ((DOMRecord)row).getDocPresPolicy().addObjectToCache(domainObject,((DOMRecord)row).getDOM());
  }
  query.getSession().endOperationProfile(SessionProfiler.OBJECT_BUILDING,query,SessionProfiler.ALL);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().afterUnmarshal(domainObject,parent);
  }
  return domainObject;
}"
68605,"public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object object,AbstractSession session,boolean shouldWriteXsiType){
  XMLRecord record=(XMLRecord)row;
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (shouldWriteXsiType) {
      writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
    }
    if (getDescriptor().hasInheritance()) {
      if ((record.getLeafElementType() != null) && ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition())) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (ctxQName.equals(record.getLeafElementType())) {
        }
 else {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
 else {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
        }
      }
 else {
        if (!xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
 else {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
        }
      }
    }
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}","public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object object,AbstractSession session,boolean shouldWriteXsiType){
  XMLRecord record=(XMLRecord)row;
  record.setSession(session);
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (shouldWriteXsiType) {
      writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
    }
    if (getDescriptor().hasInheritance()) {
      if ((record.getLeafElementType() != null) && ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition())) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (ctxQName.equals(record.getLeafElementType())) {
        }
 else {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
 else {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
        }
      }
 else {
        if (!xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
 else {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
        }
      }
    }
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}"
68606,"public AbstractRecord buildRow(AbstractRecord databaseRow,Object object,AbstractSession session,boolean wasXMLRoot){
  XMLRecord row=(XMLRecord)databaseRow;
  XMLMarshaller marshaller=row.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  writeOutMappings(row,object,session);
  if (getDescriptor().hasInheritance()) {
    boolean shouldAddClassIndicatorFieldToRow=true;
    if (isXmlDescriptor() && !wasXMLRoot) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
      if ((xmlDescriptor.getDefaultRootElementType() != null) && (xmlDescriptor.getSchemaReference() != null)) {
        XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
        if ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition()) {
          QName ctx=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
          if (ctx != null) {
            shouldAddClassIndicatorFieldToRow=false;
            if (!ctx.equals(xmlDescriptor.getDefaultRootElementType())) {
              row.add(xmlDescriptor.getInheritancePolicy().getClassIndicatorField(),xmlRef.getSchemaContext().substring(1));
            }
          }
        }
      }
    }
    if (shouldAddClassIndicatorFieldToRow) {
      getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
    }
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  addNamespaceDeclarations((row).getDocument());
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}","public AbstractRecord buildRow(AbstractRecord databaseRow,Object object,AbstractSession session,boolean wasXMLRoot){
  XMLRecord row=(XMLRecord)databaseRow;
  row.setSession(session);
  XMLMarshaller marshaller=row.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  writeOutMappings(row,object,session);
  if (getDescriptor().hasInheritance()) {
    boolean shouldAddClassIndicatorFieldToRow=true;
    if (isXmlDescriptor() && !wasXMLRoot) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
      if ((xmlDescriptor.getDefaultRootElementType() != null) && (xmlDescriptor.getSchemaReference() != null)) {
        XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
        if ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition()) {
          QName ctx=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
          if (ctx != null) {
            shouldAddClassIndicatorFieldToRow=false;
            if (!ctx.equals(xmlDescriptor.getDefaultRootElementType())) {
              row.add(xmlDescriptor.getInheritancePolicy().getClassIndicatorField(),xmlRef.getSchemaContext().substring(1));
            }
          }
        }
      }
    }
    if (shouldAddClassIndicatorFieldToRow) {
      getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
    }
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  addNamespaceDeclarations((row).getDocument());
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}"
68607,"public static XMLMarshalException marshalException(Exception nestedException){
  Object[] args={};
  XMLMarshalException exception=new XMLMarshalException(ExceptionMessageGenerator.buildMessage(XMLMarshalException.class,MARSHAL_EXCEPTION,args),nestedException);
  exception.setErrorCode(MARSHAL_EXCEPTION);
  exception.setInternalException(nestedException);
  return exception;
}","public static XMLMarshalException marshalException(Exception nestedException){
  Object[] args={};
  XMLMarshalException exception=new XMLMarshalException(ExceptionMessageGenerator.buildMessage(XMLMarshalException.class,MARSHAL_EXCEPTION,args),nestedException);
  exception.setErrorCode(MARSHAL_EXCEPTION);
  return exception;
}"
68608,"private void generateDescriptorsForTables(RelationalProjectNode projectNode,Collection tables,boolean generateEjbs){
  if (!checkForProjectSave(projectNode))   return;
  DescriptorGenerationDialog descriptorDialog=new DescriptorGenerationDialog((MWRelationalProject)projectNode.getProject(),generateEjbs,context);
  descriptorDialog.show();
  if (descriptorDialog.wasCanceled()) {
    return;
  }
  Vector possibleRelationships=new Vector();
  Collection relationshipsToCreate=new Vector();
  boolean generateBidirectionalRelationships=false;
  if (!possibleRelationships.isEmpty()) {
    RelationshipGenerationDialog relationshipDialog=new RelationshipGenerationDialog(possibleRelationships,context);
    relationshipDialog.setGenerateBidirectionalRelationships(generateEjbs);
    relationshipDialog.show();
    if (relationshipDialog.wasCanceled()) {
      return;
    }
    relationshipsToCreate=relationshipDialog.getRelationshipsToCreate();
    generateBidirectionalRelationships=relationshipDialog.getGenerateBidirectionalRelationships();
  }
  MWDescriptorGenerator generator=new MWDescriptorGenerator();
  generator.setProject((MWRelationalProject)projectNode.getProject());
  generator.setTables(tables);
  generator.setGenerateEjbs(generateEjbs);
  generator.setPackageName(descriptorDialog.getPackageName());
  generator.setGenerateMethodAccessors(descriptorDialog.getGenerateAccessors());
  generator.setGenerateBidirectionalRelationships(generateBidirectionalRelationships);
  generator.setRelationshipsToCreate(relationshipsToCreate);
  generator.generateClassesAndDescriptors();
  String successDialogString=null;
  if (generateEjbs) {
    successDialogString=""String_Node_Str"";
  }
 else {
    successDialogString=""String_Node_Str"";
  }
  JOptionPane.showMessageDialog(context.getCurrentWindow(),resourceRepository().getString(successDialogString + ""String_Node_Str""),resourceRepository().getString(successDialogString + ""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}","private void generateDescriptorsForTables(RelationalProjectNode projectNode,Collection tables){
  if (!checkForProjectSave(projectNode))   return;
  DescriptorGenerationDialog descriptorDialog=new DescriptorGenerationDialog((MWRelationalProject)projectNode.getProject(),context);
  descriptorDialog.show();
  if (descriptorDialog.wasCanceled()) {
    return;
  }
  Vector possibleRelationships=new Vector();
  Collection relationshipsToCreate=new Vector();
  boolean generateBidirectionalRelationships=false;
  if (!possibleRelationships.isEmpty()) {
    RelationshipGenerationDialog relationshipDialog=new RelationshipGenerationDialog(possibleRelationships,context);
    relationshipDialog.show();
    if (relationshipDialog.wasCanceled()) {
      return;
    }
    relationshipsToCreate=relationshipDialog.getRelationshipsToCreate();
    generateBidirectionalRelationships=relationshipDialog.getGenerateBidirectionalRelationships();
  }
  MWDescriptorGenerator generator=new MWDescriptorGenerator();
  generator.setProject((MWRelationalProject)projectNode.getProject());
  generator.setTables(tables);
  generator.setPackageName(descriptorDialog.getPackageName());
  generator.setGenerateMethodAccessors(descriptorDialog.getGenerateAccessors());
  generator.setGenerateBidirectionalRelationships(generateBidirectionalRelationships);
  generator.setRelationshipsToCreate(relationshipsToCreate);
  generator.generateClassesAndDescriptors();
  String successDialogString=""String_Node_Str"";
  JOptionPane.showMessageDialog(context.getCurrentWindow(),resourceRepository().getString(successDialogString + ""String_Node_Str""),resourceRepository().getString(successDialogString + ""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}"
68609,"private void generateClassDescriptorsForTables(RelationalProjectNode projectNode,Collection tables){
  generateDescriptorsForTables(projectNode,tables,false);
}","private void generateClassDescriptorsForTables(RelationalProjectNode projectNode,Collection tables){
  generateDescriptorsForTables(projectNode,tables);
}"
68610,"public DescriptorGenerationDialog(MWRelationalProject project,boolean generateEjbs,WorkbenchContext workbenchContext){
  super(workbenchContext);
  this.project=project;
  this.generateEjbs=generateEjbs;
  initializeDialog();
}","public DescriptorGenerationDialog(MWRelationalProject project,WorkbenchContext workbenchContext){
  super(workbenchContext);
  this.project=project;
  initializeDialog();
}"
68611,"public boolean getGenerateAccessors(){
  return this.generateEjbs ? true : this.generateAccessorsCheckBox.isSelected();
}","public boolean getGenerateAccessors(){
  return this.generateAccessorsCheckBox.isSelected();
}"
68612,"protected Component buildMainPanel(){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel mainPanel=new JPanel(new GridBagLayout());
  JLabel packageNameLabel=SwingComponentFactory.buildLabel(""String_Node_Str"",resourceRepository());
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,0,0);
  mainPanel.add(packageNameLabel,constraints);
  this.packageNameTextField=new JTextField();
  this.packageNameTextField.setColumns(30);
  Document packageNameDocument=new RegexpDocument(RegexpDocument.RE_PACKAGE);
  packageNameDocument.addDocumentListener(this.buildPackageNameDocumentListener());
  this.packageNameTextField.setDocument(packageNameDocument);
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,5,0,0);
  mainPanel.add(this.packageNameTextField,constraints);
  packageNameLabel.setLabelFor(this.packageNameTextField);
  Spacer spacer=new Spacer();
  constraints.gridx=0;
  constraints.gridy=3;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,0,0,0);
  mainPanel.add(spacer,constraints);
  return mainPanel;
}","protected Component buildMainPanel(){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel mainPanel=new JPanel(new GridBagLayout());
  JLabel packageNameLabel=SwingComponentFactory.buildLabel(""String_Node_Str"",resourceRepository());
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(0,0,0,0);
  mainPanel.add(packageNameLabel,constraints);
  this.packageNameTextField=new JTextField();
  this.packageNameTextField.setColumns(30);
  Document packageNameDocument=new RegexpDocument(RegexpDocument.RE_PACKAGE);
  packageNameDocument.addDocumentListener(this.buildPackageNameDocumentListener());
  this.packageNameTextField.setDocument(packageNameDocument);
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,5,0,0);
  mainPanel.add(this.packageNameTextField,constraints);
  packageNameLabel.setLabelFor(this.packageNameTextField);
  this.generateAccessorsCheckBox=new JCheckBox(resourceRepository().getString(""String_Node_Str""),true);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.anchor=GridBagConstraints.LINE_START;
  constraints.insets=new Insets(5,0,0,0);
  mainPanel.add(this.generateAccessorsCheckBox,constraints);
  Spacer spacer=new Spacer();
  constraints.gridx=0;
  constraints.gridy=3;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,0,0,0);
  mainPanel.add(spacer,constraints);
  return mainPanel;
}"
68613,"protected String helpTopicId(){
  return (this.generateEjbs) ? ""String_Node_Str"" : ""String_Node_Str"";
}","protected String helpTopicId(){
  return ""String_Node_Str"";
}"
68614,"/** 
 * INTERNAL: Allow the call to translate the XQuery arguments.
 */
public void translate(AbstractRecord translationRow,AbstractRecord modifyRow,AbstractSession session){
  setInputRow(modifyRow);
  translateQueryString(translationRow,modifyRow,session);
}","/** 
 * INTERNAL: Allow the call to translate the XQuery arguments.
 */
public void translate(AbstractRecord translationRow,AbstractRecord modifyRow,AbstractSession session){
  if (translationRow != EmptyRecord.getEmptyRecord() && getQuery() != null && getQuery().getDescriptor() != null) {
    ((XMLRecord)translationRow).setSession(session);
  }
  setInputRow(modifyRow);
  translateQueryString(translationRow,modifyRow,session);
}"
68615,"/** 
 * INTERNAL: Return the value of the reference attribute or a value holder. Check whether the mapping's attribute should be optimized through batch and joining.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  if (((EISDescriptor)this.getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    ((XMLRecord)row).setSession(executionSession);
  }
  ReadQuery targetQuery=getSelectionQuery();
  if (!isForeignKeyRelationship) {
    if (targetQuery.isObjectLevelReadQuery() && (sourceQuery.shouldCascadeAllParts() || (sourceQuery.shouldCascadePrivateParts() && isPrivateOwned()) || (sourceQuery.shouldCascadeByMapping() && this.cascadeRefresh))) {
      targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
      ((ObjectLevelReadQuery)targetQuery).setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
      targetQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
      targetQuery.setQueryId(sourceQuery.getQueryId());
      if (targetQuery.shouldMaintainCache()) {
        targetQuery.setShouldMaintainCache(sourceQuery.shouldMaintainCache());
      }
    }
    return getIndirectionPolicy().valueFromQuery(targetQuery,row,sourceQuery.getSession());
  }
 else {
    if (getIndirectionPolicy().usesIndirection()) {
      EISOneToManyQueryBasedValueHolder valueholder=new EISOneToManyQueryBasedValueHolder(this,targetQuery,row,sourceQuery.getSession());
      return valueholder;
    }
 else {
      Vector subRows=getForeignKeyRows(row);
      if (subRows == null) {
        return null;
      }
      ContainerPolicy cp=this.getContainerPolicy();
      Object results=cp.containerInstance(subRows.size());
      for (int i=0; i < subRows.size(); i++) {
        XMLRecord subRow=(XMLRecord)subRows.elementAt(i);
        Object object=getIndirectionPolicy().valueFromQuery(targetQuery,subRow,sourceQuery.getSession());
        if (object instanceof Collection) {
          java.util.Iterator iter=((Collection)object).iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else         if (object instanceof java.util.Map) {
          java.util.Iterator iter=((java.util.Map)object).values().iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else {
          cp.addInto(object,results,executionSession);
        }
      }
      if (cp.sizeFor(results) == 0) {
        return null;
      }
      return results;
    }
  }
}","/** 
 * INTERNAL: Return the value of the reference attribute or a value holder. Check whether the mapping's attribute should be optimized through batch and joining.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession) throws DatabaseException {
  if (((EISDescriptor)this.getDescriptor()).getDataFormat() == EISDescriptor.XML) {
    ((XMLRecord)row).setSession(executionSession);
  }
  ReadQuery targetQuery=getSelectionQuery();
  if (!isForeignKeyRelationship) {
    if (targetQuery.isObjectLevelReadQuery() && (sourceQuery.shouldCascadeAllParts() || (sourceQuery.shouldCascadePrivateParts() && isPrivateOwned()) || (sourceQuery.shouldCascadeByMapping() && this.cascadeRefresh))) {
      targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
      ((ObjectLevelReadQuery)targetQuery).setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
      targetQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
      targetQuery.setQueryId(sourceQuery.getQueryId());
      if (targetQuery.shouldMaintainCache()) {
        targetQuery.setShouldMaintainCache(sourceQuery.shouldMaintainCache());
      }
    }
    return getIndirectionPolicy().valueFromQuery(targetQuery,row,sourceQuery.getSession());
  }
 else {
    if (getIndirectionPolicy().usesIndirection()) {
      EISOneToManyQueryBasedValueHolder valueholder=new EISOneToManyQueryBasedValueHolder(this,targetQuery,row,sourceQuery.getSession());
      return valueholder;
    }
 else {
      Vector subRows=getForeignKeyRows(row);
      if (subRows == null) {
        return null;
      }
      ContainerPolicy cp=this.getContainerPolicy();
      Object results=cp.containerInstance(subRows.size());
      for (int i=0; i < subRows.size(); i++) {
        XMLRecord subRow=(XMLRecord)subRows.elementAt(i);
        subRow.setSession(executionSession);
        Object object=getIndirectionPolicy().valueFromQuery(targetQuery,subRow,sourceQuery.getSession());
        if (object instanceof Collection) {
          java.util.Iterator iter=((Collection)object).iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else         if (object instanceof java.util.Map) {
          java.util.Iterator iter=((java.util.Map)object).values().iterator();
          while (iter.hasNext()) {
            cp.addInto(iter.next(),results,executionSession);
          }
        }
 else {
          cp.addInto(object,results,executionSession);
        }
      }
      if (cp.sizeFor(results) == 0) {
        return null;
      }
      return results;
    }
  }
}"
68616,"/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(""String_Node_Str"");
    if (index == -1) {
      concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        QName qname=new QName(uri,localPart);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}","/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(""String_Node_Str"");
    if (index == -1) {
      concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        QName qname=new QName(uri,localPart);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}"
68617,"/** 
 * Return the row with primary keys and their values from the given expression.
 */
public Vector extractPrimaryKeyFromExpression(boolean requiresExactMatch,Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  ((XMLRecord)primaryKeyRow).setSession(session);
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(requiresExactMatch,getDescriptor(),primaryKeyRow,translationRow);
  if (requiresExactMatch && (!isValid)) {
    return null;
  }
  if (primaryKeyRow.size() != getDescriptor().getPrimaryKeyFields().size()) {
    return null;
  }
  return extractPrimaryKeyFromRow(primaryKeyRow,session);
}","/** 
 * Override method in superclass in order to set the session on the record. Return the row with primary keys and their values from the given expression.
 */
public Vector extractPrimaryKeyFromExpression(boolean requiresExactMatch,Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  ((XMLRecord)primaryKeyRow).setSession(session);
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(requiresExactMatch,getDescriptor(),primaryKeyRow,translationRow);
  if (requiresExactMatch && (!isValid)) {
    return null;
  }
  if (primaryKeyRow.size() != getDescriptor().getPrimaryKeyFields().size()) {
    return null;
  }
  return extractPrimaryKeyFromRow(primaryKeyRow,session);
}"
68618,"/** 
 * Return the row with primary keys and their values from the given expression.
 */
public AbstractRecord extractPrimaryKeyRowFromExpression(Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  ((XMLRecord)primaryKeyRow).setSession(session);
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(true,getDescriptor(),primaryKeyRow,translationRow);
  if (!isValid) {
    return null;
  }
  if (primaryKeyRow.size() != getDescriptor().getPrimaryKeyFields().size()) {
    return null;
  }
  return primaryKeyRow;
}","/** 
 * Override method in superclass in order to set the session on the record. Return the row with primary keys and their values from the given expression.
 */
public AbstractRecord extractPrimaryKeyRowFromExpression(Expression expression,AbstractRecord translationRow,AbstractSession session){
  AbstractRecord primaryKeyRow=createRecord(getPrimaryKeyMappings().size());
  ((XMLRecord)primaryKeyRow).setSession(session);
  expression.getBuilder().setSession(session.getRootSession(null));
  boolean isValid=expression.extractPrimaryKeyValues(true,getDescriptor(),primaryKeyRow,translationRow);
  if (!isValid) {
    return null;
  }
  if (primaryKeyRow.size() != getDescriptor().getPrimaryKeyFields().size()) {
    return null;
  }
  return primaryKeyRow;
}"
68619,"/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  String xmlEncoding=""String_Node_Str"";
  String xmlVersion=""String_Node_Str"";
  try {
    Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
    xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
  }
 catch (  Exception ex) {
  }
  if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null) {
    Object nodeVal;
    try {
      Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
      nodeVal=rootTxt.getNodeValue();
    }
 catch (    Exception ex) {
      nodeVal=null;
    }
    Object obj=XMLConversionManager.getDefaultXMLManager().convertObject(nodeVal,referenceClass);
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setObject(obj);
    String lName=xmlRow.getDOM().getLocalName();
    if (lName == null) {
      lName=xmlRow.getDOM().getNodeName();
    }
    xmlRoot.setLocalName(lName);
    xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
    xmlRoot.setEncoding(xmlEncoding);
    xmlRoot.setVersion(xmlVersion);
    return xmlRoot;
  }
  XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
  AbstractSession readSession=xmlContext.getReadSession(referenceClass);
  ReadObjectQuery query=new ReadObjectQuery();
  query.setReferenceClass(referenceClass);
  query.setSession(readSession);
  XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
  if (descriptor == null) {
    throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
  }
  xmlRow.setUnmarshaller(xmlUnmarshaller);
  xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
  XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
  Object object=objectBuilder.buildObject(query,xmlRow,null);
  xmlUnmarshaller.resolveReferences(readSession);
  String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
  String elementLocalName=xmlRow.getDOM().getLocalName();
  if (elementLocalName == null) {
    elementLocalName=xmlRow.getDOM().getNodeName();
  }
  String elementPrefix=xmlRow.getDOM().getPrefix();
  return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot);
}","/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  String xmlEncoding=""String_Node_Str"";
  String xmlVersion=""String_Node_Str"";
  try {
    Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
    xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
  }
 catch (  Exception ex) {
  }
  XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
  if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null) {
    Object nodeVal;
    try {
      Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
      nodeVal=rootTxt.getNodeValue();
    }
 catch (    Exception ex) {
      nodeVal=null;
    }
    Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setObject(obj);
    String lName=xmlRow.getDOM().getLocalName();
    if (lName == null) {
      lName=xmlRow.getDOM().getNodeName();
    }
    xmlRoot.setLocalName(lName);
    xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
    xmlRoot.setEncoding(xmlEncoding);
    xmlRoot.setVersion(xmlVersion);
    return xmlRoot;
  }
  AbstractSession readSession=xmlContext.getReadSession(referenceClass);
  ReadObjectQuery query=new ReadObjectQuery();
  query.setReferenceClass(referenceClass);
  query.setSession(readSession);
  XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
  if (descriptor == null) {
    throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
  }
  xmlRow.setUnmarshaller(xmlUnmarshaller);
  xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
  XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
  Object object=objectBuilder.buildObject(query,xmlRow,null);
  xmlUnmarshaller.resolveReferences(readSession);
  String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
  String elementLocalName=xmlRow.getDOM().getLocalName();
  if (elementLocalName == null) {
    elementLocalName=xmlRow.getDOM().getNodeName();
  }
  String elementPrefix=xmlRow.getDOM().getPrefix();
  return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot);
}"
68620,"/** 
 * INTERNAL: Load a session.xml document. The error handler will capture all the errors and allow for a document to be returned.
 */
protected Document loadDocument(ClassLoader loader,boolean validate){
  URL inURL=loader.getResource(this.resourceName);
  File inFile=new File(this.resourceName);
  if (inURL == null) {
    if (this.resourceName.equals(DEFAULT_RESOURCE_NAME)) {
      inURL=loader.getResource(DEFAULT_RESOURCE_NAME_IN_META_INF);
    }
    if ((inURL == null) && (!inFile.exists())) {
      throw ValidationException.noSessionsXMLFound(this.resourceName);
    }
  }
  if (inURL == null) {
    this.resourcePath=inFile.getAbsolutePath();
  }
 else {
    this.resourcePath=inURL.getPath();
  }
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  XMLDescriptor projectDescriptor=(XMLDescriptor)getProject().getDescriptors().get(SessionConfigs.class);
  XMLParser parser=xmlPlatform.newXMLParser();
  if (validate) {
    parser.setValidationMode(XMLParser.SCHEMA_VALIDATION);
  }
 else {
    parser.setValidationMode(XMLParser.NONVALIDATING);
  }
  parser.setWhitespacePreserving(false);
  parser.setXMLSchema(projectDescriptor.getSchemaReference().getURL());
  parser.setEntityResolver(this.entityResolver);
  parser.setErrorHandler(new XMLSessionConfigLoaderErrorHandler());
  if (inURL == null) {
    return parser.parse(inFile);
  }
 else {
    return parser.parse(inURL);
  }
}","/** 
 * INTERNAL: Load a session.xml document. The error handler will capture all the errors and allow for a document to be returned.
 */
protected Document loadDocument(ClassLoader loader,boolean validate){
  URL inURL=loader.getResource(this.resourceName);
  File inFile=new File(this.resourceName);
  if (inURL == null) {
    if (this.resourceName.equals(DEFAULT_RESOURCE_NAME)) {
      inURL=loader.getResource(DEFAULT_RESOURCE_NAME_IN_META_INF);
    }
    if ((inURL == null) && (!inFile.exists())) {
      throw ValidationException.noSessionsXMLFound(this.resourceName);
    }
  }
  if (inURL == null) {
    this.resourcePath=inFile.getAbsolutePath();
  }
 else {
    this.resourcePath=inURL.getPath();
  }
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  XMLParser parser=xmlPlatform.newXMLParser();
  if (validate) {
    parser.setValidationMode(XMLParser.SCHEMA_VALIDATION);
  }
 else {
    parser.setValidationMode(XMLParser.NONVALIDATING);
  }
  parser.setWhitespacePreserving(false);
  parser.setXMLSchema(loader.getResource(""String_Node_Str""));
  parser.setEntityResolver(this.entityResolver);
  parser.setErrorHandler(new XMLSessionConfigLoaderErrorHandler());
  if (inURL == null) {
    return parser.parse(inFile);
  }
 else {
    return parser.parse(inURL);
  }
}"
68621,"public ClassDescriptor buildSessionConfigsDescriptor(){
  XMLDescriptor descriptor=(XMLDescriptor)super.buildSessionConfigsDescriptor();
  descriptor.setSchemaReference(new XMLSchemaClassPathReference(""String_Node_Str""));
  descriptor.setDefaultRootElement(""String_Node_Str"");
  return descriptor;
}","public ClassDescriptor buildSessionConfigsDescriptor(){
  XMLDescriptor descriptor=(XMLDescriptor)super.buildSessionConfigsDescriptor();
  descriptor.setDefaultRootElement(""String_Node_Str"");
  return descriptor;
}"
68622,"public void testCreateBusFueledVehicle(){
  int prePersistBusCountBefore=Bus.PRE_PERSIST_COUNT;
  int postPersistBusCountBefore=Bus.POST_PERSIST_COUNT;
  int prePersistBusListenerCountBefore=BusListener.PRE_PERSIST_COUNT;
  int postPersistBusListenerCountBefore=BusListener.POST_PERSIST_COUNT;
  int prePersistBusListener2CountBefore=BusListener2.PRE_PERSIST_COUNT;
  int postPersistBusListener2CountBefore=BusListener2.POST_PERSIST_COUNT;
  int prePersistDefaultListenerCountBefore=DefaultListener.PRE_PERSIST_COUNT;
  int postPersistDefaultListenerCountBefore=DefaultListener.POST_PERSIST_COUNT;
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Bus bus=new Bus();
  bus.setPassengerCapacity(new Integer(50));
  bus.setFuelCapacity(new Integer(175));
  bus.setDescription(""String_Node_Str"");
  bus.setFuelType(""String_Node_Str"");
  try {
    em.persist(bus);
    busId=bus.getId();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  assertFalse(""String_Node_Str"",prePersistBusCountBefore == Bus.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistBusCountBefore == Bus.POST_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",prePersistBusListenerCountBefore == BusListener.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistBusListenerCountBefore == BusListener.POST_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",prePersistBusListener2CountBefore == BusListener2.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistBusListener2CountBefore == BusListener2.POST_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",prePersistDefaultListenerCountBefore == DefaultListener.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistDefaultListenerCountBefore == DefaultListener.POST_PERSIST_COUNT);
  assertTrue(""String_Node_Str"",bus.prePersistCalledListenerCount() == 3);
  assertTrue(""String_Node_Str"",bus.postPersistCalledListenerCount() == 3);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(0) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener2.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(1) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener3.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(2) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener.class);
  assertTrue(""String_Node_Str"",bus.getPostPersistCalledListenerAt(0) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener2.class);
  assertTrue(""String_Node_Str"",bus.getPostPersistCalledListenerAt(1) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener3.class);
  assertTrue(""String_Node_Str"",bus.getPostPersistCalledListenerAt(2) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener.class);
}","public void testCreateBusFueledVehicle(){
  int prePersistBusCountBefore=Bus.PRE_PERSIST_COUNT;
  int postPersistBusCountBefore=Bus.POST_PERSIST_COUNT;
  int prePersistBusListenerCountBefore=BusListener.PRE_PERSIST_COUNT;
  int postPersistBusListenerCountBefore=BusListener.POST_PERSIST_COUNT;
  int prePersistBusListener2CountBefore=BusListener2.PRE_PERSIST_COUNT;
  int postPersistBusListener2CountBefore=BusListener2.POST_PERSIST_COUNT;
  int prePersistDefaultListenerCountBefore=DefaultListener.PRE_PERSIST_COUNT;
  int postPersistDefaultListenerCountBefore=DefaultListener.POST_PERSIST_COUNT;
  EntityManager em=createEntityManager();
  beginTransaction(em);
  Bus bus=new Bus();
  bus.setPassengerCapacity(new Integer(50));
  bus.setFuelCapacity(new Integer(175));
  bus.setDescription(""String_Node_Str"");
  bus.setFuelType(""String_Node_Str"");
  try {
    em.persist(bus);
    busId=bus.getId();
    commitTransaction(em);
  }
 catch (  RuntimeException ex) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw ex;
  }
  assertFalse(""String_Node_Str"",prePersistBusCountBefore == Bus.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistBusCountBefore == Bus.POST_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",prePersistBusListenerCountBefore == BusListener.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistBusListenerCountBefore == BusListener.POST_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",prePersistBusListener2CountBefore == BusListener2.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistBusListener2CountBefore == BusListener2.POST_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",prePersistDefaultListenerCountBefore == DefaultListener.PRE_PERSIST_COUNT);
  assertFalse(""String_Node_Str"",postPersistDefaultListenerCountBefore == DefaultListener.POST_PERSIST_COUNT);
  assertTrue(""String_Node_Str"",bus.prePersistCalledListenerCount() == 6);
  assertTrue(""String_Node_Str"",bus.postPersistCalledListenerCount() == 3);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(0) == DefaultListener1.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(1) == DefaultListener2.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(2) == DefaultListener3.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(3) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener2.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(4) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener3.class);
  assertTrue(""String_Node_Str"",bus.getPrePersistCalledListenerAt(5) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener.class);
  assertTrue(""String_Node_Str"",bus.getPostPersistCalledListenerAt(0) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener2.class);
  assertTrue(""String_Node_Str"",bus.getPostPersistCalledListenerAt(1) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener3.class);
  assertTrue(""String_Node_Str"",bus.getPostPersistCalledListenerAt(2) == org.eclipse.persistence.testing.models.jpa.xml.inheritance.listeners.BusListener.class);
}"
68623,"/** 
 * INTERNAL:
 */
public void addDefaultListener(EntityListenerMetadata defaultListener){
  m_defaultListeners.put(defaultListener.getClassName(),defaultListener);
}","/** 
 * INTERNAL:
 */
public void addDefaultListener(EntityListenerMetadata defaultListener){
  m_defaultListeners.add(defaultListener);
}"
68624,"/** 
 * INTERNAL: Create and return a new MetadataProject with puInfo as its PersistenceUnitInfo,  session as its Session and weavingEnabled as its global dynamic weaving state.
 * @param puInfo - the PersistenceUnitInfo
 * @param session - the Session
 * @param weavingEnabled - flag for global dynamic weaving state
 */
public MetadataProject(PersistenceUnitInfo puInfo,AbstractSession session,boolean weavingEnabled,boolean weaveEager){
  m_persistenceUnitInfo=puInfo;
  m_session=session;
  m_logger=new MetadataLogger(session);
  m_weavingEnabled=weavingEnabled;
  m_weaveEager=weaveEager;
  m_entityMappings=new ArrayList<XMLEntityMappings>();
  m_defaultListeners=new HashMap<String,EntityListenerMetadata>();
  m_namedQueries=new HashMap<String,NamedQueryMetadata>();
  m_namedNativeQueries=new HashMap<String,NamedNativeQueryMetadata>();
  m_namedStoredProcedureQueries=new HashMap<String,NamedStoredProcedureQueryMetadata>();
  m_mappedSuperclasses=new HashMap<String,MappedSuperclassAccessor>();
  m_allAccessors=new HashMap<String,ClassAccessor>();
  m_entityAccessors=new HashMap<String,EntityAccessor>();
  m_embeddableAccessors=new HashMap<String,EmbeddableAccessor>();
  m_interfaceAccessors=new HashMap<String,InterfaceAccessor>();
  m_accessorsWithCustomizer=new HashSet<ClassAccessor>();
  m_accessorsWithRelationships=new HashSet<ClassAccessor>();
  m_generatedValues=new HashMap<Class,GeneratedValueMetadata>();
  m_tableGenerators=new HashMap<String,TableGeneratorMetadata>();
  m_sequenceGenerators=new HashMap<String,SequenceGeneratorMetadata>();
  m_converters=new HashMap<String,AbstractConverterMetadata>();
  m_convertAccessors=new HashSet<DirectAccessor>();
  m_structConverters=new HashMap<String,StructConverterMetadata>();
}","/** 
 * INTERNAL: Create and return a new MetadataProject with puInfo as its PersistenceUnitInfo,  session as its Session and weavingEnabled as its global dynamic weaving state.
 * @param puInfo - the PersistenceUnitInfo
 * @param session - the Session
 * @param weavingEnabled - flag for global dynamic weaving state
 */
public MetadataProject(PersistenceUnitInfo puInfo,AbstractSession session,boolean weavingEnabled,boolean weaveEager){
  m_persistenceUnitInfo=puInfo;
  m_session=session;
  m_logger=new MetadataLogger(session);
  m_weavingEnabled=weavingEnabled;
  m_weaveEager=weaveEager;
  m_entityMappings=new ArrayList<XMLEntityMappings>();
  m_defaultListeners=new LinkedHashSet<EntityListenerMetadata>();
  m_namedQueries=new HashMap<String,NamedQueryMetadata>();
  m_namedNativeQueries=new HashMap<String,NamedNativeQueryMetadata>();
  m_namedStoredProcedureQueries=new HashMap<String,NamedStoredProcedureQueryMetadata>();
  m_mappedSuperclasses=new HashMap<String,MappedSuperclassAccessor>();
  m_allAccessors=new HashMap<String,ClassAccessor>();
  m_entityAccessors=new HashMap<String,EntityAccessor>();
  m_embeddableAccessors=new HashMap<String,EmbeddableAccessor>();
  m_interfaceAccessors=new HashMap<String,InterfaceAccessor>();
  m_accessorsWithCustomizer=new HashSet<ClassAccessor>();
  m_accessorsWithRelationships=new HashSet<ClassAccessor>();
  m_generatedValues=new HashMap<Class,GeneratedValueMetadata>();
  m_tableGenerators=new HashMap<String,TableGeneratorMetadata>();
  m_sequenceGenerators=new HashMap<String,SequenceGeneratorMetadata>();
  m_converters=new HashMap<String,AbstractConverterMetadata>();
  m_convertAccessors=new HashSet<DirectAccessor>();
  m_structConverters=new HashMap<String,StructConverterMetadata>();
}"
68625,"/** 
 * INTERNAL:
 */
public HashMap<String,EntityListenerMetadata> getDefaultListeners(){
  return m_defaultListeners;
}","/** 
 * INTERNAL:
 */
public Set<EntityListenerMetadata> getDefaultListeners(){
  return m_defaultListeners;
}"
68626,"/** 
 * INTERNAL: Process the default listeners defined in XML. This method will process  the class for additional lifecycle callback methods that are decorated  with annotations. NOTE: We add the default listeners regardless if the exclude default  listeners flag is set. This allows the user to change the exclude flag  at runtime and have the default listeners available to them.
 */
protected void processDefaultListeners(){
  for (  EntityListenerMetadata defaultListener : getProject().getDefaultListeners().values()) {
    EntityListenerMetadata listener=(EntityListenerMetadata)defaultListener.clone();
    listener.setEntityClass(getJavaClass());
    listener.initializeListenerClass(MetadataHelper.getClassForName(listener.getClassName(),getJavaClass().getClassLoader()));
    Method[] candidateMethods=MetadataHelper.getCandidateCallbackMethodsForEntityListener(listener);
    processCallbackMethodNames(candidateMethods,listener);
    processCallbackMethods(candidateMethods,listener);
    getDescriptor().addDefaultEventListener(listener);
  }
}","/** 
 * INTERNAL: Process the default listeners defined in XML. This method will process  the class for additional lifecycle callback methods that are decorated  with annotations. NOTE: We add the default listeners regardless if the exclude default  listeners flag is set. This allows the user to change the exclude flag  at runtime and have the default listeners available to them.
 */
protected void processDefaultListeners(){
  for (  EntityListenerMetadata defaultListener : getProject().getDefaultListeners()) {
    EntityListenerMetadata listener=(EntityListenerMetadata)defaultListener.clone();
    listener.setEntityClass(getJavaClass());
    listener.initializeListenerClass(MetadataHelper.getClassForName(listener.getClassName(),getJavaClass().getClassLoader()));
    Method[] candidateMethods=MetadataHelper.getCandidateCallbackMethodsForEntityListener(listener);
    processCallbackMethodNames(candidateMethods,listener);
    processCallbackMethods(candidateMethods,listener);
    getDescriptor().addDefaultEventListener(listener);
  }
}"
68627,"private void runMethod(String methodName) throws Throwable {
  assertNotNull(methodName);
  Method runMethod=null;
  try {
    runMethod=retrieveMethod(this.testCase.getClass(),methodName);
    runMethod.setAccessible(true);
  }
 catch (  NoSuchMethodException e) {
    fail(""String_Node_Str"" + methodName + ""String_Node_Str"");
  }
  try {
    runMethod.invoke(this.testCase,new Class[0]);
  }
 catch (  InvocationTargetException e) {
    e.fillInStackTrace();
    throw e.getTargetException();
  }
catch (  IllegalAccessException e) {
    e.fillInStackTrace();
    throw e;
  }
}","private void runMethod(String methodName) throws Throwable {
  assertNotNull(methodName);
  Method runMethod=null;
  try {
    runMethod=retrieveMethod(this.testCase.getClass(),methodName);
    runMethod.setAccessible(true);
  }
 catch (  NoSuchMethodException e) {
    fail(""String_Node_Str"" + methodName + ""String_Node_Str"");
  }
  try {
    runMethod.invoke(this.testCase,(Object[])new Class[0]);
  }
 catch (  InvocationTargetException e) {
    e.fillInStackTrace();
    throw e.getTargetException();
  }
catch (  IllegalAccessException e) {
    e.fillInStackTrace();
    throw e;
  }
}"
68628,"/** 
 * Runs all the methods contained in the given collection. If one fails, then the process is stopped.
 * @param methods The methods to be ran
 * @throws Throwable If any problem was encountered in an invoked method
 */
private void runMethods(Collection methods) throws Throwable {
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    try {
      updateWindowState();
      resetFocus();
      Method method=(Method)iter.next();
      method.setAccessible(true);
      method.invoke(this,null);
    }
 catch (    InvocationTargetException e) {
      throw e.getCause();
    }
  }
}","/** 
 * Runs all the methods contained in the given collection. If one fails, then the process is stopped.
 * @param methods The methods to be ran
 * @throws Throwable If any problem was encountered in an invoked method
 */
private void runMethods(Collection methods) throws Throwable {
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    try {
      updateWindowState();
      resetFocus();
      Method method=(Method)iter.next();
      method.setAccessible(true);
      method.invoke(this,(Object[])null);
    }
 catch (    InvocationTargetException e) {
      throw e.getCause();
    }
  }
}"
68629,"public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic) {
        Property property=null;
        if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElements.class)) {
          property=new ChoiceProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
          XmlElement[] elements=xmlElements.value();
          ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
          for (int i=0; i < elements.length; i++) {
            XmlElement next=elements[i];
            Property choiceProp=new Property();
            String name=next.name();
            String namespace=next.namespace();
            QName qName=null;
            if (!namespace.equals(""String_Node_Str"")) {
              qName=new QName(namespace,name);
            }
 else {
              qName=new QName(name);
            }
            choiceProp.setPropertyName(property.getPropertyName());
            choiceProp.setType(helper.getJavaClass(next.type()));
            choiceProp.setSchemaName(qName);
            choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
            choiceProp.setElement(property.getElement());
            choiceProperties.add(choiceProp);
          }
          ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
        }
 else         if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlAnyElement.class)) {
          property=new AnyProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation((JavaHasAnnotations)nextField,XmlAnyElement.class);
          ((AnyProperty)property).setLax(anyElement.lax());
        }
 else {
          property=new Property(helper);
          property.setElement((JavaHasAnnotations)nextField);
        }
        JavaClass ptype=(JavaClass)nextField.getResolvedType();
        property.setType(ptype);
        if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
          property.setAdapterClass(adapter.value());
        }
 else         if (info.getAdaptersByClass().get(ptype) != null) {
          property.setAdapterClass(info.getAdapterClass(ptype));
        }
        if (property.hasAdapterClass()) {
          ptype=property.getValueType();
        }
        property.setGenericType(helper.getGenericType(nextField));
        property.setPropertyName(nextField.getName());
        if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
          property.setIsSwaAttachmentRef(true);
          property.setSchemaType(XMLConstants.SWA_REF_QNAME);
        }
 else         if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
          property.setIsMtomAttachment(true);
          property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
          property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
          QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
          property.setSchemaType(schemaTypeQname);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
          property.setIsAttribute(true);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
          property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
        }
        property.setSchemaName(getQNameForProperty(Introspector.decapitalize(nextField.getName()),nextField));
        properties.add(property);
      }
    }
  }
  return properties;
}","public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic) {
        Property property=null;
        if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlElements.class)) {
          property=new ChoiceProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
          XmlElement[] elements=xmlElements.value();
          ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
          for (int i=0; i < elements.length; i++) {
            XmlElement next=elements[i];
            Property choiceProp=new Property();
            String name=next.name();
            String namespace=next.namespace();
            QName qName=null;
            if (!namespace.equals(""String_Node_Str"")) {
              qName=new QName(namespace,name);
            }
 else {
              qName=new QName(name);
            }
            choiceProp.setPropertyName(property.getPropertyName());
            choiceProp.setType(helper.getJavaClass(next.type()));
            choiceProp.setSchemaName(qName);
            choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
            choiceProp.setElement(property.getElement());
            choiceProperties.add(choiceProp);
          }
          ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
        }
 else         if (helper.isAnnotationPresent((JavaHasAnnotations)nextField,XmlAnyElement.class)) {
          property=new AnyProperty(helper);
          property.setElement((JavaHasAnnotations)nextField);
          XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation((JavaHasAnnotations)nextField,XmlAnyElement.class);
          ((AnyProperty)property).setLax(anyElement.lax());
          ((AnyProperty)property).setDomHandlerClass(anyElement.value());
        }
 else {
          property=new Property(helper);
          property.setElement((JavaHasAnnotations)nextField);
        }
        JavaClass ptype=(JavaClass)nextField.getResolvedType();
        property.setType(ptype);
        if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
          XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
          property.setAdapterClass(adapter.value());
        }
 else         if (info.getAdaptersByClass().get(ptype) != null) {
          property.setAdapterClass(info.getAdapterClass(ptype));
        }
        if (property.hasAdapterClass()) {
          ptype=property.getValueType();
        }
        property.setGenericType(helper.getGenericType(nextField));
        property.setPropertyName(nextField.getName());
        if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
          property.setIsSwaAttachmentRef(true);
          property.setSchemaType(XMLConstants.SWA_REF_QNAME);
        }
 else         if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
          property.setIsMtomAttachment(true);
          property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
          property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
          QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
          property.setSchemaType(schemaTypeQname);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
          property.setIsAttribute(true);
        }
        if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
          property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
        }
        property.setSchemaName(getQNameForProperty(Introspector.decapitalize(nextField.getName()),nextField));
        properties.add(property);
      }
    }
  }
  return properties;
}"
68630,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> getMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (next.getName().startsWith(""String_Node_Str"") || ((areEquals((JavaClass)next.getReturnType(),Boolean.class) || areEquals((JavaClass)next.getReturnType(),boolean.class)) && next.getName().startsWith(""String_Node_Str""))) {
      if ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic) {
        getMethods.add(next);
      }
    }
  }
  for (int i=0; i < getMethods.size(); i++) {
    JavaMethod getMethod=getMethods.get(i);
    String propertyName=""String_Node_Str"";
    if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(3);
    }
 else     if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(2);
    }
    propertyName=Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1);
    String setMethodName=""String_Node_Str"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
    JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
    JavaMethod setMethod=cls.getMethod(setMethodName,paramTypes);
    JavaMethod propertyMethod=null;
    if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
      if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
        propertyMethod=setMethod;
      }
    }
 else {
      if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
        propertyMethod=getMethod;
      }
    }
    Property property=null;
    if (helper.isAnnotationPresent(propertyMethod,XmlElements.class)) {
      property=new ChoiceProperty(helper);
    }
 else     if (helper.isAnnotationPresent(propertyMethod,XmlAnyElement.class)) {
      property=new AnyProperty(helper);
    }
 else {
      property=new Property(helper);
    }
    property.setElement(propertyMethod);
    property.setSchemaName(getQNameForProperty(propertyName,propertyMethod));
    property.setPropertyName(propertyName);
    property.setType((JavaClass)getMethod.getReturnType());
    property.setGenericType(helper.getGenericReturnType(getMethod));
    property.setGetMethodName(getMethod.getName());
    property.setSetMethodName(setMethodName);
    property.setMethodProperty(true);
    JavaClass ptype=property.getType();
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (property.hasAdapterClass()) {
      ptype=property.getValueType();
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
      QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
      property.setSchemaType(schemaTypeQname);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
      property.setIsSwaAttachmentRef(true);
      property.setSchemaType(XMLConstants.SWA_REF_QNAME);
    }
 else     if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
      property.setIsMtomAttachment(true);
      property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
      property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
      property.setIsAttribute(true);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElements.class)) {
      XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
      XmlElement[] elements=xmlElements.value();
      ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
      for (int j=0; j < elements.length; j++) {
        XmlElement next=elements[j];
        Property choiceProp=new Property();
        String name=next.name();
        String namespace=next.namespace();
        QName qName=null;
        if (!namespace.equals(""String_Node_Str"")) {
          qName=new QName(namespace,name);
        }
 else {
          qName=new QName(name);
        }
        choiceProp.setPropertyName(property.getPropertyName());
        choiceProp.setType(helper.getJavaClass(next.type()));
        choiceProp.setSchemaName(qName);
        choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
        choiceProp.setElement(property.getElement());
        choiceProperties.add(choiceProp);
      }
      ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAnyElement.class)) {
      XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation(property.getElement(),XmlAnyElement.class);
      ((AnyProperty)property).setLax(anyElement.lax());
    }
    if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
      properties.add(property);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
      property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
    }
  }
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic){
  ArrayList properties=new ArrayList();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> getMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (next.getName().startsWith(""String_Node_Str"") || ((areEquals((JavaClass)next.getReturnType(),Boolean.class) || areEquals((JavaClass)next.getReturnType(),boolean.class)) && next.getName().startsWith(""String_Node_Str""))) {
      if ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic) {
        getMethods.add(next);
      }
    }
  }
  for (int i=0; i < getMethods.size(); i++) {
    JavaMethod getMethod=getMethods.get(i);
    String propertyName=""String_Node_Str"";
    if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(3);
    }
 else     if (getMethod.getName().startsWith(""String_Node_Str"")) {
      propertyName=getMethod.getName().substring(2);
    }
    propertyName=Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1);
    String setMethodName=""String_Node_Str"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
    JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
    JavaMethod setMethod=cls.getMethod(setMethodName,paramTypes);
    JavaMethod propertyMethod=null;
    if (setMethod != null && !setMethod.getAnnotations().isEmpty()) {
      if (!helper.isAnnotationPresent(setMethod,XmlTransient.class)) {
        propertyMethod=setMethod;
      }
    }
 else {
      if (!helper.isAnnotationPresent(getMethod,XmlTransient.class)) {
        propertyMethod=getMethod;
      }
    }
    Property property=null;
    if (helper.isAnnotationPresent(propertyMethod,XmlElements.class)) {
      property=new ChoiceProperty(helper);
    }
 else     if (helper.isAnnotationPresent(propertyMethod,XmlAnyElement.class)) {
      property=new AnyProperty(helper);
    }
 else {
      property=new Property(helper);
    }
    property.setElement(propertyMethod);
    property.setSchemaName(getQNameForProperty(propertyName,propertyMethod));
    property.setPropertyName(propertyName);
    property.setType((JavaClass)getMethod.getReturnType());
    property.setGenericType(helper.getGenericReturnType(getMethod));
    property.setGetMethodName(getMethod.getName());
    property.setSetMethodName(setMethodName);
    property.setMethodProperty(true);
    JavaClass ptype=property.getType();
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (property.hasAdapterClass()) {
      ptype=property.getValueType();
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
      QName schemaTypeQname=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
      property.setSchemaType(schemaTypeQname);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER)) {
      property.setIsSwaAttachmentRef(true);
      property.setSchemaType(XMLConstants.SWA_REF_QNAME);
    }
 else     if (areEquals(ptype,JAVAX_ACTIVATION_DATAHANDLER) || areEquals(ptype,byte[].class) || areEquals(ptype,Byte[].class)|| areEquals(ptype,Image.class)|| areEquals(ptype,Source.class)|| areEquals(ptype,JAVAX_MAIL_INTERNET_MIMEMULTIPART)) {
      property.setIsMtomAttachment(true);
      property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
      property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
      XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
      property.setAdapterClass(adapter.value());
    }
 else     if (info.getAdaptersByClass().get(ptype) != null) {
      property.setAdapterClass(info.getAdaptersByClass().get(ptype));
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class) || helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
      property.setIsAttribute(true);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElements.class)) {
      XmlElements xmlElements=(XmlElements)helper.getAnnotation(property.getElement(),XmlElements.class);
      XmlElement[] elements=xmlElements.value();
      ArrayList<Property> choiceProperties=new ArrayList<Property>(elements.length);
      for (int j=0; j < elements.length; j++) {
        XmlElement next=elements[j];
        Property choiceProp=new Property();
        String name=next.name();
        String namespace=next.namespace();
        QName qName=null;
        if (!namespace.equals(""String_Node_Str"")) {
          qName=new QName(namespace,name);
        }
 else {
          qName=new QName(name);
        }
        choiceProp.setPropertyName(property.getPropertyName());
        choiceProp.setType(helper.getJavaClass(next.type()));
        choiceProp.setSchemaName(qName);
        choiceProp.setSchemaType(getSchemaTypeFor(helper.getJavaClass(next.type())));
        choiceProp.setElement(property.getElement());
        choiceProperties.add(choiceProp);
      }
      ((ChoiceProperty)property).setChoiceProperties(choiceProperties);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlAnyElement.class)) {
      XmlAnyElement anyElement=(XmlAnyElement)helper.getAnnotation(property.getElement(),XmlAnyElement.class);
      ((AnyProperty)property).setDomHandlerClass(anyElement.value());
      ((AnyProperty)property).setLax(anyElement.lax());
    }
    if (!helper.isAnnotationPresent(property.getElement(),XmlTransient.class)) {
      properties.add(property);
    }
    if (helper.isAnnotationPresent(property.getElement(),XmlElement.class)) {
      property.setIsRequired(((XmlElement)helper.getAnnotation(property.getElement(),XmlElement.class)).required());
    }
  }
  return properties;
}"
68631,"public XMLAnyCollectionMapping generateAnyCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  AnyProperty prop=(AnyProperty)property;
  XMLAnyCollectionMapping mapping=new XMLAnyCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (prop.isLax()) {
    mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
  }
 else {
    mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT);
  }
  descriptor.addMapping(mapping);
  return mapping;
}","public XMLAnyCollectionMapping generateAnyCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  AnyProperty prop=(AnyProperty)property;
  XMLAnyCollectionMapping mapping=new XMLAnyCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (prop.isLax()) {
    mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
  }
 else {
    mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT);
  }
  if (prop.getDomHandlerClass() != null) {
    DomHandlerConverter converter=new DomHandlerConverter(prop.getDomHandlerClass());
    mapping.setConverter(converter);
  }
  descriptor.addMapping(mapping);
  return mapping;
}"
68632,"/** 
 * Convert to a String value based to the SDO type.
 * @param value  The value to convert.
 * @param sdoType the SDO type
 * @return the original value converted to a String based on the SDO type specified.
 */
private String convertToStringValue(Object value,Type sdoType,QName xsdType){
  if (value.getClass() == ClassConstants.CALENDAR) {
    if (sdoType.equals(SDOConstants.SDO_DATETIME)) {
      return toDateTime((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_TIME)) {
      return toTime((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DAY)) {
      return toDay((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DURATION)) {
      return toDuration((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTH)) {
      return toMonth((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTHDAY)) {
      return toMonthDay((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEAR)) {
      return toYear((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTH)) {
      return toYearMonth((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTHDAY)) {
      return toYearMonthDay((Calendar)value);
    }
  }
 else   if (value.getClass() == ClassConstants.UTILDATE) {
    if (sdoType.equals(SDOConstants.SDO_DATETIME)) {
      return toDateTime((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_TIME)) {
      return toTime((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DAY)) {
      return toDay((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DURATION)) {
      return toDuration((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTH)) {
      return toMonth((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTHDAY)) {
      return toMonthDay((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEAR)) {
      return toYear((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTH)) {
      return toYearMonth((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTHDAY)) {
      return toYearMonthDay((Date)value);
    }
  }
 else   if (value.getClass().getName().equals(""String_Node_Str"")) {
    try {
      Class binaryDataHelper=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
      java.lang.reflect.Method getHelperMethod=PrivilegedAccessHelper.getMethod(binaryDataHelper,""String_Node_Str"",new Class[]{},false);
      java.lang.reflect.Method stringToDataHandlerMethod=PrivilegedAccessHelper.getMethod(binaryDataHelper,""String_Node_Str"",new Class[]{Object.class,QName.class},false);
      Object helper=PrivilegedAccessHelper.invokeMethod(getHelperMethod,binaryDataHelper,new Object[]{});
      String result=(String)PrivilegedAccessHelper.invokeMethod(stringToDataHandlerMethod,helper,new Object[]{value,xsdType});
      return result;
    }
 catch (    Exception ex) {
      return (String)getXMLConversionManager().convertObject(value,ClassConstants.STRING,xsdType);
    }
  }
  return (String)getXMLConversionManager().convertObject(value,ClassConstants.STRING,xsdType);
}","/** 
 * Convert to a String value based to the SDO type.
 * @param value  The value to convert.
 * @param sdoType the SDO type
 * @return the original value converted to a String based on the SDO type specified.
 */
private String convertToStringValue(Object value,Type sdoType,QName xsdType){
  if (value.getClass() == ClassConstants.CALENDAR) {
    if (sdoType.equals(SDOConstants.SDO_DATETIME)) {
      return toDateTime((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_TIME)) {
      return toTime((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DAY)) {
      return toDay((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DURATION)) {
      return toDuration((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTH)) {
      return toMonth((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTHDAY)) {
      return toMonthDay((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEAR)) {
      return toYear((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTH)) {
      return toYearMonth((Calendar)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTHDAY)) {
      return toYearMonthDay((Calendar)value);
    }
  }
 else   if (value.getClass() == ClassConstants.UTILDATE) {
    if (sdoType.equals(SDOConstants.SDO_DATETIME)) {
      return toDateTime((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_TIME)) {
      return toTime((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DAY)) {
      return toDay((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_DURATION)) {
      return toDuration((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTH)) {
      return toMonth((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_MONTHDAY)) {
      return toMonthDay((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEAR)) {
      return toYear((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTH)) {
      return toYearMonth((Date)value);
    }
 else     if (sdoType.equals(SDOConstants.SDO_YEARMONTHDAY)) {
      return toYearMonthDay((Date)value);
    }
  }
 else   if (value.getClass().getName().equals(""String_Node_Str"")) {
    try {
      Class binaryDataHelper=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
      java.lang.reflect.Method getHelperMethod=PrivilegedAccessHelper.getMethod(binaryDataHelper,""String_Node_Str"",new Class[]{},false);
      java.lang.reflect.Method stringToDataHandlerMethod=PrivilegedAccessHelper.getMethod(binaryDataHelper,""String_Node_Str"",new Class[]{Object.class,QName.class,AbstractSession.class},false);
      Object helper=PrivilegedAccessHelper.invokeMethod(getHelperMethod,binaryDataHelper,new Object[]{});
      String result=(String)PrivilegedAccessHelper.invokeMethod(stringToDataHandlerMethod,helper,new Object[]{value,xsdType,((SDOXMLHelper)getHelperContext().getXMLHelper()).getXmlContext().getSession(0)});
      return result;
    }
 catch (    Exception ex) {
      return (String)getXMLConversionManager().convertObject(value,ClassConstants.STRING,xsdType);
    }
  }
  return (String)getXMLConversionManager().convertObject(value,ClassConstants.STRING,xsdType);
}"
68633,"public void setClasses(Class[] newClasses) throws Exception {
  this.classes=newClasses;
  generator=new Generator(new JavaModelInputImpl(classes,new JavaModelImpl()));
  Project proj=generator.generateProject();
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(ConversionManager.getDefaultManager().convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  setProject(proj);
}","public void setClasses(Class[] newClasses) throws Exception {
  this.classes=newClasses;
  generator=new Generator(new JavaModelInputImpl(classes,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
  Project proj=generator.generateProject();
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(ConversionManager.getDefaultManager().convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  setProject(proj);
}"
68634,"public void testName002Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testName002Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68635,"public void testNamespace001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testNamespace001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68636,"public void testName001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testName001Positive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68637,"public void testName001Negative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}","public void testName001Negative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}"
68638,"public void testNamespace001Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}","public void testNamespace001Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{NameSpace001.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}"
68639,"public void testName002Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}","public void testName002Negative() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Name002.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getMessage();
  }
  assertFalse(""String_Node_Str"" + msg,exception == false);
}"
68640,"public void testBaseType001cPositive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testBaseType001cPositive() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68641,"public void testBaseType001cNegative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}","public void testBaseType001cNegative() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{BaseType001c.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
  }
  assertFalse(""String_Node_Str"",exception == false);
}"
68642,"/** 
 * The following test expects a schema validation exception to occur. This is due to the fact that the supplied instance document does not contain a 'firstName' element, which is required as the  corresponding field in the Employee class contains the following annotation:  @XmlElement(required = true)
 * @throws Exception
 */
public void testEmployeeSchemaGenMissingRequiredElement() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  String msg=""String_Node_Str"";
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getLocalizedMessage();
  }
  assertTrue(""String_Node_Str"",exception);
  assertTrue(""String_Node_Str"" + msg,msg.contains(""String_Node_Str""));
}","/** 
 * The following test expects a schema validation exception to occur. This is due to the fact that the supplied instance document does not contain a 'firstName' element, which is required as the  corresponding field in the Employee class contains the following annotation:  @XmlElement(required = true)
 * @throws Exception
 */
public void testEmployeeSchemaGenMissingRequiredElement() throws Exception {
  boolean exception=false;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  String msg=""String_Node_Str"";
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.getLocalizedMessage();
  }
  assertTrue(""String_Node_Str"",exception);
  assertTrue(""String_Node_Str"" + msg,msg.contains(""String_Node_Str""));
}"
68643,"public void testEmployeeSchemaGeneration() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl()));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}","public void testEmployeeSchemaGeneration() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
}"
68644,"public static javax.xml.bind.JAXBContext createContext(String contextPath,ClassLoader classLoader) throws JAXBException {
  try {
    XMLContext xmlContext=new XMLContext(contextPath,classLoader);
    return new org.eclipse.persistence.jaxb.JAXBContext(xmlContext);
  }
 catch (  Exception ex) {
  }
  ArrayList classes=new ArrayList();
  StringTokenizer tokenizer=new StringTokenizer(contextPath,""String_Node_Str"");
  while (tokenizer.hasMoreElements()) {
    String path=tokenizer.nextToken();
    try {
      Class objectFactory=classLoader.loadClass(path + ""String_Node_Str"");
      Method[] createMethods=objectFactory.getMethods();
      for (int i=0; i < createMethods.length; i++) {
        if (createMethods[i].getName().startsWith(""String_Node_Str"") && createMethods[i].getReturnType() != javax.xml.bind.JAXBElement.class) {
          classes.add(createMethods[i].getReturnType());
        }
      }
    }
 catch (    Exception ex) {
    }
    try {
      classLoader.loadClass(path + ""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    InputStream jaxbIndex=classLoader.getResourceAsStream(path.replace('.','/') + ""String_Node_Str"");
    if (jaxbIndex != null) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(jaxbIndex));
      try {
        String line=reader.readLine();
        while (line != null) {
          String className=path + ""String_Node_Str"" + line.trim();
          try {
            classes.add(classLoader.loadClass(className));
          }
 catch (          Exception ex) {
          }
          line=reader.readLine();
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  Class[] classArray=new Class[classes.size()];
  for (int i=0; i < classes.size(); i++) {
    classArray[i]=(Class)classes.get(i);
  }
  return createContext(classArray,null);
}","public static javax.xml.bind.JAXBContext createContext(String contextPath,ClassLoader classLoader) throws JAXBException {
  try {
    XMLContext xmlContext=new XMLContext(contextPath,classLoader);
    return new org.eclipse.persistence.jaxb.JAXBContext(xmlContext);
  }
 catch (  Exception ex) {
  }
  ArrayList classes=new ArrayList();
  StringTokenizer tokenizer=new StringTokenizer(contextPath,""String_Node_Str"");
  while (tokenizer.hasMoreElements()) {
    String path=tokenizer.nextToken();
    try {
      Class objectFactory=classLoader.loadClass(path + ""String_Node_Str"");
      Method[] createMethods=objectFactory.getMethods();
      for (int i=0; i < createMethods.length; i++) {
        if (createMethods[i].getName().startsWith(""String_Node_Str"") && createMethods[i].getReturnType() != javax.xml.bind.JAXBElement.class) {
          classes.add(createMethods[i].getReturnType());
        }
      }
    }
 catch (    Exception ex) {
    }
    try {
      classLoader.loadClass(path + ""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    InputStream jaxbIndex=classLoader.getResourceAsStream(path.replace('.','/') + ""String_Node_Str"");
    if (jaxbIndex != null) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(jaxbIndex));
      try {
        String line=reader.readLine();
        while (line != null) {
          String className=path + ""String_Node_Str"" + line.trim();
          try {
            classes.add(classLoader.loadClass(className));
          }
 catch (          Exception ex) {
          }
          line=reader.readLine();
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  Class[] classArray=new Class[classes.size()];
  for (int i=0; i < classes.size(); i++) {
    classArray[i]=(Class)classes.get(i);
  }
  return createContext(classArray,null,classLoader);
}"
68645,"/** 
 * INTERNAL: Set the enum class.
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (getEnumClass() == null) {
    if (getEnumClassName() == null) {
      throw XMLMarshalException.enumClassNotSpecified();
    }
 else {
      try {
        enumClass=Class.forName(enumClassName);
      }
 catch (      Exception e) {
        throw XMLMarshalException.invalidEnumClassSpecified(e,enumClassName);
      }
    }
  }
  try {
    fromStringMethod=enumClass.getMethod(""String_Node_Str"",new Class[]{String.class});
  }
 catch (  Exception ex) {
    throw XMLMarshalException.errorInvokingFromStringMethod(ex,enumClass.getName());
  }
}","/** 
 * INTERNAL: Set the enum class.
 */
public void initialize(DatabaseMapping mapping,Session session){
  if (getEnumClass() == null) {
    if (getEnumClassName() == null) {
      throw XMLMarshalException.enumClassNotSpecified();
    }
 else {
      try {
        enumClass=session.getDatasourcePlatform().getConversionManager().getLoader().loadClass(enumClassName);
      }
 catch (      Exception e) {
        throw XMLMarshalException.invalidEnumClassSpecified(e,enumClassName);
      }
    }
  }
  try {
    fromStringMethod=enumClass.getMethod(""String_Node_Str"",new Class[]{String.class});
  }
 catch (  Exception ex) {
    throw XMLMarshalException.errorInvokingFromStringMethod(ex,enumClass.getName());
  }
}"
68646,"public JavaClass getClass(String classname){
  try {
    return new JavaClassImpl(Class.forName(classname));
  }
 catch (  Exception x) {
    return null;
  }
}","public JavaClass getClass(String classname){
  try {
    return new JavaClassImpl(classLoader.loadClass(classname));
  }
 catch (  Exception x) {
    return null;
  }
}"
68647,"public JavaModelImpl(){
}","public JavaModelImpl(ClassLoader classLoader){
  this.classLoader=classLoader;
}"
68648,"public ClassLoader getClassLoader(){
  return ClassLoader.getSystemClassLoader();
}","public ClassLoader getClassLoader(){
  return this.classLoader;
}"
68649,"private MWTypeDeclaration getReturnTypeDeclarationFrom(MWMethod mwMethod) throws Exception {
  Method method=null;
  method=MWMethod.class.getDeclaredMethod(""String_Node_Str"",null);
  method.setAccessible(true);
  MWTypeDeclaration typeDeclaration=null;
  typeDeclaration=(MWTypeDeclaration)method.invoke(mwMethod,null);
  return typeDeclaration;
}","private MWTypeDeclaration getReturnTypeDeclarationFrom(MWMethod mwMethod) throws Exception {
  Method method=null;
  method=MWMethod.class.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  method.setAccessible(true);
  MWTypeDeclaration typeDeclaration=null;
  typeDeclaration=(MWTypeDeclaration)method.invoke(mwMethod,(Object[])null);
  return typeDeclaration;
}"
68650,"protected void buidPlatforms(){
  this.addPlatform(AQ_ID,""String_Node_Str"");
  this.addPlatform(ATTUNITY_ID,""String_Node_Str"");
  this.addPlatform(MQ_ID,""String_Node_Str"");
}","protected void buidPlatforms(){
  this.addPlatform(AQ_ID,""String_Node_Str"");
  this.addPlatform(MQ_ID,""String_Node_Str"");
}"
68651,"private void buidConnectionSpecs(){
  this.connectionSpecs.put(AQ_ID,""String_Node_Str"");
  this.connectionSpecs.put(ATTUNITY_ID,""String_Node_Str"");
  this.connectionSpecs.put(MQ_ID,""String_Node_Str"");
}","private void buidConnectionSpecs(){
  this.connectionSpecs.put(AQ_ID,""String_Node_Str"");
  this.connectionSpecs.put(MQ_ID,""String_Node_Str"");
}"
68652,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  if (null != unmarshalRecord.getChildRecord()) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,unmarshalRecord.getChildRecord().getCurrentObject());
    }
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      Object childObject=unmarshalRecord.getChildRecord().getCurrentObject();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
    workingDescriptor=null;
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      unmarshalRecord.addAttributeValue(this,builder.getNodes().pop());
    }
 else {
      endElementProcessText(unmarshalRecord,collection,xPathFragment);
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  if (null != unmarshalRecord.getChildRecord()) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      Object childObject=unmarshalRecord.getChildRecord().getCurrentObject();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
    workingDescriptor=null;
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      Object node=builder.getNodes().pop();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        node=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(node,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,node);
    }
 else {
      endElementProcessText(unmarshalRecord,collection,xPathFragment);
    }
  }
}"
68653,"private void endElementProcessText(UnmarshalRecord unmarshalRecord,Object collection,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value) && xmlAnyCollectionMapping.isMixedContent()) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,value);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setObject(value);
      unmarshalRecord.addAttributeValue(this,xmlRoot);
    }
  }
}","private void endElementProcessText(UnmarshalRecord unmarshalRecord,Object collection,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  if (xmlAnyCollectionMapping.getConverter() != null) {
    value=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  }
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value) && xmlAnyCollectionMapping.isMixedContent()) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,value);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setObject(value);
      unmarshalRecord.addAttributeValue(this,xmlRoot);
    }
  }
}"
68654,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
68655,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  Object childObject=null;
  if (null != unmarshalRecord.getChildRecord()) {
    childObject=unmarshalRecord.getChildRecord().getCurrentObject();
    if (!xmlAnyObjectMapping.usesXMLRoot()) {
      unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
    }
 else {
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
        workingDescriptor=null;
      }
    }
  }
 else {
    endElementProcessText(unmarshalRecord,xPathFragment);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  Object childObject=null;
  if (null != unmarshalRecord.getChildRecord()) {
    childObject=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlAnyObjectMapping.getConverter() != null) {
      childObject=xmlAnyObjectMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
    if (!xmlAnyObjectMapping.usesXMLRoot()) {
      unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
    }
 else {
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
        workingDescriptor=null;
      }
    }
  }
 else {
    endElementProcessText(unmarshalRecord,xPathFragment);
  }
}"
68656,"private void endElementProcessText(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyObjectMapping.usesXMLRoot()) {
      unmarshalRecord.setAttributeValue(value,xmlAnyObjectMapping);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setObject(value);
      unmarshalRecord.setAttributeValue(xmlRoot,xmlAnyObjectMapping);
    }
  }
}","private void endElementProcessText(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  if (xmlAnyObjectMapping.getConverter() != null) {
    value=xmlAnyObjectMapping.getConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  }
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyObjectMapping.usesXMLRoot()) {
      unmarshalRecord.setAttributeValue(value,xmlAnyObjectMapping);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setObject(value);
      unmarshalRecord.setAttributeValue(xmlRoot,xmlAnyObjectMapping);
    }
  }
}"
68657,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  if (xmlAnyObjectMapping.isReadOnly()) {
    return false;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Object objectValue=marshalContext.getAttributeValue(object,xmlAnyObjectMapping);
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(objectValue);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      if (xmlAnyObjectMapping.shouldAddXsiType(marshaller,descriptor,originalValue,wasXMLRoot)) {
        String typeValue=descriptor.getSchemaReference().getSchemaContext();
        addTypeAttribute(descriptor,marshalRecord,typeValue);
      }
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(objectValue);
      }
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  if (xmlAnyObjectMapping.isReadOnly()) {
    return false;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Object objectValue=marshalContext.getAttributeValue(object,xmlAnyObjectMapping);
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(objectValue);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      if (xmlAnyObjectMapping.shouldAddXsiType(marshaller,descriptor,originalValue,wasXMLRoot)) {
        String typeValue=descriptor.getSchemaReference().getSchemaContext();
        addTypeAttribute(descriptor,marshalRecord,typeValue);
      }
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(objectValue);
      }
    }
  }
  return true;
}"
68658,"public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  DOMRecord record=(DOMRecord)row;
  Object attributeValue=this.getAttributeValueFromObject(object);
  Node root=record.getDOM();
  org.w3c.dom.Document doc=record.getDocument();
  XMLField xmlRootField=null;
  if (attributeValue == null) {
    return;
  }
  if (field != null) {
    root=XPathEngine.getInstance().create((XMLField)getField(),record.getDOM());
    DOMRecord rootRecord=new DOMRecord(root);
    rootRecord.setDocPresPolicy(record.getDocPresPolicy());
    rootRecord.setNamespaceResolver(record.getNamespaceResolver());
    rootRecord.setMarshaller(record.getMarshaller());
    record=rootRecord;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  ArrayList childNodes=getUnmappedChildNodes(record.getDOM().getChildNodes());
  Object iter=cp.iteratorFor(attributeValue);
  int childNodeCount=0;
  boolean wasXMLRoot=false;
  while (cp.hasNext(iter) && (childNodeCount < childNodes.size())) {
    Object element=cp.next(iter,session);
    Object originalObject=element;
    Node nextChild=null;
    while (childNodeCount < childNodes.size()) {
      Node nextPossible=(Node)childNodes.get(childNodeCount);
      if ((nextPossible.getNodeType() == Node.ELEMENT_NODE) || (nextPossible.getNodeType() == Node.TEXT_NODE) || (nextPossible.getNodeType() == Node.CDATA_SECTION_NODE)) {
        nextChild=nextPossible;
        childNodeCount++;
        break;
      }
      childNodeCount++;
    }
    if (nextChild == null) {
      break;
    }
    if (usesXMLRoot() && (element instanceof XMLRoot)) {
      xmlRootField=new XMLField();
      wasXMLRoot=true;
      XPathFragment frag=new XPathFragment();
      if ((((XMLRoot)element)).getRootFragment().getNamespaceURI() != null) {
        frag.setNamespaceURI(((XMLRoot)element).getNamespaceURI());
      }
 else {
        frag.setXPath(((XMLRoot)element).getLocalName());
      }
      xmlRootField.setXPathFragment(frag);
      xmlRootField.setNamespaceResolver(record.getNamespaceResolver());
      element=((XMLRoot)element).getObject();
    }
    if (element instanceof String) {
      if (wasXMLRoot) {
        if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
          String prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
          if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
            xmlRootField.getXPathFragment().setGeneratedPrefix(true);
            prefix=record.getNamespaceResolver().generatePrefix();
          }
          xmlRootField.getXPathFragment().setXPath(prefix + ""String_Node_Str"" + ((XMLRoot)originalObject).getLocalName());
        }
      }
      if (xmlRootField != null) {
        XPathEngine.getInstance().create(xmlRootField,root,element);
      }
 else {
        Text textNode=doc.createTextNode((String)element);
        root.replaceChild(textNode,nextChild);
      }
    }
 else     if (element instanceof org.w3c.dom.Node) {
      Node importedCopy=doc.importNode((Node)element,true);
      root.replaceChild(importedCopy,nextChild);
    }
 else {
      XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(element.getClass());
      if (wasXMLRoot) {
        if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
          String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
          if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
            prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
          }
          if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
            xmlRootField.getXPathFragment().setGeneratedPrefix(true);
            prefix=record.getNamespaceResolver().generatePrefix();
          }
          xmlRootField.getXPathFragment().setXPath(prefix + ""String_Node_Str"" + ((XMLRoot)originalObject).getLocalName());
        }
      }
      DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(element,session,referenceDescriptor,row,xmlRootField,element,wasXMLRoot);
      if (nestedRecord != null) {
        if (nestedRecord.getDOM() != nextChild) {
          root.replaceChild(nestedRecord.getDOM(),nextChild);
        }
      }
    }
  }
  if (childNodeCount < childNodes.size()) {
    for (int i=childNodeCount; i < childNodes.size(); i++) {
      Node child=(Node)childNodes.get(i);
      if ((child.getNodeType() == Node.ELEMENT_NODE) || (child.getNodeType() == Node.TEXT_NODE) || (child.getNodeType() == Node.CDATA_SECTION_NODE)) {
        root.removeChild(child);
      }
    }
  }
  if (cp.hasNext(iter)) {
    while (cp.hasNext(iter)) {
      Object element=cp.next(iter,session);
      writeSingleValue(element,object,record,session);
    }
  }
}","public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  DOMRecord record=(DOMRecord)row;
  Object attributeValue=this.getAttributeValueFromObject(object);
  Node root=record.getDOM();
  org.w3c.dom.Document doc=record.getDocument();
  XMLField xmlRootField=null;
  if (attributeValue == null) {
    return;
  }
  if (field != null) {
    root=XPathEngine.getInstance().create((XMLField)getField(),record.getDOM());
    DOMRecord rootRecord=new DOMRecord(root);
    rootRecord.setDocPresPolicy(record.getDocPresPolicy());
    rootRecord.setNamespaceResolver(record.getNamespaceResolver());
    rootRecord.setMarshaller(record.getMarshaller());
    record=rootRecord;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  ArrayList childNodes=getUnmappedChildNodes(record.getDOM().getChildNodes());
  Object iter=cp.iteratorFor(attributeValue);
  int childNodeCount=0;
  boolean wasXMLRoot=false;
  while (cp.hasNext(iter) && (childNodeCount < childNodes.size())) {
    Object element=cp.next(iter,session);
    if (this.getConverter() != null) {
      element=getConverter().convertObjectValueToDataValue(element,session,record.getMarshaller());
    }
    Object originalObject=element;
    Node nextChild=null;
    while (childNodeCount < childNodes.size()) {
      Node nextPossible=(Node)childNodes.get(childNodeCount);
      if ((nextPossible.getNodeType() == Node.ELEMENT_NODE) || (nextPossible.getNodeType() == Node.TEXT_NODE) || (nextPossible.getNodeType() == Node.CDATA_SECTION_NODE)) {
        nextChild=nextPossible;
        childNodeCount++;
        break;
      }
      childNodeCount++;
    }
    if (nextChild == null) {
      break;
    }
    if (usesXMLRoot() && (element instanceof XMLRoot)) {
      xmlRootField=new XMLField();
      wasXMLRoot=true;
      XPathFragment frag=new XPathFragment();
      if ((((XMLRoot)element)).getRootFragment().getNamespaceURI() != null) {
        frag.setNamespaceURI(((XMLRoot)element).getNamespaceURI());
      }
 else {
        frag.setXPath(((XMLRoot)element).getLocalName());
      }
      xmlRootField.setXPathFragment(frag);
      xmlRootField.setNamespaceResolver(record.getNamespaceResolver());
      element=((XMLRoot)element).getObject();
    }
    if (element instanceof String) {
      if (wasXMLRoot) {
        if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
          String prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
          if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
            xmlRootField.getXPathFragment().setGeneratedPrefix(true);
            prefix=record.getNamespaceResolver().generatePrefix();
          }
          xmlRootField.getXPathFragment().setXPath(prefix + ""String_Node_Str"" + ((XMLRoot)originalObject).getLocalName());
        }
      }
      if (xmlRootField != null) {
        XPathEngine.getInstance().create(xmlRootField,root,element);
      }
 else {
        Text textNode=doc.createTextNode((String)element);
        root.replaceChild(textNode,nextChild);
      }
    }
 else     if (element instanceof org.w3c.dom.Node) {
      Node importedCopy=doc.importNode((Node)element,true);
      root.replaceChild(importedCopy,nextChild);
    }
 else {
      XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(element.getClass());
      if (wasXMLRoot) {
        if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
          String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
          if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
            prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
          }
          if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
            xmlRootField.getXPathFragment().setGeneratedPrefix(true);
            prefix=record.getNamespaceResolver().generatePrefix();
          }
          xmlRootField.getXPathFragment().setXPath(prefix + ""String_Node_Str"" + ((XMLRoot)originalObject).getLocalName());
        }
      }
      DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(element,session,referenceDescriptor,row,xmlRootField,element,wasXMLRoot);
      if (nestedRecord != null) {
        if (nestedRecord.getDOM() != nextChild) {
          root.replaceChild(nestedRecord.getDOM(),nextChild);
        }
      }
    }
  }
  if (childNodeCount < childNodes.size()) {
    for (int i=childNodeCount; i < childNodes.size(); i++) {
      Node child=(Node)childNodes.get(i);
      if ((child.getNodeType() == Node.ELEMENT_NODE) || (child.getNodeType() == Node.TEXT_NODE) || (child.getNodeType() == Node.CDATA_SECTION_NODE)) {
        root.removeChild(child);
      }
    }
  }
  if (cp.hasNext(iter)) {
    while (cp.hasNext(iter)) {
      Object element=cp.next(iter,session);
      writeSingleValue(element,object,record,session);
    }
  }
}"
68659,"private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList children=root.getChildNodes();
  ContainerPolicy cp=getContainerPolicy();
  Object container=cp.containerInstance();
  int length=children.getLength();
  for (int i=0; i < length; i++) {
    org.w3c.dom.Node next=children.item(i);
    if (isUnmappedContent(next)) {
      if ((next.getNodeType() == Node.TEXT_NODE) && this.isMixedContent()) {
        if (next.getNodeValue().trim().length() > 0) {
          cp.addInto(next.getNodeValue(),container,session);
        }
      }
 else       if (next.getNodeType() == Node.ELEMENT_NODE) {
        ClassDescriptor referenceDescriptor=null;
        DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
        if (!useXMLRoot) {
          referenceDescriptor=getDescriptor(nestedRecord,session,null);
          if ((referenceDescriptor != null) && (keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            Object objectValue=builder.buildObject(query,nestedRecord,joinManager);
            cp.addInto(objectValue,container,session);
          }
 else {
            if ((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
              XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
              cp.addInto(next,container,session);
            }
          }
        }
 else {
          String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          QName schemaTypeQName=null;
          XPathFragment frag=new XPathFragment();
          if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
            frag.setXPath(schemaType);
            if (frag.hasNamespace()) {
              String prefix=frag.getPrefix();
              XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
              String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
              frag.setNamespaceURI(url);
              schemaTypeQName=new QName(url,frag.getLocalName());
            }
            XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
            referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
          if (referenceDescriptor == null) {
            try {
              QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
              referenceDescriptor=getDescriptor(nestedRecord,session,qname);
            }
 catch (            XMLMarshalException e) {
              referenceDescriptor=null;
            }
          }
          if ((referenceDescriptor != null) && (getKeepAsElementPolicy() != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            Object objectValue=builder.buildObject(query,nestedRecord,joinManager);
            Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
            cp.addInto(updated,container,session);
          }
 else           if ((referenceDescriptor == null) && (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
            XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
            cp.addInto(next,container,session);
          }
 else {
            Object value=null;
            Node textchild=((Element)next).getFirstChild();
            if ((textchild != null) && (textchild.getNodeType() == Node.TEXT_NODE)) {
              value=((Text)textchild).getNodeValue();
            }
            if ((value != null) && !value.equals(""String_Node_Str"")) {
              if (schemaTypeQName != null) {
                Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaTypeQName);
                if (theClass != null) {
                  value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,schemaTypeQName);
                }
              }
              XMLRoot rootValue=new XMLRoot();
              rootValue.setLocalName(next.getLocalName());
              rootValue.setSchemaType(schemaTypeQName);
              rootValue.setNamespaceURI(next.getNamespaceURI());
              rootValue.setObject(value);
              cp.addInto(rootValue,container,session);
            }
          }
        }
      }
    }
  }
  return container;
}","private Object buildObjectValuesFromDOMRecord(DOMRecord record,AbstractSession session,ObjectBuildingQuery query,JoinedAttributeManager joinManager){
  Node root=record.getDOM();
  NodeList children=root.getChildNodes();
  ContainerPolicy cp=getContainerPolicy();
  Object container=cp.containerInstance();
  int length=children.getLength();
  for (int i=0; i < length; i++) {
    Object objectValue=null;
    org.w3c.dom.Node next=children.item(i);
    if (isUnmappedContent(next)) {
      if ((next.getNodeType() == Node.TEXT_NODE) && this.isMixedContent()) {
        if (next.getNodeValue().trim().length() > 0) {
          objectValue=next.getNodeValue();
          if (getConverter() != null) {
            objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
          }
          cp.addInto(objectValue,container,session);
        }
      }
 else       if (next.getNodeType() == Node.ELEMENT_NODE) {
        ClassDescriptor referenceDescriptor=null;
        DOMRecord nestedRecord=(DOMRecord)record.buildNestedRow((Element)next);
        if (!useXMLRoot) {
          referenceDescriptor=getDescriptor(nestedRecord,session,null);
          if ((referenceDescriptor != null) && (keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            objectValue=builder.buildObject(query,nestedRecord,joinManager);
            if (getConverter() != null) {
              objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
            }
            cp.addInto(objectValue,container,session);
          }
 else {
            if ((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
              XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
              objectValue=next;
              if (getConverter() != null) {
                objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
              }
              cp.addInto(objectValue,container,session);
            }
          }
        }
 else {
          String schemaType=((Element)next).getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          QName schemaTypeQName=null;
          XPathFragment frag=new XPathFragment();
          if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
            frag.setXPath(schemaType);
            if (frag.hasNamespace()) {
              String prefix=frag.getPrefix();
              XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
              String url=xmlPlatform.resolveNamespacePrefix(next,prefix);
              frag.setNamespaceURI(url);
              schemaTypeQName=new QName(url,frag.getLocalName());
            }
            XMLContext xmlContext=nestedRecord.getUnmarshaller().getXMLContext();
            referenceDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
          if (referenceDescriptor == null) {
            try {
              QName qname=new QName(nestedRecord.getNamespaceURI(),nestedRecord.getLocalName());
              referenceDescriptor=getDescriptor(nestedRecord,session,qname);
            }
 catch (            XMLMarshalException e) {
              referenceDescriptor=null;
            }
          }
          if ((referenceDescriptor != null) && (getKeepAsElementPolicy() != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            ObjectBuilder builder=referenceDescriptor.getObjectBuilder();
            objectValue=builder.buildObject(query,nestedRecord,joinManager);
            Object updated=((XMLDescriptor)referenceDescriptor).wrapObjectInXMLRoot(objectValue,next.getNamespaceURI(),next.getLocalName(),next.getPrefix(),false);
            if (getConverter() != null) {
              updated=getConverter().convertDataValueToObjectValue(updated,session,record.getUnmarshaller());
            }
            cp.addInto(updated,container,session);
          }
 else           if ((referenceDescriptor == null) && (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) {
            XMLPlatformFactory.getInstance().getXMLPlatform().namespaceQualifyFragment((Element)next);
            objectValue=next;
            if (getConverter() != null) {
              objectValue=getConverter().convertDataValueToObjectValue(objectValue,session,record.getUnmarshaller());
            }
            cp.addInto(objectValue,container,session);
          }
 else {
            Object value=null;
            Node textchild=((Element)next).getFirstChild();
            if ((textchild != null) && (textchild.getNodeType() == Node.TEXT_NODE)) {
              value=((Text)textchild).getNodeValue();
            }
            if ((value != null) && !value.equals(""String_Node_Str"")) {
              if (schemaTypeQName != null) {
                Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaTypeQName);
                if (theClass != null) {
                  value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,schemaTypeQName);
                }
              }
              if (getConverter() != null) {
                value=getConverter().convertDataValueToObjectValue(value,session,record.getUnmarshaller());
              }
              XMLRoot rootValue=new XMLRoot();
              rootValue.setLocalName(next.getLocalName());
              rootValue.setSchemaType(schemaTypeQName);
              rootValue.setNamespaceURI(next.getNamespaceURI());
              rootValue.setObject(value);
              cp.addInto(rootValue,container,session);
            }
          }
        }
      }
    }
  }
  return container;
}"
68660,"public void initialize(AbstractSession session) throws DescriptorException {
  if (getField() != null) {
    setField(getDescriptor().buildField(getField()));
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  if (getField() != null) {
    setField(getDescriptor().buildField(getField()));
  }
  if (valueConverter != null) {
    valueConverter.initialize(this,session);
  }
}"
68661,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if (fieldValue == null) {
    return cp.containerInstance();
  }
  Vector fieldValues=this.getDescriptor().buildDirectValuesFromFieldValue(fieldValue);
  if (fieldValues == null) {
    return cp.containerInstance();
  }
  Object result=cp.containerInstance(fieldValues.size());
  for (Enumeration stream=fieldValues.elements(); stream.hasMoreElements(); ) {
    Object element=stream.nextElement();
    XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
    if (element instanceof String) {
      if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)element);
      }
 else       if (!this.isSwaRef()) {
        byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(element);
        fieldValue=bytes;
      }
    }
 else {
      XMLRecord record=(XMLRecord)element;
      if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
        String xpath=""String_Node_Str"";
        NamespaceResolver resolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
        String prefix=null;
        if (resolver != null) {
          prefix=resolver.resolveNamespaceURI(XMLConstants.XOP_URL);
          if (prefix == null) {
            prefix=resolver.generatePrefix();
            resolver.put(prefix,XMLConstants.XOP_URL);
          }
        }
 else {
          prefix=XMLConstants.XOP_PREFIX;
          resolver=new NamespaceResolver();
          resolver.put(prefix,XMLConstants.XOP_URL);
        }
        xpath=prefix + ""String_Node_Str"" + INCLUDE+ ""String_Node_Str"";
        XMLField field=new XMLField(xpath);
        field.setNamespaceResolver(resolver);
        String includeValue=(String)record.get(field);
        if (element != null) {
          if ((getCollectionContentType() == ClassConstants.ABYTE) || (getCollectionContentType() == ClassConstants.APBYTE)) {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
          }
 else {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
          }
        }
      }
 else       if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
        String refValue=(String)record.get(""String_Node_Str"");
        if (refValue != null) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
        }
      }
 else {
        fieldValue=record.get(""String_Node_Str"");
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
    Object attributeValue=fieldValue;
    if (getValueConverter() != null) {
      if (getValueConverter() instanceof XMLConverter) {
        attributeValue=((XMLConverter)getValueConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
      }
 else {
        attributeValue=getValueConverter().convertDataValueToObjectValue(fieldValue,executionSession);
      }
    }
    if (collectionContentType != null) {
      attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,collectionContentType,executionSession);
    }
    cp.addInto(attributeValue,result,query.getSession());
  }
  return result;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  ContainerPolicy cp=this.getContainerPolicy();
  Object fieldValue=row.getValues(this.getField());
  if (fieldValue == null) {
    return cp.containerInstance();
  }
  Vector fieldValues=this.getDescriptor().buildDirectValuesFromFieldValue(fieldValue);
  if (fieldValues == null) {
    return cp.containerInstance();
  }
  Object result=cp.containerInstance(fieldValues.size());
  for (Enumeration stream=fieldValues.elements(); stream.hasMoreElements(); ) {
    Object element=stream.nextElement();
    XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
    if (element instanceof String) {
      if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)element);
      }
 else       if (!this.isSwaRef()) {
        byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(element);
        fieldValue=bytes;
      }
    }
 else {
      XMLRecord record=(XMLRecord)element;
      if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
        String xpath=""String_Node_Str"";
        String prefix=null;
        NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
        if (descriptorResolver != null) {
          prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (prefix == null) {
          prefix=XMLConstants.XOP_PREFIX;
        }
        NamespaceResolver tempResolver=new NamespaceResolver();
        tempResolver.put(prefix,XMLConstants.XOP_URL);
        xpath=prefix + ""String_Node_Str"" + INCLUDE+ ""String_Node_Str"";
        XMLField field=new XMLField(xpath);
        field.setNamespaceResolver(tempResolver);
        String includeValue=(String)record.get(field);
        if (element != null) {
          if ((getCollectionContentType() == ClassConstants.ABYTE) || (getCollectionContentType() == ClassConstants.APBYTE)) {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
          }
 else {
            fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
          }
        }
      }
 else       if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
        String refValue=(String)record.get(""String_Node_Str"");
        if (refValue != null) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
        }
      }
 else {
        fieldValue=record.get(""String_Node_Str"");
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
    Object attributeValue=fieldValue;
    if (getValueConverter() != null) {
      if (getValueConverter() instanceof XMLConverter) {
        attributeValue=((XMLConverter)getValueConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
      }
 else {
        attributeValue=getValueConverter().convertDataValueToObjectValue(fieldValue,executionSession);
      }
    }
    if (collectionContentType != null) {
      attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,collectionContentType,executionSession);
    }
    cp.addInto(attributeValue,result,query.getSession());
  }
  return result;
}"
68662,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  Object value=row.get(this.field);
  if (value == null) {
    return value;
  }
  Object fieldValue=null;
  XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
  if (value instanceof String) {
    if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
      }
 else {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
      }
    }
 else     if (!this.isSwaRef()) {
      byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      fieldValue=bytes;
    }
  }
 else {
    XMLRecord record=(XMLRecord)value;
    if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
      String xpath=""String_Node_Str"";
      NamespaceResolver resolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (resolver == null) {
        resolver=new NamespaceResolver();
        ((XMLDescriptor)getDescriptor()).setNamespaceResolver(resolver);
      }
      String prefix=resolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      if (prefix == null) {
        prefix=resolver.generatePrefix();
        resolver.put(prefix,XMLConstants.XOP_URL);
      }
      xpath=prefix + include;
      XMLField field=new XMLField(xpath);
      field.setNamespaceResolver(resolver);
      String includeValue=(String)record.get(field);
      if (value != null) {
        if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
        }
 else {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
        }
      }
    }
 else     if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
      String refValue=(String)record.get(""String_Node_Str"");
      if (refValue != null) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
      }
    }
 else {
      fieldValue=record.get(""String_Node_Str"");
      fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
    }
  }
  Object attributeValue=fieldValue;
  if (getConverter() != null) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(fieldValue,executionSession);
    }
  }
  attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,getAttributeClassification(),executionSession);
  return attributeValue;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,AbstractSession executionSession){
  Object value=row.get(this.field);
  if (value == null) {
    return value;
  }
  Object fieldValue=null;
  XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
  if (value instanceof String) {
    if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
      }
 else {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
      }
    }
 else     if (!this.isSwaRef()) {
      byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      fieldValue=bytes;
    }
  }
 else {
    XMLRecord record=(XMLRecord)value;
    if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
      String xpath=""String_Node_Str"";
      String prefix=null;
      NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (descriptorResolver != null) {
        prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
      }
      NamespaceResolver tempResolver=new NamespaceResolver();
      tempResolver.put(prefix,XMLConstants.XOP_URL);
      xpath=prefix + include;
      XMLField field=new XMLField(xpath);
      field.setNamespaceResolver(tempResolver);
      String includeValue=(String)record.get(field);
      if (value != null) {
        if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
        }
 else {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
        }
      }
    }
 else     if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
      String refValue=(String)record.get(""String_Node_Str"");
      if (refValue != null) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
      }
    }
 else {
      fieldValue=record.get(""String_Node_Str"");
      fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
    }
  }
  Object attributeValue=fieldValue;
  if (getConverter() != null) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(fieldValue,executionSession);
    }
  }
  attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,getAttributeClassification(),executionSession);
  return attributeValue;
}"
68663,"public DateAndTimeTestCases(String name){
  super(name);
}","public DateAndTimeTestCases(String name){
  super(name);
  Calendar cal=Calendar.getInstance();
  cal.clear();
  cal.set(1975,1,21);
  CONTROL_DATE=cal.getTimeInMillis();
  cal.clear();
  cal.set(1975,1,21,7,47,15);
  this.CONTROL_DATE_TIME_0MS=cal.getTimeInMillis();
  this.CONTROL_DATE_TIME_100MS=cal.getTimeInMillis() + 100;
  this.CONTROL_DATE_TIME_10MS=cal.getTimeInMillis() + 10;
  this.CONTROL_DATE_TIME_1MS=cal.getTimeInMillis() + 1;
  cal.clear();
  cal.set(1970,0,1,7,47,15);
  this.CONTROL_TIME_0MS=cal.getTimeInMillis();
  this.CONTROL_TIME_100MS=cal.getTimeInMillis() + 100;
  this.CONTROL_TIME_10MS=cal.getTimeInMillis() + 10;
  this.CONTROL_TIME_1MS=cal.getTimeInMillis() + 1;
  cal.clear();
  cal.set(Calendar.DAY_OF_MONTH,21);
  this.CONTROL_G_DAY=cal.getTimeInMillis();
  cal.clear();
  cal.set(Calendar.MONTH,1);
  this.CONTROL_G_MONTH=cal.getTimeInMillis();
  cal.clear();
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DATE,21);
  this.CONTROL_G_MONTH_DAY=cal.getTimeInMillis();
  cal.clear();
  cal.set(Calendar.YEAR,1975);
  this.CONTROL_G_YEAR=cal.getTimeInMillis();
  cal.clear();
  cal.set(Calendar.YEAR,1975);
  cal.set(Calendar.MONTH,1);
  this.CONTROL_G_YEAR_MONTH=cal.getTimeInMillis();
}"
68664,"private QName getSchemaType(XMLField xmlField,Object value){
  QName schemaType=null;
  if (xmlField.isTypedTextField()) {
    schemaType=xmlField.getXMLType(value.getClass());
  }
 else   if (xmlField.isUnionField()) {
    return getSchemaTypeForUnion((XMLUnionField)xmlField,value);
  }
 else   if (xmlField.getSchemaType() != null) {
    schemaType=xmlField.getSchemaType();
  }
  return schemaType;
}","private QName getSchemaType(XMLField xmlField,Object value,AbstractSession session){
  QName schemaType=null;
  if (xmlField.isTypedTextField()) {
    schemaType=xmlField.getXMLType(value.getClass());
  }
 else   if (xmlField.isUnionField()) {
    return getSchemaTypeForUnion((XMLUnionField)xmlField,value,session);
  }
 else   if (xmlField.getSchemaType() != null) {
    schemaType=xmlField.getSchemaType();
  }
  return schemaType;
}"
68665,"private QName getSchemaTypeForUnion(XMLUnionField xmlField,Object value){
  ArrayList schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)(xmlField).getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        javaClass=xmlField.getJavaClass(nextQName);
        value=XMLConversionManager.getDefaultXMLManager().convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}","private QName getSchemaTypeForUnion(XMLUnionField xmlField,Object value,AbstractSession session){
  ArrayList schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)(xmlField).getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        javaClass=xmlField.getJavaClass(nextQName);
        value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}"
68666,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  Object objectValue=directMapping.getAttributeValueFromObject(object);
  Object fieldValue=directMapping.getFieldValue(objectValue,session);
  if ((null == fieldValue) || (null == namespaceResolver)) {
    return false;
  }
  XMLField xmlField=(XMLField)directMapping.getField();
  QName schemaType=getSchemaType(xmlField,fieldValue);
  if (null == schemaType) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  String typeQName=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL) + ""String_Node_Str"";
  String schemaTypePrefix=namespaceResolver.resolveNamespaceURI(schemaType.getNamespaceURI());
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.getLocalPart(),typeQName,schemaTypePrefix + ':' + schemaType.getLocalPart());
  marshalRecord.closeStartGroupingElements(groupingFragment);
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  Object objectValue=directMapping.getAttributeValueFromObject(object);
  Object fieldValue=directMapping.getFieldValue(objectValue,session);
  if ((null == fieldValue) || (null == namespaceResolver)) {
    return false;
  }
  XMLField xmlField=(XMLField)directMapping.getField();
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  if (null == schemaType) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  String typeQName=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL) + ""String_Node_Str"";
  String schemaTypePrefix=namespaceResolver.resolveNamespaceURI(schemaType.getNamespaceURI());
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.getLocalPart(),typeQName,schemaTypePrefix + ':' + schemaType.getLocalPart());
  marshalRecord.closeStartGroupingElements(groupingFragment);
  return true;
}"
68667,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
    value=xmlConversionManager.convertObject(value,ClassConstants.STRING,qname);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    if (qname != null) {
      String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
      if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,qname.getNamespaceURI());
      }
      String typeValue=prefix + ""String_Node_Str"" + qname.getLocalPart();
      addTypeAttribute(marshalRecord,typeValue);
    }
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING,qname);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    if (qname != null) {
      String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
      if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,qname.getNamespaceURI());
      }
      String typeValue=prefix + ""String_Node_Str"" + qname.getLocalPart();
      addTypeAttribute(marshalRecord,typeValue);
    }
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
68668,"private void endElementProcessText(UnmarshalRecord unmarshalRecord,Object collection,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value) && xmlAnyCollectionMapping.isMixedContent()) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
      Class theClass=(Class)xmlConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=xmlConversionManager.convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,value);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setObject(value);
      unmarshalRecord.addAttributeValue(this,xmlRoot);
    }
  }
}","private void endElementProcessText(UnmarshalRecord unmarshalRecord,Object collection,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value) && xmlAnyCollectionMapping.isMixedContent()) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,value);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setObject(value);
      unmarshalRecord.addAttributeValue(this,xmlRoot);
    }
  }
}"
68669,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
68670,"/** 
 * Wraps the XmlAdapter unmarshal method.
 */
public Object convertDataValueToObjectValue(Object dataValue,Session session,XMLUnmarshaller unmarshaller){
  try {
    XmlAdapter adapter=this.xmlAdapter;
    if (unmarshaller != null) {
      HashMap adapters=(HashMap)unmarshaller.getProperty(JAXBUnmarshaller.XML_JAVATYPE_ADAPTERS);
      if (adapters != null) {
        XmlAdapter runtimeAdapter=(XmlAdapter)adapters.get(this.xmlAdapterClass);
        if (runtimeAdapter != null) {
          adapter=runtimeAdapter;
        }
      }
    }
    Object toConvert=dataValue;
    if ((dataValue != null) && !(dataValue.getClass() == this.valueType)) {
      if (this.mapping instanceof XMLBinaryDataMapping) {
        toConvert=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(dataValue,valueType);
      }
 else {
        if (getSchemaType() != null) {
          toConvert=XMLConversionManager.getDefaultXMLManager().convertObject(dataValue,valueType,getSchemaType());
        }
 else {
          toConvert=XMLConversionManager.getDefaultXMLManager().convertObject(dataValue,valueType);
        }
      }
    }
    return adapter.unmarshal(toConvert);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(dataValue,boundType);
  }
}","/** 
 * Wraps the XmlAdapter unmarshal method.
 */
public Object convertDataValueToObjectValue(Object dataValue,Session session,XMLUnmarshaller unmarshaller){
  try {
    XmlAdapter adapter=this.xmlAdapter;
    if (unmarshaller != null) {
      HashMap adapters=(HashMap)unmarshaller.getProperty(JAXBUnmarshaller.XML_JAVATYPE_ADAPTERS);
      if (adapters != null) {
        XmlAdapter runtimeAdapter=(XmlAdapter)adapters.get(this.xmlAdapterClass);
        if (runtimeAdapter != null) {
          adapter=runtimeAdapter;
        }
      }
    }
    Object toConvert=dataValue;
    if ((dataValue != null) && !(dataValue.getClass() == this.valueType)) {
      if (this.mapping instanceof XMLBinaryDataMapping) {
        toConvert=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(dataValue,valueType,(AbstractSession)session);
      }
 else {
        if (getSchemaType() != null) {
          toConvert=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(dataValue,valueType,getSchemaType());
        }
 else {
          toConvert=session.getDatasourcePlatform().getConversionManager().convertObject(dataValue,valueType);
        }
      }
    }
    return adapter.unmarshal(toConvert);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(dataValue,boundType);
  }
}"
68671,"public void testSimpleTypeWithUnionTypes(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(3,types.size());
  for (int i=0; i < types.size(); i++) {
    Type type=(Type)types.get(0);
    if (type.getName().equals(""String_Node_Str"")) {
      assertEquals(type.getName(),""String_Node_Str"");
      assertFalse(type.isAbstract());
      assertEquals(ClassConstants.BIGDECIMAL,type.getInstanceClass());
      assertEquals(0,type.getBaseTypes().size());
      assertTrue(type.isDataType());
      assertEquals(type.getURI(),""String_Node_Str"");
    }
  }
  for (int i=0; i < types.size(); i++) {
    Type type=(Type)types.get(0);
    if (type.getName().equals(""String_Node_Str"")) {
      assertEquals(type.getName(),""String_Node_Str"");
      assertFalse(type.isAbstract());
      assertEquals(ClassConstants.BIGDECIMAL,type.getInstanceClass());
      assertEquals(1,type.getBaseTypes().size());
      assertTrue(type.isDataType());
      assertEquals(type.getURI(),""String_Node_Str"");
    }
  }
  for (int i=0; i < types.size(); i++) {
    Type type=(Type)types.get(0);
    if (type.getName().equals(""String_Node_Str"")) {
      assertEquals(type.getName(),""String_Node_Str"");
      assertFalse(type.isAbstract());
      assertEquals(1,type.getDeclaredProperties().size());
      assertEquals(type.getURI(),""String_Node_Str"");
      SDOProperty prop=(SDOProperty)type.getDeclaredProperties().get(0);
      assertEquals(""String_Node_Str"",prop.getName());
      assertEquals(""String_Node_Str"",prop.getType().getName());
      assertEquals(BigInteger.class,prop.getType().getInstanceClass());
    }
  }
}","public void testSimpleTypeWithUnionTypes(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(3,types.size());
  for (int i=0; i < types.size(); i++) {
    Type type=(Type)types.get(i);
    if (type.getName().equals(""String_Node_Str"")) {
      assertEquals(type.getName(),""String_Node_Str"");
      assertFalse(type.isAbstract());
      assertEquals(ClassConstants.BIGINTEGER,type.getInstanceClass());
      assertEquals(0,type.getBaseTypes().size());
      assertTrue(type.isDataType());
      assertEquals(type.getURI(),""String_Node_Str"");
    }
  }
  for (int i=0; i < types.size(); i++) {
    Type type=(Type)types.get(i);
    if (type.getName().equals(""String_Node_Str"")) {
      assertEquals(type.getName(),""String_Node_Str"");
      assertFalse(type.isAbstract());
      assertEquals(ClassConstants.BIGINTEGER,type.getInstanceClass());
      assertEquals(1,type.getBaseTypes().size());
      assertTrue(type.isDataType());
      assertEquals(type.getURI(),""String_Node_Str"");
    }
  }
  for (int i=0; i < types.size(); i++) {
    Type type=(Type)types.get(i);
    if (type.getName().equals(""String_Node_Str"")) {
      assertEquals(type.getName(),""String_Node_Str"");
      assertFalse(type.isAbstract());
      assertEquals(1,type.getDeclaredProperties().size());
      assertEquals(type.getURI(),""String_Node_Str"");
      SDOProperty prop=(SDOProperty)type.getDeclaredProperties().get(0);
      assertEquals(""String_Node_Str"",prop.getName());
      assertEquals(""String_Node_Str"",prop.getType().getName());
      assertEquals(ClassConstants.BIGINTEGER,prop.getType().getInstanceClass());
    }
  }
}"
68672,"protected void initializeTabs(){
  addTab(buildGeneralPropertiesPage(),buildGeneralPropertiesPageTitle());
  addTab(buildOptionsPropertiesPage(),buildOptionsPropertiesPageTitle());
  addTab(buildLoginPropertiesPage(),buildLoginPropertiesPageTitle());
  addTab(buildLoggingPropertiesPage(),buildLoggingPropertiesPageTitle());
  addTab(buildConnectionPolicyVisibleHolder(),5,buildConnectionPolicyPropertiesPage(),buildConnectionPolicyPropertiesPageTitle());
}","protected void initializeTabs(){
  addTab(buildGeneralPropertiesPage(),buildGeneralPropertiesPageTitle());
  addTab(buildOptionsPropertiesPage(),buildOptionsPropertiesPageTitle());
  addTab(buildLoginPropertiesPage(),buildLoginPropertiesPageTitle());
  addTab(buildLoggingPropertiesPage(),buildLoggingPropertiesPageTitle());
  addTab(buildClusteringPropertiesPage(),buildClusteringPropertiesPageTitle());
  addTab(buildConnectionPolicyVisibleHolder(),5,buildConnectionPolicyPropertiesPage(),buildConnectionPolicyPropertiesPageTitle());
}"
68673,"protected void initializeTabs(){
  addTab(buildGeneralPropertiesPage(),buildGeneralPropertiesPageTitle());
  addTab(buildOptionsPropertiesPage(),buildOptionsPropertiesPageTitle());
  addTab(buildLoginPropertiesPage(),buildLoginPropertiesPageTitle());
  addTab(buildLoggingPropertiesPage(),buildLoggingPropertiesPageTitle());
  addTab(buildConnectionPolicyVisibleHolder(),5,buildConnectionPolicyPropertiesPage(),buildConnectionPolicyPropertiesPageTitle());
}","protected void initializeTabs(){
  addTab(buildGeneralPropertiesPage(),buildGeneralPropertiesPageTitle());
  addTab(buildOptionsPropertiesPage(),buildOptionsPropertiesPageTitle());
  addTab(buildLoginPropertiesPage(),buildLoginPropertiesPageTitle());
  addTab(buildLoggingPropertiesPage(),buildLoggingPropertiesPageTitle());
  addTab(buildClusteringPropertiesPage(),buildClusteringPropertiesPageTitle());
  addTab(buildConnectionPolicyVisibleHolder(),5,buildConnectionPolicyPropertiesPage(),buildConnectionPolicyPropertiesPageTitle());
}"
68674,"private static Set buildCoreClassNames(){
  Set result=new HashSet(10000);
  CollectionTools.addAll(result,MWClass.nonReferenceClassNames());
  List locations=new ArrayList();
  for (int i=0; i < CORE_KEYS.length; i++) {
    locations.add(Classpath.locationFor(CORE_KEYS[i]));
  }
  Classpath cp=new Classpath(locations);
  cp.addClassNamesTo(result);
  return result;
}","private static Set buildCoreClassNames(){
  Set result=new HashSet(10000);
  CollectionTools.addAll(result,MWClass.nonReferenceClassNames());
  List locations=buildCoreClassLocations();
  Classpath cp=new Classpath(locations);
  cp.addClassNamesTo(result);
  return result;
}"
68675,"/** 
 * return the classpath with the entries converted to fully qualified files (any relative entries will be resolved relative to the project save directory)
 */
private File[] buildExternalClassRepositoryClasspath(){
  List files=new ArrayList(this.classpathEntriesSize() + CORE_KEYS.length);
  CollectionTools.addAll(files,this.fullyQualifiedClasspathFiles());
  for (int i=0; i < CORE_KEYS.length; i++) {
    files.add(new File(Classpath.locationFor(CORE_KEYS[i])));
  }
  return (File[])files.toArray(new File[files.size()]);
}","/** 
 * return the classpath with the entries converted to fully qualified files (any relative entries will be resolved relative to the project save directory)
 */
private File[] buildExternalClassRepositoryClasspath(){
  List<String> coreFiles=buildCoreClassLocations();
  List files=new ArrayList(this.classpathEntriesSize() + coreFiles.size());
  CollectionTools.addAll(files,this.fullyQualifiedClasspathFiles());
  ListIterator<String> coreFileIter=coreFiles.listIterator();
  while (coreFileIter.hasNext()) {
    files.add(new File(coreFileIter.next()));
  }
  return (File[])files.toArray(new File[files.size()]);
}"
68676,"/** 
 * INTERNAL: Called from RelationshipWeaverTestSuite which uses only annotations and no XML.
 */
public void processAnnotations(){
  for (  ClassAccessor accessor : m_project.getAllAccessors()) {
    if (!accessor.isProcessed()) {
      accessor.process();
      accessor.setIsProcessed();
    }
  }
  m_project.process();
}","/** 
 * INTERNAL: Called from RelationshipWeaverTestSuite which uses only annotations and no XML.
 */
public void processAnnotations(){
  for (  ClassAccessor accessor : m_project.getClassAccessors()) {
    if (!accessor.isProcessed()) {
      accessor.process();
      accessor.setIsProcessed();
    }
  }
  m_project.process();
}"
68677,"public void exec(String[] args) throws Exception {
  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  String copyright=""String_Node_Str"";
  Icon image=new ImageIcon(this.getClass().getResource(""String_Node_Str""));
  SplashScreen ss=new SplashScreen(new Frame(),copyright,image,5000);
  ss.start();
  JOptionPane.showMessageDialog(ss,""String_Node_Str"");
  ss.stop();
  System.exit(0);
}","public void exec(String[] args) throws Exception {
  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  Icon image=new ImageIcon(this.getClass().getResource(""String_Node_Str""));
  SplashScreen ss=new SplashScreen(new Frame(),image);
  ss.start();
  JOptionPane.showMessageDialog(ss,""String_Node_Str"");
  ss.stop();
  System.exit(0);
}"
68678,"/** 
 * Creates the widgets of this dialog.
 * @return The container with its widgets
 */
@Override protected Component buildMainPanel(){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel container=new JPanel(new GridBagLayout());
  LabelArea messageLabel=new LabelArea(resourceRepository().getString(this.messageKey),resourceRepository().getMnemonic(this.messageKey));
  messageLabel.getAccessibleContext().setAccessibleName(messageLabel.getText());
  messageLabel.setScrollable(true);
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,0,0,0);
  container.add(messageLabel,constraints);
  this.tree=new StatusTree();
  this.tree.setRowHeight(0);
  this.tree.setShowsRootHandles(false);
  this.tree.setRootVisible(false);
  this.tree.setDoubleBuffered(true);
  this.tree.setCellRenderer(new StatusTreeNodeRenderer());
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(1,0,0,0);
  JScrollPane pane=new JScrollPane(this.tree);
  pane.addComponentListener(buildComponentListener());
  container.add(pane,constraints);
  messageLabel.setLabelFor(this.tree);
  return container;
}","/** 
 * Creates the widgets of this dialog.
 * @return The container with its widgets
 */
@Override protected Component buildMainPanel(){
  GridBagConstraints constraints=new GridBagConstraints();
  JPanel container=new JPanel(new GridBagLayout());
  LabelArea messageLabel=new LabelArea(resourceRepository().getString(this.messageKey));
  messageLabel.getAccessibleContext().setAccessibleName(messageLabel.getText());
  messageLabel.setScrollable(true);
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(0,0,0,0);
  container.add(messageLabel,constraints);
  this.tree=new StatusTree();
  this.tree.setRowHeight(0);
  this.tree.setShowsRootHandles(false);
  this.tree.setRootVisible(false);
  this.tree.setDoubleBuffered(true);
  this.tree.setCellRenderer(new StatusTreeNodeRenderer());
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=1;
  constraints.weighty=1;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.insets=new Insets(1,0,0,0);
  JScrollPane pane=new JScrollPane(this.tree);
  pane.addComponentListener(buildComponentListener());
  container.add(pane,constraints);
  messageLabel.setLabelFor(this.tree);
  return container;
}"
68679,"/** 
 * Deploy a persistence session and return an EntityManagerFactory. Deployment takes a session that was partially created in the predeploy call and makes it whole. This means doing any configuration that requires the real class definitions for the entities.  In the predeploy phase we were in a stage where we were not let allowed to load the real classes. Deploy could be called several times - but only the first call does the actual deploying - additional calls allow to update session properties (in case the session is not connected). Note that there is no need to synchronize deploy method - it doesn't alter factoryCount and while deploy is executed no other method can alter the current state (predeploy call would just increment factoryCount; undeploy call would not drop factoryCount to 0). However precautions should be taken to handle concurrent calls to deploy, because those may alter the current state or connect the session.
 * @param realClassLoader The class loader that was used to load the entity classes. This loaderwill be maintained for the lifespan of the loaded classes.
 * @param additionalProperties added to predeployProperties for updateServerSession overriding existing properties.In JSE case it allows to alter properties in main (as opposed to preMain where preDeploy is called).
 * @return An EntityManagerFactory to be used by the Container to obtain EntityManagers
 */
public ServerSession deploy(ClassLoader realClassLoader,Map additionalProperties){
  if (state != STATE_PREDEPLOYED && state != STATE_DEPLOYED) {
    throw new PersistenceException(EntityManagerSetupException.cannotDeployWithoutPredeploy(persistenceUnitInfo.getPersistenceUnitName(),state));
  }
  session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
  List<StructConverter> structConverters=null;
  try {
    Map deployProperties=mergeMaps(additionalProperties,predeployProperties);
    translateOldProperties(deployProperties,session);
    if (state == STATE_PREDEPLOYED) {
synchronized (session) {
        if (state == STATE_PREDEPLOYED) {
          try {
            session.getProject().convertClassNamesToClasses(realClassLoader);
            if (!isSessionLoadedFromSessionsXML) {
              processor.setClassLoader(realClassLoader);
              processor.addEntityListeners();
              processor.addNamedQueries();
              processor.processCustomizers();
              structConverters=processor.getStructConverters();
              processor=null;
            }
            initServerSession(deployProperties);
            if (session.getIntegrityChecker().hasErrors()) {
              session.handleException(new IntegrityException(session.getIntegrityChecker()));
            }
            session.getDatasourcePlatform().getConversionManager().setLoader(realClassLoader);
            state=STATE_DEPLOYED;
          }
 catch (          RuntimeException ex) {
            state=STATE_DEPLOY_FAILED;
            throw new PersistenceException(EntityManagerSetupException.deployFailed(persistenceUnitInfo.getPersistenceUnitName(),ex));
          }
        }
      }
    }
    if (!session.isConnected()) {
synchronized (session) {
        if (!session.isConnected()) {
          session.setProperties(deployProperties);
          updateServerSession(deployProperties,realClassLoader);
          if (isValidationOnly(deployProperties,false)) {
            session.initializeDescriptors();
          }
 else {
            if (isSessionLoadedFromSessionsXML) {
              if (!session.isConnected()) {
                session.login();
              }
            }
 else {
              login(session,deployProperties);
            }
            if (!isSessionLoadedFromSessionsXML) {
              addStructConverters(session,structConverters);
            }
            generateDDLFiles(session,deployProperties,!isInContainerMode);
          }
        }
      }
      List queries=session.getEjbqlPlaceHolderQueries();
      for (Iterator iterator=queries.iterator(); iterator.hasNext(); ) {
        EJBQLPlaceHolderQuery existingQuery=(EJBQLPlaceHolderQuery)iterator.next();
        DatabaseQuery databaseQuery=existingQuery.processEjbQLQuery(session);
        session.addQuery(databaseQuery.getName(),databaseQuery);
      }
      queries.clear();
    }
    return session;
  }
 catch (  IllegalArgumentException illegalArgumentException) {
    throw new javax.persistence.PersistenceException(illegalArgumentException);
  }
catch (  org.eclipse.persistence.exceptions.ValidationException exception) {
    throw new javax.persistence.PersistenceException(exception);
  }
 finally {
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
  }
}","/** 
 * Deploy a persistence session and return an EntityManagerFactory. Deployment takes a session that was partially created in the predeploy call and makes it whole. This means doing any configuration that requires the real class definitions for the entities.  In the predeploy phase we were in a stage where we were not let allowed to load the real classes. Deploy could be called several times - but only the first call does the actual deploying - additional calls allow to update session properties (in case the session is not connected). Note that there is no need to synchronize deploy method - it doesn't alter factoryCount and while deploy is executed no other method can alter the current state (predeploy call would just increment factoryCount; undeploy call would not drop factoryCount to 0). However precautions should be taken to handle concurrent calls to deploy, because those may alter the current state or connect the session.
 * @param realClassLoader The class loader that was used to load the entity classes. This loaderwill be maintained for the lifespan of the loaded classes.
 * @param additionalProperties added to predeployProperties for updateServerSession overriding existing properties.In JSE case it allows to alter properties in main (as opposed to preMain where preDeploy is called).
 * @return An EntityManagerFactory to be used by the Container to obtain EntityManagers
 */
public ServerSession deploy(ClassLoader realClassLoader,Map additionalProperties){
  if (state != STATE_PREDEPLOYED && state != STATE_DEPLOYED) {
    throw new PersistenceException(EntityManagerSetupException.cannotDeployWithoutPredeploy(persistenceUnitInfo.getPersistenceUnitName(),state));
  }
  session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
  List<StructConverter> structConverters=null;
  try {
    Map deployProperties=mergeMaps(additionalProperties,predeployProperties);
    translateOldProperties(deployProperties,session);
    if (state == STATE_PREDEPLOYED) {
synchronized (session) {
        if (state == STATE_PREDEPLOYED) {
          try {
            session.getProject().convertClassNamesToClasses(realClassLoader);
            if (!isSessionLoadedFromSessionsXML) {
              processor.setClassLoader(realClassLoader);
              processor.addEntityListeners();
              processor.addNamedQueries();
              processor.processCustomizers();
              structConverters=processor.getStructConverters();
              processor=null;
            }
            initServerSession(deployProperties);
            if (session.getIntegrityChecker().hasErrors()) {
              session.handleException(new IntegrityException(session.getIntegrityChecker()));
            }
            session.getDatasourcePlatform().getConversionManager().setLoader(realClassLoader);
            state=STATE_DEPLOYED;
          }
 catch (          RuntimeException ex) {
            state=STATE_DEPLOY_FAILED;
            throw new PersistenceException(EntityManagerSetupException.deployFailed(persistenceUnitInfo.getPersistenceUnitName(),ex));
          }
        }
      }
    }
    if (!session.isConnected()) {
synchronized (session) {
        if (!session.isConnected()) {
          session.setProperties(deployProperties);
          updateServerSession(deployProperties,realClassLoader);
          if (isValidationOnly(deployProperties,false)) {
            session.initializeDescriptors();
          }
 else {
            if (isSessionLoadedFromSessionsXML) {
              if (!session.isConnected()) {
                session.login();
              }
            }
 else {
              login(session,deployProperties);
            }
            if (!isSessionLoadedFromSessionsXML) {
              addStructConverters(session,structConverters);
            }
            generateDDL(session,deployProperties);
          }
        }
      }
      List queries=session.getEjbqlPlaceHolderQueries();
      for (Iterator iterator=queries.iterator(); iterator.hasNext(); ) {
        EJBQLPlaceHolderQuery existingQuery=(EJBQLPlaceHolderQuery)iterator.next();
        DatabaseQuery databaseQuery=existingQuery.processEjbQLQuery(session);
        session.addQuery(databaseQuery.getName(),databaseQuery);
      }
      queries.clear();
    }
    return session;
  }
 catch (  IllegalArgumentException illegalArgumentException) {
    throw new javax.persistence.PersistenceException(illegalArgumentException);
  }
catch (  org.eclipse.persistence.exceptions.ValidationException exception) {
    throw new javax.persistence.PersistenceException(exception);
  }
 finally {
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
  }
}"
68680,"/** 
 * Define the list of DataObjects as Types. The Types are available through TypeHelper and DataGraph getType() methods.
 * @param types a List of DataObjects representing the Types.
 * @return the defined Types.
 * @throws IllegalArgumentException if the Types could not be defined.
 */
public List define(List types){
  List definedTypes=new ArrayList();
  for (int i=0; i < types.size(); i++) {
    Type definedType=define((DataObject)types.get(i));
    definedTypes.add(definedType);
  }
  return definedTypes;
}","/** 
 * Define the list of DataObjects as Types. The Types are available through TypeHelper and DataGraph getType() methods.
 * @param types a List of DataObjects representing the Types.
 * @return the defined Types.
 * @throws IllegalArgumentException if the Types could not be defined.
 */
public synchronized List define(List types){
  List definedTypes=new ArrayList();
  for (int i=0; i < types.size(); i++) {
    Type definedType=define((DataObject)types.get(i));
    definedTypes.add(definedType);
  }
  return definedTypes;
}"
68681,"/** 
 * Define XML Schema as Types. The Types are available through TypeHelper and DataGraph getType() methods.
 * @param xsdInputStream input stream to an XML Schema.
 * @param schemaLocation the URI of the location of the schema, usedfor processing relative imports and includes.  May be null if not used.
 * @return the defined Types.
 * @throws IllegalArgumentException if the Types could not be defined.
 */
public List define(InputStream xsdInputStream,String schemaLocation){
  InputStreamReader xsdReader=new InputStreamReader(xsdInputStream);
  return define(xsdReader,schemaLocation);
}","/** 
 * Define XML Schema as Types. The Types are available through TypeHelper and DataGraph getType() methods.
 * @param xsdInputStream input stream to an XML Schema.
 * @param schemaLocation the URI of the location of the schema, usedfor processing relative imports and includes.  May be null if not used.
 * @return the defined Types.
 * @throws IllegalArgumentException if the Types could not be defined.
 */
public synchronized List define(InputStream xsdInputStream,String schemaLocation){
  InputStreamReader xsdReader=new InputStreamReader(xsdInputStream);
  return define(xsdReader,schemaLocation);
}"
68682,"/** 
 * INTERNAL: Process a cache metadata. 
 */
protected void processCache(){
  if (m_cache != null || isAnnotationPresent(Cache.class)) {
    if (getDescriptor().isEmbeddable()) {
      throw ValidationException.cacheNotSupportedWithEmbeddable(getJavaClass());
    }
 else     if (getDescriptor().isInheritanceSubclass()) {
      getLogger().logWarningMessage(MetadataLogger.IGNORE_INHERITANCE_SUBCLASS_CACHE,getJavaClass());
    }
 else     if (getDescriptor().isCacheSet()) {
      getLogger().logWarningMessage(MetadataLogger.IGNORE_MAPPED_SUPERCLASS_CACHE,getDescriptor().getJavaClass(),getJavaClass());
    }
 else {
      if (m_cache == null) {
        Cache cache=getAnnotation(Cache.class);
        new CacheMetadata(cache).process(getDescriptor(),getJavaClass());
      }
 else {
        m_cache.process(getDescriptor(),getJavaClass());
      }
    }
  }
}","/** 
 * INTERNAL: Process a cache metadata. 
 */
protected void processCache(){
  if (m_cache != null || isAnnotationPresent(Cache.class)) {
    if (getDescriptor().isEmbeddable()) {
      throw ValidationException.cacheNotSupportedWithEmbeddable(getJavaClass());
    }
 else     if (getDescriptor().isInheritanceSubclass()) {
      getLogger().logWarningMessage(MetadataLogger.IGNORE_INHERITANCE_SUBCLASS_CACHE,getJavaClass());
    }
 else     if (getDescriptor().isCacheSet()) {
      getLogger().logWarningMessage(MetadataLogger.IGNORE_MAPPED_SUPERCLASS_CACHE,getDescriptor().getJavaClass(),getJavaClass());
    }
 else {
      if (m_cache == null) {
        Object cache=getAnnotation(Cache.class);
        new CacheMetadata(cache).process(getDescriptor(),getJavaClass());
      }
 else {
        m_cache.process(getDescriptor(),getJavaClass());
      }
    }
  }
}"
68683,"/** 
 * Return if a given class is annotated with @Entity.
 */
public static boolean isEntity(Class candidateClass){
  return candidateClass.isAnnotationPresent(javax.persistence.Entity.class);
}","/** 
 * Return if a given class is annotated with @Entity.
 */
public static boolean isEntity(Class candidateClass){
  return MetadataHelper.isAnnotationPresent(javax.persistence.Entity.class,candidateClass);
}"
68684,"/** 
 * Return if a given class is annotated with @Embeddable.
 */
public static boolean isEmbeddable(Class candidateClass){
  return candidateClass.isAnnotationPresent(javax.persistence.Embeddable.class);
}","/** 
 * Return if a given class is annotated with @Embeddable.
 */
public static boolean isEmbeddable(Class candidateClass){
  return MetadataHelper.isAnnotationPresent(javax.persistence.Embeddable.class,candidateClass);
}"
68685,"/** 
 * INTERNAL: Stored on the root class of an inheritance hierarchy.
 */
public void setInheritanceStrategy(InheritanceType inheritanceStrategy){
  if (inheritanceStrategy.equals(InheritanceType.TABLE_PER_CLASS)) {
    throw ValidationException.tablePerClassInheritanceNotSupported(getJavaClass());
  }
 else   if (inheritanceStrategy.equals(InheritanceType.SINGLE_TABLE)) {
    m_descriptor.getInheritancePolicy().setSingleTableStrategy();
  }
 else {
    m_descriptor.getInheritancePolicy().setJoinedStrategy();
  }
}","/** 
 * INTERNAL: Stored on the root class of an inheritance hierarchy.
 */
public void setInheritanceStrategy(Enum inheritanceStrategy){
  if (inheritanceStrategy.equals(InheritanceType.TABLE_PER_CLASS)) {
    throw ValidationException.tablePerClassInheritanceNotSupported(getJavaClass());
  }
 else   if (inheritanceStrategy.equals(InheritanceType.SINGLE_TABLE)) {
    m_descriptor.getInheritancePolicy().setSingleTableStrategy();
  }
 else {
    m_descriptor.getInheritancePolicy().setJoinedStrategy();
  }
}"
68686,"/** 
 * INTERNAL: Return the discriminator type class for the given discriminator type.
 */
public static Class getDiscriminatorType(DiscriminatorType discriminatorType){
  if (discriminatorType == null || discriminatorType.equals(DiscriminatorType.STRING)) {
    return String.class;
  }
 else   if (discriminatorType.equals(DiscriminatorType.CHAR)) {
    return Character.class;
  }
 else {
    return Integer.class;
  }
}","/** 
 * INTERNAL: Return the discriminator type class for the given discriminator type.
 */
public static Class getDiscriminatorType(Enum discriminatorType){
  if (discriminatorType == null || discriminatorType.equals(DiscriminatorType.STRING)) {
    return String.class;
  }
 else   if (discriminatorType.equals(DiscriminatorType.CHAR)) {
    return Character.class;
  }
 else {
    return Integer.class;
  }
}"
68687,"/** 
 * INTERNAL: Return the field classification for the given temporal type.
 */
public static Class getFieldClassification(TemporalType type){
switch (type) {
case DATE:
    return java.sql.Date.class;
case TIME:
  return java.sql.Time.class;
case TIMESTAMP:
return java.sql.Timestamp.class;
default :
return null;
}
}","/** 
 * INTERNAL: Return the field classification for the given temporal type.
 */
public static Class getFieldClassification(Enum type){
  if (type.equals(TemporalType.DATE)) {
    return java.sql.Date.class;
  }
  if (type.equals(TemporalType.TIME)) {
    return java.sql.Time.class;
  }
  if (type.equals(TemporalType.TIMESTAMP)) {
    return java.sql.Timestamp.class;
  }
  return null;
}"
68688,"/** 
 * INTERNAL: Process the sequencing information.
 */
protected void processSequencing(){
  if (!m_generatedValues.isEmpty()) {
    DatasourceLogin login=m_session.getProject().getLogin();
    Sequence defaultAutoSequence=null;
    TableSequence defaultTableSequence=new TableSequence(MetadataConstants.DEFAULT_TABLE_GENERATOR);
    NativeSequence defaultObjectNativeSequence=new NativeSequence(MetadataConstants.DEFAULT_SEQUENCE_GENERATOR,false);
    NativeSequence defaultIdentityNativeSequence=new NativeSequence(MetadataConstants.DEFAULT_IDENTITY_GENERATOR,1,true);
    Hashtable<String,Sequence> sequences=new Hashtable<String,Sequence>();
    for (    SequenceGeneratorMetadata sequenceGenerator : m_sequenceGenerators.values()) {
      String sequenceGeneratorName=sequenceGenerator.getName();
      String seqName;
      if (sequenceGenerator.getSequenceName() != null && (!sequenceGenerator.getSequenceName().equals(""String_Node_Str""))) {
        seqName=sequenceGenerator.getSequenceName();
      }
 else {
        seqName=sequenceGeneratorName;
      }
      Integer allocationSize=sequenceGenerator.getAllocationSize();
      if (allocationSize == null) {
        allocationSize=new Integer(50);
      }
      NativeSequence sequence=new NativeSequence(seqName,allocationSize,false);
      sequences.put(sequenceGeneratorName,sequence);
      if (sequenceGeneratorName.equals(MetadataConstants.DEFAULT_AUTO_GENERATOR)) {
        defaultAutoSequence=sequence;
      }
 else       if (sequenceGeneratorName.equals(MetadataConstants.DEFAULT_SEQUENCE_GENERATOR)) {
        defaultObjectNativeSequence=sequence;
      }
    }
    for (    TableGeneratorMetadata tableGenerator : m_tableGenerators.values()) {
      String tableGeneratorName=tableGenerator.getGeneratorName();
      String seqName;
      if (tableGenerator.getPkColumnValue() != null && (!tableGenerator.getPkColumnValue().equals(""String_Node_Str""))) {
        seqName=tableGenerator.getPkColumnValue();
      }
 else {
        seqName=tableGeneratorName;
      }
      Integer allocationSize=tableGenerator.getAllocationSize();
      if (allocationSize == null) {
        allocationSize=new Integer(50);
      }
      Integer initialValue=tableGenerator.getInitialValue();
      if (initialValue == null) {
        initialValue=new Integer(0);
      }
      TableSequence sequence=new TableSequence(seqName,allocationSize,initialValue);
      sequences.put(tableGeneratorName,sequence);
      sequence.setTable(tableGenerator.getDatabaseTable());
      if (tableGenerator.getPkColumnName() != null && (!tableGenerator.getPkColumnName().equals(""String_Node_Str""))) {
        sequence.setNameFieldName(tableGenerator.getPkColumnName());
      }
      if (tableGenerator.getValueColumnName() != null && (!tableGenerator.getValueColumnName().equals(""String_Node_Str""))) {
        sequence.setCounterFieldName(tableGenerator.getValueColumnName());
      }
      if (tableGeneratorName.equals(MetadataConstants.DEFAULT_AUTO_GENERATOR)) {
        defaultAutoSequence=sequence;
      }
 else       if (tableGeneratorName.equals(MetadataConstants.DEFAULT_TABLE_GENERATOR)) {
        defaultTableSequence=sequence;
      }
    }
    boolean usesAuto=false;
    for (    Class entityClass : m_generatedValues.keySet()) {
      MetadataDescriptor descriptor=m_allAccessors.get(entityClass.getName()).getDescriptor();
      GeneratedValueMetadata generatedValue=m_generatedValues.get(entityClass);
      String generatorName=generatedValue.getGenerator();
      if (generatorName == null) {
        generatorName=""String_Node_Str"";
      }
      Sequence sequence=null;
      if (!generatorName.equals(""String_Node_Str"")) {
        sequence=sequences.get(generatorName);
      }
      if (sequence == null) {
        GenerationType strategy=generatedValue.getStrategy();
        if (strategy == null || strategy.equals(GenerationType.AUTO)) {
          usesAuto=true;
        }
 else         if (strategy.equals(GenerationType.TABLE)) {
          if (generatorName.equals(""String_Node_Str"")) {
            sequence=defaultTableSequence;
          }
 else {
            sequence=(Sequence)defaultTableSequence.clone();
            sequence.setName(generatorName);
          }
        }
 else         if (strategy.equals(GenerationType.SEQUENCE)) {
          if (generatorName.equals(""String_Node_Str"")) {
            sequence=defaultObjectNativeSequence;
          }
 else {
            sequence=(Sequence)defaultObjectNativeSequence.clone();
            sequence.setName(generatorName);
          }
        }
 else         if (strategy.equals(GenerationType.IDENTITY)) {
          if (generatorName.equals(""String_Node_Str"")) {
            sequence=defaultIdentityNativeSequence;
          }
 else {
            sequence=(Sequence)defaultIdentityNativeSequence.clone();
            sequence.setName(generatorName);
          }
        }
      }
      if (sequence != null) {
        descriptor.setSequenceNumberName(sequence.getName());
        login.addSequence(sequence);
      }
 else {
        String seqName;
        if (generatorName.equals(""String_Node_Str"")) {
          if (defaultAutoSequence != null) {
            seqName=defaultAutoSequence.getName();
          }
 else {
            seqName=MetadataConstants.DEFAULT_AUTO_GENERATOR;
          }
        }
 else {
          seqName=generatorName;
        }
        descriptor.setSequenceNumberName(seqName);
      }
    }
    if (usesAuto) {
      if (defaultAutoSequence != null) {
        login.setDefaultSequence(defaultAutoSequence);
      }
    }
  }
}","/** 
 * INTERNAL: Process the sequencing information.
 */
protected void processSequencing(){
  if (!m_generatedValues.isEmpty()) {
    DatasourceLogin login=m_session.getProject().getLogin();
    Sequence defaultAutoSequence=null;
    TableSequence defaultTableSequence=new TableSequence(MetadataConstants.DEFAULT_TABLE_GENERATOR);
    NativeSequence defaultObjectNativeSequence=new NativeSequence(MetadataConstants.DEFAULT_SEQUENCE_GENERATOR,false);
    NativeSequence defaultIdentityNativeSequence=new NativeSequence(MetadataConstants.DEFAULT_IDENTITY_GENERATOR,1,true);
    Hashtable<String,Sequence> sequences=new Hashtable<String,Sequence>();
    for (    SequenceGeneratorMetadata sequenceGenerator : m_sequenceGenerators.values()) {
      String sequenceGeneratorName=sequenceGenerator.getName();
      String seqName;
      if (sequenceGenerator.getSequenceName() != null && (!sequenceGenerator.getSequenceName().equals(""String_Node_Str""))) {
        seqName=sequenceGenerator.getSequenceName();
      }
 else {
        seqName=sequenceGeneratorName;
      }
      Integer allocationSize=sequenceGenerator.getAllocationSize();
      if (allocationSize == null) {
        allocationSize=new Integer(50);
      }
      NativeSequence sequence=new NativeSequence(seqName,allocationSize,false);
      sequences.put(sequenceGeneratorName,sequence);
      if (sequenceGeneratorName.equals(MetadataConstants.DEFAULT_AUTO_GENERATOR)) {
        defaultAutoSequence=sequence;
      }
 else       if (sequenceGeneratorName.equals(MetadataConstants.DEFAULT_SEQUENCE_GENERATOR)) {
        defaultObjectNativeSequence=sequence;
      }
    }
    for (    TableGeneratorMetadata tableGenerator : m_tableGenerators.values()) {
      String tableGeneratorName=tableGenerator.getGeneratorName();
      String seqName;
      if (tableGenerator.getPkColumnValue() != null && (!tableGenerator.getPkColumnValue().equals(""String_Node_Str""))) {
        seqName=tableGenerator.getPkColumnValue();
      }
 else {
        seqName=tableGeneratorName;
      }
      Integer allocationSize=tableGenerator.getAllocationSize();
      if (allocationSize == null) {
        allocationSize=new Integer(50);
      }
      Integer initialValue=tableGenerator.getInitialValue();
      if (initialValue == null) {
        initialValue=new Integer(0);
      }
      TableSequence sequence=new TableSequence(seqName,allocationSize,initialValue);
      sequences.put(tableGeneratorName,sequence);
      sequence.setTable(tableGenerator.getDatabaseTable());
      if (tableGenerator.getPkColumnName() != null && (!tableGenerator.getPkColumnName().equals(""String_Node_Str""))) {
        sequence.setNameFieldName(tableGenerator.getPkColumnName());
      }
      if (tableGenerator.getValueColumnName() != null && (!tableGenerator.getValueColumnName().equals(""String_Node_Str""))) {
        sequence.setCounterFieldName(tableGenerator.getValueColumnName());
      }
      if (tableGeneratorName.equals(MetadataConstants.DEFAULT_AUTO_GENERATOR)) {
        defaultAutoSequence=sequence;
      }
 else       if (tableGeneratorName.equals(MetadataConstants.DEFAULT_TABLE_GENERATOR)) {
        defaultTableSequence=sequence;
      }
    }
    boolean usesAuto=false;
    for (    Class entityClass : m_generatedValues.keySet()) {
      MetadataDescriptor descriptor=m_allAccessors.get(entityClass.getName()).getDescriptor();
      GeneratedValueMetadata generatedValue=m_generatedValues.get(entityClass);
      String generatorName=generatedValue.getGenerator();
      if (generatorName == null) {
        generatorName=""String_Node_Str"";
      }
      Sequence sequence=null;
      if (!generatorName.equals(""String_Node_Str"")) {
        sequence=sequences.get(generatorName);
      }
      if (sequence == null) {
        Enum strategy=generatedValue.getStrategy();
        if (strategy == null || strategy.equals(GenerationType.AUTO)) {
          usesAuto=true;
        }
 else         if (strategy.equals(GenerationType.TABLE)) {
          if (generatorName.equals(""String_Node_Str"")) {
            sequence=defaultTableSequence;
          }
 else {
            sequence=(Sequence)defaultTableSequence.clone();
            sequence.setName(generatorName);
          }
        }
 else         if (strategy.equals(GenerationType.SEQUENCE)) {
          if (generatorName.equals(""String_Node_Str"")) {
            sequence=defaultObjectNativeSequence;
          }
 else {
            sequence=(Sequence)defaultObjectNativeSequence.clone();
            sequence.setName(generatorName);
          }
        }
 else         if (strategy.equals(GenerationType.IDENTITY)) {
          if (generatorName.equals(""String_Node_Str"")) {
            sequence=defaultIdentityNativeSequence;
          }
 else {
            sequence=(Sequence)defaultIdentityNativeSequence.clone();
            sequence.setName(generatorName);
          }
        }
      }
      if (sequence != null) {
        descriptor.setSequenceNumberName(sequence.getName());
        login.addSequence(sequence);
      }
 else {
        String seqName;
        if (generatorName.equals(""String_Node_Str"")) {
          if (defaultAutoSequence != null) {
            seqName=defaultAutoSequence.getName();
          }
 else {
            seqName=MetadataConstants.DEFAULT_AUTO_GENERATOR;
          }
        }
 else {
          seqName=generatorName;
        }
        descriptor.setSequenceNumberName(seqName);
      }
    }
    if (usesAuto) {
      if (defaultAutoSequence != null) {
        login.setDefaultSequence(defaultAutoSequence);
      }
    }
  }
}"
68689,"/** 
 * INTERNAL:
 */
public BasicAccessor(MetadataAccessibleObject accessibleObject,ClassAccessor classAccessor){
  super(accessibleObject,classAccessor);
  Basic basic=getAnnotation(Basic.class);
  if (basic != null) {
    setFetch(basic.fetch());
    setOptional(basic.optional());
  }
}","/** 
 * INTERNAL:
 */
public BasicAccessor(MetadataAccessibleObject accessibleObject,ClassAccessor classAccessor){
  super(accessibleObject,classAccessor);
  Object basic=getAnnotation(Basic.class);
  if (basic != null) {
    setFetch((Enum)invokeMethod(""String_Node_Str"",basic,(Object[])null));
    setOptional((Boolean)invokeMethod(""String_Node_Str"",basic,(Object[])null));
  }
}"
68690,"/** 
 * INTERNAL: Return the column from xml if there is one, otherwise look for an annotation.
 */
protected ColumnMetadata getColumn(String loggingCtx){
  if (m_column == null) {
    Column column=getAnnotation(Column.class);
    return new ColumnMetadata(column,getAttributeName());
  }
 else {
    return m_column;
  }
}","/** 
 * INTERNAL: Return the column from xml if there is one, otherwise look for an annotation.
 */
protected ColumnMetadata getColumn(String loggingCtx){
  if (m_column == null) {
    Object column=getAnnotation(Column.class);
    return new ColumnMetadata(column,getAttributeName());
  }
 else {
    return m_column;
  }
}"
68691,"/** 
 * INTERNAL: Process the Mutable annotation.
 */
public void processMutable(DatabaseMapping mapping){
  if (m_mutable == null) {
    Mutable mutable=getAnnotation(Mutable.class);
    if (mutable != null) {
      ((DirectToFieldMapping)mapping).setIsMutable(mutable.value());
    }
  }
 else {
    ((DirectToFieldMapping)mapping).setIsMutable(m_mutable.booleanValue());
  }
}","/** 
 * INTERNAL: Process the Mutable annotation.
 */
public void processMutable(DatabaseMapping mapping){
  if (m_mutable == null) {
    Object mutable=getAnnotation(Mutable.class);
    if (mutable != null) {
      ((DirectToFieldMapping)mapping).setIsMutable((Boolean)invokeMethod(""String_Node_Str"",mutable,(Object[])null));
    }
  }
 else {
    ((DirectToFieldMapping)mapping).setIsMutable(m_mutable.booleanValue());
  }
}"
68692,"/** 
 * INTERNAL:  Used for OX mapping.
 */
public JoinFetchType getJoinFetch(){
  return m_joinFetch;
}","/** 
 * INTERNAL:  Used for OX mapping.
 */
public Enum getJoinFetch(){
  return m_joinFetch;
}"
68693,"/** 
 * INTERNAL:  Used for OX mapping.
 */
public void setJoinFetch(JoinFetchType joinFetch){
  m_joinFetch=joinFetch;
}","/** 
 * INTERNAL:  Used for OX mapping.
 */
public void setJoinFetch(Enum joinFetch){
  m_joinFetch=joinFetch;
}"
68694,"/** 
 * INTERNAL:
 */
public BasicCollectionAccessor(MetadataAccessibleObject accessibleObject,ClassAccessor classAccessor){
  super(accessibleObject,classAccessor);
  BasicCollection basicCollection=getAnnotation(BasicCollection.class);
  if (basicCollection != null) {
    m_valueColumn=new ColumnMetadata(basicCollection.valueColumn(),getAttributeName());
    setFetch(basicCollection.fetch());
  }
}","/** 
 * INTERNAL:
 */
public BasicCollectionAccessor(MetadataAccessibleObject accessibleObject,ClassAccessor classAccessor){
  super(accessibleObject,classAccessor);
  Object basicCollection=getAnnotation(BasicCollection.class);
  if (basicCollection != null) {
    m_valueColumn=new ColumnMetadata(invokeMethod(""String_Node_Str"",basicCollection,(Object[])null),getAttributeName());
    setFetch((Enum)invokeMethod(""String_Node_Str"",basicCollection,(Object[])null));
  }
}"
68695,"/** 
 * INTERNAL: Process a MetadataCollectionTable.
 */
protected void processCollectionTable(DirectCollectionMapping mapping){
  CollectionTableMetadata collectionTable;
  if (m_collectionTable == null) {
    CollectionTable table=getAnnotation(CollectionTable.class);
    collectionTable=new CollectionTableMetadata(table,getAnnotatedElementName());
  }
 else {
    collectionTable=m_collectionTable;
  }
  processTable(collectionTable,getDefaultCollectionTableName());
  mapping.setReferenceTable(collectionTable.getDatabaseTable());
  for (  PrimaryKeyJoinColumnMetadata primaryKeyJoinColumn : processPrimaryKeyJoinColumns(new PrimaryKeyJoinColumnsMetadata(collectionTable.getPrimaryKeyJoinColumns()))) {
    DatabaseField pkField=primaryKeyJoinColumn.getPrimaryKeyField();
    pkField.setName(getName(pkField,getDescriptor().getPrimaryKeyFieldName(),MetadataLogger.PK_COLUMN));
    pkField.setTable(getDescriptor().getPrimaryTable());
    DatabaseField fkField=primaryKeyJoinColumn.getForeignKeyField();
    fkField.setName(getName(fkField,getDescriptor().getPrimaryKeyFieldName(),MetadataLogger.FK_COLUMN));
    fkField.setTable(collectionTable.getDatabaseTable());
    mapping.addReferenceKeyField(fkField,pkField);
  }
}","/** 
 * INTERNAL: Process a MetadataCollectionTable.
 */
protected void processCollectionTable(DirectCollectionMapping mapping){
  CollectionTableMetadata collectionTable;
  if (m_collectionTable == null) {
    Object table=getAnnotation(CollectionTable.class);
    collectionTable=new CollectionTableMetadata(table,getAnnotatedElementName());
  }
 else {
    collectionTable=m_collectionTable;
  }
  processTable(collectionTable,getDefaultCollectionTableName());
  mapping.setReferenceTable(collectionTable.getDatabaseTable());
  for (  PrimaryKeyJoinColumnMetadata primaryKeyJoinColumn : processPrimaryKeyJoinColumns(new PrimaryKeyJoinColumnsMetadata(collectionTable.getPrimaryKeyJoinColumns()))) {
    DatabaseField pkField=primaryKeyJoinColumn.getPrimaryKeyField();
    pkField.setName(getName(pkField,getDescriptor().getPrimaryKeyFieldName(),MetadataLogger.PK_COLUMN));
    pkField.setTable(getDescriptor().getPrimaryTable());
    DatabaseField fkField=primaryKeyJoinColumn.getForeignKeyField();
    fkField.setName(getName(fkField,getDescriptor().getPrimaryKeyFieldName(),MetadataLogger.FK_COLUMN));
    fkField.setTable(collectionTable.getDatabaseTable());
    mapping.addReferenceKeyField(fkField,pkField);
  }
}"
68696,"/** 
 * INTERNAL:
 */
public BasicMapAccessor(MetadataAccessibleObject accessibleObject,ClassAccessor classAccessor){
  super(accessibleObject,classAccessor);
  BasicMap basicMap=getAnnotation(BasicMap.class);
  m_keyColumn=new ColumnMetadata(basicMap.keyColumn(),getAttributeName());
  m_keyConverter=basicMap.keyConverter().value();
  m_valueConverter=basicMap.valueConverter().value();
  setValueColumn(new ColumnMetadata(basicMap.valueColumn(),getAttributeName()));
  setFetch(basicMap.fetch());
}","/** 
 * INTERNAL:
 */
public BasicMapAccessor(MetadataAccessibleObject accessibleObject,ClassAccessor classAccessor){
  super(accessibleObject,classAccessor);
  Object basicMap=getAnnotation(BasicMap.class);
  m_keyColumn=new ColumnMetadata(invokeMethod(""String_Node_Str"",basicMap,(Object[])null),getAttributeName());
  Object keyConvert=invokeMethod(""String_Node_Str"",basicMap,(Object[])null);
  m_keyConverter=(String)invokeMethod(""String_Node_Str"",keyConvert,(Object[])null);
  Object valueConvert=invokeMethod(""String_Node_Str"",basicMap,(Object[])null);
  m_valueConverter=(String)invokeMethod(""String_Node_Str"",valueConvert,(Object[])null);
  setValueColumn(new ColumnMetadata(invokeMethod(""String_Node_Str"",basicMap,(Object[])null),getAttributeName()));
  setFetch((Enum)invokeMethod(""String_Node_Str"",basicMap,(Object[])null));
}"
68697,"/** 
 * INTERNAL:
 */
public CascadeTypes(CascadeType[] cascadeTypes){
  m_types=new ArrayList<CascadeType>();
  for (  CascadeType cascadeType : cascadeTypes) {
    m_types.add(cascadeType);
  }
}","/** 
 * INTERNAL:
 */
public CascadeTypes(Enum[] cascadeTypes){
  m_types=new ArrayList<Enum>();
  for (  Enum cascadeType : cascadeTypes) {
    m_types.add(cascadeType);
  }
}"
68698,"/** 
 * INTERNAL:
 */
public List<CascadeType> getTypes(){
  if (m_types == null) {
    m_types=new ArrayList<CascadeType>();
    if (isCascadeAll()) {
      m_types.add(CascadeType.ALL);
    }
    if (isCascadePersist()) {
      m_types.add(CascadeType.PERSIST);
    }
    if (isCascadeMerge()) {
      m_types.add(CascadeType.MERGE);
    }
    if (isCascadeRemove()) {
      m_types.add(CascadeType.REMOVE);
    }
    if (isCascadeRefresh()) {
      m_types.add(CascadeType.REFRESH);
    }
  }
  return m_types;
}","/** 
 * INTERNAL:
 */
public List<Enum> getTypes(){
  if (m_types == null) {
    m_types=new ArrayList<Enum>();
    if (isCascadeAll()) {
      m_types.add(CascadeType.ALL);
    }
    if (isCascadePersist()) {
      m_types.add(CascadeType.PERSIST);
    }
    if (isCascadeMerge()) {
      m_types.add(CascadeType.MERGE);
    }
    if (isCascadeRemove()) {
      m_types.add(CascadeType.REMOVE);
    }
    if (isCascadeRefresh()) {
      m_types.add(CascadeType.REFRESH);
    }
  }
  return m_types;
}"
68699,"public ValueStore copy(){
  POJOValueStore anOriginalValueStore=getInstance(((SDODataObject)dataObject)._getHelperContext());
  anOriginalValueStore.setDataObject(dataObject);
  anOriginalValueStore.setObject(object);
  HashMap aHashMap=new HashMap();
  aHashMap.putAll(properties);
  anOriginalValueStore.properties=aHashMap;
  return anOriginalValueStore;
}","public ValueStore copy(){
  POJOValueStore anOriginalValueStore=getInstance(((SDOType)dataObject.getType()).getHelperContext());
  anOriginalValueStore.setDataObject(dataObject);
  anOriginalValueStore.setObject(object);
  HashMap aHashMap=new HashMap();
  aHashMap.putAll(properties);
  anOriginalValueStore.properties=aHashMap;
  return anOriginalValueStore;
}"
68700,"/** 
 * INTERNAL: Sets the value of the given property of the object to the new value. <p> The use of a false updateSequence flag is internally implemented during an SDOSequence.add() call. Refactor: we need to abstract this function using a type of Command pattern to handle the sequence context.
 * @param property
 * @param value
 * @param updateSequence
 * @throws UnsupportedOperationException
 * @throws IllegalArgumentException
 */
public void set(Property property,Object value,boolean updateSequence) throws UnsupportedOperationException, IllegalArgumentException {
  if (null == property) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (property.isReadOnly()) {
    throw new UnsupportedOperationException(""String_Node_Str"" + property.getName() + ""String_Node_Str""+ getType().getName());
  }
  if (null == getType()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (property.isOpenContent() && !getType().isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"" + this + ""String_Node_Str""+ property.getName());
  }
  Object oldValue=get(property);
  boolean wasSet=isSet(property);
  if (wasSet && (oldValue == value)) {
    return;
  }
 else {
    _setModified(true);
  }
  if (property.isMany()) {
    if (null == value) {
      value=new ListWrapper(this,property);
    }
    if (!(value instanceof Collection)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    List listValue=(List)value;
    if (property.isContainment() || isContainedByDataGraph(property)) {
      for (int i=0, size=listValue.size(); i < size; i++) {
        Object next=listValue.get(i);
        if (next instanceof SDODataObject) {
          if (parentContains(next)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
        }
      }
    }
    listValue=(List)oldValue;
    ((ListWrapper)listValue).clear(updateSequence);
    ((ListWrapper)listValue).addAll((Collection)value,updateSequence);
  }
 else {
    if (property.isContainment() || isContainedByDataGraph(property)) {
      if (value instanceof SDODataObject) {
        if (parentContains(value)) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      detach(property,oldValue);
      if ((value != null) && value instanceof DataObject) {
        updateContainment(property,(DataObject)value);
      }
    }
    setPropertyInternal(property,value,updateSequence);
  }
  if (getType().isOpen() && property.isOpenContent()) {
    addOpenContentProperty(property);
  }
}","/** 
 * INTERNAL: Sets the value of the given property of the object to the new value. <p> The use of a false updateSequence flag is internally implemented during an SDOSequence.add() call. Refactor: we need to abstract this function using a type of Command pattern to handle the sequence context.
 * @param property
 * @param value
 * @param updateSequence
 * @throws UnsupportedOperationException
 * @throws IllegalArgumentException
 */
public void set(Property property,Object value,boolean updateSequence) throws UnsupportedOperationException, IllegalArgumentException {
  if (null == property) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (property.isReadOnly()) {
    throw new UnsupportedOperationException(""String_Node_Str"" + property.getName() + ""String_Node_Str""+ getType().getName());
  }
  setInternal(property,value,updateSequence);
}"
68701,"/** 
 * INTERNAL: Recursive function deep copies all contained properties. Requirements: The value object has isSet=true for all callers.
 * @param copy
 * @param property
 * @param value
 * @param doMap (cache original -> copy DataObject instances to set non-containment properties after tree construction)
 * @param propMap (cache original DO:non-containment property values to be set after tree construction)
 */
private void copyContainmentPropertyValue(SDODataObject copy,Property property,Object value,HashMap doMap,HashMap ncPropMap,SDOChangeSummary cs){
  if (property.isMany()) {
    List copyValue=new ArrayList();
    copy.set(property,copyValue,false);
    for (Iterator iterValues=((List)value).iterator(); iterValues.hasNext(); ) {
      SDODataObject o=(SDODataObject)iterValues.next();
      DataObject copyO=copyPrivate(o,doMap,ncPropMap,cs);
      ((ListWrapper)copy.getList(property)).add(copyO,false);
      if ((copyO != null) && (copyO.getChangeSummary() != null) && (((SDOType)copyO.getType()).getChangeSummaryProperty() != null)) {
        if (o.getChangeSummary().isLogging()) {
          ((SDOChangeSummary)copyO.getChangeSummary()).setLogging(true);
        }
        copyChangeSummary(o.getChangeSummary(),copyO.getChangeSummary(),doMap);
      }
    }
  }
 else {
    DataObject copyO=copyPrivate((SDODataObject)value,doMap,ncPropMap,cs);
    copy.set(property,copyO,false);
    if ((copyO != null) && (copyO.getChangeSummary() != null) && (((SDOType)copyO.getType()).getChangeSummaryProperty() != null)) {
      if (((SDODataObject)value).getChangeSummary().isLogging()) {
        ((SDOChangeSummary)copyO.getChangeSummary()).setLogging(true);
      }
      copyChangeSummary(((SDODataObject)value).getChangeSummary(),copyO.getChangeSummary(),doMap);
    }
  }
}","/** 
 * INTERNAL: Recursive function deep copies all contained properties. Requirements: The value object has isSet=true for all callers.
 * @param copy
 * @param property
 * @param value
 * @param doMap (cache original -> copy DataObject instances to set non-containment properties after tree construction)
 * @param propMap (cache original DO:non-containment property values to be set after tree construction)
 */
private void copyContainmentPropertyValue(SDODataObject copy,Property property,Object value,HashMap doMap,HashMap ncPropMap,SDOChangeSummary cs){
  if (property.isMany()) {
    List copyValue=new ArrayList();
    copy.setInternal(property,copyValue,false);
    for (Iterator iterValues=((List)value).iterator(); iterValues.hasNext(); ) {
      SDODataObject o=(SDODataObject)iterValues.next();
      DataObject copyO=copyPrivate(o,doMap,ncPropMap,cs);
      ((ListWrapper)copy.getList(property)).add(copyO,false);
      if ((copyO != null) && (copyO.getChangeSummary() != null) && (((SDOType)copyO.getType()).getChangeSummaryProperty() != null)) {
        if (o.getChangeSummary().isLogging()) {
          ((SDOChangeSummary)copyO.getChangeSummary()).setLogging(true);
        }
        copyChangeSummary(o.getChangeSummary(),copyO.getChangeSummary(),doMap);
      }
    }
  }
 else {
    DataObject copyO=copyPrivate((SDODataObject)value,doMap,ncPropMap,cs);
    copy.setInternal(property,copyO,false);
    if ((copyO != null) && (copyO.getChangeSummary() != null) && (((SDOType)copyO.getType()).getChangeSummaryProperty() != null)) {
      if (((SDODataObject)value).getChangeSummary().isLogging()) {
        ((SDOChangeSummary)copyO.getChangeSummary()).setLogging(true);
      }
      copyChangeSummary(((SDODataObject)value).getChangeSummary(),copyO.getChangeSummary(),doMap);
    }
  }
}"
68702,"/** 
 * INTERNAL: Build the copy tree and cache all reachable DataObjects with their copy<br> Cache all non-containment properties - to be set after tree construction<br> Recurse the tree in preorder traversal (root, child1-n) Scope: We do not have to check the copyTree scope when iterating opposites since we will not enter any opposite property dataTree that is outside of the copyTree scope
 * @param doMap (cache original -> copy DataObject instances to set non-containment properties after tree construction)
 * @param ncPropMap (cache original DO:non-containment property values to be set after tree construction)
 */
private DataObject copyPrivate(SDODataObject dataObject,HashMap doMap,HashMap ncPropMap,SDOChangeSummary cs) throws IllegalArgumentException {
  if (null == dataObject) {
    return null;
  }
  SDODataObject copy=(SDODataObject)getHelperContext().getDataFactory().create(dataObject.getType().getURI(),dataObject.getType().getName());
  doMap.put(dataObject,copy);
  List ocListOriginal=dataObject._getOpenContentProperties();
  for (Iterator anOCIterator=ocListOriginal.iterator(); anOCIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCIterator.next());
  }
  List ocAttrsListOriginal=dataObject._getOpenContentPropertiesAttributes();
  for (Iterator anOCAttrIterator=ocAttrsListOriginal.iterator(); anOCAttrIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCAttrIterator.next());
  }
  for (Iterator iterInstanceProperties=copy.getInstanceProperties().iterator(); iterInstanceProperties.hasNext(); ) {
    Property eachProperty=(Property)iterInstanceProperties.next();
    boolean isSet=isSet(dataObject,eachProperty,cs);
    if (isSet) {
      Object o=getValue(dataObject,eachProperty,cs);
      if (eachProperty.getType().isDataType()) {
        if (eachProperty.getType() != SDOConstants.SDO_CHANGESUMMARY) {
          copy.set(eachProperty,o,false);
        }
      }
 else {
        if (eachProperty.isContainment()) {
          copyContainmentPropertyValue(copy,eachProperty,o,doMap,ncPropMap,cs);
        }
 else {
          ArrayList anArray=(ArrayList)ncPropMap.get(dataObject);
          if (anArray == null) {
            anArray=new ArrayList();
            anArray.add(eachProperty);
            ncPropMap.put(dataObject,anArray);
          }
 else {
            anArray.add(eachProperty);
          }
        }
      }
    }
  }
  return copy;
}","/** 
 * INTERNAL: Build the copy tree and cache all reachable DataObjects with their copy<br> Cache all non-containment properties - to be set after tree construction<br> Recurse the tree in preorder traversal (root, child1-n) Scope: We do not have to check the copyTree scope when iterating opposites since we will not enter any opposite property dataTree that is outside of the copyTree scope
 * @param doMap (cache original -> copy DataObject instances to set non-containment properties after tree construction)
 * @param ncPropMap (cache original DO:non-containment property values to be set after tree construction)
 */
private DataObject copyPrivate(SDODataObject dataObject,HashMap doMap,HashMap ncPropMap,SDOChangeSummary cs) throws IllegalArgumentException {
  if (null == dataObject) {
    return null;
  }
  SDODataObject copy=(SDODataObject)getHelperContext().getDataFactory().create(dataObject.getType().getURI(),dataObject.getType().getName());
  doMap.put(dataObject,copy);
  List ocListOriginal=dataObject._getOpenContentProperties();
  for (Iterator anOCIterator=ocListOriginal.iterator(); anOCIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCIterator.next());
  }
  List ocAttrsListOriginal=dataObject._getOpenContentPropertiesAttributes();
  for (Iterator anOCAttrIterator=ocAttrsListOriginal.iterator(); anOCAttrIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCAttrIterator.next());
  }
  for (Iterator iterInstanceProperties=copy.getInstanceProperties().iterator(); iterInstanceProperties.hasNext(); ) {
    Property eachProperty=(Property)iterInstanceProperties.next();
    boolean isSet=isSet(dataObject,eachProperty,cs);
    if (isSet) {
      Object o=getValue(dataObject,eachProperty,cs);
      if (eachProperty.getType().isDataType()) {
        if (eachProperty.getType() != SDOConstants.SDO_CHANGESUMMARY) {
          copy.setInternal(eachProperty,o,false);
        }
      }
 else {
        if (eachProperty.isContainment()) {
          copyContainmentPropertyValue(copy,eachProperty,o,doMap,ncPropMap,cs);
        }
 else {
          ArrayList anArray=(ArrayList)ncPropMap.get(dataObject);
          if (anArray == null) {
            anArray=new ArrayList();
            anArray.add(eachProperty);
            ncPropMap.put(dataObject,anArray);
          }
 else {
            anArray.add(eachProperty);
          }
        }
      }
    }
  }
  return copy;
}"
68703,"/** 
 * Create a shallow copy of the DataObject dataObject: Creates a new DataObject copiedDataObject with the same values as the source dataObject for each property where property.getType().isDataType() is true. The value of such a Property property in copiedDataObject is: dataObject.get(property) for single-valued Properties (copiedDataObject.get(property) equals() dataObject.get(property)), or a List where each member is equal to the member at the same index in dataObject for multi-valued Properties copiedDataObject.getList(property).get(i) equals() dataObject.getList(property).get(i) The copied Object is unset for each Property where property.getType().isDataType() is false since they are not copied. Read-only properties are copied. A copied object shares metadata with the source object sourceDO.getType() == copiedDO.getType() If a ChangeSummary is part of the source DataObject the copy has a new, empty ChangeSummary. Logging state is the same as the source ChangeSummary.
 * @param dataObject to be copied
 * @return copy of dataObject
 */
public DataObject copyShallow(DataObject dataObject){
  if (null == dataObject) {
    return null;
  }
  SDODataObject copy=(SDODataObject)getHelperContext().getDataFactory().create(dataObject.getType().getURI(),dataObject.getType().getName());
  List ocListOriginal=((SDODataObject)dataObject)._getOpenContentProperties();
  for (Iterator anOCIterator=ocListOriginal.iterator(); anOCIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCIterator.next());
  }
  List ocAttrsListOriginal=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (Iterator anOCAttrIterator=ocAttrsListOriginal.iterator(); anOCAttrIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCAttrIterator.next());
  }
  List allProperties=copy.getInstanceProperties();
  Iterator iterProperties=allProperties.iterator();
  while (iterProperties.hasNext()) {
    Property eachProperty=(Property)iterProperties.next();
    if (dataObject.isSet(eachProperty)) {
      Object o=getValue((SDODataObject)dataObject,eachProperty,null);
      if (eachProperty.getType().isDataType()) {
        if (eachProperty.getType() != SDOConstants.SDO_CHANGESUMMARY) {
          copy.set(eachProperty,o,false);
        }
      }
    }
  }
  if (dataObject.getType().isSequenced()) {
    List settings=((SDOSequence)dataObject.getSequence()).getSettings();
    for (int index=0, size=dataObject.getSequence().size(); index < size; index++) {
      Setting nextSetting=(Setting)settings.get(index);
      Property prop=dataObject.getSequence().getProperty(index);
      if (prop == null || prop.getType().isDataType()) {
        Setting copySetting=nextSetting.copy(copy);
        ((SDOSequence)copy.getSequence()).getSettings().add(copySetting);
        ((SDOSequence)copy.getSequence()).addValueToSettings(copySetting);
      }
    }
  }
  if ((copy != null) && (copy.getChangeSummary() != null) && (((SDOType)copy.getType()).getChangeSummaryProperty() != null)) {
    if (((SDODataObject)dataObject).getChangeSummary().isLogging()) {
      ((SDOChangeSummary)copy.getChangeSummary()).setLogging(true);
    }
  }
  return copy;
}","/** 
 * Create a shallow copy of the DataObject dataObject: Creates a new DataObject copiedDataObject with the same values as the source dataObject for each property where property.getType().isDataType() is true. The value of such a Property property in copiedDataObject is: dataObject.get(property) for single-valued Properties (copiedDataObject.get(property) equals() dataObject.get(property)), or a List where each member is equal to the member at the same index in dataObject for multi-valued Properties copiedDataObject.getList(property).get(i) equals() dataObject.getList(property).get(i) The copied Object is unset for each Property where property.getType().isDataType() is false since they are not copied. Read-only properties are copied. A copied object shares metadata with the source object sourceDO.getType() == copiedDO.getType() If a ChangeSummary is part of the source DataObject the copy has a new, empty ChangeSummary. Logging state is the same as the source ChangeSummary.
 * @param dataObject to be copied
 * @return copy of dataObject
 */
public DataObject copyShallow(DataObject dataObject){
  if (null == dataObject) {
    return null;
  }
  SDODataObject copy=(SDODataObject)getHelperContext().getDataFactory().create(dataObject.getType().getURI(),dataObject.getType().getName());
  List ocListOriginal=((SDODataObject)dataObject)._getOpenContentProperties();
  for (Iterator anOCIterator=ocListOriginal.iterator(); anOCIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCIterator.next());
  }
  List ocAttrsListOriginal=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (Iterator anOCAttrIterator=ocAttrsListOriginal.iterator(); anOCAttrIterator.hasNext(); ) {
    copy.addOpenContentProperty((Property)anOCAttrIterator.next());
  }
  List allProperties=copy.getInstanceProperties();
  Iterator iterProperties=allProperties.iterator();
  while (iterProperties.hasNext()) {
    Property eachProperty=(Property)iterProperties.next();
    if (dataObject.isSet(eachProperty)) {
      Object o=getValue((SDODataObject)dataObject,eachProperty,null);
      if (eachProperty.getType().isDataType()) {
        if (eachProperty.getType() != SDOConstants.SDO_CHANGESUMMARY) {
          copy.setInternal(eachProperty,o,false);
        }
      }
    }
  }
  if (dataObject.getType().isSequenced()) {
    List settings=((SDOSequence)dataObject.getSequence()).getSettings();
    for (int index=0, size=dataObject.getSequence().size(); index < size; index++) {
      Setting nextSetting=(Setting)settings.get(index);
      Property prop=dataObject.getSequence().getProperty(index);
      if (prop == null || prop.getType().isDataType()) {
        Setting copySetting=nextSetting.copy(copy);
        ((SDOSequence)copy.getSequence()).getSettings().add(copySetting);
        ((SDOSequence)copy.getSequence()).addValueToSettings(copySetting);
      }
    }
  }
  if ((copy != null) && (copy.getChangeSummary() != null) && (((SDOType)copy.getType()).getChangeSummaryProperty() != null)) {
    if (((SDODataObject)dataObject).getChangeSummary().isLogging()) {
      ((SDOChangeSummary)copy.getChangeSummary()).setLogging(true);
    }
  }
  return copy;
}"
68704,"/** 
 * Sets the value of the instance variable in the object to the value.
 */
public void setAttributeValueInObject(Object domainObject,Object attributeValue) throws DescriptorException {
  ((SDODataObject)domainObject).set(property,attributeValue,false);
}","/** 
 * Sets the value of the instance variable in the object to the value.
 */
public void setAttributeValueInObject(Object domainObject,Object attributeValue) throws DescriptorException {
  ((SDODataObject)domainObject).setInternal(property,attributeValue,false);
}"
68705,"private boolean isAllowedInSequence(Property property){
  if (null == property) {
    return false;
  }
  if (property.isReadOnly()) {
    return false;
  }
  if (dataObject._getHelperContext().getXSDHelper().isAttribute(property)) {
    throw SDOException.sequenceAttributePropertyNotSupported(property.getName());
  }
  if (property.isOpenContent() && !dataObject.getType().isOpen()) {
    return false;
  }
  if (property.isMany()) {
    return true;
  }
  if (dataObject.isSet(property)) {
    throw SDOException.sequenceDuplicateSettingNotSupportedForComplexSingleObject(getIndexForProperty(property),property.getName());
  }
  return true;
}","private boolean isAllowedInSequence(Property property){
  if (null == property) {
    return false;
  }
  if (property.isReadOnly()) {
    return false;
  }
  if (((SDOType)dataObject.getType()).getHelperContext().getXSDHelper().isAttribute(property)) {
    throw SDOException.sequenceAttributePropertyNotSupported(property.getName());
  }
  if (property.isOpenContent() && !dataObject.getType().isOpen()) {
    return false;
  }
  if (property.isMany()) {
    return true;
  }
  if (dataObject.isSet(property)) {
    throw SDOException.sequenceDuplicateSettingNotSupportedForComplexSingleObject(getIndexForProperty(property),property.getName());
  }
  return true;
}"
68706,"/** 
 * INTERNAL: Get the XMLDescriptor associated with this Type or generate a new one.
 */
public XMLDescriptor getXmlDescriptor(List namespaceResolvers){
  if (!isDataType() && (xmlDescriptor == null)) {
    xmlDescriptor=new XMLDescriptor();
    xmlDescriptor.setSequencedObject(isSequenced);
    NamespaceResolver nr=new NamespaceResolver();
    if (namespaceResolvers != null) {
      for (int i=0; i < namespaceResolvers.size(); i++) {
        NamespaceResolver nextNR=(NamespaceResolver)namespaceResolvers.get(i);
        if (nextNR != null) {
          for (int j=0, size=nextNR.getNamespaces().size(); j < size; j++) {
            Namespace nextNamespace=(Namespace)nextNR.getNamespaces().get(j);
            if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
              String newPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).addNamespace(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
              nr.put(newPrefix,nextNamespace.getNamespaceURI());
            }
          }
        }
      }
    }
    if ((getBaseTypes() != null) && (getBaseTypes().size() > 0)) {
      SDOType baseType=(SDOType)getBaseTypes().get(0);
      if (!baseType.isDataType) {
        NamespaceResolver parentNR=baseType.getXmlDescriptor().getNonNullNamespaceResolver();
        if (parentNR != null) {
          for (int i=0; i < parentNR.getNamespaces().size(); i++) {
            Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
            if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
              nr.put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
            }
          }
        }
      }
    }
    xmlDescriptor.setNamespaceResolver(nr);
    if (getURI() != null) {
      String prefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(getURI());
      xmlDescriptor.getNamespaceResolver().put(prefix,getURI());
    }
    xmlDescriptor.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  return xmlDescriptor;
}","/** 
 * INTERNAL: Get the XMLDescriptor associated with this Type or generate a new one.
 */
public XMLDescriptor getXmlDescriptor(List namespaceResolvers){
  if (!isDataType() && (xmlDescriptor == null)) {
    xmlDescriptor=new XMLDescriptor();
    xmlDescriptor.setSequencedObject(isSequenced);
    NamespaceResolver nr=new NamespaceResolver();
    if (namespaceResolvers != null) {
      for (int i=0; i < namespaceResolvers.size(); i++) {
        NamespaceResolver nextNR=(NamespaceResolver)namespaceResolvers.get(i);
        if (nextNR != null) {
          for (int j=0, size=nextNR.getNamespaces().size(); j < size; j++) {
            Namespace nextNamespace=(Namespace)nextNR.getNamespaces().get(j);
            if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
              String newPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).addNamespace(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
              nr.put(newPrefix,nextNamespace.getNamespaceURI());
            }
          }
        }
      }
    }
    xmlDescriptor.setNamespaceResolver(nr);
    if (getURI() != null) {
      String prefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(getURI());
      xmlDescriptor.getNamespaceResolver().put(prefix,getURI());
    }
    xmlDescriptor.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  return xmlDescriptor;
}"
68707,"private void setElementPropertyValue(){
  Property currentProperty=(Property)currentProperties.pop();
  boolean simple=true;
  if (lastEvent == END_ELEMENT) {
    simple=false;
  }
 else {
    if (depth > currentDataObjects.size()) {
      simple=true;
    }
 else {
      DataObject nextDO=(DataObject)currentDataObjects.peek();
      if (nextDO.getInstanceProperties().size() > 0) {
        simple=false;
      }
 else {
        currentDataObjects.pop();
      }
    }
    depth--;
  }
  lastEvent=END_ELEMENT;
  if (simple && (!isInCharacterBlock || (currentBuffer.length() == 0))) {
    return;
  }
  DataObject currentDataObject=(DataObject)currentDataObjects.peek();
  if (currentProperty != null) {
    Object value=null;
    if (simple) {
      value=currentBuffer.toString();
      ((SDOProperty)currentProperty).setType(SDOConstants.SDO_STRING);
      ((SDOProperty)currentProperty).setContainment(false);
    }
 else {
      value=currentDataObject;
      currentDataObjects.pop();
      depth--;
      if (currentDataObjects.isEmpty()) {
        currentDataObject=null;
      }
 else {
        currentDataObject=(DataObject)currentDataObjects.peek();
      }
    }
    HelperContext aHelperContext=((SDODataObject)currentDataObject)._getHelperContext();
    if (currentSchemaType != null) {
      Type sdoType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(currentSchemaType);
      if (sdoType != null) {
        ((SDOProperty)currentProperty).setType(sdoType);
      }
      if ((currentProperty.getType() != null) && simple) {
        value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType(),currentSchemaType);
      }
      currentSchemaType=null;
    }
 else     if ((currentProperty.getType() != null) && currentProperty.getType().isDataType()) {
      value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType());
    }
    if (currentDataObject != null) {
      if (!simple) {
        parentRecord.getUnmarshaller().getUnmarshalListener().afterUnmarshal(value,currentDataObject);
      }
      if (currentProperty.isMany()) {
        currentDataObject.getList(currentProperty).add(value);
      }
 else {
        currentDataObject.set(currentProperty,value);
      }
    }
    currentBuffer.reset();
  }
}","private void setElementPropertyValue(){
  Property currentProperty=(Property)currentProperties.pop();
  boolean simple=true;
  if (lastEvent == END_ELEMENT) {
    simple=false;
  }
 else {
    if (depth > currentDataObjects.size()) {
      simple=true;
    }
 else {
      DataObject nextDO=(DataObject)currentDataObjects.peek();
      if (nextDO.getInstanceProperties().size() > 0) {
        simple=false;
      }
 else {
        currentDataObjects.pop();
      }
    }
    depth--;
  }
  lastEvent=END_ELEMENT;
  if (simple && (!isInCharacterBlock || (currentBuffer.length() == 0))) {
    return;
  }
  DataObject currentDataObject=(DataObject)currentDataObjects.peek();
  if (currentProperty != null) {
    Object value=null;
    if (simple) {
      value=currentBuffer.toString();
      ((SDOProperty)currentProperty).setType(SDOConstants.SDO_STRING);
      ((SDOProperty)currentProperty).setContainment(false);
    }
 else {
      value=currentDataObject;
      currentDataObjects.pop();
      depth--;
      if (currentDataObjects.isEmpty()) {
        currentDataObject=null;
      }
 else {
        currentDataObject=(DataObject)currentDataObjects.peek();
      }
    }
    HelperContext aHelperContext=((SDOType)currentDataObject.getType()).getHelperContext();
    if (currentSchemaType != null) {
      Type sdoType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getSDOTypeFromXSDType(currentSchemaType);
      if (sdoType != null) {
        ((SDOProperty)currentProperty).setType(sdoType);
      }
      if ((currentProperty.getType() != null) && simple) {
        value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType(),currentSchemaType);
      }
      currentSchemaType=null;
    }
 else     if ((currentProperty.getType() != null) && currentProperty.getType().isDataType()) {
      value=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue((String)value,currentProperty.getType());
    }
    if (currentDataObject != null) {
      if (!simple) {
        parentRecord.getUnmarshaller().getUnmarshalListener().afterUnmarshal(value,currentDataObject);
      }
      if (currentProperty.isMany()) {
        currentDataObject.getList(currentProperty).add(value);
      }
 else {
        currentDataObject.set(currentProperty,value);
      }
    }
    currentBuffer.reset();
  }
}"
68708,"private void processAttributes(Attributes atts,DataObject dataObject,boolean isRoot){
  int attributeSize=atts.getLength();
  for (int i=0; i < attributeSize; i++) {
    String stringValue=atts.getValue(i);
    String uri=atts.getURI(i);
    String attrName=atts.getLocalName(i);
    if ((atts.getQName(i) != null) && atts.getQName(i).startsWith(XMLConstants.XMLNS + ""String_Node_Str"")) {
    }
 else     if (isRoot && XMLConstants.SCHEMA_LOCATION.equals(attrName)) {
      getXmlDocument().setSchemaLocation(stringValue);
    }
 else     if (isRoot && XMLConstants.NO_NS_SCHEMA_LOCATION.equals(attrName)) {
      getXmlDocument().setNoNamespaceSchemaLocation(stringValue);
    }
 else     if (XMLConstants.SCHEMA_INSTANCE_URL.equals(uri) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(attrName)) {
    }
 else     if (SDOConstants.CHANGESUMMARY_REF.equals(attrName) && SDOConstants.SDO_URL.equals(uri)) {
      ((SDODataObject)dataObject)._setSdoRef(stringValue);
    }
 else {
      HelperContext aHelperContext=((SDODataObject)dataObject)._getHelperContext();
      Property prop=aHelperContext.getXSDHelper().getGlobalProperty(uri,attrName,false);
      if (prop != null) {
        Object convertedValue=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue(stringValue,prop.getType());
        dataObject.set(prop,convertedValue);
      }
 else {
        Object convertedValue=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue(stringValue,SDOConstants.SDO_STRING);
        prop=defineNewSDOProperty(uri,attrName,false,SDOConstants.SDO_STRING);
        dataObject.set(prop,convertedValue);
      }
    }
  }
}","private void processAttributes(Attributes atts,DataObject dataObject,boolean isRoot){
  int attributeSize=atts.getLength();
  for (int i=0; i < attributeSize; i++) {
    String stringValue=atts.getValue(i);
    String uri=atts.getURI(i);
    String attrName=atts.getLocalName(i);
    if ((atts.getQName(i) != null) && atts.getQName(i).startsWith(XMLConstants.XMLNS + ""String_Node_Str"")) {
    }
 else     if (isRoot && XMLConstants.SCHEMA_LOCATION.equals(attrName)) {
      getXmlDocument().setSchemaLocation(stringValue);
    }
 else     if (isRoot && XMLConstants.NO_NS_SCHEMA_LOCATION.equals(attrName)) {
      getXmlDocument().setNoNamespaceSchemaLocation(stringValue);
    }
 else     if (XMLConstants.SCHEMA_INSTANCE_URL.equals(uri) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(attrName)) {
    }
 else     if (SDOConstants.CHANGESUMMARY_REF.equals(attrName) && SDOConstants.SDO_URL.equals(uri)) {
      ((SDODataObject)dataObject)._setSdoRef(stringValue);
    }
 else {
      HelperContext aHelperContext=((SDOType)dataObject.getType()).getHelperContext();
      Property prop=aHelperContext.getXSDHelper().getGlobalProperty(uri,attrName,false);
      if (prop != null) {
        Object convertedValue=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue(stringValue,prop.getType());
        dataObject.set(prop,convertedValue);
      }
 else {
        Object convertedValue=((SDODataHelper)aHelperContext.getDataHelper()).convertFromStringValue(stringValue,SDOConstants.SDO_STRING);
        prop=defineNewSDOProperty(uri,attrName,false,SDOConstants.SDO_STRING);
        dataObject.set(prop,convertedValue);
      }
    }
  }
}"
68709,"/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(nextXPath));
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(refValue));
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          unsetValueList=(List)XMLConversionManager.getDefaultXMLManager().convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(nextModifiedDO._getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          NodeList children=nextNode.getChildNodes();
          for (int p=0; p < children.getLength(); p++) {
            Node n=children.item(p);
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            Property nextProp=(Property)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    newList.add(targetDataObject.getDataObject(convertXPathToSDOPath(sdoRef)));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
    }
    initialize();
  }
}","/** 
 * @param target assumed to be non-null
 * @param parent may be null, indicating target is root object
 */
public void afterUnmarshal(Object target,Object parent){
  SDODataObject targetDataObject;
  try {
    targetDataObject=(SDODataObject)target;
  }
 catch (  ClassCastException ccex) {
    ((SDOChangeSummary)target).setRootDataObject((DataObject)parent);
    changeSummaries.add(target);
    return;
  }
  if (targetDataObject.getType().isSequenced()) {
    ((SDOSequence)(targetDataObject.getSequence())).afterUnmarshal();
  }
  if (parent == null) {
    SDOChangeSummary nextCS=null;
    XMLUnmarshaller unmarshaller=((SDOXMLHelper)aHelperContext.getXMLHelper()).getXmlContext().createUnmarshaller();
    for (int i=0; i < changeSummaries.size(); i++) {
      nextCS=(SDOChangeSummary)changeSummaries.get(i);
      nextCS.setLogging(nextCS.isLoggingMapping());
      List xpaths=nextCS.getCreatedXPaths();
      String nextXPath=null;
      SDODataObject nextCreatedDO=null;
      for (int j=0; j < xpaths.size(); j++) {
        nextXPath=(String)xpaths.get(j);
        nextCreatedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(nextXPath));
        if (nextCreatedDO != null) {
          nextCreatedDO._setCreated(true);
          nextCS.getOldContainers().remove(nextCreatedDO);
        }
 else {
          throw SDOException.errorProcessingXPath(nextXPath);
        }
      }
      nextCS.setCreatedXPaths(null);
      List modifiedDoms=nextCS.getModifiedDoms();
      Element nextNode=null;
      String refValue=null;
      SDODataObject nextModifiedDO;
      for (int j=0; j < modifiedDoms.size(); j++) {
        nextNode=(Element)modifiedDoms.get(j);
        refValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_REF);
        if ((refValue == null) || (refValue.length() == 0)) {
          throw SDOException.missingRefAttribute();
        }
        nextModifiedDO=(SDODataObject)targetDataObject.getDataObject(convertXPathToSDOPath(refValue));
        String unsetValue=nextNode.getAttributeNS(SDOConstants.SDO_URL,SDOConstants.CHANGESUMMARY_UNSET);
        List unsetValueList=new ArrayList();
        if ((unsetValue != null) && (unsetValue.length() > 0)) {
          unsetValueList=(List)XMLConversionManager.getDefaultXMLManager().convertObject(unsetValue,List.class);
        }
        if (nextModifiedDO != null) {
          nextModifiedDO._setModified(true);
          SDOCSUnmarshalListener listener=new SDOCSUnmarshalListener(((SDOType)nextModifiedDO.getType()).getHelperContext(),true);
          unmarshaller.setUnmarshalListener(listener);
          unmarshaller.getProperties().put(""String_Node_Str"",aHelperContext);
          unmarshaller.setUnmappedContentHandlerClass(SDOUnmappedContentHandler.class);
          Object unmarshalledNode=unmarshaller.unmarshal(nextNode,((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getJavaClass());
          DataObject unmarshalledDO=null;
          if (unmarshalledNode instanceof XMLRoot) {
            unmarshalledDO=(DataObject)((XMLRoot)unmarshalledNode).getObject();
          }
 else           if (unmarshalledNode instanceof DataObject) {
            unmarshalledDO=(DataObject)unmarshalledNode;
          }
          List modifiedProps=new ArrayList();
          NodeList children=nextNode.getChildNodes();
          for (int p=0; p < children.getLength(); p++) {
            Node n=children.item(p);
            if (n.getNodeType() == Node.ELEMENT_NODE) {
              String propName=n.getLocalName();
              Property nextProp=unmarshalledDO.getInstanceProperty(propName);
              if (nextProp == null) {
                nextProp=aHelperContext.getTypeHelper().getOpenContentProperty(n.getNamespaceURI(),propName);
              }
              if (!modifiedProps.contains(nextProp)) {
                modifiedProps.add(nextProp);
              }
            }
          }
          for (int k=0; k < modifiedProps.size(); k++) {
            Property nextProp=(Property)modifiedProps.get(k);
            if (!nextProp.getType().isDataType()) {
              if (nextProp.isMany()) {
                List originalValue=unmarshalledDO.getList(nextProp);
                List newList=new ArrayList();
                List toDelete=new ArrayList();
                List indexsToDelete=new ArrayList();
                for (int l=0; l < originalValue.size(); l++) {
                  SDODataObject nextInList=(SDODataObject)originalValue.get(l);
                  String sdoRef=nextInList._getSdoRef();
                  if (sdoRef != null) {
                    newList.add(targetDataObject.getDataObject(convertXPathToSDOPath(sdoRef)));
                  }
 else {
                    toDelete.add(nextInList);
                    indexsToDelete.add(new Integer(l));
                    newList.add(nextInList);
                  }
                }
                ListWrapper lw=((ListWrapper)nextModifiedDO.getList(nextProp));
                if (indexsToDelete.size() > 0) {
                  nextCS.pauseLogging();
                  for (int m=0; m < indexsToDelete.size(); m++) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    lw.add(toDeleteIndex,nextToDelete);
                  }
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,lw);
                  SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                  nextCS.resumeLogging();
                  nextModifiedDO._setModified(true);
                  for (int m=indexsToDelete.size() - 1; m >= 0; m--) {
                    int toDeleteIndex=((Integer)indexsToDelete.get(m)).intValue();
                    SDODataObject nextToDelete=(SDODataObject)toDelete.get(m);
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,nextToDelete);
                    }
                    nextToDelete.resetChanges();
                    lw.remove(toDeleteIndex);
                  }
                }
                nextCS.getOriginalElements().put(lw,newList);
              }
 else {
                SDODataObject value=(SDODataObject)unmarshalledDO.getDataObject(nextProp);
                if (value != null) {
                  String sdoRef=value._getSdoRef();
                  if (sdoRef != null) {
                    nextModifiedDO._setModified(true);
                  }
 else {
                    value._setChangeSummary(nextCS);
                    nextModifiedDO._setModified(true);
                    nextCS.pauseLogging();
                    boolean wasSet=nextModifiedDO.isSet(nextProp);
                    Object existingValue=nextModifiedDO.get(nextProp);
                    Sequence nextModifiedDOSequence=nextModifiedDO.getSequence();
                    int settingIdx=-1;
                    if (nextModifiedDOSequence != null) {
                      settingIdx=((SDOSequence)nextModifiedDOSequence).getIndexForProperty(nextProp);
                    }
                    value._setContainmentPropertyName(null);
                    value._setContainer(null);
                    nextModifiedDO.set(nextProp,value);
                    nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
                    SDOSequence nextSeq=((SDOSequence)nextCS.getOriginalSequences().get(nextModifiedDO));
                    if (nextSeq != null) {
                      nextSeq.addSettingWithoutModifyingDataObject(-1,nextProp,value);
                    }
                    nextCS.resumeLogging();
                    nextModifiedDO._setModified(true);
                    value.resetChanges();
                    value.delete();
                    if (wasSet) {
                      nextModifiedDO.set(nextProp,existingValue,false);
                      if (settingIdx != -1) {
                        ((SDOSequence)nextModifiedDO.getSequence()).addSettingWithoutModifyingDataObject(settingIdx,nextProp,existingValue);
                      }
                    }
 else {
                      nextModifiedDO.unset(nextProp);
                    }
                  }
                }
 else {
                  nextModifiedDO._setModified(true);
                  nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
                }
              }
            }
 else {
              nextModifiedDO._setModified(true);
              Object value=unmarshalledDO.get(nextProp);
              if (nextProp.isMany()) {
                Property theProp=nextModifiedDO.getInstanceProperty(nextProp.getName());
                if (theProp == null) {
                  Property newProp=nextModifiedDO.defineOpenContentProperty(nextProp.getName(),new ArrayList(),nextProp.getType());
                  nextModifiedDO.set(newProp,new ArrayList());
                  theProp=newProp;
                }
                List lw=nextModifiedDO.getList(theProp.getName());
                nextCS.setPropertyInternal(nextModifiedDO,theProp,lw);
                nextCS.getOriginalElements().put(lw,((ListWrapper)value).getCurrentElements());
              }
 else {
                nextCS.setPropertyInternal(nextModifiedDO,nextProp,value);
              }
            }
          }
          for (int k=0; k < unsetValueList.size(); k++) {
            Property nextProp=unmarshalledDO.getInstanceProperty((String)unsetValueList.get(k));
            if (nextProp != null) {
              Object oldValue=null;
              if (nextProp.getType().isDataType() || nextProp.isMany()) {
                oldValue=unmarshalledDO.get(nextProp);
              }
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,oldValue);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
 else {
              nextProp=nextModifiedDO.getInstanceProperty((String)unsetValueList.get(k));
              nextModifiedDO._setModified(true);
              nextCS.setPropertyInternal(nextModifiedDO,nextProp,null);
              nextCS.unsetPropertyInternal(nextModifiedDO,nextProp);
            }
          }
        }
 else {
          throw SDOException.errorProcessingXPath(refValue);
        }
      }
      nextCS.setModifiedDoms(null);
      nextCS.setDeletedXPaths(null);
    }
    initialize();
  }
}"
68710,"public void addToSchemaType(ArrayList<Property> properties,TypeDefParticle compositor,ComplexType type,Schema schema){
  for (  Property next : properties) {
    if (next == null) {
      continue;
    }
    TypeDefParticle parentCompositor=compositor;
    boolean isChoice=(parentCompositor instanceof Choice);
    ComplexType parentType=type;
    if (!helper.isAnnotationPresent(next.getElement(),XmlTransient.class)) {
      if (!isChoice && helper.isAnnotationPresent(next.getElement(),XmlElementWrapper.class)) {
        XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(next.getElement(),XmlElementWrapper.class);
        Element wrapperElement=new Element();
        wrapperElement.setName(wrapper.name());
        wrapperElement.setMinOccurs(""String_Node_Str"");
        compositor.addElement(wrapperElement);
        ComplexType wrapperType=new ComplexType();
        Sequence wrapperSequence=new Sequence();
        wrapperType.setSequence(wrapperSequence);
        wrapperElement.setComplexType(wrapperType);
        parentType=wrapperType;
        parentCompositor=wrapperSequence;
      }
      if (helper.isAnnotationPresent(next.getElement(),XmlAttribute.class)) {
        Attribute attribute=new Attribute();
        QName attributeName=next.getSchemaName();
        attribute.setName(attributeName.getLocalPart());
        JavaClass javaType=next.getType();
        if (next.getGenericType() != null) {
          javaType=(JavaClass)next.getGenericType();
        }
        String typeName=null;
        TypeInfo info=(TypeInfo)typeInfo.get(next.getType().getQualifiedName());
        if (info != null) {
          if (!info.isComplexType()) {
            typeName=info.getSimpleType().getName();
          }
        }
 else {
          if (helper.isAnnotationPresent(next.getElement(),XmlID.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (helper.isAnnotationPresent(next.getElement(),XmlIDREF.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else {
            QName schemaType=next.getSchemaType();
            if (schemaType == null) {
              schemaType=getSchemaTypeFor(javaType);
            }
            if (schemaType != null) {
              typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart();
            }
 else {
              typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
            }
          }
        }
        if (isCollectionType(next)) {
          SimpleType localType=new SimpleType();
          org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
          list.setItemType(typeName);
          localType.setList(list);
          attribute.setSimpleType(localType);
        }
 else {
          if (typeName != null && !typeName.contains(""String_Node_Str"")) {
            if (info.getSchema() == schema) {
              String prefix=getPrefixForNamespace(schema.getTargetNamespace(),schema.getNamespaceResolver());
              if (prefix != null) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
          attribute.setType(typeName);
        }
        if (!attributeName.getNamespaceURI().equals(""String_Node_Str"")) {
          Schema attributeSchema=this.getSchemaForNamespace(attributeName.getNamespaceURI());
          if (attributeSchema.getTopLevelAttributes().get(attribute.getName()) == null) {
            attributeSchema.getTopLevelAttributes().put(attribute.getName(),attribute);
          }
          if (schema.getImports().get(attributeSchema.getName()) == null) {
            Import schemaImport=new Import();
            schemaImport.setNamespace(attributeSchema.getTargetNamespace());
            schemaImport.setSchemaLocation(attributeSchema.getName());
            schema.getImports().put(schemaImport.getSchemaLocation(),schemaImport);
            schema.getNamespaceResolver().put(schema.getNamespaceResolver().generatePrefix(),attributeSchema.getTargetNamespace());
          }
          Attribute reference=new Attribute();
          String prefix=getPrefixForNamespace(attributeSchema.getTargetNamespace(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(attribute.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + attribute.getName());
          }
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(reference);
          }
 else {
            parentType.getOrderedAttributes().add(reference);
          }
        }
 else {
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(attribute);
          }
 else {
            parentType.getOrderedAttributes().add(attribute);
          }
        }
      }
 else       if (helper.isAnnotationPresent(next.getElement(),XmlAnyAttribute.class)) {
        AnyAttribute anyAttribute=new AnyAttribute();
        anyAttribute.setProcessContents(AnyAttribute.LAX);
        if (type.getSimpleContent() != null) {
          SimpleContent content=type.getSimpleContent();
          content.getRestriction().setAnyAttribute(anyAttribute);
        }
 else {
          type.setAnyAttribute(anyAttribute);
        }
      }
 else       if (next.isChoice()) {
        Choice choice=new Choice();
        ArrayList<Property> choiceProperties=(ArrayList<Property>)((ChoiceProperty)next).getChoiceProperties();
        addToSchemaType(choiceProperties,choice,parentType,schema);
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addChoice(choice);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addChoice(choice);
        }
      }
 else       if (next.isAny()) {
        Any any=new Any();
        AnyProperty anyProp=(AnyProperty)next;
        if (anyProp.isLax()) {
          any.setProcessContents(""String_Node_Str"");
        }
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addAny(any);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addAny(any);
        }
      }
 else       if (!helper.isAnnotationPresent(next.getElement(),XmlValue.class)) {
        Element element=new Element();
        element.setMinOccurs(next.isRequired() ? ""String_Node_Str"" : ""String_Node_Str"");
        QName elementName=next.getSchemaName();
        JavaClass javaType=next.getType();
        boolean isCollectionType=isCollectionType(next);
        if (isCollectionType) {
          JavaClass gType=next.getGenericType();
          if (gType != null && gType.hasActualTypeArguments()) {
            Object[] params=gType.getActualTypeArguments().toArray();
            javaType=(JavaClass)params[0];
          }
        }
        element.setName(elementName.getLocalPart());
        TypeInfo info=(TypeInfo)typeInfo.get(javaType.getQualifiedName());
        String typeName=null;
        boolean isComplexType=false;
        if (info != null) {
          if (helper.isAnnotationPresent(next.getElement(),XmlID.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (helper.isAnnotationPresent(next.getElement(),XmlIDREF.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else {
            isComplexType=info.isComplexType();
            if (info.isComplexType()) {
              typeName=info.getComplexType().getName();
            }
 else {
              typeName=info.getSimpleType().getName();
            }
          }
          if (typeName == null) {
            if (!info.hasRootElement()) {
              if (info.isComplexType()) {
                element.setComplexType(info.getComplexType());
              }
 else {
                element.setSimpleType(info.getSimpleType());
              }
            }
          }
          if (info.getSchema() != schema) {
            if (schema.getImports().get(info.getSchema().getName()) == null) {
              Import schemaImport=new Import();
              schemaImport.setSchemaLocation(info.getSchema().getName());
              schemaImport.setNamespace(info.getSchema().getTargetNamespace());
              schema.getImports().put(schemaImport.getSchemaLocation(),schemaImport);
              if (schemaImport.getNamespace() != null) {
                schema.getNamespaceResolver().put(schema.getNamespaceResolver().generatePrefix(),schemaImport.getNamespace());
              }
              String prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),schema.getNamespaceResolver());
              if (prefix != null && !typeName.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
        }
 else {
          QName schemaType=next.getSchemaType();
          if (schemaType == null) {
            schemaType=getSchemaTypeFor(javaType);
          }
          if (schemaType != null) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart();
          }
        }
        if (typeName != null && !typeName.contains(""String_Node_Str"")) {
          if (info.getSchema() == schema) {
            String prefix=getPrefixForNamespace(schema.getTargetNamespace(),schema.getNamespaceResolver());
            if (prefix != null) {
              typeName=prefix + ""String_Node_Str"" + typeName;
            }
          }
        }
        if (isCollectionType) {
          if (helper.isAnnotationPresent(next.getElement(),XmlList.class)) {
            if (isComplexType) {
            }
            SimpleType localSimpleType=new SimpleType();
            org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
            list.setItemType(typeName);
            localSimpleType.setList(list);
            element.setSimpleType(localSimpleType);
          }
 else {
            element.setMaxOccurs(""String_Node_Str"");
            element.setType(typeName);
          }
        }
 else {
          element.setType(typeName);
        }
        if (!elementName.getNamespaceURI().equals(""String_Node_Str"")) {
          Element reference=new Element();
          reference.setMinOccurs(element.getMinOccurs());
          reference.setMaxOccurs(element.getMaxOccurs());
          Schema attributeSchema=this.getSchemaForNamespace(elementName.getNamespaceURI());
          if (attributeSchema.getTopLevelElements().get(element.getName()) == null) {
            element.setMinOccurs(null);
            element.setMaxOccurs(null);
            attributeSchema.getTopLevelElements().put(element.getName(),element);
          }
          if (attributeSchema != schema && schema.getImports().get(attributeSchema.getName()) == null) {
            Import schemaImport=new Import();
            schemaImport.setNamespace(attributeSchema.getTargetNamespace());
            schemaImport.setSchemaLocation(attributeSchema.getName());
            schema.getImports().put(schemaImport.getSchemaLocation(),schemaImport);
            schema.getNamespaceResolver().put(schema.getNamespaceResolver().generatePrefix(),attributeSchema.getTargetNamespace());
          }
          String prefix=getPrefixForNamespace(attributeSchema.getTargetNamespace(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(element.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + element.getName());
          }
          parentCompositor.addElement(reference);
        }
 else {
          parentCompositor.addElement(element);
        }
      }
    }
  }
}","public void addToSchemaType(ArrayList<Property> properties,TypeDefParticle compositor,ComplexType type,Schema schema){
  for (  Property next : properties) {
    if (next == null) {
      continue;
    }
    TypeDefParticle parentCompositor=compositor;
    boolean isChoice=(parentCompositor instanceof Choice);
    ComplexType parentType=type;
    if (!helper.isAnnotationPresent(next.getElement(),XmlTransient.class)) {
      if (!isChoice && helper.isAnnotationPresent(next.getElement(),XmlElementWrapper.class)) {
        XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(next.getElement(),XmlElementWrapper.class);
        Element wrapperElement=new Element();
        wrapperElement.setName(wrapper.name());
        wrapperElement.setMinOccurs(""String_Node_Str"");
        compositor.addElement(wrapperElement);
        ComplexType wrapperType=new ComplexType();
        Sequence wrapperSequence=new Sequence();
        wrapperType.setSequence(wrapperSequence);
        wrapperElement.setComplexType(wrapperType);
        parentType=wrapperType;
        parentCompositor=wrapperSequence;
      }
      if (helper.isAnnotationPresent(next.getElement(),XmlAttribute.class)) {
        Attribute attribute=new Attribute();
        QName attributeName=next.getSchemaName();
        attribute.setName(attributeName.getLocalPart());
        JavaClass javaType=next.getType();
        if (next.getGenericType() != null) {
          javaType=(JavaClass)next.getGenericType();
        }
        String typeName=null;
        TypeInfo info=(TypeInfo)typeInfo.get(next.getType().getQualifiedName());
        if (info != null) {
          if (!info.isComplexType()) {
            typeName=info.getSimpleType().getName();
          }
        }
 else {
          if (helper.isAnnotationPresent(next.getElement(),XmlID.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (helper.isAnnotationPresent(next.getElement(),XmlIDREF.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else {
            QName schemaType=next.getSchemaType();
            if (schemaType == null) {
              schemaType=getSchemaTypeFor(javaType);
            }
            if (schemaType != null) {
              typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart();
            }
 else {
              typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
            }
          }
        }
        if (isCollectionType(next)) {
          SimpleType localType=new SimpleType();
          org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
          list.setItemType(typeName);
          localType.setList(list);
          attribute.setSimpleType(localType);
        }
 else {
          if (typeName != null && !typeName.contains(""String_Node_Str"")) {
            if (info.getSchema() == schema) {
              String prefix=getPrefixForNamespace(schema.getTargetNamespace(),schema.getNamespaceResolver());
              if (prefix != null) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
          attribute.setType(typeName);
        }
        if (!attributeName.getNamespaceURI().equals(""String_Node_Str"")) {
          Schema attributeSchema=this.getSchemaForNamespace(attributeName.getNamespaceURI());
          if (attributeSchema.getTopLevelAttributes().get(attribute.getName()) == null) {
            attributeSchema.getTopLevelAttributes().put(attribute.getName(),attribute);
          }
          if (!importExists(schema,attributeSchema.getName())) {
            Import schemaImport=new Import();
            schemaImport.setNamespace(attributeSchema.getTargetNamespace());
            schemaImport.setSchemaLocation(attributeSchema.getName());
            schema.getImports().add(schemaImport);
            schema.getNamespaceResolver().put(schema.getNamespaceResolver().generatePrefix(),attributeSchema.getTargetNamespace());
          }
          Attribute reference=new Attribute();
          String prefix=getPrefixForNamespace(attributeSchema.getTargetNamespace(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(attribute.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + attribute.getName());
          }
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(reference);
          }
 else {
            parentType.getOrderedAttributes().add(reference);
          }
        }
 else {
          if (parentType.getSimpleContent() != null) {
            parentType.getSimpleContent().getExtension().getOrderedAttributes().add(attribute);
          }
 else {
            parentType.getOrderedAttributes().add(attribute);
          }
        }
      }
 else       if (helper.isAnnotationPresent(next.getElement(),XmlAnyAttribute.class)) {
        AnyAttribute anyAttribute=new AnyAttribute();
        anyAttribute.setProcessContents(AnyAttribute.LAX);
        if (type.getSimpleContent() != null) {
          SimpleContent content=type.getSimpleContent();
          content.getRestriction().setAnyAttribute(anyAttribute);
        }
 else {
          type.setAnyAttribute(anyAttribute);
        }
      }
 else       if (next.isChoice()) {
        Choice choice=new Choice();
        ArrayList<Property> choiceProperties=(ArrayList<Property>)((ChoiceProperty)next).getChoiceProperties();
        addToSchemaType(choiceProperties,choice,parentType,schema);
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addChoice(choice);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addChoice(choice);
        }
      }
 else       if (next.isAny()) {
        Any any=new Any();
        AnyProperty anyProp=(AnyProperty)next;
        if (anyProp.isLax()) {
          any.setProcessContents(""String_Node_Str"");
        }
        if (parentCompositor instanceof Sequence) {
          ((Sequence)parentCompositor).addAny(any);
        }
 else         if (parentCompositor instanceof Choice) {
          ((Choice)parentCompositor).addAny(any);
        }
      }
 else       if (!helper.isAnnotationPresent(next.getElement(),XmlValue.class)) {
        Element element=new Element();
        element.setMinOccurs(next.isRequired() ? ""String_Node_Str"" : ""String_Node_Str"");
        QName elementName=next.getSchemaName();
        JavaClass javaType=next.getType();
        boolean isCollectionType=isCollectionType(next);
        if (isCollectionType) {
          JavaClass gType=next.getGenericType();
          if (gType != null && gType.hasActualTypeArguments()) {
            Object[] params=gType.getActualTypeArguments().toArray();
            javaType=(JavaClass)params[0];
          }
        }
        element.setName(elementName.getLocalPart());
        TypeInfo info=(TypeInfo)typeInfo.get(javaType.getQualifiedName());
        String typeName=null;
        boolean isComplexType=false;
        if (info != null) {
          if (helper.isAnnotationPresent(next.getElement(),XmlID.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else           if (helper.isAnnotationPresent(next.getElement(),XmlIDREF.class)) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"";
          }
 else {
            isComplexType=info.isComplexType();
            if (info.isComplexType()) {
              typeName=info.getComplexType().getName();
            }
 else {
              typeName=info.getSimpleType().getName();
            }
          }
          if (typeName == null) {
            if (!info.hasRootElement()) {
              if (info.isComplexType()) {
                element.setComplexType(info.getComplexType());
              }
 else {
                element.setSimpleType(info.getSimpleType());
              }
            }
          }
          if (info.getSchema() != schema) {
            if (!importExists(schema,info.getSchema().getName())) {
              Import schemaImport=new Import();
              schemaImport.setSchemaLocation(info.getSchema().getName());
              schemaImport.setNamespace(info.getSchema().getTargetNamespace());
              schema.getImports().add(schemaImport);
              if (schemaImport.getNamespace() != null) {
                schema.getNamespaceResolver().put(schema.getNamespaceResolver().generatePrefix(),schemaImport.getNamespace());
              }
              String prefix=getPrefixForNamespace(info.getSchema().getTargetNamespace(),schema.getNamespaceResolver());
              if (prefix != null && !typeName.equals(""String_Node_Str"")) {
                typeName=prefix + ""String_Node_Str"" + typeName;
              }
            }
          }
        }
 else {
          QName schemaType=next.getSchemaType();
          if (schemaType == null) {
            schemaType=getSchemaTypeFor(javaType);
          }
          if (schemaType != null) {
            typeName=XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart();
          }
        }
        if (typeName != null && !typeName.contains(""String_Node_Str"")) {
          if (info.getSchema() == schema) {
            String prefix=getPrefixForNamespace(schema.getTargetNamespace(),schema.getNamespaceResolver());
            if (prefix != null) {
              typeName=prefix + ""String_Node_Str"" + typeName;
            }
          }
        }
        if (isCollectionType) {
          if (helper.isAnnotationPresent(next.getElement(),XmlList.class)) {
            if (isComplexType) {
            }
            SimpleType localSimpleType=new SimpleType();
            org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
            list.setItemType(typeName);
            localSimpleType.setList(list);
            element.setSimpleType(localSimpleType);
          }
 else {
            element.setMaxOccurs(""String_Node_Str"");
            element.setType(typeName);
          }
        }
 else {
          element.setType(typeName);
        }
        if (!elementName.getNamespaceURI().equals(""String_Node_Str"")) {
          Element reference=new Element();
          reference.setMinOccurs(element.getMinOccurs());
          reference.setMaxOccurs(element.getMaxOccurs());
          Schema attributeSchema=this.getSchemaForNamespace(elementName.getNamespaceURI());
          if (attributeSchema.getTopLevelElements().get(element.getName()) == null) {
            element.setMinOccurs(null);
            element.setMaxOccurs(null);
            attributeSchema.getTopLevelElements().put(element.getName(),element);
          }
          if (attributeSchema != schema && (!importExists(schema,attributeSchema.getName()))) {
            Import schemaImport=new Import();
            schemaImport.setNamespace(attributeSchema.getTargetNamespace());
            schemaImport.setSchemaLocation(attributeSchema.getName());
            schema.getImports().add(schemaImport);
            schema.getNamespaceResolver().put(schema.getNamespaceResolver().generatePrefix(),attributeSchema.getTargetNamespace());
          }
          String prefix=getPrefixForNamespace(attributeSchema.getTargetNamespace(),schema.getNamespaceResolver());
          if (prefix == null) {
            reference.setRef(element.getName());
          }
 else {
            reference.setRef(prefix + ""String_Node_Str"" + element.getName());
          }
          parentCompositor.addElement(reference);
        }
 else {
          parentCompositor.addElement(element);
        }
      }
    }
  }
}"
68711,"public void addGlobalElements(HashMap<QName,String> additionalElements){
  for (  QName next : additionalElements.keySet()) {
    String namespaceURI=next.getNamespaceURI();
    Schema targetSchema=getSchemaForNamespace(namespaceURI);
    Element element=new Element();
    element.setName(next.getLocalPart());
    JavaClass javaClass=helper.getJavaClass(additionalElements.get(next));
    QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
    if (schemaType != null) {
      element.setType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart());
    }
 else {
      TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
      if (type != null) {
        String typeName=null;
        if (type.isComplexType()) {
          typeName=type.getComplexType().getName();
        }
 else {
          typeName=type.getSimpleType().getName();
        }
        if (type.getClassNamespace().equals(namespaceURI)) {
          element.setType(schemaType.getLocalPart());
        }
 else {
          Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
          String complexTypeSchemaNS=complexTypeSchema.getTargetNamespace();
          if (complexTypeSchemaNS == null) {
            complexTypeSchemaNS=""String_Node_Str"";
          }
          if (targetSchema.getImports().get(complexTypeSchema.getName()) == null) {
            Import schemaImport=new Import();
            schemaImport.setNamespace(complexTypeSchema.getTargetNamespace());
            schemaImport.setSchemaLocation(complexTypeSchema.getName());
            targetSchema.getImports().put(schemaImport.getSchemaLocation(),schemaImport);
            if (!complexTypeSchemaNS.equals(""String_Node_Str"")) {
              targetSchema.getNamespaceResolver().put(targetSchema.getNamespaceResolver().generatePrefix(),complexTypeSchemaNS);
            }
          }
          String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchema.getTargetNamespace());
          element.setType(prefix + ""String_Node_Str"" + typeName);
        }
      }
    }
    targetSchema.addTopLevelElement(element);
    SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
    if (info == null) {
      info=new SchemaTypeInfo();
      info.setSchemaTypeName(schemaType);
      schemaTypeInfo.put(javaClass.getQualifiedName(),info);
    }
    info.getGlobalElementDeclarations().add(next);
  }
}","public void addGlobalElements(HashMap<QName,String> additionalElements){
  for (  QName next : additionalElements.keySet()) {
    String namespaceURI=next.getNamespaceURI();
    Schema targetSchema=getSchemaForNamespace(namespaceURI);
    Element element=new Element();
    element.setName(next.getLocalPart());
    JavaClass javaClass=helper.getJavaClass(additionalElements.get(next));
    QName schemaType=(QName)helper.getXMLToJavaTypeMap().get(javaClass.getRawName());
    if (schemaType != null) {
      element.setType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + schemaType.getLocalPart());
    }
 else {
      TypeInfo type=(TypeInfo)this.typeInfo.get(javaClass.getQualifiedName());
      if (type != null) {
        String typeName=null;
        if (type.isComplexType()) {
          typeName=type.getComplexType().getName();
        }
 else {
          typeName=type.getSimpleType().getName();
        }
        if (type.getClassNamespace().equals(namespaceURI)) {
          element.setType(schemaType.getLocalPart());
        }
 else {
          Schema complexTypeSchema=getSchemaForNamespace(type.getClassNamespace());
          String complexTypeSchemaNS=complexTypeSchema.getTargetNamespace();
          if (complexTypeSchemaNS == null) {
            complexTypeSchemaNS=""String_Node_Str"";
          }
          if (!importExists(targetSchema,complexTypeSchema.getName())) {
            Import schemaImport=new Import();
            schemaImport.setNamespace(complexTypeSchema.getTargetNamespace());
            schemaImport.setSchemaLocation(complexTypeSchema.getName());
            targetSchema.getImports().add(schemaImport);
            if (!complexTypeSchemaNS.equals(""String_Node_Str"")) {
              targetSchema.getNamespaceResolver().put(targetSchema.getNamespaceResolver().generatePrefix(),complexTypeSchemaNS);
            }
          }
          String prefix=targetSchema.getNamespaceResolver().resolveNamespaceURI(complexTypeSchema.getTargetNamespace());
          element.setType(prefix + ""String_Node_Str"" + typeName);
        }
      }
    }
    targetSchema.addTopLevelElement(element);
    SchemaTypeInfo info=this.schemaTypeInfo.get(javaClass.getQualifiedName());
    if (info == null) {
      info=new SchemaTypeInfo();
      info.setSchemaTypeName(schemaType);
      schemaTypeInfo.put(javaClass.getQualifiedName(),info);
    }
    info.getGlobalElementDeclarations().add(next);
  }
}"
68712,"public void addSchemaComponents(JavaClass myClass){
  String myClassName=myClass.getQualifiedName();
  Element rootElement=null;
  TypeInfo info=(TypeInfo)typeInfo.get(myClassName);
  SchemaTypeInfo schemaTypeInfo=new SchemaTypeInfo();
  schemaTypeInfo.setSchemaTypeName(new QName(info.getClassNamespace(),info.getSchemaTypeName()));
  this.schemaTypeInfo.put(myClass.getQualifiedName(),schemaTypeInfo);
  NamespaceInfo namespaceInfo=this.packageToNamespaceMappings.get(myClass.getPackage().getQualifiedName());
  Schema schema=getSchemaForNamespace(info.getClassNamespace());
  info.setSchema(schema);
  String typeName=info.getSchemaTypeName();
  String[] propOrder=info.getPropOrder();
  String pfx=""String_Node_Str"";
  Property valueField=null;
  if (helper.isAnnotationPresent(myClass,XmlRootElement.class)) {
    XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(myClass,XmlRootElement.class);
    rootElement=new Element();
    String elementName=rootElemAnnotation.name();
    if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
      if (myClassName.indexOf(""String_Node_Str"") != -1) {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('$') + 1));
      }
 else {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('.') + 1));
      }
      if (elementName.length() >= 3) {
        int idx=elementName.length() - 1;
        char ch=elementName.charAt(idx - 1);
        if (Character.isDigit(ch)) {
          char lastCh=Character.toUpperCase(elementName.charAt(idx));
          elementName=elementName.substring(0,idx) + lastCh;
        }
      }
    }
    rootElement.setName(elementName);
    String rootNamespace=rootElemAnnotation.namespace();
    if (rootNamespace.equals(""String_Node_Str"")) {
      getSchemaForNamespace(namespaceInfo.getNamespace()).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(namespaceInfo.getNamespace(),rootNamespace));
      rootNamespace=namespaceInfo.getNamespace();
    }
 else {
      getSchemaForNamespace(rootNamespace).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(rootNamespace,elementName));
    }
    Schema rootSchema=getSchemaForNamespace(rootNamespace);
    if (schema != rootSchema) {
      Import schemaImport=new Import();
      schemaImport.setNamespace(schema.getTargetNamespace());
      schemaImport.setSchemaLocation(schema.getName());
      rootSchema.getImports().put(schemaImport.getSchemaLocation(),schemaImport);
    }
    if (!info.getClassNamespace().equals(""String_Node_Str"")) {
      pfx=getPrefixForNamespace(info.getClassNamespace(),rootSchema.getNamespaceResolver());
      if (pfx == null) {
        pfx=rootSchema.getNamespaceResolver().generatePrefix();
        rootSchema.getNamespaceResolver().put(pfx,info.getClassNamespace());
      }
      pfx+=""String_Node_Str"";
    }
  }
  ArrayList<String> propertyNames=info.getPropertyNames();
  if (info.isEnumerationType() || (propertyNames.size() == 1 && helper.isAnnotationPresent(info.getProperties().get(propertyNames.get(0)).getElement(),XmlValue.class))) {
    SimpleType type=new SimpleType();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setSimpleType(type);
      }
    }
 else {
      type.setName(typeName);
      schema.addTopLevelSimpleTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName restrictionType=null;
    Restriction restriction=new Restriction();
    if (info.isEnumerationType()) {
      restrictionType=((EnumTypeInfo)info).getRestrictionBase();
      restriction.setEnumerationFacets(this.getEnumerationFacetsFor((EnumTypeInfo)info));
      restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + restrictionType.getLocalPart());
      type.setRestriction(restriction);
    }
 else {
      valueField=info.getProperties().get(propertyNames.get(0));
      QName baseType=getSchemaTypeFor(valueField.getType());
      if (helper.isAnnotationPresent(valueField.getElement(),XmlList.class)) {
        List list=new List();
        list.setItemType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setList(list);
      }
 else {
        if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
          baseType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
        }
        restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setRestriction(restriction);
      }
    }
    info.setSimpleType(type);
  }
 else   if ((valueField=this.getXmlValueFieldForSimpleContent(info.getPropertyList())) != null) {
    ComplexType type=new ComplexType();
    SimpleContent content=new SimpleContent();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
    }
 else {
      type.setName(typeName);
      schema.addTopLevelComplexTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName extensionType=getSchemaTypeFor(valueField.getType());
    if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
      extensionType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
    }
    Extension extension=new Extension();
    extension.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + extensionType.getLocalPart());
    content.setExtension(extension);
    type.setSimpleContent(content);
    info.setComplexType(type);
    info.setPropOrder(propOrder);
  }
 else {
    ComplexType type=new ComplexType();
    JavaClass superClass=(JavaClass)myClass.getSuperclass();
    TypeInfo parentTypeInfo=this.typeInfo.get(superClass.getQualifiedName());
    Extension extension=null;
    if (parentTypeInfo != null) {
      extension=new Extension();
      String parentPrefix=getPrefixForNamespace(parentTypeInfo.getClassNamespace(),namespaceInfo.getNamespaceResolver());
      if (parentPrefix != null) {
        extension.setBaseType(parentPrefix + ""String_Node_Str"" + parentTypeInfo.getSchemaTypeName());
      }
 else {
        extension.setBaseType(parentTypeInfo.getSchemaTypeName());
      }
      ComplexContent content=new ComplexContent();
      content.setExtension(extension);
      type.setComplexContent(content);
    }
    TypeDefParticle compositor=null;
    if (propOrder.length == 0) {
      if (extension != null) {
        compositor=new All();
        extension.setAll((All)compositor);
      }
 else {
        compositor=new All();
        type.setAll((All)compositor);
      }
    }
 else {
      compositor=new Sequence();
      if (extension != null) {
        extension.setSequence((Sequence)compositor);
      }
 else {
        type.setSequence((Sequence)compositor);
      }
    }
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
 else {
      type.setName(typeName);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
      schema.addTopLevelComplexTypes(type);
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
    info.setPropOrder(propOrder);
  }
}","public void addSchemaComponents(JavaClass myClass){
  String myClassName=myClass.getQualifiedName();
  Element rootElement=null;
  TypeInfo info=(TypeInfo)typeInfo.get(myClassName);
  SchemaTypeInfo schemaTypeInfo=new SchemaTypeInfo();
  schemaTypeInfo.setSchemaTypeName(new QName(info.getClassNamespace(),info.getSchemaTypeName()));
  this.schemaTypeInfo.put(myClass.getQualifiedName(),schemaTypeInfo);
  NamespaceInfo namespaceInfo=this.packageToNamespaceMappings.get(myClass.getPackage().getQualifiedName());
  Schema schema=getSchemaForNamespace(info.getClassNamespace());
  info.setSchema(schema);
  String typeName=info.getSchemaTypeName();
  String[] propOrder=info.getPropOrder();
  String pfx=""String_Node_Str"";
  Property valueField=null;
  if (helper.isAnnotationPresent(myClass,XmlRootElement.class)) {
    XmlRootElement rootElemAnnotation=(XmlRootElement)helper.getAnnotation(myClass,XmlRootElement.class);
    rootElement=new Element();
    String elementName=rootElemAnnotation.name();
    if (elementName.equals(""String_Node_Str"") || elementName.equals(""String_Node_Str"")) {
      if (myClassName.indexOf(""String_Node_Str"") != -1) {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('$') + 1));
      }
 else {
        elementName=Introspector.decapitalize(myClassName.substring(myClassName.lastIndexOf('.') + 1));
      }
      if (elementName.length() >= 3) {
        int idx=elementName.length() - 1;
        char ch=elementName.charAt(idx - 1);
        if (Character.isDigit(ch)) {
          char lastCh=Character.toUpperCase(elementName.charAt(idx));
          elementName=elementName.substring(0,idx) + lastCh;
        }
      }
    }
    rootElement.setName(elementName);
    String rootNamespace=rootElemAnnotation.namespace();
    if (rootNamespace.equals(""String_Node_Str"")) {
      getSchemaForNamespace(namespaceInfo.getNamespace()).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(namespaceInfo.getNamespace(),rootNamespace));
      rootNamespace=namespaceInfo.getNamespace();
    }
 else {
      getSchemaForNamespace(rootNamespace).addTopLevelElement(rootElement);
      schemaTypeInfo.getGlobalElementDeclarations().add(new QName(rootNamespace,elementName));
    }
    Schema rootSchema=getSchemaForNamespace(rootNamespace);
    if (schema != rootSchema) {
      Import schemaImport=new Import();
      schemaImport.setNamespace(schema.getTargetNamespace());
      schemaImport.setSchemaLocation(schema.getName());
      rootSchema.getImports().add(schemaImport);
    }
    if (!info.getClassNamespace().equals(""String_Node_Str"")) {
      pfx=getPrefixForNamespace(info.getClassNamespace(),rootSchema.getNamespaceResolver());
      if (pfx == null) {
        pfx=rootSchema.getNamespaceResolver().generatePrefix();
        rootSchema.getNamespaceResolver().put(pfx,info.getClassNamespace());
      }
      pfx+=""String_Node_Str"";
    }
  }
  ArrayList<String> propertyNames=info.getPropertyNames();
  if (info.isEnumerationType() || (propertyNames.size() == 1 && helper.isAnnotationPresent(info.getProperties().get(propertyNames.get(0)).getElement(),XmlValue.class))) {
    SimpleType type=new SimpleType();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setSimpleType(type);
      }
    }
 else {
      type.setName(typeName);
      schema.addTopLevelSimpleTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName restrictionType=null;
    Restriction restriction=new Restriction();
    if (info.isEnumerationType()) {
      restrictionType=((EnumTypeInfo)info).getRestrictionBase();
      restriction.setEnumerationFacets(this.getEnumerationFacetsFor((EnumTypeInfo)info));
      restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + restrictionType.getLocalPart());
      type.setRestriction(restriction);
    }
 else {
      valueField=info.getProperties().get(propertyNames.get(0));
      QName baseType=getSchemaTypeFor(valueField.getType());
      if (helper.isAnnotationPresent(valueField.getElement(),XmlList.class)) {
        List list=new List();
        list.setItemType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setList(list);
      }
 else {
        if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
          XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
          baseType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
        }
        restriction.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + baseType.getLocalPart());
        type.setRestriction(restriction);
      }
    }
    info.setSimpleType(type);
  }
 else   if ((valueField=this.getXmlValueFieldForSimpleContent(info.getPropertyList())) != null) {
    ComplexType type=new ComplexType();
    SimpleContent content=new SimpleContent();
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
    }
 else {
      type.setName(typeName);
      schema.addTopLevelComplexTypes(type);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
    }
    QName extensionType=getSchemaTypeFor(valueField.getType());
    if (helper.isAnnotationPresent(valueField.getElement(),XmlSchemaType.class)) {
      XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(valueField.getElement(),XmlSchemaType.class);
      extensionType=new QName(XMLConstants.SCHEMA_INSTANCE_URL,schemaType.name());
    }
    Extension extension=new Extension();
    extension.setBaseType(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + extensionType.getLocalPart());
    content.setExtension(extension);
    type.setSimpleContent(content);
    info.setComplexType(type);
    info.setPropOrder(propOrder);
  }
 else {
    ComplexType type=new ComplexType();
    JavaClass superClass=(JavaClass)myClass.getSuperclass();
    TypeInfo parentTypeInfo=this.typeInfo.get(superClass.getQualifiedName());
    Extension extension=null;
    if (parentTypeInfo != null) {
      extension=new Extension();
      String parentPrefix=getPrefixForNamespace(parentTypeInfo.getClassNamespace(),namespaceInfo.getNamespaceResolver());
      if (parentPrefix != null) {
        extension.setBaseType(parentPrefix + ""String_Node_Str"" + parentTypeInfo.getSchemaTypeName());
      }
 else {
        extension.setBaseType(parentTypeInfo.getSchemaTypeName());
      }
      ComplexContent content=new ComplexContent();
      content.setExtension(extension);
      type.setComplexContent(content);
    }
    TypeDefParticle compositor=null;
    if (propOrder.length == 0) {
      if (extension != null) {
        compositor=new All();
        extension.setAll((All)compositor);
      }
 else {
        compositor=new All();
        type.setAll((All)compositor);
      }
    }
 else {
      compositor=new Sequence();
      if (extension != null) {
        extension.setSequence((Sequence)compositor);
      }
 else {
        type.setSequence((Sequence)compositor);
      }
    }
    if (typeName.equals(""String_Node_Str"")) {
      if (rootElement != null) {
        rootElement.setComplexType(type);
      }
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
 else {
      type.setName(typeName);
      if (rootElement != null) {
        rootElement.setType(pfx + type.getName());
      }
      schema.addTopLevelComplexTypes(type);
      info.setComplexType(type);
      info.setCompositor(compositor);
    }
    info.setPropOrder(propOrder);
  }
}"
68713,"/** 
 * According to the requirement, correspondingly perform isset, unset or set function.
 * @param frag              one string fragment in the path
 * @param path              the String representation of path based access
 * @param caller            the DataObject that pass path information in
 * @param value             the value to be set as the target property's value
 * @param lastSlashIndex    the last index of '/' in the path string
 * @param convertValue     boolean used for set if we should convert the value
 * @param _case             an int value indicating what kind of operation to use: set, isset or unset.
 * @return                  true if operation is isset and property's value is set, otherwise false.
 */
private boolean setIsSetUnSet(String frag,String path,DataObject caller,Object value,int lastSlashIndex,boolean convertValue,int _case){
  int indexOfDot=frag.lastIndexOf('.');
  int indexOfOpenBracket=frag.lastIndexOf('[');
  int indexOfCloseBracket=frag.lastIndexOf(']');
  int numInLastProperty=getNumberInFrag(frag,indexOfDot,indexOfOpenBracket,indexOfCloseBracket);
  String lastPropertyName=getPropertyNameInFrag(frag,numInLastProperty,indexOfDot,indexOfOpenBracket);
  DataObject lastDataObject;
  if (-1 < lastSlashIndex) {
    lastDataObject=(SDODataObject)get(path.substring(0,lastSlashIndex),caller);
  }
 else {
    lastDataObject=caller;
  }
  Property lastProperty=lastDataObject.getInstanceProperty(lastPropertyName);
switch (_case) {
case SET:
    if (lastProperty == null) {
      lastProperty=((SDODataObject)lastDataObject).defineOpenContentProperty(lastPropertyName,value);
    }
  if (lastProperty != null) {
    set(lastProperty,lastDataObject,numInLastProperty,value,convertValue);
  }
return false;
case ISSET:
if (lastProperty == null) {
return false;
}
return isSet(lastProperty,lastDataObject);
case UNSET:
if (lastProperty == null) {
return false;
}
unSet(lastProperty,lastDataObject,numInLastProperty);
return false;
default :
return false;
}
}","/** 
 * According to the requirement, correspondingly perform isset, unset or set function.
 * @param frag              one string fragment in the path
 * @param path              the String representation of path based access
 * @param caller            the DataObject that pass path information in
 * @param value             the value to be set as the target property's value
 * @param lastSlashIndex    the last index of '/' in the path string
 * @param convertValue     boolean used for set if we should convert the value
 * @param _case             an int value indicating what kind of operation to use: set, isset or unset.
 * @return                  true if operation is isset and property's value is set, otherwise false.
 */
private boolean setIsSetUnSet(String frag,String path,DataObject caller,Object value,int lastSlashIndex,boolean convertValue,int _case){
  int indexOfDot=frag.lastIndexOf('.');
  int indexOfOpenBracket=frag.lastIndexOf('[');
  int indexOfCloseBracket=frag.lastIndexOf(']');
  int numInLastProperty=getNumberInFrag(frag,indexOfDot,indexOfOpenBracket,indexOfCloseBracket);
  String lastPropertyName=getPropertyNameInFrag(frag,numInLastProperty,indexOfDot,indexOfOpenBracket);
  DataObject lastDataObject;
  if (-1 < lastSlashIndex) {
    lastDataObject=(SDODataObject)get(path.substring(0,lastSlashIndex),caller);
    if (lastDataObject == null) {
      throw SDOException.cannotPerformOperationOnProperty(lastPropertyName,path);
    }
  }
 else {
    lastDataObject=caller;
  }
  Property lastProperty=lastDataObject.getInstanceProperty(lastPropertyName);
switch (_case) {
case SET:
    if (lastProperty == null) {
      lastProperty=((SDODataObject)lastDataObject).defineOpenContentProperty(lastPropertyName,value);
    }
  if (lastProperty != null) {
    set(lastProperty,lastDataObject,numInLastProperty,value,convertValue);
  }
return false;
case ISSET:
if (lastProperty == null) {
return false;
}
return isSet(lastProperty,lastDataObject);
case UNSET:
if (lastProperty == null) {
return false;
}
unSet(lastProperty,lastDataObject,numInLastProperty);
return false;
default :
return false;
}
}"
68714,"private void addTypeToListIfNeeded(Type sourceType,Type targetType){
  if ((targetType.getURI() != null) && !targetType.getURI().equals(SDOConstants.SDO_URL) && !targetType.getURI().equals(SDOConstants.SDOJAVA_URL)&& !targetType.getURI().equals(SDOConstants.SDOXML_URL)) {
    boolean alreadyGenerated=allTypes.contains(targetType);
    String schemaLocation=null;
    if (namespaceToSchemaLocation != null) {
      schemaLocation=(String)namespaceToSchemaLocation.get(targetType.getURI());
      if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
        if (!alreadyGenerated) {
          allTypes.add(targetType);
        }
      }
 else {
        Import theImport=(Import)generatedSchema.getImports().get(schemaLocation);
        if (theImport == null) {
          theImport=new Import();
          theImport.setSchemaLocation(schemaLocation);
          theImport.setNamespace(targetType.getURI());
          generatedSchema.getImports().put(schemaLocation,theImport);
        }
      }
    }
 else     if (schemaLocationResolver != null) {
      schemaLocation=schemaLocationResolver.resolveSchemaLocation(sourceType,targetType);
      if (schemaLocation != null) {
        if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
          Include include=(Include)generatedSchema.getIncludes().get(schemaLocation);
          if (include == null) {
            include=new Include();
            include.setSchemaLocation(schemaLocation);
            generatedSchema.getIncludes().put(schemaLocation,include);
            allTypes.remove(targetType);
          }
        }
 else {
          Import theImport=(Import)generatedSchema.getImports().get(schemaLocation);
          if (theImport == null) {
            theImport=new Import();
            theImport.setSchemaLocation(schemaLocation);
            theImport.setNamespace(targetType.getURI());
            generatedSchema.getImports().put(schemaLocation,theImport);
          }
        }
      }
 else {
        if (!alreadyGenerated) {
          if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
            allTypes.add(targetType);
          }
        }
      }
    }
 else {
      if (!alreadyGenerated) {
        if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
          allTypes.add(targetType);
        }
      }
    }
  }
}","private void addTypeToListIfNeeded(Type sourceType,Type targetType){
  if ((targetType.getURI() != null) && !targetType.getURI().equals(SDOConstants.SDO_URL) && !targetType.getURI().equals(SDOConstants.SDOJAVA_URL)&& !targetType.getURI().equals(SDOConstants.SDOXML_URL)) {
    boolean alreadyGenerated=allTypes.contains(targetType);
    String schemaLocation=null;
    if (namespaceToSchemaLocation != null) {
      schemaLocation=(String)namespaceToSchemaLocation.get(targetType.getURI());
      if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
        if (!alreadyGenerated) {
          allTypes.add(targetType);
        }
      }
 else {
        if (!importExists(generatedSchema.getImports(),schemaLocation)) {
          Import theImport=new Import();
          theImport.setSchemaLocation(schemaLocation);
          theImport.setNamespace(targetType.getURI());
          generatedSchema.getImports().add(theImport);
        }
      }
    }
 else     if (schemaLocationResolver != null) {
      schemaLocation=schemaLocationResolver.resolveSchemaLocation(sourceType,targetType);
      if (schemaLocation != null) {
        if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
          if (!importExists(generatedSchema.getIncludes(),schemaLocation)) {
            Include include=new Include();
            include.setSchemaLocation(schemaLocation);
            generatedSchema.getIncludes().add(include);
            allTypes.remove(targetType);
          }
        }
 else {
          if (!importExists(generatedSchema.getImports(),schemaLocation)) {
            Import theImport=new Import();
            theImport.setSchemaLocation(schemaLocation);
            theImport.setNamespace(targetType.getURI());
            generatedSchema.getImports().add(theImport);
          }
        }
      }
 else {
        if (!alreadyGenerated) {
          if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
            allTypes.add(targetType);
          }
        }
      }
    }
 else {
      if (!alreadyGenerated) {
        if (targetType.getURI().equals(generatedSchema.getTargetNamespace())) {
          allTypes.add(targetType);
        }
      }
    }
  }
}"
68715,"private void processIncludes(Map includes){
  if ((includes == null) || (includes.size() == 0) || !isProcessImports()) {
    return;
  }
  Iterator keysIter=includes.keySet().iterator();
  while (keysIter.hasNext()) {
    String key=(String)keysIter.next();
    Include nextInclude=(Include)includes.get(key);
    processInclude(nextInclude);
  }
}","private void processIncludes(java.util.List includes){
  if ((includes == null) || (includes.size() == 0) || !isProcessImports()) {
    return;
  }
  Iterator iter=includes.iterator();
  while (iter.hasNext()) {
    Include nextInclude=(Include)iter.next();
    processInclude(nextInclude);
  }
}"
68716,"private void processImports(Map imports){
  if ((imports == null) || (imports.size() == 0) || !isProcessImports()) {
    return;
  }
  Iterator keysIter=imports.keySet().iterator();
  while (keysIter.hasNext()) {
    String key=(String)keysIter.next();
    Import nextImport=(Import)imports.get(key);
    processImport(nextImport);
  }
}","private void processImports(java.util.List imports){
  if ((imports == null) || (imports.size() == 0) || !isProcessImports()) {
    return;
  }
  Iterator iter=imports.iterator();
  while (iter.hasNext()) {
    Import nextImport=(Import)iter.next();
    processImport(nextImport);
  }
}"
68717,"/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  try {
    XMLContext context=new XMLContext(getSchemaProject());
    XMLUnmarshaller unmarshaller=context.createUnmarshaller();
    Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
    Map imports=schema.getImports();
    Iterator keysIter=imports.keySet().iterator();
    while (keysIter.hasNext()) {
      String key=(String)keysIter.next();
      Import nextImport=(Import)imports.get(key);
      Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextImport.setSchema(importedSchema);
      }
    }
    Map includes=schema.getIncludes();
    Iterator includesIter=includes.keySet().iterator();
    while (includesIter.hasNext()) {
      String key=(String)includesIter.next();
      Include nextInclude=(Include)includes.get(key);
      Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextInclude.setSchema(includedSchema);
      }
    }
    return schema;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  try {
    XMLContext context=new XMLContext(getSchemaProject());
    XMLUnmarshaller unmarshaller=context.createUnmarshaller();
    Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
    java.util.List imports=schema.getImports();
    Iterator iter=imports.iterator();
    while (iter.hasNext()) {
      Import nextImport=(Import)iter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextImport.setSchema(importedSchema);
      }
    }
    java.util.List includes=schema.getIncludes();
    Iterator includesIter=includes.iterator();
    while (includesIter.hasNext()) {
      Include nextInclude=(Include)includesIter.next();
      Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
      if (referencedSchema != null) {
        Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
        nextInclude.setSchema(includedSchema);
      }
    }
    return schema;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
68718,"private XMLDescriptor buildSchemaDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Schema.class);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.setNamespaceResolver(namespaceResolver);
  XMLCompositeCollectionMapping importsMapping=new XMLCompositeCollectionMapping();
  importsMapping.setReferenceClass(Import.class);
  importsMapping.setAttributeName(""String_Node_Str"");
  importsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  importsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(importsMapping);
  XMLCompositeCollectionMapping includesMapping=new XMLCompositeCollectionMapping();
  includesMapping.setReferenceClass(Include.class);
  includesMapping.setAttributeName(""String_Node_Str"");
  includesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  includesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(includesMapping);
  XMLDirectMapping targetNamespaceMapping=new XMLDirectMapping();
  targetNamespaceMapping.setAttributeName(""String_Node_Str"");
  targetNamespaceMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(targetNamespaceMapping);
  XMLDirectMapping defaultNamespaceMapping=new XMLDirectMapping();
  defaultNamespaceMapping.setAttributeName(""String_Node_Str"");
  XMLField xmlField=new XMLField();
  xmlField.setXPath(""String_Node_Str"");
  xmlField.getXPathFragment().setNamespaceURI(XMLConstants.XMLNS_URL);
  defaultNamespaceMapping.setField(xmlField);
  descriptor.addMapping(defaultNamespaceMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  XMLCompositeCollectionMapping attributeGroupsMapping=new XMLCompositeCollectionMapping();
  attributeGroupsMapping.setReferenceClass(AttributeGroup.class);
  attributeGroupsMapping.setAttributeName(""String_Node_Str"");
  attributeGroupsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  attributeGroupsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(attributeGroupsMapping);
  XMLCompositeCollectionMapping groupsMapping=new XMLCompositeCollectionMapping();
  groupsMapping.setReferenceClass(Group.class);
  groupsMapping.setAttributeName(""String_Node_Str"");
  groupsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  groupsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(groupsMapping);
  ObjectTypeConverter converter=new ObjectTypeConverter();
  converter.addConversionValue(""String_Node_Str"",new Boolean(false));
  converter.addConversionValue(""String_Node_Str"",new Boolean(true));
  converter.setFieldClassification(String.class);
  XMLDirectMapping elementFormDefaultMapping=new XMLDirectMapping();
  elementFormDefaultMapping.setAttributeName(""String_Node_Str"");
  elementFormDefaultMapping.setXPath(""String_Node_Str"");
  elementFormDefaultMapping.setNullValue(new Boolean(false));
  elementFormDefaultMapping.setConverter(converter);
  descriptor.addMapping(elementFormDefaultMapping);
  XMLDirectMapping attributeFormDefaultMapping=new XMLDirectMapping();
  attributeFormDefaultMapping.setAttributeName(""String_Node_Str"");
  attributeFormDefaultMapping.setXPath(""String_Node_Str"");
  attributeFormDefaultMapping.setNullValue(new Boolean(false));
  attributeFormDefaultMapping.setConverter(converter);
  descriptor.addMapping(attributeFormDefaultMapping);
  XMLCompositeCollectionMapping topLevelComplexTypesMapping=new XMLCompositeCollectionMapping();
  topLevelComplexTypesMapping.setReferenceClass(ComplexType.class);
  topLevelComplexTypesMapping.setAttributeName(""String_Node_Str"");
  topLevelComplexTypesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelComplexTypesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelComplexTypesMapping);
  XMLCompositeCollectionMapping topLevelElementsMapping=new XMLCompositeCollectionMapping();
  topLevelElementsMapping.setReferenceClass(Element.class);
  topLevelElementsMapping.setAttributeName(""String_Node_Str"");
  topLevelElementsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelElementsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelElementsMapping);
  XMLCompositeCollectionMapping topLevelSimpleTypesMapping=new XMLCompositeCollectionMapping();
  topLevelSimpleTypesMapping.setReferenceClass(SimpleType.class);
  topLevelSimpleTypesMapping.setAttributeName(""String_Node_Str"");
  topLevelSimpleTypesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelSimpleTypesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelSimpleTypesMapping);
  XMLCompositeCollectionMapping topLevelAttributesMapping=new XMLCompositeCollectionMapping();
  topLevelAttributesMapping.setReferenceClass(Attribute.class);
  topLevelAttributesMapping.setAttributeName(""String_Node_Str"");
  topLevelAttributesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelAttributesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelAttributesMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  descriptor.setNamespaceResolver(namespaceResolver);
  return descriptor;
}","private XMLDescriptor buildSchemaDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Schema.class);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.setNamespaceResolver(namespaceResolver);
  XMLCompositeCollectionMapping importsMapping=new XMLCompositeCollectionMapping();
  importsMapping.setReferenceClass(Import.class);
  importsMapping.setAttributeName(""String_Node_Str"");
  importsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(importsMapping);
  XMLCompositeCollectionMapping includesMapping=new XMLCompositeCollectionMapping();
  includesMapping.setReferenceClass(Include.class);
  includesMapping.setAttributeName(""String_Node_Str"");
  includesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(includesMapping);
  XMLDirectMapping targetNamespaceMapping=new XMLDirectMapping();
  targetNamespaceMapping.setAttributeName(""String_Node_Str"");
  targetNamespaceMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(targetNamespaceMapping);
  XMLDirectMapping defaultNamespaceMapping=new XMLDirectMapping();
  defaultNamespaceMapping.setAttributeName(""String_Node_Str"");
  XMLField xmlField=new XMLField();
  xmlField.setXPath(""String_Node_Str"");
  xmlField.getXPathFragment().setNamespaceURI(XMLConstants.XMLNS_URL);
  defaultNamespaceMapping.setField(xmlField);
  descriptor.addMapping(defaultNamespaceMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  XMLCompositeCollectionMapping attributeGroupsMapping=new XMLCompositeCollectionMapping();
  attributeGroupsMapping.setReferenceClass(AttributeGroup.class);
  attributeGroupsMapping.setAttributeName(""String_Node_Str"");
  attributeGroupsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  attributeGroupsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(attributeGroupsMapping);
  XMLCompositeCollectionMapping groupsMapping=new XMLCompositeCollectionMapping();
  groupsMapping.setReferenceClass(Group.class);
  groupsMapping.setAttributeName(""String_Node_Str"");
  groupsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  groupsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(groupsMapping);
  ObjectTypeConverter converter=new ObjectTypeConverter();
  converter.addConversionValue(""String_Node_Str"",new Boolean(false));
  converter.addConversionValue(""String_Node_Str"",new Boolean(true));
  converter.setFieldClassification(String.class);
  XMLDirectMapping elementFormDefaultMapping=new XMLDirectMapping();
  elementFormDefaultMapping.setAttributeName(""String_Node_Str"");
  elementFormDefaultMapping.setXPath(""String_Node_Str"");
  elementFormDefaultMapping.setNullValue(new Boolean(false));
  elementFormDefaultMapping.setConverter(converter);
  descriptor.addMapping(elementFormDefaultMapping);
  XMLDirectMapping attributeFormDefaultMapping=new XMLDirectMapping();
  attributeFormDefaultMapping.setAttributeName(""String_Node_Str"");
  attributeFormDefaultMapping.setXPath(""String_Node_Str"");
  attributeFormDefaultMapping.setNullValue(new Boolean(false));
  attributeFormDefaultMapping.setConverter(converter);
  descriptor.addMapping(attributeFormDefaultMapping);
  XMLCompositeCollectionMapping topLevelComplexTypesMapping=new XMLCompositeCollectionMapping();
  topLevelComplexTypesMapping.setReferenceClass(ComplexType.class);
  topLevelComplexTypesMapping.setAttributeName(""String_Node_Str"");
  topLevelComplexTypesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelComplexTypesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelComplexTypesMapping);
  XMLCompositeCollectionMapping topLevelElementsMapping=new XMLCompositeCollectionMapping();
  topLevelElementsMapping.setReferenceClass(Element.class);
  topLevelElementsMapping.setAttributeName(""String_Node_Str"");
  topLevelElementsMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelElementsMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelElementsMapping);
  XMLCompositeCollectionMapping topLevelSimpleTypesMapping=new XMLCompositeCollectionMapping();
  topLevelSimpleTypesMapping.setReferenceClass(SimpleType.class);
  topLevelSimpleTypesMapping.setAttributeName(""String_Node_Str"");
  topLevelSimpleTypesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelSimpleTypesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelSimpleTypesMapping);
  XMLCompositeCollectionMapping topLevelAttributesMapping=new XMLCompositeCollectionMapping();
  topLevelAttributesMapping.setReferenceClass(Attribute.class);
  topLevelAttributesMapping.setAttributeName(""String_Node_Str"");
  topLevelAttributesMapping.useMapClass(java.util.HashMap.class,""String_Node_Str"");
  topLevelAttributesMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(topLevelAttributesMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  descriptor.setNamespaceResolver(namespaceResolver);
  return descriptor;
}"
68719,"public Schema(){
  namespaceResolver=new NamespaceResolver();
  imports=new HashMap();
  includes=new HashMap();
  topLevelSimpleTypes=new HashMap();
  topLevelComplexTypes=new HashMap();
  topLevelElements=new HashMap();
  topLevelAttributes=new HashMap();
  attributesMap=new HashMap();
  attributeGroups=new HashMap();
  groups=new HashMap();
}","public Schema(){
  namespaceResolver=new NamespaceResolver();
  imports=new ArrayList();
  includes=new ArrayList();
  topLevelSimpleTypes=new HashMap();
  topLevelComplexTypes=new HashMap();
  topLevelElements=new HashMap();
  topLevelAttributes=new HashMap();
  attributesMap=new HashMap();
  attributeGroups=new HashMap();
  groups=new HashMap();
}"
68720,"public Map getImports(){
  return imports;
}","public java.util.List getImports(){
  return imports;
}"
68721,"public void setImports(Map imports){
  this.imports=imports;
}","public void setImports(java.util.List imports){
  this.imports=imports;
}"
68722,"protected Group getGroupFromReferencedSchemas(String uri,String localName){
  Group globalGroup=null;
  Iterator iter=getIncludes().values().iterator();
  while (iter.hasNext() && (globalGroup == null)) {
    Schema includedSchema=((Include)iter.next()).getSchema();
    globalGroup=includedSchema.getGroup(uri,localName);
  }
  if (globalGroup == null) {
    iter=getImports().values().iterator();
    while (iter.hasNext() && (globalGroup == null)) {
      Schema importedSchema=((Import)iter.next()).getSchema();
      globalGroup=importedSchema.getGroup(uri,localName);
    }
  }
  return globalGroup;
}","protected Group getGroupFromReferencedSchemas(String uri,String localName){
  Group globalGroup=null;
  Iterator iter=getIncludes().iterator();
  while (iter.hasNext() && (globalGroup == null)) {
    Schema includedSchema=((Include)iter.next()).getSchema();
    globalGroup=includedSchema.getGroup(uri,localName);
  }
  if (globalGroup == null) {
    iter=getImports().iterator();
    while (iter.hasNext() && (globalGroup == null)) {
      Schema importedSchema=((Import)iter.next()).getSchema();
      globalGroup=importedSchema.getGroup(uri,localName);
    }
  }
  return globalGroup;
}"
68723,"protected AttributeGroup getAttributeGroupFromReferencedSchemas(String uri,String localName){
  AttributeGroup globalAttributeGroup=null;
  Iterator iter=getIncludes().values().iterator();
  while (iter.hasNext() && (globalAttributeGroup == null)) {
    Schema includedSchema=((Include)iter.next()).getSchema();
    globalAttributeGroup=includedSchema.getAttributeGroup(uri,localName);
  }
  if (globalAttributeGroup == null) {
    iter=getImports().values().iterator();
    while (iter.hasNext() && (globalAttributeGroup == null)) {
      Schema importedSchema=((Import)iter.next()).getSchema();
      globalAttributeGroup=importedSchema.getAttributeGroup(uri,localName);
    }
  }
  return globalAttributeGroup;
}","protected AttributeGroup getAttributeGroupFromReferencedSchemas(String uri,String localName){
  AttributeGroup globalAttributeGroup=null;
  Iterator iter=getIncludes().iterator();
  while (iter.hasNext() && (globalAttributeGroup == null)) {
    Schema includedSchema=((Include)iter.next()).getSchema();
    globalAttributeGroup=includedSchema.getAttributeGroup(uri,localName);
  }
  if (globalAttributeGroup == null) {
    iter=getImports().iterator();
    while (iter.hasNext() && (globalAttributeGroup == null)) {
      Schema importedSchema=((Import)iter.next()).getSchema();
      globalAttributeGroup=importedSchema.getAttributeGroup(uri,localName);
    }
  }
  return globalAttributeGroup;
}"
68724,"public Map getIncludes(){
  return includes;
}","public java.util.List getIncludes(){
  return includes;
}"
68725,"public void setIncludes(Map includes){
  this.includes=includes;
}","public void setIncludes(java.util.List includes){
  this.includes=includes;
}"
68726,"/** 
 * Return the namespace prefix associated with a namespace URI.
 * @param uri A namespace URI.
 * @return The prefix associated with the namespace URI.
 */
public String resolveNamespaceURI(String uri){
  Enumeration keys=namespaces.keys();
  String prefix;
  while (keys.hasMoreElements()) {
    prefix=(String)keys.nextElement();
    if (namespaces.getProperty(prefix).equals(uri)) {
      return prefix;
    }
  }
  if (uri != null) {
    if (uri.equalsIgnoreCase(XMLConstants.XMLNS_URL)) {
      return XMLConstants.XMLNS;
    }
 else     if (uri.equalsIgnoreCase(XMLConstants.XML_NAMESPACE_URL)) {
      return XMLConstants.XML_NAMESPACE_PREFIX;
    }
  }
  return null;
}","private String resolveNamespaceURI(Node node,String uri){
  if (null == node) {
    return null;
  }
  if (uri.equals(node.getNamespaceURI())) {
    return node.getPrefix();
  }
  NamedNodeMap namedNodeMap=node.getAttributes();
  if (null != namedNodeMap) {
    int namedNodeMapSize=namedNodeMap.getLength();
    for (int x=0; x < namedNodeMapSize; x++) {
      Node attr=namedNodeMap.item(x);
      if (XMLConstants.XMLNS_URL.equals(attr.getNamespaceURI())) {
        if (uri.equals(attr.getNodeValue())) {
          return attr.getLocalName();
        }
      }
    }
  }
  return resolveNamespaceURI(node.getParentNode(),uri);
}"
68727,"private String getNextPrefix(){
  return ""String_Node_Str"" + prefixCounter++;
}","private String getNextPrefix(){
  return BASE_PREFIX + prefixCounter++;
}"
68728,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,XMLDescriptor descriptor,boolean isXMLRoot){
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      XMLRoot root=(XMLRoot)object;
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    XMLRoot root=(XMLRoot)object;
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  AbstractSession session=null;
  if (descriptor != null) {
    session=xmlContext.getSession(object);
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this);
  }
 else   if (isXMLRoot) {
    String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class);
    marshalRecord.characters(value);
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,XMLDescriptor descriptor,boolean isXMLRoot){
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      XMLRoot root=(XMLRoot)object;
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    XMLRoot root=(XMLRoot)object;
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  AbstractSession session=null;
  if (descriptor != null) {
    session=xmlContext.getSession(object);
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,(AbstractSession)session,this);
  }
 else   if (isXMLRoot) {
    String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class);
    marshalRecord.characters(value);
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
68729,"/** 
 * INTERNAL: Convert the given object to an XML Document
 */
public Document objectToXML(Object object,XMLDescriptor descriptor,XMLRecord xmlRow,boolean isXMLRoot){
  Document document=null;
  NamespaceResolver resolver=new NamespaceResolver();
  this.copyNamespaces(descriptor.getNamespaceResolver(),resolver);
  boolean shouldCallSetAttributeNS=false;
  boolean isRootDocumentFragment=false;
  if (xmlRow != null) {
    isRootDocumentFragment=(xmlRow.getDOM().getNodeType() == Node.DOCUMENT_FRAGMENT_NODE);
  }
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootPrefix=null;
    if (xmlRow == null) {
      String recordName=((XMLRoot)object).getLocalName();
      if (xmlRootUri != null) {
        xmlRootPrefix=resolver.resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null) {
          xmlRootPrefix=resolver.generatePrefix();
          resolver.put(xmlRootPrefix,xmlRootUri);
        }
        recordName=xmlRootPrefix + ""String_Node_Str"" + recordName;
        shouldCallSetAttributeNS=true;
      }
      xmlRow=(XMLRecord)((XMLObjectBuilder)descriptor.getObjectBuilder()).createRecordFor(((XMLRoot)object).getObject(),xmlContext.getDocumentPreservationPolicy(xmlContext.getSession(descriptor)),recordName,xmlRootUri);
      xmlRow.setMarshaller(this);
      if (!isRootDocumentFragment) {
        if (shouldCallSetAttributeNS) {
          if (xmlRootPrefix != null) {
            ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + xmlRootPrefix,xmlRootUri);
          }
          shouldCallSetAttributeNS=false;
        }
      }
    }
    copyNamespaces(resolver,xmlRow.getNamespaceResolver());
    document=xmlRow.getDocument();
    Element docElement=document.getDocumentElement();
    xmlRow.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    boolean writeTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
    if (writeTypeAttribute && (descriptor.getSchemaReference() != null) && (descriptor.getSchemaReference().getSchemaContext() != null)) {
      ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      String typeValue=descriptor.getSchemaReference().getSchemaContext();
      typeValue=typeValue.substring(1);
      XMLField xsiTypefield=new XMLField(""String_Node_Str"");
      xsiTypefield.setNamespaceResolver(xmlRow.getNamespaceResolver());
      XPathEngine.getInstance().create(xsiTypefield,docElement,typeValue);
    }
    object=((XMLRoot)object).getObject();
  }
  XMLObjectBuilder bldr=(XMLObjectBuilder)descriptor.getObjectBuilder();
  xmlRow=(XMLRecord)bldr.buildRow(xmlRow,object,xmlContext.getSession(object),isXMLRoot);
  xmlRow.setMarshaller(this);
  if (shouldCallSetAttributeNS && !isRootDocumentFragment) {
    ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  document=xmlRow.getDocument();
  addSchemaLocations(document);
  return document;
}","private Document objectToXML(Object object,Node rootNode,XMLDescriptor descriptor,XMLRecord xmlRow,boolean isXMLRoot){
  Document document=null;
  NamespaceResolver resolver=new NamespaceResolver();
  resolver.setDOM(rootNode);
  this.copyNamespaces(descriptor.getNamespaceResolver(),resolver);
  boolean shouldCallSetAttributeNS=false;
  boolean isRootDocumentFragment=false;
  if (xmlRow != null) {
    isRootDocumentFragment=(xmlRow.getDOM().getNodeType() == Node.DOCUMENT_FRAGMENT_NODE);
  }
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootPrefix=null;
    if (xmlRow == null) {
      String recordName=((XMLRoot)object).getLocalName();
      if (xmlRootUri != null) {
        xmlRootPrefix=resolver.resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null) {
          xmlRootPrefix=resolver.generatePrefix();
          resolver.put(xmlRootPrefix,xmlRootUri);
          shouldCallSetAttributeNS=true;
        }
        recordName=xmlRootPrefix + ""String_Node_Str"" + recordName;
      }
      xmlRow=(XMLRecord)((XMLObjectBuilder)descriptor.getObjectBuilder()).createRecordFor(((XMLRoot)object).getObject(),xmlContext.getDocumentPreservationPolicy(xmlContext.getSession(descriptor)),recordName,xmlRootUri);
      xmlRow.setMarshaller(this);
      if (!isRootDocumentFragment) {
        if (shouldCallSetAttributeNS) {
          if (xmlRootPrefix != null) {
            ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + xmlRootPrefix,xmlRootUri);
          }
          shouldCallSetAttributeNS=false;
        }
      }
    }
    copyNamespaces(resolver,xmlRow.getNamespaceResolver());
    document=xmlRow.getDocument();
    Element docElement=document.getDocumentElement();
    xmlRow.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    boolean writeTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
    if (writeTypeAttribute && (descriptor.getSchemaReference() != null) && (descriptor.getSchemaReference().getSchemaContext() != null)) {
      ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      String typeValue=descriptor.getSchemaReference().getSchemaContext();
      typeValue=typeValue.substring(1);
      XMLField xsiTypefield=new XMLField(""String_Node_Str"");
      xsiTypefield.setNamespaceResolver(xmlRow.getNamespaceResolver());
      XPathEngine.getInstance().create(xsiTypefield,docElement,typeValue);
    }
    object=((XMLRoot)object).getObject();
  }
  XMLObjectBuilder bldr=(XMLObjectBuilder)descriptor.getObjectBuilder();
  xmlRow=(XMLRecord)bldr.buildRow(xmlRow,object,(AbstractSession)xmlContext.getSession(object),isXMLRoot);
  xmlRow.setMarshaller(this);
  if (shouldCallSetAttributeNS && !isRootDocumentFragment) {
    ((Element)xmlRow.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  document=xmlRow.getDocument();
  addSchemaLocations(document);
  return document;
}"
68730,"/** 
 * INTERNAL: Like ObjectToXML but is may also return a document fragment instead of a document in the case of a non-root object.
 */
protected Node objectToXMLNode(Object object,XMLDescriptor descriptor,boolean isXMLRoot) throws XMLMarshalException {
  AbstractSession session=xmlContext.getSession(descriptor);
  if ((session != null) && xmlContext.getDocumentPreservationPolicy(session).shouldPreserveDocument()) {
    XMLRecord xmlRow=null;
    if (!isXMLRoot) {
      xmlRow=(XMLRecord)((XMLObjectBuilder)descriptor.getObjectBuilder()).createRecordFor(object,xmlContext.getDocumentPreservationPolicy(session));
      xmlRow.setMarshaller(this);
      if (xmlRow.getDOM().getNodeType() == Node.ELEMENT_NODE) {
        addDescriptorNamespacesToXMLRecord(descriptor,xmlRow);
      }
    }
    Document doc=objectToXML(object,descriptor,xmlRow,isXMLRoot);
    if ((xmlRow != null) && (xmlRow.getDOM().getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)) {
      return xmlRow.getDOM();
    }
 else {
      return doc;
    }
  }
 else {
    MarshalRecord marshalRecord=new NodeRecord();
    marshalRecord.setMarshaller(this);
    marshal(object,marshalRecord,descriptor,isXMLRoot);
    return marshalRecord.getDocument();
  }
}","protected Node objectToXMLNode(Object object,Node rootNode,XMLDescriptor descriptor,boolean isXMLRoot) throws XMLMarshalException {
  AbstractSession session=xmlContext.getSession(descriptor);
  if ((session != null) && xmlContext.getDocumentPreservationPolicy(session).shouldPreserveDocument()) {
    XMLRecord xmlRow=null;
    if (!isXMLRoot) {
      xmlRow=(XMLRecord)((XMLObjectBuilder)descriptor.getObjectBuilder()).createRecordFor(object,xmlContext.getDocumentPreservationPolicy(session));
      xmlRow.setMarshaller(this);
      if (xmlRow.getDOM().getNodeType() == Node.ELEMENT_NODE) {
        addDescriptorNamespacesToXMLRecord(descriptor,xmlRow);
      }
    }
    Document doc=objectToXML(object,rootNode,descriptor,xmlRow,isXMLRoot);
    if ((xmlRow != null) && (xmlRow.getDOM().getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)) {
      return xmlRow.getDOM();
    }
 else {
      return doc;
    }
  }
 else {
    MarshalRecord marshalRecord=new NodeRecord();
    marshalRecord.setMarshaller(this);
    marshalRecord.getNamespaceResolver().setDOM(rootNode);
    marshal(object,marshalRecord,descriptor,isXMLRoot);
    return marshalRecord.getDocument();
  }
}"
68731,"public void setDOM(Element element){
  this.dom=element;
}","public void setDOM(Element element){
  this.dom=element;
  this.getNamespaceResolver().setDOM(element);
}"
68732,"/** 
 * INTERNAL: Given a DatabaseField, return the corresponding values from the document
 */
public Object getValuesIndicatingNoEntry(DatabaseField key,boolean shouldReturnNodes){
  XMLField field=convertToXMLField(key);
  NodeList nodeList=UnmarshalXPathEngine.getInstance().selectNodes(dom,field,field.getNamespaceResolver());
  if (null == nodeList) {
    return null;
  }
  int resultSize=nodeList.getLength();
  Vector result=new Vector(resultSize);
  if (resultSize == 0) {
    return result;
  }
  if (shouldReturnNodes) {
    for (int i=0; i < resultSize; i++) {
      result.add(nodeList.item(i));
    }
    return result;
  }
  Node firstNode=nodeList.item(0);
  if ((firstNode == null) || (firstNode.getNodeType() != Node.ELEMENT_NODE)) {
    if ((field).usesSingleNode() && (resultSize == 1)) {
      Node next=nodeList.item(0);
      if (next == null) {
        result.add(null);
      }
 else {
        Vector list=new Vector();
        String sourceObject=next.getNodeValue();
        StringTokenizer tokenizer=new StringTokenizer(sourceObject,""String_Node_Str"");
        while (tokenizer.hasMoreElements()) {
          String token=tokenizer.nextToken();
          Object nextItem=convertValue((Element)next.getParentNode(),field,token);
          list.add(nextItem);
        }
        return list;
      }
    }
    for (int x=0; x < resultSize; x++) {
      Node next=nodeList.item(x);
      if (next == null) {
        result.add(null);
      }
 else {
        result.add(getValueFromElement((Element)next.getParentNode(),next,field));
      }
    }
  }
 else {
    for (int x=0; x < resultSize; x++) {
      result.add(buildNestedRow((Element)nodeList.item(x)));
    }
  }
  return result;
}","/** 
 * INTERNAL: Given a DatabaseField, return the corresponding values from the document
 */
public Object getValuesIndicatingNoEntry(DatabaseField key,boolean shouldReturnNodes){
  XMLField field=convertToXMLField(key);
  NodeList nodeList=UnmarshalXPathEngine.getInstance().selectNodes(dom,field,field.getNamespaceResolver());
  if (null == nodeList) {
    return null;
  }
  int resultSize=nodeList.getLength();
  Vector result=new Vector(resultSize);
  if (resultSize == 0) {
    return result;
  }
  if (shouldReturnNodes) {
    for (int i=0; i < resultSize; i++) {
      result.add(nodeList.item(i));
    }
    return result;
  }
  Node firstNode=nodeList.item(0);
  if ((firstNode == null) || (firstNode.getNodeType() != Node.ELEMENT_NODE)) {
    if (field.usesSingleNode() && (resultSize == 1)) {
      Node next=nodeList.item(0);
      if (next == null) {
        result.add(null);
      }
 else {
        Vector list=new Vector();
        String sourceObject=next.getNodeValue();
        StringTokenizer tokenizer=new StringTokenizer(sourceObject,""String_Node_Str"");
        while (tokenizer.hasMoreElements()) {
          String token=tokenizer.nextToken();
          Object nextItem=convertValue((Element)next.getParentNode(),field,token);
          list.add(nextItem);
        }
        return list;
      }
    }
    for (int x=0; x < resultSize; x++) {
      Node next=nodeList.item(x);
      if (next == null) {
        result.add(null);
      }
 else {
        result.add(getValueFromElement((Element)next.getParentNode(),next,field));
      }
    }
  }
 else {
    for (int x=0; x < resultSize; x++) {
      result.add(buildNestedRow((Element)nodeList.item(x)));
    }
  }
  return result;
}"
68733,"/** 
 * Set the Node that the object will be marshalled to.
 * @param writer The marshal target.
 */
public void setDOM(Node dom){
  nodes=new Stack();
  if (dom.getNodeType() == Node.DOCUMENT_NODE) {
    document=(Document)dom;
  }
 else   if ((dom.getNodeType() == Node.ELEMENT_NODE) || (dom.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)) {
    document=dom.getOwnerDocument();
    nodes.push(dom);
  }
 else {
    throw XMLMarshalException.marshalException(null);
  }
}","/** 
 * Set the Node that the object will be marshalled to.
 * @param writer The marshal target.
 */
public void setDOM(Node dom){
  nodes=new Stack();
  if (dom.getNodeType() == Node.DOCUMENT_NODE) {
    document=(Document)dom;
  }
 else   if ((dom.getNodeType() == Node.ELEMENT_NODE) || (dom.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)) {
    document=dom.getOwnerDocument();
    nodes.push(dom);
    getNamespaceResolver().setDOM(dom);
  }
 else {
    throw XMLMarshalException.marshalException(null);
  }
}"
68734,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XMLRootComplexTestCases.class);
  suite.addTestSuite(XMLRootComplexDifferentPrefixWithDRTestCases.class);
  suite.addTestSuite(XMLRootComplexNoPrefixTestCases.class);
  suite.addTestSuite(XMLRootComplexNoNamespaceResolverTestCases.class);
  suite.addTestSuite(XMLRootComplexNullUriTestCases.class);
  suite.addTestSuite(XMLRootComplexNoNRWithPrefixTestCases.class);
  suite.addTestSuite(XMLRootComplexDifferentPrefixTestCases.class);
  suite.addTestSuite(XMLRootSimpleTestCases.class);
  suite.addTestSuite(XMLRootNoPrefixTestCases.class);
  suite.addTestSuite(XMLRootNullUriTestCases.class);
  suite.addTestSuite(XMLRootNullSchemaReferenceTestCases.class);
  suite.addTestSuite(XMLRootMultipleMarshalTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(MarshalToNodeTestCases.class);
  suite.addTestSuite(XMLRootComplexTestCases.class);
  suite.addTestSuite(XMLRootComplexDifferentPrefixWithDRTestCases.class);
  suite.addTestSuite(XMLRootComplexNoPrefixTestCases.class);
  suite.addTestSuite(XMLRootComplexNoNamespaceResolverTestCases.class);
  suite.addTestSuite(XMLRootComplexNullUriTestCases.class);
  suite.addTestSuite(XMLRootComplexNoNRWithPrefixTestCases.class);
  suite.addTestSuite(XMLRootComplexDifferentPrefixTestCases.class);
  suite.addTestSuite(XMLRootSimpleTestCases.class);
  suite.addTestSuite(XMLRootNoPrefixTestCases.class);
  suite.addTestSuite(XMLRootNullUriTestCases.class);
  suite.addTestSuite(XMLRootNullSchemaReferenceTestCases.class);
  suite.addTestSuite(XMLRootMultipleMarshalTestCases.class);
  return suite;
}"
68735,"/** 
 * INTERNAL: This function is implemented by SDOType.setOpen() in a mapping setGet/SetMethodName call
 * @param openContentPropertiesWithXMLRoots
 */
public void _setOpenContentPropertiesWithXMLRoots(List openContentPropertiesWithXMLRoots){
  for (int i=0, size=openContentPropertiesWithXMLRoots.size(); i < size; i++) {
    Object next=openContentPropertiesWithXMLRoots.get(i);
    String propertyName=null;
    String propertyUri=null;
    Object value=null;
    Type theType=null;
    if (next instanceof XMLRoot) {
      XMLRoot nextXMLRoot=(XMLRoot)next;
      value=nextXMLRoot.getObject();
      propertyName=nextXMLRoot.getLocalName();
      propertyUri=nextXMLRoot.getNamespaceURI();
      if (value instanceof DataObject) {
        theType=((DataObject)value).getType();
      }
 else {
        theType=aHelperContext.getTypeHelper().getType(value.getClass());
      }
    }
 else     if (next instanceof DataObject) {
      value=next;
      String qualifiedName=((SDOType)((DataObject)next).getType()).getXmlDescriptor().getDefaultRootElement();
      int colonIndex=qualifiedName.indexOf(""String_Node_Str"");
      if (colonIndex > -1) {
        String prefix=qualifiedName.substring(0,colonIndex);
        if ((prefix != null) && !prefix.equals(""String_Node_Str"")) {
          propertyUri=((SDOType)((DataObject)next).getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
        }
        propertyName=qualifiedName.substring(colonIndex + 1,qualifiedName.length());
      }
 else {
        propertyName=qualifiedName;
      }
      theType=((DataObject)next).getType();
    }
    if (propertyName != null) {
      SDOProperty prop=(SDOProperty)aHelperContext.getXSDHelper().getGlobalProperty(propertyUri,propertyName,true);
      if (prop == null) {
        DataObject propDo=aHelperContext.getDataFactory().create(SDOConstants.SDO_PROPERTY);
        propDo.set(""String_Node_Str"",propertyName);
        propDo.set(""String_Node_Str"",theType);
        propDo.set(""String_Node_Str"",true);
        prop=(SDOProperty)aHelperContext.getTypeHelper().defineOpenContentProperty(null,propDo);
        prop.setUri(propertyUri);
      }
      if (prop.isMany()) {
        ((ListWrapper)getList(prop)).add(value,false);
      }
 else {
        set(prop,value,false);
      }
    }
  }
}","/** 
 * INTERNAL: This function is implemented by SDOType.setOpen() in a mapping setGet/SetMethodName call
 * @param openContentPropertiesWithXMLRoots
 */
public void _setOpenContentPropertiesWithXMLRoots(List openContentPropertiesWithXMLRoots){
  for (int i=0, size=openContentPropertiesWithXMLRoots.size(); i < size; i++) {
    Object next=openContentPropertiesWithXMLRoots.get(i);
    String propertyName=null;
    String propertyUri=null;
    Object value=null;
    Type theType=null;
    if (next instanceof XMLRoot) {
      XMLRoot nextXMLRoot=(XMLRoot)next;
      value=nextXMLRoot.getObject();
      propertyName=nextXMLRoot.getLocalName();
      propertyUri=nextXMLRoot.getNamespaceURI();
      if (value instanceof DataObject) {
        theType=((DataObject)value).getType();
      }
 else {
        theType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getTypeForSimpleJavaType(value.getClass());
      }
    }
 else     if (next instanceof DataObject) {
      value=next;
      String qualifiedName=((SDOType)((DataObject)next).getType()).getXmlDescriptor().getDefaultRootElement();
      int colonIndex=qualifiedName.indexOf(""String_Node_Str"");
      if (colonIndex > -1) {
        String prefix=qualifiedName.substring(0,colonIndex);
        if ((prefix != null) && !prefix.equals(""String_Node_Str"")) {
          propertyUri=((SDOType)((DataObject)next).getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
        }
        propertyName=qualifiedName.substring(colonIndex + 1,qualifiedName.length());
      }
 else {
        propertyName=qualifiedName;
      }
      theType=((DataObject)next).getType();
    }
 else {
      theType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getTypeForSimpleJavaType(value.getClass());
    }
    if (propertyName != null) {
      SDOProperty prop=(SDOProperty)aHelperContext.getXSDHelper().getGlobalProperty(propertyUri,propertyName,true);
      if (prop == null) {
        prop=(SDOProperty)getInstanceProperty(propertyName);
        if (prop != null) {
          if (prop.getUri() == null && propertyUri != null) {
            prop=createNewProperty(propertyName,propertyUri,theType);
          }
 else {
            if (prop.getUri() != null) {
              if (propertyUri == null) {
                prop=createNewProperty(propertyName,propertyUri,theType);
              }
 else               if (!prop.getUri().equals(propertyUri)) {
                prop=createNewProperty(propertyName,propertyUri,theType);
              }
            }
          }
        }
 else {
          prop=createNewProperty(propertyName,propertyUri,theType);
        }
      }
      if (prop.isMany()) {
        ((ListWrapper)getList(prop)).add(value,false);
      }
 else {
        set(prop,value,false);
      }
    }
  }
}"
68736,"/** 
 * INTERNAL: This function is implemented by SDOType.setOpen() in a mapping setGet/SetMethodName call
 * @return
 */
public List _getOpenContentPropertiesWithXMLRoots(){
  List returnList=new ArrayList();
  for (int i=0, size=openContentProperties.size(); i < size; i++) {
    Property next=(Property)openContentProperties.get(i);
    XMLRoot root=new XMLRoot();
    String localName=((SDOProperty)next).getXPath();
    if (next.getType() != null) {
      if (!next.getType().isDataType()) {
        String uri=next.getType().getURI();
        root.setNamespaceURI(uri);
      }
 else {
        String uri=getType().getURI();
        root.setNamespaceURI(uri);
      }
    }
    root.setLocalName(localName);
    Object value=get(next);
    if (next.isMany()) {
      for (int j=0, sizel=((List)value).size(); j < sizel; j++) {
        XMLRoot nextRoot=new XMLRoot();
        nextRoot.setNamespaceURI(root.getNamespaceURI());
        nextRoot.setLocalName(root.getLocalName());
        Object nextItem=((List)value).get(j);
        if ((next.getType() != null) && (((SDOType)next.getType()).getXmlDescriptor() == null)) {
          nextItem=XMLConversionManager.getDefaultXMLManager().convertObject(nextItem,String.class);
        }
        nextRoot.setObject(nextItem);
        returnList.add(nextRoot);
      }
    }
 else {
      if ((next.getType() != null) && (((SDOType)next.getType()).getXmlDescriptor() == null)) {
        value=XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class);
      }
      root.setObject(value);
      returnList.add(root);
    }
  }
  return returnList;
}","/** 
 * INTERNAL: This function is implemented by SDOType.setOpen() in a mapping setGet/SetMethodName call
 * @return
 */
public List _getOpenContentPropertiesWithXMLRoots(){
  List returnList=new ArrayList();
  for (int i=0, size=openContentProperties.size(); i < size; i++) {
    Property next=(Property)openContentProperties.get(i);
    XMLRoot root=new XMLRoot();
    String localName=((SDOProperty)next).getXPath();
    if (next.getType() != null) {
      if (!next.getType().isDataType()) {
        String uri=((SDOProperty)next).getUri();
        root.setNamespaceURI(uri);
      }
 else {
        String uri=((SDOProperty)next).getUri();
        root.setNamespaceURI(uri);
      }
    }
    root.setLocalName(localName);
    Object value=get(next);
    if (next.isMany()) {
      for (int j=0, sizel=((List)value).size(); j < sizel; j++) {
        XMLRoot nextRoot=new XMLRoot();
        nextRoot.setNamespaceURI(root.getNamespaceURI());
        nextRoot.setLocalName(root.getLocalName());
        Object nextItem=((List)value).get(j);
        if ((next.getType() != null) && (((SDOType)next.getType()).getXmlDescriptor() == null)) {
          nextItem=XMLConversionManager.getDefaultXMLManager().convertObject(nextItem,String.class);
        }
        nextRoot.setObject(nextItem);
        returnList.add(nextRoot);
      }
    }
 else {
      if ((next.getType() != null) && (((SDOType)next.getType()).getXmlDescriptor() == null)) {
        value=XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class);
      }
      root.setObject(value);
      returnList.add(root);
    }
  }
  return returnList;
}"
68737,"/** 
 * INTERNAL: Create a dynamic open content property if no property exists for (name).
 * @param name
 * @param value
 * @return Property
 * @throws UnsupportedOperationException
 * @throws IllegalArgumentException
 */
public Property defineOpenContentProperty(String name,Object value) throws UnsupportedOperationException, IllegalArgumentException {
  DataObject propertyDO=aHelperContext.getDataFactory().create(SDOConstants.SDO_PROPERTY);
  propertyDO.set(""String_Node_Str"",name);
  Type sdotype=null;
  boolean isMany=false;
  boolean isContainment=false;
  Class valueClass=value.getClass();
  if (value == null) {
    return null;
  }
  if (value instanceof Collection) {
    if (((Collection)value).size() > 0) {
      Object firstObject=((Collection)value).iterator().next();
      if (firstObject != null) {
        valueClass=firstObject.getClass();
        if (firstObject instanceof DataObject) {
          if (((DataObject)firstObject).getContainer() == null) {
            isContainment=true;
          }
          sdotype=((DataObject)firstObject).getType();
        }
 else {
          sdotype=((SDOTypeHelper)aHelperContext.getTypeHelper()).getTypeForSimpleJavaType(valueClass);
        }
      }
 else {
        return null;
      }
    }
 else {
      return null;
    }
    isMany=true;
  }
 else   if (value instanceof DataObject) {
    if (((DataObject)value).getContainer() == null) {
      isContainment=true;
    }
    sdotype=((DataObject)value).getType();
  }
 else {
    sdotype=((SDOTypeHelper)aHelperContext.getTypeHelper()).getTypeForSimpleJavaType(valueClass);
  }
  propertyDO.set(""String_Node_Str"",sdotype);
  propertyDO.set(""String_Node_Str"",isMany);
  propertyDO.set(""String_Node_Str"",isContainment);
  return aHelperContext.getTypeHelper().defineOpenContentProperty(null,propertyDO);
}","public Property defineOpenContentProperty(String name,Object value,Type sdotype) throws UnsupportedOperationException, IllegalArgumentException {
  if (sdotype == null) {
    return defineOpenContentProperty(name,value);
  }
  DataObject propertyDO=aHelperContext.getDataFactory().create(SDOConstants.SDO_PROPERTY);
  propertyDO.set(""String_Node_Str"",name);
  boolean isMany=false;
  boolean isContainment=false;
  Class valueClass=value.getClass();
  if (value == null) {
    return null;
  }
  if (value instanceof Collection) {
    if (((Collection)value).size() > 0) {
      Object firstObject=((Collection)value).iterator().next();
      if (firstObject != null) {
        valueClass=firstObject.getClass();
        if (firstObject instanceof DataObject) {
          if (((DataObject)firstObject).getContainer() == null) {
            isContainment=true;
          }
          sdotype=((DataObject)firstObject).getType();
        }
 else {
          sdotype=((SDOTypeHelper)aHelperContext.getTypeHelper()).getTypeForSimpleJavaType(valueClass);
        }
      }
    }
    isMany=true;
  }
 else   if (value instanceof DataObject) {
    if (((DataObject)value).getContainer() == null) {
      isContainment=true;
    }
    sdotype=((DataObject)value).getType();
  }
 else {
    sdotype=((SDOTypeHelper)aHelperContext.getTypeHelper()).getTypeForSimpleJavaType(valueClass);
  }
  propertyDO.set(""String_Node_Str"",sdotype);
  propertyDO.set(""String_Node_Str"",isMany);
  propertyDO.set(""String_Node_Str"",isContainment);
  return aHelperContext.getTypeHelper().defineOpenContentProperty(null,propertyDO);
}"
68738,"protected void buildExpectedResults() throws Exception {
  ExpressionBuilder builder=new ExpressionBuilder();
  Vector employees=getSession().readAllObjects(Employee.class);
  for (Enumeration e=employees.elements(); e.hasMoreElements(); ) {
    Employee emp=(Employee)e.nextElement();
    Object[] result=new Object[2];
    result[0]=emp.getId();
    if (getSession().getPlatform().isOracle()) {
      result[1]=new java.math.BigDecimal(3);
    }
 else     if (getSession().getPlatform().isMySQL()) {
      result[1]=new java.lang.Long(3);
    }
 else {
      result[1]=new java.lang.Integer(3);
    }
    addResult(result,null);
  }
}","protected void buildExpectedResults() throws Exception {
  ExpressionBuilder builder=new ExpressionBuilder();
  Vector employees=getSession().readAllObjects(Employee.class);
  for (Enumeration e=employees.elements(); e.hasMoreElements(); ) {
    Employee emp=(Employee)e.nextElement();
    Object[] result=new Object[2];
    result[0]=emp.getId();
    if (getSession().getPlatform().isOracle() || getSession().getPlatform().isTimesTen7()) {
      result[1]=new java.math.BigDecimal(3);
    }
 else     if (getSession().getPlatform().isMySQL()) {
      result[1]=new java.lang.Long(3);
    }
 else {
      result[1]=new java.lang.Integer(3);
    }
    addResult(result,null);
  }
}"
68739,"private String getXPathForProperty(SDOProperty prop){
  if ((prop).getXmlMapping() != null) {
    return prop.getXmlMapping().getField().getName();
  }
 else {
    String name=prop.getName();
    if (prop.isOpenContent()) {
      String uri=prop.getUri();
      if (uri != null) {
        String prefix=((SDOTypeHelper)typeHelper).getNamespaceResolver().resolveNamespaceURI(uri);
        if ((prefix != null) && !prefix.equals(SDOConstants.EMPTY_STRING)) {
          return prefix + ""String_Node_Str"" + name;
        }
      }
    }
    return name;
  }
}","private String getXPathForProperty(SDOProperty prop,boolean removeText){
  if ((prop).getXmlMapping() != null) {
    String xpath=prop.getXmlMapping().getField().getName();
    if (removeText && xpath.endsWith(""String_Node_Str"")) {
      xpath=xpath.substring(0,xpath.length() - 7);
    }
    return xpath;
  }
 else {
    String name=prop.getName();
    if (prop.isOpenContent()) {
      String uri=prop.getUri();
      if (uri != null) {
        String prefix=((SDOTypeHelper)typeHelper).getNamespaceResolver().resolveNamespaceURI(uri);
        if ((prefix != null) && !prefix.equals(SDOConstants.EMPTY_STRING)) {
          return prefix + ""String_Node_Str"" + name;
        }
      }
    }
    return name;
  }
}"
68740,"private void doMarshal(SDOProperty prop,DataObject value,SDOChangeSummary cs,Element csNode,SDODataObject modifiedObject,List deletedXPaths,String xpathToCS,String sdoPrefix){
  if (value == null) {
    return;
  }
  boolean isDeleted=false;
  Object original=cs.getReverseDeletedMap().get(value);
  if ((original != null) && cs.isDeleted((DataObject)original)) {
    isDeleted=true;
  }
  String qualifiedName=getXPathForProperty(prop);
  String uri=null;
  if (prop.isOpenContent()) {
    uri=prop.getUri();
  }
 else {
    uri=prop.getContainingType().getURI();
  }
  if (isDeleted) {
    String pathToNode=getPathFromAncestor(((SDODataObject)original),modifiedObject,cs);
    String containerPath=null;
    containerPath=getQualifiedName(modifiedObject);
    deletedXPaths.add(xpathToCS + containerPath + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT+ pathToNode);
    XMLRoot xmlroot=new XMLRoot();
    xmlroot.setObject(value);
    xmlroot.setNamespaceURI(uri);
    xmlroot.setLocalName(qualifiedName);
    xmlMarshaller.marshal(xmlroot,csNode);
  }
 else {
    Element modifiedElement=null;
    if (uri == null) {
      modifiedElement=csNode.getOwnerDocument().createElement(qualifiedName);
    }
 else {
      modifiedElement=csNode.getOwnerDocument().createElementNS(uri,qualifiedName);
    }
    csNode.appendChild(modifiedElement);
    modifiedElement.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_REF,SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + getPathFromAncestor(((SDODataObject)original),(SDODataObject)marshalledObject,cs));
    if ((((SDODataObject)original).getContainmentProperty() != null) && ((SDODataObject)original).getContainmentProperty().getType().equals(SDOConstants.SDO_DATAOBJECT)) {
      String schemaContext=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContext();
      QName schemaContextQName=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver());
      if (schemaContext != null) {
        String typeValue=schemaContext.substring(1,schemaContext.length());
        String schemaInstancePrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
        String schemaContextUri=schemaContextQName.getNamespaceURI();
        String schemaContextPrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(schemaContextUri);
        if (schemaContextPrefix != null) {
          modifiedElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + schemaContextPrefix,schemaContextQName.getNamespaceURI());
        }
        modifiedElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,schemaInstancePrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
      }
    }
  }
}","private void doMarshal(SDOProperty prop,DataObject value,SDOChangeSummary cs,Element csNode,SDODataObject modifiedObject,List deletedXPaths,String xpathToCS,String sdoPrefix){
  if (value == null) {
    marshalNilAttribute(prop,new DOMRecord(csNode));
    return;
  }
  boolean isDeleted=false;
  Object original=cs.getReverseDeletedMap().get(value);
  if ((original != null) && cs.isDeleted((DataObject)original)) {
    isDeleted=true;
  }
  String qualifiedName=getXPathForProperty(prop);
  String uri=null;
  if (prop.isOpenContent()) {
    uri=prop.getUri();
  }
 else {
    uri=prop.getContainingType().getURI();
  }
  if (isDeleted) {
    String pathToNode=getPathFromAncestor(((SDODataObject)original),modifiedObject,cs);
    String containerPath=null;
    containerPath=getQualifiedName(modifiedObject);
    deletedXPaths.add(xpathToCS + containerPath + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT+ pathToNode);
    XMLRoot xmlroot=new XMLRoot();
    xmlroot.setObject(value);
    xmlroot.setNamespaceURI(uri);
    xmlroot.setLocalName(qualifiedName);
    xmlMarshaller.marshal(xmlroot,csNode);
  }
 else {
    Element modifiedElement=null;
    if (uri == null) {
      modifiedElement=csNode.getOwnerDocument().createElement(qualifiedName);
    }
 else {
      modifiedElement=csNode.getOwnerDocument().createElementNS(uri,qualifiedName);
    }
    csNode.appendChild(modifiedElement);
    modifiedElement.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_REF,SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + getPathFromAncestor(((SDODataObject)original),(SDODataObject)marshalledObject,cs));
    if ((((SDODataObject)original).getContainmentProperty() != null) && ((SDODataObject)original).getContainmentProperty().getType().equals(SDOConstants.SDO_DATAOBJECT)) {
      String schemaContext=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContext();
      QName schemaContextQName=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver());
      if (schemaContext != null) {
        String typeValue=schemaContext.substring(1,schemaContext.length());
        String schemaInstancePrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
        String schemaContextUri=schemaContextQName.getNamespaceURI();
        String schemaContextPrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(schemaContextUri);
        if (schemaContextPrefix != null) {
          modifiedElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + schemaContextPrefix,schemaContextQName.getNamespaceURI());
        }
        modifiedElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,schemaInstancePrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
      }
    }
  }
}"
68741,"public void beforeMarshal(Object obj){
  if (obj instanceof SDOChangeSummary) {
    SDOChangeSummary changeSummary=((SDOChangeSummary)obj);
    List createdSet=changeSummary.getCreated();
    List xpaths=new ArrayList(createdSet.size());
    if ((createdSet != null) && (createdSet.size() > 0)) {
      Iterator anIterator=createdSet.iterator();
      SDODataObject nextCreatedDO=null;
      while (anIterator.hasNext()) {
        nextCreatedDO=((SDODataObject)anIterator.next());
        xpaths.add(SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + getPathFromAncestor(nextCreatedDO,(SDODataObject)marshalledObject,changeSummary));
      }
    }
    changeSummary.setCreatedXPaths(xpaths);
    String xpathMarshalledObjToCS=getPathFromAncestor(((SDODataObject)changeSummary.getRootObject()),(SDODataObject)marshalledObject,changeSummary);
    String xpathChangeSumProp=getXPathForProperty((SDOProperty)((SDOType)changeSummary.getRootObject().getType()).getChangeSummaryProperty());
    String xpathToCS=SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX;
    if ((xpathMarshalledObjToCS != null) && !xpathMarshalledObjToCS.equals(SDOConstants.EMPTY_STRING)) {
      xpathToCS=xpathToCS + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + xpathMarshalledObjToCS;
    }
    xpathToCS=xpathToCS + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + xpathChangeSumProp+ SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT;
    List deletedXPaths=new ArrayList();
    Document document=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
    Element csNode=null;
    List modifiedItems=changeSummary.getModified();
    int modifiedSize=modifiedItems.size();
    List newNodes=new ArrayList(modifiedSize);
    SDODataObject nextModifiedDO=null;
    for (int i=0; i < modifiedSize; i++) {
      nextModifiedDO=(SDODataObject)modifiedItems.get(i);
      String sdoPrefix=((SDOTypeHelper)typeHelper).getPrefix(SDOConstants.SDO_URL);
      String uri=getURI(nextModifiedDO);
      String qualifiedName=getQualifiedName(nextModifiedDO);
      String sdoRefPrefix=SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT;
      if (uri == null) {
        csNode=document.createElement(qualifiedName);
      }
 else {
        csNode=document.createElementNS(uri,qualifiedName);
      }
      csNode.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_REF,sdoRefPrefix + getPathFromAncestor(nextModifiedDO,(SDODataObject)marshalledObject,changeSummary));
      Vector namespaces=((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getNonNullNamespaceResolver().getNamespaces();
      for (int j=0; j < namespaces.size(); j++) {
        Namespace next=(Namespace)namespaces.get(j);
        if (declareNamespace(next.getNamespaceURI(),next.getPrefix(),changeSummary.getRootObject())) {
          csNode.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + next.getPrefix(),next.getNamespaceURI());
        }
      }
      List nextDOSettings=changeSummary.getOldValues(nextModifiedDO);
      DOMRecord row=new DOMRecord(csNode);
      SDOSetting nextSetting=null;
      for (int j=0; j < nextDOSettings.size(); j++) {
        nextSetting=(SDOSetting)nextDOSettings.get(j);
        if (nextSetting.isSet()) {
          if (!nextSetting.getProperty().getType().isDataType()) {
            if (nextSetting.getProperty().isMany()) {
              List values=(List)nextSetting.getValue();
              for (int k=0; k < values.size(); k++) {
                doMarshal((SDOProperty)nextSetting.getProperty(),(DataObject)values.get(k),changeSummary,csNode,nextModifiedDO,deletedXPaths,xpathToCS,sdoPrefix);
              }
            }
 else {
              doMarshal((SDOProperty)nextSetting.getProperty(),(DataObject)nextSetting.getValue(),changeSummary,csNode,nextModifiedDO,deletedXPaths,xpathToCS,sdoPrefix);
            }
          }
 else {
            String xPath=getXPathForProperty((SDOProperty)nextSetting.getProperty());
            XMLField field=new XMLField(xPath);
            field.setNamespaceResolver(((SDOTypeHelper)typeHelper).getNamespaceResolver());
            row.put(field,nextSetting.getValue());
          }
        }
      }
      List unsetPropNames=changeSummary.getUnsetProps(nextModifiedDO);
      if (!unsetPropNames.isEmpty()) {
        String unsetPropsString=(String)XMLConversionManager.getDefaultXMLManager().convertObject(unsetPropNames,String.class);
        csNode.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_UNSET,unsetPropsString);
      }
      newNodes.add(csNode);
    }
    changeSummary.setDeletedXPaths(deletedXPaths);
    changeSummary.setModifiedDoms(newNodes);
  }
}","public void beforeMarshal(Object obj){
  if (obj instanceof SDOChangeSummary) {
    SDOChangeSummary changeSummary=((SDOChangeSummary)obj);
    List createdSet=changeSummary.getCreated();
    List xpaths=new ArrayList(createdSet.size());
    if ((createdSet != null) && (createdSet.size() > 0)) {
      Iterator anIterator=createdSet.iterator();
      SDODataObject nextCreatedDO=null;
      while (anIterator.hasNext()) {
        nextCreatedDO=((SDODataObject)anIterator.next());
        xpaths.add(SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + getPathFromAncestor(nextCreatedDO,(SDODataObject)marshalledObject,changeSummary));
      }
    }
    changeSummary.setCreatedXPaths(xpaths);
    String xpathMarshalledObjToCS=getPathFromAncestor(((SDODataObject)changeSummary.getRootObject()),(SDODataObject)marshalledObject,changeSummary);
    String xpathChangeSumProp=getXPathForProperty((SDOProperty)((SDOType)changeSummary.getRootObject().getType()).getChangeSummaryProperty());
    String xpathToCS=SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX;
    if ((xpathMarshalledObjToCS != null) && !xpathMarshalledObjToCS.equals(SDOConstants.EMPTY_STRING)) {
      xpathToCS=xpathToCS + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + xpathMarshalledObjToCS;
    }
    xpathToCS=xpathToCS + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + xpathChangeSumProp+ SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT;
    List deletedXPaths=new ArrayList();
    Document document=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
    Element csNode=null;
    List modifiedItems=changeSummary.getModified();
    int modifiedSize=modifiedItems.size();
    List newNodes=new ArrayList(modifiedSize);
    SDODataObject nextModifiedDO=null;
    for (int i=0; i < modifiedSize; i++) {
      nextModifiedDO=(SDODataObject)modifiedItems.get(i);
      String sdoPrefix=((SDOTypeHelper)typeHelper).getPrefix(SDOConstants.SDO_URL);
      String uri=getURI(nextModifiedDO);
      String qualifiedName=getQualifiedName(nextModifiedDO);
      String sdoRefPrefix=SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT;
      if (uri == null) {
        csNode=document.createElement(qualifiedName);
      }
 else {
        csNode=document.createElementNS(uri,qualifiedName);
      }
      csNode.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_REF,sdoRefPrefix + getPathFromAncestor(nextModifiedDO,(SDODataObject)marshalledObject,changeSummary));
      Vector namespaces=((SDOType)nextModifiedDO.getType()).getXmlDescriptor().getNonNullNamespaceResolver().getNamespaces();
      for (int j=0; j < namespaces.size(); j++) {
        Namespace next=(Namespace)namespaces.get(j);
        if (declareNamespace(next.getNamespaceURI(),next.getPrefix(),changeSummary.getRootObject())) {
          csNode.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + next.getPrefix(),next.getNamespaceURI());
        }
      }
      List nextDOSettings=changeSummary.getOldValues(nextModifiedDO);
      DOMRecord row=new DOMRecord(csNode);
      SDOSetting nextSetting=null;
      for (int j=0; j < nextDOSettings.size(); j++) {
        nextSetting=(SDOSetting)nextDOSettings.get(j);
        if (nextSetting.isSet()) {
          if (!nextSetting.getProperty().getType().isDataType()) {
            if (nextSetting.getProperty().isMany()) {
              List values=(List)nextSetting.getValue();
              for (int k=0; k < values.size(); k++) {
                doMarshal((SDOProperty)nextSetting.getProperty(),(DataObject)values.get(k),changeSummary,csNode,nextModifiedDO,deletedXPaths,xpathToCS,sdoPrefix);
              }
            }
 else {
              doMarshal((SDOProperty)nextSetting.getProperty(),(DataObject)nextSetting.getValue(),changeSummary,csNode,nextModifiedDO,deletedXPaths,xpathToCS,sdoPrefix);
            }
          }
 else {
            Object value=nextSetting.getValue();
            if (value == null) {
              marshalNilAttribute((SDOProperty)nextSetting.getProperty(),row);
            }
 else {
              String xPath=getXPathForProperty((SDOProperty)nextSetting.getProperty());
              XMLField field=new XMLField(xPath);
              field.setNamespaceResolver(((SDOTypeHelper)typeHelper).getNamespaceResolver());
              row.put(field,value);
            }
          }
        }
      }
      List unsetPropNames=changeSummary.getUnsetProps(nextModifiedDO);
      if (!unsetPropNames.isEmpty()) {
        String unsetPropsString=(String)XMLConversionManager.getDefaultXMLManager().convertObject(unsetPropNames,String.class);
        csNode.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_UNSET,unsetPropsString);
      }
      newNodes.add(csNode);
    }
    changeSummary.setDeletedXPaths(deletedXPaths);
    changeSummary.setModifiedDoms(newNodes);
  }
}"
68742,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  if (null != unmarshalRecord.getChildRecord()) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,unmarshalRecord.getChildRecord().getCurrentObject());
    }
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      Object childObject=unmarshalRecord.getChildRecord().getCurrentObject();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
    workingDescriptor=null;
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if (builder.getNodes().size() != 0) {
      unmarshalRecord.addAttributeValue(this,builder.getNodes().pop());
    }
 else {
      endElementProcessText(unmarshalRecord,collection,xPathFragment);
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  if (null != unmarshalRecord.getChildRecord()) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,unmarshalRecord.getChildRecord().getCurrentObject());
    }
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      Object childObject=unmarshalRecord.getChildRecord().getCurrentObject();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
    workingDescriptor=null;
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      unmarshalRecord.addAttributeValue(this,builder.getNodes().pop());
    }
 else {
      endElementProcessText(unmarshalRecord,collection,xPathFragment);
    }
  }
}"
68743,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    String name;
    if (EMPTY_STRING.equals(localName) || (localName == null)) {
      name=qName;
    }
 else {
      name=localName;
    }
    QName rootQName;
    if (EMPTY_STRING.equals(namespaceURI) || (namespaceURI == null)) {
      rootQName=new QName(name);
    }
 else {
      rootQName=new QName(namespaceURI,name);
    }
    XMLDescriptor xmlDescriptor=xmlContext.getDescriptor(rootQName);
    if (null == xmlDescriptor) {
      String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,""String_Node_Str"");
      if (null != type) {
        XPathFragment typeFragment=new XPathFragment(type);
        if (null != namespaceMap) {
          if (null == typeFragment.getPrefix()) {
            typeFragment.setNamespaceURI((String)namespaceMap.get(EMPTY_STRING));
          }
 else {
            typeFragment.setNamespaceURI((String)namespaceMap.get(typeFragment.getPrefix()));
          }
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      }
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
      }
      if (null == xmlDescriptor) {
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,unmarshaller,getXMLReader());
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setNamespaceMap(namespaceMap);
      unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
    }
    unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord();
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setSession(session);
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.startDocument();
    unmarshalRecord.setNamespaceMap(namespaceMap);
    unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
    xmlReader.setContentHandler(unmarshalRecord);
    try {
      unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
    }
 catch (    SAXNotRecognizedException ex) {
    }
catch (    SAXNotSupportedException ex) {
    }
    object=xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,unmarshaller.isResultAlwaysXMLRoot());
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    String name;
    if (EMPTY_STRING.equals(localName) || (localName == null)) {
      name=qName;
    }
 else {
      name=localName;
    }
    QName rootQName;
    if (EMPTY_STRING.equals(namespaceURI) || (namespaceURI == null)) {
      rootQName=new QName(name);
    }
 else {
      rootQName=new QName(namespaceURI,name);
    }
    XMLDescriptor xmlDescriptor=xmlContext.getDescriptor(rootQName);
    if (null == xmlDescriptor) {
      String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,""String_Node_Str"");
      if (null != type) {
        XPathFragment typeFragment=new XPathFragment(type);
        if (null != namespaceMap) {
          if (null == typeFragment.getPrefix()) {
            typeFragment.setNamespaceURI((String)namespaceMap.get(EMPTY_STRING));
          }
 else {
            typeFragment.setNamespaceURI((String)namespaceMap.get(typeFragment.getPrefix()));
          }
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      }
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
      }
      if (null == xmlDescriptor) {
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setNamespaceMap(namespaceMap);
      unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator == null) {
            throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
          classValue=(Class)indicator;
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
    }
    unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord();
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setSession(session);
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.startDocument();
    unmarshalRecord.setNamespaceMap(namespaceMap);
    unmarshalRecord.setUriToPrefixMap(uriToPrefixMap);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
    xmlReader.setContentHandler(unmarshalRecord);
    try {
      unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord);
    }
 catch (    SAXNotRecognizedException ex) {
    }
catch (    SAXNotSupportedException ex) {
    }
    object=xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,unmarshaller.isResultAlwaysXMLRoot());
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
68744,"public UnmappedContentHandlerWrapper(UnmappedContentHandler unmappedContentHandler,XMLUnmarshaller unmarshaller,XMLReader reader){
  super(null);
  this.depth=0;
  this.unmappedContentHandler=unmappedContentHandler;
  setUnmarshaller(unmarshaller);
  setXMLReader(reader);
  unmappedContentHandler.setUnmarshalRecord(this);
}","public UnmappedContentHandlerWrapper(UnmappedContentHandler unmappedContentHandler,SAXUnmarshallerHandler saxUnmarshallerHandler){
  super(null);
  this.depth=0;
  this.unmappedContentHandler=unmappedContentHandler;
  setUnmarshaller(saxUnmarshallerHandler.getUnmarshaller());
  setXMLReader(saxUnmarshallerHandler.getXMLReader());
  setUriToPrefixMap(saxUnmarshallerHandler.getUriToPrefixMap());
  setNamespaceMap(saxUnmarshallerHandler.getNamespaceMap());
  unmappedContentHandler.setUnmarshalRecord(this);
}"
68745,"public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  levelIndex++;
  StartElementEvent event=new StartElementEvent(uri,localName,qName,atts);
  events.add(event);
  if (startOccurred) {
    processComplexElement();
    return;
  }
  startOccurred=true;
}","public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  levelIndex++;
  Attributes copiedAttrs=buildAttributeList(atts);
  StartElementEvent event=new StartElementEvent(uri,localName,qName,copiedAttrs);
  events.add(event);
  if (startOccurred) {
    processComplexElement();
    return;
  }
  startOccurred=true;
}"
68746,"/** 
 * For bug 3107049 test a potential infinite loop on constantExp.equal(constantExp).
 */
private void addConstantEqualConstantTest(){
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression expression=builder.value(1).equal(1);
  expression=expression.and(builder.value(1).equal(builder.value(1)));
  expression=expression.and(builder.value(1).equal(builder.getParameter(""String_Node_Str"")));
  ReadAllQuery query=new ReadAllQuery(Employee.class,expression);
  query.addArgument(""String_Node_Str"");
  ReadAllExpressionTest test=new ReadAllExpressionTest(Employee.class,12);
  test.setExpression(expression);
  test.setQuery(query);
  test.getArguments().add(new Integer(1));
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  test.addUnsupportedPlatform(org.eclipse.persistence.platform.database.DB2Platform.class);
  addTest(test);
}","/** 
 * For bug 3107049 test a potential infinite loop on constantExp.equal(constantExp).
 */
private void addConstantEqualConstantTest(){
  ExpressionBuilder builder=new ExpressionBuilder();
  Expression expression=builder.value(1).equal(1);
  expression=expression.and(builder.value(1).equal(builder.value(1)));
  expression=expression.and(builder.value(1).equal(builder.getParameter(""String_Node_Str"")));
  ReadAllQuery query=new ReadAllQuery(Employee.class,expression);
  query.addArgument(""String_Node_Str"",Integer.class);
  ReadAllExpressionTest test=new ReadAllExpressionTest(Employee.class,12);
  test.setExpression(expression);
  test.setQuery(query);
  test.getArguments().add(new Integer(1));
  test.setName(""String_Node_Str"");
  test.setDescription(""String_Node_Str"");
  test.addUnsupportedPlatform(org.eclipse.persistence.platform.database.DB2Platform.class);
  addTest(test);
}"
68747,"public void setup(){
  if (getSession().getLogin().getDatasourcePlatform().isDB2() && (getEjbqlString() == ""String_Node_Str"")) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (!hasArguments()) {
    setArgumentsForTestUsing(getSomeEmployees());
  }
  ReadAllQuery raq=new ReadAllQuery();
  raq.setReferenceClass(Employee.class);
  raq.setSelectionCriteria(getOriginalObjectExpression());
  Enumeration enumtr=getExpressionParameters().elements();
  while (enumtr.hasMoreElements()) {
    raq.addArgument((String)enumtr.nextElement());
  }
  setOriginalOject(getSession().executeQuery(raq,getArguments()));
  super.setup();
}","public void setup(){
  if ((getSession().getLogin().getDatasourcePlatform().isDB2() || getSession().getLogin().getDatasourcePlatform().isTimesTen()) && (getEjbqlString() == ""String_Node_Str"")) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (!hasArguments()) {
    setArgumentsForTestUsing(getSomeEmployees());
  }
  ReadAllQuery raq=new ReadAllQuery();
  raq.setReferenceClass(Employee.class);
  raq.setSelectionCriteria(getOriginalObjectExpression());
  Enumeration enumtr=getExpressionParameters().elements();
  while (enumtr.hasMoreElements()) {
    raq.addArgument((String)enumtr.nextElement());
  }
  setOriginalOject(getSession().executeQuery(raq,getArguments()));
  super.setup();
}"
68748,"public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL() || getSession().getPlatform().isTimesTen()) && lockMode == org.eclipse.persistence.queries.ObjectLevelReadQuery.LOCK_NOWAIT) {
    throw new TestWarningException(""String_Node_Str"");
  }
  ReadObjectQuery query=new ReadObjectQuery(Address.class);
  Address address=(Address)getSession().executeQuery(query);
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  query.setSelectionObject(address);
  address=(Address)getSession().executeQuery(query);
  uow=getSession().acquireUnitOfWork();
  address=(Address)uow.executeQuery(query);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setLog(getSession().getLog());
    session2.setLogLevel(getSession().getLogLevel());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    try {
      Address lockedAddress=(Address)uow2.executeQuery(query);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestErrorException(""String_Node_Str"");
    }
    session2.executeQuery(query);
  }
 catch (  RuntimeException e) {
    throw e;
  }
 finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
  query.checkCacheOnly();
  address=(Address)getSession().executeQuery(query);
  strongAssert(address != null,""String_Node_Str"");
}","public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL()) && lockMode == org.eclipse.persistence.queries.ObjectLevelReadQuery.LOCK_NOWAIT) {
    throw new TestWarningException(""String_Node_Str"");
  }
  ReadObjectQuery query=new ReadObjectQuery(Address.class);
  Address address=(Address)getSession().executeQuery(query);
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  query.setSelectionObject(address);
  address=(Address)getSession().executeQuery(query);
  uow=getSession().acquireUnitOfWork();
  address=(Address)uow.executeQuery(query);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setLog(getSession().getLog());
    session2.setLogLevel(getSession().getLogLevel());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    try {
      Address lockedAddress=(Address)uow2.executeQuery(query);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestErrorException(""String_Node_Str"");
    }
    session2.executeQuery(query);
  }
 catch (  RuntimeException e) {
    throw e;
  }
 finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
  query.checkCacheOnly();
  address=(Address)getSession().executeQuery(query);
  strongAssert(address != null,""String_Node_Str"");
}"
68749,"public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL() || getSession().getPlatform().isTimesTen()) && lockMode == org.eclipse.persistence.queries.ObjectLevelReadQuery.LOCK_NOWAIT) {
    throw new TestWarningException(""String_Node_Str"");
  }
  ReadObjectQuery query=new ReadObjectQuery(Address.class);
  uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.executeQuery(query);
  String oldCity=address.getCountry();
  address.setCity(""String_Node_Str"");
  query.setShouldRefreshIdentityMapResult(true);
  query.setSelectionObject(address);
  Address newAddress=(Address)uow.executeQuery(query);
  strongAssert(!newAddress.getCity().equals(""String_Node_Str""),""String_Node_Str"");
  uow.release();
  uow=getSession().acquireUnitOfWork();
  query=new ReadObjectQuery(Address.class);
  query.dontAcquireLocks();
  address=(Address)uow.executeQuery(query);
  address.setCity(""String_Node_Str"");
  query=new ReadObjectQuery(Address.class);
  query.setSelectionObject(address);
  newAddress=(Address)uow.executeQuery(query);
  strongAssert(!newAddress.getCity().equals(""String_Node_Str""),""String_Node_Str"");
}","public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL()) && lockMode == org.eclipse.persistence.queries.ObjectLevelReadQuery.LOCK_NOWAIT) {
    throw new TestWarningException(""String_Node_Str"");
  }
  ReadObjectQuery query=new ReadObjectQuery(Address.class);
  uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.executeQuery(query);
  String oldCity=address.getCountry();
  address.setCity(""String_Node_Str"");
  query.setShouldRefreshIdentityMapResult(true);
  query.setSelectionObject(address);
  Address newAddress=(Address)uow.executeQuery(query);
  strongAssert(!newAddress.getCity().equals(""String_Node_Str""),""String_Node_Str"");
  uow.release();
  uow=getSession().acquireUnitOfWork();
  query=new ReadObjectQuery(Address.class);
  query.dontAcquireLocks();
  address=(Address)uow.executeQuery(query);
  address.setCity(""String_Node_Str"");
  query=new ReadObjectQuery(Address.class);
  query.setSelectionObject(address);
  newAddress=(Address)uow.executeQuery(query);
  strongAssert(!newAddress.getCity().equals(""String_Node_Str""),""String_Node_Str"");
}"
68750,"public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL() || getSession().getPlatform().isTimesTen()) && (lockMode == org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT)) {
    throw new TestWarningException(""String_Node_Str"");
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
 catch (  RuntimeException e) {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
    throw e;
  }
}","public void test() throws Exception {
  if (getSession().getPlatform().isDB2() || getSession().getPlatform().isAccess() || getSession().getPlatform().isSybase()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if ((getSession().getPlatform().isMySQL()) && (lockMode == org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT)) {
    throw new TestWarningException(""String_Node_Str"");
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
 catch (  RuntimeException e) {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
    throw e;
  }
}"
68751,"/** 
 * INTERNAL: Get the attribute value for the given field value. If we're mapping to a Document, we need to check if we should return the Oracle DOM or build a new one.
 */
public Object getAttributeValue(Object fieldValue,AbstractSession session) throws DescriptorException {
  Object attributeValue=fieldValue;
  try {
    if (attributeValue != null) {
      if (getAttributeClassification() == ClassConstants.STRING) {
        if (session.getPlatform().isXDBDocument(attributeValue)) {
          return attributeValue.toString();
        }
 else {
          Document doc=(Document)attributeValue;
          StringWriter writer=new StringWriter();
          StreamResult result=new StreamResult(writer);
          xmlTransformer.transform(doc,result);
          return writer.getBuffer().toString();
        }
      }
    }
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(fieldValue,getAttributeClassification(),ex);
  }
  return attributeValue;
}","/** 
 * INTERNAL: Get the attribute value for the given field value. If we're mapping to a Document, we need to check if we should return the Oracle DOM or build a new one.
 */
public Object getAttributeValue(Object fieldValue,AbstractSession session) throws DescriptorException {
  Object attributeValue=fieldValue;
  try {
    if (attributeValue != null) {
      if (getAttributeClassification() != ClassConstants.STRING) {
        String xml=(String)attributeValue;
        java.io.StringReader reader=new java.io.StringReader(xml);
        return xmlParser.parse(reader);
      }
    }
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(fieldValue,getAttributeClassification(),ex);
  }
  return attributeValue;
}"
68752,"public DirectToXMLTypeMapping(){
  super();
  xmlTransformer=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLTransformer();
  xmlTransformer.setFormattedOutput(false);
  xmlComparer=new XMLComparer();
}","public DirectToXMLTypeMapping(){
  super();
  xmlTransformer=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLTransformer();
  xmlTransformer.setFormattedOutput(false);
  xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
  xmlComparer=new XMLComparer();
}"
68753,"/** 
 * INTERNAL: Get a timestamp value from a result set. Overrides the default behavior to specifically return a timestamp.  Added to overcome an issue with the oracle 9.0.1.4 JDBC driver.
 */
public Object getObjectFromResultSet(ResultSet resultSet,int columnNumber,int type,AbstractSession session) throws java.sql.SQLException {
  if ((type == Types.TIMESTAMP) || (type == Types.DATE)) {
    return resultSet.getTimestamp(columnNumber);
  }
 else   if (type == oracle.jdbc.OracleTypes.TIMESTAMPTZ) {
    TIMESTAMPTZ tsTZ=(TIMESTAMPTZ)resultSet.getObject(columnNumber);
    if ((tsTZ != null) && (tsTZ.getLength() != 0)) {
      tsTZ.timestampValue(getConnection(session,resultSet.getStatement().getConnection()));
      return new TIMESTAMPTZWrapper(tsTZ);
    }
    return null;
  }
 else   if (type == oracle.jdbc.OracleTypes.TIMESTAMPLTZ) {
    TIMESTAMPLTZ tsLTZ=(TIMESTAMPLTZ)resultSet.getObject(columnNumber);
    if ((tsLTZ != null) && (tsLTZ.getLength() != 0)) {
      Timestamp ts=TIMESTAMPLTZ.toTimestamp(getConnection(session,resultSet.getStatement().getConnection()),tsLTZ.toBytes());
      return new TIMESTAMPLTZWrapper(ts,((OracleConnection)getConnection(session,resultSet.getStatement().getConnection())).getSessionTimeZone());
    }
    return null;
  }
 else   if (type == OracleTypes.OPAQUE) {
    try {
      Object result=resultSet.getObject(columnNumber);
      if (!(result instanceof OPAQUE)) {
        return result;
      }
      return getXMLTypeFactory().getDOM((OPAQUE)result);
    }
 catch (    SQLException ex) {
      throw DatabaseException.sqlException(ex,null,session,false);
    }
  }
 else {
    return super.getObjectFromResultSet(resultSet,columnNumber,type,session);
  }
}","/** 
 * INTERNAL: Get a timestamp value from a result set. Overrides the default behavior to specifically return a timestamp.  Added to overcome an issue with the oracle 9.0.1.4 JDBC driver.
 */
public Object getObjectFromResultSet(ResultSet resultSet,int columnNumber,int type,AbstractSession session) throws java.sql.SQLException {
  if ((type == Types.TIMESTAMP) || (type == Types.DATE)) {
    return resultSet.getTimestamp(columnNumber);
  }
 else   if (type == oracle.jdbc.OracleTypes.TIMESTAMPTZ) {
    TIMESTAMPTZ tsTZ=(TIMESTAMPTZ)resultSet.getObject(columnNumber);
    if ((tsTZ != null) && (tsTZ.getLength() != 0)) {
      tsTZ.timestampValue(getConnection(session,resultSet.getStatement().getConnection()));
      return new TIMESTAMPTZWrapper(tsTZ);
    }
    return null;
  }
 else   if (type == oracle.jdbc.OracleTypes.TIMESTAMPLTZ) {
    TIMESTAMPLTZ tsLTZ=(TIMESTAMPLTZ)resultSet.getObject(columnNumber);
    if ((tsLTZ != null) && (tsLTZ.getLength() != 0)) {
      Timestamp ts=TIMESTAMPLTZ.toTimestamp(getConnection(session,resultSet.getStatement().getConnection()),tsLTZ.toBytes());
      return new TIMESTAMPLTZWrapper(ts,((OracleConnection)getConnection(session,resultSet.getStatement().getConnection())).getSessionTimeZone());
    }
    return null;
  }
 else   if (type == OracleTypes.OPAQUE) {
    try {
      Object result=resultSet.getObject(columnNumber);
      if (!(result instanceof OPAQUE)) {
        return result;
      }
      return getXMLTypeFactory().getString((OPAQUE)result);
    }
 catch (    SQLException ex) {
      throw DatabaseException.sqlException(ex,null,session,false);
    }
  }
 else {
    return super.getObjectFromResultSet(resultSet,columnNumber,type,session);
  }
}"
68754,"/** 
 * Common implementor for createSequence and replaceSequence
 */
protected void createOrReplaceSequences(boolean create,boolean drop) throws EclipseLinkException {
  Sequencing sequencing=getSession().getSequencing();
  if ((sequencing == null) || (sequencing.whenShouldAcquireValueForAll() == Sequencing.AFTER_INSERT)) {
    return;
  }
  HashMap tableDefinitions=new HashMap();
  HashSet sequenceDefinitions=new HashSet();
  HashSet processedSequenceNames=new HashSet();
  buildTableAndSequenceDefinitions(sequenceDefinitions,processedSequenceNames,tableDefinitions);
  processTableDefinitions(tableDefinitions,create);
  processSequenceDefinitions(sequenceDefinitions,drop);
}","/** 
 * Common implementor for createSequence and replaceSequence, distinguishes between sequence tables and sequence objects
 * @param createSequenceTables - true to create the sequences tables, false to replace them (dropped then create)
 * @param createSequenceObjects - true to create the sequences objects, false to replace them (dropped then create)
 */
protected void createOrReplaceSequences(boolean createSequenceTables,boolean createSequenceObjects) throws EclipseLinkException {
  boolean fast=FAST_TABLE_CREATOR;
  if (fast) {
    return;
  }
  Sequencing sequencing=getSession().getSequencing();
  if ((sequencing == null) || (sequencing.whenShouldAcquireValueForAll() == Sequencing.AFTER_INSERT)) {
    return;
  }
  HashMap tableDefinitions=new HashMap();
  HashSet sequenceDefinitions=new HashSet();
  HashSet processedSequenceNames=new HashSet();
  buildTableAndSequenceDefinitions(sequenceDefinitions,processedSequenceNames,tableDefinitions);
  processTableDefinitions(tableDefinitions,createSequenceTables);
  processSequenceDefinitions(sequenceDefinitions,createSequenceObjects);
}"
68755,"private void processTableDefinitions(final HashMap tableDefinitions,final boolean create) throws EclipseLinkException {
  Iterator itTableDefinitions=tableDefinitions.values().iterator();
  while (itTableDefinitions.hasNext()) {
    TableDefinition tableDefinition=(TableDefinition)itTableDefinitions.next();
    boolean shouldLogExceptionStackTrace=session.getSessionLog().shouldLogExceptionStackTrace();
    if (shouldLogExceptionStackTrace) {
      session.getSessionLog().setShouldLogExceptionStackTrace(false);
    }
    if (create) {
      try {
        createObject(tableDefinition);
      }
 catch (      DatabaseException exception) {
      }
 finally {
        if (shouldLogExceptionStackTrace) {
          session.getSessionLog().setShouldLogExceptionStackTrace(true);
        }
      }
    }
 else {
      try {
        dropObject(tableDefinition);
      }
 catch (      DatabaseException exception) {
      }
 finally {
        if (shouldLogExceptionStackTrace) {
          session.getSessionLog().setShouldLogExceptionStackTrace(true);
        }
      }
      createObject(tableDefinition);
    }
  }
}","/** 
 * Method creates database sequence tables.  If create is true, it will attempt to create the sequence tables and silently  ignore exceptions.  If create is false, it will drop the tables ignoring any exceptions, then create it.  
 * @param tableDefinitions - HashMap of Sequence table definitions
 * @param create - true if tables should be created, false if they should be replaced (dropped then created)
 * @throws TopLinkException
 */
private void processTableDefinitions(final HashMap tableDefinitions,final boolean create) throws EclipseLinkException {
  Iterator itTableDefinitions=tableDefinitions.values().iterator();
  boolean shouldLogExceptionStackTrace=session.getSessionLog().shouldLogExceptionStackTrace();
  while (itTableDefinitions.hasNext()) {
    TableDefinition tableDefinition=(TableDefinition)itTableDefinitions.next();
    processDatabaseObjectDefinition(tableDefinition,create,shouldLogExceptionStackTrace);
  }
}"
68756,"private void processSequenceDefinitions(final HashSet sequenceDefinitions,final boolean create) throws EclipseLinkException {
  Iterator itSequenceDefinitions=sequenceDefinitions.iterator();
  while (itSequenceDefinitions.hasNext()) {
    SequenceDefinition sequenceDefinition=(SequenceDefinition)itSequenceDefinitions.next();
    if (!create) {
      try {
        dropObject(sequenceDefinition);
      }
 catch (      DatabaseException exception) {
      }
    }
    createObject(sequenceDefinition);
  }
}","/** 
 * Method creates database sequence objects.  If create is true, it will attempt to create the sequence and silently ignore exceptions.  If create is false, it will drop the sequence ignoring any exceptions, then create it.  
 * @param sequenceDefinitions - HashSet of Sequence object definitions
 * @param create - true if sequenceDefinitions should be created, false if they should be replaced (dropped then created)
 * @throws TopLinkException
 */
private void processSequenceDefinitions(final HashSet sequenceDefinitions,final boolean create) throws EclipseLinkException {
  boolean shouldLogExceptionStackTrace=session.getSessionLog().shouldLogExceptionStackTrace();
  Iterator itSequenceDefinitions=sequenceDefinitions.iterator();
  while (itSequenceDefinitions.hasNext()) {
    SequenceDefinition sequenceDefinition=(SequenceDefinition)itSequenceDefinitions.next();
    processDatabaseObjectDefinition(sequenceDefinition,create,shouldLogExceptionStackTrace);
  }
}"
68757,"/** 
 * INTERNAL:
 */
public void createOnDatabase(AbstractSession session) throws EclipseLinkException {
  if (checkIfExist(session)) {
    alterOnDatabase(session);
  }
 else {
    super.createOnDatabase(session);
  }
}","/** 
 * INTERNAL: Creates this sequence definition on the database.  If it already exists, the method will attempt to alter it based on what the platform supports.  
 */
public void createOnDatabase(AbstractSession session) throws EclipseLinkException {
  if (checkIfExist(session)) {
    if (this.isAlterSupported(session)) {
      alterOnDatabase(session);
    }
  }
 else {
    super.createOnDatabase(session);
  }
}"
68758,"private void processGlobalElement(String targetNamespace,String defaultNamespace,Element element){
  boolean addedNR=addNextNamespaceResolver(element.getAttributesMap());
  if (element.getName() != null) {
    QName qname=new QName(targetNamespace,element.getName());
    Object processed=processedElements.get(qname);
    if (processed == null) {
      processElement(targetNamespace,defaultNamespace,null,null,element,true,false);
      processedElements.put(qname,element);
    }
  }
 else {
    startGlobalElement(targetNamespace,defaultNamespace,element);
    processElement(targetNamespace,defaultNamespace,null,null,element,true,false);
  }
  if (addedNR) {
    namespaceResolvers.remove(namespaceResolvers.size() - 1);
  }
}","private void processGlobalElement(String targetNamespace,String defaultNamespace,Element element){
  if (element.getName() != null) {
    QName qname=new QName(targetNamespace,element.getName());
    Object processed=processedElements.get(qname);
    if (processed == null) {
      processElement(targetNamespace,defaultNamespace,null,null,element,true,false);
      processedElements.put(qname,element);
    }
  }
 else {
    startGlobalElement(targetNamespace,defaultNamespace,element);
    processElement(targetNamespace,defaultNamespace,null,null,element,true,false);
  }
}"
68759,"protected void processElement(String targetNamespace,String defaultNamespace,String ownerName,TypeDefParticle typeDefParticle,Element element,boolean isGlobal,boolean isMany){
  ComplexType complexType=element.getComplexType();
  boolean qualified=true;
  if (!isGlobal) {
    qualified=rootSchema.isElementFormDefault();
  }
  if (!isMany && maxOccursGreaterThanOne(element.getMaxOccurs())) {
    isMany=true;
  }
  if (complexType != null) {
    processComplexType(targetNamespace,defaultNamespace,element.getName(),complexType);
    processSimpleElement(targetNamespace,defaultNamespace,ownerName,typeDefParticle,element,qualified,isGlobal,isMany);
  }
 else   if (element.getSimpleType() != null) {
    processSimpleType(targetNamespace,defaultNamespace,element.getName(),element.getSimpleType());
    processSimpleElement(targetNamespace,defaultNamespace,ownerName,typeDefParticle,element,qualified,isGlobal,isMany);
  }
 else {
    processSimpleElement(targetNamespace,defaultNamespace,ownerName,typeDefParticle,element,qualified,isGlobal,isMany);
  }
}","protected void processElement(String targetNamespace,String defaultNamespace,String ownerName,TypeDefParticle typeDefParticle,Element element,boolean isGlobal,boolean isMany){
  boolean addedNR=addNextNamespaceResolver(element.getAttributesMap());
  ComplexType complexType=element.getComplexType();
  boolean qualified=true;
  if (!isGlobal) {
    qualified=rootSchema.isElementFormDefault();
  }
  if (!isMany && maxOccursGreaterThanOne(element.getMaxOccurs())) {
    isMany=true;
  }
  if (complexType != null) {
    processComplexType(targetNamespace,defaultNamespace,element.getName(),complexType);
    processSimpleElement(targetNamespace,defaultNamespace,ownerName,typeDefParticle,element,qualified,isGlobal,isMany);
  }
 else   if (element.getSimpleType() != null) {
    processSimpleType(targetNamespace,defaultNamespace,element.getName(),element.getSimpleType());
    processSimpleElement(targetNamespace,defaultNamespace,ownerName,typeDefParticle,element,qualified,isGlobal,isMany);
  }
 else {
    processSimpleElement(targetNamespace,defaultNamespace,ownerName,typeDefParticle,element,qualified,isGlobal,isMany);
  }
  if (addedNR) {
    namespaceResolvers.remove(namespaceResolvers.size() - 1);
  }
}"
68760,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (!xmlBinaryDataCollectionMapping.shouldInlineBinaryData() && !xmlBinaryDataCollectionMapping.isSwaRef() && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().isXOPPackage()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
    if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
      Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
 else {
    value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value);
    if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
      Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,xmlBinaryDataCollectionMapping.getAttributeClassification());
  if (value != null) {
    Object container=unmarshalRecord.getContainerInstance(this);
    this.xmlBinaryDataCollectionMapping.getContainerPolicy().addInto(value,container,unmarshalRecord.getSession());
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (!xmlBinaryDataCollectionMapping.shouldInlineBinaryData() && !xmlBinaryDataCollectionMapping.isSwaRef() && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().isXOPPackage()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
    if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
    }
 else {
      value=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
    }
    if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
      Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
 else {
    value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value);
    if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
      Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
  }
  value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,xmlBinaryDataCollectionMapping.getAttributeClassification());
  if (value != null) {
    Object container=unmarshalRecord.getContainerInstance(this);
    unmarshalRecord.addAttributeValue(this,value);
  }
}"
68761,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  xmlCompositeCollectionMapping.getContainerPolicy().addInto(objectValue,collection,unmarshalRecord.getSession());
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}"
68762,"private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if ((null == value) || EMPTY_STRING.equals(value)) {
    return;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  xmlCompositeDirectCollectionMapping.getContainerPolicy().addInto(value,collection,unmarshalRecord.getSession());
}","private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if ((null == value) || EMPTY_STRING.equals(value)) {
    return;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}"
68763,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  Object value=builder.getNodes().pop();
  Object collection=unmarshalRecord.getContainerInstance(this);
  xmlFragmentCollectionMapping.getContainerPolicy().addInto(value,collection,unmarshalRecord.getSession());
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  Object value=builder.getNodes().pop();
  unmarshalRecord.addAttributeValue(this,value);
}"
68764,"public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value){
  Object collection=unmarshalRecord.getContainerInstance(containerValue);
  containerValue.getContainerPolicy().addInto(value,collection,unmarshalRecord.getSession());
}","public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value,Object collection){
  containerValue.getContainerPolicy().addInto(value,collection,unmarshalRecord.getSession());
}"
68765,"public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value){
  currentSetting.setMapping(containerValue.getMapping());
  currentSetting.setObject(unmarshalRecord.getCurrentObject());
  currentSetting.addValue(value,true,unmarshalRecord.getContainerInstance(containerValue));
}","public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value,Object collection){
  currentSetting.setMapping(containerValue.getMapping());
  currentSetting.setObject(unmarshalRecord.getCurrentObject());
  currentSetting.addValue(value,true,collection);
}"
68766,"public void startElement(UnmarshalRecord unmarshalRecord){
  Setting parentSetting=currentSetting;
  XPathFragment xPathFragment=unmarshalRecord.getXPathNode().getXPathFragment();
  if (null != xPathFragment) {
    currentSetting=new Setting(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
  }
 else {
    currentSetting=new Setting();
  }
  int levelIndex=unmarshalRecord.getLevelIndex();
  if (0 == levelIndex) {
  }
 else   if (1 == levelIndex) {
    SequencedObject sequencedObject=(SequencedObject)unmarshalRecord.getCurrentObject();
    sequencedObject.getSettings().add(currentSetting);
  }
 else {
    parentSetting.addChild(currentSetting);
  }
}","public void startElement(UnmarshalRecord unmarshalRecord){
  Setting parentSetting=currentSetting;
  XPathFragment xPathFragment=unmarshalRecord.getXPathNode().getXPathFragment();
  if (null != xPathFragment) {
    currentSetting=new Setting(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
  }
 else {
    currentSetting=new Setting();
  }
  int levelIndex=unmarshalRecord.getLevelIndex();
  if (0 == levelIndex) {
  }
 else   if (1 == levelIndex) {
    ((SequencedObject)unmarshalRecord.getCurrentObject()).getSettings().add(currentSetting);
  }
 else {
    parentSetting.addChild(currentSetting);
  }
}"
68767,"/** 
 * When a Reference is built the UnmarshalContext is given the ability to perform further processing on it. 
 * @param reference
 */
public void reference(Reference reference);",public void reference(Reference reference);
68768,"/** 
 * When a collection mapping is processed the UnmarshalContext is responsible for handling the values one at a time.
 * @param unmarshalRecord
 * @param containerValue A container object such as a java.util.ArrayList, to which the value will be added.
 * @param value The value to be added to the container,
 */
public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value);","/** 
 * When a collection mapping is processed the UnmarshalContext is responsible for handling the values one at a time.
 * @param unmarshalRecord
 * @param containerValue A container object such as a java.util.ArrayList, to which the value will be added.
 * @param value The value to be added to the container,
 * @param collection
 */
public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value,Object collection);"
68769,"public void addAttributeValue(ContainerValue containerValue,Object value){
  this.unmarshalContext.addAttributeValue(this,containerValue,value);
}","public void addAttributeValue(ContainerValue containerValue,Object value,Object collection){
  this.unmarshalContext.addAttributeValue(this,containerValue,value,collection);
}"
68770,"/** 
 * @param parentSetting The parent Setting or null if this setting has not parent. 
 */
protected void setParent(Setting parentSetting){
  this.parent=parentSetting;
}","/** 
 * @param parentSetting The parent Setting or null if this setting has not parent. 
 */
public void setParent(Setting parentSetting){
  this.parent=parentSetting;
}"
68771,"/** 
 * @return A copy of the Setting object and its child Setting objects.  The copycontains references to the original object, mapping, and value.
 */
public Setting copy(){
  Setting copy=new Setting();
  copy.setName(name);
  copy.setNamespaceURI(namespaceURI);
  copy.setObject(object);
  copy.setMapping(mapping);
  copy.setValue(value,false);
  if (null != children) {
    for (int index=0, size=children.size(); index < size; index++) {
      copy.addChild(children.get(index).copy());
    }
  }
  return copy;
}","public Setting copy(Object newParent,Object copyValue){
  Setting copy=new Setting();
  copy.setName(name);
  copy.setNamespaceURI(namespaceURI);
  if (getObject() != null) {
    copy.setObject(newParent);
  }
  copy.setMapping(mapping);
  copy.setValue(copyValue,false);
  if (null != children) {
    for (int index=0, size=children.size(); index < size; index++) {
      copy.addChild(children.get(index).copy(newParent,copyValue));
    }
  }
  return copy;
}"
68772,"/** 
 * Rollback the transaction on the datasource. If not using managed transaction rollback the local transaction.
 */
public void rollbackTransaction(AbstractSession session) throws DatabaseException {
  if (usesExternalTransactionController()) {
    if (!session.isSynchronized()) {
      setIsInTransaction(false);
      if (usesExternalConnectionPooling()) {
        closeConnection();
      }
    }
    return;
  }
  session.log(SessionLog.FINER,SessionLog.TRANSACTION,""String_Node_Str"",(Object[])null,this);
  try {
    session.startOperationProfile(SessionProfiler.TRANSACTION);
    incrementCallCount(session);
    basicRollbackTransaction(session);
  }
  finally {
    setIsInTransaction(false);
    sequencingCallback=null;
    decrementCallCount();
    session.endOperationProfile(SessionProfiler.TRANSACTION);
  }
}","/** 
 * Rollback the transaction on the datasource. If not using managed transaction rollback the local transaction.
 */
public void rollbackTransaction(AbstractSession session) throws DatabaseException {
  if (usesExternalTransactionController()) {
    if (!session.isSynchronized()) {
      setIsInTransaction(false);
      if (usesExternalConnectionPooling()) {
        currentSession=session;
        closeConnection();
      }
    }
    return;
  }
  session.log(SessionLog.FINER,SessionLog.TRANSACTION,""String_Node_Str"",(Object[])null,this);
  try {
    session.startOperationProfile(SessionProfiler.TRANSACTION);
    isCompletingTransaction=true;
    incrementCallCount(session);
    basicRollbackTransaction(session);
  }
  finally {
    setIsInTransaction(false);
    isCompletingTransaction=false;
    sequencingCallback=null;
    decrementCallCount();
    session.endOperationProfile(SessionProfiler.TRANSACTION);
  }
}"
68773,"/** 
 * Used for load balancing and external pooling.
 */
public synchronized void incrementCallCount(AbstractSession session){
  setCallCount(getCallCount() + 1);
  if (getCallCount() == 1) {
    if (getLogin() == null) {
      throw DatabaseException.databaseAccessorNotConnected();
    }
    if (getDatasourceConnection() != null) {
      if (!isConnected()) {
        if (isInTransaction()) {
          throw DatabaseException.databaseAccessorNotConnected();
        }
 else {
          reconnect(session);
        }
      }
    }
 else {
      if (usesExternalConnectionPooling()) {
        reconnect(session);
      }
 else {
        throw DatabaseException.databaseAccessorNotConnected();
      }
    }
  }
}","/** 
 * Used for load balancing and external pooling.
 */
public synchronized void incrementCallCount(AbstractSession session){
  setCallCount(getCallCount() + 1);
  if (getCallCount() == 1) {
    if (getLogin() == null) {
      throw DatabaseException.databaseAccessorNotConnected();
    }
    if (getDatasourceConnection() != null) {
      if (!isConnected()) {
        if (isInTransaction()) {
          throw DatabaseException.databaseAccessorNotConnected();
        }
 else {
          reconnect(session);
        }
      }
    }
 else {
      if (usesExternalConnectionPooling()) {
        reconnect(session);
        if (isBeginningTransaction || isInTransaction() || session.isExclusiveConnectionRequired()) {
          session.postConnectExternalConnection(this);
          currentSession=session;
        }
 else         if (isCompletingTransaction) {
          currentSession=session;
        }
      }
 else {
        throw DatabaseException.databaseAccessorNotConnected();
      }
    }
  }
}"
68774,"/** 
 * Reset statment count.
 */
public void resetStatmentsCount(){
  readStatementsCount=0;
  writeStatementsCount=0;
  storedProcedureStatementsCount=0;
}","/** 
 * Reset statement count.
 */
public void resetStatmentsCount(){
  readStatementsCount=0;
  writeStatementsCount=0;
  storedProcedureStatementsCount=0;
}"
68775,"/** 
 * This should be set to false if a communication failure occurred durring a call execution.   In the case of an invalid accessor the Accessor will not be returned to the pool.
 */
public void setIsValid(boolean isValid){
  this.isValid=isValid;
}","/** 
 * This should be set to false if a communication failure occurred during a call execution.   In the case of an invalid accessor the Accessor will not be returned to the pool.
 */
public void setIsValid(boolean isValid){
  this.isValid=isValid;
}"
68776,"/** 
 * Returns true if this Accessor can continue to be used.  This will be false if a communication failure occurred durring a call execution.  In the case of an invalid accessor the Accessor will not be returned to the pool.
 */
public boolean isValid(){
  return this.isValid;
}","/** 
 * Returns true if this Accessor can continue to be used.  This will be false if a communication failure occurred during a call execution.  In the case of an invalid accessor the Accessor will not be returned to the pool.
 */
public boolean isValid(){
  return this.isValid;
}"
68777,"/** 
 * Used for load balancing and external pooling.
 */
public synchronized void decrementCallCount(){
  int count=getCallCount();
  if (count <= 0) {
    return;
  }
  setCallCount(count - 1);
  if (usesExternalConnectionPooling() && (!isInTransaction()) && (count == 1)) {
    try {
      closeConnection();
    }
 catch (    DatabaseException ignore) {
    }
  }
}","/** 
 * Used for load balancing and external pooling.
 */
public synchronized void decrementCallCount(){
  int count=getCallCount();
  if (count <= 0) {
    return;
  }
  setCallCount(count - 1);
  if (usesExternalConnectionPooling() && (!isInTransaction()) && (currentSession == null || !currentSession.isExclusiveConnectionRequired())&& (count == 1)) {
    try {
      closeConnection();
    }
 catch (    DatabaseException ignore) {
    }
  }
}"
68778,"/** 
 * Close the accessor's connection. This is used only for external connection pooling when it is intended for the connection to be reconnected in the future.
 */
public void closeConnection(){
  try {
    if (getDatasourceConnection() != null) {
      if (isDatasourceConnected()) {
        closeDatasourceConnection();
      }
      setDatasourceConnection(null);
    }
  }
 catch (  DatabaseException exception) {
    setDatasourceConnection(null);
  }
}","/** 
 * Close the accessor's connection. This is used only for external connection pooling when it is intended for the connection to be reconnected in the future.
 */
public void closeConnection(){
  try {
    if (getDatasourceConnection() != null) {
      if (isDatasourceConnected()) {
        if (currentSession != null) {
          currentSession.preDisconnectExternalConnection(this);
        }
        closeDatasourceConnection();
      }
      setDatasourceConnection(null);
    }
  }
 catch (  DatabaseException exception) {
    setDatasourceConnection(null);
  }
 finally {
    currentSession=null;
  }
}"
68779,"/** 
 * Begin a transaction on the database. If not using managed transaction begin a local transaction.
 */
public void beginTransaction(AbstractSession session) throws DatabaseException {
  if (usesExternalTransactionController()) {
    setIsInTransaction(true);
    return;
  }
  session.log(SessionLog.FINER,SessionLog.TRANSACTION,""String_Node_Str"",(Object[])null,this);
  try {
    session.startOperationProfile(SessionProfiler.TRANSACTION);
    incrementCallCount(session);
    basicBeginTransaction(session);
    setIsInTransaction(true);
  }
  finally {
    decrementCallCount();
    session.endOperationProfile(SessionProfiler.TRANSACTION);
  }
}","/** 
 * Begin a transaction on the database. If not using managed transaction begin a local transaction.
 */
public void beginTransaction(AbstractSession session) throws DatabaseException {
  if (usesExternalTransactionController()) {
    if (session.isExclusiveConnectionRequired() && !isInTransaction() && usesExternalConnectionPooling()) {
      closeConnection();
    }
    setIsInTransaction(true);
    return;
  }
  session.log(SessionLog.FINER,SessionLog.TRANSACTION,""String_Node_Str"",(Object[])null,this);
  try {
    session.startOperationProfile(SessionProfiler.TRANSACTION);
    isBeginningTransaction=true;
    incrementCallCount(session);
    basicBeginTransaction(session);
    setIsInTransaction(true);
  }
  finally {
    isBeginningTransaction=false;
    decrementCallCount();
    session.endOperationProfile(SessionProfiler.TRANSACTION);
  }
}"
68780,"/** 
 * Commit a transaction on the database. If using non-managed transaction commit the local transaction.
 */
public void commitTransaction(AbstractSession session) throws DatabaseException {
  if (usesExternalTransactionController()) {
    if (!session.isSynchronized()) {
      setIsInTransaction(false);
      if (usesExternalConnectionPooling()) {
        closeConnection();
      }
    }
    return;
  }
  session.log(SessionLog.FINER,SessionLog.TRANSACTION,""String_Node_Str"",(Object[])null,this);
  try {
    session.startOperationProfile(SessionProfiler.TRANSACTION);
    incrementCallCount(session);
    basicCommitTransaction(session);
    if (sequencingCallback != null) {
      sequencingCallback.afterCommit(this);
    }
    setIsInTransaction(false);
  }
  finally {
    sequencingCallback=null;
    decrementCallCount();
    session.endOperationProfile(SessionProfiler.TRANSACTION);
  }
}","/** 
 * Commit a transaction on the database. If using non-managed transaction commit the local transaction.
 */
public void commitTransaction(AbstractSession session) throws DatabaseException {
  if (usesExternalTransactionController()) {
    if (!session.isSynchronized()) {
      setIsInTransaction(false);
      if (usesExternalConnectionPooling()) {
        currentSession=session;
        closeConnection();
      }
    }
    return;
  }
  session.log(SessionLog.FINER,SessionLog.TRANSACTION,""String_Node_Str"",(Object[])null,this);
  try {
    session.startOperationProfile(SessionProfiler.TRANSACTION);
    isCompletingTransaction=true;
    incrementCallCount(session);
    basicCommitTransaction(session);
    if (sequencingCallback != null) {
      sequencingCallback.afterCommit(this);
    }
    setIsInTransaction(false);
  }
  finally {
    isCompletingTransaction=false;
    sequencingCallback=null;
    decrementCallCount();
    session.endOperationProfile(SessionProfiler.TRANSACTION);
  }
}"
68781,"/** 
 * INTERNAL: This method is extended from the superclass ClientSession.  This class uses only one accessor for all connections and as such does not need a seperate write connection.  The accessor will be used for all database access
 */
public void setWriteConnection(Accessor accessor){
  if (getLogin().shouldUseExternalConnectionPooling()) {
    if (accessor != null) {
      accessor.incrementCallCount(this);
    }
 else {
      this.accessor.decrementCallCount();
    }
  }
  this.accessor=accessor;
}","/** 
 * INTERNAL: This method is extended from the superclass ClientSession.  This class uses only one accessor for all connections and as such does not need a seperate write connection.  The accessor will be used for all database access
 */
public void setWriteConnection(Accessor accessor){
  this.accessor=accessor;
}"
68782,"/** 
 * INTERNAL: Release the clients connection resource.
 */
public void releaseClientSession(ClientSession clientSession) throws DatabaseException {
  if (clientSession.getConnectionPolicy().isPooled()) {
    ConnectionPool pool=(ConnectionPool)getConnectionPools().get(clientSession.getConnectionPolicy().getPoolName());
    getEventManager().preReleaseConnection(clientSession.getWriteConnection());
    pool.releaseConnection(clientSession.getWriteConnection());
    clientSession.setWriteConnection(null);
  }
 else {
    clientSession.disconnect();
    clientSession.setWriteConnection(null);
    if (this.maxNumberOfNonPooledConnections != NO_MAX) {
synchronized (this) {
        this.numberOfNonPooledConnectionsUsed--;
        notify();
      }
    }
  }
  if (clientSession.getConnectionPolicy().shouldUseExclusiveConnection()) {
    getEventManager().preReleaseExclusiveConnection(clientSession,clientSession.getWriteConnection());
  }
}","/** 
 * INTERNAL: Release the clients connection resource.
 */
public void releaseClientSession(ClientSession clientSession) throws DatabaseException {
  if (clientSession.getConnectionPolicy().isPooled()) {
    ConnectionPool pool=(ConnectionPool)getConnectionPools().get(clientSession.getConnectionPolicy().getPoolName());
    if (!clientSession.getWriteConnection().usesExternalConnectionPooling()) {
      getEventManager().preReleaseConnection(clientSession.getWriteConnection());
      if (clientSession.getConnectionPolicy().shouldUseExclusiveConnection()) {
        getEventManager().preReleaseExclusiveConnection(clientSession,clientSession.getWriteConnection());
      }
    }
    pool.releaseConnection(clientSession.getWriteConnection());
    clientSession.setWriteConnection(null);
  }
 else {
    if (clientSession.getConnectionPolicy().shouldUseExclusiveConnection()) {
      if (!clientSession.getWriteConnection().usesExternalConnectionPooling()) {
        getEventManager().preReleaseExclusiveConnection(clientSession,clientSession.getWriteConnection());
      }
    }
    clientSession.disconnect();
    clientSession.setWriteConnection(null);
    if (this.maxNumberOfNonPooledConnections != NO_MAX) {
synchronized (this) {
        this.numberOfNonPooledConnectionsUsed--;
        notify();
      }
    }
  }
}"
68783,"/** 
 * INTERNAL: Allocate the client's connection resource.
 */
public void acquireClientConnection(ClientSession clientSession) throws DatabaseException, ConcurrencyException {
  if (clientSession.getConnectionPolicy().isPooled()) {
    ConnectionPool pool=(ConnectionPool)getConnectionPools().get(clientSession.getConnectionPolicy().getPoolName());
    Accessor connection=pool.acquireConnection();
    clientSession.setWriteConnection(connection);
    getEventManager().postAcquireConnection(connection);
  }
 else {
    if (this.maxNumberOfNonPooledConnections != NO_MAX) {
synchronized (this) {
        while (this.numberOfNonPooledConnectionsUsed >= this.maxNumberOfNonPooledConnections) {
          try {
            wait();
          }
 catch (          InterruptedException exception) {
            throw ConcurrencyException.waitFailureOnServerSession(exception);
          }
        }
        this.numberOfNonPooledConnectionsUsed++;
      }
    }
    clientSession.setWriteConnection(clientSession.getLogin().buildAccessor());
    clientSession.connect();
  }
  if (clientSession.getConnectionPolicy().shouldUseExclusiveConnection()) {
    getEventManager().postAcquireExclusiveConnection(clientSession,clientSession.getWriteConnection());
  }
}","/** 
 * INTERNAL: Allocate the client's connection resource.
 */
public void acquireClientConnection(ClientSession clientSession) throws DatabaseException, ConcurrencyException {
  if (clientSession.getConnectionPolicy().isPooled()) {
    ConnectionPool pool=(ConnectionPool)getConnectionPools().get(clientSession.getConnectionPolicy().getPoolName());
    Accessor connection=pool.acquireConnection();
    clientSession.setWriteConnection(connection);
    if (!connection.usesExternalConnectionPooling()) {
      getEventManager().postAcquireConnection(connection);
      if (clientSession.getConnectionPolicy().shouldUseExclusiveConnection()) {
        getEventManager().postAcquireExclusiveConnection(clientSession,clientSession.getWriteConnection());
      }
    }
  }
 else {
    if (this.maxNumberOfNonPooledConnections != NO_MAX) {
synchronized (this) {
        while (this.numberOfNonPooledConnectionsUsed >= this.maxNumberOfNonPooledConnections) {
          try {
            wait();
          }
 catch (          InterruptedException exception) {
            throw ConcurrencyException.waitFailureOnServerSession(exception);
          }
        }
        this.numberOfNonPooledConnectionsUsed++;
      }
    }
    clientSession.setWriteConnection(clientSession.getLogin().buildAccessor());
    clientSession.connect();
    if (clientSession.getConnectionPolicy().shouldUseExclusiveConnection()) {
      if (!clientSession.getWriteConnection().usesExternalConnectionPooling()) {
        getEventManager().postAcquireExclusiveConnection(clientSession,clientSession.getWriteConnection());
      }
    }
  }
}"
68784,"public boolean equals(Object object){
  if (object instanceof Root) {
    Map collection1=any;
    Map collection2=((Root)object).getAny();
    if (collection1 == null && collection2 == null) {
      return true;
    }
 else     if (collection1 == null && collection2.size() == 0) {
      return true;
    }
 else     if (collection2 == null && collection1.size() == 0) {
      return true;
    }
 else     if (collection1 == null && collection2.size() > 0) {
      return false;
    }
 else     if (collection2 == null && collection1.size() > 0) {
      return false;
    }
 else     if (any.size() != ((Root)object).getAny().size()) {
      return false;
    }
 else {
      Iterator values1=any.keySet().iterator();
      Iterator values2=((Root)object).getAny().keySet().iterator();
      while (values1.hasNext()) {
        Object key1=values1.next();
        Object key2=values2.next();
        if (!(key1.equals(key2) && any.get(key1).equals(collection2.get(key2)))) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}","public boolean equals(Object object){
  if (object instanceof Root) {
    Map collection1=any;
    Map collection2=((Root)object).getAny();
    if (collection1 == null && collection2 == null) {
      return true;
    }
 else     if (collection1 == null && collection2.size() == 0) {
      return true;
    }
 else     if (collection2 == null && collection1.size() == 0) {
      return true;
    }
 else     if (collection1 == null && collection2.size() > 0) {
      return false;
    }
 else     if (collection2 == null && collection1.size() > 0) {
      return false;
    }
 else     if (any.size() != ((Root)object).getAny().size()) {
      return false;
    }
 else {
      Iterator values1=any.keySet().iterator();
      while (values1.hasNext()) {
        Object key1=values1.next();
        Object value1=collection1.get(key1);
        Object value2=collection2.get(key1);
        if (!(value1.equals(value2))) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}"
68785,"private DatabaseMapping buildXMLCompositeCollectionMapping(String mappingUri){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,false);
  mapping.setXPath(xpath);
  if (getType() != SDOConstants.SDO_DATAOBJECT) {
    QName schemaContext=((SDOType)getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)getType()).getXmlDescriptor().getNamespaceResolver());
    ((XMLField)mapping.getField()).setLeafElementType(schemaContext);
    mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
    mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  }
  mapping.useCollectionClass(ListWrapper.class);
  return mapping;
}","private DatabaseMapping buildXMLCompositeCollectionMapping(String mappingUri){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,false);
  mapping.setXPath(xpath);
  if (getType() != SDOConstants.SDO_DATAOBJECT) {
    QName schemaContext=((SDOType)getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)getType()).getXmlDescriptor().getNamespaceResolver());
    ((XMLField)mapping.getField()).setLeafElementType(schemaContext);
    mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
    mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  }
 else {
    if (getXsdType() != null) {
      ((XMLField)mapping.getField()).setLeafElementType(getXsdType());
    }
  }
  mapping.useCollectionClass(ListWrapper.class);
  return mapping;
}"
68786,"/** 
 * INTERNAL:
 */
public void buildMapping(String mappingUri,int indexToAdd){
  if (getContainingType().isDataType()) {
    return;
  }
  if (getType().equals(SDOConstants.SDO_CHANGESUMMARY)) {
    buildChangeSummaryMapping();
    addMappingToOwner(false,indexToAdd);
  }
 else   if (isNameCollision()) {
    xmlMapping=new XMLAnyCollectionMapping();
    xmlMapping.setAttributeName(getName());
    addMappingToOwner(true,indexToAdd);
  }
 else {
    boolean sdoMethodAccessor=true;
    if (!getType().isDataType()) {
      if (getType().equals(SDOConstants.SDO_DATAOBJECT)) {
        ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
        sdoMethodAccessor=false;
        if (isMany()) {
          xmlMapping=buildXMLFragmentCollectionMapping(mappingUri);
        }
 else {
          xmlMapping=buildXMLFragmentMapping(mappingUri);
        }
      }
 else {
        if (!((SDOType)getType()).isFinalized()) {
          ((SDOType)getType()).getNonFinalizedReferencingProps().add(this);
          ((SDOType)getType()).getNonFinalizedMappingURIs().add(mappingUri);
          return;
        }
        if (isSubstitutable()) {
          if (isMany()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
        }
 else         if (isMany()) {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCollectionReferenceMapping(mappingUri);
          }
        }
 else {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLObjectReferenceMapping(mappingUri);
          }
        }
      }
    }
 else {
      if (isMany()) {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")))) {
          xmlMapping=buildXMLBinaryDataCollectionMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeDirectCollectionMapping(mappingUri);
          }
        }
      }
 else {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")))) {
          xmlMapping=buildXMLBinaryDataMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLDirectMapping(mappingUri);
          }
        }
      }
    }
    addMappingToOwner(sdoMethodAccessor,indexToAdd);
  }
}","/** 
 * INTERNAL:
 */
public void buildMapping(String mappingUri,int indexToAdd){
  if (getContainingType().isDataType()) {
    return;
  }
  if (getType().equals(SDOConstants.SDO_CHANGESUMMARY)) {
    buildChangeSummaryMapping();
    addMappingToOwner(false,indexToAdd);
  }
 else   if (isNameCollision()) {
    xmlMapping=new XMLAnyCollectionMapping();
    xmlMapping.setAttributeName(getName());
    addMappingToOwner(true,indexToAdd);
  }
 else {
    boolean sdoMethodAccessor=true;
    if (!getType().isDataType()) {
      if (getType().equals(SDOConstants.SDO_DATAOBJECT)) {
        ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
        if (getXsdType() != null && !getXsdType().equals(SDOConstants.ANY_TYPE_QNAME)) {
          if (isMany()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
        }
 else {
          sdoMethodAccessor=false;
          if (isMany()) {
            xmlMapping=buildXMLFragmentCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLFragmentMapping(mappingUri);
          }
        }
      }
 else {
        if (!((SDOType)getType()).isFinalized()) {
          ((SDOType)getType()).getNonFinalizedReferencingProps().add(this);
          ((SDOType)getType()).getNonFinalizedMappingURIs().add(mappingUri);
          return;
        }
        if (isSubstitutable()) {
          if (isMany()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
        }
 else         if (isMany()) {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCollectionReferenceMapping(mappingUri);
          }
        }
 else {
          if (isContainment()) {
            xmlMapping=buildXMLCompositeObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLObjectReferenceMapping(mappingUri);
          }
        }
      }
    }
 else {
      if (isMany()) {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")))) {
          xmlMapping=buildXMLBinaryDataCollectionMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceCollectionMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLCompositeDirectCollectionMapping(mappingUri);
          }
        }
      }
 else {
        MimeTypePolicy mimeTypePolicy=getMimeTypePolicy();
        if (!aHelperContext.getXSDHelper().isAttribute(this) && ((mimeTypePolicy != null) || ((getType().getInstanceClass() != null) && getType().getInstanceClass().getName().equals(""String_Node_Str"")))) {
          xmlMapping=buildXMLBinaryDataMapping(mappingUri,mimeTypePolicy);
        }
 else {
          if (isSubstitutable()) {
            xmlMapping=buildXMLChoiceObjectMapping(mappingUri);
          }
 else {
            xmlMapping=buildXMLDirectMapping(mappingUri);
          }
        }
      }
    }
    addMappingToOwner(sdoMethodAccessor,indexToAdd);
  }
}"
68787,"private DatabaseMapping buildXMLCompositeObjectMapping(String mappingUri){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,false);
  mapping.setXPath(xpath);
  if (getType() != SDOConstants.SDO_DATAOBJECT) {
    QName schemaContext=((SDOType)getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)getType()).getXmlDescriptor().getNamespaceResolver());
    ((XMLField)mapping.getField()).setLeafElementType(schemaContext);
    mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
    mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  }
  if (nullable) {
    setIsSetNillablePolicyOnMapping(mapping,propertyName);
  }
 else {
    setIsSetOptionalPolicyOnMapping(mapping,propertyName);
  }
  return mapping;
}","private DatabaseMapping buildXMLCompositeObjectMapping(String mappingUri){
  XMLCompositeObjectMapping mapping=new XMLCompositeObjectMapping();
  mapping.setAttributeName(getName());
  String xpath=getQualifiedXPath(mappingUri,false);
  mapping.setXPath(xpath);
  if (getType() != SDOConstants.SDO_DATAOBJECT) {
    QName schemaContext=((SDOType)getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)getType()).getXmlDescriptor().getNamespaceResolver());
    ((XMLField)mapping.getField()).setLeafElementType(schemaContext);
    mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
    mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  }
 else {
    if (getXsdType() != null) {
      ((XMLField)mapping.getField()).setLeafElementType(getXsdType());
    }
  }
  if (nullable) {
    setIsSetNillablePolicyOnMapping(mapping,propertyName);
  }
 else {
    setIsSetOptionalPolicyOnMapping(mapping,propertyName);
  }
  return mapping;
}"
68788,"/** 
 * INTERNAL: Get default package name from a namespace URI.<br> This function follows the JSR-222 JAXB 2.0 algorithm from https://jaxb.dev.java.net/spec-download.html.<br>
 * @param uriString - a namespace URL or URN
 * @return Java package name String
 * @exclude
 */
public static String getPackageNameFromURI(String uriString){
  String strToken;
  String prefix;
  int position=0;
  StringBuffer pkgName=new StringBuffer();
  if (null == uriString || uriString.equals(SDOConstants.EMPTY_STRING)) {
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{uriString,SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME},false);
    return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
  }
  URI uri;
  String originalUriString=uriString;
  String schemePrefix;
  boolean invalidOriginalFormat=false;
  boolean isValidScheme=false;
  try {
    uri=new URI(uriString);
    schemePrefix=uri.getScheme();
    if (null != schemePrefix && (schemePrefix.equalsIgnoreCase(""String_Node_Str"") || schemePrefix.equalsIgnoreCase(""String_Node_Str""))) {
      uriString=uri.getSchemeSpecificPart();
      isValidScheme=true;
    }
  }
 catch (  NullPointerException npe) {
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{""String_Node_Str"",SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME},false);
    return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
  }
catch (  URISyntaxException use) {
    invalidOriginalFormat=true;
    if (uriString.length() > 4) {
      prefix=uriString.substring(0,4);
      if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
        uriString=uriString.substring(4);
        isValidScheme=true;
      }
 else {
        prefix=uriString.substring(0,5);
        if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
          uriString=uriString.substring(5);
          isValidScheme=true;
        }
      }
    }
  }
 finally {
    int potentialPathSepIndex=uriString.lastIndexOf('/');
    int potentialHostSepIndex=uriString.indexOf('/');
    int potentialFileExtIndex=uriString.lastIndexOf('.');
    if ((!isValidScheme && potentialFileExtIndex != -1) || ((potentialFileExtIndex != -1 && potentialPathSepIndex != -1 && potentialHostSepIndex != -1 && (potentialPathSepIndex - potentialHostSepIndex) > 1))) {
      String extension=uriString.substring(potentialFileExtIndex);
      if (extension.length() == 3 || extension.length() == 4 || extension.equalsIgnoreCase(""String_Node_Str"")) {
        uriString=uriString.substring(0,potentialFileExtIndex);
      }
    }
    StringTokenizer aTokenizer=new StringTokenizer(uriString,""String_Node_Str"");
    int length=aTokenizer.countTokens();
    if (length == 0) {
      return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
    }
    ArrayList<String> strings=new ArrayList<String>(length);
    while (aTokenizer.hasMoreTokens()) {
      strToken=aTokenizer.nextToken();
      strings.add(decodeUriHexadecimalEscapeSequence(strToken));
    }
    strToken=strings.remove(0).toLowerCase();
    aTokenizer=new StringTokenizer(strToken,""String_Node_Str"");
    if (aTokenizer.countTokens() < 1) {
      AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{uriString,SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME},false);
      return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
    }
 else {
      while (aTokenizer.hasMoreTokens()) {
        strToken=aTokenizer.nextToken();
        if (!strToken.equals(""String_Node_Str"")) {
          strings.add(0,strToken);
        }
      }
    }
    position=0;
    for (    String aString : strings) {
      strings.set(position++,aString.toLowerCase());
    }
    position=0;
    for (    String aString : strings) {
      StringBuffer buffer=new StringBuffer();
      for (int j=0; j < aString.length(); j++) {
        char charToken=aString.charAt(j);
        if (Character.isJavaIdentifierPart(charToken)) {
          buffer.append(charToken);
        }
 else {
          buffer.append('_');
        }
      }
      if (!Character.isJavaIdentifierStart(buffer.charAt(0))) {
        buffer.insert(0,'_');
      }
      if (position++ != 0) {
        buffer.insert(0,'.');
      }
      pkgName.append(buffer.toString());
    }
    if (invalidOriginalFormat) {
      AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{originalUriString,pkgName},false);
    }
  }
  return pkgName.toString();
}","/** 
 * INTERNAL: Get default package name from a namespace URI.<br> This function follows the JSR-222 JAXB 2.0 algorithm from https://jaxb.dev.java.net/spec-download.html.<br>
 * @param uriString - a namespace URL or URN
 * @return Java package name String
 * @exclude
 */
public static String getPackageNameFromURI(String uriString){
  String strToken;
  String prefix;
  int position=0;
  StringBuffer pkgName=new StringBuffer();
  if (null == uriString || uriString.equals(SDOConstants.EMPTY_STRING)) {
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{uriString,SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME},false);
    return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
  }
  URI uri;
  String originalUriString=uriString;
  String schemePrefix;
  boolean invalidOriginalFormat=false;
  boolean invalidScheme=false;
  try {
    uri=new URI(uriString);
    schemePrefix=uri.getScheme();
    if (null != schemePrefix) {
      if ((schemePrefix.equalsIgnoreCase(""String_Node_Str"") || schemePrefix.equalsIgnoreCase(""String_Node_Str""))) {
        uriString=uri.getSchemeSpecificPart();
      }
 else {
        invalidScheme=true;
      }
    }
  }
 catch (  NullPointerException npe) {
    AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{""String_Node_Str"",SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME},false);
    return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
  }
catch (  URISyntaxException use) {
    invalidOriginalFormat=true;
    if (uriString.length() > 4) {
      prefix=uriString.substring(0,4);
      if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
        uriString=uriString.substring(4);
      }
 else {
        prefix=uriString.substring(0,5);
        if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
          uriString=uriString.substring(5);
        }
      }
    }
  }
 finally {
    int potentialPathSepIndex=uriString.lastIndexOf('/');
    int potentialHostSepIndex=uriString.indexOf('/');
    int potentialFileExtIndex=uriString.lastIndexOf('.');
    if ((invalidScheme && potentialFileExtIndex != -1) || ((potentialFileExtIndex != -1 && potentialPathSepIndex != -1 && potentialHostSepIndex != -1 && (potentialPathSepIndex - potentialHostSepIndex) > 1))) {
      String extension=uriString.substring(potentialFileExtIndex);
      if (extension.length() == 3 || extension.length() == 4 || extension.equalsIgnoreCase(""String_Node_Str"")) {
        uriString=uriString.substring(0,potentialFileExtIndex);
      }
    }
    StringTokenizer aTokenizer=new StringTokenizer(uriString,""String_Node_Str"");
    int length=aTokenizer.countTokens();
    if (length == 0) {
      return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
    }
    ArrayList<String> strings=new ArrayList<String>(length);
    while (aTokenizer.hasMoreTokens()) {
      strToken=aTokenizer.nextToken();
      strings.add(decodeUriHexadecimalEscapeSequence(strToken));
    }
    strToken=strings.remove(0).toLowerCase();
    aTokenizer=new StringTokenizer(strToken,""String_Node_Str"");
    if (aTokenizer.countTokens() < 1) {
      AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{uriString,SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME},false);
      return SDOConstants.JAVA_TYPEGENERATION_DEFAULT_PACKAGE_NAME;
    }
 else {
      while (aTokenizer.hasMoreTokens()) {
        strToken=aTokenizer.nextToken();
        if (!strToken.equals(""String_Node_Str"")) {
          strings.add(0,strToken);
        }
      }
    }
    position=0;
    for (    String aString : strings) {
      strings.set(position++,aString.toLowerCase());
    }
    position=0;
    for (    String aString : strings) {
      StringBuffer buffer=new StringBuffer();
      for (int j=0; j < aString.length(); j++) {
        char charToken=aString.charAt(j);
        if (Character.isJavaIdentifierPart(charToken)) {
          buffer.append(charToken);
        }
 else {
          buffer.append('_');
        }
      }
      if (!Character.isJavaIdentifierStart(buffer.charAt(0))) {
        buffer.insert(0,'_');
      }
      if (position++ != 0) {
        buffer.insert(0,'.');
      }
      pkgName.append(buffer.toString());
    }
    if (invalidOriginalFormat) {
      AbstractSessionLog.getLog().log(AbstractSessionLog.FINEST,INVALID_URI_WARNING,new Object[]{originalUriString,pkgName},false);
    }
  }
  return pkgName.toString();
}"
68789,"public XMLDocument load(Source source,String locationURI,Object options) throws IOException {
  XMLUnmarshaller anXMLUnmarshaller=getXmlUnmarshaller();
  Object unmarshalledObject=null;
  if (options == null) {
    unmarshalledObject=anXMLUnmarshaller.unmarshal(source);
  }
 else {
    try {
      DataObject optionsDataObject=(DataObject)options;
      try {
        SDOType theType=(SDOType)optionsDataObject.get(SDOConstants.TYPE_LOAD_OPTION);
        if (theType != null) {
          unmarshalledObject=anXMLUnmarshaller.unmarshal(source,theType.getImplClass());
        }
 else {
          unmarshalledObject=anXMLUnmarshaller.unmarshal(source);
        }
      }
 catch (      ClassCastException ccException) {
        throw SDOException.typePropertyMustBeAType(ccException);
      }
    }
 catch (    ClassCastException ccException) {
      throw SDOException.optionsMustBeADataObject(ccException,SDOConstants.ORACLE_SDO_URL,SDOConstants.XMLHELPER_LOAD_OPTIONS);
    }
  }
  if (unmarshalledObject instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)unmarshalledObject;
    XMLDocument xmlDocument=createDocument((DataObject)((XMLRoot)unmarshalledObject).getObject(),((XMLRoot)unmarshalledObject).getNamespaceURI(),((XMLRoot)unmarshalledObject).getLocalName());
    if (xmlRoot.getEncoding() != null) {
      xmlDocument.setEncoding(xmlRoot.getEncoding());
    }
    if (xmlRoot.getXMLVersion() != null) {
      xmlDocument.setXMLVersion(xmlRoot.getXMLVersion());
    }
    xmlDocument.setSchemaLocation(xmlRoot.getSchemaLocation());
    xmlDocument.setNoNamespaceSchemaLocation(xmlRoot.getNoNamespaceSchemaLocation());
    return xmlDocument;
  }
 else   if (unmarshalledObject instanceof DataObject) {
    DataObject unmarshalledDataObject=(DataObject)unmarshalledObject;
    String localName=((SDOType)((DataObject)unmarshalledObject).getType()).getXmlDescriptor().getDefaultRootElement();
    if (localName == null) {
      localName=((SDOType)((DataObject)unmarshalledObject).getType()).getXsdLocalName();
    }
    return createDocument(unmarshalledDataObject,unmarshalledDataObject.getType().getURI(),localName);
  }
 else   if (unmarshalledObject instanceof XMLDocument) {
    return (XMLDocument)unmarshalledObject;
  }
  return null;
}","public XMLDocument load(Source source,String locationURI,Object options) throws IOException {
  XMLUnmarshaller anXMLUnmarshaller=getXmlUnmarshaller();
  Object unmarshalledObject=null;
  if (options == null) {
    try {
      unmarshalledObject=anXMLUnmarshaller.unmarshal(source);
    }
 catch (    XMLMarshalException xmlException) {
      handleXMLMarshalException(xmlException);
    }
  }
 else {
    try {
      DataObject optionsDataObject=(DataObject)options;
      try {
        SDOType theType=(SDOType)optionsDataObject.get(SDOConstants.TYPE_LOAD_OPTION);
        try {
          if (theType != null) {
            unmarshalledObject=anXMLUnmarshaller.unmarshal(source,theType.getImplClass());
          }
 else {
            unmarshalledObject=anXMLUnmarshaller.unmarshal(source);
          }
        }
 catch (        XMLMarshalException xmlException) {
          handleXMLMarshalException(xmlException);
        }
      }
 catch (      ClassCastException ccException) {
        throw SDOException.typePropertyMustBeAType(ccException);
      }
    }
 catch (    ClassCastException ccException) {
      throw SDOException.optionsMustBeADataObject(ccException,SDOConstants.ORACLE_SDO_URL,SDOConstants.XMLHELPER_LOAD_OPTIONS);
    }
  }
  if (unmarshalledObject instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)unmarshalledObject;
    XMLDocument xmlDocument=createDocument((DataObject)((XMLRoot)unmarshalledObject).getObject(),((XMLRoot)unmarshalledObject).getNamespaceURI(),((XMLRoot)unmarshalledObject).getLocalName());
    if (xmlRoot.getEncoding() != null) {
      xmlDocument.setEncoding(xmlRoot.getEncoding());
    }
    if (xmlRoot.getXMLVersion() != null) {
      xmlDocument.setXMLVersion(xmlRoot.getXMLVersion());
    }
    xmlDocument.setSchemaLocation(xmlRoot.getSchemaLocation());
    xmlDocument.setNoNamespaceSchemaLocation(xmlRoot.getNoNamespaceSchemaLocation());
    return xmlDocument;
  }
 else   if (unmarshalledObject instanceof DataObject) {
    DataObject unmarshalledDataObject=(DataObject)unmarshalledObject;
    String localName=((SDOType)((DataObject)unmarshalledObject).getType()).getXmlDescriptor().getDefaultRootElement();
    if (localName == null) {
      localName=((SDOType)((DataObject)unmarshalledObject).getType()).getXsdLocalName();
    }
    return createDocument(unmarshalledDataObject,unmarshalledDataObject.getType().getURI(),localName);
  }
 else   if (unmarshalledObject instanceof XMLDocument) {
    return (XMLDocument)unmarshalledObject;
  }
  return null;
}"
68790,"/** 
 * <p>Closes this EntityManager. <p>After invoking this method, all methods on the instance will throw an  {@link IllegalStateException} except for {@link #isOpen}, which will return <code>false</code>   .</p> <p>This should be called when a method is finished with the EntityManager in a bean-managed transaction environment or when executed outside a container. Closing of the EntityManager is handled by the container when using container-managed transactions.</p>
 */
public void close(){
  try {
    verifyOpen();
    isOpen=false;
    factory=null;
    serverSession=null;
    if (extendedPersistenceContext != null) {
      if (checkForTransaction(false) == null) {
        extendedPersistenceContext.clearForClose(false);
      }
 else {
        extendedPersistenceContext.setShouldClearForCloseInsteadOfResume(true);
      }
      extendedPersistenceContext=null;
    }
  }
 catch (  RuntimeException e) {
    this.setRollbackOnly();
    throw e;
  }
}","/** 
 * <p>Closes this EntityManager. <p>After invoking this method, all methods on the instance will throw an  {@link IllegalStateException} except for {@link #isOpen}, which will return <code>false</code>   .</p> <p>This should be called when a method is finished with the EntityManager in a bean-managed transaction environment or when executed outside a container. Closing of the EntityManager is handled by the container when using container-managed transactions.</p>
 */
public void close(){
  try {
    verifyOpen();
    isOpen=false;
    factory=null;
    serverSession=null;
    if (extendedPersistenceContext != null) {
      if (checkForTransaction(false) == null && !extendedPersistenceContext.isSynchronized()) {
        extendedPersistenceContext.clearForClose(false);
      }
 else {
        extendedPersistenceContext.setShouldClearForCloseInsteadOfResume(true);
      }
      extendedPersistenceContext=null;
    }
  }
 catch (  RuntimeException e) {
    this.setRollbackOnly();
    throw e;
  }
}"
68791,"public CloseConnAfterDatabaseSessionTxnTest(boolean hasExternalTransactionController){
  if (hasExternalTransactionController) {
    setDescription(""String_Node_Str"");
  }
 else {
    setDescription(""String_Node_Str"");
  }
  this.hasExternalTransactionController=hasExternalTransactionController;
}","public CloseConnAfterDatabaseSessionTxnTest(){
  setDescription(""String_Node_Str"");
}"
68792,"public void setup(){
  org.eclipse.persistence.sessions.Project project=new org.eclipse.persistence.testing.models.employee.relational.EmployeeProject();
  DatasourceLogin clonedLogin=(DatasourceLogin)((org.eclipse.persistence.sessions.DatabaseSession)getSession()).getProject().getDatasourceLogin().clone();
  project.setLogin(clonedLogin);
  clonedLogin.useExternalConnectionPooling();
  if (hasExternalTransactionController) {
    clonedLogin.useExternalTransactionController();
  }
  session=project.createDatabaseSession();
  if (hasExternalTransactionController) {
    session.setExternalTransactionController(new DummyExternalTransactionController());
  }
  session.login();
}","public void setup(){
  org.eclipse.persistence.sessions.Project project=new org.eclipse.persistence.testing.models.employee.relational.EmployeeProject();
  DatasourceLogin clonedLogin=(DatasourceLogin)((org.eclipse.persistence.sessions.DatabaseSession)getSession()).getProject().getDatasourceLogin().clone();
  project.setLogin(clonedLogin);
  clonedLogin.useExternalConnectionPooling();
  session=project.createDatabaseSession();
  session.login();
}"
68793,"public static TestSuite getConnectionCloseAfterTxnTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  boolean hasExternalTransactionController=true;
  suite.addTest(new CloseConnAfterDatabaseSessionTxnTest(hasExternalTransactionController));
  suite.addTest(new CloseConnAfterDatabaseSessionTxnTest(!hasExternalTransactionController));
  return suite;
}","public static TestSuite getConnectionCloseAfterTxnTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  suite.addTest(new CloseConnAfterDatabaseSessionTxnTest());
  return suite;
}"
68794,"/** 
 * This should be set to 'false' if a communication failure occurred durring a call execution. In the case of an invalid accessor the Accessor will not be returned to the Pool.
 */
public void setIsValid(boolean isValid);","/** 
 * This should be set to false if a communication failure occurred durring a call execution.   In the case of an invalid accessor the Accessor will not be returned to the pool.
 */
public void setIsValid(boolean isValid);"
68795,"/** 
 * Allow calling session to be passed.      The calling session is the session who actually invokes commit or rollback transaction,  it is used to determine whether the connection needs to be closed when using external connection pool. The connection with a externalConnectionPool used by synchronized UOW should leave open until  afterCompletion call back; the connection with a externalConnectionPool used by other type of session  should be closed after transaction was finised. Roll back a transaction on the data store.
 */
void rollbackTransaction(AbstractSession session,AbstractSession callingSession) throws DatabaseException ;","/** 
 * Roll back a transaction on the data store.
 */
void rollbackTransaction(AbstractSession session) throws DatabaseException ;"
68796,"/** 
 * Allow calling session to be passed. The calling session is the session who actually invokes commit or rollback transaction,  it is used to determine whether the connection needs to be closed when using external connection pool. The connection with a externalConnectionPool used by synchronized UOW should leave open until  afterCompletion call back; the connection with a externalConnectionPool used by other type of session  should be closed after transaction was finised. Commit a transaction on the data store 
 */
void commitTransaction(AbstractSession session,AbstractSession callingSession) throws DatabaseException ;","/** 
 * Commit a transaction on the data store.
 */
void commitTransaction(AbstractSession session) throws DatabaseException ;"
68797,"/** 
 * Allow calling session to be passed The calling session is the session who actually invokes commit or rollback transaction,  it is used to determine whether the connection needs to be closed when using external connection pool. The connection with a externalConnectionPool used by synchronized UOW should leave open until  afterCompletion call back; the connection with a externalConnectionPool used by other type of session  should be closed after transaction was finished. Rollback a transaction on the database. This means toggling the auto-commit option.
 */
public void rollbackTransaction(AbstractSession session,AbstractSession callingSession) throws DatabaseException {
  getActiveBatchWritingMechanism().clear();
  super.rollbackTransaction(session,callingSession);
}","/** 
 * Rollback a transaction on the database. This means toggling the auto-commit option.
 */
public void rollbackTransaction(AbstractSession session) throws DatabaseException {
  getActiveBatchWritingMechanism().clear();
  super.rollbackTransaction(session);
}"
68798,"/** 
 * Allow calling session to be passed.      The calling session is the session who actually invokes commit or rollback transaction,  it is used to determine whether the connection needs to be closed when using external connection pool. The connection with a externalConnectionPool used by synchronized UOW should leave open until  afterCompletion call back; the connection with a externalConnectionPool used by other type of session  should be closed after transaction was finised. Commit a transaction on the database. First flush any batched statements.
 */
public void commitTransaction(AbstractSession session,AbstractSession callingSession) throws DatabaseException {
  this.writesCompleted(session);
  super.commitTransaction(session,callingSession);
}","/** 
 * Commit a transaction on the database. First flush any batched statements.
 */
public void commitTransaction(AbstractSession session) throws DatabaseException {
  this.writesCompleted(session);
  super.commitTransaction(session);
}"
68799,"private void doMarshal(SDOProperty prop,DataObject value,SDOChangeSummary cs,Element csNode,SDODataObject modifiedObject,List deletedXPaths,String xpathToCS,String sdoPrefix){
  if (value == null) {
    return;
  }
  boolean isDeleted=false;
  Object original=cs.getReverseDeletedMap().get(value);
  if ((original != null) && cs.isDeleted((DataObject)original)) {
    isDeleted=true;
  }
  String qualifiedName=getXPathForProperty(prop);
  XMLField xmlField=new XMLField(qualifiedName);
  xmlField.setNamespaceResolver(((SDOTypeHelper)typeHelper).getNamespaceResolver());
  String uri=xmlField.getXPathFragment().getNamespaceURI();
  if (isDeleted) {
    String pathToNode=getPathFromAncestor(((SDODataObject)original),modifiedObject,cs);
    String containerPath=null;
    containerPath=getQualifiedName(modifiedObject);
    deletedXPaths.add(xpathToCS + containerPath + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT+ pathToNode);
    XMLRoot xmlroot=new XMLRoot();
    xmlroot.setObject(value);
    xmlroot.setNamespaceURI(uri);
    xmlroot.setLocalName(qualifiedName);
    xmlMarshaller.marshal(xmlroot,csNode);
  }
 else {
    Element modifiedElement=null;
    if (uri == null) {
      modifiedElement=csNode.getOwnerDocument().createElement(qualifiedName);
    }
 else {
      modifiedElement=csNode.getOwnerDocument().createElementNS(uri,qualifiedName);
    }
    csNode.appendChild(modifiedElement);
    modifiedElement.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_REF,SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + getPathFromAncestor(((SDODataObject)original),(SDODataObject)marshalledObject,cs));
    if ((((SDODataObject)original).getContainmentProperty() != null) && ((SDODataObject)original).getContainmentProperty().getType().equals(SDOConstants.SDO_DATAOBJECT)) {
      String schemaContext=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContext();
      QName schemaContextQName=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver());
      if (schemaContext != null) {
        String typeValue=schemaContext.substring(1,schemaContext.length());
        String schemaInstancePrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
        String schemaContextUri=schemaContextQName.getNamespaceURI();
        String schemaContextPrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(schemaContextUri);
        if (schemaContextPrefix != null) {
          modifiedElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + schemaContextPrefix,schemaContextQName.getNamespaceURI());
        }
        modifiedElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,schemaInstancePrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
      }
    }
  }
}","private void doMarshal(SDOProperty prop,DataObject value,SDOChangeSummary cs,Element csNode,SDODataObject modifiedObject,List deletedXPaths,String xpathToCS,String sdoPrefix){
  if (value == null) {
    return;
  }
  boolean isDeleted=false;
  Object original=cs.getReverseDeletedMap().get(value);
  if ((original != null) && cs.isDeleted((DataObject)original)) {
    isDeleted=true;
  }
  String qualifiedName=getXPathForProperty(prop);
  String uri=null;
  if (prop.isOpenContent()) {
    uri=prop.getUri();
  }
 else {
    uri=prop.getContainingType().getURI();
  }
  if (isDeleted) {
    String pathToNode=getPathFromAncestor(((SDODataObject)original),modifiedObject,cs);
    String containerPath=null;
    containerPath=getQualifiedName(modifiedObject);
    deletedXPaths.add(xpathToCS + containerPath + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT+ pathToNode);
    XMLRoot xmlroot=new XMLRoot();
    xmlroot.setObject(value);
    xmlroot.setNamespaceURI(uri);
    xmlroot.setLocalName(qualifiedName);
    xmlMarshaller.marshal(xmlroot,csNode);
  }
 else {
    Element modifiedElement=null;
    if (uri == null) {
      modifiedElement=csNode.getOwnerDocument().createElement(qualifiedName);
    }
 else {
      modifiedElement=csNode.getOwnerDocument().createElementNS(uri,qualifiedName);
    }
    csNode.appendChild(modifiedElement);
    modifiedElement.setAttributeNS(SDOConstants.SDO_URL,sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + SDOConstants.CHANGESUMMARY_REF,SDOConstants.SDO_CHANGESUMMARY_REF_PATH_PREFIX + SDOConstants.SDO_XPATH_SEPARATOR_FRAGMENT + getPathFromAncestor(((SDODataObject)original),(SDODataObject)marshalledObject,cs));
    if ((((SDODataObject)original).getContainmentProperty() != null) && ((SDODataObject)original).getContainmentProperty().getType().equals(SDOConstants.SDO_DATAOBJECT)) {
      String schemaContext=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContext();
      QName schemaContextQName=((SDOType)value.getType()).getXmlDescriptor().getSchemaReference().getSchemaContextAsQName(((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver());
      if (schemaContext != null) {
        String typeValue=schemaContext.substring(1,schemaContext.length());
        String schemaInstancePrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
        String schemaContextUri=schemaContextQName.getNamespaceURI();
        String schemaContextPrefix=((SDOType)value.getType()).getXmlDescriptor().getNonNullNamespaceResolver().resolveNamespaceURI(schemaContextUri);
        if (schemaContextPrefix != null) {
          modifiedElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + schemaContextPrefix,schemaContextQName.getNamespaceURI());
        }
        modifiedElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,schemaInstancePrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
      }
    }
  }
}"
68800,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=null;
    XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
    value=xmlConversionManager.convertObject(value,ClassConstants.STRING,qname);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    if (qname != null) {
      String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
      if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,qname.getNamespaceURI());
      }
      String typeValue=prefix + ""String_Node_Str"" + qname.getLocalPart();
      addTypeAttribute(marshalRecord,typeValue);
    }
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
    value=xmlConversionManager.convertObject(value,ClassConstants.STRING,qname);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    if (qname != null) {
      String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
      if ((prefix == null) || prefix.equals(""String_Node_Str"")) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
        marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,qname.getNamespaceURI());
      }
      String typeValue=prefix + ""String_Node_Str"" + qname.getLocalPart();
      addTypeAttribute(marshalRecord,typeValue);
    }
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
68801,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Object collection=unmarshalRecord.getContainerInstance(this);
    startElementProcessText(unmarshalRecord,collection);
    XMLDescriptor xmlDescriptor=null;
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      XPathFragment frag=new XPathFragment();
      if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
        frag.setXPath(schemaType);
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
      }
    }
    if (xmlDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      xmlDescriptor=xmlContext.getDescriptor(qname);
    }
    workingDescriptor=xmlDescriptor;
    UnmarshalKeepAsElementPolicy policy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
      builder.setOwningRecord(unmarshalRecord);
      try {
        String namespaceURI=""String_Node_Str"";
        if (xPathFragment.getNamespaceURI() != null) {
          namespaceURI=xPathFragment.getNamespaceURI();
        }
        String qName=xPathFragment.getLocalName();
        if (xPathFragment.getPrefix() != null) {
          qName=xPathFragment.getPrefix() + ""String_Node_Str"" + qName;
        }
        builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
        unmarshalRecord.getXMLReader().setContentHandler(builder);
      }
 catch (      SAXException ex) {
      }
    }
 else     if (xmlDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyCollectionMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + ""String_Node_Str"" + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Object collection=unmarshalRecord.getContainerInstance(this);
    startElementProcessText(unmarshalRecord,collection);
    XMLDescriptor xmlDescriptor=null;
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    if (xmlAnyCollectionMapping.usesXMLRoot()) {
      String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      XPathFragment frag=new XPathFragment();
      if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
        frag.setXPath(schemaType);
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          QName qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
      }
    }
    if (xmlDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      xmlDescriptor=xmlContext.getDescriptor(qname);
    }
    workingDescriptor=xmlDescriptor;
    UnmarshalKeepAsElementPolicy policy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
      SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
      builder.setOwningRecord(unmarshalRecord);
      try {
        String namespaceURI=""String_Node_Str"";
        if (xPathFragment.getNamespaceURI() != null) {
          namespaceURI=xPathFragment.getNamespaceURI();
        }
        String qName=xPathFragment.getLocalName();
        if (xPathFragment.getPrefix() != null) {
          qName=xPathFragment.getPrefix() + ""String_Node_Str"" + qName;
        }
        builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
        unmarshalRecord.getXMLReader().setContentHandler(builder);
      }
 catch (      SAXException ex) {
      }
    }
 else     if (xmlDescriptor != null) {
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor);
    }
 else {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyCollectionMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + ""String_Node_Str"" + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
      return true;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
68802,"private void endElementProcessText(UnmarshalRecord unmarshalRecord,Object collection,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value) && xmlAnyCollectionMapping.isMixedContent()) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,value);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setObject(value);
      unmarshalRecord.addAttributeValue(this,xmlRoot);
    }
  }
}","private void endElementProcessText(UnmarshalRecord unmarshalRecord,Object collection,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value) && xmlAnyCollectionMapping.isMixedContent()) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
      Class theClass=(Class)xmlConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=xmlConversionManager.convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      unmarshalRecord.addAttributeValue(this,value);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setObject(value);
      unmarshalRecord.addAttributeValue(this,xmlRoot);
    }
  }
}"
68803,"private void writeXsiTypeAttribute(XMLDescriptor xmlDescriptor,DOMRecord row,String typeValue){
  String xsiPrefix=null;
  boolean generated=false;
  xsiPrefix=row.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  if (xsiPrefix == null) {
    xsiPrefix=xmlDescriptor.getNonNullNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    generated=true;
    writeXsiNamespace((DOMRecord)row,xmlDescriptor,xsiPrefix);
  }
  XMLField xmlField=(XMLField)xmlDescriptor.buildField(""String_Node_Str"" + xsiPrefix + ""String_Node_Str""+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
  if (generated) {
    xmlField.getLastXPathFragment().setGeneratedPrefix(true);
  }
  xmlField.getLastXPathFragment().setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  row.add(xmlField,typeValue);
}","private void writeXsiTypeAttribute(XMLDescriptor xmlDescriptor,DOMRecord row,String typeValue){
  String xsiPrefix=null;
  boolean generated=false;
  xsiPrefix=row.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  if (xsiPrefix == null) {
    xsiPrefix=xmlDescriptor.getNonNullNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    generated=true;
    writeXsiNamespace((DOMRecord)row,xsiPrefix);
  }
  XMLField xmlField=(XMLField)xmlDescriptor.buildField(""String_Node_Str"" + xsiPrefix + ""String_Node_Str""+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
  if (generated) {
    xmlField.getLastXPathFragment().setGeneratedPrefix(true);
  }
  xmlField.getLastXPathFragment().setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  row.add(xmlField,typeValue);
}"
68804,"public void writeExtraNamespaces(List extraNamespaces,XMLRecord xmlRecord,AbstractSession session){
  if (extraNamespaces == null) {
    return;
  }
  if (xmlRecord.getDOM().getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    Namespace next=(Namespace)extraNamespaces.get(i);
    ((Element)xmlRecord.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + next.getPrefix(),next.getNamespaceURI());
  }
}","public void writeExtraNamespaces(List extraNamespaces,XMLRecord xmlRecord){
  if (extraNamespaces == null) {
    return;
  }
  if (xmlRecord.getDOM().getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    Namespace next=(Namespace)extraNamespaces.get(i);
    ((Element)xmlRecord.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + next.getPrefix(),next.getNamespaceURI());
  }
}"
68805,"public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object object,AbstractSession session,boolean shouldWriteXsiType){
  XMLRecord record=(XMLRecord)row;
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record,session);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (shouldWriteXsiType) {
      writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
    }
    if (getDescriptor().hasInheritance()) {
      if ((record.getLeafElementType() != null) && ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition())) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (ctxQName.equals(record.getLeafElementType())) {
        }
 else {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
 else {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
        }
      }
 else {
        if (!xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
 else {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
        }
      }
    }
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}","public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object object,AbstractSession session,boolean shouldWriteXsiType){
  XMLRecord record=(XMLRecord)row;
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (shouldWriteXsiType) {
      writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
    }
    if (getDescriptor().hasInheritance()) {
      if ((record.getLeafElementType() != null) && ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition())) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (ctxQName.equals(record.getLeafElementType())) {
        }
 else {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
 else {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
        }
      }
 else {
        if (!xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
 else {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
        }
      }
    }
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}"
68806,"private void writeXsiNamespace(DOMRecord nestedRecord,XMLDescriptor referenceDescriptor,String xsiPrefix){
  if (nestedRecord.getDOM().getNodeType() == Node.ELEMENT_NODE) {
    ((Element)nestedRecord.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
}","private void writeXsiNamespace(DOMRecord nestedRecord,String xsiPrefix){
  if (nestedRecord.getDOM().getNodeType() == Node.ELEMENT_NODE) {
    ((Element)nestedRecord.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
}"
68807,"/** 
 * Adds a type attribute on an element, the value of the attribute is determined by performing a lookup in the SimpleTypeTranslator to find the Schema type for the value.
 * @param elements NodeList which will have a type attribute added to them
 * @param simpleTypeTranslator SimpleTypeTranslator to perform lookup in
 * @param value Object to base the lookup on
 * @param schemaInstancePrefix the prefix representing the schema instance namespace
 */
private void addTypeAttributes(NodeList elements,XMLField field,Object value,String schemaInstancePrefix){
  NamespaceResolver namespaceResolver=field.getNamespaceResolver();
  if (!field.isTypedTextField()) {
    return;
  }
  if (null == schemaInstancePrefix) {
    schemaInstancePrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
  }
  List values;
  if (value instanceof List) {
    values=(List)value;
  }
 else {
    values=new ArrayList();
    values.add(value);
  }
  int size=elements.getLength();
  int valuesSize=values.size();
  if (size != valuesSize) {
    return;
  }
  Node next=null;
  for (int i=0; i < size; i++) {
    next=elements.item(i);
    if (next.getNodeType() == Node.ELEMENT_NODE) {
      QName qname=field.getXMLType(values.get(i).getClass());
      if (qname != null) {
        String type;
        String prefix=this.resolveNamespacePrefixForURI(qname.getNamespaceURI(),namespaceResolver);
        if ((prefix == null) || (prefix.equals(""String_Node_Str""))) {
          type=qname.getLocalPart();
        }
 else {
          type=prefix + ""String_Node_Str"" + qname.getLocalPart();
        }
        ((Element)next).setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,schemaInstancePrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,type);
      }
    }
  }
}","/** 
 * Adds a type attribute on an element, the value of the attribute is determined by performing a lookup in the SimpleTypeTranslator to find the Schema type for the value.
 * @param elements NodeList which will have a type attribute added to them
 * @param simpleTypeTranslator SimpleTypeTranslator to perform lookup in
 * @param value Object to base the lookup on
 * @param schemaInstancePrefix the prefix representing the schema instance namespace
 */
private void addTypeAttributes(NodeList elements,XMLField field,Object value,String schemaInstancePrefix){
  NamespaceResolver namespaceResolver=field.getNamespaceResolver();
  if (!field.isTypedTextField()) {
    return;
  }
  List values;
  if (value instanceof List) {
    values=(List)value;
  }
 else {
    values=new ArrayList();
    values.add(value);
  }
  int size=elements.getLength();
  int valuesSize=values.size();
  if (size != valuesSize) {
    return;
  }
  Node next=null;
  for (int i=0; i < size; i++) {
    next=elements.item(i);
    if (next.getNodeType() == Node.ELEMENT_NODE) {
      QName qname=field.getXMLType(values.get(i).getClass());
      if (qname != null) {
        if (null == schemaInstancePrefix) {
          schemaInstancePrefix=namespaceResolver.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
          ((Element)next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + schemaInstancePrefix,XMLConstants.SCHEMA_INSTANCE_URL);
        }
        String type;
        String prefix=this.resolveNamespacePrefixForURI(qname.getNamespaceURI(),namespaceResolver);
        if ((prefix == null) || (prefix.equals(""String_Node_Str""))) {
          type=qname.getLocalPart();
          prefix=namespaceResolver.generatePrefix();
          ((Element)next).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,qname.getNamespaceURI());
        }
        type=prefix + ""String_Node_Str"" + qname.getLocalPart();
        ((Element)next).setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,schemaInstancePrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,type);
      }
    }
  }
}"
68808,"public NodeList replaceCollection(XMLField xmlField,Node parent,Collection values) throws XMLMarshalException {
  NodeList nodes=null;
  if (xmlField != null) {
    nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,xmlField.getNamespaceResolver());
  }
 else {
    nodes=parent.getChildNodes();
  }
  if (nodes.getLength() == 0) {
    return nodes;
  }
  Iterator collectionValues=values.iterator();
  int i=0;
  int nodesLength=nodes.getLength();
  Vector newNodes=new Vector();
  boolean performedReplace=true;
  Object value=null;
  while ((i < nodesLength) && collectionValues.hasNext()) {
    Node oldChild=nodes.item(i);
    Element newChild=null;
    if (performedReplace) {
      value=collectionValues.next();
    }
    Node parentNode=oldChild.getParentNode();
    if (oldChild.getNodeType() != Node.ELEMENT_NODE) {
      if (((oldChild.getNodeType() == Node.TEXT_NODE) || (oldChild.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        oldChild.setNodeValue((String)XMLConversionManager.getDefaultXMLManager().convertObject(value,ClassConstants.STRING));
      }
    }
 else {
      Element element=(Element)oldChild;
      String elementName=element.getTagName();
      Object valueToWrite=getValueToWrite(value,xmlField);
      XPathFragment childFragment=new XPathFragment(elementName);
      childFragment.setNamespaceURI(element.getNamespaceURI());
      newChild=(Element)createElement(parentNode,childFragment,xmlField,valueToWrite);
      if (!newNodes.contains(oldChild)) {
        if (newChild != oldChild) {
          parentNode.replaceChild(newChild,oldChild);
        }
        newNodes.addElement(newChild);
        performedReplace=true;
      }
 else {
        performedReplace=false;
      }
    }
    i++;
  }
  while (i < nodesLength) {
    Node toRemove=nodes.item(i);
    Node removedParent=toRemove.getParentNode();
    if (removedParent != null && !newNodes.contains(toRemove)) {
      removedParent.removeChild(toRemove);
    }
    i++;
  }
  if (value != null && !performedReplace) {
    if (xmlField.getXPathFragment().getNextFragment() == null || xmlField.getXPathFragment().getHasText()) {
      create(xmlField,parent,value,xmlField,xmlBinderPolicy);
    }
 else {
      create(xmlField,parent,value);
    }
  }
  while (collectionValues.hasNext()) {
    value=collectionValues.next();
    if (xmlField.getXPathFragment().getNextFragment() == null || xmlField.getXPathFragment().getHasText()) {
      create(xmlField,parent,value,xmlField,xmlBinderPolicy);
    }
 else {
      create(xmlField,parent,value);
    }
  }
  return nodes;
}","public NodeList replaceCollection(XMLField xmlField,Node parent,Collection values) throws XMLMarshalException {
  NodeList nodes=null;
  if (xmlField != null) {
    nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,xmlField.getNamespaceResolver());
  }
 else {
    nodes=parent.getChildNodes();
  }
  if (nodes.getLength() == 0) {
    return nodes;
  }
  Iterator collectionValues=values.iterator();
  int i=0;
  int nodesLength=nodes.getLength();
  Vector newNodes=new Vector();
  boolean performedReplace=true;
  Object value=null;
  while ((i < nodesLength) && collectionValues.hasNext()) {
    Node oldChild=nodes.item(i);
    Element newChild=null;
    if (performedReplace) {
      value=collectionValues.next();
    }
    Node parentNode=oldChild.getParentNode();
    if (oldChild.getNodeType() != Node.ELEMENT_NODE) {
      if (((oldChild.getNodeType() == Node.TEXT_NODE) || (oldChild.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        oldChild.setNodeValue((String)XMLConversionManager.getDefaultXMLManager().convertObject(value,ClassConstants.STRING));
      }
    }
 else {
      Element element=(Element)oldChild;
      String elementName=element.getTagName();
      Object valueToWrite=getValueToWrite(value,xmlField);
      XPathFragment childFragment=new XPathFragment(elementName);
      childFragment.setNamespaceURI(element.getNamespaceURI());
      newChild=(Element)createElement(parentNode,childFragment,xmlField,valueToWrite);
      if (!newNodes.contains(oldChild)) {
        if (newChild != oldChild) {
          parentNode.replaceChild(newChild,oldChild);
        }
        newNodes.addElement(newChild);
        performedReplace=true;
      }
 else {
        performedReplace=false;
      }
    }
    i++;
  }
  while (i < nodesLength) {
    Node toRemove=nodes.item(i);
    Node removedParent=toRemove.getParentNode();
    if ((removedParent != null) && !newNodes.contains(toRemove)) {
      removedParent.removeChild(toRemove);
    }
    i++;
  }
  if ((value != null) && !performedReplace) {
    if ((xmlField.getXPathFragment().getNextFragment() == null) || xmlField.getXPathFragment().getHasText()) {
      create(xmlField,parent,value,xmlField,xmlBinderPolicy);
    }
 else {
      create(xmlField,parent,value);
    }
  }
  while (collectionValues.hasNext()) {
    value=collectionValues.next();
    if ((xmlField.getXPathFragment().getNextFragment() == null) || xmlField.getXPathFragment().getHasText()) {
      create(xmlField,parent,value,xmlField,xmlBinderPolicy);
    }
 else {
      create(xmlField,parent,value);
    }
  }
  return nodes;
}"
68809,"/** 
 * Creates a new Element and appends a value to an element.
 * @param parent Element which will own the newly created element
 * @param elementName tag name for the new element
 * @param value Node to add
 */
private Node createElement(Node parent,XPathFragment fragment,NamespaceResolver namespaceResolver,Node value){
  String elementName=fragment.getXPath();
  Document document=parent.getOwnerDocument();
  if ((document == null) && (parent.getNodeType() == Node.DOCUMENT_NODE)) {
    document=(Document)parent;
  }
  String nodeUri=value.getNamespaceURI();
  String nodeName=value.getLocalName();
  String fragUri=fragment.getNamespaceURI();
  String fragName=fragment.getLocalName();
  if (nodeName != null && nodeName.equals(fragName) && ((nodeUri != null && nodeUri.equals(fragUri)) || ((nodeUri == null) && fragUri == null))) {
    if (document != value.getOwnerDocument()) {
      return (Element)document.importNode(value,true);
    }
    return (Element)value;
  }
 else {
    String namespace=resolveNamespacePrefix(fragment,namespaceResolver);
    Element clone=document.createElementNS(namespace,elementName);
    NamedNodeMap attributes=value.getAttributes();
    int attributesLength=attributes.getLength();
    for (int index=0; index < attributesLength; index++) {
      Node attribute=document.importNode(attributes.item(index),true);
      clone.setAttributeNode((Attr)attribute);
    }
    NodeList elements=value.getChildNodes();
    int elementsLength=elements.getLength();
    for (int index=0; index < elementsLength; index++) {
      Node attribute=document.importNode(elements.item(index),true);
      clone.appendChild(attribute);
    }
    return clone;
  }
}","/** 
 * Creates a new Element and appends a value to an element.
 * @param parent Element which will own the newly created element
 * @param elementName tag name for the new element
 * @param value Node to add
 */
private Node createElement(Node parent,XPathFragment fragment,NamespaceResolver namespaceResolver,Node value){
  String elementName=fragment.getXPath();
  Document document=parent.getOwnerDocument();
  if ((document == null) && (parent.getNodeType() == Node.DOCUMENT_NODE)) {
    document=(Document)parent;
  }
  String nodeUri=value.getNamespaceURI();
  String nodeName=value.getLocalName();
  String fragUri=fragment.getNamespaceURI();
  String fragName=fragment.getLocalName();
  if ((nodeName != null) && nodeName.equals(fragName) && (((nodeUri != null) && nodeUri.equals(fragUri)) || ((nodeUri == null) && (fragUri == null)))) {
    if (document != value.getOwnerDocument()) {
      return (Element)document.importNode(value,true);
    }
    return (Element)value;
  }
 else {
    String namespace=resolveNamespacePrefix(fragment,namespaceResolver);
    Element clone=document.createElementNS(namespace,elementName);
    NamedNodeMap attributes=value.getAttributes();
    int attributesLength=attributes.getLength();
    for (int index=0; index < attributesLength; index++) {
      Node attribute=document.importNode(attributes.item(index),true);
      clone.setAttributeNode((Attr)attribute);
    }
    NodeList elements=value.getChildNodes();
    int elementsLength=elements.getLength();
    for (int index=0; index < elementsLength; index++) {
      Node attribute=document.importNode(elements.item(index),true);
      clone.appendChild(attribute);
    }
    return clone;
  }
}"
68810,"/** 
 * Create the node path specified by <code>xpathString</code> under <code>element</code> and initialize the leaf node with <code>value</code>. This method also supports creating attributes and integer-indexed elements using the appropriate XPath syntax ('<code>@</code>' and '<code>[ ]</code>' respectively).
 * @param xmlField XMLField containing xpath expression representing the node path to create
 * @param element Root element under which to create path
 * @param value Initial value for the leaf node (this can be a value or a collection of values)
 * @return The last <code>XMLNode</code> in the path
 * @exception org.eclipse.persistence.oxm.exceptions.XMLMarshalException Thrown if passed an invalid XPath string
 */
private NodeList createCollection(XMLField xmlField,Node element,Object value,XMLField lastUpdated,DocumentPreservationPolicy docPresPolicy) throws XMLMarshalException {
  XMLNodeList createdElements=new XMLNodeList();
  if ((value == null) || (value instanceof Collection && (((Collection)value).size() == 0))) {
    return createdElements;
  }
  Node nextElement=element;
  Element sibling=null;
  if (lastUpdated != null && !lastUpdated.getXPathFragment().isAttribute() && !lastUpdated.getXPathFragment().nameIsText()) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(element,lastUpdated.getXPathFragment(),lastUpdated.getNamespaceResolver());
    if (nodes.getLength() > 0) {
      sibling=(Element)nodes.item(nodes.getLength() - 1);
    }
  }
  NodeList elements;
  XPathFragment next=xmlField.getXPathFragment();
  while (next != null) {
    if (next.isAttribute()) {
      addAttribute(next,xmlField,nextElement,value);
    }
 else     if (next.containsIndex()) {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        nextElement=addIndexedElement(next,xmlField,nextElement,this,!hasMore);
      }
 else {
        Object valueToWrite=getValueToWrite(value,xmlField);
        nextElement=addIndexedElement(next,xmlField,nextElement,valueToWrite,!hasMore);
        createdElements.add(nextElement);
      }
    }
 else {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        elements=addElements(next,xmlField,nextElement,this,!hasMore,sibling,docPresPolicy);
      }
 else {
        XPathFragment nextFragment=next.getNextFragment();
        if ((nextFragment != null) && nextFragment.isAttribute() && !(value instanceof List)) {
          elements=addElements(next,xmlField,nextElement,this,hasMore,sibling,docPresPolicy);
        }
 else {
          Object valueToWrite=getValueToWrite(value,xmlField);
          elements=addElements(next,xmlField,nextElement,valueToWrite,!hasMore,sibling,docPresPolicy);
          createdElements.addAll(elements);
        }
      }
      nextElement=(Element)elements.item(elements.getLength() - 1);
    }
    next=next.getNextFragment();
    sibling=null;
    if ((next != null) && next.nameIsText()) {
      next=null;
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,xmlField.getNamespaceResolver()));
  }
  return createdElements;
}","/** 
 * Create the node path specified by <code>xpathString</code> under <code>element</code> and initialize the leaf node with <code>value</code>. This method also supports creating attributes and integer-indexed elements using the appropriate XPath syntax ('<code>@</code>' and '<code>[ ]</code>' respectively).
 * @param xmlField XMLField containing xpath expression representing the node path to create
 * @param element Root element under which to create path
 * @param value Initial value for the leaf node (this can be a value or a collection of values)
 * @return The last <code>XMLNode</code> in the path
 * @exception org.eclipse.persistence.oxm.exceptions.XMLMarshalException Thrown if passed an invalid XPath string
 */
private NodeList createCollection(XMLField xmlField,Node element,Object value,XMLField lastUpdated,DocumentPreservationPolicy docPresPolicy) throws XMLMarshalException {
  XMLNodeList createdElements=new XMLNodeList();
  if ((value == null) || (value instanceof Collection && (((Collection)value).size() == 0))) {
    return createdElements;
  }
  Node nextElement=element;
  Element sibling=null;
  if ((lastUpdated != null) && !lastUpdated.getXPathFragment().isAttribute() && !lastUpdated.getXPathFragment().nameIsText()) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(element,lastUpdated.getXPathFragment(),lastUpdated.getNamespaceResolver());
    if (nodes.getLength() > 0) {
      sibling=(Element)nodes.item(nodes.getLength() - 1);
    }
  }
  NodeList elements;
  XPathFragment next=xmlField.getXPathFragment();
  while (next != null) {
    if (next.isAttribute()) {
      addAttribute(next,xmlField,nextElement,value);
    }
 else     if (next.containsIndex()) {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        nextElement=addIndexedElement(next,xmlField,nextElement,this,!hasMore);
      }
 else {
        Object valueToWrite=getValueToWrite(value,xmlField);
        nextElement=addIndexedElement(next,xmlField,nextElement,valueToWrite,!hasMore);
        createdElements.add(nextElement);
      }
    }
 else {
      boolean hasMore=!(next.getHasText() || (next.getNextFragment() == null));
      if (hasMore) {
        elements=addElements(next,xmlField,nextElement,this,!hasMore,sibling,docPresPolicy);
      }
 else {
        XPathFragment nextFragment=next.getNextFragment();
        if ((nextFragment != null) && nextFragment.isAttribute() && !(value instanceof List)) {
          elements=addElements(next,xmlField,nextElement,this,hasMore,sibling,docPresPolicy);
        }
 else {
          Object valueToWrite=getValueToWrite(value,xmlField);
          elements=addElements(next,xmlField,nextElement,valueToWrite,!hasMore,sibling,docPresPolicy);
          createdElements.addAll(elements);
        }
      }
      nextElement=(Element)elements.item(elements.getLength() - 1);
    }
    next=next.getNextFragment();
    sibling=null;
    if ((next != null) && next.nameIsText()) {
      next=null;
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,xmlField.getNamespaceResolver()));
  }
  return createdElements;
}"
68811,"public void addBatchTests(){
  ReadAllBatchReadingTest testbb1=new ReadAllBatchReadingTest(12);
  testbb1.setName(""String_Node_Str"");
  ReadAllQuery querybb1=new ReadAllQuery();
  querybb1.setReferenceClass(Employee.class);
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  testbb1.setQuery(querybb1);
  addTest(testbb1);
  ReadAllBatchReadingTest testbb2=new ReadAllBatchReadingTest(2);
  testbb2.setName(""String_Node_Str"");
  ReadAllQuery querybb2=new ReadAllQuery();
  querybb2.setReferenceClass(Employee.class);
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  testbb2.setQuery(querybb2);
  addTest(testbb2);
  BatchReadingUnitOfWorkTest testbb3=new BatchReadingUnitOfWorkTest();
  addTest(testbb3);
  BatchReadingUnitOfWorkInTransactionTest testbb4=new BatchReadingUnitOfWorkInTransactionTest();
  addTest(testbb4);
  OneToManyBatchReadingTest testbb5=new OneToManyBatchReadingTest();
  addTest(testbb5);
  addTest(new BatchReadingTest());
  OneToManyBatchReadingCustomSelectionQueryTest testbb6=new OneToManyBatchReadingCustomSelectionQueryTest();
  addTest(testbb6);
  ReadAllBatchReadingTest test3=new ReadAllBatchReadingTest(2);
  test3.setName(""String_Node_Str"");
  ReadAllQuery query3=new ReadAllQuery();
  query3.setReferenceClass(Employee.class);
  query3.useCursoredStream();
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  query3.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test3.setQuery(query3);
  addTest(test3);
  NestedOneToManyBatchReadAllTest test3_5=new NestedOneToManyBatchReadAllTest(org.eclipse.persistence.testing.models.collections.Restaurant.class,15);
  test3_5.setName(""String_Node_Str"");
  ReadAllQuery query3_5=new ReadAllQuery();
  query3_5.setReferenceClass(org.eclipse.persistence.testing.models.collections.Restaurant.class);
  query3_5.addBatchReadAttribute(""String_Node_Str"");
  test3_5.setQuery(query3_5);
  addTest(test3_5);
  ReadAllTest test4=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,3);
  test4.setName(""String_Node_Str"");
  ReadAllQuery query4=new ReadAllQuery();
  query4.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query4.addBatchReadAttribute(""String_Node_Str"");
  query4.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(40000));
  test4.setQuery(query4);
  addTest(test4);
  addTest(new OneToOneBatchReadingTest());
  ReadAllTest test5=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,4);
  test5.setName(""String_Node_Str"");
  ReadAllQuery query5=new ReadAllQuery();
  query5.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query5.addBatchReadAttribute(""String_Node_Str"");
  query5.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(30000));
  test5.setQuery(query5);
  addTest(test5);
  addTest(new OneToManyBatchReadingTest());
  addTest(new NestedBatchReadingTest());
  addTest(new AggregateBatchReadingTest());
  addTest(new BatchReadingBatchReadExpressionTest());
  addTest(new BatchReadingWithInvalidQueryKeyTest());
  addTest(new BatchReadValueholderTest());
}","public void addBatchTests(){
  ReadAllBatchReadingTest testbb1=new ReadAllBatchReadingTest(12);
  testbb1.setName(""String_Node_Str"");
  ReadAllQuery querybb1=new ReadAllQuery();
  querybb1.setReferenceClass(Employee.class);
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  testbb1.setQuery(querybb1);
  addTest(testbb1);
  ReadAllBatchReadingTest testbb2=new ReadAllBatchReadingTest(2);
  testbb2.setName(""String_Node_Str"");
  ReadAllQuery querybb2=new ReadAllQuery();
  querybb2.setReferenceClass(Employee.class);
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  testbb2.setQuery(querybb2);
  addTest(testbb2);
  BatchReadingUnitOfWorkTest testbb3=new BatchReadingUnitOfWorkTest();
  addTest(testbb3);
  BatchReadingUnitOfWorkInTransactionTest testbb4=new BatchReadingUnitOfWorkInTransactionTest();
  addTest(testbb4);
  OneToManyBatchReadingTest testbb5=new OneToManyBatchReadingTest();
  addTest(testbb5);
  addTest(new BatchReadingTest());
  OneToManyBatchReadingCustomSelectionQueryTest testbb6=new OneToManyBatchReadingCustomSelectionQueryTest();
  addTest(testbb6);
  ReadAllBatchReadingTest test3=new ReadAllBatchReadingTest(2);
  test3.setName(""String_Node_Str"");
  ReadAllQuery query3=new ReadAllQuery();
  query3.setReferenceClass(Employee.class);
  query3.useCursoredStream();
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  query3.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test3.setQuery(query3);
  addTest(test3);
  NestedOneToManyBatchReadAllTest test3_5=new NestedOneToManyBatchReadAllTest(org.eclipse.persistence.testing.models.collections.Restaurant.class,15);
  test3_5.setName(""String_Node_Str"");
  ReadAllQuery query3_5=new ReadAllQuery();
  query3_5.setReferenceClass(org.eclipse.persistence.testing.models.collections.Restaurant.class);
  query3_5.addBatchReadAttribute(""String_Node_Str"");
  test3_5.setQuery(query3_5);
  addTest(test3_5);
  ReadAllTest test4=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,3);
  test4.setName(""String_Node_Str"");
  ReadAllQuery query4=new ReadAllQuery();
  query4.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query4.addBatchReadAttribute(""String_Node_Str"");
  query4.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(40000));
  test4.setQuery(query4);
  addTest(test4);
  addTest(new OneToOneBatchReadingTest());
  ReadAllTest test5=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,4);
  test5.setName(""String_Node_Str"");
  ReadAllQuery query5=new ReadAllQuery();
  query5.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query5.addBatchReadAttribute(""String_Node_Str"");
  query5.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(30000));
  test5.setQuery(query5);
  addTest(test5);
  addTest(new OneToManyBatchReadingTest());
  addTest(new NestedBatchReadingTest());
  addTest(new AggregateBatchReadingTest());
  addTest(new BatchReadingBatchReadExpressionTest());
  addTest(new BatchReadingWithInvalidQueryKeyTest());
  addTest(new BatchReadValueholderTest());
  addTest(new BatchReadingStackOverflowTest());
}"
68812,"/** 
 * INTERNAL: Clone and prepare the selection query as a nested batch read query. This is used for nested batch reading.
 */
public ReadQuery prepareNestedBatchQuery(ReadAllQuery query){
  ReadAllQuery batchQuery=new ReadAllQuery();
  batchQuery.setReferenceClass(getReferenceClass());
  batchQuery.setSession(query.getSession());
  batchQuery.setShouldUseWrapperPolicy(false);
  if (query.shouldCascadeAllParts() || (query.shouldCascadePrivateParts() && isPrivateOwned()) || (query.shouldCascadeByMapping() && this.cascadeRefresh)) {
    batchQuery.setShouldRefreshIdentityMapResult(query.shouldRefreshIdentityMapResult());
    batchQuery.setCascadePolicy(query.getCascadePolicy());
    batchQuery.setShouldMaintainCache(query.shouldMaintainCache());
    batchQuery.setQueryId(query.getQueryId());
    if (query.hasAsOfClause()) {
      batchQuery.setAsOfClause(query.getAsOfClause());
    }
    batchQuery.setShouldBindAllParameters(query.getShouldBindAllParameters());
    batchQuery.setShouldPrepare(query.shouldPrepare());
  }
  ClassDescriptor descriptorToUse=query.getDescriptor();
  if ((descriptorToUse != getDescriptor()) && (!descriptorToUse.getMappings().contains(this)) && (!getDescriptor().isAggregateDescriptor())) {
    descriptorToUse=getDescriptor();
  }
  ExpressionBuilder builder=batchQuery.getExpressionBuilder();
  Expression backRef=builder.getManualQueryKey(getAttributeName() + ""String_Node_Str"",descriptorToUse);
  Expression twisted=backRef.twist(getSelectionCriteria(),builder);
  if (query.getSelectionCriteria() != null) {
    twisted=twisted.and(query.getSelectionCriteria().cloneUsing(backRef));
  }
  if (descriptorToUse.getQueryManager().getAdditionalJoinExpression() != null) {
    twisted=twisted.and(descriptorToUse.getQueryManager().getAdditionalJoinExpression().rebuildOn(backRef));
  }
  if (descriptorToUse.getHistoryPolicy() != null) {
    if (query.getSession().getAsOfClause() != null) {
      backRef.asOf(query.getSession().getAsOfClause());
    }
 else     if (batchQuery.getAsOfClause() == null) {
      backRef.asOf(AsOfClause.NO_CLAUSE);
    }
 else {
      backRef.asOf(batchQuery.getAsOfClause());
    }
    twisted=twisted.and(descriptorToUse.getHistoryPolicy().additionalHistoryExpression((ObjectExpression)backRef));
  }
  batchQuery.setSelectionCriteria(twisted);
  if (query.isDistinctComputed()) {
    batchQuery.setDistinctState(query.getDistinctState());
  }
  ReadQuery mappingQuery=this.getSelectionQuery();
  if (mappingQuery.isReadAllQuery()) {
    batchQuery.setOrderByExpressions(((Vector)((ReadAllQuery)mappingQuery).getOrderByExpressions().clone()));
    for (Enumeration enumtr=((ReadAllQuery)mappingQuery).getBatchReadAttributeExpressions().elements(); enumtr.hasMoreElements(); ) {
      Expression expression=((Expression)enumtr.nextElement()).rebuildOn(batchQuery.getExpressionBuilder());
      batchQuery.addBatchReadAttribute(expression);
    }
  }
  Vector nestedExpressions=extractNestedExpressions(query.getBatchReadAttributeExpressions(),batchQuery.getExpressionBuilder(),false);
  Helper.addAllToVector(batchQuery.getBatchReadAttributeExpressions(),nestedExpressions);
  postPrepareNestedBatchQuery(batchQuery,query);
  if (batchQuery.shouldPrepare()) {
    batchQuery.checkPrepare(query.getSession(),query.getTranslationRow());
  }
  batchQuery.setSession(null);
  return batchQuery;
}","/** 
 * INTERNAL: Clone and prepare the selection query as a nested batch read query. This is used for nested batch reading.
 */
public ReadQuery prepareNestedBatchQuery(ReadAllQuery query){
  ReadAllQuery batchQuery=new ReadAllQuery();
  batchQuery.setReferenceClass(getReferenceClass());
  batchQuery.setSession(query.getSession());
  batchQuery.setShouldUseWrapperPolicy(false);
  if (query.shouldCascadeAllParts() || (query.shouldCascadePrivateParts() && isPrivateOwned()) || (query.shouldCascadeByMapping() && this.cascadeRefresh)) {
    batchQuery.setShouldRefreshIdentityMapResult(query.shouldRefreshIdentityMapResult());
    batchQuery.setCascadePolicy(query.getCascadePolicy());
    batchQuery.setShouldMaintainCache(query.shouldMaintainCache());
    if (query.hasAsOfClause()) {
      batchQuery.setAsOfClause(query.getAsOfClause());
    }
    batchQuery.setShouldBindAllParameters(query.getShouldBindAllParameters());
    batchQuery.setShouldPrepare(query.shouldPrepare());
  }
  batchQuery.setQueryId(query.getQueryId());
  ClassDescriptor descriptorToUse=query.getDescriptor();
  if ((descriptorToUse != getDescriptor()) && (!descriptorToUse.getMappings().contains(this)) && (!getDescriptor().isAggregateDescriptor())) {
    descriptorToUse=getDescriptor();
  }
  ExpressionBuilder builder=batchQuery.getExpressionBuilder();
  Expression backRef=builder.getManualQueryKey(getAttributeName() + ""String_Node_Str"",descriptorToUse);
  Expression twisted=backRef.twist(getSelectionCriteria(),builder);
  if (query.getSelectionCriteria() != null) {
    twisted=twisted.and(query.getSelectionCriteria().cloneUsing(backRef));
  }
  if (descriptorToUse.getQueryManager().getAdditionalJoinExpression() != null) {
    twisted=twisted.and(descriptorToUse.getQueryManager().getAdditionalJoinExpression().rebuildOn(backRef));
  }
  if (descriptorToUse.getHistoryPolicy() != null) {
    if (query.getSession().getAsOfClause() != null) {
      backRef.asOf(query.getSession().getAsOfClause());
    }
 else     if (batchQuery.getAsOfClause() == null) {
      backRef.asOf(AsOfClause.NO_CLAUSE);
    }
 else {
      backRef.asOf(batchQuery.getAsOfClause());
    }
    twisted=twisted.and(descriptorToUse.getHistoryPolicy().additionalHistoryExpression((ObjectExpression)backRef));
  }
  batchQuery.setSelectionCriteria(twisted);
  if (query.isDistinctComputed()) {
    batchQuery.setDistinctState(query.getDistinctState());
  }
  ReadQuery mappingQuery=this.getSelectionQuery();
  if (mappingQuery.isReadAllQuery()) {
    batchQuery.setOrderByExpressions(((Vector)((ReadAllQuery)mappingQuery).getOrderByExpressions().clone()));
    for (Enumeration enumtr=((ReadAllQuery)mappingQuery).getBatchReadAttributeExpressions().elements(); enumtr.hasMoreElements(); ) {
      Expression expression=((Expression)enumtr.nextElement()).rebuildOn(batchQuery.getExpressionBuilder());
      batchQuery.addBatchReadAttribute(expression);
    }
  }
  Vector nestedExpressions=extractNestedExpressions(query.getBatchReadAttributeExpressions(),batchQuery.getExpressionBuilder(),false);
  Helper.addAllToVector(batchQuery.getBatchReadAttributeExpressions(),nestedExpressions);
  postPrepareNestedBatchQuery(batchQuery,query);
  if (batchQuery.shouldPrepare()) {
    batchQuery.checkPrepare(query.getSession(),query.getTranslationRow());
  }
  batchQuery.setSession(null);
  return batchQuery;
}"
68813,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    XMLDescriptor xmlDescriptor=null;
    if (xmlAnyObjectMapping.usesXMLRoot()) {
      String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      XPathFragment frag=new XPathFragment();
      if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
        frag.setXPath(schemaType);
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
      }
    }
    if (xmlDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      xmlDescriptor=xmlContext.getDescriptor(qname);
    }
    workingDescriptor=xmlDescriptor;
    if (null == xmlDescriptor) {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyObjectMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + ""String_Node_Str"" + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
      return true;
    }
    processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    XMLDescriptor xmlDescriptor=null;
    if (xmlAnyObjectMapping.usesXMLRoot()) {
      String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      XPathFragment frag=new XPathFragment();
      if ((null != schemaType) && (!schemaType.equals(""String_Node_Str""))) {
        frag.setXPath(schemaType);
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          QName qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
        xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
      }
    }
    if (xmlDescriptor == null) {
      QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
      xmlDescriptor=xmlContext.getDescriptor(qname);
    }
    workingDescriptor=xmlDescriptor;
    if (null == xmlDescriptor) {
      AnyMappingContentHandler handler=new AnyMappingContentHandler(unmarshalRecord,xmlAnyObjectMapping.usesXMLRoot());
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + ""String_Node_Str"" + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      unmarshalRecord.getXMLReader().setContentHandler(handler);
      return true;
    }
    processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
68814,"private void endElementProcessText(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value)) {
    if (!xmlAnyObjectMapping.usesXMLRoot()) {
      unmarshalRecord.setAttributeValue(value,xmlAnyObjectMapping);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setObject(value);
      unmarshalRecord.setAttributeValue(xmlRoot,xmlAnyObjectMapping);
    }
  }
}","private void endElementProcessText(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment){
  Object value=unmarshalRecord.getStringBuffer().toString().trim();
  unmarshalRecord.resetStringBuffer();
  if (!EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
      Class theClass=(Class)xmlConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=xmlConversionManager.convertObject(value,theClass,qname);
      }
    }
    if (!xmlAnyObjectMapping.usesXMLRoot()) {
      unmarshalRecord.setAttributeValue(value,xmlAnyObjectMapping);
    }
 else {
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setNamespaceURI(xPathFragment.getNamespaceURI());
      xmlRoot.setSchemaType(qname);
      xmlRoot.setLocalName(xPathFragment.getLocalName());
      xmlRoot.setObject(value);
      unmarshalRecord.setAttributeValue(xmlRoot,xmlAnyObjectMapping);
    }
  }
}"
68815,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  if (xmlAnyObjectMapping.isReadOnly()) {
    return false;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Object objectValue=marshalContext.getAttributeValue(object,xmlAnyObjectMapping);
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    if (xmlRootFragment != null) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
      if (generatedNamespace != null) {
        marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
      }
    }
    marshalRecord.characters((String)objectValue);
    if (xmlRootFragment != null) {
      marshalRecord.endElement(xmlRootFragment,namespaceResolver);
    }
  }
 else {
    Session childSession=marshaller.getXMLContext().getSession(objectValue);
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(objectValue);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      if (xmlAnyObjectMapping.shouldAddXsiType(marshaller,descriptor,originalValue,wasXMLRoot)) {
        String typeValue=descriptor.getSchemaReference().getSchemaContext();
        addTypeAttribute(descriptor,marshalRecord,typeValue);
      }
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(objectValue);
      }
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  if (xmlAnyObjectMapping.isReadOnly()) {
    return false;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Object objectValue=marshalContext.getAttributeValue(object,xmlAnyObjectMapping);
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().beforeMarshal(objectValue);
      }
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if ((rootFragment.getNamespaceURI() == null) && (rootFragment.getPrefix() != null)) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      if (xmlAnyObjectMapping.shouldAddXsiType(marshaller,descriptor,originalValue,wasXMLRoot)) {
        String typeValue=descriptor.getSchemaReference().getSchemaContext();
        addTypeAttribute(descriptor,marshalRecord,typeValue);
      }
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
        marshaller.getMarshalListener().afterMarshal(objectValue);
      }
    }
  }
  return true;
}"
68816,"private DatabaseMapping buildXMLObjectReferenceMapping(String mappingUri){
  XMLObjectReferenceMapping mapping=new XMLObjectReferenceMapping();
  mapping.setAttributeName(getName());
  if (getType().equals(SDOConstants.SDO_DATAOBJECT)) {
    ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
  }
  mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
  mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  String sourcexpath=getQualifiedXPath(getContainingType().getURI(),true);
  SDOProperty targetIDProp=getIDProp(getType());
  if (targetIDProp != null) {
    String targetxpath=targetIDProp.getQualifiedXPath(getType().getURI(),true);
    ((SDOType)getType()).getXmlDescriptor().addPrimaryKeyFieldName(targetxpath);
    mapping.addSourceToTargetKeyFieldAssociation(sourcexpath,targetxpath);
  }
 else {
    throw SDOException.noTargetIdSpecified(getType().getURI(),getType().getName());
  }
  return mapping;
}","private DatabaseMapping buildXMLObjectReferenceMapping(String mappingUri){
  XMLObjectReferenceMapping mapping=new XMLObjectReferenceMapping();
  mapping.setAttributeName(getName());
  if (getType().equals(SDOConstants.SDO_DATAOBJECT)) {
    ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
  }
  mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
  mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  String sourcexpath=getQualifiedXPath(getContainingType().getURI(),true);
  SDOProperty targetIDProp=getIDProp(getType());
  if (targetIDProp != null) {
    String targetxpath=targetIDProp.getQualifiedXPath(getType().getURI(),true);
    mapping.addSourceToTargetKeyFieldAssociation(sourcexpath,targetxpath);
  }
 else {
    throw SDOException.noTargetIdSpecified(getType().getURI(),getType().getName());
  }
  return mapping;
}"
68817,"private DatabaseMapping buildXMLCollectionReferenceMapping(String mappingUri){
  XMLCollectionReferenceMapping mapping=new XMLCollectionReferenceMapping();
  mapping.setAttributeName(getName());
  if (getType().equals(SDOConstants.SDO_DATAOBJECT)) {
    ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
  }
  mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
  mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  mapping.setUsesSingleNode(true);
  mapping.useCollectionClass(ArrayList.class);
  String sourcexpath=getQualifiedXPath(getContainingType().getURI(),true);
  SDOProperty targetIDProp=getIDProp(getType());
  if (targetIDProp != null) {
    String targetxpath=targetIDProp.getQualifiedXPath(getType().getURI(),true);
    ((SDOType)getType()).getXmlDescriptor().addPrimaryKeyFieldName(targetxpath);
    mapping.addSourceToTargetKeyFieldAssociation(sourcexpath,targetxpath);
  }
 else {
    throw SDOException.noTargetIdSpecified(getType().getURI(),getType().getName());
  }
  return mapping;
}","private DatabaseMapping buildXMLCollectionReferenceMapping(String mappingUri){
  XMLCollectionReferenceMapping mapping=new XMLCollectionReferenceMapping();
  mapping.setAttributeName(getName());
  if (getType().equals(SDOConstants.SDO_DATAOBJECT)) {
    ((SDOType)getType()).setImplClassName(SDOConstants.SDO_DATA_OBJECT_IMPL_CLASS_NAME);
  }
  mapping.setReferenceClassName(((SDOType)getType()).getImplClassName());
  mapping.setReferenceClass(((SDOType)getType()).getImplClass());
  mapping.setUsesSingleNode(true);
  mapping.useCollectionClass(ArrayList.class);
  String sourcexpath=getQualifiedXPath(getContainingType().getURI(),true);
  SDOProperty targetIDProp=getIDProp(getType());
  if (targetIDProp != null) {
    String targetxpath=targetIDProp.getQualifiedXPath(getType().getURI(),true);
    mapping.addSourceToTargetKeyFieldAssociation(sourcexpath,targetxpath);
  }
 else {
    throw SDOException.noTargetIdSpecified(getType().getURI(),getType().getName());
  }
  return mapping;
}"
68818,"/** 
 * INTERNAL: Get the XMLDescriptor associated with this Type or generate a new one.
 */
public XMLDescriptor getXmlDescriptor(){
  if (!isDataType() && (xmlDescriptor == null)) {
    xmlDescriptor=new XMLDescriptor();
    NamespaceResolver nr=new NamespaceResolver();
    if ((getBaseTypes() != null) && (getBaseTypes().size() > 0)) {
      SDOType baseType=(SDOType)getBaseTypes().get(0);
      if (!baseType.isDataType) {
        NamespaceResolver parentNR=baseType.getXmlDescriptor().getNonNullNamespaceResolver();
        if (parentNR != null) {
          for (int i=0; i < parentNR.getNamespaces().size(); i++) {
            Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
            if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
              nr.put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
            }
          }
        }
      }
    }
    xmlDescriptor.setNamespaceResolver(nr);
    if (getURI() != null) {
      String prefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(getURI());
      xmlDescriptor.getNamespaceResolver().put(prefix,getURI());
    }
    xmlDescriptor.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  return xmlDescriptor;
}","/** 
 * INTERNAL: Get the XMLDescriptor associated with this Type or generate a new one.
 */
public XMLDescriptor getXmlDescriptor(List namespaceResolvers){
  if (!isDataType() && (xmlDescriptor == null)) {
    xmlDescriptor=new XMLDescriptor();
    NamespaceResolver nr=new NamespaceResolver();
    if (namespaceResolvers != null) {
      for (int i=0; i < namespaceResolvers.size(); i++) {
        NamespaceResolver nextNR=(NamespaceResolver)namespaceResolvers.get(i);
        if (nextNR != null) {
          for (int j=0, size=nextNR.getNamespaces().size(); j < size; j++) {
            Namespace nextNamespace=(Namespace)nextNR.getNamespaces().get(j);
            if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
              String newPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).addNamespace(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
              nr.put(newPrefix,nextNamespace.getNamespaceURI());
            }
          }
        }
      }
    }
    if ((getBaseTypes() != null) && (getBaseTypes().size() > 0)) {
      SDOType baseType=(SDOType)getBaseTypes().get(0);
      if (!baseType.isDataType) {
        NamespaceResolver parentNR=baseType.getXmlDescriptor().getNonNullNamespaceResolver();
        if (parentNR != null) {
          for (int i=0; i < parentNR.getNamespaces().size(); i++) {
            Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
            if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
              nr.put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
            }
          }
        }
      }
    }
    xmlDescriptor.setNamespaceResolver(nr);
    if (getURI() != null) {
      String prefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(getURI());
      xmlDescriptor.getNamespaceResolver().put(prefix,getURI());
    }
    xmlDescriptor.getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  return xmlDescriptor;
}"
68819,"private void setupInheritance(SDOType parentType){
  if ((parentType.getURI() != null) && (!parentType.getURI().equals(SDOConstants.SDO_URL))) {
    XMLField field=new XMLField(""String_Node_Str"");
    XMLDescriptor parentDescriptor=(XMLDescriptor)parentType.getXmlDescriptor().getInheritancePolicy().getRootParentDescriptor();
    parentDescriptor.getInheritancePolicy().setClassIndicatorField(field);
    if (getInstanceClassName() != null) {
      String indicator=getName();
      String prefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(getURI());
      if (prefix == null) {
        prefix=getXmlDescriptor().getNamespaceResolver().resolveNamespaceURI(getURI());
        if (prefix != null) {
          parentDescriptor.getNamespaceResolver().put(prefix,getURI());
        }
      }
      if (prefix != null) {
        indicator=prefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + indicator;
      }
      Class implClass=getImplClass();
      parentDescriptor.getInheritancePolicy().addClassIndicator(implClass,indicator);
      parentDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
      String parentIndicator=parentType.getName();
      String parentPrefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(parentType.getURI());
      if (parentPrefix != null) {
        parentIndicator=parentPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + parentIndicator;
      }
      Class parentImplClass=parentType.getImplClass();
      parentDescriptor.getInheritancePolicy().addClassIndicator(parentImplClass,parentIndicator);
      Class parentClass=parentType.getImplClass();
      getXmlDescriptor().getInheritancePolicy().setParentClass(parentClass);
      getXmlDescriptor().getInheritancePolicy().setParentDescriptor(parentType.getXmlDescriptor());
      parentType.getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
}","private void setupInheritance(SDOType parentType){
  if ((parentType.getURI() != null) && (!parentType.getURI().equals(SDOConstants.SDO_URL))) {
    XMLField field=(XMLField)getXmlDescriptor().buildField(""String_Node_Str"");
    XMLDescriptor parentDescriptor=(XMLDescriptor)parentType.getXmlDescriptor().getInheritancePolicy().getRootParentDescriptor();
    parentDescriptor.getInheritancePolicy().setClassIndicatorField(field);
    if (getInstanceClassName() != null) {
      String indicator=getName();
      String prefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(getURI());
      if (prefix == null) {
        prefix=getXmlDescriptor().getNamespaceResolver().resolveNamespaceURI(getURI());
        if (prefix != null) {
          parentDescriptor.getNamespaceResolver().put(prefix,getURI());
        }
      }
      if (prefix != null) {
        indicator=prefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + indicator;
      }
      Class implClass=getImplClass();
      parentDescriptor.getInheritancePolicy().addClassIndicator(implClass,indicator);
      parentDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
      String parentIndicator=parentType.getName();
      String parentPrefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(parentType.getURI());
      if (parentPrefix != null) {
        parentIndicator=parentPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + parentIndicator;
      }
      Class parentImplClass=parentType.getImplClass();
      parentDescriptor.getInheritancePolicy().addClassIndicator(parentImplClass,parentIndicator);
      Class parentClass=parentType.getImplClass();
      getXmlDescriptor().getInheritancePolicy().setParentClass(parentClass);
      getXmlDescriptor().getInheritancePolicy().setParentDescriptor(parentType.getXmlDescriptor());
      parentType.getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
}"
68820,"private XMLDescriptor buildElementDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Element.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping minOccursMapping=new XMLDirectMapping();
  minOccursMapping.setAttributeName(""String_Node_Str"");
  minOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(minOccursMapping);
  XMLDirectMapping maxOccursMapping=new XMLDirectMapping();
  maxOccursMapping.setAttributeName(""String_Node_Str"");
  maxOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(maxOccursMapping);
  XMLDirectMapping nillableMapping=new XMLDirectMapping();
  nillableMapping.setAttributeName(""String_Node_Str"");
  nillableMapping.setXPath(""String_Node_Str"");
  nillableMapping.setNullValue(new Boolean(""String_Node_Str""));
  descriptor.addMapping(nillableMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setGetMethodName(""String_Node_Str"");
  simpleTypeMapping.setSetMethodName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeObjectMapping complexTypeMapping=new XMLCompositeObjectMapping();
  complexTypeMapping.setReferenceClass(ComplexType.class);
  complexTypeMapping.setAttributeName(""String_Node_Str"");
  complexTypeMapping.setGetMethodName(""String_Node_Str"");
  complexTypeMapping.setSetMethodName(""String_Node_Str"");
  complexTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(complexTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}","private XMLDescriptor buildElementDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Element.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLDirectMapping minOccursMapping=new XMLDirectMapping();
  minOccursMapping.setAttributeName(""String_Node_Str"");
  minOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(minOccursMapping);
  XMLDirectMapping maxOccursMapping=new XMLDirectMapping();
  maxOccursMapping.setAttributeName(""String_Node_Str"");
  maxOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(maxOccursMapping);
  XMLDirectMapping nillableMapping=new XMLDirectMapping();
  nillableMapping.setAttributeName(""String_Node_Str"");
  nillableMapping.setXPath(""String_Node_Str"");
  nillableMapping.setNullValue(new Boolean(""String_Node_Str""));
  descriptor.addMapping(nillableMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setGetMethodName(""String_Node_Str"");
  simpleTypeMapping.setSetMethodName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeObjectMapping complexTypeMapping=new XMLCompositeObjectMapping();
  complexTypeMapping.setReferenceClass(ComplexType.class);
  complexTypeMapping.setAttributeName(""String_Node_Str"");
  complexTypeMapping.setGetMethodName(""String_Node_Str"");
  complexTypeMapping.setSetMethodName(""String_Node_Str"");
  complexTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(complexTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}"
68821,"public MarshalRecordContentHandler(MarshalRecord record,NamespaceResolver resolver){
  marshalRecord=record;
}","public MarshalRecordContentHandler(MarshalRecord record,NamespaceResolver resolver){
  marshalRecord=record;
  this.resolver=resolver;
}"
68822,"public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),""String_Node_Str"",resolverPfx + ""String_Node_Str"" + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),""String_Node_Str"",attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,""String_Node_Str"",XMLConstants.XMLNS + ""String_Node_Str"" + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else {
    Node newnode=document.importNode(node,true);
    try {
      getNode().appendChild(newnode);
    }
 catch (    Exception e) {
    }
  }
}","public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),""String_Node_Str"",resolverPfx + ""String_Node_Str"" + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),""String_Node_Str"",attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,""String_Node_Str"",XMLConstants.XMLNS + ""String_Node_Str"" + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    NodeRecordContentHandler mrcHdlr=new NodeRecordContentHandler(this,namespaceResolver);
    XMLFragmentReader xfRdr=new XMLFragmentReader(namespaceResolver);
    xfRdr.setContentHandler(mrcHdlr);
    try {
      xfRdr.parse(node);
    }
 catch (    SAXException sex) {
    }
  }
}"
68823,"protected void internalTestManagedEmployeesMassInsertOrMerge(boolean shouldInsert,boolean shouldUseSequencing) throws Exception {
  int nLevels=2;
  int nDirects=50;
  int id=0;
  EntityManager em=null;
  if (!shouldUseSequencing) {
    Employee emp=new Employee();
    em=createEntityManager();
    em.getTransaction().begin();
    em.persist(emp);
    id=emp.getId();
    em.getTransaction().rollback();
    em.close();
  }
  Employee topEmployee=new Employee();
  topEmployee.setFirstName(""String_Node_Str"");
  topEmployee.setLastName(""String_Node_Str"");
  if (!shouldUseSequencing) {
    topEmployee.setId(id++);
  }
  ArrayList<Employee> employeesForHigherLevel=new ArrayList<Employee>(1);
  ArrayList<Employee> employeesForCurrentLevel;
  employeesForHigherLevel.add(topEmployee);
  int nEmployeesTotal=1;
  for (int nLevel=1; nLevel <= nLevels; nLevel++) {
    employeesForCurrentLevel=new ArrayList<Employee>(employeesForHigherLevel.size() * nDirects);
    Iterator<Employee> it=employeesForHigherLevel.iterator();
    while (it.hasNext()) {
      Employee mgr=it.next();
      for (int nCurrent=0; nCurrent < nDirects; nCurrent++) {
        Employee employee=new Employee();
        employee.setFirstName(""String_Node_Str"" + nLevel);
        employee.setLastName(""String_Node_Str"" + employeesForCurrentLevel.size());
        if (!shouldUseSequencing) {
          employee.setId(id++);
        }
        employeesForCurrentLevel.add(employee);
        mgr.addManagedEmployee(employee);
      }
    }
    employeesForHigherLevel=employeesForCurrentLevel;
    nEmployeesTotal=nEmployeesTotal + employeesForCurrentLevel.size();
  }
  em=createEntityManager();
  em.getTransaction().begin();
  try {
    if (shouldInsert) {
      em.persist(topEmployee);
    }
 else {
      em.merge(topEmployee);
    }
    em.getTransaction().commit();
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
  }
  em=createEntityManager();
  em.getTransaction().begin();
  try {
    em.createQuery(""String_Node_Str"").executeUpdate();
    em.getTransaction().commit();
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    ((EntityManagerImpl)em).getServerSession().getIdentityMapAccessor().initializeAllIdentityMaps();
    em.close();
  }
}","protected void internalTestManagedEmployeesMassInsertOrMerge(boolean shouldInsert,boolean shouldUseSequencing) throws Exception {
  int nLevels=2;
  int nDirects=50;
  int id=0;
  EntityManager em=null;
  if (!shouldUseSequencing) {
    Employee emp=new Employee();
    em=createEntityManager();
    em.getTransaction().begin();
    em.persist(emp);
    id=emp.getId();
    em.getTransaction().rollback();
    em.close();
  }
  Employee topEmployee=new Employee();
  topEmployee.setFirstName(""String_Node_Str"");
  topEmployee.setLastName(""String_Node_Str"");
  if (!shouldUseSequencing) {
    topEmployee.setId(id++);
  }
  ArrayList<Employee> employeesForHigherLevel=new ArrayList<Employee>(1);
  ArrayList<Employee> employeesForCurrentLevel;
  employeesForHigherLevel.add(topEmployee);
  int nEmployeesTotal=1;
  for (int nLevel=1; nLevel <= nLevels; nLevel++) {
    employeesForCurrentLevel=new ArrayList<Employee>(employeesForHigherLevel.size() * nDirects);
    Iterator<Employee> it=employeesForHigherLevel.iterator();
    while (it.hasNext()) {
      Employee mgr=it.next();
      for (int nCurrent=0; nCurrent < nDirects; nCurrent++) {
        Employee employee=new Employee();
        employee.setFirstName(""String_Node_Str"" + nLevel);
        employee.setLastName(""String_Node_Str"" + employeesForCurrentLevel.size());
        if (!shouldUseSequencing) {
          employee.setId(id++);
        }
        employeesForCurrentLevel.add(employee);
        mgr.addManagedEmployee(employee);
      }
    }
    employeesForHigherLevel=employeesForCurrentLevel;
    nEmployeesTotal=nEmployeesTotal + employeesForCurrentLevel.size();
  }
  em=createEntityManager();
  em.getTransaction().begin();
  try {
    if (shouldInsert) {
      em.persist(topEmployee);
    }
 else {
      em.merge(topEmployee);
    }
    em.getTransaction().commit();
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
  }
  em=createEntityManager();
  em.getTransaction().begin();
  try {
    List<Employee> employees=em.createQuery(""String_Node_Str"").getResultList();
    Iterator<Employee> i=employees.iterator();
    while (i.hasNext()) {
      Employee emp=i.next();
      emp.setManager(null);
      emp.setManagedEmployees(null);
      em.remove(emp);
    }
    em.getTransaction().commit();
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    ((EntityManagerImpl)em).getServerSession().getIdentityMapAccessor().initializeAllIdentityMaps();
    em.close();
  }
}"
68824,"public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller){
  if (null == getRootXPathNode().getNonAttributeChildren()) {
    return record;
  }
  XPathNode xPathNode;
  NamespaceResolver namespaceResolver;
  int size=rootXPathNode.getNonAttributeChildren().size();
  for (int x=0; x < size; x++) {
    xPathNode=(XPathNode)rootXPathNode.getNonAttributeChildren().get(x);
    namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller);
  }
  return record;
}","public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller){
  if (rootXPathNode.getSelfChildren() != null) {
    XPathNode childNode;
    NamespaceResolver namespaceResolver;
    for (int x=0; x < rootXPathNode.getSelfChildren().size(); x++) {
      childNode=(XPathNode)rootXPathNode.getSelfChildren().get(x);
      namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
      childNode.marshalSelfAttributes((MarshalRecord)record,object,session,namespaceResolver,marshaller);
    }
  }
  if (null == getRootXPathNode().getNonAttributeChildren()) {
    return record;
  }
  XPathNode xPathNode;
  NamespaceResolver namespaceResolver;
  int size=rootXPathNode.getNonAttributeChildren().size();
  for (int x=0; x < size; x++) {
    xPathNode=(XPathNode)rootXPathNode.getNonAttributeChildren().get(x);
    namespaceResolver=((XMLDescriptor)this.getDescriptor()).getNamespaceResolver();
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller);
  }
  return record;
}"
68825,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller){
  if (xmlCompositeObjectMapping.isReadOnly()) {
    return false;
  }
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  Object objectValue=xmlCompositeObjectMapping.getAttributeValueFromObject(object);
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  XMLDescriptor descriptor=(XMLDescriptor)session.getDescriptor(objectValue);
  TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  if (xPathFragment.isSelfFragment()) {
    objectBuilder.marshalAttributes(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
  }
  List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
  writeExtraNamespaces(extraNamespaces,marshalRecord,session);
  if ((xmlCompositeObjectMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
    addTypeAttributeIfNeeded(descriptor,xmlCompositeObjectMapping,marshalRecord);
  }
  objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)session,marshaller);
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(objectValue);
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller){
  if (xmlCompositeObjectMapping.isReadOnly()) {
    return false;
  }
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  Object objectValue=xmlCompositeObjectMapping.getAttributeValueFromObject(object);
  if (xmlCompositeObjectMapping.getConverter() != null) {
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(objectValue);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  XMLDescriptor descriptor=(XMLDescriptor)session.getDescriptor(objectValue);
  TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  if (!xPathFragment.isSelfFragment()) {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
  }
  List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
  writeExtraNamespaces(extraNamespaces,marshalRecord,session);
  if ((xmlCompositeObjectMapping.getReferenceDescriptor() == null) && (descriptor.getSchemaReference() != null)) {
    addTypeAttributeIfNeeded(descriptor,xmlCompositeObjectMapping,marshalRecord);
  }
  objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)session,marshaller);
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(objectValue);
  }
  return true;
}"
68826,"public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor) throws SAXException {
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,(org.eclipse.persistence.internal.sessions.AbstractSession)unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  unmarshalRecord.setChildRecord((UnmarshalRecord)targetObjectBuilder.createRecord());
  unmarshalRecord.getChildRecord().setUnmarshaller(unmarshalRecord.getUnmarshaller());
  unmarshalRecord.getChildRecord().startDocument();
  unmarshalRecord.getChildRecord().startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  unmarshalRecord.getXMLReader().setContentHandler(unmarshalRecord.getChildRecord());
  try {
    unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord.getChildRecord());
  }
 catch (  SAXNotRecognizedException ex) {
  }
catch (  SAXNotSupportedException ex) {
  }
  unmarshalRecord.getChildRecord().setXMLReader(unmarshalRecord.getXMLReader());
}","public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor) throws SAXException {
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,(org.eclipse.persistence.internal.sessions.AbstractSession)unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator == null) {
          throw DescriptorException.missingClassForIndicatorFieldValue(leafElementType,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
        classValue=(Class)indicator;
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  unmarshalRecord.setChildRecord((UnmarshalRecord)targetObjectBuilder.createRecord());
  unmarshalRecord.getChildRecord().setAttributes(atts);
  unmarshalRecord.getChildRecord().setUnmarshaller(unmarshalRecord.getUnmarshaller());
  unmarshalRecord.getChildRecord().startDocument();
  unmarshalRecord.getChildRecord().startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  unmarshalRecord.getXMLReader().setContentHandler(unmarshalRecord.getChildRecord());
  try {
    unmarshalRecord.getXMLReader().setProperty(""String_Node_Str"",unmarshalRecord.getChildRecord());
  }
 catch (  SAXNotRecognizedException ex) {
  }
catch (  SAXNotSupportedException ex) {
  }
  unmarshalRecord.getChildRecord().setXMLReader(unmarshalRecord.getXMLReader());
}"
68827,"public void writeSingleValue(Object value,Object parent,XMLRecord record,AbstractSession session){
  Object attributeValue=value;
  if (getConverter() != null) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertObjectValueToDataValue(attributeValue,session,record.getMarshaller());
    }
 else {
      attributeValue=getConverter().convertObjectValueToDataValue(attributeValue,session);
    }
  }
  if (((XMLField)getField()).isSelfField()) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)this.getReferenceDescriptor().getObjectBuilder();
    objectBuilder.buildIntoNestedRow(record,attributeValue,session);
  }
 else {
    Object fieldValue=null;
    if (attributeValue != null) {
      fieldValue=buildCompositeRow(attributeValue,session,record);
    }
 else     if (getNullPolicy().compositeObjectMarshal(record,parent,(XMLField)getField())) {
      return;
    }
    record.put(this.getField(),fieldValue);
  }
}","public void writeSingleValue(Object value,Object parent,XMLRecord record,AbstractSession session){
  Object attributeValue=value;
  if (getConverter() != null) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertObjectValueToDataValue(attributeValue,session,record.getMarshaller());
    }
 else {
      attributeValue=getConverter().convertObjectValueToDataValue(attributeValue,session);
    }
  }
  if (((XMLField)getField()).isSelfField()) {
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)this.getReferenceDescriptor(attributeValue.getClass(),session).getObjectBuilder();
    objectBuilder.buildIntoNestedRow(record,attributeValue,session);
  }
 else {
    Object fieldValue=null;
    if (attributeValue != null) {
      fieldValue=buildCompositeRow(attributeValue,session,record);
    }
 else     if (getNullPolicy().compositeObjectMarshal(record,parent,(XMLField)getField())) {
      return;
    }
    record.put(this.getField(),fieldValue);
  }
}"
68828,"public void startDocument(XMLMapping selfRecordMapping) throws SAXException {
  try {
    Object object=this.getXMLReader().getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    if ((this.unmarshaller != null) && (this.unmarshaller.getUnmarshalListener() != null)) {
      if (this.parentRecord != null) {
        this.unmarshaller.getUnmarshalListener().beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
 else {
        this.unmarshaller.getUnmarshalListener().beforeUnmarshal(object,null);
      }
    }
    if (parentRecord != null) {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containersMap=new HashMap(containerValues.size());
      ContainerValue containerValue;
      Object containerInstance;
      int containerValuesSize=containerValues.size();
      for (int x=0; x < containerValuesSize; x++) {
        containerValue=(ContainerValue)containerValues.get(x);
        containerInstance=containerValue.getContainerInstance();
        containersMap.put(containerValue,containerInstance);
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList(selfChildrenSize);
      XPathNode selfNode;
      for (int x=0; x < selfChildrenSize; x++) {
        selfNode=(XPathNode)xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,null));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startDocument(XMLMapping selfRecordMapping) throws SAXException {
  try {
    Object object=this.getXMLReader().getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    if ((this.unmarshaller != null) && (this.unmarshaller.getUnmarshalListener() != null)) {
      if (this.parentRecord != null) {
        this.unmarshaller.getUnmarshalListener().beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
 else {
        this.unmarshaller.getUnmarshalListener().beforeUnmarshal(object,null);
      }
    }
    if (parentRecord != null) {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containersMap=new HashMap(containerValues.size());
      ContainerValue containerValue;
      Object containerInstance;
      int containerValuesSize=containerValues.size();
      for (int x=0; x < containerValuesSize; x++) {
        containerValue=(ContainerValue)containerValues.get(x);
        containerInstance=containerValue.getContainerInstance();
        containersMap.put(containerValue,containerInstance);
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList(selfChildrenSize);
      XPathNode selfNode;
      for (int x=0; x < selfChildrenSize; x++) {
        selfNode=(XPathNode)xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
68829,"/** 
 * Return the proc syntax for this platform.
 */
public String buildProcedureCallString(StoredProcedureCall call,AbstractSession session){
  StringWriter writer=new StringWriter();
  writer.write(call.getCallHeader(this));
  writer.write(call.getProcedureName());
  if (requiresProcedureCallBrackets()) {
    writer.write(""String_Node_Str"");
  }
 else {
    writer.write(""String_Node_Str"");
  }
  int indexFirst=call.getFirstParameterIndexForCallString();
  for (int index=indexFirst; index < call.getParameters().size(); index++) {
    String name=(String)call.getProcedureArgumentNames().elementAt(index);
    Object parameter=call.getParameters().elementAt(index);
    Integer parameterType=(Integer)call.getParameterTypes().elementAt(index);
    if (name != null) {
      writer.write(getProcedureArgumentString());
      writer.write(name);
      writer.write(getProcedureArgumentSetter());
    }
    writer.write(""String_Node_Str"");
    if (call.isOutputParameterType(parameterType)) {
      if (requiresProcedureCallOuputToken()) {
        writer.write(""String_Node_Str"");
        writer.write(getOutputProcedureToken());
      }
    }
    if ((index + 1) < call.getParameters().size()) {
      writer.write(""String_Node_Str"");
    }
  }
  call.setProcedureArgumentNames(null);
  if (requiresProcedureCallBrackets()) {
    writer.write(""String_Node_Str"");
  }
  writer.write(getProcedureCallTail());
  return writer.toString();
}","/** 
 * Return the proc syntax for this platform.
 */
public String buildProcedureCallString(StoredProcedureCall call,AbstractSession session){
  StringWriter writer=new StringWriter();
  writer.write(call.getCallHeader(this));
  writer.write(call.getProcedureName());
  if (requiresProcedureCallBrackets()) {
    writer.write(""String_Node_Str"");
  }
 else {
    writer.write(""String_Node_Str"");
  }
  int indexFirst=call.getFirstParameterIndexForCallString();
  for (int index=indexFirst; index < call.getParameters().size(); index++) {
    String name=(String)call.getProcedureArgumentNames().elementAt(index);
    Object parameter=call.getParameters().elementAt(index);
    Integer parameterType=(Integer)call.getParameterTypes().elementAt(index);
    if (name != null && shouldPrintStoredProcedureArgumentNameInCall()) {
      writer.write(getProcedureArgumentString());
      writer.write(name);
      writer.write(getProcedureArgumentSetter());
    }
    writer.write(""String_Node_Str"");
    if (call.isOutputParameterType(parameterType)) {
      if (requiresProcedureCallOuputToken()) {
        writer.write(""String_Node_Str"");
        writer.write(getOutputProcedureToken());
      }
    }
    if ((index + 1) < call.getParameters().size()) {
      writer.write(""String_Node_Str"");
    }
  }
  call.setProcedureArgumentNames(null);
  if (requiresProcedureCallBrackets()) {
    writer.write(""String_Node_Str"");
  }
  writer.write(getProcedureCallTail());
  return writer.toString();
}"
68830,"public void testClearWithFlush2(){
  String firstName=""String_Node_Str"";
  EntityManager em=createEntityManager();
  int employee_1_NotInCache_id=0;
  int employee_2_NotInCache_id=0;
  int manager_NotInCache_id=0;
  em.getTransaction().begin();
  try {
    Employee employee_1_NotInCache=new Employee();
    employee_1_NotInCache.setFirstName(firstName);
    employee_1_NotInCache.setLastName(""String_Node_Str"");
    Employee employee_2_NotInCache=new Employee();
    employee_2_NotInCache.setFirstName(firstName);
    employee_2_NotInCache.setLastName(""String_Node_Str"");
    Employee manager_NotInCache=new Employee();
    manager_NotInCache.setFirstName(firstName);
    manager_NotInCache.setLastName(""String_Node_Str"");
    manager_NotInCache.addManagedEmployee(employee_1_NotInCache);
    em.persist(manager_NotInCache);
    em.persist(employee_1_NotInCache);
    em.persist(employee_2_NotInCache);
    em.getTransaction().commit();
    employee_1_NotInCache_id=employee_1_NotInCache.getId();
    employee_2_NotInCache_id=employee_2_NotInCache.getId();
    manager_NotInCache_id=manager_NotInCache.getId();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw ex;
  }
  clearCache();
  em=createEntityManager();
  int employee_1_InCache_id=0;
  int employee_2_InCache_id=0;
  int manager_InCache_id=0;
  em.getTransaction().begin();
  try {
    Employee employee_1_InCache=new Employee();
    employee_1_InCache.setFirstName(firstName);
    employee_1_InCache.setLastName(""String_Node_Str"");
    Employee employee_2_InCache=new Employee();
    employee_2_InCache.setFirstName(firstName);
    employee_2_InCache.setLastName(""String_Node_Str"");
    Employee manager_InCache=new Employee();
    manager_InCache.setFirstName(firstName);
    manager_InCache.setLastName(""String_Node_Str"");
    manager_InCache.addManagedEmployee(employee_1_InCache);
    em.persist(manager_InCache);
    em.persist(employee_1_InCache);
    em.persist(employee_2_InCache);
    em.getTransaction().commit();
    employee_1_InCache_id=employee_1_InCache.getId();
    employee_2_InCache_id=employee_2_InCache.getId();
    manager_InCache_id=manager_InCache.getId();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw ex;
  }
  em=createEntityManager();
  int employee_1_New_id=0;
  int employee_2_New_id=0;
  int employee_3_New_id=0;
  int employee_4_New_id=0;
  int manager_New_id=0;
  em.getTransaction().begin();
  try {
    Employee employee_1_New=new Employee();
    employee_1_New.setFirstName(firstName);
    employee_1_New.setLastName(""String_Node_Str"");
    em.persist(employee_1_New);
    employee_1_New_id=employee_1_New.getId();
    Employee employee_2_New=new Employee();
    employee_2_New.setFirstName(firstName);
    employee_2_New.setLastName(""String_Node_Str"");
    em.persist(employee_2_New);
    employee_2_New_id=employee_2_New.getId();
    Employee employee_3_New=new Employee();
    employee_3_New.setFirstName(firstName);
    employee_3_New.setLastName(""String_Node_Str"");
    em.persist(employee_3_New);
    employee_3_New_id=employee_3_New.getId();
    Employee employee_4_New=new Employee();
    employee_4_New.setFirstName(firstName);
    employee_4_New.setLastName(""String_Node_Str"");
    em.persist(employee_4_New);
    employee_4_New_id=employee_4_New.getId();
    Employee manager_New=new Employee();
    manager_New.setFirstName(firstName);
    manager_New.setLastName(""String_Node_Str"");
    em.persist(manager_New);
    manager_New_id=manager_New.getId();
    Employee employee_1_NotInCache=em.find(Employee.class,employee_1_NotInCache_id);
    employee_1_NotInCache.setLastName(employee_1_NotInCache.getLastName() + ""String_Node_Str"");
    Employee employee_2_NotInCache=em.find(Employee.class,employee_2_NotInCache_id);
    employee_2_NotInCache.setLastName(employee_2_NotInCache.getLastName() + ""String_Node_Str"");
    Employee manager_NotInCache=em.find(Employee.class,manager_NotInCache_id);
    manager_NotInCache.setLastName(manager_NotInCache.getLastName() + ""String_Node_Str"");
    Employee employee_1_InCache=em.find(Employee.class,employee_1_InCache_id);
    employee_1_InCache.setLastName(employee_1_InCache.getLastName() + ""String_Node_Str"");
    Employee employee_2_InCache=em.find(Employee.class,employee_2_InCache_id);
    employee_2_InCache.setLastName(employee_2_InCache.getLastName() + ""String_Node_Str"");
    Employee manager_InCache=em.find(Employee.class,manager_InCache_id);
    manager_InCache.setLastName(manager_InCache.getLastName() + ""String_Node_Str"");
    manager_NotInCache.addManagedEmployee(employee_1_New);
    manager_InCache.addManagedEmployee(employee_2_New);
    manager_New.addManagedEmployee(employee_3_New);
    manager_New.addManagedEmployee(employee_2_NotInCache);
    manager_New.addManagedEmployee(employee_2_InCache);
    em.flush();
    em.clear();
    em.getTransaction().commit();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw ex;
  }
  String errorMsg=""String_Node_Str"";
  em=createEntityManager();
  Employee manager_NotInCache=em.find(Employee.class,manager_NotInCache_id);
  if (!manager_NotInCache.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  Iterator it=manager_NotInCache.getManagedEmployees().iterator();
  while (it.hasNext()) {
    Employee emp=(Employee)it.next();
    if (emp.getId() == employee_1_NotInCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_1_New_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else {
      errorMsg=errorMsg + ""String_Node_Str"" + emp.getLastName();
    }
  }
  if (manager_NotInCache.getManagedEmployees().size() != 2) {
    errorMsg=errorMsg + ""String_Node_Str"" + manager_NotInCache.getManagedEmployees().size();
  }
  Employee manager_InCache=em.find(Employee.class,manager_InCache_id);
  if (!manager_InCache.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  it=manager_InCache.getManagedEmployees().iterator();
  while (it.hasNext()) {
    Employee emp=(Employee)it.next();
    if (emp.getId() == employee_1_InCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_2_New_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else {
      errorMsg=errorMsg + ""String_Node_Str"" + emp.getLastName();
    }
  }
  if (manager_InCache.getManagedEmployees().size() != 2) {
    errorMsg=errorMsg + ""String_Node_Str"" + manager_InCache.getManagedEmployees().size();
  }
  Employee manager_New=em.find(Employee.class,manager_New_id);
  if (!manager_New.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  it=manager_New.getManagedEmployees().iterator();
  while (it.hasNext()) {
    Employee emp=(Employee)it.next();
    if (emp.getId() == employee_2_NotInCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_2_InCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_3_New_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else {
      errorMsg=errorMsg + ""String_Node_Str"" + emp.getLastName();
    }
  }
  if (manager_New.getManagedEmployees().size() != 3) {
    errorMsg=errorMsg + ""String_Node_Str"" + manager_InCache.getManagedEmployees().size();
  }
  Employee employee_4_New=em.find(Employee.class,employee_4_New_id);
  if (!employee_4_New.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  em.close();
  em=createEntityManager();
  try {
    em.getTransaction().begin();
    em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").executeUpdate();
    em.getTransaction().commit();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    if (errorMsg.length() == 0) {
      throw ex;
    }
  }
  clearCache();
  if (errorMsg.length() > 0) {
    fail(errorMsg);
  }
}","public void testClearWithFlush2(){
  String firstName=""String_Node_Str"";
  EntityManager em=createEntityManager();
  int employee_1_NotInCache_id=0;
  int employee_2_NotInCache_id=0;
  int manager_NotInCache_id=0;
  em.getTransaction().begin();
  try {
    Employee employee_1_NotInCache=new Employee();
    employee_1_NotInCache.setFirstName(firstName);
    employee_1_NotInCache.setLastName(""String_Node_Str"");
    Employee employee_2_NotInCache=new Employee();
    employee_2_NotInCache.setFirstName(firstName);
    employee_2_NotInCache.setLastName(""String_Node_Str"");
    Employee manager_NotInCache=new Employee();
    manager_NotInCache.setFirstName(firstName);
    manager_NotInCache.setLastName(""String_Node_Str"");
    manager_NotInCache.addManagedEmployee(employee_1_NotInCache);
    em.persist(manager_NotInCache);
    em.persist(employee_1_NotInCache);
    em.persist(employee_2_NotInCache);
    em.getTransaction().commit();
    employee_1_NotInCache_id=employee_1_NotInCache.getId();
    employee_2_NotInCache_id=employee_2_NotInCache.getId();
    manager_NotInCache_id=manager_NotInCache.getId();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw ex;
  }
  clearCache();
  em=createEntityManager();
  int employee_1_InCache_id=0;
  int employee_2_InCache_id=0;
  int manager_InCache_id=0;
  em.getTransaction().begin();
  try {
    Employee employee_1_InCache=new Employee();
    employee_1_InCache.setFirstName(firstName);
    employee_1_InCache.setLastName(""String_Node_Str"");
    Employee employee_2_InCache=new Employee();
    employee_2_InCache.setFirstName(firstName);
    employee_2_InCache.setLastName(""String_Node_Str"");
    Employee manager_InCache=new Employee();
    manager_InCache.setFirstName(firstName);
    manager_InCache.setLastName(""String_Node_Str"");
    manager_InCache.addManagedEmployee(employee_1_InCache);
    em.persist(manager_InCache);
    em.persist(employee_1_InCache);
    em.persist(employee_2_InCache);
    em.getTransaction().commit();
    employee_1_InCache_id=employee_1_InCache.getId();
    employee_2_InCache_id=employee_2_InCache.getId();
    manager_InCache_id=manager_InCache.getId();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw ex;
  }
  em=createEntityManager();
  int employee_1_New_id=0;
  int employee_2_New_id=0;
  int employee_3_New_id=0;
  int employee_4_New_id=0;
  int manager_New_id=0;
  em.getTransaction().begin();
  try {
    Employee employee_1_New=new Employee();
    employee_1_New.setFirstName(firstName);
    employee_1_New.setLastName(""String_Node_Str"");
    em.persist(employee_1_New);
    employee_1_New_id=employee_1_New.getId();
    Employee employee_2_New=new Employee();
    employee_2_New.setFirstName(firstName);
    employee_2_New.setLastName(""String_Node_Str"");
    em.persist(employee_2_New);
    employee_2_New_id=employee_2_New.getId();
    Employee employee_3_New=new Employee();
    employee_3_New.setFirstName(firstName);
    employee_3_New.setLastName(""String_Node_Str"");
    em.persist(employee_3_New);
    employee_3_New_id=employee_3_New.getId();
    Employee employee_4_New=new Employee();
    employee_4_New.setFirstName(firstName);
    employee_4_New.setLastName(""String_Node_Str"");
    em.persist(employee_4_New);
    employee_4_New_id=employee_4_New.getId();
    Employee manager_New=new Employee();
    manager_New.setFirstName(firstName);
    manager_New.setLastName(""String_Node_Str"");
    em.persist(manager_New);
    manager_New_id=manager_New.getId();
    Employee employee_1_NotInCache=em.find(Employee.class,employee_1_NotInCache_id);
    employee_1_NotInCache.setLastName(employee_1_NotInCache.getLastName() + ""String_Node_Str"");
    Employee employee_2_NotInCache=em.find(Employee.class,employee_2_NotInCache_id);
    employee_2_NotInCache.setLastName(employee_2_NotInCache.getLastName() + ""String_Node_Str"");
    Employee manager_NotInCache=em.find(Employee.class,manager_NotInCache_id);
    manager_NotInCache.setLastName(manager_NotInCache.getLastName() + ""String_Node_Str"");
    Employee employee_1_InCache=em.find(Employee.class,employee_1_InCache_id);
    employee_1_InCache.setLastName(employee_1_InCache.getLastName() + ""String_Node_Str"");
    Employee employee_2_InCache=em.find(Employee.class,employee_2_InCache_id);
    employee_2_InCache.setLastName(employee_2_InCache.getLastName() + ""String_Node_Str"");
    Employee manager_InCache=em.find(Employee.class,manager_InCache_id);
    manager_InCache.setLastName(manager_InCache.getLastName() + ""String_Node_Str"");
    manager_NotInCache.addManagedEmployee(employee_1_New);
    manager_InCache.addManagedEmployee(employee_2_New);
    manager_New.addManagedEmployee(employee_3_New);
    manager_New.addManagedEmployee(employee_2_NotInCache);
    manager_New.addManagedEmployee(employee_2_InCache);
    em.flush();
    em.clear();
    em.getTransaction().commit();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw ex;
  }
  String errorMsg=""String_Node_Str"";
  em=createEntityManager();
  Employee manager_NotInCache=em.find(Employee.class,manager_NotInCache_id);
  if (!manager_NotInCache.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  Iterator it=manager_NotInCache.getManagedEmployees().iterator();
  while (it.hasNext()) {
    Employee emp=(Employee)it.next();
    if (emp.getId() == employee_1_NotInCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_1_New_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else {
      errorMsg=errorMsg + ""String_Node_Str"" + emp.getLastName();
    }
  }
  if (manager_NotInCache.getManagedEmployees().size() != 2) {
    errorMsg=errorMsg + ""String_Node_Str"" + manager_NotInCache.getManagedEmployees().size();
  }
  Employee manager_InCache=em.find(Employee.class,manager_InCache_id);
  if (!manager_InCache.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  it=manager_InCache.getManagedEmployees().iterator();
  while (it.hasNext()) {
    Employee emp=(Employee)it.next();
    if (emp.getId() == employee_1_InCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_2_New_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else {
      errorMsg=errorMsg + ""String_Node_Str"" + emp.getLastName();
    }
  }
  if (manager_InCache.getManagedEmployees().size() != 2) {
    errorMsg=errorMsg + ""String_Node_Str"" + manager_InCache.getManagedEmployees().size();
  }
  Employee manager_New=em.find(Employee.class,manager_New_id);
  if (!manager_New.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  it=manager_New.getManagedEmployees().iterator();
  while (it.hasNext()) {
    Employee emp=(Employee)it.next();
    if (emp.getId() == employee_2_NotInCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_2_InCache_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else     if (emp.getId() == employee_3_New_id) {
      if (!emp.getLastName().endsWith(""String_Node_Str"")) {
        errorMsg=errorMsg + ""String_Node_Str"";
      }
    }
 else {
      errorMsg=errorMsg + ""String_Node_Str"" + emp.getLastName();
    }
  }
  if (manager_New.getManagedEmployees().size() != 3) {
    errorMsg=errorMsg + ""String_Node_Str"" + manager_InCache.getManagedEmployees().size();
  }
  Employee employee_4_New=em.find(Employee.class,employee_4_New_id);
  if (!employee_4_New.getLastName().endsWith(""String_Node_Str"")) {
    errorMsg=errorMsg + ""String_Node_Str"";
  }
  em.close();
  em=createEntityManager();
  try {
    em.getTransaction().begin();
    List<Employee> list=em.createQuery(""String_Node_Str"" + firstName + ""String_Node_Str"").getResultList();
    Iterator<Employee> i=list.iterator();
    while (i.hasNext()) {
      Employee e=i.next();
      if (e.getManager() != null) {
        e.getManager().removeManagedEmployee(e);
        e.setManager(null);
      }
      em.remove(e);
    }
    em.getTransaction().commit();
  }
 catch (  RuntimeException ex) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    if (errorMsg.length() == 0) {
      throw ex;
    }
  }
  clearCache();
  if (errorMsg.length() > 0) {
    fail(errorMsg);
  }
}"
68831,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new PrimitiveArrayPKCachingJUnitTestCase(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession();
      assertTrue(""String_Node_Str"",(session).getPlatform().isOracle());
      new PrimitiveArraysAsPrimaryKeyTableCreator().replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new PrimitiveArrayPKCachingJUnitTestCase(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession();
      if (!(JUnitTestCase.getServerSession()).getPlatform().isOracle()) {
        session.logMessage(""String_Node_Str"");
        return;
      }
      new PrimitiveArraysAsPrimaryKeyTableCreator().replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}"
68832,"protected void setUp(){
  DatabaseSession session=JUnitTestCase.getServerSession();
  assertTrue(""String_Node_Str"",(session).getPlatform().isOracle());
  new PrimitiveArraysAsPrimaryKeyTableCreator().replaceTables(session);
}","protected void setUp(){
  DatabaseSession session=JUnitTestCase.getServerSession();
  if (!(JUnitTestCase.getServerSession()).getPlatform().isOracle()) {
    session.logMessage(""String_Node_Str"");
    return;
  }
  new PrimitiveArraysAsPrimaryKeyTableCreator().replaceTables(session);
}"
68833,"/** 
 * Creates a PrimByteArrayPKType instance and then verifies that the same instance is returned from the database.  
 */
public void testPrimitiveByteArrayPK(){
  EntityManager em=createEntityManager();
  java.util.UUID uuid=UUID.randomUUID();
  PrimByteArrayPKType originalEntity=new PrimByteArrayPKType(PrimByteArrayPKType.getBytes(uuid));
  try {
    em.getTransaction().begin();
    em.persist(originalEntity);
    em.flush();
    PrimByteArrayPKType objectReadIn=em.find(PrimByteArrayPKType.class,PrimByteArrayPKType.getBytes(uuid));
    em.getTransaction().rollback();
    assertTrue(""String_Node_Str"",originalEntity == objectReadIn);
  }
 catch (  RuntimeException e) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw e;
  }
}","/** 
 * Creates a PrimByteArrayPKType instance and then verifies that the same instance is returned from the database.  
 */
public void testPrimitiveByteArrayPK(){
  if (!(JUnitTestCase.getServerSession()).getPlatform().isOracle()) {
    JUnitTestCase.getServerSession().logMessage(""String_Node_Str"");
    return;
  }
  EntityManager em=createEntityManager();
  java.util.UUID uuid=UUID.randomUUID();
  PrimByteArrayPKType originalEntity=new PrimByteArrayPKType(PrimByteArrayPKType.getBytes(uuid));
  try {
    em.getTransaction().begin();
    em.persist(originalEntity);
    em.flush();
    PrimByteArrayPKType objectReadIn=em.find(PrimByteArrayPKType.class,PrimByteArrayPKType.getBytes(uuid));
    em.getTransaction().rollback();
    assertTrue(""String_Node_Str"",originalEntity == objectReadIn);
  }
 catch (  RuntimeException e) {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
    throw e;
  }
}"
68834,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession(persistenceUnitName);
      JPAPropertiesRelationshipTableManager tm=new JPAPropertiesRelationshipTableManager();
      tm.replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      ServerSession session=JUnitTestCase.getServerSession(persistenceUnitName);
      session.logout();
      session.loginAndDetectDatasource();
      JPAPropertiesRelationshipTableManager tm=new JPAPropertiesRelationshipTableManager();
      tm.replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}"
68835,"protected void setUp(){
  DatabaseSession session=JUnitTestCase.getServerSession(persistenceUnitName);
  JPAPropertiesRelationshipTableManager tm=new JPAPropertiesRelationshipTableManager();
  tm.replaceTables(session);
}","protected void setUp(){
  ServerSession session=JUnitTestCase.getServerSession(persistenceUnitName);
  session.logout();
  session.loginAndDetectDatasource();
  JPAPropertiesRelationshipTableManager tm=new JPAPropertiesRelationshipTableManager();
  tm.replaceTables(session);
}"
68836,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyAttributeMapping.isReadOnly()) {
    return false;
  }
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)xmlAnyAttributeMapping.getContainerPolicy();
  Object collection=xmlAnyAttributeMapping.getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iter=cp.iteratorFor(collection);
  if (!cp.hasNext(iter)) {
    return false;
  }
  XPathFragment groupingElements=marshalRecord.openStartGroupingElements(namespaceResolver);
  while (cp.hasNext(iter)) {
    Object key=cp.next(iter,(org.eclipse.persistence.internal.sessions.AbstractSession)session);
    if (key instanceof QName) {
      QName name=(QName)key;
      String value=cp.valueFromKey(key,collection).toString();
      String qualifiedName=name.getLocalPart();
      NamespaceResolver nr=((XMLDescriptor)xmlAnyAttributeMapping.getDescriptor()).getNamespaceResolver();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(name.getNamespaceURI());
        if ((prefix != null) && !prefix.equals(""String_Node_Str"")) {
          qualifiedName=prefix + ""String_Node_Str"" + qualifiedName;
        }
      }
      marshalRecord.attribute(name.getNamespaceURI(),name.getLocalPart(),qualifiedName,value);
    }
  }
  marshalRecord.closeStartGroupingElements(groupingElements);
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyAttributeMapping.isReadOnly()) {
    return false;
  }
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)xmlAnyAttributeMapping.getContainerPolicy();
  Object collection=xmlAnyAttributeMapping.getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iter=cp.iteratorFor(collection);
  if (!cp.hasNext(iter)) {
    return false;
  }
  XPathFragment groupingElements=marshalRecord.openStartGroupingElements(namespaceResolver);
  List extraNamespaces=new ArrayList();
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  while (cp.hasNext(iter)) {
    Object key=cp.next(iter,(org.eclipse.persistence.internal.sessions.AbstractSession)session);
    if (key instanceof QName) {
      QName name=(QName)key;
      String value=cp.valueFromKey(key,collection).toString();
      String qualifiedName=name.getLocalPart();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(name.getNamespaceURI());
        if ((prefix != null) && !prefix.equals(""String_Node_Str"")) {
          qualifiedName=prefix + ""String_Node_Str"" + qualifiedName;
        }
 else         if (name.getNamespaceURI() != null && !name.getNamespaceURI().equals(""String_Node_Str"")) {
          String generatedPrefix=nr.generatePrefix();
          qualifiedName=generatedPrefix + ""String_Node_Str"" + qualifiedName;
          nr.put(generatedPrefix,name.getNamespaceURI());
          extraNamespaces.add(generatedPrefix);
          marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedPrefix,XMLConstants.XMLNS + ""String_Node_Str"" + generatedPrefix,name.getNamespaceURI());
        }
      }
      marshalRecord.attribute(name.getNamespaceURI(),name.getLocalPart(),qualifiedName,value);
    }
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    marshalRecord.getNamespaceResolver().removeNamespace((String)extraNamespaces.get(i));
  }
  marshalRecord.closeStartGroupingElements(groupingElements);
  return true;
}"
68837,"protected void writeExtraNamespaces(List extraNamespaces,XMLRecord xmlRecord,AbstractSession session){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return;
  }
 else   if (xmlRecord.getDOM().getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    Namespace next=(Namespace)extraNamespaces.get(i);
    ((Element)xmlRecord.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + next.getPrefix(),next.getNamespaceURI());
  }
}","public void writeExtraNamespaces(List extraNamespaces,XMLRecord xmlRecord,AbstractSession session){
  if (extraNamespaces == null) {
    return;
  }
  if (xmlRecord.getDOM().getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    Namespace next=(Namespace)extraNamespaces.get(i);
    ((Element)xmlRecord.getDOM()).setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + ""String_Node_Str"" + next.getPrefix(),next.getNamespaceURI());
  }
}"
68838,"protected void removeExtraNamespacesFromNamespaceResolver(XMLRecord marshalRecord,List extraNamespaces,AbstractSession session){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return;
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    Namespace nextExtraNamespace=(Namespace)extraNamespaces.get(i);
    String uri=marshalRecord.getNamespaceResolver().resolveNamespacePrefix(nextExtraNamespace.getPrefix());
    if ((uri != null) && uri.equals(nextExtraNamespace.getNamespaceURI())) {
      marshalRecord.getNamespaceResolver().removeNamespace(nextExtraNamespace.getPrefix());
    }
  }
}","public void removeExtraNamespacesFromNamespaceResolver(XMLRecord marshalRecord,List extraNamespaces,AbstractSession session){
  if (extraNamespaces == null) {
    return;
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    Namespace nextExtraNamespace=(Namespace)extraNamespaces.get(i);
    String uri=marshalRecord.getNamespaceResolver().resolveNamespacePrefix(nextExtraNamespace.getPrefix());
    if ((uri != null) && uri.equals(nextExtraNamespace.getNamespaceURI())) {
      marshalRecord.getNamespaceResolver().removeNamespace(nextExtraNamespace.getPrefix());
    }
  }
}"
68839,"public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object object,AbstractSession session,boolean shouldWriteXsiType){
  XMLRecord record=(XMLRecord)row;
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record,session);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (shouldWriteXsiType) {
      writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
    }
    if (getDescriptor().hasInheritance()) {
      if ((record.getLeafElementType() != null) && ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition())) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (ctxQName.equals(record.getLeafElementType())) {
        }
 else {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
 else {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
        }
      }
 else {
        if (!xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
 else {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
        }
      }
    }
    if (extraNamespaces != null) {
      removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
    }
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}","public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object object,AbstractSession session,boolean shouldWriteXsiType){
  XMLRecord record=(XMLRecord)row;
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record,session);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (shouldWriteXsiType) {
      writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
    }
    if (getDescriptor().hasInheritance()) {
      if ((record.getLeafElementType() != null) && ((xmlRef.getType() == 1) && xmlRef.isGlobalDefinition())) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (ctxQName.equals(record.getLeafElementType())) {
        }
 else {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
 else {
            writeXsiTypeAttribute(xmlDescriptor,(DOMRecord)record,xmlRef.getSchemaContext().substring(1));
          }
        }
      }
 else {
        if (!xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          XMLField xmlField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
          if (xmlField.getLastXPathFragment().isAttribute()) {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
 else {
            getDescriptor().getInheritancePolicy().addClassIndicatorFieldToRow(row);
          }
        }
      }
    }
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}"
68840,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      XMLRoot root=(XMLRoot)object;
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  NamespaceResolver nr=getNamespaceResolver(object,descriptor,isXMLRoot);
  XPathFragment rootFragment=buildRootFragment(object,descriptor,nr,isXMLRoot);
  nr=updateNamespaceResolver(rootFragment,nr,isXMLRoot);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    XMLRoot root=(XMLRoot)object;
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    if (null == nr) {
      nr=new NamespaceResolver();
    }
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  AbstractSession session=null;
  if (descriptor != null) {
    session=xmlContext.getSession(object);
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  addRootDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,(org.eclipse.persistence.internal.sessions.AbstractSession)session,this);
  }
 else   if (isXMLRoot) {
    String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class);
    marshalRecord.characters(value);
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,XMLDescriptor descriptor,boolean isXMLRoot){
  if (getMarshalListener() != null) {
    getMarshalListener().beforeMarshal(object);
  }
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      XMLRoot root=(XMLRoot)object;
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  NamespaceResolver nr=getNamespaceResolver(object,descriptor,isXMLRoot);
  XPathFragment rootFragment=buildRootFragment(object,descriptor,nr,isXMLRoot);
  nr=updateNamespaceResolver(rootFragment,nr,isXMLRoot);
  boolean shouldWriteTypeAttribute=shouldWriteTypeAttribute(object,descriptor,isXMLRoot);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  if (isXMLRoot) {
    XMLRoot root=(XMLRoot)object;
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || shouldWriteTypeAttribute) {
    if (null == nr) {
      nr=new NamespaceResolver();
    }
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  AbstractSession session=null;
  if (descriptor != null) {
    session=xmlContext.getSession(object);
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  addRootDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + ""String_Node_Str"" + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (descriptor != null) {
      if (shouldWriteTypeAttribute) {
        writeTypeAttribute(marshalRecord,descriptor,xsiPrefix);
      }
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.namespaceDeclarations(nr);
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null) {
    treeObjectBuilder.buildRow(marshalRecord,object,(org.eclipse.persistence.internal.sessions.AbstractSession)session,this);
  }
 else   if (isXMLRoot) {
    String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class);
    marshalRecord.characters(value);
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  if (getMarshalListener() != null) {
    getMarshalListener().afterMarshal(object);
  }
}"
68841,"public void writeSingleValue(Object attributeValue,Object parent,XMLRecord row,AbstractSession session){
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)this.getContainerPolicy();
  if ((attributeValue == null) || (cp.sizeFor(attributeValue) == 0)) {
    return;
  }
  DOMRecord record=(DOMRecord)row;
  if (record.getDOM().getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  Element root=(Element)record.getDOM();
  if (field != null) {
    root=(Element)XPathEngine.getInstance().create((XMLField)getField(),root);
  }
  for (Object iter=cp.iteratorFor(attributeValue); cp.hasNext(iter); ) {
    Object key=cp.next(iter,session);
    if ((key != null) && key instanceof QName) {
      Object value=cp.valueFromKey(key,attributeValue);
      QName attributeName=(QName)key;
      String namespaceURI=attributeName.getNamespaceURI();
      String qualifiedName=attributeName.getLocalPart();
      NamespaceResolver nr=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(attributeName.getNamespaceURI());
        if ((prefix != null) && !prefix.equals(""String_Node_Str"")) {
          qualifiedName=prefix + ""String_Node_Str"" + qualifiedName;
        }
      }
      if (namespaceURI != null) {
        root.setAttributeNS(namespaceURI,qualifiedName,value.toString());
      }
 else {
        root.setAttribute(attributeName.getLocalPart(),value.toString());
      }
    }
  }
}","public void writeSingleValue(Object attributeValue,Object parent,XMLRecord row,AbstractSession session){
  DirectMapContainerPolicy cp=(DirectMapContainerPolicy)this.getContainerPolicy();
  if ((attributeValue == null) || (cp.sizeFor(attributeValue) == 0)) {
    return;
  }
  DOMRecord record=(DOMRecord)row;
  if (record.getDOM().getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  Element root=(Element)record.getDOM();
  if (field != null) {
    root=(Element)XPathEngine.getInstance().create((XMLField)getField(),root);
  }
  List extraNamespaces=new ArrayList();
  NamespaceResolver nr=row.getNamespaceResolver();
  for (Object iter=cp.iteratorFor(attributeValue); cp.hasNext(iter); ) {
    Object key=cp.next(iter,session);
    if ((key != null) && key instanceof QName) {
      Object value=cp.valueFromKey(key,attributeValue);
      QName attributeName=(QName)key;
      String namespaceURI=attributeName.getNamespaceURI();
      String qualifiedName=attributeName.getLocalPart();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(attributeName.getNamespaceURI());
        if ((prefix != null) && !prefix.equals(""String_Node_Str"")) {
          qualifiedName=prefix + ""String_Node_Str"" + qualifiedName;
        }
 else         if (attributeName.getNamespaceURI() != null && !attributeName.getNamespaceURI().equals(""String_Node_Str"")) {
          String generatedPrefix=nr.generatePrefix();
          qualifiedName=generatedPrefix + ""String_Node_Str"" + qualifiedName;
          nr.put(generatedPrefix,attributeName.getNamespaceURI());
          extraNamespaces.add(new Namespace(generatedPrefix,attributeName.getNamespaceURI()));
          row.getNamespaceResolver().put(generatedPrefix,attributeName.getNamespaceURI());
        }
      }
      if (namespaceURI != null) {
        root.setAttributeNS(namespaceURI,qualifiedName,value.toString());
      }
 else {
        root.setAttribute(attributeName.getLocalPart(),value.toString());
      }
    }
  }
  ((XMLObjectBuilder)descriptor.getObjectBuilder()).writeExtraNamespaces(extraNamespaces,row,session);
  ((XMLObjectBuilder)descriptor.getObjectBuilder()).removeExtraNamespacesFromNamespaceResolver(row,extraNamespaces,session);
}"
68842,"/** 
 * If setupEntity has been called then this must be called to reset the model again.
 */
public void resetEntity(){
  if (isSetup()) {
    setTests(getOriginalTests());
    setIsSetup(false);
  }
  reset();
  getSession().getIdentityMapAccessor().initializeIdentityMaps();
  if (shouldResetSystemAfterEachTestModel()) {
    getExecutor().setConfiguredSystems(new Vector());
    if (getSession().isDatabaseSession()) {
      try {
        getDatabaseSession().logout();
      }
 catch (      Exception ignore) {
      }
    }
    if (this.login == null) {
      this.login=getSession().getDatasourceLogin();
      this.sessionLog=getSession().getSessionLog();
    }
    if (this.login.getClass() != getSession().getDatasourceLogin().getClass()) {
      System.out.println(""String_Node_Str"" + this);
    }
    if (this.sessionLog.getLevel() != getSession().getSessionLog().getLevel()) {
      System.out.println(""String_Node_Str"" + this);
    }
    if (this.login instanceof DatabaseLogin) {
      DatabaseLogin login=(DatabaseLogin)this.login;
      if (login.shouldBindAllParameters() != getSession().getLogin().shouldBindAllParameters()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldCacheAllStatements() != getSession().getLogin().shouldCacheAllStatements()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldUseBatchWriting() != getSession().getLogin().shouldUseBatchWriting()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldUseJDBCBatchWriting() != getSession().getLogin().shouldUseJDBCBatchWriting()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldUseNativeSQL() != getSession().getLogin().shouldUseNativeSQL()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.getTableQualifier() != getSession().getLogin().getTableQualifier()) {
        System.out.println(""String_Node_Str"" + this);
      }
    }
    DatabaseSession session=new Project(this.login).createDatabaseSession();
    session.setSessionLog(this.sessionLog);
    getExecutor().setSession(session);
    if (!ConversionManager.getDefaultManager().shouldUseClassLoaderFromCurrentThread()) {
      System.out.println(""String_Node_Str"" + this);
    }
    ConversionManager.setDefaultManager(null);
    getSession().getDatasourceLogin().getDatasourcePlatform().setConversionManager(null);
    SessionManager.getManager().setSessions(new Hashtable(5));
    getDatabaseSession().login();
  }
  setIsSetup(false);
}","/** 
 * If setupEntity has been called then this must be called to reset the model again.
 */
public void resetEntity(){
  if (isSetup()) {
    setTests(getOriginalTests());
    setIsSetup(false);
  }
  if (this.getSummary().didSetupWarn()) {
    return;
  }
  reset();
  getSession().getIdentityMapAccessor().initializeIdentityMaps();
  if (shouldResetSystemAfterEachTestModel()) {
    getExecutor().setConfiguredSystems(new Vector());
    if (getSession().isDatabaseSession()) {
      try {
        getDatabaseSession().logout();
      }
 catch (      Exception ignore) {
      }
    }
    if (this.login == null) {
      this.login=getSession().getDatasourceLogin();
      this.sessionLog=getSession().getSessionLog();
    }
    if (this.login.getClass() != getSession().getDatasourceLogin().getClass()) {
      System.out.println(""String_Node_Str"" + this);
    }
    if (this.sessionLog.getLevel() != getSession().getSessionLog().getLevel()) {
      System.out.println(""String_Node_Str"" + this);
    }
    if (this.login instanceof DatabaseLogin) {
      DatabaseLogin login=(DatabaseLogin)this.login;
      if (login.shouldBindAllParameters() != getSession().getLogin().shouldBindAllParameters()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldCacheAllStatements() != getSession().getLogin().shouldCacheAllStatements()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldUseBatchWriting() != getSession().getLogin().shouldUseBatchWriting()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldUseJDBCBatchWriting() != getSession().getLogin().shouldUseJDBCBatchWriting()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.shouldUseNativeSQL() != getSession().getLogin().shouldUseNativeSQL()) {
        System.out.println(""String_Node_Str"" + this);
      }
      if (login.getTableQualifier() != getSession().getLogin().getTableQualifier()) {
        System.out.println(""String_Node_Str"" + this);
      }
    }
    DatabaseSession session=new Project(this.login).createDatabaseSession();
    session.setSessionLog(this.sessionLog);
    getExecutor().setSession(session);
    if (!ConversionManager.getDefaultManager().shouldUseClassLoaderFromCurrentThread()) {
      System.out.println(""String_Node_Str"" + this);
    }
    ConversionManager.setDefaultManager(null);
    getSession().getDatasourceLogin().getDatasourcePlatform().setConversionManager(null);
    SessionManager.getManager().setSessions(new Hashtable(5));
    getDatabaseSession().login();
  }
  setIsSetup(false);
}"
68843,"/** 
 * Set all the required sytems that need to be configured even if they are already configured.
 */
public void setForcedRequiredSystems(Vector systems){
  this.forcedRequiredSystems=systems;
}","/** 
 * Set all the required systems that need to be configured even if they are already configured.
 */
public void setForcedRequiredSystems(Vector systems){
  this.forcedRequiredSystems=systems;
}"
68844,"/** 
 * Passed means the test was ok.
 */
public boolean hasPassed(){
  if ((getWarnings() != 0) || (getFatalErrors() != 0) || (getProblems() != 0)|| (getErrors() != 0)|| didSetupFail()|| (getSetupFailures() != 0)) {
    return false;
  }
  return true;
}","/** 
 * Passed means the test was ok.
 */
public boolean hasPassed(){
  if ((getWarnings() != 0) || (getFatalErrors() != 0) || (getProblems() != 0)|| (getErrors() != 0)|| didSetupFail()|| (getSetupFailures() != 0)|| didSetupWarn()|| (getSetupWarnings() != 0)) {
    return false;
  }
  return true;
}"
68845,"/** 
 * Reset the totals.
 */
public void resetTotals(){
  setResults(new Vector());
  setPassed(0);
  setWarnings(0);
  setErrors(0);
  setFatalErrors(0);
  setSetupFailures(0);
  setTotalTests(0);
}","/** 
 * Reset the totals.
 */
public void resetTotals(){
  setResults(new Vector());
  setPassed(0);
  setWarnings(0);
  setErrors(0);
  setFatalErrors(0);
  setSetupFailures(0);
  setSetupWarnings(0);
  setTotalTests(0);
}"
68846,"/** 
 * Add two test summaries
 */
public void appendTestCollectionResult(TestCollection testCollection){
  TestResultsSummary testSummary=testCollection.getSummary();
  setErrors(getErrors() + testSummary.getErrors());
  setPassed(getPassed() + testSummary.getPassed());
  setWarnings(getWarnings() + testSummary.getWarnings());
  setProblems(getProblems() + testSummary.getProblems());
  setFatalErrors(getFatalErrors() + testSummary.getFatalErrors());
  setTotalTests(getTotalTests() + testSummary.getTotalTests());
  setSetupFailures(getSetupFailures() + testSummary.getSetupFailures());
  if (testSummary.didSetupFail()) {
    setSetupFailures(getSetupFailures() + 1);
  }
  testCollection.getSummary().setParent(this);
  LoadBuildSystem.loadBuild.addSummary(this);
}","/** 
 * Add two test summaries
 */
public void appendTestCollectionResult(TestCollection testCollection){
  TestResultsSummary testSummary=testCollection.getSummary();
  setErrors(getErrors() + testSummary.getErrors());
  setPassed(getPassed() + testSummary.getPassed());
  setWarnings(getWarnings() + testSummary.getWarnings());
  setProblems(getProblems() + testSummary.getProblems());
  setFatalErrors(getFatalErrors() + testSummary.getFatalErrors());
  setTotalTests(getTotalTests() + testSummary.getTotalTests());
  setSetupFailures(getSetupFailures() + testSummary.getSetupFailures());
  setSetupWarnings(getSetupWarnings() + testSummary.getSetupWarnings());
  if (testSummary.didSetupFail()) {
    setSetupFailures(getSetupFailures() + 1);
  }
 else   if (testSummary.didSetupWarn()) {
    setSetupWarnings(getSetupWarnings() + 1);
  }
  testCollection.getSummary().setParent(this);
  LoadBuildSystem.loadBuild.addSummary(this);
}"
68847,"public boolean didSetupFail(){
  return getSetupException() != null;
}","public boolean didSetupFail(){
  return getSetupException() != null && !didSetupWarn();
}"
68848,"/** 
 * Print itself on the print stream.
 */
public void logResult(Writer log){
  String indentationString=getTestCollection().getIndentationString();
  try {
    if (didSetupFail()) {
      log.write(indentationString + org.eclipse.persistence.internal.helper.Helper.cr() + ""String_Node_Str""+ org.eclipse.persistence.internal.helper.Helper.cr()+ getSetupException()+ org.eclipse.persistence.internal.helper.Helper.cr());
      PrintWriter printWriter=new PrintWriter(log);
      getSetupException().printStackTrace(printWriter);
      log.flush();
    }
 else {
      if ((getErrors() > 0) || (getFatalErrors() > 0) || (getProblems() > 0)) {
        log.write(indentationString + ""String_Node_Str"" + org.eclipse.persistence.internal.helper.Helper.cr());
      }
      log.write(indentationString + ""String_Node_Str"" + getWarnings()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getProblems()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getErrors()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getFatalErrors()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getPassed()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getSetupFailures()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getTotalTime()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getTotalTests()+ org.eclipse.persistence.internal.helper.Helper.cr()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.flush();
    }
  }
 catch (  IOException exception) {
  }
}","/** 
 * Print itself on the print stream.
 */
public void logResult(Writer log){
  String indentationString=getTestCollection().getIndentationString();
  try {
    if (didSetupFail()) {
      log.write(indentationString + org.eclipse.persistence.internal.helper.Helper.cr() + ""String_Node_Str""+ org.eclipse.persistence.internal.helper.Helper.cr()+ getSetupException()+ org.eclipse.persistence.internal.helper.Helper.cr());
      PrintWriter printWriter=new PrintWriter(log);
      getSetupException().printStackTrace(printWriter);
      log.flush();
    }
 else     if (didSetupWarn()) {
      log.write(indentationString + ""String_Node_Str"" + org.eclipse.persistence.internal.helper.Helper.cr());
      ((TestWarningException)getSetupException()).setIndentationString(indentationString);
      log.write(getSetupException() + org.eclipse.persistence.internal.helper.Helper.cr());
      log.flush();
    }
 else {
      if ((getErrors() > 0) || (getFatalErrors() > 0) || (getProblems() > 0)) {
        log.write(indentationString + ""String_Node_Str"" + org.eclipse.persistence.internal.helper.Helper.cr());
      }
      log.write(indentationString + ""String_Node_Str"" + getWarnings()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getProblems()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getErrors()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getFatalErrors()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getPassed()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getSetupWarnings()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getSetupFailures()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getTotalTime()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.write(indentationString + ""String_Node_Str"" + getTotalTests()+ org.eclipse.persistence.internal.helper.Helper.cr()+ org.eclipse.persistence.internal.helper.Helper.cr());
      log.flush();
    }
  }
 catch (  IOException exception) {
  }
}"
68849,"/** 
 * Executes all the test entities in the collection.
 */
public void execute(TestExecutor executor) throws Throwable {
  setSummary(new TestResultsSummary(this));
  setExecutor(executor);
  setFinishedTests(new Vector());
  long startTime=System.currentTimeMillis();
  for (Enumeration tests=getTests().elements(); tests.hasMoreElements(); ) {
    junit.framework.Test test=(junit.framework.Test)tests.nextElement();
    if ((TestExecutor.getDefaultJUnitTestResult() != null) && TestExecutor.getDefaultJUnitTestResult().shouldStop()) {
      break;
    }
    executor.execute(test);
    getFinishedTests().addElement(test);
  }
  long endTime=System.currentTimeMillis();
  getSummary().setTotalTime(endTime - startTime);
  setFinishedTests((Vector)getTests().clone());
}","/** 
 * Executes all the test entities in the collection.
 */
public void execute(TestExecutor executor) throws Throwable {
  setSummary(new TestResultsSummary(this));
  setExecutor(executor);
  setupEntity();
  setFinishedTests(new Vector());
  long startTime=System.currentTimeMillis();
  for (Enumeration tests=getTests().elements(); tests.hasMoreElements(); ) {
    junit.framework.Test test=(junit.framework.Test)tests.nextElement();
    if ((TestExecutor.getDefaultJUnitTestResult() != null) && TestExecutor.getDefaultJUnitTestResult().shouldStop()) {
      break;
    }
    executor.execute(test);
    getFinishedTests().addElement(test);
  }
  long endTime=System.currentTimeMillis();
  getSummary().setTotalTime(endTime - startTime);
  setFinishedTests((Vector)getTests().clone());
}"
68850,"public void setupEntity(){
  ;
}","public void setupEntity() throws Throwable {
  try {
    setup();
  }
 catch (  Throwable exception) {
    getSummary().setSetupException(exception);
    throw exception;
  }
}"
68851,"protected void changeObject(){
  Employee employee=(Employee)this.workingCopy;
  employee.setNormalHours(new java.sql.Time[2]);
  employee.setStartTime(Helper.timeFromHourMinuteSecond(1,1,1));
  employee.setEndTime(Helper.timeFromHourMinuteSecond(1,1,1));
  employee.setPeriod(new EmploymentPeriod(Helper.dateFromYearMonthDate(2001,1,1),Helper.dateFromYearMonthDate(2002,2,2)));
  employee.setPhoneNumbers(new Vector());
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.setProjects(new Vector());
  employee.addProject((Project)getUnitOfWork().readObject(SmallProject.class));
  employee.addProject((Project)getUnitOfWork().readObject(LargeProject.class));
  employee.setResponsibilitiesList(new Vector());
  employee.addResponsibility(""String_Node_Str"");
  employee.addResponsibility(""String_Node_Str"");
  employee.setAddress(new EmployeePopulator().addressExample12());
  employee.setManager((Employee)getUnitOfWork().readObject(Employee.class));
}","protected void changeObject(){
  Employee employee=(Employee)this.workingCopy;
  employee.setNormalHours(new java.sql.Time[2]);
  employee.setStartTime(Helper.timeFromHourMinuteSecond(1,1,1));
  employee.setEndTime(Helper.timeFromHourMinuteSecond(1,1,1));
  employee.setPeriod(new EmploymentPeriod(Helper.dateFromYearMonthDate(2001,1,1),Helper.dateFromYearMonthDate(2002,2,2)));
  employee.setPhoneNumbers(new Vector());
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.setProjects(new Vector());
  employee.addProject((Project)getUnitOfWork().readObject(SmallProject.class));
  employee.addProject((Project)getUnitOfWork().readObject(LargeProject.class));
  employee.setResponsibilitiesList(new Vector());
  employee.addResponsibility(""String_Node_Str"");
  employee.addResponsibility(""String_Node_Str"");
  employee.setAddress(new EmployeePopulator().addressExample12());
  Vector employees=getUnitOfWork().readAllObjects(Employee.class);
  Employee manager=null;
  for (int i=0; i < employees.size(); i++) {
    manager=(Employee)employees.elementAt(i);
    if (!manager.getId().equals(employee.getId())) {
      break;
    }
  }
  employee.setManager(manager);
}"
68852,"public void addTests(){
  super.addTests();
  addTest(new RollbackObjectsTest(Employee.class,getAsOfClause()));
  addTest(EmployeeBasicTestModel.getReadObjectTestSuite());
  addTest(EmployeeBasicTestModel.getReadAllTestSuite());
  addTest(EmployeeBasicTestModel.getInsertObjectTestSuite());
  addTest(EmployeeBasicTestModel.getUpdateObjectTestSuite());
  addTest(EmployeeBasicTestModel.getDeleteObjectTestSuite());
  addTest(new IsolatedSessionHistoricalTest(getAsOfClause()));
}","public void addTests(){
  super.addTests();
  addTest(new RollbackObjectsTest(Employee.class,getAsOfClause()));
  addTest(EmployeeBasicTestModel.getReadObjectTestSuite());
  addTest(EmployeeBasicTestModel.getReadAllTestSuite());
  addTest(EmployeeBasicTestModel.getInsertObjectTestSuite());
  buildUpdateObjectTestSuite();
  addTest(EmployeeBasicTestModel.getDeleteObjectTestSuite());
  addTest(new IsolatedSessionHistoricalTest(getAsOfClause()));
}"
68853,"public void addRequiredSystems(){
  if (!(getSession().getPlatform() instanceof OraclePlatform)) {
    throw new TestProblemException(""String_Node_Str"");
  }
  addRequiredSystem(new IsolatedSessionSystem());
}","public void addRequiredSystems(){
  if (!(getSession().getPlatform() instanceof OraclePlatform)) {
    throw new TestWarningException(""String_Node_Str"");
  }
  addRequiredSystem(new IsolatedSessionSystem());
}"
68854,"public void setup(){
  Employee emp;
  Vector employees=getSomeEmployees();
  emp=(Employee)employees.firstElement();
  PhoneNumber phoneNumber=(PhoneNumber)emp.getPhoneNumbers().elementAt(0);
  String ejbqlString=""String_Node_Str"" + ""String_Node_Str"";
  setEjbqlString(ejbqlString);
  setOriginalOject(employees);
  Vector parameters=new Vector();
  parameters.add(phoneNumber);
  setArguments(parameters);
  Vector myArgumentNames=new Vector();
  myArgumentNames.add(""String_Node_Str"");
  setArgumentNames(myArgumentNames);
  super.setup();
}","public void setup(){
  Employee emp;
  Vector employees=getSomeEmployees();
  emp=(Employee)employees.firstElement();
  PhoneNumber phoneNumber=(PhoneNumber)emp.getPhoneNumbers().elementAt(0);
  String ejbqlString=""String_Node_Str"" + ""String_Node_Str"";
  setEjbqlString(ejbqlString);
  if (emp.getPhoneNumbers().size() == 1) {
    employees.removeElementAt(0);
  }
  setOriginalOject(employees);
  Vector parameters=new Vector();
  parameters.add(phoneNumber);
  setArguments(parameters);
  Vector myArgumentNames=new Vector();
  myArgumentNames.add(""String_Node_Str"");
  setArgumentNames(myArgumentNames);
  super.setup();
}"
68855,"public void setup(){
  String projectName=null;
  getAbstractSession().addAlias(""String_Node_Str"",getSession().getDescriptor(Project.class));
  Project project=(Project)getSomeProjects().firstElement();
  projectName=project.getName();
  ReadObjectQuery roq=new ReadObjectQuery();
  ExpressionBuilder eb=new ExpressionBuilder();
  Expression whereClause=eb.get(""String_Node_Str"").equal(projectName);
  roq.setSelectionCriteria(whereClause);
  roq.setReferenceClass(LargeProject.class);
  LargeProject proj=(LargeProject)getSession().executeQuery(roq);
  setOriginalOject(proj);
  String ejbql=""String_Node_Str"" + projectName + ""String_Node_Str"";
  this.setEjbqlString(ejbql);
  this.setReferenceClass(LargeProject.class);
}","public void setup(){
  String projectName=null;
  getAbstractSession().addAlias(""String_Node_Str"",getSession().getDescriptor(Project.class));
  Project project=null;
  Vector projects=getSomeProjects();
  for (int i=0; i < projects.size(); i++) {
    project=(Project)projects.elementAt(i);
    if (project instanceof LargeProject) {
      break;
    }
  }
  projectName=project.getName();
  ReadObjectQuery roq=new ReadObjectQuery();
  ExpressionBuilder eb=new ExpressionBuilder();
  Expression whereClause=eb.get(""String_Node_Str"").equal(projectName);
  roq.setSelectionCriteria(whereClause);
  roq.setReferenceClass(LargeProject.class);
  LargeProject proj=(LargeProject)getSession().executeQuery(roq);
  if (proj == null) {
    setOriginalOject(new Vector(0));
  }
 else {
    setOriginalOject(proj);
  }
  String ejbql=""String_Node_Str"" + projectName + ""String_Node_Str"";
  this.setEjbqlString(ejbql);
  this.setReferenceClass(LargeProject.class);
}"
68856,"public void setup(){
  getSession().getIdentityMapAccessor().initializeIdentityMaps();
  Project project=(Project)getSomeProjects().firstElement();
  setArgument(project.getName());
  ReadObjectQuery roq=new ReadObjectQuery();
  roq.setReferenceClass(LargeProject.class);
  ExpressionBuilder eb=new ExpressionBuilder();
  Expression whereClause=eb.get(""String_Node_Str"").equal(getArgument());
  roq.setSelectionCriteria(whereClause);
  Project proj=(Project)getSession().executeQuery(roq);
  setOriginalOject(proj);
  setUpSessionWithNamedQuery();
}","public void setup(){
  getSession().getIdentityMapAccessor().initializeIdentityMaps();
  Project project=null;
  Vector projects=getSomeProjects();
  for (int i=0; i < projects.size(); i++) {
    project=(Project)projects.elementAt(i);
    if (project instanceof LargeProject) {
      break;
    }
  }
  setArgument(project.getName());
  ReadObjectQuery roq=new ReadObjectQuery();
  roq.setReferenceClass(LargeProject.class);
  ExpressionBuilder eb=new ExpressionBuilder();
  Expression whereClause=eb.get(""String_Node_Str"").equal(getArgument());
  roq.setSelectionCriteria(whereClause);
  Project proj=(Project)getSession().executeQuery(roq);
  if (proj == null) {
    setOriginalOject(new Vector(0));
  }
 else {
    setOriginalOject(proj);
  }
  setUpSessionWithNamedQuery();
}"
68857,"public void setup(){
  Vector employees=new Vector();
  Employee emp;
  emp=(Employee)getSomeEmployees().firstElement();
  String firstName=emp.getFirstName();
  String partialFirstName=emp.getFirstName().substring(0,1);
  partialFirstName=partialFirstName + ""String_Node_Str"";
  partialFirstName=partialFirstName + firstName.substring(2,4);
  partialFirstName=partialFirstName + ""String_Node_Str"";
  ReadAllQuery raq=new ReadAllQuery();
  raq.setReferenceClass(Employee.class);
  ExpressionBuilder eb=new ExpressionBuilder();
  Expression whereClause=eb.get(""String_Node_Str"").like(partialFirstName);
  raq.setSelectionCriteria(whereClause);
  employees=(Vector)getSession().executeQuery(raq);
  String ejbqlString=""String_Node_Str"" + partialFirstName + ""String_Node_Str"";
  setEjbqlString(ejbqlString);
  setOriginalOject(employees);
  super.setup();
}","public void setup(){
  Vector employees=new Vector();
  Employee emp;
  emp=(Employee)getSomeEmployees().firstElement();
  String firstName=emp.getFirstName();
  String partialFirstName=emp.getFirstName().substring(0,1);
  partialFirstName=partialFirstName + ""String_Node_Str"";
  partialFirstName=partialFirstName + firstName.substring(2,Math.min(4,firstName.length()));
  partialFirstName=partialFirstName + ""String_Node_Str"";
  ReadAllQuery raq=new ReadAllQuery();
  raq.setReferenceClass(Employee.class);
  ExpressionBuilder eb=new ExpressionBuilder();
  Expression whereClause=eb.get(""String_Node_Str"").like(partialFirstName);
  raq.setSelectionCriteria(whereClause);
  employees=(Vector)getSession().executeQuery(raq);
  String ejbqlString=""String_Node_Str"" + partialFirstName + ""String_Node_Str"";
  setEjbqlString(ejbqlString);
  setOriginalOject(employees);
  super.setup();
}"
68858,"public void testQueryTimeoutReset(Session session){
  boolean query1TimedOut=false;
  boolean query2TimedOut=false;
  String sql;
  if (getSession().getLogin().getDatasourcePlatform().isDB2()) {
    sql=""String_Node_Str"";
  }
 else   if (getSession().getLogin().getDatasourcePlatform().isSybase()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    query.setQueryTimeout(1);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query1TimedOut=true;
    }
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query2TimedOut=true;
    }
  }
  if (query2TimedOut == true) {
    throw new TestErrorException(""String_Node_Str"");
  }
}","public void testQueryTimeoutReset(Session session){
  boolean query1TimedOut=false;
  boolean query2TimedOut=false;
  String sql;
  if (getSession().getLogin().getDatasourcePlatform().isDB2() || getSession().getLogin().getDatasourcePlatform().isMySQL()) {
    sql=""String_Node_Str"";
  }
 else   if (getSession().getLogin().getDatasourcePlatform().isSybase()) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    query.setQueryTimeout(1);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query1TimedOut=true;
    }
  }
  try {
    DataReadQuery query=new DataReadQuery();
    query.setSQLString(sql);
    session.executeQuery(query);
  }
 catch (  Exception e) {
    if (e instanceof DatabaseException) {
      query2TimedOut=true;
    }
  }
  if (query2TimedOut == true) {
    throw new TestErrorException(""String_Node_Str"");
  }
}"
68859,"protected void verify(){
  if (results.isEmpty()) {
    throw new TestErrorException(""String_Node_Str"");
  }
 else {
    ReportQueryResult result=results.firstElement();
    Object value;
    value=result.get(""String_Node_Str"");
    if (value instanceof Integer && !(getSession().getDatasourcePlatform().isDB2())) {
      throw new TestErrorException(""String_Node_Str"");
    }
    if (getSession().getDatasourcePlatform().isOracle()) {
      value=result.get(""String_Node_Str"");
      if (value instanceof Integer) {
        throw new TestErrorException(""String_Node_Str"");
      }
    }
    value=result.get(""String_Node_Str"");
    if (value instanceof Integer) {
      throw new TestErrorException(""String_Node_Str"");
    }
    value=result.get(""String_Node_Str"");
    if (!(value instanceof BigDecimal || (value instanceof Integer && getSession().getDatasourcePlatform().isDB2()))) {
      throw new TestErrorException(""String_Node_Str"");
    }
    value=result.get(""String_Node_Str"");
    if (!(value instanceof BigDecimal || (value instanceof Integer && getSession().getDatasourcePlatform().isDB2()))) {
      throw new TestErrorException(""String_Node_Str"");
    }
    value=result.get(""String_Node_Str"");
    if (!(value instanceof BigDecimal || (value instanceof Integer && getSession().getDatasourcePlatform().isDB2()))) {
      throw new TestErrorException(""String_Node_Str"");
    }
  }
}","protected void verify(){
  if (results.isEmpty()) {
    throw new TestErrorException(""String_Node_Str"");
  }
 else {
    ReportQueryResult result=results.firstElement();
    Object value;
    value=result.get(""String_Node_Str"");
    if (value instanceof Integer && !(getSession().getDatasourcePlatform().isDB2())) {
      throw new TestErrorException(""String_Node_Str"");
    }
    if (getSession().getDatasourcePlatform().isOracle()) {
      value=result.get(""String_Node_Str"");
      if (value instanceof Integer) {
        throw new TestErrorException(""String_Node_Str"");
      }
    }
    value=result.get(""String_Node_Str"");
    if (value instanceof Integer) {
      throw new TestErrorException(""String_Node_Str"");
    }
    value=result.get(""String_Node_Str"");
    if (!(value instanceof BigDecimal || (value instanceof Integer && getSession().getDatasourcePlatform().isDB2()))) {
      throw new TestErrorException(""String_Node_Str"");
    }
    value=result.get(""String_Node_Str"");
    if (!(value instanceof BigDecimal || (value instanceof Integer && getSession().getDatasourcePlatform().isDB2()) || (value instanceof Long && getSession().getDatasourcePlatform().isMySQL()))) {
      throw new TestErrorException(""String_Node_Str"");
    }
    value=result.get(""String_Node_Str"");
    if (!(value instanceof BigDecimal || (value instanceof Integer && getSession().getDatasourcePlatform().isDB2()) || (value instanceof Long && getSession().getDatasourcePlatform().isMySQL()))) {
      throw new TestErrorException(""String_Node_Str"");
    }
  }
}"
68860,"/** 
 * INTERNAL: Called by prepare method only. May be overridden.
 */
protected void prepareInternal(AbstractSession session){
  if (isCursorOutputProcedure()) {
    int nFirstOutParameterIndex=-1;
    boolean hasFoundOutCursor=false;
    for (int index=0; index < parameters.size(); index++) {
      Integer parameterType=(Integer)parameterTypes.elementAt(index);
      if (parameterType == DatasourceCall.OUT_CURSOR) {
        if (hasFoundOutCursor) {
          throw ValidationException.multipleCursorsNotSupported(toString());
        }
 else {
          hasFoundOutCursor=true;
        }
      }
 else       if (parameterType == DatasourceCall.OUT) {
        if (nFirstOutParameterIndex == -1) {
          nFirstOutParameterIndex=index;
        }
      }
 else       if (parameterType == null) {
        throw ValidationException.wrongUsageOfSetCustomArgumentTypeMethod(toString());
      }
    }
    if (!hasFoundOutCursor && (nFirstOutParameterIndex >= 0)) {
      parameterTypes.setElementAt(DatasourceCall.OUT_CURSOR,nFirstOutParameterIndex);
    }
  }
  for (int i=0; i < getParameters().size(); i++) {
    Object parameter=getParameters().elementAt(i);
    Integer parameterType=(Integer)getParameterTypes().elementAt(i);
    if (parameterType == MODIFY) {
      DatabaseField field=(DatabaseField)parameter;
      if ((field.getType() == null) || session.getPlatform().shouldUseCustomModifyForCall(field)) {
        getParameterTypes().setElementAt(CUSTOM_MODIFY,i);
      }
    }
 else     if (parameterType == INOUT) {
      setShouldBuildOutputRow(true);
      setIsCallableStatementRequired(true);
      DatabaseField outField=(DatabaseField)((Object[])parameter)[1];
      if (outField.getType() == null) {
        DatabaseField typeOutField=getFieldWithTypeFromDescriptor(outField);
        if (typeOutField != null) {
          outField=(DatabaseField)typeOutField.clone();
        }
      }
      if (outField.getType() != null) {
        OutputParameterForCallableStatement outParameter=new OutputParameterForCallableStatement(outField,session);
        ((Object[])parameter)[1]=outParameter;
      }
    }
 else     if ((parameterType == OUT) || (parameterType == OUT_CURSOR)) {
      boolean isCursor=parameterType == OUT_CURSOR;
      if (!isCursor) {
        setShouldBuildOutputRow(true);
      }
      setIsCallableStatementRequired(true);
      DatabaseField outField=(DatabaseField)parameter;
      if (outField.getType() == null) {
        DatabaseField typeOutField=getFieldWithTypeFromDescriptor(outField);
        if (typeOutField != null) {
          outField=(DatabaseField)typeOutField.clone();
        }
      }
      OutputParameterForCallableStatement outParameter=new OutputParameterForCallableStatement(outField,session,isCursor);
      getParameters().setElementAt(outParameter,i);
      getParameterTypes().setElementAt(LITERAL,i);
    }
  }
  if (this.returnsResultSet == FalseUndefinedTrue.Undefined) {
    setReturnsResultSet(!isCallableStatementRequired());
  }
}","/** 
 * INTERNAL: Called by prepare method only. May be overridden.
 */
protected void prepareInternal(AbstractSession session){
  prepareInternalParameters(session);
}"
68861,"public void testLoadFromStringSaveDocumentToWriter() throws Exception {
  List types=defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  byte[] bytes=new byte[inputStream.available()];
  inputStream.read(bytes);
  XMLDocument document=xmlHelper.load(new String(bytes));
  verifyAfterLoad(document);
  StringWriter writer=new StringWriter();
  xmlHelper.save(document,writer,null);
  compareXML(getControlWriteFileName(),writer.toString());
}","public void testLoadFromStringSaveDocumentToWriter() throws Exception {
  defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  byte[] bytes=new byte[inputStream.available()];
  inputStream.read(bytes);
  XMLDocument document=xmlHelper.load(new String(bytes));
  verifyAfterLoad(document);
  StringWriter writer=new StringWriter();
  xmlHelper.save(document,writer,null);
  compareXML(getControlWriteFileName(),writer.toString());
}"
68862,"public void testClassGenerationLoadAndSave() throws Exception {
  String tmpDirName=tempFileDir + ""String_Node_Str"";
  File f=new File(tmpDirName);
  f.mkdir();
  f.deleteOnExit();
  generateClasses(tmpDirName);
  setUp();
  compileFiles(tmpDirName,getPackages());
  URL[] urls=new URL[1];
  urls[0]=f.toURL();
  URLClassLoader myURLLoader=new URLClassLoader(urls);
  String package1=(String)getPackages().get(0);
  String className=package1 + ""String_Node_Str"" + getRootInterfaceName();
  className=className.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Class urlLoadedClass=myURLLoader.loadClass(className);
  ((SDOXMLHelper)xmlHelper).getLoader().setDelegateLoader(myURLLoader);
  Class loadedClass2=((SDOXMLHelper)xmlHelper).getLoader().loadClass(className);
  defineTypes();
  assertEquals(urlLoadedClass,loadedClass2);
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  byte[] bytes=new byte[inputStream.available()];
  inputStream.read(bytes);
  XMLDocument document=xmlHelper.load(new String(bytes));
  Class loadedClass=document.getRootObject().getType().getInstanceClass();
  assertEquals(urlLoadedClass,loadedClass);
  verifyAfterLoad(document);
  StringWriter writer=new StringWriter();
  xmlHelper.save(document,writer,null);
  compareXML(getControlWriteFileName(),writer.toString());
}","public void testClassGenerationLoadAndSave() throws Exception {
  String tmpDirName=tempFileDir + ""String_Node_Str"";
  File f=new File(tmpDirName);
  f.mkdir();
  f.deleteOnExit();
  generateClasses(tmpDirName);
  setUp();
  compileFiles(tmpDirName,getPackages());
  URL[] urls=new URL[1];
  urls[0]=f.toURL();
  URLClassLoader myURLLoader=new URLClassLoader(urls);
  String package1=(String)getPackages().get(0);
  String className=package1 + ""String_Node_Str"" + getRootInterfaceName();
  className=className.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Class urlLoadedClass=myURLLoader.loadClass(className);
  ((SDOXMLHelper)xmlHelper).getLoader().setDelegateLoader(myURLLoader);
  Class loadedClass2=((SDOXMLHelper)xmlHelper).getLoader().loadClass(className);
  defineTypes();
  assertEquals(urlLoadedClass,loadedClass2);
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  XMLDocument document=xmlHelper.load(inputStream);
  Class loadedClass=document.getRootObject().getType().getInstanceClass();
  assertEquals(urlLoadedClass,loadedClass);
  verifyAfterLoad(document);
  StringWriter writer=new StringWriter();
  xmlHelper.save(document,writer,null);
  compareXML(getControlWriteFileName(),writer.toString());
}"
68863,"public void testLoadFromAndSaveAfterDefineMultipleSchemas() throws Exception {
  List types=defineTypes();
  xsdHelper.define(getSchema(getUnrelatedSchemaName()));
  FileReader reader=new FileReader(getControlFileName());
  XMLDocument document=xmlHelper.load(reader,null,getOptions());
  verifyAfterLoad(document);
  String s=xmlHelper.save(document.getRootObject(),getControlRootURI(),getControlRootName());
  compareXML(getControlDataObjectFileName(),s);
}","public void testLoadFromAndSaveAfterDefineMultipleSchemas() throws Exception {
  defineTypes();
  xsdHelper.define(getSchema(getUnrelatedSchemaName()));
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  XMLDocument document=xmlHelper.load(inputStream,null,getOptions());
  verifyAfterLoad(document);
  String s=xmlHelper.save(document.getRootObject(),getControlRootURI(),getControlRootName());
  compareXML(getControlDataObjectFileName(),s);
}"
68864,"public void testLoadFromSAXSourceWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  SAXSource source=null;
  List types=defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  source=new SAXSource(new InputSource(inputStream));
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(source,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}","public void testLoadFromSAXSourceWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  SAXSource source=null;
  defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  source=new SAXSource(new InputSource(inputStream));
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(source,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}"
68865,"public void testLoadFromInputStreamWithURIAndOptionsSaveDataObjectToOutputStream() throws Exception {
  List types=defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  XMLDocument document=xmlHelper.load(inputStream,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  xmlHelper.save(document.getRootObject(),getControlRootURI(),getControlRootName(),outstream);
  compareXML(getControlDataObjectFileName(),outstream.toString());
}","public void testLoadFromInputStreamWithURIAndOptionsSaveDataObjectToOutputStream() throws Exception {
  defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  XMLDocument document=xmlHelper.load(inputStream,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  xmlHelper.save(document.getRootObject(),getControlRootURI(),getControlRootName(),outstream);
  compareXML(getControlDataObjectFileName(),outstream.toString());
}"
68866,"public void testLoadFromFileReaderWithURIAndOptionsStreamSaveDataObjectToWriter() throws Exception {
  List types=defineTypes();
  FileReader reader=new FileReader(getControlFileName());
  XMLDocument document=xmlHelper.load(reader,null,getOptions());
  verifyAfterLoad(document);
  String s=xmlHelper.save(document.getRootObject(),getControlRootURI(),getControlRootName());
  compareXML(getControlDataObjectFileName(),s);
}","public void testLoadFromFileReaderWithURIAndOptionsStreamSaveDataObjectToWriter() throws Exception {
  defineTypes();
  FileReader reader=new FileReader(getControlFileName());
  XMLDocument document=xmlHelper.load(reader,null,getOptions());
  verifyAfterLoad(document);
  String s=xmlHelper.save(document.getRootObject(),getControlRootURI(),getControlRootName());
  compareXML(getControlDataObjectFileName(),s);
}"
68867,"public void testLoadFromStreamSourceWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  StreamSource source=null;
  List types=defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  source=new StreamSource(inputStream);
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(source,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}","public void testLoadFromStreamSourceWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  StreamSource source=null;
  defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  source=new StreamSource(inputStream);
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(source,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}"
68868,"public void testLoadFromInputStreamSaveDocumentToOutputStream() throws Exception {
  List types=defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  XMLDocument document=xmlHelper.load(inputStream,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  xmlHelper.save(document,outputStream,null);
  compareXML(getControlWriteFileName(),outputStream.toString());
}","public void testLoadFromInputStreamSaveDocumentToOutputStream() throws Exception {
  defineTypes();
  FileInputStream inputStream=new FileInputStream(getControlFileName());
  XMLDocument document=xmlHelper.load(inputStream,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  xmlHelper.save(document,outputStream,null);
  compareXML(getControlWriteFileName(),outputStream.toString());
}"
68869,"public void testLoadFromInputStreamWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  DocumentBuilderFactory factory;
  DocumentBuilder builder;
  Document document1=null;
  List types=defineTypes();
  factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  factory.setValidating(false);
  builder=factory.newDocumentBuilder();
  document1=builder.parse(new File(getControlFileName()));
  document1.toString();
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(new FileInputStream(getControlFileName()),null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}","public void testLoadFromInputStreamWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  DocumentBuilderFactory factory;
  DocumentBuilder builder;
  Document document1=null;
  defineTypes();
  factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  factory.setValidating(false);
  builder=factory.newDocumentBuilder();
  document1=builder.parse(new File(getControlFileName()));
  document1.toString();
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(new FileInputStream(getControlFileName()),null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}"
68870,"public void testLoadFromDomSourceWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  DocumentBuilderFactory factory;
  DocumentBuilder builder;
  Document document1=null;
  DOMSource source=null;
  List types=defineTypes();
  factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  factory.setValidating(false);
  builder=factory.newDocumentBuilder();
  document1=builder.parse(new File(getControlFileName()));
  source=new DOMSource(document1);
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(source,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}","public void testLoadFromDomSourceWithURIAndOptionsSaveDataObjectToStreamResult() throws Exception {
  DocumentBuilderFactory factory;
  DocumentBuilder builder;
  Document document1=null;
  DOMSource source=null;
  defineTypes();
  factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  factory.setValidating(false);
  builder=factory.newDocumentBuilder();
  document1=builder.parse(new File(getControlFileName()));
  source=new DOMSource(document1);
  XMLDocument document=((SDOXMLHelper)xmlHelper).load(source,null,getOptions());
  verifyAfterLoad(document);
  ByteArrayOutputStream outstream=new ByteArrayOutputStream();
  StreamResult result=new StreamResult(outstream);
  ((SDOXMLHelper)xmlHelper).save(document,result,null);
  compareXML(getControlWriteFileName(),result.getOutputStream().toString());
}"
68871,"/** 
 * OBSOLETE: Replaced by setSessionLog(org.eclipse.persistence.logging.SessionLog);
 * @deprecated
 * @see #setSessionLog(org.eclipse.persistence.logging.SessionLog)
 */
public void setSessionLog(org.eclipse.persistence.sessions.SessionLog sessionLog){
  setSessionLog((org.eclipse.persistence.logging.SessionLog)sessionLog);
}","/** 
 * PUBLIC: Set the session log to which an accessor logs messages and SQL. If not set, this will default to a session log on a writer on System.out. To enable logging, log level can not be OFF. Also set a backpointer to this session in SessionLog.
 * @see #logMessage(String)
 */
public void setSessionLog(SessionLog sessionLog){
  this.sessionLog=sessionLog;
  if ((sessionLog != null) && (sessionLog.getSession() == null)) {
    sessionLog.setSession(this);
  }
}"
68872,"/** 
 * INTERNAL: Obsolete.  Map this tag to the new log levels.
 */
public void process_log_exceptions_Tag(Node node,ObjectHolder sessionHolder){
  try {
    Boolean bool=Boolean.valueOf(node.getFirstChild().getNodeValue());
    ((AbstractSession)sessionHolder.getObject()).getSessionLog().setShouldLogExceptions(bool.booleanValue());
  }
 catch (  Throwable exception) {
    getExceptionStore().add(SessionLoaderException.failedToLoadTag(node.getNodeName(),node.getFirstChild().getNodeValue(),exception));
  }
}","/** 
 * INTERNAL: Obsolete.  Map this tag to the new log levels.
 */
public void process_log_exceptions_Tag(Node node,ObjectHolder sessionHolder){
  try {
    Boolean bool=Boolean.valueOf(node.getFirstChild().getNodeValue());
    if (bool && ((AbstractSession)sessionHolder.getObject()).getSessionLog().getLevel() > SessionLog.WARNING) {
      ((AbstractSession)sessionHolder.getObject()).getSessionLog().setLevel(SessionLog.WARNING);
    }
  }
 catch (  Throwable exception) {
    getExceptionStore().add(SessionLoaderException.failedToLoadTag(node.getNodeName(),node.getFirstChild().getNodeValue(),exception));
  }
}"
68873,"/** 
 * INTERNAL: Obsolete.  Map this tag to the new log levels
 */
public void process_enable_logging_Tag(Node node,ObjectHolder sessionHolder){
  try {
    Boolean bool=Boolean.valueOf(node.getFirstChild().getNodeValue());
    ((AbstractSession)sessionHolder.getObject()).setShouldLogMessages(bool.booleanValue());
  }
 catch (  Exception exception) {
    getExceptionStore().add(SessionLoaderException.failedToLoadTag(node.getNodeName(),node.getFirstChild().getNodeValue(),exception));
  }
}","/** 
 * INTERNAL: Obsolete.  Map this tag to the new log levels
 */
public void process_enable_logging_Tag(Node node,ObjectHolder sessionHolder){
  try {
    Boolean bool=Boolean.valueOf(node.getFirstChild().getNodeValue());
    if (bool.booleanValue() && (((AbstractSession)sessionHolder.getObject()).getSessionLog().getLevel() > SessionLog.FINER)) {
      ((AbstractSession)sessionHolder.getObject()).setLogLevel(SessionLog.FINER);
    }
 else     if (!bool.booleanValue()) {
      ((AbstractSession)sessionHolder.getObject()).setLogLevel(SessionLog.OFF);
    }
  }
 catch (  Exception exception) {
    getExceptionStore().add(SessionLoaderException.failedToLoadTag(node.getNodeName(),node.getFirstChild().getNodeValue(),exception));
  }
}"
68874,"/** 
 * INTERNAL: Obsolete.  Map this tag to the new log levels.
 */
public void process_log_debug_Tag(Node node,ObjectHolder sessionHolder){
  try {
    Boolean bool=Boolean.valueOf(node.getFirstChild().getNodeValue());
    ((AbstractSession)sessionHolder.getObject()).getSessionLog().setShouldLogDebug(bool.booleanValue());
  }
 catch (  Throwable exception) {
    getExceptionStore().add(SessionLoaderException.failedToLoadTag(node.getNodeName(),node.getFirstChild().getNodeValue(),exception));
  }
}","/** 
 * INTERNAL: Obsolete.  Map this tag to the new log levels.
 */
public void process_log_debug_Tag(Node node,ObjectHolder sessionHolder){
  try {
    Boolean bool=Boolean.valueOf(node.getFirstChild().getNodeValue());
    if (bool) {
      ((AbstractSession)sessionHolder.getObject()).getSessionLog().setLevel(SessionLog.FINEST);
    }
  }
 catch (  Throwable exception) {
    getExceptionStore().add(SessionLoaderException.failedToLoadTag(node.getNodeName(),node.getFirstChild().getNodeValue(),exception));
  }
}"
68875,"/** 
 * INTERNAL: Execute this command.  Recreate the remote connection and add it to the connections list.
 */
public void execute(AbstractSession session,RemoteSessionController remoteSessionController){
  AbstractJNDIClusteringService service=(AbstractJNDIClusteringService)session.getCacheSynchronizationManager().getClusteringService();
  session.getCacheSynchronizationManager().getRemoteConnections().put(sessionId,service.createRemoteConnection(sessionId,jndiURL));
  session.logDebug(""String_Node_Str"" + sessionId);
}","/** 
 * INTERNAL: Execute this command.  Recreate the remote connection and add it to the connections list.
 */
public void execute(AbstractSession session,RemoteSessionController remoteSessionController){
  AbstractJNDIClusteringService service=(AbstractJNDIClusteringService)session.getCacheSynchronizationManager().getClusteringService();
  session.getCacheSynchronizationManager().getRemoteConnections().put(sessionId,service.createRemoteConnection(sessionId,jndiURL));
  session.log(SessionLog.FINEST,""String_Node_Str"" + sessionId,(Object[])null,null,false);
}"
68876,"/** 
 * OBSOLETE:
 * @deprecated replaced by log(org.eclipse.persistence.logging.SessionLogEntry)
 */
public void log(org.eclipse.persistence.sessions.SessionLogEntry entry){
  if (!shouldLog(entry.getLevel())) {
    return;
  }
synchronized (this) {
    SessionLogEntry newEntry=new SessionLogEntry(entry.getSession());
    newEntry.setException(entry.getException());
    newEntry.setLevel(entry.getLevel());
    newEntry.setMessage(entry.getMessage());
    newEntry.setDate(entry.getDate());
    newEntry.setConnection(entry.getConnection());
    newEntry.setNameSpace(entry.getNameSpace());
    newEntry.setParameters(entry.getParameters());
    log(newEntry);
  }
}","/** 
 * PUBLIC: <p> Log a SessionLogEntry </p><p>
 * @param entry SessionLogEntry that holds all the information for a TopLink logging event</p>
 */
public abstract void log(SessionLogEntry sessionLogEntry);"
68877,"/** 
 * Return the system default log level. This is based on the System property ""topink.logging.level"", or INFO if not set.
 */
public static int getDefaultLoggingLevel(){
  String logLevel=System.getProperty(PersistenceUnitProperties.LOGGING_LEVEL);
  return translateStringToLoggingLevel(logLevel);
}","/** 
 * Return the system default log level. This is based on the System property ""eclipselink.logging.level"", or INFO if not set.
 */
public static int getDefaultLoggingLevel(){
  String logLevel=System.getProperty(PersistenceUnitProperties.LOGGING_LEVEL);
  return translateStringToLoggingLevel(logLevel);
}"
68878,"/** 
 * Called by the container when an EntityManagerFactory is to be created.
 * @param info Metadata for use by the persistence provider
 * @return EntityManagerFactory for the persistence unitspecified by the metadata
 * @param map A Map of integration-level properties for useby the persistence provider.
 */
public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info,Map properties){
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  EntityManagerSetupImpl emSetupImpl=null;
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
    String urlAndName=info.getPersistenceUnitRootUrl() + info.getPersistenceUnitName();
    emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(urlAndName);
    if (emSetupImpl == null) {
      emSetupImpl=new EntityManagerSetupImpl();
      emSetupImpl.setIsInContainerMode(true);
      EntityManagerFactoryProvider.addEntityManagerSetupImpl(urlAndName,emSetupImpl);
    }
  }
  ClassTransformer transformer=null;
  if (!emSetupImpl.isDeployed()) {
    transformer=emSetupImpl.predeploy(info,nonNullProperties);
  }
  if (transformer != null) {
    info.addTransformer(transformer);
  }
  EntityManagerFactoryImpl factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
  if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
    factory.getServerSession();
  }
  return factory;
}","/** 
 * Called by the container when an EntityManagerFactory is to be created.
 * @param info Metadata for use by the persistence provider
 * @return EntityManagerFactory for the persistence unitspecified by the metadata
 * @param map A Map of integration-level properties for useby the persistence provider.
 */
public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info,Map properties){
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  EntityManagerSetupImpl emSetupImpl=null;
  boolean isNew=false;
  ClassTransformer transformer=null;
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
    String urlAndName=info.getPersistenceUnitRootUrl() + info.getPersistenceUnitName();
    emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(urlAndName);
    if (emSetupImpl == null) {
      emSetupImpl=new EntityManagerSetupImpl();
      isNew=true;
      emSetupImpl.setIsInContainerMode(true);
      transformer=emSetupImpl.predeploy(info,nonNullProperties);
      EntityManagerFactoryProvider.addEntityManagerSetupImpl(urlAndName,emSetupImpl);
    }
  }
  if (!isNew && !emSetupImpl.isDeployed()) {
    transformer=emSetupImpl.predeploy(info,nonNullProperties);
  }
  if (transformer != null) {
    info.addTransformer(transformer);
  }
  EntityManagerFactoryImpl factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
  if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
    factory.getServerSession();
  }
  return factory;
}"
68879,"public void testDiscoverNewReferencedObject(){
}","public void testDiscoverNewReferencedObject(){
  String firstName=""String_Node_Str"";
  EntityManager em=createEntityManager();
  int employeeId=0;
  em.getTransaction().begin();
  try {
    Employee employee=new Employee();
    employee.setFirstName(firstName);
    employee.setLastName(""String_Node_Str"");
    em.persist(employee);
    em.getTransaction().commit();
    employeeId=employee.getId();
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
  }
  em=createEntityManager();
  int managerId=0;
  em.getTransaction().begin();
  try {
    Employee manager=new Employee();
    manager.setFirstName(firstName);
    manager.setLastName(""String_Node_Str"");
    PhoneNumber phoneNumber1=new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    manager.addPhoneNumber(phoneNumber1);
    PhoneNumber phoneNumber2=new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    manager.addPhoneNumber(phoneNumber2);
    Employee employee=(Employee)em.find(Employee.class,employeeId);
    manager.addManagedEmployee(employee);
    em.getTransaction().commit();
    managerId=manager.getId();
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
  }
  String errorMsg=""String_Node_Str"";
  em=createEntityManager();
  try {
    Employee manager=(Employee)em.createQuery(""String_Node_Str"" + managerId).setHint(""String_Node_Str"",""String_Node_Str"").getSingleResult();
    if (manager == null) {
      errorMsg=""String_Node_Str"";
    }
 else {
      if (manager.getPhoneNumbers().size() != 2) {
        errorMsg=""String_Node_Str"" + manager.getPhoneNumbers().size() + ""String_Node_Str"";
      }
    }
  }
  finally {
    em.close();
  }
  em=createEntityManager();
  em.getTransaction().begin();
  try {
    if (managerId != 0) {
      Employee manager=(Employee)em.find(Employee.class,managerId);
      em.remove(manager);
    }
 else     if (employeeId != 0) {
      Employee employee=(Employee)em.find(Employee.class,employeeId);
      em.remove(employee);
    }
  }
  finally {
    if (em.getTransaction().isActive()) {
      em.getTransaction().rollback();
    }
    em.close();
  }
  if (errorMsg.length() > 0) {
    fail(errorMsg);
  }
}"
68880,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession(persistenceUnitName);
      JPAPropertiesRelationshipTableManager tm=new JPAPropertiesRelationshipTableManager();
      tm.replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  suite.addTest(new JPAAdvPropertiesJUnitTestCase(""String_Node_Str""));
  return new TestSetup(suite){
    protected void setUp(){
      DatabaseSession session=JUnitTestCase.getServerSession(persistenceUnitName);
      JPAPropertiesRelationshipTableManager tm=new JPAPropertiesRelationshipTableManager();
      tm.replaceTables(session);
    }
    protected void tearDown(){
      clearCache();
    }
  }
;
}"
68881,"/** 
 * Make any changes to our ServerSession that can be made after it is created.
 */
protected void updateServerSession(Map m,ClassLoader loader){
  if (session == null || session.isConnected()) {
    return;
  }
  boolean serverPlatformChanged=updateServerPlatform(m,loader);
  boolean sessionNameChanged=updateSessionName(m);
  updateLoggers(m,serverPlatformChanged,sessionNameChanged,loader);
  String shouldBindString=getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.JDBC_BIND_PARAMETERS,m,session);
  if (shouldBindString != null) {
    session.getPlatform().setShouldBindAllParameters(Boolean.parseBoolean(shouldBindString));
  }
  updateLogins(m);
  if (!session.getLogin().shouldUseExternalTransactionController()) {
    session.getServerPlatform().disableJTA();
  }
  setSessionEventListener(loader);
  setExceptionHandler(loader);
  updatePools(m);
  if (!isSessionLoadedFromSessionsXML) {
    updateDescriptorCacheSettings(m,loader);
  }
  updateBatchWritingSetting(m);
  updateNativeSQLSetting();
  updateCacheStatementSettings();
  updateTemporalMutableSetting();
  processDescriptorCustomizers(m,loader);
  processSessionCustomizer(m,loader);
  setDescriptorNamedQueries();
}","/** 
 * Make any changes to our ServerSession that can be made after it is created.
 */
protected void updateServerSession(Map m,ClassLoader loader){
  if (session == null || session.isConnected()) {
    return;
  }
  boolean serverPlatformChanged=updateServerPlatform(m,loader);
  boolean sessionNameChanged=updateSessionName(m);
  updateLoggers(m,serverPlatformChanged,sessionNameChanged,loader);
  updateProfiler(m,loader);
  String shouldBindString=getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.JDBC_BIND_PARAMETERS,m,session);
  if (shouldBindString != null) {
    session.getPlatform().setShouldBindAllParameters(Boolean.parseBoolean(shouldBindString));
  }
  updateLogins(m);
  if (!session.getLogin().shouldUseExternalTransactionController()) {
    session.getServerPlatform().disableJTA();
  }
  setSessionEventListener(loader);
  setExceptionHandler(loader);
  updatePools(m);
  if (!isSessionLoadedFromSessionsXML) {
    updateDescriptorCacheSettings(m,loader);
  }
  updateBatchWritingSetting(m);
  updateNativeSQLSetting();
  updateCacheStatementSettings();
  updateTemporalMutableSetting();
  processDescriptorCustomizers(m,loader);
  processSessionCustomizer(m,loader);
  setDescriptorNamedQueries();
}"
68882,"/** 
 * Perform any steps necessary prior to actual deployment.  This includes any steps in the session creation that do not require the real loaded domain classes. The first call to this method caches persistenceUnitInfo which is reused in the following calls. Note that in JSE case factoryCount is NOT incremented on the very first call  (by JavaSECMPInitializer.callPredeploy, typically in preMain). That provides 1 to 1 correspondence between factoryCount and the number of open factories. In case factoryCount > 0 the method just increments factoryCount. factory == 0 triggers creation of a new session. This method and undeploy - the only methods altering factoryCount - should be synchronized.
 * @return A transformer (which may be null) that should be plugged into the properclassloader to allow classes to be transformed as they get loaded.
 * @see #deploy(ClassLoader,Map)
 */
public synchronized ClassTransformer predeploy(PersistenceUnitInfo info,Map extendedProperties){
  if (state == STATE_DEPLOY_FAILED) {
    throw new PersistenceException(EntityManagerSetupException.cannotPredeploy(persistenceUnitInfo.getPersistenceUnitName(),state));
  }
  if (state == STATE_PREDEPLOYED || state == STATE_DEPLOYED) {
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    factoryCount++;
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    return null;
  }
 else   if (state == STATE_INITIAL || state == STATE_UNDEPLOYED) {
    persistenceUnitInfo=info;
  }
  try {
    ClassLoader privateClassLoader=persistenceUnitInfo.getNewTempClassLoader();
    predeployProperties=mergeMaps(extendedProperties,persistenceUnitInfo.getProperties());
    translateOldProperties(predeployProperties,null);
    String sessionsXMLStr=(String)predeployProperties.get(PersistenceUnitProperties.SESSIONS_XML);
    String sessionNameStr=(String)predeployProperties.get(PersistenceUnitProperties.SESSION_NAME);
    if (sessionsXMLStr != null) {
      isSessionLoadedFromSessionsXML=true;
    }
    session=new ServerSession(new Project(new DatabaseLogin()));
    setServerSessionName(predeployProperties);
    ClassLoader realClassLoader=persistenceUnitInfo.getClassLoader();
    updateServerPlatform(predeployProperties,realClassLoader);
    updateLoggers(predeployProperties,true,false,realClassLoader);
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    if (isSessionLoadedFromSessionsXML) {
      session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",sessionsXMLStr,sessionNameStr);
      if (sessionNameStr == null) {
        throw new PersistenceException(EntityManagerSetupException.sessionNameNeedBeSpecified(info.getPersistenceUnitName(),sessionsXMLStr));
      }
      XMLSessionConfigLoader xmlLoader=new XMLSessionConfigLoader(sessionsXMLStr);
      Session tempSession=new SessionManager().getSession(xmlLoader,sessionNameStr,privateClassLoader,false,false);
      session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",xmlLoader.getSessionName(),xmlLoader.getResourcePath());
      if (tempSession == null) {
        throw new PersistenceException(ValidationException.noSessionFound(sessionNameStr,sessionsXMLStr));
      }
      if (tempSession.isServerSession()) {
        session=(ServerSession)tempSession;
      }
 else {
        throw new PersistenceException(EntityManagerSetupException.sessionLoadedFromSessionsXMLMustBeServerSession(info.getPersistenceUnitName(),(String)predeployProperties.get(PersistenceUnitProperties.SESSIONS_XML),tempSession));
      }
      setServerSessionName(predeployProperties);
      updateServerPlatform(predeployProperties,privateClassLoader);
      updateLoggers(predeployProperties,true,false,privateClassLoader);
    }
    warnOldProperties(predeployProperties,session);
    session.getPlatform().setConversionManager(new JPAConversionManager());
    PersistenceUnitTransactionType transactionType=null;
    String transTypeString=getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.TRANSACTION_TYPE,predeployProperties,session);
    if (transTypeString != null) {
      transactionType=PersistenceUnitTransactionType.valueOf(transTypeString);
    }
 else     if (persistenceUnitInfo != null) {
      transactionType=persistenceUnitInfo.getTransactionType();
    }
    if (!isValidationOnly(predeployProperties,false) && persistenceUnitInfo != null && persistenceUnitInfo.getTransactionType() == PersistenceUnitTransactionType.JTA) {
      if (predeployProperties.get(PersistenceUnitProperties.JTA_DATASOURCE) == null && persistenceUnitInfo.getJtaDataSource() == null) {
        throw new PersistenceException(EntityManagerSetupException.jtaPersistenceUnitInfoMissingJtaDataSource(persistenceUnitInfo.getPersistenceUnitName()));
      }
    }
    if (state == STATE_INITIAL || state == STATE_UNDEPLOYED) {
      enableWeaving=true;
      isWeavingStatic=false;
      String weaving=getConfigPropertyAsString(PersistenceUnitProperties.WEAVING);
      if (weaving != null && weaving.equalsIgnoreCase(""String_Node_Str"")) {
        enableWeaving=false;
      }
 else       if (weaving != null && weaving.equalsIgnoreCase(""String_Node_Str"")) {
        isWeavingStatic=true;
      }
    }
    boolean throwExceptionOnFail=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.TOPLINK_ORM_THROW_EXCEPTIONS,predeployProperties,""String_Node_Str"",session));
    ClassTransformer transformer=null;
    if (!isSessionLoadedFromSessionsXML) {
      processor=new MetadataProcessor(persistenceUnitInfo,session,privateClassLoader,enableWeaving);
      PersistenceUnitProcessor.processORMetadata(processor,privateClassLoader,session,throwExceptionOnFail);
      session.getProject().getLogin().setConnector(new DefaultConnector());
      if (session.getIntegrityChecker().hasErrors()) {
        session.handleException(new IntegrityException(session.getIntegrityChecker()));
      }
      if (enableWeaving) {
        boolean weaveChangeTracking=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_CHANGE_TRACKING,predeployProperties,""String_Node_Str"",session));
        boolean weaveLazy=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_LAZY,predeployProperties,""String_Node_Str"",session));
        boolean weaveFetchGroups=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_FETCHGROUPS,predeployProperties,""String_Node_Str"",session));
        Collection entities=PersistenceUnitProcessor.buildEntityList(processor,privateClassLoader);
        transformer=TransformerFactory.createTransformerAndModifyProject(session,entities,privateClassLoader,weaveLazy,weaveChangeTracking,weaveFetchGroups);
      }
    }
 else {
      if (enableWeaving) {
        boolean weaveChangeTracking=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_CHANGE_TRACKING,predeployProperties,""String_Node_Str"",session));
        boolean weaveLazy=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_LAZY,predeployProperties,""String_Node_Str"",session));
        boolean weaveFetchGroups=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_FETCHGROUPS,predeployProperties,""String_Node_Str"",session));
        Collection persistenceClasses=new ArrayList(session.getProject().getDescriptors().keySet());
        transformer=TransformerFactory.createTransformerAndModifyProject(session,persistenceClasses,privateClassLoader,weaveLazy,weaveChangeTracking,weaveFetchGroups);
      }
    }
    if (state != STATE_INITIAL || this.isInContainerMode()) {
      factoryCount++;
    }
    state=STATE_PREDEPLOYED;
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    if (isWeavingStatic) {
      return null;
    }
 else {
      return transformer;
    }
  }
 catch (  RuntimeException ex) {
    state=STATE_PREDEPLOY_FAILED;
    session=null;
    throw new PersistenceException(EntityManagerSetupException.predeployFailed(persistenceUnitInfo.getPersistenceUnitName(),ex));
  }
}","/** 
 * Perform any steps necessary prior to actual deployment.  This includes any steps in the session creation that do not require the real loaded domain classes. The first call to this method caches persistenceUnitInfo which is reused in the following calls. Note that in JSE case factoryCount is NOT incremented on the very first call  (by JavaSECMPInitializer.callPredeploy, typically in preMain). That provides 1 to 1 correspondence between factoryCount and the number of open factories. In case factoryCount > 0 the method just increments factoryCount. factory == 0 triggers creation of a new session. This method and undeploy - the only methods altering factoryCount - should be synchronized.
 * @return A transformer (which may be null) that should be plugged into the properclassloader to allow classes to be transformed as they get loaded.
 * @see #deploy(ClassLoader,Map)
 */
public synchronized ClassTransformer predeploy(PersistenceUnitInfo info,Map extendedProperties){
  if (state == STATE_DEPLOY_FAILED) {
    throw new PersistenceException(EntityManagerSetupException.cannotPredeploy(persistenceUnitInfo.getPersistenceUnitName(),state));
  }
  if (state == STATE_PREDEPLOYED || state == STATE_DEPLOYED) {
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    factoryCount++;
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    return null;
  }
 else   if (state == STATE_INITIAL || state == STATE_UNDEPLOYED) {
    persistenceUnitInfo=info;
  }
  try {
    ClassLoader privateClassLoader=persistenceUnitInfo.getNewTempClassLoader();
    predeployProperties=mergeMaps(extendedProperties,persistenceUnitInfo.getProperties());
    translateOldProperties(predeployProperties,null);
    String sessionsXMLStr=(String)predeployProperties.get(PersistenceUnitProperties.SESSIONS_XML);
    String sessionNameStr=(String)predeployProperties.get(PersistenceUnitProperties.SESSION_NAME);
    if (sessionsXMLStr != null) {
      isSessionLoadedFromSessionsXML=true;
    }
    session=new ServerSession(new Project(new DatabaseLogin()));
    setServerSessionName(predeployProperties);
    ClassLoader realClassLoader=persistenceUnitInfo.getClassLoader();
    updateServerPlatform(predeployProperties,realClassLoader);
    updateLoggers(predeployProperties,true,false,realClassLoader);
    updateProfiler(predeployProperties,realClassLoader);
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    if (isSessionLoadedFromSessionsXML) {
      session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",sessionsXMLStr,sessionNameStr);
      if (sessionNameStr == null) {
        throw new PersistenceException(EntityManagerSetupException.sessionNameNeedBeSpecified(info.getPersistenceUnitName(),sessionsXMLStr));
      }
      XMLSessionConfigLoader xmlLoader=new XMLSessionConfigLoader(sessionsXMLStr);
      Session tempSession=new SessionManager().getSession(xmlLoader,sessionNameStr,privateClassLoader,false,false);
      session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",xmlLoader.getSessionName(),xmlLoader.getResourcePath());
      if (tempSession == null) {
        throw new PersistenceException(ValidationException.noSessionFound(sessionNameStr,sessionsXMLStr));
      }
      if (tempSession.isServerSession()) {
        session=(ServerSession)tempSession;
      }
 else {
        throw new PersistenceException(EntityManagerSetupException.sessionLoadedFromSessionsXMLMustBeServerSession(info.getPersistenceUnitName(),(String)predeployProperties.get(PersistenceUnitProperties.SESSIONS_XML),tempSession));
      }
      setServerSessionName(predeployProperties);
      updateServerPlatform(predeployProperties,privateClassLoader);
      updateLoggers(predeployProperties,true,false,privateClassLoader);
    }
    warnOldProperties(predeployProperties,session);
    session.getPlatform().setConversionManager(new JPAConversionManager());
    PersistenceUnitTransactionType transactionType=null;
    String transTypeString=getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.TRANSACTION_TYPE,predeployProperties,session);
    if (transTypeString != null) {
      transactionType=PersistenceUnitTransactionType.valueOf(transTypeString);
    }
 else     if (persistenceUnitInfo != null) {
      transactionType=persistenceUnitInfo.getTransactionType();
    }
    if (!isValidationOnly(predeployProperties,false) && persistenceUnitInfo != null && persistenceUnitInfo.getTransactionType() == PersistenceUnitTransactionType.JTA) {
      if (predeployProperties.get(PersistenceUnitProperties.JTA_DATASOURCE) == null && persistenceUnitInfo.getJtaDataSource() == null) {
        throw new PersistenceException(EntityManagerSetupException.jtaPersistenceUnitInfoMissingJtaDataSource(persistenceUnitInfo.getPersistenceUnitName()));
      }
    }
    if (state == STATE_INITIAL || state == STATE_UNDEPLOYED) {
      enableWeaving=true;
      isWeavingStatic=false;
      String weaving=getConfigPropertyAsString(PersistenceUnitProperties.WEAVING);
      if (weaving != null && weaving.equalsIgnoreCase(""String_Node_Str"")) {
        enableWeaving=false;
      }
 else       if (weaving != null && weaving.equalsIgnoreCase(""String_Node_Str"")) {
        isWeavingStatic=true;
      }
    }
    boolean throwExceptionOnFail=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.TOPLINK_ORM_THROW_EXCEPTIONS,predeployProperties,""String_Node_Str"",session));
    ClassTransformer transformer=null;
    if (!isSessionLoadedFromSessionsXML) {
      processor=new MetadataProcessor(persistenceUnitInfo,session,privateClassLoader,enableWeaving);
      PersistenceUnitProcessor.processORMetadata(processor,privateClassLoader,session,throwExceptionOnFail);
      session.getProject().getLogin().setConnector(new DefaultConnector());
      if (session.getIntegrityChecker().hasErrors()) {
        session.handleException(new IntegrityException(session.getIntegrityChecker()));
      }
      if (enableWeaving) {
        boolean weaveChangeTracking=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_CHANGE_TRACKING,predeployProperties,""String_Node_Str"",session));
        boolean weaveLazy=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_LAZY,predeployProperties,""String_Node_Str"",session));
        boolean weaveFetchGroups=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_FETCHGROUPS,predeployProperties,""String_Node_Str"",session));
        Collection entities=PersistenceUnitProcessor.buildEntityList(processor,privateClassLoader);
        transformer=TransformerFactory.createTransformerAndModifyProject(session,entities,privateClassLoader,weaveLazy,weaveChangeTracking,weaveFetchGroups);
      }
    }
 else {
      if (enableWeaving) {
        boolean weaveChangeTracking=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_CHANGE_TRACKING,predeployProperties,""String_Node_Str"",session));
        boolean weaveLazy=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_LAZY,predeployProperties,""String_Node_Str"",session));
        boolean weaveFetchGroups=""String_Node_Str"".equalsIgnoreCase(EntityManagerFactoryProvider.getConfigPropertyAsStringLogDebug(PersistenceUnitProperties.WEAVING_FETCHGROUPS,predeployProperties,""String_Node_Str"",session));
        Collection persistenceClasses=new ArrayList(session.getProject().getDescriptors().keySet());
        transformer=TransformerFactory.createTransformerAndModifyProject(session,persistenceClasses,privateClassLoader,weaveLazy,weaveChangeTracking,weaveFetchGroups);
      }
    }
    if (state != STATE_INITIAL || this.isInContainerMode()) {
      factoryCount++;
    }
    state=STATE_PREDEPLOYED;
    session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),state,factoryCount});
    if (isWeavingStatic) {
      return null;
    }
 else {
      return transformer;
    }
  }
 catch (  RuntimeException ex) {
    state=STATE_PREDEPLOY_FAILED;
    session=null;
    throw new PersistenceException(EntityManagerSetupException.predeployFailed(persistenceUnitInfo.getPersistenceUnitName(),ex));
  }
}"
68883,"/** 
 * Build and return a new instance, using the factory. The factory can be null, in which case the method is a static method defined by the descriptor class.
 */
protected Object buildNewInstanceUsingFactory() throws DescriptorException {
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        return AccessController.doPrivileged(new PrivilegedMethodInvoker(this.getMethod(),this.getFactory(),new Object[0]));
      }
 catch (      PrivilegedActionException exception) {
        Exception throwableException=exception.getException();
        if (throwableException instanceof IllegalAccessException) {
          throw DescriptorException.illegalAccessWhileMethodInstantiation(this.getMethod().toString(),this.getDescriptor(),throwableException);
        }
 else {
          throw DescriptorException.targetInvocationWhileMethodInstantiation(this.getMethod().toString(),this.getDescriptor(),throwableException);
        }
      }
    }
 else {
      return PrivilegedAccessHelper.invokeMethod(this.getMethod(),this.getFactory(),new Object[0]);
    }
  }
 catch (  IllegalAccessException exception) {
    throw DescriptorException.illegalAccessWhileMethodInstantiation(this.getMethod().toString(),this.getDescriptor(),exception);
  }
catch (  InvocationTargetException exception) {
    throw DescriptorException.targetInvocationWhileMethodInstantiation(this.getMethod().toString(),this.getDescriptor(),exception);
  }
catch (  NullPointerException exception) {
    throw DescriptorException.nullPointerWhileMethodInstantiation(this.getMethod().toString(),this.getDescriptor(),exception);
  }
}","/** 
 * Build and return a new instance, using the factory. The factory can be null, in which case the method is a static method defined by the descriptor class.
 */
protected Object buildNewInstanceUsingFactory() throws DescriptorException {
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        return AccessController.doPrivileged(new PrivilegedMethodInvoker(getMethod(),getFactory(),new Object[0]));
      }
 catch (      PrivilegedActionException exception) {
        Exception throwableException=exception.getException();
        if (throwableException instanceof IllegalAccessException) {
          throw DescriptorException.illegalAccessWhileMethodInstantiation(getMethod().toString(),this.getDescriptor(),throwableException);
        }
 else {
          throw DescriptorException.targetInvocationWhileMethodInstantiation(getMethod().toString(),this.getDescriptor(),throwableException);
        }
      }
    }
 else {
      return PrivilegedAccessHelper.invokeMethod(getMethod(),getFactory(),new Object[0]);
    }
  }
 catch (  IllegalAccessException exception) {
    throw DescriptorException.illegalAccessWhileMethodInstantiation(getMethod().toString(),this.getDescriptor(),exception);
  }
catch (  InvocationTargetException exception) {
    throw DescriptorException.targetInvocationWhileMethodInstantiation(getMethod().toString(),this.getDescriptor(),exception);
  }
catch (  NullPointerException exception) {
    throw DescriptorException.nullPointerWhileMethodInstantiation(this.getMethod().toString(),this.getDescriptor(),exception);
  }
}"
68884,"/** 
 * Build and return a new instance, using the default (zero-argument) constructor.
 */
protected Object buildNewInstanceUsingDefaultConstructor() throws DescriptorException {
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        return AccessController.doPrivileged(new PrivilegedInvokeConstructor(this.getDefaultConstructor(),(Object[])null));
      }
 catch (      PrivilegedActionException exception) {
        Exception throwableException=exception.getException();
        if (throwableException instanceof InvocationTargetException) {
          throw DescriptorException.targetInvocationWhileConstructorInstantiationOfFactory(this.getDescriptor(),throwableException);
        }
 else         if (throwableException instanceof IllegalAccessException) {
          throw DescriptorException.illegalAccessWhileConstructorInstantiationOfFactory(this.getDescriptor(),throwableException);
        }
 else {
          throw DescriptorException.instantiationWhileConstructorInstantiationOfFactory(this.getDescriptor(),throwableException);
        }
      }
    }
 else {
      if (this.defaultConstructor == null) {
        getDefaultConstructor();
      }
      return this.defaultConstructor.newInstance((Object[])null);
    }
  }
 catch (  InvocationTargetException exception) {
    throw DescriptorException.targetInvocationWhileConstructorInstantiation(this.getDescriptor(),exception);
  }
catch (  IllegalAccessException exception) {
    throw DescriptorException.illegalAccessWhileConstructorInstantiation(this.getDescriptor(),exception);
  }
catch (  InstantiationException exception) {
    throw DescriptorException.instantiationWhileConstructorInstantiation(this.getDescriptor(),exception);
  }
catch (  NoSuchMethodError exception) {
    throw DescriptorException.noSuchMethodWhileConstructorInstantiation(this.getDescriptor(),exception);
  }
catch (  NullPointerException exception) {
    throw DescriptorException.nullPointerWhileConstructorInstantiation(this.getDescriptor(),exception);
  }
}","/** 
 * Build and return a new instance, using the default (zero-argument) constructor.
 */
protected Object buildNewInstanceUsingDefaultConstructor() throws DescriptorException {
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        return AccessController.doPrivileged(new PrivilegedInvokeConstructor(getDefaultConstructor(),(Object[])null));
      }
 catch (      PrivilegedActionException exception) {
        Exception throwableException=exception.getException();
        if (throwableException instanceof InvocationTargetException) {
          throw DescriptorException.targetInvocationWhileConstructorInstantiation(getDescriptor(),throwableException);
        }
 else         if (throwableException instanceof IllegalAccessException) {
          throw DescriptorException.illegalAccessWhileConstructorInstantiation(getDescriptor(),throwableException);
        }
 else {
          throw DescriptorException.instantiationWhileConstructorInstantiation(getDescriptor(),throwableException);
        }
      }
    }
 else {
      if (this.defaultConstructor == null) {
        getDefaultConstructor();
      }
      return this.defaultConstructor.newInstance((Object[])null);
    }
  }
 catch (  InvocationTargetException exception) {
    throw DescriptorException.targetInvocationWhileConstructorInstantiation(getDescriptor(),exception);
  }
catch (  IllegalAccessException exception) {
    throw DescriptorException.illegalAccessWhileConstructorInstantiation(getDescriptor(),exception);
  }
catch (  InstantiationException exception) {
    throw DescriptorException.instantiationWhileConstructorInstantiation(getDescriptor(),exception);
  }
catch (  NoSuchMethodError exception) {
    throw DescriptorException.noSuchMethodWhileConstructorInstantiation(getDescriptor(),exception);
  }
catch (  NullPointerException exception) {
    throw DescriptorException.nullPointerWhileConstructorInstantiation(getDescriptor(),exception);
  }
}"
68885,"/** 
 * Build and return the factory, using its default constructor.
 */
protected Object buildFactoryUsingDefaultConstructor() throws DescriptorException {
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        return AccessController.doPrivileged(new PrivilegedInvokeConstructor(this.buildFactoryDefaultConstructor(),(Object[])null));
      }
 catch (      PrivilegedActionException exception) {
        Exception throwableException=exception.getException();
        if (throwableException instanceof InvocationTargetException) {
          throw DescriptorException.targetInvocationWhileConstructorInstantiationOfFactory(this.getDescriptor(),throwableException);
        }
 else         if (throwableException instanceof IllegalAccessException) {
          throw DescriptorException.illegalAccessWhileConstructorInstantiationOfFactory(this.getDescriptor(),throwableException);
        }
 else {
          throw DescriptorException.instantiationWhileConstructorInstantiationOfFactory(this.getDescriptor(),throwableException);
        }
      }
    }
 else {
      return PrivilegedAccessHelper.invokeConstructor(this.buildFactoryDefaultConstructor(),(Object[])null);
    }
  }
 catch (  InvocationTargetException exception) {
    throw DescriptorException.targetInvocationWhileConstructorInstantiationOfFactory(this.getDescriptor(),exception);
  }
catch (  IllegalAccessException exception) {
    throw DescriptorException.illegalAccessWhileConstructorInstantiationOfFactory(this.getDescriptor(),exception);
  }
catch (  InstantiationException exception) {
    throw DescriptorException.instantiationWhileConstructorInstantiationOfFactory(this.getDescriptor(),exception);
  }
catch (  NoSuchMethodError exception) {
    throw DescriptorException.noSuchMethodWhileConstructorInstantiationOfFactory(this.getDescriptor(),exception);
  }
catch (  NullPointerException exception) {
    throw DescriptorException.nullPointerWhileConstructorInstantiationOfFactory(this.getDescriptor(),exception);
  }
}","/** 
 * Build and return the factory, using its default constructor.
 */
protected Object buildFactoryUsingDefaultConstructor() throws DescriptorException {
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        return AccessController.doPrivileged(new PrivilegedInvokeConstructor(buildFactoryDefaultConstructor(),(Object[])null));
      }
 catch (      PrivilegedActionException exception) {
        Exception throwableException=exception.getException();
        if (throwableException instanceof InvocationTargetException) {
          throw DescriptorException.targetInvocationWhileConstructorInstantiationOfFactory(getDescriptor(),throwableException);
        }
 else         if (throwableException instanceof IllegalAccessException) {
          throw DescriptorException.illegalAccessWhileConstructorInstantiationOfFactory(getDescriptor(),throwableException);
        }
 else {
          throw DescriptorException.instantiationWhileConstructorInstantiationOfFactory(getDescriptor(),throwableException);
        }
      }
    }
 else {
      return PrivilegedAccessHelper.invokeConstructor(buildFactoryDefaultConstructor(),(Object[])null);
    }
  }
 catch (  InvocationTargetException exception) {
    throw DescriptorException.targetInvocationWhileConstructorInstantiationOfFactory(getDescriptor(),exception);
  }
catch (  IllegalAccessException exception) {
    throw DescriptorException.illegalAccessWhileConstructorInstantiationOfFactory(getDescriptor(),exception);
  }
catch (  InstantiationException exception) {
    throw DescriptorException.instantiationWhileConstructorInstantiationOfFactory(getDescriptor(),exception);
  }
catch (  NoSuchMethodError exception) {
    throw DescriptorException.noSuchMethodWhileConstructorInstantiationOfFactory(getDescriptor(),exception);
  }
catch (  NullPointerException exception) {
    throw DescriptorException.nullPointerWhileConstructorInstantiationOfFactory(getDescriptor(),exception);
  }
}"
68886,"public void setId(Integer id){
  this.id=id;
}","public void setId(String id){
  this.id=id;
}"
68887,"public Integer getId(){
  return id;
}","public String getId(){
  return id;
}"
68888,"@Override public void close(){
  _scope.promote_forward_del_locals(_gvn,_par._par == null ? null : _par._scope);
  if (_scope.is_dead())   return;
  if (_par._par == null) {
    CallNode.reset_to_init0();
    FunNode.reset_to_init0();
    _gvn.reset_to_init0();
    return;
  }
  while (_scope._uses._len > 0) {
    Node use=_scope._uses.at(0);
    int idx=use._defs.find(_scope);
    use.set_def(idx,_par._scope,_gvn);
  }
  _gvn.kill0(_scope);
}","@Override public void close(){
  _scope.promote_forward_del_locals(_gvn,_par._par == null ? null : _par._scope);
  if (_scope.is_dead())   return;
  if (_par._par == null) {
    CallNode.reset_to_init0();
    FunNode.reset_to_init0();
    _gvn.reset_to_init0();
    return;
  }
  while (_scope._uses._len > 0) {
    Node use=_scope._uses.at(0);
    int idx=use._defs.find(_scope);
    _gvn.set_def_reg(use,idx,_par._scope);
  }
  _gvn.kill0(_scope);
}"
68889,"/** 
 * Parse a list of statements; final semi-colon is optional. stmts= stmt [; stmt]*[;]? 
 */
private Node stmts(){
  Node stmt=stmt(), last=null;
  while (stmt != null) {
    if (!peek(';'))     return stmt;
    last=stmt;
    stmt=stmt();
    if (stmt != null && last != null)     kill(last);
  }
  return last;
}","/** 
 * Parse a list of statements; final semi-colon is optional. stmts= stmt [; stmt]*[;]? 
 */
private Node stmts(){
  Node stmt=stmt(), last=null;
  while (stmt != null) {
    if (!peek(';'))     return stmt;
    last=stmt;
    stmt=stmt();
    if (stmt != null)     kill(last);
  }
  return last;
}"
68890,"/** 
 * Parse an anonymous function; the opening '{' already parsed.  After the '{' comes an optional list of arguments and a '->' token. func = { [[id]* ->]? stmt }
 */
private Node func(){
  int oldx=_x;
  Ary<String> ids=new Ary<>(new String[1],0);
  while (true) {
    String tok=token();
    if (tok == null) {
      ids.clear();
      _x=oldx;
      break;
    }
    if (tok.equals(""String_Node_Str""))     break;
    ids.add(tok);
  }
  Node old_ctrl=ctrl();
  FunNode fun=init(new FunNode(ids._len,old_ctrl));
  try (Env e=new Env(_e)){
    _e=e;
    set_ctrl(fun);
    int cnt=0;
    for (    String id : ids)     _e.add(id,gvn(new ParmNode(cnt++,id,fun,con(Type.SCALAR))));
    Node rpc=gvn(new ParmNode(-1,""String_Node_Str"",fun,_gvn.con(TypeRPC.ALL_CALL)));
    Node rez=stmts();
    Node epi=gvn(new EpilogNode(ctrl(),rez,rpc,fun));
    require('}');
    _e=_e._par;
    set_ctrl(old_ctrl);
    return epi;
  }
 }","/** 
 * Parse an anonymous function; the opening '{' already parsed.  After the '{' comes an optional list of arguments and a '->' token. func = { [[id]* ->]? stmt }
 */
private Node func(){
  int oldx=_x;
  Ary<String> ids=new Ary<>(new String[1],0);
  while (true) {
    String tok=token();
    if (tok == null) {
      ids.clear();
      _x=oldx;
      break;
    }
    if (tok.equals(""String_Node_Str""))     break;
    ids.add(tok);
  }
  Node old_ctrl=ctrl();
  FunNode fun=init(new FunNode(ids._len,old_ctrl));
  try (Env e=new Env(_e)){
    _e=e;
    set_ctrl(fun);
    int cnt=0;
    for (    String id : ids)     _e.add(id,gvn(new ParmNode(cnt++,id,fun,con(Type.SCALAR))));
    Node rpc=gvn(new ParmNode(-1,""String_Node_Str"",fun,_gvn.con(TypeRPC.ALL_CALL)));
    Node rez=stmts();
    require('}');
    Node epi=gvn(new EpilogNode(ctrl(),rez,rpc,fun));
    _e=_e._par;
    set_ctrl(old_ctrl);
    return epi;
  }
 }"
68891,"public Type type(Node n){
  Type t=n._uid < _ts._len ? _ts._es[n._uid] : null;
  if (t != null)   return t;
  t=n.all_type();
  if (_opt)   t=t.dual();
  return _ts.setX(n._uid,t);
}","public Type type(Node n){
  Type t=n._uid < _ts._len ? _ts._es[n._uid] : null;
  return t == null ? _ts.setX(n._uid,n.all_type()) : t;
}"
68892,"public Node xform(Node n){
  if (_opt)   throw AA.unimpl();
  return xform_new(n);
}","public Node xform(Node n){
}"
68893,"@Test public void testType0(){
  test(""String_Node_Str"",TypeInt.con(5));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeInt.con(0));
  test(""String_Node_Str"",TypeInt.con(3));
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeInt.con(7));
  test(""String_Node_Str"",TypeInt.con(27));
  test(""String_Node_Str"",TypeInt.con(105));
  test(""String_Node_Str"",TypeFlt.make(0,64,4.6));
  test(""String_Node_Str"",TypeFlt.make(0,64,3.3));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeFlt.PI);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",TypeInt.con(3));
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeInt.con(-1));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(7));
  test(""String_Node_Str"",TypeInt.con(33));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(6));
  test(""String_Node_Str"",TypeInt.con(1 + 6 + 6 * 6));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(3));
  test(""String_Node_Str"",TypeInt.con(2));
  test(""String_Node_Str"",TypeInt.INT8);
  test(""String_Node_Str"",TypeInt.con(4));
  test(""String_Node_Str"",TypeInt.INT8);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(2));
  test(""String_Node_Str"",TypeInt.con(2));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(1));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test_isa(""String_Node_Str"",TypeTuple.FUNPTR2);
  test(""String_Node_Str"",TypeInt.con(5));
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",TypeInt.con(1));
  test(""String_Node_Str"",TypeFlt.con(3.14));
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",TypeFlt.make(0,64,Math.PI + 1));
  test(""String_Node_Str"",TypeInt.con(2));
  test(""String_Node_Str"",TypeInt.con(2));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(5));
  test(""String_Node_Str"",TypeFlt.con(2.1 * 2.0));
  test(""String_Node_Str"",TypeFlt.con(2.1 * 2.0 + 3 * 2));
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeFlt.make(0,64,3.3));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeFlt.con(2.1 * 2 + 3 * 2));
  test(""String_Node_Str"",TypeInt.con(123));
  test(""String_Node_Str"",TypeFlt.con(0.125));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(6));
}","@Test public void testType0(){
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeInt.con(0));
  test(""String_Node_Str"",TypeInt.con(3));
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeInt.con(7));
  test(""String_Node_Str"",TypeInt.con(27));
  test(""String_Node_Str"",TypeInt.con(105));
  test(""String_Node_Str"",TypeFlt.make(0,64,4.6));
  test(""String_Node_Str"",TypeFlt.make(0,64,3.3));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeStr.make(0,""String_Node_Str""));
  test(""String_Node_Str"",TypeFlt.PI);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",TypeInt.con(3));
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeInt.con(-1));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(7));
  test(""String_Node_Str"",TypeInt.con(33));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(6));
  test(""String_Node_Str"",TypeInt.con(1 + 6 + 6 * 6));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(3));
  test(""String_Node_Str"",TypeInt.con(2));
  test(""String_Node_Str"",TypeInt.INT8);
  test(""String_Node_Str"",TypeInt.con(4));
  test(""String_Node_Str"",TypeInt.INT8);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(2));
  test(""String_Node_Str"",TypeInt.con(2));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(1));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.FALSE);
  test(""String_Node_Str"",TypeInt.TRUE);
  test_isa(""String_Node_Str"",TypeTuple.FUNPTR2);
  test(""String_Node_Str"",TypeInt.con(5));
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",TypeInt.con(1));
  test(""String_Node_Str"",TypeFlt.con(3.14));
  test(""String_Node_Str"",Env.lookup_valtype(""String_Node_Str""));
  test(""String_Node_Str"",TypeFlt.make(0,64,Math.PI + 1));
  test(""String_Node_Str"",TypeInt.con(2));
  test(""String_Node_Str"",TypeInt.con(2));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(5));
  test(""String_Node_Str"",TypeFlt.con(2.1 * 2.0));
  test(""String_Node_Str"",TypeFlt.con(2.1 * 2.0 + 3 * 2));
  test(""String_Node_Str"",TypeInt.con(-1));
  test(""String_Node_Str"",TypeFlt.make(0,64,3.3));
  test(""String_Node_Str"",TypeInt.TRUE);
  test(""String_Node_Str"",TypeInt.TRUE);
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeFlt.con(2.1 * 2 + 3 * 2));
  test(""String_Node_Str"",TypeInt.con(123));
  test(""String_Node_Str"",TypeFlt.con(0.125));
  testerr(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  test(""String_Node_Str"",TypeInt.con(6));
}"
68894,"void iter(){
  while (_work._len > 0) {
    Node n=_work.pop();
    _wrk_bits.clear(n._uid);
    if (n.is_dead())     continue;
    if (n instanceof ScopeNode || n instanceof TmpNode)     continue;
    if (n._uses._len == 0) {
      kill(n);
      continue;
    }
    xform_old(n);
  }
}","void iter(){
  Ary<Node> funs=new Ary<>(new Node[1],0);
  BitSet fun_bits=new BitSet();
  boolean work;
  while ((work=_work._len > 0) || funs._len > 0) {
    Node n=(work ? _work : funs).pop();
    (work ? _wrk_bits : fun_bits).clear(n._uid);
    if (n.is_dead())     continue;
    if (n instanceof ScopeNode || n instanceof TmpNode)     continue;
    if (n._uses._len == 0) {
      kill(n);
      continue;
    }
    if (_work._len > 0 && n instanceof FunNode && n.is_copy(this,-1) == null) {
      if (!fun_bits.get(n._uid)) {
        funs.add(n);
        fun_bits.set(n._uid);
      }
    }
 else {
      xform_old(n);
    }
  }
}"
68895,"protected boolean canBeConst(){
switch (_type) {
case TSCALAR:
case TNUM:
case TREAL:
    return false;
case TXREAL:
case TXNUM:
case TXSCALAR:
  return true;
default :
throw AA.unimpl();
}
}","protected boolean canBeConst(){
switch (_type) {
case TSCALAR:
case TNUM:
case TREAL:
case TCONTROL:
    return false;
case TXREAL:
case TXNUM:
case TXSCALAR:
  return true;
default :
throw AA.unimpl();
}
}"
68896,"@Override public boolean is_con(){
  return false;
}","@Override public boolean is_con(){
  return !_all;
}"
68897,"@Override public boolean canBeConst(){
  throw AA.unimpl();
}","@Override public boolean canBeConst(){
  return _rpcs.abit() > 0;
}"
68898,"@Override public boolean is_con(){
  if (_inf == TypeErr.ALL)   throw AA.unimpl();
  for (  Type _t : _ts)   if (!_t.is_con())   return false;
  return true;
}","@Override public boolean is_con(){
  for (  Type _t : _ts)   if (!_t.is_con())   return false;
  return _inf.is_con();
}"
68899,"@Override protected boolean canBeConst(){
  if (_inf == TypeErr.ANY)   throw AA.unimpl();
  for (  Type _t : _ts)   if (_t.canBeConst())   return true;
  return false;
}","@Override protected boolean canBeConst(){
  for (  Type _t : _ts)   if (!_t.canBeConst())   return false;
  return _inf.canBeConst();
}"
68900,"public FunNode funode(){
  return (FunNode)(FunNode.get(fidx()).at(0).at(2));
}","FunNode funode(){
  return (FunNode)(FunNode.get(fidx()).at(0).at(2));
}"
68901,"@Override protected Type xmeet(Type t){
switch (t._type) {
case TERROR:
    return ((TypeErr)t)._all ? t : this;
case TCONTROL:
case TTUPLE:
  return TypeErr.ALL;
case TFLT:
case TINT:
case TSTR:
return Type.SCALAR;
case TFUN:
break;
case TUNION:
return t.xmeet(this);
default :
throw typerr(t);
}
TypeFun tf=(TypeFun)t;
if (_ts != tf._ts || _ret != tf._ret) return TypeUnion.make(false,this,tf);
return make(_ts,_ret,_fidxs.or(tf._fidxs));
}","@Override protected Type xmeet(Type t){
switch (t._type) {
case TERROR:
    return ((TypeErr)t)._all ? t : this;
case TCONTROL:
case TTUPLE:
  return TypeErr.ALL;
case TFLT:
case TINT:
case TSTR:
return Type.SCALAR;
case TFUN:
break;
case TUNION:
return t.xmeet(this);
default :
throw typerr(t);
}
TypeFun tf=(TypeFun)t;
Bits fidxs=_fidxs.or(tf._fidxs);
if (fidxs != _fidxs && fidxs != tf._fidxs) return TypeUnion.make(false,this,tf);
TypeTuple ts=(TypeTuple)_ts.meet(tf._ts);
Type ret=_ret.meet(tf._ret);
return make(ts,ret,fidxs);
}"
68902,"private int calcHashCode(Object splitKey){
  int hashCode=splitKey.hashCode();
  return hashCode;
}","private int calcHashCode(Object splitKey){
  int hashCode=splitKey.hashCode();
  if (hashCode < 0)   hashCode=-hashCode;
  return hashCode;
}"
68903,"public int getDbNo(Object splitKey){
  return getTableNo(splitKey) / dbNum;
}","public int getDbNo(Object splitKey){
  return getTableNo(splitKey) / tableNum;
}"
68904,"public int getNodeNo(Object splitKey){
  return getDbNo(splitKey) / portNum;
}","public int getNodeNo(Object splitKey){
  return getDbNo(splitKey) / dbNum;
}"
68905,"@Test(groups={""String_Node_Str""}) public void testSimpleSplitJdbcTemplate(){
  SimpleSplitJdbcTemplate simpleSplitJdbcTemplate=(SimpleSplitJdbcTemplate)applicationContext.getBean(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  Random random=new Random(new Date().getTime());
  for (int i=0; i < random.nextInt(16); i++)   idService.genId();
  long id=idService.genId();
  TestTable testTable=new TestTable();
  testTable.setId(id);
  testTable.setName(""String_Node_Str"" + id);
  testTable.setGender(Gender.MALE);
  testTable.setLstUpdTime(new Date());
  testTable.setLstUpdUser(""String_Node_Str"");
  simpleSplitJdbcTemplate.insert(id,testTable);
  TestTable q=new TestTable();
  TestTable testTable1=simpleSplitJdbcTemplate.get(id,id,TestTable.class);
  AssertJUnit.assertEquals(testTable.getName(),testTable1.getName());
  AssertJUnit.assertEquals(testTable.getGender(),testTable1.getGender());
  AssertJUnit.assertEquals(testTable.getLstUpdUser(),testTable1.getLstUpdUser());
  System.out.println(testTable1);
}","@Test(groups={""String_Node_Str""}) public void testSimpleSplitJdbcTemplate(){
  SimpleSplitJdbcTemplate simpleSplitJdbcTemplate=(SimpleSplitJdbcTemplate)applicationContext.getBean(""String_Node_Str"");
  IdService idService=(IdService)applicationContext.getBean(""String_Node_Str"");
  Random random=new Random(new Date().getTime());
  for (int i=0; i < random.nextInt(16); i++)   idService.genId();
  long id=idService.genId();
  System.out.println(""String_Node_Str"" + id);
  TestTable testTable=new TestTable();
  testTable.setId(id);
  testTable.setName(""String_Node_Str"" + id);
  testTable.setGender(Gender.MALE);
  testTable.setLstUpdTime(new Date());
  testTable.setLstUpdUser(""String_Node_Str"");
  simpleSplitJdbcTemplate.insert(id,testTable);
  TestTable q=new TestTable();
  TestTable testTable1=simpleSplitJdbcTemplate.get(id,id,TestTable.class);
  AssertJUnit.assertEquals(testTable.getId(),testTable1.getId());
  AssertJUnit.assertEquals(testTable.getName(),testTable1.getName());
  AssertJUnit.assertEquals(testTable.getGender(),testTable1.getGender());
  AssertJUnit.assertEquals(testTable.getLstUpdUser(),testTable1.getLstUpdUser());
  AssertJUnit.assertEquals((testTable.getLstUpdTime().getTime() + 500) / 1000 * 1000,testTable1.getLstUpdTime().getTime());
  System.out.println(""String_Node_Str"" + testTable1);
}"
68906,"public <T>T get(String name,String value,final Class<T> clazz);","public <T>T get(String name,Object value,final Class<T> clazz);"
68907,"public T mapRow(ResultSet rs,int rowNum) throws SQLException {
  return OrmUtil.convertRow2Bean(rs,clazz);
}","public T mapRow(ResultSet rs,int rowNum) throws SQLException {
  return (T)OrmUtil.convertRow2Bean(rs,bean.getClass());
}"
68908,"public <T>T get(String name,String value,final Class<T> clazz){
  SqlRunningBean srb=SqlUtil.generateSelectSql(name,value,clazz);
  T bean=this.queryForObject(srb.getSql(),srb.getParams(),new RowMapper<T>(){
    public T mapRow(    ResultSet rs,    int rowNum) throws SQLException {
      return OrmUtil.convertRow2Bean(rs,clazz);
    }
  }
);
  return bean;
}","public <T>T get(String name,Object value,final Class<T> clazz){
  SqlRunningBean srb=SqlUtil.generateSelectSql(name,value,clazz);
  T bean=this.queryForObject(srb.getSql(),srb.getParams(),new RowMapper<T>(){
    public T mapRow(    ResultSet rs,    int rowNum) throws SQLException {
      return OrmUtil.convertRow2Bean(rs,clazz);
    }
  }
);
  return bean;
}"
68909,"public static <T>SqlRunningBean generateSearchSql(T bean,String dbPrefix,String tablePrefix,int dbNo,int tableNo){
  return generateSearchSql(bean,null,null,null,dbPrefix,tablePrefix,dbNo,tableNo);
}","public static <T>SqlRunningBean generateSearchSql(T bean){
  return generateSearchSql(bean,null,null,null,null,null,-1,-1);
}"
68910,"public int getNodeNo(Object splitKey){
  return getTableNo(splitKey) / portNum;
}","public int getNodeNo(Object splitKey){
  return getDbNo(splitKey) / portNum;
}"
68911,"@Dimension(unit=Dimension.PX) public float getTextSize(){
  return mTextPaint.getTextSize();
}","@Dimension public float getTextSize(){
  return mTextPaint.getTextSize();
}"
68912,"public AvatarImageView(Context context,AttributeSet attrs){
  super(context,attrs);
  String initial=DEF_INITIAL;
  int textColor=Color.WHITE;
  int textSize=DEF_TEXT_SIZE;
  int backgroundColor=DEF_BACKGROUND_COLOR;
  int showState=DEF_STATE;
  if (attrs != null) {
    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.AvatarImageView,0,0);
    initial=a.getString(R.styleable.AvatarImageView_avatar_text);
    textColor=a.getColor(R.styleable.AvatarImageView_avatar_textColor,textColor);
    textSize=a.getDimensionPixelSize(R.styleable.AvatarImageView_avatar_textSize,textSize);
    backgroundColor=a.getColor(R.styleable.AvatarImageView_avatar_backgroundColor,backgroundColor);
    showState=a.getInt(R.styleable.AvatarImageView_avatar_state,showState);
    a.recycle();
  }
  mShowState=showState;
  mTextPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setTextAlign(Paint.Align.CENTER);
  mTextPaint.setColor(textColor);
  mTextPaint.setTextSize(textSize);
  mTextBounds=new Rect();
  mInitial=extractInitial(initial);
  updateTextBounds();
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mBackgroundPaint.setStyle(Paint.Style.FILL);
  mBackgroundBounds=new RectF();
}","public AvatarImageView(Context context,AttributeSet attrs){
  super(context,attrs);
  String initial=DEF_INITIAL;
  int textColor=Color.WHITE;
  int textSize=DEF_TEXT_SIZE;
  int backgroundColor=DEF_BACKGROUND_COLOR;
  int showState=DEF_STATE;
  if (attrs != null) {
    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.AvatarImageView,0,0);
    initial=a.getString(R.styleable.AvatarImageView_text);
    textColor=a.getColor(R.styleable.AvatarImageView_textColor,textColor);
    textSize=a.getDimensionPixelSize(R.styleable.AvatarImageView_textSize,textSize);
    backgroundColor=a.getColor(R.styleable.AvatarImageView_avatarBackgroundColor,backgroundColor);
    showState=a.getInt(R.styleable.AvatarImageView_state,showState);
    a.recycle();
  }
  mShowState=showState;
  mTextPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setTextAlign(Paint.Align.CENTER);
  mTextPaint.setColor(textColor);
  mTextPaint.setTextSize(textSize);
  mTextBounds=new Rect();
  mInitial=extractInitial(initial);
  updateTextBounds();
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mBackgroundPaint.setStyle(Paint.Style.FILL);
  mBackgroundBounds=new RectF();
}"
68913,"public void setTextSize(@Dimension(unit=Dimension.PX) float size){
  mTextPaint.setTextSize(size);
  updateTextBounds();
  invalidate();
}","public void setTextSize(@Dimension float size){
  mTextPaint.setTextSize(size);
  updateTextBounds();
  invalidate();
}"
68914,"public static String doHanmingOCR(BufferedImage target){
  ArrayList<BufferedImage> subImages=clipBDIndexImage(target);
  String result=""String_Node_Str"";
  for (int j=0; j < subImages.size(); j++) {
    BufferedImage subImage=subImages.get(j);
    for (int i=0; i < 10; i++) {
      int distance=getDistance(fps[i],getFingerPrint(subImage));
      if (distance < 40 && distance != -1) {
        result+=i;
        break;
      }
    }
  }
  return result;
}","public static String doHanmingOCR(BufferedImage target){
  BufferedImage image=target;
  if (target.getHeight() != 72) {
    int scale=72 / target.getHeight();
    int w=target.getWidth();
    int h=target.getHeight();
    BufferedImage after=new BufferedImage(w * scale,h * scale,target.getType());
    AffineTransform at=new AffineTransform();
    at.scale(scale,scale);
    AffineTransformOp scaleOp=new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
    image=scaleOp.filter(target,after);
    BufferedImage binaryImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_BYTE_BINARY);
    for (int i=0; i < image.getWidth(); i++) {
      for (int j=0; j < image.getHeight(); j++) {
        int rgb=image.getRGB(i,j);
        binaryImage.setRGB(i,j,rgb);
      }
    }
    image=binaryImage;
  }
  ArrayList<BufferedImage> subImages=clipBDIndexImage(image);
  String result=""String_Node_Str"";
  for (int j=0; j < subImages.size(); j++) {
    BufferedImage subImage=subImages.get(j);
    for (int i=0; i < 10; i++) {
      int distance=getDistance(fps[i],getFingerPrint(subImage));
      if (distance < distanceThreshold && distance != -1) {
        result+=i;
        break;
      }
    }
  }
  return result;
}"
68915,"public Vector2 getRandomOpenSpaceNearEntity(Entity target){
  Vector2 targetPosition=ComponentMappers.position.get(target).pos;
  Vector2 position;
  int x=MathUtils.random(-1,1);
  int y=MathUtils.random(-1,1);
  if (!isBlocked(WorldManager.world.currentMapIndex,new Vector2(targetPosition.x + x,targetPosition.y + y))) {
    position=new Vector2(targetPosition.x + 1,targetPosition.y + y);
  }
 else {
    position=null;
  }
  return position;
}","public Vector2 getRandomOpenSpaceNearEntity(Entity target){
  Vector2 targetPosition=ComponentMappers.position.get(target).pos;
  Vector2 position;
  int x=MathUtils.random(-1,1);
  int y=MathUtils.random(-1,1);
  if (!isBlocked(WorldManager.world.currentMapIndex,new Vector2(targetPosition.x + x,targetPosition.y + y))) {
    position=new Vector2(targetPosition.x + x,targetPosition.y + y);
  }
 else {
    position=null;
  }
  return position;
}"
68916,"@Override public void render(float delta){
  Gdx.gl.glClearColor(Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").r,Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").g,Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").b,Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").a);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  autoTimer+=delta;
  keyHoldTimer+=delta;
  if (playerInput.keyHeld != -1) {
    keyHoldTimerDelay+=delta;
    if (keyHoldTimerDelay >= .5f) {
      if (keyHoldTimer >= .10f) {
        keyHoldTimer=0;
        playerInput.keyDown(playerInput.keyHeld);
      }
    }
  }
 else {
    keyHoldTimerDelay=0;
  }
  if ((WorldManager.state == WorldManager.State.MOVING || WorldManager.entityHelpers.shouldSkipTurn(WorldManager.player)) && autoTimer >= .10f) {
    autoTimer=0;
    WorldManager.executeTurn=true;
  }
  if (WorldManager.executeTurn) {
    WorldManager.turnCount+=1;
    WorldManager.world.getCurrentMap().time.update();
    WorldManager.engine.update(delta);
    WorldManager.executeTurn=false;
  }
  if (WorldManager.state == WorldManager.State.GOING_DOWN) {
    WorldManager.world.goDown();
    WorldManager.state=WorldManager.State.PLAYING;
  }
 else   if (WorldManager.state == WorldManager.State.GOING_UP) {
    WorldManager.world.goUp();
    WorldManager.state=WorldManager.State.PLAYING;
  }
  if (WorldManager.tweens.size > 0) {
    WorldManager.state=WorldManager.State.WAITING;
    Timeline timeline=Timeline.createParallel();
    for (int i=0; i < WorldManager.tweens.size; i++) {
      timeline.push(WorldManager.tweens.get(i));
      WorldManager.tweens.removeIndex(i);
    }
    timeline.setCallback((type,source) -> {
      if (type == TweenCallback.COMPLETE) {
        WorldManager.state=WorldManager.State.PLAYING;
      }
    }
).start(Main.tweenManager);
  }
  if (WorldManager.state != WorldManager.State.WAITING) {
    ImmutableArray<Entity> entities=WorldManager.engine.getEntitiesFor(Family.all(VisualComponent.class,PositionComponent.class).get());
    for (    Entity entity : entities) {
      PositionComponent position=ComponentMappers.position.get(entity);
      VisualComponent visual=ComponentMappers.visual.get(entity);
      visual.sprite.setPosition(position.pos.x * Main.SPRITE_WIDTH,position.pos.y * Main.SPRITE_HEIGHT);
    }
  }
  if (playerAttributes.health <= 0) {
    Main.playScreen.dispose();
    main.setScreen(new MainMenuScreen(main));
  }
 else {
    Main.tweenManager.update(delta);
    worldRenderer.render(delta);
    hudRenderer.render(delta);
  }
}","@Override public void render(float delta){
  Gdx.gl.glClearColor(Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").r,Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").g,Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").b,Colors.get(WorldManager.world.getCurrentMap().type + ""String_Node_Str"").a);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  autoTimer+=delta;
  keyHoldTimer+=delta;
  if (playerInput.keyHeld != -1) {
    keyHoldTimerDelay+=delta;
    if (keyHoldTimerDelay >= .5f) {
      if (keyHoldTimer >= .10f) {
        keyHoldTimer=0;
        playerInput.keyDown(playerInput.keyHeld);
      }
    }
  }
 else {
    keyHoldTimerDelay=0;
  }
  if ((WorldManager.state == WorldManager.State.MOVING || WorldManager.entityHelpers.shouldSkipTurn(WorldManager.player)) && autoTimer >= .10f) {
    autoTimer=0;
    WorldManager.executeTurn=true;
  }
  if (WorldManager.executeTurn) {
    WorldManager.turnCount+=1;
    WorldManager.world.getCurrentMap().time.update();
    WorldManager.engine.update(delta);
    WorldManager.executeTurn=false;
  }
  if (WorldManager.state == WorldManager.State.GOING_DOWN) {
    WorldManager.world.goDown();
    WorldManager.state=WorldManager.State.PLAYING;
  }
 else   if (WorldManager.state == WorldManager.State.GOING_UP) {
    WorldManager.world.goUp();
    WorldManager.state=WorldManager.State.PLAYING;
  }
  if (WorldManager.tweens.size > 0) {
    WorldManager.state=WorldManager.State.WAITING;
    Timeline timeline=Timeline.createParallel();
    for (int i=0; i < WorldManager.tweens.size; i++) {
      timeline.push(WorldManager.tweens.get(i));
      WorldManager.tweens.removeIndex(i);
    }
    timeline.setCallback((type,source) -> {
      if (type == TweenCallback.COMPLETE) {
        WorldManager.state=WorldManager.State.PLAYING;
      }
    }
).start(Main.tweenManager);
  }
  if (WorldManager.state != WorldManager.State.WAITING) {
    ImmutableArray<Entity> entities=WorldManager.engine.getEntitiesFor(Family.all(VisualComponent.class,PositionComponent.class).get());
    for (    Entity entity : entities) {
      PositionComponent position=ComponentMappers.position.get(entity);
      WorldManager.entityHelpers.updateSpritePosition(entity,position.pos);
    }
  }
  if (playerAttributes.health <= 0) {
    Main.playScreen.dispose();
    main.setScreen(new MainMenuScreen(main));
  }
 else {
    Main.tweenManager.update(delta);
    worldRenderer.render(delta);
    hudRenderer.render(delta);
  }
}"
68917,"private void doThrowAnimation(Entity entity,Entity item,Vector2 position,boolean destroy){
  PositionComponent throwerPosition=ComponentMappers.position.get(entity);
  WorldManager.entityHelpers.updatePosition(item,throwerPosition.pos);
  VisualComponent itemVisual=ComponentMappers.visual.get(item);
  WorldManager.tweens.add(Tween.to(itemVisual.sprite,SpriteAccessor.XY,.5f).target(position.x * Main.SPRITE_WIDTH,position.y * Main.SPRITE_HEIGHT).setCallback((type,source) -> {
    if (type == TweenCallback.COMPLETE) {
      if (destroy) {
        WorldManager.itemHelpers.destroy(entity,item);
      }
 else {
        WorldManager.itemHelpers.drop(entity,item,position);
      }
    }
  }
));
}","private void doThrowAnimation(Entity entity,Entity item,Vector2 position,boolean destroy){
  PositionComponent throwerPosition=ComponentMappers.position.get(entity);
  WorldManager.entityHelpers.updatePosition(item,throwerPosition.pos);
  WorldManager.entityHelpers.updateSpritePosition(item,throwerPosition.pos);
  VisualComponent itemVisual=ComponentMappers.visual.get(item);
  WorldManager.tweens.add(Tween.to(itemVisual.sprite,SpriteAccessor.XY,.25f).target(position.x * Main.SPRITE_WIDTH,position.y * Main.SPRITE_HEIGHT).setCallback((type,source) -> {
    if (type == TweenCallback.COMPLETE) {
      if (destroy) {
        WorldManager.itemHelpers.destroy(entity,item);
      }
 else {
        WorldManager.itemHelpers.drop(entity,item,position);
      }
    }
  }
));
}"
68918,"/** 
 * Holds entity attributes.
 * @param name        Name
 * @param description Entity description
 * @param speed       How much energy is gotten back each turn
 * @param vision      How many cells they see around them
 * @param toughness   How much strength they can soak up
 * @param strength    How much strength they do
 */
public AttributesComponent(String name,String description,int speed,int vision,int toughness,int strength){
  this.name=name;
  this.description=description;
  this.energy=speed;
  this.speed=speed;
  this.vision=vision;
  this.toughness=toughness;
  this.strength=strength;
  this.maxHealth=toughness * 10;
  this.health=maxHealth;
}","/** 
 * Holds entity attributes.
 * @param name        Name
 * @param description Entity description
 * @param speed       How much energy is gotten back each turn
 * @param vision      How many cells they see around them
 * @param toughness   How much strength they can soak up
 * @param strength    How much strength they do
 */
public AttributesComponent(String name,String description,int speed,int vision,int toughness,int strength){
  this.name=name;
  this.description=description;
  this.energy=speed;
  this.speed=speed;
  this.vision=vision;
  this.toughness=toughness;
  this.strength=strength;
  this.maxHealth=toughness * 100;
  this.health=maxHealth;
}"
68919,"@Override public void dispose(){
  batch.dispose();
  WorldManager.state=null;
}","@Override public void dispose(){
  batch.dispose();
}"
68920,"/** 
 * If the entities have a move action in queue, and can move where they're wanting to, move 'em.
 * @param entity    The entity to process
 * @param deltaTime Time since last frame
 */
public void processEntity(Entity entity,float deltaTime){
  PositionComponent position=ComponentMappers.position.get(entity);
  VisualComponent visual=ComponentMappers.visual.get(entity);
  MovementComponent movement=ComponentMappers.movement.get(entity);
  AttributesComponent attributes=ComponentMappers.attributes.get(entity);
  if (movement.pos.x < position.pos.x) {
    visual.sprite.setFlip(true,false);
  }
 else {
    visual.sprite.setFlip(false,false);
  }
  if (!WorldManager.mapHelpers.isBlocked(WorldManager.world.currentMapIndex,movement.pos)) {
    position.pos=movement.pos;
  }
 else {
    if (ComponentMappers.player.has(entity)) {
      Entity thing=WorldManager.entityHelpers.getEntityAt(movement.pos);
      if (WorldManager.entityHelpers.isItem(thing)) {
        WorldManager.inventoryHelpers.addItem(WorldManager.player,thing);
        position.pos=movement.pos;
      }
 else       if (WorldManager.entityHelpers.isEnemy(thing)) {
        WorldManager.combatHelpers.preparePlayerForMelee(thing,""String_Node_Str"");
      }
 else       if (WorldManager.entityHelpers.isExit(thing)) {
        WorldManager.world.currentMapIndex+=1;
        entity.remove(MouseMovementComponent.class);
        position.map=WorldManager.world.currentMapIndex;
        WorldManager.state=WorldManager.State.PLAYING;
      }
 else       if (WorldManager.entityHelpers.isEntrance(thing)) {
        WorldManager.world.currentMapIndex-=1;
        entity.remove(MouseMovementComponent.class);
        position.map=WorldManager.world.currentMapIndex;
        WorldManager.state=WorldManager.State.PLAYING;
      }
    }
  }
  attributes.energy-=MovementComponent.COST;
  entity.remove(MovementComponent.class);
}","/** 
 * If the entities have a move action in queue, and can move where they're wanting to, move 'em.
 * @param entity    The entity to process
 * @param deltaTime Time since last frame
 */
public void processEntity(Entity entity,float deltaTime){
  PositionComponent position=ComponentMappers.position.get(entity);
  VisualComponent visual=ComponentMappers.visual.get(entity);
  MovementComponent movement=ComponentMappers.movement.get(entity);
  AttributesComponent attributes=ComponentMappers.attributes.get(entity);
  if (movement.pos.x < position.pos.x) {
    visual.sprite.setFlip(true,false);
  }
 else {
    visual.sprite.setFlip(false,false);
  }
  if (!WorldManager.mapHelpers.isBlocked(WorldManager.world.currentMapIndex,movement.pos)) {
    position.pos=movement.pos;
  }
 else {
    if (ComponentMappers.player.has(entity)) {
      Entity thing=WorldManager.entityHelpers.getEntityAt(movement.pos);
      if (WorldManager.entityHelpers.isItem(thing)) {
        WorldManager.inventoryHelpers.addItem(WorldManager.player,thing);
        position.pos=movement.pos;
      }
 else       if (WorldManager.entityHelpers.isEnemy(thing)) {
        WorldManager.combatHelpers.preparePlayerForMelee(thing,""String_Node_Str"");
      }
 else       if (WorldManager.entityHelpers.isExit(thing)) {
        WorldManager.world.currentMapIndex+=1;
        WorldManager.state=WorldManager.State.PLAYING;
        entity.remove(MouseMovementComponent.class);
        position.pos=WorldManager.mapHelpers.getEntrancePosition();
        position.map=WorldManager.world.currentMapIndex;
      }
 else       if (WorldManager.entityHelpers.isEntrance(thing)) {
        WorldManager.world.currentMapIndex-=1;
        WorldManager.state=WorldManager.State.PLAYING;
        entity.remove(MouseMovementComponent.class);
        position.pos=WorldManager.mapHelpers.getExitPosition();
        position.map=WorldManager.world.currentMapIndex;
      }
    }
  }
  attributes.energy-=MovementComponent.COST;
  entity.remove(MovementComponent.class);
}"
68921,"/** 
 * Get item from a location.
 * @param position Where the item is
 * @return The item
 */
public Entity getItemAt(Vector2 position){
  ImmutableArray<Entity> entities=engine.getEntitiesFor(Family.all(ItemComponent.class).get());
  for (  Entity entity : entities) {
    if (entity.getComponent(PositionComponent.class).pos.epsilonEquals(position,0.00001f)) {
      return entity;
    }
  }
  return null;
}","/** 
 * Get item from a location.
 * @param position Where the item is
 * @return The item
 */
public Entity getItemAt(Vector2 position){
  ImmutableArray<Entity> entities=engine.getEntitiesFor(Family.all(ItemComponent.class,PositionComponent.class).get());
  for (  Entity entity : entities) {
    if (entity.getComponent(PositionComponent.class).pos.epsilonEquals(position,0.00001f)) {
      return entity;
    }
  }
  return null;
}"
68922,"@Override public void render(float delta){
  Gdx.gl.glClearColor(0,0,0,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  refillInventory();
  stage.act(delta);
  stage.draw();
  if (Gdx.input.isKeyJustPressed(Input.Keys.J)) {
    if (selected < items.size() - 1) {
      selected+=1;
    }
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.K)) {
    if (selected > 0) {
      selected-=1;
    }
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.H)) {
    main.equipmentHelpers.holdItem(main.player,items.get(selected));
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.W)) {
    main.equipmentHelpers.wearItem(main.player,items.get(selected));
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.R)) {
    main.equipmentHelpers.removeItem(main.player,items.get(selected));
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.D)) {
    main.inventoryHelpers.dropItem(main.player,items.get(selected));
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.T)) {
    items.get(selected).getComponent(ItemComponent.class).throwing=true;
    main.state=Main.State.TARGETING;
    main.setScreen(main.playScreen);
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_1)) {
    main.setScreen(new CharacterScreen(main));
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.Q)) {
    main.setScreen(main.playScreen);
  }
}","@Override public void render(float delta){
  Gdx.gl.glClearColor(0,0,0,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  refillInventory();
  stage.act(delta);
  stage.draw();
  if (Gdx.input.isKeyJustPressed(Input.Keys.J)) {
    if (selected < items.size() - 1) {
      selected+=1;
    }
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.K)) {
    if (selected > 0) {
      selected-=1;
    }
  }
  if (items.size() >= 1) {
    ItemComponent item=items.get(selected).getComponent(ItemComponent.class);
    if (Gdx.input.isKeyJustPressed(Input.Keys.H) && item.actions.get(""String_Node_Str"")) {
      main.equipmentHelpers.holdItem(main.player,items.get(selected));
    }
    if (Gdx.input.isKeyJustPressed(Input.Keys.W) && item.actions.get(""String_Node_Str"")) {
      main.equipmentHelpers.wearItem(main.player,items.get(selected));
    }
    if (Gdx.input.isKeyJustPressed(Input.Keys.T) && item.actions.get(""String_Node_Str"")) {
      items.get(selected).getComponent(ItemComponent.class).throwing=true;
      main.state=Main.State.TARGETING;
      main.setScreen(main.playScreen);
    }
    if (Gdx.input.isKeyJustPressed(Input.Keys.R)) {
      main.equipmentHelpers.removeItem(main.player,items.get(selected));
    }
    if (Gdx.input.isKeyJustPressed(Input.Keys.D)) {
      main.inventoryHelpers.dropItem(main.player,items.get(selected));
    }
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_1)) {
    main.setScreen(new CharacterScreen(main));
  }
  if (Gdx.input.isKeyJustPressed(Input.Keys.Q)) {
    main.setScreen(main.playScreen);
  }
}"
68923,"public Entity getThrowingItem(Entity entity){
  ArrayList<Entity> items=entity.getComponent(InventoryComponent.class).items;
  for (  Entity item : items) {
    ItemComponent itemComponent=item.getComponent(ItemComponent.class);
    if (itemComponent.throwing) {
      return entity;
    }
  }
  return null;
}","public Entity getThrowingItem(Entity entity){
  ArrayList<Entity> items=entity.getComponent(InventoryComponent.class).items;
  for (  Entity item : items) {
    ItemComponent itemComponent=item.getComponent(ItemComponent.class);
    if (itemComponent.throwing) {
      return item;
    }
  }
  return null;
}"
68924,"private void renderItems(float[][] lightMap){
  ImmutableArray<Entity> entities=engine.getEntitiesFor(Family.all(ItemComponent.class,PositionComponent.class,VisualComponent.class).get());
  for (  Entity entity : entities) {
    PositionComponent position=ComponentMappers.position.get(entity);
    if (!map.getCell(position.pos).hidden) {
      VisualComponent visual=ComponentMappers.visual.get(entity);
      batch.setColor(1f,1f,1f,lightMap[(int)position.pos.x][(int)position.pos.y]);
      batch.draw(visual.sprite,position.pos.x * SPRITE_WIDTH,(position.pos.y * SPRITE_HEIGHT) + (SPRITE_HEIGHT / 2));
      batch.setColor(1f,1f,1f,1f);
    }
  }
}","private void renderItems(float[][] lightMap){
  ImmutableArray<Entity> entities=engine.getEntitiesFor(Family.all(ItemComponent.class,PositionComponent.class,VisualComponent.class).get());
  for (  Entity entity : entities) {
    PositionComponent position=ComponentMappers.position.get(entity);
    if (!map.getCell(position.pos).hidden) {
      VisualComponent visual=ComponentMappers.visual.get(entity);
      batch.setColor(1f,1f,1f,lightMap[(int)position.pos.x][(int)position.pos.y]);
      batch.draw(visual.sprite,position.pos.x * SPRITE_WIDTH,position.pos.y * SPRITE_HEIGHT);
      batch.setColor(1f,1f,1f,1f);
    }
  }
}"
68925,"public void wieldItem(){
  Entity item=getShowing();
  if (item != null) {
    item.getComponent(ItemComponent.class).equipped=true;
    item.getComponent(ItemComponent.class).lookingAt=false;
  }
}","public void wieldItem(){
  Entity entity=getShowing();
  if (entity != null) {
    ItemComponent item=entity.getComponent(ItemComponent.class);
    if (item.actions.get(""String_Node_Str"")) {
      ArrayList<Entity> others=player.getComponent(InventoryComponent.class).items;
      for (      Entity other : others) {
        other.getComponent(ItemComponent.class).equipped=false;
      }
      item.equipped=true;
      item.lookingAt=false;
    }
  }
}"
68926,"Entity getShowing(){
  ArrayList<Entity> items=player.getComponent(InventoryComponent.class).items;
  Entity showing=null;
  for (  Entity entity : items) {
    ItemComponent item=entity.getComponent(ItemComponent.class);
    if (item.lookingAt && item.actions.get(""String_Node_Str"")) {
      showing=entity;
      for (      Entity other : player.getComponent(InventoryComponent.class).items) {
        ItemComponent otherItem=other.getComponent(ItemComponent.class);
        if (Objects.equals(item.type,otherItem.type) && otherItem.equipped) {
          otherItem.equipped=false;
        }
      }
      break;
    }
  }
  return showing;
}","Entity getShowing(){
  ArrayList<Entity> items=player.getComponent(InventoryComponent.class).items;
  Entity showing=null;
  for (  Entity entity : items) {
    ItemComponent item=entity.getComponent(ItemComponent.class);
    if (item.lookingAt) {
      showing=entity;
      break;
    }
  }
  return showing;
}"
68927,"/** 
 * Use   {@link ServiceLoader} to load converter sets and return in order of priority (lower first) 
 */
static List<Converters> loadConverters(ClassLoader cl){
  List<Converters> ret=new ArrayList<>();
  ServiceLoader.load(Converters.class).iterator().forEachRemaining(ret::add);
  ret.sort(Comparator.comparing(Converters::getPriority));
  return ret;
}","/** 
 * Use   {@link ServiceLoader} to load converter sets and return in order of priority (lower first) 
 */
static List<Converters> loadConverters(@Nullable ClassLoader cl){
  List<Converters> ret=new ArrayList<>();
  ServiceLoader.load(Converters.class,cl).iterator().forEachRemaining(ret::add);
  ret.sort(Comparator.comparing(Converters::getPriority));
  return ret;
}"
68928,"public static String encode(String input){
  StringBuilder resultStr=new StringBuilder();
  for (  char ch : input.toCharArray()) {
    if (isUnsafe(ch)) {
      resultStr.append('%');
      resultStr.append(toHex(ch / 16));
      resultStr.append(toHex(ch % 16));
    }
 else {
      resultStr.append(ch);
    }
  }
  return resultStr.toString();
}","public static String encode(String input){
  try {
    return URLEncoder.encode(input,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}"
68929,"public RequestCapture(Request req){
  url=req.url();
  queryString=req.queryString();
  method=HttpMethod.valueOf(req.requestMethod());
  writeHeaders(req);
  writeQuery(req);
}","public RequestCapture(Request req){
  url=req.url();
  queryString=req.queryString();
  method=HttpMethod.valueOf(req.requestMethod());
  writeHeaders(req);
  writeQuery(req);
  param=req.params(""String_Node_Str"");
}"
68930,"private static HttpRequestBase prepareRequest(HttpRequest request,boolean async){
  Object defaultHeaders=Options.getOption(Option.DEFAULT_HEADERS);
  if (defaultHeaders != null) {
    @SuppressWarnings(""String_Node_Str"") Set<Entry<String,String>> entrySet=((Map<String,String>)defaultHeaders).entrySet();
    for (    Entry<String,String> entry : entrySet) {
      request.header(entry.getKey(),entry.getValue());
    }
  }
  if (!request.getHeaders().containsKey(USER_AGENT_HEADER)) {
    request.header(USER_AGENT_HEADER,USER_AGENT);
  }
  if (!request.getHeaders().containsKey(ACCEPT_ENCODING_HEADER)) {
    request.header(ACCEPT_ENCODING_HEADER,""String_Node_Str"");
  }
  HttpRequestBase reqObj=null;
  String urlToRequest=null;
  try {
    URL url=new URL(request.getUrl());
    URI uri=new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),URLDecoder.decode(url.getPath(),""String_Node_Str""),""String_Node_Str"",url.getRef());
    urlToRequest=uri.toURL().toString();
    if (url.getQuery() != null && !url.getQuery().trim().equals(""String_Node_Str"")) {
      if (!urlToRequest.substring(urlToRequest.length() - 1).equals(""String_Node_Str"")) {
        urlToRequest+=""String_Node_Str"";
      }
      urlToRequest+=url.getQuery();
    }
 else     if (urlToRequest.substring(urlToRequest.length() - 1).equals(""String_Node_Str"")) {
      urlToRequest=urlToRequest.substring(0,urlToRequest.length() - 1);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
switch (request.getHttpMethod()) {
case GET:
    reqObj=new HttpGet(urlToRequest);
  break;
case POST:
reqObj=new HttpPost(urlToRequest);
break;
case PUT:
reqObj=new HttpPut(urlToRequest);
break;
case DELETE:
reqObj=new HttpDeleteWithBody(urlToRequest);
break;
case PATCH:
reqObj=new HttpPatchWithBody(urlToRequest);
break;
case OPTIONS:
reqObj=new HttpOptions(urlToRequest);
break;
case HEAD:
reqObj=new HttpHead(urlToRequest);
break;
}
Set<Entry<String,List<String>>> entrySet=request.getHeaders().entrySet();
for (Entry<String,List<String>> entry : entrySet) {
List<String> values=entry.getValue();
if (values != null) {
for (String value : values) {
reqObj.addHeader(entry.getKey(),value);
}
}
}
if (!(request.getHttpMethod() == HttpMethod.GET || request.getHttpMethod() == HttpMethod.HEAD)) {
if (request.getBody() != null) {
HttpEntity entity=request.getBody().getEntity();
if (async) {
if (reqObj.getHeaders(CONTENT_TYPE) == null || reqObj.getHeaders(CONTENT_TYPE).length == 0) {
reqObj.setHeader(entity.getContentType());
}
try {
ByteArrayOutputStream output=new ByteArrayOutputStream();
entity.writeTo(output);
NByteArrayEntity en=new NByteArrayEntity(output.toByteArray());
((HttpEntityEnclosingRequestBase)reqObj).setEntity(en);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
 else {
((HttpEntityEnclosingRequestBase)reqObj).setEntity(entity);
}
}
}
return reqObj;
}","private static HttpRequestBase prepareRequest(HttpRequest request,boolean async){
  Object defaultHeaders=Options.getOption(Option.DEFAULT_HEADERS);
  if (defaultHeaders != null) {
    @SuppressWarnings(""String_Node_Str"") Set<Entry<String,String>> entrySet=((Map<String,String>)defaultHeaders).entrySet();
    for (    Entry<String,String> entry : entrySet) {
      request.header(entry.getKey(),entry.getValue());
    }
  }
  if (!request.getHeaders().containsKey(USER_AGENT_HEADER)) {
    request.header(USER_AGENT_HEADER,USER_AGENT);
  }
  if (!request.getHeaders().containsKey(ACCEPT_ENCODING_HEADER)) {
    request.header(ACCEPT_ENCODING_HEADER,""String_Node_Str"");
  }
  HttpRequestBase reqObj=null;
  String urlToRequest=uriFormatter.apply(request);
switch (request.getHttpMethod()) {
case GET:
    reqObj=new HttpGet(urlToRequest);
  break;
case POST:
reqObj=new HttpPost(urlToRequest);
break;
case PUT:
reqObj=new HttpPut(urlToRequest);
break;
case DELETE:
reqObj=new HttpDeleteWithBody(urlToRequest);
break;
case PATCH:
reqObj=new HttpPatchWithBody(urlToRequest);
break;
case OPTIONS:
reqObj=new HttpOptions(urlToRequest);
break;
case HEAD:
reqObj=new HttpHead(urlToRequest);
break;
}
Set<Entry<String,List<String>>> entrySet=request.getHeaders().entrySet();
for (Entry<String,List<String>> entry : entrySet) {
List<String> values=entry.getValue();
if (values != null) {
for (String value : values) {
reqObj.addHeader(entry.getKey(),value);
}
}
}
if (!(request.getHttpMethod() == HttpMethod.GET || request.getHttpMethod() == HttpMethod.HEAD)) {
if (request.getBody() != null) {
HttpEntity entity=request.getBody().getEntity();
if (async) {
if (reqObj.getHeaders(CONTENT_TYPE) == null || reqObj.getHeaders(CONTENT_TYPE).length == 0) {
reqObj.setHeader(entity.getContentType());
}
try {
ByteArrayOutputStream output=new ByteArrayOutputStream();
entity.writeTo(output);
NByteArrayEntity en=new NByteArrayEntity(output.toByteArray());
((HttpEntityEnclosingRequestBase)reqObj).setEntity(en);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
 else {
((HttpEntityEnclosingRequestBase)reqObj).setEntity(entity);
}
}
}
return reqObj;
}"
68931,"@SuppressWarnings(""String_Node_Str"") public HttpResponse(org.apache.http.HttpResponse response,Class<T> responseClass){
  HttpEntity responseEntity=response.getEntity();
  Header[] allHeaders=response.getAllHeaders();
  for (  Header header : allHeaders) {
    String headerName=header.getName().toLowerCase();
    List<String> list=headers.get(headerName);
    if (list == null)     list=new ArrayList<String>();
    list.add(header.getValue());
    headers.put(headerName,list);
  }
  this.code=response.getStatusLine().getStatusCode();
  String charset=""String_Node_Str"";
  Header contentType=responseEntity.getContentType();
  if (contentType != null) {
    String responseCharset=ResponseUtils.getCharsetFromContentType(contentType.getValue());
    if (responseCharset != null && !responseCharset.trim().equals(""String_Node_Str"")) {
      charset=responseCharset;
    }
  }
  if (responseEntity != null) {
    try {
      byte[] rawBody;
      try {
        InputStream responseInputStream=responseEntity.getContent();
        if (ResponseUtils.isGzipped(responseEntity.getContentEncoding())) {
          responseInputStream=new GZIPInputStream(responseEntity.getContent());
        }
        rawBody=ResponseUtils.getBytes(responseInputStream);
      }
 catch (      IOException e2) {
        throw new RuntimeException(e2);
      }
      InputStream inputStream=new ByteArrayInputStream(rawBody);
      this.rawBody=inputStream;
      if (JsonNode.class.equals(responseClass)) {
        String jsonString=new String(rawBody,charset).trim();
        this.body=(T)new JsonNode(jsonString);
      }
 else       if (String.class.equals(responseClass)) {
        this.body=(T)new String(rawBody,charset);
      }
 else       if (InputStream.class.equals(responseClass)) {
        this.body=(T)this.rawBody;
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public HttpResponse(org.apache.http.HttpResponse response,Class<T> responseClass){
  HttpEntity responseEntity=response.getEntity();
  Header[] allHeaders=response.getAllHeaders();
  for (  Header header : allHeaders) {
    String headerName=header.getName().toLowerCase();
    List<String> list=headers.get(headerName);
    if (list == null)     list=new ArrayList<String>();
    list.add(header.getValue());
    headers.put(headerName,list);
  }
  this.code=response.getStatusLine().getStatusCode();
  if (responseEntity != null) {
    String charset=""String_Node_Str"";
    Header contentType=responseEntity.getContentType();
    if (contentType != null) {
      String responseCharset=ResponseUtils.getCharsetFromContentType(contentType.getValue());
      if (responseCharset != null && !responseCharset.trim().equals(""String_Node_Str"")) {
        charset=responseCharset;
      }
    }
    try {
      byte[] rawBody;
      try {
        InputStream responseInputStream=responseEntity.getContent();
        if (ResponseUtils.isGzipped(responseEntity.getContentEncoding())) {
          responseInputStream=new GZIPInputStream(responseEntity.getContent());
        }
        rawBody=ResponseUtils.getBytes(responseInputStream);
      }
 catch (      IOException e2) {
        throw new RuntimeException(e2);
      }
      InputStream inputStream=new ByteArrayInputStream(rawBody);
      this.rawBody=inputStream;
      if (JsonNode.class.equals(responseClass)) {
        String jsonString=new String(rawBody,charset).trim();
        this.body=(T)new JsonNode(jsonString);
      }
 else       if (String.class.equals(responseClass)) {
        this.body=(T)new String(rawBody,charset);
      }
 else       if (InputStream.class.equals(responseClass)) {
        this.body=(T)this.rawBody;
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}"
68932,"@SuppressWarnings(""String_Node_Str"") public static <T>MashapeResponse<T> getResponse(ResponseType responseType,HttpResponse response){
  MashapeResponse<T> mashapeResponse=null;
  HttpEntity entity=response.getEntity();
  if (entity != null) {
    try {
      byte[] rawBody;
      try {
        rawBody=getBytes(entity.getContent());
      }
 catch (      IOException e2) {
        throw new RuntimeException(e2);
      }
      InputStream inputStream=new ByteArrayInputStream(rawBody);
switch (responseType) {
case BINARY:
        mashapeResponse=(MashapeResponse<T>)new MashapeResponse<InputStream>(response,inputStream,inputStream);
      break;
case STRING:
    mashapeResponse=(MashapeResponse<T>)new MashapeResponse<String>(response,inputStream,new String(rawBody));
  break;
case JSON:
String jsonString=new String(rawBody).trim();
if (jsonString.startsWith(""String_Node_Str"")) {
try {
  mashapeResponse=(MashapeResponse<T>)new MashapeResponse<JSONArray>(response,inputStream,new JSONArray(jsonString));
}
 catch (Exception e) {
  throw new RuntimeException(""String_Node_Str"" + jsonString);
}
}
 else {
try {
  mashapeResponse=(MashapeResponse<T>)new MashapeResponse<JSONObject>(response,inputStream,new JSONObject(jsonString));
}
 catch (Exception e) {
  throw new InvalidJsonResponseException(jsonString);
}
}
break;
}
}
 catch (Exception e1) {
throw new RuntimeException(e1);
}
}
return mashapeResponse;
}","@SuppressWarnings(""String_Node_Str"") public static <T>MashapeResponse<T> getResponse(ResponseType responseType,HttpResponse response){
  MashapeResponse<T> mashapeResponse=null;
  HttpEntity entity=response.getEntity();
  if (entity != null) {
    try {
      byte[] rawBody;
      try {
        rawBody=getBytes(entity.getContent());
      }
 catch (      IOException e2) {
        throw new RuntimeException(e2);
      }
      InputStream inputStream=new ByteArrayInputStream(rawBody);
switch (responseType) {
case BINARY:
        mashapeResponse=(MashapeResponse<T>)new MashapeResponse<InputStream>(response,inputStream,inputStream);
      break;
case STRING:
    mashapeResponse=(MashapeResponse<T>)new MashapeResponse<String>(response,inputStream,new String(rawBody));
  break;
case JSON:
String jsonString=new String(rawBody).trim();
if (jsonString.startsWith(""String_Node_Str"")) {
try {
  mashapeResponse=(MashapeResponse<T>)new MashapeResponse<JSONArray>(response,inputStream,new JSONArray(jsonString));
}
 catch (Exception e) {
  throw new InvalidJsonArrayException(jsonString);
}
}
 else {
try {
  mashapeResponse=(MashapeResponse<T>)new MashapeResponse<JSONObject>(response,inputStream,new JSONObject(jsonString));
}
 catch (Exception e) {
  throw new InvalidJsonObjectException(jsonString);
}
}
break;
}
}
 catch (Exception e1) {
throw new RuntimeException(e1);
}
}
return mashapeResponse;
}"
68933,"public static RequestPrepareResult prepareRequest(String url,Map<String,String> parameters,boolean addRegularQueryStringParameters) throws UnsupportedEncodingException {
  if (parameters == null) {
    parameters=new HashMap<String,String>();
  }
  Set<String> keySet=new HashSet<String>(parameters.keySet());
  for (  String key : keySet) {
    if (parameters.get(key) == null) {
      parameters.remove(key);
    }
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher matcher=p.matcher(url);
  String finalUrl=url;
  while (matcher.find()) {
    String key=matcher.group(1);
    if (parameters.containsKey(key)) {
      String parameterValue=parameters.get(key);
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"" + URLEncoder.encode(parameterValue,""String_Node_Str""));
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",UriUtils.encodeUri(parameterValue,""String_Node_Str""));
    }
 else {
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"");
    }
  }
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (addRegularQueryStringParameters) {
    addRegularQueryStringParameters(finalUrl,parameters);
  }
  return new RequestPrepareResult(finalUrl,parameters);
}","public static RequestPrepareResult prepareRequest(String url,Map<String,String> parameters,boolean addRegularQueryStringParameters) throws UnsupportedEncodingException {
  if (parameters == null) {
    parameters=new HashMap<String,String>();
  }
  Set<String> keySet=new HashSet<String>(parameters.keySet());
  for (  String key : keySet) {
    if (parameters.get(key) == null) {
      parameters.remove(key);
    }
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher matcher=p.matcher(url);
  String finalUrl=url;
  while (matcher.find()) {
    String key=matcher.group(1);
    if (parameters.containsKey(key)) {
      String parameterValue=parameters.get(key);
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"" + URLEncoder.encode(parameterValue,""String_Node_Str""));
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",UriUtils.encodeUri(parameterValue,""String_Node_Str""));
    }
 else {
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"");
    }
  }
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (addRegularQueryStringParameters) {
    addRegularQueryStringParameters(finalUrl,parameters);
  }
 else {
    for (    String key : parameters.keySet()) {
      String delimiter=(finalUrl.indexOf(""String_Node_Str"") > 0) ? ""String_Node_Str"" : ""String_Node_Str"";
      finalUrl+=delimiter + key + ""String_Node_Str""+ parameters.get(key);
    }
  }
  return new RequestPrepareResult(finalUrl,parameters);
}"
68934,"public static RequestPrepareResult prepareRequest(String url,Map<String,String> parameters,boolean addRegularQueryStringParameters) throws UnsupportedEncodingException {
  if (parameters == null) {
    parameters=new HashMap<String,String>();
  }
  Set<String> keySet=new HashSet<String>(parameters.keySet());
  for (  String key : keySet) {
    if (parameters.get(key) == null) {
      parameters.remove(key);
    }
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher matcher=p.matcher(url);
  String finalUrl=url;
  while (matcher.find()) {
    String key=matcher.group(1);
    if (parameters.containsKey(key)) {
      String parameterValue=parameters.get(key);
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"" + URLEncoder.encode(parameterValue,""String_Node_Str""));
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",UriUtils.encodeUri(parameterValue,""String_Node_Str""));
    }
 else {
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"");
    }
  }
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (addRegularQueryStringParameters) {
    addRegularQueryStringParameters(finalUrl,parameters);
  }
 else {
    for (    String key : parameters.keySet()) {
      String delimiter=(finalUrl.indexOf(""String_Node_Str"") > 0) ? ""String_Node_Str"" : ""String_Node_Str"";
      finalUrl+=delimiter + key + ""String_Node_Str""+ parameters.get(key);
    }
  }
  return new RequestPrepareResult(finalUrl,parameters);
}","public static RequestPrepareResult prepareRequest(String url,Map<String,String> parameters,boolean addRegularQueryStringParameters) throws UnsupportedEncodingException {
  if (parameters == null) {
    parameters=new HashMap<String,String>();
  }
  Set<String> keySet=new HashSet<String>(parameters.keySet());
  for (  String key : keySet) {
    if (parameters.get(key) == null) {
      parameters.remove(key);
    }
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher matcher=p.matcher(url);
  String finalUrl=url;
  while (matcher.find()) {
    String key=matcher.group(1);
    if (parameters.containsKey(key)) {
      String parameterValue=parameters.get(key);
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"" + URLEncoder.encode(parameterValue,""String_Node_Str""));
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",UriUtils.encodeUri(parameterValue,""String_Node_Str""));
      parameters.remove(key);
    }
 else {
      finalUrl=finalUrl.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str"");
    }
  }
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  finalUrl=finalUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (addRegularQueryStringParameters) {
    addRegularQueryStringParameters(finalUrl,parameters);
  }
 else {
    for (    String key : parameters.keySet()) {
      String delimiter=(finalUrl.indexOf(""String_Node_Str"") > 0) ? ""String_Node_Str"" : ""String_Node_Str"";
      finalUrl+=delimiter + key + ""String_Node_Str""+ parameters.get(key);
    }
  }
  return new RequestPrepareResult(finalUrl,parameters);
}"
68935,"@Test public void testPrepareRequest() throws UnsupportedEncodingException {
  RequestPrepareResult prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",null,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",new HashMap<String,String>(),false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",null,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",null,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",null);
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(1,parameters.size());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(3,parameters.size());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(3,parameters.size());
  assertEquals(parameters,prepareRequest.getParameters());
}","@Test public void testPrepareRequest() throws UnsupportedEncodingException {
  RequestPrepareResult prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",null,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",new HashMap<String,String>(),false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",null,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",null,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(new HashMap<String,String>(),prepareRequest.getParameters());
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",null);
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(0,parameters.size());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(0,parameters.size());
  assertEquals(parameters,prepareRequest.getParameters());
  parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  prepareRequest=UrlUtils.prepareRequest(""String_Node_Str"",parameters,false);
  assertEquals(""String_Node_Str"",prepareRequest.getUrl());
  assertEquals(0,parameters.size());
  assertEquals(parameters,prepareRequest.getParameters());
}"
68936,"private MutableIntList getScoreStatistics(){
  List<String> response=gtpClient.sendCommand(""String_Node_Str"");
  return GtpClient.parseResponseIntTable(response);
}","private MutableIntList getScoreStatistics(){
  List<String> response=gtpClient.sendCommand(""String_Node_Str"");
  return GtpCommand.parseResponseIntTable(response);
}"
68937,"@Override public double[] estimateInfluences(){
  List<String> response=estimateInfluencesRaw();
  MutableIntList territories=GtpClient.parseResponseIntTable(response);
  MutableDoubleList influences=territories.collectDouble(influence -> {
    if (-300 < influence && influence < 300) {
      influence=0;
    }
 else     if (influence > 800) {
      influence=800;
    }
 else     if (influence < -800) {
      influence=-800;
    }
    return influence / 800.0;
  }
,new DoubleArrayList(Board.BOARD_SIZE * Board.BOARD_SIZE));
  double[] influencesAdjusted=new double[Board.BOARD_SIZE * Board.BOARD_SIZE];
  for (int i=0; i < Board.BOARD_SIZE; i++) {
    for (int j=0; j < Board.BOARD_SIZE; j++) {
      influencesAdjusted[Board.getIndex(j,Board.BOARD_SIZE - 1 - i)]=influences.get(Board.getIndex(i,j));
    }
  }
  return influencesAdjusted;
}","@Override public double[] estimateInfluences(){
  List<String> response=estimateInfluencesRaw();
  MutableIntList territories=GtpCommand.parseResponseIntTable(response);
  MutableDoubleList influences=territories.collectDouble(influence -> {
    if (-300 < influence && influence < 300) {
      influence=0;
    }
 else     if (influence > 800) {
      influence=800;
    }
 else     if (influence < -800) {
      influence=-800;
    }
    return influence / 800.0;
  }
,new DoubleArrayList(Board.BOARD_SIZE * Board.BOARD_SIZE));
  double[] influencesAdjusted=new double[Board.BOARD_SIZE * Board.BOARD_SIZE];
  for (int i=0; i < Board.BOARD_SIZE; i++) {
    for (int j=0; j < Board.BOARD_SIZE; j++) {
      influencesAdjusted[Board.getIndex(j,Board.BOARD_SIZE - 1 - i)]=influences.get(Board.getIndex(i,j));
    }
  }
  return influencesAdjusted;
}"
68938,"public void clear(){
  try {
    document.remove(0,document.getLength());
  }
 catch (  BadLocationException e) {
    throw new GenericLizzieException(""String_Node_Str"",e);
  }
}","public void clear(){
  try {
    document.remove(0,document.getLength());
    documentLines.clear();
  }
 catch (  BadLocationException e) {
    throw new GenericLizzieException(""String_Node_Str"",e);
  }
}"
68939,"@Override public void headMoved(BoardHistoryNode oldHead,BoardHistoryNode newHead){
  int lastMoveNumberInTable=histogramEntryList.get(histogramEntryList.size() - 1).getMoveNumber();
  if (newHead.getData().getMoveNumber() > lastMoveNumberInTable) {
    BoardHistoryNode node=oldHead.getNext();
    do {
      addHistogramData(node.getData());
    }
 while (node != newHead);
  }
 else {
    histogramEntryList.removeIf(entry -> entry.getMoveNumber() > newHead.getData().getMoveNumber());
  }
  rebuildFilteredHistogramData();
  if (refreshObserver != null) {
    Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
  }
}","@Override public void headMoved(BoardHistoryNode oldHead,BoardHistoryNode newHead){
  int lastMoveNumberInTable=histogramEntryList.get(histogramEntryList.size() - 1).getMoveNumber();
  if (newHead.getData().getMoveNumber() > lastMoveNumberInTable) {
    BoardHistoryNode node;
    do {
      node=oldHead.getNext();
      addHistogramData(node.getData());
    }
 while (node != newHead);
  }
 else {
    histogramEntryList.removeIf(entry -> entry.getMoveNumber() > newHead.getData().getMoveNumber());
  }
  rebuildFilteredHistogramData();
  if (refreshObserver != null) {
    Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
  }
}"
68940,"public WinrateHistogramTableModel(){
  histogramEntryList=new ArrayList<>();
  histogramEntryFilteredList=new ArrayList<>();
  provideFilteredData=true;
  Lizzie.board.registerBoardStateChangeObserver(new BoardStateChangeObserver(){
    @Override public void mainStreamAppended(    BoardHistoryNode newNodeBegin,    BoardHistoryNode head){
      newNodeBegin.forEach(WinrateHistogramTableModel.this::addHistogramData);
      rebuildFilteredHistogramData();
      fireTableDataChanged();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
    @Override public void mainStreamCut(    BoardHistoryNode nodeBeforeCutPoint,    BoardHistoryNode head){
      histogramEntryList.removeIf(entry -> entry.getMoveNumber() > nodeBeforeCutPoint.getData().getMoveNumber());
      histogramEntryFilteredList.removeIf(entry -> entry.getMoveNumber() > nodeBeforeCutPoint.getData().getMoveNumber());
      rebuildFilteredHistogramData();
      fireTableDataChanged();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
    @Override public void headMoved(    BoardHistoryNode oldHead,    BoardHistoryNode newHead){
      int lastMoveNumberInTable=histogramEntryList.get(histogramEntryList.size() - 1).getMoveNumber();
      if (newHead.getData().getMoveNumber() > lastMoveNumberInTable) {
        BoardHistoryNode node=oldHead.getNext();
        do {
          addHistogramData(node.getData());
        }
 while (node != newHead);
      }
 else {
        histogramEntryList.removeIf(entry -> entry.getMoveNumber() > newHead.getData().getMoveNumber());
      }
      rebuildFilteredHistogramData();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
    @Override public void boardCleared(){
      histogramEntryList.clear();
      histogramEntryFilteredList.clear();
      fireTableDataChanged();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
  }
);
  Lizzie.leelaz.registerBestMoveObserver(new BestMoveObserver(){
    @Override public void bestMovesUpdated(    int boardStateCount,    List<MoveData> newBestMoves){
      if (boardStateCount < histogramEntryList.size() && CollectionUtils.isNotEmpty(newBestMoves)) {
        MoveData moveData=newBestMoves.get(0);
        WinrateHistogramEntry histogramEntry=histogramEntryList.get(boardStateCount);
        if (Objects.equals(histogramEntry.getColor(),WinrateHistogramEntry.COLOR_BLACK)) {
          histogramEntry.setWhiteWinrate(moveData.getWinrate());
        }
 else {
          histogramEntry.setBlackWinrate(moveData.getWinrate());
        }
        if (boardStateCount > 0) {
          histogramEntry.setBlackWindiff(histogramEntry.getBlackWinrate() - histogramEntryList.get(boardStateCount - 1).getBlackWinrate());
        }
        rebuildFilteredHistogramData();
        fireTableDataChanged();
        if (refreshObserver != null) {
          Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
        }
      }
    }
    @Override public void engineRestarted(){
    }
  }
);
}","public WinrateHistogramTableModel(){
  histogramEntryList=new ArrayList<>();
  histogramEntryFilteredList=new ArrayList<>();
  provideFilteredData=true;
  Lizzie.board.registerBoardStateChangeObserver(new BoardStateChangeObserver(){
    @Override public void mainStreamAppended(    BoardHistoryNode newNodeBegin,    BoardHistoryNode head){
      newNodeBegin.forEach(WinrateHistogramTableModel.this::addHistogramData);
      rebuildFilteredHistogramData();
      fireTableDataChanged();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
    @Override public void mainStreamCut(    BoardHistoryNode nodeBeforeCutPoint,    BoardHistoryNode head){
      histogramEntryList.removeIf(entry -> entry.getMoveNumber() > nodeBeforeCutPoint.getData().getMoveNumber());
      histogramEntryFilteredList.removeIf(entry -> entry.getMoveNumber() > nodeBeforeCutPoint.getData().getMoveNumber());
      rebuildFilteredHistogramData();
      fireTableDataChanged();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
    @Override public void headMoved(    BoardHistoryNode oldHead,    BoardHistoryNode newHead){
      int lastMoveNumberInTable=histogramEntryList.get(histogramEntryList.size() - 1).getMoveNumber();
      if (newHead.getData().getMoveNumber() > lastMoveNumberInTable) {
        BoardHistoryNode node;
        do {
          node=oldHead.getNext();
          addHistogramData(node.getData());
        }
 while (node != newHead);
      }
 else {
        histogramEntryList.removeIf(entry -> entry.getMoveNumber() > newHead.getData().getMoveNumber());
      }
      rebuildFilteredHistogramData();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
    @Override public void boardCleared(){
      histogramEntryList.clear();
      histogramEntryFilteredList.clear();
      fireTableDataChanged();
      if (refreshObserver != null) {
        Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
      }
    }
  }
);
  Lizzie.leelaz.registerBestMoveObserver(new BestMoveObserver(){
    @Override public void bestMovesUpdated(    int boardStateCount,    List<MoveData> newBestMoves){
      if (boardStateCount < histogramEntryList.size() && CollectionUtils.isNotEmpty(newBestMoves)) {
        MoveData moveData=newBestMoves.get(0);
        WinrateHistogramEntry histogramEntry=histogramEntryList.get(boardStateCount);
        if (Objects.equals(histogramEntry.getColor(),WinrateHistogramEntry.COLOR_BLACK)) {
          histogramEntry.setWhiteWinrate(moveData.getWinrate());
        }
 else {
          histogramEntry.setBlackWinrate(moveData.getWinrate());
        }
        if (boardStateCount > 0) {
          histogramEntry.setBlackWindiff(histogramEntry.getBlackWinrate() - histogramEntryList.get(boardStateCount - 1).getBlackWinrate());
        }
        rebuildFilteredHistogramData();
        fireTableDataChanged();
        if (refreshObserver != null) {
          Lizzie.miscExecutor.execute(() -> refreshObserver.accept(WinrateHistogramTableModel.this));
        }
      }
    }
    @Override public void engineRestarted(){
    }
  }
);
}"
68941,"/** 
 * Creates a window and refreshes the game state at FPS.
 */
public LizzieFrame(){
  super();
  setTitle(LIZZIE_TITLE + ""String_Node_Str"" + engineProfile+ ""String_Node_Str"");
  Input input=new Input();
  this.addKeyListener(input);
  this.addMouseWheelListener(input);
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      if (Lizzie.board.getHistory().getInitialNode().getNext() != null) {
        Lizzie.storeGameByFile(Paths.get(""String_Node_Str""));
      }
      Lizzie.leelaz.setNormalExit(true);
      Lizzie.readGuiPosition();
      Lizzie.writeSettingFile();
      Lizzie.leelaz.close();
      Lizzie.exitLizzie(0);
    }
  }
);
  initMenu(input);
  boardRenderer=new BoardRenderer();
  mainPanel=new JPanel(true){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      paintBoardAndBackground(g);
    }
  }
;
  mainPanel.addMouseMotionListener(input);
  mainPanel.addMouseListener(input);
  setAlwaysOnTop(Lizzie.optionSetting.isMainWindowAlwaysOnTop());
  getContentPane().add(mainPanel,BorderLayout.CENTER);
  setVisible(true);
}","/** 
 * Creates a window and refreshes the game state at FPS.
 */
public LizzieFrame(){
  super();
  setTitle(LIZZIE_TITLE + ""String_Node_Str"" + engineProfile+ ""String_Node_Str"");
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      if (Lizzie.board.getHistory().getInitialNode().getNext() != null) {
        Lizzie.storeGameByFile(Paths.get(""String_Node_Str""));
      }
      Lizzie.leelaz.setNormalExit(true);
      Lizzie.readGuiPosition();
      Lizzie.writeSettingFile();
      Lizzie.leelaz.close();
      Lizzie.exitLizzie(0);
    }
  }
);
  Input input=new Input();
  initMenu(input);
  boardRenderer=new BoardRenderer();
  mainPanel=new JPanel(true){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      paintBoardAndBackground(g);
    }
  }
;
  mainPanel.addMouseMotionListener(input);
  mainPanel.addMouseListener(input);
  mainPanel.addMouseWheelListener(input);
  this.addKeyListener(input);
  setAlwaysOnTop(Lizzie.optionSetting.isMainWindowAlwaysOnTop());
  getContentPane().add(mainPanel,BorderLayout.CENTER);
  setVisible(true);
}"
68942,"@Override public void keyPressed(KeyEvent e){
  if (e.getKeyCode() != KeyEvent.VK_W) {
    Lizzie.analysisFrame.getAnalysisTableModel().setSelectedMove(null);
  }
  if (e.getKeyCode() == KeyEvent.VK_O && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_R) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.loadGameByPrompting();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_W) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.storeGameByPrompting();
  }
  if (e.getKeyCode() == KeyEvent.VK_C && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {
    Lizzie.copyGameToClipboardInSgf();
  }
  if (e.getKeyCode() == KeyEvent.VK_V && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {
    Lizzie.pasteGameFromClipboardInSgf();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
    Lizzie.board.nextMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_LEFT) {
    Lizzie.board.previousMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_SPACE) {
    Lizzie.leelaz.togglePonder();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_P) {
    Lizzie.board.pass();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_N) {
    Lizzie.frame.toggleShowMoveNumber();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_O) {
    Lizzie.optionDialog.setDialogSetting(Lizzie.optionSetting);
    Lizzie.optionDialog.setVisible(true);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_C && (e.getModifiers() & KeyEvent.ALT_MASK) != 0) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.clearBoardAndState();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_G) {
    String inputMoveNumberString=JOptionPane.showInputDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
    if (inputMoveNumberString != null && !(inputMoveNumberString=inputMoveNumberString.trim()).isEmpty()) {
      try {
        int moveNumber=Integer.parseInt(inputMoveNumberString);
        if (inputMoveNumberString.startsWith(""String_Node_Str"") || inputMoveNumberString.startsWith(""String_Node_Str"")) {
          Lizzie.board.gotoMoveByDiff(moveNumber);
        }
 else {
          Lizzie.board.gotoMove(moveNumber);
        }
      }
 catch (      NumberFormatException ex) {
        JOptionPane.showMessageDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_V) {
    if (Lizzie.board.isInTryPlayState()) {
      Lizzie.board.leaveTryPlayState();
    }
 else {
      Lizzie.board.enterTryPlayState();
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_X) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.board.dropSuccessiveMoves();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_A) {
    Lizzie.optionSetting.setAnalysisWindowShow(!Lizzie.optionSetting.isAnalysisWindowShow());
    Lizzie.analysisDialog.setVisible(Lizzie.optionSetting.isAnalysisWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_H) {
    Lizzie.optionSetting.setWinrateHistogramWindowShow(!Lizzie.optionSetting.isWinrateHistogramWindowShow());
    Lizzie.winrateHistogramDialog.setVisible(Lizzie.optionSetting.isWinrateHistogramWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_F1) {
    if (!Lizzie.frame.showControls) {
      Lizzie.frame.showControls=true;
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_HOME) {
    Lizzie.board.gotoMove(0);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_END) {
    Lizzie.board.gotoMove(Integer.MAX_VALUE);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
    Lizzie.board.playBestMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S) {
    if (Lizzie.board.getData().isBlackToPlay()) {
      Lizzie.optionSetting.setShowBlackSuggestion(!Lizzie.optionSetting.isShowBlackSuggestion());
    }
 else {
      Lizzie.optionSetting.setShowWhiteSuggestion(!Lizzie.optionSetting.isShowWhiteSuggestion());
    }
  }
  Lizzie.frame.repaint();
}","@Override public void keyPressed(KeyEvent e){
  if (e.getKeyCode() == KeyEvent.VK_O && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_R) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.loadGameByPrompting();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_W) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.storeGameByPrompting();
  }
  if (e.getKeyCode() == KeyEvent.VK_C && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {
    Lizzie.copyGameToClipboardInSgf();
  }
  if (e.getKeyCode() == KeyEvent.VK_V && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {
    Lizzie.pasteGameFromClipboardInSgf();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
    Lizzie.board.nextMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_LEFT) {
    Lizzie.board.previousMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_SPACE) {
    Lizzie.leelaz.togglePonder();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_P) {
    Lizzie.board.pass();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_N) {
    Lizzie.frame.toggleShowMoveNumber();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_O) {
    Lizzie.optionDialog.setDialogSetting(Lizzie.optionSetting);
    Lizzie.optionDialog.setVisible(true);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_C && (e.getModifiers() & KeyEvent.ALT_MASK) != 0) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.clearBoardAndState();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_G) {
    String inputMoveNumberString=JOptionPane.showInputDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
    if (inputMoveNumberString != null && !(inputMoveNumberString=inputMoveNumberString.trim()).isEmpty()) {
      try {
        int moveNumber=Integer.parseInt(inputMoveNumberString);
        if (inputMoveNumberString.startsWith(""String_Node_Str"") || inputMoveNumberString.startsWith(""String_Node_Str"")) {
          Lizzie.board.gotoMoveByDiff(moveNumber);
        }
 else {
          Lizzie.board.gotoMove(moveNumber);
        }
      }
 catch (      NumberFormatException ex) {
        JOptionPane.showMessageDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_V) {
    if (Lizzie.board.isInTryPlayState()) {
      Lizzie.board.leaveTryPlayState();
    }
 else {
      Lizzie.board.enterTryPlayState();
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_X) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.board.dropSuccessiveMoves();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_A) {
    Lizzie.optionSetting.setAnalysisWindowShow(!Lizzie.optionSetting.isAnalysisWindowShow());
    Lizzie.analysisDialog.setVisible(Lizzie.optionSetting.isAnalysisWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_H) {
    Lizzie.optionSetting.setWinrateHistogramWindowShow(!Lizzie.optionSetting.isWinrateHistogramWindowShow());
    Lizzie.winrateHistogramDialog.setVisible(Lizzie.optionSetting.isWinrateHistogramWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_F1) {
    if (!Lizzie.frame.showControls) {
      Lizzie.frame.showControls=true;
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_HOME) {
    Lizzie.board.gotoMove(0);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_END) {
    Lizzie.board.gotoMove(Integer.MAX_VALUE);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
    Lizzie.board.playBestMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S) {
    if (Lizzie.board.getData().isBlackToPlay()) {
      Lizzie.optionSetting.setShowBlackSuggestion(!Lizzie.optionSetting.isShowBlackSuggestion());
    }
 else {
      Lizzie.optionSetting.setShowWhiteSuggestion(!Lizzie.optionSetting.isShowWhiteSuggestion());
    }
  }
  Lizzie.frame.repaint();
}"
68943,"@Override public void mouseWheelMoved(MouseWheelEvent e){
  Lizzie.analysisFrame.getAnalysisTableModel().setSelectedMove(null);
  if (e.getWheelRotation() > 0) {
    Lizzie.board.nextMove();
  }
 else   if (e.getWheelRotation() < 0) {
    Lizzie.board.previousMove();
  }
  Lizzie.frame.repaint();
}","@Override public void mouseWheelMoved(MouseWheelEvent e){
  if (e.getWheelRotation() > 0) {
    Lizzie.board.nextMove();
  }
 else   if (e.getWheelRotation() < 0) {
    Lizzie.board.previousMove();
  }
  Lizzie.frame.repaint();
}"
68944,"@Override public void keyPressed(KeyEvent e){
  if (e.getKeyCode() != KeyEvent.VK_W) {
    Lizzie.analysisFrame.getAnalysisTableModel().setSelectedMove(null);
  }
  if (e.getKeyCode() == KeyEvent.VK_O && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_R) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.loadGameByPrompting();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_W) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.storeGameByPrompting();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
    Lizzie.board.nextMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_LEFT) {
    Lizzie.board.previousMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_SPACE) {
    Lizzie.leelaz.togglePonder();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_P) {
    Lizzie.board.pass();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_N) {
    Lizzie.frame.toggleShowMoveNumber();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_O) {
    Lizzie.optionDialog.setDialogSetting(Lizzie.optionSetting);
    Lizzie.optionDialog.setVisible(true);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_C && (e.getModifiers() & KeyEvent.ALT_MASK) != 0) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.clearBoardAndState();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_G) {
    String inputMoveNumberString=JOptionPane.showInputDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
    if (inputMoveNumberString != null && !(inputMoveNumberString=inputMoveNumberString.trim()).isEmpty()) {
      try {
        int moveNumber=Integer.parseInt(inputMoveNumberString);
        if (inputMoveNumberString.startsWith(""String_Node_Str"") || inputMoveNumberString.startsWith(""String_Node_Str"")) {
          Lizzie.board.gotoMoveByDiff(moveNumber);
        }
 else {
          Lizzie.board.gotoMove(moveNumber);
        }
      }
 catch (      NumberFormatException ex) {
        JOptionPane.showMessageDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_V) {
    if (Lizzie.board.isInTryPlayState()) {
      Lizzie.board.leaveTryPlayState();
    }
 else {
      Lizzie.board.enterTryPlayState();
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_X) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.board.dropSuccessiveMoves();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_A) {
    Lizzie.optionSetting.setAnalysisWindowShow(!Lizzie.optionSetting.isAnalysisWindowShow());
    Lizzie.analysisDialog.setVisible(Lizzie.optionSetting.isAnalysisWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_H) {
    Lizzie.optionSetting.setWinrateHistogramWindowShow(!Lizzie.optionSetting.isWinrateHistogramWindowShow());
    Lizzie.winrateHistogramDialog.setVisible(Lizzie.optionSetting.isWinrateHistogramWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_F1) {
    if (!Lizzie.frame.showControls) {
      Lizzie.frame.showControls=true;
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_HOME) {
    Lizzie.board.gotoMove(0);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_END) {
    Lizzie.board.gotoMove(Lizzie.board.getData().getMoveNumber());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
    Lizzie.board.playBestMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S) {
    if (Lizzie.board.getData().isBlackToPlay()) {
      Lizzie.optionSetting.setShowBlackSuggestion(!Lizzie.optionSetting.isShowBlackSuggestion());
    }
 else {
      Lizzie.optionSetting.setShowWhiteSuggestion(!Lizzie.optionSetting.isShowWhiteSuggestion());
    }
  }
  Lizzie.frame.repaint();
}","@Override public void keyPressed(KeyEvent e){
  if (e.getKeyCode() != KeyEvent.VK_W) {
    Lizzie.analysisFrame.getAnalysisTableModel().setSelectedMove(null);
  }
  if (e.getKeyCode() == KeyEvent.VK_O && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_R) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.loadGameByPrompting();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S && (e.getModifiers() & KeyEvent.CTRL_MASK) != 0 || e.getKeyCode() == KeyEvent.VK_W) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.storeGameByPrompting();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
    Lizzie.board.nextMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_LEFT) {
    Lizzie.board.previousMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_SPACE) {
    Lizzie.leelaz.togglePonder();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_P) {
    Lizzie.board.pass();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_N) {
    Lizzie.frame.toggleShowMoveNumber();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_O) {
    Lizzie.optionDialog.setDialogSetting(Lizzie.optionSetting);
    Lizzie.optionDialog.setVisible(true);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_C && (e.getModifiers() & KeyEvent.ALT_MASK) != 0) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.clearBoardAndState();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_G) {
    String inputMoveNumberString=JOptionPane.showInputDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
    if (inputMoveNumberString != null && !(inputMoveNumberString=inputMoveNumberString.trim()).isEmpty()) {
      try {
        int moveNumber=Integer.parseInt(inputMoveNumberString);
        if (inputMoveNumberString.startsWith(""String_Node_Str"") || inputMoveNumberString.startsWith(""String_Node_Str"")) {
          Lizzie.board.gotoMoveByDiff(moveNumber);
        }
 else {
          Lizzie.board.gotoMove(moveNumber);
        }
      }
 catch (      NumberFormatException ex) {
        JOptionPane.showMessageDialog(Lizzie.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_V) {
    if (Lizzie.board.isInTryPlayState()) {
      Lizzie.board.leaveTryPlayState();
    }
 else {
      Lizzie.board.enterTryPlayState();
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_X) {
    Lizzie.board.leaveTryPlayState();
    Lizzie.board.dropSuccessiveMoves();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_A) {
    Lizzie.optionSetting.setAnalysisWindowShow(!Lizzie.optionSetting.isAnalysisWindowShow());
    Lizzie.analysisDialog.setVisible(Lizzie.optionSetting.isAnalysisWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_H) {
    Lizzie.optionSetting.setWinrateHistogramWindowShow(!Lizzie.optionSetting.isWinrateHistogramWindowShow());
    Lizzie.winrateHistogramDialog.setVisible(Lizzie.optionSetting.isWinrateHistogramWindowShow());
  }
 else   if (e.getKeyCode() == KeyEvent.VK_F1) {
    if (!Lizzie.frame.showControls) {
      Lizzie.frame.showControls=true;
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_HOME) {
    Lizzie.board.gotoMove(0);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_END) {
    Lizzie.board.gotoMove(Integer.MAX_VALUE);
  }
 else   if (e.getKeyCode() == KeyEvent.VK_ENTER) {
    Lizzie.board.playBestMove();
  }
 else   if (e.getKeyCode() == KeyEvent.VK_S) {
    if (Lizzie.board.getData().isBlackToPlay()) {
      Lizzie.optionSetting.setShowBlackSuggestion(!Lizzie.optionSetting.isShowBlackSuggestion());
    }
 else {
      Lizzie.optionSetting.setShowWhiteSuggestion(!Lizzie.optionSetting.isShowWhiteSuggestion());
    }
  }
  Lizzie.frame.repaint();
}"
68945,"/** 
 * Goes to the next coordinate, thread safe
 */
public void nextMove(){
synchronized (this) {
    BoardHistoryNode oldHead=history.getHead();
    if (history.next() != null) {
      observerCollection.headMoved(oldHead,history.getHead());
      final Stone colorToPlay=history.getLastMoveColor();
      if (history.getData().getLastMove() == null) {
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(colorToPlay,""String_Node_Str"");
          Lizzie.leelaz.ponder();
        }
);
      }
 else {
        final String locationToPlay=convertCoordinatesToName(history.getLastMove()[0],history.getLastMove()[1]);
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(colorToPlay,locationToPlay);
          Lizzie.leelaz.ponder();
        }
);
      }
    }
  }
}","/** 
 * Goes to the next coordinate, thread safe
 */
public boolean nextMove(){
synchronized (this) {
    BoardHistoryNode oldHead=history.getHead();
    if (history.next() != null) {
      observerCollection.headMoved(oldHead,history.getHead());
      final Stone colorToPlay=history.getLastMoveColor();
      if (history.getData().getLastMove() == null) {
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(colorToPlay,""String_Node_Str"");
          Lizzie.leelaz.ponder();
        }
);
      }
 else {
        final String locationToPlay=convertCoordinatesToName(history.getLastMove()[0],history.getLastMove()[1]);
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(colorToPlay,locationToPlay);
          Lizzie.leelaz.ponder();
        }
);
      }
      return true;
    }
 else {
      return false;
    }
  }
}"
68946,"/** 
 * Goes to the previous coordinate, thread safe
 */
public void previousMove(){
synchronized (this) {
    BoardHistoryNode oldHead=history.getHead();
    if (history.previous() != null) {
      observerCollection.headMoved(oldHead,history.getHead());
      leelazExecutor.execute(() -> {
        Lizzie.leelaz.undo();
        Lizzie.leelaz.ponder();
      }
);
    }
  }
}","/** 
 * Goes to the previous coordinate, thread safe
 */
public boolean previousMove(){
synchronized (this) {
    BoardHistoryNode oldHead=history.getHead();
    if (history.previous() != null) {
      observerCollection.headMoved(oldHead,history.getHead());
      leelazExecutor.execute(() -> {
        Lizzie.leelaz.undo();
        Lizzie.leelaz.ponder();
      }
);
      return true;
    }
 else {
      return false;
    }
  }
}"
68947,"private void goBackward(int count){
  for (int i=0; i < count; ++i) {
    previousMove();
  }
}","private void goBackward(int count){
  for (int i=0; i < count; ++i) {
    if (!previousMove()) {
      break;
    }
  }
}"
68948,"private void goForward(int count){
  for (int i=0; i < count; ++i) {
    nextMove();
  }
}","private void goForward(int count){
  for (int i=0; i < count; ++i) {
    if (!nextMove()) {
      break;
    }
  }
}"
68949,"private void initVariables(){
  userApproved=false;
  profileList=Lizzie.optionSetting.getEngineProfileList();
}","private void initVariables(){
  userApproved=false;
  profileList=Lizzie.optionSetting.getEngineProfileList();
  if (CollectionUtils.isNotEmpty(profileList)) {
    textFieldProfile1.setText(profileList.get(0));
    textFieldProfile2.setText(profileList.get(1));
    textFieldProfile3.setText(profileList.get(2));
    textFieldProfile4.setText(profileList.get(3));
    textFieldProfile5.setText(profileList.get(4));
  }
}"
68950,"/** 
 * Draw move numbers and/or mark the last played move
 */
private void drawMoveNumbers(Graphics2D g){
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int[] lastMove=Lizzie.board.getLastMove();
  int lastMoveNumber=Lizzie.board.getData().getMoveNumber();
  if (!Lizzie.optionSetting.isShowMoveNumber() && branch == null) {
    if (lastMove != null) {
      int lastMoveMarkerRadius=stoneRadius / 2;
      int stoneX=x + scaledMargin + squareLength * lastMove[0];
      int stoneY=y + scaledMargin + squareLength * lastMove[1];
      g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])].isWhite() ? Color.BLACK : Color.WHITE);
      drawCircle(g,stoneX,stoneY,lastMoveMarkerRadius);
    }
 else     if (lastMoveNumber != 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
 else {
    if (branch == null) {
      int[] moveNumberList=Lizzie.board.getMoveNumberList();
      for (int i=0; i < Board.BOARD_SIZE; i++) {
        for (int j=0; j < Board.BOARD_SIZE; j++) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          Stone stoneAtThisPoint=Lizzie.board.getStones()[Board.getIndex(i,j)];
          if (moveNumberList[Board.getIndex(i,j)] > 0) {
            if (lastMove != null && i == lastMove[0] && j == lastMove[1])             g.setColor(Color.RED.brighter());
 else             g.setColor(stoneAtThisPoint.isBlack() ? Color.WHITE : Color.BLACK);
            String moveNumberString=moveNumberList[Board.getIndex(i,j)] + ""String_Node_Str"";
            drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
          }
        }
      }
      if (lastMove == null && lastMoveNumber != 0) {
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
        g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
        g.setColor(Color.RED);
        drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",Font.PLAIN,String.valueOf(lastMoveNumber),stoneRadius * 4,stoneRadius * 6,1);
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
        drawString(g,x + boardLength / 2,y + boardLength / 2 + stoneRadius,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
      }
    }
 else {
      int nextVariationNumber=0;
      if (Lizzie.board.isInTryPlayState()) {
        nextVariationNumber=Lizzie.board.getData().getMoveNumber() - Lizzie.board.getTryPlayStateBeginMoveNumber();
        if (nextVariationNumber < 0) {
          nextVariationNumber=0;
        }
      }
      Stone nextStone=Lizzie.board.getData().getLastMoveColor();
      if (nextStone == Stone.EMPTY) {
        nextStone=Stone.WHITE;
      }
      for (      String move : branch.getVariation()) {
        ++nextVariationNumber;
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        nextStone=nextStone.opposite();
        if (nextVariationNumber == 1) {
          continue;
        }
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        int[] coords=Board.convertNameToCoordinates(move);
        int i=coords[0], j=coords[1];
        if (Board.isValid(i,j)) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          g.setColor(nextStone.equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
          String moveNumberString=String.valueOf(nextVariationNumber);
          drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
        }
      }
    }
  }
}","/** 
 * Draw move numbers and/or mark the last played move
 */
private void drawMoveNumbers(Graphics2D g){
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int[] lastMove=Lizzie.board.getLastMove();
  int lastMoveNumber=Lizzie.board.getData().getMoveNumber();
  if (!Lizzie.optionSetting.isShowMoveNumber() && branch == null) {
    if (lastMove != null) {
      int lastMoveMarkerRadius=stoneRadius / 2;
      int stoneX=x + scaledMargin + squareLength * lastMove[0];
      int stoneY=y + scaledMargin + squareLength * lastMove[1];
      g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])].isWhite() ? Color.BLACK : Color.WHITE);
      drawCircle(g,stoneX,stoneY,lastMoveMarkerRadius);
    }
 else     if (lastMoveNumber != 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
 else {
    if (branch == null) {
      int[] moveNumberList=Lizzie.board.getMoveNumberList();
      for (int i=0; i < Board.BOARD_SIZE; i++) {
        for (int j=0; j < Board.BOARD_SIZE; j++) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          int index=Board.getIndex(i,j);
          if (Lizzie.board.getData().getMoveNumber() - moveNumberList[index] > Lizzie.optionSetting.getNumberOfLastMovesShown()) {
            continue;
          }
          Stone stoneAtThisPoint=Lizzie.board.getStones()[index];
          if (moveNumberList[index] > 0) {
            if (lastMove != null && i == lastMove[0] && j == lastMove[1])             g.setColor(Color.RED.brighter());
 else             g.setColor(stoneAtThisPoint.isBlack() ? Color.WHITE : Color.BLACK);
            String moveNumberString=moveNumberList[index] + ""String_Node_Str"";
            drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
          }
        }
      }
      if (lastMove == null && lastMoveNumber != 0) {
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
        g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
        g.setColor(Color.RED);
        drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",Font.PLAIN,String.valueOf(lastMoveNumber),stoneRadius * 4,stoneRadius * 6,1);
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
        drawString(g,x + boardLength / 2,y + boardLength / 2 + stoneRadius,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
      }
    }
 else {
      int nextVariationNumber=0;
      if (Lizzie.board.isInTryPlayState()) {
        nextVariationNumber=Lizzie.board.getData().getMoveNumber() - Lizzie.board.getTryPlayStateBeginMoveNumber();
        if (nextVariationNumber < 0) {
          nextVariationNumber=0;
        }
      }
      Stone nextStone=Lizzie.board.getData().getLastMoveColor();
      if (nextStone == Stone.EMPTY) {
        nextStone=Stone.WHITE;
      }
      for (      String move : branch.getVariation()) {
        ++nextVariationNumber;
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        nextStone=nextStone.opposite();
        if (nextVariationNumber == 1) {
          continue;
        }
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        int[] coords=Board.convertNameToCoordinates(move);
        int i=coords[0], j=coords[1];
        if (Board.isValid(i,j)) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          g.setColor(nextStone.equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
          String moveNumberString=String.valueOf(nextVariationNumber);
          drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
        }
      }
    }
  }
}"
68951,"/** 
 * Goes to the next coordinate, thread safe
 */
public void nextMove(){
synchronized (this) {
    BoardHistoryNode oldHead=history.getHead();
    if (history.next() != null) {
      observerCollection.headMoved(oldHead,history.getHead());
      if (history.getData().getLastMove() == null) {
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(history.getLastMoveColor(),""String_Node_Str"");
          Lizzie.leelaz.ponder();
        }
);
      }
 else {
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(history.getLastMoveColor(),convertCoordinatesToName(history.getLastMove()[0],history.getLastMove()[1]));
          Lizzie.leelaz.ponder();
        }
);
      }
    }
  }
}","/** 
 * Goes to the next coordinate, thread safe
 */
public void nextMove(){
synchronized (this) {
    BoardHistoryNode oldHead=history.getHead();
    if (history.next() != null) {
      observerCollection.headMoved(oldHead,history.getHead());
      final Stone colorToPlay=history.getLastMoveColor();
      if (history.getData().getLastMove() == null) {
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(colorToPlay,""String_Node_Str"");
          Lizzie.leelaz.ponder();
        }
);
      }
 else {
        final String locationToPlay=convertCoordinatesToName(history.getLastMove()[0],history.getLastMove()[1]);
        leelazExecutor.execute(() -> {
          Lizzie.leelaz.playMove(colorToPlay,locationToPlay);
          Lizzie.leelaz.ponder();
        }
);
      }
    }
  }
}"
68952,"private void handleTableClick(int row,int col){
  if (row == analysisTableModel.getSelectedMoveIndex()) {
    analysisTableModel.setSelectedMove(null);
  }
 else {
    analysisTableModel.setSelectedMoveByIndex(row);
  }
}","private void handleTableClick(int row,int col){
  if (row == analysisTableModel.getSelectedMoveIndex()) {
    analysisTable.clearSelection();
    analysisTableModel.setSelectedMove(null);
  }
 else {
    analysisTableModel.setSelectedMoveByIndex(row);
  }
  Lizzie.frame.repaint();
}"
68953,"public void selectOrDeselectMoveByCoord(int[] mouseCoords){
  MoveData mouseOnMove=null;
  for (  MoveData data : bestMoves) {
    int[] coords=Board.convertNameToCoordinates(data.getCoordinate());
    if (coords[0] == mouseCoords[0] && coords[1] == mouseCoords[1]) {
      mouseOnMove=data;
      break;
    }
  }
  selectedMove=mouseOnMove;
}","public void selectOrDeselectMoveByCoord(int[] mouseCoords){
  MoveData mouseOnMove=null;
  if (mouseCoords != null) {
    for (    MoveData data : bestMoves) {
      int[] coords=Board.convertNameToCoordinates(data.getCoordinate());
      if (coords[0] == mouseCoords[0] && coords[1] == mouseCoords[1]) {
        mouseOnMove=data;
        break;
      }
    }
  }
  selectedMove=mouseOnMove;
  int selectedIndex=getSelectedMoveIndex();
  if (selectedIndex >= 0) {
    SwingUtilities.invokeLater(() -> hostTable.setRowSelectionInterval(selectedIndex,selectedIndex));
  }
 else {
    SwingUtilities.invokeLater(() -> hostTable.clearSelection());
  }
}"
68954,"public void onMouseMove(int x,int y){
  if (Lizzie.optionSetting.isMouseOverShowMove()) {
    int[] boardCoordinates=boardRenderer.convertScreenToCoordinates(x,y);
    if (boardCoordinates != null) {
      Lizzie.analysisFrame.getAnalysisTableModel().selectOrDeselectMoveByCoord(boardCoordinates);
    }
  }
}","public void onMouseMove(int x,int y){
  if (Lizzie.optionSetting.isMouseOverShowMove()) {
    int[] boardCoordinates=boardRenderer.convertScreenToCoordinates(x,y);
    int[] previousCoordinates=lastBoardCoordinates.getAndSet(boardCoordinates);
    if (!Arrays.equals(previousCoordinates,boardCoordinates)) {
      Lizzie.analysisFrame.getAnalysisTableModel().selectOrDeselectMoveByCoord(boardCoordinates);
      repaint();
    }
  }
}"
68955,"/** 
 * Draw move numbers and/or mark the last played move
 */
private void drawMoveNumbers(Graphics2D g){
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int[] lastMove=Lizzie.board.getLastMove();
  int lastMoveNumber=Lizzie.board.getData().getMoveNumber();
  if (!Lizzie.board.isInTryPlayState() && (!Lizzie.optionSetting.isShowMoveNumber() || branch != null) || Lizzie.board.isInTryPlayState() && lastMoveNumber <= Lizzie.board.getTryPlayStateBeginMoveNumber()) {
    if (lastMove != null) {
      int lastMoveMarkerRadius=stoneRadius / 2;
      int stoneX=x + scaledMargin + squareLength * lastMove[0];
      int stoneY=y + scaledMargin + squareLength * lastMove[1];
      g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])].isWhite() ? Color.BLACK : Color.WHITE);
      drawCircle(g,stoneX,stoneY,lastMoveMarkerRadius);
    }
 else     if (lastMoveNumber != 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
  if (!Lizzie.board.isInTryPlayState() && Lizzie.optionSetting.isShowMoveNumber() && branch == null || Lizzie.board.isInTryPlayState()) {
    int[] moveNumberList=Lizzie.board.getMoveNumberList();
    int moveNumberBaseFix=0;
    if (Lizzie.board.isInTryPlayState()) {
      moveNumberBaseFix=Lizzie.board.getTryPlayStateBeginMoveNumber();
    }
    for (int i=0; i < Board.BOARD_SIZE; i++) {
      for (int j=0; j < Board.BOARD_SIZE; j++) {
        int stoneX=x + scaledMargin + squareLength * i;
        int stoneY=y + scaledMargin + squareLength * j;
        int index=Board.getIndex(i,j);
        if (lastMoveNumber - moveNumberList[index] > Lizzie.optionSetting.getNumberOfLastMovesShown()) {
          continue;
        }
        Stone stoneAtThisPoint=Lizzie.board.getStones()[index];
        if (moveNumberList[index] - moveNumberBaseFix > 0) {
          if (lastMove != null && i == lastMove[0] && j == lastMove[1])           g.setColor(Color.RED.brighter());
 else           g.setColor(stoneAtThisPoint.isBlack() ? Color.WHITE : Color.BLACK);
          String moveNumberString=String.valueOf(moveNumberList[index] - moveNumberBaseFix);
          drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
        }
      }
    }
    if (lastMove == null && lastMoveNumber != 0 && lastMoveNumber - moveNumberBaseFix >= 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Color.RED);
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",Font.PLAIN,String.valueOf(lastMoveNumber - moveNumberBaseFix),stoneRadius * 4,stoneRadius * 6,1);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2 + stoneRadius,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
  if (branch != null) {
    int variationBase=0;
    if (Lizzie.board.isInTryPlayState()) {
      variationBase=lastMoveNumber - Lizzie.board.getTryPlayStateBeginMoveNumber();
      if (variationBase < 0) {
        variationBase=0;
      }
    }
    int nextVariationNumber=0;
    if (Lizzie.board.isInTryPlayState()) {
      nextVariationNumber=variationBase;
    }
    Stone nextStone=Lizzie.board.getData().getLastMoveColor();
    if (nextStone == Stone.EMPTY) {
      nextStone=Stone.WHITE;
    }
    for (    String move : branch.getVariation()) {
      ++nextVariationNumber;
      nextStone=nextStone.opposite();
      if (nextVariationNumber == variationBase + 1) {
        continue;
      }
      if (nextVariationNumber - variationBase > Lizzie.optionSetting.getVariationLimit()) {
        break;
      }
      int[] coords=Board.convertNameToCoordinates(move);
      int i=coords[0], j=coords[1];
      if (Board.isValid(i,j)) {
        int stoneX=x + scaledMargin + squareLength * i;
        int stoneY=y + scaledMargin + squareLength * j;
        g.setColor(nextStone.equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
        String moveNumberString=String.valueOf(nextVariationNumber);
        drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
      }
    }
  }
}","/** 
 * Draw move numbers and/or mark the last played move
 */
private void drawMoveNumbers(Graphics2D g){
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int[] lastMove=Lizzie.board.getLastMove();
  int lastMoveNumber=Lizzie.board.getData().getMoveNumber();
  if (!Lizzie.board.isInTryPlayState() && (!Lizzie.optionSetting.isShowMoveNumber() || branch != null) || Lizzie.board.isInTryPlayState() && lastMoveNumber <= Lizzie.board.getTryPlayStateBeginMoveNumber()) {
    if (lastMove != null) {
      int lastMoveMarkerRadius=stoneRadius / 2;
      int stoneX=x + scaledMargin + squareLength * lastMove[0];
      int stoneY=y + scaledMargin + squareLength * lastMove[1];
      g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])].isWhite() ? Color.BLACK : Color.WHITE);
      drawCircle(g,stoneX,stoneY,lastMoveMarkerRadius);
    }
 else     if (lastMoveNumber != 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
  if (!Lizzie.board.isInTryPlayState() && Lizzie.optionSetting.isShowMoveNumber() && branch == null || Lizzie.board.isInTryPlayState()) {
    int[] moveNumberList=Lizzie.board.getMoveNumberList();
    int moveNumberBaseFix=0;
    if (Lizzie.board.isInTryPlayState()) {
      moveNumberBaseFix=Lizzie.board.getTryPlayStateBeginMoveNumber();
    }
    for (int i=0; i < Board.BOARD_SIZE; i++) {
      for (int j=0; j < Board.BOARD_SIZE; j++) {
        int stoneX=x + scaledMargin + squareLength * i;
        int stoneY=y + scaledMargin + squareLength * j;
        int index=Board.getIndex(i,j);
        if (lastMoveNumber - moveNumberList[index] >= Lizzie.optionSetting.getNumberOfLastMovesShown()) {
          continue;
        }
        Stone stoneAtThisPoint=Lizzie.board.getStones()[index];
        if (moveNumberList[index] - moveNumberBaseFix > 0) {
          if (lastMove != null && i == lastMove[0] && j == lastMove[1])           g.setColor(Color.RED.brighter());
 else           g.setColor(stoneAtThisPoint.isBlack() ? Color.WHITE : Color.BLACK);
          String moveNumberString=String.valueOf(moveNumberList[index] - moveNumberBaseFix);
          drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
        }
      }
    }
    if (lastMove == null && lastMoveNumber != 0 && lastMoveNumber - moveNumberBaseFix >= 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Color.RED);
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",Font.PLAIN,String.valueOf(lastMoveNumber - moveNumberBaseFix),stoneRadius * 4,stoneRadius * 6,1);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2 + stoneRadius,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
  if (branch != null) {
    int variationBase=0;
    if (Lizzie.board.isInTryPlayState()) {
      variationBase=lastMoveNumber - Lizzie.board.getTryPlayStateBeginMoveNumber();
      if (variationBase < 0) {
        variationBase=0;
      }
    }
    int nextVariationNumber=0;
    if (Lizzie.board.isInTryPlayState()) {
      nextVariationNumber=variationBase;
    }
    Stone nextStone=Lizzie.board.getData().getLastMoveColor();
    if (nextStone == Stone.EMPTY) {
      nextStone=Stone.WHITE;
    }
    for (    String move : branch.getVariation()) {
      ++nextVariationNumber;
      nextStone=nextStone.opposite();
      if (nextVariationNumber == variationBase + 1) {
        continue;
      }
      if (nextVariationNumber - variationBase > Lizzie.optionSetting.getVariationLimit()) {
        break;
      }
      int[] coords=Board.convertNameToCoordinates(move);
      int i=coords[0], j=coords[1];
      if (Board.isValid(i,j)) {
        int stoneX=x + scaledMargin + squareLength * i;
        int stoneY=y + scaledMargin + squareLength * j;
        g.setColor(nextStone.equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
        String moveNumberString=String.valueOf(nextVariationNumber);
        drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
      }
    }
  }
}"
68956,"public void readDialogSetting(OptionSetting setting){
  int variationLimit;
  if (radioButtonV5.isSelected()) {
    variationLimit=5;
  }
 else   if (radioButtonV10.isSelected()) {
    variationLimit=10;
  }
 else   if (radioButtonV15.isSelected()) {
    variationLimit=15;
  }
 else   if (radioButtonV30.isSelected()) {
    variationLimit=30;
  }
 else {
    variationLimit=Integer.MAX_VALUE;
  }
  Color boardColor;
  if (radioButtonColorBright.isSelected()) {
    boardColor=new Color(0xf0,0xd2,0xa0);
  }
 else   if (radioButtonColorOriginal.isSelected()) {
    boardColor=Color.ORANGE.darker();
  }
 else {
    boardColor=Color.WHITE;
  }
  setting.setVariationLimit(variationLimit);
  setting.setA1OnTop(radioButtonA1Top.isSelected());
  setting.setBoardColor(boardColor);
  setting.setAutoHideMoveNumber(checkBoxAutoHideMoveNumber.isSelected());
  setting.setAutoHideAnalysisSuggession(checkBoxAutoHideAnalysisSuggession.isSelected());
  setting.setAnalysisWindowShow(checkBoxAnalysisWindowShow.isSelected());
  setting.setMouseOverShowMove(checkBoxMouseMoveShow.isSelected());
  setting.setShowSuggession(checkBoxShowSuggession.isSelected());
  String newLeelazCommandLine=textFieldLeelazCommandLine.getText().trim();
  if (StringUtils.isEmpty(newLeelazCommandLine)) {
    setting.setLeelazCommandLine(new OptionSetting().getLeelazCommandLine());
  }
 else {
    setting.setLeelazCommandLine(newLeelazCommandLine);
  }
  setting.setShowMoveNumber(checkBoxShowMoveNumber.isSelected());
  if (checkBoxMoveNumberLimit.isSelected()) {
    try {
      int moveNumberLimit=Integer.parseInt(textFieldMoveNumberLimitCount.getText());
      if (moveNumberLimit <= 0) {
        moveNumberLimit=new OptionSetting().getNumberOfLastMovesShown();
      }
      setting.setNumberOfLastMovesShown(moveNumberLimit);
    }
 catch (    NumberFormatException e) {
      setting.setNumberOfLastMovesShown(new OptionSetting().getNumberOfLastMovesShown());
    }
  }
 else {
    setting.setNumberOfLastMovesShown(Integer.MAX_VALUE);
  }
  setting.setAutoEnterTryPlayingMode(checkBoxAutoEnterTryPlayingMode.isSelected());
  setting.setMainWindowAlwaysOnTop(checkBoxMainWindowAlwaysOnTop.isSelected());
}","public void readDialogSetting(OptionSetting setting){
  int variationLimit;
  if (radioButtonV5.isSelected()) {
    variationLimit=5;
  }
 else   if (radioButtonV10.isSelected()) {
    variationLimit=10;
  }
 else   if (radioButtonV15.isSelected()) {
    variationLimit=15;
  }
 else   if (radioButtonV30.isSelected()) {
    variationLimit=30;
  }
 else {
    variationLimit=Integer.MAX_VALUE;
  }
  Color boardColor;
  if (radioButtonColorBright.isSelected()) {
    boardColor=new Color(0xf0,0xd2,0xa0);
  }
 else   if (radioButtonColorOriginal.isSelected()) {
    boardColor=Color.ORANGE.darker();
  }
 else {
    boardColor=Color.WHITE;
  }
  setting.setVariationLimit(variationLimit);
  setting.setPlayoutsInShortForm(checkBoxPlayoutsInShortForm.isSelected());
  setting.setA1OnTop(radioButtonA1Top.isSelected());
  setting.setBoardColor(boardColor);
  setting.setAnalysisWindowShow(checkBoxAnalysisWindowShow.isSelected());
  setting.setMouseOverShowMove(checkBoxMouseMoveShow.isSelected());
  setting.setShowSuggestion(checkBoxShowSuggestion.isSelected());
  String newLeelazCommandLine=textFieldLeelazCommandLine.getText().trim();
  if (StringUtils.isEmpty(newLeelazCommandLine)) {
    setting.setLeelazCommandLine(new OptionSetting().getLeelazCommandLine());
  }
 else {
    setting.setLeelazCommandLine(newLeelazCommandLine);
  }
  setting.setShowMoveNumber(checkBoxShowMoveNumber.isSelected());
  if (checkBoxMoveNumberLimit.isSelected()) {
    try {
      int moveNumberLimit=Integer.parseInt(textFieldMoveNumberLimitCount.getText());
      if (moveNumberLimit <= 0) {
        moveNumberLimit=new OptionSetting().getNumberOfLastMovesShown();
      }
      setting.setNumberOfLastMovesShown(moveNumberLimit);
    }
 catch (    NumberFormatException e) {
      setting.setNumberOfLastMovesShown(new OptionSetting().getNumberOfLastMovesShown());
    }
  }
 else {
    setting.setNumberOfLastMovesShown(Integer.MAX_VALUE);
  }
  setting.setAutoEnterTryPlayingMode(checkBoxAutoEnterTryPlayingMode.isSelected());
  setting.setMainWindowAlwaysOnTop(checkBoxMainWindowAlwaysOnTop.isSelected());
}"
68957,"public void setDialogSetting(OptionSetting setting){
switch (setting.getVariationLimit()) {
case 5:
    radioButtonV5.setSelected(true);
  break;
case 10:
radioButtonV10.setSelected(true);
break;
case 15:
radioButtonV15.setSelected(true);
break;
case 30:
radioButtonV30.setSelected(true);
break;
default :
radioButtonUnlimited.setSelected(true);
break;
}
if (setting.isA1OnTop()) {
radioButtonA1Top.setSelected(true);
}
 else {
radioButtonA1Bottom.setSelected(true);
}
if (setting.getBoardColor().equals(Color.WHITE)) {
radioButtonColorPureWhite.setSelected(true);
}
 else if (setting.getBoardColor().equals(Color.ORANGE.darker())) {
radioButtonColorOriginal.setSelected(true);
}
 else {
radioButtonColorBright.setSelected(true);
}
checkBoxAutoHideMoveNumber.setSelected(setting.isAutoHideMoveNumber());
checkBoxAutoHideAnalysisSuggession.setSelected(setting.isAutoHideAnalysisSuggession());
checkBoxAnalysisWindowShow.setSelected(setting.isAnalysisWindowShow());
checkBoxMouseMoveShow.setSelected(setting.isMouseOverShowMove());
checkBoxShowSuggession.setSelected(setting.isShowSuggession());
textFieldLeelazCommandLine.setText(setting.getLeelazCommandLine());
checkBoxShowMoveNumber.setSelected(setting.isShowMoveNumber());
if (setting.getNumberOfLastMovesShown() <= 0) {
setting.setNumberOfLastMovesShown(new OptionSetting().getNumberOfLastMovesShown());
}
if (setting.getNumberOfLastMovesShown() == Integer.MAX_VALUE) {
checkBoxMoveNumberLimit.setSelected(false);
}
 else {
checkBoxMoveNumberLimit.setSelected(true);
textFieldMoveNumberLimitCount.setText(String.valueOf(setting.getNumberOfLastMovesShown()));
}
checkBoxAutoEnterTryPlayingMode.setSelected(setting.isAutoEnterTryPlayingMode());
checkBoxMainWindowAlwaysOnTop.setSelected(setting.isMainWindowAlwaysOnTop());
}","public void setDialogSetting(OptionSetting setting){
switch (setting.getVariationLimit()) {
case 5:
    radioButtonV5.setSelected(true);
  break;
case 10:
radioButtonV10.setSelected(true);
break;
case 15:
radioButtonV15.setSelected(true);
break;
case 30:
radioButtonV30.setSelected(true);
break;
default :
radioButtonUnlimited.setSelected(true);
break;
}
if (setting.isA1OnTop()) {
radioButtonA1Top.setSelected(true);
}
 else {
radioButtonA1Bottom.setSelected(true);
}
if (setting.getBoardColor().equals(Color.WHITE)) {
radioButtonColorPureWhite.setSelected(true);
}
 else if (setting.getBoardColor().equals(Color.ORANGE.darker())) {
radioButtonColorOriginal.setSelected(true);
}
 else {
radioButtonColorBright.setSelected(true);
}
checkBoxPlayoutsInShortForm.setSelected(setting.isPlayoutsInShortForm());
checkBoxAnalysisWindowShow.setSelected(setting.isAnalysisWindowShow());
checkBoxMouseMoveShow.setSelected(setting.isMouseOverShowMove());
checkBoxShowSuggestion.setSelected(setting.isShowSuggestion());
textFieldLeelazCommandLine.setText(setting.getLeelazCommandLine());
checkBoxShowMoveNumber.setSelected(setting.isShowMoveNumber());
if (setting.getNumberOfLastMovesShown() <= 0) {
setting.setNumberOfLastMovesShown(new OptionSetting().getNumberOfLastMovesShown());
}
if (setting.getNumberOfLastMovesShown() == Integer.MAX_VALUE) {
checkBoxMoveNumberLimit.setSelected(false);
}
 else {
checkBoxMoveNumberLimit.setSelected(true);
textFieldMoveNumberLimitCount.setText(String.valueOf(setting.getNumberOfLastMovesShown()));
}
checkBoxAutoEnterTryPlayingMode.setSelected(setting.isAutoEnterTryPlayingMode());
checkBoxMainWindowAlwaysOnTop.setSelected(setting.isMainWindowAlwaysOnTop());
}"
68958,"private void initComponents(){
  dialogPane=new JPanel();
  contentPanel=new JPanel();
  labelVariationLimit=new JLabel();
  radioButtonV5=new JRadioButton();
  radioButtonV10=new JRadioButton();
  radioButtonV15=new JRadioButton();
  radioButtonV30=new JRadioButton();
  radioButtonUnlimited=new JRadioButton();
  labelAxisSetting=new JLabel();
  radioButtonA1Top=new JRadioButton();
  radioButtonA1Bottom=new JRadioButton();
  labelBoardColor=new JLabel();
  radioButtonColorOriginal=new JRadioButton();
  radioButtonColorBright=new JRadioButton();
  radioButtonColorPureWhite=new JRadioButton();
  labelAutoHide=new JLabel();
  checkBoxAutoHideMoveNumber=new JCheckBox();
  labelAnalysisModeOn=new JLabel();
  checkBoxAnalysisWindowShow=new JCheckBox();
  checkBoxMouseMoveShow=new JCheckBox();
  labelLeelazCommandLine=new JLabel();
  textFieldLeelazCommandLine=new JTextField();
  labelNotes=new JLabel();
  buttonResetCommandLine=new JButton();
  labelMoveNumber=new JLabel();
  checkBoxShowMoveNumber=new JCheckBox();
  checkBoxMoveNumberLimit=new JCheckBox();
  textFieldMoveNumberLimitCount=new JTextField();
  labelMoveNumberLimitLabelTail=new JLabel();
  checkBoxAutoHideAnalysisSuggession=new JCheckBox();
  labelTryPlayingMode=new JLabel();
  checkBoxAutoEnterTryPlayingMode=new JCheckBox();
  labelMainWindow=new JLabel();
  checkBoxMainWindowAlwaysOnTop=new JCheckBox();
  checkBoxShowSuggession=new JCheckBox();
  buttonBar=new JPanel();
  okButton=new JButton();
  cancelButton=new JButton();
  setTitle(""String_Node_Str"");
  setModal(true);
  Container contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
{
    dialogPane.setBorder(new EmptyBorder(12,12,12,12));
    dialogPane.setLayout(new BorderLayout());
{
      labelVariationLimit.setText(""String_Node_Str"");
      radioButtonV5.setText(""String_Node_Str"");
      radioButtonV10.setText(""String_Node_Str"");
      radioButtonV15.setText(""String_Node_Str"");
      radioButtonV30.setText(""String_Node_Str"");
      radioButtonUnlimited.setText(""String_Node_Str"");
      radioButtonUnlimited.setSelected(true);
      labelAxisSetting.setText(""String_Node_Str"");
      radioButtonA1Top.setText(""String_Node_Str"");
      radioButtonA1Bottom.setText(""String_Node_Str"");
      radioButtonA1Bottom.setSelected(true);
      labelBoardColor.setText(""String_Node_Str"");
      radioButtonColorOriginal.setText(""String_Node_Str"");
      radioButtonColorBright.setText(""String_Node_Str"");
      radioButtonColorBright.setSelected(true);
      radioButtonColorPureWhite.setText(""String_Node_Str"");
      labelAutoHide.setText(""String_Node_Str"");
      checkBoxAutoHideMoveNumber.setText(""String_Node_Str"");
      checkBoxAutoHideMoveNumber.setSelected(true);
      labelAnalysisModeOn.setText(""String_Node_Str"");
      checkBoxAnalysisWindowShow.setText(""String_Node_Str"");
      checkBoxAnalysisWindowShow.setSelected(true);
      checkBoxMouseMoveShow.setText(""String_Node_Str"");
      labelLeelazCommandLine.setText(""String_Node_Str"");
      textFieldLeelazCommandLine.setText(""String_Node_Str"");
      labelNotes.setText(""String_Node_Str"");
      labelNotes.setFont(labelNotes.getFont().deriveFont(labelNotes.getFont().getStyle() | Font.BOLD));
      buttonResetCommandLine.setText(""String_Node_Str"");
      buttonResetCommandLine.addActionListener(e -> buttonResetCommandLineActionPerformed(e));
      labelMoveNumber.setText(""String_Node_Str"");
      checkBoxShowMoveNumber.setText(""String_Node_Str"");
      checkBoxShowMoveNumber.setSelected(true);
      checkBoxMoveNumberLimit.setText(""String_Node_Str"");
      textFieldMoveNumberLimitCount.setText(""String_Node_Str"");
      labelMoveNumberLimitLabelTail.setText(""String_Node_Str"");
      checkBoxAutoHideAnalysisSuggession.setText(""String_Node_Str"");
      checkBoxAutoHideAnalysisSuggession.setSelected(true);
      labelTryPlayingMode.setText(""String_Node_Str"");
      checkBoxAutoEnterTryPlayingMode.setText(""String_Node_Str"");
      labelMainWindow.setText(""String_Node_Str"");
      checkBoxMainWindowAlwaysOnTop.setText(""String_Node_Str"");
      checkBoxShowSuggession.setText(""String_Node_Str"");
      checkBoxShowSuggession.setSelected(true);
      GroupLayout contentPanelLayout=new GroupLayout(contentPanel);
      contentPanel.setLayout(contentPanelLayout);
      contentPanelLayout.setHorizontalGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addContainerGap().addGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelLeelazCommandLine).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(textFieldLeelazCommandLine,GroupLayout.PREFERRED_SIZE,388,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(buttonResetCommandLine,GroupLayout.DEFAULT_SIZE,100,Short.MAX_VALUE).addContainerGap()).addGroup(contentPanelLayout.createSequentialGroup().addGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelVariationLimit).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV5).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV10).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV15).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV30).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonUnlimited)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelAxisSetting).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonA1Top).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonA1Bottom)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelBoardColor).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonColorOriginal).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonColorBright).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonColorPureWhite)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelAutoHide).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxAutoHideMoveNumber).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxAutoHideAnalysisSuggession)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelAnalysisModeOn).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxAnalysisWindowShow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxMouseMoveShow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxShowSuggession)).addComponent(labelNotes).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelMoveNumber).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxShowMoveNumber).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxMoveNumberLimit).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(textFieldMoveNumberLimitCount,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(labelMoveNumberLimitLabelTail)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelTryPlayingMode).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxAutoEnterTryPlayingMode)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelMainWindow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxMainWindowAlwaysOnTop))).addGap(0,19,Short.MAX_VALUE)))));
      contentPanelLayout.setVerticalGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addContainerGap().addGroup(contentPanelLayout.createParallelGroup().addComponent(radioButtonUnlimited).addComponent(radioButtonV30).addComponent(radioButtonV15).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelVariationLimit).addComponent(radioButtonV5)).addComponent(radioButtonV10)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelAxisSetting,GroupLayout.PREFERRED_SIZE,26,GroupLayout.PREFERRED_SIZE).addComponent(radioButtonA1Top).addComponent(radioButtonA1Bottom)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(radioButtonColorOriginal).addComponent(labelBoardColor)).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(radioButtonColorBright).addComponent(radioButtonColorPureWhite))).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelAutoHide).addComponent(checkBoxAutoHideMoveNumber).addComponent(checkBoxAutoHideAnalysisSuggession)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelAnalysisModeOn).addComponent(checkBoxAnalysisWindowShow).addComponent(checkBoxMouseMoveShow).addComponent(checkBoxShowSuggession)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelLeelazCommandLine).addComponent(buttonResetCommandLine).addComponent(textFieldLeelazCommandLine,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelMoveNumber).addComponent(checkBoxShowMoveNumber).addComponent(checkBoxMoveNumberLimit).addComponent(textFieldMoveNumberLimitCount,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(labelMoveNumberLimitLabelTail)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelTryPlayingMode).addComponent(checkBoxAutoEnterTryPlayingMode)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelMainWindow).addComponent(checkBoxMainWindowAlwaysOnTop)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,17,Short.MAX_VALUE).addComponent(labelNotes).addContainerGap()));
    }
    dialogPane.add(contentPanel,BorderLayout.CENTER);
{
      buttonBar.setBorder(new EmptyBorder(12,0,0,0));
      buttonBar.setLayout(new GridBagLayout());
      ((GridBagLayout)buttonBar.getLayout()).columnWidths=new int[]{0,85,80};
      ((GridBagLayout)buttonBar.getLayout()).columnWeights=new double[]{1.0,0.0,0.0};
      okButton.setText(""String_Node_Str"");
      okButton.addActionListener(e -> okButtonActionPerformed(e));
      buttonBar.add(okButton,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,0,0,5),0,0));
      cancelButton.setText(""String_Node_Str"");
      cancelButton.addActionListener(e -> cancelButtonActionPerformed(e));
      buttonBar.add(cancelButton,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
    }
    dialogPane.add(buttonBar,BorderLayout.SOUTH);
  }
  contentPane.add(dialogPane,BorderLayout.CENTER);
  pack();
  setLocationRelativeTo(null);
  ButtonGroup buttonGroupVariationLimit=new ButtonGroup();
  buttonGroupVariationLimit.add(radioButtonV5);
  buttonGroupVariationLimit.add(radioButtonV10);
  buttonGroupVariationLimit.add(radioButtonV15);
  buttonGroupVariationLimit.add(radioButtonV30);
  buttonGroupVariationLimit.add(radioButtonUnlimited);
  ButtonGroup buttonGroupAxisSetting=new ButtonGroup();
  buttonGroupAxisSetting.add(radioButtonA1Top);
  buttonGroupAxisSetting.add(radioButtonA1Bottom);
  ButtonGroup buttonGroupBoardColor=new ButtonGroup();
  buttonGroupBoardColor.add(radioButtonColorOriginal);
  buttonGroupBoardColor.add(radioButtonColorBright);
  buttonGroupBoardColor.add(radioButtonColorPureWhite);
}","private void initComponents(){
  dialogPane=new JPanel();
  contentPanel=new JPanel();
  labelVariationLimit=new JLabel();
  radioButtonV5=new JRadioButton();
  radioButtonV10=new JRadioButton();
  radioButtonV15=new JRadioButton();
  radioButtonV30=new JRadioButton();
  radioButtonUnlimited=new JRadioButton();
  labelAxisSetting=new JLabel();
  radioButtonA1Top=new JRadioButton();
  radioButtonA1Bottom=new JRadioButton();
  labelBoardColor=new JLabel();
  radioButtonColorOriginal=new JRadioButton();
  radioButtonColorBright=new JRadioButton();
  radioButtonColorPureWhite=new JRadioButton();
  labelSuggestion=new JLabel();
  labelAnalysisModeOn=new JLabel();
  checkBoxAnalysisWindowShow=new JCheckBox();
  checkBoxMouseMoveShow=new JCheckBox();
  labelLeelazCommandLine=new JLabel();
  textFieldLeelazCommandLine=new JTextField();
  labelNotes=new JLabel();
  buttonResetCommandLine=new JButton();
  labelMoveNumber=new JLabel();
  checkBoxShowMoveNumber=new JCheckBox();
  checkBoxMoveNumberLimit=new JCheckBox();
  textFieldMoveNumberLimitCount=new JTextField();
  labelMoveNumberLimitLabelTail=new JLabel();
  checkBoxPlayoutsInShortForm=new JCheckBox();
  labelTryPlayingMode=new JLabel();
  checkBoxAutoEnterTryPlayingMode=new JCheckBox();
  labelMainWindow=new JLabel();
  checkBoxMainWindowAlwaysOnTop=new JCheckBox();
  checkBoxShowSuggestion=new JCheckBox();
  buttonBar=new JPanel();
  okButton=new JButton();
  cancelButton=new JButton();
  setTitle(""String_Node_Str"");
  setModal(true);
  Container contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
{
    dialogPane.setBorder(new EmptyBorder(12,12,12,12));
    dialogPane.setLayout(new BorderLayout());
{
      labelVariationLimit.setText(""String_Node_Str"");
      radioButtonV5.setText(""String_Node_Str"");
      radioButtonV10.setText(""String_Node_Str"");
      radioButtonV15.setText(""String_Node_Str"");
      radioButtonV30.setText(""String_Node_Str"");
      radioButtonUnlimited.setText(""String_Node_Str"");
      radioButtonUnlimited.setSelected(true);
      labelAxisSetting.setText(""String_Node_Str"");
      radioButtonA1Top.setText(""String_Node_Str"");
      radioButtonA1Bottom.setText(""String_Node_Str"");
      radioButtonA1Bottom.setSelected(true);
      labelBoardColor.setText(""String_Node_Str"");
      radioButtonColorOriginal.setText(""String_Node_Str"");
      radioButtonColorOriginal.setEnabled(false);
      radioButtonColorBright.setText(""String_Node_Str"");
      radioButtonColorBright.setSelected(true);
      radioButtonColorBright.setEnabled(false);
      radioButtonColorPureWhite.setText(""String_Node_Str"");
      radioButtonColorPureWhite.setEnabled(false);
      labelSuggestion.setText(""String_Node_Str"");
      labelAnalysisModeOn.setText(""String_Node_Str"");
      checkBoxAnalysisWindowShow.setText(""String_Node_Str"");
      checkBoxAnalysisWindowShow.setSelected(true);
      checkBoxMouseMoveShow.setText(""String_Node_Str"");
      labelLeelazCommandLine.setText(""String_Node_Str"");
      textFieldLeelazCommandLine.setText(""String_Node_Str"");
      labelNotes.setText(""String_Node_Str"");
      labelNotes.setFont(labelNotes.getFont().deriveFont(labelNotes.getFont().getStyle() | Font.BOLD));
      buttonResetCommandLine.setText(""String_Node_Str"");
      buttonResetCommandLine.addActionListener(e -> buttonResetCommandLineActionPerformed(e));
      labelMoveNumber.setText(""String_Node_Str"");
      checkBoxShowMoveNumber.setText(""String_Node_Str"");
      checkBoxShowMoveNumber.setSelected(true);
      checkBoxMoveNumberLimit.setText(""String_Node_Str"");
      textFieldMoveNumberLimitCount.setText(""String_Node_Str"");
      labelMoveNumberLimitLabelTail.setText(""String_Node_Str"");
      checkBoxPlayoutsInShortForm.setText(""String_Node_Str"");
      labelTryPlayingMode.setText(""String_Node_Str"");
      checkBoxAutoEnterTryPlayingMode.setText(""String_Node_Str"");
      labelMainWindow.setText(""String_Node_Str"");
      checkBoxMainWindowAlwaysOnTop.setText(""String_Node_Str"");
      checkBoxShowSuggestion.setText(""String_Node_Str"");
      checkBoxShowSuggestion.setSelected(true);
      GroupLayout contentPanelLayout=new GroupLayout(contentPanel);
      contentPanel.setLayout(contentPanelLayout);
      contentPanelLayout.setHorizontalGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addContainerGap().addGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelLeelazCommandLine).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(textFieldLeelazCommandLine,GroupLayout.PREFERRED_SIZE,388,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(buttonResetCommandLine,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()).addGroup(contentPanelLayout.createSequentialGroup().addGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelVariationLimit).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV5).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV10).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV15).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonV30).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonUnlimited)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelAxisSetting).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonA1Top).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonA1Bottom)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelBoardColor).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonColorOriginal).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonColorBright).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(radioButtonColorPureWhite)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelSuggestion).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxShowSuggestion).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxPlayoutsInShortForm)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelAnalysisModeOn).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxAnalysisWindowShow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxMouseMoveShow)).addComponent(labelNotes).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelMoveNumber).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxShowMoveNumber).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxMoveNumberLimit).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(textFieldMoveNumberLimitCount,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(labelMoveNumberLimitLabelTail)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelTryPlayingMode).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxAutoEnterTryPlayingMode)).addGroup(contentPanelLayout.createSequentialGroup().addComponent(labelMainWindow).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkBoxMainWindowAlwaysOnTop))).addGap(0,0,Short.MAX_VALUE)))));
      contentPanelLayout.setVerticalGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createSequentialGroup().addContainerGap().addGroup(contentPanelLayout.createParallelGroup().addComponent(radioButtonUnlimited).addComponent(radioButtonV30).addComponent(radioButtonV15).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelVariationLimit).addComponent(radioButtonV5)).addComponent(radioButtonV10)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelAxisSetting,GroupLayout.PREFERRED_SIZE,26,GroupLayout.PREFERRED_SIZE).addComponent(radioButtonA1Top).addComponent(radioButtonA1Bottom)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup().addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(radioButtonColorOriginal).addComponent(labelBoardColor)).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(radioButtonColorBright).addComponent(radioButtonColorPureWhite))).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelSuggestion).addComponent(checkBoxPlayoutsInShortForm).addComponent(checkBoxShowSuggestion)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelAnalysisModeOn).addComponent(checkBoxAnalysisWindowShow).addComponent(checkBoxMouseMoveShow)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelLeelazCommandLine).addComponent(buttonResetCommandLine).addComponent(textFieldLeelazCommandLine,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelMoveNumber).addComponent(checkBoxShowMoveNumber).addComponent(checkBoxMoveNumberLimit).addComponent(textFieldMoveNumberLimitCount,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(labelMoveNumberLimitLabelTail)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelTryPlayingMode).addComponent(checkBoxAutoEnterTryPlayingMode)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(labelMainWindow).addComponent(checkBoxMainWindowAlwaysOnTop)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,17,Short.MAX_VALUE).addComponent(labelNotes).addContainerGap()));
    }
    dialogPane.add(contentPanel,BorderLayout.CENTER);
{
      buttonBar.setBorder(new EmptyBorder(12,0,0,0));
      buttonBar.setLayout(new GridBagLayout());
      ((GridBagLayout)buttonBar.getLayout()).columnWidths=new int[]{0,85,80};
      ((GridBagLayout)buttonBar.getLayout()).columnWeights=new double[]{1.0,0.0,0.0};
      okButton.setText(""String_Node_Str"");
      okButton.addActionListener(e -> okButtonActionPerformed(e));
      buttonBar.add(okButton,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,0,0,5),0,0));
      cancelButton.setText(""String_Node_Str"");
      cancelButton.addActionListener(e -> cancelButtonActionPerformed(e));
      buttonBar.add(cancelButton,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
    }
    dialogPane.add(buttonBar,BorderLayout.SOUTH);
  }
  contentPane.add(dialogPane,BorderLayout.CENTER);
  pack();
  setLocationRelativeTo(null);
  ButtonGroup buttonGroupVariationLimit=new ButtonGroup();
  buttonGroupVariationLimit.add(radioButtonV5);
  buttonGroupVariationLimit.add(radioButtonV10);
  buttonGroupVariationLimit.add(radioButtonV15);
  buttonGroupVariationLimit.add(radioButtonV30);
  buttonGroupVariationLimit.add(radioButtonUnlimited);
  ButtonGroup buttonGroupAxisSetting=new ButtonGroup();
  buttonGroupAxisSetting.add(radioButtonA1Top);
  buttonGroupAxisSetting.add(radioButtonA1Bottom);
  ButtonGroup buttonGroupBoardColor=new ButtonGroup();
  buttonGroupBoardColor.add(radioButtonColorOriginal);
  buttonGroupBoardColor.add(radioButtonColorBright);
  buttonGroupBoardColor.add(radioButtonColorPureWhite);
}"
68959,"/** 
 * Draw the 'ghost stones' which show a variation Leelaz is thinking about
 */
private void drawBranch(){
  branchStonesImage=new BufferedImage(boardLength,boardLength,BufferedImage.TYPE_INT_ARGB);
  branchStonesShadowImage=new BufferedImage(boardLength,boardLength,BufferedImage.TYPE_INT_ARGB);
  if (Lizzie.frame.isPlayingAgainstLeelaz) {
    return;
  }
  branch=Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove();
  if (branch == null) {
    return;
  }
  Graphics2D g=(Graphics2D)branchStonesImage.getGraphics();
  Graphics2D gShadow=(Graphics2D)branchStonesShadowImage.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  Stone color=Lizzie.board.getData().getLastMoveColor();
  if (color == Stone.EMPTY) {
    color=Stone.WHITE;
  }
  for (  String variation : branch.getVariation()) {
    color=color.opposite();
    int[] coords=Board.convertNameToCoordinates(variation);
    if (Board.isValid(coords[0],coords[1])) {
      int stoneX=scaledMargin + squareLength * coords[0];
      int stoneY=scaledMargin + squareLength * coords[1];
      if (Lizzie.board.getStones()[Board.getIndex(coords[0],coords[1])] == Stone.EMPTY)       drawStone(g,gShadow,stoneX,stoneY,color.unGhosted());
    }
  }
  g.dispose();
  gShadow.dispose();
}","/** 
 * Draw the 'ghost stones' which show a variation Leelaz is thinking about
 */
private void drawBranch(){
  branchStonesImage=new BufferedImage(boardLength,boardLength,BufferedImage.TYPE_INT_ARGB);
  branchStonesShadowImage=new BufferedImage(boardLength,boardLength,BufferedImage.TYPE_INT_ARGB);
  if (Lizzie.frame.isPlayingAgainstLeelaz) {
    return;
  }
  branch=Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove();
  if (branch == null) {
    return;
  }
  Graphics2D g=(Graphics2D)branchStonesImage.getGraphics();
  Graphics2D gShadow=(Graphics2D)branchStonesShadowImage.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  Stone color=Lizzie.board.getData().getLastMoveColor();
  if (color == Stone.EMPTY) {
    color=Stone.WHITE;
  }
  int variationCount=0;
  for (  String variation : branch.getVariation()) {
    color=color.opposite();
    ++variationCount;
    if (variationCount > Lizzie.optionSetting.getVariationLimit()) {
      break;
    }
    int[] coords=Board.convertNameToCoordinates(variation);
    if (Board.isValid(coords[0],coords[1])) {
      int stoneX=scaledMargin + squareLength * coords[0];
      int stoneY=scaledMargin + squareLength * coords[1];
      if (Lizzie.board.getStones()[Board.getIndex(coords[0],coords[1])] == Stone.EMPTY)       drawStone(g,gShadow,stoneX,stoneY,color.unGhosted());
    }
  }
  g.dispose();
  gShadow.dispose();
}"
68960,"/** 
 * Draw move numbers and/or mark the last played move
 */
private void drawMoveNumbers(Graphics2D g){
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int[] lastMove=Lizzie.board.getLastMove();
  int lastMoveNumber=Lizzie.board.getData().getMoveNumber();
  if (!Lizzie.optionSetting.isShowMoveNumber() && branch == null) {
    if (lastMove != null) {
      int lastMoveMarkerRadius=stoneRadius / 2;
      int stoneX=x + scaledMargin + squareLength * lastMove[0];
      int stoneY=y + scaledMargin + squareLength * lastMove[1];
      g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])].isWhite() ? Color.BLACK : Color.WHITE);
      drawCircle(g,stoneX,stoneY,lastMoveMarkerRadius);
    }
 else     if (lastMoveNumber != 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
 else {
    if (branch == null) {
      int[] moveNumberList=Lizzie.board.getMoveNumberList();
      for (int i=0; i < Board.BOARD_SIZE; i++) {
        for (int j=0; j < Board.BOARD_SIZE; j++) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          Stone stoneAtThisPoint=Lizzie.board.getStones()[Board.getIndex(i,j)];
          if (moveNumberList[Board.getIndex(i,j)] > 0) {
            if (lastMove != null && i == lastMove[0] && j == lastMove[1])             g.setColor(Color.RED.brighter());
 else             g.setColor(stoneAtThisPoint.isBlack() ? Color.WHITE : Color.BLACK);
            String moveNumberString=moveNumberList[Board.getIndex(i,j)] + ""String_Node_Str"";
            drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
          }
        }
      }
      if (lastMove == null && lastMoveNumber != 0) {
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
        g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
        g.setColor(Color.RED);
        drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",Font.PLAIN,String.valueOf(lastMoveNumber),stoneRadius * 4,stoneRadius * 6,1);
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
        drawString(g,x + boardLength / 2,y + boardLength / 2 + stoneRadius,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
      }
    }
 else {
      int nextVariationNumber=0;
      if (Lizzie.board.isInTryPlayState()) {
        nextVariationNumber=Lizzie.board.getData().getMoveNumber() - Lizzie.board.getTryPlayStateBeginMoveNumber();
        if (nextVariationNumber < 0) {
          nextVariationNumber=0;
        }
      }
      Stone nextStone=Lizzie.board.getData().getLastMoveColor();
      if (nextStone == Stone.EMPTY) {
        nextStone=Stone.WHITE;
      }
      for (      String move : branch.getVariation()) {
        ++nextVariationNumber;
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        nextStone=nextStone.opposite();
        if (nextVariationNumber == 1) {
          continue;
        }
        int[] coords=Board.convertNameToCoordinates(move);
        int i=coords[0], j=coords[1];
        if (Board.isValid(i,j)) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          g.setColor(nextStone.equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
          String moveNumberString=String.valueOf(nextVariationNumber);
          drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
        }
      }
    }
  }
}","/** 
 * Draw move numbers and/or mark the last played move
 */
private void drawMoveNumbers(Graphics2D g){
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int[] lastMove=Lizzie.board.getLastMove();
  int lastMoveNumber=Lizzie.board.getData().getMoveNumber();
  if (!Lizzie.optionSetting.isShowMoveNumber() && branch == null) {
    if (lastMove != null) {
      int lastMoveMarkerRadius=stoneRadius / 2;
      int stoneX=x + scaledMargin + squareLength * lastMove[0];
      int stoneY=y + scaledMargin + squareLength * lastMove[1];
      g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])].isWhite() ? Color.BLACK : Color.WHITE);
      drawCircle(g,stoneX,stoneY,lastMoveMarkerRadius);
    }
 else     if (lastMoveNumber != 0) {
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
      g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
      g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
      drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
    }
  }
 else {
    if (branch == null) {
      int[] moveNumberList=Lizzie.board.getMoveNumberList();
      for (int i=0; i < Board.BOARD_SIZE; i++) {
        for (int j=0; j < Board.BOARD_SIZE; j++) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          Stone stoneAtThisPoint=Lizzie.board.getStones()[Board.getIndex(i,j)];
          if (moveNumberList[Board.getIndex(i,j)] > 0) {
            if (lastMove != null && i == lastMove[0] && j == lastMove[1])             g.setColor(Color.RED.brighter());
 else             g.setColor(stoneAtThisPoint.isBlack() ? Color.WHITE : Color.BLACK);
            String moveNumberString=moveNumberList[Board.getIndex(i,j)] + ""String_Node_Str"";
            drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
          }
        }
      }
      if (lastMove == null && lastMoveNumber != 0) {
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(255,255,255,150) : new Color(0,0,0,150));
        g.fillOval(x + boardLength / 2 - 4 * stoneRadius,y + boardLength / 2 - 4 * stoneRadius,stoneRadius * 8,stoneRadius * 8);
        g.setColor(Color.RED);
        drawString(g,x + boardLength / 2,y + boardLength / 2,""String_Node_Str"",Font.PLAIN,String.valueOf(lastMoveNumber),stoneRadius * 4,stoneRadius * 6,1);
        g.setColor(Lizzie.board.getData().isBlackToPlay() ? new Color(0,0,0,255) : new Color(255,255,255,255));
        drawString(g,x + boardLength / 2,y + boardLength / 2 + stoneRadius,""String_Node_Str"",""String_Node_Str"",stoneRadius * 4,stoneRadius * 6);
      }
    }
 else {
      int nextVariationNumber=0;
      if (Lizzie.board.isInTryPlayState()) {
        nextVariationNumber=Lizzie.board.getData().getMoveNumber() - Lizzie.board.getTryPlayStateBeginMoveNumber();
        if (nextVariationNumber < 0) {
          nextVariationNumber=0;
        }
      }
      Stone nextStone=Lizzie.board.getData().getLastMoveColor();
      if (nextStone == Stone.EMPTY) {
        nextStone=Stone.WHITE;
      }
      for (      String move : branch.getVariation()) {
        ++nextVariationNumber;
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        nextStone=nextStone.opposite();
        if (nextVariationNumber == 1) {
          continue;
        }
        if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
          break;
        }
        int[] coords=Board.convertNameToCoordinates(move);
        int i=coords[0], j=coords[1];
        if (Board.isValid(i,j)) {
          int stoneX=x + scaledMargin + squareLength * i;
          int stoneY=y + scaledMargin + squareLength * j;
          g.setColor(nextStone.equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
          String moveNumberString=String.valueOf(nextVariationNumber);
          drawString(g,stoneX,stoneY,""String_Node_Str"",moveNumberString,(float)(stoneRadius * 1.4),(int)(stoneRadius * 1.4));
        }
      }
    }
  }
}"
68961,"private static String prepareToken(String token){
  token=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  token=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return token;
}","private static String prepareToken(String token){
  token=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  token=token.replaceAll(""String_Node_Str"",""String_Node_Str"");
  token=REGEX_REMOVE_LINE_BREAK.matcher(token).replaceAll(""String_Node_Str"");
  return token;
}"
68962,"public static void storeGameByPrompting(){
  Game game=new Game();
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  BoardHistoryList historyList=board.getHistory();
  BoardHistoryNode initialNode=historyList.getInitialNode();
  GameNode previousNode=null;
  for (BoardHistoryNode p=initialNode.next(); p != null; p=p.next()) {
    GameNode gameNode=new GameNode(previousNode);
    if (previousNode == null) {
      game.setRootNode(gameNode);
    }
    if (Objects.equals(p.getData().lastMoveColor,Stone.BLACK) || Objects.equals(p.getData().lastMoveColor,Stone.WHITE)) {
      int x, y;
      if (p.getData().lastMove == null) {
        x=19;
        y=19;
      }
 else {
        x=p.getData().lastMove[0];
        y=p.getData().lastMove[1];
        if (x < 0 || x >= 19 || y < 0 || y >= 19) {
          x=19;
          y=19;
        }
      }
      String moveKey=Objects.equals(p.getData().lastMoveColor,Stone.BLACK) ? ""String_Node_Str"" : ""String_Node_Str"";
      String moveValue=Util.coordToAlpha.get(x) + Util.coordToAlpha.get(y);
      gameNode.addProperty(moveKey,moveValue);
    }
    if (p.getData().moveNumber > 0) {
      gameNode.setMoveNo(p.getData().moveNumber);
    }
    if (previousNode != null) {
      previousNode.addChild(gameNode);
    }
    previousNode=gameNode;
  }
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  JFileChooser chooser=new JFileChooser(optionSetting.getLastChooserLocation());
  chooser.setFileFilter(filter);
  chooser.setMultiSelectionEnabled(false);
  int result=chooser.showSaveDialog(frame);
  if (result == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    optionSetting.setLastChooserLocation(file.getParent());
    if (!file.getPath().toLowerCase().endsWith(""String_Node_Str"")) {
      file=new File(file.getPath() + ""String_Node_Str"");
    }
    if (file.exists()) {
      int ret=JOptionPane.showConfirmDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
      if (ret == JOptionPane.CANCEL_OPTION) {
        return;
      }
    }
    try {
      Sgf.writeToFile(game,file.toPath());
    }
 catch (    Exception e) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","public static void storeGameByPrompting(){
  try {
    Game game=new Game();
    game.addProperty(""String_Node_Str"",""String_Node_Str"");
    game.addProperty(""String_Node_Str"",""String_Node_Str"");
    game.addProperty(""String_Node_Str"",""String_Node_Str"");
    game.addProperty(""String_Node_Str"",""String_Node_Str"");
    game.addProperty(""String_Node_Str"",""String_Node_Str"");
    game.addProperty(""String_Node_Str"",""String_Node_Str"");
    BoardHistoryList historyList=board.getHistory();
    BoardHistoryNode initialNode=historyList.getInitialNode();
    GameNode previousNode=null;
    for (BoardHistoryNode p=initialNode.next(); p != null; p=p.next()) {
      GameNode gameNode=new GameNode(previousNode);
      if (previousNode == null) {
        game.setRootNode(gameNode);
      }
      if (Objects.equals(p.getData().lastMoveColor,Stone.BLACK) || Objects.equals(p.getData().lastMoveColor,Stone.WHITE)) {
        int x, y;
        if (p.getData().lastMove == null) {
          x=19;
          y=19;
        }
 else {
          x=p.getData().lastMove[0];
          y=p.getData().lastMove[1];
          if (x < 0 || x >= 19 || y < 0 || y >= 19) {
            x=19;
            y=19;
          }
        }
        String moveKey=Objects.equals(p.getData().lastMoveColor,Stone.BLACK) ? ""String_Node_Str"" : ""String_Node_Str"";
        String moveValue=Util.coordToAlpha.get(x) + Util.coordToAlpha.get(y);
        gameNode.addProperty(moveKey,moveValue);
      }
      if (p.getData().moveNumber > 0) {
        gameNode.setMoveNo(p.getData().moveNumber);
      }
      if (previousNode != null) {
        previousNode.addChild(gameNode);
      }
      previousNode=gameNode;
    }
    FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
    JFileChooser chooser=new JFileChooser(optionSetting.getLastChooserLocation());
    chooser.setFileFilter(filter);
    chooser.setMultiSelectionEnabled(false);
    int result=chooser.showSaveDialog(frame);
    if (result == JFileChooser.APPROVE_OPTION) {
      File file=chooser.getSelectedFile();
      optionSetting.setLastChooserLocation(file.getParent());
      if (!file.getPath().toLowerCase().endsWith(""String_Node_Str"")) {
        file=new File(file.getPath() + ""String_Node_Str"");
      }
      if (file.exists()) {
        int ret=JOptionPane.showConfirmDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
        if (ret == JOptionPane.CANCEL_OPTION) {
          return;
        }
      }
      Sgf.writeToFile(game,file.toPath());
    }
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}"
68963,"public static void loadGameByFile(Path gameFilePath){
  try {
    Game game=Sgf.createFromPath(gameFilePath);
    GameNode node=game.getRootNode();
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    MoveReplayer replayer=new MoveReplayer();
    clearBoardAndState();
    String prePlacedBlackStoneString=game.getProperty(""String_Node_Str"");
    String prePlacedWhiteStoneString=game.getProperty(""String_Node_Str"");
    List<int[]> prePlacedBlackStones=Collections.emptyList(), prePlacedWhiteStones=Collections.emptyList();
    if (StringUtils.isNotEmpty(prePlacedBlackStoneString)) {
      prePlacedBlackStones=Arrays.stream(prePlacedBlackStoneString.split(""String_Node_Str"")).map(String::trim).map(Util::alphaToCoords).collect(Collectors.toList());
    }
    if (StringUtils.isNotEmpty(prePlacedWhiteStoneString)) {
      prePlacedWhiteStones=Arrays.stream(prePlacedWhiteStoneString.split(""String_Node_Str"")).map(String::trim).map(Util::alphaToCoords).collect(Collectors.toList());
    }
    if (CollectionUtils.isNotEmpty(prePlacedBlackStones) || CollectionUtils.isNotEmpty(prePlacedWhiteStones)) {
      int maxLength=Math.max(prePlacedBlackStones.size(),prePlacedWhiteStones.size());
      for (int i=0; i < maxLength; ++i) {
        if (i < prePlacedBlackStones.size()) {
          replayer.playMove(true,prePlacedBlackStones.get(i)[0],prePlacedBlackStones.get(i)[1]);
        }
        if (i < prePlacedWhiteStones.size()) {
          replayer.playMove(false,prePlacedWhiteStones.get(i)[0],prePlacedWhiteStones.get(i)[1]);
        }
      }
    }
    do {
      if (node.getMoveNo() < 0 || StringUtils.isEmpty(node.getMoveString())) {
        continue;
      }
      int[] coords=node.getCoords();
      if (coords[0] < 19 && coords[0] >= 0 && coords[1] < 19 && coords[1] >= 0) {
        replayer.playMove(node.getColorAsEnum().equals(StoneState.BLACK),coords[0],coords[1]);
      }
    }
 while ((node=node.getNextNode()) != null);
  }
 catch (  SgfParseException e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","public static void loadGameByFile(Path gameFilePath){
  try {
    Game game=Sgf.createFromPath(gameFilePath);
    GameNode node=game.getRootNode();
    if (game.getProperty(""String_Node_Str"") != null && !game.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    MoveReplayer replayer=new MoveReplayer();
    clearBoardAndState();
    placePreplacedMove(replayer,game.getProperty(""String_Node_Str""),game.getProperty(""String_Node_Str""));
    do {
      String preplacedBlack=node.getProperty(""String_Node_Str"");
      String preplacedWhite=node.getProperty(""String_Node_Str"");
      if (StringUtils.isNotEmpty(preplacedBlack) || StringUtils.isNotEmpty(preplacedWhite)) {
        placePreplacedMove(replayer,preplacedBlack,preplacedWhite);
      }
      if (node.isMove()) {
        if (StringUtils.isNotEmpty(node.getProperty(""String_Node_Str""))) {
          int[] coords=node.getCoords();
          if (coords != null && coords[0] < 19 && coords[0] >= 0 && coords[1] < 19 && coords[1] >= 0) {
            replayer.playMove(true,coords[0],coords[1]);
          }
        }
        if (StringUtils.isNotEmpty(node.getProperty(""String_Node_Str""))) {
          int[] coords=node.getCoords();
          if (coords != null && coords[0] < 19 && coords[0] >= 0 && coords[1] < 19 && coords[1] >= 0) {
            replayer.playMove(false,coords[0],coords[1]);
          }
        }
      }
    }
 while ((node=node.getNextNode()) != null);
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}"
68964,"@Override public int size(){
  return initialNode.distanceToEnd() + 1;
}","@Override public int size(){
  return initialNode.distanceToEnd();
}"
68965,"private static String transformAxisForMove(String move){
  int[] coords=Board.convertNameToCoordinates(move);
  int x=coords[0], y=coords[1];
  return Board.alphabet.substring(x,x + 1) + (19 - y);
}","private static String transformAxisForMove(String move){
  int[] coords=Board.convertNameToCoordinates(move);
  int x=coords[0], y=coords[1];
  if (Board.isValid(x,y)) {
    return Board.alphabet.substring(x,x + 1) + (19 - y);
  }
 else {
    return ""String_Node_Str"";
  }
}"
68966,"/** 
 * Draw a go board
 * @param g0 graphics instance
 */
public void draw(Graphics g0){
  Graphics2D g=(Graphics2D)g0;
  int scaledMargin;
  int availableWidth;
  int[] calculatedPixelMargins=calculatePixelMargins();
  boardWidth=calculatedPixelMargins[0];
  scaledMargin=calculatedPixelMargins[1];
  availableWidth=calculatedPixelMargins[2];
  g.setColor(Lizzie.optionSetting.getBoardColor());
  g.fillRect(x,y,boardWidth,boardWidth);
  g.setColor(Color.BLACK);
  int squareSize=calculateSquareSize(availableWidth);
  for (int i=0; i < Board.BOARD_SIZE; i++) {
    g.drawLine(x + scaledMargin,y + scaledMargin + squareSize * i,x + scaledMargin + availableWidth - 1,y + scaledMargin + squareSize * i);
  }
  for (int i=0; i < Board.BOARD_SIZE; i++) {
    g.drawLine(x + scaledMargin + squareSize * i,y + scaledMargin,x + scaledMargin + squareSize * i,y + scaledMargin + availableWidth - 1);
  }
  int starPointRadius=(int)(STAR_POINT_WIDTH * boardWidth) / 2;
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 3; j++) {
      int centerX=x + scaledMargin + squareSize * (3 + 6 * i) - starPointRadius;
      int centerY=y + scaledMargin + squareSize * (3 + 6 * j) - starPointRadius;
      g.fillOval(centerX,centerY,2 * starPointRadius,2 * starPointRadius);
    }
  }
  int stoneRadius=squareSize / 2 - 1;
  if (Lizzie.board != null) {
    int[] lastMove=Lizzie.board.getLastMove();
    int lastMoveNumber=Lizzie.board.getData().moveNumber;
    int moveNumberLowerLimit;
    if (Lizzie.board.isInTryPlayState()) {
      moveNumberLowerLimit=Lizzie.board.getTryPlayStateBeginMoveNumber();
    }
 else {
      moveNumberLowerLimit=lastMoveNumber - Lizzie.optionSetting.getNumberOfLastMovesShown();
      if (moveNumberLowerLimit < 0) {
        moveNumberLowerLimit=0;
      }
    }
    for (int i=0; i < Board.BOARD_SIZE; i++) {
      for (int j=0; j < Board.BOARD_SIZE; j++) {
        int stoneX=x + scaledMargin + squareSize * i - stoneRadius;
        int stoneY=y + scaledMargin + squareSize * j - stoneRadius;
switch (Lizzie.board.getStones()[Board.getIndex(i,j)]) {
case EMPTY:
          break;
case BLACK:
        g.setColor(Color.BLACK);
      g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
    break;
case WHITE:
  g.setColor(Color.WHITE);
g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
g.setColor(Color.BLACK);
g.drawOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
break;
default :
}
if (Lizzie.board.isInTryPlayState() || !(Lizzie.optionSetting.isAutoHideMoveNumber() && Lizzie.analysisFrame != null && Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove() != null) && Lizzie.optionSetting.isShowMoveNumber() && Lizzie.board.getMoveNumberList()[Board.getIndex(i,j)] > 0) {
if (!(lastMove != null && i == lastMove[0] && j == lastMove[1])) {
int currentMoveNumber=Lizzie.board.getMoveNumberList()[Board.getIndex(i,j)];
if (currentMoveNumber > moveNumberLowerLimit) {
String moveNumberString;
if (Lizzie.board.isInTryPlayState()) {
moveNumberString=String.valueOf(currentMoveNumber - moveNumberLowerLimit);
}
 else {
moveNumberString=String.valueOf(currentMoveNumber);
}
g.setColor(Lizzie.board.getStones()[Board.getIndex(i,j)].equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(moveNumberString) > stoneRadius * 1.7);
g.drawString(moveNumberString,stoneX + stoneRadius - g.getFontMetrics(font).stringWidth(moveNumberString) / 2,stoneY + stoneRadius + (int)(fontSize / 2.0) - 1);
}
}
}
}
}
if (lastMove != null) {
if (Lizzie.board.isInTryPlayState() || !(Lizzie.optionSetting.isAutoHideMoveNumber() && Lizzie.analysisFrame != null && Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove() != null) && Lizzie.optionSetting.isShowMoveNumber()) {
int stoneX=x + scaledMargin + squareSize * lastMove[0] - stoneRadius;
int stoneY=y + scaledMargin + squareSize * lastMove[1] - stoneRadius;
int currentMoveNumber=Lizzie.board.getMoveNumberList()[Board.getIndex(lastMove[0],lastMove[1])];
if (currentMoveNumber > moveNumberLowerLimit) {
String moveNumberString;
if (Lizzie.board.isInTryPlayState()) {
moveNumberString=String.valueOf(currentMoveNumber - moveNumberLowerLimit);
}
 else {
moveNumberString=String.valueOf(currentMoveNumber);
}
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(moveNumberString) > stoneRadius * 1.7);
g.setColor(Color.RED);
g.drawString(moveNumberString,stoneX + stoneRadius - g.getFontMetrics(font).stringWidth(moveNumberString) / 2,stoneY + stoneRadius + (int)(fontSize / 2.0) - 1);
}
}
 else {
int circleRadius=squareSize / 4;
int stoneX=x + scaledMargin + squareSize * lastMove[0] - circleRadius;
int stoneY=y + scaledMargin + squareSize * lastMove[1] - circleRadius;
g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])] == Stone.WHITE ? Color.BLACK : Color.WHITE);
g.drawOval(stoneX,stoneY,circleRadius * 2 + 1,circleRadius * 2 + 1);
}
}
}
List<MoveData> bestMoves=Lizzie.leelaz.getBestMoves();
if (!bestMoves.isEmpty() && !(Lizzie.optionSetting.isAutoHideAnalysisSuggession() && Lizzie.analysisFrame != null && Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove() != null)) {
final double MIN_ACCEPTABLE_PLAYOUTS=0.0;
int maxPlayouts=0;
for (MoveData move : bestMoves) {
if (move.playouts < MIN_ACCEPTABLE_PLAYOUTS) continue;
if (move.playouts > maxPlayouts) maxPlayouts=move.playouts;
}
final int MIN_ALPHA=32;
final int MAX_ALPHA=240;
for (int i=0; i < bestMoves.size(); i++) {
MoveData move=bestMoves.get(i);
double percentPlayouts=(Math.max(0,(double)move.playouts) / Math.max(1,maxPlayouts));
if (percentPlayouts < MIN_ACCEPTABLE_PLAYOUTS) {
continue;
}
int[] coordinates=Board.convertNameToCoordinates(move.coordinate);
int suggestionX=x + scaledMargin + squareSize * coordinates[0] - stoneRadius;
int suggestionY=y + scaledMargin + squareSize * coordinates[1] - stoneRadius;
float hue=(float)(-0.32 * Math.max(0,Math.log(percentPlayouts) / 3 + 1));
float saturation=0.75f;
float brightness=0.85f;
int alpha=(int)(MIN_ALPHA + (MAX_ALPHA - MIN_ALPHA) * Math.max(0,Math.log(percentPlayouts) / 5 + 1));
Color hsbColor=Color.getHSBColor(hue,saturation,brightness);
Color color=new Color(hsbColor.getRed(),hsbColor.getBlue(),hsbColor.getGreen(),alpha);
g.setColor(color);
g.fillOval(suggestionX,suggestionY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
int strokeWidth=0;
if (i == 0) {
strokeWidth=2;
g.setColor(Color.BLUE.brighter());
g.setStroke(new BasicStroke(strokeWidth));
}
 else {
g.setColor(color.darker());
}
g.drawOval(suggestionX + strokeWidth / 2,suggestionY + strokeWidth / 2,stoneRadius * 2 + 1 - strokeWidth,stoneRadius * 2 + 1 - strokeWidth);
g.setStroke(new BasicStroke(1));
if (alpha > 64) {
g.setColor(Color.BLACK);
Font font=new Font(""String_Node_Str"",Font.BOLD,(int)(stoneRadius * 0.85));
g.setFont(font);
String winrateString=String.format(""String_Node_Str"",move.winrate) + ""String_Node_Str"";
g.drawString(winrateString,suggestionX + stoneRadius - g.getFontMetrics(font).stringWidth(winrateString) / 2,suggestionY + stoneRadius);
String playouts;
int fontSize=(int)(stoneRadius * 0.8);
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
playouts=""String_Node_Str"" + move.playouts;
}
 while (g.getFontMetrics(font).stringWidth(playouts) > stoneRadius * 1.7);
g.drawString(""String_Node_Str"" + move.playouts,suggestionX + stoneRadius - g.getFontMetrics(font).stringWidth(playouts) / 2,suggestionY + stoneRadius + font.getSize());
}
}
}
if (Lizzie.analysisFrame != null) {
Lizzie.analysisFrame.getAnalysisTable().clearSelection();
Lizzie.analysisFrame.getAnalysisTableModel().refreshData();
int selectedIndex=Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMoveIndex();
if (selectedIndex >= 0) {
Lizzie.analysisFrame.getAnalysisTable().setRowSelectionInterval(selectedIndex,selectedIndex);
}
MoveData moveData=Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove();
if (moveData != null) {
int nextVariationNumber=0;
if (Lizzie.board.isInTryPlayState()) {
nextVariationNumber=Lizzie.board.getData().moveNumber - Lizzie.board.getTryPlayStateBeginMoveNumber();
if (nextVariationNumber < 0) {
nextVariationNumber=0;
}
}
Stone nextStone=Lizzie.board.getData().lastMoveColor;
for (String move : moveData.variation) {
++nextVariationNumber;
if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
break;
}
if (nextStone.equals(Stone.BLACK)) {
nextStone=Stone.WHITE;
}
 else {
nextStone=Stone.BLACK;
}
int[] coords=Board.convertNameToCoordinates(move);
int i=coords[0], j=coords[1];
int stoneX=x + scaledMargin + squareSize * i - stoneRadius;
int stoneY=y + scaledMargin + squareSize * j - stoneRadius;
switch (nextStone) {
case BLACK:
g.setColor(new Color(0,0,0,175));
g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
break;
case WHITE:
g.setColor(new Color(255,255,255,175));
g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
break;
default :
break;
}
g.setColor(new Color(30,144,255,175));
g.setStroke(new BasicStroke(3));
g.drawOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
g.setStroke(new BasicStroke(1));
g.setColor(nextStone.equals(Stone.BLACK) ? new Color(255,255,255,175) : new Color(0,0,0,175));
String moveNumberString=String.valueOf(nextVariationNumber);
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.BOLD,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(moveNumberString) > stoneRadius * 1.7);
fontSize=(int)(fontSize * 0.8);
font=new Font(""String_Node_Str"",Font.BOLD,fontSize);
g.setFont(font);
g.drawString(moveNumberString,stoneX + stoneRadius - g.getFontMetrics(font).stringWidth(moveNumberString) / 2,stoneY + stoneRadius + (int)(fontSize / 2.0) - 1);
}
}
}
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(""String_Node_Str"") > stoneRadius * 0.7);
g.setColor(Color.BLACK);
for (int i=0; i < Board.alphabet.length(); ++i) {
g.drawString(Board.alphabet.substring(i,i + 1),x + scaledMargin + squareSize * i - (int)(stoneRadius * 0.35),y + (int)(scaledMargin * 0.7) - (int)(stoneRadius * 0.35));
g.drawString(Board.alphabet.substring(i,i + 1),x + scaledMargin + squareSize * i - (int)(stoneRadius * 0.35),y + (int)(scaledMargin * 0.9) + squareSize * 19);
}
for (int i=0; i < Board.alphabet.length(); ++i) {
int n=Lizzie.optionSetting.isA1OnTop() ? i : Board.alphabet.length() - i - 1;
String number;
if (n < 9) {
number=""String_Node_Str"" + String.valueOf(n + 1);
}
 else {
number=String.valueOf(n + 1);
}
g.drawString(number,x + (int)(scaledMargin * 0.3) - (int)(stoneRadius * 0.35),y + (int)(scaledMargin * 1.4) + squareSize * i - stoneRadius / 2);
g.drawString(String.valueOf(n + 1),x + (int)(scaledMargin * 0.6) + squareSize * 19,y + (int)(scaledMargin * 1.4) + squareSize * i - stoneRadius / 2);
}
}","/** 
 * Draw a go board
 * @param g0 graphics instance
 */
public void draw(Graphics g0){
  Graphics2D g=(Graphics2D)g0;
  int scaledMargin;
  int availableWidth;
  int[] calculatedPixelMargins=calculatePixelMargins();
  boardWidth=calculatedPixelMargins[0];
  scaledMargin=calculatedPixelMargins[1];
  availableWidth=calculatedPixelMargins[2];
  g.setColor(Lizzie.optionSetting.getBoardColor());
  g.fillRect(x,y,boardWidth,boardWidth);
  g.setColor(Color.BLACK);
  int squareSize=calculateSquareSize(availableWidth);
  for (int i=0; i < Board.BOARD_SIZE; i++) {
    g.drawLine(x + scaledMargin,y + scaledMargin + squareSize * i,x + scaledMargin + availableWidth - 1,y + scaledMargin + squareSize * i);
  }
  for (int i=0; i < Board.BOARD_SIZE; i++) {
    g.drawLine(x + scaledMargin + squareSize * i,y + scaledMargin,x + scaledMargin + squareSize * i,y + scaledMargin + availableWidth - 1);
  }
  int starPointRadius=(int)(STAR_POINT_WIDTH * boardWidth) / 2;
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 3; j++) {
      int centerX=x + scaledMargin + squareSize * (3 + 6 * i) - starPointRadius;
      int centerY=y + scaledMargin + squareSize * (3 + 6 * j) - starPointRadius;
      g.fillOval(centerX,centerY,2 * starPointRadius,2 * starPointRadius);
    }
  }
  int stoneRadius=squareSize / 2 - 1;
  if (Lizzie.board != null) {
    int[] lastMove=Lizzie.board.getLastMove();
    int lastMoveNumber=Lizzie.board.getData().moveNumber;
    int moveNumberLowerLimit;
    if (Lizzie.board.isInTryPlayState()) {
      moveNumberLowerLimit=Lizzie.board.getTryPlayStateBeginMoveNumber();
    }
 else {
      moveNumberLowerLimit=lastMoveNumber - Lizzie.optionSetting.getNumberOfLastMovesShown();
      if (moveNumberLowerLimit < 0) {
        moveNumberLowerLimit=0;
      }
    }
    for (int i=0; i < Board.BOARD_SIZE; i++) {
      for (int j=0; j < Board.BOARD_SIZE; j++) {
        int stoneX=x + scaledMargin + squareSize * i - stoneRadius;
        int stoneY=y + scaledMargin + squareSize * j - stoneRadius;
switch (Lizzie.board.getStones()[Board.getIndex(i,j)]) {
case EMPTY:
          break;
case BLACK:
        g.setColor(Color.BLACK);
      g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
    break;
case WHITE:
  g.setColor(Color.WHITE);
g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
g.setColor(Color.BLACK);
g.drawOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
break;
default :
}
if (Lizzie.board.isInTryPlayState() || !(Lizzie.optionSetting.isAutoHideMoveNumber() && Lizzie.analysisFrame != null && Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove() != null) && Lizzie.optionSetting.isShowMoveNumber() && Lizzie.board.getMoveNumberList()[Board.getIndex(i,j)] > 0) {
if (!(lastMove != null && i == lastMove[0] && j == lastMove[1])) {
int currentMoveNumber=Lizzie.board.getMoveNumberList()[Board.getIndex(i,j)];
if (currentMoveNumber > moveNumberLowerLimit) {
String moveNumberString;
if (Lizzie.board.isInTryPlayState()) {
moveNumberString=String.valueOf(currentMoveNumber - moveNumberLowerLimit);
}
 else {
moveNumberString=String.valueOf(currentMoveNumber);
}
g.setColor(Lizzie.board.getStones()[Board.getIndex(i,j)].equals(Stone.BLACK) ? Color.WHITE : Color.BLACK);
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(moveNumberString) > stoneRadius * 1.7);
g.drawString(moveNumberString,stoneX + stoneRadius - g.getFontMetrics(font).stringWidth(moveNumberString) / 2,stoneY + stoneRadius + (int)(fontSize / 2.0) - 1);
}
}
}
}
}
if (lastMove != null) {
if (Lizzie.board.isInTryPlayState() || !(Lizzie.optionSetting.isAutoHideMoveNumber() && Lizzie.analysisFrame != null && Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove() != null) && Lizzie.optionSetting.isShowMoveNumber()) {
int stoneX=x + scaledMargin + squareSize * lastMove[0] - stoneRadius;
int stoneY=y + scaledMargin + squareSize * lastMove[1] - stoneRadius;
int currentMoveNumber=Lizzie.board.getMoveNumberList()[Board.getIndex(lastMove[0],lastMove[1])];
if (currentMoveNumber > moveNumberLowerLimit) {
String moveNumberString;
if (Lizzie.board.isInTryPlayState()) {
moveNumberString=String.valueOf(currentMoveNumber - moveNumberLowerLimit);
}
 else {
moveNumberString=String.valueOf(currentMoveNumber);
}
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(moveNumberString) > stoneRadius * 1.7);
g.setColor(Color.RED);
g.drawString(moveNumberString,stoneX + stoneRadius - g.getFontMetrics(font).stringWidth(moveNumberString) / 2,stoneY + stoneRadius + (int)(fontSize / 2.0) - 1);
}
}
 else {
int circleRadius=squareSize / 4;
int stoneX=x + scaledMargin + squareSize * lastMove[0] - circleRadius;
int stoneY=y + scaledMargin + squareSize * lastMove[1] - circleRadius;
g.setColor(Lizzie.board.getStones()[Board.getIndex(lastMove[0],lastMove[1])] == Stone.WHITE ? Color.BLACK : Color.WHITE);
g.drawOval(stoneX,stoneY,circleRadius * 2 + 1,circleRadius * 2 + 1);
}
}
}
List<MoveData> bestMoves=Lizzie.leelaz.getBestMoves();
if (!bestMoves.isEmpty() && !(Lizzie.optionSetting.isAutoHideAnalysisSuggession() && Lizzie.analysisFrame != null && Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove() != null)) {
final double MIN_ACCEPTABLE_PLAYOUTS=0.0;
int maxPlayouts=0;
for (MoveData move : bestMoves) {
if (move.playouts < MIN_ACCEPTABLE_PLAYOUTS) continue;
if (move.playouts > maxPlayouts) maxPlayouts=move.playouts;
}
final int MIN_ALPHA=32;
final int MAX_ALPHA=240;
for (int i=0; i < bestMoves.size(); i++) {
MoveData move=bestMoves.get(i);
double percentPlayouts=(Math.max(0,(double)move.playouts) / Math.max(1,maxPlayouts));
if (percentPlayouts < MIN_ACCEPTABLE_PLAYOUTS) {
continue;
}
int[] coordinates=Board.convertNameToCoordinates(move.coordinate);
int suggestionX=x + scaledMargin + squareSize * coordinates[0] - stoneRadius;
int suggestionY=y + scaledMargin + squareSize * coordinates[1] - stoneRadius;
float hue=(float)(-0.32 * Math.max(0,Math.log(percentPlayouts) / 3 + 1));
float saturation=0.75f;
float brightness=0.85f;
int alpha=(int)(MIN_ALPHA + (MAX_ALPHA - MIN_ALPHA) * Math.max(0,Math.log(percentPlayouts) / 5 + 1));
Color hsbColor=Color.getHSBColor(hue,saturation,brightness);
Color color=new Color(hsbColor.getRed(),hsbColor.getBlue(),hsbColor.getGreen(),alpha);
g.setColor(color);
g.fillOval(suggestionX,suggestionY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
int strokeWidth=0;
if (i == 0) {
strokeWidth=2;
g.setColor(Color.BLUE.brighter());
g.setStroke(new BasicStroke(strokeWidth));
}
 else {
g.setColor(color.darker());
}
g.drawOval(suggestionX + strokeWidth / 2,suggestionY + strokeWidth / 2,stoneRadius * 2 + 1 - strokeWidth,stoneRadius * 2 + 1 - strokeWidth);
g.setStroke(new BasicStroke(1));
if (alpha > 64) {
g.setColor(Color.BLACK);
Font font=new Font(""String_Node_Str"",Font.BOLD,(int)(stoneRadius * 0.85));
g.setFont(font);
String winrateString=String.format(""String_Node_Str"",move.winrate) + ""String_Node_Str"";
g.drawString(winrateString,suggestionX + stoneRadius - g.getFontMetrics(font).stringWidth(winrateString) / 2,suggestionY + stoneRadius);
String playouts;
int fontSize=(int)(stoneRadius * 0.8);
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
playouts=""String_Node_Str"" + move.playouts;
}
 while (g.getFontMetrics(font).stringWidth(playouts) > stoneRadius * 1.7);
g.drawString(""String_Node_Str"" + move.playouts,suggestionX + stoneRadius - g.getFontMetrics(font).stringWidth(playouts) / 2,suggestionY + stoneRadius + font.getSize());
}
}
}
if (Lizzie.analysisFrame != null) {
Lizzie.analysisFrame.getAnalysisTable().clearSelection();
Lizzie.analysisFrame.getAnalysisTableModel().refreshData();
int selectedIndex=Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMoveIndex();
if (selectedIndex >= 0) {
Lizzie.analysisFrame.getAnalysisTable().setRowSelectionInterval(selectedIndex,selectedIndex);
}
MoveData moveData=Lizzie.analysisFrame.getAnalysisTableModel().getSelectedMove();
if (moveData != null) {
int nextVariationNumber=0;
if (Lizzie.board.isInTryPlayState()) {
nextVariationNumber=Lizzie.board.getData().moveNumber - Lizzie.board.getTryPlayStateBeginMoveNumber();
if (nextVariationNumber < 0) {
nextVariationNumber=0;
}
}
Stone nextStone=Lizzie.board.getData().lastMoveColor;
for (String move : moveData.variation) {
++nextVariationNumber;
if (nextVariationNumber > Lizzie.optionSetting.getVariationLimit()) {
break;
}
if (nextStone.equals(Stone.BLACK)) {
nextStone=Stone.WHITE;
}
 else {
nextStone=Stone.BLACK;
}
int[] coords=Board.convertNameToCoordinates(move);
int i=coords[0], j=coords[1];
if (Board.isValid(i,j)) {
int stoneX=x + scaledMargin + squareSize * i - stoneRadius;
int stoneY=y + scaledMargin + squareSize * j - stoneRadius;
switch (nextStone) {
case BLACK:
g.setColor(new Color(0,0,0,175));
g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
break;
case WHITE:
g.setColor(new Color(255,255,255,175));
g.fillOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
break;
default :
break;
}
g.setColor(new Color(30,144,255,175));
g.setStroke(new BasicStroke(3));
g.drawOval(stoneX,stoneY,stoneRadius * 2 + 1,stoneRadius * 2 + 1);
g.setStroke(new BasicStroke(1));
g.setColor(nextStone.equals(Stone.BLACK) ? new Color(255,255,255,175) : new Color(0,0,0,175));
String moveNumberString=String.valueOf(nextVariationNumber);
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.BOLD,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(moveNumberString) > stoneRadius * 1.7);
fontSize=(int)(fontSize * 0.8);
font=new Font(""String_Node_Str"",Font.BOLD,fontSize);
g.setFont(font);
g.drawString(moveNumberString,stoneX + stoneRadius - g.getFontMetrics(font).stringWidth(moveNumberString) / 2,stoneY + stoneRadius + (int)(fontSize / 2.0) - 1);
}
}
}
}
int fontSize=(int)(stoneRadius * 1.5);
Font font;
do {
font=new Font(""String_Node_Str"",Font.PLAIN,fontSize--);
g.setFont(font);
}
 while (g.getFontMetrics(font).stringWidth(""String_Node_Str"") > stoneRadius * 0.7);
g.setColor(Color.BLACK);
for (int i=0; i < Board.alphabet.length(); ++i) {
g.drawString(Board.alphabet.substring(i,i + 1),x + scaledMargin + squareSize * i - (int)(stoneRadius * 0.35),y + (int)(scaledMargin * 0.7) - (int)(stoneRadius * 0.35));
g.drawString(Board.alphabet.substring(i,i + 1),x + scaledMargin + squareSize * i - (int)(stoneRadius * 0.35),y + (int)(scaledMargin * 0.9) + squareSize * 19);
}
for (int i=0; i < Board.alphabet.length(); ++i) {
int n=Lizzie.optionSetting.isA1OnTop() ? i : Board.alphabet.length() - i - 1;
String number;
if (n < 9) {
number=""String_Node_Str"" + String.valueOf(n + 1);
}
 else {
number=String.valueOf(n + 1);
}
g.drawString(number,x + (int)(scaledMargin * 0.3) - (int)(stoneRadius * 0.35),y + (int)(scaledMargin * 1.4) + squareSize * i - stoneRadius / 2);
g.drawString(String.valueOf(n + 1),x + (int)(scaledMargin * 0.6) + squareSize * 19,y + (int)(scaledMargin * 1.4) + squareSize * i - stoneRadius / 2);
}
}"
68967,"/** 
 * Converts a x and y coordinate to a named coordinate eg C16, T5, K10, etc
 * @param x x coordinate -- must be valid
 * @param y y coordinate -- must be valid
 * @return a string representing the coordinate
 */
public static String convertCoordinatesToName(int x,int y){
  return alphabet.charAt(x) + ""String_Node_Str"" + (y + 1);
}","/** 
 * Converts a x and y coordinate to a named coordinate eg C16, T5, K10, etc
 * @param x x coordinate -- must be valid
 * @param y y coordinate -- must be valid
 * @return a string representing the coordinate
 */
public static String convertCoordinatesToName(int x,int y){
  if (isValid(x,y)) {
    return alphabet.charAt(x) + ""String_Node_Str"" + (y + 1);
  }
 else {
    return ""String_Node_Str"";
  }
}"
68968,"/** 
 * Converts a named coordinate eg C16, T5, K10, etc to an x and y coordinate
 * @param namedCoordinate a capitalized version of the named coordinate. Must be a valid 19x19 Go coordinate, without I
 * @return an array containing x, followed by y
 */
public static int[] convertNameToCoordinates(String namedCoordinate){
  int x=alphabet.indexOf(namedCoordinate.charAt(0));
  int y=Integer.parseInt(namedCoordinate.substring(1)) - 1;
  return new int[]{x,y};
}","/** 
 * Converts a named coordinate eg C16, T5, K10, etc to an x and y coordinate
 * @param namedCoordinate a capitalized version of the named coordinate. Must be a valid 19x19 Go coordinate, without I
 * @return an array containing x, followed by y
 */
public static int[] convertNameToCoordinates(String namedCoordinate){
  if (StringUtils.equalsIgnoreCase(namedCoordinate,""String_Node_Str"")) {
    return new int[]{BOARD_SIZE,BOARD_SIZE};
  }
 else {
    int x=alphabet.indexOf(namedCoordinate.charAt(0));
    if (x < 0) {
      return new int[]{BOARD_SIZE,BOARD_SIZE};
    }
    int y;
    try {
      y=Integer.parseInt(namedCoordinate.substring(1)) - 1;
    }
 catch (    NumberFormatException e) {
      return new int[]{BOARD_SIZE,BOARD_SIZE};
    }
    return new int[]{x,y};
  }
}"
68969,"public static void loadGameByFile(Path gameFilePath){
  try {
    Game game=Sgf.createFromPath(gameFilePath);
    GameNode node=game.getRootNode();
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    clearBoardAndState();
    String prePlacedBlackStoneString=game.getProperty(""String_Node_Str"");
    String prePlacedWhiteStoneString=game.getProperty(""String_Node_Str"");
    List<int[]> prePlacedBlackStones=Collections.emptyList(), prePlacedWhiteStones=Collections.emptyList();
    if (StringUtils.isNotEmpty(prePlacedBlackStoneString)) {
      prePlacedBlackStones=Arrays.stream(prePlacedBlackStoneString.split(""String_Node_Str"")).map(String::trim).map(Util::alphaToCoords).collect(Collectors.toList());
    }
    if (StringUtils.isNotEmpty(prePlacedWhiteStoneString)) {
      prePlacedWhiteStones=Arrays.stream(prePlacedBlackStoneString.split(""String_Node_Str"")).map(String::trim).map(Util::alphaToCoords).collect(Collectors.toList());
    }
    if (CollectionUtils.isNotEmpty(prePlacedBlackStones) || CollectionUtils.isNotEmpty(prePlacedWhiteStones)) {
      int maxLength=Math.max(prePlacedBlackStones.size(),prePlacedWhiteStones.size());
      for (int i=0; i < maxLength; ++i) {
        if (i < prePlacedBlackStones.size()) {
          Lizzie.board.place(prePlacedBlackStones.get(i)[0],prePlacedBlackStones.get(i)[1]);
        }
 else {
          Lizzie.board.pass();
        }
        if (i < prePlacedWhiteStones.size()) {
          Lizzie.board.place(prePlacedWhiteStones.get(i)[0],prePlacedWhiteStones.get(i)[1]);
        }
 else {
          Lizzie.board.pass();
        }
      }
    }
    do {
      if (node.getMoveNo() < 0 || StringUtils.isEmpty(node.getMoveString())) {
        continue;
      }
      int[] coords=node.getCoords();
      if (coords[0] >= 19 || coords[0] < 0 || coords[1] >= 19 || coords[1] < 0) {
        Lizzie.board.pass();
      }
 else {
        Lizzie.board.place(coords[0],coords[1]);
      }
    }
 while ((node=node.getNextNode()) != null);
  }
 catch (  SgfParseException e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","public static void loadGameByFile(Path gameFilePath){
  try {
    Game game=Sgf.createFromPath(gameFilePath);
    GameNode node=game.getRootNode();
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    MoveReplayer replayer=new MoveReplayer();
    clearBoardAndState();
    String prePlacedBlackStoneString=game.getProperty(""String_Node_Str"");
    String prePlacedWhiteStoneString=game.getProperty(""String_Node_Str"");
    List<int[]> prePlacedBlackStones=Collections.emptyList(), prePlacedWhiteStones=Collections.emptyList();
    if (StringUtils.isNotEmpty(prePlacedBlackStoneString)) {
      prePlacedBlackStones=Arrays.stream(prePlacedBlackStoneString.split(""String_Node_Str"")).map(String::trim).map(Util::alphaToCoords).collect(Collectors.toList());
    }
    if (StringUtils.isNotEmpty(prePlacedWhiteStoneString)) {
      prePlacedWhiteStones=Arrays.stream(prePlacedWhiteStoneString.split(""String_Node_Str"")).map(String::trim).map(Util::alphaToCoords).collect(Collectors.toList());
    }
    if (CollectionUtils.isNotEmpty(prePlacedBlackStones) || CollectionUtils.isNotEmpty(prePlacedWhiteStones)) {
      int maxLength=Math.max(prePlacedBlackStones.size(),prePlacedWhiteStones.size());
      for (int i=0; i < maxLength; ++i) {
        if (i < prePlacedBlackStones.size()) {
          replayer.playMove(true,prePlacedBlackStones.get(i)[0],prePlacedBlackStones.get(i)[1]);
        }
        if (i < prePlacedWhiteStones.size()) {
          replayer.playMove(false,prePlacedWhiteStones.get(i)[0],prePlacedWhiteStones.get(i)[1]);
        }
      }
    }
    do {
      if (node.getMoveNo() < 0 || StringUtils.isEmpty(node.getMoveString())) {
        continue;
      }
      int[] coords=node.getCoords();
      if (coords[0] < 19 && coords[0] >= 0 && coords[1] < 19 && coords[1] >= 0) {
        replayer.playMove(node.getColorAsEnum().equals(StoneState.BLACK),coords[0],coords[1]);
      }
    }
 while ((node=node.getNextNode()) != null);
  }
 catch (  SgfParseException e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}"
68970,"public static void storeGameByPrompting(){
  Game game=new Game();
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  BoardHistoryList historyList=board.getHistory();
  BoardHistoryNode initialNode=historyList.getInitialNode();
  GameNode previousNode=null;
  for (BoardHistoryNode p=initialNode; p != null; p=p.next()) {
    GameNode gameNode=new GameNode(previousNode);
    if (previousNode == null) {
      game.setRootNode(gameNode);
    }
    if (Objects.equals(p.getData().lastMoveColor,Stone.BLACK) || Objects.equals(p.getData().lastMoveColor,Stone.WHITE)) {
      int x, y;
      if (p.getData().lastMove == null) {
        x=19;
        y=19;
      }
 else {
        x=p.getData().lastMove[0];
        y=p.getData().lastMove[1];
        if (x < 0 || x >= 19 || y < 0 || y >= 19) {
          x=19;
          y=19;
        }
      }
      String moveKey=Objects.equals(p.getData().lastMoveColor,Stone.BLACK) ? ""String_Node_Str"" : ""String_Node_Str"";
      String moveValue=Util.coordToAlpha.get(x) + Util.coordToAlpha.get(y);
      gameNode.addProperty(moveKey,moveValue);
    }
    if (p.getData().moveNumber > 0) {
      gameNode.setMoveNo(p.getData().moveNumber);
    }
    if (previousNode != null) {
      previousNode.addChild(gameNode);
    }
    previousNode=gameNode;
  }
  game.postProcess();
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  JFileChooser chooser=new JFileChooser(optionSetting.getLastChooserLocation());
  chooser.setFileFilter(filter);
  chooser.setMultiSelectionEnabled(false);
  int result=chooser.showSaveDialog(frame);
  if (result == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    optionSetting.setLastChooserLocation(file.getParent());
    if (file.exists()) {
      int ret=JOptionPane.showConfirmDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
      if (ret == JOptionPane.CANCEL_OPTION) {
        return;
      }
    }
    if (!file.getPath().toLowerCase().endsWith(""String_Node_Str"")) {
      file=new File(file.getPath() + ""String_Node_Str"");
    }
    try {
      Sgf.writeToFile(game,file.toPath());
    }
 catch (    Exception e) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","public static void storeGameByPrompting(){
  Game game=new Game();
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  game.addProperty(""String_Node_Str"",""String_Node_Str"");
  BoardHistoryList historyList=board.getHistory();
  BoardHistoryNode initialNode=historyList.getInitialNode();
  GameNode previousNode=null;
  for (BoardHistoryNode p=initialNode.next(); p != null; p=p.next()) {
    GameNode gameNode=new GameNode(previousNode);
    if (previousNode == null) {
      game.setRootNode(gameNode);
    }
    if (Objects.equals(p.getData().lastMoveColor,Stone.BLACK) || Objects.equals(p.getData().lastMoveColor,Stone.WHITE)) {
      int x, y;
      if (p.getData().lastMove == null) {
        x=19;
        y=19;
      }
 else {
        x=p.getData().lastMove[0];
        y=p.getData().lastMove[1];
        if (x < 0 || x >= 19 || y < 0 || y >= 19) {
          x=19;
          y=19;
        }
      }
      String moveKey=Objects.equals(p.getData().lastMoveColor,Stone.BLACK) ? ""String_Node_Str"" : ""String_Node_Str"";
      String moveValue=Util.coordToAlpha.get(x) + Util.coordToAlpha.get(y);
      gameNode.addProperty(moveKey,moveValue);
    }
    if (p.getData().moveNumber > 0) {
      gameNode.setMoveNo(p.getData().moveNumber);
    }
    if (previousNode != null) {
      previousNode.addChild(gameNode);
    }
    previousNode=gameNode;
  }
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  JFileChooser chooser=new JFileChooser(optionSetting.getLastChooserLocation());
  chooser.setFileFilter(filter);
  chooser.setMultiSelectionEnabled(false);
  int result=chooser.showSaveDialog(frame);
  if (result == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    optionSetting.setLastChooserLocation(file.getParent());
    if (!file.getPath().toLowerCase().endsWith(""String_Node_Str"")) {
      file=new File(file.getPath() + ""String_Node_Str"");
    }
    if (file.exists()) {
      int ret=JOptionPane.showConfirmDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
      if (ret == JOptionPane.CANCEL_OPTION) {
        return;
      }
    }
    try {
      Sgf.writeToFile(game,file.toPath());
    }
 catch (    Exception e) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}"
68971,"public static void loadGameByFile(Path gameFilePath){
  try {
    Game game=Sgf.createFromPath(gameFilePath);
    GameNode node=game.getRootNode();
    if (!Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (!Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    clearBoardAndState();
    do {
      if (node.getMoveNo() < 0 || StringUtils.isEmpty(node.getMoveString())) {
        continue;
      }
      int[] coords=node.getCoords();
      if (coords[0] >= 19 || coords[0] < 0 || coords[1] >= 19 || coords[1] < 0) {
        System.out.printf(""String_Node_Str"",node.getColor());
        Lizzie.board.pass();
      }
 else {
        System.out.printf(""String_Node_Str"",node.getColor(),coords[0],coords[1]);
        Lizzie.board.place(coords[0],coords[1]);
      }
    }
 while ((node=node.getNextNode()) != null);
  }
 catch (  SgfParseException e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","public static void loadGameByFile(Path gameFilePath){
  try {
    Game game=Sgf.createFromPath(gameFilePath);
    GameNode node=game.getRootNode();
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (game.getProperty(""String_Node_Str"") != null && !Objects.equals(game.getProperty(""String_Node_Str""),""String_Node_Str"")) {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    clearBoardAndState();
    do {
      if (node.getMoveNo() < 0 || StringUtils.isEmpty(node.getMoveString())) {
        continue;
      }
      int[] coords=node.getCoords();
      if (coords[0] >= 19 || coords[0] < 0 || coords[1] >= 19 || coords[1] < 0) {
        System.out.printf(""String_Node_Str"",node.getColor());
        Lizzie.board.pass();
      }
 else {
        System.out.printf(""String_Node_Str"",node.getColor(),coords[0],coords[1]);
        Lizzie.board.place(coords[0],coords[1]);
      }
    }
 while ((node=node.getNextNode()) != null);
  }
 catch (  SgfParseException e) {
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}"
68972,"public static AppDatabase getDatabase(Context context){
  if (INSTANCE == null) {
    INSTANCE=Room.databaseBuilder(context.getApplicationContext(),AppDatabase.class,""String_Node_Str"").build();
  }
  return INSTANCE;
}","public static AppDatabase getDatabase(Context context){
  if (INSTANCE == null) {
    INSTANCE=Room.databaseBuilder(context.getApplicationContext(),AppDatabase.class,""String_Node_Str"").allowMainThreadQueries().build();
  }
  return INSTANCE;
}"
68973,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mainViewModel=ViewModelProviders.of(this).get(MainViewModel.class);
  user=mainViewModel.getUserLiveData();
  ActivityMainBinding binding=DataBindingUtil.setContentView(this,R.layout.activity_main);
  binding.setUser(user);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ButterKnife.bind(this);
  GoogleSignInOptions gso=new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestEmail().build();
  mGoogleApiClient=new GoogleApiClient.Builder(this).enableAutoManage(this,this).addApi(Auth.GOOGLE_SIGN_IN_API,gso).build();
  profileDialog=ProfileDialog.newInstance(((dialog,which) -> logout()));
  calendar=Calendar.getInstance();
  simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  String currentDate=simpleDateFormat.format(calendar.getTime());
  date.setText(currentDate);
  menuViewList=getMenuOptions();
  recyclerView.setLayoutManager(new GridLayoutManager(this,2));
  ItemOffsetDecoration itemDecoration=new ItemOffsetDecoration(this,R.dimen.item_offset);
  recyclerView.addItemDecoration(itemDecoration);
  MainDashboardAdapter mainDashboardAdapter=new MainDashboardAdapter(this,menuViewList,(v,position) -> {
    MenuView role=menuViewList.get(position);
    String menuName=role.getName();
switch (menuName) {
case ""String_Node_Str"":
      Intent addMedicine=new Intent(getApplicationContext(),AddMedicineActivity.class);
    startActivity(addMedicine);
  break;
case ""String_Node_Str"":
break;
case ""String_Node_Str"":
break;
case ""String_Node_Str"":
break;
default :
Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
break;
}
}
);
recyclerView.setAdapter(mainDashboardAdapter);
DailyMedicineStatisticsAdapter dailyMedicineStatisticsAdapter=new DailyMedicineStatisticsAdapter(this,new ArrayList<>());
recyclerViewDailyMedicineStatistics.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false));
PagerSnapHelper snapHelper=new PagerSnapHelper();
snapHelper.attachToRecyclerView(recyclerViewDailyMedicineStatistics);
recyclerViewDailyMedicineStatistics.addItemDecoration(new CirclePagerIndicatorDecoration());
recyclerViewDailyMedicineStatistics.setAdapter(dailyMedicineStatisticsAdapter);
MedicineViewModel medicineViewModel=ViewModelProviders.of(this).get(MedicineViewModel.class);
medicineViewModel.getMedicineList().observe(MainActivity.this,dailyMedicineStatisticsAdapter::addItems);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActivityMainBinding binding=DataBindingUtil.setContentView(this,R.layout.activity_main);
  mainViewModel=ViewModelProviders.of(this).get(MainViewModel.class);
  user=mainViewModel.getUserLiveData();
  binding.setUser(user);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ButterKnife.bind(this);
  GoogleSignInOptions gso=new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestEmail().build();
  mGoogleApiClient=new GoogleApiClient.Builder(this).enableAutoManage(this,this).addApi(Auth.GOOGLE_SIGN_IN_API,gso).build();
  profileDialog=ProfileDialog.newInstance(((dialog,which) -> logout()));
  calendar=Calendar.getInstance();
  simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  String currentDate=simpleDateFormat.format(calendar.getTime());
  date.setText(currentDate);
  menuViewList=getMenuOptions();
  recyclerView.setLayoutManager(new GridLayoutManager(this,2));
  ItemOffsetDecoration itemDecoration=new ItemOffsetDecoration(this,R.dimen.item_offset);
  recyclerView.addItemDecoration(itemDecoration);
  MainDashboardAdapter mainDashboardAdapter=new MainDashboardAdapter(this,menuViewList,(v,position) -> {
    MenuView role=menuViewList.get(position);
    String menuName=role.getName();
switch (menuName) {
case ""String_Node_Str"":
      Intent addMedicine=new Intent(getApplicationContext(),AddMedicineActivity.class);
    startActivity(addMedicine);
  break;
case ""String_Node_Str"":
break;
case ""String_Node_Str"":
break;
case ""String_Node_Str"":
break;
default :
Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
break;
}
}
);
recyclerView.setAdapter(mainDashboardAdapter);
DailyMedicineStatisticsAdapter dailyMedicineStatisticsAdapter=new DailyMedicineStatisticsAdapter(this,new ArrayList<>());
recyclerViewDailyMedicineStatistics.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false));
PagerSnapHelper snapHelper=new PagerSnapHelper();
snapHelper.attachToRecyclerView(recyclerViewDailyMedicineStatistics);
recyclerViewDailyMedicineStatistics.addItemDecoration(new CirclePagerIndicatorDecoration());
recyclerViewDailyMedicineStatistics.setAdapter(dailyMedicineStatisticsAdapter);
MedicineViewModel medicineViewModel=ViewModelProviders.of(this).get(MedicineViewModel.class);
medicineViewModel.getMedicineList().observe(MainActivity.this,dailyMedicineStatisticsAdapter::addItems);
}"
68974,"public static int themeIndex(){
  int themeIndex=0;
  try {
    themeIndex=Integer.parseInt(defaultPrefs.getString(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  Exception e) {
    Timber.e(e);
  }
  return themeIndex;
}","public static int themeIndex(){
  int themeIndex=1;
  try {
    themeIndex=Integer.parseInt(defaultPrefs.getString(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  Exception e) {
    Timber.e(e);
  }
  return themeIndex;
}"
68975,"@Override public Mutation apply(String inputRow){
  try {
    byte[] inputRowBytes=DatatypeConverter.parseBase64Binary(inputRow);
    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(inputRowBytes));
    Struct struct=(Struct)ois.readObject();
    Mutation.WriteBuilder mutationBuilder=Mutation.newInsertOrUpdateBuilder(tableName);
    Type tableType=struct.getType();
    for (    Type.StructField field : tableType.getStructFields()) {
      Type type=field.getType();
      String name=field.getName();
      if (struct.isNull(name)) {
        continue;
      }
      if (type.getCode() == Code.STRING) {
        mutationBuilder.set(name).to((String)struct.getString(name));
      }
 else       if (type.getCode() == Code.BOOL) {
        mutationBuilder.set(name).to((boolean)struct.getBoolean(name));
      }
 else       if (type.getCode() == Code.BYTES) {
        mutationBuilder.set(name).to((ByteArray)struct.getBytes(name));
      }
 else       if (type.getCode() == Code.DATE) {
        mutationBuilder.set(name).to((Date)struct.getDate(name));
      }
 else       if (type.getCode() == Code.FLOAT64) {
        mutationBuilder.set(name).to((double)struct.getDouble(name));
      }
 else       if (type.getCode() == Code.TIMESTAMP) {
        mutationBuilder.set(name).to((Timestamp)struct.getTimestamp(name));
      }
 else       if (type.getCode() == Code.INT64) {
        mutationBuilder.set(name).to((long)struct.getLong(name));
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ type.getCode());
      }
    }
    return mutationBuilder.build();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + e);
  }
}","@Override public Mutation apply(String inputRow){
  try {
    byte[] inputRowBytes=DatatypeConverter.parseBase64Binary(inputRow);
    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(inputRowBytes));
    Struct struct=(Struct)ois.readObject();
    Mutation.WriteBuilder mutationBuilder=Mutation.newInsertOrUpdateBuilder(tableName);
    Type tableType=struct.getType();
    for (    Type.StructField field : tableType.getStructFields()) {
      Type type=field.getType();
      String name=field.getName();
      if (struct.isNull(name)) {
        continue;
      }
      if (type.getCode() == Code.STRING) {
        mutationBuilder.set(name).to((String)struct.getString(name));
      }
 else       if (type.getCode() == Code.BOOL) {
        mutationBuilder.set(name).to((boolean)struct.getBoolean(name));
      }
 else       if (type.getCode() == Code.BYTES) {
        mutationBuilder.set(name).to((ByteArray)struct.getBytes(name));
      }
 else       if (type.getCode() == Code.DATE) {
        mutationBuilder.set(name).to((Date)struct.getDate(name));
      }
 else       if (type.getCode() == Code.FLOAT64) {
        mutationBuilder.set(name).to((double)struct.getDouble(name));
      }
 else       if (type.getCode() == Code.TIMESTAMP) {
        mutationBuilder.set(name).to((Timestamp)struct.getTimestamp(name));
      }
 else       if (type.getCode() == Code.INT64) {
        mutationBuilder.set(name).to((long)struct.getLong(name));
      }
 else       if (type.getCode() == Code.ARRAY) {
        if (type.getArrayElementType().getCode() == Code.STRING) {
          mutationBuilder.set(name).toStringArray(struct.getStringList(name));
        }
 else         if (type.getArrayElementType().getCode() == Code.BOOL) {
          mutationBuilder.set(name).toBoolArray(struct.getBooleanList(name));
        }
 else         if (type.getArrayElementType().getCode() == Code.BYTES) {
          mutationBuilder.set(name).toBytesArray(struct.getBytesList(name));
        }
 else         if (type.getArrayElementType().getCode() == Code.DATE) {
          mutationBuilder.set(name).toDateArray(struct.getDateList(name));
        }
 else         if (type.getArrayElementType().getCode() == Code.FLOAT64) {
          mutationBuilder.set(name).toFloat64Array(struct.getDoubleList(name));
        }
 else         if (type.getArrayElementType().getCode() == Code.INT64) {
          mutationBuilder.set(name).toInt64Array(struct.getLongArray(name));
        }
 else         if (type.getArrayElementType().getCode() == Code.TIMESTAMP) {
          mutationBuilder.set(name).toTimestampArray(struct.getTimestampList(name));
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ type.getCode());
      }
    }
    return mutationBuilder.build();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + e);
  }
}"
68976,"@Test public void testFormatGenericSpannerStructAsTextFnTest() throws Exception {
  FormatGenericSpannerStructAsTextFn simpleFn=new FormatGenericSpannerStructAsTextFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.STRUCT_1_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_1));
  assertEquals(TestHelper.STRUCT_2_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_2));
}","@Test public void testFormatGenericSpannerStructAsTextFnTest() throws Exception {
  FormatGenericSpannerStructAsTextFn simpleFn=new FormatGenericSpannerStructAsTextFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.STRUCT_1_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_1));
  assertEquals(TestHelper.STRUCT_2_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_2));
  assertEquals(TestHelper.STRUCT_3_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_3));
  assertEquals(TestHelper.STRUCT_4_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_4));
}"
68977,"@Test public void methodUnderTest_expectedResult() throws Exception {
  FormatTextAsGenericSpannerMutationFn simpleFn=new FormatTextAsGenericSpannerMutationFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.MUTATION_1,simpleFn.apply(TestHelper.STRUCT_1_BASE64_SERIALIZED));
}","@Test public void methodUnderTest_expectedResult() throws Exception {
  FormatTextAsGenericSpannerMutationFn simpleFn=new FormatTextAsGenericSpannerMutationFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.MUTATION_1,simpleFn.apply(TestHelper.STRUCT_1_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_2,simpleFn.apply(TestHelper.STRUCT_2_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_3,simpleFn.apply(TestHelper.STRUCT_3_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_4,simpleFn.apply(TestHelper.STRUCT_4_BASE64_SERIALIZED));
}"
68978,"@Test public void testFormatGenericSpannerStructAsTextFnTest() throws Exception {
  FormatGenericSpannerStructAsTextFn simpleFn=new FormatGenericSpannerStructAsTextFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.STRUCT_1_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_1));
  assertEquals(TestHelper.STRUCT_2_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_2));
  assertEquals(TestHelper.STRUCT_3_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_3));
  assertEquals(TestHelper.STRUCT_4_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_4));
}","@Test public void testFormatGenericSpannerStructAsTextFnTest() throws Exception {
  FormatGenericSpannerStructAsTextFn simpleFn=new FormatGenericSpannerStructAsTextFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.STRUCT_1_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_1));
  assertEquals(TestHelper.STRUCT_2_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_2));
  assertEquals(TestHelper.STRUCT_3_BASE64_SERIALIZED,simpleFn.apply(TestHelper.STRUCT_3));
}"
68979,"@Test public void methodUnderTest_expectedResult() throws Exception {
  FormatTextAsGenericSpannerMutationFn simpleFn=new FormatTextAsGenericSpannerMutationFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.MUTATION_1,simpleFn.apply(TestHelper.STRUCT_1_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_2,simpleFn.apply(TestHelper.STRUCT_2_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_3,simpleFn.apply(TestHelper.STRUCT_3_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_4,simpleFn.apply(TestHelper.STRUCT_4_BASE64_SERIALIZED));
}","@Test public void methodUnderTest_expectedResult() throws Exception {
  FormatTextAsGenericSpannerMutationFn simpleFn=new FormatTextAsGenericSpannerMutationFn(TestHelper.TABLE_NAME);
  assertEquals(TestHelper.MUTATION_1,simpleFn.apply(TestHelper.STRUCT_1_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_2,simpleFn.apply(TestHelper.STRUCT_2_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_3,simpleFn.apply(TestHelper.STRUCT_3_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_4,simpleFn.apply(TestHelper.STRUCT_4_BASE64_SERIALIZED));
  assertEquals(TestHelper.MUTATION_5,simpleFn.apply(TestHelper.STRUCT_5_BASE64_SERIALIZED));
}"
68980,"/** 
 * Temporary workaround put in until https://github.com/apache/beam/pull/4946 is live. Gets the list of tables to backup.
 */
public static ImmutableList<String> getTableNamesBeingBackedUp(String projectId,String instance,String databaseId,String tableNamesQuery,Util util){
  ImmutableList<Struct> tableNames=util.performSingleSpannerQuery(projectId,instance,databaseId,tableNamesQuery);
  ArrayList<String> tableNamesAsStrings=new ArrayList<String>();
  String parentTableName=""String_Node_Str"";
  for (  Struct inputRow : tableNames) {
    if (!inputRow.isNull(""String_Node_Str"")) {
      parentTableName=inputRow.getString(""String_Node_Str"");
    }
    tableNamesAsStrings.add(inputRow.getString(""String_Node_Str"") + ""String_Node_Str"" + parentTableName);
  }
  return ImmutableList.copyOf(tableNamesAsStrings);
}","/** 
 * Temporary workaround put in until https://github.com/apache/beam/pull/4946 is live. Gets the list of tables to backup.
 */
public static ImmutableList<String> getTableNamesBeingBackedUp(String projectId,String instance,String databaseId,String tableNamesQuery,Util util){
  ImmutableList<Struct> tableNames=util.performSingleSpannerQuery(projectId,instance,databaseId,tableNamesQuery);
  ArrayList<String> tableNamesAsStrings=new ArrayList<String>();
  for (  Struct inputRow : tableNames) {
    String parentTableName=""String_Node_Str"";
    if (!inputRow.isNull(""String_Node_Str"")) {
      parentTableName=inputRow.getString(""String_Node_Str"");
    }
    tableNamesAsStrings.add(inputRow.getString(""String_Node_Str"") + ""String_Node_Str"" + parentTableName);
  }
  return ImmutableList.copyOf(tableNamesAsStrings);
}"
68981,"public static void main(String[] args) throws Exception {
  final SpannerRestoreOptions options=PipelineOptionsFactory.fromArgs(args).withValidation().as(SpannerRestoreOptions.class);
  final Util util=new Util();
  final SpannerConfig spannerConfig=SpannerConfig.create().withInstanceId(options.getOutputSpannerInstanceId()).withDatabaseId(options.getOutputSpannerDatabaseId());
  if (options.getShouldCreateDatabaseAndTables()) {
    createDatabaseAndTables(options.getProjectId(),options.getOutputSpannerInstanceId(),options.getOutputSpannerDatabaseId(),options.getInputFolder(),util);
  }
  final LinkedHashMap<String,LinkedList<String>> mapOfParentToAllChildrenTablesInOrderToFetch=queryListOfTablesToRestore(options.getInputFolder(),options.getInputFolder(),options.getTablesToIncludeInRestore(),options.getTablesToExcludeFromRestore(),util);
  ExecutorService threadPool=Executors.newFixedThreadPool(mapOfParentToAllChildrenTablesInOrderToFetch.size());
  for (  String rootTableName : mapOfParentToAllChildrenTablesInOrderToFetch.keySet()) {
    Runnable insertionTask=new PerformRestoreOfRootTableAndItsChildren(rootTableName,mapOfParentToAllChildrenTablesInOrderToFetch.get(rootTableName),args,spannerConfig);
    threadPool.execute(insertionTask);
  }
  threadPool.shutdown();
}","public static void main(String[] args) throws Exception {
  final SpannerRestoreOptions options=PipelineOptionsFactory.fromArgs(args).withValidation().as(SpannerRestoreOptions.class);
  final Util util=new Util();
  final SpannerConfig spannerConfig=SpannerConfig.create().withInstanceId(options.getOutputSpannerInstanceId()).withDatabaseId(options.getOutputSpannerDatabaseId());
  if (options.getShouldCreateDatabaseAndTables()) {
    createDatabaseAndTables(options.getProjectId(),options.getOutputSpannerInstanceId(),options.getOutputSpannerDatabaseId(),options.getInputFolder(),util);
  }
  final LinkedHashMap<String,LinkedList<String>> mapOfParentToAllChildrenTablesInOrderToFetch=queryListOfTablesToRestore(options.getInputFolder(),options.getInputFolder(),options.getTablesToIncludeInRestore(),options.getTablesToExcludeFromRestore(),util);
  if (mapOfParentToAllChildrenTablesInOrderToFetch.size() == 0) {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"" + options.getInputFolder());
  }
  ExecutorService threadPool=Executors.newFixedThreadPool(mapOfParentToAllChildrenTablesInOrderToFetch.size());
  for (  String rootTableName : mapOfParentToAllChildrenTablesInOrderToFetch.keySet()) {
    Runnable insertionTask=new PerformRestoreOfRootTableAndItsChildren(rootTableName,mapOfParentToAllChildrenTablesInOrderToFetch.get(rootTableName),args,spannerConfig);
    threadPool.execute(insertionTask);
  }
  threadPool.shutdown();
}"
68982,"/** 
 * Temporary workaround put in until https://github.com/apache/beam/pull/4946 is live. Gets the list of tables to backup.
 */
public static ImmutableList<String> getTableNamesBeingBackedUp(String projectId,String instance,String databaseId,String tableNamesQuery,Util util){
  ImmutableList<Struct> tableNames=util.performSingleSpannerQuery(projectId,instance,databaseId,tableNamesQuery);
  ArrayList<String> tableNamesAsStrings=new ArrayList<String>();
  String parentTableName=""String_Node_Str"";
  for (  Struct inputRow : tableNames) {
    if (!inputRow.isNull(""String_Node_Str"")) {
      parentTableName=inputRow.getString(""String_Node_Str"");
    }
    tableNamesAsStrings.add(inputRow.getString(""String_Node_Str"") + ""String_Node_Str"" + parentTableName);
  }
  return ImmutableList.copyOf(tableNamesAsStrings);
}","/** 
 * Temporary workaround put in until https://github.com/apache/beam/pull/4946 is live. Gets the list of tables to backup.
 */
public static ImmutableList<String> getTableNamesBeingBackedUp(String projectId,String instance,String databaseId,String tableNamesQuery,Util util){
  ImmutableList<Struct> tableNames=util.performSingleSpannerQuery(projectId,instance,databaseId,tableNamesQuery);
  ArrayList<String> tableNamesAsStrings=new ArrayList<String>();
  for (  Struct inputRow : tableNames) {
    String parentTableName=""String_Node_Str"";
    if (!inputRow.isNull(""String_Node_Str"")) {
      parentTableName=inputRow.getString(""String_Node_Str"");
    }
    tableNamesAsStrings.add(inputRow.getString(""String_Node_Str"") + ""String_Node_Str"" + parentTableName);
  }
  return ImmutableList.copyOf(tableNamesAsStrings);
}"
68983,"public static void main(String[] args) throws Exception {
  final SpannerRestoreOptions options=PipelineOptionsFactory.fromArgs(args).withValidation().as(SpannerRestoreOptions.class);
  final Util util=new Util();
  final SpannerConfig spannerConfig=SpannerConfig.create().withInstanceId(options.getOutputSpannerInstanceId()).withDatabaseId(options.getOutputSpannerDatabaseId());
  if (options.getShouldCreateDatabaseAndTables()) {
    createDatabaseAndTables(options.getProjectId(),options.getOutputSpannerInstanceId(),options.getOutputSpannerDatabaseId(),options.getInputFolder(),util);
  }
  final LinkedHashMap<String,LinkedList<String>> mapOfParentToAllChildrenTablesInOrderToFetch=queryListOfTablesToRestore(options.getInputFolder(),options.getInputFolder(),options.getTablesToIncludeInRestore(),options.getTablesToExcludeFromRestore(),util);
  ExecutorService threadPool=Executors.newFixedThreadPool(mapOfParentToAllChildrenTablesInOrderToFetch.size());
  for (  String rootTableName : mapOfParentToAllChildrenTablesInOrderToFetch.keySet()) {
    Runnable insertionTask=new PerformRestoreOfRootTableAndItsChildren(rootTableName,mapOfParentToAllChildrenTablesInOrderToFetch.get(rootTableName),args,spannerConfig);
    threadPool.execute(insertionTask);
  }
  threadPool.shutdown();
}","public static void main(String[] args) throws Exception {
  final SpannerRestoreOptions options=PipelineOptionsFactory.fromArgs(args).withValidation().as(SpannerRestoreOptions.class);
  final Util util=new Util();
  final SpannerConfig spannerConfig=SpannerConfig.create().withInstanceId(options.getOutputSpannerInstanceId()).withDatabaseId(options.getOutputSpannerDatabaseId());
  if (options.getShouldCreateDatabaseAndTables()) {
    createDatabaseAndTables(options.getProjectId(),options.getOutputSpannerInstanceId(),options.getOutputSpannerDatabaseId(),options.getInputFolder(),util);
  }
  final LinkedHashMap<String,LinkedList<String>> mapOfParentToAllChildrenTablesInOrderToFetch=queryListOfTablesToRestore(options.getInputFolder(),options.getInputFolder(),options.getTablesToIncludeInRestore(),options.getTablesToExcludeFromRestore(),util);
  if (mapOfParentToAllChildrenTablesInOrderToFetch.size() == 0) {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"" + options.getInputFolder());
  }
  ExecutorService threadPool=Executors.newFixedThreadPool(mapOfParentToAllChildrenTablesInOrderToFetch.size());
  for (  String rootTableName : mapOfParentToAllChildrenTablesInOrderToFetch.keySet()) {
    Runnable insertionTask=new PerformRestoreOfRootTableAndItsChildren(rootTableName,mapOfParentToAllChildrenTablesInOrderToFetch.get(rootTableName),args,spannerConfig);
    threadPool.execute(insertionTask);
  }
  threadPool.shutdown();
}"
68984,"private static void deleteGcsBucket(String projectId,String gcsBucketName){
  StorageOptions.Builder optionsBuilder=StorageOptions.newBuilder();
  StorageOptions storageOptions=optionsBuilder.setProjectId(projectId).build();
  Storage storage=storageOptions.getService();
  Bucket bucket=storage.get(gcsBucketName);
  bucket.delete(Bucket.BucketSourceOption.metagenerationMatch());
}","private static void deleteGcsBucket(String projectId,String gcsBucketName){
  StorageOptions.Builder optionsBuilder=StorageOptions.newBuilder();
  StorageOptions storageOptions=optionsBuilder.setProjectId(projectId).build();
  Storage storage=storageOptions.getService();
  Iterable<Blob> blobs=storage.list(gcsBucketName,Storage.BlobListOption.prefix(""String_Node_Str"")).iterateAll();
  for (  Blob blob : blobs) {
    blob.delete(Blob.BlobSourceOption.generationMatch());
  }
  storage.delete(gcsBucketName,Storage.BucketSourceOption.userProject(projectId));
}"
68985,"public BigDecimal getLatestUSDPerBTC() throws USDBTCFxException {
  Optional<ExchangeAggregateRate> exchangeAggregateRate=exchangeAggregateRateRepository.findFirstOptionalByOrderByBlockNrBtcDesc();
  return exchangeAggregateRate.flatMap((aggregateRate) -> aggregateRate.getExchangeAggregateCurrencyRates(CurrencyType.BTC)).map((aggCurrencyRate) -> aggCurrencyRate.getAggregateExchangeRate()).orElseThrow(() -> new USDBTCFxException(""String_Node_Str""));
}","public BigDecimal getLatestUSDPerBTC() throws USDBTCFxException {
  Optional<ExchangeAggregateRate> exchangeAggregateRate=exchangeAggregateRateRepository.findFirstOptionalByOrderByCreationDateDesc();
  return exchangeAggregateRate.flatMap((aggregateRate) -> aggregateRate.getExchangeAggregateCurrencyRates(CurrencyType.BTC)).map((aggCurrencyRate) -> aggCurrencyRate.getAggregateExchangeRate()).orElseThrow(() -> new USDBTCFxException(""String_Node_Str""));
}"
68986,"public BigDecimal getLatestUSDperETH() throws USDETHFxException {
  Optional<ExchangeAggregateRate> exchangeAggregateRate=exchangeAggregateRateRepository.findFirstOptionalByOrderByBlockNrEthDesc();
  return exchangeAggregateRate.flatMap((aggregateRate) -> aggregateRate.getExchangeAggregateCurrencyRates(CurrencyType.ETH)).map((aggCurrencyRate) -> aggCurrencyRate.getAggregateExchangeRate()).orElseThrow(() -> new USDETHFxException(""String_Node_Str""));
}","public BigDecimal getLatestUSDperETH() throws USDETHFxException {
  Optional<ExchangeAggregateRate> exchangeAggregateRate=exchangeAggregateRateRepository.findFirstOptionalByOrderByCreationDateDesc();
  return exchangeAggregateRate.flatMap((aggregateRate) -> aggregateRate.getExchangeAggregateCurrencyRates(CurrencyType.ETH)).map((aggCurrencyRate) -> aggCurrencyRate.getAggregateExchangeRate()).orElseThrow(() -> new USDETHFxException(""String_Node_Str""));
}"
68987,"@RequestMapping(value=""String_Node_Str"",method=POST,consumes=APPLICATION_JSON_UTF8_VALUE,produces=APPLICATION_JSON_UTF8_VALUE) public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest registerRequest,@Context HttpServletRequest httpServletRequest) throws BaseException {
  String ipAddress=httpServletRequest.getHeader(""String_Node_Str"");
  if (ipAddress == null)   ipAddress=httpServletRequest.getRemoteAddr();
  LOG.info(""String_Node_Str"",ipAddress,registerRequest.getEmail());
  URI uri=null;
  try {
    String emailConfirmationToken=null;
    Optional<Investor> oInvestor=investorRepository.findOptionalByEmail(registerRequest.getEmail());
    if (oInvestor.isPresent()) {
      emailConfirmationToken=oInvestor.get().getEmailConfirmationToken();
    }
 else {
      emailConfirmationToken=generateRandomUUID();
      oInvestor=Optional.of(createInvestor(registerRequest.getEmail(),emailConfirmationToken,ipAddress));
      Investor investor=oInvestor.get();
      investorRepository.save(investor);
      LOG.debug(""String_Node_Str"" + investor.getEmail() + ""String_Node_Str""+ investor.getEmailConfirmationToken());
    }
    if (oInvestor.isPresent() && oInvestor.get().getWalletAddress() != null && oInvestor.get().getPayInBitcoinPublicKey() != null && oInvestor.get().getPayInEtherPublicKey() != null) {
      fileQueueService.addSummaryEmail(oInvestor.get());
      return ResponseEntity.ok().build();
    }
 else {
      uri=buildUri(emailConfirmationToken);
      fileQueueService.addConfirmationEmail(oInvestor.get(),uri);
      return ResponseEntity.created(uri).build();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e.getMessage(),e.getCause());
    throw new UnexpectedException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=POST,consumes=APPLICATION_JSON_UTF8_VALUE,produces=APPLICATION_JSON_UTF8_VALUE) public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest registerRequest,@Context HttpServletRequest httpServletRequest) throws BaseException {
  String ipAddress=httpServletRequest.getHeader(""String_Node_Str"");
  if (ipAddress == null)   ipAddress=httpServletRequest.getRemoteAddr();
  LOG.info(""String_Node_Str"",ipAddress,registerRequest.getEmail());
  try {
    String emailConfirmationToken=null;
    Optional<Investor> oInvestor=investorRepository.findOptionalByEmail(registerRequest.getEmail());
    if (oInvestor.isPresent()) {
      emailConfirmationToken=oInvestor.get().getEmailConfirmationToken();
    }
 else {
      emailConfirmationToken=generateRandomUUID();
      oInvestor=Optional.of(createInvestor(registerRequest.getEmail(),emailConfirmationToken,ipAddress));
      Investor investor=oInvestor.get();
      investorRepository.save(investor);
      LOG.debug(""String_Node_Str"" + investor.getEmail() + ""String_Node_Str""+ investor.getEmailConfirmationToken());
    }
    if (oInvestor.isPresent() && oInvestor.get().getWalletAddress() != null && oInvestor.get().getPayInBitcoinPublicKey() != null && oInvestor.get().getPayInEtherPublicKey() != null) {
      fileQueueService.addSummaryEmail(oInvestor.get());
      return ResponseEntity.ok().build();
    }
 else {
      URI uri=new URI(frontendUrl);
      fileQueueService.addConfirmationEmail(oInvestor.get(),uri);
      return ResponseEntity.created(uri).build();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e.getMessage(),e.getCause());
    throw new UnexpectedException();
  }
}"
68988,"@Scheduled(initialDelay=10000,fixedRateString=""String_Node_Str"") public void sendEmail(){
  Optional<Email> oEmail=Optional.empty();
  try {
    oEmail=this.fileQueueService.peekEmail();
    if (oEmail.isPresent()) {
      Email email=oEmail.get();
switch (email.getMailType()) {
case CONFIRMATION_EMAIL:
        this.mailService.sendConfirmationEmail(email.getInvestor(),email.getInvestor().getEmail());
      break;
case SUMMARY_EMAIL:
    this.mailService.sendSummaryEmail(email.getInvestor());
  break;
default :
break;
}
}
}
 catch (BaseEmailException e) {
Email email=oEmail.get();
if (email.getReQueued() < this.maxReQueued) {
LOG.error(""String_Node_Str"",e);
email.setReQueued(email.getReQueued() + 1);
this.fileQueueService.addEmail(email);
}
}
}","@Scheduled(initialDelay=10000,fixedRateString=""String_Node_Str"") public void sendEmail(){
  Optional<Email> oEmail=Optional.empty();
  try {
    oEmail=this.fileQueueService.peekEmail();
    if (oEmail.isPresent()) {
      Email email=oEmail.get();
switch (email.getMailType()) {
case CONFIRMATION_EMAIL:
        this.mailService.sendConfirmationEmail(email.getInvestor(),email.getConfirmationEmaiLink().toString());
      break;
case SUMMARY_EMAIL:
    this.mailService.sendSummaryEmail(email.getInvestor());
  break;
default :
break;
}
}
}
 catch (BaseEmailException e) {
Email email=oEmail.get();
if (email.getReQueued() < this.maxReQueued) {
LOG.error(""String_Node_Str"",e);
email.setReQueued(email.getReQueued() + 1);
this.fileQueueService.addEmail(email);
}
}
}"
68989,"@RequestMapping(value=""String_Node_Str"",method=POST,consumes=APPLICATION_JSON_UTF8_VALUE,produces=APPLICATION_JSON_UTF8_VALUE) public AddressResponse address(@Valid @RequestBody AddressRequest addressRequest,@RequestHeader(value=""String_Node_Str"") String authorizationHeader) throws BaseException {
  String emailConfirmationToken=getEmailConfirmationToken(authorizationHeader);
  Optional<Investor> oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
  if (!oInvestor.isPresent()) {
    throw new ConfirmationTokenNotFoundException();
  }
  String walletAddress=replacePrefixAddress(addressRequest.getAddress());
  String refundEthereumAddress=replacePrefixAddress(addressRequest.getRefundETH());
  String refundBitcoinAddress=addressRequest.getRefundBTC();
  if (walletAddress.isEmpty()) {
    throw new EthereumWalletAddressEmptyException();
  }
  if (!ethereumKeyGenerator.isValidAddress(walletAddress)) {
    throw new EthereumAddressInvalidException();
  }
  if (refundEthereumAddress != null && !refundEthereumAddress.isEmpty() && !ethereumKeyGenerator.isValidAddress(refundEthereumAddress)) {
    throw new EthereumAddressInvalidException();
  }
  if (refundBitcoinAddress != null && !refundBitcoinAddress.isEmpty() && !bitcoinKeyGenerator.isValidAddress(refundBitcoinAddress)) {
    throw new BitcoinAddressInvalidException();
  }
  Keys bitcoinKeys=bitcoinKeyGenerator.getKeys();
  Keys ethereumKeys=ethereumKeyGenerator.getKeys();
  try {
    Investor investor=oInvestor.get();
    investor.setWalletAddress(addPrefixEtherIfNotExist(walletAddress)).setPayInBitcoinAddress(bitcoinKeys.getAddressAsString()).setPayInBitcoinPrivateKey(Hex.toHexString(bitcoinKeys.getPrivateKey())).setPayInEtherAddress(ethereumKeys.getAddressAsString()).setPayInEtherPrivateKey(Hex.toHexString(ethereumKeys.getPrivateKey())).setRefundBitcoinAddress(refundBitcoinAddress).setRefundEtherAddress(addPrefixEtherIfNotExist(refundEthereumAddress));
    investorRepository.save(investor);
    mailService.sendSummaryEmail(investor);
  }
 catch (  Exception e) {
    throw new UnexpectedException();
  }
  return new AddressResponse().setBtc(bitcoinKeys.getAddressAsString()).setEther(ethereumKeys.getAddressAsString());
}","@RequestMapping(value=""String_Node_Str"",method=POST,consumes=APPLICATION_JSON_UTF8_VALUE,produces=APPLICATION_JSON_UTF8_VALUE) public AddressResponse address(@Valid @RequestBody AddressRequest addressRequest,@Valid @Size(max=Constants.UUID_CHAR_MAX_SIZE) @RequestHeader(value=""String_Node_Str"") String authorizationHeader) throws BaseException {
  String emailConfirmationToken=getEmailConfirmationToken(authorizationHeader);
  Optional<Investor> oInvestor=findInvestorOrThrowException(emailConfirmationToken);
  checkIfWalletAddressIsAlreadySet(oInvestor);
  String walletAddress=replacePrefixAddress(addressRequest.getAddress());
  String refundEthereumAddress=replacePrefixAddress(addressRequest.getRefundETH());
  String refundBitcoinAddress=addressRequest.getRefundBTC();
  checkWalletAndRefundAddressesOrThrowException(walletAddress,refundEthereumAddress,refundBitcoinAddress);
  Keys bitcoinKeys=bitcoinKeyGenerator.getKeys();
  Keys ethereumKeys=ethereumKeyGenerator.getKeys();
  try {
    Investor investor=oInvestor.get();
    investor.setWalletAddress(addPrefixEtherIfNotExist(walletAddress)).setPayInBitcoinAddress(bitcoinKeys.getAddressAsString()).setPayInBitcoinPrivateKey(Hex.toHexString(bitcoinKeys.getPrivateKey())).setPayInEtherAddress(ethereumKeys.getAddressAsString()).setPayInEtherPrivateKey(Hex.toHexString(ethereumKeys.getPrivateKey())).setRefundBitcoinAddress(refundBitcoinAddress).setRefundEtherAddress(addPrefixEtherIfNotExist(refundEthereumAddress));
    investorRepository.save(investor);
    mailService.sendSummaryEmail(investor);
  }
 catch (  Exception e) {
    throw new UnexpectedException();
  }
  return new AddressResponse().setBtc(bitcoinKeys.getAddressAsString()).setEther(ethereumKeys.getAddressAsString());
}"
68990,"@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> isBTCAddressValid(@PathVariable(""String_Node_Str"") String btcAddress) throws BaseException {
  if (bitcoinKeyGenerator.isValidAddress(btcAddress)) {
    return ResponseEntity.ok().build();
  }
  throw new BitcoinAddressInvalidException();
}","@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> isBTCAddressValid(@Valid @Size(max=Constants.BTC_ADDRESS_CHAR_MAX_SIZE) @PathVariable(""String_Node_Str"") String btcAddress) throws BaseException {
  if (bitcoinKeyGenerator.isValidAddress(btcAddress)) {
    return ResponseEntity.ok().build();
  }
  throw new BitcoinAddressInvalidException();
}"
68991,"@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> isETHAddressValid(@PathVariable(""String_Node_Str"") String ethAddress) throws BaseException {
  if (ethereumKeyGenerator.isValidAddress(ethAddress)) {
    return ResponseEntity.ok().build();
  }
  throw new EthereumAddressInvalidException();
}","@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> isETHAddressValid(@Valid @Size(max=Constants.ETH_ADDRESS_CHAR_MAX_SIZE) @PathVariable(""String_Node_Str"") String ethAddress) throws BaseException {
  if (ethereumKeyGenerator.isValidAddress(ethAddress)) {
    return ResponseEntity.ok().build();
  }
  throw new EthereumAddressInvalidException();
}"
68992,"@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> isConfirmationTokenValid(@PathVariable(""String_Node_Str"") String emailConfirmationToken,HttpServletResponse response) throws BaseException {
  Optional<Investor> oInvestor=Optional.empty();
  try {
    oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
  }
 catch (  Exception e) {
    throw new UnexpectedException();
  }
  if (!oInvestor.isPresent()) {
    throw new ConfirmationTokenNotFoundException();
  }
  return ResponseEntity.ok().build();
}","@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> isConfirmationTokenValid(@Valid @Size(max=Constants.UUID_CHAR_MAX_SIZE) @PathVariable(""String_Node_Str"") String emailConfirmationToken,HttpServletResponse response) throws BaseException {
  Optional<Investor> oInvestor=Optional.empty();
  try {
    oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
  }
 catch (  Exception e) {
    throw new UnexpectedException();
  }
  if (!oInvestor.isPresent()) {
    throw new ConfirmationTokenNotFoundException();
  }
  return ResponseEntity.ok().build();
}"
68993,"@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> confirmation(@PathVariable(""String_Node_Str"") String emailConfirmationToken,HttpServletResponse response) throws BaseException {
  try {
    Optional<Investor> oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
    if (!oInvestor.isPresent()) {
      throw new ConfirmationTokenNotFoundException();
    }
 else {
      Investor investor=oInvestor.get();
      investor.setEmailConfirmed(true);
      investorRepository.save(investor);
      LOG.debug(""String_Node_Str"" + investor.getEmail() + ""String_Node_Str""+ investor.getEmailConfirmationToken());
    }
  }
 catch (  Exception e) {
    throw e;
  }
  return ResponseEntity.ok().build();
}","@RequestMapping(value=""String_Node_Str"",method=GET) public ResponseEntity<?> confirmation(@Valid @Size(max=Constants.UUID_CHAR_MAX_SIZE) @PathVariable(""String_Node_Str"") String emailConfirmationToken,HttpServletResponse response) throws BaseException {
  try {
    Optional<Investor> oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
    if (!oInvestor.isPresent()) {
      throw new ConfirmationTokenNotFoundException();
    }
 else {
      Investor investor=oInvestor.get();
      investor.setEmailConfirmed(true);
      investorRepository.save(investor);
      LOG.debug(""String_Node_Str"" + investor.getEmail() + ""String_Node_Str""+ investor.getEmailConfirmationToken());
    }
  }
 catch (  Exception e) {
    throw e;
  }
  return ResponseEntity.ok().build();
}"
68994,"public Keys getKeys(){
  ECKey key=new ECKey();
  byte[] address=key.getPubKey();
  byte[] privateKey=key.getPrivKeyBytes();
  return new Keys().setAddress(address).setPrivateKey(privateKey);
}","public Keys getKeys(){
  ECKey key=new ECKey();
  byte[] address=key.getPubKey();
  String addressAsString=key.toAddress(MainNetParams.get()).toString();
  byte[] privateKey=key.getPrivKeyBytes();
  String addressAsStringWithPrivate=key.toStringWithPrivate(MainNetParams.get()).toString();
  return new Keys().setAddress(address).setAddressAsString(addressAsString).setPrivateKey(privateKey).setAddressAsStringWithPrivate(addressAsStringWithPrivate);
}"
68995,"public Keys getKeys(){
  ECKey key=new ECKey();
  byte[] address=key.getAddress();
  byte[] privateKey=key.getPrivKeyBytes();
  return new Keys().setAddress(address).setPrivateKey(privateKey);
}","public Keys getKeys(){
  ECKey key=new ECKey();
  byte[] address=key.getAddress();
  byte[] privateKey=key.getPrivKeyBytes();
  return new Keys().setAddress(address).setAddressAsString(""String_Node_Str"" + Hex.toHexString(address)).setPrivateKey(privateKey).setAddressAsStringWithPrivate(key.toStringWithPrivate());
}"
68996,"@RequestMapping(value=""String_Node_Str"",method=POST,consumes=APPLICATION_JSON_UTF8_VALUE,produces=APPLICATION_JSON_UTF8_VALUE) public AddressResponse address(@Valid @RequestBody AddressRequest addressRequest,@RequestHeader(value=""String_Node_Str"") String authorizationHeader) throws AddressException {
  String emailConfirmationToken=getEmailConfirmationToken(authorizationHeader);
  Optional<Investor> oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
  if (!oInvestor.isPresent()) {
    throw new EmailConfirmationTokenNotFoundException();
  }
  String walletAddress=addressRequest.getAddress();
  String refundBitcoinAddress=addressRequest.getRefundBTC();
  String refundEthereumAddress=addressRequest.getRefundETH();
  Keys bitcoinKeys=bitcoinKeyGenerator.getKeys();
  Keys ethereumKeys=ethereumKeyGenerator.getKeys();
  try {
    Investor investor=oInvestor.get();
    investor.setWalletAddress(walletAddress).setPayInBitcoinAddress(bitcoinKeys.getAddressBase16()).setPayInBitcoinPrivateKey(bitcoinKeys.getPrivateKeyBase16()).setPayInEtherAddress(ethereumKeys.getAddressBase16()).setPayInEtherPrivateKey(ethereumKeys.getPrivateKeyBase16()).setRefundBitcoinAddress(refundBitcoinAddress).setRefundEtherAddress(refundEthereumAddress);
    investorRepository.save(investor);
  }
 catch (  Exception e) {
    throw new AddressException();
  }
  return new AddressResponse().setBtc(bitcoinKeys.getAddressBase16()).setEther(ethereumKeys.getAddressBase16());
}","@RequestMapping(value=""String_Node_Str"",method=POST,consumes=APPLICATION_JSON_UTF8_VALUE,produces=APPLICATION_JSON_UTF8_VALUE) public AddressResponse address(@Valid @RequestBody AddressRequest addressRequest,@RequestHeader(value=""String_Node_Str"") String authorizationHeader) throws AddressException {
  String emailConfirmationToken=getEmailConfirmationToken(authorizationHeader);
  Optional<Investor> oInvestor=investorRepository.findOptionalByEmailConfirmationToken(emailConfirmationToken);
  if (!oInvestor.isPresent()) {
    throw new EmailConfirmationTokenNotFoundException();
  }
  String walletAddress=replacePrefixAddress(addressRequest.getAddress());
  String refundEthereumAddress=replacePrefixAddress(addressRequest.getRefundETH());
  String refundBitcoinAddress=addressRequest.getRefundBTC();
  if (!ethereumKeyGenerator.isValidAddress(walletAddress) || !ethereumKeyGenerator.isValidAddress(refundEthereumAddress)) {
    throw new EthereumAddressInvalidException();
  }
  if (!bitcoinKeyGenerator.isValidAddress(refundBitcoinAddress)) {
    throw new BitcoinAddressInvalidException();
  }
  Keys bitcoinKeys=bitcoinKeyGenerator.getKeys();
  Keys ethereumKeys=ethereumKeyGenerator.getKeys();
  try {
    Investor investor=oInvestor.get();
    investor.setWalletAddress(walletAddress).setPayInBitcoinAddress(bitcoinKeys.getAddressAsString()).setPayInBitcoinPrivateKey(Hex.toHexString(bitcoinKeys.getPrivateKey())).setPayInEtherAddress(ethereumKeys.getAddressAsString()).setPayInEtherPrivateKey(Hex.toHexString(ethereumKeys.getPrivateKey())).setRefundBitcoinAddress(refundBitcoinAddress).setRefundEtherAddress(refundEthereumAddress);
    investorRepository.save(investor);
  }
 catch (  Exception e) {
    throw new AddressException();
  }
  return new AddressResponse().setBtc(bitcoinKeys.getAddressAsString()).setEther(ethereumKeys.getAddressAsString());
}"
68997,"@Override public void actionPerformed(java.awt.event.ActionEvent e){
  boolean configured=ConfigurationDialogs.show(view,getDialogMode());
  boolean makeReqs=true;
  boolean completed=false;
  java.util.List<String> nodes=new ArrayList<>();
  if (configured) {
    if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)     callbacks.loadConfigFromJson(getBurpConfigAsString());
    try {
      EndpointDecorator[] endpoints=getEndpoints(view);
      EndpointDecorator[] comparePoints=null;
      if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty() && mode == 0)       comparePoints=getComparePoints(view);
 else       if (BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile().trim().isEmpty() && mode == 1)       comparePoints=getComparePoints(view);
      if (endpoints.length == 0)       JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
        if (comparePoints != null && comparePoints.length != 0)         endpoints=compareEndpoints(endpoints,comparePoints,view);
        fillEndpointsToTable(endpoints);
        for (        EndpointDecorator decorator : endpoints) {
          if (decorator != null) {
            Endpoint.Info endpoint=decorator.getEndpoint();
            String endpointPath=endpoint.getUrlPath();
            if (endpointPath.startsWith(""String_Node_Str""))             endpointPath=endpointPath.substring(1);
            endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
            nodes.add(endpointPath);
            for (            Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())             nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
          }
        }
        String url=UrlDialog.show(view);
        if (url != null) {
          try {
            if (!url.substring(url.length() - 1).equals(""String_Node_Str""))             url=url + ""String_Node_Str"";
            for (            String node : nodes) {
              URL nodeUrl=new URL(url + node);
              callbacks.includeInScope(nodeUrl);
              if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())               callbacks.sendToSpider(nodeUrl);
            }
            buildRequests(view,callbacks,endpoints,url);
            completed=true;
          }
 catch (          MalformedURLException e1) {
            JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
          }
          if (completed)           JOptionPane.showMessageDialog(view,getCompletedMessage());
        }
 else         makeReqs=false;
      }
      if (makeReqs) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())         sendToScanner(callbacks,UrlDialog.show(view));
        RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
        new Thread(rmt).start();
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(view,""String_Node_Str"");
    }
  }
 else   JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}","@Override public void actionPerformed(java.awt.event.ActionEvent e){
  boolean configured=false;
  if (mode == 0)   configured=ConfigurationDialogs.showSource(view,getDialogMode());
 else   if (mode == 1)   configured=ConfigurationDialogs.showJson(view,getDialogMode());
  boolean makeReqs=true;
  boolean completed=false;
  java.util.List<String> nodes=new ArrayList<>();
  if (configured) {
    if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)     callbacks.loadConfigFromJson(getBurpConfigAsString());
    try {
      EndpointDecorator[] endpoints=getEndpoints(view);
      EndpointDecorator[] comparePoints=null;
      if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty() && mode == 0)       comparePoints=getComparePoints(view);
 else       if (BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile().trim().isEmpty() && mode == 1)       comparePoints=getComparePoints(view);
      if (endpoints.length == 0)       JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
        if (comparePoints != null && comparePoints.length != 0)         endpoints=compareEndpoints(endpoints,comparePoints,view);
        fillEndpointsToTable(endpoints);
        for (        EndpointDecorator decorator : endpoints) {
          if (decorator != null) {
            Endpoint.Info endpoint=decorator.getEndpoint();
            String endpointPath=endpoint.getUrlPath();
            if (endpointPath.startsWith(""String_Node_Str""))             endpointPath=endpointPath.substring(1);
            endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
            nodes.add(endpointPath);
            for (            Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())             nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
          }
        }
        String url=UrlDialog.show(view);
        if (url != null) {
          try {
            if (!url.substring(url.length() - 1).equals(""String_Node_Str""))             url=url + ""String_Node_Str"";
            for (            String node : nodes) {
              URL nodeUrl=new URL(url + node);
              callbacks.includeInScope(nodeUrl);
              if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())               callbacks.sendToSpider(nodeUrl);
            }
            buildRequests(view,callbacks,endpoints,url);
            completed=true;
          }
 catch (          MalformedURLException e1) {
            JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
          }
          if (completed)           JOptionPane.showMessageDialog(view,getCompletedMessage());
        }
 else         makeReqs=false;
      }
      if (makeReqs) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())         sendToScanner(callbacks,UrlDialog.show(view));
        RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
        new Thread(rmt).start();
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(view,""String_Node_Str"");
    }
  }
 else   JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
}"
68998,"public EndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks,int mode){
  this.mode=mode;
  setText(getButtonText());
  addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      boolean configured=ConfigurationDialogs.show(view,getDialogMode());
      boolean makeReqs=true;
      boolean completed=false;
      java.util.List<String> nodes=new ArrayList<>();
      if (configured) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)         callbacks.loadConfigFromJson(getBurpConfigAsString());
        try {
          EndpointDecorator[] endpoints=getEndpoints(view);
          EndpointDecorator[] comparePoints=null;
          if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty() && mode == 0)           comparePoints=getComparePoints(view);
 else           if (BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile().trim().isEmpty() && mode == 1)           comparePoints=getComparePoints(view);
          if (endpoints.length == 0)           JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
            if (comparePoints != null && comparePoints.length != 0)             endpoints=compareEndpoints(endpoints,comparePoints,view);
            fillEndpointsToTable(endpoints);
            for (            EndpointDecorator decorator : endpoints) {
              if (decorator != null) {
                Endpoint.Info endpoint=decorator.getEndpoint();
                String endpointPath=endpoint.getUrlPath();
                if (endpointPath.startsWith(""String_Node_Str""))                 endpointPath=endpointPath.substring(1);
                endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
                nodes.add(endpointPath);
                for (                Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())                 nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
              }
            }
            String url=UrlDialog.show(view);
            if (url != null) {
              try {
                if (!url.substring(url.length() - 1).equals(""String_Node_Str""))                 url=url + ""String_Node_Str"";
                for (                String node : nodes) {
                  URL nodeUrl=new URL(url + node);
                  callbacks.includeInScope(nodeUrl);
                  if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())                   callbacks.sendToSpider(nodeUrl);
                }
                buildRequests(view,callbacks,endpoints,url);
                completed=true;
              }
 catch (              MalformedURLException e1) {
                JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
              }
              if (completed)               JOptionPane.showMessageDialog(view,getCompletedMessage());
            }
 else             makeReqs=false;
          }
          if (makeReqs) {
            if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())             sendToScanner(callbacks,UrlDialog.show(view));
            RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
            new Thread(rmt).start();
          }
        }
 catch (        Exception ex) {
          JOptionPane.showMessageDialog(view,""String_Node_Str"");
        }
      }
 else       JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
    }
  }
);
}","public EndpointsButton(final Component view,final IBurpExtenderCallbacks callbacks,int mode){
  this.mode=mode;
  setText(getButtonText());
  addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      boolean configured=false;
      if (mode == 0)       configured=ConfigurationDialogs.showSource(view,getDialogMode());
 else       if (mode == 1)       configured=ConfigurationDialogs.showJson(view,getDialogMode());
      boolean makeReqs=true;
      boolean completed=false;
      java.util.List<String> nodes=new ArrayList<>();
      if (configured) {
        if (BurpPropertiesManager.getBurpPropertiesManager().getConfigFile() != null)         callbacks.loadConfigFromJson(getBurpConfigAsString());
        try {
          EndpointDecorator[] endpoints=getEndpoints(view);
          EndpointDecorator[] comparePoints=null;
          if (BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSourceFolder().trim().isEmpty() && mode == 0)           comparePoints=getComparePoints(view);
 else           if (BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile() != null && !BurpPropertiesManager.getBurpPropertiesManager().getOldSerializationFile().trim().isEmpty() && mode == 1)           comparePoints=getComparePoints(view);
          if (endpoints.length == 0)           JOptionPane.showMessageDialog(view,getNoEndpointsMessage(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
 else {
            if (comparePoints != null && comparePoints.length != 0)             endpoints=compareEndpoints(endpoints,comparePoints,view);
            fillEndpointsToTable(endpoints);
            for (            EndpointDecorator decorator : endpoints) {
              if (decorator != null) {
                Endpoint.Info endpoint=decorator.getEndpoint();
                String endpointPath=endpoint.getUrlPath();
                if (endpointPath.startsWith(""String_Node_Str""))                 endpointPath=endpointPath.substring(1);
                endpointPath=endpointPath.replaceAll(GENERIC_INT_SEGMENT,""String_Node_Str"");
                nodes.add(endpointPath);
                for (                Map.Entry<String,RouteParameter> parameter : endpoint.getParameters().entrySet())                 nodes.add(endpointPath + ""String_Node_Str"" + parameter.getKey()+ ""String_Node_Str""+ parameter.getValue());
              }
            }
            String url=UrlDialog.show(view);
            if (url != null) {
              try {
                if (!url.substring(url.length() - 1).equals(""String_Node_Str""))                 url=url + ""String_Node_Str"";
                for (                String node : nodes) {
                  URL nodeUrl=new URL(url + node);
                  callbacks.includeInScope(nodeUrl);
                  if (BurpPropertiesManager.getBurpPropertiesManager().getAutoSpider())                   callbacks.sendToSpider(nodeUrl);
                }
                buildRequests(view,callbacks,endpoints,url);
                completed=true;
              }
 catch (              MalformedURLException e1) {
                JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
              }
              if (completed)               JOptionPane.showMessageDialog(view,getCompletedMessage());
            }
 else             makeReqs=false;
          }
          if (makeReqs) {
            if (BurpPropertiesManager.getBurpPropertiesManager().getAutoScan())             sendToScanner(callbacks,UrlDialog.show(view));
            RequestMakerThread rmt=new RequestMakerThread(callbacks,view);
            new Thread(rmt).start();
          }
        }
 catch (        Exception ex) {
          JOptionPane.showMessageDialog(view,""String_Node_Str"");
        }
      }
 else       JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
    }
  }
);
}"
68999,"@Override public void actionPerformed(java.awt.event.ActionEvent e){
  JFileChooser chooser=new JFileChooser();
  String currentDirectory=oldSourceFolderField.getText();
  if ((currentDirectory == null) || (currentDirectory.trim().equals(""String_Node_Str"")))   currentDirectory=System.getProperty(""String_Node_Str"");
  chooser.setCurrentDirectory(new java.io.File(currentDirectory));
  chooser.setDialogTitle(""String_Node_Str"");
  chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  chooser.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  chooser.addChoosableFileFilter(new FileFilter(){
    public boolean accept(    File f){
      return f.isDirectory();
    }
    public String getDescription(){
      return ""String_Node_Str"";
    }
  }
);
  if (chooser.showOpenDialog(sourcePanel) == JFileChooser.APPROVE_OPTION) {
    oldSourceFolderField.setText(chooser.getSelectedFile().getAbsolutePath());
    ;
  }
}","@Override public void actionPerformed(java.awt.event.ActionEvent e){
  JFileChooser chooser2=new JFileChooser();
  String currentDirectory=oldSerializationField.getText();
  if ((currentDirectory == null) || (currentDirectory.trim().equals(""String_Node_Str""))) {
    currentDirectory=System.getProperty(""String_Node_Str"");
  }
  chooser2.setCurrentDirectory(new java.io.File(currentDirectory));
  chooser2.setDialogTitle(""String_Node_Str"");
  chooser2.setFileSelectionMode(JFileChooser.FILES_ONLY);
  chooser2.setAcceptAllFileFilterUsed(false);
  chooser2.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  if (chooser2.showOpenDialog(sourcePanel) == JFileChooser.APPROVE_OPTION) {
    oldSerializationField.setText(chooser2.getSelectedFile().getAbsolutePath());
    BurpPropertiesManager.getBurpPropertiesManager().setOldSerializationFile(oldSerializationField.getText());
  }
}"
69000,"private JPanel buildSourcePanel(){
  final JPanel sourcePanel=new JPanel();
  sourcePanel.setLayout(new GridBagLayout());
  int yPosition=0;
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new GridBagLayout());
  JPanel newSourceDialog=new JPanel();
  newSourceDialog.setLayout(new GridBagLayout());
  JPanel oldSourceDialog=new JPanel();
  oldSourceDialog.setLayout(new GridBagLayout());
  final JLabel sourcePanelTitle=addPanelTitleToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JLabel sourcePanelDescription=addPanelDescriptionToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JLabel differenceGeneratorDescription=addPanelDescriptionToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JLabel sourcePanelDescription2=addPanelDescriptionToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JButton sourceFolderBrowseButton=new JButton(""String_Node_Str"");
  sourceFolderBrowseButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      JFileChooser chooser=new JFileChooser();
      String currentDirectory=sourceFolderField.getText();
      if ((currentDirectory == null) || (currentDirectory.trim().equals(""String_Node_Str""))) {
        currentDirectory=System.getProperty(""String_Node_Str"");
      }
      chooser.setCurrentDirectory(new java.io.File(currentDirectory));
      chooser.setDialogTitle(""String_Node_Str"");
      chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
      chooser.setAcceptAllFileFilterUsed(false);
      chooser.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      chooser.addChoosableFileFilter(new FileFilter(){
        public boolean accept(        File f){
          return f.isDirectory();
        }
        public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (chooser.showOpenDialog(sourcePanel) == JFileChooser.APPROVE_OPTION) {
        sourceFolderField.setText(chooser.getSelectedFile().getAbsolutePath());
        BurpPropertiesManager.getBurpPropertiesManager().setSourceFolder(sourceFolderField.getText());
      }
    }
  }
);
  sourceFolderField=addTextFieldToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++,BurpPropertiesManager.SOURCE_FOLDER_KEY,sourceFolderBrowseButton);
  final JButton oldSourceFolderBrowseButton=new JButton(""String_Node_Str"");
  oldSourceFolderBrowseButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      JFileChooser chooser2=new JFileChooser();
      String currentDirectory=sourceFolderField.getText();
      if ((currentDirectory == null) || (currentDirectory.trim().equals(""String_Node_Str""))) {
        currentDirectory=System.getProperty(""String_Node_Str"");
      }
      chooser2.setCurrentDirectory(new java.io.File(currentDirectory));
      chooser2.setDialogTitle(""String_Node_Str"");
      chooser2.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
      chooser2.setAcceptAllFileFilterUsed(false);
      chooser2.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      chooser2.addChoosableFileFilter(new FileFilter(){
        public boolean accept(        File f){
          return f.isDirectory();
        }
        public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (chooser2.showOpenDialog(sourcePanel) == JFileChooser.APPROVE_OPTION) {
        oldSourceFolderField.setText(chooser2.getSelectedFile().getAbsolutePath());
        BurpPropertiesManager.getBurpPropertiesManager().setOldSourceFolder(oldSourceFolderField.getText());
      }
    }
  }
);
  oldSourceFolderField=addTextFieldToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++,BurpPropertiesManager.OLD_SOURCE_FOLDER_KEY,oldSourceFolderBrowseButton);
  return sourcePanel;
}","private JPanel buildSourcePanel(){
  final JPanel sourcePanel=new JPanel();
  sourcePanel.setLayout(new GridBagLayout());
  int yPosition=0;
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new GridBagLayout());
  JPanel newSourceDialog=new JPanel();
  newSourceDialog.setLayout(new GridBagLayout());
  JPanel oldSourceDialog=new JPanel();
  oldSourceDialog.setLayout(new GridBagLayout());
  final JLabel sourcePanelTitle=addPanelTitleToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JLabel sourcePanelDescription=addPanelDescriptionToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JLabel differenceGeneratorDescription=addPanelDescriptionToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JLabel sourcePanelDescription2=addPanelDescriptionToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++);
  final JButton sourceFolderBrowseButton=new JButton(""String_Node_Str"");
  sourceFolderBrowseButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      JFileChooser chooser=new JFileChooser();
      String currentDirectory=sourceFolderField.getText();
      if ((currentDirectory == null) || (currentDirectory.trim().equals(""String_Node_Str""))) {
        currentDirectory=System.getProperty(""String_Node_Str"");
      }
      chooser.setCurrentDirectory(new java.io.File(currentDirectory));
      chooser.setDialogTitle(""String_Node_Str"");
      chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
      chooser.setAcceptAllFileFilterUsed(false);
      chooser.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      chooser.addChoosableFileFilter(new FileFilter(){
        public boolean accept(        File f){
          return f.isDirectory();
        }
        public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (chooser.showOpenDialog(sourcePanel) == JFileChooser.APPROVE_OPTION) {
        sourceFolderField.setText(chooser.getSelectedFile().getAbsolutePath());
        BurpPropertiesManager.getBurpPropertiesManager().setSourceFolder(sourceFolderField.getText());
      }
    }
  }
);
  sourceFolderField=addTextFieldToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++,BurpPropertiesManager.SOURCE_FOLDER_KEY,sourceFolderBrowseButton);
  final JButton oldSourceFolderBrowseButton=new JButton(""String_Node_Str"");
  oldSourceFolderBrowseButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent e){
      JFileChooser chooser2=new JFileChooser();
      String currentDirectory=oldSourceFolderField.getText();
      if ((currentDirectory == null) || (currentDirectory.trim().equals(""String_Node_Str""))) {
        currentDirectory=System.getProperty(""String_Node_Str"");
      }
      chooser2.setCurrentDirectory(new java.io.File(currentDirectory));
      chooser2.setDialogTitle(""String_Node_Str"");
      chooser2.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
      chooser2.setAcceptAllFileFilterUsed(false);
      chooser2.addChoosableFileFilter(new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      chooser2.addChoosableFileFilter(new FileFilter(){
        public boolean accept(        File f){
          return f.isDirectory();
        }
        public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (chooser2.showOpenDialog(sourcePanel) == JFileChooser.APPROVE_OPTION) {
        oldSourceFolderField.setText(chooser2.getSelectedFile().getAbsolutePath());
        BurpPropertiesManager.getBurpPropertiesManager().setOldSourceFolder(oldSourceFolderField.getText());
      }
    }
  }
);
  oldSourceFolderField=addTextFieldToGridBagLayout(""String_Node_Str"",sourcePanel,yPosition++,BurpPropertiesManager.OLD_SOURCE_FOLDER_KEY,oldSourceFolderBrowseButton);
  return sourcePanel;
}"
